
stm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b78  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002c84  08002c84  00012c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cb0  08002cb0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002cb0  08002cb0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002cb0  08002cb0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08002cb0  08002cb0  00012cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cb8  08002cb8  00012cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002cbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000444  20000070  08002d2c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004b4  08002d2c  000204b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a55e  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001eea  00000000  00000000  0002a5f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000818  00000000  00000000  0002c4e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000720  00000000  00000000  0002cd00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016791  00000000  00000000  0002d420  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007a60  00000000  00000000  00043bb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006c176  00000000  00000000  0004b611  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b7787  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021f4  00000000  00000000  000b7804  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c6c 	.word	0x08002c6c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002c6c 	.word	0x08002c6c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fbac 	bl	80008ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f80d 	bl	8000172 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8da 	bl	8000310 <MX_GPIO_Init>
  MX_DMA_Init();
 800015c:	f000 f8a2 	bl	80002a4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000160:	f000 f84c 	bl	80001fc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000164:	f000 f874 	bl	8000250 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8000168:	f002 f894 	bl	8002294 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 800016c:	f002 f8b4 	bl	80022d8 <loop>
 8000170:	e7fc      	b.n	800016c <main+0x20>

08000172 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000172:	b580      	push	{r7, lr}
 8000174:	b090      	sub	sp, #64	; 0x40
 8000176:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000178:	f107 0318 	add.w	r3, r7, #24
 800017c:	2228      	movs	r2, #40	; 0x28
 800017e:	2100      	movs	r1, #0
 8000180:	4618      	mov	r0, r3
 8000182:	f002 fc6e 	bl	8002a62 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000186:	1d3b      	adds	r3, r7, #4
 8000188:	2200      	movs	r2, #0
 800018a:	601a      	str	r2, [r3, #0]
 800018c:	605a      	str	r2, [r3, #4]
 800018e:	609a      	str	r2, [r3, #8]
 8000190:	60da      	str	r2, [r3, #12]
 8000192:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000194:	2301      	movs	r3, #1
 8000196:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000198:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800019c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800019e:	2300      	movs	r3, #0
 80001a0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a2:	2301      	movs	r3, #1
 80001a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001a6:	2302      	movs	r3, #2
 80001a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001b0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001b6:	f107 0318 	add.w	r3, r7, #24
 80001ba:	4618      	mov	r0, r3
 80001bc:	f001 f8bc 	bl	8001338 <HAL_RCC_OscConfig>
 80001c0:	4603      	mov	r3, r0
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d001      	beq.n	80001ca <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001c6:	f000 f911 	bl	80003ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ca:	230f      	movs	r3, #15
 80001cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001ce:	2302      	movs	r3, #2
 80001d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d2:	2300      	movs	r3, #0
 80001d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001dc:	2300      	movs	r3, #0
 80001de:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001e0:	1d3b      	adds	r3, r7, #4
 80001e2:	2102      	movs	r1, #2
 80001e4:	4618      	mov	r0, r3
 80001e6:	f001 fb27 	bl	8001838 <HAL_RCC_ClockConfig>
 80001ea:	4603      	mov	r3, r0
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d001      	beq.n	80001f4 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80001f0:	f000 f8fc 	bl	80003ec <Error_Handler>
  }
}
 80001f4:	bf00      	nop
 80001f6:	3740      	adds	r7, #64	; 0x40
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}

080001fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000200:	4b11      	ldr	r3, [pc, #68]	; (8000248 <MX_USART2_UART_Init+0x4c>)
 8000202:	4a12      	ldr	r2, [pc, #72]	; (800024c <MX_USART2_UART_Init+0x50>)
 8000204:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000206:	4b10      	ldr	r3, [pc, #64]	; (8000248 <MX_USART2_UART_Init+0x4c>)
 8000208:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800020c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800020e:	4b0e      	ldr	r3, [pc, #56]	; (8000248 <MX_USART2_UART_Init+0x4c>)
 8000210:	2200      	movs	r2, #0
 8000212:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000214:	4b0c      	ldr	r3, [pc, #48]	; (8000248 <MX_USART2_UART_Init+0x4c>)
 8000216:	2200      	movs	r2, #0
 8000218:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800021a:	4b0b      	ldr	r3, [pc, #44]	; (8000248 <MX_USART2_UART_Init+0x4c>)
 800021c:	2200      	movs	r2, #0
 800021e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000220:	4b09      	ldr	r3, [pc, #36]	; (8000248 <MX_USART2_UART_Init+0x4c>)
 8000222:	220c      	movs	r2, #12
 8000224:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000226:	4b08      	ldr	r3, [pc, #32]	; (8000248 <MX_USART2_UART_Init+0x4c>)
 8000228:	2200      	movs	r2, #0
 800022a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800022c:	4b06      	ldr	r3, [pc, #24]	; (8000248 <MX_USART2_UART_Init+0x4c>)
 800022e:	2200      	movs	r2, #0
 8000230:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000232:	4805      	ldr	r0, [pc, #20]	; (8000248 <MX_USART2_UART_Init+0x4c>)
 8000234:	f001 fc9c 	bl	8001b70 <HAL_UART_Init>
 8000238:	4603      	mov	r3, r0
 800023a:	2b00      	cmp	r3, #0
 800023c:	d001      	beq.n	8000242 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800023e:	f000 f8d5 	bl	80003ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000242:	bf00      	nop
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	2000046c 	.word	0x2000046c
 800024c:	40004400 	.word	0x40004400

08000250 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000254:	4b11      	ldr	r3, [pc, #68]	; (800029c <MX_USART3_UART_Init+0x4c>)
 8000256:	4a12      	ldr	r2, [pc, #72]	; (80002a0 <MX_USART3_UART_Init+0x50>)
 8000258:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800025a:	4b10      	ldr	r3, [pc, #64]	; (800029c <MX_USART3_UART_Init+0x4c>)
 800025c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000260:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000262:	4b0e      	ldr	r3, [pc, #56]	; (800029c <MX_USART3_UART_Init+0x4c>)
 8000264:	2200      	movs	r2, #0
 8000266:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000268:	4b0c      	ldr	r3, [pc, #48]	; (800029c <MX_USART3_UART_Init+0x4c>)
 800026a:	2200      	movs	r2, #0
 800026c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800026e:	4b0b      	ldr	r3, [pc, #44]	; (800029c <MX_USART3_UART_Init+0x4c>)
 8000270:	2200      	movs	r2, #0
 8000272:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000274:	4b09      	ldr	r3, [pc, #36]	; (800029c <MX_USART3_UART_Init+0x4c>)
 8000276:	220c      	movs	r2, #12
 8000278:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800027a:	4b08      	ldr	r3, [pc, #32]	; (800029c <MX_USART3_UART_Init+0x4c>)
 800027c:	2200      	movs	r2, #0
 800027e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000280:	4b06      	ldr	r3, [pc, #24]	; (800029c <MX_USART3_UART_Init+0x4c>)
 8000282:	2200      	movs	r2, #0
 8000284:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000286:	4805      	ldr	r0, [pc, #20]	; (800029c <MX_USART3_UART_Init+0x4c>)
 8000288:	f001 fc72 	bl	8001b70 <HAL_UART_Init>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000292:	f000 f8ab 	bl	80003ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000296:	bf00      	nop
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	200003a4 	.word	0x200003a4
 80002a0:	40004800 	.word	0x40004800

080002a4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002aa:	4b18      	ldr	r3, [pc, #96]	; (800030c <MX_DMA_Init+0x68>)
 80002ac:	695b      	ldr	r3, [r3, #20]
 80002ae:	4a17      	ldr	r2, [pc, #92]	; (800030c <MX_DMA_Init+0x68>)
 80002b0:	f043 0301 	orr.w	r3, r3, #1
 80002b4:	6153      	str	r3, [r2, #20]
 80002b6:	4b15      	ldr	r3, [pc, #84]	; (800030c <MX_DMA_Init+0x68>)
 80002b8:	695b      	ldr	r3, [r3, #20]
 80002ba:	f003 0301 	and.w	r3, r3, #1
 80002be:	607b      	str	r3, [r7, #4]
 80002c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80002c2:	2200      	movs	r2, #0
 80002c4:	2100      	movs	r1, #0
 80002c6:	200c      	movs	r0, #12
 80002c8:	f000 fc29 	bl	8000b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80002cc:	200c      	movs	r0, #12
 80002ce:	f000 fc42 	bl	8000b56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80002d2:	2200      	movs	r2, #0
 80002d4:	2100      	movs	r1, #0
 80002d6:	200d      	movs	r0, #13
 80002d8:	f000 fc21 	bl	8000b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80002dc:	200d      	movs	r0, #13
 80002de:	f000 fc3a 	bl	8000b56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80002e2:	2200      	movs	r2, #0
 80002e4:	2100      	movs	r1, #0
 80002e6:	2010      	movs	r0, #16
 80002e8:	f000 fc19 	bl	8000b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80002ec:	2010      	movs	r0, #16
 80002ee:	f000 fc32 	bl	8000b56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80002f2:	2200      	movs	r2, #0
 80002f4:	2100      	movs	r1, #0
 80002f6:	2011      	movs	r0, #17
 80002f8:	f000 fc11 	bl	8000b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80002fc:	2011      	movs	r0, #17
 80002fe:	f000 fc2a 	bl	8000b56 <HAL_NVIC_EnableIRQ>

}
 8000302:	bf00      	nop
 8000304:	3708      	adds	r7, #8
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	40021000 	.word	0x40021000

08000310 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b088      	sub	sp, #32
 8000314:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000316:	f107 0310 	add.w	r3, r7, #16
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	605a      	str	r2, [r3, #4]
 8000320:	609a      	str	r2, [r3, #8]
 8000322:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000324:	4b24      	ldr	r3, [pc, #144]	; (80003b8 <MX_GPIO_Init+0xa8>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	4a23      	ldr	r2, [pc, #140]	; (80003b8 <MX_GPIO_Init+0xa8>)
 800032a:	f043 0310 	orr.w	r3, r3, #16
 800032e:	6193      	str	r3, [r2, #24]
 8000330:	4b21      	ldr	r3, [pc, #132]	; (80003b8 <MX_GPIO_Init+0xa8>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	f003 0310 	and.w	r3, r3, #16
 8000338:	60fb      	str	r3, [r7, #12]
 800033a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800033c:	4b1e      	ldr	r3, [pc, #120]	; (80003b8 <MX_GPIO_Init+0xa8>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	4a1d      	ldr	r2, [pc, #116]	; (80003b8 <MX_GPIO_Init+0xa8>)
 8000342:	f043 0320 	orr.w	r3, r3, #32
 8000346:	6193      	str	r3, [r2, #24]
 8000348:	4b1b      	ldr	r3, [pc, #108]	; (80003b8 <MX_GPIO_Init+0xa8>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	f003 0320 	and.w	r3, r3, #32
 8000350:	60bb      	str	r3, [r7, #8]
 8000352:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000354:	4b18      	ldr	r3, [pc, #96]	; (80003b8 <MX_GPIO_Init+0xa8>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	4a17      	ldr	r2, [pc, #92]	; (80003b8 <MX_GPIO_Init+0xa8>)
 800035a:	f043 0304 	orr.w	r3, r3, #4
 800035e:	6193      	str	r3, [r2, #24]
 8000360:	4b15      	ldr	r3, [pc, #84]	; (80003b8 <MX_GPIO_Init+0xa8>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	f003 0304 	and.w	r3, r3, #4
 8000368:	607b      	str	r3, [r7, #4]
 800036a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800036c:	4b12      	ldr	r3, [pc, #72]	; (80003b8 <MX_GPIO_Init+0xa8>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	4a11      	ldr	r2, [pc, #68]	; (80003b8 <MX_GPIO_Init+0xa8>)
 8000372:	f043 0308 	orr.w	r3, r3, #8
 8000376:	6193      	str	r3, [r2, #24]
 8000378:	4b0f      	ldr	r3, [pc, #60]	; (80003b8 <MX_GPIO_Init+0xa8>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	f003 0308 	and.w	r3, r3, #8
 8000380:	603b      	str	r3, [r7, #0]
 8000382:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800038a:	480c      	ldr	r0, [pc, #48]	; (80003bc <MX_GPIO_Init+0xac>)
 800038c:	f000 ffbc 	bl	8001308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000390:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000394:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000396:	2301      	movs	r3, #1
 8000398:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800039a:	2300      	movs	r3, #0
 800039c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800039e:	2302      	movs	r3, #2
 80003a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003a2:	f107 0310 	add.w	r3, r7, #16
 80003a6:	4619      	mov	r1, r3
 80003a8:	4804      	ldr	r0, [pc, #16]	; (80003bc <MX_GPIO_Init+0xac>)
 80003aa:	f000 fe53 	bl	8001054 <HAL_GPIO_Init>

}
 80003ae:	bf00      	nop
 80003b0:	3720      	adds	r7, #32
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	40021000 	.word	0x40021000
 80003bc:	40011000 	.word	0x40011000

080003c0 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
  HAL_UART_AbortTransmit_IT(huart);
 80003c8:	6878      	ldr	r0, [r7, #4]
 80003ca:	f001 fd0b 	bl	8001de4 <HAL_UART_AbortTransmit_IT>
}
 80003ce:	bf00      	nop
 80003d0:	3708      	adds	r7, #8
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}

080003d6 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80003d6:	b580      	push	{r7, lr}
 80003d8:	b082      	sub	sp, #8
 80003da:	af00      	add	r7, sp, #0
 80003dc:	6078      	str	r0, [r7, #4]
  UART_CallBack(huart);
 80003de:	6878      	ldr	r0, [r7, #4]
 80003e0:	f001 ffae 	bl	8002340 <UART_CallBack>
}
 80003e4:	bf00      	nop
 80003e6:	3708      	adds	r7, #8
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}

080003ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003f0:	bf00      	nop
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bc80      	pop	{r7}
 80003f6:	4770      	bx	lr

080003f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b085      	sub	sp, #20
 80003fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003fe:	4b15      	ldr	r3, [pc, #84]	; (8000454 <HAL_MspInit+0x5c>)
 8000400:	699b      	ldr	r3, [r3, #24]
 8000402:	4a14      	ldr	r2, [pc, #80]	; (8000454 <HAL_MspInit+0x5c>)
 8000404:	f043 0301 	orr.w	r3, r3, #1
 8000408:	6193      	str	r3, [r2, #24]
 800040a:	4b12      	ldr	r3, [pc, #72]	; (8000454 <HAL_MspInit+0x5c>)
 800040c:	699b      	ldr	r3, [r3, #24]
 800040e:	f003 0301 	and.w	r3, r3, #1
 8000412:	60bb      	str	r3, [r7, #8]
 8000414:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000416:	4b0f      	ldr	r3, [pc, #60]	; (8000454 <HAL_MspInit+0x5c>)
 8000418:	69db      	ldr	r3, [r3, #28]
 800041a:	4a0e      	ldr	r2, [pc, #56]	; (8000454 <HAL_MspInit+0x5c>)
 800041c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000420:	61d3      	str	r3, [r2, #28]
 8000422:	4b0c      	ldr	r3, [pc, #48]	; (8000454 <HAL_MspInit+0x5c>)
 8000424:	69db      	ldr	r3, [r3, #28]
 8000426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800042a:	607b      	str	r3, [r7, #4]
 800042c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800042e:	4b0a      	ldr	r3, [pc, #40]	; (8000458 <HAL_MspInit+0x60>)
 8000430:	685b      	ldr	r3, [r3, #4]
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800043a:	60fb      	str	r3, [r7, #12]
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000442:	60fb      	str	r3, [r7, #12]
 8000444:	4a04      	ldr	r2, [pc, #16]	; (8000458 <HAL_MspInit+0x60>)
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800044a:	bf00      	nop
 800044c:	3714      	adds	r7, #20
 800044e:	46bd      	mov	sp, r7
 8000450:	bc80      	pop	{r7}
 8000452:	4770      	bx	lr
 8000454:	40021000 	.word	0x40021000
 8000458:	40010000 	.word	0x40010000

0800045c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b08a      	sub	sp, #40	; 0x28
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000464:	f107 0318 	add.w	r3, r7, #24
 8000468:	2200      	movs	r2, #0
 800046a:	601a      	str	r2, [r3, #0]
 800046c:	605a      	str	r2, [r3, #4]
 800046e:	609a      	str	r2, [r3, #8]
 8000470:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4a83      	ldr	r2, [pc, #524]	; (8000684 <HAL_UART_MspInit+0x228>)
 8000478:	4293      	cmp	r3, r2
 800047a:	d17c      	bne.n	8000576 <HAL_UART_MspInit+0x11a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800047c:	4b82      	ldr	r3, [pc, #520]	; (8000688 <HAL_UART_MspInit+0x22c>)
 800047e:	69db      	ldr	r3, [r3, #28]
 8000480:	4a81      	ldr	r2, [pc, #516]	; (8000688 <HAL_UART_MspInit+0x22c>)
 8000482:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000486:	61d3      	str	r3, [r2, #28]
 8000488:	4b7f      	ldr	r3, [pc, #508]	; (8000688 <HAL_UART_MspInit+0x22c>)
 800048a:	69db      	ldr	r3, [r3, #28]
 800048c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000490:	617b      	str	r3, [r7, #20]
 8000492:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000494:	4b7c      	ldr	r3, [pc, #496]	; (8000688 <HAL_UART_MspInit+0x22c>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	4a7b      	ldr	r2, [pc, #492]	; (8000688 <HAL_UART_MspInit+0x22c>)
 800049a:	f043 0304 	orr.w	r3, r3, #4
 800049e:	6193      	str	r3, [r2, #24]
 80004a0:	4b79      	ldr	r3, [pc, #484]	; (8000688 <HAL_UART_MspInit+0x22c>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	f003 0304 	and.w	r3, r3, #4
 80004a8:	613b      	str	r3, [r7, #16]
 80004aa:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80004ac:	2304      	movs	r3, #4
 80004ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004b0:	2302      	movs	r3, #2
 80004b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004b4:	2303      	movs	r3, #3
 80004b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b8:	f107 0318 	add.w	r3, r7, #24
 80004bc:	4619      	mov	r1, r3
 80004be:	4873      	ldr	r0, [pc, #460]	; (800068c <HAL_UART_MspInit+0x230>)
 80004c0:	f000 fdc8 	bl	8001054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80004c4:	2308      	movs	r3, #8
 80004c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004c8:	2300      	movs	r3, #0
 80004ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004cc:	2300      	movs	r3, #0
 80004ce:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d0:	f107 0318 	add.w	r3, r7, #24
 80004d4:	4619      	mov	r1, r3
 80004d6:	486d      	ldr	r0, [pc, #436]	; (800068c <HAL_UART_MspInit+0x230>)
 80004d8:	f000 fdbc 	bl	8001054 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80004dc:	4b6c      	ldr	r3, [pc, #432]	; (8000690 <HAL_UART_MspInit+0x234>)
 80004de:	4a6d      	ldr	r2, [pc, #436]	; (8000694 <HAL_UART_MspInit+0x238>)
 80004e0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80004e2:	4b6b      	ldr	r3, [pc, #428]	; (8000690 <HAL_UART_MspInit+0x234>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80004e8:	4b69      	ldr	r3, [pc, #420]	; (8000690 <HAL_UART_MspInit+0x234>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80004ee:	4b68      	ldr	r3, [pc, #416]	; (8000690 <HAL_UART_MspInit+0x234>)
 80004f0:	2280      	movs	r2, #128	; 0x80
 80004f2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80004f4:	4b66      	ldr	r3, [pc, #408]	; (8000690 <HAL_UART_MspInit+0x234>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80004fa:	4b65      	ldr	r3, [pc, #404]	; (8000690 <HAL_UART_MspInit+0x234>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000500:	4b63      	ldr	r3, [pc, #396]	; (8000690 <HAL_UART_MspInit+0x234>)
 8000502:	2220      	movs	r2, #32
 8000504:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000506:	4b62      	ldr	r3, [pc, #392]	; (8000690 <HAL_UART_MspInit+0x234>)
 8000508:	2200      	movs	r2, #0
 800050a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800050c:	4860      	ldr	r0, [pc, #384]	; (8000690 <HAL_UART_MspInit+0x234>)
 800050e:	f000 fb3d 	bl	8000b8c <HAL_DMA_Init>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8000518:	f7ff ff68 	bl	80003ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	4a5c      	ldr	r2, [pc, #368]	; (8000690 <HAL_UART_MspInit+0x234>)
 8000520:	635a      	str	r2, [r3, #52]	; 0x34
 8000522:	4a5b      	ldr	r2, [pc, #364]	; (8000690 <HAL_UART_MspInit+0x234>)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000528:	4b5b      	ldr	r3, [pc, #364]	; (8000698 <HAL_UART_MspInit+0x23c>)
 800052a:	4a5c      	ldr	r2, [pc, #368]	; (800069c <HAL_UART_MspInit+0x240>)
 800052c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800052e:	4b5a      	ldr	r3, [pc, #360]	; (8000698 <HAL_UART_MspInit+0x23c>)
 8000530:	2210      	movs	r2, #16
 8000532:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000534:	4b58      	ldr	r3, [pc, #352]	; (8000698 <HAL_UART_MspInit+0x23c>)
 8000536:	2200      	movs	r2, #0
 8000538:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800053a:	4b57      	ldr	r3, [pc, #348]	; (8000698 <HAL_UART_MspInit+0x23c>)
 800053c:	2280      	movs	r2, #128	; 0x80
 800053e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000540:	4b55      	ldr	r3, [pc, #340]	; (8000698 <HAL_UART_MspInit+0x23c>)
 8000542:	2200      	movs	r2, #0
 8000544:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000546:	4b54      	ldr	r3, [pc, #336]	; (8000698 <HAL_UART_MspInit+0x23c>)
 8000548:	2200      	movs	r2, #0
 800054a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 800054c:	4b52      	ldr	r3, [pc, #328]	; (8000698 <HAL_UART_MspInit+0x23c>)
 800054e:	2220      	movs	r2, #32
 8000550:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000552:	4b51      	ldr	r3, [pc, #324]	; (8000698 <HAL_UART_MspInit+0x23c>)
 8000554:	2200      	movs	r2, #0
 8000556:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000558:	484f      	ldr	r0, [pc, #316]	; (8000698 <HAL_UART_MspInit+0x23c>)
 800055a:	f000 fb17 	bl	8000b8c <HAL_DMA_Init>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8000564:	f7ff ff42 	bl	80003ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	4a4b      	ldr	r2, [pc, #300]	; (8000698 <HAL_UART_MspInit+0x23c>)
 800056c:	631a      	str	r2, [r3, #48]	; 0x30
 800056e:	4a4a      	ldr	r2, [pc, #296]	; (8000698 <HAL_UART_MspInit+0x23c>)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000574:	e082      	b.n	800067c <HAL_UART_MspInit+0x220>
  else if(huart->Instance==USART3)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a49      	ldr	r2, [pc, #292]	; (80006a0 <HAL_UART_MspInit+0x244>)
 800057c:	4293      	cmp	r3, r2
 800057e:	d17d      	bne.n	800067c <HAL_UART_MspInit+0x220>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000580:	4b41      	ldr	r3, [pc, #260]	; (8000688 <HAL_UART_MspInit+0x22c>)
 8000582:	69db      	ldr	r3, [r3, #28]
 8000584:	4a40      	ldr	r2, [pc, #256]	; (8000688 <HAL_UART_MspInit+0x22c>)
 8000586:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800058a:	61d3      	str	r3, [r2, #28]
 800058c:	4b3e      	ldr	r3, [pc, #248]	; (8000688 <HAL_UART_MspInit+0x22c>)
 800058e:	69db      	ldr	r3, [r3, #28]
 8000590:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000598:	4b3b      	ldr	r3, [pc, #236]	; (8000688 <HAL_UART_MspInit+0x22c>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	4a3a      	ldr	r2, [pc, #232]	; (8000688 <HAL_UART_MspInit+0x22c>)
 800059e:	f043 0308 	orr.w	r3, r3, #8
 80005a2:	6193      	str	r3, [r2, #24]
 80005a4:	4b38      	ldr	r3, [pc, #224]	; (8000688 <HAL_UART_MspInit+0x22c>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	f003 0308 	and.w	r3, r3, #8
 80005ac:	60bb      	str	r3, [r7, #8]
 80005ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005b6:	2302      	movs	r3, #2
 80005b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ba:	2303      	movs	r3, #3
 80005bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005be:	f107 0318 	add.w	r3, r7, #24
 80005c2:	4619      	mov	r1, r3
 80005c4:	4837      	ldr	r0, [pc, #220]	; (80006a4 <HAL_UART_MspInit+0x248>)
 80005c6:	f000 fd45 	bl	8001054 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80005ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80005ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005d0:	2300      	movs	r3, #0
 80005d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d4:	2300      	movs	r3, #0
 80005d6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d8:	f107 0318 	add.w	r3, r7, #24
 80005dc:	4619      	mov	r1, r3
 80005de:	4831      	ldr	r0, [pc, #196]	; (80006a4 <HAL_UART_MspInit+0x248>)
 80005e0:	f000 fd38 	bl	8001054 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80005e4:	4b30      	ldr	r3, [pc, #192]	; (80006a8 <HAL_UART_MspInit+0x24c>)
 80005e6:	4a31      	ldr	r2, [pc, #196]	; (80006ac <HAL_UART_MspInit+0x250>)
 80005e8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005ea:	4b2f      	ldr	r3, [pc, #188]	; (80006a8 <HAL_UART_MspInit+0x24c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80005f0:	4b2d      	ldr	r3, [pc, #180]	; (80006a8 <HAL_UART_MspInit+0x24c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80005f6:	4b2c      	ldr	r3, [pc, #176]	; (80006a8 <HAL_UART_MspInit+0x24c>)
 80005f8:	2280      	movs	r2, #128	; 0x80
 80005fa:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80005fc:	4b2a      	ldr	r3, [pc, #168]	; (80006a8 <HAL_UART_MspInit+0x24c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000602:	4b29      	ldr	r3, [pc, #164]	; (80006a8 <HAL_UART_MspInit+0x24c>)
 8000604:	2200      	movs	r2, #0
 8000606:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8000608:	4b27      	ldr	r3, [pc, #156]	; (80006a8 <HAL_UART_MspInit+0x24c>)
 800060a:	2220      	movs	r2, #32
 800060c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800060e:	4b26      	ldr	r3, [pc, #152]	; (80006a8 <HAL_UART_MspInit+0x24c>)
 8000610:	2200      	movs	r2, #0
 8000612:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000614:	4824      	ldr	r0, [pc, #144]	; (80006a8 <HAL_UART_MspInit+0x24c>)
 8000616:	f000 fab9 	bl	8000b8c <HAL_DMA_Init>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <HAL_UART_MspInit+0x1c8>
      Error_Handler();
 8000620:	f7ff fee4 	bl	80003ec <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4a20      	ldr	r2, [pc, #128]	; (80006a8 <HAL_UART_MspInit+0x24c>)
 8000628:	635a      	str	r2, [r3, #52]	; 0x34
 800062a:	4a1f      	ldr	r2, [pc, #124]	; (80006a8 <HAL_UART_MspInit+0x24c>)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8000630:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <HAL_UART_MspInit+0x254>)
 8000632:	4a20      	ldr	r2, [pc, #128]	; (80006b4 <HAL_UART_MspInit+0x258>)
 8000634:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000636:	4b1e      	ldr	r3, [pc, #120]	; (80006b0 <HAL_UART_MspInit+0x254>)
 8000638:	2210      	movs	r2, #16
 800063a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800063c:	4b1c      	ldr	r3, [pc, #112]	; (80006b0 <HAL_UART_MspInit+0x254>)
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000642:	4b1b      	ldr	r3, [pc, #108]	; (80006b0 <HAL_UART_MspInit+0x254>)
 8000644:	2280      	movs	r2, #128	; 0x80
 8000646:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000648:	4b19      	ldr	r3, [pc, #100]	; (80006b0 <HAL_UART_MspInit+0x254>)
 800064a:	2200      	movs	r2, #0
 800064c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800064e:	4b18      	ldr	r3, [pc, #96]	; (80006b0 <HAL_UART_MspInit+0x254>)
 8000650:	2200      	movs	r2, #0
 8000652:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_CIRCULAR;
 8000654:	4b16      	ldr	r3, [pc, #88]	; (80006b0 <HAL_UART_MspInit+0x254>)
 8000656:	2220      	movs	r2, #32
 8000658:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800065a:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <HAL_UART_MspInit+0x254>)
 800065c:	2200      	movs	r2, #0
 800065e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000660:	4813      	ldr	r0, [pc, #76]	; (80006b0 <HAL_UART_MspInit+0x254>)
 8000662:	f000 fa93 	bl	8000b8c <HAL_DMA_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <HAL_UART_MspInit+0x214>
      Error_Handler();
 800066c:	f7ff febe 	bl	80003ec <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	4a0f      	ldr	r2, [pc, #60]	; (80006b0 <HAL_UART_MspInit+0x254>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
 8000676:	4a0e      	ldr	r2, [pc, #56]	; (80006b0 <HAL_UART_MspInit+0x254>)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	6253      	str	r3, [r2, #36]	; 0x24
}
 800067c:	bf00      	nop
 800067e:	3728      	adds	r7, #40	; 0x28
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40004400 	.word	0x40004400
 8000688:	40021000 	.word	0x40021000
 800068c:	40010800 	.word	0x40010800
 8000690:	2000031c 	.word	0x2000031c
 8000694:	4002006c 	.word	0x4002006c
 8000698:	20000428 	.word	0x20000428
 800069c:	40020080 	.word	0x40020080
 80006a0:	40004800 	.word	0x40004800
 80006a4:	40010c00 	.word	0x40010c00
 80006a8:	20000360 	.word	0x20000360
 80006ac:	40020030 	.word	0x40020030
 80006b0:	200003e4 	.word	0x200003e4
 80006b4:	4002001c 	.word	0x4002001c

080006b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	bc80      	pop	{r7}
 80006c2:	4770      	bx	lr

080006c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006c8:	e7fe      	b.n	80006c8 <HardFault_Handler+0x4>

080006ca <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006ca:	b480      	push	{r7}
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006ce:	e7fe      	b.n	80006ce <MemManage_Handler+0x4>

080006d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <BusFault_Handler+0x4>

080006d6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006da:	e7fe      	b.n	80006da <UsageFault_Handler+0x4>

080006dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bc80      	pop	{r7}
 80006e6:	4770      	bx	lr

080006e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ec:	bf00      	nop
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bc80      	pop	{r7}
 80006f2:	4770      	bx	lr

080006f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr

08000700 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000704:	f000 f918 	bl	8000938 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}

0800070c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000710:	4802      	ldr	r0, [pc, #8]	; (800071c <DMA1_Channel2_IRQHandler+0x10>)
 8000712:	f000 fb6b 	bl	8000dec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	200003e4 	.word	0x200003e4

08000720 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000724:	4802      	ldr	r0, [pc, #8]	; (8000730 <DMA1_Channel3_IRQHandler+0x10>)
 8000726:	f000 fb61 	bl	8000dec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000360 	.word	0x20000360

08000734 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000738:	4802      	ldr	r0, [pc, #8]	; (8000744 <DMA1_Channel6_IRQHandler+0x10>)
 800073a:	f000 fb57 	bl	8000dec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	2000031c 	.word	0x2000031c

08000748 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800074c:	4802      	ldr	r0, [pc, #8]	; (8000758 <DMA1_Channel7_IRQHandler+0x10>)
 800074e:	f000 fb4d 	bl	8000dec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000428 	.word	0x20000428

0800075c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
	return 1;
 8000760:	2301      	movs	r3, #1
}
 8000762:	4618      	mov	r0, r3
 8000764:	46bd      	mov	sp, r7
 8000766:	bc80      	pop	{r7}
 8000768:	4770      	bx	lr

0800076a <_kill>:

int _kill(int pid, int sig)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	b082      	sub	sp, #8
 800076e:	af00      	add	r7, sp, #0
 8000770:	6078      	str	r0, [r7, #4]
 8000772:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000774:	f002 f930 	bl	80029d8 <__errno>
 8000778:	4602      	mov	r2, r0
 800077a:	2316      	movs	r3, #22
 800077c:	6013      	str	r3, [r2, #0]
	return -1;
 800077e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}

0800078a <_exit>:

void _exit (int status)
{
 800078a:	b580      	push	{r7, lr}
 800078c:	b082      	sub	sp, #8
 800078e:	af00      	add	r7, sp, #0
 8000790:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000792:	f04f 31ff 	mov.w	r1, #4294967295
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	f7ff ffe7 	bl	800076a <_kill>
	while (1) {}		/* Make sure we hang here */
 800079c:	e7fe      	b.n	800079c <_exit+0x12>
	...

080007a0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80007a8:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <_sbrk+0x50>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d102      	bne.n	80007b6 <_sbrk+0x16>
		heap_end = &end;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <_sbrk+0x50>)
 80007b2:	4a10      	ldr	r2, [pc, #64]	; (80007f4 <_sbrk+0x54>)
 80007b4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <_sbrk+0x50>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <_sbrk+0x50>)
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	4413      	add	r3, r2
 80007c4:	466a      	mov	r2, sp
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d907      	bls.n	80007da <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80007ca:	f002 f905 	bl	80029d8 <__errno>
 80007ce:	4602      	mov	r2, r0
 80007d0:	230c      	movs	r3, #12
 80007d2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80007d4:	f04f 33ff 	mov.w	r3, #4294967295
 80007d8:	e006      	b.n	80007e8 <_sbrk+0x48>
	}

	heap_end += incr;
 80007da:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <_sbrk+0x50>)
 80007dc:	681a      	ldr	r2, [r3, #0]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4413      	add	r3, r2
 80007e2:	4a03      	ldr	r2, [pc, #12]	; (80007f0 <_sbrk+0x50>)
 80007e4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80007e6:	68fb      	ldr	r3, [r7, #12]
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3710      	adds	r7, #16
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	2000008c 	.word	0x2000008c
 80007f4:	200004b8 	.word	0x200004b8

080007f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80007fc:	4b15      	ldr	r3, [pc, #84]	; (8000854 <SystemInit+0x5c>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a14      	ldr	r2, [pc, #80]	; (8000854 <SystemInit+0x5c>)
 8000802:	f043 0301 	orr.w	r3, r3, #1
 8000806:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000808:	4b12      	ldr	r3, [pc, #72]	; (8000854 <SystemInit+0x5c>)
 800080a:	685a      	ldr	r2, [r3, #4]
 800080c:	4911      	ldr	r1, [pc, #68]	; (8000854 <SystemInit+0x5c>)
 800080e:	4b12      	ldr	r3, [pc, #72]	; (8000858 <SystemInit+0x60>)
 8000810:	4013      	ands	r3, r2
 8000812:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <SystemInit+0x5c>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a0e      	ldr	r2, [pc, #56]	; (8000854 <SystemInit+0x5c>)
 800081a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800081e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000822:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000824:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <SystemInit+0x5c>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a0a      	ldr	r2, [pc, #40]	; (8000854 <SystemInit+0x5c>)
 800082a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800082e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000830:	4b08      	ldr	r3, [pc, #32]	; (8000854 <SystemInit+0x5c>)
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	4a07      	ldr	r2, [pc, #28]	; (8000854 <SystemInit+0x5c>)
 8000836:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800083a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800083c:	4b05      	ldr	r3, [pc, #20]	; (8000854 <SystemInit+0x5c>)
 800083e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000842:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000844:	4b05      	ldr	r3, [pc, #20]	; (800085c <SystemInit+0x64>)
 8000846:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800084a:	609a      	str	r2, [r3, #8]
#endif 
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr
 8000854:	40021000 	.word	0x40021000
 8000858:	f8ff0000 	.word	0xf8ff0000
 800085c:	e000ed00 	.word	0xe000ed00

08000860 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000860:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000862:	e003      	b.n	800086c <LoopCopyDataInit>

08000864 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000864:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000866:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000868:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800086a:	3104      	adds	r1, #4

0800086c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800086c:	480a      	ldr	r0, [pc, #40]	; (8000898 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000870:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000872:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000874:	d3f6      	bcc.n	8000864 <CopyDataInit>
  ldr r2, =_sbss
 8000876:	4a0a      	ldr	r2, [pc, #40]	; (80008a0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000878:	e002      	b.n	8000880 <LoopFillZerobss>

0800087a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800087a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800087c:	f842 3b04 	str.w	r3, [r2], #4

08000880 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000880:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000882:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000884:	d3f9      	bcc.n	800087a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000886:	f7ff ffb7 	bl	80007f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800088a:	f002 f8ab 	bl	80029e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800088e:	f7ff fc5d 	bl	800014c <main>
  bx lr
 8000892:	4770      	bx	lr
  ldr r3, =_sidata
 8000894:	08002cbc 	.word	0x08002cbc
  ldr r0, =_sdata
 8000898:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800089c:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80008a0:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80008a4:	200004b4 	.word	0x200004b4

080008a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008a8:	e7fe      	b.n	80008a8 <ADC1_2_IRQHandler>
	...

080008ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008b0:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <HAL_Init+0x28>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a07      	ldr	r2, [pc, #28]	; (80008d4 <HAL_Init+0x28>)
 80008b6:	f043 0310 	orr.w	r3, r3, #16
 80008ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008bc:	2003      	movs	r0, #3
 80008be:	f000 f923 	bl	8000b08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008c2:	2000      	movs	r0, #0
 80008c4:	f000 f808 	bl	80008d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008c8:	f7ff fd96 	bl	80003f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008cc:	2300      	movs	r3, #0
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40022000 	.word	0x40022000

080008d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <HAL_InitTick+0x54>)
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <HAL_InitTick+0x58>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	4619      	mov	r1, r3
 80008ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80008f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 f93b 	bl	8000b72 <HAL_SYSTICK_Config>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000902:	2301      	movs	r3, #1
 8000904:	e00e      	b.n	8000924 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2b0f      	cmp	r3, #15
 800090a:	d80a      	bhi.n	8000922 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800090c:	2200      	movs	r2, #0
 800090e:	6879      	ldr	r1, [r7, #4]
 8000910:	f04f 30ff 	mov.w	r0, #4294967295
 8000914:	f000 f903 	bl	8000b1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000918:	4a06      	ldr	r2, [pc, #24]	; (8000934 <HAL_InitTick+0x5c>)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800091e:	2300      	movs	r3, #0
 8000920:	e000      	b.n	8000924 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000922:	2301      	movs	r3, #1
}
 8000924:	4618      	mov	r0, r3
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000000 	.word	0x20000000
 8000930:	20000008 	.word	0x20000008
 8000934:	20000004 	.word	0x20000004

08000938 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800093c:	4b05      	ldr	r3, [pc, #20]	; (8000954 <HAL_IncTick+0x1c>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	461a      	mov	r2, r3
 8000942:	4b05      	ldr	r3, [pc, #20]	; (8000958 <HAL_IncTick+0x20>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4413      	add	r3, r2
 8000948:	4a03      	ldr	r2, [pc, #12]	; (8000958 <HAL_IncTick+0x20>)
 800094a:	6013      	str	r3, [r2, #0]
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr
 8000954:	20000008 	.word	0x20000008
 8000958:	200004ac 	.word	0x200004ac

0800095c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  return uwTick;
 8000960:	4b02      	ldr	r3, [pc, #8]	; (800096c <HAL_GetTick+0x10>)
 8000962:	681b      	ldr	r3, [r3, #0]
}
 8000964:	4618      	mov	r0, r3
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr
 800096c:	200004ac 	.word	0x200004ac

08000970 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000970:	b480      	push	{r7}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	f003 0307 	and.w	r3, r3, #7
 800097e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <__NVIC_SetPriorityGrouping+0x44>)
 8000982:	68db      	ldr	r3, [r3, #12]
 8000984:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000986:	68ba      	ldr	r2, [r7, #8]
 8000988:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800098c:	4013      	ands	r3, r2
 800098e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000998:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800099c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009a2:	4a04      	ldr	r2, [pc, #16]	; (80009b4 <__NVIC_SetPriorityGrouping+0x44>)
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	60d3      	str	r3, [r2, #12]
}
 80009a8:	bf00      	nop
 80009aa:	3714      	adds	r7, #20
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bc80      	pop	{r7}
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009bc:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <__NVIC_GetPriorityGrouping+0x18>)
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	0a1b      	lsrs	r3, r3, #8
 80009c2:	f003 0307 	and.w	r3, r3, #7
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bc80      	pop	{r7}
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	e000ed00 	.word	0xe000ed00

080009d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	db0b      	blt.n	80009fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	f003 021f 	and.w	r2, r3, #31
 80009ec:	4906      	ldr	r1, [pc, #24]	; (8000a08 <__NVIC_EnableIRQ+0x34>)
 80009ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f2:	095b      	lsrs	r3, r3, #5
 80009f4:	2001      	movs	r0, #1
 80009f6:	fa00 f202 	lsl.w	r2, r0, r2
 80009fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009fe:	bf00      	nop
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr
 8000a08:	e000e100 	.word	0xe000e100

08000a0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	6039      	str	r1, [r7, #0]
 8000a16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	db0a      	blt.n	8000a36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	b2da      	uxtb	r2, r3
 8000a24:	490c      	ldr	r1, [pc, #48]	; (8000a58 <__NVIC_SetPriority+0x4c>)
 8000a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2a:	0112      	lsls	r2, r2, #4
 8000a2c:	b2d2      	uxtb	r2, r2
 8000a2e:	440b      	add	r3, r1
 8000a30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a34:	e00a      	b.n	8000a4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	b2da      	uxtb	r2, r3
 8000a3a:	4908      	ldr	r1, [pc, #32]	; (8000a5c <__NVIC_SetPriority+0x50>)
 8000a3c:	79fb      	ldrb	r3, [r7, #7]
 8000a3e:	f003 030f 	and.w	r3, r3, #15
 8000a42:	3b04      	subs	r3, #4
 8000a44:	0112      	lsls	r2, r2, #4
 8000a46:	b2d2      	uxtb	r2, r2
 8000a48:	440b      	add	r3, r1
 8000a4a:	761a      	strb	r2, [r3, #24]
}
 8000a4c:	bf00      	nop
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bc80      	pop	{r7}
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	e000e100 	.word	0xe000e100
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b089      	sub	sp, #36	; 0x24
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60f8      	str	r0, [r7, #12]
 8000a68:	60b9      	str	r1, [r7, #8]
 8000a6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	f003 0307 	and.w	r3, r3, #7
 8000a72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a74:	69fb      	ldr	r3, [r7, #28]
 8000a76:	f1c3 0307 	rsb	r3, r3, #7
 8000a7a:	2b04      	cmp	r3, #4
 8000a7c:	bf28      	it	cs
 8000a7e:	2304      	movcs	r3, #4
 8000a80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	3304      	adds	r3, #4
 8000a86:	2b06      	cmp	r3, #6
 8000a88:	d902      	bls.n	8000a90 <NVIC_EncodePriority+0x30>
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	3b03      	subs	r3, #3
 8000a8e:	e000      	b.n	8000a92 <NVIC_EncodePriority+0x32>
 8000a90:	2300      	movs	r3, #0
 8000a92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a94:	f04f 32ff 	mov.w	r2, #4294967295
 8000a98:	69bb      	ldr	r3, [r7, #24]
 8000a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9e:	43da      	mvns	r2, r3
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	401a      	ands	r2, r3
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab2:	43d9      	mvns	r1, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab8:	4313      	orrs	r3, r2
         );
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3724      	adds	r7, #36	; 0x24
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr

08000ac4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ad4:	d301      	bcc.n	8000ada <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e00f      	b.n	8000afa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ada:	4a0a      	ldr	r2, [pc, #40]	; (8000b04 <SysTick_Config+0x40>)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ae2:	210f      	movs	r1, #15
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	f7ff ff90 	bl	8000a0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aec:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <SysTick_Config+0x40>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000af2:	4b04      	ldr	r3, [pc, #16]	; (8000b04 <SysTick_Config+0x40>)
 8000af4:	2207      	movs	r2, #7
 8000af6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000af8:	2300      	movs	r3, #0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	e000e010 	.word	0xe000e010

08000b08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f7ff ff2d 	bl	8000970 <__NVIC_SetPriorityGrouping>
}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b086      	sub	sp, #24
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	4603      	mov	r3, r0
 8000b26:	60b9      	str	r1, [r7, #8]
 8000b28:	607a      	str	r2, [r7, #4]
 8000b2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b30:	f7ff ff42 	bl	80009b8 <__NVIC_GetPriorityGrouping>
 8000b34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	68b9      	ldr	r1, [r7, #8]
 8000b3a:	6978      	ldr	r0, [r7, #20]
 8000b3c:	f7ff ff90 	bl	8000a60 <NVIC_EncodePriority>
 8000b40:	4602      	mov	r2, r0
 8000b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b46:	4611      	mov	r1, r2
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff ff5f 	bl	8000a0c <__NVIC_SetPriority>
}
 8000b4e:	bf00      	nop
 8000b50:	3718      	adds	r7, #24
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b082      	sub	sp, #8
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff ff35 	bl	80009d4 <__NVIC_EnableIRQ>
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b082      	sub	sp, #8
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	f7ff ffa2 	bl	8000ac4 <SysTick_Config>
 8000b80:	4603      	mov	r3, r0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
	...

08000b8c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000b94:	2300      	movs	r3, #0
 8000b96:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d101      	bne.n	8000ba2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e043      	b.n	8000c2a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	4b22      	ldr	r3, [pc, #136]	; (8000c34 <HAL_DMA_Init+0xa8>)
 8000baa:	4413      	add	r3, r2
 8000bac:	4a22      	ldr	r2, [pc, #136]	; (8000c38 <HAL_DMA_Init+0xac>)
 8000bae:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb2:	091b      	lsrs	r3, r3, #4
 8000bb4:	009a      	lsls	r2, r3, #2
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4a1f      	ldr	r2, [pc, #124]	; (8000c3c <HAL_DMA_Init+0xb0>)
 8000bbe:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2202      	movs	r2, #2
 8000bc4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000bd6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000bda:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000be4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	68db      	ldr	r3, [r3, #12]
 8000bea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bf0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	695b      	ldr	r3, [r3, #20]
 8000bf6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bfc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	69db      	ldr	r3, [r3, #28]
 8000c02:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000c04:	68fa      	ldr	r2, [r7, #12]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	68fa      	ldr	r2, [r7, #12]
 8000c10:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2200      	movs	r2, #0
 8000c16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2200      	movs	r2, #0
 8000c24:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3714      	adds	r7, #20
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr
 8000c34:	bffdfff8 	.word	0xbffdfff8
 8000c38:	cccccccd 	.word	0xcccccccd
 8000c3c:	40020000 	.word	0x40020000

08000c40 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
 8000c4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d101      	bne.n	8000c60 <HAL_DMA_Start_IT+0x20>
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	e04a      	b.n	8000cf6 <HAL_DMA_Start_IT+0xb6>
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	2201      	movs	r2, #1
 8000c64:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d13a      	bne.n	8000ce8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	2202      	movs	r2, #2
 8000c76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f022 0201 	bic.w	r2, r2, #1
 8000c8e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	68b9      	ldr	r1, [r7, #8]
 8000c96:	68f8      	ldr	r0, [r7, #12]
 8000c98:	f000 f9ae 	bl	8000ff8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d008      	beq.n	8000cb6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f042 020e 	orr.w	r2, r2, #14
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	e00f      	b.n	8000cd6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f022 0204 	bic.w	r2, r2, #4
 8000cc4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f042 020a 	orr.w	r2, r2, #10
 8000cd4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f042 0201 	orr.w	r2, r2, #1
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	e005      	b.n	8000cf4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	2200      	movs	r2, #0
 8000cec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000cf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3718      	adds	r7, #24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
	...

08000d00 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d005      	beq.n	8000d22 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2204      	movs	r2, #4
 8000d1a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	73fb      	strb	r3, [r7, #15]
 8000d20:	e051      	b.n	8000dc6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f022 020e 	bic.w	r2, r2, #14
 8000d30:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f022 0201 	bic.w	r2, r2, #1
 8000d40:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a22      	ldr	r2, [pc, #136]	; (8000dd0 <HAL_DMA_Abort_IT+0xd0>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d029      	beq.n	8000da0 <HAL_DMA_Abort_IT+0xa0>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a20      	ldr	r2, [pc, #128]	; (8000dd4 <HAL_DMA_Abort_IT+0xd4>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d022      	beq.n	8000d9c <HAL_DMA_Abort_IT+0x9c>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a1f      	ldr	r2, [pc, #124]	; (8000dd8 <HAL_DMA_Abort_IT+0xd8>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d01a      	beq.n	8000d96 <HAL_DMA_Abort_IT+0x96>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a1d      	ldr	r2, [pc, #116]	; (8000ddc <HAL_DMA_Abort_IT+0xdc>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d012      	beq.n	8000d90 <HAL_DMA_Abort_IT+0x90>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a1c      	ldr	r2, [pc, #112]	; (8000de0 <HAL_DMA_Abort_IT+0xe0>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d00a      	beq.n	8000d8a <HAL_DMA_Abort_IT+0x8a>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a1a      	ldr	r2, [pc, #104]	; (8000de4 <HAL_DMA_Abort_IT+0xe4>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d102      	bne.n	8000d84 <HAL_DMA_Abort_IT+0x84>
 8000d7e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d82:	e00e      	b.n	8000da2 <HAL_DMA_Abort_IT+0xa2>
 8000d84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d88:	e00b      	b.n	8000da2 <HAL_DMA_Abort_IT+0xa2>
 8000d8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d8e:	e008      	b.n	8000da2 <HAL_DMA_Abort_IT+0xa2>
 8000d90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d94:	e005      	b.n	8000da2 <HAL_DMA_Abort_IT+0xa2>
 8000d96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d9a:	e002      	b.n	8000da2 <HAL_DMA_Abort_IT+0xa2>
 8000d9c:	2310      	movs	r3, #16
 8000d9e:	e000      	b.n	8000da2 <HAL_DMA_Abort_IT+0xa2>
 8000da0:	2301      	movs	r3, #1
 8000da2:	4a11      	ldr	r2, [pc, #68]	; (8000de8 <HAL_DMA_Abort_IT+0xe8>)
 8000da4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2201      	movs	r2, #1
 8000daa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2200      	movs	r2, #0
 8000db2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d003      	beq.n	8000dc6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	4798      	blx	r3
    } 
  }
  return status;
 8000dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3710      	adds	r7, #16
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40020008 	.word	0x40020008
 8000dd4:	4002001c 	.word	0x4002001c
 8000dd8:	40020030 	.word	0x40020030
 8000ddc:	40020044 	.word	0x40020044
 8000de0:	40020058 	.word	0x40020058
 8000de4:	4002006c 	.word	0x4002006c
 8000de8:	40020000 	.word	0x40020000

08000dec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e08:	2204      	movs	r2, #4
 8000e0a:	409a      	lsls	r2, r3
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d04f      	beq.n	8000eb4 <HAL_DMA_IRQHandler+0xc8>
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	f003 0304 	and.w	r3, r3, #4
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d04a      	beq.n	8000eb4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f003 0320 	and.w	r3, r3, #32
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d107      	bne.n	8000e3c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f022 0204 	bic.w	r2, r2, #4
 8000e3a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a66      	ldr	r2, [pc, #408]	; (8000fdc <HAL_DMA_IRQHandler+0x1f0>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d029      	beq.n	8000e9a <HAL_DMA_IRQHandler+0xae>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a65      	ldr	r2, [pc, #404]	; (8000fe0 <HAL_DMA_IRQHandler+0x1f4>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d022      	beq.n	8000e96 <HAL_DMA_IRQHandler+0xaa>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a63      	ldr	r2, [pc, #396]	; (8000fe4 <HAL_DMA_IRQHandler+0x1f8>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d01a      	beq.n	8000e90 <HAL_DMA_IRQHandler+0xa4>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a62      	ldr	r2, [pc, #392]	; (8000fe8 <HAL_DMA_IRQHandler+0x1fc>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d012      	beq.n	8000e8a <HAL_DMA_IRQHandler+0x9e>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a60      	ldr	r2, [pc, #384]	; (8000fec <HAL_DMA_IRQHandler+0x200>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d00a      	beq.n	8000e84 <HAL_DMA_IRQHandler+0x98>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a5f      	ldr	r2, [pc, #380]	; (8000ff0 <HAL_DMA_IRQHandler+0x204>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d102      	bne.n	8000e7e <HAL_DMA_IRQHandler+0x92>
 8000e78:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e7c:	e00e      	b.n	8000e9c <HAL_DMA_IRQHandler+0xb0>
 8000e7e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000e82:	e00b      	b.n	8000e9c <HAL_DMA_IRQHandler+0xb0>
 8000e84:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000e88:	e008      	b.n	8000e9c <HAL_DMA_IRQHandler+0xb0>
 8000e8a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e8e:	e005      	b.n	8000e9c <HAL_DMA_IRQHandler+0xb0>
 8000e90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e94:	e002      	b.n	8000e9c <HAL_DMA_IRQHandler+0xb0>
 8000e96:	2340      	movs	r3, #64	; 0x40
 8000e98:	e000      	b.n	8000e9c <HAL_DMA_IRQHandler+0xb0>
 8000e9a:	2304      	movs	r3, #4
 8000e9c:	4a55      	ldr	r2, [pc, #340]	; (8000ff4 <HAL_DMA_IRQHandler+0x208>)
 8000e9e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	f000 8094 	beq.w	8000fd2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000eb2:	e08e      	b.n	8000fd2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb8:	2202      	movs	r2, #2
 8000eba:	409a      	lsls	r2, r3
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d056      	beq.n	8000f72 <HAL_DMA_IRQHandler+0x186>
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	f003 0302 	and.w	r3, r3, #2
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d051      	beq.n	8000f72 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f003 0320 	and.w	r3, r3, #32
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d10b      	bne.n	8000ef4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f022 020a 	bic.w	r2, r2, #10
 8000eea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2201      	movs	r2, #1
 8000ef0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a38      	ldr	r2, [pc, #224]	; (8000fdc <HAL_DMA_IRQHandler+0x1f0>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d029      	beq.n	8000f52 <HAL_DMA_IRQHandler+0x166>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a37      	ldr	r2, [pc, #220]	; (8000fe0 <HAL_DMA_IRQHandler+0x1f4>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d022      	beq.n	8000f4e <HAL_DMA_IRQHandler+0x162>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a35      	ldr	r2, [pc, #212]	; (8000fe4 <HAL_DMA_IRQHandler+0x1f8>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d01a      	beq.n	8000f48 <HAL_DMA_IRQHandler+0x15c>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a34      	ldr	r2, [pc, #208]	; (8000fe8 <HAL_DMA_IRQHandler+0x1fc>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d012      	beq.n	8000f42 <HAL_DMA_IRQHandler+0x156>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a32      	ldr	r2, [pc, #200]	; (8000fec <HAL_DMA_IRQHandler+0x200>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d00a      	beq.n	8000f3c <HAL_DMA_IRQHandler+0x150>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a31      	ldr	r2, [pc, #196]	; (8000ff0 <HAL_DMA_IRQHandler+0x204>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d102      	bne.n	8000f36 <HAL_DMA_IRQHandler+0x14a>
 8000f30:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f34:	e00e      	b.n	8000f54 <HAL_DMA_IRQHandler+0x168>
 8000f36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f3a:	e00b      	b.n	8000f54 <HAL_DMA_IRQHandler+0x168>
 8000f3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f40:	e008      	b.n	8000f54 <HAL_DMA_IRQHandler+0x168>
 8000f42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f46:	e005      	b.n	8000f54 <HAL_DMA_IRQHandler+0x168>
 8000f48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f4c:	e002      	b.n	8000f54 <HAL_DMA_IRQHandler+0x168>
 8000f4e:	2320      	movs	r3, #32
 8000f50:	e000      	b.n	8000f54 <HAL_DMA_IRQHandler+0x168>
 8000f52:	2302      	movs	r3, #2
 8000f54:	4a27      	ldr	r2, [pc, #156]	; (8000ff4 <HAL_DMA_IRQHandler+0x208>)
 8000f56:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d034      	beq.n	8000fd2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000f70:	e02f      	b.n	8000fd2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	2208      	movs	r2, #8
 8000f78:	409a      	lsls	r2, r3
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d028      	beq.n	8000fd4 <HAL_DMA_IRQHandler+0x1e8>
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	f003 0308 	and.w	r3, r3, #8
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d023      	beq.n	8000fd4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f022 020e 	bic.w	r2, r2, #14
 8000f9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	fa01 f202 	lsl.w	r2, r1, r2
 8000faa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2201      	movs	r2, #1
 8000fb0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d004      	beq.n	8000fd4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	4798      	blx	r3
    }
  }
  return;
 8000fd2:	bf00      	nop
 8000fd4:	bf00      	nop
}
 8000fd6:	3710      	adds	r7, #16
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40020008 	.word	0x40020008
 8000fe0:	4002001c 	.word	0x4002001c
 8000fe4:	40020030 	.word	0x40020030
 8000fe8:	40020044 	.word	0x40020044
 8000fec:	40020058 	.word	0x40020058
 8000ff0:	4002006c 	.word	0x4002006c
 8000ff4:	40020000 	.word	0x40020000

08000ff8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
 8001004:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800100e:	2101      	movs	r1, #1
 8001010:	fa01 f202 	lsl.w	r2, r1, r2
 8001014:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	683a      	ldr	r2, [r7, #0]
 800101c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	2b10      	cmp	r3, #16
 8001024:	d108      	bne.n	8001038 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	68ba      	ldr	r2, [r7, #8]
 8001034:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001036:	e007      	b.n	8001048 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	68ba      	ldr	r2, [r7, #8]
 800103e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	60da      	str	r2, [r3, #12]
}
 8001048:	bf00      	nop
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr
	...

08001054 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001054:	b480      	push	{r7}
 8001056:	b08b      	sub	sp, #44	; 0x2c
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800105e:	2300      	movs	r3, #0
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001062:	2300      	movs	r3, #0
 8001064:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001066:	e127      	b.n	80012b8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001068:	2201      	movs	r2, #1
 800106a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	69fa      	ldr	r2, [r7, #28]
 8001078:	4013      	ands	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	429a      	cmp	r2, r3
 8001082:	f040 8116 	bne.w	80012b2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	2b12      	cmp	r3, #18
 800108c:	d034      	beq.n	80010f8 <HAL_GPIO_Init+0xa4>
 800108e:	2b12      	cmp	r3, #18
 8001090:	d80d      	bhi.n	80010ae <HAL_GPIO_Init+0x5a>
 8001092:	2b02      	cmp	r3, #2
 8001094:	d02b      	beq.n	80010ee <HAL_GPIO_Init+0x9a>
 8001096:	2b02      	cmp	r3, #2
 8001098:	d804      	bhi.n	80010a4 <HAL_GPIO_Init+0x50>
 800109a:	2b00      	cmp	r3, #0
 800109c:	d031      	beq.n	8001102 <HAL_GPIO_Init+0xae>
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d01c      	beq.n	80010dc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010a2:	e048      	b.n	8001136 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80010a4:	2b03      	cmp	r3, #3
 80010a6:	d043      	beq.n	8001130 <HAL_GPIO_Init+0xdc>
 80010a8:	2b11      	cmp	r3, #17
 80010aa:	d01b      	beq.n	80010e4 <HAL_GPIO_Init+0x90>
          break;
 80010ac:	e043      	b.n	8001136 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80010ae:	4a89      	ldr	r2, [pc, #548]	; (80012d4 <HAL_GPIO_Init+0x280>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d026      	beq.n	8001102 <HAL_GPIO_Init+0xae>
 80010b4:	4a87      	ldr	r2, [pc, #540]	; (80012d4 <HAL_GPIO_Init+0x280>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d806      	bhi.n	80010c8 <HAL_GPIO_Init+0x74>
 80010ba:	4a87      	ldr	r2, [pc, #540]	; (80012d8 <HAL_GPIO_Init+0x284>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d020      	beq.n	8001102 <HAL_GPIO_Init+0xae>
 80010c0:	4a86      	ldr	r2, [pc, #536]	; (80012dc <HAL_GPIO_Init+0x288>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d01d      	beq.n	8001102 <HAL_GPIO_Init+0xae>
          break;
 80010c6:	e036      	b.n	8001136 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80010c8:	4a85      	ldr	r2, [pc, #532]	; (80012e0 <HAL_GPIO_Init+0x28c>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d019      	beq.n	8001102 <HAL_GPIO_Init+0xae>
 80010ce:	4a85      	ldr	r2, [pc, #532]	; (80012e4 <HAL_GPIO_Init+0x290>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d016      	beq.n	8001102 <HAL_GPIO_Init+0xae>
 80010d4:	4a84      	ldr	r2, [pc, #528]	; (80012e8 <HAL_GPIO_Init+0x294>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d013      	beq.n	8001102 <HAL_GPIO_Init+0xae>
          break;
 80010da:	e02c      	b.n	8001136 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	623b      	str	r3, [r7, #32]
          break;
 80010e2:	e028      	b.n	8001136 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	3304      	adds	r3, #4
 80010ea:	623b      	str	r3, [r7, #32]
          break;
 80010ec:	e023      	b.n	8001136 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	3308      	adds	r3, #8
 80010f4:	623b      	str	r3, [r7, #32]
          break;
 80010f6:	e01e      	b.n	8001136 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	330c      	adds	r3, #12
 80010fe:	623b      	str	r3, [r7, #32]
          break;
 8001100:	e019      	b.n	8001136 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d102      	bne.n	8001110 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800110a:	2304      	movs	r3, #4
 800110c:	623b      	str	r3, [r7, #32]
          break;
 800110e:	e012      	b.n	8001136 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d105      	bne.n	8001124 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001118:	2308      	movs	r3, #8
 800111a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	69fa      	ldr	r2, [r7, #28]
 8001120:	611a      	str	r2, [r3, #16]
          break;
 8001122:	e008      	b.n	8001136 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001124:	2308      	movs	r3, #8
 8001126:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	69fa      	ldr	r2, [r7, #28]
 800112c:	615a      	str	r2, [r3, #20]
          break;
 800112e:	e002      	b.n	8001136 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001130:	2300      	movs	r3, #0
 8001132:	623b      	str	r3, [r7, #32]
          break;
 8001134:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	2bff      	cmp	r3, #255	; 0xff
 800113a:	d801      	bhi.n	8001140 <HAL_GPIO_Init+0xec>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	e001      	b.n	8001144 <HAL_GPIO_Init+0xf0>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3304      	adds	r3, #4
 8001144:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	2bff      	cmp	r3, #255	; 0xff
 800114a:	d802      	bhi.n	8001152 <HAL_GPIO_Init+0xfe>
 800114c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	e002      	b.n	8001158 <HAL_GPIO_Init+0x104>
 8001152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001154:	3b08      	subs	r3, #8
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	210f      	movs	r1, #15
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	fa01 f303 	lsl.w	r3, r1, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	401a      	ands	r2, r3
 800116a:	6a39      	ldr	r1, [r7, #32]
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	fa01 f303 	lsl.w	r3, r1, r3
 8001172:	431a      	orrs	r2, r3
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001180:	2b00      	cmp	r3, #0
 8001182:	f000 8096 	beq.w	80012b2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001186:	4b59      	ldr	r3, [pc, #356]	; (80012ec <HAL_GPIO_Init+0x298>)
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	4a58      	ldr	r2, [pc, #352]	; (80012ec <HAL_GPIO_Init+0x298>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	6193      	str	r3, [r2, #24]
 8001192:	4b56      	ldr	r3, [pc, #344]	; (80012ec <HAL_GPIO_Init+0x298>)
 8001194:	699b      	ldr	r3, [r3, #24]
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800119e:	4a54      	ldr	r2, [pc, #336]	; (80012f0 <HAL_GPIO_Init+0x29c>)
 80011a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a2:	089b      	lsrs	r3, r3, #2
 80011a4:	3302      	adds	r3, #2
 80011a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011aa:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ae:	f003 0303 	and.w	r3, r3, #3
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	220f      	movs	r2, #15
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43db      	mvns	r3, r3
 80011bc:	68fa      	ldr	r2, [r7, #12]
 80011be:	4013      	ands	r3, r2
 80011c0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a4b      	ldr	r2, [pc, #300]	; (80012f4 <HAL_GPIO_Init+0x2a0>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d013      	beq.n	80011f2 <HAL_GPIO_Init+0x19e>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a4a      	ldr	r2, [pc, #296]	; (80012f8 <HAL_GPIO_Init+0x2a4>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d00d      	beq.n	80011ee <HAL_GPIO_Init+0x19a>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a49      	ldr	r2, [pc, #292]	; (80012fc <HAL_GPIO_Init+0x2a8>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d007      	beq.n	80011ea <HAL_GPIO_Init+0x196>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a48      	ldr	r2, [pc, #288]	; (8001300 <HAL_GPIO_Init+0x2ac>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d101      	bne.n	80011e6 <HAL_GPIO_Init+0x192>
 80011e2:	2303      	movs	r3, #3
 80011e4:	e006      	b.n	80011f4 <HAL_GPIO_Init+0x1a0>
 80011e6:	2304      	movs	r3, #4
 80011e8:	e004      	b.n	80011f4 <HAL_GPIO_Init+0x1a0>
 80011ea:	2302      	movs	r3, #2
 80011ec:	e002      	b.n	80011f4 <HAL_GPIO_Init+0x1a0>
 80011ee:	2301      	movs	r3, #1
 80011f0:	e000      	b.n	80011f4 <HAL_GPIO_Init+0x1a0>
 80011f2:	2300      	movs	r3, #0
 80011f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011f6:	f002 0203 	and.w	r2, r2, #3
 80011fa:	0092      	lsls	r2, r2, #2
 80011fc:	4093      	lsls	r3, r2
 80011fe:	68fa      	ldr	r2, [r7, #12]
 8001200:	4313      	orrs	r3, r2
 8001202:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001204:	493a      	ldr	r1, [pc, #232]	; (80012f0 <HAL_GPIO_Init+0x29c>)
 8001206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001208:	089b      	lsrs	r3, r3, #2
 800120a:	3302      	adds	r3, #2
 800120c:	68fa      	ldr	r2, [r7, #12]
 800120e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d006      	beq.n	800122c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800121e:	4b39      	ldr	r3, [pc, #228]	; (8001304 <HAL_GPIO_Init+0x2b0>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	4938      	ldr	r1, [pc, #224]	; (8001304 <HAL_GPIO_Init+0x2b0>)
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	4313      	orrs	r3, r2
 8001228:	600b      	str	r3, [r1, #0]
 800122a:	e006      	b.n	800123a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800122c:	4b35      	ldr	r3, [pc, #212]	; (8001304 <HAL_GPIO_Init+0x2b0>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	43db      	mvns	r3, r3
 8001234:	4933      	ldr	r1, [pc, #204]	; (8001304 <HAL_GPIO_Init+0x2b0>)
 8001236:	4013      	ands	r3, r2
 8001238:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d006      	beq.n	8001254 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001246:	4b2f      	ldr	r3, [pc, #188]	; (8001304 <HAL_GPIO_Init+0x2b0>)
 8001248:	685a      	ldr	r2, [r3, #4]
 800124a:	492e      	ldr	r1, [pc, #184]	; (8001304 <HAL_GPIO_Init+0x2b0>)
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	4313      	orrs	r3, r2
 8001250:	604b      	str	r3, [r1, #4]
 8001252:	e006      	b.n	8001262 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001254:	4b2b      	ldr	r3, [pc, #172]	; (8001304 <HAL_GPIO_Init+0x2b0>)
 8001256:	685a      	ldr	r2, [r3, #4]
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	43db      	mvns	r3, r3
 800125c:	4929      	ldr	r1, [pc, #164]	; (8001304 <HAL_GPIO_Init+0x2b0>)
 800125e:	4013      	ands	r3, r2
 8001260:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d006      	beq.n	800127c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800126e:	4b25      	ldr	r3, [pc, #148]	; (8001304 <HAL_GPIO_Init+0x2b0>)
 8001270:	689a      	ldr	r2, [r3, #8]
 8001272:	4924      	ldr	r1, [pc, #144]	; (8001304 <HAL_GPIO_Init+0x2b0>)
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	4313      	orrs	r3, r2
 8001278:	608b      	str	r3, [r1, #8]
 800127a:	e006      	b.n	800128a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800127c:	4b21      	ldr	r3, [pc, #132]	; (8001304 <HAL_GPIO_Init+0x2b0>)
 800127e:	689a      	ldr	r2, [r3, #8]
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	43db      	mvns	r3, r3
 8001284:	491f      	ldr	r1, [pc, #124]	; (8001304 <HAL_GPIO_Init+0x2b0>)
 8001286:	4013      	ands	r3, r2
 8001288:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d006      	beq.n	80012a4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001296:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <HAL_GPIO_Init+0x2b0>)
 8001298:	68da      	ldr	r2, [r3, #12]
 800129a:	491a      	ldr	r1, [pc, #104]	; (8001304 <HAL_GPIO_Init+0x2b0>)
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	4313      	orrs	r3, r2
 80012a0:	60cb      	str	r3, [r1, #12]
 80012a2:	e006      	b.n	80012b2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012a4:	4b17      	ldr	r3, [pc, #92]	; (8001304 <HAL_GPIO_Init+0x2b0>)
 80012a6:	68da      	ldr	r2, [r3, #12]
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	43db      	mvns	r3, r3
 80012ac:	4915      	ldr	r1, [pc, #84]	; (8001304 <HAL_GPIO_Init+0x2b0>)
 80012ae:	4013      	ands	r3, r2
 80012b0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80012b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b4:	3301      	adds	r3, #1
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012be:	fa22 f303 	lsr.w	r3, r2, r3
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f47f aed0 	bne.w	8001068 <HAL_GPIO_Init+0x14>
  }
}
 80012c8:	bf00      	nop
 80012ca:	372c      	adds	r7, #44	; 0x2c
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	10210000 	.word	0x10210000
 80012d8:	10110000 	.word	0x10110000
 80012dc:	10120000 	.word	0x10120000
 80012e0:	10310000 	.word	0x10310000
 80012e4:	10320000 	.word	0x10320000
 80012e8:	10220000 	.word	0x10220000
 80012ec:	40021000 	.word	0x40021000
 80012f0:	40010000 	.word	0x40010000
 80012f4:	40010800 	.word	0x40010800
 80012f8:	40010c00 	.word	0x40010c00
 80012fc:	40011000 	.word	0x40011000
 8001300:	40011400 	.word	0x40011400
 8001304:	40010400 	.word	0x40010400

08001308 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	460b      	mov	r3, r1
 8001312:	807b      	strh	r3, [r7, #2]
 8001314:	4613      	mov	r3, r2
 8001316:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001318:	787b      	ldrb	r3, [r7, #1]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d003      	beq.n	8001326 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800131e:	887a      	ldrh	r2, [r7, #2]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001324:	e003      	b.n	800132e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001326:	887b      	ldrh	r3, [r7, #2]
 8001328:	041a      	lsls	r2, r3, #16
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	611a      	str	r2, [r3, #16]
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr

08001338 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e26c      	b.n	8001824 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	2b00      	cmp	r3, #0
 8001354:	f000 8087 	beq.w	8001466 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001358:	4b92      	ldr	r3, [pc, #584]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f003 030c 	and.w	r3, r3, #12
 8001360:	2b04      	cmp	r3, #4
 8001362:	d00c      	beq.n	800137e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001364:	4b8f      	ldr	r3, [pc, #572]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f003 030c 	and.w	r3, r3, #12
 800136c:	2b08      	cmp	r3, #8
 800136e:	d112      	bne.n	8001396 <HAL_RCC_OscConfig+0x5e>
 8001370:	4b8c      	ldr	r3, [pc, #560]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800137c:	d10b      	bne.n	8001396 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800137e:	4b89      	ldr	r3, [pc, #548]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d06c      	beq.n	8001464 <HAL_RCC_OscConfig+0x12c>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d168      	bne.n	8001464 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e246      	b.n	8001824 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800139e:	d106      	bne.n	80013ae <HAL_RCC_OscConfig+0x76>
 80013a0:	4b80      	ldr	r3, [pc, #512]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a7f      	ldr	r2, [pc, #508]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80013a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013aa:	6013      	str	r3, [r2, #0]
 80013ac:	e02e      	b.n	800140c <HAL_RCC_OscConfig+0xd4>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d10c      	bne.n	80013d0 <HAL_RCC_OscConfig+0x98>
 80013b6:	4b7b      	ldr	r3, [pc, #492]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a7a      	ldr	r2, [pc, #488]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80013bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013c0:	6013      	str	r3, [r2, #0]
 80013c2:	4b78      	ldr	r3, [pc, #480]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a77      	ldr	r2, [pc, #476]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80013c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013cc:	6013      	str	r3, [r2, #0]
 80013ce:	e01d      	b.n	800140c <HAL_RCC_OscConfig+0xd4>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013d8:	d10c      	bne.n	80013f4 <HAL_RCC_OscConfig+0xbc>
 80013da:	4b72      	ldr	r3, [pc, #456]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a71      	ldr	r2, [pc, #452]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80013e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013e4:	6013      	str	r3, [r2, #0]
 80013e6:	4b6f      	ldr	r3, [pc, #444]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a6e      	ldr	r2, [pc, #440]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80013ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	e00b      	b.n	800140c <HAL_RCC_OscConfig+0xd4>
 80013f4:	4b6b      	ldr	r3, [pc, #428]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a6a      	ldr	r2, [pc, #424]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80013fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013fe:	6013      	str	r3, [r2, #0]
 8001400:	4b68      	ldr	r3, [pc, #416]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a67      	ldr	r2, [pc, #412]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 8001406:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800140a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d013      	beq.n	800143c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001414:	f7ff faa2 	bl	800095c <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800141c:	f7ff fa9e 	bl	800095c <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b64      	cmp	r3, #100	; 0x64
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e1fa      	b.n	8001824 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800142e:	4b5d      	ldr	r3, [pc, #372]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d0f0      	beq.n	800141c <HAL_RCC_OscConfig+0xe4>
 800143a:	e014      	b.n	8001466 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800143c:	f7ff fa8e 	bl	800095c <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001444:	f7ff fa8a 	bl	800095c <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b64      	cmp	r3, #100	; 0x64
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e1e6      	b.n	8001824 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001456:	4b53      	ldr	r3, [pc, #332]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1f0      	bne.n	8001444 <HAL_RCC_OscConfig+0x10c>
 8001462:	e000      	b.n	8001466 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d063      	beq.n	800153a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001472:	4b4c      	ldr	r3, [pc, #304]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f003 030c 	and.w	r3, r3, #12
 800147a:	2b00      	cmp	r3, #0
 800147c:	d00b      	beq.n	8001496 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800147e:	4b49      	ldr	r3, [pc, #292]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f003 030c 	and.w	r3, r3, #12
 8001486:	2b08      	cmp	r3, #8
 8001488:	d11c      	bne.n	80014c4 <HAL_RCC_OscConfig+0x18c>
 800148a:	4b46      	ldr	r3, [pc, #280]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d116      	bne.n	80014c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001496:	4b43      	ldr	r3, [pc, #268]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d005      	beq.n	80014ae <HAL_RCC_OscConfig+0x176>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	691b      	ldr	r3, [r3, #16]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d001      	beq.n	80014ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e1ba      	b.n	8001824 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ae:	4b3d      	ldr	r3, [pc, #244]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	4939      	ldr	r1, [pc, #228]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80014be:	4313      	orrs	r3, r2
 80014c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014c2:	e03a      	b.n	800153a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	691b      	ldr	r3, [r3, #16]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d020      	beq.n	800150e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014cc:	4b36      	ldr	r3, [pc, #216]	; (80015a8 <HAL_RCC_OscConfig+0x270>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d2:	f7ff fa43 	bl	800095c <HAL_GetTick>
 80014d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d8:	e008      	b.n	80014ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014da:	f7ff fa3f 	bl	800095c <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e19b      	b.n	8001824 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ec:	4b2d      	ldr	r3, [pc, #180]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d0f0      	beq.n	80014da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f8:	4b2a      	ldr	r3, [pc, #168]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	695b      	ldr	r3, [r3, #20]
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	4927      	ldr	r1, [pc, #156]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 8001508:	4313      	orrs	r3, r2
 800150a:	600b      	str	r3, [r1, #0]
 800150c:	e015      	b.n	800153a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800150e:	4b26      	ldr	r3, [pc, #152]	; (80015a8 <HAL_RCC_OscConfig+0x270>)
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001514:	f7ff fa22 	bl	800095c <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800151c:	f7ff fa1e 	bl	800095c <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b02      	cmp	r3, #2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e17a      	b.n	8001824 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800152e:	4b1d      	ldr	r3, [pc, #116]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1f0      	bne.n	800151c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0308 	and.w	r3, r3, #8
 8001542:	2b00      	cmp	r3, #0
 8001544:	d03a      	beq.n	80015bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	699b      	ldr	r3, [r3, #24]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d019      	beq.n	8001582 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800154e:	4b17      	ldr	r3, [pc, #92]	; (80015ac <HAL_RCC_OscConfig+0x274>)
 8001550:	2201      	movs	r2, #1
 8001552:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001554:	f7ff fa02 	bl	800095c <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800155c:	f7ff f9fe 	bl	800095c <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e15a      	b.n	8001824 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800156e:	4b0d      	ldr	r3, [pc, #52]	; (80015a4 <HAL_RCC_OscConfig+0x26c>)
 8001570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d0f0      	beq.n	800155c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800157a:	2001      	movs	r0, #1
 800157c:	f000 fada 	bl	8001b34 <RCC_Delay>
 8001580:	e01c      	b.n	80015bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001582:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <HAL_RCC_OscConfig+0x274>)
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001588:	f7ff f9e8 	bl	800095c <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800158e:	e00f      	b.n	80015b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001590:	f7ff f9e4 	bl	800095c <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d908      	bls.n	80015b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e140      	b.n	8001824 <HAL_RCC_OscConfig+0x4ec>
 80015a2:	bf00      	nop
 80015a4:	40021000 	.word	0x40021000
 80015a8:	42420000 	.word	0x42420000
 80015ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015b0:	4b9e      	ldr	r3, [pc, #632]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 80015b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1e9      	bne.n	8001590 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	f000 80a6 	beq.w	8001716 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015ca:	2300      	movs	r3, #0
 80015cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ce:	4b97      	ldr	r3, [pc, #604]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d10d      	bne.n	80015f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015da:	4b94      	ldr	r3, [pc, #592]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 80015dc:	69db      	ldr	r3, [r3, #28]
 80015de:	4a93      	ldr	r2, [pc, #588]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 80015e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e4:	61d3      	str	r3, [r2, #28]
 80015e6:	4b91      	ldr	r3, [pc, #580]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 80015e8:	69db      	ldr	r3, [r3, #28]
 80015ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015f2:	2301      	movs	r3, #1
 80015f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f6:	4b8e      	ldr	r3, [pc, #568]	; (8001830 <HAL_RCC_OscConfig+0x4f8>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d118      	bne.n	8001634 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001602:	4b8b      	ldr	r3, [pc, #556]	; (8001830 <HAL_RCC_OscConfig+0x4f8>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a8a      	ldr	r2, [pc, #552]	; (8001830 <HAL_RCC_OscConfig+0x4f8>)
 8001608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800160c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800160e:	f7ff f9a5 	bl	800095c <HAL_GetTick>
 8001612:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001614:	e008      	b.n	8001628 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001616:	f7ff f9a1 	bl	800095c <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b64      	cmp	r3, #100	; 0x64
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e0fd      	b.n	8001824 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001628:	4b81      	ldr	r3, [pc, #516]	; (8001830 <HAL_RCC_OscConfig+0x4f8>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001630:	2b00      	cmp	r3, #0
 8001632:	d0f0      	beq.n	8001616 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d106      	bne.n	800164a <HAL_RCC_OscConfig+0x312>
 800163c:	4b7b      	ldr	r3, [pc, #492]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	4a7a      	ldr	r2, [pc, #488]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 8001642:	f043 0301 	orr.w	r3, r3, #1
 8001646:	6213      	str	r3, [r2, #32]
 8001648:	e02d      	b.n	80016a6 <HAL_RCC_OscConfig+0x36e>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d10c      	bne.n	800166c <HAL_RCC_OscConfig+0x334>
 8001652:	4b76      	ldr	r3, [pc, #472]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 8001654:	6a1b      	ldr	r3, [r3, #32]
 8001656:	4a75      	ldr	r2, [pc, #468]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 8001658:	f023 0301 	bic.w	r3, r3, #1
 800165c:	6213      	str	r3, [r2, #32]
 800165e:	4b73      	ldr	r3, [pc, #460]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 8001660:	6a1b      	ldr	r3, [r3, #32]
 8001662:	4a72      	ldr	r2, [pc, #456]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 8001664:	f023 0304 	bic.w	r3, r3, #4
 8001668:	6213      	str	r3, [r2, #32]
 800166a:	e01c      	b.n	80016a6 <HAL_RCC_OscConfig+0x36e>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	2b05      	cmp	r3, #5
 8001672:	d10c      	bne.n	800168e <HAL_RCC_OscConfig+0x356>
 8001674:	4b6d      	ldr	r3, [pc, #436]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	4a6c      	ldr	r2, [pc, #432]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 800167a:	f043 0304 	orr.w	r3, r3, #4
 800167e:	6213      	str	r3, [r2, #32]
 8001680:	4b6a      	ldr	r3, [pc, #424]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 8001682:	6a1b      	ldr	r3, [r3, #32]
 8001684:	4a69      	ldr	r2, [pc, #420]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	6213      	str	r3, [r2, #32]
 800168c:	e00b      	b.n	80016a6 <HAL_RCC_OscConfig+0x36e>
 800168e:	4b67      	ldr	r3, [pc, #412]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 8001690:	6a1b      	ldr	r3, [r3, #32]
 8001692:	4a66      	ldr	r2, [pc, #408]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 8001694:	f023 0301 	bic.w	r3, r3, #1
 8001698:	6213      	str	r3, [r2, #32]
 800169a:	4b64      	ldr	r3, [pc, #400]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	4a63      	ldr	r2, [pc, #396]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 80016a0:	f023 0304 	bic.w	r3, r3, #4
 80016a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d015      	beq.n	80016da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ae:	f7ff f955 	bl	800095c <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b4:	e00a      	b.n	80016cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016b6:	f7ff f951 	bl	800095c <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e0ab      	b.n	8001824 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016cc:	4b57      	ldr	r3, [pc, #348]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 80016ce:	6a1b      	ldr	r3, [r3, #32]
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0ee      	beq.n	80016b6 <HAL_RCC_OscConfig+0x37e>
 80016d8:	e014      	b.n	8001704 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016da:	f7ff f93f 	bl	800095c <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016e0:	e00a      	b.n	80016f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016e2:	f7ff f93b 	bl	800095c <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e095      	b.n	8001824 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016f8:	4b4c      	ldr	r3, [pc, #304]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 80016fa:	6a1b      	ldr	r3, [r3, #32]
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d1ee      	bne.n	80016e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001704:	7dfb      	ldrb	r3, [r7, #23]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d105      	bne.n	8001716 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800170a:	4b48      	ldr	r3, [pc, #288]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 800170c:	69db      	ldr	r3, [r3, #28]
 800170e:	4a47      	ldr	r2, [pc, #284]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 8001710:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001714:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	2b00      	cmp	r3, #0
 800171c:	f000 8081 	beq.w	8001822 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001720:	4b42      	ldr	r3, [pc, #264]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f003 030c 	and.w	r3, r3, #12
 8001728:	2b08      	cmp	r3, #8
 800172a:	d061      	beq.n	80017f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	69db      	ldr	r3, [r3, #28]
 8001730:	2b02      	cmp	r3, #2
 8001732:	d146      	bne.n	80017c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001734:	4b3f      	ldr	r3, [pc, #252]	; (8001834 <HAL_RCC_OscConfig+0x4fc>)
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173a:	f7ff f90f 	bl	800095c <HAL_GetTick>
 800173e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001740:	e008      	b.n	8001754 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001742:	f7ff f90b 	bl	800095c <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e067      	b.n	8001824 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001754:	4b35      	ldr	r3, [pc, #212]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d1f0      	bne.n	8001742 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001768:	d108      	bne.n	800177c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800176a:	4b30      	ldr	r3, [pc, #192]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	492d      	ldr	r1, [pc, #180]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 8001778:	4313      	orrs	r3, r2
 800177a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800177c:	4b2b      	ldr	r3, [pc, #172]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a19      	ldr	r1, [r3, #32]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178c:	430b      	orrs	r3, r1
 800178e:	4927      	ldr	r1, [pc, #156]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 8001790:	4313      	orrs	r3, r2
 8001792:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001794:	4b27      	ldr	r3, [pc, #156]	; (8001834 <HAL_RCC_OscConfig+0x4fc>)
 8001796:	2201      	movs	r2, #1
 8001798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179a:	f7ff f8df 	bl	800095c <HAL_GetTick>
 800179e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017a0:	e008      	b.n	80017b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a2:	f7ff f8db 	bl	800095c <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e037      	b.n	8001824 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017b4:	4b1d      	ldr	r3, [pc, #116]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d0f0      	beq.n	80017a2 <HAL_RCC_OscConfig+0x46a>
 80017c0:	e02f      	b.n	8001822 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017c2:	4b1c      	ldr	r3, [pc, #112]	; (8001834 <HAL_RCC_OscConfig+0x4fc>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c8:	f7ff f8c8 	bl	800095c <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d0:	f7ff f8c4 	bl	800095c <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e020      	b.n	8001824 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017e2:	4b12      	ldr	r3, [pc, #72]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1f0      	bne.n	80017d0 <HAL_RCC_OscConfig+0x498>
 80017ee:	e018      	b.n	8001822 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	69db      	ldr	r3, [r3, #28]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d101      	bne.n	80017fc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e013      	b.n	8001824 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017fc:	4b0b      	ldr	r3, [pc, #44]	; (800182c <HAL_RCC_OscConfig+0x4f4>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a1b      	ldr	r3, [r3, #32]
 800180c:	429a      	cmp	r2, r3
 800180e:	d106      	bne.n	800181e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800181a:	429a      	cmp	r2, r3
 800181c:	d001      	beq.n	8001822 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e000      	b.n	8001824 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	3718      	adds	r7, #24
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40021000 	.word	0x40021000
 8001830:	40007000 	.word	0x40007000
 8001834:	42420060 	.word	0x42420060

08001838 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d101      	bne.n	800184c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e0d0      	b.n	80019ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800184c:	4b6a      	ldr	r3, [pc, #424]	; (80019f8 <HAL_RCC_ClockConfig+0x1c0>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0307 	and.w	r3, r3, #7
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	429a      	cmp	r2, r3
 8001858:	d910      	bls.n	800187c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185a:	4b67      	ldr	r3, [pc, #412]	; (80019f8 <HAL_RCC_ClockConfig+0x1c0>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f023 0207 	bic.w	r2, r3, #7
 8001862:	4965      	ldr	r1, [pc, #404]	; (80019f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	4313      	orrs	r3, r2
 8001868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800186a:	4b63      	ldr	r3, [pc, #396]	; (80019f8 <HAL_RCC_ClockConfig+0x1c0>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	429a      	cmp	r2, r3
 8001876:	d001      	beq.n	800187c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e0b8      	b.n	80019ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d020      	beq.n	80018ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0304 	and.w	r3, r3, #4
 8001890:	2b00      	cmp	r3, #0
 8001892:	d005      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001894:	4b59      	ldr	r3, [pc, #356]	; (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	4a58      	ldr	r2, [pc, #352]	; (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 800189a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800189e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0308 	and.w	r3, r3, #8
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d005      	beq.n	80018b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018ac:	4b53      	ldr	r3, [pc, #332]	; (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	4a52      	ldr	r2, [pc, #328]	; (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 80018b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80018b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018b8:	4b50      	ldr	r3, [pc, #320]	; (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	494d      	ldr	r1, [pc, #308]	; (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 80018c6:	4313      	orrs	r3, r2
 80018c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d040      	beq.n	8001958 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d107      	bne.n	80018ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018de:	4b47      	ldr	r3, [pc, #284]	; (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d115      	bne.n	8001916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e07f      	b.n	80019ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d107      	bne.n	8001906 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018f6:	4b41      	ldr	r3, [pc, #260]	; (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d109      	bne.n	8001916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e073      	b.n	80019ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001906:	4b3d      	ldr	r3, [pc, #244]	; (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e06b      	b.n	80019ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001916:	4b39      	ldr	r3, [pc, #228]	; (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f023 0203 	bic.w	r2, r3, #3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	4936      	ldr	r1, [pc, #216]	; (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 8001924:	4313      	orrs	r3, r2
 8001926:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001928:	f7ff f818 	bl	800095c <HAL_GetTick>
 800192c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800192e:	e00a      	b.n	8001946 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001930:	f7ff f814 	bl	800095c <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	f241 3288 	movw	r2, #5000	; 0x1388
 800193e:	4293      	cmp	r3, r2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e053      	b.n	80019ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001946:	4b2d      	ldr	r3, [pc, #180]	; (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f003 020c 	and.w	r2, r3, #12
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	429a      	cmp	r2, r3
 8001956:	d1eb      	bne.n	8001930 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001958:	4b27      	ldr	r3, [pc, #156]	; (80019f8 <HAL_RCC_ClockConfig+0x1c0>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0307 	and.w	r3, r3, #7
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	429a      	cmp	r2, r3
 8001964:	d210      	bcs.n	8001988 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001966:	4b24      	ldr	r3, [pc, #144]	; (80019f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f023 0207 	bic.w	r2, r3, #7
 800196e:	4922      	ldr	r1, [pc, #136]	; (80019f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	4313      	orrs	r3, r2
 8001974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001976:	4b20      	ldr	r3, [pc, #128]	; (80019f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	429a      	cmp	r2, r3
 8001982:	d001      	beq.n	8001988 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e032      	b.n	80019ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0304 	and.w	r3, r3, #4
 8001990:	2b00      	cmp	r3, #0
 8001992:	d008      	beq.n	80019a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001994:	4b19      	ldr	r3, [pc, #100]	; (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	4916      	ldr	r1, [pc, #88]	; (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0308 	and.w	r3, r3, #8
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d009      	beq.n	80019c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019b2:	4b12      	ldr	r3, [pc, #72]	; (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	490e      	ldr	r1, [pc, #56]	; (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019c6:	f000 f821 	bl	8001a0c <HAL_RCC_GetSysClockFreq>
 80019ca:	4601      	mov	r1, r0
 80019cc:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <HAL_RCC_ClockConfig+0x1c4>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	091b      	lsrs	r3, r3, #4
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	4a0a      	ldr	r2, [pc, #40]	; (8001a00 <HAL_RCC_ClockConfig+0x1c8>)
 80019d8:	5cd3      	ldrb	r3, [r2, r3]
 80019da:	fa21 f303 	lsr.w	r3, r1, r3
 80019de:	4a09      	ldr	r2, [pc, #36]	; (8001a04 <HAL_RCC_ClockConfig+0x1cc>)
 80019e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019e2:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <HAL_RCC_ClockConfig+0x1d0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7fe ff76 	bl	80008d8 <HAL_InitTick>

  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40022000 	.word	0x40022000
 80019fc:	40021000 	.word	0x40021000
 8001a00:	08002c98 	.word	0x08002c98
 8001a04:	20000000 	.word	0x20000000
 8001a08:	20000004 	.word	0x20000004

08001a0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a0c:	b490      	push	{r4, r7}
 8001a0e:	b08a      	sub	sp, #40	; 0x28
 8001a10:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a12:	4b2a      	ldr	r3, [pc, #168]	; (8001abc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a14:	1d3c      	adds	r4, r7, #4
 8001a16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a1c:	4b28      	ldr	r3, [pc, #160]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61fb      	str	r3, [r7, #28]
 8001a26:	2300      	movs	r3, #0
 8001a28:	61bb      	str	r3, [r7, #24]
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001a32:	2300      	movs	r3, #0
 8001a34:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a36:	4b23      	ldr	r3, [pc, #140]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	f003 030c 	and.w	r3, r3, #12
 8001a42:	2b04      	cmp	r3, #4
 8001a44:	d002      	beq.n	8001a4c <HAL_RCC_GetSysClockFreq+0x40>
 8001a46:	2b08      	cmp	r3, #8
 8001a48:	d003      	beq.n	8001a52 <HAL_RCC_GetSysClockFreq+0x46>
 8001a4a:	e02d      	b.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a4c:	4b1e      	ldr	r3, [pc, #120]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a4e:	623b      	str	r3, [r7, #32]
      break;
 8001a50:	e02d      	b.n	8001aae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	0c9b      	lsrs	r3, r3, #18
 8001a56:	f003 030f 	and.w	r3, r3, #15
 8001a5a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a5e:	4413      	add	r3, r2
 8001a60:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a64:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d013      	beq.n	8001a98 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a70:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	0c5b      	lsrs	r3, r3, #17
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a7e:	4413      	add	r3, r2
 8001a80:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001a84:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	4a0f      	ldr	r2, [pc, #60]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a8a:	fb02 f203 	mul.w	r2, r2, r3
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a94:	627b      	str	r3, [r7, #36]	; 0x24
 8001a96:	e004      	b.n	8001aa2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	4a0c      	ldr	r2, [pc, #48]	; (8001acc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a9c:	fb02 f303 	mul.w	r3, r2, r3
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa4:	623b      	str	r3, [r7, #32]
      break;
 8001aa6:	e002      	b.n	8001aae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001aa8:	4b07      	ldr	r3, [pc, #28]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001aaa:	623b      	str	r3, [r7, #32]
      break;
 8001aac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aae:	6a3b      	ldr	r3, [r7, #32]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3728      	adds	r7, #40	; 0x28
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bc90      	pop	{r4, r7}
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	08002c84 	.word	0x08002c84
 8001ac0:	08002c94 	.word	0x08002c94
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	007a1200 	.word	0x007a1200
 8001acc:	003d0900 	.word	0x003d0900

08001ad0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ad4:	4b02      	ldr	r3, [pc, #8]	; (8001ae0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bc80      	pop	{r7}
 8001ade:	4770      	bx	lr
 8001ae0:	20000000 	.word	0x20000000

08001ae4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ae8:	f7ff fff2 	bl	8001ad0 <HAL_RCC_GetHCLKFreq>
 8001aec:	4601      	mov	r1, r0
 8001aee:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	0a1b      	lsrs	r3, r3, #8
 8001af4:	f003 0307 	and.w	r3, r3, #7
 8001af8:	4a03      	ldr	r2, [pc, #12]	; (8001b08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001afa:	5cd3      	ldrb	r3, [r2, r3]
 8001afc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40021000 	.word	0x40021000
 8001b08:	08002ca8 	.word	0x08002ca8

08001b0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b10:	f7ff ffde 	bl	8001ad0 <HAL_RCC_GetHCLKFreq>
 8001b14:	4601      	mov	r1, r0
 8001b16:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	0adb      	lsrs	r3, r3, #11
 8001b1c:	f003 0307 	and.w	r3, r3, #7
 8001b20:	4a03      	ldr	r2, [pc, #12]	; (8001b30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b22:	5cd3      	ldrb	r3, [r2, r3]
 8001b24:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	08002ca8 	.word	0x08002ca8

08001b34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b3c:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <RCC_Delay+0x34>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a0a      	ldr	r2, [pc, #40]	; (8001b6c <RCC_Delay+0x38>)
 8001b42:	fba2 2303 	umull	r2, r3, r2, r3
 8001b46:	0a5b      	lsrs	r3, r3, #9
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	fb02 f303 	mul.w	r3, r2, r3
 8001b4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b50:	bf00      	nop
  }
  while (Delay --);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	1e5a      	subs	r2, r3, #1
 8001b56:	60fa      	str	r2, [r7, #12]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1f9      	bne.n	8001b50 <RCC_Delay+0x1c>
}
 8001b5c:	bf00      	nop
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bc80      	pop	{r7}
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	20000000 	.word	0x20000000
 8001b6c:	10624dd3 	.word	0x10624dd3

08001b70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e03f      	b.n	8001c02 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d106      	bne.n	8001b9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7fe fc60 	bl	800045c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2224      	movs	r2, #36	; 0x24
 8001ba0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	68da      	ldr	r2, [r3, #12]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001bb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 fa93 	bl	80020e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	691a      	ldr	r2, [r3, #16]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001bc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	695a      	ldr	r2, [r3, #20]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001bd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68da      	ldr	r2, [r3, #12]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001be8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2220      	movs	r2, #32
 8001bf4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2220      	movs	r2, #32
 8001bfc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
	...

08001c0c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	4613      	mov	r3, r2
 8001c18:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b20      	cmp	r3, #32
 8001c24:	d153      	bne.n	8001cce <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d002      	beq.n	8001c32 <HAL_UART_Transmit_DMA+0x26>
 8001c2c:	88fb      	ldrh	r3, [r7, #6]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e04c      	b.n	8001cd0 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d101      	bne.n	8001c44 <HAL_UART_Transmit_DMA+0x38>
 8001c40:	2302      	movs	r3, #2
 8001c42:	e045      	b.n	8001cd0 <HAL_UART_Transmit_DMA+0xc4>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8001c4c:	68ba      	ldr	r2, [r7, #8]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	88fa      	ldrh	r2, [r7, #6]
 8001c56:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	88fa      	ldrh	r2, [r7, #6]
 8001c5c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2200      	movs	r2, #0
 8001c62:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2221      	movs	r2, #33	; 0x21
 8001c68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c70:	4a19      	ldr	r2, [pc, #100]	; (8001cd8 <HAL_UART_Transmit_DMA+0xcc>)
 8001c72:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c78:	4a18      	ldr	r2, [pc, #96]	; (8001cdc <HAL_UART_Transmit_DMA+0xd0>)
 8001c7a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c80:	4a17      	ldr	r2, [pc, #92]	; (8001ce0 <HAL_UART_Transmit_DMA+0xd4>)
 8001c82:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c88:	2200      	movs	r2, #0
 8001c8a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8001c8c:	f107 0308 	add.w	r3, r7, #8
 8001c90:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	6819      	ldr	r1, [r3, #0]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	3304      	adds	r3, #4
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	88fb      	ldrh	r3, [r7, #6]
 8001ca4:	f7fe ffcc 	bl	8000c40 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001cb0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	695a      	ldr	r2, [r3, #20]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cc8:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	e000      	b.n	8001cd0 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8001cce:	2302      	movs	r3, #2
  }
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3718      	adds	r7, #24
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	08001ecd 	.word	0x08001ecd
 8001cdc:	08001f1f 	.word	0x08001f1f
 8001ce0:	08001fbf 	.word	0x08001fbf

08001ce4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b20      	cmp	r3, #32
 8001cfc:	d166      	bne.n	8001dcc <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d002      	beq.n	8001d0a <HAL_UART_Receive_DMA+0x26>
 8001d04:	88fb      	ldrh	r3, [r7, #6]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e05f      	b.n	8001dce <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d101      	bne.n	8001d1c <HAL_UART_Receive_DMA+0x38>
 8001d18:	2302      	movs	r3, #2
 8001d1a:	e058      	b.n	8001dce <HAL_UART_Receive_DMA+0xea>
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001d24:	68ba      	ldr	r2, [r7, #8]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	88fa      	ldrh	r2, [r7, #6]
 8001d2e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2200      	movs	r2, #0
 8001d34:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2222      	movs	r2, #34	; 0x22
 8001d3a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d42:	4a25      	ldr	r2, [pc, #148]	; (8001dd8 <HAL_UART_Receive_DMA+0xf4>)
 8001d44:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d4a:	4a24      	ldr	r2, [pc, #144]	; (8001ddc <HAL_UART_Receive_DMA+0xf8>)
 8001d4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d52:	4a23      	ldr	r2, [pc, #140]	; (8001de0 <HAL_UART_Receive_DMA+0xfc>)
 8001d54:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8001d5e:	f107 0308 	add.w	r3, r7, #8
 8001d62:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	3304      	adds	r3, #4
 8001d6e:	4619      	mov	r1, r3
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	88fb      	ldrh	r3, [r7, #6]
 8001d76:	f7fe ff63 	bl	8000c40 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	613b      	str	r3, [r7, #16]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	613b      	str	r3, [r7, #16]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	68da      	ldr	r2, [r3, #12]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001da6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	695a      	ldr	r2, [r3, #20]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f042 0201 	orr.w	r2, r2, #1
 8001db6:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	695a      	ldr	r2, [r3, #20]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dc6:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	e000      	b.n	8001dce <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8001dcc:	2302      	movs	r3, #2
  }
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	08001f3b 	.word	0x08001f3b
 8001ddc:	08001fa3 	.word	0x08001fa3
 8001de0:	08001fbf 	.word	0x08001fbf

08001de4 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68da      	ldr	r2, [r3, #12]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001dfa:	60da      	str	r2, [r3, #12]

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d02a      	beq.n	8001e60 <HAL_UART_AbortTransmit_IT+0x7c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	695a      	ldr	r2, [r3, #20]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e18:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d013      	beq.n	8001e4a <HAL_UART_AbortTransmit_IT+0x66>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	4a16      	ldr	r2, [pc, #88]	; (8001e80 <HAL_UART_AbortTransmit_IT+0x9c>)
 8001e28:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7fe ff66 	bl	8000d00 <HAL_DMA_Abort_IT>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d01c      	beq.n	8001e74 <HAL_UART_AbortTransmit_IT+0x90>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e44:	4610      	mov	r0, r2
 8001e46:	4798      	blx	r3
 8001e48:	e014      	b.n	8001e74 <HAL_UART_AbortTransmit_IT+0x90>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0x00U;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	84da      	strh	r2, [r3, #38]	; 0x26

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2220      	movs	r2, #32
 8001e54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 f82e 	bl	8001eba <HAL_UART_AbortTransmitCpltCallback>
 8001e5e:	e009      	b.n	8001e74 <HAL_UART_AbortTransmit_IT+0x90>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0x00U;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2220      	movs	r2, #32
 8001e6a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f823 	bl	8001eba <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	080020b7 	.word	0x080020b7

08001e84 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bc80      	pop	{r7}
 8001e94:	4770      	bx	lr

08001e96 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8001e9e:	bf00      	nop
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bc80      	pop	{r7}
 8001eb8:	4770      	bx	lr

08001eba <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b083      	sub	sp, #12
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr

08001ecc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0320 	and.w	r3, r3, #32
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d113      	bne.n	8001f10 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2200      	movs	r2, #0
 8001eec:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	695a      	ldr	r2, [r3, #20]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001efc:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68da      	ldr	r2, [r3, #12]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f0c:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8001f0e:	e002      	b.n	8001f16 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8001f10:	68f8      	ldr	r0, [r7, #12]
 8001f12:	f7fe fa55 	bl	80003c0 <HAL_UART_TxCpltCallback>
}
 8001f16:	bf00      	nop
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b084      	sub	sp, #16
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8001f2c:	68f8      	ldr	r0, [r7, #12]
 8001f2e:	f7ff ffa9 	bl	8001e84 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001f32:	bf00      	nop
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b084      	sub	sp, #16
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f46:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0320 	and.w	r3, r3, #32
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d11e      	bne.n	8001f94 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68da      	ldr	r2, [r3, #12]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f6a:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	695a      	ldr	r2, [r3, #20]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f022 0201 	bic.w	r2, r2, #1
 8001f7a:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	695a      	ldr	r2, [r3, #20]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f8a:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2220      	movs	r2, #32
 8001f90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8001f94:	68f8      	ldr	r0, [r7, #12]
 8001f96:	f7fe fa1e 	bl	80003d6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001f9a:	bf00      	nop
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b084      	sub	sp, #16
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fae:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8001fb0:	68f8      	ldr	r0, [r7, #12]
 8001fb2:	f7ff ff70 	bl	8001e96 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001fb6:	bf00      	nop
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b084      	sub	sp, #16
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fce:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	bf14      	ite	ne
 8001fde:	2301      	movne	r3, #1
 8001fe0:	2300      	moveq	r3, #0
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b21      	cmp	r3, #33	; 0x21
 8001ff0:	d108      	bne.n	8002004 <UART_DMAError+0x46>
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d005      	beq.n	8002004 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8001ffe:	68b8      	ldr	r0, [r7, #8]
 8002000:	f000 f827 	bl	8002052 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800200e:	2b00      	cmp	r3, #0
 8002010:	bf14      	ite	ne
 8002012:	2301      	movne	r3, #1
 8002014:	2300      	moveq	r3, #0
 8002016:	b2db      	uxtb	r3, r3
 8002018:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b22      	cmp	r3, #34	; 0x22
 8002024:	d108      	bne.n	8002038 <UART_DMAError+0x7a>
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d005      	beq.n	8002038 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	2200      	movs	r2, #0
 8002030:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002032:	68b8      	ldr	r0, [r7, #8]
 8002034:	f000 f822 	bl	800207c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800203c:	f043 0210 	orr.w	r2, r3, #16
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002044:	68b8      	ldr	r0, [r7, #8]
 8002046:	f7ff ff2f 	bl	8001ea8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800204a:	bf00      	nop
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68da      	ldr	r2, [r3, #12]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002068:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2220      	movs	r2, #32
 800206e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr

0800207c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68da      	ldr	r2, [r3, #12]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002092:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	695a      	ldr	r2, [r3, #20]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f022 0201 	bic.w	r2, r2, #1
 80020a2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2220      	movs	r2, #32
 80020a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bc80      	pop	{r7}
 80020b4:	4770      	bx	lr

080020b6 <UART_DMATxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b084      	sub	sp, #16
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c2:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0x00U;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2200      	movs	r2, #0
 80020c8:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2220      	movs	r2, #32
 80020ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f7ff fef1 	bl	8001eba <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80020d8:	bf00      	nop
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	68da      	ldr	r2, [r3, #12]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	430a      	orrs	r2, r1
 80020fc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	689a      	ldr	r2, [r3, #8]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	431a      	orrs	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	695b      	ldr	r3, [r3, #20]
 800210c:	4313      	orrs	r3, r2
 800210e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800211a:	f023 030c 	bic.w	r3, r3, #12
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	6812      	ldr	r2, [r2, #0]
 8002122:	68f9      	ldr	r1, [r7, #12]
 8002124:	430b      	orrs	r3, r1
 8002126:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	699a      	ldr	r2, [r3, #24]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	430a      	orrs	r2, r1
 800213c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a52      	ldr	r2, [pc, #328]	; (800228c <UART_SetConfig+0x1ac>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d14e      	bne.n	80021e6 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002148:	f7ff fce0 	bl	8001b0c <HAL_RCC_GetPCLK2Freq>
 800214c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800214e:	68ba      	ldr	r2, [r7, #8]
 8002150:	4613      	mov	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	009a      	lsls	r2, r3, #2
 8002158:	441a      	add	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	fbb2 f3f3 	udiv	r3, r2, r3
 8002164:	4a4a      	ldr	r2, [pc, #296]	; (8002290 <UART_SetConfig+0x1b0>)
 8002166:	fba2 2303 	umull	r2, r3, r2, r3
 800216a:	095b      	lsrs	r3, r3, #5
 800216c:	0119      	lsls	r1, r3, #4
 800216e:	68ba      	ldr	r2, [r7, #8]
 8002170:	4613      	mov	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4413      	add	r3, r2
 8002176:	009a      	lsls	r2, r3, #2
 8002178:	441a      	add	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	fbb2 f2f3 	udiv	r2, r2, r3
 8002184:	4b42      	ldr	r3, [pc, #264]	; (8002290 <UART_SetConfig+0x1b0>)
 8002186:	fba3 0302 	umull	r0, r3, r3, r2
 800218a:	095b      	lsrs	r3, r3, #5
 800218c:	2064      	movs	r0, #100	; 0x64
 800218e:	fb00 f303 	mul.w	r3, r0, r3
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	011b      	lsls	r3, r3, #4
 8002196:	3332      	adds	r3, #50	; 0x32
 8002198:	4a3d      	ldr	r2, [pc, #244]	; (8002290 <UART_SetConfig+0x1b0>)
 800219a:	fba2 2303 	umull	r2, r3, r2, r3
 800219e:	095b      	lsrs	r3, r3, #5
 80021a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021a4:	4419      	add	r1, r3
 80021a6:	68ba      	ldr	r2, [r7, #8]
 80021a8:	4613      	mov	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	009a      	lsls	r2, r3, #2
 80021b0:	441a      	add	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80021bc:	4b34      	ldr	r3, [pc, #208]	; (8002290 <UART_SetConfig+0x1b0>)
 80021be:	fba3 0302 	umull	r0, r3, r3, r2
 80021c2:	095b      	lsrs	r3, r3, #5
 80021c4:	2064      	movs	r0, #100	; 0x64
 80021c6:	fb00 f303 	mul.w	r3, r0, r3
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	011b      	lsls	r3, r3, #4
 80021ce:	3332      	adds	r3, #50	; 0x32
 80021d0:	4a2f      	ldr	r2, [pc, #188]	; (8002290 <UART_SetConfig+0x1b0>)
 80021d2:	fba2 2303 	umull	r2, r3, r2, r3
 80021d6:	095b      	lsrs	r3, r3, #5
 80021d8:	f003 020f 	and.w	r2, r3, #15
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	440a      	add	r2, r1
 80021e2:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80021e4:	e04d      	b.n	8002282 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80021e6:	f7ff fc7d 	bl	8001ae4 <HAL_RCC_GetPCLK1Freq>
 80021ea:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021ec:	68ba      	ldr	r2, [r7, #8]
 80021ee:	4613      	mov	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	009a      	lsls	r2, r3, #2
 80021f6:	441a      	add	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002202:	4a23      	ldr	r2, [pc, #140]	; (8002290 <UART_SetConfig+0x1b0>)
 8002204:	fba2 2303 	umull	r2, r3, r2, r3
 8002208:	095b      	lsrs	r3, r3, #5
 800220a:	0119      	lsls	r1, r3, #4
 800220c:	68ba      	ldr	r2, [r7, #8]
 800220e:	4613      	mov	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4413      	add	r3, r2
 8002214:	009a      	lsls	r2, r3, #2
 8002216:	441a      	add	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002222:	4b1b      	ldr	r3, [pc, #108]	; (8002290 <UART_SetConfig+0x1b0>)
 8002224:	fba3 0302 	umull	r0, r3, r3, r2
 8002228:	095b      	lsrs	r3, r3, #5
 800222a:	2064      	movs	r0, #100	; 0x64
 800222c:	fb00 f303 	mul.w	r3, r0, r3
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	011b      	lsls	r3, r3, #4
 8002234:	3332      	adds	r3, #50	; 0x32
 8002236:	4a16      	ldr	r2, [pc, #88]	; (8002290 <UART_SetConfig+0x1b0>)
 8002238:	fba2 2303 	umull	r2, r3, r2, r3
 800223c:	095b      	lsrs	r3, r3, #5
 800223e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002242:	4419      	add	r1, r3
 8002244:	68ba      	ldr	r2, [r7, #8]
 8002246:	4613      	mov	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4413      	add	r3, r2
 800224c:	009a      	lsls	r2, r3, #2
 800224e:	441a      	add	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	fbb2 f2f3 	udiv	r2, r2, r3
 800225a:	4b0d      	ldr	r3, [pc, #52]	; (8002290 <UART_SetConfig+0x1b0>)
 800225c:	fba3 0302 	umull	r0, r3, r3, r2
 8002260:	095b      	lsrs	r3, r3, #5
 8002262:	2064      	movs	r0, #100	; 0x64
 8002264:	fb00 f303 	mul.w	r3, r0, r3
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	011b      	lsls	r3, r3, #4
 800226c:	3332      	adds	r3, #50	; 0x32
 800226e:	4a08      	ldr	r2, [pc, #32]	; (8002290 <UART_SetConfig+0x1b0>)
 8002270:	fba2 2303 	umull	r2, r3, r2, r3
 8002274:	095b      	lsrs	r3, r3, #5
 8002276:	f003 020f 	and.w	r2, r3, #15
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	440a      	add	r2, r1
 8002280:	609a      	str	r2, [r3, #8]
}
 8002282:	bf00      	nop
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	40013800 	.word	0x40013800
 8002290:	51eb851f 	.word	0x51eb851f

08002294 <setup>:
#include "mySerial.h"


mySerial Serial2;
modbus modbus1;
void setup() {
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af02      	add	r7, sp, #8
	Serial2.begin(&huart2, 12345, 12345, data_received2);
 800229a:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <setup+0x2c>)
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	f243 0339 	movw	r3, #12345	; 0x3039
 80022a2:	f243 0239 	movw	r2, #12345	; 0x3039
 80022a6:	4907      	ldr	r1, [pc, #28]	; (80022c4 <setup+0x30>)
 80022a8:	4807      	ldr	r0, [pc, #28]	; (80022c8 <setup+0x34>)
 80022aa:	f000 fa79 	bl	80027a0 <_ZN8mySerial5beginEP20__UART_HandleTypeDefttPFvPhiE>
	modbus1.begin(&huart3, modbus_received);
 80022ae:	4a07      	ldr	r2, [pc, #28]	; (80022cc <setup+0x38>)
 80022b0:	4907      	ldr	r1, [pc, #28]	; (80022d0 <setup+0x3c>)
 80022b2:	4808      	ldr	r0, [pc, #32]	; (80022d4 <setup+0x40>)
 80022b4:	f000 f89d 	bl	80023f2 <_ZN6modbus5beginEP20__UART_HandleTypeDefPFvPhiE>
}
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	080022f5 	.word	0x080022f5
 80022c4:	2000046c 	.word	0x2000046c
 80022c8:	20000090 	.word	0x20000090
 80022cc:	08002315 	.word	0x08002315
 80022d0:	200003a4 	.word	0x200003a4
 80022d4:	200001d0 	.word	0x200001d0

080022d8 <loop>:

void loop() {
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
	Serial2.looping();
 80022dc:	4803      	ldr	r0, [pc, #12]	; (80022ec <loop+0x14>)
 80022de:	f000 fa93 	bl	8002808 <_ZN8mySerial7loopingEv>
	modbus1.looping();
 80022e2:	4803      	ldr	r0, [pc, #12]	; (80022f0 <loop+0x18>)
 80022e4:	f000 f8e8 	bl	80024b8 <_ZN6modbus7loopingEv>
}
 80022e8:	bf00      	nop
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	20000090 	.word	0x20000090
 80022f0:	200001d0 	.word	0x200001d0

080022f4 <data_received2>:

void data_received2(byte* data_buffer, int length) {
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
	modbus1.request_handler(data_buffer, length);
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	4803      	ldr	r0, [pc, #12]	; (8002310 <data_received2+0x1c>)
 8002304:	f000 f9fd 	bl	8002702 <_ZN6modbus15request_handlerEPhi>
}
 8002308:	bf00      	nop
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	200001d0 	.word	0x200001d0

08002314 <modbus_received>:

void modbus_received(byte* data_buffer, int length) {
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af02      	add	r7, sp, #8
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
	modbus1.send_packet(12345, 34567, data_buffer, length);
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f248 7207 	movw	r2, #34567	; 0x8707
 8002328:	f243 0139 	movw	r1, #12345	; 0x3039
 800232c:	4803      	ldr	r0, [pc, #12]	; (800233c <modbus_received+0x28>)
 800232e:	f000 f9a1 	bl	8002674 <_ZN6modbus11send_packetEttPhi>
}
 8002332:	bf00      	nop
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	200001d0 	.word	0x200001d0

08002340 <UART_CallBack>:

void UART_CallBack(UART_HandleTypeDef *huart) {
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a09      	ldr	r2, [pc, #36]	; (8002374 <UART_CallBack+0x34>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d103      	bne.n	800235a <UART_CallBack+0x1a>
		Serial2.buffer_overflow();
 8002352:	4809      	ldr	r0, [pc, #36]	; (8002378 <UART_CallBack+0x38>)
 8002354:	f000 fb0d 	bl	8002972 <_ZN8mySerial15buffer_overflowEv>
	else if(huart->Instance == USART3)
		modbus1.buffer_overflow();
}
 8002358:	e007      	b.n	800236a <UART_CallBack+0x2a>
	else if(huart->Instance == USART3)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a07      	ldr	r2, [pc, #28]	; (800237c <UART_CallBack+0x3c>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d102      	bne.n	800236a <UART_CallBack+0x2a>
		modbus1.buffer_overflow();
 8002364:	4806      	ldr	r0, [pc, #24]	; (8002380 <UART_CallBack+0x40>)
 8002366:	f000 f9fc 	bl	8002762 <_ZN6modbus15buffer_overflowEv>
}
 800236a:	bf00      	nop
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40004400 	.word	0x40004400
 8002378:	20000090 	.word	0x20000090
 800237c:	40004800 	.word	0x40004800
 8002380:	200001d0 	.word	0x200001d0

08002384 <_Z41__static_initialization_and_destruction_0ii>:
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d10a      	bne.n	80023aa <_Z41__static_initialization_and_destruction_0ii+0x26>
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800239a:	4293      	cmp	r3, r2
 800239c:	d105      	bne.n	80023aa <_Z41__static_initialization_and_destruction_0ii+0x26>
mySerial Serial2;
 800239e:	4805      	ldr	r0, [pc, #20]	; (80023b4 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 80023a0:	f000 f9eb 	bl	800277a <_ZN8mySerialC1Ev>
modbus modbus1;
 80023a4:	4804      	ldr	r0, [pc, #16]	; (80023b8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80023a6:	f000 f811 	bl	80023cc <_ZN6modbusC1Ev>
}
 80023aa:	bf00      	nop
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	20000090 	.word	0x20000090
 80023b8:	200001d0 	.word	0x200001d0

080023bc <_GLOBAL__sub_I_Serial2>:
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
 80023c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80023c4:	2001      	movs	r0, #1
 80023c6:	f7ff ffdd 	bl	8002384 <_Z41__static_initialization_and_destruction_0ii>
 80023ca:	bd80      	pop	{r7, pc}

080023cc <_ZN6modbusC1Ev>:
#include "modbus.h"

modbus::modbus()
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	711a      	strb	r2, [r3, #4]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	715a      	strb	r2, [r3, #5]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	719a      	strb	r2, [r3, #6]
{
	
}
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4618      	mov	r0, r3
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bc80      	pop	{r7}
 80023f0:	4770      	bx	lr

080023f2 <_ZN6modbus5beginEP20__UART_HandleTypeDefPFvPhiE>:

void modbus::begin(UART_HandleTypeDef* uart, receive_modbus)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b084      	sub	sp, #16
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	60f8      	str	r0, [r7, #12]
 80023fa:	60b9      	str	r1, [r7, #8]
 80023fc:	607a      	str	r2, [r7, #4]
	this->uart = uart;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	68ba      	ldr	r2, [r7, #8]
 8002402:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	this->callback = callback;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	601a      	str	r2, [r3, #0]
	uart_dma(this->uart, data_buffer, buffer_length);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f8d3 013c 	ldr.w	r0, [r3, #316]	; 0x13c
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	330f      	adds	r3, #15
 8002416:	f44f 7280 	mov.w	r2, #256	; 0x100
 800241a:	4619      	mov	r1, r3
 800241c:	f7ff fc62 	bl	8001ce4 <HAL_UART_Receive_DMA>
}
 8002420:	bf00      	nop
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <_ZN6modbus6CRC_16EPhhS0_>:

void modbus::CRC_16(byte* input, byte Length, byte* output)
{
 8002428:	b480      	push	{r7}
 800242a:	b087      	sub	sp, #28
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	603b      	str	r3, [r7, #0]
 8002434:	4613      	mov	r3, r2
 8002436:	71fb      	strb	r3, [r7, #7]
	uint16_t reg_crc = 0xffff;
 8002438:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800243c:	82fb      	strh	r3, [r7, #22]
	for(byte i = 0; i< Length; i++) {
 800243e:	2300      	movs	r3, #0
 8002440:	757b      	strb	r3, [r7, #21]
 8002442:	7d7a      	ldrb	r2, [r7, #21]
 8002444:	79fb      	ldrb	r3, [r7, #7]
 8002446:	429a      	cmp	r2, r3
 8002448:	d224      	bcs.n	8002494 <_ZN6modbus6CRC_16EPhhS0_+0x6c>
		reg_crc ^= input[i];
 800244a:	7d7b      	ldrb	r3, [r7, #21]
 800244c:	68ba      	ldr	r2, [r7, #8]
 800244e:	4413      	add	r3, r2
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	b29a      	uxth	r2, r3
 8002454:	8afb      	ldrh	r3, [r7, #22]
 8002456:	4053      	eors	r3, r2
 8002458:	82fb      	strh	r3, [r7, #22]
		for(byte j = 0; j < 8; j++) {
 800245a:	2300      	movs	r3, #0
 800245c:	753b      	strb	r3, [r7, #20]
 800245e:	7d3b      	ldrb	r3, [r7, #20]
 8002460:	2b07      	cmp	r3, #7
 8002462:	d813      	bhi.n	800248c <_ZN6modbus6CRC_16EPhhS0_+0x64>
			if((reg_crc & 0x0001) == 1) reg_crc = (uint16_t)((reg_crc >> 1) ^ 0xA001);
 8002464:	8afb      	ldrh	r3, [r7, #22]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	d007      	beq.n	800247e <_ZN6modbus6CRC_16EPhhS0_+0x56>
 800246e:	8afb      	ldrh	r3, [r7, #22]
 8002470:	105b      	asrs	r3, r3, #1
 8002472:	b21a      	sxth	r2, r3
 8002474:	4b0f      	ldr	r3, [pc, #60]	; (80024b4 <_ZN6modbus6CRC_16EPhhS0_+0x8c>)
 8002476:	4053      	eors	r3, r2
 8002478:	b21b      	sxth	r3, r3
 800247a:	82fb      	strh	r3, [r7, #22]
 800247c:	e002      	b.n	8002484 <_ZN6modbus6CRC_16EPhhS0_+0x5c>
			else reg_crc = (uint16_t)(reg_crc >> 1);
 800247e:	8afb      	ldrh	r3, [r7, #22]
 8002480:	105b      	asrs	r3, r3, #1
 8002482:	82fb      	strh	r3, [r7, #22]
		for(byte j = 0; j < 8; j++) {
 8002484:	7d3b      	ldrb	r3, [r7, #20]
 8002486:	3301      	adds	r3, #1
 8002488:	753b      	strb	r3, [r7, #20]
 800248a:	e7e8      	b.n	800245e <_ZN6modbus6CRC_16EPhhS0_+0x36>
	for(byte i = 0; i< Length; i++) {
 800248c:	7d7b      	ldrb	r3, [r7, #21]
 800248e:	3301      	adds	r3, #1
 8002490:	757b      	strb	r3, [r7, #21]
 8002492:	e7d6      	b.n	8002442 <_ZN6modbus6CRC_16EPhhS0_+0x1a>
		}
	}
	output[1] = (byte)((reg_crc >> 8) & 0xff);
 8002494:	8afb      	ldrh	r3, [r7, #22]
 8002496:	0a1b      	lsrs	r3, r3, #8
 8002498:	b29a      	uxth	r2, r3
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	3301      	adds	r3, #1
 800249e:	b2d2      	uxtb	r2, r2
 80024a0:	701a      	strb	r2, [r3, #0]
	output[0] = (byte)(reg_crc & 0xff);	
 80024a2:	8afb      	ldrh	r3, [r7, #22]
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	701a      	strb	r2, [r3, #0]
}
 80024aa:	bf00      	nop
 80024ac:	371c      	adds	r7, #28
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bc80      	pop	{r7}
 80024b2:	4770      	bx	lr
 80024b4:	ffffa001 	.word	0xffffa001

080024b8 <_ZN6modbus7loopingEv>:

void modbus::looping()
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
	write_pointer = buffer_length - (byte)(uart->hdmarx->Instance->CNDTR);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80024c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	425b      	negs	r3, r3
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	71da      	strb	r2, [r3, #7]
	if(sync_status == false && (byte)(write_pointer - read_pointer) >= 3) {
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	795b      	ldrb	r3, [r3, #5]
 80024da:	f083 0301 	eor.w	r3, r3, #1
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d046      	beq.n	8002572 <_ZN6modbus7loopingEv+0xba>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	79da      	ldrb	r2, [r3, #7]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	7a1b      	ldrb	r3, [r3, #8]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d93e      	bls.n	8002572 <_ZN6modbus7loopingEv+0xba>
		if(data_buffer[read_pointer++] == header[0] && data_buffer[read_pointer++] == header[1]) {
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	7a1b      	ldrb	r3, [r3, #8]
 80024f8:	1c5a      	adds	r2, r3, #1
 80024fa:	b2d1      	uxtb	r1, r2
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	7211      	strb	r1, [r2, #8]
 8002500:	461a      	mov	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4413      	add	r3, r2
 8002506:	7bda      	ldrb	r2, [r3, #15]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	7adb      	ldrb	r3, [r3, #11]
 800250c:	429a      	cmp	r2, r3
 800250e:	d10f      	bne.n	8002530 <_ZN6modbus7loopingEv+0x78>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	7a1b      	ldrb	r3, [r3, #8]
 8002514:	1c5a      	adds	r2, r3, #1
 8002516:	b2d1      	uxtb	r1, r2
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	7211      	strb	r1, [r2, #8]
 800251c:	461a      	mov	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4413      	add	r3, r2
 8002522:	7bda      	ldrb	r2, [r3, #15]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	7b1b      	ldrb	r3, [r3, #12]
 8002528:	429a      	cmp	r2, r3
 800252a:	d101      	bne.n	8002530 <_ZN6modbus7loopingEv+0x78>
 800252c:	2301      	movs	r3, #1
 800252e:	e000      	b.n	8002532 <_ZN6modbus7loopingEv+0x7a>
 8002530:	2300      	movs	r3, #0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d013      	beq.n	800255e <_ZN6modbus7loopingEv+0xa6>
			if(fixed_receive_length == true) receive_length = data_buffer[read_pointer++];
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	799b      	ldrb	r3, [r3, #6]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00b      	beq.n	8002556 <_ZN6modbus7loopingEv+0x9e>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	7a1b      	ldrb	r3, [r3, #8]
 8002542:	1c5a      	adds	r2, r3, #1
 8002544:	b2d1      	uxtb	r1, r2
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	7211      	strb	r1, [r2, #8]
 800254a:	461a      	mov	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4413      	add	r3, r2
 8002550:	7bda      	ldrb	r2, [r3, #15]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	725a      	strb	r2, [r3, #9]
			sync_status = true;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2201      	movs	r2, #1
 800255a:	715a      	strb	r2, [r3, #5]
 800255c:	e005      	b.n	800256a <_ZN6modbus7loopingEv+0xb2>
		}else{
			read_pointer++;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	7a1b      	ldrb	r3, [r3, #8]
 8002562:	3301      	adds	r3, #1
 8002564:	b2da      	uxtb	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	721a      	strb	r2, [r3, #8]
		}
		overflow_flag = false;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	711a      	strb	r2, [r3, #4]
 8002570:	e07c      	b.n	800266c <_ZN6modbus7loopingEv+0x1b4>
	}else if(sync_status == true && (byte)(write_pointer - read_pointer) >= receive_length + 2) {
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	795b      	ldrb	r3, [r3, #5]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d078      	beq.n	800266c <_ZN6modbus7loopingEv+0x1b4>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	79da      	ldrb	r2, [r3, #7]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	7a1b      	ldrb	r3, [r3, #8]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	b2db      	uxtb	r3, r3
 8002586:	461a      	mov	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	7a5b      	ldrb	r3, [r3, #9]
 800258c:	3302      	adds	r3, #2
 800258e:	429a      	cmp	r2, r3
 8002590:	db6c      	blt.n	800266c <_ZN6modbus7loopingEv+0x1b4>
		if (fixed_receive_length == true) CRC_16(&data_buffer[read_pointer-3], receive_length + 3, footer);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	799b      	ldrb	r3, [r3, #6]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d010      	beq.n	80025bc <_ZN6modbus7loopingEv+0x104>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	7a1b      	ldrb	r3, [r3, #8]
 800259e:	3b03      	subs	r3, #3
 80025a0:	3308      	adds	r3, #8
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	4413      	add	r3, r2
 80025a6:	1dd9      	adds	r1, r3, #7
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	7a5b      	ldrb	r3, [r3, #9]
 80025ac:	3303      	adds	r3, #3
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	330d      	adds	r3, #13
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f7ff ff37 	bl	8002428 <_ZN6modbus6CRC_16EPhhS0_>
 80025ba:	e00f      	b.n	80025dc <_ZN6modbus7loopingEv+0x124>
		else CRC_16(&data_buffer[read_pointer-2], receive_length + 2, footer);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	7a1b      	ldrb	r3, [r3, #8]
 80025c0:	3b02      	subs	r3, #2
 80025c2:	3308      	adds	r3, #8
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	4413      	add	r3, r2
 80025c8:	1dd9      	adds	r1, r3, #7
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	7a5b      	ldrb	r3, [r3, #9]
 80025ce:	3302      	adds	r3, #2
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	330d      	adds	r3, #13
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f7ff ff26 	bl	8002428 <_ZN6modbus6CRC_16EPhhS0_>
		
		if(data_buffer[(byte)(write_pointer-2)] == footer[0] && data_buffer[(byte)(write_pointer-1)] == footer[1]){
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	79db      	ldrb	r3, [r3, #7]
 80025e0:	3b02      	subs	r3, #2
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	461a      	mov	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4413      	add	r3, r2
 80025ea:	7bda      	ldrb	r2, [r3, #15]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	7b5b      	ldrb	r3, [r3, #13]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d137      	bne.n	8002664 <_ZN6modbus7loopingEv+0x1ac>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	79db      	ldrb	r3, [r3, #7]
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	461a      	mov	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4413      	add	r3, r2
 8002602:	7bda      	ldrb	r2, [r3, #15]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	7b9b      	ldrb	r3, [r3, #14]
 8002608:	429a      	cmp	r2, r3
 800260a:	d12b      	bne.n	8002664 <_ZN6modbus7loopingEv+0x1ac>
			sync_status = false;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	715a      	strb	r2, [r3, #5]
			if(overflow_flag == true)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	791b      	ldrb	r3, [r3, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00a      	beq.n	8002630 <_ZN6modbus7loopingEv+0x178>
				memcpy(&data_buffer[256], data_buffer, write_pointer);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f203 100f 	addw	r0, r3, #271	; 0x10f
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f103 010f 	add.w	r1, r3, #15
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	79db      	ldrb	r3, [r3, #7]
 800262a:	461a      	mov	r2, r3
 800262c:	f000 fa0e 	bl	8002a4c <memcpy>
			this->callback(&data_buffer[read_pointer+=(receive_length + 2)], receive_length);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	7a11      	ldrb	r1, [r2, #8]
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	7a52      	ldrb	r2, [r2, #9]
 800263c:	440a      	add	r2, r1
 800263e:	b2d2      	uxtb	r2, r2
 8002640:	3202      	adds	r2, #2
 8002642:	b2d1      	uxtb	r1, r2
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	7211      	strb	r1, [r2, #8]
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	7a12      	ldrb	r2, [r2, #8]
 800264c:	3208      	adds	r2, #8
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	440a      	add	r2, r1
 8002652:	1dd0      	adds	r0, r2, #7
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	7a52      	ldrb	r2, [r2, #9]
 8002658:	4611      	mov	r1, r2
 800265a:	4798      	blx	r3
			overflow_flag = false;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	711a      	strb	r2, [r3, #4]
 8002662:	e003      	b.n	800266c <_ZN6modbus7loopingEv+0x1b4>
		}else{
			//error handle packet format
			overflow_flag = false;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	711a      	strb	r2, [r3, #4]
		}
	}
}
 800266a:	e7ff      	b.n	800266c <_ZN6modbus7loopingEv+0x1b4>
 800266c:	bf00      	nop
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <_ZN6modbus11send_packetEttPhi>:

void modbus::send_packet(uint16_t header, uint16_t footer, byte* data, int length)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	607b      	str	r3, [r7, #4]
 800267e:	460b      	mov	r3, r1
 8002680:	817b      	strh	r3, [r7, #10]
 8002682:	4613      	mov	r3, r2
 8002684:	813b      	strh	r3, [r7, #8]
	byte* temper_packet;
	temper_packet = new byte[length + 5];
 8002686:	6a3b      	ldr	r3, [r7, #32]
 8002688:	3305      	adds	r3, #5
 800268a:	4618      	mov	r0, r3
 800268c:	f000 f97f 	bl	800298e <_Znaj>
 8002690:	4603      	mov	r3, r0
 8002692:	617b      	str	r3, [r7, #20]
	temper_packet[0] = (byte)(header >>8 & 0xff);
 8002694:	897b      	ldrh	r3, [r7, #10]
 8002696:	0a1b      	lsrs	r3, r3, #8
 8002698:	b29b      	uxth	r3, r3
 800269a:	b2da      	uxtb	r2, r3
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	701a      	strb	r2, [r3, #0]
	temper_packet[1] = (byte)(header & 0xff);
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	3301      	adds	r3, #1
 80026a4:	897a      	ldrh	r2, [r7, #10]
 80026a6:	b2d2      	uxtb	r2, r2
 80026a8:	701a      	strb	r2, [r3, #0]
	memcpy(&temper_packet[2], data, length);
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	3302      	adds	r3, #2
 80026ae:	6a3a      	ldr	r2, [r7, #32]
 80026b0:	6879      	ldr	r1, [r7, #4]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f000 f9ca 	bl	8002a4c <memcpy>
	temper_packet[length+2] = (byte)(footer >>8 & 0xff);
 80026b8:	893b      	ldrh	r3, [r7, #8]
 80026ba:	0a1b      	lsrs	r3, r3, #8
 80026bc:	b299      	uxth	r1, r3
 80026be:	6a3b      	ldr	r3, [r7, #32]
 80026c0:	3302      	adds	r3, #2
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	4413      	add	r3, r2
 80026c6:	b2ca      	uxtb	r2, r1
 80026c8:	701a      	strb	r2, [r3, #0]
	temper_packet[length+3] = (byte)(footer & 0xff);
 80026ca:	6a3b      	ldr	r3, [r7, #32]
 80026cc:	3303      	adds	r3, #3
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	4413      	add	r3, r2
 80026d2:	893a      	ldrh	r2, [r7, #8]
 80026d4:	b2d2      	uxtb	r2, r2
 80026d6:	701a      	strb	r2, [r3, #0]
	uart_send(uart, temper_packet, length+5);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f8d3 013c 	ldr.w	r0, [r3, #316]	; 0x13c
 80026de:	6a3b      	ldr	r3, [r7, #32]
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	3305      	adds	r3, #5
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	461a      	mov	r2, r3
 80026e8:	6979      	ldr	r1, [r7, #20]
 80026ea:	f7ff fa8f 	bl	8001c0c <HAL_UART_Transmit_DMA>
	delete[] temper_packet;
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d002      	beq.n	80026fa <_ZN6modbus11send_packetEttPhi+0x86>
 80026f4:	6978      	ldr	r0, [r7, #20]
 80026f6:	f000 f948 	bl	800298a <_ZdaPv>
}
 80026fa:	bf00      	nop
 80026fc:	3718      	adds	r7, #24
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <_ZN6modbus15request_handlerEPhi>:

void modbus::request_handler(byte* input, int length)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b084      	sub	sp, #16
 8002706:	af00      	add	r7, sp, #0
 8002708:	60f8      	str	r0, [r7, #12]
 800270a:	60b9      	str	r1, [r7, #8]
 800270c:	607a      	str	r2, [r7, #4]
	packet_id = input[0];
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	781a      	ldrb	r2, [r3, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	729a      	strb	r2, [r3, #10]
	header[0] = input[1];
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	785a      	ldrb	r2, [r3, #1]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	72da      	strb	r2, [r3, #11]
	header[1] = input[2];
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	789a      	ldrb	r2, [r3, #2]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	731a      	strb	r2, [r3, #12]
	if(header[1] <= 4) 
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	7b1b      	ldrb	r3, [r3, #12]
 800272a:	2b04      	cmp	r3, #4
 800272c:	d803      	bhi.n	8002736 <_ZN6modbus15request_handlerEPhi+0x34>
		fixed_receive_length = true;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2201      	movs	r2, #1
 8002732:	719a      	strb	r2, [r3, #6]
 8002734:	e005      	b.n	8002742 <_ZN6modbus15request_handlerEPhi+0x40>
	else {
		fixed_receive_length = false;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	719a      	strb	r2, [r3, #6]
		receive_length = 4;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2204      	movs	r2, #4
 8002740:	725a      	strb	r2, [r3, #9]
	}		
	uart_send(this->uart, &input[1], length - 1);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f8d3 013c 	ldr.w	r0, [r3, #316]	; 0x13c
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	1c59      	adds	r1, r3, #1
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	b29b      	uxth	r3, r3
 8002750:	3b01      	subs	r3, #1
 8002752:	b29b      	uxth	r3, r3
 8002754:	461a      	mov	r2, r3
 8002756:	f7ff fa59 	bl	8001c0c <HAL_UART_Transmit_DMA>
}
 800275a:	bf00      	nop
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <_ZN6modbus15buffer_overflowEv>:

void modbus::buffer_overflow()
{
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
	overflow_flag = true;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	711a      	strb	r2, [r3, #4]
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	bc80      	pop	{r7}
 8002778:	4770      	bx	lr

0800277a <_ZN8mySerialC1Ev>:
 *  Created on: Aug 31, 2020
 *      Author: Admin
 */

#include "mySerial.h"
mySerial::mySerial()
 800277a:	b480      	push	{r7}
 800277c:	b083      	sub	sp, #12
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	711a      	strb	r2, [r3, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	715a      	strb	r2, [r3, #5]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	719a      	strb	r2, [r3, #6]
{

}
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4618      	mov	r0, r3
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr

080027a0 <_ZN8mySerial5beginEP20__UART_HandleTypeDefttPFvPhiE>:

void mySerial::begin(UART_HandleTypeDef* uart, uint16_t header, uint16_t footer, uart_received)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	4611      	mov	r1, r2
 80027ac:	461a      	mov	r2, r3
 80027ae:	460b      	mov	r3, r1
 80027b0:	80fb      	strh	r3, [r7, #6]
 80027b2:	4613      	mov	r3, r2
 80027b4:	80bb      	strh	r3, [r7, #4]
	this->header[0] = (byte)(header>>8 & 0xff);
 80027b6:	88fb      	ldrh	r3, [r7, #6]
 80027b8:	0a1b      	lsrs	r3, r3, #8
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	729a      	strb	r2, [r3, #10]
	this->header[1] = (byte)(header & 0xff);
 80027c2:	88fb      	ldrh	r3, [r7, #6]
 80027c4:	b2da      	uxtb	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	72da      	strb	r2, [r3, #11]
	this->footer[0] = (byte)(footer>>8 & 0xff);
 80027ca:	88bb      	ldrh	r3, [r7, #4]
 80027cc:	0a1b      	lsrs	r3, r3, #8
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	731a      	strb	r2, [r3, #12]
	this->footer[1] = (byte)(footer & 0xff);
 80027d6:	88bb      	ldrh	r3, [r7, #4]
 80027d8:	b2da      	uxtb	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	735a      	strb	r2, [r3, #13]
	this->uart = uart;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	68ba      	ldr	r2, [r7, #8]
 80027e2:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	this->callback = callback;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	601a      	str	r2, [r3, #0]
	uart_dma(this->uart, data_buffer, buffer_length);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f8d3 013c 	ldr.w	r0, [r3, #316]	; 0x13c
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	330e      	adds	r3, #14
 80027f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027fa:	4619      	mov	r1, r3
 80027fc:	f7ff fa72 	bl	8001ce4 <HAL_UART_Receive_DMA>
}
 8002800:	bf00      	nop
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <_ZN8mySerial7loopingEv>:

void mySerial::looping()
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
	write_pointer = buffer_length - (byte)(uart->hdmarx->Instance->CNDTR);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8002816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	b2db      	uxtb	r3, r3
 800281e:	425b      	negs	r3, r3
 8002820:	b2da      	uxtb	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	71da      	strb	r2, [r3, #7]
	if(sync_status == false && (byte)(write_pointer - read_pointer) >= 3) {
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	795b      	ldrb	r3, [r3, #5]
 800282a:	f083 0301 	eor.w	r3, r3, #1
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b00      	cmp	r3, #0
 8002832:	d042      	beq.n	80028ba <_ZN8mySerial7loopingEv+0xb2>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	79da      	ldrb	r2, [r3, #7]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	7a1b      	ldrb	r3, [r3, #8]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d93a      	bls.n	80028ba <_ZN8mySerial7loopingEv+0xb2>
		if(data_buffer[read_pointer++] == header[0] && data_buffer[read_pointer++] == header[1]) {
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	7a1b      	ldrb	r3, [r3, #8]
 8002848:	1c5a      	adds	r2, r3, #1
 800284a:	b2d1      	uxtb	r1, r2
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	7211      	strb	r1, [r2, #8]
 8002850:	461a      	mov	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4413      	add	r3, r2
 8002856:	7b9a      	ldrb	r2, [r3, #14]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	7a9b      	ldrb	r3, [r3, #10]
 800285c:	429a      	cmp	r2, r3
 800285e:	d10f      	bne.n	8002880 <_ZN8mySerial7loopingEv+0x78>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	7a1b      	ldrb	r3, [r3, #8]
 8002864:	1c5a      	adds	r2, r3, #1
 8002866:	b2d1      	uxtb	r1, r2
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	7211      	strb	r1, [r2, #8]
 800286c:	461a      	mov	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4413      	add	r3, r2
 8002872:	7b9a      	ldrb	r2, [r3, #14]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	7adb      	ldrb	r3, [r3, #11]
 8002878:	429a      	cmp	r2, r3
 800287a:	d101      	bne.n	8002880 <_ZN8mySerial7loopingEv+0x78>
 800287c:	2301      	movs	r3, #1
 800287e:	e000      	b.n	8002882 <_ZN8mySerial7loopingEv+0x7a>
 8002880:	2300      	movs	r3, #0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00f      	beq.n	80028a6 <_ZN8mySerial7loopingEv+0x9e>
			receive_length = data_buffer[read_pointer++];
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	7a1b      	ldrb	r3, [r3, #8]
 800288a:	1c5a      	adds	r2, r3, #1
 800288c:	b2d1      	uxtb	r1, r2
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	7211      	strb	r1, [r2, #8]
 8002892:	461a      	mov	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4413      	add	r3, r2
 8002898:	7b9a      	ldrb	r2, [r3, #14]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	725a      	strb	r2, [r3, #9]
			sync_status = true;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2201      	movs	r2, #1
 80028a2:	715a      	strb	r2, [r3, #5]
 80028a4:	e005      	b.n	80028b2 <_ZN8mySerial7loopingEv+0xaa>
		}else{
			read_pointer++;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	7a1b      	ldrb	r3, [r3, #8]
 80028aa:	3301      	adds	r3, #1
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	721a      	strb	r2, [r3, #8]
		}
		overflow_flag = false;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	711a      	strb	r2, [r3, #4]
 80028b8:	e057      	b.n	800296a <_ZN8mySerial7loopingEv+0x162>
	}else if(sync_status == true && (byte)(write_pointer - read_pointer) >= receive_length + 2) {
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	795b      	ldrb	r3, [r3, #5]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d053      	beq.n	800296a <_ZN8mySerial7loopingEv+0x162>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	79da      	ldrb	r2, [r3, #7]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	7a1b      	ldrb	r3, [r3, #8]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	461a      	mov	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	7a5b      	ldrb	r3, [r3, #9]
 80028d4:	3302      	adds	r3, #2
 80028d6:	429a      	cmp	r2, r3
 80028d8:	db47      	blt.n	800296a <_ZN8mySerial7loopingEv+0x162>
		if(data_buffer[(byte)(write_pointer-2)] == footer[0] && data_buffer[(byte)(write_pointer-1)] == footer[1]){
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	79db      	ldrb	r3, [r3, #7]
 80028de:	3b02      	subs	r3, #2
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	461a      	mov	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4413      	add	r3, r2
 80028e8:	7b9a      	ldrb	r2, [r3, #14]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	7b1b      	ldrb	r3, [r3, #12]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d137      	bne.n	8002962 <_ZN8mySerial7loopingEv+0x15a>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	79db      	ldrb	r3, [r3, #7]
 80028f6:	3b01      	subs	r3, #1
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	461a      	mov	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4413      	add	r3, r2
 8002900:	7b9a      	ldrb	r2, [r3, #14]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	7b5b      	ldrb	r3, [r3, #13]
 8002906:	429a      	cmp	r2, r3
 8002908:	d12b      	bne.n	8002962 <_ZN8mySerial7loopingEv+0x15a>
			sync_status = false;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	715a      	strb	r2, [r3, #5]
			if(overflow_flag == true)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	791b      	ldrb	r3, [r3, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00a      	beq.n	800292e <_ZN8mySerial7loopingEv+0x126>
				memcpy(&data_buffer[256], data_buffer, write_pointer);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f503 7087 	add.w	r0, r3, #270	; 0x10e
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f103 010e 	add.w	r1, r3, #14
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	79db      	ldrb	r3, [r3, #7]
 8002928:	461a      	mov	r2, r3
 800292a:	f000 f88f 	bl	8002a4c <memcpy>
			this->callback(&data_buffer[read_pointer+=(receive_length + 2)], receive_length);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	7a11      	ldrb	r1, [r2, #8]
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	7a52      	ldrb	r2, [r2, #9]
 800293a:	440a      	add	r2, r1
 800293c:	b2d2      	uxtb	r2, r2
 800293e:	3202      	adds	r2, #2
 8002940:	b2d1      	uxtb	r1, r2
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	7211      	strb	r1, [r2, #8]
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	7a12      	ldrb	r2, [r2, #8]
 800294a:	3208      	adds	r2, #8
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	440a      	add	r2, r1
 8002950:	1d90      	adds	r0, r2, #6
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	7a52      	ldrb	r2, [r2, #9]
 8002956:	4611      	mov	r1, r2
 8002958:	4798      	blx	r3
			overflow_flag = false;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	711a      	strb	r2, [r3, #4]
 8002960:	e003      	b.n	800296a <_ZN8mySerial7loopingEv+0x162>
		}else{
			//error handle packet format
			overflow_flag = false;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	711a      	strb	r2, [r3, #4]
		}
	}
}
 8002968:	e7ff      	b.n	800296a <_ZN8mySerial7loopingEv+0x162>
 800296a:	bf00      	nop
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <_ZN8mySerial15buffer_overflowEv>:


void mySerial::buffer_overflow()
{
 8002972:	b480      	push	{r7}
 8002974:	b083      	sub	sp, #12
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
	overflow_flag = true;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2201      	movs	r2, #1
 800297e:	711a      	strb	r2, [r3, #4]
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	bc80      	pop	{r7}
 8002988:	4770      	bx	lr

0800298a <_ZdaPv>:
 800298a:	f000 b81b 	b.w	80029c4 <_ZdlPv>

0800298e <_Znaj>:
 800298e:	f000 b800 	b.w	8002992 <_Znwj>

08002992 <_Znwj>:
 8002992:	b510      	push	{r4, lr}
 8002994:	2800      	cmp	r0, #0
 8002996:	bf14      	ite	ne
 8002998:	4604      	movne	r4, r0
 800299a:	2401      	moveq	r4, #1
 800299c:	4620      	mov	r0, r4
 800299e:	f000 f845 	bl	8002a2c <malloc>
 80029a2:	b930      	cbnz	r0, 80029b2 <_Znwj+0x20>
 80029a4:	f000 f806 	bl	80029b4 <_ZSt15get_new_handlerv>
 80029a8:	b908      	cbnz	r0, 80029ae <_Znwj+0x1c>
 80029aa:	f000 f80d 	bl	80029c8 <abort>
 80029ae:	4780      	blx	r0
 80029b0:	e7f4      	b.n	800299c <_Znwj+0xa>
 80029b2:	bd10      	pop	{r4, pc}

080029b4 <_ZSt15get_new_handlerv>:
 80029b4:	4b02      	ldr	r3, [pc, #8]	; (80029c0 <_ZSt15get_new_handlerv+0xc>)
 80029b6:	6818      	ldr	r0, [r3, #0]
 80029b8:	f3bf 8f5b 	dmb	ish
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	20000310 	.word	0x20000310

080029c4 <_ZdlPv>:
 80029c4:	f000 b83a 	b.w	8002a3c <free>

080029c8 <abort>:
 80029c8:	b508      	push	{r3, lr}
 80029ca:	2006      	movs	r0, #6
 80029cc:	f000 f930 	bl	8002c30 <raise>
 80029d0:	2001      	movs	r0, #1
 80029d2:	f7fd feda 	bl	800078a <_exit>
	...

080029d8 <__errno>:
 80029d8:	4b01      	ldr	r3, [pc, #4]	; (80029e0 <__errno+0x8>)
 80029da:	6818      	ldr	r0, [r3, #0]
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	2000000c 	.word	0x2000000c

080029e4 <__libc_init_array>:
 80029e4:	b570      	push	{r4, r5, r6, lr}
 80029e6:	2500      	movs	r5, #0
 80029e8:	4e0c      	ldr	r6, [pc, #48]	; (8002a1c <__libc_init_array+0x38>)
 80029ea:	4c0d      	ldr	r4, [pc, #52]	; (8002a20 <__libc_init_array+0x3c>)
 80029ec:	1ba4      	subs	r4, r4, r6
 80029ee:	10a4      	asrs	r4, r4, #2
 80029f0:	42a5      	cmp	r5, r4
 80029f2:	d109      	bne.n	8002a08 <__libc_init_array+0x24>
 80029f4:	f000 f93a 	bl	8002c6c <_init>
 80029f8:	2500      	movs	r5, #0
 80029fa:	4e0a      	ldr	r6, [pc, #40]	; (8002a24 <__libc_init_array+0x40>)
 80029fc:	4c0a      	ldr	r4, [pc, #40]	; (8002a28 <__libc_init_array+0x44>)
 80029fe:	1ba4      	subs	r4, r4, r6
 8002a00:	10a4      	asrs	r4, r4, #2
 8002a02:	42a5      	cmp	r5, r4
 8002a04:	d105      	bne.n	8002a12 <__libc_init_array+0x2e>
 8002a06:	bd70      	pop	{r4, r5, r6, pc}
 8002a08:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a0c:	4798      	blx	r3
 8002a0e:	3501      	adds	r5, #1
 8002a10:	e7ee      	b.n	80029f0 <__libc_init_array+0xc>
 8002a12:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a16:	4798      	blx	r3
 8002a18:	3501      	adds	r5, #1
 8002a1a:	e7f2      	b.n	8002a02 <__libc_init_array+0x1e>
 8002a1c:	08002cb0 	.word	0x08002cb0
 8002a20:	08002cb0 	.word	0x08002cb0
 8002a24:	08002cb0 	.word	0x08002cb0
 8002a28:	08002cb8 	.word	0x08002cb8

08002a2c <malloc>:
 8002a2c:	4b02      	ldr	r3, [pc, #8]	; (8002a38 <malloc+0xc>)
 8002a2e:	4601      	mov	r1, r0
 8002a30:	6818      	ldr	r0, [r3, #0]
 8002a32:	f000 b86b 	b.w	8002b0c <_malloc_r>
 8002a36:	bf00      	nop
 8002a38:	2000000c 	.word	0x2000000c

08002a3c <free>:
 8002a3c:	4b02      	ldr	r3, [pc, #8]	; (8002a48 <free+0xc>)
 8002a3e:	4601      	mov	r1, r0
 8002a40:	6818      	ldr	r0, [r3, #0]
 8002a42:	f000 b817 	b.w	8002a74 <_free_r>
 8002a46:	bf00      	nop
 8002a48:	2000000c 	.word	0x2000000c

08002a4c <memcpy>:
 8002a4c:	b510      	push	{r4, lr}
 8002a4e:	1e43      	subs	r3, r0, #1
 8002a50:	440a      	add	r2, r1
 8002a52:	4291      	cmp	r1, r2
 8002a54:	d100      	bne.n	8002a58 <memcpy+0xc>
 8002a56:	bd10      	pop	{r4, pc}
 8002a58:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002a60:	e7f7      	b.n	8002a52 <memcpy+0x6>

08002a62 <memset>:
 8002a62:	4603      	mov	r3, r0
 8002a64:	4402      	add	r2, r0
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d100      	bne.n	8002a6c <memset+0xa>
 8002a6a:	4770      	bx	lr
 8002a6c:	f803 1b01 	strb.w	r1, [r3], #1
 8002a70:	e7f9      	b.n	8002a66 <memset+0x4>
	...

08002a74 <_free_r>:
 8002a74:	b538      	push	{r3, r4, r5, lr}
 8002a76:	4605      	mov	r5, r0
 8002a78:	2900      	cmp	r1, #0
 8002a7a:	d043      	beq.n	8002b04 <_free_r+0x90>
 8002a7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a80:	1f0c      	subs	r4, r1, #4
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	bfb8      	it	lt
 8002a86:	18e4      	addlt	r4, r4, r3
 8002a88:	f000 f8ee 	bl	8002c68 <__malloc_lock>
 8002a8c:	4a1e      	ldr	r2, [pc, #120]	; (8002b08 <_free_r+0x94>)
 8002a8e:	6813      	ldr	r3, [r2, #0]
 8002a90:	4610      	mov	r0, r2
 8002a92:	b933      	cbnz	r3, 8002aa2 <_free_r+0x2e>
 8002a94:	6063      	str	r3, [r4, #4]
 8002a96:	6014      	str	r4, [r2, #0]
 8002a98:	4628      	mov	r0, r5
 8002a9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002a9e:	f000 b8e4 	b.w	8002c6a <__malloc_unlock>
 8002aa2:	42a3      	cmp	r3, r4
 8002aa4:	d90b      	bls.n	8002abe <_free_r+0x4a>
 8002aa6:	6821      	ldr	r1, [r4, #0]
 8002aa8:	1862      	adds	r2, r4, r1
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	bf01      	itttt	eq
 8002aae:	681a      	ldreq	r2, [r3, #0]
 8002ab0:	685b      	ldreq	r3, [r3, #4]
 8002ab2:	1852      	addeq	r2, r2, r1
 8002ab4:	6022      	streq	r2, [r4, #0]
 8002ab6:	6063      	str	r3, [r4, #4]
 8002ab8:	6004      	str	r4, [r0, #0]
 8002aba:	e7ed      	b.n	8002a98 <_free_r+0x24>
 8002abc:	4613      	mov	r3, r2
 8002abe:	685a      	ldr	r2, [r3, #4]
 8002ac0:	b10a      	cbz	r2, 8002ac6 <_free_r+0x52>
 8002ac2:	42a2      	cmp	r2, r4
 8002ac4:	d9fa      	bls.n	8002abc <_free_r+0x48>
 8002ac6:	6819      	ldr	r1, [r3, #0]
 8002ac8:	1858      	adds	r0, r3, r1
 8002aca:	42a0      	cmp	r0, r4
 8002acc:	d10b      	bne.n	8002ae6 <_free_r+0x72>
 8002ace:	6820      	ldr	r0, [r4, #0]
 8002ad0:	4401      	add	r1, r0
 8002ad2:	1858      	adds	r0, r3, r1
 8002ad4:	4282      	cmp	r2, r0
 8002ad6:	6019      	str	r1, [r3, #0]
 8002ad8:	d1de      	bne.n	8002a98 <_free_r+0x24>
 8002ada:	6810      	ldr	r0, [r2, #0]
 8002adc:	6852      	ldr	r2, [r2, #4]
 8002ade:	4401      	add	r1, r0
 8002ae0:	6019      	str	r1, [r3, #0]
 8002ae2:	605a      	str	r2, [r3, #4]
 8002ae4:	e7d8      	b.n	8002a98 <_free_r+0x24>
 8002ae6:	d902      	bls.n	8002aee <_free_r+0x7a>
 8002ae8:	230c      	movs	r3, #12
 8002aea:	602b      	str	r3, [r5, #0]
 8002aec:	e7d4      	b.n	8002a98 <_free_r+0x24>
 8002aee:	6820      	ldr	r0, [r4, #0]
 8002af0:	1821      	adds	r1, r4, r0
 8002af2:	428a      	cmp	r2, r1
 8002af4:	bf01      	itttt	eq
 8002af6:	6811      	ldreq	r1, [r2, #0]
 8002af8:	6852      	ldreq	r2, [r2, #4]
 8002afa:	1809      	addeq	r1, r1, r0
 8002afc:	6021      	streq	r1, [r4, #0]
 8002afe:	6062      	str	r2, [r4, #4]
 8002b00:	605c      	str	r4, [r3, #4]
 8002b02:	e7c9      	b.n	8002a98 <_free_r+0x24>
 8002b04:	bd38      	pop	{r3, r4, r5, pc}
 8002b06:	bf00      	nop
 8002b08:	20000314 	.word	0x20000314

08002b0c <_malloc_r>:
 8002b0c:	b570      	push	{r4, r5, r6, lr}
 8002b0e:	1ccd      	adds	r5, r1, #3
 8002b10:	f025 0503 	bic.w	r5, r5, #3
 8002b14:	3508      	adds	r5, #8
 8002b16:	2d0c      	cmp	r5, #12
 8002b18:	bf38      	it	cc
 8002b1a:	250c      	movcc	r5, #12
 8002b1c:	2d00      	cmp	r5, #0
 8002b1e:	4606      	mov	r6, r0
 8002b20:	db01      	blt.n	8002b26 <_malloc_r+0x1a>
 8002b22:	42a9      	cmp	r1, r5
 8002b24:	d903      	bls.n	8002b2e <_malloc_r+0x22>
 8002b26:	230c      	movs	r3, #12
 8002b28:	6033      	str	r3, [r6, #0]
 8002b2a:	2000      	movs	r0, #0
 8002b2c:	bd70      	pop	{r4, r5, r6, pc}
 8002b2e:	f000 f89b 	bl	8002c68 <__malloc_lock>
 8002b32:	4a21      	ldr	r2, [pc, #132]	; (8002bb8 <_malloc_r+0xac>)
 8002b34:	6814      	ldr	r4, [r2, #0]
 8002b36:	4621      	mov	r1, r4
 8002b38:	b991      	cbnz	r1, 8002b60 <_malloc_r+0x54>
 8002b3a:	4c20      	ldr	r4, [pc, #128]	; (8002bbc <_malloc_r+0xb0>)
 8002b3c:	6823      	ldr	r3, [r4, #0]
 8002b3e:	b91b      	cbnz	r3, 8002b48 <_malloc_r+0x3c>
 8002b40:	4630      	mov	r0, r6
 8002b42:	f000 f83d 	bl	8002bc0 <_sbrk_r>
 8002b46:	6020      	str	r0, [r4, #0]
 8002b48:	4629      	mov	r1, r5
 8002b4a:	4630      	mov	r0, r6
 8002b4c:	f000 f838 	bl	8002bc0 <_sbrk_r>
 8002b50:	1c43      	adds	r3, r0, #1
 8002b52:	d124      	bne.n	8002b9e <_malloc_r+0x92>
 8002b54:	230c      	movs	r3, #12
 8002b56:	4630      	mov	r0, r6
 8002b58:	6033      	str	r3, [r6, #0]
 8002b5a:	f000 f886 	bl	8002c6a <__malloc_unlock>
 8002b5e:	e7e4      	b.n	8002b2a <_malloc_r+0x1e>
 8002b60:	680b      	ldr	r3, [r1, #0]
 8002b62:	1b5b      	subs	r3, r3, r5
 8002b64:	d418      	bmi.n	8002b98 <_malloc_r+0x8c>
 8002b66:	2b0b      	cmp	r3, #11
 8002b68:	d90f      	bls.n	8002b8a <_malloc_r+0x7e>
 8002b6a:	600b      	str	r3, [r1, #0]
 8002b6c:	18cc      	adds	r4, r1, r3
 8002b6e:	50cd      	str	r5, [r1, r3]
 8002b70:	4630      	mov	r0, r6
 8002b72:	f000 f87a 	bl	8002c6a <__malloc_unlock>
 8002b76:	f104 000b 	add.w	r0, r4, #11
 8002b7a:	1d23      	adds	r3, r4, #4
 8002b7c:	f020 0007 	bic.w	r0, r0, #7
 8002b80:	1ac3      	subs	r3, r0, r3
 8002b82:	d0d3      	beq.n	8002b2c <_malloc_r+0x20>
 8002b84:	425a      	negs	r2, r3
 8002b86:	50e2      	str	r2, [r4, r3]
 8002b88:	e7d0      	b.n	8002b2c <_malloc_r+0x20>
 8002b8a:	684b      	ldr	r3, [r1, #4]
 8002b8c:	428c      	cmp	r4, r1
 8002b8e:	bf16      	itet	ne
 8002b90:	6063      	strne	r3, [r4, #4]
 8002b92:	6013      	streq	r3, [r2, #0]
 8002b94:	460c      	movne	r4, r1
 8002b96:	e7eb      	b.n	8002b70 <_malloc_r+0x64>
 8002b98:	460c      	mov	r4, r1
 8002b9a:	6849      	ldr	r1, [r1, #4]
 8002b9c:	e7cc      	b.n	8002b38 <_malloc_r+0x2c>
 8002b9e:	1cc4      	adds	r4, r0, #3
 8002ba0:	f024 0403 	bic.w	r4, r4, #3
 8002ba4:	42a0      	cmp	r0, r4
 8002ba6:	d005      	beq.n	8002bb4 <_malloc_r+0xa8>
 8002ba8:	1a21      	subs	r1, r4, r0
 8002baa:	4630      	mov	r0, r6
 8002bac:	f000 f808 	bl	8002bc0 <_sbrk_r>
 8002bb0:	3001      	adds	r0, #1
 8002bb2:	d0cf      	beq.n	8002b54 <_malloc_r+0x48>
 8002bb4:	6025      	str	r5, [r4, #0]
 8002bb6:	e7db      	b.n	8002b70 <_malloc_r+0x64>
 8002bb8:	20000314 	.word	0x20000314
 8002bbc:	20000318 	.word	0x20000318

08002bc0 <_sbrk_r>:
 8002bc0:	b538      	push	{r3, r4, r5, lr}
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	4c05      	ldr	r4, [pc, #20]	; (8002bdc <_sbrk_r+0x1c>)
 8002bc6:	4605      	mov	r5, r0
 8002bc8:	4608      	mov	r0, r1
 8002bca:	6023      	str	r3, [r4, #0]
 8002bcc:	f7fd fde8 	bl	80007a0 <_sbrk>
 8002bd0:	1c43      	adds	r3, r0, #1
 8002bd2:	d102      	bne.n	8002bda <_sbrk_r+0x1a>
 8002bd4:	6823      	ldr	r3, [r4, #0]
 8002bd6:	b103      	cbz	r3, 8002bda <_sbrk_r+0x1a>
 8002bd8:	602b      	str	r3, [r5, #0]
 8002bda:	bd38      	pop	{r3, r4, r5, pc}
 8002bdc:	200004b0 	.word	0x200004b0

08002be0 <_raise_r>:
 8002be0:	291f      	cmp	r1, #31
 8002be2:	b538      	push	{r3, r4, r5, lr}
 8002be4:	4604      	mov	r4, r0
 8002be6:	460d      	mov	r5, r1
 8002be8:	d904      	bls.n	8002bf4 <_raise_r+0x14>
 8002bea:	2316      	movs	r3, #22
 8002bec:	6003      	str	r3, [r0, #0]
 8002bee:	f04f 30ff 	mov.w	r0, #4294967295
 8002bf2:	bd38      	pop	{r3, r4, r5, pc}
 8002bf4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002bf6:	b112      	cbz	r2, 8002bfe <_raise_r+0x1e>
 8002bf8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002bfc:	b94b      	cbnz	r3, 8002c12 <_raise_r+0x32>
 8002bfe:	4620      	mov	r0, r4
 8002c00:	f000 f830 	bl	8002c64 <_getpid_r>
 8002c04:	462a      	mov	r2, r5
 8002c06:	4601      	mov	r1, r0
 8002c08:	4620      	mov	r0, r4
 8002c0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c0e:	f000 b817 	b.w	8002c40 <_kill_r>
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d00a      	beq.n	8002c2c <_raise_r+0x4c>
 8002c16:	1c59      	adds	r1, r3, #1
 8002c18:	d103      	bne.n	8002c22 <_raise_r+0x42>
 8002c1a:	2316      	movs	r3, #22
 8002c1c:	6003      	str	r3, [r0, #0]
 8002c1e:	2001      	movs	r0, #1
 8002c20:	e7e7      	b.n	8002bf2 <_raise_r+0x12>
 8002c22:	2400      	movs	r4, #0
 8002c24:	4628      	mov	r0, r5
 8002c26:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002c2a:	4798      	blx	r3
 8002c2c:	2000      	movs	r0, #0
 8002c2e:	e7e0      	b.n	8002bf2 <_raise_r+0x12>

08002c30 <raise>:
 8002c30:	4b02      	ldr	r3, [pc, #8]	; (8002c3c <raise+0xc>)
 8002c32:	4601      	mov	r1, r0
 8002c34:	6818      	ldr	r0, [r3, #0]
 8002c36:	f7ff bfd3 	b.w	8002be0 <_raise_r>
 8002c3a:	bf00      	nop
 8002c3c:	2000000c 	.word	0x2000000c

08002c40 <_kill_r>:
 8002c40:	b538      	push	{r3, r4, r5, lr}
 8002c42:	2300      	movs	r3, #0
 8002c44:	4c06      	ldr	r4, [pc, #24]	; (8002c60 <_kill_r+0x20>)
 8002c46:	4605      	mov	r5, r0
 8002c48:	4608      	mov	r0, r1
 8002c4a:	4611      	mov	r1, r2
 8002c4c:	6023      	str	r3, [r4, #0]
 8002c4e:	f7fd fd8c 	bl	800076a <_kill>
 8002c52:	1c43      	adds	r3, r0, #1
 8002c54:	d102      	bne.n	8002c5c <_kill_r+0x1c>
 8002c56:	6823      	ldr	r3, [r4, #0]
 8002c58:	b103      	cbz	r3, 8002c5c <_kill_r+0x1c>
 8002c5a:	602b      	str	r3, [r5, #0]
 8002c5c:	bd38      	pop	{r3, r4, r5, pc}
 8002c5e:	bf00      	nop
 8002c60:	200004b0 	.word	0x200004b0

08002c64 <_getpid_r>:
 8002c64:	f7fd bd7a 	b.w	800075c <_getpid>

08002c68 <__malloc_lock>:
 8002c68:	4770      	bx	lr

08002c6a <__malloc_unlock>:
 8002c6a:	4770      	bx	lr

08002c6c <_init>:
 8002c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c6e:	bf00      	nop
 8002c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c72:	bc08      	pop	{r3}
 8002c74:	469e      	mov	lr, r3
 8002c76:	4770      	bx	lr

08002c78 <_fini>:
 8002c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c7a:	bf00      	nop
 8002c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c7e:	bc08      	pop	{r3}
 8002c80:	469e      	mov	lr, r3
 8002c82:	4770      	bx	lr
