
stm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f48  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08004054  08004054  00014054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004080  08004080  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004080  08004080  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004080  08004080  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  08004080  08004080  00014080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004090  08004090  00014090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004094  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000058c  20000070  08004104  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005fc  08004104  000205fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001311b  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b6d  00000000  00000000  000331b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e68  00000000  00000000  00035d28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d30  00000000  00000000  00036b90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017a75  00000000  00000000  000378c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b4e2  00000000  00000000  0004f335  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00074124  00000000  00000000  0005a817  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ce93b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dec  00000000  00000000  000ce9b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	0800403c 	.word	0x0800403c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	0800403c 	.word	0x0800403c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fc68 	bl	8000a24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f812 	bl	800017c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f92c 	bl	80003b4 <MX_GPIO_Init>
  MX_DMA_Init();
 800015c:	f000 f8f4 	bl	8000348 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000160:	f000 f89e 	bl	80002a0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000164:	f000 f8c6 	bl	80002f4 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000168:	f000 f84e 	bl	8000208 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(250);
 800016c:	20fa      	movs	r0, #250	; 0xfa
 800016e:	f000 fcbb 	bl	8000ae8 <HAL_Delay>
  setup();
 8000172:	f002 fdbd 	bl	8002cf0 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 8000176:	f002 fddb 	bl	8002d30 <loop>
 800017a:	e7fc      	b.n	8000176 <main+0x2a>

0800017c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b090      	sub	sp, #64	; 0x40
 8000180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000182:	f107 0318 	add.w	r3, r7, #24
 8000186:	2228      	movs	r2, #40	; 0x28
 8000188:	2100      	movs	r1, #0
 800018a:	4618      	mov	r0, r3
 800018c:	f003 fe51 	bl	8003e32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000190:	1d3b      	adds	r3, r7, #4
 8000192:	2200      	movs	r2, #0
 8000194:	601a      	str	r2, [r3, #0]
 8000196:	605a      	str	r2, [r3, #4]
 8000198:	609a      	str	r2, [r3, #8]
 800019a:	60da      	str	r2, [r3, #12]
 800019c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800019e:	2301      	movs	r3, #1
 80001a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001a8:	2300      	movs	r3, #0
 80001aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ac:	2301      	movs	r3, #1
 80001ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001b0:	2302      	movs	r3, #2
 80001b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001ba:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001c0:	f107 0318 	add.w	r3, r7, #24
 80001c4:	4618      	mov	r0, r3
 80001c6:	f001 f9c5 	bl	8001554 <HAL_RCC_OscConfig>
 80001ca:	4603      	mov	r3, r0
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d001      	beq.n	80001d4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001d0:	f000 f992 	bl	80004f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001d4:	230f      	movs	r3, #15
 80001d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d8:	2302      	movs	r3, #2
 80001da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001dc:	2300      	movs	r3, #0
 80001de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e6:	2300      	movs	r3, #0
 80001e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001ea:	1d3b      	adds	r3, r7, #4
 80001ec:	2102      	movs	r1, #2
 80001ee:	4618      	mov	r0, r3
 80001f0:	f001 fc30 	bl	8001a54 <HAL_RCC_ClockConfig>
 80001f4:	4603      	mov	r3, r0
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d001      	beq.n	80001fe <SystemClock_Config+0x82>
  {
    Error_Handler();
 80001fa:	f000 f97d 	bl	80004f8 <Error_Handler>
  }
}
 80001fe:	bf00      	nop
 8000200:	3740      	adds	r7, #64	; 0x40
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
	...

08000208 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b086      	sub	sp, #24
 800020c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800020e:	f107 0308 	add.w	r3, r7, #8
 8000212:	2200      	movs	r2, #0
 8000214:	601a      	str	r2, [r3, #0]
 8000216:	605a      	str	r2, [r3, #4]
 8000218:	609a      	str	r2, [r3, #8]
 800021a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800021c:	463b      	mov	r3, r7
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
 8000222:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000224:	4b1d      	ldr	r3, [pc, #116]	; (800029c <MX_TIM2_Init+0x94>)
 8000226:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800022a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 143;
 800022c:	4b1b      	ldr	r3, [pc, #108]	; (800029c <MX_TIM2_Init+0x94>)
 800022e:	228f      	movs	r2, #143	; 0x8f
 8000230:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000232:	4b1a      	ldr	r3, [pc, #104]	; (800029c <MX_TIM2_Init+0x94>)
 8000234:	2200      	movs	r2, #0
 8000236:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49999;
 8000238:	4b18      	ldr	r3, [pc, #96]	; (800029c <MX_TIM2_Init+0x94>)
 800023a:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800023e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000240:	4b16      	ldr	r3, [pc, #88]	; (800029c <MX_TIM2_Init+0x94>)
 8000242:	2200      	movs	r2, #0
 8000244:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000246:	4b15      	ldr	r3, [pc, #84]	; (800029c <MX_TIM2_Init+0x94>)
 8000248:	2200      	movs	r2, #0
 800024a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800024c:	4813      	ldr	r0, [pc, #76]	; (800029c <MX_TIM2_Init+0x94>)
 800024e:	f001 fd9d 	bl	8001d8c <HAL_TIM_Base_Init>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d001      	beq.n	800025c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000258:	f000 f94e 	bl	80004f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800025c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000260:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000262:	f107 0308 	add.w	r3, r7, #8
 8000266:	4619      	mov	r1, r3
 8000268:	480c      	ldr	r0, [pc, #48]	; (800029c <MX_TIM2_Init+0x94>)
 800026a:	f001 ff0f 	bl	800208c <HAL_TIM_ConfigClockSource>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d001      	beq.n	8000278 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000274:	f000 f940 	bl	80004f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000278:	2300      	movs	r3, #0
 800027a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800027c:	2300      	movs	r3, #0
 800027e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000280:	463b      	mov	r3, r7
 8000282:	4619      	mov	r1, r3
 8000284:	4805      	ldr	r0, [pc, #20]	; (800029c <MX_TIM2_Init+0x94>)
 8000286:	f002 f8d5 	bl	8002434 <HAL_TIMEx_MasterConfigSynchronization>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d001      	beq.n	8000294 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000290:	f000 f932 	bl	80004f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000294:	bf00      	nop
 8000296:	3718      	adds	r7, #24
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	20000570 	.word	0x20000570

080002a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002a4:	4b11      	ldr	r3, [pc, #68]	; (80002ec <MX_USART2_UART_Init+0x4c>)
 80002a6:	4a12      	ldr	r2, [pc, #72]	; (80002f0 <MX_USART2_UART_Init+0x50>)
 80002a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002aa:	4b10      	ldr	r3, [pc, #64]	; (80002ec <MX_USART2_UART_Init+0x4c>)
 80002ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002b2:	4b0e      	ldr	r3, [pc, #56]	; (80002ec <MX_USART2_UART_Init+0x4c>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002b8:	4b0c      	ldr	r3, [pc, #48]	; (80002ec <MX_USART2_UART_Init+0x4c>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002be:	4b0b      	ldr	r3, [pc, #44]	; (80002ec <MX_USART2_UART_Init+0x4c>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002c4:	4b09      	ldr	r3, [pc, #36]	; (80002ec <MX_USART2_UART_Init+0x4c>)
 80002c6:	220c      	movs	r2, #12
 80002c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002ca:	4b08      	ldr	r3, [pc, #32]	; (80002ec <MX_USART2_UART_Init+0x4c>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002d0:	4b06      	ldr	r3, [pc, #24]	; (80002ec <MX_USART2_UART_Init+0x4c>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002d6:	4805      	ldr	r0, [pc, #20]	; (80002ec <MX_USART2_UART_Init+0x4c>)
 80002d8:	f002 f902 	bl	80024e0 <HAL_UART_Init>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80002e2:	f000 f909 	bl	80004f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002e6:	bf00      	nop
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	200005b0 	.word	0x200005b0
 80002f0:	40004400 	.word	0x40004400

080002f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80002f8:	4b11      	ldr	r3, [pc, #68]	; (8000340 <MX_USART3_UART_Init+0x4c>)
 80002fa:	4a12      	ldr	r2, [pc, #72]	; (8000344 <MX_USART3_UART_Init+0x50>)
 80002fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80002fe:	4b10      	ldr	r3, [pc, #64]	; (8000340 <MX_USART3_UART_Init+0x4c>)
 8000300:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000304:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000306:	4b0e      	ldr	r3, [pc, #56]	; (8000340 <MX_USART3_UART_Init+0x4c>)
 8000308:	2200      	movs	r2, #0
 800030a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800030c:	4b0c      	ldr	r3, [pc, #48]	; (8000340 <MX_USART3_UART_Init+0x4c>)
 800030e:	2200      	movs	r2, #0
 8000310:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000312:	4b0b      	ldr	r3, [pc, #44]	; (8000340 <MX_USART3_UART_Init+0x4c>)
 8000314:	2200      	movs	r2, #0
 8000316:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000318:	4b09      	ldr	r3, [pc, #36]	; (8000340 <MX_USART3_UART_Init+0x4c>)
 800031a:	220c      	movs	r2, #12
 800031c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800031e:	4b08      	ldr	r3, [pc, #32]	; (8000340 <MX_USART3_UART_Init+0x4c>)
 8000320:	2200      	movs	r2, #0
 8000322:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000324:	4b06      	ldr	r3, [pc, #24]	; (8000340 <MX_USART3_UART_Init+0x4c>)
 8000326:	2200      	movs	r2, #0
 8000328:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800032a:	4805      	ldr	r0, [pc, #20]	; (8000340 <MX_USART3_UART_Init+0x4c>)
 800032c:	f002 f8d8 	bl	80024e0 <HAL_UART_Init>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000336:	f000 f8df 	bl	80004f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800033a:	bf00      	nop
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	2000041c 	.word	0x2000041c
 8000344:	40004800 	.word	0x40004800

08000348 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800034e:	4b18      	ldr	r3, [pc, #96]	; (80003b0 <MX_DMA_Init+0x68>)
 8000350:	695b      	ldr	r3, [r3, #20]
 8000352:	4a17      	ldr	r2, [pc, #92]	; (80003b0 <MX_DMA_Init+0x68>)
 8000354:	f043 0301 	orr.w	r3, r3, #1
 8000358:	6153      	str	r3, [r2, #20]
 800035a:	4b15      	ldr	r3, [pc, #84]	; (80003b0 <MX_DMA_Init+0x68>)
 800035c:	695b      	ldr	r3, [r3, #20]
 800035e:	f003 0301 	and.w	r3, r3, #1
 8000362:	607b      	str	r3, [r7, #4]
 8000364:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000366:	2200      	movs	r2, #0
 8000368:	2100      	movs	r1, #0
 800036a:	200c      	movs	r0, #12
 800036c:	f000 fcb5 	bl	8000cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000370:	200c      	movs	r0, #12
 8000372:	f000 fcce 	bl	8000d12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000376:	2200      	movs	r2, #0
 8000378:	2100      	movs	r1, #0
 800037a:	200d      	movs	r0, #13
 800037c:	f000 fcad 	bl	8000cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000380:	200d      	movs	r0, #13
 8000382:	f000 fcc6 	bl	8000d12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000386:	2200      	movs	r2, #0
 8000388:	2100      	movs	r1, #0
 800038a:	2010      	movs	r0, #16
 800038c:	f000 fca5 	bl	8000cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000390:	2010      	movs	r0, #16
 8000392:	f000 fcbe 	bl	8000d12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000396:	2200      	movs	r2, #0
 8000398:	2100      	movs	r1, #0
 800039a:	2011      	movs	r0, #17
 800039c:	f000 fc9d 	bl	8000cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80003a0:	2011      	movs	r0, #17
 80003a2:	f000 fcb6 	bl	8000d12 <HAL_NVIC_EnableIRQ>

}
 80003a6:	bf00      	nop
 80003a8:	3708      	adds	r7, #8
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	40021000 	.word	0x40021000

080003b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b088      	sub	sp, #32
 80003b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ba:	f107 0310 	add.w	r3, r7, #16
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
 80003c2:	605a      	str	r2, [r3, #4]
 80003c4:	609a      	str	r2, [r3, #8]
 80003c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003c8:	4b2e      	ldr	r3, [pc, #184]	; (8000484 <MX_GPIO_Init+0xd0>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	4a2d      	ldr	r2, [pc, #180]	; (8000484 <MX_GPIO_Init+0xd0>)
 80003ce:	f043 0310 	orr.w	r3, r3, #16
 80003d2:	6193      	str	r3, [r2, #24]
 80003d4:	4b2b      	ldr	r3, [pc, #172]	; (8000484 <MX_GPIO_Init+0xd0>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	f003 0310 	and.w	r3, r3, #16
 80003dc:	60fb      	str	r3, [r7, #12]
 80003de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003e0:	4b28      	ldr	r3, [pc, #160]	; (8000484 <MX_GPIO_Init+0xd0>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	4a27      	ldr	r2, [pc, #156]	; (8000484 <MX_GPIO_Init+0xd0>)
 80003e6:	f043 0320 	orr.w	r3, r3, #32
 80003ea:	6193      	str	r3, [r2, #24]
 80003ec:	4b25      	ldr	r3, [pc, #148]	; (8000484 <MX_GPIO_Init+0xd0>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	f003 0320 	and.w	r3, r3, #32
 80003f4:	60bb      	str	r3, [r7, #8]
 80003f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f8:	4b22      	ldr	r3, [pc, #136]	; (8000484 <MX_GPIO_Init+0xd0>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	4a21      	ldr	r2, [pc, #132]	; (8000484 <MX_GPIO_Init+0xd0>)
 80003fe:	f043 0304 	orr.w	r3, r3, #4
 8000402:	6193      	str	r3, [r2, #24]
 8000404:	4b1f      	ldr	r3, [pc, #124]	; (8000484 <MX_GPIO_Init+0xd0>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	f003 0304 	and.w	r3, r3, #4
 800040c:	607b      	str	r3, [r7, #4]
 800040e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000410:	4b1c      	ldr	r3, [pc, #112]	; (8000484 <MX_GPIO_Init+0xd0>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	4a1b      	ldr	r2, [pc, #108]	; (8000484 <MX_GPIO_Init+0xd0>)
 8000416:	f043 0308 	orr.w	r3, r3, #8
 800041a:	6193      	str	r3, [r2, #24]
 800041c:	4b19      	ldr	r3, [pc, #100]	; (8000484 <MX_GPIO_Init+0xd0>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	f003 0308 	and.w	r3, r3, #8
 8000424:	603b      	str	r3, [r7, #0]
 8000426:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000428:	2200      	movs	r2, #0
 800042a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800042e:	4816      	ldr	r0, [pc, #88]	; (8000488 <MX_GPIO_Init+0xd4>)
 8000430:	f001 f848 	bl	80014c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000434:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000438:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800043a:	2301      	movs	r3, #1
 800043c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043e:	2300      	movs	r3, #0
 8000440:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000442:	2302      	movs	r3, #2
 8000444:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000446:	f107 0310 	add.w	r3, r7, #16
 800044a:	4619      	mov	r1, r3
 800044c:	480e      	ldr	r0, [pc, #56]	; (8000488 <MX_GPIO_Init+0xd4>)
 800044e:	f000 fedf 	bl	8001210 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000452:	2380      	movs	r3, #128	; 0x80
 8000454:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000456:	4b0d      	ldr	r3, [pc, #52]	; (800048c <MX_GPIO_Init+0xd8>)
 8000458:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045a:	2300      	movs	r3, #0
 800045c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800045e:	f107 0310 	add.w	r3, r7, #16
 8000462:	4619      	mov	r1, r3
 8000464:	480a      	ldr	r0, [pc, #40]	; (8000490 <MX_GPIO_Init+0xdc>)
 8000466:	f000 fed3 	bl	8001210 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800046a:	2200      	movs	r2, #0
 800046c:	2100      	movs	r1, #0
 800046e:	2017      	movs	r0, #23
 8000470:	f000 fc33 	bl	8000cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000474:	2017      	movs	r0, #23
 8000476:	f000 fc4c 	bl	8000d12 <HAL_NVIC_EnableIRQ>

}
 800047a:	bf00      	nop
 800047c:	3720      	adds	r7, #32
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	40021000 	.word	0x40021000
 8000488:	40011000 	.word	0x40011000
 800048c:	10110000 	.word	0x10110000
 8000490:	40010800 	.word	0x40010800

08000494 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
  HAL_UART_AbortTransmit_IT(huart);
 800049c:	6878      	ldr	r0, [r7, #4]
 800049e:	f002 f959 	bl	8002754 <HAL_UART_AbortTransmit_IT>
}
 80004a2:	bf00      	nop
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}

080004aa <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004aa:	b580      	push	{r7, lr}
 80004ac:	b082      	sub	sp, #8
 80004ae:	af00      	add	r7, sp, #0
 80004b0:	6078      	str	r0, [r7, #4]
  UART_CallBack(huart);
 80004b2:	6878      	ldr	r0, [r7, #4]
 80004b4:	f002 fc80 	bl	8002db8 <UART_CallBack>
}
 80004b8:	bf00      	nop
 80004ba:	3708      	adds	r7, #8
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}

080004c0 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	80fb      	strh	r3, [r7, #6]
	GPIO_Interrupt_Callback(GPIO_Pin);
 80004ca:	88fb      	ldrh	r3, [r7, #6]
 80004cc:	4618      	mov	r0, r3
 80004ce:	f002 fc95 	bl	8002dfc <GPIO_Interrupt_Callback>
}
 80004d2:	bf00      	nop
 80004d4:	3708      	adds	r7, #8
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}

080004da <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004da:	b580      	push	{r7, lr}
 80004dc:	b082      	sub	sp, #8
 80004de:	af00      	add	r7, sp, #0
 80004e0:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2) {
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80004ea:	d101      	bne.n	80004f0 <HAL_TIM_PeriodElapsedCallback+0x16>
	  modbus_timeout();
 80004ec:	f002 ffc0 	bl	8003470 <modbus_timeout>
  }
}
 80004f0:	bf00      	nop
 80004f2:	3708      	adds	r7, #8
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80004fc:	bf00      	nop
 80004fe:	46bd      	mov	sp, r7
 8000500:	bc80      	pop	{r7}
 8000502:	4770      	bx	lr

08000504 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000504:	b480      	push	{r7}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800050a:	4b15      	ldr	r3, [pc, #84]	; (8000560 <HAL_MspInit+0x5c>)
 800050c:	699b      	ldr	r3, [r3, #24]
 800050e:	4a14      	ldr	r2, [pc, #80]	; (8000560 <HAL_MspInit+0x5c>)
 8000510:	f043 0301 	orr.w	r3, r3, #1
 8000514:	6193      	str	r3, [r2, #24]
 8000516:	4b12      	ldr	r3, [pc, #72]	; (8000560 <HAL_MspInit+0x5c>)
 8000518:	699b      	ldr	r3, [r3, #24]
 800051a:	f003 0301 	and.w	r3, r3, #1
 800051e:	60bb      	str	r3, [r7, #8]
 8000520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000522:	4b0f      	ldr	r3, [pc, #60]	; (8000560 <HAL_MspInit+0x5c>)
 8000524:	69db      	ldr	r3, [r3, #28]
 8000526:	4a0e      	ldr	r2, [pc, #56]	; (8000560 <HAL_MspInit+0x5c>)
 8000528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800052c:	61d3      	str	r3, [r2, #28]
 800052e:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <HAL_MspInit+0x5c>)
 8000530:	69db      	ldr	r3, [r3, #28]
 8000532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800053a:	4b0a      	ldr	r3, [pc, #40]	; (8000564 <HAL_MspInit+0x60>)
 800053c:	685b      	ldr	r3, [r3, #4]
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	4a04      	ldr	r2, [pc, #16]	; (8000564 <HAL_MspInit+0x60>)
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000556:	bf00      	nop
 8000558:	3714      	adds	r7, #20
 800055a:	46bd      	mov	sp, r7
 800055c:	bc80      	pop	{r7}
 800055e:	4770      	bx	lr
 8000560:	40021000 	.word	0x40021000
 8000564:	40010000 	.word	0x40010000

08000568 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000578:	d113      	bne.n	80005a2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800057a:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <HAL_TIM_Base_MspInit+0x44>)
 800057c:	69db      	ldr	r3, [r3, #28]
 800057e:	4a0b      	ldr	r2, [pc, #44]	; (80005ac <HAL_TIM_Base_MspInit+0x44>)
 8000580:	f043 0301 	orr.w	r3, r3, #1
 8000584:	61d3      	str	r3, [r2, #28]
 8000586:	4b09      	ldr	r3, [pc, #36]	; (80005ac <HAL_TIM_Base_MspInit+0x44>)
 8000588:	69db      	ldr	r3, [r3, #28]
 800058a:	f003 0301 	and.w	r3, r3, #1
 800058e:	60fb      	str	r3, [r7, #12]
 8000590:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8000592:	2200      	movs	r2, #0
 8000594:	2101      	movs	r1, #1
 8000596:	201c      	movs	r0, #28
 8000598:	f000 fb9f 	bl	8000cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800059c:	201c      	movs	r0, #28
 800059e:	f000 fbb8 	bl	8000d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80005a2:	bf00      	nop
 80005a4:	3710      	adds	r7, #16
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40021000 	.word	0x40021000

080005b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08a      	sub	sp, #40	; 0x28
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b8:	f107 0318 	add.w	r3, r7, #24
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a83      	ldr	r2, [pc, #524]	; (80007d8 <HAL_UART_MspInit+0x228>)
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d17c      	bne.n	80006ca <HAL_UART_MspInit+0x11a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005d0:	4b82      	ldr	r3, [pc, #520]	; (80007dc <HAL_UART_MspInit+0x22c>)
 80005d2:	69db      	ldr	r3, [r3, #28]
 80005d4:	4a81      	ldr	r2, [pc, #516]	; (80007dc <HAL_UART_MspInit+0x22c>)
 80005d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005da:	61d3      	str	r3, [r2, #28]
 80005dc:	4b7f      	ldr	r3, [pc, #508]	; (80007dc <HAL_UART_MspInit+0x22c>)
 80005de:	69db      	ldr	r3, [r3, #28]
 80005e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005e4:	617b      	str	r3, [r7, #20]
 80005e6:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e8:	4b7c      	ldr	r3, [pc, #496]	; (80007dc <HAL_UART_MspInit+0x22c>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	4a7b      	ldr	r2, [pc, #492]	; (80007dc <HAL_UART_MspInit+0x22c>)
 80005ee:	f043 0304 	orr.w	r3, r3, #4
 80005f2:	6193      	str	r3, [r2, #24]
 80005f4:	4b79      	ldr	r3, [pc, #484]	; (80007dc <HAL_UART_MspInit+0x22c>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	f003 0304 	and.w	r3, r3, #4
 80005fc:	613b      	str	r3, [r7, #16]
 80005fe:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000600:	2304      	movs	r3, #4
 8000602:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000604:	2302      	movs	r3, #2
 8000606:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000608:	2303      	movs	r3, #3
 800060a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060c:	f107 0318 	add.w	r3, r7, #24
 8000610:	4619      	mov	r1, r3
 8000612:	4873      	ldr	r0, [pc, #460]	; (80007e0 <HAL_UART_MspInit+0x230>)
 8000614:	f000 fdfc 	bl	8001210 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000618:	2308      	movs	r3, #8
 800061a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800061c:	2300      	movs	r3, #0
 800061e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000620:	2300      	movs	r3, #0
 8000622:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000624:	f107 0318 	add.w	r3, r7, #24
 8000628:	4619      	mov	r1, r3
 800062a:	486d      	ldr	r0, [pc, #436]	; (80007e0 <HAL_UART_MspInit+0x230>)
 800062c:	f000 fdf0 	bl	8001210 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000630:	4b6c      	ldr	r3, [pc, #432]	; (80007e4 <HAL_UART_MspInit+0x234>)
 8000632:	4a6d      	ldr	r2, [pc, #436]	; (80007e8 <HAL_UART_MspInit+0x238>)
 8000634:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000636:	4b6b      	ldr	r3, [pc, #428]	; (80007e4 <HAL_UART_MspInit+0x234>)
 8000638:	2200      	movs	r2, #0
 800063a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800063c:	4b69      	ldr	r3, [pc, #420]	; (80007e4 <HAL_UART_MspInit+0x234>)
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000642:	4b68      	ldr	r3, [pc, #416]	; (80007e4 <HAL_UART_MspInit+0x234>)
 8000644:	2280      	movs	r2, #128	; 0x80
 8000646:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000648:	4b66      	ldr	r3, [pc, #408]	; (80007e4 <HAL_UART_MspInit+0x234>)
 800064a:	2200      	movs	r2, #0
 800064c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800064e:	4b65      	ldr	r3, [pc, #404]	; (80007e4 <HAL_UART_MspInit+0x234>)
 8000650:	2200      	movs	r2, #0
 8000652:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000654:	4b63      	ldr	r3, [pc, #396]	; (80007e4 <HAL_UART_MspInit+0x234>)
 8000656:	2220      	movs	r2, #32
 8000658:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800065a:	4b62      	ldr	r3, [pc, #392]	; (80007e4 <HAL_UART_MspInit+0x234>)
 800065c:	2200      	movs	r2, #0
 800065e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000660:	4860      	ldr	r0, [pc, #384]	; (80007e4 <HAL_UART_MspInit+0x234>)
 8000662:	f000 fb71 	bl	8000d48 <HAL_DMA_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 800066c:	f7ff ff44 	bl	80004f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	4a5c      	ldr	r2, [pc, #368]	; (80007e4 <HAL_UART_MspInit+0x234>)
 8000674:	635a      	str	r2, [r3, #52]	; 0x34
 8000676:	4a5b      	ldr	r2, [pc, #364]	; (80007e4 <HAL_UART_MspInit+0x234>)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800067c:	4b5b      	ldr	r3, [pc, #364]	; (80007ec <HAL_UART_MspInit+0x23c>)
 800067e:	4a5c      	ldr	r2, [pc, #368]	; (80007f0 <HAL_UART_MspInit+0x240>)
 8000680:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000682:	4b5a      	ldr	r3, [pc, #360]	; (80007ec <HAL_UART_MspInit+0x23c>)
 8000684:	2210      	movs	r2, #16
 8000686:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000688:	4b58      	ldr	r3, [pc, #352]	; (80007ec <HAL_UART_MspInit+0x23c>)
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800068e:	4b57      	ldr	r3, [pc, #348]	; (80007ec <HAL_UART_MspInit+0x23c>)
 8000690:	2280      	movs	r2, #128	; 0x80
 8000692:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000694:	4b55      	ldr	r3, [pc, #340]	; (80007ec <HAL_UART_MspInit+0x23c>)
 8000696:	2200      	movs	r2, #0
 8000698:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800069a:	4b54      	ldr	r3, [pc, #336]	; (80007ec <HAL_UART_MspInit+0x23c>)
 800069c:	2200      	movs	r2, #0
 800069e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 80006a0:	4b52      	ldr	r3, [pc, #328]	; (80007ec <HAL_UART_MspInit+0x23c>)
 80006a2:	2220      	movs	r2, #32
 80006a4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80006a6:	4b51      	ldr	r3, [pc, #324]	; (80007ec <HAL_UART_MspInit+0x23c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80006ac:	484f      	ldr	r0, [pc, #316]	; (80007ec <HAL_UART_MspInit+0x23c>)
 80006ae:	f000 fb4b 	bl	8000d48 <HAL_DMA_Init>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80006b8:	f7ff ff1e 	bl	80004f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	4a4b      	ldr	r2, [pc, #300]	; (80007ec <HAL_UART_MspInit+0x23c>)
 80006c0:	631a      	str	r2, [r3, #48]	; 0x30
 80006c2:	4a4a      	ldr	r2, [pc, #296]	; (80007ec <HAL_UART_MspInit+0x23c>)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80006c8:	e082      	b.n	80007d0 <HAL_UART_MspInit+0x220>
  else if(huart->Instance==USART3)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a49      	ldr	r2, [pc, #292]	; (80007f4 <HAL_UART_MspInit+0x244>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d17d      	bne.n	80007d0 <HAL_UART_MspInit+0x220>
    __HAL_RCC_USART3_CLK_ENABLE();
 80006d4:	4b41      	ldr	r3, [pc, #260]	; (80007dc <HAL_UART_MspInit+0x22c>)
 80006d6:	69db      	ldr	r3, [r3, #28]
 80006d8:	4a40      	ldr	r2, [pc, #256]	; (80007dc <HAL_UART_MspInit+0x22c>)
 80006da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006de:	61d3      	str	r3, [r2, #28]
 80006e0:	4b3e      	ldr	r3, [pc, #248]	; (80007dc <HAL_UART_MspInit+0x22c>)
 80006e2:	69db      	ldr	r3, [r3, #28]
 80006e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ec:	4b3b      	ldr	r3, [pc, #236]	; (80007dc <HAL_UART_MspInit+0x22c>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	4a3a      	ldr	r2, [pc, #232]	; (80007dc <HAL_UART_MspInit+0x22c>)
 80006f2:	f043 0308 	orr.w	r3, r3, #8
 80006f6:	6193      	str	r3, [r2, #24]
 80006f8:	4b38      	ldr	r3, [pc, #224]	; (80007dc <HAL_UART_MspInit+0x22c>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	f003 0308 	and.w	r3, r3, #8
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000704:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000708:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070a:	2302      	movs	r3, #2
 800070c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800070e:	2303      	movs	r3, #3
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000712:	f107 0318 	add.w	r3, r7, #24
 8000716:	4619      	mov	r1, r3
 8000718:	4837      	ldr	r0, [pc, #220]	; (80007f8 <HAL_UART_MspInit+0x248>)
 800071a:	f000 fd79 	bl	8001210 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800071e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000722:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000724:	2300      	movs	r3, #0
 8000726:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800072c:	f107 0318 	add.w	r3, r7, #24
 8000730:	4619      	mov	r1, r3
 8000732:	4831      	ldr	r0, [pc, #196]	; (80007f8 <HAL_UART_MspInit+0x248>)
 8000734:	f000 fd6c 	bl	8001210 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8000738:	4b30      	ldr	r3, [pc, #192]	; (80007fc <HAL_UART_MspInit+0x24c>)
 800073a:	4a31      	ldr	r2, [pc, #196]	; (8000800 <HAL_UART_MspInit+0x250>)
 800073c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800073e:	4b2f      	ldr	r3, [pc, #188]	; (80007fc <HAL_UART_MspInit+0x24c>)
 8000740:	2200      	movs	r2, #0
 8000742:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000744:	4b2d      	ldr	r3, [pc, #180]	; (80007fc <HAL_UART_MspInit+0x24c>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800074a:	4b2c      	ldr	r3, [pc, #176]	; (80007fc <HAL_UART_MspInit+0x24c>)
 800074c:	2280      	movs	r2, #128	; 0x80
 800074e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000750:	4b2a      	ldr	r3, [pc, #168]	; (80007fc <HAL_UART_MspInit+0x24c>)
 8000752:	2200      	movs	r2, #0
 8000754:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000756:	4b29      	ldr	r3, [pc, #164]	; (80007fc <HAL_UART_MspInit+0x24c>)
 8000758:	2200      	movs	r2, #0
 800075a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800075c:	4b27      	ldr	r3, [pc, #156]	; (80007fc <HAL_UART_MspInit+0x24c>)
 800075e:	2220      	movs	r2, #32
 8000760:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000762:	4b26      	ldr	r3, [pc, #152]	; (80007fc <HAL_UART_MspInit+0x24c>)
 8000764:	2200      	movs	r2, #0
 8000766:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000768:	4824      	ldr	r0, [pc, #144]	; (80007fc <HAL_UART_MspInit+0x24c>)
 800076a:	f000 faed 	bl	8000d48 <HAL_DMA_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <HAL_UART_MspInit+0x1c8>
      Error_Handler();
 8000774:	f7ff fec0 	bl	80004f8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	4a20      	ldr	r2, [pc, #128]	; (80007fc <HAL_UART_MspInit+0x24c>)
 800077c:	635a      	str	r2, [r3, #52]	; 0x34
 800077e:	4a1f      	ldr	r2, [pc, #124]	; (80007fc <HAL_UART_MspInit+0x24c>)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8000784:	4b1f      	ldr	r3, [pc, #124]	; (8000804 <HAL_UART_MspInit+0x254>)
 8000786:	4a20      	ldr	r2, [pc, #128]	; (8000808 <HAL_UART_MspInit+0x258>)
 8000788:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800078a:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <HAL_UART_MspInit+0x254>)
 800078c:	2210      	movs	r2, #16
 800078e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000790:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <HAL_UART_MspInit+0x254>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000796:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <HAL_UART_MspInit+0x254>)
 8000798:	2280      	movs	r2, #128	; 0x80
 800079a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800079c:	4b19      	ldr	r3, [pc, #100]	; (8000804 <HAL_UART_MspInit+0x254>)
 800079e:	2200      	movs	r2, #0
 80007a0:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007a2:	4b18      	ldr	r3, [pc, #96]	; (8000804 <HAL_UART_MspInit+0x254>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_CIRCULAR;
 80007a8:	4b16      	ldr	r3, [pc, #88]	; (8000804 <HAL_UART_MspInit+0x254>)
 80007aa:	2220      	movs	r2, #32
 80007ac:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80007ae:	4b15      	ldr	r3, [pc, #84]	; (8000804 <HAL_UART_MspInit+0x254>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80007b4:	4813      	ldr	r0, [pc, #76]	; (8000804 <HAL_UART_MspInit+0x254>)
 80007b6:	f000 fac7 	bl	8000d48 <HAL_DMA_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <HAL_UART_MspInit+0x214>
      Error_Handler();
 80007c0:	f7ff fe9a 	bl	80004f8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	4a0f      	ldr	r2, [pc, #60]	; (8000804 <HAL_UART_MspInit+0x254>)
 80007c8:	631a      	str	r2, [r3, #48]	; 0x30
 80007ca:	4a0e      	ldr	r2, [pc, #56]	; (8000804 <HAL_UART_MspInit+0x254>)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	6253      	str	r3, [r2, #36]	; 0x24
}
 80007d0:	bf00      	nop
 80007d2:	3728      	adds	r7, #40	; 0x28
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40004400 	.word	0x40004400
 80007dc:	40021000 	.word	0x40021000
 80007e0:	40010800 	.word	0x40010800
 80007e4:	20000394 	.word	0x20000394
 80007e8:	4002006c 	.word	0x4002006c
 80007ec:	200004ac 	.word	0x200004ac
 80007f0:	40020080 	.word	0x40020080
 80007f4:	40004800 	.word	0x40004800
 80007f8:	40010c00 	.word	0x40010c00
 80007fc:	200003d8 	.word	0x200003d8
 8000800:	40020030 	.word	0x40020030
 8000804:	2000045c 	.word	0x2000045c
 8000808:	4002001c 	.word	0x4002001c

0800080c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr

08000818 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800081c:	e7fe      	b.n	800081c <HardFault_Handler+0x4>

0800081e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000822:	e7fe      	b.n	8000822 <MemManage_Handler+0x4>

08000824 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000828:	e7fe      	b.n	8000828 <BusFault_Handler+0x4>

0800082a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800082e:	e7fe      	b.n	800082e <UsageFault_Handler+0x4>

08000830 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr

0800083c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr

08000848 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr

08000854 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000858:	f000 f92a 	bl	8000ab0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}

08000860 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000864:	4802      	ldr	r0, [pc, #8]	; (8000870 <DMA1_Channel2_IRQHandler+0x10>)
 8000866:	f000 fb9f 	bl	8000fa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	2000045c 	.word	0x2000045c

08000874 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000878:	4802      	ldr	r0, [pc, #8]	; (8000884 <DMA1_Channel3_IRQHandler+0x10>)
 800087a:	f000 fb95 	bl	8000fa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	200003d8 	.word	0x200003d8

08000888 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800088c:	4802      	ldr	r0, [pc, #8]	; (8000898 <DMA1_Channel6_IRQHandler+0x10>)
 800088e:	f000 fb8b 	bl	8000fa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000394 	.word	0x20000394

0800089c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80008a0:	4802      	ldr	r0, [pc, #8]	; (80008ac <DMA1_Channel7_IRQHandler+0x10>)
 80008a2:	f000 fb81 	bl	8000fa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	200004ac 	.word	0x200004ac

080008b0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80008b4:	2080      	movs	r0, #128	; 0x80
 80008b6:	f000 fe35 	bl	8001524 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80008c4:	4802      	ldr	r0, [pc, #8]	; (80008d0 <TIM2_IRQHandler+0x10>)
 80008c6:	f001 fad9 	bl	8001e7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000570 	.word	0x20000570

080008d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
	return 1;
 80008d8:	2301      	movs	r3, #1
}
 80008da:	4618      	mov	r0, r3
 80008dc:	46bd      	mov	sp, r7
 80008de:	bc80      	pop	{r7}
 80008e0:	4770      	bx	lr

080008e2 <_kill>:

int _kill(int pid, int sig)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b082      	sub	sp, #8
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	6078      	str	r0, [r7, #4]
 80008ea:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80008ec:	f003 fa5c 	bl	8003da8 <__errno>
 80008f0:	4602      	mov	r2, r0
 80008f2:	2316      	movs	r3, #22
 80008f4:	6013      	str	r3, [r2, #0]
	return -1;
 80008f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <_exit>:

void _exit (int status)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	b082      	sub	sp, #8
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800090a:	f04f 31ff 	mov.w	r1, #4294967295
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f7ff ffe7 	bl	80008e2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000914:	e7fe      	b.n	8000914 <_exit+0x12>
	...

08000918 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000920:	4b11      	ldr	r3, [pc, #68]	; (8000968 <_sbrk+0x50>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d102      	bne.n	800092e <_sbrk+0x16>
		heap_end = &end;
 8000928:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <_sbrk+0x50>)
 800092a:	4a10      	ldr	r2, [pc, #64]	; (800096c <_sbrk+0x54>)
 800092c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <_sbrk+0x50>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <_sbrk+0x50>)
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	4413      	add	r3, r2
 800093c:	466a      	mov	r2, sp
 800093e:	4293      	cmp	r3, r2
 8000940:	d907      	bls.n	8000952 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000942:	f003 fa31 	bl	8003da8 <__errno>
 8000946:	4602      	mov	r2, r0
 8000948:	230c      	movs	r3, #12
 800094a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800094c:	f04f 33ff 	mov.w	r3, #4294967295
 8000950:	e006      	b.n	8000960 <_sbrk+0x48>
	}

	heap_end += incr;
 8000952:	4b05      	ldr	r3, [pc, #20]	; (8000968 <_sbrk+0x50>)
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4413      	add	r3, r2
 800095a:	4a03      	ldr	r2, [pc, #12]	; (8000968 <_sbrk+0x50>)
 800095c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800095e:	68fb      	ldr	r3, [r7, #12]
}
 8000960:	4618      	mov	r0, r3
 8000962:	3710      	adds	r7, #16
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	2000008c 	.word	0x2000008c
 800096c:	20000600 	.word	0x20000600

08000970 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000974:	4b15      	ldr	r3, [pc, #84]	; (80009cc <SystemInit+0x5c>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a14      	ldr	r2, [pc, #80]	; (80009cc <SystemInit+0x5c>)
 800097a:	f043 0301 	orr.w	r3, r3, #1
 800097e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <SystemInit+0x5c>)
 8000982:	685a      	ldr	r2, [r3, #4]
 8000984:	4911      	ldr	r1, [pc, #68]	; (80009cc <SystemInit+0x5c>)
 8000986:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <SystemInit+0x60>)
 8000988:	4013      	ands	r3, r2
 800098a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800098c:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <SystemInit+0x5c>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a0e      	ldr	r2, [pc, #56]	; (80009cc <SystemInit+0x5c>)
 8000992:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000996:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800099a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800099c:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <SystemInit+0x5c>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a0a      	ldr	r2, [pc, #40]	; (80009cc <SystemInit+0x5c>)
 80009a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009a6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80009a8:	4b08      	ldr	r3, [pc, #32]	; (80009cc <SystemInit+0x5c>)
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	4a07      	ldr	r2, [pc, #28]	; (80009cc <SystemInit+0x5c>)
 80009ae:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80009b2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80009b4:	4b05      	ldr	r3, [pc, #20]	; (80009cc <SystemInit+0x5c>)
 80009b6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80009ba:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80009bc:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <SystemInit+0x64>)
 80009be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009c2:	609a      	str	r2, [r3, #8]
#endif 
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr
 80009cc:	40021000 	.word	0x40021000
 80009d0:	f8ff0000 	.word	0xf8ff0000
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80009d8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80009da:	e003      	b.n	80009e4 <LoopCopyDataInit>

080009dc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80009dc:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80009de:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80009e0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80009e2:	3104      	adds	r1, #4

080009e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80009e4:	480a      	ldr	r0, [pc, #40]	; (8000a10 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80009e8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80009ea:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80009ec:	d3f6      	bcc.n	80009dc <CopyDataInit>
  ldr r2, =_sbss
 80009ee:	4a0a      	ldr	r2, [pc, #40]	; (8000a18 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80009f0:	e002      	b.n	80009f8 <LoopFillZerobss>

080009f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80009f2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80009f4:	f842 3b04 	str.w	r3, [r2], #4

080009f8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80009f8:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80009fa:	429a      	cmp	r2, r3
  bcc FillZerobss
 80009fc:	d3f9      	bcc.n	80009f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009fe:	f7ff ffb7 	bl	8000970 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a02:	f003 f9d7 	bl	8003db4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a06:	f7ff fba1 	bl	800014c <main>
  bx lr
 8000a0a:	4770      	bx	lr
  ldr r3, =_sidata
 8000a0c:	08004094 	.word	0x08004094
  ldr r0, =_sdata
 8000a10:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000a14:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000a18:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000a1c:	200005fc 	.word	0x200005fc

08000a20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a20:	e7fe      	b.n	8000a20 <ADC1_2_IRQHandler>
	...

08000a24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a28:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <HAL_Init+0x28>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a07      	ldr	r2, [pc, #28]	; (8000a4c <HAL_Init+0x28>)
 8000a2e:	f043 0310 	orr.w	r3, r3, #16
 8000a32:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a34:	2003      	movs	r0, #3
 8000a36:	f000 f945 	bl	8000cc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f000 f808 	bl	8000a50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a40:	f7ff fd60 	bl	8000504 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40022000 	.word	0x40022000

08000a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a58:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <HAL_InitTick+0x54>)
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <HAL_InitTick+0x58>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	4619      	mov	r1, r3
 8000a62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f000 f95d 	bl	8000d2e <HAL_SYSTICK_Config>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	e00e      	b.n	8000a9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2b0f      	cmp	r3, #15
 8000a82:	d80a      	bhi.n	8000a9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a84:	2200      	movs	r2, #0
 8000a86:	6879      	ldr	r1, [r7, #4]
 8000a88:	f04f 30ff 	mov.w	r0, #4294967295
 8000a8c:	f000 f925 	bl	8000cda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a90:	4a06      	ldr	r2, [pc, #24]	; (8000aac <HAL_InitTick+0x5c>)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a96:	2300      	movs	r3, #0
 8000a98:	e000      	b.n	8000a9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000000 	.word	0x20000000
 8000aa8:	20000008 	.word	0x20000008
 8000aac:	20000004 	.word	0x20000004

08000ab0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab4:	4b05      	ldr	r3, [pc, #20]	; (8000acc <HAL_IncTick+0x1c>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <HAL_IncTick+0x20>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4413      	add	r3, r2
 8000ac0:	4a03      	ldr	r2, [pc, #12]	; (8000ad0 <HAL_IncTick+0x20>)
 8000ac2:	6013      	str	r3, [r2, #0]
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr
 8000acc:	20000008 	.word	0x20000008
 8000ad0:	200005f4 	.word	0x200005f4

08000ad4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad8:	4b02      	ldr	r3, [pc, #8]	; (8000ae4 <HAL_GetTick+0x10>)
 8000ada:	681b      	ldr	r3, [r3, #0]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr
 8000ae4:	200005f4 	.word	0x200005f4

08000ae8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000af0:	f7ff fff0 	bl	8000ad4 <HAL_GetTick>
 8000af4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b00:	d005      	beq.n	8000b0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b02:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <HAL_Delay+0x40>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	461a      	mov	r2, r3
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b0e:	bf00      	nop
 8000b10:	f7ff ffe0 	bl	8000ad4 <HAL_GetTick>
 8000b14:	4602      	mov	r2, r0
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	68fa      	ldr	r2, [r7, #12]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d8f7      	bhi.n	8000b10 <HAL_Delay+0x28>
  {
  }
}
 8000b20:	bf00      	nop
 8000b22:	3710      	adds	r7, #16
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20000008 	.word	0x20000008

08000b2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	f003 0307 	and.w	r3, r3, #7
 8000b3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <__NVIC_SetPriorityGrouping+0x44>)
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b42:	68ba      	ldr	r2, [r7, #8]
 8000b44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b48:	4013      	ands	r3, r2
 8000b4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b5e:	4a04      	ldr	r2, [pc, #16]	; (8000b70 <__NVIC_SetPriorityGrouping+0x44>)
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	60d3      	str	r3, [r2, #12]
}
 8000b64:	bf00      	nop
 8000b66:	3714      	adds	r7, #20
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bc80      	pop	{r7}
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b78:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <__NVIC_GetPriorityGrouping+0x18>)
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	0a1b      	lsrs	r3, r3, #8
 8000b7e:	f003 0307 	and.w	r3, r3, #7
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bc80      	pop	{r7}
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	db0b      	blt.n	8000bba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	f003 021f 	and.w	r2, r3, #31
 8000ba8:	4906      	ldr	r1, [pc, #24]	; (8000bc4 <__NVIC_EnableIRQ+0x34>)
 8000baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bae:	095b      	lsrs	r3, r3, #5
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bc80      	pop	{r7}
 8000bc2:	4770      	bx	lr
 8000bc4:	e000e100 	.word	0xe000e100

08000bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	6039      	str	r1, [r7, #0]
 8000bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	db0a      	blt.n	8000bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	b2da      	uxtb	r2, r3
 8000be0:	490c      	ldr	r1, [pc, #48]	; (8000c14 <__NVIC_SetPriority+0x4c>)
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	0112      	lsls	r2, r2, #4
 8000be8:	b2d2      	uxtb	r2, r2
 8000bea:	440b      	add	r3, r1
 8000bec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf0:	e00a      	b.n	8000c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	4908      	ldr	r1, [pc, #32]	; (8000c18 <__NVIC_SetPriority+0x50>)
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	f003 030f 	and.w	r3, r3, #15
 8000bfe:	3b04      	subs	r3, #4
 8000c00:	0112      	lsls	r2, r2, #4
 8000c02:	b2d2      	uxtb	r2, r2
 8000c04:	440b      	add	r3, r1
 8000c06:	761a      	strb	r2, [r3, #24]
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bc80      	pop	{r7}
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000e100 	.word	0xe000e100
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b089      	sub	sp, #36	; 0x24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	f003 0307 	and.w	r3, r3, #7
 8000c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c30:	69fb      	ldr	r3, [r7, #28]
 8000c32:	f1c3 0307 	rsb	r3, r3, #7
 8000c36:	2b04      	cmp	r3, #4
 8000c38:	bf28      	it	cs
 8000c3a:	2304      	movcs	r3, #4
 8000c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	3304      	adds	r3, #4
 8000c42:	2b06      	cmp	r3, #6
 8000c44:	d902      	bls.n	8000c4c <NVIC_EncodePriority+0x30>
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	3b03      	subs	r3, #3
 8000c4a:	e000      	b.n	8000c4e <NVIC_EncodePriority+0x32>
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c50:	f04f 32ff 	mov.w	r2, #4294967295
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	43da      	mvns	r2, r3
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	401a      	ands	r2, r3
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c64:	f04f 31ff 	mov.w	r1, #4294967295
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6e:	43d9      	mvns	r1, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c74:	4313      	orrs	r3, r2
         );
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3724      	adds	r7, #36	; 0x24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr

08000c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c90:	d301      	bcc.n	8000c96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c92:	2301      	movs	r3, #1
 8000c94:	e00f      	b.n	8000cb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c96:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <SysTick_Config+0x40>)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c9e:	210f      	movs	r1, #15
 8000ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca4:	f7ff ff90 	bl	8000bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca8:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <SysTick_Config+0x40>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cae:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <SysTick_Config+0x40>)
 8000cb0:	2207      	movs	r2, #7
 8000cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	e000e010 	.word	0xe000e010

08000cc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f7ff ff2d 	bl	8000b2c <__NVIC_SetPriorityGrouping>
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b086      	sub	sp, #24
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	60b9      	str	r1, [r7, #8]
 8000ce4:	607a      	str	r2, [r7, #4]
 8000ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cec:	f7ff ff42 	bl	8000b74 <__NVIC_GetPriorityGrouping>
 8000cf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	68b9      	ldr	r1, [r7, #8]
 8000cf6:	6978      	ldr	r0, [r7, #20]
 8000cf8:	f7ff ff90 	bl	8000c1c <NVIC_EncodePriority>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d02:	4611      	mov	r1, r2
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff ff5f 	bl	8000bc8 <__NVIC_SetPriority>
}
 8000d0a:	bf00      	nop
 8000d0c:	3718      	adds	r7, #24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b082      	sub	sp, #8
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	4603      	mov	r3, r0
 8000d1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff ff35 	bl	8000b90 <__NVIC_EnableIRQ>
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b082      	sub	sp, #8
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f7ff ffa2 	bl	8000c80 <SysTick_Config>
 8000d3c:	4603      	mov	r3, r0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
	...

08000d48 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d50:	2300      	movs	r3, #0
 8000d52:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d101      	bne.n	8000d5e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e043      	b.n	8000de6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	461a      	mov	r2, r3
 8000d64:	4b22      	ldr	r3, [pc, #136]	; (8000df0 <HAL_DMA_Init+0xa8>)
 8000d66:	4413      	add	r3, r2
 8000d68:	4a22      	ldr	r2, [pc, #136]	; (8000df4 <HAL_DMA_Init+0xac>)
 8000d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d6e:	091b      	lsrs	r3, r3, #4
 8000d70:	009a      	lsls	r2, r3, #2
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a1f      	ldr	r2, [pc, #124]	; (8000df8 <HAL_DMA_Init+0xb0>)
 8000d7a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2202      	movs	r2, #2
 8000d80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000d92:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000d96:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000da0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	68db      	ldr	r3, [r3, #12]
 8000da6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	695b      	ldr	r3, [r3, #20]
 8000db2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000db8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	69db      	ldr	r3, [r3, #28]
 8000dbe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000dc0:	68fa      	ldr	r2, [r7, #12]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	68fa      	ldr	r2, [r7, #12]
 8000dcc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2200      	movs	r2, #0
 8000de0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3714      	adds	r7, #20
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr
 8000df0:	bffdfff8 	.word	0xbffdfff8
 8000df4:	cccccccd 	.word	0xcccccccd
 8000df8:	40020000 	.word	0x40020000

08000dfc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
 8000e08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d101      	bne.n	8000e1c <HAL_DMA_Start_IT+0x20>
 8000e18:	2302      	movs	r3, #2
 8000e1a:	e04a      	b.n	8000eb2 <HAL_DMA_Start_IT+0xb6>
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	2201      	movs	r2, #1
 8000e20:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d13a      	bne.n	8000ea4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	2202      	movs	r2, #2
 8000e32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	2200      	movs	r2, #0
 8000e3a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f022 0201 	bic.w	r2, r2, #1
 8000e4a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	68b9      	ldr	r1, [r7, #8]
 8000e52:	68f8      	ldr	r0, [r7, #12]
 8000e54:	f000 f9ae 	bl	80011b4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d008      	beq.n	8000e72 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f042 020e 	orr.w	r2, r2, #14
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	e00f      	b.n	8000e92 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f022 0204 	bic.w	r2, r2, #4
 8000e80:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f042 020a 	orr.w	r2, r2, #10
 8000e90:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f042 0201 	orr.w	r2, r2, #1
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	e005      	b.n	8000eb0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000eac:	2302      	movs	r3, #2
 8000eae:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000eb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3718      	adds	r7, #24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
	...

08000ebc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	d005      	beq.n	8000ede <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2204      	movs	r2, #4
 8000ed6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	73fb      	strb	r3, [r7, #15]
 8000edc:	e051      	b.n	8000f82 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f022 020e 	bic.w	r2, r2, #14
 8000eec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f022 0201 	bic.w	r2, r2, #1
 8000efc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a22      	ldr	r2, [pc, #136]	; (8000f8c <HAL_DMA_Abort_IT+0xd0>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d029      	beq.n	8000f5c <HAL_DMA_Abort_IT+0xa0>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a20      	ldr	r2, [pc, #128]	; (8000f90 <HAL_DMA_Abort_IT+0xd4>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d022      	beq.n	8000f58 <HAL_DMA_Abort_IT+0x9c>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a1f      	ldr	r2, [pc, #124]	; (8000f94 <HAL_DMA_Abort_IT+0xd8>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d01a      	beq.n	8000f52 <HAL_DMA_Abort_IT+0x96>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a1d      	ldr	r2, [pc, #116]	; (8000f98 <HAL_DMA_Abort_IT+0xdc>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d012      	beq.n	8000f4c <HAL_DMA_Abort_IT+0x90>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a1c      	ldr	r2, [pc, #112]	; (8000f9c <HAL_DMA_Abort_IT+0xe0>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d00a      	beq.n	8000f46 <HAL_DMA_Abort_IT+0x8a>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a1a      	ldr	r2, [pc, #104]	; (8000fa0 <HAL_DMA_Abort_IT+0xe4>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d102      	bne.n	8000f40 <HAL_DMA_Abort_IT+0x84>
 8000f3a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f3e:	e00e      	b.n	8000f5e <HAL_DMA_Abort_IT+0xa2>
 8000f40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f44:	e00b      	b.n	8000f5e <HAL_DMA_Abort_IT+0xa2>
 8000f46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f4a:	e008      	b.n	8000f5e <HAL_DMA_Abort_IT+0xa2>
 8000f4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f50:	e005      	b.n	8000f5e <HAL_DMA_Abort_IT+0xa2>
 8000f52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f56:	e002      	b.n	8000f5e <HAL_DMA_Abort_IT+0xa2>
 8000f58:	2310      	movs	r3, #16
 8000f5a:	e000      	b.n	8000f5e <HAL_DMA_Abort_IT+0xa2>
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	4a11      	ldr	r2, [pc, #68]	; (8000fa4 <HAL_DMA_Abort_IT+0xe8>)
 8000f60:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2201      	movs	r2, #1
 8000f66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	4798      	blx	r3
    } 
  }
  return status;
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40020008 	.word	0x40020008
 8000f90:	4002001c 	.word	0x4002001c
 8000f94:	40020030 	.word	0x40020030
 8000f98:	40020044 	.word	0x40020044
 8000f9c:	40020058 	.word	0x40020058
 8000fa0:	4002006c 	.word	0x4002006c
 8000fa4:	40020000 	.word	0x40020000

08000fa8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc4:	2204      	movs	r2, #4
 8000fc6:	409a      	lsls	r2, r3
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d04f      	beq.n	8001070 <HAL_DMA_IRQHandler+0xc8>
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	f003 0304 	and.w	r3, r3, #4
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d04a      	beq.n	8001070 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f003 0320 	and.w	r3, r3, #32
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d107      	bne.n	8000ff8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f022 0204 	bic.w	r2, r2, #4
 8000ff6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a66      	ldr	r2, [pc, #408]	; (8001198 <HAL_DMA_IRQHandler+0x1f0>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d029      	beq.n	8001056 <HAL_DMA_IRQHandler+0xae>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a65      	ldr	r2, [pc, #404]	; (800119c <HAL_DMA_IRQHandler+0x1f4>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d022      	beq.n	8001052 <HAL_DMA_IRQHandler+0xaa>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a63      	ldr	r2, [pc, #396]	; (80011a0 <HAL_DMA_IRQHandler+0x1f8>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d01a      	beq.n	800104c <HAL_DMA_IRQHandler+0xa4>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a62      	ldr	r2, [pc, #392]	; (80011a4 <HAL_DMA_IRQHandler+0x1fc>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d012      	beq.n	8001046 <HAL_DMA_IRQHandler+0x9e>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a60      	ldr	r2, [pc, #384]	; (80011a8 <HAL_DMA_IRQHandler+0x200>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d00a      	beq.n	8001040 <HAL_DMA_IRQHandler+0x98>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a5f      	ldr	r2, [pc, #380]	; (80011ac <HAL_DMA_IRQHandler+0x204>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d102      	bne.n	800103a <HAL_DMA_IRQHandler+0x92>
 8001034:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001038:	e00e      	b.n	8001058 <HAL_DMA_IRQHandler+0xb0>
 800103a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800103e:	e00b      	b.n	8001058 <HAL_DMA_IRQHandler+0xb0>
 8001040:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001044:	e008      	b.n	8001058 <HAL_DMA_IRQHandler+0xb0>
 8001046:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800104a:	e005      	b.n	8001058 <HAL_DMA_IRQHandler+0xb0>
 800104c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001050:	e002      	b.n	8001058 <HAL_DMA_IRQHandler+0xb0>
 8001052:	2340      	movs	r3, #64	; 0x40
 8001054:	e000      	b.n	8001058 <HAL_DMA_IRQHandler+0xb0>
 8001056:	2304      	movs	r3, #4
 8001058:	4a55      	ldr	r2, [pc, #340]	; (80011b0 <HAL_DMA_IRQHandler+0x208>)
 800105a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001060:	2b00      	cmp	r3, #0
 8001062:	f000 8094 	beq.w	800118e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800106e:	e08e      	b.n	800118e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001074:	2202      	movs	r2, #2
 8001076:	409a      	lsls	r2, r3
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	4013      	ands	r3, r2
 800107c:	2b00      	cmp	r3, #0
 800107e:	d056      	beq.n	800112e <HAL_DMA_IRQHandler+0x186>
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d051      	beq.n	800112e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f003 0320 	and.w	r3, r3, #32
 8001094:	2b00      	cmp	r3, #0
 8001096:	d10b      	bne.n	80010b0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f022 020a 	bic.w	r2, r2, #10
 80010a6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2201      	movs	r2, #1
 80010ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a38      	ldr	r2, [pc, #224]	; (8001198 <HAL_DMA_IRQHandler+0x1f0>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d029      	beq.n	800110e <HAL_DMA_IRQHandler+0x166>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a37      	ldr	r2, [pc, #220]	; (800119c <HAL_DMA_IRQHandler+0x1f4>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d022      	beq.n	800110a <HAL_DMA_IRQHandler+0x162>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a35      	ldr	r2, [pc, #212]	; (80011a0 <HAL_DMA_IRQHandler+0x1f8>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d01a      	beq.n	8001104 <HAL_DMA_IRQHandler+0x15c>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a34      	ldr	r2, [pc, #208]	; (80011a4 <HAL_DMA_IRQHandler+0x1fc>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d012      	beq.n	80010fe <HAL_DMA_IRQHandler+0x156>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a32      	ldr	r2, [pc, #200]	; (80011a8 <HAL_DMA_IRQHandler+0x200>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d00a      	beq.n	80010f8 <HAL_DMA_IRQHandler+0x150>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a31      	ldr	r2, [pc, #196]	; (80011ac <HAL_DMA_IRQHandler+0x204>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d102      	bne.n	80010f2 <HAL_DMA_IRQHandler+0x14a>
 80010ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80010f0:	e00e      	b.n	8001110 <HAL_DMA_IRQHandler+0x168>
 80010f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010f6:	e00b      	b.n	8001110 <HAL_DMA_IRQHandler+0x168>
 80010f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010fc:	e008      	b.n	8001110 <HAL_DMA_IRQHandler+0x168>
 80010fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001102:	e005      	b.n	8001110 <HAL_DMA_IRQHandler+0x168>
 8001104:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001108:	e002      	b.n	8001110 <HAL_DMA_IRQHandler+0x168>
 800110a:	2320      	movs	r3, #32
 800110c:	e000      	b.n	8001110 <HAL_DMA_IRQHandler+0x168>
 800110e:	2302      	movs	r3, #2
 8001110:	4a27      	ldr	r2, [pc, #156]	; (80011b0 <HAL_DMA_IRQHandler+0x208>)
 8001112:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001120:	2b00      	cmp	r3, #0
 8001122:	d034      	beq.n	800118e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800112c:	e02f      	b.n	800118e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	2208      	movs	r2, #8
 8001134:	409a      	lsls	r2, r3
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	4013      	ands	r3, r2
 800113a:	2b00      	cmp	r3, #0
 800113c:	d028      	beq.n	8001190 <HAL_DMA_IRQHandler+0x1e8>
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	f003 0308 	and.w	r3, r3, #8
 8001144:	2b00      	cmp	r3, #0
 8001146:	d023      	beq.n	8001190 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f022 020e 	bic.w	r2, r2, #14
 8001156:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001160:	2101      	movs	r1, #1
 8001162:	fa01 f202 	lsl.w	r2, r1, r2
 8001166:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2201      	movs	r2, #1
 800116c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2201      	movs	r2, #1
 8001172:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	2b00      	cmp	r3, #0
 8001184:	d004      	beq.n	8001190 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	4798      	blx	r3
    }
  }
  return;
 800118e:	bf00      	nop
 8001190:	bf00      	nop
}
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40020008 	.word	0x40020008
 800119c:	4002001c 	.word	0x4002001c
 80011a0:	40020030 	.word	0x40020030
 80011a4:	40020044 	.word	0x40020044
 80011a8:	40020058 	.word	0x40020058
 80011ac:	4002006c 	.word	0x4002006c
 80011b0:	40020000 	.word	0x40020000

080011b4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
 80011c0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011ca:	2101      	movs	r1, #1
 80011cc:	fa01 f202 	lsl.w	r2, r1, r2
 80011d0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	683a      	ldr	r2, [r7, #0]
 80011d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2b10      	cmp	r3, #16
 80011e0:	d108      	bne.n	80011f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	68ba      	ldr	r2, [r7, #8]
 80011f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80011f2:	e007      	b.n	8001204 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	68ba      	ldr	r2, [r7, #8]
 80011fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	60da      	str	r2, [r3, #12]
}
 8001204:	bf00      	nop
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	bc80      	pop	{r7}
 800120c:	4770      	bx	lr
	...

08001210 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001210:	b480      	push	{r7}
 8001212:	b08b      	sub	sp, #44	; 0x2c
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800121a:	2300      	movs	r3, #0
 800121c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800121e:	2300      	movs	r3, #0
 8001220:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001222:	e127      	b.n	8001474 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001224:	2201      	movs	r2, #1
 8001226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	69fa      	ldr	r2, [r7, #28]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	429a      	cmp	r2, r3
 800123e:	f040 8116 	bne.w	800146e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	2b12      	cmp	r3, #18
 8001248:	d034      	beq.n	80012b4 <HAL_GPIO_Init+0xa4>
 800124a:	2b12      	cmp	r3, #18
 800124c:	d80d      	bhi.n	800126a <HAL_GPIO_Init+0x5a>
 800124e:	2b02      	cmp	r3, #2
 8001250:	d02b      	beq.n	80012aa <HAL_GPIO_Init+0x9a>
 8001252:	2b02      	cmp	r3, #2
 8001254:	d804      	bhi.n	8001260 <HAL_GPIO_Init+0x50>
 8001256:	2b00      	cmp	r3, #0
 8001258:	d031      	beq.n	80012be <HAL_GPIO_Init+0xae>
 800125a:	2b01      	cmp	r3, #1
 800125c:	d01c      	beq.n	8001298 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800125e:	e048      	b.n	80012f2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001260:	2b03      	cmp	r3, #3
 8001262:	d043      	beq.n	80012ec <HAL_GPIO_Init+0xdc>
 8001264:	2b11      	cmp	r3, #17
 8001266:	d01b      	beq.n	80012a0 <HAL_GPIO_Init+0x90>
          break;
 8001268:	e043      	b.n	80012f2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800126a:	4a89      	ldr	r2, [pc, #548]	; (8001490 <HAL_GPIO_Init+0x280>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d026      	beq.n	80012be <HAL_GPIO_Init+0xae>
 8001270:	4a87      	ldr	r2, [pc, #540]	; (8001490 <HAL_GPIO_Init+0x280>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d806      	bhi.n	8001284 <HAL_GPIO_Init+0x74>
 8001276:	4a87      	ldr	r2, [pc, #540]	; (8001494 <HAL_GPIO_Init+0x284>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d020      	beq.n	80012be <HAL_GPIO_Init+0xae>
 800127c:	4a86      	ldr	r2, [pc, #536]	; (8001498 <HAL_GPIO_Init+0x288>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d01d      	beq.n	80012be <HAL_GPIO_Init+0xae>
          break;
 8001282:	e036      	b.n	80012f2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001284:	4a85      	ldr	r2, [pc, #532]	; (800149c <HAL_GPIO_Init+0x28c>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d019      	beq.n	80012be <HAL_GPIO_Init+0xae>
 800128a:	4a85      	ldr	r2, [pc, #532]	; (80014a0 <HAL_GPIO_Init+0x290>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d016      	beq.n	80012be <HAL_GPIO_Init+0xae>
 8001290:	4a84      	ldr	r2, [pc, #528]	; (80014a4 <HAL_GPIO_Init+0x294>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d013      	beq.n	80012be <HAL_GPIO_Init+0xae>
          break;
 8001296:	e02c      	b.n	80012f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	623b      	str	r3, [r7, #32]
          break;
 800129e:	e028      	b.n	80012f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	3304      	adds	r3, #4
 80012a6:	623b      	str	r3, [r7, #32]
          break;
 80012a8:	e023      	b.n	80012f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	3308      	adds	r3, #8
 80012b0:	623b      	str	r3, [r7, #32]
          break;
 80012b2:	e01e      	b.n	80012f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	330c      	adds	r3, #12
 80012ba:	623b      	str	r3, [r7, #32]
          break;
 80012bc:	e019      	b.n	80012f2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d102      	bne.n	80012cc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012c6:	2304      	movs	r3, #4
 80012c8:	623b      	str	r3, [r7, #32]
          break;
 80012ca:	e012      	b.n	80012f2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d105      	bne.n	80012e0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012d4:	2308      	movs	r3, #8
 80012d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	69fa      	ldr	r2, [r7, #28]
 80012dc:	611a      	str	r2, [r3, #16]
          break;
 80012de:	e008      	b.n	80012f2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012e0:	2308      	movs	r3, #8
 80012e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	69fa      	ldr	r2, [r7, #28]
 80012e8:	615a      	str	r2, [r3, #20]
          break;
 80012ea:	e002      	b.n	80012f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012ec:	2300      	movs	r3, #0
 80012ee:	623b      	str	r3, [r7, #32]
          break;
 80012f0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	2bff      	cmp	r3, #255	; 0xff
 80012f6:	d801      	bhi.n	80012fc <HAL_GPIO_Init+0xec>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	e001      	b.n	8001300 <HAL_GPIO_Init+0xf0>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3304      	adds	r3, #4
 8001300:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	2bff      	cmp	r3, #255	; 0xff
 8001306:	d802      	bhi.n	800130e <HAL_GPIO_Init+0xfe>
 8001308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	e002      	b.n	8001314 <HAL_GPIO_Init+0x104>
 800130e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001310:	3b08      	subs	r3, #8
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	210f      	movs	r1, #15
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	fa01 f303 	lsl.w	r3, r1, r3
 8001322:	43db      	mvns	r3, r3
 8001324:	401a      	ands	r2, r3
 8001326:	6a39      	ldr	r1, [r7, #32]
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	fa01 f303 	lsl.w	r3, r1, r3
 800132e:	431a      	orrs	r2, r3
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133c:	2b00      	cmp	r3, #0
 800133e:	f000 8096 	beq.w	800146e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001342:	4b59      	ldr	r3, [pc, #356]	; (80014a8 <HAL_GPIO_Init+0x298>)
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	4a58      	ldr	r2, [pc, #352]	; (80014a8 <HAL_GPIO_Init+0x298>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	6193      	str	r3, [r2, #24]
 800134e:	4b56      	ldr	r3, [pc, #344]	; (80014a8 <HAL_GPIO_Init+0x298>)
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800135a:	4a54      	ldr	r2, [pc, #336]	; (80014ac <HAL_GPIO_Init+0x29c>)
 800135c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135e:	089b      	lsrs	r3, r3, #2
 8001360:	3302      	adds	r3, #2
 8001362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001366:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136a:	f003 0303 	and.w	r3, r3, #3
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	220f      	movs	r2, #15
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43db      	mvns	r3, r3
 8001378:	68fa      	ldr	r2, [r7, #12]
 800137a:	4013      	ands	r3, r2
 800137c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a4b      	ldr	r2, [pc, #300]	; (80014b0 <HAL_GPIO_Init+0x2a0>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d013      	beq.n	80013ae <HAL_GPIO_Init+0x19e>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a4a      	ldr	r2, [pc, #296]	; (80014b4 <HAL_GPIO_Init+0x2a4>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d00d      	beq.n	80013aa <HAL_GPIO_Init+0x19a>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a49      	ldr	r2, [pc, #292]	; (80014b8 <HAL_GPIO_Init+0x2a8>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d007      	beq.n	80013a6 <HAL_GPIO_Init+0x196>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a48      	ldr	r2, [pc, #288]	; (80014bc <HAL_GPIO_Init+0x2ac>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d101      	bne.n	80013a2 <HAL_GPIO_Init+0x192>
 800139e:	2303      	movs	r3, #3
 80013a0:	e006      	b.n	80013b0 <HAL_GPIO_Init+0x1a0>
 80013a2:	2304      	movs	r3, #4
 80013a4:	e004      	b.n	80013b0 <HAL_GPIO_Init+0x1a0>
 80013a6:	2302      	movs	r3, #2
 80013a8:	e002      	b.n	80013b0 <HAL_GPIO_Init+0x1a0>
 80013aa:	2301      	movs	r3, #1
 80013ac:	e000      	b.n	80013b0 <HAL_GPIO_Init+0x1a0>
 80013ae:	2300      	movs	r3, #0
 80013b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013b2:	f002 0203 	and.w	r2, r2, #3
 80013b6:	0092      	lsls	r2, r2, #2
 80013b8:	4093      	lsls	r3, r2
 80013ba:	68fa      	ldr	r2, [r7, #12]
 80013bc:	4313      	orrs	r3, r2
 80013be:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013c0:	493a      	ldr	r1, [pc, #232]	; (80014ac <HAL_GPIO_Init+0x29c>)
 80013c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c4:	089b      	lsrs	r3, r3, #2
 80013c6:	3302      	adds	r3, #2
 80013c8:	68fa      	ldr	r2, [r7, #12]
 80013ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d006      	beq.n	80013e8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013da:	4b39      	ldr	r3, [pc, #228]	; (80014c0 <HAL_GPIO_Init+0x2b0>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	4938      	ldr	r1, [pc, #224]	; (80014c0 <HAL_GPIO_Init+0x2b0>)
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	600b      	str	r3, [r1, #0]
 80013e6:	e006      	b.n	80013f6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013e8:	4b35      	ldr	r3, [pc, #212]	; (80014c0 <HAL_GPIO_Init+0x2b0>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	43db      	mvns	r3, r3
 80013f0:	4933      	ldr	r1, [pc, #204]	; (80014c0 <HAL_GPIO_Init+0x2b0>)
 80013f2:	4013      	ands	r3, r2
 80013f4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d006      	beq.n	8001410 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001402:	4b2f      	ldr	r3, [pc, #188]	; (80014c0 <HAL_GPIO_Init+0x2b0>)
 8001404:	685a      	ldr	r2, [r3, #4]
 8001406:	492e      	ldr	r1, [pc, #184]	; (80014c0 <HAL_GPIO_Init+0x2b0>)
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	4313      	orrs	r3, r2
 800140c:	604b      	str	r3, [r1, #4]
 800140e:	e006      	b.n	800141e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001410:	4b2b      	ldr	r3, [pc, #172]	; (80014c0 <HAL_GPIO_Init+0x2b0>)
 8001412:	685a      	ldr	r2, [r3, #4]
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	43db      	mvns	r3, r3
 8001418:	4929      	ldr	r1, [pc, #164]	; (80014c0 <HAL_GPIO_Init+0x2b0>)
 800141a:	4013      	ands	r3, r2
 800141c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d006      	beq.n	8001438 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800142a:	4b25      	ldr	r3, [pc, #148]	; (80014c0 <HAL_GPIO_Init+0x2b0>)
 800142c:	689a      	ldr	r2, [r3, #8]
 800142e:	4924      	ldr	r1, [pc, #144]	; (80014c0 <HAL_GPIO_Init+0x2b0>)
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	4313      	orrs	r3, r2
 8001434:	608b      	str	r3, [r1, #8]
 8001436:	e006      	b.n	8001446 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001438:	4b21      	ldr	r3, [pc, #132]	; (80014c0 <HAL_GPIO_Init+0x2b0>)
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	43db      	mvns	r3, r3
 8001440:	491f      	ldr	r1, [pc, #124]	; (80014c0 <HAL_GPIO_Init+0x2b0>)
 8001442:	4013      	ands	r3, r2
 8001444:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d006      	beq.n	8001460 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001452:	4b1b      	ldr	r3, [pc, #108]	; (80014c0 <HAL_GPIO_Init+0x2b0>)
 8001454:	68da      	ldr	r2, [r3, #12]
 8001456:	491a      	ldr	r1, [pc, #104]	; (80014c0 <HAL_GPIO_Init+0x2b0>)
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	4313      	orrs	r3, r2
 800145c:	60cb      	str	r3, [r1, #12]
 800145e:	e006      	b.n	800146e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001460:	4b17      	ldr	r3, [pc, #92]	; (80014c0 <HAL_GPIO_Init+0x2b0>)
 8001462:	68da      	ldr	r2, [r3, #12]
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	43db      	mvns	r3, r3
 8001468:	4915      	ldr	r1, [pc, #84]	; (80014c0 <HAL_GPIO_Init+0x2b0>)
 800146a:	4013      	ands	r3, r2
 800146c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800146e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001470:	3301      	adds	r3, #1
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147a:	fa22 f303 	lsr.w	r3, r2, r3
 800147e:	2b00      	cmp	r3, #0
 8001480:	f47f aed0 	bne.w	8001224 <HAL_GPIO_Init+0x14>
  }
}
 8001484:	bf00      	nop
 8001486:	372c      	adds	r7, #44	; 0x2c
 8001488:	46bd      	mov	sp, r7
 800148a:	bc80      	pop	{r7}
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	10210000 	.word	0x10210000
 8001494:	10110000 	.word	0x10110000
 8001498:	10120000 	.word	0x10120000
 800149c:	10310000 	.word	0x10310000
 80014a0:	10320000 	.word	0x10320000
 80014a4:	10220000 	.word	0x10220000
 80014a8:	40021000 	.word	0x40021000
 80014ac:	40010000 	.word	0x40010000
 80014b0:	40010800 	.word	0x40010800
 80014b4:	40010c00 	.word	0x40010c00
 80014b8:	40011000 	.word	0x40011000
 80014bc:	40011400 	.word	0x40011400
 80014c0:	40010400 	.word	0x40010400

080014c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	460b      	mov	r3, r1
 80014ce:	807b      	strh	r3, [r7, #2]
 80014d0:	4613      	mov	r3, r2
 80014d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014d4:	787b      	ldrb	r3, [r7, #1]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d003      	beq.n	80014e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014da:	887a      	ldrh	r2, [r7, #2]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014e0:	e003      	b.n	80014ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014e2:	887b      	ldrh	r3, [r7, #2]
 80014e4:	041a      	lsls	r2, r3, #16
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	611a      	str	r2, [r3, #16]
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr

080014f4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	460b      	mov	r3, r1
 80014fe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	68da      	ldr	r2, [r3, #12]
 8001504:	887b      	ldrh	r3, [r7, #2]
 8001506:	4013      	ands	r3, r2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d003      	beq.n	8001514 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800150c:	887a      	ldrh	r2, [r7, #2]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001512:	e002      	b.n	800151a <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001514:	887a      	ldrh	r2, [r7, #2]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	611a      	str	r2, [r3, #16]
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr

08001524 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800152e:	4b08      	ldr	r3, [pc, #32]	; (8001550 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001530:	695a      	ldr	r2, [r3, #20]
 8001532:	88fb      	ldrh	r3, [r7, #6]
 8001534:	4013      	ands	r3, r2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d006      	beq.n	8001548 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800153a:	4a05      	ldr	r2, [pc, #20]	; (8001550 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800153c:	88fb      	ldrh	r3, [r7, #6]
 800153e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001540:	88fb      	ldrh	r3, [r7, #6]
 8001542:	4618      	mov	r0, r3
 8001544:	f7fe ffbc 	bl	80004c0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001548:	bf00      	nop
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40010400 	.word	0x40010400

08001554 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d101      	bne.n	8001566 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e26c      	b.n	8001a40 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	2b00      	cmp	r3, #0
 8001570:	f000 8087 	beq.w	8001682 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001574:	4b92      	ldr	r3, [pc, #584]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 030c 	and.w	r3, r3, #12
 800157c:	2b04      	cmp	r3, #4
 800157e:	d00c      	beq.n	800159a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001580:	4b8f      	ldr	r3, [pc, #572]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f003 030c 	and.w	r3, r3, #12
 8001588:	2b08      	cmp	r3, #8
 800158a:	d112      	bne.n	80015b2 <HAL_RCC_OscConfig+0x5e>
 800158c:	4b8c      	ldr	r3, [pc, #560]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001598:	d10b      	bne.n	80015b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800159a:	4b89      	ldr	r3, [pc, #548]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d06c      	beq.n	8001680 <HAL_RCC_OscConfig+0x12c>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d168      	bne.n	8001680 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e246      	b.n	8001a40 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015ba:	d106      	bne.n	80015ca <HAL_RCC_OscConfig+0x76>
 80015bc:	4b80      	ldr	r3, [pc, #512]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a7f      	ldr	r2, [pc, #508]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 80015c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015c6:	6013      	str	r3, [r2, #0]
 80015c8:	e02e      	b.n	8001628 <HAL_RCC_OscConfig+0xd4>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d10c      	bne.n	80015ec <HAL_RCC_OscConfig+0x98>
 80015d2:	4b7b      	ldr	r3, [pc, #492]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a7a      	ldr	r2, [pc, #488]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 80015d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015dc:	6013      	str	r3, [r2, #0]
 80015de:	4b78      	ldr	r3, [pc, #480]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a77      	ldr	r2, [pc, #476]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 80015e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015e8:	6013      	str	r3, [r2, #0]
 80015ea:	e01d      	b.n	8001628 <HAL_RCC_OscConfig+0xd4>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015f4:	d10c      	bne.n	8001610 <HAL_RCC_OscConfig+0xbc>
 80015f6:	4b72      	ldr	r3, [pc, #456]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a71      	ldr	r2, [pc, #452]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 80015fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001600:	6013      	str	r3, [r2, #0]
 8001602:	4b6f      	ldr	r3, [pc, #444]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a6e      	ldr	r2, [pc, #440]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 8001608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800160c:	6013      	str	r3, [r2, #0]
 800160e:	e00b      	b.n	8001628 <HAL_RCC_OscConfig+0xd4>
 8001610:	4b6b      	ldr	r3, [pc, #428]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a6a      	ldr	r2, [pc, #424]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 8001616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800161a:	6013      	str	r3, [r2, #0]
 800161c:	4b68      	ldr	r3, [pc, #416]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a67      	ldr	r2, [pc, #412]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 8001622:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001626:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d013      	beq.n	8001658 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001630:	f7ff fa50 	bl	8000ad4 <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001638:	f7ff fa4c 	bl	8000ad4 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b64      	cmp	r3, #100	; 0x64
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e1fa      	b.n	8001a40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164a:	4b5d      	ldr	r3, [pc, #372]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d0f0      	beq.n	8001638 <HAL_RCC_OscConfig+0xe4>
 8001656:	e014      	b.n	8001682 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001658:	f7ff fa3c 	bl	8000ad4 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001660:	f7ff fa38 	bl	8000ad4 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b64      	cmp	r3, #100	; 0x64
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e1e6      	b.n	8001a40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001672:	4b53      	ldr	r3, [pc, #332]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f0      	bne.n	8001660 <HAL_RCC_OscConfig+0x10c>
 800167e:	e000      	b.n	8001682 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001680:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d063      	beq.n	8001756 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800168e:	4b4c      	ldr	r3, [pc, #304]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f003 030c 	and.w	r3, r3, #12
 8001696:	2b00      	cmp	r3, #0
 8001698:	d00b      	beq.n	80016b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800169a:	4b49      	ldr	r3, [pc, #292]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f003 030c 	and.w	r3, r3, #12
 80016a2:	2b08      	cmp	r3, #8
 80016a4:	d11c      	bne.n	80016e0 <HAL_RCC_OscConfig+0x18c>
 80016a6:	4b46      	ldr	r3, [pc, #280]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d116      	bne.n	80016e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016b2:	4b43      	ldr	r3, [pc, #268]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d005      	beq.n	80016ca <HAL_RCC_OscConfig+0x176>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	691b      	ldr	r3, [r3, #16]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d001      	beq.n	80016ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e1ba      	b.n	8001a40 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ca:	4b3d      	ldr	r3, [pc, #244]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	4939      	ldr	r1, [pc, #228]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 80016da:	4313      	orrs	r3, r2
 80016dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016de:	e03a      	b.n	8001756 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	691b      	ldr	r3, [r3, #16]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d020      	beq.n	800172a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016e8:	4b36      	ldr	r3, [pc, #216]	; (80017c4 <HAL_RCC_OscConfig+0x270>)
 80016ea:	2201      	movs	r2, #1
 80016ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ee:	f7ff f9f1 	bl	8000ad4 <HAL_GetTick>
 80016f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f4:	e008      	b.n	8001708 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016f6:	f7ff f9ed 	bl	8000ad4 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e19b      	b.n	8001a40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001708:	4b2d      	ldr	r3, [pc, #180]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d0f0      	beq.n	80016f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001714:	4b2a      	ldr	r3, [pc, #168]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	695b      	ldr	r3, [r3, #20]
 8001720:	00db      	lsls	r3, r3, #3
 8001722:	4927      	ldr	r1, [pc, #156]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 8001724:	4313      	orrs	r3, r2
 8001726:	600b      	str	r3, [r1, #0]
 8001728:	e015      	b.n	8001756 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800172a:	4b26      	ldr	r3, [pc, #152]	; (80017c4 <HAL_RCC_OscConfig+0x270>)
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001730:	f7ff f9d0 	bl	8000ad4 <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001738:	f7ff f9cc 	bl	8000ad4 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e17a      	b.n	8001a40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800174a:	4b1d      	ldr	r3, [pc, #116]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1f0      	bne.n	8001738 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0308 	and.w	r3, r3, #8
 800175e:	2b00      	cmp	r3, #0
 8001760:	d03a      	beq.n	80017d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d019      	beq.n	800179e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800176a:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <HAL_RCC_OscConfig+0x274>)
 800176c:	2201      	movs	r2, #1
 800176e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001770:	f7ff f9b0 	bl	8000ad4 <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001778:	f7ff f9ac 	bl	8000ad4 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e15a      	b.n	8001a40 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800178a:	4b0d      	ldr	r3, [pc, #52]	; (80017c0 <HAL_RCC_OscConfig+0x26c>)
 800178c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d0f0      	beq.n	8001778 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001796:	2001      	movs	r0, #1
 8001798:	f000 fada 	bl	8001d50 <RCC_Delay>
 800179c:	e01c      	b.n	80017d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800179e:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <HAL_RCC_OscConfig+0x274>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a4:	f7ff f996 	bl	8000ad4 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017aa:	e00f      	b.n	80017cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017ac:	f7ff f992 	bl	8000ad4 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d908      	bls.n	80017cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e140      	b.n	8001a40 <HAL_RCC_OscConfig+0x4ec>
 80017be:	bf00      	nop
 80017c0:	40021000 	.word	0x40021000
 80017c4:	42420000 	.word	0x42420000
 80017c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017cc:	4b9e      	ldr	r3, [pc, #632]	; (8001a48 <HAL_RCC_OscConfig+0x4f4>)
 80017ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d1e9      	bne.n	80017ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	f000 80a6 	beq.w	8001932 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017e6:	2300      	movs	r3, #0
 80017e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017ea:	4b97      	ldr	r3, [pc, #604]	; (8001a48 <HAL_RCC_OscConfig+0x4f4>)
 80017ec:	69db      	ldr	r3, [r3, #28]
 80017ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d10d      	bne.n	8001812 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017f6:	4b94      	ldr	r3, [pc, #592]	; (8001a48 <HAL_RCC_OscConfig+0x4f4>)
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	4a93      	ldr	r2, [pc, #588]	; (8001a48 <HAL_RCC_OscConfig+0x4f4>)
 80017fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001800:	61d3      	str	r3, [r2, #28]
 8001802:	4b91      	ldr	r3, [pc, #580]	; (8001a48 <HAL_RCC_OscConfig+0x4f4>)
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180a:	60bb      	str	r3, [r7, #8]
 800180c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800180e:	2301      	movs	r3, #1
 8001810:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001812:	4b8e      	ldr	r3, [pc, #568]	; (8001a4c <HAL_RCC_OscConfig+0x4f8>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181a:	2b00      	cmp	r3, #0
 800181c:	d118      	bne.n	8001850 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800181e:	4b8b      	ldr	r3, [pc, #556]	; (8001a4c <HAL_RCC_OscConfig+0x4f8>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a8a      	ldr	r2, [pc, #552]	; (8001a4c <HAL_RCC_OscConfig+0x4f8>)
 8001824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001828:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800182a:	f7ff f953 	bl	8000ad4 <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001832:	f7ff f94f 	bl	8000ad4 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b64      	cmp	r3, #100	; 0x64
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e0fd      	b.n	8001a40 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001844:	4b81      	ldr	r3, [pc, #516]	; (8001a4c <HAL_RCC_OscConfig+0x4f8>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0f0      	beq.n	8001832 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d106      	bne.n	8001866 <HAL_RCC_OscConfig+0x312>
 8001858:	4b7b      	ldr	r3, [pc, #492]	; (8001a48 <HAL_RCC_OscConfig+0x4f4>)
 800185a:	6a1b      	ldr	r3, [r3, #32]
 800185c:	4a7a      	ldr	r2, [pc, #488]	; (8001a48 <HAL_RCC_OscConfig+0x4f4>)
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	6213      	str	r3, [r2, #32]
 8001864:	e02d      	b.n	80018c2 <HAL_RCC_OscConfig+0x36e>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d10c      	bne.n	8001888 <HAL_RCC_OscConfig+0x334>
 800186e:	4b76      	ldr	r3, [pc, #472]	; (8001a48 <HAL_RCC_OscConfig+0x4f4>)
 8001870:	6a1b      	ldr	r3, [r3, #32]
 8001872:	4a75      	ldr	r2, [pc, #468]	; (8001a48 <HAL_RCC_OscConfig+0x4f4>)
 8001874:	f023 0301 	bic.w	r3, r3, #1
 8001878:	6213      	str	r3, [r2, #32]
 800187a:	4b73      	ldr	r3, [pc, #460]	; (8001a48 <HAL_RCC_OscConfig+0x4f4>)
 800187c:	6a1b      	ldr	r3, [r3, #32]
 800187e:	4a72      	ldr	r2, [pc, #456]	; (8001a48 <HAL_RCC_OscConfig+0x4f4>)
 8001880:	f023 0304 	bic.w	r3, r3, #4
 8001884:	6213      	str	r3, [r2, #32]
 8001886:	e01c      	b.n	80018c2 <HAL_RCC_OscConfig+0x36e>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	2b05      	cmp	r3, #5
 800188e:	d10c      	bne.n	80018aa <HAL_RCC_OscConfig+0x356>
 8001890:	4b6d      	ldr	r3, [pc, #436]	; (8001a48 <HAL_RCC_OscConfig+0x4f4>)
 8001892:	6a1b      	ldr	r3, [r3, #32]
 8001894:	4a6c      	ldr	r2, [pc, #432]	; (8001a48 <HAL_RCC_OscConfig+0x4f4>)
 8001896:	f043 0304 	orr.w	r3, r3, #4
 800189a:	6213      	str	r3, [r2, #32]
 800189c:	4b6a      	ldr	r3, [pc, #424]	; (8001a48 <HAL_RCC_OscConfig+0x4f4>)
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	4a69      	ldr	r2, [pc, #420]	; (8001a48 <HAL_RCC_OscConfig+0x4f4>)
 80018a2:	f043 0301 	orr.w	r3, r3, #1
 80018a6:	6213      	str	r3, [r2, #32]
 80018a8:	e00b      	b.n	80018c2 <HAL_RCC_OscConfig+0x36e>
 80018aa:	4b67      	ldr	r3, [pc, #412]	; (8001a48 <HAL_RCC_OscConfig+0x4f4>)
 80018ac:	6a1b      	ldr	r3, [r3, #32]
 80018ae:	4a66      	ldr	r2, [pc, #408]	; (8001a48 <HAL_RCC_OscConfig+0x4f4>)
 80018b0:	f023 0301 	bic.w	r3, r3, #1
 80018b4:	6213      	str	r3, [r2, #32]
 80018b6:	4b64      	ldr	r3, [pc, #400]	; (8001a48 <HAL_RCC_OscConfig+0x4f4>)
 80018b8:	6a1b      	ldr	r3, [r3, #32]
 80018ba:	4a63      	ldr	r2, [pc, #396]	; (8001a48 <HAL_RCC_OscConfig+0x4f4>)
 80018bc:	f023 0304 	bic.w	r3, r3, #4
 80018c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d015      	beq.n	80018f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ca:	f7ff f903 	bl	8000ad4 <HAL_GetTick>
 80018ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d0:	e00a      	b.n	80018e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018d2:	f7ff f8ff 	bl	8000ad4 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e0ab      	b.n	8001a40 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018e8:	4b57      	ldr	r3, [pc, #348]	; (8001a48 <HAL_RCC_OscConfig+0x4f4>)
 80018ea:	6a1b      	ldr	r3, [r3, #32]
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d0ee      	beq.n	80018d2 <HAL_RCC_OscConfig+0x37e>
 80018f4:	e014      	b.n	8001920 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f6:	f7ff f8ed 	bl	8000ad4 <HAL_GetTick>
 80018fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018fc:	e00a      	b.n	8001914 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018fe:	f7ff f8e9 	bl	8000ad4 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	f241 3288 	movw	r2, #5000	; 0x1388
 800190c:	4293      	cmp	r3, r2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e095      	b.n	8001a40 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001914:	4b4c      	ldr	r3, [pc, #304]	; (8001a48 <HAL_RCC_OscConfig+0x4f4>)
 8001916:	6a1b      	ldr	r3, [r3, #32]
 8001918:	f003 0302 	and.w	r3, r3, #2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d1ee      	bne.n	80018fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001920:	7dfb      	ldrb	r3, [r7, #23]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d105      	bne.n	8001932 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001926:	4b48      	ldr	r3, [pc, #288]	; (8001a48 <HAL_RCC_OscConfig+0x4f4>)
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	4a47      	ldr	r2, [pc, #284]	; (8001a48 <HAL_RCC_OscConfig+0x4f4>)
 800192c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001930:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	2b00      	cmp	r3, #0
 8001938:	f000 8081 	beq.w	8001a3e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800193c:	4b42      	ldr	r3, [pc, #264]	; (8001a48 <HAL_RCC_OscConfig+0x4f4>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 030c 	and.w	r3, r3, #12
 8001944:	2b08      	cmp	r3, #8
 8001946:	d061      	beq.n	8001a0c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	69db      	ldr	r3, [r3, #28]
 800194c:	2b02      	cmp	r3, #2
 800194e:	d146      	bne.n	80019de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001950:	4b3f      	ldr	r3, [pc, #252]	; (8001a50 <HAL_RCC_OscConfig+0x4fc>)
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001956:	f7ff f8bd 	bl	8000ad4 <HAL_GetTick>
 800195a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800195c:	e008      	b.n	8001970 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800195e:	f7ff f8b9 	bl	8000ad4 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e067      	b.n	8001a40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001970:	4b35      	ldr	r3, [pc, #212]	; (8001a48 <HAL_RCC_OscConfig+0x4f4>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1f0      	bne.n	800195e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a1b      	ldr	r3, [r3, #32]
 8001980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001984:	d108      	bne.n	8001998 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001986:	4b30      	ldr	r3, [pc, #192]	; (8001a48 <HAL_RCC_OscConfig+0x4f4>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	492d      	ldr	r1, [pc, #180]	; (8001a48 <HAL_RCC_OscConfig+0x4f4>)
 8001994:	4313      	orrs	r3, r2
 8001996:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001998:	4b2b      	ldr	r3, [pc, #172]	; (8001a48 <HAL_RCC_OscConfig+0x4f4>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a19      	ldr	r1, [r3, #32]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a8:	430b      	orrs	r3, r1
 80019aa:	4927      	ldr	r1, [pc, #156]	; (8001a48 <HAL_RCC_OscConfig+0x4f4>)
 80019ac:	4313      	orrs	r3, r2
 80019ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019b0:	4b27      	ldr	r3, [pc, #156]	; (8001a50 <HAL_RCC_OscConfig+0x4fc>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b6:	f7ff f88d 	bl	8000ad4 <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019be:	f7ff f889 	bl	8000ad4 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e037      	b.n	8001a40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019d0:	4b1d      	ldr	r3, [pc, #116]	; (8001a48 <HAL_RCC_OscConfig+0x4f4>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d0f0      	beq.n	80019be <HAL_RCC_OscConfig+0x46a>
 80019dc:	e02f      	b.n	8001a3e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019de:	4b1c      	ldr	r3, [pc, #112]	; (8001a50 <HAL_RCC_OscConfig+0x4fc>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e4:	f7ff f876 	bl	8000ad4 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ec:	f7ff f872 	bl	8000ad4 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e020      	b.n	8001a40 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019fe:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <HAL_RCC_OscConfig+0x4f4>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1f0      	bne.n	80019ec <HAL_RCC_OscConfig+0x498>
 8001a0a:	e018      	b.n	8001a3e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	69db      	ldr	r3, [r3, #28]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d101      	bne.n	8001a18 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e013      	b.n	8001a40 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a18:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <HAL_RCC_OscConfig+0x4f4>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a1b      	ldr	r3, [r3, #32]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d106      	bne.n	8001a3a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d001      	beq.n	8001a3e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e000      	b.n	8001a40 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3718      	adds	r7, #24
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40007000 	.word	0x40007000
 8001a50:	42420060 	.word	0x42420060

08001a54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d101      	bne.n	8001a68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e0d0      	b.n	8001c0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a68:	4b6a      	ldr	r3, [pc, #424]	; (8001c14 <HAL_RCC_ClockConfig+0x1c0>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0307 	and.w	r3, r3, #7
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d910      	bls.n	8001a98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a76:	4b67      	ldr	r3, [pc, #412]	; (8001c14 <HAL_RCC_ClockConfig+0x1c0>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f023 0207 	bic.w	r2, r3, #7
 8001a7e:	4965      	ldr	r1, [pc, #404]	; (8001c14 <HAL_RCC_ClockConfig+0x1c0>)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a86:	4b63      	ldr	r3, [pc, #396]	; (8001c14 <HAL_RCC_ClockConfig+0x1c0>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	683a      	ldr	r2, [r7, #0]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d001      	beq.n	8001a98 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e0b8      	b.n	8001c0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d020      	beq.n	8001ae6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d005      	beq.n	8001abc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ab0:	4b59      	ldr	r3, [pc, #356]	; (8001c18 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	4a58      	ldr	r2, [pc, #352]	; (8001c18 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001aba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0308 	and.w	r3, r3, #8
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d005      	beq.n	8001ad4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ac8:	4b53      	ldr	r3, [pc, #332]	; (8001c18 <HAL_RCC_ClockConfig+0x1c4>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	4a52      	ldr	r2, [pc, #328]	; (8001c18 <HAL_RCC_ClockConfig+0x1c4>)
 8001ace:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ad2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ad4:	4b50      	ldr	r3, [pc, #320]	; (8001c18 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	494d      	ldr	r1, [pc, #308]	; (8001c18 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d040      	beq.n	8001b74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d107      	bne.n	8001b0a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001afa:	4b47      	ldr	r3, [pc, #284]	; (8001c18 <HAL_RCC_ClockConfig+0x1c4>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d115      	bne.n	8001b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e07f      	b.n	8001c0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d107      	bne.n	8001b22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b12:	4b41      	ldr	r3, [pc, #260]	; (8001c18 <HAL_RCC_ClockConfig+0x1c4>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d109      	bne.n	8001b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e073      	b.n	8001c0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b22:	4b3d      	ldr	r3, [pc, #244]	; (8001c18 <HAL_RCC_ClockConfig+0x1c4>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e06b      	b.n	8001c0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b32:	4b39      	ldr	r3, [pc, #228]	; (8001c18 <HAL_RCC_ClockConfig+0x1c4>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f023 0203 	bic.w	r2, r3, #3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	4936      	ldr	r1, [pc, #216]	; (8001c18 <HAL_RCC_ClockConfig+0x1c4>)
 8001b40:	4313      	orrs	r3, r2
 8001b42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b44:	f7fe ffc6 	bl	8000ad4 <HAL_GetTick>
 8001b48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b4a:	e00a      	b.n	8001b62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b4c:	f7fe ffc2 	bl	8000ad4 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e053      	b.n	8001c0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b62:	4b2d      	ldr	r3, [pc, #180]	; (8001c18 <HAL_RCC_ClockConfig+0x1c4>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f003 020c 	and.w	r2, r3, #12
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d1eb      	bne.n	8001b4c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b74:	4b27      	ldr	r3, [pc, #156]	; (8001c14 <HAL_RCC_ClockConfig+0x1c0>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0307 	and.w	r3, r3, #7
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d210      	bcs.n	8001ba4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b82:	4b24      	ldr	r3, [pc, #144]	; (8001c14 <HAL_RCC_ClockConfig+0x1c0>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f023 0207 	bic.w	r2, r3, #7
 8001b8a:	4922      	ldr	r1, [pc, #136]	; (8001c14 <HAL_RCC_ClockConfig+0x1c0>)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b92:	4b20      	ldr	r3, [pc, #128]	; (8001c14 <HAL_RCC_ClockConfig+0x1c0>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d001      	beq.n	8001ba4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e032      	b.n	8001c0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0304 	and.w	r3, r3, #4
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d008      	beq.n	8001bc2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bb0:	4b19      	ldr	r3, [pc, #100]	; (8001c18 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	4916      	ldr	r1, [pc, #88]	; (8001c18 <HAL_RCC_ClockConfig+0x1c4>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0308 	and.w	r3, r3, #8
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d009      	beq.n	8001be2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bce:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	490e      	ldr	r1, [pc, #56]	; (8001c18 <HAL_RCC_ClockConfig+0x1c4>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001be2:	f000 f821 	bl	8001c28 <HAL_RCC_GetSysClockFreq>
 8001be6:	4601      	mov	r1, r0
 8001be8:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <HAL_RCC_ClockConfig+0x1c4>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	091b      	lsrs	r3, r3, #4
 8001bee:	f003 030f 	and.w	r3, r3, #15
 8001bf2:	4a0a      	ldr	r2, [pc, #40]	; (8001c1c <HAL_RCC_ClockConfig+0x1c8>)
 8001bf4:	5cd3      	ldrb	r3, [r2, r3]
 8001bf6:	fa21 f303 	lsr.w	r3, r1, r3
 8001bfa:	4a09      	ldr	r2, [pc, #36]	; (8001c20 <HAL_RCC_ClockConfig+0x1cc>)
 8001bfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bfe:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <HAL_RCC_ClockConfig+0x1d0>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7fe ff24 	bl	8000a50 <HAL_InitTick>

  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40022000 	.word	0x40022000
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	08004068 	.word	0x08004068
 8001c20:	20000000 	.word	0x20000000
 8001c24:	20000004 	.word	0x20000004

08001c28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c28:	b490      	push	{r4, r7}
 8001c2a:	b08a      	sub	sp, #40	; 0x28
 8001c2c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c2e:	4b2a      	ldr	r3, [pc, #168]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c30:	1d3c      	adds	r4, r7, #4
 8001c32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c38:	4b28      	ldr	r3, [pc, #160]	; (8001cdc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c3a:	881b      	ldrh	r3, [r3, #0]
 8001c3c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61fb      	str	r3, [r7, #28]
 8001c42:	2300      	movs	r3, #0
 8001c44:	61bb      	str	r3, [r7, #24]
 8001c46:	2300      	movs	r3, #0
 8001c48:	627b      	str	r3, [r7, #36]	; 0x24
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c52:	4b23      	ldr	r3, [pc, #140]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	f003 030c 	and.w	r3, r3, #12
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	d002      	beq.n	8001c68 <HAL_RCC_GetSysClockFreq+0x40>
 8001c62:	2b08      	cmp	r3, #8
 8001c64:	d003      	beq.n	8001c6e <HAL_RCC_GetSysClockFreq+0x46>
 8001c66:	e02d      	b.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c68:	4b1e      	ldr	r3, [pc, #120]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c6a:	623b      	str	r3, [r7, #32]
      break;
 8001c6c:	e02d      	b.n	8001cca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	0c9b      	lsrs	r3, r3, #18
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c7a:	4413      	add	r3, r2
 8001c7c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c80:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d013      	beq.n	8001cb4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c8c:	4b14      	ldr	r3, [pc, #80]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	0c5b      	lsrs	r3, r3, #17
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c9a:	4413      	add	r3, r2
 8001c9c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001ca0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	4a0f      	ldr	r2, [pc, #60]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ca6:	fb02 f203 	mul.w	r2, r2, r3
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8001cb2:	e004      	b.n	8001cbe <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	4a0c      	ldr	r2, [pc, #48]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cb8:	fb02 f303 	mul.w	r3, r2, r3
 8001cbc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc0:	623b      	str	r3, [r7, #32]
      break;
 8001cc2:	e002      	b.n	8001cca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cc4:	4b07      	ldr	r3, [pc, #28]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cc6:	623b      	str	r3, [r7, #32]
      break;
 8001cc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cca:	6a3b      	ldr	r3, [r7, #32]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3728      	adds	r7, #40	; 0x28
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bc90      	pop	{r4, r7}
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	08004054 	.word	0x08004054
 8001cdc:	08004064 	.word	0x08004064
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	007a1200 	.word	0x007a1200
 8001ce8:	003d0900 	.word	0x003d0900

08001cec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cf0:	4b02      	ldr	r3, [pc, #8]	; (8001cfc <HAL_RCC_GetHCLKFreq+0x10>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bc80      	pop	{r7}
 8001cfa:	4770      	bx	lr
 8001cfc:	20000000 	.word	0x20000000

08001d00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d04:	f7ff fff2 	bl	8001cec <HAL_RCC_GetHCLKFreq>
 8001d08:	4601      	mov	r1, r0
 8001d0a:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	0a1b      	lsrs	r3, r3, #8
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	4a03      	ldr	r2, [pc, #12]	; (8001d24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d16:	5cd3      	ldrb	r3, [r2, r3]
 8001d18:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40021000 	.word	0x40021000
 8001d24:	08004078 	.word	0x08004078

08001d28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d2c:	f7ff ffde 	bl	8001cec <HAL_RCC_GetHCLKFreq>
 8001d30:	4601      	mov	r1, r0
 8001d32:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	0adb      	lsrs	r3, r3, #11
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	4a03      	ldr	r2, [pc, #12]	; (8001d4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d3e:	5cd3      	ldrb	r3, [r2, r3]
 8001d40:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	08004078 	.word	0x08004078

08001d50 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d58:	4b0a      	ldr	r3, [pc, #40]	; (8001d84 <RCC_Delay+0x34>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a0a      	ldr	r2, [pc, #40]	; (8001d88 <RCC_Delay+0x38>)
 8001d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d62:	0a5b      	lsrs	r3, r3, #9
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	fb02 f303 	mul.w	r3, r2, r3
 8001d6a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d6c:	bf00      	nop
  }
  while (Delay --);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	1e5a      	subs	r2, r3, #1
 8001d72:	60fa      	str	r2, [r7, #12]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1f9      	bne.n	8001d6c <RCC_Delay+0x1c>
}
 8001d78:	bf00      	nop
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bc80      	pop	{r7}
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	20000000 	.word	0x20000000
 8001d88:	10624dd3 	.word	0x10624dd3

08001d8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e01d      	b.n	8001dda <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d106      	bne.n	8001db8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f7fe fbd8 	bl	8000568 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2202      	movs	r2, #2
 8001dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3304      	adds	r3, #4
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4610      	mov	r0, r2
 8001dcc:	f000 fa3a 	bl	8002244 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b085      	sub	sp, #20
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68da      	ldr	r2, [r3, #12]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f042 0201 	orr.w	r2, r2, #1
 8001df8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f003 0307 	and.w	r3, r3, #7
 8001e04:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2b06      	cmp	r3, #6
 8001e0a:	d007      	beq.n	8001e1c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f042 0201 	orr.w	r2, r2, #1
 8001e1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr

08001e28 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68da      	ldr	r2, [r3, #12]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 0201 	bic.w	r2, r2, #1
 8001e3e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6a1a      	ldr	r2, [r3, #32]
 8001e46:	f241 1311 	movw	r3, #4369	; 0x1111
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d10f      	bne.n	8001e70 <HAL_TIM_Base_Stop_IT+0x48>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6a1a      	ldr	r2, [r3, #32]
 8001e56:	f240 4344 	movw	r3, #1092	; 0x444
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d107      	bne.n	8001e70 <HAL_TIM_Base_Stop_IT+0x48>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 0201 	bic.w	r2, r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr

08001e7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d122      	bne.n	8001ed8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d11b      	bne.n	8001ed8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f06f 0202 	mvn.w	r2, #2
 8001ea8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2201      	movs	r2, #1
 8001eae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	f003 0303 	and.w	r3, r3, #3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f9a4 	bl	800220c <HAL_TIM_IC_CaptureCallback>
 8001ec4:	e005      	b.n	8001ed2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 f997 	bl	80021fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f000 f9a6 	bl	800221e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	f003 0304 	and.w	r3, r3, #4
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	d122      	bne.n	8001f2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	2b04      	cmp	r3, #4
 8001ef2:	d11b      	bne.n	8001f2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f06f 0204 	mvn.w	r2, #4
 8001efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2202      	movs	r2, #2
 8001f02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f97a 	bl	800220c <HAL_TIM_IC_CaptureCallback>
 8001f18:	e005      	b.n	8001f26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f96d 	bl	80021fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 f97c 	bl	800221e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	f003 0308 	and.w	r3, r3, #8
 8001f36:	2b08      	cmp	r3, #8
 8001f38:	d122      	bne.n	8001f80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	f003 0308 	and.w	r3, r3, #8
 8001f44:	2b08      	cmp	r3, #8
 8001f46:	d11b      	bne.n	8001f80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f06f 0208 	mvn.w	r2, #8
 8001f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2204      	movs	r2, #4
 8001f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	f003 0303 	and.w	r3, r3, #3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 f950 	bl	800220c <HAL_TIM_IC_CaptureCallback>
 8001f6c:	e005      	b.n	8001f7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f943 	bl	80021fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 f952 	bl	800221e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	f003 0310 	and.w	r3, r3, #16
 8001f8a:	2b10      	cmp	r3, #16
 8001f8c:	d122      	bne.n	8001fd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	f003 0310 	and.w	r3, r3, #16
 8001f98:	2b10      	cmp	r3, #16
 8001f9a:	d11b      	bne.n	8001fd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f06f 0210 	mvn.w	r2, #16
 8001fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2208      	movs	r2, #8
 8001faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f926 	bl	800220c <HAL_TIM_IC_CaptureCallback>
 8001fc0:	e005      	b.n	8001fce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 f919 	bl	80021fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 f928 	bl	800221e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d10e      	bne.n	8002000 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d107      	bne.n	8002000 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f06f 0201 	mvn.w	r2, #1
 8001ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7fe fa6d 	bl	80004da <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800200a:	2b80      	cmp	r3, #128	; 0x80
 800200c:	d10e      	bne.n	800202c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002018:	2b80      	cmp	r3, #128	; 0x80
 800201a:	d107      	bne.n	800202c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 fa51 	bl	80024ce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002036:	2b40      	cmp	r3, #64	; 0x40
 8002038:	d10e      	bne.n	8002058 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002044:	2b40      	cmp	r3, #64	; 0x40
 8002046:	d107      	bne.n	8002058 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f8ec 	bl	8002230 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	f003 0320 	and.w	r3, r3, #32
 8002062:	2b20      	cmp	r3, #32
 8002064:	d10e      	bne.n	8002084 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	f003 0320 	and.w	r3, r3, #32
 8002070:	2b20      	cmp	r3, #32
 8002072:	d107      	bne.n	8002084 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f06f 0220 	mvn.w	r2, #32
 800207c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 fa1c 	bl	80024bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002084:	bf00      	nop
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800209c:	2b01      	cmp	r3, #1
 800209e:	d101      	bne.n	80020a4 <HAL_TIM_ConfigClockSource+0x18>
 80020a0:	2302      	movs	r3, #2
 80020a2:	e0a6      	b.n	80021f2 <HAL_TIM_ConfigClockSource+0x166>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2202      	movs	r2, #2
 80020b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80020c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80020ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2b40      	cmp	r3, #64	; 0x40
 80020da:	d067      	beq.n	80021ac <HAL_TIM_ConfigClockSource+0x120>
 80020dc:	2b40      	cmp	r3, #64	; 0x40
 80020de:	d80b      	bhi.n	80020f8 <HAL_TIM_ConfigClockSource+0x6c>
 80020e0:	2b10      	cmp	r3, #16
 80020e2:	d073      	beq.n	80021cc <HAL_TIM_ConfigClockSource+0x140>
 80020e4:	2b10      	cmp	r3, #16
 80020e6:	d802      	bhi.n	80020ee <HAL_TIM_ConfigClockSource+0x62>
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d06f      	beq.n	80021cc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80020ec:	e078      	b.n	80021e0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80020ee:	2b20      	cmp	r3, #32
 80020f0:	d06c      	beq.n	80021cc <HAL_TIM_ConfigClockSource+0x140>
 80020f2:	2b30      	cmp	r3, #48	; 0x30
 80020f4:	d06a      	beq.n	80021cc <HAL_TIM_ConfigClockSource+0x140>
      break;
 80020f6:	e073      	b.n	80021e0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80020f8:	2b70      	cmp	r3, #112	; 0x70
 80020fa:	d00d      	beq.n	8002118 <HAL_TIM_ConfigClockSource+0x8c>
 80020fc:	2b70      	cmp	r3, #112	; 0x70
 80020fe:	d804      	bhi.n	800210a <HAL_TIM_ConfigClockSource+0x7e>
 8002100:	2b50      	cmp	r3, #80	; 0x50
 8002102:	d033      	beq.n	800216c <HAL_TIM_ConfigClockSource+0xe0>
 8002104:	2b60      	cmp	r3, #96	; 0x60
 8002106:	d041      	beq.n	800218c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002108:	e06a      	b.n	80021e0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800210a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800210e:	d066      	beq.n	80021de <HAL_TIM_ConfigClockSource+0x152>
 8002110:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002114:	d017      	beq.n	8002146 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002116:	e063      	b.n	80021e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6818      	ldr	r0, [r3, #0]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	6899      	ldr	r1, [r3, #8]
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f000 f965 	bl	80023f6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800213a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	609a      	str	r2, [r3, #8]
      break;
 8002144:	e04c      	b.n	80021e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6818      	ldr	r0, [r3, #0]
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	6899      	ldr	r1, [r3, #8]
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685a      	ldr	r2, [r3, #4]
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	f000 f94e 	bl	80023f6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002168:	609a      	str	r2, [r3, #8]
      break;
 800216a:	e039      	b.n	80021e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6818      	ldr	r0, [r3, #0]
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	6859      	ldr	r1, [r3, #4]
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	461a      	mov	r2, r3
 800217a:	f000 f8c5 	bl	8002308 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2150      	movs	r1, #80	; 0x50
 8002184:	4618      	mov	r0, r3
 8002186:	f000 f91c 	bl	80023c2 <TIM_ITRx_SetConfig>
      break;
 800218a:	e029      	b.n	80021e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6818      	ldr	r0, [r3, #0]
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	6859      	ldr	r1, [r3, #4]
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	461a      	mov	r2, r3
 800219a:	f000 f8e3 	bl	8002364 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2160      	movs	r1, #96	; 0x60
 80021a4:	4618      	mov	r0, r3
 80021a6:	f000 f90c 	bl	80023c2 <TIM_ITRx_SetConfig>
      break;
 80021aa:	e019      	b.n	80021e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6818      	ldr	r0, [r3, #0]
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	6859      	ldr	r1, [r3, #4]
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	461a      	mov	r2, r3
 80021ba:	f000 f8a5 	bl	8002308 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2140      	movs	r1, #64	; 0x40
 80021c4:	4618      	mov	r0, r3
 80021c6:	f000 f8fc 	bl	80023c2 <TIM_ITRx_SetConfig>
      break;
 80021ca:	e009      	b.n	80021e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4619      	mov	r1, r3
 80021d6:	4610      	mov	r0, r2
 80021d8:	f000 f8f3 	bl	80023c2 <TIM_ITRx_SetConfig>
      break;
 80021dc:	e000      	b.n	80021e0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80021de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b083      	sub	sp, #12
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr

0800220c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr

0800221e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800221e:	b480      	push	{r7}
 8002220:	b083      	sub	sp, #12
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002226:	bf00      	nop
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	bc80      	pop	{r7}
 800222e:	4770      	bx	lr

08002230 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	bc80      	pop	{r7}
 8002240:	4770      	bx	lr
	...

08002244 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a29      	ldr	r2, [pc, #164]	; (80022fc <TIM_Base_SetConfig+0xb8>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d00b      	beq.n	8002274 <TIM_Base_SetConfig+0x30>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002262:	d007      	beq.n	8002274 <TIM_Base_SetConfig+0x30>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a26      	ldr	r2, [pc, #152]	; (8002300 <TIM_Base_SetConfig+0xbc>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d003      	beq.n	8002274 <TIM_Base_SetConfig+0x30>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a25      	ldr	r2, [pc, #148]	; (8002304 <TIM_Base_SetConfig+0xc0>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d108      	bne.n	8002286 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800227a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	4313      	orrs	r3, r2
 8002284:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a1c      	ldr	r2, [pc, #112]	; (80022fc <TIM_Base_SetConfig+0xb8>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d00b      	beq.n	80022a6 <TIM_Base_SetConfig+0x62>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002294:	d007      	beq.n	80022a6 <TIM_Base_SetConfig+0x62>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a19      	ldr	r2, [pc, #100]	; (8002300 <TIM_Base_SetConfig+0xbc>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d003      	beq.n	80022a6 <TIM_Base_SetConfig+0x62>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a18      	ldr	r2, [pc, #96]	; (8002304 <TIM_Base_SetConfig+0xc0>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d108      	bne.n	80022b8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a07      	ldr	r2, [pc, #28]	; (80022fc <TIM_Base_SetConfig+0xb8>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d103      	bne.n	80022ec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	691a      	ldr	r2, [r3, #16]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	615a      	str	r2, [r3, #20]
}
 80022f2:	bf00      	nop
 80022f4:	3714      	adds	r7, #20
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bc80      	pop	{r7}
 80022fa:	4770      	bx	lr
 80022fc:	40012c00 	.word	0x40012c00
 8002300:	40000400 	.word	0x40000400
 8002304:	40000800 	.word	0x40000800

08002308 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002308:	b480      	push	{r7}
 800230a:	b087      	sub	sp, #28
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	f023 0201 	bic.w	r2, r3, #1
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002332:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	011b      	lsls	r3, r3, #4
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	4313      	orrs	r3, r2
 800233c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	f023 030a 	bic.w	r3, r3, #10
 8002344:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	4313      	orrs	r3, r2
 800234c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	621a      	str	r2, [r3, #32]
}
 800235a:	bf00      	nop
 800235c:	371c      	adds	r7, #28
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr

08002364 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002364:	b480      	push	{r7}
 8002366:	b087      	sub	sp, #28
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	f023 0210 	bic.w	r2, r3, #16
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800238e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	031b      	lsls	r3, r3, #12
 8002394:	697a      	ldr	r2, [r7, #20]
 8002396:	4313      	orrs	r3, r2
 8002398:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80023a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	011b      	lsls	r3, r3, #4
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	697a      	ldr	r2, [r7, #20]
 80023b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	621a      	str	r2, [r3, #32]
}
 80023b8:	bf00      	nop
 80023ba:	371c      	adds	r7, #28
 80023bc:	46bd      	mov	sp, r7
 80023be:	bc80      	pop	{r7}
 80023c0:	4770      	bx	lr

080023c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80023c2:	b480      	push	{r7}
 80023c4:	b085      	sub	sp, #20
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
 80023ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	4313      	orrs	r3, r2
 80023e0:	f043 0307 	orr.w	r3, r3, #7
 80023e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	609a      	str	r2, [r3, #8]
}
 80023ec:	bf00      	nop
 80023ee:	3714      	adds	r7, #20
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bc80      	pop	{r7}
 80023f4:	4770      	bx	lr

080023f6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b087      	sub	sp, #28
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	60f8      	str	r0, [r7, #12]
 80023fe:	60b9      	str	r1, [r7, #8]
 8002400:	607a      	str	r2, [r7, #4]
 8002402:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002410:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	021a      	lsls	r2, r3, #8
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	431a      	orrs	r2, r3
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	4313      	orrs	r3, r2
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	4313      	orrs	r3, r2
 8002422:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	609a      	str	r2, [r3, #8]
}
 800242a:	bf00      	nop
 800242c:	371c      	adds	r7, #28
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr

08002434 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002444:	2b01      	cmp	r3, #1
 8002446:	d101      	bne.n	800244c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002448:	2302      	movs	r3, #2
 800244a:	e032      	b.n	80024b2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2202      	movs	r2, #2
 8002458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002472:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	4313      	orrs	r3, r2
 800247c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002484:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	68ba      	ldr	r2, [r7, #8]
 800248c:	4313      	orrs	r3, r2
 800248e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68ba      	ldr	r2, [r7, #8]
 800249e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3714      	adds	r7, #20
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr

080024bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr

080024ce <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024d6:	bf00      	nop
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	bc80      	pop	{r7}
 80024de:	4770      	bx	lr

080024e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e03f      	b.n	8002572 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d106      	bne.n	800250c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7fe f852 	bl	80005b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2224      	movs	r2, #36	; 0x24
 8002510:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68da      	ldr	r2, [r3, #12]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002522:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 fb09 	bl	8002b3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	691a      	ldr	r2, [r3, #16]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002538:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	695a      	ldr	r2, [r3, #20]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002548:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68da      	ldr	r2, [r3, #12]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002558:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2220      	movs	r2, #32
 8002564:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2220      	movs	r2, #32
 800256c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
	...

0800257c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	4613      	mov	r3, r2
 8002588:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b20      	cmp	r3, #32
 8002594:	d153      	bne.n	800263e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d002      	beq.n	80025a2 <HAL_UART_Transmit_DMA+0x26>
 800259c:	88fb      	ldrh	r3, [r7, #6]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e04c      	b.n	8002640 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d101      	bne.n	80025b4 <HAL_UART_Transmit_DMA+0x38>
 80025b0:	2302      	movs	r3, #2
 80025b2:	e045      	b.n	8002640 <HAL_UART_Transmit_DMA+0xc4>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	88fa      	ldrh	r2, [r7, #6]
 80025c6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	88fa      	ldrh	r2, [r7, #6]
 80025cc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2221      	movs	r2, #33	; 0x21
 80025d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e0:	4a19      	ldr	r2, [pc, #100]	; (8002648 <HAL_UART_Transmit_DMA+0xcc>)
 80025e2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e8:	4a18      	ldr	r2, [pc, #96]	; (800264c <HAL_UART_Transmit_DMA+0xd0>)
 80025ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f0:	4a17      	ldr	r2, [pc, #92]	; (8002650 <HAL_UART_Transmit_DMA+0xd4>)
 80025f2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f8:	2200      	movs	r2, #0
 80025fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 80025fc:	f107 0308 	add.w	r3, r7, #8
 8002600:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	6819      	ldr	r1, [r3, #0]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	3304      	adds	r3, #4
 8002610:	461a      	mov	r2, r3
 8002612:	88fb      	ldrh	r3, [r7, #6]
 8002614:	f7fe fbf2 	bl	8000dfc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002620:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	695a      	ldr	r2, [r3, #20]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002638:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800263a:	2300      	movs	r3, #0
 800263c:	e000      	b.n	8002640 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800263e:	2302      	movs	r3, #2
  }
}
 8002640:	4618      	mov	r0, r3
 8002642:	3718      	adds	r7, #24
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	080028ff 	.word	0x080028ff
 800264c:	08002951 	.word	0x08002951
 8002650:	080029f1 	.word	0x080029f1

08002654 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	4613      	mov	r3, r2
 8002660:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b20      	cmp	r3, #32
 800266c:	d166      	bne.n	800273c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d002      	beq.n	800267a <HAL_UART_Receive_DMA+0x26>
 8002674:	88fb      	ldrh	r3, [r7, #6]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e05f      	b.n	800273e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002684:	2b01      	cmp	r3, #1
 8002686:	d101      	bne.n	800268c <HAL_UART_Receive_DMA+0x38>
 8002688:	2302      	movs	r3, #2
 800268a:	e058      	b.n	800273e <HAL_UART_Receive_DMA+0xea>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002694:	68ba      	ldr	r2, [r7, #8]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	88fa      	ldrh	r2, [r7, #6]
 800269e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2222      	movs	r2, #34	; 0x22
 80026aa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026b2:	4a25      	ldr	r2, [pc, #148]	; (8002748 <HAL_UART_Receive_DMA+0xf4>)
 80026b4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ba:	4a24      	ldr	r2, [pc, #144]	; (800274c <HAL_UART_Receive_DMA+0xf8>)
 80026bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c2:	4a23      	ldr	r2, [pc, #140]	; (8002750 <HAL_UART_Receive_DMA+0xfc>)
 80026c4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ca:	2200      	movs	r2, #0
 80026cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 80026ce:	f107 0308 	add.w	r3, r7, #8
 80026d2:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	3304      	adds	r3, #4
 80026de:	4619      	mov	r1, r3
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	88fb      	ldrh	r3, [r7, #6]
 80026e6:	f7fe fb89 	bl	8000dfc <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80026ea:	2300      	movs	r3, #0
 80026ec:	613b      	str	r3, [r7, #16]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	613b      	str	r3, [r7, #16]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	613b      	str	r3, [r7, #16]
 80026fe:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68da      	ldr	r2, [r3, #12]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002716:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	695a      	ldr	r2, [r3, #20]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f042 0201 	orr.w	r2, r2, #1
 8002726:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	695a      	ldr	r2, [r3, #20]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002736:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8002738:	2300      	movs	r3, #0
 800273a:	e000      	b.n	800273e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800273c:	2302      	movs	r3, #2
  }
}
 800273e:	4618      	mov	r0, r3
 8002740:	3718      	adds	r7, #24
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	0800296d 	.word	0x0800296d
 800274c:	080029d5 	.word	0x080029d5
 8002750:	080029f1 	.word	0x080029f1

08002754 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68da      	ldr	r2, [r3, #12]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800276a:	60da      	str	r2, [r3, #12]

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002776:	2b00      	cmp	r3, #0
 8002778:	d02a      	beq.n	80027d0 <HAL_UART_AbortTransmit_IT+0x7c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	695a      	ldr	r2, [r3, #20]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002788:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	2b00      	cmp	r3, #0
 8002790:	d013      	beq.n	80027ba <HAL_UART_AbortTransmit_IT+0x66>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	4a16      	ldr	r2, [pc, #88]	; (80027f0 <HAL_UART_AbortTransmit_IT+0x9c>)
 8002798:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fe fb8c 	bl	8000ebc <HAL_DMA_Abort_IT>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d01c      	beq.n	80027e4 <HAL_UART_AbortTransmit_IT+0x90>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80027b4:	4610      	mov	r0, r2
 80027b6:	4798      	blx	r3
 80027b8:	e014      	b.n	80027e4 <HAL_UART_AbortTransmit_IT+0x90>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0x00U;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	84da      	strh	r2, [r3, #38]	; 0x26

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2220      	movs	r2, #32
 80027c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f000 f886 	bl	80028da <HAL_UART_AbortTransmitCpltCallback>
 80027ce:	e009      	b.n	80027e4 <HAL_UART_AbortTransmit_IT+0x90>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0x00U;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2220      	movs	r2, #32
 80027da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 f87b 	bl	80028da <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	08002ae9 	.word	0x08002ae9

080027f4 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68da      	ldr	r2, [r3, #12]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800280a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	695a      	ldr	r2, [r3, #20]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 0201 	bic.w	r2, r2, #1
 800281a:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002826:	2b00      	cmp	r3, #0
 8002828:	d02a      	beq.n	8002880 <HAL_UART_AbortReceive_IT+0x8c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	695a      	ldr	r2, [r3, #20]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002838:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800283e:	2b00      	cmp	r3, #0
 8002840:	d013      	beq.n	800286a <HAL_UART_AbortReceive_IT+0x76>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002846:	4a16      	ldr	r2, [pc, #88]	; (80028a0 <HAL_UART_AbortReceive_IT+0xac>)
 8002848:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800284e:	4618      	mov	r0, r3
 8002850:	f7fe fb34 	bl	8000ebc <HAL_DMA_Abort_IT>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d01c      	beq.n	8002894 <HAL_UART_AbortReceive_IT+0xa0>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800285e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002864:	4610      	mov	r0, r2
 8002866:	4798      	blx	r3
 8002868:	e014      	b.n	8002894 <HAL_UART_AbortReceive_IT+0xa0>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2220      	movs	r2, #32
 8002874:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 f837 	bl	80028ec <HAL_UART_AbortReceiveCpltCallback>
 800287e:	e009      	b.n	8002894 <HAL_UART_AbortReceive_IT+0xa0>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2220      	movs	r2, #32
 800288a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f82c 	bl	80028ec <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	08002b13 	.word	0x08002b13

080028a4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bc80      	pop	{r7}
 80028b4:	4770      	bx	lr

080028b6 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b083      	sub	sp, #12
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr

080028c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bc80      	pop	{r7}
 80028d8:	4770      	bx	lr

080028da <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr

080028ec <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bc80      	pop	{r7}
 80028fc:	4770      	bx	lr

080028fe <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b084      	sub	sp, #16
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0320 	and.w	r3, r3, #32
 8002916:	2b00      	cmp	r3, #0
 8002918:	d113      	bne.n	8002942 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	695a      	ldr	r2, [r3, #20]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800292e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68da      	ldr	r2, [r3, #12]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800293e:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002940:	e002      	b.n	8002948 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f7fd fda6 	bl	8000494 <HAL_UART_TxCpltCallback>
}
 8002948:	bf00      	nop
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f7ff ffa0 	bl	80028a4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002964:	bf00      	nop
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002978:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0320 	and.w	r3, r3, #32
 8002984:	2b00      	cmp	r3, #0
 8002986:	d11e      	bne.n	80029c6 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68da      	ldr	r2, [r3, #12]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800299c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	695a      	ldr	r2, [r3, #20]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f022 0201 	bic.w	r2, r2, #1
 80029ac:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	695a      	ldr	r2, [r3, #20]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029bc:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2220      	movs	r2, #32
 80029c2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f7fd fd6f 	bl	80004aa <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80029cc:	bf00      	nop
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f7ff ff67 	bl	80028b6 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80029e8:	bf00      	nop
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80029f8:	2300      	movs	r3, #0
 80029fa:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a00:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	bf14      	ite	ne
 8002a10:	2301      	movne	r3, #1
 8002a12:	2300      	moveq	r3, #0
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b21      	cmp	r3, #33	; 0x21
 8002a22:	d108      	bne.n	8002a36 <UART_DMAError+0x46>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d005      	beq.n	8002a36 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002a30:	68b8      	ldr	r0, [r7, #8]
 8002a32:	f000 f827 	bl	8002a84 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	695b      	ldr	r3, [r3, #20]
 8002a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	bf14      	ite	ne
 8002a44:	2301      	movne	r3, #1
 8002a46:	2300      	moveq	r3, #0
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b22      	cmp	r3, #34	; 0x22
 8002a56:	d108      	bne.n	8002a6a <UART_DMAError+0x7a>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d005      	beq.n	8002a6a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	2200      	movs	r2, #0
 8002a62:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002a64:	68b8      	ldr	r0, [r7, #8]
 8002a66:	f000 f822 	bl	8002aae <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6e:	f043 0210 	orr.w	r2, r3, #16
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002a76:	68b8      	ldr	r0, [r7, #8]
 8002a78:	f7ff ff26 	bl	80028c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a7c:	bf00      	nop
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68da      	ldr	r2, [r3, #12]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002a9a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bc80      	pop	{r7}
 8002aac:	4770      	bx	lr

08002aae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b083      	sub	sp, #12
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68da      	ldr	r2, [r3, #12]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002ac4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	695a      	ldr	r2, [r3, #20]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 0201 	bic.w	r2, r2, #1
 8002ad4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2220      	movs	r2, #32
 8002ada:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002ade:	bf00      	nop
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bc80      	pop	{r7}
 8002ae6:	4770      	bx	lr

08002ae8 <UART_DMATxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0x00U;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2220      	movs	r2, #32
 8002b00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f7ff fee8 	bl	80028da <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b0a:	bf00      	nop
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b084      	sub	sp, #16
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1e:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2220      	movs	r2, #32
 8002b2a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f7ff fedc 	bl	80028ec <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b34:	bf00      	nop
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68da      	ldr	r2, [r3, #12]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	430a      	orrs	r2, r1
 8002b58:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	689a      	ldr	r2, [r3, #8]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	431a      	orrs	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002b76:	f023 030c 	bic.w	r3, r3, #12
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	6812      	ldr	r2, [r2, #0]
 8002b7e:	68f9      	ldr	r1, [r7, #12]
 8002b80:	430b      	orrs	r3, r1
 8002b82:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	699a      	ldr	r2, [r3, #24]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	430a      	orrs	r2, r1
 8002b98:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a52      	ldr	r2, [pc, #328]	; (8002ce8 <UART_SetConfig+0x1ac>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d14e      	bne.n	8002c42 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002ba4:	f7ff f8c0 	bl	8001d28 <HAL_RCC_GetPCLK2Freq>
 8002ba8:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002baa:	68ba      	ldr	r2, [r7, #8]
 8002bac:	4613      	mov	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	009a      	lsls	r2, r3, #2
 8002bb4:	441a      	add	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc0:	4a4a      	ldr	r2, [pc, #296]	; (8002cec <UART_SetConfig+0x1b0>)
 8002bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc6:	095b      	lsrs	r3, r3, #5
 8002bc8:	0119      	lsls	r1, r3, #4
 8002bca:	68ba      	ldr	r2, [r7, #8]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4413      	add	r3, r2
 8002bd2:	009a      	lsls	r2, r3, #2
 8002bd4:	441a      	add	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002be0:	4b42      	ldr	r3, [pc, #264]	; (8002cec <UART_SetConfig+0x1b0>)
 8002be2:	fba3 0302 	umull	r0, r3, r3, r2
 8002be6:	095b      	lsrs	r3, r3, #5
 8002be8:	2064      	movs	r0, #100	; 0x64
 8002bea:	fb00 f303 	mul.w	r3, r0, r3
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	011b      	lsls	r3, r3, #4
 8002bf2:	3332      	adds	r3, #50	; 0x32
 8002bf4:	4a3d      	ldr	r2, [pc, #244]	; (8002cec <UART_SetConfig+0x1b0>)
 8002bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfa:	095b      	lsrs	r3, r3, #5
 8002bfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c00:	4419      	add	r1, r3
 8002c02:	68ba      	ldr	r2, [r7, #8]
 8002c04:	4613      	mov	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	009a      	lsls	r2, r3, #2
 8002c0c:	441a      	add	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c18:	4b34      	ldr	r3, [pc, #208]	; (8002cec <UART_SetConfig+0x1b0>)
 8002c1a:	fba3 0302 	umull	r0, r3, r3, r2
 8002c1e:	095b      	lsrs	r3, r3, #5
 8002c20:	2064      	movs	r0, #100	; 0x64
 8002c22:	fb00 f303 	mul.w	r3, r0, r3
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	011b      	lsls	r3, r3, #4
 8002c2a:	3332      	adds	r3, #50	; 0x32
 8002c2c:	4a2f      	ldr	r2, [pc, #188]	; (8002cec <UART_SetConfig+0x1b0>)
 8002c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c32:	095b      	lsrs	r3, r3, #5
 8002c34:	f003 020f 	and.w	r2, r3, #15
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	440a      	add	r2, r1
 8002c3e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002c40:	e04d      	b.n	8002cde <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c42:	f7ff f85d 	bl	8001d00 <HAL_RCC_GetPCLK1Freq>
 8002c46:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4413      	add	r3, r2
 8002c50:	009a      	lsls	r2, r3, #2
 8002c52:	441a      	add	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c5e:	4a23      	ldr	r2, [pc, #140]	; (8002cec <UART_SetConfig+0x1b0>)
 8002c60:	fba2 2303 	umull	r2, r3, r2, r3
 8002c64:	095b      	lsrs	r3, r3, #5
 8002c66:	0119      	lsls	r1, r3, #4
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4413      	add	r3, r2
 8002c70:	009a      	lsls	r2, r3, #2
 8002c72:	441a      	add	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c7e:	4b1b      	ldr	r3, [pc, #108]	; (8002cec <UART_SetConfig+0x1b0>)
 8002c80:	fba3 0302 	umull	r0, r3, r3, r2
 8002c84:	095b      	lsrs	r3, r3, #5
 8002c86:	2064      	movs	r0, #100	; 0x64
 8002c88:	fb00 f303 	mul.w	r3, r0, r3
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	011b      	lsls	r3, r3, #4
 8002c90:	3332      	adds	r3, #50	; 0x32
 8002c92:	4a16      	ldr	r2, [pc, #88]	; (8002cec <UART_SetConfig+0x1b0>)
 8002c94:	fba2 2303 	umull	r2, r3, r2, r3
 8002c98:	095b      	lsrs	r3, r3, #5
 8002c9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c9e:	4419      	add	r1, r3
 8002ca0:	68ba      	ldr	r2, [r7, #8]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4413      	add	r3, r2
 8002ca8:	009a      	lsls	r2, r3, #2
 8002caa:	441a      	add	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cb6:	4b0d      	ldr	r3, [pc, #52]	; (8002cec <UART_SetConfig+0x1b0>)
 8002cb8:	fba3 0302 	umull	r0, r3, r3, r2
 8002cbc:	095b      	lsrs	r3, r3, #5
 8002cbe:	2064      	movs	r0, #100	; 0x64
 8002cc0:	fb00 f303 	mul.w	r3, r0, r3
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	011b      	lsls	r3, r3, #4
 8002cc8:	3332      	adds	r3, #50	; 0x32
 8002cca:	4a08      	ldr	r2, [pc, #32]	; (8002cec <UART_SetConfig+0x1b0>)
 8002ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd0:	095b      	lsrs	r3, r3, #5
 8002cd2:	f003 020f 	and.w	r2, r3, #15
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	440a      	add	r2, r1
 8002cdc:	609a      	str	r2, [r3, #8]
}
 8002cde:	bf00      	nop
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40013800 	.word	0x40013800
 8002cec:	51eb851f 	.word	0x51eb851f

08002cf0 <setup>:
//int* temp2;
bool transmit_complete_flag = IDLE_transmit;
bool receive_complete_flag = IDLE_receive;
bool receive_status = IDLE_receive;

void setup() {
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af02      	add	r7, sp, #8
	Serial.begin(&huart2, 23169, 34476, data_received2);
 8002cf6:	4b0a      	ldr	r3, [pc, #40]	; (8002d20 <setup+0x30>)
 8002cf8:	9300      	str	r3, [sp, #0]
 8002cfa:	f248 63ac 	movw	r3, #34476	; 0x86ac
 8002cfe:	f645 2281 	movw	r2, #23169	; 0x5a81
 8002d02:	4908      	ldr	r1, [pc, #32]	; (8002d24 <setup+0x34>)
 8002d04:	4808      	ldr	r0, [pc, #32]	; (8002d28 <setup+0x38>)
 8002d06:	f000 fc0a 	bl	800351e <_ZN8mySerial5beginEP20__UART_HandleTypeDefttPFvPhiE>
	//modbus1.begin(&huart3, modbus_received);
	modbus.begin(12345, 34567);
 8002d0a:	f248 7207 	movw	r2, #34567	; 0x8707
 8002d0e:	f243 0139 	movw	r1, #12345	; 0x3039
 8002d12:	4806      	ldr	r0, [pc, #24]	; (8002d2c <setup+0x3c>)
 8002d14:	f000 f8d8 	bl	8002ec8 <_ZN14modbus_handler5beginEtt>
}
 8002d18:	bf00      	nop
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	08002d81 	.word	0x08002d81
 8002d24:	200005b0 	.word	0x200005b0
 8002d28:	20000240 	.word	0x20000240
 8002d2c:	200001f4 	.word	0x200001f4

08002d30 <loop>:

void loop() {
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
	//Serial.looping2();
	//modbus1.looping();
	if(backup_length != 0 && receive_status == IDLE_receive) {
 8002d34:	4b0d      	ldr	r3, [pc, #52]	; (8002d6c <loop+0x3c>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d014      	beq.n	8002d66 <loop+0x36>
 8002d3c:	4b0c      	ldr	r3, [pc, #48]	; (8002d70 <loop+0x40>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	f083 0301 	eor.w	r3, r3, #1
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00d      	beq.n	8002d66 <loop+0x36>
		transmit_complete_flag = On_transmit;
 8002d4a:	4b0a      	ldr	r3, [pc, #40]	; (8002d74 <loop+0x44>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	701a      	strb	r2, [r3, #0]
		uart_send(&huart2, backup_buffer, backup_length);
 8002d50:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <loop+0x3c>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	461a      	mov	r2, r3
 8002d58:	4907      	ldr	r1, [pc, #28]	; (8002d78 <loop+0x48>)
 8002d5a:	4808      	ldr	r0, [pc, #32]	; (8002d7c <loop+0x4c>)
 8002d5c:	f7ff fc0e 	bl	800257c <HAL_UART_Transmit_DMA>
		backup_length = 0;
 8002d60:	4b02      	ldr	r3, [pc, #8]	; (8002d6c <loop+0x3c>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	601a      	str	r2, [r3, #0]
	}
}
 8002d66:	bf00      	nop
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	200005f0 	.word	0x200005f0
 8002d70:	20000095 	.word	0x20000095
 8002d74:	20000009 	.word	0x20000009
 8002d78:	200004f0 	.word	0x200004f0
 8002d7c:	200005b0 	.word	0x200005b0

08002d80 <data_received2>:

void data_received2(byte* data_buffer, int length) { //lora
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002d8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d8e:	4807      	ldr	r0, [pc, #28]	; (8002dac <data_received2+0x2c>)
 8002d90:	f7fe fbb0 	bl	80014f4 <HAL_GPIO_TogglePin>
	receive_complete_flag = IDLE_receive;
 8002d94:	4b06      	ldr	r3, [pc, #24]	; (8002db0 <data_received2+0x30>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	701a      	strb	r2, [r3, #0]
	//modbus1.request_handler1(data_buffer, length);
	modbus.request_packet_handler(data_buffer, length);
 8002d9a:	683a      	ldr	r2, [r7, #0]
 8002d9c:	6879      	ldr	r1, [r7, #4]
 8002d9e:	4805      	ldr	r0, [pc, #20]	; (8002db4 <data_received2+0x34>)
 8002da0:	f000 f8b4 	bl	8002f0c <_ZN14modbus_handler22request_packet_handlerEPhi>
}
 8002da4:	bf00      	nop
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40011000 	.word	0x40011000
 8002db0:	20000094 	.word	0x20000094
 8002db4:	200001f4 	.word	0x200001f4

08002db8 <UART_CallBack>:
//void modbus_received(byte* data_buffer, int length) {
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
//    Serial.send_packet(12345, 34567, data_buffer, length);
//}

void UART_CallBack(UART_HandleTypeDef *huart) {
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a09      	ldr	r2, [pc, #36]	; (8002dec <UART_CallBack+0x34>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d103      	bne.n	8002dd2 <UART_CallBack+0x1a>
		Serial.buffer_overflow();
 8002dca:	4809      	ldr	r0, [pc, #36]	; (8002df0 <UART_CallBack+0x38>)
 8002dcc:	f000 fce0 	bl	8003790 <_ZN8mySerial15buffer_overflowEv>
	else if(huart->Instance == USART3){

		modbus.receive_handler(huart);
		//modbus1.buffer_overflow();
	}		
}
 8002dd0:	e008      	b.n	8002de4 <UART_CallBack+0x2c>
	else if(huart->Instance == USART3){
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a07      	ldr	r2, [pc, #28]	; (8002df4 <UART_CallBack+0x3c>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d103      	bne.n	8002de4 <UART_CallBack+0x2c>
		modbus.receive_handler(huart);
 8002ddc:	6879      	ldr	r1, [r7, #4]
 8002dde:	4806      	ldr	r0, [pc, #24]	; (8002df8 <UART_CallBack+0x40>)
 8002de0:	f000 f952 	bl	8003088 <_ZN14modbus_handler15receive_handlerEP20__UART_HandleTypeDef>
}
 8002de4:	bf00      	nop
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40004400 	.word	0x40004400
 8002df0:	20000240 	.word	0x20000240
 8002df4:	40004800 	.word	0x40004800
 8002df8:	200001f4 	.word	0x200001f4

08002dfc <GPIO_Interrupt_Callback>:
void GPIO_Interrupt_Callback(uint16_t pin){
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	4603      	mov	r3, r0
 8002e04:	80fb      	strh	r3, [r7, #6]
	if(pin == GPIO_PIN_7) {//RISING
 8002e06:	88fb      	ldrh	r3, [r7, #6]
 8002e08:	2b80      	cmp	r3, #128	; 0x80
 8002e0a:	d10d      	bne.n	8002e28 <GPIO_Interrupt_Callback+0x2c>
		if(transmit_complete_flag == On_transmit) {
 8002e0c:	4b08      	ldr	r3, [pc, #32]	; (8002e30 <GPIO_Interrupt_Callback+0x34>)
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	f083 0301 	eor.w	r3, r3, #1
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <GPIO_Interrupt_Callback+0x26>
			transmit_complete_flag = IDLE_transmit;
 8002e1a:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <GPIO_Interrupt_Callback+0x34>)
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	701a      	strb	r2, [r3, #0]
			// confuse if On_transmit before falling receive falling edge
		}else{
			receive_status = On_received;
		}
	}*/
}
 8002e20:	e002      	b.n	8002e28 <GPIO_Interrupt_Callback+0x2c>
			Serial.looping2();
 8002e22:	4804      	ldr	r0, [pc, #16]	; (8002e34 <GPIO_Interrupt_Callback+0x38>)
 8002e24:	f000 fbae 	bl	8003584 <_ZN8mySerial8looping2Ev>
}
 8002e28:	bf00      	nop
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	20000009 	.word	0x20000009
 8002e34:	20000240 	.word	0x20000240

08002e38 <_ZN6modbusC1Ev>:
#include "modbus.h"

modbus::modbus()
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	711a      	strb	r2, [r3, #4]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	715a      	strb	r2, [r3, #5]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	719a      	strb	r2, [r3, #6]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2203      	movs	r2, #3
 8002e56:	729a      	strb	r2, [r3, #10]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	761a      	strb	r2, [r3, #24]
{
	
}
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4618      	mov	r0, r3
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bc80      	pop	{r7}
 8002e68:	4770      	bx	lr
	...

08002e6c <_Z41__static_initialization_and_destruction_0ii>:
void modbus::get_data(byte* temp1, int* temp2)
{
	temp1 = data_buffer;
	temp2 = &temper_length;
}
modbus modbus1;
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d107      	bne.n	8002e8c <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d102      	bne.n	8002e8c <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002e86:	4803      	ldr	r0, [pc, #12]	; (8002e94 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8002e88:	f7ff ffd6 	bl	8002e38 <_ZN6modbusC1Ev>
 8002e8c:	bf00      	nop
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	20000098 	.word	0x20000098

08002e98 <_GLOBAL__sub_I__ZN6modbusC2Ev>:
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002ea0:	2001      	movs	r0, #1
 8002ea2:	f7ff ffe3 	bl	8002e6c <_Z41__static_initialization_and_destruction_0ii>
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <_ZN14modbus_handlerC1Ev>:
#include "modbus_handler.h"

modbus_handler::modbus_handler()
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	711a      	strb	r2, [r3, #4]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	719a      	strb	r2, [r3, #6]
{

}
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bc80      	pop	{r7}
 8002ec6:	4770      	bx	lr

08002ec8 <_ZN14modbus_handler5beginEtt>:
void modbus_handler::begin(uint16_t header, uint16_t footer)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	807b      	strh	r3, [r7, #2]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	803b      	strh	r3, [r7, #0]
	header_chunk[0] = header >> 8 & 0xff;
 8002ed8:	887b      	ldrh	r3, [r7, #2]
 8002eda:	0a1b      	lsrs	r3, r3, #8
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	b2da      	uxtb	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	701a      	strb	r2, [r3, #0]
	header_chunk[1] = header & 0xff;
 8002ee4:	887b      	ldrh	r3, [r7, #2]
 8002ee6:	b2da      	uxtb	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	705a      	strb	r2, [r3, #1]
	footer_chunk[0] = footer >> 8 & 0xff;
 8002eec:	883b      	ldrh	r3, [r7, #0]
 8002eee:	0a1b      	lsrs	r3, r3, #8
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	b2da      	uxtb	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	709a      	strb	r2, [r3, #2]
	footer_chunk[1] = footer & 0xff;
 8002ef8:	883b      	ldrh	r3, [r7, #0]
 8002efa:	b2da      	uxtb	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	70da      	strb	r2, [r3, #3]
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bc80      	pop	{r7}
 8002f08:	4770      	bx	lr
	...

08002f0c <_ZN14modbus_handler22request_packet_handlerEPhi>:

void modbus_handler::request_packet_handler(byte* data_packet, int length)
{
 8002f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f0e:	b087      	sub	sp, #28
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
    number_of_request = data_packet[0];
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	781a      	ldrb	r2, [r3, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	71da      	strb	r2, [r3, #7]
    array_of_request = new request_type[number_of_request];
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	79db      	ldrb	r3, [r3, #7]
 8002f24:	461c      	mov	r4, r3
 8002f26:	4b54      	ldr	r3, [pc, #336]	; (8003078 <_ZN14modbus_handler22request_packet_handlerEPhi+0x16c>)
 8002f28:	429c      	cmp	r4, r3
 8002f2a:	d805      	bhi.n	8002f38 <_ZN14modbus_handler22request_packet_handlerEPhi+0x2c>
 8002f2c:	4623      	mov	r3, r4
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4423      	add	r3, r4
 8002f32:	015a      	lsls	r2, r3, #5
 8002f34:	4413      	add	r3, r2
 8002f36:	e001      	b.n	8002f3c <_ZN14modbus_handler22request_packet_handlerEPhi+0x30>
 8002f38:	f04f 33ff 	mov.w	r3, #4294967295
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f000 ff0d 	bl	8003d5c <_Znaj>
 8002f42:	4603      	mov	r3, r0
 8002f44:	461e      	mov	r6, r3
 8002f46:	4632      	mov	r2, r6
 8002f48:	1e63      	subs	r3, r4, #1
 8002f4a:	461c      	mov	r4, r3
 8002f4c:	4615      	mov	r5, r2
 8002f4e:	2c00      	cmp	r4, #0
 8002f50:	db05      	blt.n	8002f5e <_ZN14modbus_handler22request_packet_handlerEPhi+0x52>
 8002f52:	4628      	mov	r0, r5
 8002f54:	f000 fc46 	bl	80037e4 <_ZN12request_typeC1Ev>
 8002f58:	35a5      	adds	r5, #165	; 0xa5
 8002f5a:	3c01      	subs	r4, #1
 8002f5c:	e7f7      	b.n	8002f4e <_ZN14modbus_handler22request_packet_handlerEPhi+0x42>
 8002f5e:	4b47      	ldr	r3, [pc, #284]	; (800307c <_ZN14modbus_handler22request_packet_handlerEPhi+0x170>)
 8002f60:	601e      	str	r6, [r3, #0]
    byte pos_pointer = 1;
 8002f62:	2301      	movs	r3, #1
 8002f64:	75fb      	strb	r3, [r7, #23]
    for(byte i = 0; i < number_of_request; i++){
 8002f66:	2300      	movs	r3, #0
 8002f68:	75bb      	strb	r3, [r7, #22]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	79db      	ldrb	r3, [r3, #7]
 8002f6e:	7dba      	ldrb	r2, [r7, #22]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d22b      	bcs.n	8002fcc <_ZN14modbus_handler22request_packet_handlerEPhi+0xc0>
        array_of_request[i].begin_configure(&data_packet[pos_pointer+1], data_packet[pos_pointer]);
 8002f74:	4b41      	ldr	r3, [pc, #260]	; (800307c <_ZN14modbus_handler22request_packet_handlerEPhi+0x170>)
 8002f76:	6819      	ldr	r1, [r3, #0]
 8002f78:	7dba      	ldrb	r2, [r7, #22]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	4413      	add	r3, r2
 8002f80:	015a      	lsls	r2, r3, #5
 8002f82:	4413      	add	r3, r2
 8002f84:	18c8      	adds	r0, r1, r3
 8002f86:	7dfb      	ldrb	r3, [r7, #23]
 8002f88:	3301      	adds	r3, #1
 8002f8a:	68ba      	ldr	r2, [r7, #8]
 8002f8c:	18d1      	adds	r1, r2, r3
 8002f8e:	7dfb      	ldrb	r3, [r7, #23]
 8002f90:	68ba      	ldr	r2, [r7, #8]
 8002f92:	4413      	add	r3, r2
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	461a      	mov	r2, r3
 8002f98:	f000 fc32 	bl	8003800 <_ZN12request_type15begin_configureEPhi>
        array_of_request[i].request_number = i;
 8002f9c:	4b37      	ldr	r3, [pc, #220]	; (800307c <_ZN14modbus_handler22request_packet_handlerEPhi+0x170>)
 8002f9e:	6819      	ldr	r1, [r3, #0]
 8002fa0:	7dba      	ldrb	r2, [r7, #22]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4413      	add	r3, r2
 8002fa8:	015a      	lsls	r2, r3, #5
 8002faa:	4413      	add	r3, r2
 8002fac:	440b      	add	r3, r1
 8002fae:	7dba      	ldrb	r2, [r7, #22]
 8002fb0:	711a      	strb	r2, [r3, #4]
        pos_pointer += data_packet[pos_pointer]+1;
 8002fb2:	7dfb      	ldrb	r3, [r7, #23]
 8002fb4:	68ba      	ldr	r2, [r7, #8]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	781a      	ldrb	r2, [r3, #0]
 8002fba:	7dfb      	ldrb	r3, [r7, #23]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	75fb      	strb	r3, [r7, #23]
    for(byte i = 0; i < number_of_request; i++){
 8002fc4:	7dbb      	ldrb	r3, [r7, #22]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	75bb      	strb	r3, [r7, #22]
 8002fca:	e7ce      	b.n	8002f6a <_ZN14modbus_handler22request_packet_handlerEPhi+0x5e>
    }
    //request first element
    current_request_number = 0;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	715a      	strb	r2, [r3, #5]
    uart_dma(&huart3, array_of_request[current_request_number].response_packet, array_of_request[current_request_number].response_length);
 8002fd2:	4b2a      	ldr	r3, [pc, #168]	; (800307c <_ZN14modbus_handler22request_packet_handlerEPhi+0x170>)
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	795b      	ldrb	r3, [r3, #5]
 8002fda:	4619      	mov	r1, r3
 8002fdc:	460b      	mov	r3, r1
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	0159      	lsls	r1, r3, #5
 8002fe4:	440b      	add	r3, r1
 8002fe6:	4413      	add	r3, r2
 8002fe8:	f103 0023 	add.w	r0, r3, #35	; 0x23
 8002fec:	4b23      	ldr	r3, [pc, #140]	; (800307c <_ZN14modbus_handler22request_packet_handlerEPhi+0x170>)
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	795b      	ldrb	r3, [r3, #5]
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	440b      	add	r3, r1
 8002ffc:	0159      	lsls	r1, r3, #5
 8002ffe:	440b      	add	r3, r1
 8003000:	4413      	add	r3, r2
 8003002:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8003006:	b29b      	uxth	r3, r3
 8003008:	461a      	mov	r2, r3
 800300a:	4601      	mov	r1, r0
 800300c:	481c      	ldr	r0, [pc, #112]	; (8003080 <_ZN14modbus_handler22request_packet_handlerEPhi+0x174>)
 800300e:	f7ff fb21 	bl	8002654 <HAL_UART_Receive_DMA>
    uart_send(&huart3, array_of_request[current_request_number].request_packet, array_of_request[current_request_number].request_length);
 8003012:	4b1a      	ldr	r3, [pc, #104]	; (800307c <_ZN14modbus_handler22request_packet_handlerEPhi+0x170>)
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	795b      	ldrb	r3, [r3, #5]
 800301a:	4619      	mov	r1, r3
 800301c:	460b      	mov	r3, r1
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	440b      	add	r3, r1
 8003022:	0159      	lsls	r1, r3, #5
 8003024:	440b      	add	r3, r1
 8003026:	4413      	add	r3, r2
 8003028:	1d58      	adds	r0, r3, #5
 800302a:	4b14      	ldr	r3, [pc, #80]	; (800307c <_ZN14modbus_handler22request_packet_handlerEPhi+0x170>)
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	795b      	ldrb	r3, [r3, #5]
 8003032:	4619      	mov	r1, r3
 8003034:	460b      	mov	r3, r1
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	0159      	lsls	r1, r3, #5
 800303c:	440b      	add	r3, r1
 800303e:	4413      	add	r3, r2
 8003040:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 8003044:	b29b      	uxth	r3, r3
 8003046:	461a      	mov	r2, r3
 8003048:	4601      	mov	r1, r0
 800304a:	480d      	ldr	r0, [pc, #52]	; (8003080 <_ZN14modbus_handler22request_packet_handlerEPhi+0x174>)
 800304c:	f7ff fa96 	bl	800257c <HAL_UART_Transmit_DMA>
    TIM2->CNT = 0;
 8003050:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003054:	2200      	movs	r2, #0
 8003056:	625a      	str	r2, [r3, #36]	; 0x24
    TIM2->ARR = 49999;
 8003058:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800305c:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8003060:	62da      	str	r2, [r3, #44]	; 0x2c
    first_start = 2;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2202      	movs	r2, #2
 8003066:	711a      	strb	r2, [r3, #4]
    start_timer(&htim2);
 8003068:	4806      	ldr	r0, [pc, #24]	; (8003084 <_ZN14modbus_handler22request_packet_handlerEPhi+0x178>)
 800306a:	f7fe feba 	bl	8001de2 <HAL_TIM_Base_Start_IT>
}
 800306e:	bf00      	nop
 8003070:	371c      	adds	r7, #28
 8003072:	46bd      	mov	sp, r7
 8003074:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003076:	bf00      	nop
 8003078:	00c6980c 	.word	0x00c6980c
 800307c:	20000090 	.word	0x20000090
 8003080:	2000041c 	.word	0x2000041c
 8003084:	20000570 	.word	0x20000570

08003088 <_ZN14modbus_handler15receive_handlerEP20__UART_HandleTypeDef>:

void modbus_handler::receive_handler(UART_HandleTypeDef *huart)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
	HAL_UART_AbortReceive_IT(huart);
 8003092:	6838      	ldr	r0, [r7, #0]
 8003094:	f7ff fbae 	bl	80027f4 <HAL_UART_AbortReceive_IT>
	array_of_request[current_request_number].is_data_received = true;
 8003098:	4b2b      	ldr	r3, [pc, #172]	; (8003148 <_ZN14modbus_handler15receive_handlerEP20__UART_HandleTypeDef+0xc0>)
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	795b      	ldrb	r3, [r3, #5]
 80030a0:	4619      	mov	r1, r3
 80030a2:	460b      	mov	r3, r1
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	440b      	add	r3, r1
 80030a8:	0159      	lsls	r1, r3, #5
 80030aa:	440b      	add	r3, r1
 80030ac:	4413      	add	r3, r2
 80030ae:	2201      	movs	r2, #1
 80030b0:	709a      	strb	r2, [r3, #2]
    if (current_request_number < number_of_request - 1)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	795b      	ldrb	r3, [r3, #5]
 80030b6:	461a      	mov	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	79db      	ldrb	r3, [r3, #7]
 80030bc:	3b01      	subs	r3, #1
 80030be:	429a      	cmp	r2, r3
 80030c0:	da38      	bge.n	8003134 <_ZN14modbus_handler15receive_handlerEP20__UART_HandleTypeDef+0xac>
    {

    	stop_timer(&htim2);
 80030c2:	4822      	ldr	r0, [pc, #136]	; (800314c <_ZN14modbus_handler15receive_handlerEP20__UART_HandleTypeDef+0xc4>)
 80030c4:	f7fe feb0 	bl	8001e28 <HAL_TIM_Base_Stop_IT>

        //request the next one
        current_request_number++;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	795b      	ldrb	r3, [r3, #5]
 80030cc:	3301      	adds	r3, #1
 80030ce:	b2da      	uxtb	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	715a      	strb	r2, [r3, #5]
        uart_dma(&huart3, array_of_request[current_request_number].response_packet, array_of_request[current_request_number].response_length);
 80030d4:	4b1c      	ldr	r3, [pc, #112]	; (8003148 <_ZN14modbus_handler15receive_handlerEP20__UART_HandleTypeDef+0xc0>)
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	795b      	ldrb	r3, [r3, #5]
 80030dc:	4619      	mov	r1, r3
 80030de:	460b      	mov	r3, r1
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	440b      	add	r3, r1
 80030e4:	0159      	lsls	r1, r3, #5
 80030e6:	440b      	add	r3, r1
 80030e8:	4413      	add	r3, r2
 80030ea:	f103 0023 	add.w	r0, r3, #35	; 0x23
 80030ee:	4b16      	ldr	r3, [pc, #88]	; (8003148 <_ZN14modbus_handler15receive_handlerEP20__UART_HandleTypeDef+0xc0>)
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	795b      	ldrb	r3, [r3, #5]
 80030f6:	4619      	mov	r1, r3
 80030f8:	460b      	mov	r3, r1
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	440b      	add	r3, r1
 80030fe:	0159      	lsls	r1, r3, #5
 8003100:	440b      	add	r3, r1
 8003102:	4413      	add	r3, r2
 8003104:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8003108:	b29b      	uxth	r3, r3
 800310a:	461a      	mov	r2, r3
 800310c:	4601      	mov	r1, r0
 800310e:	4810      	ldr	r0, [pc, #64]	; (8003150 <_ZN14modbus_handler15receive_handlerEP20__UART_HandleTypeDef+0xc8>)
 8003110:	f7ff faa0 	bl	8002654 <HAL_UART_Receive_DMA>
        //uart_send(&huart3, array_of_request[current_request_number].request_packet, array_of_request[current_request_number].request_length);
        TIM2->CNT = 0;
 8003114:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003118:	2200      	movs	r2, #0
 800311a:	625a      	str	r2, [r3, #36]	; 0x24
		TIM2->ARR = 49999;
 800311c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003120:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8003124:	62da      	str	r2, [r3, #44]	; 0x2c
		first_start = 2;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2202      	movs	r2, #2
 800312a:	711a      	strb	r2, [r3, #4]
		start_timer(&htim2); //start timer for next request
 800312c:	4807      	ldr	r0, [pc, #28]	; (800314c <_ZN14modbus_handler15receive_handlerEP20__UART_HandleTypeDef+0xc4>)
 800312e:	f7fe fe58 	bl	8001de2 <HAL_TIM_Base_Start_IT>
    }else //done
    {
    	stop_timer(&htim2);
        package_data();
    }
}
 8003132:	e005      	b.n	8003140 <_ZN14modbus_handler15receive_handlerEP20__UART_HandleTypeDef+0xb8>
    	stop_timer(&htim2);
 8003134:	4805      	ldr	r0, [pc, #20]	; (800314c <_ZN14modbus_handler15receive_handlerEP20__UART_HandleTypeDef+0xc4>)
 8003136:	f7fe fe77 	bl	8001e28 <HAL_TIM_Base_Stop_IT>
        package_data();
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f80a 	bl	8003154 <_ZN14modbus_handler12package_dataEv>
}
 8003140:	bf00      	nop
 8003142:	3708      	adds	r7, #8
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	20000090 	.word	0x20000090
 800314c:	20000570 	.word	0x20000570
 8003150:	2000041c 	.word	0x2000041c

08003154 <_ZN14modbus_handler12package_dataEv>:
void modbus_handler::package_data()
{
 8003154:	b590      	push	{r4, r7, lr}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
	total_byte = 0;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	719a      	strb	r2, [r3, #6]
	byte current_pos = 5;
 8003162:	2305      	movs	r3, #5
 8003164:	73fb      	strb	r3, [r7, #15]
	byte total_valid_request = 0;
 8003166:	2300      	movs	r3, #0
 8003168:	73bb      	strb	r3, [r7, #14]
	for(byte i = 0; i < number_of_request; i++){
 800316a:	2300      	movs	r3, #0
 800316c:	737b      	strb	r3, [r7, #13]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	79db      	ldrb	r3, [r3, #7]
 8003172:	7b7a      	ldrb	r2, [r7, #13]
 8003174:	429a      	cmp	r2, r3
 8003176:	d25b      	bcs.n	8003230 <_ZN14modbus_handler12package_dataEv+0xdc>
		if(array_of_request[i].is_data_valid()) {
 8003178:	4b5d      	ldr	r3, [pc, #372]	; (80032f0 <_ZN14modbus_handler12package_dataEv+0x19c>)
 800317a:	6819      	ldr	r1, [r3, #0]
 800317c:	7b7a      	ldrb	r2, [r7, #13]
 800317e:	4613      	mov	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	015a      	lsls	r2, r3, #5
 8003186:	4413      	add	r3, r2
 8003188:	440b      	add	r3, r1
 800318a:	4618      	mov	r0, r3
 800318c:	f000 fdc2 	bl	8003d14 <_ZN12request_type13is_data_validEv>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d048      	beq.n	8003228 <_ZN14modbus_handler12package_dataEv+0xd4>
			array_of_request[i].packet_encoding();
 8003196:	4b56      	ldr	r3, [pc, #344]	; (80032f0 <_ZN14modbus_handler12package_dataEv+0x19c>)
 8003198:	6819      	ldr	r1, [r3, #0]
 800319a:	7b7a      	ldrb	r2, [r7, #13]
 800319c:	4613      	mov	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4413      	add	r3, r2
 80031a2:	015a      	lsls	r2, r3, #5
 80031a4:	4413      	add	r3, r2
 80031a6:	440b      	add	r3, r1
 80031a8:	4618      	mov	r0, r3
 80031aa:	f000 fb89 	bl	80038c0 <_ZN12request_type15packet_encodingEv>
			memcpy(&reply_packet[current_pos], array_of_request[i].encoded_packet, array_of_request[i].encode_length);
 80031ae:	7bfb      	ldrb	r3, [r7, #15]
 80031b0:	3308      	adds	r3, #8
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	18d0      	adds	r0, r2, r3
 80031b6:	4b4e      	ldr	r3, [pc, #312]	; (80032f0 <_ZN14modbus_handler12package_dataEv+0x19c>)
 80031b8:	6819      	ldr	r1, [r3, #0]
 80031ba:	7b7a      	ldrb	r2, [r7, #13]
 80031bc:	4613      	mov	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	015a      	lsls	r2, r3, #5
 80031c4:	4413      	add	r3, r2
 80031c6:	440b      	add	r3, r1
 80031c8:	f103 0463 	add.w	r4, r3, #99	; 0x63
 80031cc:	4b48      	ldr	r3, [pc, #288]	; (80032f0 <_ZN14modbus_handler12package_dataEv+0x19c>)
 80031ce:	6819      	ldr	r1, [r3, #0]
 80031d0:	7b7a      	ldrb	r2, [r7, #13]
 80031d2:	4613      	mov	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	4413      	add	r3, r2
 80031d8:	015a      	lsls	r2, r3, #5
 80031da:	4413      	add	r3, r2
 80031dc:	440b      	add	r3, r1
 80031de:	78db      	ldrb	r3, [r3, #3]
 80031e0:	461a      	mov	r2, r3
 80031e2:	4621      	mov	r1, r4
 80031e4:	f000 fe1a 	bl	8003e1c <memcpy>
			current_pos += array_of_request[i].encode_length;
 80031e8:	4b41      	ldr	r3, [pc, #260]	; (80032f0 <_ZN14modbus_handler12package_dataEv+0x19c>)
 80031ea:	6819      	ldr	r1, [r3, #0]
 80031ec:	7b7a      	ldrb	r2, [r7, #13]
 80031ee:	4613      	mov	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4413      	add	r3, r2
 80031f4:	015a      	lsls	r2, r3, #5
 80031f6:	4413      	add	r3, r2
 80031f8:	440b      	add	r3, r1
 80031fa:	78da      	ldrb	r2, [r3, #3]
 80031fc:	7bfb      	ldrb	r3, [r7, #15]
 80031fe:	4413      	add	r3, r2
 8003200:	73fb      	strb	r3, [r7, #15]
			total_byte += array_of_request[i].encode_length;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	7999      	ldrb	r1, [r3, #6]
 8003206:	4b3a      	ldr	r3, [pc, #232]	; (80032f0 <_ZN14modbus_handler12package_dataEv+0x19c>)
 8003208:	6818      	ldr	r0, [r3, #0]
 800320a:	7b7a      	ldrb	r2, [r7, #13]
 800320c:	4613      	mov	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	015a      	lsls	r2, r3, #5
 8003214:	4413      	add	r3, r2
 8003216:	4403      	add	r3, r0
 8003218:	78db      	ldrb	r3, [r3, #3]
 800321a:	440b      	add	r3, r1
 800321c:	b2da      	uxtb	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	719a      	strb	r2, [r3, #6]
			total_valid_request++;
 8003222:	7bbb      	ldrb	r3, [r7, #14]
 8003224:	3301      	adds	r3, #1
 8003226:	73bb      	strb	r3, [r7, #14]
	for(byte i = 0; i < number_of_request; i++){
 8003228:	7b7b      	ldrb	r3, [r7, #13]
 800322a:	3301      	adds	r3, #1
 800322c:	737b      	strb	r3, [r7, #13]
 800322e:	e79e      	b.n	800316e <_ZN14modbus_handler12package_dataEv+0x1a>
		}
	}
	reply_packet[3] = 38; //packet id for complete data modbus
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2226      	movs	r2, #38	; 0x26
 8003234:	72da      	strb	r2, [r3, #11]
	if(total_valid_request == 0) {
 8003236:	7bbb      	ldrb	r3, [r7, #14]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d111      	bne.n	8003260 <_ZN14modbus_handler12package_dataEv+0x10c>
		delete[] array_of_request;
 800323c:	4b2c      	ldr	r3, [pc, #176]	; (80032f0 <_ZN14modbus_handler12package_dataEv+0x19c>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d004      	beq.n	800324e <_ZN14modbus_handler12package_dataEv+0xfa>
 8003244:	4b2a      	ldr	r3, [pc, #168]	; (80032f0 <_ZN14modbus_handler12package_dataEv+0x19c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4618      	mov	r0, r3
 800324a:	f000 fd85 	bl	8003d58 <_ZdaPv>
		Serial.send_error(12345, 34567, '9'); //no modbus packet detected
 800324e:	2339      	movs	r3, #57	; 0x39
 8003250:	f248 7207 	movw	r2, #34567	; 0x8707
 8003254:	f243 0139 	movw	r1, #12345	; 0x3039
 8003258:	4826      	ldr	r0, [pc, #152]	; (80032f4 <_ZN14modbus_handler12package_dataEv+0x1a0>)
 800325a:	f000 fa4d 	bl	80036f8 <_ZN8mySerial10send_errorEtth>
		return;
 800325e:	e043      	b.n	80032e8 <_ZN14modbus_handler12package_dataEv+0x194>
	}else if(total_valid_request < number_of_request){
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	79db      	ldrb	r3, [r3, #7]
 8003264:	7bba      	ldrb	r2, [r7, #14]
 8003266:	429a      	cmp	r2, r3
 8003268:	d202      	bcs.n	8003270 <_ZN14modbus_handler12package_dataEv+0x11c>
		reply_packet[3] = 23; //packet id for non complete data modbus
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2217      	movs	r2, #23
 800326e:	72da      	strb	r2, [r3, #11]
	}
	//byte *temper_packet = new byte[total_byte + 6];
	reply_packet[2] = total_byte + 2;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	799b      	ldrb	r3, [r3, #6]
 8003274:	3302      	adds	r3, #2
 8003276:	b2da      	uxtb	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	729a      	strb	r2, [r3, #10]
	reply_packet[4] = number_of_request;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	79da      	ldrb	r2, [r3, #7]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	731a      	strb	r2, [r3, #12]

	reply_packet[0] = header_chunk[0];
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	781a      	ldrb	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	721a      	strb	r2, [r3, #8]
	reply_packet[1] = header_chunk[1];
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	785a      	ldrb	r2, [r3, #1]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	725a      	strb	r2, [r3, #9]
	reply_packet[total_byte + 7 - 2] = footer_chunk[0];
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	799b      	ldrb	r3, [r3, #6]
 8003298:	3305      	adds	r3, #5
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	7891      	ldrb	r1, [r2, #2]
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	4413      	add	r3, r2
 80032a2:	460a      	mov	r2, r1
 80032a4:	721a      	strb	r2, [r3, #8]
	reply_packet[total_byte + 7 - 1] = footer_chunk[1];
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	799b      	ldrb	r3, [r3, #6]
 80032aa:	3306      	adds	r3, #6
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	78d1      	ldrb	r1, [r2, #3]
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	4413      	add	r3, r2
 80032b4:	460a      	mov	r2, r1
 80032b6:	721a      	strb	r2, [r3, #8]
	transmit_complete_flag = On_transmit;
 80032b8:	4b0f      	ldr	r3, [pc, #60]	; (80032f8 <_ZN14modbus_handler12package_dataEv+0x1a4>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	701a      	strb	r2, [r3, #0]
	uart_send(&huart2, reply_packet, total_byte+7);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f103 0108 	add.w	r1, r3, #8
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	799b      	ldrb	r3, [r3, #6]
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	3307      	adds	r3, #7
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	461a      	mov	r2, r3
 80032d0:	480a      	ldr	r0, [pc, #40]	; (80032fc <_ZN14modbus_handler12package_dataEv+0x1a8>)
 80032d2:	f7ff f953 	bl	800257c <HAL_UART_Transmit_DMA>
	//Serial.send_mul_modbus_packet(12345, 34567, reply_packet, total_byte + 5);
	//delete[] temper_packet;
	delete[] array_of_request;
 80032d6:	4b06      	ldr	r3, [pc, #24]	; (80032f0 <_ZN14modbus_handler12package_dataEv+0x19c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d004      	beq.n	80032e8 <_ZN14modbus_handler12package_dataEv+0x194>
 80032de:	4b04      	ldr	r3, [pc, #16]	; (80032f0 <_ZN14modbus_handler12package_dataEv+0x19c>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 fd38 	bl	8003d58 <_ZdaPv>
}
 80032e8:	3714      	adds	r7, #20
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd90      	pop	{r4, r7, pc}
 80032ee:	bf00      	nop
 80032f0:	20000090 	.word	0x20000090
 80032f4:	20000240 	.word	0x20000240
 80032f8:	20000009 	.word	0x20000009
 80032fc:	200005b0 	.word	0x200005b0

08003300 <_ZN14modbus_handler15timeout_handlerEv>:
void modbus_handler::timeout_handler()
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
	HAL_UART_AbortReceive_IT(&huart3);
 8003308:	4836      	ldr	r0, [pc, #216]	; (80033e4 <_ZN14modbus_handler15timeout_handlerEv+0xe4>)
 800330a:	f7ff fa73 	bl	80027f4 <HAL_UART_AbortReceive_IT>
	if (current_request_number < number_of_request - 1){
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	795b      	ldrb	r3, [r3, #5]
 8003312:	461a      	mov	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	79db      	ldrb	r3, [r3, #7]
 8003318:	3b01      	subs	r3, #1
 800331a:	429a      	cmp	r2, r3
 800331c:	da57      	bge.n	80033ce <_ZN14modbus_handler15timeout_handlerEv+0xce>
		stop_timer(&htim2);
 800331e:	4832      	ldr	r0, [pc, #200]	; (80033e8 <_ZN14modbus_handler15timeout_handlerEv+0xe8>)
 8003320:	f7fe fd82 	bl	8001e28 <HAL_TIM_Base_Stop_IT>
		current_request_number++;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	795b      	ldrb	r3, [r3, #5]
 8003328:	3301      	adds	r3, #1
 800332a:	b2da      	uxtb	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	715a      	strb	r2, [r3, #5]
		uart_dma(&huart3, array_of_request[current_request_number].response_packet, array_of_request[current_request_number].response_length);
 8003330:	4b2e      	ldr	r3, [pc, #184]	; (80033ec <_ZN14modbus_handler15timeout_handlerEv+0xec>)
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	795b      	ldrb	r3, [r3, #5]
 8003338:	4619      	mov	r1, r3
 800333a:	460b      	mov	r3, r1
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	440b      	add	r3, r1
 8003340:	0159      	lsls	r1, r3, #5
 8003342:	440b      	add	r3, r1
 8003344:	4413      	add	r3, r2
 8003346:	f103 0023 	add.w	r0, r3, #35	; 0x23
 800334a:	4b28      	ldr	r3, [pc, #160]	; (80033ec <_ZN14modbus_handler15timeout_handlerEv+0xec>)
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	795b      	ldrb	r3, [r3, #5]
 8003352:	4619      	mov	r1, r3
 8003354:	460b      	mov	r3, r1
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	440b      	add	r3, r1
 800335a:	0159      	lsls	r1, r3, #5
 800335c:	440b      	add	r3, r1
 800335e:	4413      	add	r3, r2
 8003360:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8003364:	b29b      	uxth	r3, r3
 8003366:	461a      	mov	r2, r3
 8003368:	4601      	mov	r1, r0
 800336a:	481e      	ldr	r0, [pc, #120]	; (80033e4 <_ZN14modbus_handler15timeout_handlerEv+0xe4>)
 800336c:	f7ff f972 	bl	8002654 <HAL_UART_Receive_DMA>
		uart_send(&huart3, array_of_request[current_request_number].request_packet, array_of_request[current_request_number].request_length);
 8003370:	4b1e      	ldr	r3, [pc, #120]	; (80033ec <_ZN14modbus_handler15timeout_handlerEv+0xec>)
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	795b      	ldrb	r3, [r3, #5]
 8003378:	4619      	mov	r1, r3
 800337a:	460b      	mov	r3, r1
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	440b      	add	r3, r1
 8003380:	0159      	lsls	r1, r3, #5
 8003382:	440b      	add	r3, r1
 8003384:	4413      	add	r3, r2
 8003386:	1d58      	adds	r0, r3, #5
 8003388:	4b18      	ldr	r3, [pc, #96]	; (80033ec <_ZN14modbus_handler15timeout_handlerEv+0xec>)
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	795b      	ldrb	r3, [r3, #5]
 8003390:	4619      	mov	r1, r3
 8003392:	460b      	mov	r3, r1
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	440b      	add	r3, r1
 8003398:	0159      	lsls	r1, r3, #5
 800339a:	440b      	add	r3, r1
 800339c:	4413      	add	r3, r2
 800339e:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	461a      	mov	r2, r3
 80033a6:	4601      	mov	r1, r0
 80033a8:	480e      	ldr	r0, [pc, #56]	; (80033e4 <_ZN14modbus_handler15timeout_handlerEv+0xe4>)
 80033aa:	f7ff f8e7 	bl	800257c <HAL_UART_Transmit_DMA>
		TIM2->CNT = 0;
 80033ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80033b2:	2200      	movs	r2, #0
 80033b4:	625a      	str	r2, [r3, #36]	; 0x24
		TIM2->ARR = 49999;
 80033b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80033ba:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80033be:	62da      	str	r2, [r3, #44]	; 0x2c
		first_start = 3;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2203      	movs	r2, #3
 80033c4:	711a      	strb	r2, [r3, #4]
		start_timer(&htim2);
 80033c6:	4808      	ldr	r0, [pc, #32]	; (80033e8 <_ZN14modbus_handler15timeout_handlerEv+0xe8>)
 80033c8:	f7fe fd0b 	bl	8001de2 <HAL_TIM_Base_Start_IT>
	}else{
		stop_timer(&htim2);
		package_data();
	}
}
 80033cc:	e005      	b.n	80033da <_ZN14modbus_handler15timeout_handlerEv+0xda>
		stop_timer(&htim2);
 80033ce:	4806      	ldr	r0, [pc, #24]	; (80033e8 <_ZN14modbus_handler15timeout_handlerEv+0xe8>)
 80033d0:	f7fe fd2a 	bl	8001e28 <HAL_TIM_Base_Stop_IT>
		package_data();
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f7ff febd 	bl	8003154 <_ZN14modbus_handler12package_dataEv>
}
 80033da:	bf00      	nop
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	2000041c 	.word	0x2000041c
 80033e8:	20000570 	.word	0x20000570
 80033ec:	20000090 	.word	0x20000090

080033f0 <_ZN14modbus_handler12next_requestEv>:
void modbus_handler::next_request()
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
	stop_timer(&htim2);
 80033f8:	481a      	ldr	r0, [pc, #104]	; (8003464 <_ZN14modbus_handler12next_requestEv+0x74>)
 80033fa:	f7fe fd15 	bl	8001e28 <HAL_TIM_Base_Stop_IT>
	uart_send(&huart3, array_of_request[current_request_number].request_packet, array_of_request[current_request_number].request_length);
 80033fe:	4b1a      	ldr	r3, [pc, #104]	; (8003468 <_ZN14modbus_handler12next_requestEv+0x78>)
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	795b      	ldrb	r3, [r3, #5]
 8003406:	4619      	mov	r1, r3
 8003408:	460b      	mov	r3, r1
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	0159      	lsls	r1, r3, #5
 8003410:	440b      	add	r3, r1
 8003412:	4413      	add	r3, r2
 8003414:	1d58      	adds	r0, r3, #5
 8003416:	4b14      	ldr	r3, [pc, #80]	; (8003468 <_ZN14modbus_handler12next_requestEv+0x78>)
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	795b      	ldrb	r3, [r3, #5]
 800341e:	4619      	mov	r1, r3
 8003420:	460b      	mov	r3, r1
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	440b      	add	r3, r1
 8003426:	0159      	lsls	r1, r3, #5
 8003428:	440b      	add	r3, r1
 800342a:	4413      	add	r3, r2
 800342c:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 8003430:	b29b      	uxth	r3, r3
 8003432:	461a      	mov	r2, r3
 8003434:	4601      	mov	r1, r0
 8003436:	480d      	ldr	r0, [pc, #52]	; (800346c <_ZN14modbus_handler12next_requestEv+0x7c>)
 8003438:	f7ff f8a0 	bl	800257c <HAL_UART_Transmit_DMA>
	TIM2->CNT = 0;
 800343c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003440:	2200      	movs	r2, #0
 8003442:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->ARR = 49999;
 8003444:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003448:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800344c:	62da      	str	r2, [r3, #44]	; 0x2c
	first_start = 3;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2203      	movs	r2, #3
 8003452:	711a      	strb	r2, [r3, #4]
	start_timer(&htim2); //start timeout for next request
 8003454:	4803      	ldr	r0, [pc, #12]	; (8003464 <_ZN14modbus_handler12next_requestEv+0x74>)
 8003456:	f7fe fcc4 	bl	8001de2 <HAL_TIM_Base_Start_IT>
}
 800345a:	bf00      	nop
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	20000570 	.word	0x20000570
 8003468:	20000090 	.word	0x20000090
 800346c:	2000041c 	.word	0x2000041c

08003470 <modbus_timeout>:
void modbus_timeout() //global from timer interrupt
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
	if (modbus.first_start == 0){
 8003474:	4b10      	ldr	r3, [pc, #64]	; (80034b8 <modbus_timeout+0x48>)
 8003476:	791b      	ldrb	r3, [r3, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d103      	bne.n	8003484 <modbus_timeout+0x14>
		modbus.timeout_handler();
 800347c:	480e      	ldr	r0, [pc, #56]	; (80034b8 <modbus_timeout+0x48>)
 800347e:	f7ff ff3f 	bl	8003300 <_ZN14modbus_handler15timeout_handlerEv>
		modbus.next_request();
	}else if(modbus.first_start == 3){
		modbus.first_start = 0;
	}

}
 8003482:	e016      	b.n	80034b2 <modbus_timeout+0x42>
	}else if(modbus.first_start == 2){
 8003484:	4b0c      	ldr	r3, [pc, #48]	; (80034b8 <modbus_timeout+0x48>)
 8003486:	791b      	ldrb	r3, [r3, #4]
 8003488:	2b02      	cmp	r3, #2
 800348a:	d103      	bne.n	8003494 <modbus_timeout+0x24>
		modbus.first_start = 1;
 800348c:	4b0a      	ldr	r3, [pc, #40]	; (80034b8 <modbus_timeout+0x48>)
 800348e:	2201      	movs	r2, #1
 8003490:	711a      	strb	r2, [r3, #4]
}
 8003492:	e00e      	b.n	80034b2 <modbus_timeout+0x42>
	}else if(modbus.first_start == 1){
 8003494:	4b08      	ldr	r3, [pc, #32]	; (80034b8 <modbus_timeout+0x48>)
 8003496:	791b      	ldrb	r3, [r3, #4]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d103      	bne.n	80034a4 <modbus_timeout+0x34>
		modbus.next_request();
 800349c:	4806      	ldr	r0, [pc, #24]	; (80034b8 <modbus_timeout+0x48>)
 800349e:	f7ff ffa7 	bl	80033f0 <_ZN14modbus_handler12next_requestEv>
}
 80034a2:	e006      	b.n	80034b2 <modbus_timeout+0x42>
	}else if(modbus.first_start == 3){
 80034a4:	4b04      	ldr	r3, [pc, #16]	; (80034b8 <modbus_timeout+0x48>)
 80034a6:	791b      	ldrb	r3, [r3, #4]
 80034a8:	2b03      	cmp	r3, #3
 80034aa:	d102      	bne.n	80034b2 <modbus_timeout+0x42>
		modbus.first_start = 0;
 80034ac:	4b02      	ldr	r3, [pc, #8]	; (80034b8 <modbus_timeout+0x48>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	711a      	strb	r2, [r3, #4]
}
 80034b2:	bf00      	nop
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	200001f4 	.word	0x200001f4

080034bc <_Z41__static_initialization_and_destruction_0ii>:
modbus_handler modbus;
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d107      	bne.n	80034dc <_Z41__static_initialization_and_destruction_0ii+0x20>
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d102      	bne.n	80034dc <_Z41__static_initialization_and_destruction_0ii+0x20>
 80034d6:	4803      	ldr	r0, [pc, #12]	; (80034e4 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80034d8:	f7ff fce6 	bl	8002ea8 <_ZN14modbus_handlerC1Ev>
 80034dc:	bf00      	nop
 80034de:	3708      	adds	r7, #8
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	200001f4 	.word	0x200001f4

080034e8 <_GLOBAL__sub_I__ZN14modbus_handlerC2Ev>:
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80034f0:	2001      	movs	r0, #1
 80034f2:	f7ff ffe3 	bl	80034bc <_Z41__static_initialization_and_destruction_0ii>
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <_ZN8mySerialC1Ev>:
 *  Created on: Aug 31, 2020
 *      Author: Admin
 */

#include "mySerial.h"
mySerial::mySerial()
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	711a      	strb	r2, [r3, #4]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	715a      	strb	r2, [r3, #5]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	719a      	strb	r2, [r3, #6]
{

}
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4618      	mov	r0, r3
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	bc80      	pop	{r7}
 800351c:	4770      	bx	lr

0800351e <_ZN8mySerial5beginEP20__UART_HandleTypeDefttPFvPhiE>:

void mySerial::begin(UART_HandleTypeDef* uart, uint16_t header, uint16_t footer, uart_received)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b084      	sub	sp, #16
 8003522:	af00      	add	r7, sp, #0
 8003524:	60f8      	str	r0, [r7, #12]
 8003526:	60b9      	str	r1, [r7, #8]
 8003528:	4611      	mov	r1, r2
 800352a:	461a      	mov	r2, r3
 800352c:	460b      	mov	r3, r1
 800352e:	80fb      	strh	r3, [r7, #6]
 8003530:	4613      	mov	r3, r2
 8003532:	80bb      	strh	r3, [r7, #4]
	this->header[0] = (byte)(header>>8 & 0xff);
 8003534:	88fb      	ldrh	r3, [r7, #6]
 8003536:	0a1b      	lsrs	r3, r3, #8
 8003538:	b29b      	uxth	r3, r3
 800353a:	b2da      	uxtb	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	71da      	strb	r2, [r3, #7]
	this->header[1] = (byte)(header & 0xff);
 8003540:	88fb      	ldrh	r3, [r7, #6]
 8003542:	b2da      	uxtb	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	721a      	strb	r2, [r3, #8]
	this->footer[0] = (byte)(footer>>8 & 0xff);
 8003548:	88bb      	ldrh	r3, [r7, #4]
 800354a:	0a1b      	lsrs	r3, r3, #8
 800354c:	b29b      	uxth	r3, r3
 800354e:	b2da      	uxtb	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	725a      	strb	r2, [r3, #9]
	this->footer[1] = (byte)(footer & 0xff);
 8003554:	88bb      	ldrh	r3, [r7, #4]
 8003556:	b2da      	uxtb	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	729a      	strb	r2, [r3, #10]
	this->uart = uart;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	68ba      	ldr	r2, [r7, #8]
 8003560:	615a      	str	r2, [r3, #20]
	this->callback = callback;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	601a      	str	r2, [r3, #0]
	uart_dma(this->uart, data_buffer, buffer_length);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6958      	ldr	r0, [r3, #20]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	331c      	adds	r3, #28
 8003570:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003574:	4619      	mov	r1, r3
 8003576:	f7ff f86d 	bl	8002654 <HAL_UART_Receive_DMA>
}
 800357a:	bf00      	nop
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
	...

08003584 <_ZN8mySerial8looping2Ev>:
		}
	}
}

void mySerial::looping2()
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
	//if(receive_complete_flag == On_received) {
		write_pointer = buffer_length - (byte)(uart->hdmarx->Instance->CNDTR);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	b2db      	uxtb	r3, r3
 8003598:	425b      	negs	r3, r3
 800359a:	b2da      	uxtb	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	761a      	strb	r2, [r3, #24]
		if(data_buffer[read_pointer] == this->header[0] && data_buffer[(byte)(read_pointer+1)] == this->header[1] && data_buffer[(byte)(write_pointer-2)] == this->footer[0] && data_buffer[(byte)(write_pointer-1)] == this->footer[1]){
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	7e5b      	ldrb	r3, [r3, #25]
 80035a4:	461a      	mov	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4413      	add	r3, r2
 80035aa:	7f1a      	ldrb	r2, [r3, #28]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	79db      	ldrb	r3, [r3, #7]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d17f      	bne.n	80036b4 <_ZN8mySerial8looping2Ev+0x130>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	7e5b      	ldrb	r3, [r3, #25]
 80035b8:	3301      	adds	r3, #1
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	461a      	mov	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4413      	add	r3, r2
 80035c2:	7f1a      	ldrb	r2, [r3, #28]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	7a1b      	ldrb	r3, [r3, #8]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d173      	bne.n	80036b4 <_ZN8mySerial8looping2Ev+0x130>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	7e1b      	ldrb	r3, [r3, #24]
 80035d0:	3b02      	subs	r3, #2
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	461a      	mov	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4413      	add	r3, r2
 80035da:	7f1a      	ldrb	r2, [r3, #28]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	7a5b      	ldrb	r3, [r3, #9]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d167      	bne.n	80036b4 <_ZN8mySerial8looping2Ev+0x130>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	7e1b      	ldrb	r3, [r3, #24]
 80035e8:	3b01      	subs	r3, #1
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	461a      	mov	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4413      	add	r3, r2
 80035f2:	7f1a      	ldrb	r2, [r3, #28]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	7a9b      	ldrb	r3, [r3, #10]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d15b      	bne.n	80036b4 <_ZN8mySerial8looping2Ev+0x130>
			if(data_buffer[(byte)(read_pointer+2)] == ((byte)(write_pointer - read_pointer) - 5)) {
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	7e5b      	ldrb	r3, [r3, #25]
 8003600:	3302      	adds	r3, #2
 8003602:	b2db      	uxtb	r3, r3
 8003604:	461a      	mov	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4413      	add	r3, r2
 800360a:	7f1b      	ldrb	r3, [r3, #28]
 800360c:	4619      	mov	r1, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	7e1a      	ldrb	r2, [r3, #24]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	7e5b      	ldrb	r3, [r3, #25]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	b2db      	uxtb	r3, r3
 800361a:	3b05      	subs	r3, #5
 800361c:	4299      	cmp	r1, r3
 800361e:	d130      	bne.n	8003682 <_ZN8mySerial8looping2Ev+0xfe>
				if(overflow_flag == true)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	791b      	ldrb	r3, [r3, #4]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00a      	beq.n	800363e <_ZN8mySerial8looping2Ev+0xba>
					memcpy(&data_buffer[256], data_buffer, write_pointer);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f503 708e 	add.w	r0, r3, #284	; 0x11c
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f103 011c 	add.w	r1, r3, #28
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	7e1b      	ldrb	r3, [r3, #24]
 8003638:	461a      	mov	r2, r3
 800363a:	f000 fbef 	bl	8003e1c <memcpy>
				length_error_integral = 0; head_foot_error_integral = 0;
 800363e:	4b2b      	ldr	r3, [pc, #172]	; (80036ec <_ZN8mySerial8looping2Ev+0x168>)
 8003640:	2200      	movs	r2, #0
 8003642:	701a      	strb	r2, [r3, #0]
 8003644:	4b2a      	ldr	r3, [pc, #168]	; (80036f0 <_ZN8mySerial8looping2Ev+0x16c>)
 8003646:	2200      	movs	r2, #0
 8003648:	701a      	strb	r2, [r3, #0]
				overflow_flag = false;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	711a      	strb	r2, [r3, #4]
				//packet_id = data_buffer[(byte)(read_pointer+3)];
				this->callback(&data_buffer[(byte)(read_pointer+3)], data_buffer[(byte)(read_pointer+2)]);				
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	7e52      	ldrb	r2, [r2, #25]
 8003658:	3203      	adds	r2, #3
 800365a:	b2d2      	uxtb	r2, r2
 800365c:	3218      	adds	r2, #24
 800365e:	6879      	ldr	r1, [r7, #4]
 8003660:	440a      	add	r2, r1
 8003662:	1d10      	adds	r0, r2, #4
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	7e52      	ldrb	r2, [r2, #25]
 8003668:	3202      	adds	r2, #2
 800366a:	b2d2      	uxtb	r2, r2
 800366c:	4611      	mov	r1, r2
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	440a      	add	r2, r1
 8003672:	7f12      	ldrb	r2, [r2, #28]
 8003674:	4611      	mov	r1, r2
 8003676:	4798      	blx	r3
				read_pointer = write_pointer;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	7e1a      	ldrb	r2, [r3, #24]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	765a      	strb	r2, [r3, #25]
				return;
 8003680:	e030      	b.n	80036e4 <_ZN8mySerial8looping2Ev+0x160>
				//packet length error
//				error_debug_buffer[0] = write_pointer;
//				error_debug_buffer[1] = read_pointer;
//				error_debug_buffer[2] = data_buffer[(byte)(read_pointer+2)];
//				error_debug_buffer[3] = (byte)(uart->hdmarx->Instance->CNDTR);
				receive_complete_flag = IDLE_receive;
 8003682:	4b1c      	ldr	r3, [pc, #112]	; (80036f4 <_ZN8mySerial8looping2Ev+0x170>)
 8003684:	2200      	movs	r2, #0
 8003686:	701a      	strb	r2, [r3, #0]
				length_error_integral++;
 8003688:	4b18      	ldr	r3, [pc, #96]	; (80036ec <_ZN8mySerial8looping2Ev+0x168>)
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	3301      	adds	r3, #1
 800368e:	b2da      	uxtb	r2, r3
 8003690:	4b16      	ldr	r3, [pc, #88]	; (80036ec <_ZN8mySerial8looping2Ev+0x168>)
 8003692:	701a      	strb	r2, [r3, #0]
				send_error(12345, 34567, '7');
 8003694:	2337      	movs	r3, #55	; 0x37
 8003696:	f248 7207 	movw	r2, #34567	; 0x8707
 800369a:	f243 0139 	movw	r1, #12345	; 0x3039
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f82a 	bl	80036f8 <_ZN8mySerial10send_errorEtth>
				overflow_flag = false;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	711a      	strb	r2, [r3, #4]
				read_pointer = write_pointer;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	7e1a      	ldrb	r2, [r3, #24]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	765a      	strb	r2, [r3, #25]
			if(data_buffer[(byte)(read_pointer+2)] == ((byte)(write_pointer - read_pointer) - 5)) {
 80036b2:	e017      	b.n	80036e4 <_ZN8mySerial8looping2Ev+0x160>
//			error_debug_buffer[1] = read_pointer;
//			error_debug_buffer[2] = data_buffer[read_pointer];
//			error_debug_buffer[3] = data_buffer[(byte)(read_pointer+1)];
//			error_debug_buffer[4] = data_buffer[(byte)(write_pointer-2)];
//			error_debug_buffer[5] = data_buffer[(byte)(write_pointer-1)];
			send_error(12345, 34567, '6');
 80036b4:	2336      	movs	r3, #54	; 0x36
 80036b6:	f248 7207 	movw	r2, #34567	; 0x8707
 80036ba:	f243 0139 	movw	r1, #12345	; 0x3039
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f81a 	bl	80036f8 <_ZN8mySerial10send_errorEtth>
			receive_complete_flag = IDLE_receive;
 80036c4:	4b0b      	ldr	r3, [pc, #44]	; (80036f4 <_ZN8mySerial8looping2Ev+0x170>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	701a      	strb	r2, [r3, #0]
			head_foot_error_integral++;
 80036ca:	4b09      	ldr	r3, [pc, #36]	; (80036f0 <_ZN8mySerial8looping2Ev+0x16c>)
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	3301      	adds	r3, #1
 80036d0:	b2da      	uxtb	r2, r3
 80036d2:	4b07      	ldr	r3, [pc, #28]	; (80036f0 <_ZN8mySerial8looping2Ev+0x16c>)
 80036d4:	701a      	strb	r2, [r3, #0]
			overflow_flag = false;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	711a      	strb	r2, [r3, #4]
			read_pointer = write_pointer;			
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	7e1a      	ldrb	r2, [r3, #24]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	765a      	strb	r2, [r3, #25]
		}
	//}
	
}
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	2000023c 	.word	0x2000023c
 80036f0:	2000023d 	.word	0x2000023d
 80036f4:	20000094 	.word	0x20000094

080036f8 <_ZN8mySerial10send_errorEtth>:
void mySerial::send_error(uint16_t header, uint16_t footer, uint8_t error_code)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	4608      	mov	r0, r1
 8003702:	4611      	mov	r1, r2
 8003704:	461a      	mov	r2, r3
 8003706:	4603      	mov	r3, r0
 8003708:	817b      	strh	r3, [r7, #10]
 800370a:	460b      	mov	r3, r1
 800370c:	813b      	strh	r3, [r7, #8]
 800370e:	4613      	mov	r3, r2
 8003710:	71fb      	strb	r3, [r7, #7]
	byte *temper_packet = new byte[7];
 8003712:	2007      	movs	r0, #7
 8003714:	f000 fb22 	bl	8003d5c <_Znaj>
 8003718:	4603      	mov	r3, r0
 800371a:	617b      	str	r3, [r7, #20]
	temper_packet[0] = (byte)(header >>8 & 0xff);
 800371c:	897b      	ldrh	r3, [r7, #10]
 800371e:	0a1b      	lsrs	r3, r3, #8
 8003720:	b29b      	uxth	r3, r3
 8003722:	b2da      	uxtb	r2, r3
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	701a      	strb	r2, [r3, #0]
	temper_packet[1] = (byte)(header & 0xff);
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	3301      	adds	r3, #1
 800372c:	897a      	ldrh	r2, [r7, #10]
 800372e:	b2d2      	uxtb	r2, r2
 8003730:	701a      	strb	r2, [r3, #0]
	temper_packet[2] = 2;
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	3302      	adds	r3, #2
 8003736:	2202      	movs	r2, #2
 8003738:	701a      	strb	r2, [r3, #0]
	temper_packet[3] = 40; //packet id for error
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	3303      	adds	r3, #3
 800373e:	2228      	movs	r2, #40	; 0x28
 8003740:	701a      	strb	r2, [r3, #0]
	temper_packet[4] = error_code;
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	3304      	adds	r3, #4
 8003746:	79fa      	ldrb	r2, [r7, #7]
 8003748:	701a      	strb	r2, [r3, #0]
	temper_packet[5] = (byte)(footer >>8 & 0xff);
 800374a:	893b      	ldrh	r3, [r7, #8]
 800374c:	0a1b      	lsrs	r3, r3, #8
 800374e:	b29a      	uxth	r2, r3
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	3305      	adds	r3, #5
 8003754:	b2d2      	uxtb	r2, r2
 8003756:	701a      	strb	r2, [r3, #0]
	temper_packet[6] = (byte)(footer & 0xff);
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	3306      	adds	r3, #6
 800375c:	893a      	ldrh	r2, [r7, #8]
 800375e:	b2d2      	uxtb	r2, r2
 8003760:	701a      	strb	r2, [r3, #0]
	transmit_complete_flag = On_transmit;
 8003762:	4b09      	ldr	r3, [pc, #36]	; (8003788 <_ZN8mySerial10send_errorEtth+0x90>)
 8003764:	2200      	movs	r2, #0
 8003766:	701a      	strb	r2, [r3, #0]
	uart_send(&huart2, temper_packet, 7);
 8003768:	2207      	movs	r2, #7
 800376a:	6979      	ldr	r1, [r7, #20]
 800376c:	4807      	ldr	r0, [pc, #28]	; (800378c <_ZN8mySerial10send_errorEtth+0x94>)
 800376e:	f7fe ff05 	bl	800257c <HAL_UART_Transmit_DMA>
	delete[] temper_packet;
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d002      	beq.n	800377e <_ZN8mySerial10send_errorEtth+0x86>
 8003778:	6978      	ldr	r0, [r7, #20]
 800377a:	f000 faed 	bl	8003d58 <_ZdaPv>
}
 800377e:	bf00      	nop
 8003780:	3718      	adds	r7, #24
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	20000009 	.word	0x20000009
 800378c:	200005b0 	.word	0x200005b0

08003790 <_ZN8mySerial15buffer_overflowEv>:
	}
	delete[] temper_packet;
}

void mySerial::buffer_overflow()
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
	overflow_flag = true;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	711a      	strb	r2, [r3, #4]
}
 800379e:	bf00      	nop
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bc80      	pop	{r7}
 80037a6:	4770      	bx	lr

080037a8 <_Z41__static_initialization_and_destruction_0ii>:
byte length_error_integral;
byte head_foot_error_integral;

mySerial Serial;
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d107      	bne.n	80037c8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037be:	4293      	cmp	r3, r2
 80037c0:	d102      	bne.n	80037c8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80037c2:	4803      	ldr	r0, [pc, #12]	; (80037d0 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80037c4:	f7ff fe98 	bl	80034f8 <_ZN8mySerialC1Ev>
 80037c8:	bf00      	nop
 80037ca:	3708      	adds	r7, #8
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	20000240 	.word	0x20000240

080037d4 <_GLOBAL__sub_I__ZN8mySerialC2Ev>:
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80037dc:	2001      	movs	r0, #1
 80037de:	f7ff ffe3 	bl	80037a8 <_Z41__static_initialization_and_destruction_0ii>
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <_ZN12request_typeC1Ev>:
#include "request_type.h"

request_type::request_type()
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	709a      	strb	r2, [r3, #2]
{
    
}
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4618      	mov	r0, r3
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bc80      	pop	{r7}
 80037fc:	4770      	bx	lr
	...

08003800 <_ZN12request_type15begin_configureEPhi>:
void request_type::begin_configure(byte *data_format, int length)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
    switch (data_format[0]) {
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	3b01      	subs	r3, #1
 8003812:	2b0f      	cmp	r3, #15
 8003814:	d84f      	bhi.n	80038b6 <_ZN12request_type15begin_configureEPhi+0xb6>
 8003816:	a201      	add	r2, pc, #4	; (adr r2, 800381c <_ZN12request_type15begin_configureEPhi+0x1c>)
 8003818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800381c:	0800385d 	.word	0x0800385d
 8003820:	080038b7 	.word	0x080038b7
 8003824:	080038a5 	.word	0x080038a5
 8003828:	0800386f 	.word	0x0800386f
 800382c:	08003881 	.word	0x08003881
 8003830:	080038b7 	.word	0x080038b7
 8003834:	080038b7 	.word	0x080038b7
 8003838:	080038b7 	.word	0x080038b7
 800383c:	080038b7 	.word	0x080038b7
 8003840:	080038b7 	.word	0x080038b7
 8003844:	080038b7 	.word	0x080038b7
 8003848:	080038b7 	.word	0x080038b7
 800384c:	080038b7 	.word	0x080038b7
 8003850:	080038b7 	.word	0x080038b7
 8003854:	080038b7 	.word	0x080038b7
 8003858:	08003893 	.word	0x08003893
        case 0x01:
            function_01_handler(&data_format[1], length-1);
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	1c59      	adds	r1, r3, #1
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	3b01      	subs	r3, #1
 8003864:	461a      	mov	r2, r3
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f000 f8ce 	bl	8003a08 <_ZN12request_type19function_01_handlerEPhi>
        break;
 800386c:	e023      	b.n	80038b6 <_ZN12request_type15begin_configureEPhi+0xb6>
        case 0x04:
            function_04_handler(&data_format[1], length-1);
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	1c59      	adds	r1, r3, #1
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	3b01      	subs	r3, #1
 8003876:	461a      	mov	r2, r3
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 f93f 	bl	8003afc <_ZN12request_type19function_04_handlerEPhi>
        break;
 800387e:	e01a      	b.n	80038b6 <_ZN12request_type15begin_configureEPhi+0xb6>
        case 0x05:
            function_05_handler(&data_format[1], length-1);
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	1c59      	adds	r1, r3, #1
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	3b01      	subs	r3, #1
 8003888:	461a      	mov	r2, r3
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f000 f973 	bl	8003b76 <_ZN12request_type19function_05_handlerEPhi>
        break;
 8003890:	e011      	b.n	80038b6 <_ZN12request_type15begin_configureEPhi+0xb6>
        case 0x10:
            function_10_handler(&data_format[1], length-1);
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	1c59      	adds	r1, r3, #1
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	3b01      	subs	r3, #1
 800389a:	461a      	mov	r2, r3
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f000 f9a1 	bl	8003be4 <_ZN12request_type19function_10_handlerEPhi>
        break;
 80038a2:	e008      	b.n	80038b6 <_ZN12request_type15begin_configureEPhi+0xb6>
        case 0x03:
            function_03_handler(&data_format[1], length-1);
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	1c59      	adds	r1, r3, #1
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	3b01      	subs	r3, #1
 80038ac:	461a      	mov	r2, r3
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f000 f8e7 	bl	8003a82 <_ZN12request_type19function_03_handlerEPhi>
        break;
 80038b4:	bf00      	nop
    }
}
 80038b6:	bf00      	nop
 80038b8:	3710      	adds	r7, #16
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop

080038c0 <_ZN12request_type15packet_encodingEv>:
void request_type::packet_encoding(){
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
	switch (response_packet[1]) {
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038ce:	3b01      	subs	r3, #1
 80038d0:	2b0f      	cmp	r3, #15
 80038d2:	f200 8095 	bhi.w	8003a00 <_ZN12request_type15packet_encodingEv+0x140>
 80038d6:	a201      	add	r2, pc, #4	; (adr r2, 80038dc <_ZN12request_type15packet_encodingEv+0x1c>)
 80038d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038dc:	0800391d 	.word	0x0800391d
 80038e0:	08003a01 	.word	0x08003a01
 80038e4:	080039ff 	.word	0x080039ff
 80038e8:	0800397d 	.word	0x0800397d
 80038ec:	080039cf 	.word	0x080039cf
 80038f0:	08003a01 	.word	0x08003a01
 80038f4:	08003a01 	.word	0x08003a01
 80038f8:	08003a01 	.word	0x08003a01
 80038fc:	08003a01 	.word	0x08003a01
 8003900:	08003a01 	.word	0x08003a01
 8003904:	08003a01 	.word	0x08003a01
 8003908:	08003a01 	.word	0x08003a01
 800390c:	08003a01 	.word	0x08003a01
 8003910:	08003a01 	.word	0x08003a01
 8003914:	08003a01 	.word	0x08003a01
 8003918:	080039ff 	.word	0x080039ff
		case 0x01:
            encoded_packet[0] = 0x01;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
            encoded_packet[1] = start_address[0];
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	781a      	ldrb	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
            encoded_packet[2] = start_address[1];
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	785a      	ldrb	r2, [r3, #1]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
            encoded_packet[3] = request_packet[4] <<8 | request_packet[5]; //take number of coils,
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	7a5b      	ldrb	r3, [r3, #9]
 800393c:	021b      	lsls	r3, r3, #8
 800393e:	b25a      	sxtb	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	7a9b      	ldrb	r3, [r3, #10]
 8003944:	b25b      	sxtb	r3, r3
 8003946:	4313      	orrs	r3, r2
 8003948:	b25b      	sxtb	r3, r3
 800394a:	b2da      	uxtb	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
            memcpy(&encoded_packet[4], &response_packet[3], response_length - 5);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f103 0067 	add.w	r0, r3, #103	; 0x67
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8003964:	3b05      	subs	r3, #5
 8003966:	461a      	mov	r2, r3
 8003968:	f000 fa58 	bl	8003e1c <memcpy>
            encode_length = response_length - 1;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8003972:	3b01      	subs	r3, #1
 8003974:	b2da      	uxtb	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	70da      	strb	r2, [r3, #3]
		break;
 800397a:	e041      	b.n	8003a00 <_ZN12request_type15packet_encodingEv+0x140>
		case 0x04:
			encoded_packet[0] = 0x04;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2204      	movs	r2, #4
 8003980:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
			encoded_packet[1] = start_address[0];
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	781a      	ldrb	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			encoded_packet[2] = start_address[1];
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	785a      	ldrb	r2, [r3, #1]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
			encoded_packet[3] = response_packet[2]; //number of data byte
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
			memcpy(&encoded_packet[4], &response_packet[3], response_length - 5);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f103 0067 	add.w	r0, r3, #103	; 0x67
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 80039b6:	3b05      	subs	r3, #5
 80039b8:	461a      	mov	r2, r3
 80039ba:	f000 fa2f 	bl	8003e1c <memcpy>
			encode_length = response_length - 1;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 80039c4:	3b01      	subs	r3, #1
 80039c6:	b2da      	uxtb	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	70da      	strb	r2, [r3, #3]
		break;
 80039cc:	e018      	b.n	8003a00 <_ZN12request_type15packet_encodingEv+0x140>
		case 0x05:
            encoded_packet[0] = 0x05;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2205      	movs	r2, #5
 80039d2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
            encoded_packet[1] = start_address[0];
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	781a      	ldrb	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
            encoded_packet[2] = start_address[1];
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	785a      	ldrb	r2, [r3, #1]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
            encoded_packet[3] = response_packet[4];// 255 or 0
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
            encode_length = 4;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2204      	movs	r2, #4
 80039fa:	70da      	strb	r2, [r3, #3]
		break;
 80039fc:	e000      	b.n	8003a00 <_ZN12request_type15packet_encodingEv+0x140>
		case 0x10:

		break;
		case 0x03:

		break;
 80039fe:	bf00      	nop
	}
}
 8003a00:	bf00      	nop
 8003a02:	3708      	adds	r7, #8
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <_ZN12request_type19function_01_handlerEPhi>:
void request_type::function_01_handler(byte *data, int length) //read coil status
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
    //receive format:  [register_address: 2 bytes] [number of register: 1 byte]
    //total 3 bytes
    request_packet[0] = modbus_address;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2201      	movs	r2, #1
 8003a18:	715a      	strb	r2, [r3, #5]
    request_packet[1] = 0x01;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	719a      	strb	r2, [r3, #6]
    request_packet[2] = data[0];	start_address[0] = data[0];
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	781a      	ldrb	r2, [r3, #0]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	71da      	strb	r2, [r3, #7]
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	781a      	ldrb	r2, [r3, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	701a      	strb	r2, [r3, #0]
    request_packet[3] = data[1];    start_address[1] = data[1];
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	785a      	ldrb	r2, [r3, #1]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	721a      	strb	r2, [r3, #8]
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	785a      	ldrb	r2, [r3, #1]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	705a      	strb	r2, [r3, #1]
    request_packet[4] = 0x00; //just in this case, the total of register cant overcome 255
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	725a      	strb	r2, [r3, #9]
    request_packet[5] = (byte)data[2];
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	789a      	ldrb	r2, [r3, #2]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	729a      	strb	r2, [r3, #10]
    CRC_16(request_packet, 6, &request_packet[6]);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	1d59      	adds	r1, r3, #5
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	330b      	adds	r3, #11
 8003a56:	2206      	movs	r2, #6
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	f000 f913 	bl	8003c84 <_ZN12request_type6CRC_16EPhhS0_>
    request_length = 8;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2208      	movs	r2, #8
 8003a62:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
    //calculate response length
    response_length = (byte)(data[2] >> 3) + 5; //divive for 8 and plus 5
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	3302      	adds	r3, #2
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	10db      	asrs	r3, r3, #3
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	3305      	adds	r3, #5
 8003a72:	b2da      	uxtb	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
}
 8003a7a:	bf00      	nop
 8003a7c:	3710      	adds	r7, #16
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <_ZN12request_type19function_03_handlerEPhi>:
void request_type::function_03_handler(byte *data, int length) //read holding registers
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b084      	sub	sp, #16
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	60f8      	str	r0, [r7, #12]
 8003a8a:	60b9      	str	r1, [r7, #8]
 8003a8c:	607a      	str	r2, [r7, #4]
    //receive format:  [register_address: 2 bytes] [number of register: 1 byte]
    //total 3 bytes
    request_packet[0] = modbus_address;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2201      	movs	r2, #1
 8003a92:	715a      	strb	r2, [r3, #5]
    request_packet[1] = 0x03;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2203      	movs	r2, #3
 8003a98:	719a      	strb	r2, [r3, #6]
    request_packet[2] = data[0];	start_address[0] = data[0];
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	781a      	ldrb	r2, [r3, #0]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	71da      	strb	r2, [r3, #7]
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	781a      	ldrb	r2, [r3, #0]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	701a      	strb	r2, [r3, #0]
    request_packet[3] = data[1];    start_address[1] = data[1];
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	785a      	ldrb	r2, [r3, #1]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	721a      	strb	r2, [r3, #8]
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	785a      	ldrb	r2, [r3, #1]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	705a      	strb	r2, [r3, #1]
    request_packet[4] = 0x00; //just in this case, the total of register cant overcome 255
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	725a      	strb	r2, [r3, #9]
    request_packet[5] = (byte)data[2];
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	789a      	ldrb	r2, [r3, #2]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	729a      	strb	r2, [r3, #10]
    CRC_16(request_packet, 6, &request_packet[6]);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	1d59      	adds	r1, r3, #5
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	330b      	adds	r3, #11
 8003ad0:	2206      	movs	r2, #6
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f000 f8d6 	bl	8003c84 <_ZN12request_type6CRC_16EPhhS0_>
    request_length = 8;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2208      	movs	r2, #8
 8003adc:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
    //calculate response length
    response_length = (byte)(data[2] << 1) + 5; //multiple for 2 and plus 5
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	3302      	adds	r3, #2
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	3305      	adds	r3, #5
 8003aec:	b2da      	uxtb	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
}
 8003af4:	bf00      	nop
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <_ZN12request_type19function_04_handlerEPhi>:
void request_type::function_04_handler(byte *data, int length) //read input register
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
    //receive format:  [register_address: 2 bytes] [number of register: 1 byte]
    //total 3 bytes
    request_packet[0] = modbus_address;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	715a      	strb	r2, [r3, #5]
    request_packet[1] = 0x04;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2204      	movs	r2, #4
 8003b12:	719a      	strb	r2, [r3, #6]
    request_packet[2] = data[0];	start_address[0] = data[0];
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	781a      	ldrb	r2, [r3, #0]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	71da      	strb	r2, [r3, #7]
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	781a      	ldrb	r2, [r3, #0]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	701a      	strb	r2, [r3, #0]
    request_packet[3] = data[1];	start_address[1] = data[1];
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	785a      	ldrb	r2, [r3, #1]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	721a      	strb	r2, [r3, #8]
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	785a      	ldrb	r2, [r3, #1]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	705a      	strb	r2, [r3, #1]
    request_packet[4] = 0x00; //just in this case, the total of register cant overcome 255
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	725a      	strb	r2, [r3, #9]
    request_packet[5] = (byte)data[2];
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	789a      	ldrb	r2, [r3, #2]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	729a      	strb	r2, [r3, #10]
    CRC_16(request_packet, 6, &request_packet[6]);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	1d59      	adds	r1, r3, #5
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	330b      	adds	r3, #11
 8003b4a:	2206      	movs	r2, #6
 8003b4c:	68f8      	ldr	r0, [r7, #12]
 8003b4e:	f000 f899 	bl	8003c84 <_ZN12request_type6CRC_16EPhhS0_>
    request_length = 8;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2208      	movs	r2, #8
 8003b56:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
    //calculate response length
    response_length = (byte)(data[2] << 1) + 5; //multiple for 2 and plus 5
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	3302      	adds	r3, #2
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	3305      	adds	r3, #5
 8003b66:	b2da      	uxtb	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
}
 8003b6e:	bf00      	nop
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <_ZN12request_type19function_05_handlerEPhi>:
void request_type::function_05_handler(byte *data, int length) //read coil status
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b084      	sub	sp, #16
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	60f8      	str	r0, [r7, #12]
 8003b7e:	60b9      	str	r1, [r7, #8]
 8003b80:	607a      	str	r2, [r7, #4]
    //receive format:  [register_address: 2 bytes] [value of register: 1 byte(0 or 255)]
    //total 3 bytes
    request_packet[0] = modbus_address;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2201      	movs	r2, #1
 8003b86:	715a      	strb	r2, [r3, #5]
    request_packet[1] = 0x05;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2205      	movs	r2, #5
 8003b8c:	719a      	strb	r2, [r3, #6]
    request_packet[2] = data[0];	start_address[0] = data[0];
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	781a      	ldrb	r2, [r3, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	71da      	strb	r2, [r3, #7]
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	781a      	ldrb	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	701a      	strb	r2, [r3, #0]
    request_packet[3] = data[1];	start_address[1] = data[1];
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	785a      	ldrb	r2, [r3, #1]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	721a      	strb	r2, [r3, #8]
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	785a      	ldrb	r2, [r3, #1]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	705a      	strb	r2, [r3, #1]
    request_packet[4] = data[2]; 
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	789a      	ldrb	r2, [r3, #2]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	725a      	strb	r2, [r3, #9]
    request_packet[5] = 0x00;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	729a      	strb	r2, [r3, #10]
    CRC_16(request_packet, 6, &request_packet[6]);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	1d59      	adds	r1, r3, #5
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	330b      	adds	r3, #11
 8003bc4:	2206      	movs	r2, #6
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f000 f85c 	bl	8003c84 <_ZN12request_type6CRC_16EPhhS0_>
    request_length = 8;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2208      	movs	r2, #8
 8003bd0:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
    //calculate response length
    response_length = 8;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2208      	movs	r2, #8
 8003bd8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
}
 8003bdc:	bf00      	nop
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <_ZN12request_type19function_10_handlerEPhi>:
void request_type::function_10_handler(byte *data, int length) //read coil status
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b086      	sub	sp, #24
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
    //receive format:  [register_address: 2 bytes] [number of register: 1 byte] [register value: number of registers x2 bytes]
    //total 3 bytes
    request_packet[0] = modbus_address;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	715a      	strb	r2, [r3, #5]
    request_packet[1] = 0x10;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2210      	movs	r2, #16
 8003bfa:	719a      	strb	r2, [r3, #6]
    request_packet[2] = data[0];	start_address[0] = data[0];
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	781a      	ldrb	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	71da      	strb	r2, [r3, #7]
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	781a      	ldrb	r2, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	701a      	strb	r2, [r3, #0]
    request_packet[3] = data[1];  start_address[1] = data[1];
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	785a      	ldrb	r2, [r3, #1]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	721a      	strb	r2, [r3, #8]
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	785a      	ldrb	r2, [r3, #1]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	705a      	strb	r2, [r3, #1]
    request_packet[4] = 0x00; //just in this case, the total of register cant overcome 255
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	725a      	strb	r2, [r3, #9]
    request_packet[5] = (byte)data[2];
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	789a      	ldrb	r2, [r3, #2]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	729a      	strb	r2, [r3, #10]
    byte number_of_bytes = (byte)(data[2] << 1);
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	3302      	adds	r3, #2
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	75fb      	strb	r3, [r7, #23]
    request_packet[6] = number_of_bytes; //number of content bytes = number of registers x 2
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	7dfa      	ldrb	r2, [r7, #23]
 8003c38:	72da      	strb	r2, [r3, #11]
    memcpy(&request_packet[7], &data[3], number_of_bytes);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f103 000c 	add.w	r0, r3, #12
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	3303      	adds	r3, #3
 8003c44:	7dfa      	ldrb	r2, [r7, #23]
 8003c46:	4619      	mov	r1, r3
 8003c48:	f000 f8e8 	bl	8003e1c <memcpy>
    CRC_16(request_packet, number_of_bytes + 7, &request_packet[7 + number_of_bytes]);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	1d59      	adds	r1, r3, #5
 8003c50:	7dfb      	ldrb	r3, [r7, #23]
 8003c52:	3307      	adds	r3, #7
 8003c54:	b2d8      	uxtb	r0, r3
 8003c56:	7dfb      	ldrb	r3, [r7, #23]
 8003c58:	3307      	adds	r3, #7
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	3305      	adds	r3, #5
 8003c60:	4602      	mov	r2, r0
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f000 f80e 	bl	8003c84 <_ZN12request_type6CRC_16EPhhS0_>
    request_length = number_of_bytes + 9;
 8003c68:	7dfb      	ldrb	r3, [r7, #23]
 8003c6a:	3309      	adds	r3, #9
 8003c6c:	b2da      	uxtb	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
    //calculate response length
    response_length = 8;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2208      	movs	r2, #8
 8003c78:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
}
 8003c7c:	bf00      	nop
 8003c7e:	3718      	adds	r7, #24
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <_ZN12request_type6CRC_16EPhhS0_>:
void request_type::CRC_16(byte* input, byte Length, byte* output)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b087      	sub	sp, #28
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	603b      	str	r3, [r7, #0]
 8003c90:	4613      	mov	r3, r2
 8003c92:	71fb      	strb	r3, [r7, #7]
	uint16_t reg_crc = 0xffff;
 8003c94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c98:	82fb      	strh	r3, [r7, #22]
	for(byte i = 0; i< Length; i++) {
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	757b      	strb	r3, [r7, #21]
 8003c9e:	7d7a      	ldrb	r2, [r7, #21]
 8003ca0:	79fb      	ldrb	r3, [r7, #7]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d224      	bcs.n	8003cf0 <_ZN12request_type6CRC_16EPhhS0_+0x6c>
		reg_crc ^= input[i];
 8003ca6:	7d7b      	ldrb	r3, [r7, #21]
 8003ca8:	68ba      	ldr	r2, [r7, #8]
 8003caa:	4413      	add	r3, r2
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	8afb      	ldrh	r3, [r7, #22]
 8003cb2:	4053      	eors	r3, r2
 8003cb4:	82fb      	strh	r3, [r7, #22]
		for(byte j = 0; j < 8; j++) {
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	753b      	strb	r3, [r7, #20]
 8003cba:	7d3b      	ldrb	r3, [r7, #20]
 8003cbc:	2b07      	cmp	r3, #7
 8003cbe:	d813      	bhi.n	8003ce8 <_ZN12request_type6CRC_16EPhhS0_+0x64>
			if((reg_crc & 0x0001) == 1) reg_crc = (uint16_t)((reg_crc >> 1) ^ 0xA001);
 8003cc0:	8afb      	ldrh	r3, [r7, #22]
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d007      	beq.n	8003cda <_ZN12request_type6CRC_16EPhhS0_+0x56>
 8003cca:	8afb      	ldrh	r3, [r7, #22]
 8003ccc:	105b      	asrs	r3, r3, #1
 8003cce:	b21a      	sxth	r2, r3
 8003cd0:	4b0f      	ldr	r3, [pc, #60]	; (8003d10 <_ZN12request_type6CRC_16EPhhS0_+0x8c>)
 8003cd2:	4053      	eors	r3, r2
 8003cd4:	b21b      	sxth	r3, r3
 8003cd6:	82fb      	strh	r3, [r7, #22]
 8003cd8:	e002      	b.n	8003ce0 <_ZN12request_type6CRC_16EPhhS0_+0x5c>
			else reg_crc = (uint16_t)(reg_crc >> 1);
 8003cda:	8afb      	ldrh	r3, [r7, #22]
 8003cdc:	105b      	asrs	r3, r3, #1
 8003cde:	82fb      	strh	r3, [r7, #22]
		for(byte j = 0; j < 8; j++) {
 8003ce0:	7d3b      	ldrb	r3, [r7, #20]
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	753b      	strb	r3, [r7, #20]
 8003ce6:	e7e8      	b.n	8003cba <_ZN12request_type6CRC_16EPhhS0_+0x36>
	for(byte i = 0; i< Length; i++) {
 8003ce8:	7d7b      	ldrb	r3, [r7, #21]
 8003cea:	3301      	adds	r3, #1
 8003cec:	757b      	strb	r3, [r7, #21]
 8003cee:	e7d6      	b.n	8003c9e <_ZN12request_type6CRC_16EPhhS0_+0x1a>
		}
	}
	output[1] = (byte)((reg_crc >> 8) & 0xff);
 8003cf0:	8afb      	ldrh	r3, [r7, #22]
 8003cf2:	0a1b      	lsrs	r3, r3, #8
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	b2d2      	uxtb	r2, r2
 8003cfc:	701a      	strb	r2, [r3, #0]
	output[0] = (byte)(reg_crc & 0xff);	
 8003cfe:	8afb      	ldrh	r3, [r7, #22]
 8003d00:	b2da      	uxtb	r2, r3
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	701a      	strb	r2, [r3, #0]
}
 8003d06:	bf00      	nop
 8003d08:	371c      	adds	r7, #28
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bc80      	pop	{r7}
 8003d0e:	4770      	bx	lr
 8003d10:	ffffa001 	.word	0xffffa001

08003d14 <_ZN12request_type13is_data_validEv>:
bool request_type::is_data_valid()
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
	if (is_data_received == true){
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	789b      	ldrb	r3, [r3, #2]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d014      	beq.n	8003d4e <_ZN12request_type13is_data_validEv+0x3a>
		byte temper_check[2];
		CRC_16(response_packet, response_length, temper_check);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f103 0123 	add.w	r1, r3, #35	; 0x23
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f893 20a4 	ldrb.w	r2, [r3, #164]	; 0xa4
 8003d30:	f107 030c 	add.w	r3, r7, #12
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f7ff ffa5 	bl	8003c84 <_ZN12request_type6CRC_16EPhhS0_>
		return ((temper_check[0] == 0) && (temper_check[1] == 0))?true:false;
 8003d3a:	7b3b      	ldrb	r3, [r7, #12]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d104      	bne.n	8003d4a <_ZN12request_type13is_data_validEv+0x36>
 8003d40:	7b7b      	ldrb	r3, [r7, #13]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <_ZN12request_type13is_data_validEv+0x36>
 8003d46:	2301      	movs	r3, #1
 8003d48:	e002      	b.n	8003d50 <_ZN12request_type13is_data_validEv+0x3c>
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	e000      	b.n	8003d50 <_ZN12request_type13is_data_validEv+0x3c>
	}else{
		return false;
 8003d4e:	2300      	movs	r3, #0
	}

}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <_ZdaPv>:
 8003d58:	f000 b81c 	b.w	8003d94 <_ZdlPv>

08003d5c <_Znaj>:
 8003d5c:	f000 b800 	b.w	8003d60 <_Znwj>

08003d60 <_Znwj>:
 8003d60:	b510      	push	{r4, lr}
 8003d62:	2800      	cmp	r0, #0
 8003d64:	bf14      	ite	ne
 8003d66:	4604      	movne	r4, r0
 8003d68:	2401      	moveq	r4, #1
 8003d6a:	4620      	mov	r0, r4
 8003d6c:	f000 f846 	bl	8003dfc <malloc>
 8003d70:	b930      	cbnz	r0, 8003d80 <_Znwj+0x20>
 8003d72:	f000 f807 	bl	8003d84 <_ZSt15get_new_handlerv>
 8003d76:	b908      	cbnz	r0, 8003d7c <_Znwj+0x1c>
 8003d78:	f000 f80e 	bl	8003d98 <abort>
 8003d7c:	4780      	blx	r0
 8003d7e:	e7f4      	b.n	8003d6a <_Znwj+0xa>
 8003d80:	bd10      	pop	{r4, pc}
	...

08003d84 <_ZSt15get_new_handlerv>:
 8003d84:	4b02      	ldr	r3, [pc, #8]	; (8003d90 <_ZSt15get_new_handlerv+0xc>)
 8003d86:	6818      	ldr	r0, [r3, #0]
 8003d88:	f3bf 8f5b 	dmb	ish
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	20000388 	.word	0x20000388

08003d94 <_ZdlPv>:
 8003d94:	f000 b83a 	b.w	8003e0c <free>

08003d98 <abort>:
 8003d98:	b508      	push	{r3, lr}
 8003d9a:	2006      	movs	r0, #6
 8003d9c:	f000 f930 	bl	8004000 <raise>
 8003da0:	2001      	movs	r0, #1
 8003da2:	f7fc fdae 	bl	8000902 <_exit>
	...

08003da8 <__errno>:
 8003da8:	4b01      	ldr	r3, [pc, #4]	; (8003db0 <__errno+0x8>)
 8003daa:	6818      	ldr	r0, [r3, #0]
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	2000000c 	.word	0x2000000c

08003db4 <__libc_init_array>:
 8003db4:	b570      	push	{r4, r5, r6, lr}
 8003db6:	2500      	movs	r5, #0
 8003db8:	4e0c      	ldr	r6, [pc, #48]	; (8003dec <__libc_init_array+0x38>)
 8003dba:	4c0d      	ldr	r4, [pc, #52]	; (8003df0 <__libc_init_array+0x3c>)
 8003dbc:	1ba4      	subs	r4, r4, r6
 8003dbe:	10a4      	asrs	r4, r4, #2
 8003dc0:	42a5      	cmp	r5, r4
 8003dc2:	d109      	bne.n	8003dd8 <__libc_init_array+0x24>
 8003dc4:	f000 f93a 	bl	800403c <_init>
 8003dc8:	2500      	movs	r5, #0
 8003dca:	4e0a      	ldr	r6, [pc, #40]	; (8003df4 <__libc_init_array+0x40>)
 8003dcc:	4c0a      	ldr	r4, [pc, #40]	; (8003df8 <__libc_init_array+0x44>)
 8003dce:	1ba4      	subs	r4, r4, r6
 8003dd0:	10a4      	asrs	r4, r4, #2
 8003dd2:	42a5      	cmp	r5, r4
 8003dd4:	d105      	bne.n	8003de2 <__libc_init_array+0x2e>
 8003dd6:	bd70      	pop	{r4, r5, r6, pc}
 8003dd8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ddc:	4798      	blx	r3
 8003dde:	3501      	adds	r5, #1
 8003de0:	e7ee      	b.n	8003dc0 <__libc_init_array+0xc>
 8003de2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003de6:	4798      	blx	r3
 8003de8:	3501      	adds	r5, #1
 8003dea:	e7f2      	b.n	8003dd2 <__libc_init_array+0x1e>
 8003dec:	08004080 	.word	0x08004080
 8003df0:	08004080 	.word	0x08004080
 8003df4:	08004080 	.word	0x08004080
 8003df8:	08004090 	.word	0x08004090

08003dfc <malloc>:
 8003dfc:	4b02      	ldr	r3, [pc, #8]	; (8003e08 <malloc+0xc>)
 8003dfe:	4601      	mov	r1, r0
 8003e00:	6818      	ldr	r0, [r3, #0]
 8003e02:	f000 b86b 	b.w	8003edc <_malloc_r>
 8003e06:	bf00      	nop
 8003e08:	2000000c 	.word	0x2000000c

08003e0c <free>:
 8003e0c:	4b02      	ldr	r3, [pc, #8]	; (8003e18 <free+0xc>)
 8003e0e:	4601      	mov	r1, r0
 8003e10:	6818      	ldr	r0, [r3, #0]
 8003e12:	f000 b817 	b.w	8003e44 <_free_r>
 8003e16:	bf00      	nop
 8003e18:	2000000c 	.word	0x2000000c

08003e1c <memcpy>:
 8003e1c:	b510      	push	{r4, lr}
 8003e1e:	1e43      	subs	r3, r0, #1
 8003e20:	440a      	add	r2, r1
 8003e22:	4291      	cmp	r1, r2
 8003e24:	d100      	bne.n	8003e28 <memcpy+0xc>
 8003e26:	bd10      	pop	{r4, pc}
 8003e28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e30:	e7f7      	b.n	8003e22 <memcpy+0x6>

08003e32 <memset>:
 8003e32:	4603      	mov	r3, r0
 8003e34:	4402      	add	r2, r0
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d100      	bne.n	8003e3c <memset+0xa>
 8003e3a:	4770      	bx	lr
 8003e3c:	f803 1b01 	strb.w	r1, [r3], #1
 8003e40:	e7f9      	b.n	8003e36 <memset+0x4>
	...

08003e44 <_free_r>:
 8003e44:	b538      	push	{r3, r4, r5, lr}
 8003e46:	4605      	mov	r5, r0
 8003e48:	2900      	cmp	r1, #0
 8003e4a:	d043      	beq.n	8003ed4 <_free_r+0x90>
 8003e4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e50:	1f0c      	subs	r4, r1, #4
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	bfb8      	it	lt
 8003e56:	18e4      	addlt	r4, r4, r3
 8003e58:	f000 f8ee 	bl	8004038 <__malloc_lock>
 8003e5c:	4a1e      	ldr	r2, [pc, #120]	; (8003ed8 <_free_r+0x94>)
 8003e5e:	6813      	ldr	r3, [r2, #0]
 8003e60:	4610      	mov	r0, r2
 8003e62:	b933      	cbnz	r3, 8003e72 <_free_r+0x2e>
 8003e64:	6063      	str	r3, [r4, #4]
 8003e66:	6014      	str	r4, [r2, #0]
 8003e68:	4628      	mov	r0, r5
 8003e6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e6e:	f000 b8e4 	b.w	800403a <__malloc_unlock>
 8003e72:	42a3      	cmp	r3, r4
 8003e74:	d90b      	bls.n	8003e8e <_free_r+0x4a>
 8003e76:	6821      	ldr	r1, [r4, #0]
 8003e78:	1862      	adds	r2, r4, r1
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	bf01      	itttt	eq
 8003e7e:	681a      	ldreq	r2, [r3, #0]
 8003e80:	685b      	ldreq	r3, [r3, #4]
 8003e82:	1852      	addeq	r2, r2, r1
 8003e84:	6022      	streq	r2, [r4, #0]
 8003e86:	6063      	str	r3, [r4, #4]
 8003e88:	6004      	str	r4, [r0, #0]
 8003e8a:	e7ed      	b.n	8003e68 <_free_r+0x24>
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	b10a      	cbz	r2, 8003e96 <_free_r+0x52>
 8003e92:	42a2      	cmp	r2, r4
 8003e94:	d9fa      	bls.n	8003e8c <_free_r+0x48>
 8003e96:	6819      	ldr	r1, [r3, #0]
 8003e98:	1858      	adds	r0, r3, r1
 8003e9a:	42a0      	cmp	r0, r4
 8003e9c:	d10b      	bne.n	8003eb6 <_free_r+0x72>
 8003e9e:	6820      	ldr	r0, [r4, #0]
 8003ea0:	4401      	add	r1, r0
 8003ea2:	1858      	adds	r0, r3, r1
 8003ea4:	4282      	cmp	r2, r0
 8003ea6:	6019      	str	r1, [r3, #0]
 8003ea8:	d1de      	bne.n	8003e68 <_free_r+0x24>
 8003eaa:	6810      	ldr	r0, [r2, #0]
 8003eac:	6852      	ldr	r2, [r2, #4]
 8003eae:	4401      	add	r1, r0
 8003eb0:	6019      	str	r1, [r3, #0]
 8003eb2:	605a      	str	r2, [r3, #4]
 8003eb4:	e7d8      	b.n	8003e68 <_free_r+0x24>
 8003eb6:	d902      	bls.n	8003ebe <_free_r+0x7a>
 8003eb8:	230c      	movs	r3, #12
 8003eba:	602b      	str	r3, [r5, #0]
 8003ebc:	e7d4      	b.n	8003e68 <_free_r+0x24>
 8003ebe:	6820      	ldr	r0, [r4, #0]
 8003ec0:	1821      	adds	r1, r4, r0
 8003ec2:	428a      	cmp	r2, r1
 8003ec4:	bf01      	itttt	eq
 8003ec6:	6811      	ldreq	r1, [r2, #0]
 8003ec8:	6852      	ldreq	r2, [r2, #4]
 8003eca:	1809      	addeq	r1, r1, r0
 8003ecc:	6021      	streq	r1, [r4, #0]
 8003ece:	6062      	str	r2, [r4, #4]
 8003ed0:	605c      	str	r4, [r3, #4]
 8003ed2:	e7c9      	b.n	8003e68 <_free_r+0x24>
 8003ed4:	bd38      	pop	{r3, r4, r5, pc}
 8003ed6:	bf00      	nop
 8003ed8:	2000038c 	.word	0x2000038c

08003edc <_malloc_r>:
 8003edc:	b570      	push	{r4, r5, r6, lr}
 8003ede:	1ccd      	adds	r5, r1, #3
 8003ee0:	f025 0503 	bic.w	r5, r5, #3
 8003ee4:	3508      	adds	r5, #8
 8003ee6:	2d0c      	cmp	r5, #12
 8003ee8:	bf38      	it	cc
 8003eea:	250c      	movcc	r5, #12
 8003eec:	2d00      	cmp	r5, #0
 8003eee:	4606      	mov	r6, r0
 8003ef0:	db01      	blt.n	8003ef6 <_malloc_r+0x1a>
 8003ef2:	42a9      	cmp	r1, r5
 8003ef4:	d903      	bls.n	8003efe <_malloc_r+0x22>
 8003ef6:	230c      	movs	r3, #12
 8003ef8:	6033      	str	r3, [r6, #0]
 8003efa:	2000      	movs	r0, #0
 8003efc:	bd70      	pop	{r4, r5, r6, pc}
 8003efe:	f000 f89b 	bl	8004038 <__malloc_lock>
 8003f02:	4a21      	ldr	r2, [pc, #132]	; (8003f88 <_malloc_r+0xac>)
 8003f04:	6814      	ldr	r4, [r2, #0]
 8003f06:	4621      	mov	r1, r4
 8003f08:	b991      	cbnz	r1, 8003f30 <_malloc_r+0x54>
 8003f0a:	4c20      	ldr	r4, [pc, #128]	; (8003f8c <_malloc_r+0xb0>)
 8003f0c:	6823      	ldr	r3, [r4, #0]
 8003f0e:	b91b      	cbnz	r3, 8003f18 <_malloc_r+0x3c>
 8003f10:	4630      	mov	r0, r6
 8003f12:	f000 f83d 	bl	8003f90 <_sbrk_r>
 8003f16:	6020      	str	r0, [r4, #0]
 8003f18:	4629      	mov	r1, r5
 8003f1a:	4630      	mov	r0, r6
 8003f1c:	f000 f838 	bl	8003f90 <_sbrk_r>
 8003f20:	1c43      	adds	r3, r0, #1
 8003f22:	d124      	bne.n	8003f6e <_malloc_r+0x92>
 8003f24:	230c      	movs	r3, #12
 8003f26:	4630      	mov	r0, r6
 8003f28:	6033      	str	r3, [r6, #0]
 8003f2a:	f000 f886 	bl	800403a <__malloc_unlock>
 8003f2e:	e7e4      	b.n	8003efa <_malloc_r+0x1e>
 8003f30:	680b      	ldr	r3, [r1, #0]
 8003f32:	1b5b      	subs	r3, r3, r5
 8003f34:	d418      	bmi.n	8003f68 <_malloc_r+0x8c>
 8003f36:	2b0b      	cmp	r3, #11
 8003f38:	d90f      	bls.n	8003f5a <_malloc_r+0x7e>
 8003f3a:	600b      	str	r3, [r1, #0]
 8003f3c:	18cc      	adds	r4, r1, r3
 8003f3e:	50cd      	str	r5, [r1, r3]
 8003f40:	4630      	mov	r0, r6
 8003f42:	f000 f87a 	bl	800403a <__malloc_unlock>
 8003f46:	f104 000b 	add.w	r0, r4, #11
 8003f4a:	1d23      	adds	r3, r4, #4
 8003f4c:	f020 0007 	bic.w	r0, r0, #7
 8003f50:	1ac3      	subs	r3, r0, r3
 8003f52:	d0d3      	beq.n	8003efc <_malloc_r+0x20>
 8003f54:	425a      	negs	r2, r3
 8003f56:	50e2      	str	r2, [r4, r3]
 8003f58:	e7d0      	b.n	8003efc <_malloc_r+0x20>
 8003f5a:	684b      	ldr	r3, [r1, #4]
 8003f5c:	428c      	cmp	r4, r1
 8003f5e:	bf16      	itet	ne
 8003f60:	6063      	strne	r3, [r4, #4]
 8003f62:	6013      	streq	r3, [r2, #0]
 8003f64:	460c      	movne	r4, r1
 8003f66:	e7eb      	b.n	8003f40 <_malloc_r+0x64>
 8003f68:	460c      	mov	r4, r1
 8003f6a:	6849      	ldr	r1, [r1, #4]
 8003f6c:	e7cc      	b.n	8003f08 <_malloc_r+0x2c>
 8003f6e:	1cc4      	adds	r4, r0, #3
 8003f70:	f024 0403 	bic.w	r4, r4, #3
 8003f74:	42a0      	cmp	r0, r4
 8003f76:	d005      	beq.n	8003f84 <_malloc_r+0xa8>
 8003f78:	1a21      	subs	r1, r4, r0
 8003f7a:	4630      	mov	r0, r6
 8003f7c:	f000 f808 	bl	8003f90 <_sbrk_r>
 8003f80:	3001      	adds	r0, #1
 8003f82:	d0cf      	beq.n	8003f24 <_malloc_r+0x48>
 8003f84:	6025      	str	r5, [r4, #0]
 8003f86:	e7db      	b.n	8003f40 <_malloc_r+0x64>
 8003f88:	2000038c 	.word	0x2000038c
 8003f8c:	20000390 	.word	0x20000390

08003f90 <_sbrk_r>:
 8003f90:	b538      	push	{r3, r4, r5, lr}
 8003f92:	2300      	movs	r3, #0
 8003f94:	4c05      	ldr	r4, [pc, #20]	; (8003fac <_sbrk_r+0x1c>)
 8003f96:	4605      	mov	r5, r0
 8003f98:	4608      	mov	r0, r1
 8003f9a:	6023      	str	r3, [r4, #0]
 8003f9c:	f7fc fcbc 	bl	8000918 <_sbrk>
 8003fa0:	1c43      	adds	r3, r0, #1
 8003fa2:	d102      	bne.n	8003faa <_sbrk_r+0x1a>
 8003fa4:	6823      	ldr	r3, [r4, #0]
 8003fa6:	b103      	cbz	r3, 8003faa <_sbrk_r+0x1a>
 8003fa8:	602b      	str	r3, [r5, #0]
 8003faa:	bd38      	pop	{r3, r4, r5, pc}
 8003fac:	200005f8 	.word	0x200005f8

08003fb0 <_raise_r>:
 8003fb0:	291f      	cmp	r1, #31
 8003fb2:	b538      	push	{r3, r4, r5, lr}
 8003fb4:	4604      	mov	r4, r0
 8003fb6:	460d      	mov	r5, r1
 8003fb8:	d904      	bls.n	8003fc4 <_raise_r+0x14>
 8003fba:	2316      	movs	r3, #22
 8003fbc:	6003      	str	r3, [r0, #0]
 8003fbe:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc2:	bd38      	pop	{r3, r4, r5, pc}
 8003fc4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003fc6:	b112      	cbz	r2, 8003fce <_raise_r+0x1e>
 8003fc8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003fcc:	b94b      	cbnz	r3, 8003fe2 <_raise_r+0x32>
 8003fce:	4620      	mov	r0, r4
 8003fd0:	f000 f830 	bl	8004034 <_getpid_r>
 8003fd4:	462a      	mov	r2, r5
 8003fd6:	4601      	mov	r1, r0
 8003fd8:	4620      	mov	r0, r4
 8003fda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003fde:	f000 b817 	b.w	8004010 <_kill_r>
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d00a      	beq.n	8003ffc <_raise_r+0x4c>
 8003fe6:	1c59      	adds	r1, r3, #1
 8003fe8:	d103      	bne.n	8003ff2 <_raise_r+0x42>
 8003fea:	2316      	movs	r3, #22
 8003fec:	6003      	str	r3, [r0, #0]
 8003fee:	2001      	movs	r0, #1
 8003ff0:	e7e7      	b.n	8003fc2 <_raise_r+0x12>
 8003ff2:	2400      	movs	r4, #0
 8003ff4:	4628      	mov	r0, r5
 8003ff6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003ffa:	4798      	blx	r3
 8003ffc:	2000      	movs	r0, #0
 8003ffe:	e7e0      	b.n	8003fc2 <_raise_r+0x12>

08004000 <raise>:
 8004000:	4b02      	ldr	r3, [pc, #8]	; (800400c <raise+0xc>)
 8004002:	4601      	mov	r1, r0
 8004004:	6818      	ldr	r0, [r3, #0]
 8004006:	f7ff bfd3 	b.w	8003fb0 <_raise_r>
 800400a:	bf00      	nop
 800400c:	2000000c 	.word	0x2000000c

08004010 <_kill_r>:
 8004010:	b538      	push	{r3, r4, r5, lr}
 8004012:	2300      	movs	r3, #0
 8004014:	4c06      	ldr	r4, [pc, #24]	; (8004030 <_kill_r+0x20>)
 8004016:	4605      	mov	r5, r0
 8004018:	4608      	mov	r0, r1
 800401a:	4611      	mov	r1, r2
 800401c:	6023      	str	r3, [r4, #0]
 800401e:	f7fc fc60 	bl	80008e2 <_kill>
 8004022:	1c43      	adds	r3, r0, #1
 8004024:	d102      	bne.n	800402c <_kill_r+0x1c>
 8004026:	6823      	ldr	r3, [r4, #0]
 8004028:	b103      	cbz	r3, 800402c <_kill_r+0x1c>
 800402a:	602b      	str	r3, [r5, #0]
 800402c:	bd38      	pop	{r3, r4, r5, pc}
 800402e:	bf00      	nop
 8004030:	200005f8 	.word	0x200005f8

08004034 <_getpid_r>:
 8004034:	f7fc bc4e 	b.w	80008d4 <_getpid>

08004038 <__malloc_lock>:
 8004038:	4770      	bx	lr

0800403a <__malloc_unlock>:
 800403a:	4770      	bx	lr

0800403c <_init>:
 800403c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800403e:	bf00      	nop
 8004040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004042:	bc08      	pop	{r3}
 8004044:	469e      	mov	lr, r3
 8004046:	4770      	bx	lr

08004048 <_fini>:
 8004048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800404a:	bf00      	nop
 800404c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800404e:	bc08      	pop	{r3}
 8004050:	469e      	mov	lr, r3
 8004052:	4770      	bx	lr
