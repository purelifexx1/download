
DMA_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001aadc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a40  0801ac70  0801ac70  0002ac70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b6b0  0801b6b0  00030fe0  2**0
                  CONTENTS
  4 .ARM          00000008  0801b6b0  0801b6b0  0002b6b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b6b8  0801b6b8  00030fe0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b6b8  0801b6b8  0002b6b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b6bc  0801b6bc  0002b6bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000fe0  20000000  0801b6c0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005e54  20000fe0  0801c6a0  00030fe0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20006e34  0801c6a0  00036e34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030fe0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e1d1  00000000  00000000  00031010  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006217  00000000  00000000  0005f1e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001d48  00000000  00000000  000653f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001af0  00000000  00000000  00067140  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000299d2  00000000  00000000  00068c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001f1ac  00000000  00000000  00092602  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dcb53  00000000  00000000  000b17ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018e301  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008998  00000000  00000000  0018e37c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000fe0 	.word	0x20000fe0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801ac54 	.word	0x0801ac54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000fe4 	.word	0x20000fe4
 80001cc:	0801ac54 	.word	0x0801ac54

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <commandRead>:
												"STOP",
												"ERRO",
												"OKAY"};


Robot_CommandTypedef 	commandRead	(uint8_t *message, int32_t length, int32_t *id_command, DUTY_Command_TypeDef *duty_cmd) {
 8000f88:	b590      	push	{r4, r7, lr}
 8000f8a:	b08d      	sub	sp, #52	; 0x34
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
 8000f94:	603b      	str	r3, [r7, #0]
	Transfer_Protocol protocol_id = message[0];
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    Robot_CommandTypedef command_id = message[1];
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	785b      	ldrb	r3, [r3, #1]
 8000fa2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    duty_cmd->id_command = command_id;
 8000fa6:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	609a      	str	r2, [r3, #8]
	int32_t temp_pointer = 2;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	62bb      	str	r3, [r7, #40]	; 0x28
    switch(protocol_id) 
 8000fb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	f000 819c 	beq.w	80012f4 <commandRead+0x36c>
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	f040 8197 	bne.w	80012f0 <commandRead+0x368>
        break;

        // command control from pc
        case COMMAND_TRANSMISION:
        {
            switch(command_id)
 8000fc2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000fc6:	2b14      	cmp	r3, #20
 8000fc8:	f200 8190 	bhi.w	80012ec <commandRead+0x364>
 8000fcc:	a201      	add	r2, pc, #4	; (adr r2, 8000fd4 <commandRead+0x4c>)
 8000fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fd2:	bf00      	nop
 8000fd4:	08001029 	.word	0x08001029
 8000fd8:	0800103f 	.word	0x0800103f
 8000fdc:	08001055 	.word	0x08001055
 8000fe0:	080010e7 	.word	0x080010e7
 8000fe4:	080011f9 	.word	0x080011f9
 8000fe8:	080011fd 	.word	0x080011fd
 8000fec:	08001201 	.word	0x08001201
 8000ff0:	08001205 	.word	0x08001205
 8000ff4:	080012ed 	.word	0x080012ed
 8000ff8:	08001225 	.word	0x08001225
 8000ffc:	08001229 	.word	0x08001229
 8001000:	080012ed 	.word	0x080012ed
 8001004:	080012ed 	.word	0x080012ed
 8001008:	080012ed 	.word	0x080012ed
 800100c:	080012ed 	.word	0x080012ed
 8001010:	080012ed 	.word	0x080012ed
 8001014:	080012ed 	.word	0x080012ed
 8001018:	080012ed 	.word	0x080012ed
 800101c:	080012ed 	.word	0x080012ed
 8001020:	08001291 	.word	0x08001291
 8001024:	080012bb 	.word	0x080012bb
            {
                // Stop now
                case CMD_STOPNOW:
                {
                    duty_cmd->robot_mode = SCARA_MODE_STOP;
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	2200      	movs	r2, #0
 800102c:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	2201      	movs	r2, #1
 8001032:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	2200      	movs	r2, #0
 8001038:	701a      	strb	r2, [r3, #0]
                    return CMD_STOPNOW;
 800103a:	2300      	movs	r3, #0
 800103c:	e15b      	b.n	80012f6 <commandRead+0x36e>
                break;

                // Scan limit
                case CMD_SCAN_LIMIT:
                {
                    duty_cmd->robot_mode = SCARA_MODE_SCAN;
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	2201      	movs	r2, #1
 8001042:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	2201      	movs	r2, #1
 8001048:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	2200      	movs	r2, #0
 800104e:	701a      	strb	r2, [r3, #0]
                    return CMD_SCAN_LIMIT;
 8001050:	2301      	movs	r3, #1
 8001052:	e150      	b.n	80012f6 <commandRead+0x36e>
                break;

                // Move home
                case CMD_MOVE_HOME:
                {
                    if (length == 18){ // 2 double number + 2 define byte
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	2b12      	cmp	r3, #18
 8001058:	d143      	bne.n	80010e2 <commandRead+0x15a>
                        memcpy(&duty_cmd->v_factor, &message[temp_pointer+=8], 8);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	f503 70cc 	add.w	r0, r3, #408	; 0x198
 8001060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001062:	3308      	adds	r3, #8
 8001064:	62bb      	str	r3, [r7, #40]	; 0x28
 8001066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001068:	68fa      	ldr	r2, [r7, #12]
 800106a:	4413      	add	r3, r2
 800106c:	2208      	movs	r2, #8
 800106e:	4619      	mov	r1, r3
 8001070:	f014 fb7e 	bl	8015770 <memcpy>
						memcpy(&duty_cmd->a_factor, &message[temp_pointer], 8); 
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	f503 70d0 	add.w	r0, r3, #416	; 0x1a0
 800107a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800107c:	68fa      	ldr	r2, [r7, #12]
 800107e:	4413      	add	r3, r2
 8001080:	2208      	movs	r2, #8
 8001082:	4619      	mov	r1, r3
 8001084:	f014 fb74 	bl	8015770 <memcpy>
						// duty_cmd->v_factor = (*(int32_t*)(&message[temp_pointer+=8])*COR_INVERSE_SCALE;
						// duty_cmd->a_factor = (*(int32_t*)(&message[temp_pointer])*COR_INVERSE_SCALE;
                    }else{
                        return CMD_ERROR;
                    }
                    duty_cmd->target_point.x = 250;
 8001088:	683a      	ldr	r2, [r7, #0]
 800108a:	f04f 0300 	mov.w	r3, #0
 800108e:	4c9c      	ldr	r4, [pc, #624]	; (8001300 <commandRead+0x378>)
 8001090:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
                    duty_cmd->target_point.y = -200;
 8001094:	683a      	ldr	r2, [r7, #0]
 8001096:	f04f 0300 	mov.w	r3, #0
 800109a:	4c9a      	ldr	r4, [pc, #616]	; (8001304 <commandRead+0x37c>)
 800109c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
                    duty_cmd->target_point.z = 120;
 80010a0:	683a      	ldr	r2, [r7, #0]
 80010a2:	f04f 0300 	mov.w	r3, #0
 80010a6:	4c98      	ldr	r4, [pc, #608]	; (8001308 <commandRead+0x380>)
 80010a8:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
                    duty_cmd->target_point.roll = 0;
 80010ac:	683a      	ldr	r2, [r7, #0]
 80010ae:	f04f 0300 	mov.w	r3, #0
 80010b2:	f04f 0400 	mov.w	r4, #0
 80010b6:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

                    duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	2200      	movs	r2, #0
 80010be:	745a      	strb	r2, [r3, #17]
                    duty_cmd->space_type = DUTY_SPACE_JOINT;
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	2201      	movs	r2, #1
 80010c4:	735a      	strb	r2, [r3, #13]
                    duty_cmd->joint_type = DUTY_JOINT_4DOF;
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	2201      	movs	r2, #1
 80010ca:	73da      	strb	r2, [r3, #15]
                    duty_cmd->robot_mode = SCARA_MODE_DUTY;
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	2202      	movs	r2, #2
 80010d0:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	2201      	movs	r2, #1
 80010d6:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	2200      	movs	r2, #0
 80010dc:	701a      	strb	r2, [r3, #0]
                    return CMD_MOVE_HOME;
 80010de:	2302      	movs	r3, #2
 80010e0:	e109      	b.n	80012f6 <commandRead+0x36e>
                        return CMD_ERROR;
 80010e2:	2315      	movs	r3, #21
 80010e4:	e107      	b.n	80012f6 <commandRead+0x36e>
                break;

                // Move line
                case CMD_MOVE_LINE:
                {
                    if (length == 51){ // 6 double number + 1 byte number + 2 define byte
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	2b33      	cmp	r3, #51	; 0x33
 80010ea:	f040 8083 	bne.w	80011f4 <commandRead+0x26c>
						scaraSetScanFlag();
 80010ee:	f007 feb3 	bl	8008e58 <scaraSetScanFlag>
						uint8_t mode_init;
						temp_pointer = -6;
 80010f2:	f06f 0305 	mvn.w	r3, #5
 80010f6:	62bb      	str	r3, [r7, #40]	; 0x28
						memcpy(&duty_cmd->target_point.x, &message[temp_pointer+=8], 8);
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	f103 0070 	add.w	r0, r3, #112	; 0x70
 80010fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001100:	3308      	adds	r3, #8
 8001102:	62bb      	str	r3, [r7, #40]	; 0x28
 8001104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	4413      	add	r3, r2
 800110a:	2208      	movs	r2, #8
 800110c:	4619      	mov	r1, r3
 800110e:	f014 fb2f 	bl	8015770 <memcpy>
						memcpy(&duty_cmd->target_point.y, &message[temp_pointer+=8], 8);
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8001118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800111a:	3308      	adds	r3, #8
 800111c:	62bb      	str	r3, [r7, #40]	; 0x28
 800111e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001120:	68fa      	ldr	r2, [r7, #12]
 8001122:	4413      	add	r3, r2
 8001124:	2208      	movs	r2, #8
 8001126:	4619      	mov	r1, r3
 8001128:	f014 fb22 	bl	8015770 <memcpy>
						memcpy(&duty_cmd->target_point.z, &message[temp_pointer+=8], 8);
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	f103 0080 	add.w	r0, r3, #128	; 0x80
 8001132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001134:	3308      	adds	r3, #8
 8001136:	62bb      	str	r3, [r7, #40]	; 0x28
 8001138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	4413      	add	r3, r2
 800113e:	2208      	movs	r2, #8
 8001140:	4619      	mov	r1, r3
 8001142:	f014 fb15 	bl	8015770 <memcpy>
						memcpy(&duty_cmd->target_point.roll, &message[temp_pointer+=8], 8);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	f103 0088 	add.w	r0, r3, #136	; 0x88
 800114c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800114e:	3308      	adds	r3, #8
 8001150:	62bb      	str	r3, [r7, #40]	; 0x28
 8001152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001154:	68fa      	ldr	r2, [r7, #12]
 8001156:	4413      	add	r3, r2
 8001158:	2208      	movs	r2, #8
 800115a:	4619      	mov	r1, r3
 800115c:	f014 fb08 	bl	8015770 <memcpy>
						memcpy(&duty_cmd->v_factor, &message[temp_pointer+=8], 8);
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	f503 70cc 	add.w	r0, r3, #408	; 0x198
 8001166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001168:	3308      	adds	r3, #8
 800116a:	62bb      	str	r3, [r7, #40]	; 0x28
 800116c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800116e:	68fa      	ldr	r2, [r7, #12]
 8001170:	4413      	add	r3, r2
 8001172:	2208      	movs	r2, #8
 8001174:	4619      	mov	r1, r3
 8001176:	f014 fafb 	bl	8015770 <memcpy>
						mode_init = message[temp_pointer+=1];
 800117a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800117c:	3301      	adds	r3, #1
 800117e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001182:	68fa      	ldr	r2, [r7, #12]
 8001184:	4413      	add	r3, r2
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	74fb      	strb	r3, [r7, #19]

						if(mode_init == DUTY_MODE_INIT_QVA){
 800118a:	7cfb      	ldrb	r3, [r7, #19]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d10d      	bne.n	80011ac <commandRead+0x224>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	2200      	movs	r2, #0
 8001194:	745a      	strb	r2, [r3, #17]
							memcpy(&duty_cmd->a_factor, &message[temp_pointer], 8);
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	f503 70d0 	add.w	r0, r3, #416	; 0x1a0
 800119c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	4413      	add	r3, r2
 80011a2:	2208      	movs	r2, #8
 80011a4:	4619      	mov	r1, r3
 80011a6:	f014 fae3 	bl	8015770 <memcpy>
 80011aa:	e012      	b.n	80011d2 <commandRead+0x24a>
						}else if(mode_init == DUTY_MODE_INIT_QVT){
 80011ac:	7cfb      	ldrb	r3, [r7, #19]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d10d      	bne.n	80011ce <commandRead+0x246>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	2201      	movs	r2, #1
 80011b6:	745a      	strb	r2, [r3, #17]
							memcpy(&duty_cmd->time_total, &message[temp_pointer], 8);
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	f103 0020 	add.w	r0, r3, #32
 80011be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011c0:	68fa      	ldr	r2, [r7, #12]
 80011c2:	4413      	add	r3, r2
 80011c4:	2208      	movs	r2, #8
 80011c6:	4619      	mov	r1, r3
 80011c8:	f014 fad2 	bl	8015770 <memcpy>
 80011cc:	e001      	b.n	80011d2 <commandRead+0x24a>
						}else{
							return CMD_ERROR;
 80011ce:	2315      	movs	r3, #21
 80011d0:	e091      	b.n	80012f6 <commandRead+0x36e>
						}
						duty_cmd->path_type = DUTY_PATH_LINE;
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	2200      	movs	r2, #0
 80011d6:	739a      	strb	r2, [r3, #14]
						duty_cmd->space_type = DUTY_SPACE_TASK;
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	2200      	movs	r2, #0
 80011dc:	735a      	strb	r2, [r3, #13]
					}else{
						return CMD_ERROR;
					}
					duty_cmd->robot_mode = SCARA_MODE_DUTY;
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	2202      	movs	r2, #2
 80011e2:	709a      	strb	r2, [r3, #2]
					duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	2201      	movs	r2, #1
 80011e8:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	2200      	movs	r2, #0
 80011ee:	701a      	strb	r2, [r3, #0]
					return CMD_MOVE_LINE;
 80011f0:	2303      	movs	r3, #3
 80011f2:	e080      	b.n	80012f6 <commandRead+0x36e>
						return CMD_ERROR;
 80011f4:	2315      	movs	r3, #21
 80011f6:	e07e      	b.n	80012f6 <commandRead+0x36e>
				break;

				// Move circle
				case CMD_MOVE_CIRCLE:
				{
					return CMD_MOVE_CIRCLE;
 80011f8:	2304      	movs	r3, #4
 80011fa:	e07c      	b.n	80012f6 <commandRead+0x36e>
				break;

				// Move joint
				case CMD_MOVE_JOINT:
				{
					return CMD_MOVE_JOINT;
 80011fc:	2305      	movs	r3, #5
 80011fe:	e07a      	b.n	80012f6 <commandRead+0x36e>
				break;

				// Rotate Single
				case CMD_ROTATE_SINGLE:
				{
					return CMD_ROTATE_SINGLE;
 8001200:	2306      	movs	r3, #6
 8001202:	e078      	b.n	80012f6 <commandRead+0x36e>
				break;

				// Set output
				case CMD_OUTPUT:
				{
					if(length == 3){ // 1 byte output value + 2 byte define
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	2b03      	cmp	r3, #3
 8001208:	d10a      	bne.n	8001220 <commandRead+0x298>
						int temp_pointer = 2;
 800120a:	2302      	movs	r3, #2
 800120c:	617b      	str	r3, [r7, #20]
						duty_cmd->sub_para_int = message[temp_pointer];
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	68fa      	ldr	r2, [r7, #12]
 8001212:	4413      	add	r3, r2
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	461a      	mov	r2, r3
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	615a      	str	r2, [r3, #20]
						return CMD_OUTPUT;
 800121c:	2307      	movs	r3, #7
 800121e:	e06a      	b.n	80012f6 <commandRead+0x36e>
					}else{
						return CMD_ERROR;
 8001220:	2315      	movs	r3, #21
 8001222:	e068      	b.n	80012f6 <commandRead+0x36e>
				break;

				// Read position
				case CMD_READ_POSITION:
				{
					return CMD_READ_POSITION;
 8001224:	2309      	movs	r3, #9
 8001226:	e066      	b.n	80012f6 <commandRead+0x36e>
				break;			

				// Setting
				case CMD_SETTING:
				{
					if (length == 4){ // 2 byte configure + 2 byte define
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	2b04      	cmp	r3, #4
 800122c:	d12e      	bne.n	800128c <commandRead+0x304>
						uint8_t mode_traject;
						uint8_t mode_coordinate;
						mode_coordinate = message[temp_pointer++];
 800122e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001230:	1c5a      	adds	r2, r3, #1
 8001232:	62ba      	str	r2, [r7, #40]	; 0x28
 8001234:	461a      	mov	r2, r3
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	4413      	add	r3, r2
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	76fb      	strb	r3, [r7, #27]
						mode_traject = message[temp_pointer];
 800123e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001240:	68fa      	ldr	r2, [r7, #12]
 8001242:	4413      	add	r3, r2
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	76bb      	strb	r3, [r7, #26]

						if (mode_coordinate == DUTY_COORDINATES_ABS) {
 8001248:	7efb      	ldrb	r3, [r7, #27]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d103      	bne.n	8001256 <commandRead+0x2ce>
							duty_cmd->coordinate_type = DUTY_COORDINATES_ABS;
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	2200      	movs	r2, #0
 8001252:	731a      	strb	r2, [r3, #12]
 8001254:	e008      	b.n	8001268 <commandRead+0x2e0>
						} else if (mode_coordinate == DUTY_COORDINATES_REL) {
 8001256:	7efb      	ldrb	r3, [r7, #27]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d103      	bne.n	8001264 <commandRead+0x2dc>
							duty_cmd->coordinate_type = DUTY_COORDINATES_REL;
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	2201      	movs	r2, #1
 8001260:	731a      	strb	r2, [r3, #12]
 8001262:	e001      	b.n	8001268 <commandRead+0x2e0>
						} else {
							return CMD_ERROR;
 8001264:	2315      	movs	r3, #21
 8001266:	e046      	b.n	80012f6 <commandRead+0x36e>
						}

						if (mode_traject == DUTY_TRAJECTORY_LSPB) {
 8001268:	7ebb      	ldrb	r3, [r7, #26]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d103      	bne.n	8001276 <commandRead+0x2ee>
							duty_cmd->trajec_type = DUTY_TRAJECTORY_LSPB;
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	2200      	movs	r2, #0
 8001272:	741a      	strb	r2, [r3, #16]
 8001274:	e008      	b.n	8001288 <commandRead+0x300>
						} else if (mode_traject == DUTY_TRAJECTORY_SCURVE) {
 8001276:	7ebb      	ldrb	r3, [r7, #26]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d103      	bne.n	8001284 <commandRead+0x2fc>
							duty_cmd->trajec_type = DUTY_TRAJECTORY_SCURVE;
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	2201      	movs	r2, #1
 8001280:	741a      	strb	r2, [r3, #16]
 8001282:	e001      	b.n	8001288 <commandRead+0x300>
						} else {
							return CMD_ERROR;
 8001284:	2315      	movs	r3, #21
 8001286:	e036      	b.n	80012f6 <commandRead+0x36e>
						}
						return CMD_SETTING;
 8001288:	230a      	movs	r3, #10
 800128a:	e034      	b.n	80012f6 <commandRead+0x36e>
					}else{
						return CMD_ERROR;
 800128c:	2315      	movs	r3, #21
 800128e:	e032      	b.n	80012f6 <commandRead+0x36e>
				break;
				
				// Set manual key
				case CMD_KEYBOARD:
				{
					if(length == 3){ // 1 byte output value + 2 byte define
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	2b03      	cmp	r3, #3
 8001294:	d10f      	bne.n	80012b6 <commandRead+0x32e>
						int temp_pointer = 2;
 8001296:	2302      	movs	r3, #2
 8001298:	61fb      	str	r3, [r7, #28]
						duty_cmd->keyboard = (SCARA_KeyTypeDef)message[temp_pointer];
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	68fa      	ldr	r2, [r7, #12]
 800129e:	4413      	add	r3, r2
 80012a0:	781a      	ldrb	r2, [r3, #0]
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	70da      	strb	r2, [r3, #3]
						duty_cmd->robot_method = SCARA_METHOD_MANUAL;
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	2200      	movs	r2, #0
 80012aa:	705a      	strb	r2, [r3, #1]
						duty_cmd->change_method = FALSE;
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	2200      	movs	r2, #0
 80012b0:	701a      	strb	r2, [r3, #0]
						return CMD_KEYBOARD;
 80012b2:	2313      	movs	r3, #19
 80012b4:	e01f      	b.n	80012f6 <commandRead+0x36e>
					}else{
						return CMD_ERROR;
 80012b6:	2315      	movs	r3, #21
 80012b8:	e01d      	b.n	80012f6 <commandRead+0x36e>
				break;

				// Set manual key speed
				case CMD_KEY_SPEED:
				{
					if(length == 3){ // 1 byte key value + 2 byte define
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	2b03      	cmp	r3, #3
 80012be:	d113      	bne.n	80012e8 <commandRead+0x360>
						int temp_pointer = 2;
 80012c0:	2302      	movs	r3, #2
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
						int32_t speed = (int32_t)message[temp_pointer];
 80012c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	4413      	add	r3, r2
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	623b      	str	r3, [r7, #32]
						// check limit
						if ((speed < SHIFT_SPEED_MIN) || (speed > SHIFT_SPPED_MAX)) {
 80012ce:	6a3b      	ldr	r3, [r7, #32]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	dd02      	ble.n	80012da <commandRead+0x352>
 80012d4:	6a3b      	ldr	r3, [r7, #32]
 80012d6:	2b07      	cmp	r3, #7
 80012d8:	dd01      	ble.n	80012de <commandRead+0x356>
							return CMD_ERROR;
 80012da:	2315      	movs	r3, #21
 80012dc:	e00b      	b.n	80012f6 <commandRead+0x36e>
						}
						duty_cmd->key_speed = speed;
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	6a3a      	ldr	r2, [r7, #32]
 80012e2:	605a      	str	r2, [r3, #4]
						return CMD_KEY_SPEED;
 80012e4:	2314      	movs	r3, #20
 80012e6:	e006      	b.n	80012f6 <commandRead+0x36e>
					}else{
						return CMD_ERROR;
 80012e8:	2315      	movs	r3, #21
 80012ea:	e004      	b.n	80012f6 <commandRead+0x36e>
				break;

				//Unknow command id
				default:
				{
					return CMD_ERROR;
 80012ec:	2315      	movs	r3, #21
 80012ee:	e002      	b.n	80012f6 <commandRead+0x36e>
        break;

        //unknow protocol id
        default:
        {
            return PROTOCOL_ERROR;
 80012f0:	2316      	movs	r3, #22
 80012f2:	e000      	b.n	80012f6 <commandRead+0x36e>
        break;
 80012f4:	bf00      	nop
        }
    }
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3734      	adds	r7, #52	; 0x34
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd90      	pop	{r4, r7, pc}
 80012fe:	bf00      	nop
 8001300:	406f4000 	.word	0x406f4000
 8001304:	c0690000 	.word	0xc0690000
 8001308:	405e0000 	.word	0x405e0000

0800130c <commandReply>:

Robot_RespondTypedef	commandReply	(Robot_CommandTypedef cmd_type,
										DUTY_Command_TypeDef duty_cmd,
										uint8_t *detail, int32_t *detail_length) {
 800130c:	b082      	sub	sp, #8
 800130e:	b5b0      	push	{r4, r5, r7, lr}
 8001310:	b0de      	sub	sp, #376	; 0x178
 8001312:	af2c      	add	r7, sp, #176	; 0xb0
 8001314:	4601      	mov	r1, r0
 8001316:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 800131a:	e880 000c 	stmia.w	r0, {r2, r3}
 800131e:	460b      	mov	r3, r1
 8001320:	71fb      	strb	r3, [r7, #7]
	Robot_RespondTypedef ret;

	switch(cmd_type) {
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	2b15      	cmp	r3, #21
 8001326:	f200 811e 	bhi.w	8001566 <commandReply+0x25a>
 800132a:	a201      	add	r2, pc, #4	; (adr r2, 8001330 <commandReply+0x24>)
 800132c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001330:	08001389 	.word	0x08001389
 8001334:	08001389 	.word	0x08001389
 8001338:	08001389 	.word	0x08001389
 800133c:	08001389 	.word	0x08001389
 8001340:	08001389 	.word	0x08001389
 8001344:	08001389 	.word	0x08001389
 8001348:	08001389 	.word	0x08001389
 800134c:	08001391 	.word	0x08001391
 8001350:	080013fb 	.word	0x080013fb
 8001354:	0800142f 	.word	0x0800142f
 8001358:	0800145d 	.word	0x0800145d
 800135c:	08001517 	.word	0x08001517
 8001360:	08001583 	.word	0x08001583
 8001364:	08001583 	.word	0x08001583
 8001368:	08001583 	.word	0x08001583
 800136c:	08001583 	.word	0x08001583
 8001370:	08001583 	.word	0x08001583
 8001374:	08001583 	.word	0x08001583
 8001378:	0800151f 	.word	0x0800151f
 800137c:	08001527 	.word	0x08001527
 8001380:	0800152f 	.word	0x0800152f
 8001384:	08001547 	.word	0x08001547
	case CMD_MOVE_HOME:
	case CMD_MOVE_LINE:
	case CMD_MOVE_CIRCLE:
	case CMD_MOVE_JOINT:
	case CMD_ROTATE_SINGLE:
		ret = RPD_DUTY;
 8001388:	2309      	movs	r3, #9
 800138a:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		break;
 800138e:	e0f9      	b.n	8001584 <commandReply+0x278>
	case CMD_OUTPUT:
		{
			if (1 == duty_cmd.sub_para_int) {
 8001390:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001394:	2b01      	cmp	r3, #1
 8001396:	d10d      	bne.n	80013b4 <commandReply+0xa8>
				scaraSetOutput(1);
 8001398:	2001      	movs	r0, #1
 800139a:	f007 fd69 	bl	8008e70 <scaraSetOutput>
				strcpy( (char *)detail, "Output ON");
 800139e:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 80013a2:	497d      	ldr	r1, [pc, #500]	; (8001598 <commandReply+0x28c>)
 80013a4:	461a      	mov	r2, r3
 80013a6:	460b      	mov	r3, r1
 80013a8:	cb03      	ldmia	r3!, {r0, r1}
 80013aa:	6010      	str	r0, [r2, #0]
 80013ac:	6051      	str	r1, [r2, #4]
 80013ae:	881b      	ldrh	r3, [r3, #0]
 80013b0:	8113      	strh	r3, [r2, #8]
 80013b2:	e01e      	b.n	80013f2 <commandReply+0xe6>
			} else if (0 == duty_cmd.sub_para_int) {
 80013b4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d10f      	bne.n	80013dc <commandReply+0xd0>
				scaraSetOutput(0);
 80013bc:	2000      	movs	r0, #0
 80013be:	f007 fd57 	bl	8008e70 <scaraSetOutput>
				strcpy( (char *)detail, "Output OFF");
 80013c2:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 80013c6:	4975      	ldr	r1, [pc, #468]	; (800159c <commandReply+0x290>)
 80013c8:	461a      	mov	r2, r3
 80013ca:	460b      	mov	r3, r1
 80013cc:	cb03      	ldmia	r3!, {r0, r1}
 80013ce:	6010      	str	r0, [r2, #0]
 80013d0:	6051      	str	r1, [r2, #4]
 80013d2:	8819      	ldrh	r1, [r3, #0]
 80013d4:	789b      	ldrb	r3, [r3, #2]
 80013d6:	8111      	strh	r1, [r2, #8]
 80013d8:	7293      	strb	r3, [r2, #10]
 80013da:	e00a      	b.n	80013f2 <commandReply+0xe6>
			} else {
				strcpy( (char *)detail, "Wrong Value");
 80013dc:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 80013e0:	4a6f      	ldr	r2, [pc, #444]	; (80015a0 <commandReply+0x294>)
 80013e2:	461c      	mov	r4, r3
 80013e4:	4613      	mov	r3, r2
 80013e6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80013e8:	6020      	str	r0, [r4, #0]
 80013ea:	6061      	str	r1, [r4, #4]
 80013ec:	60a2      	str	r2, [r4, #8]
				return RPD_ERROR;
 80013ee:	2307      	movs	r3, #7
 80013f0:	e0ca      	b.n	8001588 <commandReply+0x27c>
			}
			ret = RPD_OK;
 80013f2:	2308      	movs	r3, #8
 80013f4:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		}
		break;
 80013f8:	e0c4      	b.n	8001584 <commandReply+0x278>
	case CMD_READ_STATUS:
		{
			SCARA_ModeTypeDef		current_mode;
			SCARA_DutyStateTypeDef 	current_state;
			current_mode	 = scaraGetMode();
 80013fa:	f007 fd8b 	bl	8008f14 <scaraGetMode>
 80013fe:	4603      	mov	r3, r0
 8001400:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6
			current_state	 = scaraGetDutyState();
 8001404:	f007 fd9e 	bl	8008f44 <scaraGetDutyState>
 8001408:	4603      	mov	r3, r0
 800140a:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
			if ( SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_state) {
 800140e:	f897 30c6 	ldrb.w	r3, [r7, #198]	; 0xc6
 8001412:	2b02      	cmp	r3, #2
 8001414:	d107      	bne.n	8001426 <commandReply+0x11a>
 8001416:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 800141a:	2b00      	cmp	r3, #0
 800141c:	d103      	bne.n	8001426 <commandReply+0x11a>
				ret = RPD_IDLE;
 800141e:	2300      	movs	r3, #0
 8001420:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
			} else {
				ret = RPD_BUSY;
			}
		}
		break;
 8001424:	e0ae      	b.n	8001584 <commandReply+0x278>
				ret = RPD_BUSY;
 8001426:	2301      	movs	r3, #1
 8001428:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		break;
 800142c:	e0aa      	b.n	8001584 <commandReply+0x278>
	case CMD_READ_POSITION:
		{
			SCARA_PositionTypeDef position;
			scaraGetPosition(&position);
 800142e:	f107 0308 	add.w	r3, r7, #8
 8001432:	4618      	mov	r0, r3
 8001434:	f007 fd5e 	bl	8008ef4 <scaraGetPosition>
			//scaraPosition2String((char *)detail, position);
			scaraPosition_packaging(detail, position);
 8001438:	4668      	mov	r0, sp
 800143a:	f107 0310 	add.w	r3, r7, #16
 800143e:	22b0      	movs	r2, #176	; 0xb0
 8001440:	4619      	mov	r1, r3
 8001442:	f014 f995 	bl	8015770 <memcpy>
 8001446:	f107 0308 	add.w	r3, r7, #8
 800144a:	cb0c      	ldmia	r3, {r2, r3}
 800144c:	f8d7 0280 	ldr.w	r0, [r7, #640]	; 0x280
 8001450:	f007 fece 	bl	80091f0 <scaraPosition_packaging>
			ret =  RPD_POSITION;
 8001454:	2302      	movs	r3, #2
 8001456:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		}
		break;
 800145a:	e093      	b.n	8001584 <commandReply+0x278>
	case CMD_SETTING:
		if ( DUTY_COORDINATES_ABS == duty_cmd.coordinate_type) {
 800145c:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8001460:	2b00      	cmp	r3, #0
 8001462:	d10a      	bne.n	800147a <commandReply+0x16e>
			strcpy( (char *)detail, "ABSOLUTE.");
 8001464:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8001468:	494e      	ldr	r1, [pc, #312]	; (80015a4 <commandReply+0x298>)
 800146a:	461a      	mov	r2, r3
 800146c:	460b      	mov	r3, r1
 800146e:	cb03      	ldmia	r3!, {r0, r1}
 8001470:	6010      	str	r0, [r2, #0]
 8001472:	6051      	str	r1, [r2, #4]
 8001474:	881b      	ldrh	r3, [r3, #0]
 8001476:	8113      	strh	r3, [r2, #8]
 8001478:	e017      	b.n	80014aa <commandReply+0x19e>
		} else if ( DUTY_COORDINATES_REL == duty_cmd.coordinate_type) {
 800147a:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 800147e:	2b01      	cmp	r3, #1
 8001480:	d10a      	bne.n	8001498 <commandReply+0x18c>
			strcpy( (char *)detail, "RELATIVE.");
 8001482:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8001486:	4948      	ldr	r1, [pc, #288]	; (80015a8 <commandReply+0x29c>)
 8001488:	461a      	mov	r2, r3
 800148a:	460b      	mov	r3, r1
 800148c:	cb03      	ldmia	r3!, {r0, r1}
 800148e:	6010      	str	r0, [r2, #0]
 8001490:	6051      	str	r1, [r2, #4]
 8001492:	881b      	ldrh	r3, [r3, #0]
 8001494:	8113      	strh	r3, [r2, #8]
 8001496:	e008      	b.n	80014aa <commandReply+0x19e>
		} else {
			strcat((char *)detail, DETAIL_STATUS[SCARA_STATUS_ERROR_COORDINATE]);
 8001498:	4b44      	ldr	r3, [pc, #272]	; (80015ac <commandReply+0x2a0>)
 800149a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149c:	4619      	mov	r1, r3
 800149e:	f8d7 0280 	ldr.w	r0, [r7, #640]	; 0x280
 80014a2:	f015 f8e1 	bl	8016668 <strcat>
			return RPD_ERROR;
 80014a6:	2307      	movs	r3, #7
 80014a8:	e06e      	b.n	8001588 <commandReply+0x27c>
		}

		if ( DUTY_TRAJECTORY_LSPB == duty_cmd.trajec_type) {
 80014aa:	f897 30e8 	ldrb.w	r3, [r7, #232]	; 0xe8
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d10e      	bne.n	80014d0 <commandReply+0x1c4>
			strcat((char *)detail, " LSPB");
 80014b2:	f8d7 0280 	ldr.w	r0, [r7, #640]	; 0x280
 80014b6:	f7fe fe8b 	bl	80001d0 <strlen>
 80014ba:	4603      	mov	r3, r0
 80014bc:	461a      	mov	r2, r3
 80014be:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 80014c2:	4413      	add	r3, r2
 80014c4:	4a3a      	ldr	r2, [pc, #232]	; (80015b0 <commandReply+0x2a4>)
 80014c6:	6810      	ldr	r0, [r2, #0]
 80014c8:	6018      	str	r0, [r3, #0]
 80014ca:	8892      	ldrh	r2, [r2, #4]
 80014cc:	809a      	strh	r2, [r3, #4]
 80014ce:	e01e      	b.n	800150e <commandReply+0x202>
		} else if ( DUTY_TRAJECTORY_SCURVE == duty_cmd.trajec_type) {
 80014d0:	f897 30e8 	ldrb.w	r3, [r7, #232]	; 0xe8
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d111      	bne.n	80014fc <commandReply+0x1f0>
			strcat((char *)detail, " S-CURVE");
 80014d8:	f8d7 0280 	ldr.w	r0, [r7, #640]	; 0x280
 80014dc:	f7fe fe78 	bl	80001d0 <strlen>
 80014e0:	4603      	mov	r3, r0
 80014e2:	461a      	mov	r2, r3
 80014e4:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 80014e8:	4413      	add	r3, r2
 80014ea:	4932      	ldr	r1, [pc, #200]	; (80015b4 <commandReply+0x2a8>)
 80014ec:	461a      	mov	r2, r3
 80014ee:	460b      	mov	r3, r1
 80014f0:	cb03      	ldmia	r3!, {r0, r1}
 80014f2:	6010      	str	r0, [r2, #0]
 80014f4:	6051      	str	r1, [r2, #4]
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	7213      	strb	r3, [r2, #8]
 80014fa:	e008      	b.n	800150e <commandReply+0x202>
		} else {
			strcat((char *)detail, DETAIL_STATUS[SCARA_STATUS_ERROR_TRAJECTORY]);
 80014fc:	4b2b      	ldr	r3, [pc, #172]	; (80015ac <commandReply+0x2a0>)
 80014fe:	695b      	ldr	r3, [r3, #20]
 8001500:	4619      	mov	r1, r3
 8001502:	f8d7 0280 	ldr.w	r0, [r7, #640]	; 0x280
 8001506:	f015 f8af 	bl	8016668 <strcat>
			return RPD_ERROR;
 800150a:	2307      	movs	r3, #7
 800150c:	e03c      	b.n	8001588 <commandReply+0x27c>
		}
		ret = RPD_OK;
 800150e:	2308      	movs	r3, #8
 8001510:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		break;
 8001514:	e036      	b.n	8001584 <commandReply+0x278>
	case CMD_METHOD_CHANGE:
		ret = RPD_DUTY;
 8001516:	2309      	movs	r3, #9
 8001518:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		break;
 800151c:	e032      	b.n	8001584 <commandReply+0x278>
	case CMD_JOB_PUSH_OUTPUT:
		break;
	case CMD_JOB_TEST:
		break;
	case CMD_JOB_RUN:
		ret = RPD_DUTY;
 800151e:	2309      	movs	r3, #9
 8001520:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		break;
 8001524:	e02e      	b.n	8001584 <commandReply+0x278>
	case CMD_KEYBOARD:
		ret = RPD_DUTY;
 8001526:	2309      	movs	r3, #9
 8001528:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		break;
 800152c:	e02a      	b.n	8001584 <commandReply+0x278>
	case CMD_KEY_SPEED:
		sprintf((char*) detail, "MANUAL SPEED = %d", duty_cmd.key_speed);
 800152e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001532:	461a      	mov	r2, r3
 8001534:	4920      	ldr	r1, [pc, #128]	; (80015b8 <commandReply+0x2ac>)
 8001536:	f8d7 0280 	ldr.w	r0, [r7, #640]	; 0x280
 800153a:	f015 f875 	bl	8016628 <siprintf>
		ret = RPD_OK;
 800153e:	2308      	movs	r3, #8
 8001540:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		break;
 8001544:	e01e      	b.n	8001584 <commandReply+0x278>
	case CMD_ERROR:
		strcpy( (char *)detail, "Check parameters");
 8001546:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 800154a:	4a1c      	ldr	r2, [pc, #112]	; (80015bc <commandReply+0x2b0>)
 800154c:	461d      	mov	r5, r3
 800154e:	4614      	mov	r4, r2
 8001550:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001552:	6028      	str	r0, [r5, #0]
 8001554:	6069      	str	r1, [r5, #4]
 8001556:	60aa      	str	r2, [r5, #8]
 8001558:	60eb      	str	r3, [r5, #12]
 800155a:	7823      	ldrb	r3, [r4, #0]
 800155c:	742b      	strb	r3, [r5, #16]
		ret = RPD_ERROR;
 800155e:	2307      	movs	r3, #7
 8001560:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		break;
 8001564:	e00e      	b.n	8001584 <commandReply+0x278>
	default:
		strcpy( (char *)detail, "Unknown command");
 8001566:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 800156a:	4a15      	ldr	r2, [pc, #84]	; (80015c0 <commandReply+0x2b4>)
 800156c:	461c      	mov	r4, r3
 800156e:	4615      	mov	r5, r2
 8001570:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001572:	6020      	str	r0, [r4, #0]
 8001574:	6061      	str	r1, [r4, #4]
 8001576:	60a2      	str	r2, [r4, #8]
 8001578:	60e3      	str	r3, [r4, #12]
		ret = RPD_ERROR;
 800157a:	2307      	movs	r3, #7
 800157c:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 8001580:	e000      	b.n	8001584 <commandReply+0x278>
		break;
 8001582:	bf00      	nop
	}
	return ret;
 8001584:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
}
 8001588:	4618      	mov	r0, r3
 800158a:	37c8      	adds	r7, #200	; 0xc8
 800158c:	46bd      	mov	sp, r7
 800158e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001592:	b002      	add	sp, #8
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	0801ad50 	.word	0x0801ad50
 800159c:	0801ad5c 	.word	0x0801ad5c
 80015a0:	0801ad68 	.word	0x0801ad68
 80015a4:	0801ad74 	.word	0x0801ad74
 80015a8:	0801ad80 	.word	0x0801ad80
 80015ac:	20000c58 	.word	0x20000c58
 80015b0:	0801ad8c 	.word	0x0801ad8c
 80015b4:	0801ad94 	.word	0x0801ad94
 80015b8:	0801ada0 	.word	0x0801ada0
 80015bc:	0801adb4 	.word	0x0801adb4
 80015c0:	0801adc8 	.word	0x0801adc8

080015c4 <commandRespond>:


int32_t				commandRespond	(Robot_RespondTypedef rpd,
										int32_t id_command,
										char *detail,
										char *respond) {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b088      	sub	sp, #32
 80015c8:	af02      	add	r7, sp, #8
 80015ca:	60b9      	str	r1, [r7, #8]
 80015cc:	607a      	str	r2, [r7, #4]
 80015ce:	603b      	str	r3, [r7, #0]
 80015d0:	4603      	mov	r3, r0
 80015d2:	73fb      	strb	r3, [r7, #15]
	int out_lenght;
	switch(rpd) {
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
 80015d6:	2b08      	cmp	r3, #8
 80015d8:	d836      	bhi.n	8001648 <commandRespond+0x84>
 80015da:	a201      	add	r2, pc, #4	; (adr r2, 80015e0 <commandRespond+0x1c>)
 80015dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e0:	08001605 	.word	0x08001605
 80015e4:	08001605 	.word	0x08001605
 80015e8:	0800162b 	.word	0x0800162b
 80015ec:	0800162b 	.word	0x0800162b
 80015f0:	0800162b 	.word	0x0800162b
 80015f4:	0800162b 	.word	0x0800162b
 80015f8:	0800162b 	.word	0x0800162b
 80015fc:	0800162b 	.word	0x0800162b
 8001600:	0800162b 	.word	0x0800162b
	case RPD_IDLE:
	case RPD_BUSY:
		{
			uint8_t		isScanLitmit;
			isScanLitmit = scaraIsScanLimit();
 8001604:	f007 fcaa 	bl	8008f5c <scaraIsScanLimit>
 8001608:	4603      	mov	r3, r0
 800160a:	74fb      	strb	r3, [r7, #19]
			out_lenght = snprintf( (char *)respond,
 800160c:	7bfb      	ldrb	r3, [r7, #15]
 800160e:	4a12      	ldr	r2, [pc, #72]	; (8001658 <commandRespond+0x94>)
 8001610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001614:	7cfa      	ldrb	r2, [r7, #19]
 8001616:	9201      	str	r2, [sp, #4]
 8001618:	9300      	str	r3, [sp, #0]
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	4a0f      	ldr	r2, [pc, #60]	; (800165c <commandRespond+0x98>)
 800161e:	2114      	movs	r1, #20
 8001620:	6838      	ldr	r0, [r7, #0]
 8001622:	f014 ffcd 	bl	80165c0 <sniprintf>
 8001626:	6178      	str	r0, [r7, #20]
									"%d %s %d",
									(int)id_command,
									ROBOTRESPOND[rpd],
									(int)isScanLitmit);
		}
		break;
 8001628:	e010      	b.n	800164c <commandRespond+0x88>
	case RPD_STOP:
	case RPD_ERROR:
	case RPD_OK:

		{
			out_lenght = snprintf( (char *)respond,
 800162a:	7bfb      	ldrb	r3, [r7, #15]
 800162c:	4a0a      	ldr	r2, [pc, #40]	; (8001658 <commandRespond+0x94>)
 800162e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	9201      	str	r2, [sp, #4]
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	4a09      	ldr	r2, [pc, #36]	; (8001660 <commandRespond+0x9c>)
 800163c:	2191      	movs	r1, #145	; 0x91
 800163e:	6838      	ldr	r0, [r7, #0]
 8001640:	f014 ffbe 	bl	80165c0 <sniprintf>
 8001644:	6178      	str	r0, [r7, #20]
									"%d %s %s",
									(int)id_command,
									ROBOTRESPOND[rpd],
									(char *)detail);
		}
		break;
 8001646:	e001      	b.n	800164c <commandRespond+0x88>
	default:
		out_lenght = 0;
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]
	}

	return (int32_t)out_lenght;
 800164c:	697b      	ldr	r3, [r7, #20]
}
 800164e:	4618      	mov	r0, r3
 8001650:	3718      	adds	r7, #24
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000000 	.word	0x20000000
 800165c:	0801add8 	.word	0x0801add8
 8001660:	0801ade4 	.word	0x0801ade4

08001664 <commandRespond1>:

int32_t				commandRespond1	(Robot_RespondTypedef rpd,
										int32_t id_command,
										char *detail,
										int32_t detail_length,
										char *respond) {
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	60b9      	str	r1, [r7, #8]
 800166c:	607a      	str	r2, [r7, #4]
 800166e:	603b      	str	r3, [r7, #0]
 8001670:	4603      	mov	r3, r0
 8001672:	73fb      	strb	r3, [r7, #15]
	int32_t out_length = 0;
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]
	respond[out_length++] = 0x28;
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	1c5a      	adds	r2, r3, #1
 800167c:	617a      	str	r2, [r7, #20]
 800167e:	461a      	mov	r2, r3
 8001680:	6a3b      	ldr	r3, [r7, #32]
 8001682:	4413      	add	r3, r2
 8001684:	2228      	movs	r2, #40	; 0x28
 8001686:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = RESPONSE_TRANSMISION;
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	1c5a      	adds	r2, r3, #1
 800168c:	617a      	str	r2, [r7, #20]
 800168e:	461a      	mov	r2, r3
 8001690:	6a3b      	ldr	r3, [r7, #32]
 8001692:	4413      	add	r3, r2
 8001694:	2202      	movs	r2, #2
 8001696:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = rpd;
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	1c5a      	adds	r2, r3, #1
 800169c:	617a      	str	r2, [r7, #20]
 800169e:	461a      	mov	r2, r3
 80016a0:	6a3b      	ldr	r3, [r7, #32]
 80016a2:	4413      	add	r3, r2
 80016a4:	7bfa      	ldrb	r2, [r7, #15]
 80016a6:	701a      	strb	r2, [r3, #0]
	memcpy(&respond[out_length], detail, detail_length);
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	6a3a      	ldr	r2, [r7, #32]
 80016ac:	4413      	add	r3, r2
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	6879      	ldr	r1, [r7, #4]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f014 f85c 	bl	8015770 <memcpy>
	out_length += detail_length;
 80016b8:	697a      	ldr	r2, [r7, #20]
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	4413      	add	r3, r2
 80016be:	617b      	str	r3, [r7, #20]
	respond[out_length++] = 0x29;
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	1c5a      	adds	r2, r3, #1
 80016c4:	617a      	str	r2, [r7, #20]
 80016c6:	461a      	mov	r2, r3
 80016c8:	6a3b      	ldr	r3, [r7, #32]
 80016ca:	4413      	add	r3, r2
 80016cc:	2229      	movs	r2, #41	; 0x29
 80016ce:	701a      	strb	r2, [r3, #0]

	return out_length;
 80016d0:	697b      	ldr	r3, [r7, #20]
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
	...

080016dc <LOG_REPORT>:
 *  line		: line code number
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t LOG_REPORT(char *message, uint16_t line) {
 80016dc:	b580      	push	{r7, lr}
 80016de:	b096      	sub	sp, #88	; 0x58
 80016e0:	af02      	add	r7, sp, #8
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	460b      	mov	r3, r1
 80016e6:	807b      	strh	r3, [r7, #2]
	uint8_t temp_buff[64];
	int32_t len;

	len = snprintf((char*)temp_buff, 63, "%d, %s \r\n", line, message);
 80016e8:	887a      	ldrh	r2, [r7, #2]
 80016ea:	f107 0008 	add.w	r0, r7, #8
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	9300      	str	r3, [sp, #0]
 80016f2:	4613      	mov	r3, r2
 80016f4:	4a17      	ldr	r2, [pc, #92]	; (8001754 <LOG_REPORT+0x78>)
 80016f6:	213f      	movs	r1, #63	; 0x3f
 80016f8:	f014 ff62 	bl	80165c0 <sniprintf>
 80016fc:	64f8      	str	r0, [r7, #76]	; 0x4c
	if (-1 == len) {
 80016fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001704:	d101      	bne.n	800170a <LOG_REPORT+0x2e>
		return FALSE;
 8001706:	2300      	movs	r3, #0
 8001708:	e01f      	b.n	800174a <LOG_REPORT+0x6e>
	}
	ringBuff_PushArray(&uart_tx_ringbuff, temp_buff, len);
 800170a:	f107 0308 	add.w	r3, r7, #8
 800170e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001710:	4619      	mov	r1, r3
 8001712:	4811      	ldr	r0, [pc, #68]	; (8001758 <LOG_REPORT+0x7c>)
 8001714:	f002 f87b 	bl	800380e <ringBuff_PushArray>
	if (HAL_DMA_GetState(&hdma_uart4_tx) == HAL_DMA_STATE_BUSY) {
 8001718:	4810      	ldr	r0, [pc, #64]	; (800175c <LOG_REPORT+0x80>)
 800171a:	f009 ff67 	bl	800b5ec <HAL_DMA_GetState>
 800171e:	4603      	mov	r3, r0
 8001720:	2b02      	cmp	r3, #2
 8001722:	d101      	bne.n	8001728 <LOG_REPORT+0x4c>
		return TRUE;
 8001724:	2301      	movs	r3, #1
 8001726:	e010      	b.n	800174a <LOG_REPORT+0x6e>
	}// dma busy
	uint16_t size_dma;
	size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 8001728:	f44f 7280 	mov.w	r2, #256	; 0x100
 800172c:	490c      	ldr	r1, [pc, #48]	; (8001760 <LOG_REPORT+0x84>)
 800172e:	480a      	ldr	r0, [pc, #40]	; (8001758 <LOG_REPORT+0x7c>)
 8001730:	f002 f895 	bl	800385e <ringBuff_PopArray>
 8001734:	4603      	mov	r3, r0
 8001736:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 800173a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800173e:	461a      	mov	r2, r3
 8001740:	4907      	ldr	r1, [pc, #28]	; (8001760 <LOG_REPORT+0x84>)
 8001742:	4808      	ldr	r0, [pc, #32]	; (8001764 <LOG_REPORT+0x88>)
 8001744:	f00c fb64 	bl	800de10 <HAL_UART_Transmit_DMA>
	return TRUE;
 8001748:	2301      	movs	r3, #1
}
 800174a:	4618      	mov	r0, r3
 800174c:	3750      	adds	r7, #80	; 0x50
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	0801adf0 	.word	0x0801adf0
 8001758:	20000840 	.word	0x20000840
 800175c:	20006120 	.word	0x20006120
 8001760:	200051b4 	.word	0x200051b4
 8001764:	200060e0 	.word	0x200060e0

08001768 <double2string>:

int32_t	double2string( uint8_t *result, double value, uint8_t precision) {
 8001768:	b5b0      	push	{r4, r5, r7, lr}
 800176a:	b090      	sub	sp, #64	; 0x40
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	ed87 0b00 	vstr	d0, [r7]
 8001774:	460b      	mov	r3, r1
 8001776:	72fb      	strb	r3, [r7, #11]
	uint8_t le[6];
	int8_t sign;
	double temp1, temp2;
	int32_t index;

	if((precision < 0) || (6 < precision)) {
 8001778:	7afb      	ldrb	r3, [r7, #11]
 800177a:	2b06      	cmp	r3, #6
 800177c:	d901      	bls.n	8001782 <double2string+0x1a>
		precision = 6;
 800177e:	2306      	movs	r3, #6
 8001780:	72fb      	strb	r3, [r7, #11]
	}

	if(value < 0) {
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	f04f 0300 	mov.w	r3, #0
 800178a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800178e:	f7ff f9a5 	bl	8000adc <__aeabi_dcmplt>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d003      	beq.n	80017a0 <double2string+0x38>
		sign = -1;
 8001798:	23ff      	movs	r3, #255	; 0xff
 800179a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800179e:	e002      	b.n	80017a6 <double2string+0x3e>
	} else {
		sign = 1;
 80017a0:	2301      	movs	r3, #1
 80017a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}
	value = value*sign;
 80017a6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7fe feba 	bl	8000524 <__aeabi_i2d>
 80017b0:	4603      	mov	r3, r0
 80017b2:	460c      	mov	r4, r1
 80017b4:	461a      	mov	r2, r3
 80017b6:	4623      	mov	r3, r4
 80017b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017bc:	f7fe ff1c 	bl	80005f8 <__aeabi_dmul>
 80017c0:	4603      	mov	r3, r0
 80017c2:	460c      	mov	r4, r1
 80017c4:	e9c7 3400 	strd	r3, r4, [r7]

	if (value > 10000.0f) {
 80017c8:	a307      	add	r3, pc, #28	; (adr r3, 80017e8 <double2string+0x80>)
 80017ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017d2:	f7ff f9a1 	bl	8000b18 <__aeabi_dcmpgt>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d009      	beq.n	80017f0 <double2string+0x88>
		return -1;
 80017dc:	f04f 33ff 	mov.w	r3, #4294967295
 80017e0:	e265      	b.n	8001cae <double2string+0x546>
 80017e2:	bf00      	nop
 80017e4:	f3af 8000 	nop.w
 80017e8:	00000000 	.word	0x00000000
 80017ec:	40c38800 	.word	0x40c38800
	}

	nguyen[0] 	= (int32_t)value/1000;
 80017f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017f4:	f7ff f9b0 	bl	8000b58 <__aeabi_d2iz>
 80017f8:	4603      	mov	r3, r0
 80017fa:	4acf      	ldr	r2, [pc, #828]	; (8001b38 <double2string+0x3d0>)
 80017fc:	fb82 1203 	smull	r1, r2, r2, r3
 8001800:	1192      	asrs	r2, r2, #6
 8001802:	17db      	asrs	r3, r3, #31
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	b2db      	uxtb	r3, r3
 8001808:	773b      	strb	r3, [r7, #28]
	nguyen[1]	= (int32_t)value/100 - nguyen[0]*10;
 800180a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800180e:	f7ff f9a3 	bl	8000b58 <__aeabi_d2iz>
 8001812:	4603      	mov	r3, r0
 8001814:	4ac9      	ldr	r2, [pc, #804]	; (8001b3c <double2string+0x3d4>)
 8001816:	fb82 1203 	smull	r1, r2, r2, r3
 800181a:	1152      	asrs	r2, r2, #5
 800181c:	17db      	asrs	r3, r3, #31
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	b2da      	uxtb	r2, r3
 8001822:	7f3b      	ldrb	r3, [r7, #28]
 8001824:	4619      	mov	r1, r3
 8001826:	0149      	lsls	r1, r1, #5
 8001828:	1ac9      	subs	r1, r1, r3
 800182a:	0089      	lsls	r1, r1, #2
 800182c:	1acb      	subs	r3, r1, r3
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	b2db      	uxtb	r3, r3
 8001832:	4413      	add	r3, r2
 8001834:	b2db      	uxtb	r3, r3
 8001836:	777b      	strb	r3, [r7, #29]
	nguyen[2]	= (int32_t)value/10 - nguyen[0]*100 - nguyen[1]*10;
 8001838:	e9d7 0100 	ldrd	r0, r1, [r7]
 800183c:	f7ff f98c 	bl	8000b58 <__aeabi_d2iz>
 8001840:	4603      	mov	r3, r0
 8001842:	4abf      	ldr	r2, [pc, #764]	; (8001b40 <double2string+0x3d8>)
 8001844:	fb82 1203 	smull	r1, r2, r2, r3
 8001848:	1092      	asrs	r2, r2, #2
 800184a:	17db      	asrs	r3, r3, #31
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	b2da      	uxtb	r2, r3
 8001850:	7f7b      	ldrb	r3, [r7, #29]
 8001852:	4619      	mov	r1, r3
 8001854:	0149      	lsls	r1, r1, #5
 8001856:	1ac9      	subs	r1, r1, r3
 8001858:	0089      	lsls	r1, r1, #2
 800185a:	1acb      	subs	r3, r1, r3
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	b2d9      	uxtb	r1, r3
 8001860:	7f3b      	ldrb	r3, [r7, #28]
 8001862:	4618      	mov	r0, r3
 8001864:	0080      	lsls	r0, r0, #2
 8001866:	4418      	add	r0, r3
 8001868:	00c0      	lsls	r0, r0, #3
 800186a:	1ac3      	subs	r3, r0, r3
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	b2db      	uxtb	r3, r3
 8001870:	440b      	add	r3, r1
 8001872:	b2db      	uxtb	r3, r3
 8001874:	4413      	add	r3, r2
 8001876:	b2db      	uxtb	r3, r3
 8001878:	77bb      	strb	r3, [r7, #30]
	nguyen[3]	= (int32_t)value - nguyen[0]*1000 - nguyen[1]*100 - nguyen[2]*10;
 800187a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800187e:	f7ff f96b 	bl	8000b58 <__aeabi_d2iz>
 8001882:	4603      	mov	r3, r0
 8001884:	b2da      	uxtb	r2, r3
 8001886:	7f7b      	ldrb	r3, [r7, #29]
 8001888:	4619      	mov	r1, r3
 800188a:	0089      	lsls	r1, r1, #2
 800188c:	4419      	add	r1, r3
 800188e:	00c9      	lsls	r1, r1, #3
 8001890:	1acb      	subs	r3, r1, r3
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	b2d9      	uxtb	r1, r3
 8001896:	7f3b      	ldrb	r3, [r7, #28]
 8001898:	4618      	mov	r0, r3
 800189a:	0040      	lsls	r0, r0, #1
 800189c:	4403      	add	r3, r0
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	440b      	add	r3, r1
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	4413      	add	r3, r2
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	7fbb      	ldrb	r3, [r7, #30]
 80018ac:	4619      	mov	r1, r3
 80018ae:	0149      	lsls	r1, r1, #5
 80018b0:	1ac9      	subs	r1, r1, r3
 80018b2:	0089      	lsls	r1, r1, #2
 80018b4:	1acb      	subs	r3, r1, r3
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	4413      	add	r3, r2
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	77fb      	strb	r3, [r7, #31]

	temp1	= (value - nguyen[0]*1000 - nguyen[1]*100 - nguyen[2]*10 - nguyen[3])*1000;
 80018c0:	7f3b      	ldrb	r3, [r7, #28]
 80018c2:	461a      	mov	r2, r3
 80018c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018c8:	fb03 f302 	mul.w	r3, r3, r2
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7fe fe29 	bl	8000524 <__aeabi_i2d>
 80018d2:	4603      	mov	r3, r0
 80018d4:	460c      	mov	r4, r1
 80018d6:	461a      	mov	r2, r3
 80018d8:	4623      	mov	r3, r4
 80018da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018de:	f7fe fcd3 	bl	8000288 <__aeabi_dsub>
 80018e2:	4603      	mov	r3, r0
 80018e4:	460c      	mov	r4, r1
 80018e6:	4625      	mov	r5, r4
 80018e8:	461c      	mov	r4, r3
 80018ea:	7f7b      	ldrb	r3, [r7, #29]
 80018ec:	461a      	mov	r2, r3
 80018ee:	2364      	movs	r3, #100	; 0x64
 80018f0:	fb03 f302 	mul.w	r3, r3, r2
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7fe fe15 	bl	8000524 <__aeabi_i2d>
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	4620      	mov	r0, r4
 8001900:	4629      	mov	r1, r5
 8001902:	f7fe fcc1 	bl	8000288 <__aeabi_dsub>
 8001906:	4603      	mov	r3, r0
 8001908:	460c      	mov	r4, r1
 800190a:	4625      	mov	r5, r4
 800190c:	461c      	mov	r4, r3
 800190e:	7fbb      	ldrb	r3, [r7, #30]
 8001910:	461a      	mov	r2, r3
 8001912:	4613      	mov	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	4618      	mov	r0, r3
 800191c:	f7fe fe02 	bl	8000524 <__aeabi_i2d>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4620      	mov	r0, r4
 8001926:	4629      	mov	r1, r5
 8001928:	f7fe fcae 	bl	8000288 <__aeabi_dsub>
 800192c:	4603      	mov	r3, r0
 800192e:	460c      	mov	r4, r1
 8001930:	4625      	mov	r5, r4
 8001932:	461c      	mov	r4, r3
 8001934:	7ffb      	ldrb	r3, [r7, #31]
 8001936:	4618      	mov	r0, r3
 8001938:	f7fe fdf4 	bl	8000524 <__aeabi_i2d>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4620      	mov	r0, r4
 8001942:	4629      	mov	r1, r5
 8001944:	f7fe fca0 	bl	8000288 <__aeabi_dsub>
 8001948:	4603      	mov	r3, r0
 800194a:	460c      	mov	r4, r1
 800194c:	4618      	mov	r0, r3
 800194e:	4621      	mov	r1, r4
 8001950:	f04f 0200 	mov.w	r2, #0
 8001954:	4b7b      	ldr	r3, [pc, #492]	; (8001b44 <double2string+0x3dc>)
 8001956:	f7fe fe4f 	bl	80005f8 <__aeabi_dmul>
 800195a:	4603      	mov	r3, r0
 800195c:	460c      	mov	r4, r1
 800195e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	le[0] 	= (int32_t)temp1/100;
 8001962:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001966:	f7ff f8f7 	bl	8000b58 <__aeabi_d2iz>
 800196a:	4603      	mov	r3, r0
 800196c:	4a73      	ldr	r2, [pc, #460]	; (8001b3c <double2string+0x3d4>)
 800196e:	fb82 1203 	smull	r1, r2, r2, r3
 8001972:	1152      	asrs	r2, r2, #5
 8001974:	17db      	asrs	r3, r3, #31
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	b2db      	uxtb	r3, r3
 800197a:	753b      	strb	r3, [r7, #20]
	le[1] 	= (int32_t)temp1/10 - le[0]*10;
 800197c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001980:	f7ff f8ea 	bl	8000b58 <__aeabi_d2iz>
 8001984:	4603      	mov	r3, r0
 8001986:	4a6e      	ldr	r2, [pc, #440]	; (8001b40 <double2string+0x3d8>)
 8001988:	fb82 1203 	smull	r1, r2, r2, r3
 800198c:	1092      	asrs	r2, r2, #2
 800198e:	17db      	asrs	r3, r3, #31
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	b2da      	uxtb	r2, r3
 8001994:	7d3b      	ldrb	r3, [r7, #20]
 8001996:	4619      	mov	r1, r3
 8001998:	0149      	lsls	r1, r1, #5
 800199a:	1ac9      	subs	r1, r1, r3
 800199c:	0089      	lsls	r1, r1, #2
 800199e:	1acb      	subs	r3, r1, r3
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	4413      	add	r3, r2
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	757b      	strb	r3, [r7, #21]
	le[2]	= (int32_t)temp1 - le[0]*100 - le[1]*10;
 80019aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80019ae:	f7ff f8d3 	bl	8000b58 <__aeabi_d2iz>
 80019b2:	4603      	mov	r3, r0
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	7d7b      	ldrb	r3, [r7, #21]
 80019b8:	4619      	mov	r1, r3
 80019ba:	0149      	lsls	r1, r1, #5
 80019bc:	1ac9      	subs	r1, r1, r3
 80019be:	0089      	lsls	r1, r1, #2
 80019c0:	1acb      	subs	r3, r1, r3
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	b2d9      	uxtb	r1, r3
 80019c6:	7d3b      	ldrb	r3, [r7, #20]
 80019c8:	4618      	mov	r0, r3
 80019ca:	0080      	lsls	r0, r0, #2
 80019cc:	4418      	add	r0, r3
 80019ce:	00c0      	lsls	r0, r0, #3
 80019d0:	1ac3      	subs	r3, r0, r3
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	440b      	add	r3, r1
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	4413      	add	r3, r2
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	75bb      	strb	r3, [r7, #22]

	temp2	= (temp1 - le[0]*100 - le[1]*10 - le[2])*1000;
 80019e0:	7d3b      	ldrb	r3, [r7, #20]
 80019e2:	461a      	mov	r2, r3
 80019e4:	2364      	movs	r3, #100	; 0x64
 80019e6:	fb03 f302 	mul.w	r3, r3, r2
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7fe fd9a 	bl	8000524 <__aeabi_i2d>
 80019f0:	4603      	mov	r3, r0
 80019f2:	460c      	mov	r4, r1
 80019f4:	461a      	mov	r2, r3
 80019f6:	4623      	mov	r3, r4
 80019f8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80019fc:	f7fe fc44 	bl	8000288 <__aeabi_dsub>
 8001a00:	4603      	mov	r3, r0
 8001a02:	460c      	mov	r4, r1
 8001a04:	4625      	mov	r5, r4
 8001a06:	461c      	mov	r4, r3
 8001a08:	7d7b      	ldrb	r3, [r7, #21]
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	4413      	add	r3, r2
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7fe fd85 	bl	8000524 <__aeabi_i2d>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	4620      	mov	r0, r4
 8001a20:	4629      	mov	r1, r5
 8001a22:	f7fe fc31 	bl	8000288 <__aeabi_dsub>
 8001a26:	4603      	mov	r3, r0
 8001a28:	460c      	mov	r4, r1
 8001a2a:	4625      	mov	r5, r4
 8001a2c:	461c      	mov	r4, r3
 8001a2e:	7dbb      	ldrb	r3, [r7, #22]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7fe fd77 	bl	8000524 <__aeabi_i2d>
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	4620      	mov	r0, r4
 8001a3c:	4629      	mov	r1, r5
 8001a3e:	f7fe fc23 	bl	8000288 <__aeabi_dsub>
 8001a42:	4603      	mov	r3, r0
 8001a44:	460c      	mov	r4, r1
 8001a46:	4618      	mov	r0, r3
 8001a48:	4621      	mov	r1, r4
 8001a4a:	f04f 0200 	mov.w	r2, #0
 8001a4e:	4b3d      	ldr	r3, [pc, #244]	; (8001b44 <double2string+0x3dc>)
 8001a50:	f7fe fdd2 	bl	80005f8 <__aeabi_dmul>
 8001a54:	4603      	mov	r3, r0
 8001a56:	460c      	mov	r4, r1
 8001a58:	e9c7 3408 	strd	r3, r4, [r7, #32]
	le[3] 	= (int32_t)temp2/100;
 8001a5c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a60:	f7ff f87a 	bl	8000b58 <__aeabi_d2iz>
 8001a64:	4603      	mov	r3, r0
 8001a66:	4a35      	ldr	r2, [pc, #212]	; (8001b3c <double2string+0x3d4>)
 8001a68:	fb82 1203 	smull	r1, r2, r2, r3
 8001a6c:	1152      	asrs	r2, r2, #5
 8001a6e:	17db      	asrs	r3, r3, #31
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	75fb      	strb	r3, [r7, #23]
	le[4] 	= (int32_t)temp2/10 - le[3]*10;
 8001a76:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a7a:	f7ff f86d 	bl	8000b58 <__aeabi_d2iz>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	4a2f      	ldr	r2, [pc, #188]	; (8001b40 <double2string+0x3d8>)
 8001a82:	fb82 1203 	smull	r1, r2, r2, r3
 8001a86:	1092      	asrs	r2, r2, #2
 8001a88:	17db      	asrs	r3, r3, #31
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	7dfb      	ldrb	r3, [r7, #23]
 8001a90:	4619      	mov	r1, r3
 8001a92:	0149      	lsls	r1, r1, #5
 8001a94:	1ac9      	subs	r1, r1, r3
 8001a96:	0089      	lsls	r1, r1, #2
 8001a98:	1acb      	subs	r3, r1, r3
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	4413      	add	r3, r2
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	763b      	strb	r3, [r7, #24]
	le[5]	= (int32_t)temp2 - le[3]*100 - le[4]*10;
 8001aa4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001aa8:	f7ff f856 	bl	8000b58 <__aeabi_d2iz>
 8001aac:	4603      	mov	r3, r0
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	7e3b      	ldrb	r3, [r7, #24]
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	0149      	lsls	r1, r1, #5
 8001ab6:	1ac9      	subs	r1, r1, r3
 8001ab8:	0089      	lsls	r1, r1, #2
 8001aba:	1acb      	subs	r3, r1, r3
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	b2d9      	uxtb	r1, r3
 8001ac0:	7dfb      	ldrb	r3, [r7, #23]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	0080      	lsls	r0, r0, #2
 8001ac6:	4418      	add	r0, r3
 8001ac8:	00c0      	lsls	r0, r0, #3
 8001aca:	1ac3      	subs	r3, r0, r3
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	440b      	add	r3, r1
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	4413      	add	r3, r2
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	767b      	strb	r3, [r7, #25]
	// Rounding
	if ((temp2 - le[3]*1000 - le[4]*100 - le[5]) >= 0.5) {
 8001ada:	7dfb      	ldrb	r3, [r7, #23]
 8001adc:	461a      	mov	r2, r3
 8001ade:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ae2:	fb03 f302 	mul.w	r3, r3, r2
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7fe fd1c 	bl	8000524 <__aeabi_i2d>
 8001aec:	4603      	mov	r3, r0
 8001aee:	460c      	mov	r4, r1
 8001af0:	461a      	mov	r2, r3
 8001af2:	4623      	mov	r3, r4
 8001af4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001af8:	f7fe fbc6 	bl	8000288 <__aeabi_dsub>
 8001afc:	4603      	mov	r3, r0
 8001afe:	460c      	mov	r4, r1
 8001b00:	4625      	mov	r5, r4
 8001b02:	461c      	mov	r4, r3
 8001b04:	7e3b      	ldrb	r3, [r7, #24]
 8001b06:	461a      	mov	r2, r3
 8001b08:	2364      	movs	r3, #100	; 0x64
 8001b0a:	fb03 f302 	mul.w	r3, r3, r2
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7fe fd08 	bl	8000524 <__aeabi_i2d>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4620      	mov	r0, r4
 8001b1a:	4629      	mov	r1, r5
 8001b1c:	f7fe fbb4 	bl	8000288 <__aeabi_dsub>
 8001b20:	4603      	mov	r3, r0
 8001b22:	460c      	mov	r4, r1
 8001b24:	4625      	mov	r5, r4
 8001b26:	461c      	mov	r4, r3
 8001b28:	7e7b      	ldrb	r3, [r7, #25]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7fe fcfa 	bl	8000524 <__aeabi_i2d>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	e008      	b.n	8001b48 <double2string+0x3e0>
 8001b36:	bf00      	nop
 8001b38:	10624dd3 	.word	0x10624dd3
 8001b3c:	51eb851f 	.word	0x51eb851f
 8001b40:	66666667 	.word	0x66666667
 8001b44:	408f4000 	.word	0x408f4000
 8001b48:	4620      	mov	r0, r4
 8001b4a:	4629      	mov	r1, r5
 8001b4c:	f7fe fb9c 	bl	8000288 <__aeabi_dsub>
 8001b50:	4603      	mov	r3, r0
 8001b52:	460c      	mov	r4, r1
 8001b54:	4618      	mov	r0, r3
 8001b56:	4621      	mov	r1, r4
 8001b58:	f04f 0200 	mov.w	r2, #0
 8001b5c:	4b56      	ldr	r3, [pc, #344]	; (8001cb8 <double2string+0x550>)
 8001b5e:	f7fe ffd1 	bl	8000b04 <__aeabi_dcmpge>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <double2string+0x408>
		le[5]++;
 8001b68:	7e7b      	ldrb	r3, [r7, #25]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	767b      	strb	r3, [r7, #25]
	}

	index = 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	63bb      	str	r3, [r7, #56]	; 0x38

	if( -1 == sign) {
 8001b74:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b7c:	d107      	bne.n	8001b8e <double2string+0x426>
		*(result + index++) = '-'; // Negative
 8001b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b80:	1c5a      	adds	r2, r3, #1
 8001b82:	63ba      	str	r2, [r7, #56]	; 0x38
 8001b84:	461a      	mov	r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	4413      	add	r3, r2
 8001b8a:	222d      	movs	r2, #45	; 0x2d
 8001b8c:	701a      	strb	r2, [r3, #0]
	}
	// Find first position
	if ( value < 1) {
 8001b8e:	f04f 0200 	mov.w	r2, #0
 8001b92:	4b4a      	ldr	r3, [pc, #296]	; (8001cbc <double2string+0x554>)
 8001b94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b98:	f7fe ffa0 	bl	8000adc <__aeabi_dcmplt>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d008      	beq.n	8001bb4 <double2string+0x44c>
		*(result + index++) = 0x30;
 8001ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ba4:	1c5a      	adds	r2, r3, #1
 8001ba6:	63ba      	str	r2, [r7, #56]	; 0x38
 8001ba8:	461a      	mov	r2, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	4413      	add	r3, r2
 8001bae:	2230      	movs	r2, #48	; 0x30
 8001bb0:	701a      	strb	r2, [r3, #0]
 8001bb2:	e04b      	b.n	8001c4c <double2string+0x4e4>
	} else {
		int8_t i = 0;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		for( ; i < 4; i++) {
 8001bba:	e027      	b.n	8001c0c <double2string+0x4a4>
			if (nguyen[i] > 0) {
 8001bbc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001bc0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001bc4:	4413      	add	r3, r2
 8001bc6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d017      	beq.n	8001bfe <double2string+0x496>
				*(result + index++) = nguyen[i] + 0x30;
 8001bce:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001bd2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001bd6:	4413      	add	r3, r2
 8001bd8:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 8001bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bde:	1c59      	adds	r1, r3, #1
 8001be0:	63b9      	str	r1, [r7, #56]	; 0x38
 8001be2:	4619      	mov	r1, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	440b      	add	r3, r1
 8001be8:	3230      	adds	r2, #48	; 0x30
 8001bea:	b2d2      	uxtb	r2, r2
 8001bec:	701a      	strb	r2, [r3, #0]
				i++;
 8001bee:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 8001bfc:	e00a      	b.n	8001c14 <double2string+0x4ac>
		for( ; i < 4; i++) {
 8001bfe:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	3301      	adds	r3, #1
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001c0c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001c10:	2b03      	cmp	r3, #3
 8001c12:	ddd3      	ble.n	8001bbc <double2string+0x454>
			}
		}

		for( ; i < 4; i++) {
 8001c14:	e016      	b.n	8001c44 <double2string+0x4dc>
		*(result + index++) = nguyen[i] + 0x30;
 8001c16:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001c1a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001c1e:	4413      	add	r3, r2
 8001c20:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 8001c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c26:	1c59      	adds	r1, r3, #1
 8001c28:	63b9      	str	r1, [r7, #56]	; 0x38
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	440b      	add	r3, r1
 8001c30:	3230      	adds	r2, #48	; 0x30
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	701a      	strb	r2, [r3, #0]
		for( ; i < 4; i++) {
 8001c36:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001c44:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001c48:	2b03      	cmp	r3, #3
 8001c4a:	dde4      	ble.n	8001c16 <double2string+0x4ae>
		}
	}
	*(result + index++) = '.';
 8001c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c4e:	1c5a      	adds	r2, r3, #1
 8001c50:	63ba      	str	r2, [r7, #56]	; 0x38
 8001c52:	461a      	mov	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4413      	add	r3, r2
 8001c58:	222e      	movs	r2, #46	; 0x2e
 8001c5a:	701a      	strb	r2, [r3, #0]
	for( int8_t i = 0; i < precision; i++) {
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001c62:	e016      	b.n	8001c92 <double2string+0x52a>
			*(result + index++) = le[i] + 0x30;
 8001c64:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001c68:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001c6c:	4413      	add	r3, r2
 8001c6e:	f813 2c2c 	ldrb.w	r2, [r3, #-44]
 8001c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c74:	1c59      	adds	r1, r3, #1
 8001c76:	63b9      	str	r1, [r7, #56]	; 0x38
 8001c78:	4619      	mov	r1, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	440b      	add	r3, r1
 8001c7e:	3230      	adds	r2, #48	; 0x30
 8001c80:	b2d2      	uxtb	r2, r2
 8001c82:	701a      	strb	r2, [r3, #0]
	for( int8_t i = 0; i < precision; i++) {
 8001c84:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001c92:	f997 2036 	ldrsb.w	r2, [r7, #54]	; 0x36
 8001c96:	7afb      	ldrb	r3, [r7, #11]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	dbe3      	blt.n	8001c64 <double2string+0x4fc>
	}

	// Chua giai quyet van de lam tron chu so thap phan
	*(result + index++) = 0;
 8001c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c9e:	1c5a      	adds	r2, r3, #1
 8001ca0:	63ba      	str	r2, [r7, #56]	; 0x38
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	2200      	movs	r2, #0
 8001caa:	701a      	strb	r2, [r3, #0]
	return index;
 8001cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3740      	adds	r7, #64	; 0x40
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bdb0      	pop	{r4, r5, r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	3fe00000 	.word	0x3fe00000
 8001cbc:	3ff00000 	.word	0x3ff00000

08001cc0 <packPayload>:
 *  in_lenght		: lenght of input_buff
 *
 *  returns:		: lenght of output_buff
 *  				  -1 if error
 */
int32_t	packPayload		(uint8_t *input_buff, uint8_t *output_buff, int32_t in_lenght) {
 8001cc0:	b5b0      	push	{r4, r5, r7, lr}
 8001cc2:	b088      	sub	sp, #32
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
 8001ccc:	466b      	mov	r3, sp
 8001cce:	461d      	mov	r5, r3
	if (NULL == input_buff) {
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d102      	bne.n	8001cdc <packPayload+0x1c>
		return -1;
 8001cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cda:	e056      	b.n	8001d8a <packPayload+0xca>
	}

	if (NULL == output_buff) {
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d102      	bne.n	8001ce8 <packPayload+0x28>
		return -1;
 8001ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce6:	e050      	b.n	8001d8a <packPayload+0xca>
	}

	int32_t out_lenght = 0;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	61bb      	str	r3, [r7, #24]

	out_lenght = in_lenght + 2;//lenght of start char and end char
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3302      	adds	r3, #2
 8001cf0:	61bb      	str	r3, [r7, #24]
//		if ( (START_CHAR == input_buff[i]) ||	(END_CHAR == input_buff[i])	|| (ADD_CHAR == input_buff[i]) ) {
//			out_lenght++;
//		}
//	}// compute output buffer lenght

	uint8_t temp_buff[out_lenght];
 8001cf2:	69b8      	ldr	r0, [r7, #24]
 8001cf4:	1e43      	subs	r3, r0, #1
 8001cf6:	617b      	str	r3, [r7, #20]
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	f04f 0200 	mov.w	r2, #0
 8001d00:	f04f 0300 	mov.w	r3, #0
 8001d04:	f04f 0400 	mov.w	r4, #0
 8001d08:	00d4      	lsls	r4, r2, #3
 8001d0a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001d0e:	00cb      	lsls	r3, r1, #3
 8001d10:	4603      	mov	r3, r0
 8001d12:	4619      	mov	r1, r3
 8001d14:	f04f 0200 	mov.w	r2, #0
 8001d18:	f04f 0300 	mov.w	r3, #0
 8001d1c:	f04f 0400 	mov.w	r4, #0
 8001d20:	00d4      	lsls	r4, r2, #3
 8001d22:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001d26:	00cb      	lsls	r3, r1, #3
 8001d28:	4603      	mov	r3, r0
 8001d2a:	3307      	adds	r3, #7
 8001d2c:	08db      	lsrs	r3, r3, #3
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	ebad 0d03 	sub.w	sp, sp, r3
 8001d34:	466b      	mov	r3, sp
 8001d36:	3300      	adds	r3, #0
 8001d38:	613b      	str	r3, [r7, #16]

	out_lenght = 0;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61bb      	str	r3, [r7, #24]
	temp_buff[out_lenght++] = START_CHAR;
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	1c5a      	adds	r2, r3, #1
 8001d42:	61ba      	str	r2, [r7, #24]
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	2128      	movs	r1, #40	; 0x28
 8001d48:	54d1      	strb	r1, [r2, r3]
	for (int32_t i = 0; i < in_lenght; i++) {
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61fb      	str	r3, [r7, #28]
 8001d4e:	e00b      	b.n	8001d68 <packPayload+0xa8>
//			temp_buff[out_lenght++] = ADD_CHAR;
//			temp_buff[out_lenght++] = input_buff[i] ^ XOR_CHAR;
//		} else {
//			temp_buff[out_lenght++] = input_buff[i];
//		}
		temp_buff[out_lenght++] = input_buff[i];
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	441a      	add	r2, r3
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	1c59      	adds	r1, r3, #1
 8001d5a:	61b9      	str	r1, [r7, #24]
 8001d5c:	7811      	ldrb	r1, [r2, #0]
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	54d1      	strb	r1, [r2, r3]
	for (int32_t i = 0; i < in_lenght; i++) {
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	3301      	adds	r3, #1
 8001d66:	61fb      	str	r3, [r7, #28]
 8001d68:	69fa      	ldr	r2, [r7, #28]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	dbef      	blt.n	8001d50 <packPayload+0x90>
	}
	temp_buff[out_lenght++] = END_CHAR;
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	1c5a      	adds	r2, r3, #1
 8001d74:	61ba      	str	r2, [r7, #24]
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	2129      	movs	r1, #41	; 0x29
 8001d7a:	54d1      	strb	r1, [r2, r3]

	memmove(output_buff, temp_buff, out_lenght);
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4619      	mov	r1, r3
 8001d82:	68b8      	ldr	r0, [r7, #8]
 8001d84:	f013 fcff 	bl	8015786 <memmove>

	return out_lenght;
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	46ad      	mov	sp, r5
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3720      	adds	r7, #32
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bdb0      	pop	{r4, r5, r7, pc}

08001d94 <unPackPayload>:
 *  in_lenght		: lenght of input_buff
 *
 *  returns:		: lenght of output_buff
 *  				  -1 if error
 */
int32_t	unPackPayload	(uint8_t *message_buff, int32_t in_lenght) {
 8001d94:	b5b0      	push	{r4, r5, r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
 8001d9e:	466b      	mov	r3, sp
 8001da0:	461d      	mov	r5, r3
	if (in_lenght < MIN_MESSAGE_LENGHT) {
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	2b03      	cmp	r3, #3
 8001da6:	dc02      	bgt.n	8001dae <unPackPayload+0x1a>
		return -1;
 8001da8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dac:	e063      	b.n	8001e76 <unPackPayload+0xe2>
	}// check minimum lenght

	if ( (START_CHAR != message_buff[0]) || (END_CHAR != message_buff[in_lenght - 1]) ) {
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	2b28      	cmp	r3, #40	; 0x28
 8001db4:	d106      	bne.n	8001dc4 <unPackPayload+0x30>
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	3b01      	subs	r3, #1
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b29      	cmp	r3, #41	; 0x29
 8001dc2:	d002      	beq.n	8001dca <unPackPayload+0x36>
		return -1;
 8001dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc8:	e055      	b.n	8001e76 <unPackPayload+0xe2>
	}// check start char and end char

	int32_t out_lenght = in_lenght - 2;
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	3b02      	subs	r3, #2
 8001dce:	613b      	str	r3, [r7, #16]
//		if ( (START_CHAR == message_buff[i]) || (END_CHAR == message_buff[i]) || (ADD_CHAR == message_buff[i]) ) {
//			out_lenght--;
//		}
//	}// compute output buffer lenght

	uint8_t temp_buff[out_lenght];
 8001dd0:	6938      	ldr	r0, [r7, #16]
 8001dd2:	1e43      	subs	r3, r0, #1
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	4619      	mov	r1, r3
 8001dda:	f04f 0200 	mov.w	r2, #0
 8001dde:	f04f 0300 	mov.w	r3, #0
 8001de2:	f04f 0400 	mov.w	r4, #0
 8001de6:	00d4      	lsls	r4, r2, #3
 8001de8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001dec:	00cb      	lsls	r3, r1, #3
 8001dee:	4603      	mov	r3, r0
 8001df0:	4619      	mov	r1, r3
 8001df2:	f04f 0200 	mov.w	r2, #0
 8001df6:	f04f 0300 	mov.w	r3, #0
 8001dfa:	f04f 0400 	mov.w	r4, #0
 8001dfe:	00d4      	lsls	r4, r2, #3
 8001e00:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001e04:	00cb      	lsls	r3, r1, #3
 8001e06:	4603      	mov	r3, r0
 8001e08:	3307      	adds	r3, #7
 8001e0a:	08db      	lsrs	r3, r3, #3
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	ebad 0d03 	sub.w	sp, sp, r3
 8001e12:	466b      	mov	r3, sp
 8001e14:	3300      	adds	r3, #0
 8001e16:	60bb      	str	r3, [r7, #8]

	out_lenght = 0;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	613b      	str	r3, [r7, #16]
	for (int32_t i = 0; i < (in_lenght - 1); i++) {
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]
 8001e20:	e017      	b.n	8001e52 <unPackPayload+0xbe>
		if ( (START_CHAR == message_buff[i]) ||	(END_CHAR == message_buff[i]) ) {
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	4413      	add	r3, r2
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	2b28      	cmp	r3, #40	; 0x28
 8001e2c:	d00e      	beq.n	8001e4c <unPackPayload+0xb8>
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	4413      	add	r3, r2
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	2b29      	cmp	r3, #41	; 0x29
 8001e38:	d008      	beq.n	8001e4c <unPackPayload+0xb8>
			;
//		} else if ( (ADD_CHAR == message_buff[i]) ) {
//			temp_buff[out_lenght++] = message_buff[++i] ^ XOR_CHAR;
		}
		else {
			temp_buff[out_lenght++] = message_buff[i];
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	441a      	add	r2, r3
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1c59      	adds	r1, r3, #1
 8001e44:	6139      	str	r1, [r7, #16]
 8001e46:	7811      	ldrb	r1, [r2, #0]
 8001e48:	68ba      	ldr	r2, [r7, #8]
 8001e4a:	54d1      	strb	r1, [r2, r3]
	for (int32_t i = 0; i < (in_lenght - 1); i++) {
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	617b      	str	r3, [r7, #20]
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	3b01      	subs	r3, #1
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	dbe2      	blt.n	8001e22 <unPackPayload+0x8e>
		}
	}
	memset((uint8_t*)message_buff, 0, in_lenght);
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	2100      	movs	r1, #0
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f013 fca8 	bl	80157b8 <memset>
	memmove(message_buff, temp_buff, out_lenght);
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f013 fc89 	bl	8015786 <memmove>

	return out_lenght;
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	46ad      	mov	sp, r5
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bdb0      	pop	{r4, r5, r7, pc}

08001e80 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	607b      	str	r3, [r7, #4]
 8001e8a:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <MX_DMA_Init+0x3c>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	4a0b      	ldr	r2, [pc, #44]	; (8001ebc <MX_DMA_Init+0x3c>)
 8001e90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e94:	6313      	str	r3, [r2, #48]	; 0x30
 8001e96:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <MX_DMA_Init+0x3c>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e9e:	607b      	str	r3, [r7, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	2105      	movs	r1, #5
 8001ea6:	200f      	movs	r0, #15
 8001ea8:	f009 f8c4 	bl	800b034 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001eac:	200f      	movs	r0, #15
 8001eae:	f009 f8dd 	bl	800b06c <HAL_NVIC_EnableIRQ>

}
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40023800 	.word	0x40023800

08001ec0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	4a07      	ldr	r2, [pc, #28]	; (8001eec <vApplicationGetIdleTaskMemory+0x2c>)
 8001ed0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	4a06      	ldr	r2, [pc, #24]	; (8001ef0 <vApplicationGetIdleTaskMemory+0x30>)
 8001ed6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ede:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8001ee0:	bf00      	nop
 8001ee2:	3714      	adds	r7, #20
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	20000ffc 	.word	0x20000ffc
 8001ef0:	20001050 	.word	0x20001050

08001ef4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001ef4:	b5b0      	push	{r4, r5, r7, lr}
 8001ef6:	b094      	sub	sp, #80	; 0x50
 8001ef8:	af00      	add	r7, sp, #0
       
  /* USER CODE END Init */

  /* Create the mutex(es) */
  /* definition and creation of usbTxMutex */
  osMutexDef(usbTxMutex);
 8001efa:	2300      	movs	r3, #0
 8001efc:	64bb      	str	r3, [r7, #72]	; 0x48
 8001efe:	2300      	movs	r3, #0
 8001f00:	64fb      	str	r3, [r7, #76]	; 0x4c
  usbTxMutexHandle = osMutexCreate(osMutex(usbTxMutex));
 8001f02:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f06:	4618      	mov	r0, r3
 8001f08:	f00f fe3a 	bl	8011b80 <osMutexCreate>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	4b1d      	ldr	r3, [pc, #116]	; (8001f84 <MX_FREERTOS_Init+0x90>)
 8001f10:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	  /* Create the queue(s) */
	  /* definition and creation of commandMail */
	  osMailQDef(commandMail, 1, DUTY_Command_TypeDef);
 8001f12:	2301      	movs	r3, #1
 8001f14:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f16:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
 8001f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f1c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f20:	643b      	str	r3, [r7, #64]	; 0x40
	  commandMailHandle = osMailCreate(osMailQ(commandMail), NULL);
 8001f22:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f26:	2100      	movs	r1, #0
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f00f ffc5 	bl	8011eb8 <osMailCreate>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	4b15      	ldr	r3, [pc, #84]	; (8001f88 <MX_FREERTOS_Init+0x94>)
 8001f32:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityHigh, 0, 2048);
 8001f34:	4b15      	ldr	r3, [pc, #84]	; (8001f8c <MX_FREERTOS_Init+0x98>)
 8001f36:	f107 041c 	add.w	r4, r7, #28
 8001f3a:	461d      	mov	r5, r3
 8001f3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f40:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001f48:	f107 031c 	add.w	r3, r7, #28
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f00f fd29 	bl	80119a6 <osThreadCreate>
 8001f54:	4602      	mov	r2, r0
 8001f56:	4b0e      	ldr	r3, [pc, #56]	; (8001f90 <MX_FREERTOS_Init+0x9c>)
 8001f58:	601a      	str	r2, [r3, #0]

  /* definition and creation of USB_RX_Check_ */
  osThreadDef(USB_RX_Check_, Start_USB_RX_Task, osPriorityNormal, 0, 1024);
 8001f5a:	4b0e      	ldr	r3, [pc, #56]	; (8001f94 <MX_FREERTOS_Init+0xa0>)
 8001f5c:	463c      	mov	r4, r7
 8001f5e:	461d      	mov	r5, r3
 8001f60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f64:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  USB_RX_Check_Handle = osThreadCreate(osThread(USB_RX_Check_), NULL);
 8001f6c:	463b      	mov	r3, r7
 8001f6e:	2100      	movs	r1, #0
 8001f70:	4618      	mov	r0, r3
 8001f72:	f00f fd18 	bl	80119a6 <osThreadCreate>
 8001f76:	4602      	mov	r2, r0
 8001f78:	4b07      	ldr	r3, [pc, #28]	; (8001f98 <MX_FREERTOS_Init+0xa4>)
 8001f7a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001f7c:	bf00      	nop
 8001f7e:	3750      	adds	r7, #80	; 0x50
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bdb0      	pop	{r4, r5, r7, pc}
 8001f84:	200052b8 	.word	0x200052b8
 8001f88:	200052bc 	.word	0x200052bc
 8001f8c:	0801ae08 	.word	0x0801ae08
 8001f90:	200052b4 	.word	0x200052b4
 8001f94:	0801ae34 	.word	0x0801ae34
 8001f98:	200052c0 	.word	0x200052c0
 8001f9c:	00000000 	.word	0x00000000

08001fa0 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001fa0:	b5b0      	push	{r4, r5, r7, lr}
 8001fa2:	ed2d 8b02 	vpush	{d8}
 8001fa6:	f5ad 6df5 	sub.w	sp, sp, #1960	; 0x7a8
 8001faa:	af66      	add	r7, sp, #408	; 0x198
 8001fac:	f107 0314 	add.w	r3, r7, #20
 8001fb0:	6018      	str	r0, [r3, #0]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001fb2:	f012 fe63 	bl	8014c7c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  HAL_GPIO_WritePin(USB_SIGN_GPIO_Port, USB_SIGN_Pin, GPIO_PIN_SET); // Pull-up Resistor
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	2110      	movs	r1, #16
 8001fba:	48c5      	ldr	r0, [pc, #788]	; (80022d0 <StartDefaultTask+0x330>)
 8001fbc:	f009 fd9c 	bl	800baf8 <HAL_GPIO_WritePin>

  osEvent 				ret_mail;
  DUTY_Command_TypeDef 	duty_cmd;
  DUTY_Command_TypeDef 	*dataMail;
  uint8_t 				isNewDuty = FALSE;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	f887 360f 	strb.w	r3, [r7, #1551]	; 0x60f
  SCARA_KeyStateTypeDef		current_key_state;
  SCARA_KeyTypeDef			current_key;
  int32_t					current_key_speed;
  double						run_time;

  LOG_REPORT("free_rtos.c: PROGRAM START...", __LINE__);
 8001fc6:	21cd      	movs	r1, #205	; 0xcd
 8001fc8:	48c2      	ldr	r0, [pc, #776]	; (80022d4 <StartDefaultTask+0x334>)
 8001fca:	f7ff fb87 	bl	80016dc <LOG_REPORT>

  // Init value
  current_method = scaraGetMethod();
 8001fce:	f006 ffad 	bl	8008f2c <scaraGetMethod>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	f887 35fb 	strb.w	r3, [r7, #1531]	; 0x5fb
  current_mode	 = scaraGetMode();
 8001fd8:	f006 ff9c 	bl	8008f14 <scaraGetMode>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	f887 35fa 	strb.w	r3, [r7, #1530]	; 0x5fa
  current_duty_state	 = scaraGetDutyState();
 8001fe2:	f006 ffaf 	bl	8008f44 <scaraGetDutyState>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	f887 35f9 	strb.w	r3, [r7, #1529]	; 0x5f9

  // Start up robot
  scaraStartup();
 8001fec:	f002 fbea 	bl	80047c4 <scaraStartup>
  osDelay(10);
 8001ff0:	200a      	movs	r0, #10
 8001ff2:	f00f fd24 	bl	8011a3e <osDelay>

  positionNext.Theta1 = -PI/3;
 8001ff6:	4ab8      	ldr	r2, [pc, #736]	; (80022d8 <StartDefaultTask+0x338>)
 8001ff8:	a4b1      	add	r4, pc, #708	; (adr r4, 80022c0 <StartDefaultTask+0x320>)
 8001ffa:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001ffe:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
  positionNext.Theta2 = PI/3;
 8002002:	4ab5      	ldr	r2, [pc, #724]	; (80022d8 <StartDefaultTask+0x338>)
 8002004:	a4b0      	add	r4, pc, #704	; (adr r4, 80022c8 <StartDefaultTask+0x328>)
 8002006:	e9d4 3400 	ldrd	r3, r4, [r4]
 800200a:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
  positionNext.D3 = 10;
 800200e:	4ab2      	ldr	r2, [pc, #712]	; (80022d8 <StartDefaultTask+0x338>)
 8002010:	f04f 0300 	mov.w	r3, #0
 8002014:	4cb1      	ldr	r4, [pc, #708]	; (80022dc <StartDefaultTask+0x33c>)
 8002016:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
  positionNext.Theta4 = 0;
 800201a:	4aaf      	ldr	r2, [pc, #700]	; (80022d8 <StartDefaultTask+0x338>)
 800201c:	f04f 0300 	mov.w	r3, #0
 8002020:	f04f 0400 	mov.w	r4, #0
 8002024:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
  positionNext.t = 0;
 8002028:	4aab      	ldr	r2, [pc, #684]	; (80022d8 <StartDefaultTask+0x338>)
 800202a:	f04f 0300 	mov.w	r3, #0
 800202e:	f04f 0400 	mov.w	r4, #0
 8002032:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
  kinematicForward(&positionNext);
 8002036:	48a8      	ldr	r0, [pc, #672]	; (80022d8 <StartDefaultTask+0x338>)
 8002038:	f000 ffa6 	bl	8002f88 <kinematicForward>
  /* Infinite loop */
//Start Timer 7
	  HAL_TIM_Base_Start_IT(&htim7);
 800203c:	48a8      	ldr	r0, [pc, #672]	; (80022e0 <StartDefaultTask+0x340>)
 800203e:	f00b fc14 	bl	800d86a <HAL_TIM_Base_Start_IT>
  for(;;)
  {
	  /*---------Wait for Timer Trigger-----------*/
	  osSignalWait(0x01, osWaitForever); // Very Important
 8002042:	463b      	mov	r3, r7
 8002044:	f04f 32ff 	mov.w	r2, #4294967295
 8002048:	2101      	movs	r1, #1
 800204a:	4618      	mov	r0, r3
 800204c:	f00f fd4c 	bl	8011ae8 <osSignalWait>
	  /* 1--- Reset Value ---*/
	  respond_lenght		= 0;
 8002050:	2300      	movs	r3, #0
 8002052:	f8c7 3608 	str.w	r3, [r7, #1544]	; 0x608
	  respond_packed_lenght = 0;
 8002056:	2300      	movs	r3, #0
 8002058:	f8c7 3600 	str.w	r3, [r7, #1536]	; 0x600
	  infor_lenght			= 0;
 800205c:	2300      	movs	r3, #0
 800205e:	f8c7 3604 	str.w	r3, [r7, #1540]	; 0x604
	  infor_packed_lenght	= 0;
 8002062:	2300      	movs	r3, #0
 8002064:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
	  task_usb_lenght		= 0;
 8002068:	2300      	movs	r3, #0
 800206a:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
	  usb_lenght			= 0;
 800206e:	2300      	movs	r3, #0
 8002070:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8
	  // Update new position
	  memcpy(&positionPrevios, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 8002074:	4a9b      	ldr	r2, [pc, #620]	; (80022e4 <StartDefaultTask+0x344>)
 8002076:	4b9c      	ldr	r3, [pc, #624]	; (80022e8 <StartDefaultTask+0x348>)
 8002078:	4610      	mov	r0, r2
 800207a:	4619      	mov	r1, r3
 800207c:	23b8      	movs	r3, #184	; 0xb8
 800207e:	461a      	mov	r2, r3
 8002080:	f013 fb76 	bl	8015770 <memcpy>
	  memcpy(&positionCurrent, &positionNext, sizeof(SCARA_PositionTypeDef));
 8002084:	4a98      	ldr	r2, [pc, #608]	; (80022e8 <StartDefaultTask+0x348>)
 8002086:	4b94      	ldr	r3, [pc, #592]	; (80022d8 <StartDefaultTask+0x338>)
 8002088:	4610      	mov	r0, r2
 800208a:	4619      	mov	r1, r3
 800208c:	23b8      	movs	r3, #184	; 0xb8
 800208e:	461a      	mov	r2, r3
 8002090:	f013 fb6e 	bl	8015770 <memcpy>
#ifndef SIMULATION
	  if(scaraIsScanLimit()) {
 8002094:	f006 ff62 	bl	8008f5c <scaraIsScanLimit>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d017      	beq.n	80020ce <StartDefaultTask+0x12e>
		  lowlayer_readTruePosition(&positionTrue);
 800209e:	4893      	ldr	r0, [pc, #588]	; (80022ec <StartDefaultTask+0x34c>)
 80020a0:	f001 fe66 	bl	8003d70 <lowlayer_readTruePosition>
		  kinematicForward(&positionTrue);
 80020a4:	4891      	ldr	r0, [pc, #580]	; (80022ec <StartDefaultTask+0x34c>)
 80020a6:	f000 ff6f 	bl	8002f88 <kinematicForward>
		  positionTrue.t = positionCurrent.t;
 80020aa:	4b8f      	ldr	r3, [pc, #572]	; (80022e8 <StartDefaultTask+0x348>)
 80020ac:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80020b0:	4a8e      	ldr	r2, [pc, #568]	; (80022ec <StartDefaultTask+0x34c>)
 80020b2:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		  positionTrue.total_time = positionCurrent.total_time;
 80020b6:	4b8c      	ldr	r3, [pc, #560]	; (80022e8 <StartDefaultTask+0x348>)
 80020b8:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
 80020bc:	4a8b      	ldr	r2, [pc, #556]	; (80022ec <StartDefaultTask+0x34c>)
 80020be:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
		  positionTrue.q = positionCurrent.q;
 80020c2:	4b89      	ldr	r3, [pc, #548]	; (80022e8 <StartDefaultTask+0x348>)
 80020c4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80020c8:	4a88      	ldr	r2, [pc, #544]	; (80022ec <StartDefaultTask+0x34c>)
 80020ca:	e9c2 3400 	strd	r3, r4, [r2]
	  }
#endif
	  /* 2--- Check New Duty Phase ---*/
	  // Check mail
	  ret_mail = osMailGet(commandMailHandle, 0);
 80020ce:	4b88      	ldr	r3, [pc, #544]	; (80022f0 <StartDefaultTask+0x350>)
 80020d0:	6819      	ldr	r1, [r3, #0]
 80020d2:	f207 53d4 	addw	r3, r7, #1492	; 0x5d4
 80020d6:	2200      	movs	r2, #0
 80020d8:	4618      	mov	r0, r3
 80020da:	f00f ff99 	bl	8012010 <osMailGet>
	  if ( ret_mail.status == osEventMail) {
 80020de:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 80020e2:	2b20      	cmp	r3, #32
 80020e4:	d116      	bne.n	8002114 <StartDefaultTask+0x174>
		   dataMail = ret_mail.value.p;
 80020e6:	f8d7 35d8 	ldr.w	r3, [r7, #1496]	; 0x5d8
 80020ea:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
		   memcpy( &duty_cmd, dataMail, sizeof(DUTY_Command_TypeDef));
 80020ee:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80020f2:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
 80020f6:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 80020fa:	4618      	mov	r0, r3
 80020fc:	f013 fb38 	bl	8015770 <memcpy>
		   isNewDuty = TRUE;
 8002100:	2301      	movs	r3, #1
 8002102:	f887 360f 	strb.w	r3, [r7, #1551]	; 0x60f
		   osMailFree(commandMailHandle, dataMail);/* free memory allocated for mail */
 8002106:	4b7a      	ldr	r3, [pc, #488]	; (80022f0 <StartDefaultTask+0x350>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 800210e:	4618      	mov	r0, r3
 8002110:	f00f fff2 	bl	80120f8 <osMailFree>
	  }
	  if(isNewDuty) {
 8002114:	f897 360f 	ldrb.w	r3, [r7, #1551]	; 0x60f
 8002118:	2b00      	cmp	r3, #0
 800211a:	f000 8151 	beq.w	80023c0 <StartDefaultTask+0x420>
		  memset(respond, 0, 40);
 800211e:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002122:	2228      	movs	r2, #40	; 0x28
 8002124:	2100      	movs	r1, #0
 8002126:	4618      	mov	r0, r3
 8002128:	f013 fb46 	bl	80157b8 <memset>
		  // Check change method
		  if (duty_cmd.change_method == TRUE) {
 800212c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d13c      	bne.n	80021b0 <StartDefaultTask+0x210>
			  if (SCARA_METHOD_MANUAL == duty_cmd.robot_method) {
 8002136:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800213a:	785b      	ldrb	r3, [r3, #1]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d10e      	bne.n	800215e <StartDefaultTask+0x1be>
				  // Need add check condition idle in each method
				  current_method = SCARA_METHOD_MANUAL;
 8002140:	2300      	movs	r3, #0
 8002142:	f887 35fb 	strb.w	r3, [r7, #1531]	; 0x5fb
				  respond_lenght = commandRespond(RPD_OK,
 8002146:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800214a:	6899      	ldr	r1, [r3, #8]
 800214c:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002150:	4a68      	ldr	r2, [pc, #416]	; (80022f4 <StartDefaultTask+0x354>)
 8002152:	2008      	movs	r0, #8
 8002154:	f7ff fa36 	bl	80015c4 <commandRespond>
 8002158:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
 800215c:	e12d      	b.n	80023ba <StartDefaultTask+0x41a>
												duty_cmd.id_command,
												"Changed MANUAL Method",
												(char *)respond);
			  } else if (SCARA_METHOD_SEMI_AUTO == duty_cmd.robot_method) {
 800215e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002162:	785b      	ldrb	r3, [r3, #1]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d10e      	bne.n	8002186 <StartDefaultTask+0x1e6>
				  current_method = SCARA_METHOD_SEMI_AUTO;
 8002168:	2301      	movs	r3, #1
 800216a:	f887 35fb 	strb.w	r3, [r7, #1531]	; 0x5fb
				  respond_lenght = commandRespond(RPD_OK,
 800216e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002172:	6899      	ldr	r1, [r3, #8]
 8002174:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002178:	4a5f      	ldr	r2, [pc, #380]	; (80022f8 <StartDefaultTask+0x358>)
 800217a:	2008      	movs	r0, #8
 800217c:	f7ff fa22 	bl	80015c4 <commandRespond>
 8002180:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
 8002184:	e119      	b.n	80023ba <StartDefaultTask+0x41a>
												duty_cmd.id_command,
												"Changed SEMI AUTO Method",
												(char *)respond);
			  } else if (SCARA_METHOD_AUTO == duty_cmd.robot_method) {
 8002186:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800218a:	785b      	ldrb	r3, [r3, #1]
 800218c:	2b02      	cmp	r3, #2
 800218e:	f040 8114 	bne.w	80023ba <StartDefaultTask+0x41a>
				  current_method = SCARA_METHOD_AUTO;
 8002192:	2302      	movs	r3, #2
 8002194:	f887 35fb 	strb.w	r3, [r7, #1531]	; 0x5fb
				  respond_lenght = commandRespond(RPD_OK,
 8002198:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800219c:	6899      	ldr	r1, [r3, #8]
 800219e:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80021a2:	4a56      	ldr	r2, [pc, #344]	; (80022fc <StartDefaultTask+0x35c>)
 80021a4:	2008      	movs	r0, #8
 80021a6:	f7ff fa0d 	bl	80015c4 <commandRespond>
 80021aa:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
 80021ae:	e104      	b.n	80023ba <StartDefaultTask+0x41a>
												"Changed AUTO Method",
												(char *)respond);
			  }
		  } else {
			  	  // Check current method & cmd method
			  	  if (current_method == duty_cmd.robot_method) {
 80021b0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80021b4:	785b      	ldrb	r3, [r3, #1]
 80021b6:	f897 25fb 	ldrb.w	r2, [r7, #1531]	; 0x5fb
 80021ba:	429a      	cmp	r2, r3
 80021bc:	f040 80ee 	bne.w	800239c <StartDefaultTask+0x3fc>
				  	  switch( duty_cmd.robot_method) {
 80021c0:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80021c4:	785b      	ldrb	r3, [r3, #1]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d030      	beq.n	800222c <StartDefaultTask+0x28c>
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	f000 80f2 	beq.w	80023b4 <StartDefaultTask+0x414>
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f040 80dd 	bne.w	8002390 <StartDefaultTask+0x3f0>
				  	  case SCARA_METHOD_MANUAL:
				  	  {
				  		  if (current_key_state == SCARA_KEY_STATE_READY) {
 80021d6:	f897 35f7 	ldrb.w	r3, [r7, #1527]	; 0x5f7
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d10d      	bne.n	80021fa <StartDefaultTask+0x25a>
				  			  current_key = duty_cmd.keyboard;
 80021de:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80021e2:	78db      	ldrb	r3, [r3, #3]
 80021e4:	f887 35f6 	strb.w	r3, [r7, #1526]	; 0x5f6
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Init new path
 80021e8:	2301      	movs	r3, #1
 80021ea:	f887 35f7 	strb.w	r3, [r7, #1527]	; 0x5f7
				  			  current_key_speed = duty_cmd.key_speed;
 80021ee:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f8c7 35f0 	str.w	r3, [r7, #1520]	; 0x5f0
				  				  	  && current_key_state == SCARA_KEY_STATE_FLOW
									  && current_key_speed == duty_cmd.key_speed) {
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Continue old path
				  		  }
				  	  }
				  	  break;
 80021f8:	e0de      	b.n	80023b8 <StartDefaultTask+0x418>
				  		  } else if (current_key == duty_cmd.keyboard
 80021fa:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80021fe:	78db      	ldrb	r3, [r3, #3]
 8002200:	f897 25f6 	ldrb.w	r2, [r7, #1526]	; 0x5f6
 8002204:	429a      	cmp	r2, r3
 8002206:	f040 80d7 	bne.w	80023b8 <StartDefaultTask+0x418>
				  				  	  && current_key_state == SCARA_KEY_STATE_FLOW
 800220a:	f897 35f7 	ldrb.w	r3, [r7, #1527]	; 0x5f7
 800220e:	2b02      	cmp	r3, #2
 8002210:	f040 80d2 	bne.w	80023b8 <StartDefaultTask+0x418>
									  && current_key_speed == duty_cmd.key_speed) {
 8002214:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f8d7 25f0 	ldr.w	r2, [r7, #1520]	; 0x5f0
 800221e:	429a      	cmp	r2, r3
 8002220:	f040 80ca 	bne.w	80023b8 <StartDefaultTask+0x418>
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Continue old path
 8002224:	2301      	movs	r3, #1
 8002226:	f887 35f7 	strb.w	r3, [r7, #1527]	; 0x5f7
				  	  break;
 800222a:	e0c5      	b.n	80023b8 <StartDefaultTask+0x418>
				  	  case SCARA_METHOD_SEMI_AUTO:
				  	  {
						  switch( duty_cmd.robot_mode) {
 800222c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002230:	789b      	ldrb	r3, [r3, #2]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d018      	beq.n	8002268 <StartDefaultTask+0x2c8>
 8002236:	2b02      	cmp	r3, #2
 8002238:	d06c      	beq.n	8002314 <StartDefaultTask+0x374>
 800223a:	2b00      	cmp	r3, #0
 800223c:	f040 80a1 	bne.w	8002382 <StartDefaultTask+0x3e2>
						  case SCARA_MODE_STOP:
							  {
								  current_mode	 = SCARA_MODE_STOP;
 8002240:	2300      	movs	r3, #0
 8002242:	f887 35fa 	strb.w	r3, [r7, #1530]	; 0x5fa
								  respond_lenght = commandRespond(RPD_OK,
 8002246:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800224a:	6899      	ldr	r1, [r3, #8]
 800224c:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002250:	4a2b      	ldr	r2, [pc, #172]	; (8002300 <StartDefaultTask+0x360>)
 8002252:	2008      	movs	r0, #8
 8002254:	f7ff f9b6 	bl	80015c4 <commandRespond>
 8002258:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
																  duty_cmd.id_command,
																  "Stop Now",
																  (char *)respond);
								  LOG_REPORT("ROBOT STOP !!!", __LINE__);
 800225c:	f44f 719a 	mov.w	r1, #308	; 0x134
 8002260:	4828      	ldr	r0, [pc, #160]	; (8002304 <StartDefaultTask+0x364>)
 8002262:	f7ff fa3b 	bl	80016dc <LOG_REPORT>
							  }
							  break;
 8002266:	e092      	b.n	800238e <StartDefaultTask+0x3ee>

						  case SCARA_MODE_SCAN:
							  {
								  if (SCARA_MODE_DUTY == current_mode
 8002268:	f897 35fa 	ldrb.w	r3, [r7, #1530]	; 0x5fa
 800226c:	2b02      	cmp	r3, #2
 800226e:	d115      	bne.n	800229c <StartDefaultTask+0x2fc>
									  && SCARA_DUTY_STATE_READY == current_duty_state) {
 8002270:	f897 35f9 	ldrb.w	r3, [r7, #1529]	; 0x5f9
 8002274:	2b00      	cmp	r3, #0
 8002276:	d111      	bne.n	800229c <StartDefaultTask+0x2fc>
									  current_mode = SCARA_MODE_SCAN;
 8002278:	2301      	movs	r3, #1
 800227a:	f887 35fa 	strb.w	r3, [r7, #1530]	; 0x5fa
									  current_scan_state = SCARA_SCAN_STATE_INIT;
 800227e:	2300      	movs	r3, #0
 8002280:	f887 35f8 	strb.w	r3, [r7, #1528]	; 0x5f8
									  respond_lenght = commandRespond(RPD_OK,
 8002284:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002288:	6899      	ldr	r1, [r3, #8]
 800228a:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800228e:	4a1e      	ldr	r2, [pc, #120]	; (8002308 <StartDefaultTask+0x368>)
 8002290:	2008      	movs	r0, #8
 8002292:	f7ff f997 	bl	80015c4 <commandRespond>
 8002296:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
																	  "Busy",
																	  (char *)respond);
									  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
								  }
							  }
							  break;
 800229a:	e078      	b.n	800238e <StartDefaultTask+0x3ee>
									  respond_lenght = commandRespond(RPD_ERROR,
 800229c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80022a0:	6899      	ldr	r1, [r3, #8]
 80022a2:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80022a6:	4a19      	ldr	r2, [pc, #100]	; (800230c <StartDefaultTask+0x36c>)
 80022a8:	2007      	movs	r0, #7
 80022aa:	f7ff f98b 	bl	80015c4 <commandRespond>
 80022ae:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
									  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
 80022b2:	f240 1147 	movw	r1, #327	; 0x147
 80022b6:	4816      	ldr	r0, [pc, #88]	; (8002310 <StartDefaultTask+0x370>)
 80022b8:	f7ff fa10 	bl	80016dc <LOG_REPORT>
							  break;
 80022bc:	e067      	b.n	800238e <StartDefaultTask+0x3ee>
 80022be:	bf00      	nop
 80022c0:	40000000 	.word	0x40000000
 80022c4:	bff0c152 	.word	0xbff0c152
 80022c8:	40000000 	.word	0x40000000
 80022cc:	3ff0c152 	.word	0x3ff0c152
 80022d0:	40020400 	.word	0x40020400
 80022d4:	0801ae50 	.word	0x0801ae50
 80022d8:	20005fa8 	.word	0x20005fa8
 80022dc:	40240000 	.word	0x40240000
 80022e0:	200060a0 	.word	0x200060a0
 80022e4:	20005cc8 	.word	0x20005cc8
 80022e8:	20005e38 	.word	0x20005e38
 80022ec:	20005ef0 	.word	0x20005ef0
 80022f0:	200052bc 	.word	0x200052bc
 80022f4:	0801ae70 	.word	0x0801ae70
 80022f8:	0801ae88 	.word	0x0801ae88
 80022fc:	0801aea4 	.word	0x0801aea4
 8002300:	0801aeb8 	.word	0x0801aeb8
 8002304:	0801aec4 	.word	0x0801aec4
 8002308:	0801aed4 	.word	0x0801aed4
 800230c:	0801aee0 	.word	0x0801aee0
 8002310:	0801aee8 	.word	0x0801aee8

						  case SCARA_MODE_DUTY:
							  {
								  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_duty_state) {
 8002314:	f897 35fa 	ldrb.w	r3, [r7, #1530]	; 0x5fa
 8002318:	2b02      	cmp	r3, #2
 800231a:	d120      	bne.n	800235e <StartDefaultTask+0x3be>
 800231c:	f897 35f9 	ldrb.w	r3, [r7, #1529]	; 0x5f9
 8002320:	2b00      	cmp	r3, #0
 8002322:	d11c      	bne.n	800235e <StartDefaultTask+0x3be>
									  if (scaraIsScanLimit()) {
 8002324:	f006 fe1a 	bl	8008f5c <scaraIsScanLimit>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d006      	beq.n	800233c <StartDefaultTask+0x39c>
										  current_mode	 = SCARA_MODE_DUTY;
 800232e:	2302      	movs	r3, #2
 8002330:	f887 35fa 	strb.w	r3, [r7, #1530]	; 0x5fa
										  current_duty_state	 = SCARA_DUTY_STATE_INIT;
 8002334:	2301      	movs	r3, #1
 8002336:	f887 35f9 	strb.w	r3, [r7, #1529]	; 0x5f9
									  if (scaraIsScanLimit()) {
 800233a:	e021      	b.n	8002380 <StartDefaultTask+0x3e0>
									  } else {
										  respond_lenght = commandRespond(RPD_ERROR,
 800233c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002340:	6899      	ldr	r1, [r3, #8]
 8002342:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002346:	4ad0      	ldr	r2, [pc, #832]	; (8002688 <StartDefaultTask+0x6e8>)
 8002348:	2007      	movs	r0, #7
 800234a:	f7ff f93b 	bl	80015c4 <commandRespond>
 800234e:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
																		  duty_cmd.id_command,
																		  "Has Not Scan Yet.",
																		  (char *)respond);
										  LOG_REPORT("MOVE FAIL:NOT SCAN", __LINE__);
 8002352:	f240 1157 	movw	r1, #343	; 0x157
 8002356:	48cd      	ldr	r0, [pc, #820]	; (800268c <StartDefaultTask+0x6ec>)
 8002358:	f7ff f9c0 	bl	80016dc <LOG_REPORT>
									  if (scaraIsScanLimit()) {
 800235c:	e010      	b.n	8002380 <StartDefaultTask+0x3e0>
									  }
								  } else {
									  respond_lenght	= commandRespond(RPD_ERROR,
 800235e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002362:	6899      	ldr	r1, [r3, #8]
 8002364:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002368:	4ac9      	ldr	r2, [pc, #804]	; (8002690 <StartDefaultTask+0x6f0>)
 800236a:	2007      	movs	r0, #7
 800236c:	f7ff f92a 	bl	80015c4 <commandRespond>
 8002370:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
																		  duty_cmd.id_command,
																		  "Busy.",
																		  (char *)respond);
									  LOG_REPORT("MOVE FAIL:BUSY", __LINE__);
 8002374:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8002378:	48c6      	ldr	r0, [pc, #792]	; (8002694 <StartDefaultTask+0x6f4>)
 800237a:	f7ff f9af 	bl	80016dc <LOG_REPORT>
								  }
							  }
							  break;
 800237e:	e006      	b.n	800238e <StartDefaultTask+0x3ee>
 8002380:	e005      	b.n	800238e <StartDefaultTask+0x3ee>
						  default:
							  {
								  LOG_REPORT("CMD Error Mode !!!", __LINE__);
 8002382:	f44f 71b2 	mov.w	r1, #356	; 0x164
 8002386:	48c4      	ldr	r0, [pc, #784]	; (8002698 <StartDefaultTask+0x6f8>)
 8002388:	f7ff f9a8 	bl	80016dc <LOG_REPORT>
							  }
						  }
					  }
					  break;
 800238c:	e015      	b.n	80023ba <StartDefaultTask+0x41a>
 800238e:	e014      	b.n	80023ba <StartDefaultTask+0x41a>

				  	  }
				  	  break;
				  	  default:
				  	  {
				  		  LOG_REPORT("CMD Error Method !!!", __LINE__);
 8002390:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8002394:	48c1      	ldr	r0, [pc, #772]	; (800269c <StartDefaultTask+0x6fc>)
 8002396:	f7ff f9a1 	bl	80016dc <LOG_REPORT>
 800239a:	e00e      	b.n	80023ba <StartDefaultTask+0x41a>
				  	  }
				  	  }
			  	  } else {
					  respond_lenght = commandRespond(RPD_ERROR,
 800239c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80023a0:	6899      	ldr	r1, [r3, #8]
 80023a2:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80023a6:	4abe      	ldr	r2, [pc, #760]	; (80026a0 <StartDefaultTask+0x700>)
 80023a8:	2007      	movs	r0, #7
 80023aa:	f7ff f90b 	bl	80015c4 <commandRespond>
 80023ae:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
 80023b2:	e002      	b.n	80023ba <StartDefaultTask+0x41a>
				  	  break;
 80023b4:	bf00      	nop
 80023b6:	e000      	b.n	80023ba <StartDefaultTask+0x41a>
				  	  break;
 80023b8:	bf00      	nop
													"METHOD isn't correct",
													(char *)respond);
			  	  }

			  }
		  isNewDuty = FALSE;
 80023ba:	2300      	movs	r3, #0
 80023bc:	f887 360f 	strb.w	r3, [r7, #1551]	; 0x60f
	  }

	  /* 3--- Execute Phase ---*/
	  switch(current_method) {
 80023c0:	f897 35fb 	ldrb.w	r3, [r7, #1531]	; 0x5fb
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	f000 80de 	beq.w	8002586 <StartDefaultTask+0x5e6>
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	f000 82b7 	beq.w	800293e <StartDefaultTask+0x99e>
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f040 82b7 	bne.w	8002944 <StartDefaultTask+0x9a4>
	  case SCARA_METHOD_MANUAL:
	  {
		  switch( current_key_state) {
 80023d6:	f897 35f7 	ldrb.w	r3, [r7, #1527]	; 0x5f7
 80023da:	2b03      	cmp	r3, #3
 80023dc:	f200 82b1 	bhi.w	8002942 <StartDefaultTask+0x9a2>
 80023e0:	a201      	add	r2, pc, #4	; (adr r2, 80023e8 <StartDefaultTask+0x448>)
 80023e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e6:	bf00      	nop
 80023e8:	08002583 	.word	0x08002583
 80023ec:	080023f9 	.word	0x080023f9
 80023f0:	08002453 	.word	0x08002453
 80023f4:	08002551 	.word	0x08002551
		  case SCARA_KEY_STATE_READY:
			  /* Wait for application keyboard , do nothing*/
		  break;
		  case SCARA_KEY_STATE_INIT:
		  {
			  if (scaraKeyInit(current_key, current_key_speed, &run_time) == SCARA_STATUS_OK) {
 80023f8:	f107 0218 	add.w	r2, r7, #24
 80023fc:	f897 35f6 	ldrb.w	r3, [r7, #1526]	; 0x5f6
 8002400:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 8002404:	4618      	mov	r0, r3
 8002406:	f006 ff1f 	bl	8009248 <scaraKeyInit>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d11c      	bne.n	800244a <StartDefaultTask+0x4aa>
				  current_key_state = SCARA_KEY_STATE_FLOW;
 8002410:	2302      	movs	r3, #2
 8002412:	f887 35f7 	strb.w	r3, [r7, #1527]	; 0x5f7
#ifdef SIMULATION
				  scaraPosition2String((char *)position, positionCurrent);
#else
				  scaraPosition2String((char *)position, positionTrue);
 8002416:	4ca3      	ldr	r4, [pc, #652]	; (80026a4 <StartDefaultTask+0x704>)
 8002418:	f507 755e 	add.w	r5, r7, #888	; 0x378
 800241c:	4668      	mov	r0, sp
 800241e:	f104 0308 	add.w	r3, r4, #8
 8002422:	22b0      	movs	r2, #176	; 0xb0
 8002424:	4619      	mov	r1, r3
 8002426:	f013 f9a3 	bl	8015770 <memcpy>
 800242a:	e894 000c 	ldmia.w	r4, {r2, r3}
 800242e:	4628      	mov	r0, r5
 8002430:	f006 fdce 	bl	8008fd0 <scaraPosition2String>
#endif
				  infor_lenght 		= commandRespond(RPD_START,
 8002434:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8002438:	f507 725e 	add.w	r2, r7, #888	; 0x378
 800243c:	2100      	movs	r1, #0
 800243e:	2003      	movs	r0, #3
 8002440:	f7ff f8c0 	bl	80015c4 <commandRespond>
 8002444:	f8c7 0604 	str.w	r0, [r7, #1540]	; 0x604
													  (char *)infor);
			  } else {
				  current_key_state = SCARA_KEY_STATE_READY;
			  }
		  }
		  break;
 8002448:	e09c      	b.n	8002584 <StartDefaultTask+0x5e4>
				  current_key_state = SCARA_KEY_STATE_READY;
 800244a:	2300      	movs	r3, #0
 800244c:	f887 35f7 	strb.w	r3, [r7, #1527]	; 0x5f7
		  break;
 8002450:	e098      	b.n	8002584 <StartDefaultTask+0x5e4>
		  case SCARA_KEY_STATE_FLOW:
		  {
			  SCARA_StatusTypeDef status;
			  // Increase run time
			  run_time += T_SAMPLING;
 8002452:	f107 0318 	add.w	r3, r7, #24
 8002456:	e9d3 0100 	ldrd	r0, r1, [r3]
 800245a:	a389      	add	r3, pc, #548	; (adr r3, 8002680 <StartDefaultTask+0x6e0>)
 800245c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002460:	f7fd ff14 	bl	800028c <__adddf3>
 8002464:	4603      	mov	r3, r0
 8002466:	460c      	mov	r4, r1
 8002468:	f107 0218 	add.w	r2, r7, #24
 800246c:	e9c2 3400 	strd	r3, r4, [r2]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 8002470:	f107 0318 	add.w	r3, r7, #24
 8002474:	ed93 7b00 	vldr	d7, [r3]
 8002478:	eeb0 0a47 	vmov.f32	s0, s14
 800247c:	eef0 0a67 	vmov.f32	s1, s15
 8002480:	f006 fd7a 	bl	8008f78 <scaraIsFinish>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <StartDefaultTask+0x4f2>
				  current_key_state = SCARA_KEY_STATE_FINISH;// Key Done
 800248a:	2303      	movs	r3, #3
 800248c:	f887 35f7 	strb.w	r3, [r7, #1527]	; 0x5f7
													(char *)infor);
					  LOG_REPORT("STOP KEY", __LINE__);
				  }
			  }
		  }
		  break;
 8002490:	e078      	b.n	8002584 <StartDefaultTask+0x5e4>
				  status = scaraKeyFlow(run_time, &positionNext, positionCurrent);
 8002492:	f107 0318 	add.w	r3, r7, #24
 8002496:	ed93 8b00 	vldr	d8, [r3]
 800249a:	4c83      	ldr	r4, [pc, #524]	; (80026a8 <StartDefaultTask+0x708>)
 800249c:	4668      	mov	r0, sp
 800249e:	f104 0308 	add.w	r3, r4, #8
 80024a2:	22b0      	movs	r2, #176	; 0xb0
 80024a4:	4619      	mov	r1, r3
 80024a6:	f013 f963 	bl	8015770 <memcpy>
 80024aa:	e894 000c 	ldmia.w	r4, {r2, r3}
 80024ae:	487f      	ldr	r0, [pc, #508]	; (80026ac <StartDefaultTask+0x70c>)
 80024b0:	eeb0 0a48 	vmov.f32	s0, s16
 80024b4:	eef0 0a68 	vmov.f32	s1, s17
 80024b8:	f007 ff44 	bl	800a344 <scaraKeyFlow>
 80024bc:	4603      	mov	r3, r0
 80024be:	f887 35e0 	strb.w	r3, [r7, #1504]	; 0x5e0
				  if ( SCARA_STATUS_OK == status) {
 80024c2:	f897 35e0 	ldrb.w	r3, [r7, #1504]	; 0x5e0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d12c      	bne.n	8002524 <StartDefaultTask+0x584>
					  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 80024ca:	4c77      	ldr	r4, [pc, #476]	; (80026a8 <StartDefaultTask+0x708>)
 80024cc:	4a77      	ldr	r2, [pc, #476]	; (80026ac <StartDefaultTask+0x70c>)
 80024ce:	ab2a      	add	r3, sp, #168	; 0xa8
 80024d0:	4611      	mov	r1, r2
 80024d2:	22b8      	movs	r2, #184	; 0xb8
 80024d4:	4618      	mov	r0, r3
 80024d6:	f013 f94b 	bl	8015770 <memcpy>
 80024da:	4668      	mov	r0, sp
 80024dc:	f104 0310 	add.w	r3, r4, #16
 80024e0:	22a8      	movs	r2, #168	; 0xa8
 80024e2:	4619      	mov	r1, r3
 80024e4:	f013 f944 	bl	8015770 <memcpy>
 80024e8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80024ec:	f001 fdd0 	bl	8004090 <lowlayer_computeAndWritePulse>
					  scaraPosition2String((char *)position, positionTrue);
 80024f0:	4c6c      	ldr	r4, [pc, #432]	; (80026a4 <StartDefaultTask+0x704>)
 80024f2:	f507 755e 	add.w	r5, r7, #888	; 0x378
 80024f6:	4668      	mov	r0, sp
 80024f8:	f104 0308 	add.w	r3, r4, #8
 80024fc:	22b0      	movs	r2, #176	; 0xb0
 80024fe:	4619      	mov	r1, r3
 8002500:	f013 f936 	bl	8015770 <memcpy>
 8002504:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002508:	4628      	mov	r0, r5
 800250a:	f006 fd61 	bl	8008fd0 <scaraPosition2String>
					  infor_lenght = commandRespond(RPD_RUNNING,
 800250e:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8002512:	f507 725e 	add.w	r2, r7, #888	; 0x378
 8002516:	2100      	movs	r1, #0
 8002518:	2004      	movs	r0, #4
 800251a:	f7ff f853 	bl	80015c4 <commandRespond>
 800251e:	f8c7 0604 	str.w	r0, [r7, #1540]	; 0x604
		  break;
 8002522:	e02f      	b.n	8002584 <StartDefaultTask+0x5e4>
					  current_key_state = SCARA_KEY_STATE_FINISH;
 8002524:	2303      	movs	r3, #3
 8002526:	f887 35f7 	strb.w	r3, [r7, #1527]	; 0x5f7
					  infor_lenght = commandRespond(RPD_STOP,
 800252a:	f897 35e0 	ldrb.w	r3, [r7, #1504]	; 0x5e0
													(char *)DETAIL_STATUS[status],
 800252e:	4a60      	ldr	r2, [pc, #384]	; (80026b0 <StartDefaultTask+0x710>)
 8002530:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
					  infor_lenght = commandRespond(RPD_STOP,
 8002534:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8002538:	2100      	movs	r1, #0
 800253a:	2006      	movs	r0, #6
 800253c:	f7ff f842 	bl	80015c4 <commandRespond>
 8002540:	f8c7 0604 	str.w	r0, [r7, #1540]	; 0x604
					  LOG_REPORT("STOP KEY", __LINE__);
 8002544:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8002548:	485a      	ldr	r0, [pc, #360]	; (80026b4 <StartDefaultTask+0x714>)
 800254a:	f7ff f8c7 	bl	80016dc <LOG_REPORT>
		  break;
 800254e:	e019      	b.n	8002584 <StartDefaultTask+0x5e4>
		  case SCARA_KEY_STATE_FINISH:
		  {
			  current_key_state = SCARA_KEY_STATE_READY;
 8002550:	2300      	movs	r3, #0
 8002552:	f887 35f7 	strb.w	r3, [r7, #1527]	; 0x5f7
			  positionNext.t = 0;
 8002556:	4a55      	ldr	r2, [pc, #340]	; (80026ac <StartDefaultTask+0x70c>)
 8002558:	f04f 0300 	mov.w	r3, #0
 800255c:	f04f 0400 	mov.w	r4, #0
 8002560:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
			  positionNext.total_time = 0;
 8002564:	4a51      	ldr	r2, [pc, #324]	; (80026ac <StartDefaultTask+0x70c>)
 8002566:	f04f 0300 	mov.w	r3, #0
 800256a:	f04f 0400 	mov.w	r4, #0
 800256e:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
			  positionNext.q = 0;
 8002572:	4a4e      	ldr	r2, [pc, #312]	; (80026ac <StartDefaultTask+0x70c>)
 8002574:	f04f 0300 	mov.w	r3, #0
 8002578:	f04f 0400 	mov.w	r4, #0
 800257c:	e9c2 3400 	strd	r3, r4, [r2]
		  }
		  break;
 8002580:	e000      	b.n	8002584 <StartDefaultTask+0x5e4>
		  break;
 8002582:	bf00      	nop
		  }
	  }
	  break;
 8002584:	e1dd      	b.n	8002942 <StartDefaultTask+0x9a2>

	  case SCARA_METHOD_SEMI_AUTO:
	  {
		  switch( current_mode) {
 8002586:	f897 35fa 	ldrb.w	r3, [r7, #1530]	; 0x5fa
 800258a:	2b01      	cmp	r3, #1
 800258c:	d00b      	beq.n	80025a6 <StartDefaultTask+0x606>
 800258e:	2b02      	cmp	r3, #2
 8002590:	d063      	beq.n	800265a <StartDefaultTask+0x6ba>
 8002592:	2b00      	cmp	r3, #0
 8002594:	f040 81cc 	bne.w	8002930 <StartDefaultTask+0x990>
		  case SCARA_MODE_STOP:
			  {
				  current_mode 	= SCARA_MODE_DUTY;
 8002598:	2302      	movs	r3, #2
 800259a:	f887 35fa 	strb.w	r3, [r7, #1530]	; 0x5fa
				  current_duty_state = SCARA_DUTY_STATE_READY;
 800259e:	2300      	movs	r3, #0
 80025a0:	f887 35f9 	strb.w	r3, [r7, #1529]	; 0x5f9
			  }
			  break;
 80025a4:	e1ca      	b.n	800293c <StartDefaultTask+0x99c>

		  case SCARA_MODE_SCAN:
			  {
				  switch (current_scan_state) {
 80025a6:	f897 35f8 	ldrb.w	r3, [r7, #1528]	; 0x5f8
 80025aa:	2b03      	cmp	r3, #3
 80025ac:	d84b      	bhi.n	8002646 <StartDefaultTask+0x6a6>
 80025ae:	a201      	add	r2, pc, #4	; (adr r2, 80025b4 <StartDefaultTask+0x614>)
 80025b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b4:	080025c5 	.word	0x080025c5
 80025b8:	080025d1 	.word	0x080025d1
 80025bc:	080025e3 	.word	0x080025e3
 80025c0:	080025f7 	.word	0x080025f7
				  case SCARA_SCAN_STATE_INIT:
					  {
						  lowlayer_scanReset();
 80025c4:	f001 f9c8 	bl	8003958 <lowlayer_scanReset>
						  current_scan_state = SCARA_SCAN_STATE_HARD;
 80025c8:	2301      	movs	r3, #1
 80025ca:	f887 35f8 	strb.w	r3, [r7, #1528]	; 0x5f8
					  }
					  break;
 80025ce:	e043      	b.n	8002658 <StartDefaultTask+0x6b8>
				  case SCARA_SCAN_STATE_HARD:
					  {
						  if(lowlayer_scanFlow()) {
 80025d0:	f001 f9f2 	bl	80039b8 <lowlayer_scanFlow>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d03b      	beq.n	8002652 <StartDefaultTask+0x6b2>
							  current_scan_state = SCARA_SCAN_STATE_SOFT;
 80025da:	2302      	movs	r3, #2
 80025dc:	f887 35f8 	strb.w	r3, [r7, #1528]	; 0x5f8
						  }
					  }
					  break;
 80025e0:	e037      	b.n	8002652 <StartDefaultTask+0x6b2>
				  case SCARA_SCAN_STATE_SOFT:
					  {
						  if(lowlayer_goToSoftLimit(&positionNext)) {
 80025e2:	4832      	ldr	r0, [pc, #200]	; (80026ac <StartDefaultTask+0x70c>)
 80025e4:	f001 fb44 	bl	8003c70 <lowlayer_goToSoftLimit>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d033      	beq.n	8002656 <StartDefaultTask+0x6b6>
							  current_scan_state = SCARA_SCAN_STATE_FINISH;
 80025ee:	2303      	movs	r3, #3
 80025f0:	f887 35f8 	strb.w	r3, [r7, #1528]	; 0x5f8
							}
					  }
					  break;
 80025f4:	e02f      	b.n	8002656 <StartDefaultTask+0x6b6>
				  case SCARA_SCAN_STATE_FINISH:
					  {
						  lowlayer_readSetPosition(&positionNext);
 80025f6:	482d      	ldr	r0, [pc, #180]	; (80026ac <StartDefaultTask+0x70c>)
 80025f8:	f001 fc96 	bl	8003f28 <lowlayer_readSetPosition>
						  current_mode 	= SCARA_MODE_DUTY;
 80025fc:	2302      	movs	r3, #2
 80025fe:	f887 35fa 	strb.w	r3, [r7, #1530]	; 0x5fa
						  current_duty_state = SCARA_DUTY_STATE_READY;
 8002602:	2300      	movs	r3, #0
 8002604:	f887 35f9 	strb.w	r3, [r7, #1529]	; 0x5f9
						  kinematicForward(&positionNext);
 8002608:	4828      	ldr	r0, [pc, #160]	; (80026ac <StartDefaultTask+0x70c>)
 800260a:	f000 fcbd 	bl	8002f88 <kinematicForward>
						  scaraSetScanFlag();
 800260e:	f006 fc23 	bl	8008e58 <scaraSetScanFlag>
						  //Done Inform
						  scaraPosition2String((char *)position, positionNext);
 8002612:	4c26      	ldr	r4, [pc, #152]	; (80026ac <StartDefaultTask+0x70c>)
 8002614:	f507 755e 	add.w	r5, r7, #888	; 0x378
 8002618:	4668      	mov	r0, sp
 800261a:	f104 0308 	add.w	r3, r4, #8
 800261e:	22b0      	movs	r2, #176	; 0xb0
 8002620:	4619      	mov	r1, r3
 8002622:	f013 f8a5 	bl	8015770 <memcpy>
 8002626:	e894 000c 	ldmia.w	r4, {r2, r3}
 800262a:	4628      	mov	r0, r5
 800262c:	f006 fcd0 	bl	8008fd0 <scaraPosition2String>
						  infor_lenght 		= commandRespond(RPD_DONE,
 8002630:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8002634:	f507 725e 	add.w	r2, r7, #888	; 0x378
 8002638:	2100      	movs	r1, #0
 800263a:	2005      	movs	r0, #5
 800263c:	f7fe ffc2 	bl	80015c4 <commandRespond>
 8002640:	f8c7 0604 	str.w	r0, [r7, #1540]	; 0x604
															 0,
															(char *)position,
															(char *)infor);
					  }
					  break;
 8002644:	e008      	b.n	8002658 <StartDefaultTask+0x6b8>
				  default:
					  {
						  LOG_REPORT("ERROR STATE !!!", __LINE__);
 8002646:	f240 11f9 	movw	r1, #505	; 0x1f9
 800264a:	481b      	ldr	r0, [pc, #108]	; (80026b8 <StartDefaultTask+0x718>)
 800264c:	f7ff f846 	bl	80016dc <LOG_REPORT>
						  while(1);
 8002650:	e7fe      	b.n	8002650 <StartDefaultTask+0x6b0>
					  break;
 8002652:	bf00      	nop
 8002654:	e172      	b.n	800293c <StartDefaultTask+0x99c>
					  break;
 8002656:	bf00      	nop
					  }
				  }

			  }
			  break;
 8002658:	e170      	b.n	800293c <StartDefaultTask+0x99c>

		  case SCARA_MODE_DUTY:
			  {
				  switch (current_duty_state) {
 800265a:	f897 35f9 	ldrb.w	r3, [r7, #1529]	; 0x5f9
 800265e:	2b03      	cmp	r3, #3
 8002660:	f200 815f 	bhi.w	8002922 <StartDefaultTask+0x982>
 8002664:	a201      	add	r2, pc, #4	; (adr r2, 800266c <StartDefaultTask+0x6cc>)
 8002666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800266a:	bf00      	nop
 800266c:	0800267d 	.word	0x0800267d
 8002670:	080026bd 	.word	0x080026bd
 8002674:	080027c1 	.word	0x080027c1
 8002678:	080028bf 	.word	0x080028bf
				  case SCARA_DUTY_STATE_READY:
					  {
						  // Do nothing();
						  __NOP();
 800267c:	bf00      	nop
					  }
				  break;
 800267e:	e156      	b.n	800292e <StartDefaultTask+0x98e>
 8002680:	40000000 	.word	0x40000000
 8002684:	3f847ae1 	.word	0x3f847ae1
 8002688:	0801aef8 	.word	0x0801aef8
 800268c:	0801af0c 	.word	0x0801af0c
 8002690:	0801af20 	.word	0x0801af20
 8002694:	0801af28 	.word	0x0801af28
 8002698:	0801af38 	.word	0x0801af38
 800269c:	0801af4c 	.word	0x0801af4c
 80026a0:	0801af64 	.word	0x0801af64
 80026a4:	20005ef0 	.word	0x20005ef0
 80026a8:	20005e38 	.word	0x20005e38
 80026ac:	20005fa8 	.word	0x20005fa8
 80026b0:	20000c58 	.word	0x20000c58
 80026b4:	0801af7c 	.word	0x0801af7c
 80026b8:	0801af88 	.word	0x0801af88

				  case SCARA_DUTY_STATE_INIT:
					  {
						  SCARA_StatusTypeDef status1, status2;
						  status1 = scaraInitDuty(duty_cmd);
 80026bc:	f507 6485 	add.w	r4, r7, #1064	; 0x428
 80026c0:	4668      	mov	r0, sp
 80026c2:	f104 0310 	add.w	r3, r4, #16
 80026c6:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80026ca:	4619      	mov	r1, r3
 80026cc:	f013 f850 	bl	8015770 <memcpy>
 80026d0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80026d4:	f002 f888 	bl	80047e8 <scaraInitDuty>
 80026d8:	4603      	mov	r3, r0
 80026da:	f887 35e2 	strb.w	r3, [r7, #1506]	; 0x5e2
						  if ( SCARA_STATUS_OK == status1) {
 80026de:	f897 35e2 	ldrb.w	r3, [r7, #1506]	; 0x5e2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d154      	bne.n	8002790 <StartDefaultTask+0x7f0>
							  status2 = scaraTestDuty();
 80026e6:	f006 fb3b 	bl	8008d60 <scaraTestDuty>
 80026ea:	4603      	mov	r3, r0
 80026ec:	f887 35e1 	strb.w	r3, [r7, #1505]	; 0x5e1
							  if (SCARA_STATUS_OK == status2) {
 80026f0:	f897 35e1 	ldrb.w	r3, [r7, #1505]	; 0x5e1
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d133      	bne.n	8002760 <StartDefaultTask+0x7c0>
							  //current_duty_state		= SCARA_DUTY_STATE_FLOW;
							  current_duty_state = SCARA_DUTY_STATE_FINISH;
 80026f8:	2303      	movs	r3, #3
 80026fa:	f887 35f9 	strb.w	r3, [r7, #1529]	; 0x5f9
							  run_time			= 0;
 80026fe:	f107 0218 	add.w	r2, r7, #24
 8002702:	f04f 0300 	mov.w	r3, #0
 8002706:	f04f 0400 	mov.w	r4, #0
 800270a:	e9c2 3400 	strd	r3, r4, [r2]
							  // Respond
							  respond_lenght 	= commandRespond(RPD_OK,
 800270e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002712:	6899      	ldr	r1, [r3, #8]
 8002714:	f897 35e2 	ldrb.w	r3, [r7, #1506]	; 0x5e2
																  duty_cmd.id_command,
																  (char *)DETAIL_STATUS[status1],
 8002718:	4ad1      	ldr	r2, [pc, #836]	; (8002a60 <StartDefaultTask+0xac0>)
 800271a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
							  respond_lenght 	= commandRespond(RPD_OK,
 800271e:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002722:	2008      	movs	r0, #8
 8002724:	f7fe ff4e 	bl	80015c4 <commandRespond>
 8002728:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
																  (char *)respond);
#ifdef SIMULATION
							  scaraPosition2String((char *)position, positionCurrent);
#else
							  scaraPosition2String((char *)position, positionTrue);
 800272c:	4ccd      	ldr	r4, [pc, #820]	; (8002a64 <StartDefaultTask+0xac4>)
 800272e:	f507 755e 	add.w	r5, r7, #888	; 0x378
 8002732:	4668      	mov	r0, sp
 8002734:	f104 0308 	add.w	r3, r4, #8
 8002738:	22b0      	movs	r2, #176	; 0xb0
 800273a:	4619      	mov	r1, r3
 800273c:	f013 f818 	bl	8015770 <memcpy>
 8002740:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002744:	4628      	mov	r0, r5
 8002746:	f006 fc43 	bl	8008fd0 <scaraPosition2String>
#endif
							  // Start Inform
							  infor_lenght 		= commandRespond(RPD_START,
 800274a:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 800274e:	f507 725e 	add.w	r2, r7, #888	; 0x378
 8002752:	2100      	movs	r1, #0
 8002754:	2003      	movs	r0, #3
 8002756:	f7fe ff35 	bl	80015c4 <commandRespond>
 800275a:	f8c7 0604 	str.w	r0, [r7, #1540]	; 0x604
																  (char *)DETAIL_STATUS[status1],
																  (char *)respond);
							  LOG_REPORT("INIT FAIL", __LINE__);
						  }
					  }
				  break;
 800275e:	e0e6      	b.n	800292e <StartDefaultTask+0x98e>
								  current_duty_state 	= SCARA_DUTY_STATE_READY;
 8002760:	2300      	movs	r3, #0
 8002762:	f887 35f9 	strb.w	r3, [r7, #1529]	; 0x5f9
								  respond_lenght	= commandRespond(RPD_ERROR,
 8002766:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800276a:	6899      	ldr	r1, [r3, #8]
 800276c:	f897 35e1 	ldrb.w	r3, [r7, #1505]	; 0x5e1
																	  (char *)DETAIL_STATUS[status2],
 8002770:	4abb      	ldr	r2, [pc, #748]	; (8002a60 <StartDefaultTask+0xac0>)
 8002772:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
								  respond_lenght	= commandRespond(RPD_ERROR,
 8002776:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800277a:	2007      	movs	r0, #7
 800277c:	f7fe ff22 	bl	80015c4 <commandRespond>
 8002780:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
								  LOG_REPORT("TEST FAIL", __LINE__);
 8002784:	f240 212a 	movw	r1, #554	; 0x22a
 8002788:	48b7      	ldr	r0, [pc, #732]	; (8002a68 <StartDefaultTask+0xac8>)
 800278a:	f7fe ffa7 	bl	80016dc <LOG_REPORT>
				  break;
 800278e:	e0ce      	b.n	800292e <StartDefaultTask+0x98e>
							  current_duty_state 	= SCARA_DUTY_STATE_READY;
 8002790:	2300      	movs	r3, #0
 8002792:	f887 35f9 	strb.w	r3, [r7, #1529]	; 0x5f9
							  respond_lenght	= commandRespond(RPD_ERROR,
 8002796:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800279a:	6899      	ldr	r1, [r3, #8]
 800279c:	f897 35e2 	ldrb.w	r3, [r7, #1506]	; 0x5e2
																  (char *)DETAIL_STATUS[status1],
 80027a0:	4aaf      	ldr	r2, [pc, #700]	; (8002a60 <StartDefaultTask+0xac0>)
 80027a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
							  respond_lenght	= commandRespond(RPD_ERROR,
 80027a6:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80027aa:	2007      	movs	r0, #7
 80027ac:	f7fe ff0a 	bl	80015c4 <commandRespond>
 80027b0:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
							  LOG_REPORT("INIT FAIL", __LINE__);
 80027b4:	f240 2132 	movw	r1, #562	; 0x232
 80027b8:	48ac      	ldr	r0, [pc, #688]	; (8002a6c <StartDefaultTask+0xacc>)
 80027ba:	f7fe ff8f 	bl	80016dc <LOG_REPORT>
				  break;
 80027be:	e0b6      	b.n	800292e <StartDefaultTask+0x98e>

				  case SCARA_DUTY_STATE_FLOW:
					  {
						  SCARA_StatusTypeDef status;
						  // Increase run time
						  run_time += T_SAMPLING;
 80027c0:	f107 0318 	add.w	r3, r7, #24
 80027c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027c8:	a3a3      	add	r3, pc, #652	; (adr r3, 8002a58 <StartDefaultTask+0xab8>)
 80027ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ce:	f7fd fd5d 	bl	800028c <__adddf3>
 80027d2:	4603      	mov	r3, r0
 80027d4:	460c      	mov	r4, r1
 80027d6:	f107 0218 	add.w	r2, r7, #24
 80027da:	e9c2 3400 	strd	r3, r4, [r2]
						  // Check Time Out
						  if (scaraIsFinish(run_time)) {
 80027de:	f107 0318 	add.w	r3, r7, #24
 80027e2:	ed93 7b00 	vldr	d7, [r3]
 80027e6:	eeb0 0a47 	vmov.f32	s0, s14
 80027ea:	eef0 0a67 	vmov.f32	s1, s15
 80027ee:	f006 fbc3 	bl	8008f78 <scaraIsFinish>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <StartDefaultTask+0x860>
							  current_duty_state = SCARA_DUTY_STATE_FINISH;// Work Done
 80027f8:	2303      	movs	r3, #3
 80027fa:	f887 35f9 	strb.w	r3, [r7, #1529]	; 0x5f9
																(char *)infor);
								  LOG_REPORT("STOP DUTY", __LINE__);
							  }
						  }
					  }
				  break;
 80027fe:	e096      	b.n	800292e <StartDefaultTask+0x98e>
							  status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 8002800:	f107 0318 	add.w	r3, r7, #24
 8002804:	ed93 8b00 	vldr	d8, [r3]
 8002808:	4c99      	ldr	r4, [pc, #612]	; (8002a70 <StartDefaultTask+0xad0>)
 800280a:	4668      	mov	r0, sp
 800280c:	f104 0308 	add.w	r3, r4, #8
 8002810:	22b0      	movs	r2, #176	; 0xb0
 8002812:	4619      	mov	r1, r3
 8002814:	f012 ffac 	bl	8015770 <memcpy>
 8002818:	e894 000c 	ldmia.w	r4, {r2, r3}
 800281c:	4895      	ldr	r0, [pc, #596]	; (8002a74 <StartDefaultTask+0xad4>)
 800281e:	eeb0 0a48 	vmov.f32	s0, s16
 8002822:	eef0 0a68 	vmov.f32	s1, s17
 8002826:	f004 fc85 	bl	8007134 <scaraFlowDuty>
 800282a:	4603      	mov	r3, r0
 800282c:	f887 35e3 	strb.w	r3, [r7, #1507]	; 0x5e3
							  if ( SCARA_STATUS_OK == status) {
 8002830:	f897 35e3 	ldrb.w	r3, [r7, #1507]	; 0x5e3
 8002834:	2b00      	cmp	r3, #0
 8002836:	d12c      	bne.n	8002892 <StartDefaultTask+0x8f2>
								  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8002838:	4c8d      	ldr	r4, [pc, #564]	; (8002a70 <StartDefaultTask+0xad0>)
 800283a:	4a8e      	ldr	r2, [pc, #568]	; (8002a74 <StartDefaultTask+0xad4>)
 800283c:	ab2a      	add	r3, sp, #168	; 0xa8
 800283e:	4611      	mov	r1, r2
 8002840:	22b8      	movs	r2, #184	; 0xb8
 8002842:	4618      	mov	r0, r3
 8002844:	f012 ff94 	bl	8015770 <memcpy>
 8002848:	4668      	mov	r0, sp
 800284a:	f104 0310 	add.w	r3, r4, #16
 800284e:	22a8      	movs	r2, #168	; 0xa8
 8002850:	4619      	mov	r1, r3
 8002852:	f012 ff8d 	bl	8015770 <memcpy>
 8002856:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800285a:	f001 fc19 	bl	8004090 <lowlayer_computeAndWritePulse>
								  scaraPosition2String((char *)position, positionTrue);
 800285e:	4c81      	ldr	r4, [pc, #516]	; (8002a64 <StartDefaultTask+0xac4>)
 8002860:	f507 755e 	add.w	r5, r7, #888	; 0x378
 8002864:	4668      	mov	r0, sp
 8002866:	f104 0308 	add.w	r3, r4, #8
 800286a:	22b0      	movs	r2, #176	; 0xb0
 800286c:	4619      	mov	r1, r3
 800286e:	f012 ff7f 	bl	8015770 <memcpy>
 8002872:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002876:	4628      	mov	r0, r5
 8002878:	f006 fbaa 	bl	8008fd0 <scaraPosition2String>
								  infor_lenght = commandRespond(RPD_RUNNING,
 800287c:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8002880:	f507 725e 	add.w	r2, r7, #888	; 0x378
 8002884:	2100      	movs	r1, #0
 8002886:	2004      	movs	r0, #4
 8002888:	f7fe fe9c 	bl	80015c4 <commandRespond>
 800288c:	f8c7 0604 	str.w	r0, [r7, #1540]	; 0x604
				  break;
 8002890:	e04d      	b.n	800292e <StartDefaultTask+0x98e>
								  current_duty_state = SCARA_DUTY_STATE_FINISH;
 8002892:	2303      	movs	r3, #3
 8002894:	f887 35f9 	strb.w	r3, [r7, #1529]	; 0x5f9
								  infor_lenght = commandRespond(RPD_STOP,
 8002898:	f897 35e3 	ldrb.w	r3, [r7, #1507]	; 0x5e3
																(char *)DETAIL_STATUS[status],
 800289c:	4a70      	ldr	r2, [pc, #448]	; (8002a60 <StartDefaultTask+0xac0>)
 800289e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
								  infor_lenght = commandRespond(RPD_STOP,
 80028a2:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 80028a6:	2100      	movs	r1, #0
 80028a8:	2006      	movs	r0, #6
 80028aa:	f7fe fe8b 	bl	80015c4 <commandRespond>
 80028ae:	f8c7 0604 	str.w	r0, [r7, #1540]	; 0x604
								  LOG_REPORT("STOP DUTY", __LINE__);
 80028b2:	f240 2155 	movw	r1, #597	; 0x255
 80028b6:	4870      	ldr	r0, [pc, #448]	; (8002a78 <StartDefaultTask+0xad8>)
 80028b8:	f7fe ff10 	bl	80016dc <LOG_REPORT>
				  break;
 80028bc:	e037      	b.n	800292e <StartDefaultTask+0x98e>

				  case SCARA_DUTY_STATE_FINISH:
					  {
						  current_duty_state = SCARA_DUTY_STATE_READY;
 80028be:	2300      	movs	r3, #0
 80028c0:	f887 35f9 	strb.w	r3, [r7, #1529]	; 0x5f9
						  positionNext.t = 0;
 80028c4:	4a6b      	ldr	r2, [pc, #428]	; (8002a74 <StartDefaultTask+0xad4>)
 80028c6:	f04f 0300 	mov.w	r3, #0
 80028ca:	f04f 0400 	mov.w	r4, #0
 80028ce:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
						  positionNext.total_time = 0;
 80028d2:	4a68      	ldr	r2, [pc, #416]	; (8002a74 <StartDefaultTask+0xad4>)
 80028d4:	f04f 0300 	mov.w	r3, #0
 80028d8:	f04f 0400 	mov.w	r4, #0
 80028dc:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
						  positionNext.q = 0;
 80028e0:	4a64      	ldr	r2, [pc, #400]	; (8002a74 <StartDefaultTask+0xad4>)
 80028e2:	f04f 0300 	mov.w	r3, #0
 80028e6:	f04f 0400 	mov.w	r4, #0
 80028ea:	e9c2 3400 	strd	r3, r4, [r2]
						  // Done Inform
#ifdef SIMULATION
						  scaraPosition2String((char *)position, positionCurrent);
#else
						  scaraPosition2String((char *)position, positionTrue);
 80028ee:	4c5d      	ldr	r4, [pc, #372]	; (8002a64 <StartDefaultTask+0xac4>)
 80028f0:	f507 755e 	add.w	r5, r7, #888	; 0x378
 80028f4:	4668      	mov	r0, sp
 80028f6:	f104 0308 	add.w	r3, r4, #8
 80028fa:	22b0      	movs	r2, #176	; 0xb0
 80028fc:	4619      	mov	r1, r3
 80028fe:	f012 ff37 	bl	8015770 <memcpy>
 8002902:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002906:	4628      	mov	r0, r5
 8002908:	f006 fb62 	bl	8008fd0 <scaraPosition2String>
#endif
						  infor_lenght 		= commandRespond(RPD_DONE,
 800290c:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8002910:	f507 725e 	add.w	r2, r7, #888	; 0x378
 8002914:	2100      	movs	r1, #0
 8002916:	2005      	movs	r0, #5
 8002918:	f7fe fe54 	bl	80015c4 <commandRespond>
 800291c:	f8c7 0604 	str.w	r0, [r7, #1540]	; 0x604
															 0,
															 (char *)position,
															 (char *)infor);
					  }
				  break;
 8002920:	e005      	b.n	800292e <StartDefaultTask+0x98e>

				  default:
					  {
						  LOG_REPORT("ERROR STATE !!!", __LINE__);
 8002922:	f44f 711c 	mov.w	r1, #624	; 0x270
 8002926:	4855      	ldr	r0, [pc, #340]	; (8002a7c <StartDefaultTask+0xadc>)
 8002928:	f7fe fed8 	bl	80016dc <LOG_REPORT>
						  while(1);
 800292c:	e7fe      	b.n	800292c <StartDefaultTask+0x98c>
					  }
				  }

			  }
			  break;
 800292e:	e005      	b.n	800293c <StartDefaultTask+0x99c>

		  default:
			  {
				  LOG_REPORT("ERROR MODE !!!", __LINE__);
 8002930:	f240 217a 	movw	r1, #634	; 0x27a
 8002934:	4852      	ldr	r0, [pc, #328]	; (8002a80 <StartDefaultTask+0xae0>)
 8002936:	f7fe fed1 	bl	80016dc <LOG_REPORT>
				  while(1);
 800293a:	e7fe      	b.n	800293a <StartDefaultTask+0x99a>
			  }
		  }
	  }
	  break;
 800293c:	e002      	b.n	8002944 <StartDefaultTask+0x9a4>
	  case SCARA_METHOD_AUTO:
	  {

	  }

	  break;
 800293e:	bf00      	nop
 8002940:	e000      	b.n	8002944 <StartDefaultTask+0x9a4>
	  break;
 8002942:	bf00      	nop
	  }
	  }

	  /* 4--- Send to PC Phase ---*/
	  // Check buffer from USB task
	  osMutexWait(usbTxMutexHandle, osWaitForever);
 8002944:	4b4f      	ldr	r3, [pc, #316]	; (8002a84 <StartDefaultTask+0xae4>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f04f 31ff 	mov.w	r1, #4294967295
 800294c:	4618      	mov	r0, r3
 800294e:	f00f f92f 	bl	8011bb0 <osMutexWait>
	  task_usb_lenght = ringBuff_PopArray(&cmd_tx_ringbuff, task_usb, RINGBUFFER_SIZE);
 8002952:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8002956:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800295a:	4619      	mov	r1, r3
 800295c:	484a      	ldr	r0, [pc, #296]	; (8002a88 <StartDefaultTask+0xae8>)
 800295e:	f000 ff7e 	bl	800385e <ringBuff_PopArray>
 8002962:	f8c7 05ec 	str.w	r0, [r7, #1516]	; 0x5ec
	  osMutexRelease(usbTxMutexHandle);
 8002966:	4b47      	ldr	r3, [pc, #284]	; (8002a84 <StartDefaultTask+0xae4>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f00f f96e 	bl	8011c4c <osMutexRelease>
	  // Intergrate to 1 buffer
	  if (respond_lenght > 0) {
 8002970:	f8d7 3608 	ldr.w	r3, [r7, #1544]	; 0x608
 8002974:	2b00      	cmp	r3, #0
 8002976:	dd13      	ble.n	80029a0 <StartDefaultTask+0xa00>
		  respond_packed_lenght = packPayload(respond, respond_packed, respond_lenght);
 8002978:	f507 7106 	add.w	r1, r7, #536	; 0x218
 800297c:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002980:	f8d7 2608 	ldr.w	r2, [r7, #1544]	; 0x608
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff f99b 	bl	8001cc0 <packPayload>
 800298a:	f8c7 0600 	str.w	r0, [r7, #1536]	; 0x600
		  memcpy(usb_buff, respond_packed, respond_packed_lenght);
 800298e:	f8d7 2600 	ldr.w	r2, [r7, #1536]	; 0x600
 8002992:	f507 7106 	add.w	r1, r7, #536	; 0x218
 8002996:	f107 0320 	add.w	r3, r7, #32
 800299a:	4618      	mov	r0, r3
 800299c:	f012 fee8 	bl	8015770 <memcpy>
	  }
	  if (task_usb_lenght > 0) {
 80029a0:	f8d7 35ec 	ldr.w	r3, [r7, #1516]	; 0x5ec
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	dd0b      	ble.n	80029c0 <StartDefaultTask+0xa20>
		  memcpy(usb_buff + respond_packed_lenght, task_usb, task_usb_lenght);
 80029a8:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 80029ac:	f107 0220 	add.w	r2, r7, #32
 80029b0:	4413      	add	r3, r2
 80029b2:	f8d7 25ec 	ldr.w	r2, [r7, #1516]	; 0x5ec
 80029b6:	f507 7113 	add.w	r1, r7, #588	; 0x24c
 80029ba:	4618      	mov	r0, r3
 80029bc:	f012 fed8 	bl	8015770 <memcpy>
	  }
	  if (infor_lenght > 0) {
 80029c0:	f8d7 3604 	ldr.w	r3, [r7, #1540]	; 0x604
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	dd19      	ble.n	80029fc <StartDefaultTask+0xa5c>
		  infor_packed_lenght 	= packPayload(infor, infor_packed, infor_lenght);
 80029c8:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 80029cc:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 80029d0:	f8d7 2604 	ldr.w	r2, [r7, #1540]	; 0x604
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff f973 	bl	8001cc0 <packPayload>
 80029da:	f8c7 05fc 	str.w	r0, [r7, #1532]	; 0x5fc
		  memcpy(usb_buff + respond_packed_lenght + task_usb_lenght, infor_packed, infor_packed_lenght);
 80029de:	f8d7 2600 	ldr.w	r2, [r7, #1536]	; 0x600
 80029e2:	f8d7 35ec 	ldr.w	r3, [r7, #1516]	; 0x5ec
 80029e6:	4413      	add	r3, r2
 80029e8:	f107 0220 	add.w	r2, r7, #32
 80029ec:	4413      	add	r3, r2
 80029ee:	f8d7 25fc 	ldr.w	r2, [r7, #1532]	; 0x5fc
 80029f2:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 80029f6:	4618      	mov	r0, r3
 80029f8:	f012 feba 	bl	8015770 <memcpy>
	  }
	  usb_lenght = respond_packed_lenght + task_usb_lenght + infor_packed_lenght;
 80029fc:	f8d7 2600 	ldr.w	r2, [r7, #1536]	; 0x600
 8002a00:	f8d7 35ec 	ldr.w	r3, [r7, #1516]	; 0x5ec
 8002a04:	4413      	add	r3, r2
 8002a06:	f8d7 25fc 	ldr.w	r2, [r7, #1532]	; 0x5fc
 8002a0a:	4413      	add	r3, r2
 8002a0c:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8
	  // Send through USB
	  if (usb_lenght > 0) {
 8002a10:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	dd08      	ble.n	8002a2a <StartDefaultTask+0xa8a>
		  CDC_Transmit_FS(usb_buff, (uint16_t)usb_lenght);
 8002a18:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	f107 0320 	add.w	r3, r7, #32
 8002a22:	4611      	mov	r1, r2
 8002a24:	4618      	mov	r0, r3
 8002a26:	f012 fa35 	bl	8014e94 <CDC_Transmit_FS>
	  }

	  /* 5--- Update ---*/
	  scaraSetMethod(current_method);
 8002a2a:	f897 35fb 	ldrb.w	r3, [r7, #1531]	; 0x5fb
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f006 fa50 	bl	8008ed4 <scaraSetMethod>
	  scaraSetMode(current_mode);
 8002a34:	f897 35fa 	ldrb.w	r3, [r7, #1530]	; 0x5fa
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f006 fa3b 	bl	8008eb4 <scaraSetMode>
	  scaraSetDutyState(current_duty_state);
 8002a3e:	f897 35f9 	ldrb.w	r3, [r7, #1529]	; 0x5f9
 8002a42:	4618      	mov	r0, r3
 8002a44:	f006 fa26 	bl	8008e94 <scaraSetDutyState>

    osDelay(1);
 8002a48:	2001      	movs	r0, #1
 8002a4a:	f00e fff8 	bl	8011a3e <osDelay>
	  osSignalWait(0x01, osWaitForever); // Very Important
 8002a4e:	f7ff baf8 	b.w	8002042 <StartDefaultTask+0xa2>
 8002a52:	bf00      	nop
 8002a54:	f3af 8000 	nop.w
 8002a58:	40000000 	.word	0x40000000
 8002a5c:	3f847ae1 	.word	0x3f847ae1
 8002a60:	20000c58 	.word	0x20000c58
 8002a64:	20005ef0 	.word	0x20005ef0
 8002a68:	0801af98 	.word	0x0801af98
 8002a6c:	0801afa4 	.word	0x0801afa4
 8002a70:	20005e38 	.word	0x20005e38
 8002a74:	20005fa8 	.word	0x20005fa8
 8002a78:	0801afb0 	.word	0x0801afb0
 8002a7c:	0801af88 	.word	0x0801af88
 8002a80:	0801afbc 	.word	0x0801afbc
 8002a84:	200052b8 	.word	0x200052b8
 8002a88:	20000434 	.word	0x20000434

08002a8c <Start_USB_RX_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_USB_RX_Task */
void Start_USB_RX_Task(void const * argument)
{
 8002a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a8e:	f2ad 5d3c 	subw	sp, sp, #1340	; 0x53c
 8002a92:	af6a      	add	r7, sp, #424	; 0x1a8
 8002a94:	1d3b      	adds	r3, r7, #4
 8002a96:	6018      	str	r0, [r3, #0]
	int32_t				respond_lenght;
	int32_t				message_lenght;
	int32_t 			detail_length;

	// Default value
	duty_cmd.key_speed = 1;
 8002a98:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	605a      	str	r2, [r3, #4]

  /* Infinite loop */
  for(;;)
  {
	  for(;;) {
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, END_CHAR);
 8002aa0:	2129      	movs	r1, #41	; 0x29
 8002aa2:	4868      	ldr	r0, [pc, #416]	; (8002c44 <Start_USB_RX_Task+0x1b8>)
 8002aa4:	f000 fefc 	bl	80038a0 <ringBuff_DistanceOf>
 8002aa8:	f8c7 0388 	str.w	r0, [r7, #904]	; 0x388
		  if ( -1 != distance ) {
 8002aac:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 8002ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab4:	d0f4      	beq.n	8002aa0 <Start_USB_RX_Task+0x14>
 8002ab6:	466b      	mov	r3, sp
 8002ab8:	461e      	mov	r6, r3
			  uint8_t temp[distance+1];
 8002aba:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 8002abe:	1c58      	adds	r0, r3, #1
 8002ac0:	1e43      	subs	r3, r0, #1
 8002ac2:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	4619      	mov	r1, r3
 8002aca:	f04f 0200 	mov.w	r2, #0
 8002ace:	f04f 0300 	mov.w	r3, #0
 8002ad2:	f04f 0400 	mov.w	r4, #0
 8002ad6:	00d4      	lsls	r4, r2, #3
 8002ad8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002adc:	00cb      	lsls	r3, r1, #3
 8002ade:	4603      	mov	r3, r0
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	f04f 0200 	mov.w	r2, #0
 8002ae6:	f04f 0300 	mov.w	r3, #0
 8002aea:	f04f 0400 	mov.w	r4, #0
 8002aee:	00d4      	lsls	r4, r2, #3
 8002af0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002af4:	00cb      	lsls	r3, r1, #3
 8002af6:	4603      	mov	r3, r0
 8002af8:	3307      	adds	r3, #7
 8002afa:	08db      	lsrs	r3, r3, #3
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	ebad 0d03 	sub.w	sp, sp, r3
 8002b02:	ab6a      	add	r3, sp, #424	; 0x1a8
 8002b04:	3300      	adds	r3, #0
 8002b06:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
			  int32_t ret;
			  ringBuff_PopArray(&usb_rx_ringbuff, temp, distance + 1);
 8002b0a:	f8d7 1380 	ldr.w	r1, [r7, #896]	; 0x380
 8002b0e:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 8002b12:	3301      	adds	r3, #1
 8002b14:	461a      	mov	r2, r3
 8002b16:	484b      	ldr	r0, [pc, #300]	; (8002c44 <Start_USB_RX_Task+0x1b8>)
 8002b18:	f000 fea1 	bl	800385e <ringBuff_PopArray>
			  ret = unPackPayload(temp, distance + 1);
 8002b1c:	f8d7 2380 	ldr.w	r2, [r7, #896]	; 0x380
 8002b20:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 8002b24:	3301      	adds	r3, #1
 8002b26:	4619      	mov	r1, r3
 8002b28:	4610      	mov	r0, r2
 8002b2a:	f7ff f933 	bl	8001d94 <unPackPayload>
 8002b2e:	f8c7 037c 	str.w	r0, [r7, #892]	; 0x37c
			  if( -1 == ret) {
 8002b32:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8002b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b3a:	d105      	bne.n	8002b48 <Start_USB_RX_Task+0xbc>
				  LOG_REPORT("UNPACK FAIL", __LINE__);
 8002b3c:	f240 21d2 	movw	r1, #722	; 0x2d2
 8002b40:	4841      	ldr	r0, [pc, #260]	; (8002c48 <Start_USB_RX_Task+0x1bc>)
 8002b42:	f7fe fdcb 	bl	80016dc <LOG_REPORT>
 8002b46:	e07a      	b.n	8002c3e <Start_USB_RX_Task+0x1b2>
			  } else {
				  LOG_REPORT((char*) temp, __LINE__);
 8002b48:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 8002b4c:	f44f 7135 	mov.w	r1, #724	; 0x2d4
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7fe fdc3 	bl	80016dc <LOG_REPORT>
				  cmd_type = commandRead(temp, ret, &id_command, &duty_cmd);
 8002b56:	f8d7 0380 	ldr.w	r0, [r7, #896]	; 0x380
 8002b5a:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002b5e:	f507 725b 	add.w	r2, r7, #876	; 0x36c
 8002b62:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 8002b66:	f7fe fa0f 	bl	8000f88 <commandRead>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	f887 337b 	strb.w	r3, [r7, #891]	; 0x37b
				  memset(detail, 0, sizeof(detail));
 8002b70:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002b74:	2287      	movs	r2, #135	; 0x87
 8002b76:	2100      	movs	r1, #0
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f012 fe1d 	bl	80157b8 <memset>
				  detail_length = 0;
 8002b7e:	f107 0308 	add.w	r3, r7, #8
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]
				  rpd_type = commandReply(cmd_type, duty_cmd, detail, &detail_length);
 8002b86:	f507 74e0 	add.w	r4, r7, #448	; 0x1c0
 8002b8a:	f897 537b 	ldrb.w	r5, [r7, #891]	; 0x37b
 8002b8e:	f107 0308 	add.w	r3, r7, #8
 8002b92:	9369      	str	r3, [sp, #420]	; 0x1a4
 8002b94:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002b98:	9368      	str	r3, [sp, #416]	; 0x1a0
 8002b9a:	4668      	mov	r0, sp
 8002b9c:	f104 0308 	add.w	r3, r4, #8
 8002ba0:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	f012 fde3 	bl	8015770 <memcpy>
 8002baa:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002bae:	4628      	mov	r0, r5
 8002bb0:	f7fe fbac 	bl	800130c <commandReply>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	f887 337a 	strb.w	r3, [r7, #890]	; 0x37a

				  if ( RPD_DUTY == rpd_type) {
 8002bba:	f897 337a 	ldrb.w	r3, [r7, #890]	; 0x37a
 8002bbe:	2b09      	cmp	r3, #9
 8002bc0:	d123      	bne.n	8002c0a <Start_USB_RX_Task+0x17e>
					  DUTY_Command_TypeDef *dataMail;
					  dataMail = NULL;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
					  // Wait allocate
					  while (dataMail == NULL) {
 8002bc8:	e008      	b.n	8002bdc <Start_USB_RX_Task+0x150>
						  dataMail = osMailAlloc(commandMailHandle, osWaitForever);
 8002bca:	4b20      	ldr	r3, [pc, #128]	; (8002c4c <Start_USB_RX_Task+0x1c0>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f04f 31ff 	mov.w	r1, #4294967295
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f00f f9c8 	bl	8011f68 <osMailAlloc>
 8002bd8:	f8c7 038c 	str.w	r0, [r7, #908]	; 0x38c
					  while (dataMail == NULL) {
 8002bdc:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d0f2      	beq.n	8002bca <Start_USB_RX_Task+0x13e>
					  }
					  memcpy( dataMail, &duty_cmd, sizeof(DUTY_Command_TypeDef));
 8002be4:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002be8:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
 8002bec:	4619      	mov	r1, r3
 8002bee:	f8d7 038c 	ldr.w	r0, [r7, #908]	; 0x38c
 8002bf2:	f012 fdbd 	bl	8015770 <memcpy>
					  osStatus result;
					  result = osMailPut(commandMailHandle, dataMail);
 8002bf6:	4b15      	ldr	r3, [pc, #84]	; (8002c4c <Start_USB_RX_Task+0x1c0>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f8d7 138c 	ldr.w	r1, [r7, #908]	; 0x38c
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f00f f9c8 	bl	8011f94 <osMailPut>
 8002c04:	f8c7 0370 	str.w	r0, [r7, #880]	; 0x370
 8002c08:	e019      	b.n	8002c3e <Start_USB_RX_Task+0x1b2>
				//   }else if( RPD_POSITION == rpd_type) { 
				// 	  CDC_Transmit_FS(detail, 84);
				  }else {
					//   memset(respond, 0, sizeof(respond));
					//   memset(message, 0, sizeof(message));
					  respond_lenght	= commandRespond1(rpd_type, id_command,
 8002c0a:	f8d7 136c 	ldr.w	r1, [r7, #876]	; 0x36c
 8002c0e:	f107 0308 	add.w	r3, r7, #8
 8002c12:	681c      	ldr	r4, [r3, #0]
 8002c14:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8002c18:	f897 037a 	ldrb.w	r0, [r7, #890]	; 0x37a
 8002c1c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	4623      	mov	r3, r4
 8002c24:	f7fe fd1e 	bl	8001664 <commandRespond1>
 8002c28:	f8c7 0374 	str.w	r0, [r7, #884]	; 0x374
							  	  	  	  (char *)detail, detail_length,
										  (char *)respond);
					  //message_lenght	= packPayload(respond, message, respond_lenght);
					  CDC_Transmit_FS(respond, respond_lenght);
 8002c2c:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002c36:	4611      	mov	r1, r2
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f012 f92b 	bl	8014e94 <CDC_Transmit_FS>
 8002c3e:	46b5      	mov	sp, r6
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, END_CHAR);
 8002c40:	e72e      	b.n	8002aa0 <Start_USB_RX_Task+0x14>
 8002c42:	bf00      	nop
 8002c44:	20000028 	.word	0x20000028
 8002c48:	0801afcc 	.word	0x0801afcc
 8002c4c:	200052bc 	.word	0x200052bc

08002c50 <FSMC_Write>:
/* Includes ------------------------------------------------------------------*/
#include "fsmc.h"

/* USER CODE BEGIN 0 */
void FSMC_Write(uint32_t ui_address, uint32_t ui_data)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
	*(volatile uint16_t *)ui_address = ui_data;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	b292      	uxth	r2, r2
 8002c60:	801a      	strh	r2, [r3, #0]
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <FSMC_Read>:

uint16_t FSMC_Read(uint32_t ui_address) {
 8002c6e:	b480      	push	{r7}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
	return *(volatile uint16_t *)ui_address;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	881b      	ldrh	r3, [r3, #0]
 8002c7a:	b29b      	uxth	r3, r3
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <MX_FSMC_Init>:

NOR_HandleTypeDef hnor1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b088      	sub	sp, #32
 8002c8c:	af00      	add	r7, sp, #0
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8002c8e:	1d3b      	adds	r3, r7, #4
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	605a      	str	r2, [r3, #4]
 8002c96:	609a      	str	r2, [r3, #8]
 8002c98:	60da      	str	r2, [r3, #12]
 8002c9a:	611a      	str	r2, [r3, #16]
 8002c9c:	615a      	str	r2, [r3, #20]
 8002c9e:	619a      	str	r2, [r3, #24]

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FSMC_NORSRAM_DEVICE;
 8002ca0:	4b27      	ldr	r3, [pc, #156]	; (8002d40 <MX_FSMC_Init+0xb8>)
 8002ca2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8002ca6:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002ca8:	4b25      	ldr	r3, [pc, #148]	; (8002d40 <MX_FSMC_Init+0xb8>)
 8002caa:	4a26      	ldr	r2, [pc, #152]	; (8002d44 <MX_FSMC_Init+0xbc>)
 8002cac:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8002cae:	4b24      	ldr	r3, [pc, #144]	; (8002d40 <MX_FSMC_Init+0xb8>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_ENABLE;
 8002cb4:	4b22      	ldr	r3, [pc, #136]	; (8002d40 <MX_FSMC_Init+0xb8>)
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FSMC_MEMORY_TYPE_NOR;
 8002cba:	4b21      	ldr	r3, [pc, #132]	; (8002d40 <MX_FSMC_Init+0xb8>)
 8002cbc:	2208      	movs	r2, #8
 8002cbe:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002cc0:	4b1f      	ldr	r3, [pc, #124]	; (8002d40 <MX_FSMC_Init+0xb8>)
 8002cc2:	2210      	movs	r2, #16
 8002cc4:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8002cc6:	4b1e      	ldr	r3, [pc, #120]	; (8002d40 <MX_FSMC_Init+0xb8>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002ccc:	4b1c      	ldr	r3, [pc, #112]	; (8002d40 <MX_FSMC_Init+0xb8>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	61da      	str	r2, [r3, #28]
  hnor1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8002cd2:	4b1b      	ldr	r3, [pc, #108]	; (8002d40 <MX_FSMC_Init+0xb8>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	621a      	str	r2, [r3, #32]
  hnor1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8002cd8:	4b19      	ldr	r3, [pc, #100]	; (8002d40 <MX_FSMC_Init+0xb8>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8002cde:	4b18      	ldr	r3, [pc, #96]	; (8002d40 <MX_FSMC_Init+0xb8>)
 8002ce0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ce4:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8002ce6:	4b16      	ldr	r3, [pc, #88]	; (8002d40 <MX_FSMC_Init+0xb8>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8002cec:	4b14      	ldr	r3, [pc, #80]	; (8002d40 <MX_FSMC_Init+0xb8>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002cf2:	4b13      	ldr	r3, [pc, #76]	; (8002d40 <MX_FSMC_Init+0xb8>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8002cf8:	4b11      	ldr	r3, [pc, #68]	; (8002d40 <MX_FSMC_Init+0xb8>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8002cfe:	4b10      	ldr	r3, [pc, #64]	; (8002d40 <MX_FSMC_Init+0xb8>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8002d04:	230f      	movs	r3, #15
 8002d06:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8002d08:	230f      	movs	r3, #15
 8002d0a:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8002d0c:	23ff      	movs	r3, #255	; 0xff
 8002d0e:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8002d10:	230f      	movs	r3, #15
 8002d12:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8002d14:	2310      	movs	r3, #16
 8002d16:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8002d18:	2311      	movs	r3, #17
 8002d1a:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 8002d20:	1d3b      	adds	r3, r7, #4
 8002d22:	2200      	movs	r2, #0
 8002d24:	4619      	mov	r1, r3
 8002d26:	4806      	ldr	r0, [pc, #24]	; (8002d40 <MX_FSMC_Init+0xb8>)
 8002d28:	f008 ff00 	bl	800bb2c <HAL_NOR_Init>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8002d32:	f000 fcf5 	bl	8003720 <Error_Handler>
  }

}
 8002d36:	bf00      	nop
 8002d38:	3720      	adds	r7, #32
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	200052c4 	.word	0x200052c4
 8002d44:	a0000104 	.word	0xa0000104

08002d48 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d4e:	1d3b      	adds	r3, r7, #4
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	605a      	str	r2, [r3, #4]
 8002d56:	609a      	str	r2, [r3, #8]
 8002d58:	60da      	str	r2, [r3, #12]
 8002d5a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8002d5c:	4b24      	ldr	r3, [pc, #144]	; (8002df0 <HAL_FSMC_MspInit+0xa8>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d140      	bne.n	8002de6 <HAL_FSMC_MspInit+0x9e>
    return;
  }
  FSMC_Initialized = 1;
 8002d64:	4b22      	ldr	r3, [pc, #136]	; (8002df0 <HAL_FSMC_MspInit+0xa8>)
 8002d66:	2201      	movs	r2, #1
 8002d68:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	603b      	str	r3, [r7, #0]
 8002d6e:	4b21      	ldr	r3, [pc, #132]	; (8002df4 <HAL_FSMC_MspInit+0xac>)
 8002d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d72:	4a20      	ldr	r2, [pc, #128]	; (8002df4 <HAL_FSMC_MspInit+0xac>)
 8002d74:	f043 0301 	orr.w	r3, r3, #1
 8002d78:	6393      	str	r3, [r2, #56]	; 0x38
 8002d7a:	4b1e      	ldr	r3, [pc, #120]	; (8002df4 <HAL_FSMC_MspInit+0xac>)
 8002d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	603b      	str	r3, [r7, #0]
 8002d84:	683b      	ldr	r3, [r7, #0]
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  PB7   ------> FSMC_NL
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8002d86:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002d8a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d90:	2300      	movs	r3, #0
 8002d92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d94:	2303      	movs	r3, #3
 8002d96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002d98:	230c      	movs	r3, #12
 8002d9a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d9c:	1d3b      	adds	r3, r7, #4
 8002d9e:	4619      	mov	r1, r3
 8002da0:	4815      	ldr	r0, [pc, #84]	; (8002df8 <HAL_FSMC_MspInit+0xb0>)
 8002da2:	f008 fd0f 	bl	800b7c4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 8002da6:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8002daa:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dac:	2302      	movs	r3, #2
 8002dae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db0:	2300      	movs	r3, #0
 8002db2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002db4:	2303      	movs	r3, #3
 8002db6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002db8:	230c      	movs	r3, #12
 8002dba:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dbc:	1d3b      	adds	r3, r7, #4
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	480e      	ldr	r0, [pc, #56]	; (8002dfc <HAL_FSMC_MspInit+0xb4>)
 8002dc2:	f008 fcff 	bl	800b7c4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002dc6:	2380      	movs	r3, #128	; 0x80
 8002dc8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dca:	2302      	movs	r3, #2
 8002dcc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002dd6:	230c      	movs	r3, #12
 8002dd8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dda:	1d3b      	adds	r3, r7, #4
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4808      	ldr	r0, [pc, #32]	; (8002e00 <HAL_FSMC_MspInit+0xb8>)
 8002de0:	f008 fcf0 	bl	800b7c4 <HAL_GPIO_Init>
 8002de4:	e000      	b.n	8002de8 <HAL_FSMC_MspInit+0xa0>
    return;
 8002de6:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8002de8:	3718      	adds	r7, #24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	20001450 	.word	0x20001450
 8002df4:	40023800 	.word	0x40023800
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	40020c00 	.word	0x40020c00
 8002e00:	40020400 	.word	0x40020400

08002e04 <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* norHandle){
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FSMC_MspInit();
 8002e0c:	f7ff ff9c 	bl	8002d48 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 8002e10:	bf00      	nop
 8002e12:	3708      	adds	r7, #8
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b08a      	sub	sp, #40	; 0x28
 8002e1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e1e:	f107 0314 	add.w	r3, r7, #20
 8002e22:	2200      	movs	r2, #0
 8002e24:	601a      	str	r2, [r3, #0]
 8002e26:	605a      	str	r2, [r3, #4]
 8002e28:	609a      	str	r2, [r3, #8]
 8002e2a:	60da      	str	r2, [r3, #12]
 8002e2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e2e:	2300      	movs	r3, #0
 8002e30:	613b      	str	r3, [r7, #16]
 8002e32:	4b51      	ldr	r3, [pc, #324]	; (8002f78 <MX_GPIO_Init+0x160>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	4a50      	ldr	r2, [pc, #320]	; (8002f78 <MX_GPIO_Init+0x160>)
 8002e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e3e:	4b4e      	ldr	r3, [pc, #312]	; (8002f78 <MX_GPIO_Init+0x160>)
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e46:	613b      	str	r3, [r7, #16]
 8002e48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	60fb      	str	r3, [r7, #12]
 8002e4e:	4b4a      	ldr	r3, [pc, #296]	; (8002f78 <MX_GPIO_Init+0x160>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e52:	4a49      	ldr	r2, [pc, #292]	; (8002f78 <MX_GPIO_Init+0x160>)
 8002e54:	f043 0301 	orr.w	r3, r3, #1
 8002e58:	6313      	str	r3, [r2, #48]	; 0x30
 8002e5a:	4b47      	ldr	r3, [pc, #284]	; (8002f78 <MX_GPIO_Init+0x160>)
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	60fb      	str	r3, [r7, #12]
 8002e64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e66:	2300      	movs	r3, #0
 8002e68:	60bb      	str	r3, [r7, #8]
 8002e6a:	4b43      	ldr	r3, [pc, #268]	; (8002f78 <MX_GPIO_Init+0x160>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6e:	4a42      	ldr	r2, [pc, #264]	; (8002f78 <MX_GPIO_Init+0x160>)
 8002e70:	f043 0310 	orr.w	r3, r3, #16
 8002e74:	6313      	str	r3, [r2, #48]	; 0x30
 8002e76:	4b40      	ldr	r3, [pc, #256]	; (8002f78 <MX_GPIO_Init+0x160>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	f003 0310 	and.w	r3, r3, #16
 8002e7e:	60bb      	str	r3, [r7, #8]
 8002e80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e82:	2300      	movs	r3, #0
 8002e84:	607b      	str	r3, [r7, #4]
 8002e86:	4b3c      	ldr	r3, [pc, #240]	; (8002f78 <MX_GPIO_Init+0x160>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	4a3b      	ldr	r2, [pc, #236]	; (8002f78 <MX_GPIO_Init+0x160>)
 8002e8c:	f043 0302 	orr.w	r3, r3, #2
 8002e90:	6313      	str	r3, [r2, #48]	; 0x30
 8002e92:	4b39      	ldr	r3, [pc, #228]	; (8002f78 <MX_GPIO_Init+0x160>)
 8002e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	607b      	str	r3, [r7, #4]
 8002e9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	603b      	str	r3, [r7, #0]
 8002ea2:	4b35      	ldr	r3, [pc, #212]	; (8002f78 <MX_GPIO_Init+0x160>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	4a34      	ldr	r2, [pc, #208]	; (8002f78 <MX_GPIO_Init+0x160>)
 8002ea8:	f043 0308 	orr.w	r3, r3, #8
 8002eac:	6313      	str	r3, [r2, #48]	; 0x30
 8002eae:	4b32      	ldr	r3, [pc, #200]	; (8002f78 <MX_GPIO_Init+0x160>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	f003 0308 	and.w	r3, r3, #8
 8002eb6:	603b      	str	r3, [r7, #0]
 8002eb8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin, GPIO_PIN_RESET);
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f44f 6141 	mov.w	r1, #3088	; 0xc10
 8002ec0:	482e      	ldr	r0, [pc, #184]	; (8002f7c <MX_GPIO_Init+0x164>)
 8002ec2:	f008 fe19 	bl	800baf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ENCODER_RESET_Pin|PULSE_WRITE_Pin|CAPTURE_ENABLE_Pin|STOP_Pin, GPIO_PIN_RESET);
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f641 0148 	movw	r1, #6216	; 0x1848
 8002ecc:	482c      	ldr	r0, [pc, #176]	; (8002f80 <MX_GPIO_Init+0x168>)
 8002ece:	f008 fe13 	bl	800baf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin, GPIO_PIN_RESET);
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8002ed8:	482a      	ldr	r0, [pc, #168]	; (8002f84 <MX_GPIO_Init+0x16c>)
 8002eda:	f008 fe0d 	bl	800baf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin;
 8002ede:	f44f 6341 	mov.w	r3, #3088	; 0xc10
 8002ee2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eec:	2300      	movs	r3, #0
 8002eee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ef0:	f107 0314 	add.w	r3, r7, #20
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	4821      	ldr	r0, [pc, #132]	; (8002f7c <MX_GPIO_Init+0x164>)
 8002ef8:	f008 fc64 	bl	800b7c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = ENCODER_RESET_Pin|CAPTURE_ENABLE_Pin|STOP_Pin;
 8002efc:	f640 0348 	movw	r3, #2120	; 0x848
 8002f00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f02:	2301      	movs	r3, #1
 8002f04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f06:	2300      	movs	r3, #0
 8002f08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f0e:	f107 0314 	add.w	r3, r7, #20
 8002f12:	4619      	mov	r1, r3
 8002f14:	481a      	ldr	r0, [pc, #104]	; (8002f80 <MX_GPIO_Init+0x168>)
 8002f16:	f008 fc55 	bl	800b7c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PULSE_WRITE_Pin;
 8002f1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f20:	2301      	movs	r3, #1
 8002f22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f24:	2300      	movs	r3, #0
 8002f26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PULSE_WRITE_GPIO_Port, &GPIO_InitStruct);
 8002f2c:	f107 0314 	add.w	r3, r7, #20
 8002f30:	4619      	mov	r1, r3
 8002f32:	4813      	ldr	r0, [pc, #76]	; (8002f80 <MX_GPIO_Init+0x168>)
 8002f34:	f008 fc46 	bl	800b7c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = CPLD_LIMIT_Pin|CPLD_BUSY_Pin;
 8002f38:	f242 0304 	movw	r3, #8196	; 0x2004
 8002f3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f42:	2301      	movs	r3, #1
 8002f44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f46:	f107 0314 	add.w	r3, r7, #20
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	480c      	ldr	r0, [pc, #48]	; (8002f80 <MX_GPIO_Init+0x168>)
 8002f4e:	f008 fc39 	bl	800b7c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin;
 8002f52:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002f56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f60:	2300      	movs	r3, #0
 8002f62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f64:	f107 0314 	add.w	r3, r7, #20
 8002f68:	4619      	mov	r1, r3
 8002f6a:	4806      	ldr	r0, [pc, #24]	; (8002f84 <MX_GPIO_Init+0x16c>)
 8002f6c:	f008 fc2a 	bl	800b7c4 <HAL_GPIO_Init>

}
 8002f70:	bf00      	nop
 8002f72:	3728      	adds	r7, #40	; 0x28
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	40023800 	.word	0x40023800
 8002f7c:	40020400 	.word	0x40020400
 8002f80:	40020c00 	.word	0x40020c00
 8002f84:	40020000 	.word	0x40020000

08002f88 <kinematicForward>:
#include "kinematic.h"
#include "common_def.h"
#include "math.h"
#include "system_params.h"

uint8_t		kinematicForward(SCARA_PositionTypeDef *pnt) {
 8002f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f8a:	b08b      	sub	sp, #44	; 0x2c
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
	double x, y, z, roll;

	x =   a1*cos(pnt->Theta1)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8002f96:	eeb0 0a47 	vmov.f32	s0, s14
 8002f9a:	eef0 0a67 	vmov.f32	s1, s15
 8002f9e:	f016 f9e3 	bl	8019368 <cos>
 8002fa2:	ec51 0b10 	vmov	r0, r1, d0
 8002fa6:	a38e      	add	r3, pc, #568	; (adr r3, 80031e0 <kinematicForward+0x258>)
 8002fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fac:	f7fd fb24 	bl	80005f8 <__aeabi_dmul>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	460c      	mov	r4, r1
 8002fb4:	461d      	mov	r5, r3
 8002fb6:	4626      	mov	r6, r4
		+ a2*cos(pnt->Theta1 + pnt->Theta2)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	4623      	mov	r3, r4
 8002fc8:	f7fd f960 	bl	800028c <__adddf3>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	460c      	mov	r4, r1
 8002fd0:	ec44 3b17 	vmov	d7, r3, r4
 8002fd4:	eeb0 0a47 	vmov.f32	s0, s14
 8002fd8:	eef0 0a67 	vmov.f32	s1, s15
 8002fdc:	f016 f9c4 	bl	8019368 <cos>
 8002fe0:	ec51 0b10 	vmov	r0, r1, d0
 8002fe4:	f04f 0200 	mov.w	r2, #0
 8002fe8:	4b83      	ldr	r3, [pc, #524]	; (80031f8 <kinematicForward+0x270>)
 8002fea:	f7fd fb05 	bl	80005f8 <__aeabi_dmul>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	460c      	mov	r4, r1
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	4623      	mov	r3, r4
 8002ff6:	4628      	mov	r0, r5
 8002ff8:	4631      	mov	r1, r6
 8002ffa:	f7fd f947 	bl	800028c <__adddf3>
 8002ffe:	4603      	mov	r3, r0
 8003000:	460c      	mov	r4, r1
 8003002:	461d      	mov	r5, r3
 8003004:	4626      	mov	r6, r4
		+ a4*cos(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8003012:	461a      	mov	r2, r3
 8003014:	4623      	mov	r3, r4
 8003016:	f7fd f939 	bl	800028c <__adddf3>
 800301a:	4603      	mov	r3, r0
 800301c:	460c      	mov	r4, r1
 800301e:	4618      	mov	r0, r3
 8003020:	4621      	mov	r1, r4
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 8003028:	461a      	mov	r2, r3
 800302a:	4623      	mov	r3, r4
 800302c:	f7fd f92c 	bl	8000288 <__aeabi_dsub>
 8003030:	4603      	mov	r3, r0
 8003032:	460c      	mov	r4, r1
 8003034:	ec44 3b17 	vmov	d7, r3, r4
 8003038:	eeb0 0a47 	vmov.f32	s0, s14
 800303c:	eef0 0a67 	vmov.f32	s1, s15
 8003040:	f016 f992 	bl	8019368 <cos>
 8003044:	ec51 0b10 	vmov	r0, r1, d0
 8003048:	a363      	add	r3, pc, #396	; (adr r3, 80031d8 <kinematicForward+0x250>)
 800304a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800304e:	f7fd fad3 	bl	80005f8 <__aeabi_dmul>
 8003052:	4603      	mov	r3, r0
 8003054:	460c      	mov	r4, r1
	x =   a1*cos(pnt->Theta1)
 8003056:	461a      	mov	r2, r3
 8003058:	4623      	mov	r3, r4
 800305a:	4628      	mov	r0, r5
 800305c:	4631      	mov	r1, r6
 800305e:	f7fd f915 	bl	800028c <__adddf3>
 8003062:	4603      	mov	r3, r0
 8003064:	460c      	mov	r4, r1
 8003066:	e9c7 3408 	strd	r3, r4, [r7, #32]
	y =   a1*sin(pnt->Theta1)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8003070:	eeb0 0a47 	vmov.f32	s0, s14
 8003074:	eef0 0a67 	vmov.f32	s1, s15
 8003078:	f016 fa06 	bl	8019488 <sin>
 800307c:	ec51 0b10 	vmov	r0, r1, d0
 8003080:	a357      	add	r3, pc, #348	; (adr r3, 80031e0 <kinematicForward+0x258>)
 8003082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003086:	f7fd fab7 	bl	80005f8 <__aeabi_dmul>
 800308a:	4603      	mov	r3, r0
 800308c:	460c      	mov	r4, r1
 800308e:	461d      	mov	r5, r3
 8003090:	4626      	mov	r6, r4
		+ a2*sin(pnt->Theta1 + pnt->Theta2)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 800309e:	461a      	mov	r2, r3
 80030a0:	4623      	mov	r3, r4
 80030a2:	f7fd f8f3 	bl	800028c <__adddf3>
 80030a6:	4603      	mov	r3, r0
 80030a8:	460c      	mov	r4, r1
 80030aa:	ec44 3b17 	vmov	d7, r3, r4
 80030ae:	eeb0 0a47 	vmov.f32	s0, s14
 80030b2:	eef0 0a67 	vmov.f32	s1, s15
 80030b6:	f016 f9e7 	bl	8019488 <sin>
 80030ba:	ec51 0b10 	vmov	r0, r1, d0
 80030be:	f04f 0200 	mov.w	r2, #0
 80030c2:	4b4d      	ldr	r3, [pc, #308]	; (80031f8 <kinematicForward+0x270>)
 80030c4:	f7fd fa98 	bl	80005f8 <__aeabi_dmul>
 80030c8:	4603      	mov	r3, r0
 80030ca:	460c      	mov	r4, r1
 80030cc:	461a      	mov	r2, r3
 80030ce:	4623      	mov	r3, r4
 80030d0:	4628      	mov	r0, r5
 80030d2:	4631      	mov	r1, r6
 80030d4:	f7fd f8da 	bl	800028c <__adddf3>
 80030d8:	4603      	mov	r3, r0
 80030da:	460c      	mov	r4, r1
 80030dc:	461d      	mov	r5, r3
 80030de:	4626      	mov	r6, r4
		+ a4*sin(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 80030ec:	461a      	mov	r2, r3
 80030ee:	4623      	mov	r3, r4
 80030f0:	f7fd f8cc 	bl	800028c <__adddf3>
 80030f4:	4603      	mov	r3, r0
 80030f6:	460c      	mov	r4, r1
 80030f8:	4618      	mov	r0, r3
 80030fa:	4621      	mov	r1, r4
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 8003102:	461a      	mov	r2, r3
 8003104:	4623      	mov	r3, r4
 8003106:	f7fd f8bf 	bl	8000288 <__aeabi_dsub>
 800310a:	4603      	mov	r3, r0
 800310c:	460c      	mov	r4, r1
 800310e:	ec44 3b17 	vmov	d7, r3, r4
 8003112:	eeb0 0a47 	vmov.f32	s0, s14
 8003116:	eef0 0a67 	vmov.f32	s1, s15
 800311a:	f016 f9b5 	bl	8019488 <sin>
 800311e:	ec51 0b10 	vmov	r0, r1, d0
 8003122:	a32d      	add	r3, pc, #180	; (adr r3, 80031d8 <kinematicForward+0x250>)
 8003124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003128:	f7fd fa66 	bl	80005f8 <__aeabi_dmul>
 800312c:	4603      	mov	r3, r0
 800312e:	460c      	mov	r4, r1
	y =   a1*sin(pnt->Theta1)
 8003130:	461a      	mov	r2, r3
 8003132:	4623      	mov	r3, r4
 8003134:	4628      	mov	r0, r5
 8003136:	4631      	mov	r1, r6
 8003138:	f7fd f8a8 	bl	800028c <__adddf3>
 800313c:	4603      	mov	r3, r0
 800313e:	460c      	mov	r4, r1
 8003140:	e9c7 3406 	strd	r3, r4, [r7, #24]
	z =   d1 - pnt->D3 - d4;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 800314a:	461a      	mov	r2, r3
 800314c:	4623      	mov	r3, r4
 800314e:	a126      	add	r1, pc, #152	; (adr r1, 80031e8 <kinematicForward+0x260>)
 8003150:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003154:	f7fd f898 	bl	8000288 <__aeabi_dsub>
 8003158:	4603      	mov	r3, r0
 800315a:	460c      	mov	r4, r1
 800315c:	4618      	mov	r0, r3
 800315e:	4621      	mov	r1, r4
 8003160:	a323      	add	r3, pc, #140	; (adr r3, 80031f0 <kinematicForward+0x268>)
 8003162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003166:	f7fd f88f 	bl	8000288 <__aeabi_dsub>
 800316a:	4603      	mov	r3, r0
 800316c:	460c      	mov	r4, r1
 800316e:	e9c7 3404 	strd	r3, r4, [r7, #16]
	roll = pnt->Theta1 + pnt->Theta2 - pnt->Theta4;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 800317e:	461a      	mov	r2, r3
 8003180:	4623      	mov	r3, r4
 8003182:	f7fd f883 	bl	800028c <__adddf3>
 8003186:	4603      	mov	r3, r0
 8003188:	460c      	mov	r4, r1
 800318a:	4618      	mov	r0, r3
 800318c:	4621      	mov	r1, r4
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 8003194:	461a      	mov	r2, r3
 8003196:	4623      	mov	r3, r4
 8003198:	f7fd f876 	bl	8000288 <__aeabi_dsub>
 800319c:	4603      	mov	r3, r0
 800319e:	460c      	mov	r4, r1
 80031a0:	e9c7 3402 	strd	r3, r4, [r7, #8]

	pnt->x = x;
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80031aa:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	pnt->y = y;
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80031b4:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	pnt->z = z;
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80031be:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	pnt->roll = roll;
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80031c8:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

	return TRUE;
 80031cc:	2301      	movs	r3, #1
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	372c      	adds	r7, #44	; 0x2c
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031d6:	bf00      	nop
 80031d8:	80000000 	.word	0x80000000
 80031dc:	40402e14 	.word	0x40402e14
 80031e0:	00000000 	.word	0x00000000
 80031e4:	4068a000 	.word	0x4068a000
 80031e8:	00000000 	.word	0x00000000
 80031ec:	406a6000 	.word	0x406a6000
 80031f0:	e0000000 	.word	0xe0000000
 80031f4:	40536b22 	.word	0x40536b22
 80031f8:	40640000 	.word	0x40640000
 80031fc:	00000000 	.word	0x00000000

08003200 <kinematicInverse>:

uint8_t		kinematicInverse(SCARA_PositionTypeDef *pnt, SCARA_PositionTypeDef current) {
 8003200:	b082      	sub	sp, #8
 8003202:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003206:	b0a0      	sub	sp, #128	; 0x80
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8003210:	e881 000c 	stmia.w	r1, {r2, r3}
	double theta1, theta2, theta2_positive, theta2_negative, d3, theta4 , pWx, pWy;
	double s1, c1, s2, s2_positive, s2_negative, c2 , temp;

	d3  = d1 - d4 - pnt->z;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800321a:	a1f2      	add	r1, pc, #968	; (adr r1, 80035e4 <kinematicInverse+0x3e4>)
 800321c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003220:	f7fd f832 	bl	8000288 <__aeabi_dsub>
 8003224:	4602      	mov	r2, r0
 8003226:	460b      	mov	r3, r1
 8003228:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	pWx = pnt->x - a4*cos(pnt->roll);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	e9d3 ab12 	ldrd	sl, fp, [r3, #72]	; 0x48
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8003238:	eeb0 0a47 	vmov.f32	s0, s14
 800323c:	eef0 0a67 	vmov.f32	s1, s15
 8003240:	f016 f892 	bl	8019368 <cos>
 8003244:	ec51 0b10 	vmov	r0, r1, d0
 8003248:	a3e8      	add	r3, pc, #928	; (adr r3, 80035ec <kinematicInverse+0x3ec>)
 800324a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800324e:	f7fd f9d3 	bl	80005f8 <__aeabi_dmul>
 8003252:	4602      	mov	r2, r0
 8003254:	460b      	mov	r3, r1
 8003256:	4650      	mov	r0, sl
 8003258:	4659      	mov	r1, fp
 800325a:	f7fd f815 	bl	8000288 <__aeabi_dsub>
 800325e:	4602      	mov	r2, r0
 8003260:	460b      	mov	r3, r1
 8003262:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	pWy = pnt->y - a4*sin(pnt->roll);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	e9d3 ab14 	ldrd	sl, fp, [r3, #80]	; 0x50
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8003272:	eeb0 0a47 	vmov.f32	s0, s14
 8003276:	eef0 0a67 	vmov.f32	s1, s15
 800327a:	f016 f905 	bl	8019488 <sin>
 800327e:	ec51 0b10 	vmov	r0, r1, d0
 8003282:	a3da      	add	r3, pc, #872	; (adr r3, 80035ec <kinematicInverse+0x3ec>)
 8003284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003288:	f7fd f9b6 	bl	80005f8 <__aeabi_dmul>
 800328c:	4602      	mov	r2, r0
 800328e:	460b      	mov	r3, r1
 8003290:	4650      	mov	r0, sl
 8003292:	4659      	mov	r1, fp
 8003294:	f7fc fff8 	bl	8000288 <__aeabi_dsub>
 8003298:	4602      	mov	r2, r0
 800329a:	460b      	mov	r3, r1
 800329c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	c2  = (pWx*pWx + pWy*pWy - a1*a1 - a2*a2) / (2*a1*a2);
 80032a0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80032a4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80032a8:	f7fd f9a6 	bl	80005f8 <__aeabi_dmul>
 80032ac:	4602      	mov	r2, r0
 80032ae:	460b      	mov	r3, r1
 80032b0:	4692      	mov	sl, r2
 80032b2:	469b      	mov	fp, r3
 80032b4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80032b8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80032bc:	f7fd f99c 	bl	80005f8 <__aeabi_dmul>
 80032c0:	4602      	mov	r2, r0
 80032c2:	460b      	mov	r3, r1
 80032c4:	4650      	mov	r0, sl
 80032c6:	4659      	mov	r1, fp
 80032c8:	f7fc ffe0 	bl	800028c <__adddf3>
 80032cc:	4602      	mov	r2, r0
 80032ce:	460b      	mov	r3, r1
 80032d0:	4610      	mov	r0, r2
 80032d2:	4619      	mov	r1, r3
 80032d4:	a3c7      	add	r3, pc, #796	; (adr r3, 80035f4 <kinematicInverse+0x3f4>)
 80032d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032da:	f7fc ffd5 	bl	8000288 <__aeabi_dsub>
 80032de:	4602      	mov	r2, r0
 80032e0:	460b      	mov	r3, r1
 80032e2:	4610      	mov	r0, r2
 80032e4:	4619      	mov	r1, r3
 80032e6:	f04f 0200 	mov.w	r2, #0
 80032ea:	4bbb      	ldr	r3, [pc, #748]	; (80035d8 <kinematicInverse+0x3d8>)
 80032ec:	f7fc ffcc 	bl	8000288 <__aeabi_dsub>
 80032f0:	4602      	mov	r2, r0
 80032f2:	460b      	mov	r3, r1
 80032f4:	4610      	mov	r0, r2
 80032f6:	4619      	mov	r1, r3
 80032f8:	a3b3      	add	r3, pc, #716	; (adr r3, 80035c8 <kinematicInverse+0x3c8>)
 80032fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032fe:	f7fd faa5 	bl	800084c <__aeabi_ddiv>
 8003302:	4602      	mov	r2, r0
 8003304:	460b      	mov	r3, r1
 8003306:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp = 1 - c2*c2;
 800330a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800330e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003312:	f7fd f971 	bl	80005f8 <__aeabi_dmul>
 8003316:	4602      	mov	r2, r0
 8003318:	460b      	mov	r3, r1
 800331a:	f04f 0000 	mov.w	r0, #0
 800331e:	49af      	ldr	r1, [pc, #700]	; (80035dc <kinematicInverse+0x3dc>)
 8003320:	f7fc ffb2 	bl	8000288 <__aeabi_dsub>
 8003324:	4602      	mov	r2, r0
 8003326:	460b      	mov	r3, r1
 8003328:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	if ( temp < 0 ) {
 800332c:	f04f 0200 	mov.w	r2, #0
 8003330:	f04f 0300 	mov.w	r3, #0
 8003334:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003338:	f7fd fbd0 	bl	8000adc <__aeabi_dcmplt>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <kinematicInverse+0x146>
		return FALSE;
 8003342:	2300      	movs	r3, #0
 8003344:	e136      	b.n	80035b4 <kinematicInverse+0x3b4>
	}
	s2_positive  = sqrt(temp); // Note that there are 2 solution: elbow up & elbow down
 8003346:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 800334a:	f016 f927 	bl	801959c <sqrt>
 800334e:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
	s2_negative	 = -s2_positive;
 8003352:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003354:	63bb      	str	r3, [r7, #56]	; 0x38
 8003356:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003358:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800335c:	63fb      	str	r3, [r7, #60]	; 0x3c

	theta2_positive = atan2(s2_positive,c2);
 800335e:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 8003362:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8003366:	f016 f917 	bl	8019598 <atan2>
 800336a:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
	theta2_negative = atan2(s2_negative,c2);
 800336e:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 8003372:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8003376:	f016 f90f 	bl	8019598 <atan2>
 800337a:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	// Choose relevant situation : nearest
	if ( fabs( theta2_positive - current.Theta2) <= fabs( theta2_negative - current.Theta2)) {
 800337e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8003382:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003386:	f7fc ff7f 	bl	8000288 <__aeabi_dsub>
 800338a:	4602      	mov	r2, r0
 800338c:	460b      	mov	r3, r1
 800338e:	4614      	mov	r4, r2
 8003390:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8003394:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8003398:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800339c:	f7fc ff74 	bl	8000288 <__aeabi_dsub>
 80033a0:	4602      	mov	r2, r0
 80033a2:	460b      	mov	r3, r1
 80033a4:	4690      	mov	r8, r2
 80033a6:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80033aa:	4642      	mov	r2, r8
 80033ac:	464b      	mov	r3, r9
 80033ae:	4620      	mov	r0, r4
 80033b0:	4629      	mov	r1, r5
 80033b2:	f7fd fb9d 	bl	8000af0 <__aeabi_dcmple>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d008      	beq.n	80033ce <kinematicInverse+0x1ce>
		s2 		= s2_positive;
 80033bc:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80033c0:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		theta2 	= theta2_positive;
 80033c4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80033c8:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 80033cc:	e007      	b.n	80033de <kinematicInverse+0x1de>
	} else {
		s2 		= s2_negative;
 80033ce:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80033d2:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		theta2 	= theta2_negative;
 80033d6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80033da:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	}

	s1 = ((a1 + a2*c2)*pWy - a2*s2*pWx) / (pWx*pWx + pWy*pWy);
 80033de:	f04f 0200 	mov.w	r2, #0
 80033e2:	4b7f      	ldr	r3, [pc, #508]	; (80035e0 <kinematicInverse+0x3e0>)
 80033e4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80033e8:	f7fd f906 	bl	80005f8 <__aeabi_dmul>
 80033ec:	4603      	mov	r3, r0
 80033ee:	460c      	mov	r4, r1
 80033f0:	4618      	mov	r0, r3
 80033f2:	4621      	mov	r1, r4
 80033f4:	a376      	add	r3, pc, #472	; (adr r3, 80035d0 <kinematicInverse+0x3d0>)
 80033f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033fa:	f7fc ff47 	bl	800028c <__adddf3>
 80033fe:	4603      	mov	r3, r0
 8003400:	460c      	mov	r4, r1
 8003402:	4618      	mov	r0, r3
 8003404:	4621      	mov	r1, r4
 8003406:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800340a:	f7fd f8f5 	bl	80005f8 <__aeabi_dmul>
 800340e:	4603      	mov	r3, r0
 8003410:	460c      	mov	r4, r1
 8003412:	4625      	mov	r5, r4
 8003414:	461c      	mov	r4, r3
 8003416:	f04f 0200 	mov.w	r2, #0
 800341a:	4b71      	ldr	r3, [pc, #452]	; (80035e0 <kinematicInverse+0x3e0>)
 800341c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003420:	f7fd f8ea 	bl	80005f8 <__aeabi_dmul>
 8003424:	4602      	mov	r2, r0
 8003426:	460b      	mov	r3, r1
 8003428:	4610      	mov	r0, r2
 800342a:	4619      	mov	r1, r3
 800342c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003430:	f7fd f8e2 	bl	80005f8 <__aeabi_dmul>
 8003434:	4602      	mov	r2, r0
 8003436:	460b      	mov	r3, r1
 8003438:	4620      	mov	r0, r4
 800343a:	4629      	mov	r1, r5
 800343c:	f7fc ff24 	bl	8000288 <__aeabi_dsub>
 8003440:	4603      	mov	r3, r0
 8003442:	460c      	mov	r4, r1
 8003444:	4625      	mov	r5, r4
 8003446:	461c      	mov	r4, r3
 8003448:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800344c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003450:	f7fd f8d2 	bl	80005f8 <__aeabi_dmul>
 8003454:	4602      	mov	r2, r0
 8003456:	460b      	mov	r3, r1
 8003458:	4690      	mov	r8, r2
 800345a:	4699      	mov	r9, r3
 800345c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003460:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003464:	f7fd f8c8 	bl	80005f8 <__aeabi_dmul>
 8003468:	4602      	mov	r2, r0
 800346a:	460b      	mov	r3, r1
 800346c:	4640      	mov	r0, r8
 800346e:	4649      	mov	r1, r9
 8003470:	f7fc ff0c 	bl	800028c <__adddf3>
 8003474:	4602      	mov	r2, r0
 8003476:	460b      	mov	r3, r1
 8003478:	4620      	mov	r0, r4
 800347a:	4629      	mov	r1, r5
 800347c:	f7fd f9e6 	bl	800084c <__aeabi_ddiv>
 8003480:	4603      	mov	r3, r0
 8003482:	460c      	mov	r4, r1
 8003484:	e9c7 3408 	strd	r3, r4, [r7, #32]
	c1 = ((a1 + a2*c2)*pWx + a2*s2*pWy) / (pWx*pWx + pWy*pWy);
 8003488:	f04f 0200 	mov.w	r2, #0
 800348c:	4b54      	ldr	r3, [pc, #336]	; (80035e0 <kinematicInverse+0x3e0>)
 800348e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003492:	f7fd f8b1 	bl	80005f8 <__aeabi_dmul>
 8003496:	4603      	mov	r3, r0
 8003498:	460c      	mov	r4, r1
 800349a:	4618      	mov	r0, r3
 800349c:	4621      	mov	r1, r4
 800349e:	a34c      	add	r3, pc, #304	; (adr r3, 80035d0 <kinematicInverse+0x3d0>)
 80034a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a4:	f7fc fef2 	bl	800028c <__adddf3>
 80034a8:	4603      	mov	r3, r0
 80034aa:	460c      	mov	r4, r1
 80034ac:	4618      	mov	r0, r3
 80034ae:	4621      	mov	r1, r4
 80034b0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80034b4:	f7fd f8a0 	bl	80005f8 <__aeabi_dmul>
 80034b8:	4603      	mov	r3, r0
 80034ba:	460c      	mov	r4, r1
 80034bc:	4625      	mov	r5, r4
 80034be:	461c      	mov	r4, r3
 80034c0:	f04f 0200 	mov.w	r2, #0
 80034c4:	4b46      	ldr	r3, [pc, #280]	; (80035e0 <kinematicInverse+0x3e0>)
 80034c6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80034ca:	f7fd f895 	bl	80005f8 <__aeabi_dmul>
 80034ce:	4602      	mov	r2, r0
 80034d0:	460b      	mov	r3, r1
 80034d2:	4610      	mov	r0, r2
 80034d4:	4619      	mov	r1, r3
 80034d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80034da:	f7fd f88d 	bl	80005f8 <__aeabi_dmul>
 80034de:	4602      	mov	r2, r0
 80034e0:	460b      	mov	r3, r1
 80034e2:	4620      	mov	r0, r4
 80034e4:	4629      	mov	r1, r5
 80034e6:	f7fc fed1 	bl	800028c <__adddf3>
 80034ea:	4603      	mov	r3, r0
 80034ec:	460c      	mov	r4, r1
 80034ee:	4625      	mov	r5, r4
 80034f0:	461c      	mov	r4, r3
 80034f2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80034f6:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80034fa:	f7fd f87d 	bl	80005f8 <__aeabi_dmul>
 80034fe:	4602      	mov	r2, r0
 8003500:	460b      	mov	r3, r1
 8003502:	4690      	mov	r8, r2
 8003504:	4699      	mov	r9, r3
 8003506:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800350a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800350e:	f7fd f873 	bl	80005f8 <__aeabi_dmul>
 8003512:	4602      	mov	r2, r0
 8003514:	460b      	mov	r3, r1
 8003516:	4640      	mov	r0, r8
 8003518:	4649      	mov	r1, r9
 800351a:	f7fc feb7 	bl	800028c <__adddf3>
 800351e:	4602      	mov	r2, r0
 8003520:	460b      	mov	r3, r1
 8003522:	4620      	mov	r0, r4
 8003524:	4629      	mov	r1, r5
 8003526:	f7fd f991 	bl	800084c <__aeabi_ddiv>
 800352a:	4603      	mov	r3, r0
 800352c:	460c      	mov	r4, r1
 800352e:	e9c7 3406 	strd	r3, r4, [r7, #24]
	theta1 = atan2(s1,c1);
 8003532:	ed97 1b06 	vldr	d1, [r7, #24]
 8003536:	ed97 0b08 	vldr	d0, [r7, #32]
 800353a:	f016 f82d 	bl	8019598 <atan2>
 800353e:	ed87 0b04 	vstr	d0, [r7, #16]
 	theta4 = theta1 + theta2 - pnt->roll;
 8003542:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003546:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800354a:	f7fc fe9f 	bl	800028c <__adddf3>
 800354e:	4603      	mov	r3, r0
 8003550:	460c      	mov	r4, r1
 8003552:	4618      	mov	r0, r3
 8003554:	4621      	mov	r1, r4
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 800355c:	461a      	mov	r2, r3
 800355e:	4623      	mov	r3, r4
 8003560:	f7fc fe92 	bl	8000288 <__aeabi_dsub>
 8003564:	4603      	mov	r3, r0
 8003566:	460c      	mov	r4, r1
 8003568:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if ( SCARA_STATUS_OK != scaraCheckWorkSpace4(theta1, theta2, d3, theta4)) {
 800356c:	ed97 3b02 	vldr	d3, [r7, #8]
 8003570:	ed97 2b1a 	vldr	d2, [r7, #104]	; 0x68
 8003574:	ed97 1b1e 	vldr	d1, [r7, #120]	; 0x78
 8003578:	ed97 0b04 	vldr	d0, [r7, #16]
 800357c:	f005 fad8 	bl	8008b30 <scaraCheckWorkSpace4>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <kinematicInverse+0x38a>
		return FALSE; // Over workspace !!!
 8003586:	2300      	movs	r3, #0
 8003588:	e014      	b.n	80035b4 <kinematicInverse+0x3b4>
	}
	pnt->Theta1 = theta1;
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003590:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	pnt->Theta2 = theta2;
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800359a:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	pnt->D3		= d3;
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80035a4:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	pnt->Theta4 = theta4;
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80035ae:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

	return TRUE; // All is well
 80035b2:	2301      	movs	r3, #1
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3780      	adds	r7, #128	; 0x80
 80035b8:	46bd      	mov	sp, r7
 80035ba:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035be:	b002      	add	sp, #8
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	f3af 8000 	nop.w
 80035c8:	00000000 	.word	0x00000000
 80035cc:	40eec800 	.word	0x40eec800
 80035d0:	00000000 	.word	0x00000000
 80035d4:	4068a000 	.word	0x4068a000
 80035d8:	40d90000 	.word	0x40d90000
 80035dc:	3ff00000 	.word	0x3ff00000
 80035e0:	40640000 	.word	0x40640000
 80035e4:	80000000 	.word	0x80000000
 80035e8:	4060aa6e 	.word	0x4060aa6e
 80035ec:	80000000 	.word	0x80000000
 80035f0:	40402e14 	.word	0x40402e14
 80035f4:	00000000 	.word	0x00000000
 80035f8:	40e2f320 	.word	0x40e2f320

080035fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003600:	f007 fbfc 	bl	800adfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003604:	f000 f810 	bl	8003628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003608:	f7ff fc06 	bl	8002e18 <MX_GPIO_Init>
  MX_DMA_Init();
 800360c:	f7fe fc38 	bl	8001e80 <MX_DMA_Init>
  MX_UART4_Init();
 8003610:	f007 faf6 	bl	800ac00 <MX_UART4_Init>
  MX_FSMC_Init();
 8003614:	f7ff fb38 	bl	8002c88 <MX_FSMC_Init>
  MX_TIM7_Init();
 8003618:	f007 fa94 	bl	800ab44 <MX_TIM7_Init>
  //lowlayer_writePulse(0, 0, 0, 0);
  //HAL_Delay(10);
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800361c:	f7fe fc6a 	bl	8001ef4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003620:	f00e f9ba 	bl	8011998 <osKernelStart>
//  		  HAL_Delay(10);
//  	  }
//  lowlayer_writePulse(0, 0, 0, 0);
//  __NOP();

  while (1)
 8003624:	e7fe      	b.n	8003624 <main+0x28>
	...

08003628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b094      	sub	sp, #80	; 0x50
 800362c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800362e:	f107 0320 	add.w	r3, r7, #32
 8003632:	2230      	movs	r2, #48	; 0x30
 8003634:	2100      	movs	r1, #0
 8003636:	4618      	mov	r0, r3
 8003638:	f012 f8be 	bl	80157b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800363c:	f107 030c 	add.w	r3, r7, #12
 8003640:	2200      	movs	r2, #0
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	605a      	str	r2, [r3, #4]
 8003646:	609a      	str	r2, [r3, #8]
 8003648:	60da      	str	r2, [r3, #12]
 800364a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800364c:	2300      	movs	r3, #0
 800364e:	60bb      	str	r3, [r7, #8]
 8003650:	4b28      	ldr	r3, [pc, #160]	; (80036f4 <SystemClock_Config+0xcc>)
 8003652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003654:	4a27      	ldr	r2, [pc, #156]	; (80036f4 <SystemClock_Config+0xcc>)
 8003656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800365a:	6413      	str	r3, [r2, #64]	; 0x40
 800365c:	4b25      	ldr	r3, [pc, #148]	; (80036f4 <SystemClock_Config+0xcc>)
 800365e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003664:	60bb      	str	r3, [r7, #8]
 8003666:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003668:	2300      	movs	r3, #0
 800366a:	607b      	str	r3, [r7, #4]
 800366c:	4b22      	ldr	r3, [pc, #136]	; (80036f8 <SystemClock_Config+0xd0>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a21      	ldr	r2, [pc, #132]	; (80036f8 <SystemClock_Config+0xd0>)
 8003672:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003676:	6013      	str	r3, [r2, #0]
 8003678:	4b1f      	ldr	r3, [pc, #124]	; (80036f8 <SystemClock_Config+0xd0>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003680:	607b      	str	r3, [r7, #4]
 8003682:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003684:	2301      	movs	r3, #1
 8003686:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003688:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800368c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800368e:	2302      	movs	r3, #2
 8003690:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003692:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003696:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003698:	2308      	movs	r3, #8
 800369a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800369c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80036a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80036a2:	2302      	movs	r3, #2
 80036a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80036a6:	2307      	movs	r3, #7
 80036a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036aa:	f107 0320 	add.w	r3, r7, #32
 80036ae:	4618      	mov	r0, r3
 80036b0:	f009 fc1c 	bl	800ceec <HAL_RCC_OscConfig>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <SystemClock_Config+0x96>
  {
    Error_Handler();
 80036ba:	f000 f831 	bl	8003720 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036be:	230f      	movs	r3, #15
 80036c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80036c2:	2302      	movs	r3, #2
 80036c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036c6:	2300      	movs	r3, #0
 80036c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80036ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80036ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80036d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80036d6:	f107 030c 	add.w	r3, r7, #12
 80036da:	2105      	movs	r1, #5
 80036dc:	4618      	mov	r0, r3
 80036de:	f009 fe75 	bl	800d3cc <HAL_RCC_ClockConfig>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80036e8:	f000 f81a 	bl	8003720 <Error_Handler>
  }
}
 80036ec:	bf00      	nop
 80036ee:	3750      	adds	r7, #80	; 0x50
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	40023800 	.word	0x40023800
 80036f8:	40007000 	.word	0x40007000

080036fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a04      	ldr	r2, [pc, #16]	; (800371c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d101      	bne.n	8003712 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800370e:	f007 fb97 	bl	800ae40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003712:	bf00      	nop
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	40001000 	.word	0x40001000

08003720 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003724:	bf00      	nop
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr

0800372e <ringBuff_PushChar>:
 *  data		: data to write
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PushChar(RINGBUFFER_TypeDef *ringbuff, uint8_t data) {
 800372e:	b480      	push	{r7}
 8003730:	b083      	sub	sp, #12
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
 8003736:	460b      	mov	r3, r1
 8003738:	70fb      	strb	r3, [r7, #3]
	if (ringbuff->isFull_Flag) {
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 8003740:	2b00      	cmp	r3, #0
 8003742:	d001      	beq.n	8003748 <ringBuff_PushChar+0x1a>
		return FALSE;
 8003744:	2300      	movs	r3, #0
 8003746:	e024      	b.n	8003792 <ringBuff_PushChar+0x64>
	} else {
			ringbuff->Array[ringbuff->head]	= data;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	78f9      	ldrb	r1, [r7, #3]
 8003752:	54d1      	strb	r1, [r2, r3]
			ringbuff->head					= (ringbuff->head + 1) % RINGBUFFER_SIZE;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800375a:	3301      	adds	r3, #1
 800375c:	425a      	negs	r2, r3
 800375e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003762:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003766:	bf58      	it	pl
 8003768:	4253      	negpl	r3, r2
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
			if (ringbuff->head == ringbuff->tail) {
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800377c:	429a      	cmp	r2, r3
 800377e:	d103      	bne.n	8003788 <ringBuff_PushChar+0x5a>
				ringbuff->isFull_Flag = TRUE;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			}
			ringbuff->isEmpty_Flag = FALSE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
			return TRUE;
 8003790:	2301      	movs	r3, #1
	}
}
 8003792:	4618      	mov	r0, r3
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <ringBuff_PopChar>:
 *  *ptr_data	: pointer of destination
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PopChar(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data) {
 800379e:	b480      	push	{r7}
 80037a0:	b083      	sub	sp, #12
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
 80037a6:	6039      	str	r1, [r7, #0]
	if (ringbuff->isEmpty_Flag) {
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f893 3409 	ldrb.w	r3, [r3, #1033]	; 0x409
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <ringBuff_PopChar+0x18>
		return FALSE;
 80037b2:	2300      	movs	r3, #0
 80037b4:	e025      	b.n	8003802 <ringBuff_PopChar+0x64>
	} else {
			*ptr_data		= ringbuff->Array[ringbuff->tail];
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	5cd2      	ldrb	r2, [r2, r3]
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	701a      	strb	r2, [r3, #0]
			ringbuff->tail	= (ringbuff->tail +1) % RINGBUFFER_SIZE;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80037ca:	3301      	adds	r3, #1
 80037cc:	425a      	negs	r2, r3
 80037ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037d2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80037d6:	bf58      	it	pl
 80037d8:	4253      	negpl	r3, r2
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			if (ringbuff->head == ringbuff->tail) {
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d103      	bne.n	80037f8 <ringBuff_PopChar+0x5a>
				ringbuff->isEmpty_Flag = TRUE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
			}
			ringbuff->isFull_Flag = FALSE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			return TRUE;
 8003800:	2301      	movs	r3, #1
	}
}
 8003802:	4618      	mov	r0, r3
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr

0800380e <ringBuff_PushArray>:
 *  *ptr_data	: pointer of source
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PushArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 800380e:	b580      	push	{r7, lr}
 8003810:	b086      	sub	sp, #24
 8003812:	af00      	add	r7, sp, #0
 8003814:	60f8      	str	r0, [r7, #12]
 8003816:	60b9      	str	r1, [r7, #8]
 8003818:	607a      	str	r2, [r7, #4]
	int16_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 800381a:	2300      	movs	r3, #0
 800381c:	82fb      	strh	r3, [r7, #22]
 800381e:	e011      	b.n	8003844 <ringBuff_PushArray+0x36>
		if ( !ringBuff_PushChar(ringbuff, *(ptr_data + success_number))) {
 8003820:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003824:	68ba      	ldr	r2, [r7, #8]
 8003826:	4413      	add	r3, r2
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	4619      	mov	r1, r3
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f7ff ff7e 	bl	800372e <ringBuff_PushChar>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00b      	beq.n	8003850 <ringBuff_PushArray+0x42>
	for (success_number = 0; success_number < len; success_number++) {
 8003838:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800383c:	b29b      	uxth	r3, r3
 800383e:	3301      	adds	r3, #1
 8003840:	b29b      	uxth	r3, r3
 8003842:	82fb      	strh	r3, [r7, #22]
 8003844:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	429a      	cmp	r2, r3
 800384c:	dce8      	bgt.n	8003820 <ringBuff_PushArray+0x12>
 800384e:	e000      	b.n	8003852 <ringBuff_PushArray+0x44>
			break;
 8003850:	bf00      	nop
		}// stop when ring buffer FULL
	}
	return success_number;
 8003852:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8003856:	4618      	mov	r0, r3
 8003858:	3718      	adds	r7, #24
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <ringBuff_PopArray>:
 *  *ptr_data	: pointer of destination
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PopArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 800385e:	b580      	push	{r7, lr}
 8003860:	b086      	sub	sp, #24
 8003862:	af00      	add	r7, sp, #0
 8003864:	60f8      	str	r0, [r7, #12]
 8003866:	60b9      	str	r1, [r7, #8]
 8003868:	607a      	str	r2, [r7, #4]
	int32_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 800386a:	2300      	movs	r3, #0
 800386c:	617b      	str	r3, [r7, #20]
 800386e:	e00c      	b.n	800388a <ringBuff_PopArray+0x2c>
		if ( !ringBuff_PopChar(ringbuff, (ptr_data + success_number))) {
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	68ba      	ldr	r2, [r7, #8]
 8003874:	4413      	add	r3, r2
 8003876:	4619      	mov	r1, r3
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f7ff ff90 	bl	800379e <ringBuff_PopChar>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d007      	beq.n	8003894 <ringBuff_PopArray+0x36>
	for (success_number = 0; success_number < len; success_number++) {
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	3301      	adds	r3, #1
 8003888:	617b      	str	r3, [r7, #20]
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	429a      	cmp	r2, r3
 8003890:	dbee      	blt.n	8003870 <ringBuff_PopArray+0x12>
 8003892:	e000      	b.n	8003896 <ringBuff_PopArray+0x38>
			break;
 8003894:	bf00      	nop
		}// stop when ring buffer EMPTY
	}
	return success_number;
 8003896:	697b      	ldr	r3, [r7, #20]
}
 8003898:	4618      	mov	r0, r3
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <ringBuff_DistanceOf>:
 *  cmp_char	: compare character
 *
 *  returns:	: distance from 'tail' to 'cmp_char'
 *  			  -1 'cmp_char' could not be found.
 */
int32_t	ringBuff_DistanceOf	(RINGBUFFER_TypeDef *ringbuff, uint8_t cmp_char) {
 80038a0:	b480      	push	{r7}
 80038a2:	b087      	sub	sp, #28
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	460b      	mov	r3, r1
 80038aa:	70fb      	strb	r3, [r7, #3]
	int32_t index;
	int32_t distance = 0;
 80038ac:	2300      	movs	r3, #0
 80038ae:	613b      	str	r3, [r7, #16]

	index = ringbuff->tail;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80038b6:	617b      	str	r3, [r7, #20]
	if (ringbuff->isFull_Flag) {
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d036      	beq.n	8003930 <ringBuff_DistanceOf+0x90>
		for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 80038c2:	2300      	movs	r3, #0
 80038c4:	60fb      	str	r3, [r7, #12]
 80038c6:	e018      	b.n	80038fa <ringBuff_DistanceOf+0x5a>
				if ( cmp_char == ringbuff->Array[index]) {
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	4413      	add	r3, r2
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	78fa      	ldrb	r2, [r7, #3]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d101      	bne.n	80038da <ringBuff_DistanceOf+0x3a>
					return distance;
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	e037      	b.n	800394a <ringBuff_DistanceOf+0xaa>
				}
				distance++;
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	3301      	adds	r3, #1
 80038de:	613b      	str	r3, [r7, #16]
		for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	3301      	adds	r3, #1
 80038e4:	60fb      	str	r3, [r7, #12]
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	3301      	adds	r3, #1
 80038ea:	425a      	negs	r2, r3
 80038ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038f0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80038f4:	bf58      	it	pl
 80038f6:	4253      	negpl	r3, r2
 80038f8:	617b      	str	r3, [r7, #20]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003900:	dbe2      	blt.n	80038c8 <ringBuff_DistanceOf+0x28>
 8003902:	e020      	b.n	8003946 <ringBuff_DistanceOf+0xa6>
			}

	} else {
		for ( ; (index != ringbuff->head) || !ringbuff->isEmpty_Flag; index = (index + 1) % RINGBUFFER_SIZE) {
				if ( cmp_char == ringbuff->Array[index]) {
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	4413      	add	r3, r2
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	78fa      	ldrb	r2, [r7, #3]
 800390e:	429a      	cmp	r2, r3
 8003910:	d101      	bne.n	8003916 <ringBuff_DistanceOf+0x76>
					return distance;
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	e019      	b.n	800394a <ringBuff_DistanceOf+0xaa>
				}
				distance++;
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	3301      	adds	r3, #1
 800391a:	613b      	str	r3, [r7, #16]
		for ( ; (index != ringbuff->head) || !ringbuff->isEmpty_Flag; index = (index + 1) % RINGBUFFER_SIZE) {
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	3301      	adds	r3, #1
 8003920:	425a      	negs	r2, r3
 8003922:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003926:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800392a:	bf58      	it	pl
 800392c:	4253      	negpl	r3, r2
 800392e:	617b      	str	r3, [r7, #20]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	429a      	cmp	r2, r3
 800393a:	d1e3      	bne.n	8003904 <ringBuff_DistanceOf+0x64>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f893 3409 	ldrb.w	r3, [r3, #1033]	; 0x409
 8003942:	2b00      	cmp	r3, #0
 8003944:	d0de      	beq.n	8003904 <ringBuff_DistanceOf+0x64>
			}
	}
	return -1;
 8003946:	f04f 33ff 	mov.w	r3, #4294967295
}
 800394a:	4618      	mov	r0, r3
 800394c:	371c      	adds	r7, #28
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
	...

08003958 <lowlayer_scanReset>:
uint8_t state_scan;
uint8_t scan_flag;

const int8_t	pulse_scan[4] = {3, 5, 5, 10};

void	lowlayer_scanReset(void) {
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
	pulse_accumulate[0] = 0;
 800395c:	4b10      	ldr	r3, [pc, #64]	; (80039a0 <lowlayer_scanReset+0x48>)
 800395e:	2200      	movs	r2, #0
 8003960:	601a      	str	r2, [r3, #0]
	pulse_accumulate[1] = 0;
 8003962:	4b0f      	ldr	r3, [pc, #60]	; (80039a0 <lowlayer_scanReset+0x48>)
 8003964:	2200      	movs	r2, #0
 8003966:	605a      	str	r2, [r3, #4]
	pulse_accumulate[2] = 0;
 8003968:	4b0d      	ldr	r3, [pc, #52]	; (80039a0 <lowlayer_scanReset+0x48>)
 800396a:	2200      	movs	r2, #0
 800396c:	609a      	str	r2, [r3, #8]
	pulse_accumulate[3] = 0;
 800396e:	4b0c      	ldr	r3, [pc, #48]	; (80039a0 <lowlayer_scanReset+0x48>)
 8003970:	2200      	movs	r2, #0
 8003972:	60da      	str	r2, [r3, #12]

	position_encoder[0] = 0;
 8003974:	4b0b      	ldr	r3, [pc, #44]	; (80039a4 <lowlayer_scanReset+0x4c>)
 8003976:	2200      	movs	r2, #0
 8003978:	601a      	str	r2, [r3, #0]
	position_encoder[1] = 0;
 800397a:	4b0a      	ldr	r3, [pc, #40]	; (80039a4 <lowlayer_scanReset+0x4c>)
 800397c:	2200      	movs	r2, #0
 800397e:	605a      	str	r2, [r3, #4]
	position_encoder[2] = 0;
 8003980:	4b08      	ldr	r3, [pc, #32]	; (80039a4 <lowlayer_scanReset+0x4c>)
 8003982:	2200      	movs	r2, #0
 8003984:	609a      	str	r2, [r3, #8]

	scan_flag = 0;
 8003986:	4b08      	ldr	r3, [pc, #32]	; (80039a8 <lowlayer_scanReset+0x50>)
 8003988:	2200      	movs	r2, #0
 800398a:	701a      	strb	r2, [r3, #0]
	state_scan = 0;
 800398c:	4b07      	ldr	r3, [pc, #28]	; (80039ac <lowlayer_scanReset+0x54>)
 800398e:	2200      	movs	r2, #0
 8003990:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_RESET);
 8003992:	2200      	movs	r2, #0
 8003994:	2108      	movs	r1, #8
 8003996:	4806      	ldr	r0, [pc, #24]	; (80039b0 <lowlayer_scanReset+0x58>)
 8003998:	f008 f8ae 	bl	800baf8 <HAL_GPIO_WritePin>
}
 800399c:	bf00      	nop
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	20005310 	.word	0x20005310
 80039a4:	20005324 	.word	0x20005324
 80039a8:	20005320 	.word	0x20005320
 80039ac:	20005340 	.word	0x20005340
 80039b0:	40020c00 	.word	0x40020c00
 80039b4:	00000000 	.word	0x00000000

080039b8 <lowlayer_scanFlow>:

uint8_t	lowlayer_scanFlow(void) {
 80039b8:	b590      	push	{r4, r7, lr}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
	// Scan limit switch from 3 to 0
	int8_t pulse[4] = {0, 0, 0 ,0};
 80039be:	2300      	movs	r3, #0
 80039c0:	607b      	str	r3, [r7, #4]
	lowlayer_updateLimit();
 80039c2:	f000 fe9d 	bl	8004700 <lowlayer_updateLimit>
	if (state_scan < 4) {
 80039c6:	4b98      	ldr	r3, [pc, #608]	; (8003c28 <lowlayer_scanFlow+0x270>)
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	2b03      	cmp	r3, #3
 80039cc:	d837      	bhi.n	8003a3e <lowlayer_scanFlow+0x86>
		if (limit_switch[3 - state_scan] == 0) {
 80039ce:	4b96      	ldr	r3, [pc, #600]	; (8003c28 <lowlayer_scanFlow+0x270>)
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	f1c3 0303 	rsb	r3, r3, #3
 80039d6:	4a95      	ldr	r2, [pc, #596]	; (8003c2c <lowlayer_scanFlow+0x274>)
 80039d8:	5cd3      	ldrb	r3, [r2, r3]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d121      	bne.n	8003a22 <lowlayer_scanFlow+0x6a>
			pulse[3 - state_scan] = pulse_scan[3 - state_scan];
 80039de:	4b92      	ldr	r3, [pc, #584]	; (8003c28 <lowlayer_scanFlow+0x270>)
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	f1c3 0203 	rsb	r2, r3, #3
 80039e6:	4b90      	ldr	r3, [pc, #576]	; (8003c28 <lowlayer_scanFlow+0x270>)
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	f1c3 0303 	rsb	r3, r3, #3
 80039ee:	4990      	ldr	r1, [pc, #576]	; (8003c30 <lowlayer_scanFlow+0x278>)
 80039f0:	568a      	ldrsb	r2, [r1, r2]
 80039f2:	f107 0108 	add.w	r1, r7, #8
 80039f6:	440b      	add	r3, r1
 80039f8:	f803 2c04 	strb.w	r2, [r3, #-4]
			lowlayer_writePulse(-pulse[0], pulse[1], -pulse[2], pulse[3]);
 80039fc:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	425b      	negs	r3, r3
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	b258      	sxtb	r0, r3
 8003a08:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8003a0c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	425b      	negs	r3, r3
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	b25a      	sxtb	r2, r3
 8003a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a1c:	f000 fcee 	bl	80043fc <lowlayer_writePulse>
 8003a20:	e00b      	b.n	8003a3a <lowlayer_scanFlow+0x82>
		} else {
			state_scan++;
 8003a22:	4b81      	ldr	r3, [pc, #516]	; (8003c28 <lowlayer_scanFlow+0x270>)
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	3301      	adds	r3, #1
 8003a28:	b2da      	uxtb	r2, r3
 8003a2a:	4b7f      	ldr	r3, [pc, #508]	; (8003c28 <lowlayer_scanFlow+0x270>)
 8003a2c:	701a      	strb	r2, [r3, #0]
			lowlayer_writePulse(0, 0, 0, 0);
 8003a2e:	2300      	movs	r3, #0
 8003a30:	2200      	movs	r2, #0
 8003a32:	2100      	movs	r1, #0
 8003a34:	2000      	movs	r0, #0
 8003a36:	f000 fce1 	bl	80043fc <lowlayer_writePulse>
		}

		return FALSE;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	e0d8      	b.n	8003bf0 <lowlayer_scanFlow+0x238>
	} else {
		HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_SET);
 8003a3e:	2201      	movs	r2, #1
 8003a40:	2108      	movs	r1, #8
 8003a42:	487c      	ldr	r0, [pc, #496]	; (8003c34 <lowlayer_scanFlow+0x27c>)
 8003a44:	f008 f858 	bl	800baf8 <HAL_GPIO_WritePin>
		lowlayer_updateCapture();
 8003a48:	f000 fe3e 	bl	80046c8 <lowlayer_updateCapture>
		lowlayer_writePulse(0, 0, 0, 0);
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	2200      	movs	r2, #0
 8003a50:	2100      	movs	r1, #0
 8003a52:	2000      	movs	r0, #0
 8003a54:	f000 fcd2 	bl	80043fc <lowlayer_writePulse>
		scan_flag = 1;
 8003a58:	4b77      	ldr	r3, [pc, #476]	; (8003c38 <lowlayer_scanFlow+0x280>)
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	701a      	strb	r2, [r3, #0]
		// Update offset
		offset_encoder[0] 	= position_capture[0];
 8003a5e:	4b77      	ldr	r3, [pc, #476]	; (8003c3c <lowlayer_scanFlow+0x284>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a77      	ldr	r2, [pc, #476]	; (8003c40 <lowlayer_scanFlow+0x288>)
 8003a64:	6013      	str	r3, [r2, #0]
		offset_encoder[1] 	= position_capture[1];
 8003a66:	4b75      	ldr	r3, [pc, #468]	; (8003c3c <lowlayer_scanFlow+0x284>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	4a75      	ldr	r2, [pc, #468]	; (8003c40 <lowlayer_scanFlow+0x288>)
 8003a6c:	6053      	str	r3, [r2, #4]
		offset_encoder[2] 	= position_capture[2];
 8003a6e:	4b73      	ldr	r3, [pc, #460]	; (8003c3c <lowlayer_scanFlow+0x284>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	4a73      	ldr	r2, [pc, #460]	; (8003c40 <lowlayer_scanFlow+0x288>)
 8003a74:	6093      	str	r3, [r2, #8]
		offset_stepper		= pulse_accumulate[3];
 8003a76:	4b73      	ldr	r3, [pc, #460]	; (8003c44 <lowlayer_scanFlow+0x28c>)
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	4a73      	ldr	r2, [pc, #460]	; (8003c48 <lowlayer_scanFlow+0x290>)
 8003a7c:	6013      	str	r3, [r2, #0]
		// LOG offset
		LOG_REPORT("offset encoder 0", offset_encoder[0]);
 8003a7e:	4b70      	ldr	r3, [pc, #448]	; (8003c40 <lowlayer_scanFlow+0x288>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	4619      	mov	r1, r3
 8003a86:	4871      	ldr	r0, [pc, #452]	; (8003c4c <lowlayer_scanFlow+0x294>)
 8003a88:	f7fd fe28 	bl	80016dc <LOG_REPORT>
		LOG_REPORT("offset encoder 1", offset_encoder[1]);
 8003a8c:	4b6c      	ldr	r3, [pc, #432]	; (8003c40 <lowlayer_scanFlow+0x288>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	4619      	mov	r1, r3
 8003a94:	486e      	ldr	r0, [pc, #440]	; (8003c50 <lowlayer_scanFlow+0x298>)
 8003a96:	f7fd fe21 	bl	80016dc <LOG_REPORT>
		LOG_REPORT("offset encoder 2", offset_encoder[2]);
 8003a9a:	4b69      	ldr	r3, [pc, #420]	; (8003c40 <lowlayer_scanFlow+0x288>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	486c      	ldr	r0, [pc, #432]	; (8003c54 <lowlayer_scanFlow+0x29c>)
 8003aa4:	f7fd fe1a 	bl	80016dc <LOG_REPORT>
		LOG_REPORT("offset stepper", offset_stepper);
 8003aa8:	4b67      	ldr	r3, [pc, #412]	; (8003c48 <lowlayer_scanFlow+0x290>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	4619      	mov	r1, r3
 8003ab0:	4869      	ldr	r0, [pc, #420]	; (8003c58 <lowlayer_scanFlow+0x2a0>)
 8003ab2:	f7fd fe13 	bl	80016dc <LOG_REPORT>

		offset_setpoint[0]	= HARD_LIM0_NEG
				- DIR_ENCODER_0*offset_encoder[0]*2.0*PI/ENCODER_J0;
 8003ab6:	4b62      	ldr	r3, [pc, #392]	; (8003c40 <lowlayer_scanFlow+0x288>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	ee07 3a90 	vmov	s15, r3
 8003abe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ac2:	ee17 0a90 	vmov	r0, s15
 8003ac6:	f7fc fd3f 	bl	8000548 <__aeabi_f2d>
 8003aca:	4602      	mov	r2, r0
 8003acc:	460b      	mov	r3, r1
 8003ace:	f7fc fbdd 	bl	800028c <__adddf3>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	460c      	mov	r4, r1
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	4621      	mov	r1, r4
 8003ada:	a347      	add	r3, pc, #284	; (adr r3, 8003bf8 <lowlayer_scanFlow+0x240>)
 8003adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae0:	f7fc fd8a 	bl	80005f8 <__aeabi_dmul>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	460c      	mov	r4, r1
 8003ae8:	4618      	mov	r0, r3
 8003aea:	4621      	mov	r1, r4
 8003aec:	a344      	add	r3, pc, #272	; (adr r3, 8003c00 <lowlayer_scanFlow+0x248>)
 8003aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af2:	f7fc feab 	bl	800084c <__aeabi_ddiv>
 8003af6:	4603      	mov	r3, r0
 8003af8:	460c      	mov	r4, r1
 8003afa:	461a      	mov	r2, r3
 8003afc:	4623      	mov	r3, r4
 8003afe:	a142      	add	r1, pc, #264	; (adr r1, 8003c08 <lowlayer_scanFlow+0x250>)
 8003b00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b04:	f7fc fbc0 	bl	8000288 <__aeabi_dsub>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	460c      	mov	r4, r1
		offset_setpoint[0]	= HARD_LIM0_NEG
 8003b0c:	4a53      	ldr	r2, [pc, #332]	; (8003c5c <lowlayer_scanFlow+0x2a4>)
 8003b0e:	e9c2 3400 	strd	r3, r4, [r2]
		offset_setpoint[1]	= HARD_LIM1_POS
				- DIR_ENCODER_1*offset_encoder[1]*2.0*PI/ENCODER_J1;
 8003b12:	4b4b      	ldr	r3, [pc, #300]	; (8003c40 <lowlayer_scanFlow+0x288>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	ee07 3a90 	vmov	s15, r3
 8003b1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b1e:	ee17 0a90 	vmov	r0, s15
 8003b22:	f7fc fd11 	bl	8000548 <__aeabi_f2d>
 8003b26:	4602      	mov	r2, r0
 8003b28:	460b      	mov	r3, r1
 8003b2a:	f7fc fbaf 	bl	800028c <__adddf3>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	460c      	mov	r4, r1
 8003b32:	4618      	mov	r0, r3
 8003b34:	4621      	mov	r1, r4
 8003b36:	a330      	add	r3, pc, #192	; (adr r3, 8003bf8 <lowlayer_scanFlow+0x240>)
 8003b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3c:	f7fc fd5c 	bl	80005f8 <__aeabi_dmul>
 8003b40:	4603      	mov	r3, r0
 8003b42:	460c      	mov	r4, r1
 8003b44:	4618      	mov	r0, r3
 8003b46:	4621      	mov	r1, r4
 8003b48:	f04f 0200 	mov.w	r2, #0
 8003b4c:	4b44      	ldr	r3, [pc, #272]	; (8003c60 <lowlayer_scanFlow+0x2a8>)
 8003b4e:	f7fc fe7d 	bl	800084c <__aeabi_ddiv>
 8003b52:	4603      	mov	r3, r0
 8003b54:	460c      	mov	r4, r1
 8003b56:	461a      	mov	r2, r3
 8003b58:	4623      	mov	r3, r4
 8003b5a:	a12d      	add	r1, pc, #180	; (adr r1, 8003c10 <lowlayer_scanFlow+0x258>)
 8003b5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b60:	f7fc fb92 	bl	8000288 <__aeabi_dsub>
 8003b64:	4603      	mov	r3, r0
 8003b66:	460c      	mov	r4, r1
		offset_setpoint[1]	= HARD_LIM1_POS
 8003b68:	4a3c      	ldr	r2, [pc, #240]	; (8003c5c <lowlayer_scanFlow+0x2a4>)
 8003b6a:	e9c2 3402 	strd	r3, r4, [r2, #8]
		offset_setpoint[2]	= HARD_LIM2_NEG
				- DIR_ENCODER_2*offset_encoder[2]/ENCODER_J2;
 8003b6e:	4b34      	ldr	r3, [pc, #208]	; (8003c40 <lowlayer_scanFlow+0x288>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	ee07 3a90 	vmov	s15, r3
 8003b76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b7a:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8003c64 <lowlayer_scanFlow+0x2ac>
 8003b7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b82:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8003c68 <lowlayer_scanFlow+0x2b0>
 8003b86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003b8a:	ee17 0a90 	vmov	r0, s15
 8003b8e:	f7fc fcdb 	bl	8000548 <__aeabi_f2d>
 8003b92:	4603      	mov	r3, r0
 8003b94:	460c      	mov	r4, r1
		offset_setpoint[2]	= HARD_LIM2_NEG
 8003b96:	4a31      	ldr	r2, [pc, #196]	; (8003c5c <lowlayer_scanFlow+0x2a4>)
 8003b98:	e9c2 3404 	strd	r3, r4, [r2, #16]
		offset_setpoint[3]  = HARD_LIM3_POS
				- offset_stepper*2.0*PI/GEAR_J3;
 8003b9c:	4b2a      	ldr	r3, [pc, #168]	; (8003c48 <lowlayer_scanFlow+0x290>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7fc fcbf 	bl	8000524 <__aeabi_i2d>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	460b      	mov	r3, r1
 8003baa:	f7fc fb6f 	bl	800028c <__adddf3>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	460c      	mov	r4, r1
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	4621      	mov	r1, r4
 8003bb6:	a310      	add	r3, pc, #64	; (adr r3, 8003bf8 <lowlayer_scanFlow+0x240>)
 8003bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bbc:	f7fc fd1c 	bl	80005f8 <__aeabi_dmul>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	460c      	mov	r4, r1
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	4621      	mov	r1, r4
 8003bc8:	a313      	add	r3, pc, #76	; (adr r3, 8003c18 <lowlayer_scanFlow+0x260>)
 8003bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bce:	f7fc fe3d 	bl	800084c <__aeabi_ddiv>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	460c      	mov	r4, r1
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	4623      	mov	r3, r4
 8003bda:	a111      	add	r1, pc, #68	; (adr r1, 8003c20 <lowlayer_scanFlow+0x268>)
 8003bdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003be0:	f7fc fb52 	bl	8000288 <__aeabi_dsub>
 8003be4:	4603      	mov	r3, r0
 8003be6:	460c      	mov	r4, r1
		offset_setpoint[3]  = HARD_LIM3_POS
 8003be8:	4a1c      	ldr	r2, [pc, #112]	; (8003c5c <lowlayer_scanFlow+0x2a4>)
 8003bea:	e9c2 3406 	strd	r3, r4, [r2, #24]

		return TRUE;
 8003bee:	2301      	movs	r3, #1
	}
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd90      	pop	{r4, r7, pc}
 8003bf8:	60000000 	.word	0x60000000
 8003bfc:	400921fb 	.word	0x400921fb
 8003c00:	00000000 	.word	0x00000000
 8003c04:	40f38800 	.word	0x40f38800
 8003c08:	40000000 	.word	0x40000000
 8003c0c:	bff9f17a 	.word	0xbff9f17a
 8003c10:	80000000 	.word	0x80000000
 8003c14:	40039716 	.word	0x40039716
 8003c18:	a0000000 	.word	0xa0000000
 8003c1c:	40d3bca1 	.word	0x40d3bca1
 8003c20:	a0000000 	.word	0xa0000000
 8003c24:	4008330d 	.word	0x4008330d
 8003c28:	20005340 	.word	0x20005340
 8003c2c:	20005330 	.word	0x20005330
 8003c30:	0801b1b8 	.word	0x0801b1b8
 8003c34:	40020c00 	.word	0x40020c00
 8003c38:	20005320 	.word	0x20005320
 8003c3c:	20005334 	.word	0x20005334
 8003c40:	20005368 	.word	0x20005368
 8003c44:	20005310 	.word	0x20005310
 8003c48:	20005344 	.word	0x20005344
 8003c4c:	0801afd8 	.word	0x0801afd8
 8003c50:	0801afec 	.word	0x0801afec
 8003c54:	0801b000 	.word	0x0801b000
 8003c58:	0801b014 	.word	0x0801b014
 8003c5c:	20005348 	.word	0x20005348
 8003c60:	40ff4000 	.word	0x40ff4000
 8003c64:	4426aaab 	.word	0x4426aaab
 8003c68:	400f1aa0 	.word	0x400f1aa0
 8003c6c:	00000000 	.word	0x00000000

08003c70 <lowlayer_goToSoftLimit>:

uint8_t	lowlayer_goToSoftLimit(SCARA_PositionTypeDef *setpoint) {
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
	int8_t pulse[4] = {0, 0, 0 ,0};
 8003c78:	2300      	movs	r3, #0
 8003c7a:	60bb      	str	r3, [r7, #8]
	uint8_t check = 0;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	73fb      	strb	r3, [r7, #15]
	lowlayer_readSetPosition(setpoint);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 f951 	bl	8003f28 <lowlayer_readSetPosition>
	if (setpoint->Theta1 < LIM_MIN_J0) {
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003c8c:	a333      	add	r3, pc, #204	; (adr r3, 8003d5c <lowlayer_goToSoftLimit+0xec>)
 8003c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c92:	f7fc ff23 	bl	8000adc <__aeabi_dcmplt>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d004      	beq.n	8003ca6 <lowlayer_goToSoftLimit+0x36>
		pulse[0] = pulse_scan[0];
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	723b      	strb	r3, [r7, #8]
		check++;
 8003ca0:	7bfb      	ldrb	r3, [r7, #15]
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta2 > LIM_MAX_J1) {
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8003cac:	a32d      	add	r3, pc, #180	; (adr r3, 8003d64 <lowlayer_goToSoftLimit+0xf4>)
 8003cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb2:	f7fc ff31 	bl	8000b18 <__aeabi_dcmpgt>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d004      	beq.n	8003cc6 <lowlayer_goToSoftLimit+0x56>
		pulse[1] = pulse_scan[1];
 8003cbc:	2305      	movs	r3, #5
 8003cbe:	727b      	strb	r3, [r7, #9]
		check++;
 8003cc0:	7bfb      	ldrb	r3, [r7, #15]
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->D3 < LIM_MIN_J2) {
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8003ccc:	f04f 0200 	mov.w	r2, #0
 8003cd0:	4b21      	ldr	r3, [pc, #132]	; (8003d58 <lowlayer_goToSoftLimit+0xe8>)
 8003cd2:	f7fc ff03 	bl	8000adc <__aeabi_dcmplt>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d004      	beq.n	8003ce6 <lowlayer_goToSoftLimit+0x76>
		pulse[2] = pulse_scan[2];
 8003cdc:	2305      	movs	r3, #5
 8003cde:	72bb      	strb	r3, [r7, #10]
		check++;
 8003ce0:	7bfb      	ldrb	r3, [r7, #15]
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta4 > LIM_MAX_J3) {
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8003cec:	a318      	add	r3, pc, #96	; (adr r3, 8003d50 <lowlayer_goToSoftLimit+0xe0>)
 8003cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf2:	f7fc ff11 	bl	8000b18 <__aeabi_dcmpgt>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d004      	beq.n	8003d06 <lowlayer_goToSoftLimit+0x96>
		pulse[3] = pulse_scan[3];
 8003cfc:	230a      	movs	r3, #10
 8003cfe:	72fb      	strb	r3, [r7, #11]
		check++;
 8003d00:	7bfb      	ldrb	r3, [r7, #15]
 8003d02:	3301      	adds	r3, #1
 8003d04:	73fb      	strb	r3, [r7, #15]
	}

	if (check > 0) {
 8003d06:	7bfb      	ldrb	r3, [r7, #15]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d013      	beq.n	8003d34 <lowlayer_goToSoftLimit+0xc4>
		lowlayer_writePulse(pulse[0], -pulse[1], pulse[2], -pulse[3]);
 8003d0c:	f997 0008 	ldrsb.w	r0, [r7, #8]
 8003d10:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	425b      	negs	r3, r3
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	b259      	sxtb	r1, r3
 8003d1c:	f997 200a 	ldrsb.w	r2, [r7, #10]
 8003d20:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	425b      	negs	r3, r3
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	b25b      	sxtb	r3, r3
 8003d2c:	f000 fb66 	bl	80043fc <lowlayer_writePulse>
		return FALSE;
 8003d30:	2300      	movs	r3, #0
 8003d32:	e006      	b.n	8003d42 <lowlayer_goToSoftLimit+0xd2>
	} else {
		lowlayer_writePulse(0, 0, 0, 0);
 8003d34:	2300      	movs	r3, #0
 8003d36:	2200      	movs	r2, #0
 8003d38:	2100      	movs	r1, #0
 8003d3a:	2000      	movs	r0, #0
 8003d3c:	f000 fb5e 	bl	80043fc <lowlayer_writePulse>
		return TRUE;
 8003d40:	2301      	movs	r3, #1
	}
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	f3af 8000 	nop.w
 8003d50:	daaaaaab 	.word	0xdaaaaaab
 8003d54:	4007bc89 	.word	0x4007bc89
 8003d58:	3ff00000 	.word	0x3ff00000
 8003d5c:	daaaaaab 	.word	0xdaaaaaab
 8003d60:	bff7bc89 	.word	0xbff7bc89
 8003d64:	88000000 	.word	0x88000000
 8003d68:	4002d97c 	.word	0x4002d97c
 8003d6c:	00000000 	.word	0x00000000

08003d70 <lowlayer_readTruePosition>:

void	lowlayer_readTruePosition(SCARA_PositionTypeDef *true) {
 8003d70:	b590      	push	{r4, r7, lr}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
	lowlayer_updateEncoder();
 8003d78:	f000 fc8a 	bl	8004690 <lowlayer_updateEncoder>
	true->Theta1 = HARD_LIM0_NEG
			+ DIR_ENCODER_0*(position_encoder[0] - offset_encoder[0])*2.0*PI/ENCODER_J0; // Servo Motor
 8003d7c:	4b62      	ldr	r3, [pc, #392]	; (8003f08 <lowlayer_readTruePosition+0x198>)
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	4b62      	ldr	r3, [pc, #392]	; (8003f0c <lowlayer_readTruePosition+0x19c>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	ee07 3a90 	vmov	s15, r3
 8003d8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d8e:	ee17 0a90 	vmov	r0, s15
 8003d92:	f7fc fbd9 	bl	8000548 <__aeabi_f2d>
 8003d96:	4602      	mov	r2, r0
 8003d98:	460b      	mov	r3, r1
 8003d9a:	f7fc fa77 	bl	800028c <__adddf3>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	460c      	mov	r4, r1
 8003da2:	4618      	mov	r0, r3
 8003da4:	4621      	mov	r1, r4
 8003da6:	a34c      	add	r3, pc, #304	; (adr r3, 8003ed8 <lowlayer_readTruePosition+0x168>)
 8003da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dac:	f7fc fc24 	bl	80005f8 <__aeabi_dmul>
 8003db0:	4603      	mov	r3, r0
 8003db2:	460c      	mov	r4, r1
 8003db4:	4618      	mov	r0, r3
 8003db6:	4621      	mov	r1, r4
 8003db8:	a349      	add	r3, pc, #292	; (adr r3, 8003ee0 <lowlayer_readTruePosition+0x170>)
 8003dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dbe:	f7fc fd45 	bl	800084c <__aeabi_ddiv>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	460c      	mov	r4, r1
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	4621      	mov	r1, r4
 8003dca:	a347      	add	r3, pc, #284	; (adr r3, 8003ee8 <lowlayer_readTruePosition+0x178>)
 8003dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd0:	f7fc fa5a 	bl	8000288 <__aeabi_dsub>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	460c      	mov	r4, r1
	true->Theta1 = HARD_LIM0_NEG
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	true->Theta2 = HARD_LIM1_POS
			+ DIR_ENCODER_1*(position_encoder[1] - offset_encoder[1])*2.0*PI/ENCODER_J1; // Servo Motor
 8003dde:	4b4a      	ldr	r3, [pc, #296]	; (8003f08 <lowlayer_readTruePosition+0x198>)
 8003de0:	685a      	ldr	r2, [r3, #4]
 8003de2:	4b4a      	ldr	r3, [pc, #296]	; (8003f0c <lowlayer_readTruePosition+0x19c>)
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	ee07 3a90 	vmov	s15, r3
 8003dec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003df0:	ee17 0a90 	vmov	r0, s15
 8003df4:	f7fc fba8 	bl	8000548 <__aeabi_f2d>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	f7fc fa46 	bl	800028c <__adddf3>
 8003e00:	4603      	mov	r3, r0
 8003e02:	460c      	mov	r4, r1
 8003e04:	4618      	mov	r0, r3
 8003e06:	4621      	mov	r1, r4
 8003e08:	a333      	add	r3, pc, #204	; (adr r3, 8003ed8 <lowlayer_readTruePosition+0x168>)
 8003e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e0e:	f7fc fbf3 	bl	80005f8 <__aeabi_dmul>
 8003e12:	4603      	mov	r3, r0
 8003e14:	460c      	mov	r4, r1
 8003e16:	4618      	mov	r0, r3
 8003e18:	4621      	mov	r1, r4
 8003e1a:	f04f 0200 	mov.w	r2, #0
 8003e1e:	4b3c      	ldr	r3, [pc, #240]	; (8003f10 <lowlayer_readTruePosition+0x1a0>)
 8003e20:	f7fc fd14 	bl	800084c <__aeabi_ddiv>
 8003e24:	4603      	mov	r3, r0
 8003e26:	460c      	mov	r4, r1
 8003e28:	4618      	mov	r0, r3
 8003e2a:	4621      	mov	r1, r4
 8003e2c:	a330      	add	r3, pc, #192	; (adr r3, 8003ef0 <lowlayer_readTruePosition+0x180>)
 8003e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e32:	f7fc fa2b 	bl	800028c <__adddf3>
 8003e36:	4603      	mov	r3, r0
 8003e38:	460c      	mov	r4, r1
	true->Theta2 = HARD_LIM1_POS
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70

	true->D3	 = HARD_LIM2_NEG
			+ DIR_ENCODER_2*(position_encoder[2] - offset_encoder[2])/ENCODER_J2; // Servo Motor
 8003e40:	4b31      	ldr	r3, [pc, #196]	; (8003f08 <lowlayer_readTruePosition+0x198>)
 8003e42:	689a      	ldr	r2, [r3, #8]
 8003e44:	4b31      	ldr	r3, [pc, #196]	; (8003f0c <lowlayer_readTruePosition+0x19c>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	ee07 3a90 	vmov	s15, r3
 8003e4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e52:	eeb1 7a67 	vneg.f32	s14, s15
 8003e56:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8003f14 <lowlayer_readTruePosition+0x1a4>
 8003e5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e5e:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8003f18 <lowlayer_readTruePosition+0x1a8>
 8003e62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003e66:	ee17 0a90 	vmov	r0, s15
 8003e6a:	f7fc fb6d 	bl	8000548 <__aeabi_f2d>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	460c      	mov	r4, r1
	true->D3	 = HARD_LIM2_NEG
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78

	true->Theta4 = HARD_LIM3_POS
			+ (pulse_accumulate[3] - offset_stepper)*2.0*PI/GEAR_J3; // Stepper Motor
 8003e78:	4b28      	ldr	r3, [pc, #160]	; (8003f1c <lowlayer_readTruePosition+0x1ac>)
 8003e7a:	68da      	ldr	r2, [r3, #12]
 8003e7c:	4b28      	ldr	r3, [pc, #160]	; (8003f20 <lowlayer_readTruePosition+0x1b0>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7fc fb4e 	bl	8000524 <__aeabi_i2d>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	f7fc f9fe 	bl	800028c <__adddf3>
 8003e90:	4603      	mov	r3, r0
 8003e92:	460c      	mov	r4, r1
 8003e94:	4618      	mov	r0, r3
 8003e96:	4621      	mov	r1, r4
 8003e98:	a30f      	add	r3, pc, #60	; (adr r3, 8003ed8 <lowlayer_readTruePosition+0x168>)
 8003e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9e:	f7fc fbab 	bl	80005f8 <__aeabi_dmul>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	460c      	mov	r4, r1
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	4621      	mov	r1, r4
 8003eaa:	a313      	add	r3, pc, #76	; (adr r3, 8003ef8 <lowlayer_readTruePosition+0x188>)
 8003eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb0:	f7fc fccc 	bl	800084c <__aeabi_ddiv>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	460c      	mov	r4, r1
 8003eb8:	4618      	mov	r0, r3
 8003eba:	4621      	mov	r1, r4
 8003ebc:	a310      	add	r3, pc, #64	; (adr r3, 8003f00 <lowlayer_readTruePosition+0x190>)
 8003ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec2:	f7fc f9e3 	bl	800028c <__adddf3>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	460c      	mov	r4, r1
	true->Theta4 = HARD_LIM3_POS
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
}
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd90      	pop	{r4, r7, pc}
 8003ed8:	60000000 	.word	0x60000000
 8003edc:	400921fb 	.word	0x400921fb
 8003ee0:	00000000 	.word	0x00000000
 8003ee4:	40f38800 	.word	0x40f38800
 8003ee8:	40000000 	.word	0x40000000
 8003eec:	3ff9f17a 	.word	0x3ff9f17a
 8003ef0:	80000000 	.word	0x80000000
 8003ef4:	40039716 	.word	0x40039716
 8003ef8:	a0000000 	.word	0xa0000000
 8003efc:	40d3bca1 	.word	0x40d3bca1
 8003f00:	a0000000 	.word	0xa0000000
 8003f04:	4008330d 	.word	0x4008330d
 8003f08:	20005324 	.word	0x20005324
 8003f0c:	20005368 	.word	0x20005368
 8003f10:	40ff4000 	.word	0x40ff4000
 8003f14:	4426aaab 	.word	0x4426aaab
 8003f18:	400f1aa0 	.word	0x400f1aa0
 8003f1c:	20005310 	.word	0x20005310
 8003f20:	20005344 	.word	0x20005344
 8003f24:	00000000 	.word	0x00000000

08003f28 <lowlayer_readSetPosition>:

void	lowlayer_readSetPosition(SCARA_PositionTypeDef *setpoint) {
 8003f28:	b5b0      	push	{r4, r5, r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
	setpoint->Theta1 = offset_setpoint[0] + pulse_accumulate[0]*2.0*PI/GEAR_J0;
 8003f30:	4b53      	ldr	r3, [pc, #332]	; (8004080 <lowlayer_readSetPosition+0x158>)
 8003f32:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003f36:	4b53      	ldr	r3, [pc, #332]	; (8004084 <lowlayer_readSetPosition+0x15c>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7fc faf2 	bl	8000524 <__aeabi_i2d>
 8003f40:	4602      	mov	r2, r0
 8003f42:	460b      	mov	r3, r1
 8003f44:	f7fc f9a2 	bl	800028c <__adddf3>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	4610      	mov	r0, r2
 8003f4e:	4619      	mov	r1, r3
 8003f50:	a345      	add	r3, pc, #276	; (adr r3, 8004068 <lowlayer_readSetPosition+0x140>)
 8003f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f56:	f7fc fb4f 	bl	80005f8 <__aeabi_dmul>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	4610      	mov	r0, r2
 8003f60:	4619      	mov	r1, r3
 8003f62:	a343      	add	r3, pc, #268	; (adr r3, 8004070 <lowlayer_readSetPosition+0x148>)
 8003f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f68:	f7fc fc70 	bl	800084c <__aeabi_ddiv>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	460b      	mov	r3, r1
 8003f70:	4620      	mov	r0, r4
 8003f72:	4629      	mov	r1, r5
 8003f74:	f7fc f98a 	bl	800028c <__adddf3>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	460c      	mov	r4, r1
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	setpoint->Theta2 = offset_setpoint[1] + pulse_accumulate[1]*2.0*PI/GEAR_J1;
 8003f82:	4b3f      	ldr	r3, [pc, #252]	; (8004080 <lowlayer_readSetPosition+0x158>)
 8003f84:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8003f88:	4b3e      	ldr	r3, [pc, #248]	; (8004084 <lowlayer_readSetPosition+0x15c>)
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7fc fac9 	bl	8000524 <__aeabi_i2d>
 8003f92:	4602      	mov	r2, r0
 8003f94:	460b      	mov	r3, r1
 8003f96:	f7fc f979 	bl	800028c <__adddf3>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	4610      	mov	r0, r2
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	a331      	add	r3, pc, #196	; (adr r3, 8004068 <lowlayer_readSetPosition+0x140>)
 8003fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa8:	f7fc fb26 	bl	80005f8 <__aeabi_dmul>
 8003fac:	4602      	mov	r2, r0
 8003fae:	460b      	mov	r3, r1
 8003fb0:	4610      	mov	r0, r2
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	f04f 0200 	mov.w	r2, #0
 8003fb8:	4b33      	ldr	r3, [pc, #204]	; (8004088 <lowlayer_readSetPosition+0x160>)
 8003fba:	f7fc fc47 	bl	800084c <__aeabi_ddiv>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	4620      	mov	r0, r4
 8003fc4:	4629      	mov	r1, r5
 8003fc6:	f7fc f961 	bl	800028c <__adddf3>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	460c      	mov	r4, r1
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70

	setpoint->D3	 = offset_setpoint[2] + pulse_accumulate[2]/GEAR_J2;
 8003fd4:	4b2a      	ldr	r3, [pc, #168]	; (8004080 <lowlayer_readSetPosition+0x158>)
 8003fd6:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8003fda:	4b2a      	ldr	r3, [pc, #168]	; (8004084 <lowlayer_readSetPosition+0x15c>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	ee07 3a90 	vmov	s15, r3
 8003fe2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fe6:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800408c <lowlayer_readSetPosition+0x164>
 8003fea:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003fee:	ee16 0a90 	vmov	r0, s13
 8003ff2:	f7fc faa9 	bl	8000548 <__aeabi_f2d>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	4620      	mov	r0, r4
 8003ffc:	4629      	mov	r1, r5
 8003ffe:	f7fc f945 	bl	800028c <__adddf3>
 8004002:	4603      	mov	r3, r0
 8004004:	460c      	mov	r4, r1
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78

	setpoint->Theta4 = offset_setpoint[3] + pulse_accumulate[3]*2.0*PI/GEAR_J3;
 800400c:	4b1c      	ldr	r3, [pc, #112]	; (8004080 <lowlayer_readSetPosition+0x158>)
 800400e:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004012:	4b1c      	ldr	r3, [pc, #112]	; (8004084 <lowlayer_readSetPosition+0x15c>)
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	4618      	mov	r0, r3
 8004018:	f7fc fa84 	bl	8000524 <__aeabi_i2d>
 800401c:	4602      	mov	r2, r0
 800401e:	460b      	mov	r3, r1
 8004020:	f7fc f934 	bl	800028c <__adddf3>
 8004024:	4602      	mov	r2, r0
 8004026:	460b      	mov	r3, r1
 8004028:	4610      	mov	r0, r2
 800402a:	4619      	mov	r1, r3
 800402c:	a30e      	add	r3, pc, #56	; (adr r3, 8004068 <lowlayer_readSetPosition+0x140>)
 800402e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004032:	f7fc fae1 	bl	80005f8 <__aeabi_dmul>
 8004036:	4602      	mov	r2, r0
 8004038:	460b      	mov	r3, r1
 800403a:	4610      	mov	r0, r2
 800403c:	4619      	mov	r1, r3
 800403e:	a30e      	add	r3, pc, #56	; (adr r3, 8004078 <lowlayer_readSetPosition+0x150>)
 8004040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004044:	f7fc fc02 	bl	800084c <__aeabi_ddiv>
 8004048:	4602      	mov	r2, r0
 800404a:	460b      	mov	r3, r1
 800404c:	4620      	mov	r0, r4
 800404e:	4629      	mov	r1, r5
 8004050:	f7fc f91c 	bl	800028c <__adddf3>
 8004054:	4603      	mov	r3, r0
 8004056:	460c      	mov	r4, r1
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
}
 800405e:	bf00      	nop
 8004060:	3708      	adds	r7, #8
 8004062:	46bd      	mov	sp, r7
 8004064:	bdb0      	pop	{r4, r5, r7, pc}
 8004066:	bf00      	nop
 8004068:	60000000 	.word	0x60000000
 800406c:	400921fb 	.word	0x400921fb
 8004070:	00000000 	.word	0x00000000
 8004074:	40d38800 	.word	0x40d38800
 8004078:	a0000000 	.word	0xa0000000
 800407c:	40d3bca1 	.word	0x40d3bca1
 8004080:	20005348 	.word	0x20005348
 8004084:	20005310 	.word	0x20005310
 8004088:	40df4000 	.word	0x40df4000
 800408c:	42c80000 	.word	0x42c80000

08004090 <lowlayer_computeAndWritePulse>:

uint8_t	lowlayer_computeAndWritePulse(SCARA_PositionTypeDef current, SCARA_PositionTypeDef next) {
 8004090:	b084      	sub	sp, #16
 8004092:	b590      	push	{r4, r7, lr}
 8004094:	b093      	sub	sp, #76	; 0x4c
 8004096:	af00      	add	r7, sp, #0
 8004098:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800409c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t	current_var0, current_var1, current_var2, current_var3;
	uint32_t	next_var0, next_var1, next_var2, next_var3;
	int64_t		delta_var0, delta_var1, delta_var2, delta_var3;
	uint8_t 	result;

	current_var0	= round((current.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 80040a0:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80040a4:	a3cc      	add	r3, pc, #816	; (adr r3, 80043d8 <lowlayer_computeAndWritePulse+0x348>)
 80040a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040aa:	f7fc f8ef 	bl	800028c <__adddf3>
 80040ae:	4603      	mov	r3, r0
 80040b0:	460c      	mov	r4, r1
 80040b2:	4618      	mov	r0, r3
 80040b4:	4621      	mov	r1, r4
 80040b6:	a3ca      	add	r3, pc, #808	; (adr r3, 80043e0 <lowlayer_computeAndWritePulse+0x350>)
 80040b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040bc:	f7fc fa9c 	bl	80005f8 <__aeabi_dmul>
 80040c0:	4603      	mov	r3, r0
 80040c2:	460c      	mov	r4, r1
 80040c4:	4618      	mov	r0, r3
 80040c6:	4621      	mov	r1, r4
 80040c8:	a3bd      	add	r3, pc, #756	; (adr r3, 80043c0 <lowlayer_computeAndWritePulse+0x330>)
 80040ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ce:	f7fc fbbd 	bl	800084c <__aeabi_ddiv>
 80040d2:	4603      	mov	r3, r0
 80040d4:	460c      	mov	r4, r1
 80040d6:	ec44 3b17 	vmov	d7, r3, r4
 80040da:	eeb0 0a47 	vmov.f32	s0, s14
 80040de:	eef0 0a67 	vmov.f32	s1, s15
 80040e2:	f015 f985 	bl	80193f0 <round>
 80040e6:	ec54 3b10 	vmov	r3, r4, d0
 80040ea:	4618      	mov	r0, r3
 80040ec:	4621      	mov	r1, r4
 80040ee:	f7fc fd5b 	bl	8000ba8 <__aeabi_d2uiz>
 80040f2:	4603      	mov	r3, r0
 80040f4:	647b      	str	r3, [r7, #68]	; 0x44
	current_var1 	= round((current.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 80040f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80040fa:	a3bb      	add	r3, pc, #748	; (adr r3, 80043e8 <lowlayer_computeAndWritePulse+0x358>)
 80040fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004100:	f7fc f8c4 	bl	800028c <__adddf3>
 8004104:	4603      	mov	r3, r0
 8004106:	460c      	mov	r4, r1
 8004108:	4618      	mov	r0, r3
 800410a:	4621      	mov	r1, r4
 800410c:	f04f 0200 	mov.w	r2, #0
 8004110:	4bb7      	ldr	r3, [pc, #732]	; (80043f0 <lowlayer_computeAndWritePulse+0x360>)
 8004112:	f7fc fa71 	bl	80005f8 <__aeabi_dmul>
 8004116:	4603      	mov	r3, r0
 8004118:	460c      	mov	r4, r1
 800411a:	4618      	mov	r0, r3
 800411c:	4621      	mov	r1, r4
 800411e:	a3a8      	add	r3, pc, #672	; (adr r3, 80043c0 <lowlayer_computeAndWritePulse+0x330>)
 8004120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004124:	f7fc fb92 	bl	800084c <__aeabi_ddiv>
 8004128:	4603      	mov	r3, r0
 800412a:	460c      	mov	r4, r1
 800412c:	ec44 3b17 	vmov	d7, r3, r4
 8004130:	eeb0 0a47 	vmov.f32	s0, s14
 8004134:	eef0 0a67 	vmov.f32	s1, s15
 8004138:	f015 f95a 	bl	80193f0 <round>
 800413c:	ec54 3b10 	vmov	r3, r4, d0
 8004140:	4618      	mov	r0, r3
 8004142:	4621      	mov	r1, r4
 8004144:	f7fc fd30 	bl	8000ba8 <__aeabi_d2uiz>
 8004148:	4603      	mov	r3, r0
 800414a:	643b      	str	r3, [r7, #64]	; 0x40
	current_var2 	= round((current.D3 - LIM_MIN_J2) * GEAR_J2);
 800414c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004150:	f04f 0200 	mov.w	r2, #0
 8004154:	4ba7      	ldr	r3, [pc, #668]	; (80043f4 <lowlayer_computeAndWritePulse+0x364>)
 8004156:	f7fc f897 	bl	8000288 <__aeabi_dsub>
 800415a:	4603      	mov	r3, r0
 800415c:	460c      	mov	r4, r1
 800415e:	4618      	mov	r0, r3
 8004160:	4621      	mov	r1, r4
 8004162:	f04f 0200 	mov.w	r2, #0
 8004166:	4ba4      	ldr	r3, [pc, #656]	; (80043f8 <lowlayer_computeAndWritePulse+0x368>)
 8004168:	f7fc fa46 	bl	80005f8 <__aeabi_dmul>
 800416c:	4603      	mov	r3, r0
 800416e:	460c      	mov	r4, r1
 8004170:	ec44 3b17 	vmov	d7, r3, r4
 8004174:	eeb0 0a47 	vmov.f32	s0, s14
 8004178:	eef0 0a67 	vmov.f32	s1, s15
 800417c:	f015 f938 	bl	80193f0 <round>
 8004180:	ec54 3b10 	vmov	r3, r4, d0
 8004184:	4618      	mov	r0, r3
 8004186:	4621      	mov	r1, r4
 8004188:	f7fc fd0e 	bl	8000ba8 <__aeabi_d2uiz>
 800418c:	4603      	mov	r3, r0
 800418e:	63fb      	str	r3, [r7, #60]	; 0x3c
	current_var3 	= round((current.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 8004190:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8004194:	a38c      	add	r3, pc, #560	; (adr r3, 80043c8 <lowlayer_computeAndWritePulse+0x338>)
 8004196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419a:	f7fc f877 	bl	800028c <__adddf3>
 800419e:	4603      	mov	r3, r0
 80041a0:	460c      	mov	r4, r1
 80041a2:	4618      	mov	r0, r3
 80041a4:	4621      	mov	r1, r4
 80041a6:	a38a      	add	r3, pc, #552	; (adr r3, 80043d0 <lowlayer_computeAndWritePulse+0x340>)
 80041a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ac:	f7fc fa24 	bl	80005f8 <__aeabi_dmul>
 80041b0:	4603      	mov	r3, r0
 80041b2:	460c      	mov	r4, r1
 80041b4:	4618      	mov	r0, r3
 80041b6:	4621      	mov	r1, r4
 80041b8:	a381      	add	r3, pc, #516	; (adr r3, 80043c0 <lowlayer_computeAndWritePulse+0x330>)
 80041ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041be:	f7fc fb45 	bl	800084c <__aeabi_ddiv>
 80041c2:	4603      	mov	r3, r0
 80041c4:	460c      	mov	r4, r1
 80041c6:	ec44 3b17 	vmov	d7, r3, r4
 80041ca:	eeb0 0a47 	vmov.f32	s0, s14
 80041ce:	eef0 0a67 	vmov.f32	s1, s15
 80041d2:	f015 f90d 	bl	80193f0 <round>
 80041d6:	ec54 3b10 	vmov	r3, r4, d0
 80041da:	4618      	mov	r0, r3
 80041dc:	4621      	mov	r1, r4
 80041de:	f7fc fce3 	bl	8000ba8 <__aeabi_d2uiz>
 80041e2:	4603      	mov	r3, r0
 80041e4:	63bb      	str	r3, [r7, #56]	; 0x38
	next_var0 		= round((next.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 80041e6:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 80041ea:	a37b      	add	r3, pc, #492	; (adr r3, 80043d8 <lowlayer_computeAndWritePulse+0x348>)
 80041ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f0:	f7fc f84c 	bl	800028c <__adddf3>
 80041f4:	4603      	mov	r3, r0
 80041f6:	460c      	mov	r4, r1
 80041f8:	4618      	mov	r0, r3
 80041fa:	4621      	mov	r1, r4
 80041fc:	a378      	add	r3, pc, #480	; (adr r3, 80043e0 <lowlayer_computeAndWritePulse+0x350>)
 80041fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004202:	f7fc f9f9 	bl	80005f8 <__aeabi_dmul>
 8004206:	4603      	mov	r3, r0
 8004208:	460c      	mov	r4, r1
 800420a:	4618      	mov	r0, r3
 800420c:	4621      	mov	r1, r4
 800420e:	a36c      	add	r3, pc, #432	; (adr r3, 80043c0 <lowlayer_computeAndWritePulse+0x330>)
 8004210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004214:	f7fc fb1a 	bl	800084c <__aeabi_ddiv>
 8004218:	4603      	mov	r3, r0
 800421a:	460c      	mov	r4, r1
 800421c:	ec44 3b17 	vmov	d7, r3, r4
 8004220:	eeb0 0a47 	vmov.f32	s0, s14
 8004224:	eef0 0a67 	vmov.f32	s1, s15
 8004228:	f015 f8e2 	bl	80193f0 <round>
 800422c:	ec54 3b10 	vmov	r3, r4, d0
 8004230:	4618      	mov	r0, r3
 8004232:	4621      	mov	r1, r4
 8004234:	f7fc fcb8 	bl	8000ba8 <__aeabi_d2uiz>
 8004238:	4603      	mov	r3, r0
 800423a:	637b      	str	r3, [r7, #52]	; 0x34
	next_var1 		= round((next.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 800423c:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8004240:	a369      	add	r3, pc, #420	; (adr r3, 80043e8 <lowlayer_computeAndWritePulse+0x358>)
 8004242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004246:	f7fc f821 	bl	800028c <__adddf3>
 800424a:	4603      	mov	r3, r0
 800424c:	460c      	mov	r4, r1
 800424e:	4618      	mov	r0, r3
 8004250:	4621      	mov	r1, r4
 8004252:	f04f 0200 	mov.w	r2, #0
 8004256:	4b66      	ldr	r3, [pc, #408]	; (80043f0 <lowlayer_computeAndWritePulse+0x360>)
 8004258:	f7fc f9ce 	bl	80005f8 <__aeabi_dmul>
 800425c:	4603      	mov	r3, r0
 800425e:	460c      	mov	r4, r1
 8004260:	4618      	mov	r0, r3
 8004262:	4621      	mov	r1, r4
 8004264:	a356      	add	r3, pc, #344	; (adr r3, 80043c0 <lowlayer_computeAndWritePulse+0x330>)
 8004266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426a:	f7fc faef 	bl	800084c <__aeabi_ddiv>
 800426e:	4603      	mov	r3, r0
 8004270:	460c      	mov	r4, r1
 8004272:	ec44 3b17 	vmov	d7, r3, r4
 8004276:	eeb0 0a47 	vmov.f32	s0, s14
 800427a:	eef0 0a67 	vmov.f32	s1, s15
 800427e:	f015 f8b7 	bl	80193f0 <round>
 8004282:	ec54 3b10 	vmov	r3, r4, d0
 8004286:	4618      	mov	r0, r3
 8004288:	4621      	mov	r1, r4
 800428a:	f7fc fc8d 	bl	8000ba8 <__aeabi_d2uiz>
 800428e:	4603      	mov	r3, r0
 8004290:	633b      	str	r3, [r7, #48]	; 0x30
	next_var2 		= round((next.D3 - LIM_MIN_J2) * GEAR_J2);
 8004292:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8004296:	f04f 0200 	mov.w	r2, #0
 800429a:	4b56      	ldr	r3, [pc, #344]	; (80043f4 <lowlayer_computeAndWritePulse+0x364>)
 800429c:	f7fb fff4 	bl	8000288 <__aeabi_dsub>
 80042a0:	4603      	mov	r3, r0
 80042a2:	460c      	mov	r4, r1
 80042a4:	4618      	mov	r0, r3
 80042a6:	4621      	mov	r1, r4
 80042a8:	f04f 0200 	mov.w	r2, #0
 80042ac:	4b52      	ldr	r3, [pc, #328]	; (80043f8 <lowlayer_computeAndWritePulse+0x368>)
 80042ae:	f7fc f9a3 	bl	80005f8 <__aeabi_dmul>
 80042b2:	4603      	mov	r3, r0
 80042b4:	460c      	mov	r4, r1
 80042b6:	ec44 3b17 	vmov	d7, r3, r4
 80042ba:	eeb0 0a47 	vmov.f32	s0, s14
 80042be:	eef0 0a67 	vmov.f32	s1, s15
 80042c2:	f015 f895 	bl	80193f0 <round>
 80042c6:	ec54 3b10 	vmov	r3, r4, d0
 80042ca:	4618      	mov	r0, r3
 80042cc:	4621      	mov	r1, r4
 80042ce:	f7fc fc6b 	bl	8000ba8 <__aeabi_d2uiz>
 80042d2:	4603      	mov	r3, r0
 80042d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	next_var3 		= round((next.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 80042d6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80042da:	a33b      	add	r3, pc, #236	; (adr r3, 80043c8 <lowlayer_computeAndWritePulse+0x338>)
 80042dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e0:	f7fb ffd4 	bl	800028c <__adddf3>
 80042e4:	4603      	mov	r3, r0
 80042e6:	460c      	mov	r4, r1
 80042e8:	4618      	mov	r0, r3
 80042ea:	4621      	mov	r1, r4
 80042ec:	a338      	add	r3, pc, #224	; (adr r3, 80043d0 <lowlayer_computeAndWritePulse+0x340>)
 80042ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f2:	f7fc f981 	bl	80005f8 <__aeabi_dmul>
 80042f6:	4603      	mov	r3, r0
 80042f8:	460c      	mov	r4, r1
 80042fa:	4618      	mov	r0, r3
 80042fc:	4621      	mov	r1, r4
 80042fe:	a330      	add	r3, pc, #192	; (adr r3, 80043c0 <lowlayer_computeAndWritePulse+0x330>)
 8004300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004304:	f7fc faa2 	bl	800084c <__aeabi_ddiv>
 8004308:	4603      	mov	r3, r0
 800430a:	460c      	mov	r4, r1
 800430c:	ec44 3b17 	vmov	d7, r3, r4
 8004310:	eeb0 0a47 	vmov.f32	s0, s14
 8004314:	eef0 0a67 	vmov.f32	s1, s15
 8004318:	f015 f86a 	bl	80193f0 <round>
 800431c:	ec54 3b10 	vmov	r3, r4, d0
 8004320:	4618      	mov	r0, r3
 8004322:	4621      	mov	r1, r4
 8004324:	f7fc fc40 	bl	8000ba8 <__aeabi_d2uiz>
 8004328:	4603      	mov	r3, r0
 800432a:	62bb      	str	r3, [r7, #40]	; 0x28

	delta_var0 = next_var0 - current_var0;
 800432c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800432e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	f04f 0400 	mov.w	r4, #0
 8004336:	e9c7 3408 	strd	r3, r4, [r7, #32]
	delta_var1 = next_var1 - current_var1;
 800433a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800433c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	f04f 0400 	mov.w	r4, #0
 8004344:	e9c7 3406 	strd	r3, r4, [r7, #24]
	delta_var2 = next_var2 - current_var2;
 8004348:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800434a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	f04f 0400 	mov.w	r4, #0
 8004352:	e9c7 3404 	strd	r3, r4, [r7, #16]
	delta_var3 = next_var3 - current_var3;
 8004356:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	f04f 0400 	mov.w	r4, #0
 8004360:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if (abs(delta_var0) > 127
 8004364:	6a3b      	ldr	r3, [r7, #32]
 8004366:	2b00      	cmp	r3, #0
 8004368:	bfb8      	it	lt
 800436a:	425b      	neglt	r3, r3
 800436c:	2b7f      	cmp	r3, #127	; 0x7f
 800436e:	dc11      	bgt.n	8004394 <lowlayer_computeAndWritePulse+0x304>
		|| abs(delta_var1) > 127
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	2b00      	cmp	r3, #0
 8004374:	bfb8      	it	lt
 8004376:	425b      	neglt	r3, r3
 8004378:	2b7f      	cmp	r3, #127	; 0x7f
 800437a:	dc0b      	bgt.n	8004394 <lowlayer_computeAndWritePulse+0x304>
		|| abs(delta_var2) > 127
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	2b00      	cmp	r3, #0
 8004380:	bfb8      	it	lt
 8004382:	425b      	neglt	r3, r3
 8004384:	2b7f      	cmp	r3, #127	; 0x7f
 8004386:	dc05      	bgt.n	8004394 <lowlayer_computeAndWritePulse+0x304>
		|| abs(delta_var3) > 127) {
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	2b00      	cmp	r3, #0
 800438c:	bfb8      	it	lt
 800438e:	425b      	neglt	r3, r3
 8004390:	2b7f      	cmp	r3, #127	; 0x7f
 8004392:	dd01      	ble.n	8004398 <lowlayer_computeAndWritePulse+0x308>
		return FALSE;
 8004394:	2300      	movs	r3, #0
 8004396:	e00c      	b.n	80043b2 <lowlayer_computeAndWritePulse+0x322>
	} // Can't convert to int8_t , over range

	result = lowlayer_writePulse((int8_t)delta_var0,
 8004398:	f997 0020 	ldrsb.w	r0, [r7, #32]
 800439c:	f997 1018 	ldrsb.w	r1, [r7, #24]
 80043a0:	f997 2010 	ldrsb.w	r2, [r7, #16]
 80043a4:	f997 3008 	ldrsb.w	r3, [r7, #8]
 80043a8:	f000 f828 	bl	80043fc <lowlayer_writePulse>
 80043ac:	4603      	mov	r3, r0
 80043ae:	71fb      	strb	r3, [r7, #7]
								 (int8_t)delta_var1,
								 (int8_t)delta_var2,
								 (int8_t)delta_var3);

	return result;
 80043b0:	79fb      	ldrb	r3, [r7, #7]
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	374c      	adds	r7, #76	; 0x4c
 80043b6:	46bd      	mov	sp, r7
 80043b8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80043bc:	b004      	add	sp, #16
 80043be:	4770      	bx	lr
 80043c0:	60000000 	.word	0x60000000
 80043c4:	401921fb 	.word	0x401921fb
 80043c8:	daaaaaab 	.word	0xdaaaaaab
 80043cc:	4007bc89 	.word	0x4007bc89
 80043d0:	a0000000 	.word	0xa0000000
 80043d4:	40d3bca1 	.word	0x40d3bca1
 80043d8:	daaaaaab 	.word	0xdaaaaaab
 80043dc:	3ff7bc89 	.word	0x3ff7bc89
 80043e0:	00000000 	.word	0x00000000
 80043e4:	40d38800 	.word	0x40d38800
 80043e8:	88000000 	.word	0x88000000
 80043ec:	4002d97c 	.word	0x4002d97c
 80043f0:	40df4000 	.word	0x40df4000
 80043f4:	3ff00000 	.word	0x3ff00000
 80043f8:	40590000 	.word	0x40590000

080043fc <lowlayer_writePulse>:


uint8_t	lowlayer_writePulse(int8_t pulse0, int8_t pulse1, int8_t pulse2, int8_t pulse3) {
 80043fc:	b590      	push	{r4, r7, lr}
 80043fe:	b087      	sub	sp, #28
 8004400:	af00      	add	r7, sp, #0
 8004402:	4604      	mov	r4, r0
 8004404:	4608      	mov	r0, r1
 8004406:	4611      	mov	r1, r2
 8004408:	461a      	mov	r2, r3
 800440a:	4623      	mov	r3, r4
 800440c:	71fb      	strb	r3, [r7, #7]
 800440e:	4603      	mov	r3, r0
 8004410:	71bb      	strb	r3, [r7, #6]
 8004412:	460b      	mov	r3, r1
 8004414:	717b      	strb	r3, [r7, #5]
 8004416:	4613      	mov	r3, r2
 8004418:	713b      	strb	r3, [r7, #4]
	uint8_t pulse0_combine, pulse1_combine, pulse2_combine, pulse3_combine;
	uint8_t pulse0_abs, pulse1_abs, pulse2_abs, pulse3_abs;

	// Var 0
	if (pulse0 < 0) {
 800441a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800441e:	2b00      	cmp	r3, #0
 8004420:	da06      	bge.n	8004430 <lowlayer_writePulse+0x34>
		pulse0_abs = -pulse0;
 8004422:	79fb      	ldrb	r3, [r7, #7]
 8004424:	425b      	negs	r3, r3
 8004426:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = -pulse0 | ((!DIR_J0) << 7); // Negative : Clockwise
 8004428:	79fb      	ldrb	r3, [r7, #7]
 800442a:	425b      	negs	r3, r3
 800442c:	75fb      	strb	r3, [r7, #23]
 800442e:	e006      	b.n	800443e <lowlayer_writePulse+0x42>
	} else {
		pulse0_abs = pulse0;
 8004430:	79fb      	ldrb	r3, [r7, #7]
 8004432:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = pulse0 | (DIR_J0 << 7); // Positive : Anti-Clockwise
 8004434:	79fb      	ldrb	r3, [r7, #7]
 8004436:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800443a:	b25b      	sxtb	r3, r3
 800443c:	75fb      	strb	r3, [r7, #23]
	}
	// Var 1
	if (pulse1 < 0) {
 800443e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004442:	2b00      	cmp	r3, #0
 8004444:	da06      	bge.n	8004454 <lowlayer_writePulse+0x58>
		pulse1_abs = -pulse1;
 8004446:	79bb      	ldrb	r3, [r7, #6]
 8004448:	425b      	negs	r3, r3
 800444a:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = -pulse1 | ((!DIR_J1) << 7);
 800444c:	79bb      	ldrb	r3, [r7, #6]
 800444e:	425b      	negs	r3, r3
 8004450:	75bb      	strb	r3, [r7, #22]
 8004452:	e006      	b.n	8004462 <lowlayer_writePulse+0x66>
	} else {
		pulse1_abs = pulse1;
 8004454:	79bb      	ldrb	r3, [r7, #6]
 8004456:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = pulse1 | (DIR_J1 << 7);
 8004458:	79bb      	ldrb	r3, [r7, #6]
 800445a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800445e:	b25b      	sxtb	r3, r3
 8004460:	75bb      	strb	r3, [r7, #22]
	}
	// Var 2
	if (pulse2 < 0) {
 8004462:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004466:	2b00      	cmp	r3, #0
 8004468:	da0b      	bge.n	8004482 <lowlayer_writePulse+0x86>
		pulse2_abs = -pulse2;
 800446a:	797b      	ldrb	r3, [r7, #5]
 800446c:	425b      	negs	r3, r3
 800446e:	747b      	strb	r3, [r7, #17]
		pulse2_combine = -pulse2 | ((!DIR_J2) << 7);
 8004470:	797b      	ldrb	r3, [r7, #5]
 8004472:	425b      	negs	r3, r3
 8004474:	b2db      	uxtb	r3, r3
 8004476:	b25b      	sxtb	r3, r3
 8004478:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800447c:	b25b      	sxtb	r3, r3
 800447e:	757b      	strb	r3, [r7, #21]
 8004480:	e003      	b.n	800448a <lowlayer_writePulse+0x8e>
	} else {
		pulse2_abs = pulse2;
 8004482:	797b      	ldrb	r3, [r7, #5]
 8004484:	747b      	strb	r3, [r7, #17]
		pulse2_combine = pulse2 | (DIR_J2 << 7);
 8004486:	797b      	ldrb	r3, [r7, #5]
 8004488:	757b      	strb	r3, [r7, #21]
	}
	// Var 3
	if (pulse3 < 0) {
 800448a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	da06      	bge.n	80044a0 <lowlayer_writePulse+0xa4>
		pulse3_abs = -pulse3;
 8004492:	793b      	ldrb	r3, [r7, #4]
 8004494:	425b      	negs	r3, r3
 8004496:	743b      	strb	r3, [r7, #16]
		pulse3_combine = -pulse3 | ((!DIR_J3) << 7);
 8004498:	793b      	ldrb	r3, [r7, #4]
 800449a:	425b      	negs	r3, r3
 800449c:	753b      	strb	r3, [r7, #20]
 800449e:	e006      	b.n	80044ae <lowlayer_writePulse+0xb2>
	} else {
		pulse3_abs = pulse3;
 80044a0:	793b      	ldrb	r3, [r7, #4]
 80044a2:	743b      	strb	r3, [r7, #16]
		pulse3_combine = pulse3 | (DIR_J3 << 7);
 80044a4:	793b      	ldrb	r3, [r7, #4]
 80044a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80044aa:	b25b      	sxtb	r3, r3
 80044ac:	753b      	strb	r3, [r7, #20]
	}

	// Check limit
	if (pulse0_abs > LIM_PULSE_J0
 80044ae:	7cfb      	ldrb	r3, [r7, #19]
 80044b0:	2b4b      	cmp	r3, #75	; 0x4b
 80044b2:	d808      	bhi.n	80044c6 <lowlayer_writePulse+0xca>
		|| pulse1_abs > LIM_PULSE_J1
 80044b4:	7cbb      	ldrb	r3, [r7, #18]
 80044b6:	2b78      	cmp	r3, #120	; 0x78
 80044b8:	d805      	bhi.n	80044c6 <lowlayer_writePulse+0xca>
		|| pulse2_abs > LIM_PULSE_J2
 80044ba:	7c7b      	ldrb	r3, [r7, #17]
 80044bc:	2b7d      	cmp	r3, #125	; 0x7d
 80044be:	d802      	bhi.n	80044c6 <lowlayer_writePulse+0xca>
		|| pulse3_abs > LIM_PULSE_J3) {
 80044c0:	7c3b      	ldrb	r3, [r7, #16]
 80044c2:	2b65      	cmp	r3, #101	; 0x65
 80044c4:	d901      	bls.n	80044ca <lowlayer_writePulse+0xce>
		return FALSE;
 80044c6:	2300      	movs	r3, #0
 80044c8:	e04b      	b.n	8004562 <lowlayer_writePulse+0x166>
//	if (pulse3_abs == 0) {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // Disable
//	} else {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
//	}
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
 80044ca:	2200      	movs	r2, #0
 80044cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80044d0:	4826      	ldr	r0, [pc, #152]	; (800456c <lowlayer_writePulse+0x170>)
 80044d2:	f007 fb11 	bl	800baf8 <HAL_GPIO_WritePin>

	// Write to Module DDA
	FSMC_Write(ADDRESS_DDA_0, (uint32_t)pulse0_combine);
 80044d6:	7dfb      	ldrb	r3, [r7, #23]
 80044d8:	4619      	mov	r1, r3
 80044da:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 80044de:	f7fe fbb7 	bl	8002c50 <FSMC_Write>
	FSMC_Write(ADDRESS_DDA_1, (uint32_t)pulse1_combine);
 80044e2:	7dbb      	ldrb	r3, [r7, #22]
 80044e4:	4619      	mov	r1, r3
 80044e6:	4822      	ldr	r0, [pc, #136]	; (8004570 <lowlayer_writePulse+0x174>)
 80044e8:	f7fe fbb2 	bl	8002c50 <FSMC_Write>
	FSMC_Write(ADDRESS_DDA_2, (uint32_t)pulse2_combine);
 80044ec:	7d7b      	ldrb	r3, [r7, #21]
 80044ee:	4619      	mov	r1, r3
 80044f0:	4820      	ldr	r0, [pc, #128]	; (8004574 <lowlayer_writePulse+0x178>)
 80044f2:	f7fe fbad 	bl	8002c50 <FSMC_Write>
	FSMC_Write(ADDRESS_DDA_3, (uint32_t)pulse3_combine);
 80044f6:	7d3b      	ldrb	r3, [r7, #20]
 80044f8:	4619      	mov	r1, r3
 80044fa:	481f      	ldr	r0, [pc, #124]	; (8004578 <lowlayer_writePulse+0x17c>)
 80044fc:	f7fe fba8 	bl	8002c50 <FSMC_Write>

	// Trigger
	uint8_t delay = 100;
 8004500:	2364      	movs	r3, #100	; 0x64
 8004502:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_RESET);
 8004504:	2200      	movs	r2, #0
 8004506:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800450a:	481c      	ldr	r0, [pc, #112]	; (800457c <lowlayer_writePulse+0x180>)
 800450c:	f007 faf4 	bl	800baf8 <HAL_GPIO_WritePin>
	while (delay--);
 8004510:	bf00      	nop
 8004512:	7bfb      	ldrb	r3, [r7, #15]
 8004514:	1e5a      	subs	r2, r3, #1
 8004516:	73fa      	strb	r2, [r7, #15]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1fa      	bne.n	8004512 <lowlayer_writePulse+0x116>
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_SET);
 800451c:	2201      	movs	r2, #1
 800451e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004522:	4816      	ldr	r0, [pc, #88]	; (800457c <lowlayer_writePulse+0x180>)
 8004524:	f007 fae8 	bl	800baf8 <HAL_GPIO_WritePin>

	// Accumulate
	pulse_accumulate[0] += pulse0;
 8004528:	4b15      	ldr	r3, [pc, #84]	; (8004580 <lowlayer_writePulse+0x184>)
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004530:	4413      	add	r3, r2
 8004532:	4a13      	ldr	r2, [pc, #76]	; (8004580 <lowlayer_writePulse+0x184>)
 8004534:	6013      	str	r3, [r2, #0]
	pulse_accumulate[1] += pulse1;
 8004536:	4b12      	ldr	r3, [pc, #72]	; (8004580 <lowlayer_writePulse+0x184>)
 8004538:	685a      	ldr	r2, [r3, #4]
 800453a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800453e:	4413      	add	r3, r2
 8004540:	4a0f      	ldr	r2, [pc, #60]	; (8004580 <lowlayer_writePulse+0x184>)
 8004542:	6053      	str	r3, [r2, #4]
	pulse_accumulate[2] += pulse2;
 8004544:	4b0e      	ldr	r3, [pc, #56]	; (8004580 <lowlayer_writePulse+0x184>)
 8004546:	689a      	ldr	r2, [r3, #8]
 8004548:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800454c:	4413      	add	r3, r2
 800454e:	4a0c      	ldr	r2, [pc, #48]	; (8004580 <lowlayer_writePulse+0x184>)
 8004550:	6093      	str	r3, [r2, #8]
	pulse_accumulate[3] += pulse3;
 8004552:	4b0b      	ldr	r3, [pc, #44]	; (8004580 <lowlayer_writePulse+0x184>)
 8004554:	68da      	ldr	r2, [r3, #12]
 8004556:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800455a:	4413      	add	r3, r2
 800455c:	4a08      	ldr	r2, [pc, #32]	; (8004580 <lowlayer_writePulse+0x184>)
 800455e:	60d3      	str	r3, [r2, #12]

	return TRUE;
 8004560:	2301      	movs	r3, #1
}
 8004562:	4618      	mov	r0, r3
 8004564:	371c      	adds	r7, #28
 8004566:	46bd      	mov	sp, r7
 8004568:	bd90      	pop	{r4, r7, pc}
 800456a:	bf00      	nop
 800456c:	40020000 	.word	0x40020000
 8004570:	60000002 	.word	0x60000002
 8004574:	60000004 	.word	0x60000004
 8004578:	60000006 	.word	0x60000006
 800457c:	40020c00 	.word	0x40020c00
 8004580:	20005310 	.word	0x20005310

08004584 <lowlayer_resetEncoder>:

void	lowlayer_resetEncoder(void) {
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
	// Trigger
	uint8_t delay = 100;
 800458a:	2364      	movs	r3, #100	; 0x64
 800458c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_SET);
 800458e:	2201      	movs	r2, #1
 8004590:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004594:	4809      	ldr	r0, [pc, #36]	; (80045bc <lowlayer_resetEncoder+0x38>)
 8004596:	f007 faaf 	bl	800baf8 <HAL_GPIO_WritePin>
	while (delay--);
 800459a:	bf00      	nop
 800459c:	79fb      	ldrb	r3, [r7, #7]
 800459e:	1e5a      	subs	r2, r3, #1
 80045a0:	71fa      	strb	r2, [r7, #7]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1fa      	bne.n	800459c <lowlayer_resetEncoder+0x18>
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_RESET);
 80045a6:	2200      	movs	r2, #0
 80045a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80045ac:	4803      	ldr	r0, [pc, #12]	; (80045bc <lowlayer_resetEncoder+0x38>)
 80045ae:	f007 faa3 	bl	800baf8 <HAL_GPIO_WritePin>
}
 80045b2:	bf00      	nop
 80045b4:	3708      	adds	r7, #8
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	40020c00 	.word	0x40020c00

080045c0 <lowlayer_readLimitSwitch>:

uint8_t lowlayer_readLimitSwitch(void) {
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
	uint16_t read_data = FSMC_Read(ADDRESS_LIMIT);
 80045c6:	4805      	ldr	r0, [pc, #20]	; (80045dc <lowlayer_readLimitSwitch+0x1c>)
 80045c8:	f7fe fb51 	bl	8002c6e <FSMC_Read>
 80045cc:	4603      	mov	r3, r0
 80045ce:	80fb      	strh	r3, [r7, #6]

	return (uint8_t)read_data;
 80045d0:	88fb      	ldrh	r3, [r7, #6]
 80045d2:	b2db      	uxtb	r3, r3
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3708      	adds	r7, #8
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	60000020 	.word	0x60000020

080045e0 <lowlayer_readEncoder>:

int32_t lowlayer_readEncoder(uint8_t encoder_num) {
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	4603      	mov	r3, r0
 80045e8:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (encoder_num <= 2) {
 80045ea:	79fb      	ldrb	r3, [r7, #7]
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d81c      	bhi.n	800462a <lowlayer_readEncoder+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_ENC0_LOW + encoder_num*4);
 80045f0:	79fb      	ldrb	r3, [r7, #7]
 80045f2:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 80045f6:	3310      	adds	r3, #16
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7fe fb37 	bl	8002c6e <FSMC_Read>
 8004600:	4603      	mov	r3, r0
 8004602:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_ENC0_LOW + encoder_num*4 + 2);
 8004604:	79fb      	ldrb	r3, [r7, #7]
 8004606:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 800460a:	3310      	adds	r3, #16
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	3302      	adds	r3, #2
 8004610:	4618      	mov	r0, r3
 8004612:	f7fe fb2c 	bl	8002c6e <FSMC_Read>
 8004616:	4603      	mov	r3, r0
 8004618:	813b      	strh	r3, [r7, #8]
		data = high_word;
 800461a:	893b      	ldrh	r3, [r7, #8]
 800461c:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	041a      	lsls	r2, r3, #16
 8004622:	897b      	ldrh	r3, [r7, #10]
 8004624:	4313      	orrs	r3, r2
 8004626:	60fb      	str	r3, [r7, #12]
 8004628:	e001      	b.n	800462e <lowlayer_readEncoder+0x4e>
	} else {
		data = 0;
 800462a:	2300      	movs	r3, #0
 800462c:	60fb      	str	r3, [r7, #12]
	}
	return data;
 800462e:	68fb      	ldr	r3, [r7, #12]
}
 8004630:	4618      	mov	r0, r3
 8004632:	3710      	adds	r7, #16
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <lowlayer_readCapture>:

int32_t lowlayer_readCapture(uint8_t capture_num) {
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	4603      	mov	r3, r0
 8004640:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (capture_num <= 2) {
 8004642:	79fb      	ldrb	r3, [r7, #7]
 8004644:	2b02      	cmp	r3, #2
 8004646:	d81c      	bhi.n	8004682 <lowlayer_readCapture+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4);
 8004648:	79fb      	ldrb	r3, [r7, #7]
 800464a:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 800464e:	3318      	adds	r3, #24
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	4618      	mov	r0, r3
 8004654:	f7fe fb0b 	bl	8002c6e <FSMC_Read>
 8004658:	4603      	mov	r3, r0
 800465a:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4 + 2);
 800465c:	79fb      	ldrb	r3, [r7, #7]
 800465e:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8004662:	3318      	adds	r3, #24
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	3302      	adds	r3, #2
 8004668:	4618      	mov	r0, r3
 800466a:	f7fe fb00 	bl	8002c6e <FSMC_Read>
 800466e:	4603      	mov	r3, r0
 8004670:	813b      	strh	r3, [r7, #8]
		data = high_word;
 8004672:	893b      	ldrh	r3, [r7, #8]
 8004674:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	041a      	lsls	r2, r3, #16
 800467a:	897b      	ldrh	r3, [r7, #10]
 800467c:	4313      	orrs	r3, r2
 800467e:	60fb      	str	r3, [r7, #12]
 8004680:	e001      	b.n	8004686 <lowlayer_readCapture+0x4e>
	} else {
		data = 0;
 8004682:	2300      	movs	r3, #0
 8004684:	60fb      	str	r3, [r7, #12]
	}
	return data;
 8004686:	68fb      	ldr	r3, [r7, #12]
}
 8004688:	4618      	mov	r0, r3
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <lowlayer_updateEncoder>:

void	lowlayer_updateEncoder(void) {
 8004690:	b590      	push	{r4, r7, lr}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 8004696:	2300      	movs	r3, #0
 8004698:	71fb      	strb	r3, [r7, #7]
 800469a:	e00b      	b.n	80046b4 <lowlayer_updateEncoder+0x24>
		position_encoder[i] = lowlayer_readEncoder(i);
 800469c:	79fc      	ldrb	r4, [r7, #7]
 800469e:	79fb      	ldrb	r3, [r7, #7]
 80046a0:	4618      	mov	r0, r3
 80046a2:	f7ff ff9d 	bl	80045e0 <lowlayer_readEncoder>
 80046a6:	4602      	mov	r2, r0
 80046a8:	4b06      	ldr	r3, [pc, #24]	; (80046c4 <lowlayer_updateEncoder+0x34>)
 80046aa:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 80046ae:	79fb      	ldrb	r3, [r7, #7]
 80046b0:	3301      	adds	r3, #1
 80046b2:	71fb      	strb	r3, [r7, #7]
 80046b4:	79fb      	ldrb	r3, [r7, #7]
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d9f0      	bls.n	800469c <lowlayer_updateEncoder+0xc>
	}
}
 80046ba:	bf00      	nop
 80046bc:	370c      	adds	r7, #12
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd90      	pop	{r4, r7, pc}
 80046c2:	bf00      	nop
 80046c4:	20005324 	.word	0x20005324

080046c8 <lowlayer_updateCapture>:

void	lowlayer_updateCapture(void) {
 80046c8:	b590      	push	{r4, r7, lr}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 80046ce:	2300      	movs	r3, #0
 80046d0:	71fb      	strb	r3, [r7, #7]
 80046d2:	e00b      	b.n	80046ec <lowlayer_updateCapture+0x24>
			position_capture[i] = lowlayer_readCapture(i);
 80046d4:	79fc      	ldrb	r4, [r7, #7]
 80046d6:	79fb      	ldrb	r3, [r7, #7]
 80046d8:	4618      	mov	r0, r3
 80046da:	f7ff ffad 	bl	8004638 <lowlayer_readCapture>
 80046de:	4602      	mov	r2, r0
 80046e0:	4b06      	ldr	r3, [pc, #24]	; (80046fc <lowlayer_updateCapture+0x34>)
 80046e2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 80046e6:	79fb      	ldrb	r3, [r7, #7]
 80046e8:	3301      	adds	r3, #1
 80046ea:	71fb      	strb	r3, [r7, #7]
 80046ec:	79fb      	ldrb	r3, [r7, #7]
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d9f0      	bls.n	80046d4 <lowlayer_updateCapture+0xc>
	}
}
 80046f2:	bf00      	nop
 80046f4:	370c      	adds	r7, #12
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd90      	pop	{r4, r7, pc}
 80046fa:	bf00      	nop
 80046fc:	20005334 	.word	0x20005334

08004700 <lowlayer_updateLimit>:

void	lowlayer_updateLimit(void) {
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
	uint8_t limit_data = lowlayer_readLimitSwitch();
 8004706:	f7ff ff5b 	bl	80045c0 <lowlayer_readLimitSwitch>
 800470a:	4603      	mov	r3, r0
 800470c:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < 4; i++) {
 800470e:	2300      	movs	r3, #0
 8004710:	71fb      	strb	r3, [r7, #7]
 8004712:	e00d      	b.n	8004730 <lowlayer_updateLimit+0x30>
			limit_switch[i] = (limit_data & (0x01 << i)) ? 1 : 0;
 8004714:	79ba      	ldrb	r2, [r7, #6]
 8004716:	79fb      	ldrb	r3, [r7, #7]
 8004718:	fa42 f303 	asr.w	r3, r2, r3
 800471c:	b2da      	uxtb	r2, r3
 800471e:	79fb      	ldrb	r3, [r7, #7]
 8004720:	f002 0201 	and.w	r2, r2, #1
 8004724:	b2d1      	uxtb	r1, r2
 8004726:	4a06      	ldr	r2, [pc, #24]	; (8004740 <lowlayer_updateLimit+0x40>)
 8004728:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 4; i++) {
 800472a:	79fb      	ldrb	r3, [r7, #7]
 800472c:	3301      	adds	r3, #1
 800472e:	71fb      	strb	r3, [r7, #7]
 8004730:	79fb      	ldrb	r3, [r7, #7]
 8004732:	2b03      	cmp	r3, #3
 8004734:	d9ee      	bls.n	8004714 <lowlayer_updateLimit+0x14>
	}
}
 8004736:	bf00      	nop
 8004738:	3708      	adds	r7, #8
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	20005330 	.word	0x20005330

08004744 <lowlayer_setOutput>:

void	lowlayer_setOutput(uint8_t value) {
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	4603      	mov	r3, r0
 800474c:	71fb      	strb	r3, [r7, #7]
	if (value > 0) {
 800474e:	79fb      	ldrb	r3, [r7, #7]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d006      	beq.n	8004762 <lowlayer_setOutput+0x1e>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_SET);
 8004754:	2201      	movs	r2, #1
 8004756:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800475a:	4807      	ldr	r0, [pc, #28]	; (8004778 <lowlayer_setOutput+0x34>)
 800475c:	f007 f9cc 	bl	800baf8 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
	}
}
 8004760:	e005      	b.n	800476e <lowlayer_setOutput+0x2a>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
 8004762:	2200      	movs	r2, #0
 8004764:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004768:	4803      	ldr	r0, [pc, #12]	; (8004778 <lowlayer_setOutput+0x34>)
 800476a:	f007 f9c5 	bl	800baf8 <HAL_GPIO_WritePin>
}
 800476e:	bf00      	nop
 8004770:	3708      	adds	r7, #8
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	40020400 	.word	0x40020400

0800477c <lowlayer_CPLD_Init>:

void	lowlayer_CPLD_Init(void) {
 800477c:	b580      	push	{r7, lr}
 800477e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STOP_GPIO_Port, STOP_Pin, GPIO_PIN_SET); // STOP low active
 8004780:	2201      	movs	r2, #1
 8004782:	2140      	movs	r1, #64	; 0x40
 8004784:	4802      	ldr	r0, [pc, #8]	; (8004790 <lowlayer_CPLD_Init+0x14>)
 8004786:	f007 f9b7 	bl	800baf8 <HAL_GPIO_WritePin>
}
 800478a:	bf00      	nop
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	40020c00 	.word	0x40020c00

08004794 <lowlayer_stepMotorInit>:

void	lowlayer_stepMotorInit(void) {
 8004794:	b580      	push	{r7, lr}
 8004796:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // ENABLE low active
 8004798:	2201      	movs	r2, #1
 800479a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800479e:	4808      	ldr	r0, [pc, #32]	; (80047c0 <lowlayer_stepMotorInit+0x2c>)
 80047a0:	f007 f9aa 	bl	800baf8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_RESET_GPIO_Port, STEP_RESET_Pin, GPIO_PIN_SET); // RESET low active
 80047a4:	2201      	movs	r2, #1
 80047a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80047aa:	4805      	ldr	r0, [pc, #20]	; (80047c0 <lowlayer_stepMotorInit+0x2c>)
 80047ac:	f007 f9a4 	bl	800baf8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_SLEEP_GPIO_Port, STEP_SLEEP_Pin, GPIO_PIN_SET); // SLEEP low active
 80047b0:	2201      	movs	r2, #1
 80047b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80047b6:	4802      	ldr	r0, [pc, #8]	; (80047c0 <lowlayer_stepMotorInit+0x2c>)
 80047b8:	f007 f99e 	bl	800baf8 <HAL_GPIO_WritePin>
}
 80047bc:	bf00      	nop
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	40020000 	.word	0x40020000

080047c4 <scaraStartup>:
											 "Over Accelerate",
											 "Wrong Joint Num",
											 "Wrong Coordinate"
											};

void				scaraStartup(void) {
 80047c4:	b580      	push	{r7, lr}
 80047c6:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	scaraSetScanFlag();
#endif
	lowlayer_CPLD_Init();
 80047c8:	f7ff ffd8 	bl	800477c <lowlayer_CPLD_Init>
	lowlayer_stepMotorInit();
 80047cc:	f7ff ffe2 	bl	8004794 <lowlayer_stepMotorInit>
	lowlayer_resetEncoder();
 80047d0:	f7ff fed8 	bl	8004584 <lowlayer_resetEncoder>
	lowlayer_writePulse(0, 0, 0, 0);
 80047d4:	2300      	movs	r3, #0
 80047d6:	2200      	movs	r2, #0
 80047d8:	2100      	movs	r1, #0
 80047da:	2000      	movs	r0, #0
 80047dc:	f7ff fe0e 	bl	80043fc <lowlayer_writePulse>
}
 80047e0:	bf00      	nop
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	0000      	movs	r0, r0
	...

080047e8 <scaraInitDuty>:

/* Compute duty corresponding to new command */
SCARA_StatusTypeDef	scaraInitDuty		(DUTY_Command_TypeDef command) {
 80047e8:	b084      	sub	sp, #16
 80047ea:	b5b0      	push	{r4, r5, r7, lr}
 80047ec:	f5ad 7d76 	sub.w	sp, sp, #984	; 0x3d8
 80047f0:	af8a      	add	r7, sp, #552	; 0x228
 80047f2:	f507 7ce0 	add.w	ip, r7, #448	; 0x1c0
 80047f6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	SCARA_StatusTypeDef status, status1, status2;

	/*----------- Space Task ------------*/
	if 			(DUTY_SPACE_TASK == command.space_type) {
 80047fa:	f897 31cd 	ldrb.w	r3, [r7, #461]	; 0x1cd
 80047fe:	2b00      	cmp	r3, #0
 8004800:	f040 834c 	bne.w	8004e9c <scaraInitDuty+0x6b4>
		double total_s, angle_s;
		int8_t dir_angle;
		SCARA_PositionTypeDef	target_point;
		// Change Degree --> Radian
		command.target_point.roll = command.target_point.roll*PI/180.0;
 8004804:	e9d7 0192 	ldrd	r0, r1, [r7, #584]	; 0x248
 8004808:	a3ab      	add	r3, pc, #684	; (adr r3, 8004ab8 <scaraInitDuty+0x2d0>)
 800480a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800480e:	f7fb fef3 	bl	80005f8 <__aeabi_dmul>
 8004812:	4602      	mov	r2, r0
 8004814:	460b      	mov	r3, r1
 8004816:	4610      	mov	r0, r2
 8004818:	4619      	mov	r1, r3
 800481a:	f04f 0200 	mov.w	r2, #0
 800481e:	4ba8      	ldr	r3, [pc, #672]	; (8004ac0 <scaraInitDuty+0x2d8>)
 8004820:	f7fc f814 	bl	800084c <__aeabi_ddiv>
 8004824:	4602      	mov	r2, r0
 8004826:	460b      	mov	r3, r1
 8004828:	e9c7 2392 	strd	r2, r3, [r7, #584]	; 0x248
		// Coordinate
		if( DUTY_COORDINATES_REL == command.coordinate_type) {
 800482c:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 8004830:	2b01      	cmp	r3, #1
 8004832:	d130      	bne.n	8004896 <scaraInitDuty+0xae>
			target_point.x 		= positionCurrent.x + command.target_point.x;
 8004834:	4ba3      	ldr	r3, [pc, #652]	; (8004ac4 <scaraInitDuty+0x2dc>)
 8004836:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800483a:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 800483e:	f7fb fd25 	bl	800028c <__adddf3>
 8004842:	4602      	mov	r2, r0
 8004844:	460b      	mov	r3, r1
 8004846:	4639      	mov	r1, r7
 8004848:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			target_point.y 		= positionCurrent.y + command.target_point.y;
 800484c:	4b9d      	ldr	r3, [pc, #628]	; (8004ac4 <scaraInitDuty+0x2dc>)
 800484e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8004852:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 8004856:	f7fb fd19 	bl	800028c <__adddf3>
 800485a:	4602      	mov	r2, r0
 800485c:	460b      	mov	r3, r1
 800485e:	4639      	mov	r1, r7
 8004860:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			target_point.z 		= positionCurrent.z + command.target_point.z;
 8004864:	4b97      	ldr	r3, [pc, #604]	; (8004ac4 <scaraInitDuty+0x2dc>)
 8004866:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800486a:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 800486e:	f7fb fd0d 	bl	800028c <__adddf3>
 8004872:	4602      	mov	r2, r0
 8004874:	460b      	mov	r3, r1
 8004876:	4639      	mov	r1, r7
 8004878:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			target_point.roll	= positionCurrent.roll + command.target_point.roll;
 800487c:	4b91      	ldr	r3, [pc, #580]	; (8004ac4 <scaraInitDuty+0x2dc>)
 800487e:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8004882:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8004886:	f7fb fd01 	bl	800028c <__adddf3>
 800488a:	4602      	mov	r2, r0
 800488c:	460b      	mov	r3, r1
 800488e:	4639      	mov	r1, r7
 8004890:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8004894:	e01b      	b.n	80048ce <scaraInitDuty+0xe6>
		} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8004896:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 800489a:	2b00      	cmp	r3, #0
 800489c:	d114      	bne.n	80048c8 <scaraInitDuty+0xe0>
			target_point.x 		= command.target_point.x;
 800489e:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 80048a2:	4639      	mov	r1, r7
 80048a4:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			target_point.y 		= command.target_point.y;
 80048a8:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 80048ac:	4639      	mov	r1, r7
 80048ae:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			target_point.z 		= command.target_point.z;
 80048b2:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 80048b6:	4639      	mov	r1, r7
 80048b8:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			target_point.roll	= command.target_point.roll;
 80048bc:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 80048c0:	4639      	mov	r1, r7
 80048c2:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 80048c6:	e002      	b.n	80048ce <scaraInitDuty+0xe6>
		} else {
			return SCARA_STATUS_ERROR_COORDINATE;
 80048c8:	230c      	movs	r3, #12
 80048ca:	f001 ba71 	b.w	8005db0 <scaraInitDuty+0x15c8>
		}

		angle_s = target_point.roll - positionCurrent.roll;
 80048ce:	463b      	mov	r3, r7
 80048d0:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80048d4:	4b7b      	ldr	r3, [pc, #492]	; (8004ac4 <scaraInitDuty+0x2dc>)
 80048d6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80048da:	f7fb fcd5 	bl	8000288 <__aeabi_dsub>
 80048de:	4602      	mov	r2, r0
 80048e0:	460b      	mov	r3, r1
 80048e2:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
		dir_angle = 1;
 80048e6:	2301      	movs	r3, #1
 80048e8:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
		if ( angle_s < 0) {
 80048ec:	f04f 0200 	mov.w	r2, #0
 80048f0:	f04f 0300 	mov.w	r3, #0
 80048f4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80048f8:	f7fc f8f0 	bl	8000adc <__aeabi_dcmplt>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d002      	beq.n	8004908 <scaraInitDuty+0x120>
			dir_angle = -1;
 8004902:	23ff      	movs	r3, #255	; 0xff
 8004904:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
		}
		if ( fabs(angle_s) > PI) {
 8004908:	f8d7 4198 	ldr.w	r4, [r7, #408]	; 0x198
 800490c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8004910:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8004914:	a368      	add	r3, pc, #416	; (adr r3, 8004ab8 <scaraInitDuty+0x2d0>)
 8004916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800491a:	4620      	mov	r0, r4
 800491c:	4629      	mov	r1, r5
 800491e:	f7fc f8fb 	bl	8000b18 <__aeabi_dcmpgt>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d021      	beq.n	800496c <scaraInitDuty+0x184>
			dir_angle = -dir_angle;
 8004928:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 800492c:	425b      	negs	r3, r3
 800492e:	b2db      	uxtb	r3, r3
 8004930:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
			angle_s = (2*PI - fabsf(angle_s))*dir_angle;
 8004934:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8004938:	f7fc f956 	bl	8000be8 <__aeabi_d2f>
 800493c:	ee07 0a90 	vmov	s15, r0
 8004940:	eef0 7ae7 	vabs.f32	s15, s15
 8004944:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8004ac8 <scaraInitDuty+0x2e0>
 8004948:	ee37 7a67 	vsub.f32	s14, s14, s15
 800494c:	f997 3197 	ldrsb.w	r3, [r7, #407]	; 0x197
 8004950:	ee07 3a90 	vmov	s15, r3
 8004954:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004958:	ee67 7a27 	vmul.f32	s15, s14, s15
 800495c:	ee17 0a90 	vmov	r0, s15
 8004960:	f7fb fdf2 	bl	8000548 <__aeabi_f2d>
 8004964:	4603      	mov	r3, r0
 8004966:	460c      	mov	r4, r1
 8004968:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
		}


		myDUTY.space_type = DUTY_SPACE_TASK;// Change type
 800496c:	4b57      	ldr	r3, [pc, #348]	; (8004acc <scaraInitDuty+0x2e4>)
 800496e:	2200      	movs	r2, #0
 8004970:	701a      	strb	r2, [r3, #0]
		myDUTY.task.roll_start = positionCurrent.roll;
 8004972:	4b54      	ldr	r3, [pc, #336]	; (8004ac4 <scaraInitDuty+0x2dc>)
 8004974:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8004978:	4a54      	ldr	r2, [pc, #336]	; (8004acc <scaraInitDuty+0x2e4>)
 800497a:	e9c2 34f0 	strd	r3, r4, [r2, #960]	; 0x3c0
		// 1-Path Planning
			// Straight Line
		if ( DUTY_PATH_LINE == command.path_type ) {
 800497e:	f897 31ce 	ldrb.w	r3, [r7, #462]	; 0x1ce
 8004982:	2b00      	cmp	r3, #0
 8004984:	d11f      	bne.n	80049c6 <scaraInitDuty+0x1de>
			myDUTY.task.path.path_type = DUTY_PATH_LINE;
 8004986:	4b51      	ldr	r3, [pc, #324]	; (8004acc <scaraInitDuty+0x2e4>)
 8004988:	2200      	movs	r2, #0
 800498a:	721a      	strb	r2, [r3, #8]
			status = scaraInitLine(&(myDUTY.task.path.line), positionCurrent, target_point);
 800498c:	4c4d      	ldr	r4, [pc, #308]	; (8004ac4 <scaraInitDuty+0x2dc>)
 800498e:	463b      	mov	r3, r7
 8004990:	a82c      	add	r0, sp, #176	; 0xb0
 8004992:	4619      	mov	r1, r3
 8004994:	23b8      	movs	r3, #184	; 0xb8
 8004996:	461a      	mov	r2, r3
 8004998:	f010 feea 	bl	8015770 <memcpy>
 800499c:	4668      	mov	r0, sp
 800499e:	f104 0308 	add.w	r3, r4, #8
 80049a2:	22b0      	movs	r2, #176	; 0xb0
 80049a4:	4619      	mov	r1, r3
 80049a6:	f010 fee3 	bl	8015770 <memcpy>
 80049aa:	e894 000c 	ldmia.w	r4, {r2, r3}
 80049ae:	4848      	ldr	r0, [pc, #288]	; (8004ad0 <scaraInitDuty+0x2e8>)
 80049b0:	f001 fa10 	bl	8005dd4 <scaraInitLine>
 80049b4:	4603      	mov	r3, r0
 80049b6:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
			total_s = myDUTY.task.path.line.total_s;
 80049ba:	4b44      	ldr	r3, [pc, #272]	; (8004acc <scaraInitDuty+0x2e4>)
 80049bc:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 80049c0:	e9c7 3468 	strd	r3, r4, [r7, #416]	; 0x1a0
 80049c4:	e070      	b.n	8004aa8 <scaraInitDuty+0x2c0>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == command.path_type ) {
 80049c6:	f897 31ce 	ldrb.w	r3, [r7, #462]	; 0x1ce
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d169      	bne.n	8004aa2 <scaraInitDuty+0x2ba>
			SCARA_PositionTypeDef	center_point;
			if( DUTY_COORDINATES_REL == command.coordinate_type) {
 80049ce:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d127      	bne.n	8004a26 <scaraInitDuty+0x23e>
				center_point.x 		= positionCurrent.x + command.sub_point.x;
 80049d6:	4b3b      	ldr	r3, [pc, #236]	; (8004ac4 <scaraInitDuty+0x2dc>)
 80049d8:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80049dc:	e9d7 34ba 	ldrd	r3, r4, [r7, #744]	; 0x2e8
 80049e0:	461a      	mov	r2, r3
 80049e2:	4623      	mov	r3, r4
 80049e4:	f7fb fc52 	bl	800028c <__adddf3>
 80049e8:	4603      	mov	r3, r0
 80049ea:	460c      	mov	r4, r1
 80049ec:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
				center_point.y 		= positionCurrent.y + command.sub_point.y;
 80049f0:	4b34      	ldr	r3, [pc, #208]	; (8004ac4 <scaraInitDuty+0x2dc>)
 80049f2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80049f6:	e9d7 34bc 	ldrd	r3, r4, [r7, #752]	; 0x2f0
 80049fa:	461a      	mov	r2, r3
 80049fc:	4623      	mov	r3, r4
 80049fe:	f7fb fc45 	bl	800028c <__adddf3>
 8004a02:	4603      	mov	r3, r0
 8004a04:	460c      	mov	r4, r1
 8004a06:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
				center_point.z 		= positionCurrent.z + command.sub_point.z;
 8004a0a:	4b2e      	ldr	r3, [pc, #184]	; (8004ac4 <scaraInitDuty+0x2dc>)
 8004a0c:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8004a10:	e9d7 34be 	ldrd	r3, r4, [r7, #760]	; 0x2f8
 8004a14:	461a      	mov	r2, r3
 8004a16:	4623      	mov	r3, r4
 8004a18:	f7fb fc38 	bl	800028c <__adddf3>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	460c      	mov	r4, r1
 8004a20:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
 8004a24:	e013      	b.n	8004a4e <scaraInitDuty+0x266>
			} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8004a26:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10c      	bne.n	8004a48 <scaraInitDuty+0x260>
				center_point.x 		= command.target_point.x;
 8004a2e:	e9d7 348c 	ldrd	r3, r4, [r7, #560]	; 0x230
 8004a32:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
				center_point.y 		= command.target_point.y;
 8004a36:	e9d7 348e 	ldrd	r3, r4, [r7, #568]	; 0x238
 8004a3a:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
				center_point.z 		= command.target_point.z;
 8004a3e:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 8004a42:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
 8004a46:	e002      	b.n	8004a4e <scaraInitDuty+0x266>
			} else {
				return SCARA_STATUS_ERROR_COORDINATE;
 8004a48:	230c      	movs	r3, #12
			return SCARA_STATUS_ERROR_COORDINATE;
 8004a4a:	f001 b9b1 	b.w	8005db0 <scaraInitDuty+0x15c8>
			}

			myDUTY.task.path.path_type = DUTY_PATH_CIRCLE;
 8004a4e:	4b1f      	ldr	r3, [pc, #124]	; (8004acc <scaraInitDuty+0x2e4>)
 8004a50:	2201      	movs	r2, #1
 8004a52:	721a      	strb	r2, [r3, #8]
			status = scaraInitCircle(&(myDUTY.task.path.circle),
 8004a54:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8004a58:	4c1a      	ldr	r4, [pc, #104]	; (8004ac4 <scaraInitDuty+0x2dc>)
 8004a5a:	9388      	str	r3, [sp, #544]	; 0x220
 8004a5c:	a85a      	add	r0, sp, #360	; 0x168
 8004a5e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004a62:	22b8      	movs	r2, #184	; 0xb8
 8004a64:	4619      	mov	r1, r3
 8004a66:	f010 fe83 	bl	8015770 <memcpy>
 8004a6a:	463b      	mov	r3, r7
 8004a6c:	a82c      	add	r0, sp, #176	; 0xb0
 8004a6e:	4619      	mov	r1, r3
 8004a70:	23b8      	movs	r3, #184	; 0xb8
 8004a72:	461a      	mov	r2, r3
 8004a74:	f010 fe7c 	bl	8015770 <memcpy>
 8004a78:	4668      	mov	r0, sp
 8004a7a:	f104 0308 	add.w	r3, r4, #8
 8004a7e:	22b0      	movs	r2, #176	; 0xb0
 8004a80:	4619      	mov	r1, r3
 8004a82:	f010 fe75 	bl	8015770 <memcpy>
 8004a86:	e894 000c 	ldmia.w	r4, {r2, r3}
 8004a8a:	4812      	ldr	r0, [pc, #72]	; (8004ad4 <scaraInitDuty+0x2ec>)
 8004a8c:	f001 fa68 	bl	8005f60 <scaraInitCircle>
 8004a90:	4603      	mov	r3, r0
 8004a92:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
										positionCurrent,
										target_point,
										center_point,
										command.sub_para_int );
			total_s = myDUTY.task.path.circle.total_s;
 8004a96:	4b0d      	ldr	r3, [pc, #52]	; (8004acc <scaraInitDuty+0x2e4>)
 8004a98:	e9d3 343a 	ldrd	r3, r4, [r3, #232]	; 0xe8
 8004a9c:	e9c7 3468 	strd	r3, r4, [r7, #416]	; 0x1a0
 8004aa0:	e002      	b.n	8004aa8 <scaraInitDuty+0x2c0>

		} else {
			return SCARA_STATUS_ERROR_TASK;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	f001 b984 	b.w	8005db0 <scaraInitDuty+0x15c8>
		}

		if ( SCARA_STATUS_OK != status) {
 8004aa8:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d013      	beq.n	8004ad8 <scaraInitDuty+0x2f0>
			return status;
 8004ab0:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8004ab4:	f001 b97c 	b.w	8005db0 <scaraInitDuty+0x15c8>
 8004ab8:	60000000 	.word	0x60000000
 8004abc:	400921fb 	.word	0x400921fb
 8004ac0:	40668000 	.word	0x40668000
 8004ac4:	20005e38 	.word	0x20005e38
 8004ac8:	40c90fdb 	.word	0x40c90fdb
 8004acc:	20005378 	.word	0x20005378
 8004ad0:	20005388 	.word	0x20005388
 8004ad4:	200053f8 	.word	0x200053f8
		}

		// 2-Trajectory Planning
			// LSPB
		if ( DUTY_TRAJECTORY_LSPB == command.trajec_type ) {
 8004ad8:	f897 31d0 	ldrb.w	r3, [r7, #464]	; 0x1d0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f040 80dd 	bne.w	8004c9c <scaraInitDuty+0x4b4>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8004ae2:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d145      	bne.n	8004b76 <scaraInitDuty+0x38e>
				myDUTY.task.trajectory_3d.lspb.Tf = command.time_total;
 8004aea:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8004aee:	4ac8      	ldr	r2, [pc, #800]	; (8004e10 <scaraInitDuty+0x628>)
 8004af0:	e9c2 345a 	strd	r3, r4, [r2, #360]	; 0x168
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8004af4:	4bc6      	ldr	r3, [pc, #792]	; (8004e10 <scaraInitDuty+0x628>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8004afc:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004b00:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004b04:	eeb0 2a46 	vmov.f32	s4, s12
 8004b08:	eef0 2a66 	vmov.f32	s5, s13
 8004b0c:	eeb0 1a47 	vmov.f32	s2, s14
 8004b10:	eef0 1a67 	vmov.f32	s3, s15
 8004b14:	2201      	movs	r2, #1
 8004b16:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8004b1a:	2104      	movs	r1, #4
 8004b1c:	48bd      	ldr	r0, [pc, #756]	; (8004e14 <scaraInitDuty+0x62c>)
 8004b1e:	f001 fb97 	bl	8006250 <scaraInitLSPB>
 8004b22:	4603      	mov	r3, r0
 8004b24:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
						 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

				myDUTY.task.trajectory_roll.lspb.Tf = command.time_total;
 8004b28:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8004b2c:	4ab8      	ldr	r2, [pc, #736]	; (8004e10 <scaraInitDuty+0x628>)
 8004b2e:	e9c2 34b0 	strd	r3, r4, [r2, #704]	; 0x2c0
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8004b32:	4bb7      	ldr	r3, [pc, #732]	; (8004e10 <scaraInitDuty+0x628>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
				status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 8004b3a:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004b3e:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004b42:	eeb0 2a46 	vmov.f32	s4, s12
 8004b46:	eef0 2a66 	vmov.f32	s5, s13
 8004b4a:	eeb0 1a47 	vmov.f32	s2, s14
 8004b4e:	eef0 1a67 	vmov.f32	s3, s15
 8004b52:	2201      	movs	r2, #1
 8004b54:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8004b58:	2105      	movs	r1, #5
 8004b5a:	48af      	ldr	r0, [pc, #700]	; (8004e18 <scaraInitDuty+0x630>)
 8004b5c:	f001 fb78 	bl	8006250 <scaraInitLSPB>
 8004b60:	4603      	mov	r3, r0
 8004b62:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
						 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
				myDUTY.time_total = command.time_total;
 8004b66:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8004b6a:	4aa9      	ldr	r2, [pc, #676]	; (8004e10 <scaraInitDuty+0x628>)
 8004b6c:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8004b70:	e9c2 3400 	strd	r3, r4, [r2]
 8004b74:	e181      	b.n	8004e7a <scaraInitDuty+0x692>

			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8004b76:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	f040 808b 	bne.w	8004c96 <scaraInitDuty+0x4ae>
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8004b80:	4ba3      	ldr	r3, [pc, #652]	; (8004e10 <scaraInitDuty+0x628>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8004b88:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004b8c:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004b90:	eeb0 2a46 	vmov.f32	s4, s12
 8004b94:	eef0 2a66 	vmov.f32	s5, s13
 8004b98:	eeb0 1a47 	vmov.f32	s2, s14
 8004b9c:	eef0 1a67 	vmov.f32	s3, s15
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8004ba6:	2104      	movs	r1, #4
 8004ba8:	489a      	ldr	r0, [pc, #616]	; (8004e14 <scaraInitDuty+0x62c>)
 8004baa:	f001 fb51 	bl	8006250 <scaraInitLSPB>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
						 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8004bb4:	4b96      	ldr	r3, [pc, #600]	; (8004e10 <scaraInitDuty+0x628>)
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
				status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 8004bbc:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004bc0:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004bc4:	eeb0 2a46 	vmov.f32	s4, s12
 8004bc8:	eef0 2a66 	vmov.f32	s5, s13
 8004bcc:	eeb0 1a47 	vmov.f32	s2, s14
 8004bd0:	eef0 1a67 	vmov.f32	s3, s15
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8004bda:	2105      	movs	r1, #5
 8004bdc:	488e      	ldr	r0, [pc, #568]	; (8004e18 <scaraInitDuty+0x630>)
 8004bde:	f001 fb37 	bl	8006250 <scaraInitLSPB>
 8004be2:	4603      	mov	r3, r0
 8004be4:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
						 angle_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				// Synchronous time end
				if(myDUTY.task.trajectory_3d.lspb.Tf > myDUTY.task.trajectory_roll.lspb.Tf) {
 8004be8:	4b89      	ldr	r3, [pc, #548]	; (8004e10 <scaraInitDuty+0x628>)
 8004bea:	e9d3 015a 	ldrd	r0, r1, [r3, #360]	; 0x168
 8004bee:	4b88      	ldr	r3, [pc, #544]	; (8004e10 <scaraInitDuty+0x628>)
 8004bf0:	e9d3 34b0 	ldrd	r3, r4, [r3, #704]	; 0x2c0
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	4623      	mov	r3, r4
 8004bf8:	f7fb ff8e 	bl	8000b18 <__aeabi_dcmpgt>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d024      	beq.n	8004c4c <scaraInitDuty+0x464>
					myDUTY.task.trajectory_roll.lspb.Tf = myDUTY.task.trajectory_3d.lspb.Tf;
 8004c02:	4b83      	ldr	r3, [pc, #524]	; (8004e10 <scaraInitDuty+0x628>)
 8004c04:	e9d3 345a 	ldrd	r3, r4, [r3, #360]	; 0x168
 8004c08:	4a81      	ldr	r2, [pc, #516]	; (8004e10 <scaraInitDuty+0x628>)
 8004c0a:	e9c2 34b0 	strd	r3, r4, [r2, #704]	; 0x2c0
					status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 8004c0e:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004c12:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004c16:	eeb0 2a46 	vmov.f32	s4, s12
 8004c1a:	eef0 2a66 	vmov.f32	s5, s13
 8004c1e:	eeb0 1a47 	vmov.f32	s2, s14
 8004c22:	eef0 1a67 	vmov.f32	s3, s15
 8004c26:	2201      	movs	r2, #1
 8004c28:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8004c2c:	2105      	movs	r1, #5
 8004c2e:	487a      	ldr	r0, [pc, #488]	; (8004e18 <scaraInitDuty+0x630>)
 8004c30:	f001 fb0e 	bl	8006250 <scaraInitLSPB>
 8004c34:	4603      	mov	r3, r0
 8004c36:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
							 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_3d.lspb.Tf;
 8004c3a:	4b75      	ldr	r3, [pc, #468]	; (8004e10 <scaraInitDuty+0x628>)
 8004c3c:	e9d3 345a 	ldrd	r3, r4, [r3, #360]	; 0x168
 8004c40:	4a73      	ldr	r2, [pc, #460]	; (8004e10 <scaraInitDuty+0x628>)
 8004c42:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8004c46:	e9c2 3400 	strd	r3, r4, [r2]
 8004c4a:	e116      	b.n	8004e7a <scaraInitDuty+0x692>
				} else {
					myDUTY.task.trajectory_3d.lspb.Tf = myDUTY.task.trajectory_roll.lspb.Tf;
 8004c4c:	4b70      	ldr	r3, [pc, #448]	; (8004e10 <scaraInitDuty+0x628>)
 8004c4e:	e9d3 34b0 	ldrd	r3, r4, [r3, #704]	; 0x2c0
 8004c52:	4a6f      	ldr	r2, [pc, #444]	; (8004e10 <scaraInitDuty+0x628>)
 8004c54:	e9c2 345a 	strd	r3, r4, [r2, #360]	; 0x168
					status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8004c58:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004c5c:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004c60:	eeb0 2a46 	vmov.f32	s4, s12
 8004c64:	eef0 2a66 	vmov.f32	s5, s13
 8004c68:	eeb0 1a47 	vmov.f32	s2, s14
 8004c6c:	eef0 1a67 	vmov.f32	s3, s15
 8004c70:	2201      	movs	r2, #1
 8004c72:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8004c76:	2104      	movs	r1, #4
 8004c78:	4866      	ldr	r0, [pc, #408]	; (8004e14 <scaraInitDuty+0x62c>)
 8004c7a:	f001 fae9 	bl	8006250 <scaraInitLSPB>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
							 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_roll.lspb.Tf;
 8004c84:	4b62      	ldr	r3, [pc, #392]	; (8004e10 <scaraInitDuty+0x628>)
 8004c86:	e9d3 34b0 	ldrd	r3, r4, [r3, #704]	; 0x2c0
 8004c8a:	4a61      	ldr	r2, [pc, #388]	; (8004e10 <scaraInitDuty+0x628>)
 8004c8c:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8004c90:	e9c2 3400 	strd	r3, r4, [r2]
 8004c94:	e0f1      	b.n	8004e7a <scaraInitDuty+0x692>
				}
			} else {
				return SCARA_STATUS_ERROR_MODE_INIT ;
 8004c96:	2308      	movs	r3, #8
 8004c98:	f001 b88a 	b.w	8005db0 <scaraInitDuty+0x15c8>
			}
			// SCURVE
		} else if 	( DUTY_TRAJECTORY_SCURVE == command.trajec_type ){
 8004c9c:	f897 31d0 	ldrb.w	r3, [r7, #464]	; 0x1d0
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	f040 80e7 	bne.w	8004e74 <scaraInitDuty+0x68c>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8004ca6:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d145      	bne.n	8004d3a <scaraInitDuty+0x552>
				myDUTY.task.trajectory_3d.scurve.Tf = command.time_total;
 8004cae:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8004cb2:	4a57      	ldr	r2, [pc, #348]	; (8004e10 <scaraInitDuty+0x628>)
 8004cb4:	e9c2 347e 	strd	r3, r4, [r2, #504]	; 0x1f8
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8004cb8:	4b55      	ldr	r3, [pc, #340]	; (8004e10 <scaraInitDuty+0x628>)
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8004cc0:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004cc4:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004cc8:	eeb0 2a46 	vmov.f32	s4, s12
 8004ccc:	eef0 2a66 	vmov.f32	s5, s13
 8004cd0:	eeb0 1a47 	vmov.f32	s2, s14
 8004cd4:	eef0 1a67 	vmov.f32	s3, s15
 8004cd8:	2201      	movs	r2, #1
 8004cda:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8004cde:	2104      	movs	r1, #4
 8004ce0:	484e      	ldr	r0, [pc, #312]	; (8004e1c <scaraInitDuty+0x634>)
 8004ce2:	f001 fea1 	bl	8006a28 <scaraInitScurve>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
						 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

				myDUTY.task.trajectory_roll.scurve.Tf = command.time_total;
 8004cec:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8004cf0:	4a47      	ldr	r2, [pc, #284]	; (8004e10 <scaraInitDuty+0x628>)
 8004cf2:	e9c2 34d4 	strd	r3, r4, [r2, #848]	; 0x350
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8004cf6:	4b46      	ldr	r3, [pc, #280]	; (8004e10 <scaraInitDuty+0x628>)
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
				status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 8004cfe:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004d02:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004d06:	eeb0 2a46 	vmov.f32	s4, s12
 8004d0a:	eef0 2a66 	vmov.f32	s5, s13
 8004d0e:	eeb0 1a47 	vmov.f32	s2, s14
 8004d12:	eef0 1a67 	vmov.f32	s3, s15
 8004d16:	2201      	movs	r2, #1
 8004d18:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8004d1c:	2105      	movs	r1, #5
 8004d1e:	4840      	ldr	r0, [pc, #256]	; (8004e20 <scaraInitDuty+0x638>)
 8004d20:	f001 fe82 	bl	8006a28 <scaraInitScurve>
 8004d24:	4603      	mov	r3, r0
 8004d26:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
						 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
				myDUTY.time_total = command.time_total;
 8004d2a:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8004d2e:	4a38      	ldr	r2, [pc, #224]	; (8004e10 <scaraInitDuty+0x628>)
 8004d30:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8004d34:	e9c2 3400 	strd	r3, r4, [r2]
 8004d38:	e09f      	b.n	8004e7a <scaraInitDuty+0x692>

			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8004d3a:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	f040 8095 	bne.w	8004e6e <scaraInitDuty+0x686>
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8004d44:	4b32      	ldr	r3, [pc, #200]	; (8004e10 <scaraInitDuty+0x628>)
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8004d4c:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004d50:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004d54:	eeb0 2a46 	vmov.f32	s4, s12
 8004d58:	eef0 2a66 	vmov.f32	s5, s13
 8004d5c:	eeb0 1a47 	vmov.f32	s2, s14
 8004d60:	eef0 1a67 	vmov.f32	s3, s15
 8004d64:	2200      	movs	r2, #0
 8004d66:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8004d6a:	2104      	movs	r1, #4
 8004d6c:	482b      	ldr	r0, [pc, #172]	; (8004e1c <scaraInitDuty+0x634>)
 8004d6e:	f001 fe5b 	bl	8006a28 <scaraInitScurve>
 8004d72:	4603      	mov	r3, r0
 8004d74:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
						 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8004d78:	4b25      	ldr	r3, [pc, #148]	; (8004e10 <scaraInitDuty+0x628>)
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
				status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 8004d80:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004d84:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004d88:	eeb0 2a46 	vmov.f32	s4, s12
 8004d8c:	eef0 2a66 	vmov.f32	s5, s13
 8004d90:	eeb0 1a47 	vmov.f32	s2, s14
 8004d94:	eef0 1a67 	vmov.f32	s3, s15
 8004d98:	2200      	movs	r2, #0
 8004d9a:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8004d9e:	2105      	movs	r1, #5
 8004da0:	481f      	ldr	r0, [pc, #124]	; (8004e20 <scaraInitDuty+0x638>)
 8004da2:	f001 fe41 	bl	8006a28 <scaraInitScurve>
 8004da6:	4603      	mov	r3, r0
 8004da8:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
						 angle_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				// synchronous time end
				if(myDUTY.task.trajectory_3d.scurve.Tf > myDUTY.task.trajectory_roll.scurve.Tf) {
 8004dac:	4b18      	ldr	r3, [pc, #96]	; (8004e10 <scaraInitDuty+0x628>)
 8004dae:	e9d3 017e 	ldrd	r0, r1, [r3, #504]	; 0x1f8
 8004db2:	4b17      	ldr	r3, [pc, #92]	; (8004e10 <scaraInitDuty+0x628>)
 8004db4:	e9d3 34d4 	ldrd	r3, r4, [r3, #848]	; 0x350
 8004db8:	461a      	mov	r2, r3
 8004dba:	4623      	mov	r3, r4
 8004dbc:	f7fb feac 	bl	8000b18 <__aeabi_dcmpgt>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d02e      	beq.n	8004e24 <scaraInitDuty+0x63c>
					myDUTY.task.trajectory_roll.scurve.Tf = myDUTY.task.trajectory_3d.scurve.Tf;
 8004dc6:	4b12      	ldr	r3, [pc, #72]	; (8004e10 <scaraInitDuty+0x628>)
 8004dc8:	e9d3 347e 	ldrd	r3, r4, [r3, #504]	; 0x1f8
 8004dcc:	4a10      	ldr	r2, [pc, #64]	; (8004e10 <scaraInitDuty+0x628>)
 8004dce:	e9c2 34d4 	strd	r3, r4, [r2, #848]	; 0x350
					status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 8004dd2:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004dd6:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004dda:	eeb0 2a46 	vmov.f32	s4, s12
 8004dde:	eef0 2a66 	vmov.f32	s5, s13
 8004de2:	eeb0 1a47 	vmov.f32	s2, s14
 8004de6:	eef0 1a67 	vmov.f32	s3, s15
 8004dea:	2201      	movs	r2, #1
 8004dec:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8004df0:	2105      	movs	r1, #5
 8004df2:	480b      	ldr	r0, [pc, #44]	; (8004e20 <scaraInitDuty+0x638>)
 8004df4:	f001 fe18 	bl	8006a28 <scaraInitScurve>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
							 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_3d.scurve.Tf;
 8004dfe:	4b04      	ldr	r3, [pc, #16]	; (8004e10 <scaraInitDuty+0x628>)
 8004e00:	e9d3 347e 	ldrd	r3, r4, [r3, #504]	; 0x1f8
 8004e04:	4a02      	ldr	r2, [pc, #8]	; (8004e10 <scaraInitDuty+0x628>)
 8004e06:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8004e0a:	e9c2 3400 	strd	r3, r4, [r2]
 8004e0e:	e034      	b.n	8004e7a <scaraInitDuty+0x692>
 8004e10:	20005378 	.word	0x20005378
 8004e14:	20005490 	.word	0x20005490
 8004e18:	200055e8 	.word	0x200055e8
 8004e1c:	20005510 	.word	0x20005510
 8004e20:	20005668 	.word	0x20005668
				} else {
					myDUTY.task.trajectory_3d.scurve.Tf = myDUTY.task.trajectory_roll.scurve.Tf;
 8004e24:	4bb0      	ldr	r3, [pc, #704]	; (80050e8 <scaraInitDuty+0x900>)
 8004e26:	e9d3 34d4 	ldrd	r3, r4, [r3, #848]	; 0x350
 8004e2a:	4aaf      	ldr	r2, [pc, #700]	; (80050e8 <scaraInitDuty+0x900>)
 8004e2c:	e9c2 347e 	strd	r3, r4, [r2, #504]	; 0x1f8
					status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8004e30:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004e34:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004e38:	eeb0 2a46 	vmov.f32	s4, s12
 8004e3c:	eef0 2a66 	vmov.f32	s5, s13
 8004e40:	eeb0 1a47 	vmov.f32	s2, s14
 8004e44:	eef0 1a67 	vmov.f32	s3, s15
 8004e48:	2201      	movs	r2, #1
 8004e4a:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8004e4e:	2104      	movs	r1, #4
 8004e50:	48a6      	ldr	r0, [pc, #664]	; (80050ec <scaraInitDuty+0x904>)
 8004e52:	f001 fde9 	bl	8006a28 <scaraInitScurve>
 8004e56:	4603      	mov	r3, r0
 8004e58:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
							 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_roll.scurve.Tf;
 8004e5c:	4ba2      	ldr	r3, [pc, #648]	; (80050e8 <scaraInitDuty+0x900>)
 8004e5e:	e9d3 34d4 	ldrd	r3, r4, [r3, #848]	; 0x350
 8004e62:	4aa1      	ldr	r2, [pc, #644]	; (80050e8 <scaraInitDuty+0x900>)
 8004e64:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8004e68:	e9c2 3400 	strd	r3, r4, [r2]
 8004e6c:	e005      	b.n	8004e7a <scaraInitDuty+0x692>
				}
			} else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 8004e6e:	2308      	movs	r3, #8
 8004e70:	f000 bf9e 	b.w	8005db0 <scaraInitDuty+0x15c8>
			}
		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8004e74:	2305      	movs	r3, #5
 8004e76:	f000 bf9b 	b.w	8005db0 <scaraInitDuty+0x15c8>
		}
		// Check Init Status
		if ( SCARA_STATUS_OK != status1) {
 8004e7a:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d003      	beq.n	8004e8a <scaraInitDuty+0x6a2>
			return status1;
 8004e82:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8004e86:	f000 bf93 	b.w	8005db0 <scaraInitDuty+0x15c8>
		}
		if ( SCARA_STATUS_OK != status2) {
 8004e8a:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f000 8760 	beq.w	8005d54 <scaraInitDuty+0x156c>
			return status2;
 8004e94:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 8004e98:	f000 bf8a 	b.w	8005db0 <scaraInitDuty+0x15c8>
		}


	/*----------- Space Joint ------------*/
	} else if (DUTY_SPACE_JOINT == command.space_type) {
 8004e9c:	f897 31cd 	ldrb.w	r3, [r7, #461]	; 0x1cd
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	f040 8755 	bne.w	8005d50 <scaraInitDuty+0x1568>

		myDUTY.space_type = DUTY_SPACE_JOINT;// Change type
 8004ea6:	4b90      	ldr	r3, [pc, #576]	; (80050e8 <scaraInitDuty+0x900>)
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	701a      	strb	r2, [r3, #0]
		myDUTY.joint.theta1_start	 = positionCurrent.Theta1;
 8004eac:	4b90      	ldr	r3, [pc, #576]	; (80050f0 <scaraInitDuty+0x908>)
 8004eae:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 8004eb2:	4a8d      	ldr	r2, [pc, #564]	; (80050e8 <scaraInitDuty+0x900>)
 8004eb4:	f602 1228 	addw	r2, r2, #2344	; 0x928
 8004eb8:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.theta2_start	 = positionCurrent.Theta2;
 8004ebc:	4b8c      	ldr	r3, [pc, #560]	; (80050f0 <scaraInitDuty+0x908>)
 8004ebe:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8004ec2:	4a89      	ldr	r2, [pc, #548]	; (80050e8 <scaraInitDuty+0x900>)
 8004ec4:	f502 6213 	add.w	r2, r2, #2352	; 0x930
 8004ec8:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.d3_start		 = positionCurrent.D3;
 8004ecc:	4b88      	ldr	r3, [pc, #544]	; (80050f0 <scaraInitDuty+0x908>)
 8004ece:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8004ed2:	4a85      	ldr	r2, [pc, #532]	; (80050e8 <scaraInitDuty+0x900>)
 8004ed4:	f602 1238 	addw	r2, r2, #2360	; 0x938
 8004ed8:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.theta4_start 	 = positionCurrent.Theta4;
 8004edc:	4b84      	ldr	r3, [pc, #528]	; (80050f0 <scaraInitDuty+0x908>)
 8004ede:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 8004ee2:	4a81      	ldr	r2, [pc, #516]	; (80050e8 <scaraInitDuty+0x900>)
 8004ee4:	f502 6214 	add.w	r2, r2, #2368	; 0x940
 8004ee8:	e9c2 3400 	strd	r3, r4, [r2]

		//-----Joint Single
		if ( DUTY_JOINT_SINGLE == command.joint_type) {
 8004eec:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f040 83d6 	bne.w	80056a2 <scaraInitDuty+0xeba>
			// Trajectory 1 profile
			double s, abs_position;
			switch(command.sub_para_int) {
 8004ef6:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8004efa:	2b03      	cmp	r3, #3
 8004efc:	f200 814e 	bhi.w	800519c <scaraInitDuty+0x9b4>
 8004f00:	a201      	add	r2, pc, #4	; (adr r2, 8004f08 <scaraInitDuty+0x720>)
 8004f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f06:	bf00      	nop
 8004f08:	08004f19 	.word	0x08004f19
 8004f0c:	08004fbf 	.word	0x08004fbf
 8004f10:	08005065 	.word	0x08005065
 8004f14:	080050f9 	.word	0x080050f9
			case 0:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 8004f18:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 8004f1c:	a370      	add	r3, pc, #448	; (adr r3, 80050e0 <scaraInitDuty+0x8f8>)
 8004f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f22:	f7fb fb69 	bl	80005f8 <__aeabi_dmul>
 8004f26:	4603      	mov	r3, r0
 8004f28:	460c      	mov	r4, r1
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	4621      	mov	r1, r4
 8004f2e:	f04f 0200 	mov.w	r2, #0
 8004f32:	4b70      	ldr	r3, [pc, #448]	; (80050f4 <scaraInitDuty+0x90c>)
 8004f34:	f7fb fc8a 	bl	800084c <__aeabi_ddiv>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	460c      	mov	r4, r1
 8004f3c:	e9c7 3476 	strd	r3, r4, [r7, #472]	; 0x1d8
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8004f40:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d113      	bne.n	8004f70 <scaraInitDuty+0x788>
					abs_position = myDUTY.joint.theta1_start + command.sub_para_double;
 8004f48:	4b67      	ldr	r3, [pc, #412]	; (80050e8 <scaraInitDuty+0x900>)
 8004f4a:	f603 1328 	addw	r3, r3, #2344	; 0x928
 8004f4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f52:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8004f56:	461a      	mov	r2, r3
 8004f58:	4623      	mov	r3, r4
 8004f5a:	f7fb f997 	bl	800028c <__adddf3>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	460c      	mov	r4, r1
 8004f62:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
					s			 = command.sub_para_double;
 8004f66:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8004f6a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 8004f6e:	e01a      	b.n	8004fa6 <scaraInitDuty+0x7be>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8004f70:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d113      	bne.n	8004fa0 <scaraInitDuty+0x7b8>
					abs_position = command.sub_para_double;
 8004f78:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8004f7c:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
					s			 = command.sub_para_double - myDUTY.joint.theta1_start;
 8004f80:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 8004f84:	4b58      	ldr	r3, [pc, #352]	; (80050e8 <scaraInitDuty+0x900>)
 8004f86:	f603 1328 	addw	r3, r3, #2344	; 0x928
 8004f8a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004f8e:	461a      	mov	r2, r3
 8004f90:	4623      	mov	r3, r4
 8004f92:	f7fb f979 	bl	8000288 <__aeabi_dsub>
 8004f96:	4603      	mov	r3, r0
 8004f98:	460c      	mov	r4, r1
 8004f9a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 8004f9e:	e002      	b.n	8004fa6 <scaraInitDuty+0x7be>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8004fa0:	230c      	movs	r3, #12
 8004fa2:	f000 bf05 	b.w	8005db0 <scaraInitDuty+0x15c8>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J0, abs_position)) {
 8004fa6:	ed97 0b60 	vldr	d0, [r7, #384]	; 0x180
 8004faa:	2000      	movs	r0, #0
 8004fac:	f003 fe44 	bl	8008c38 <scaraCheckWorkSpace1>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	f000 80f5 	beq.w	80051a2 <scaraInitDuty+0x9ba>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8004fb8:	2307      	movs	r3, #7
 8004fba:	f000 bef9 	b.w	8005db0 <scaraInitDuty+0x15c8>
				}
				break;
			case 1:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 8004fbe:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 8004fc2:	a347      	add	r3, pc, #284	; (adr r3, 80050e0 <scaraInitDuty+0x8f8>)
 8004fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc8:	f7fb fb16 	bl	80005f8 <__aeabi_dmul>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	460c      	mov	r4, r1
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	4621      	mov	r1, r4
 8004fd4:	f04f 0200 	mov.w	r2, #0
 8004fd8:	4b46      	ldr	r3, [pc, #280]	; (80050f4 <scaraInitDuty+0x90c>)
 8004fda:	f7fb fc37 	bl	800084c <__aeabi_ddiv>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	460c      	mov	r4, r1
 8004fe2:	e9c7 3476 	strd	r3, r4, [r7, #472]	; 0x1d8
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8004fe6:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d113      	bne.n	8005016 <scaraInitDuty+0x82e>
					abs_position = myDUTY.joint.theta2_start + command.sub_para_double;
 8004fee:	4b3e      	ldr	r3, [pc, #248]	; (80050e8 <scaraInitDuty+0x900>)
 8004ff0:	f503 6313 	add.w	r3, r3, #2352	; 0x930
 8004ff4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ff8:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	4623      	mov	r3, r4
 8005000:	f7fb f944 	bl	800028c <__adddf3>
 8005004:	4603      	mov	r3, r0
 8005006:	460c      	mov	r4, r1
 8005008:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
					s			 = command.sub_para_double;
 800500c:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8005010:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 8005014:	e01a      	b.n	800504c <scaraInitDuty+0x864>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8005016:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 800501a:	2b00      	cmp	r3, #0
 800501c:	d113      	bne.n	8005046 <scaraInitDuty+0x85e>
					abs_position = command.sub_para_double;
 800501e:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8005022:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
					s			 = command.sub_para_double - myDUTY.joint.theta2_start;
 8005026:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 800502a:	4b2f      	ldr	r3, [pc, #188]	; (80050e8 <scaraInitDuty+0x900>)
 800502c:	f503 6313 	add.w	r3, r3, #2352	; 0x930
 8005030:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005034:	461a      	mov	r2, r3
 8005036:	4623      	mov	r3, r4
 8005038:	f7fb f926 	bl	8000288 <__aeabi_dsub>
 800503c:	4603      	mov	r3, r0
 800503e:	460c      	mov	r4, r1
 8005040:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 8005044:	e002      	b.n	800504c <scaraInitDuty+0x864>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8005046:	230c      	movs	r3, #12
 8005048:	f000 beb2 	b.w	8005db0 <scaraInitDuty+0x15c8>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J1, abs_position)) {
 800504c:	ed97 0b60 	vldr	d0, [r7, #384]	; 0x180
 8005050:	2001      	movs	r0, #1
 8005052:	f003 fdf1 	bl	8008c38 <scaraCheckWorkSpace1>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	f000 80a4 	beq.w	80051a6 <scaraInitDuty+0x9be>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800505e:	2307      	movs	r3, #7
 8005060:	f000 bea6 	b.w	8005db0 <scaraInitDuty+0x15c8>
				}
				break;
			case 2:
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8005064:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 8005068:	2b01      	cmp	r3, #1
 800506a:	d113      	bne.n	8005094 <scaraInitDuty+0x8ac>
					abs_position = myDUTY.joint.d3_start + command.sub_para_double;
 800506c:	4b1e      	ldr	r3, [pc, #120]	; (80050e8 <scaraInitDuty+0x900>)
 800506e:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8005072:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005076:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 800507a:	461a      	mov	r2, r3
 800507c:	4623      	mov	r3, r4
 800507e:	f7fb f905 	bl	800028c <__adddf3>
 8005082:	4603      	mov	r3, r0
 8005084:	460c      	mov	r4, r1
 8005086:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
					s			 = command.sub_para_double;
 800508a:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 800508e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 8005092:	e01a      	b.n	80050ca <scaraInitDuty+0x8e2>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8005094:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 8005098:	2b00      	cmp	r3, #0
 800509a:	d113      	bne.n	80050c4 <scaraInitDuty+0x8dc>
					abs_position = command.sub_para_double;
 800509c:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 80050a0:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
					s			 = command.sub_para_double - myDUTY.joint.d3_start;
 80050a4:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 80050a8:	4b0f      	ldr	r3, [pc, #60]	; (80050e8 <scaraInitDuty+0x900>)
 80050aa:	f603 1338 	addw	r3, r3, #2360	; 0x938
 80050ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80050b2:	461a      	mov	r2, r3
 80050b4:	4623      	mov	r3, r4
 80050b6:	f7fb f8e7 	bl	8000288 <__aeabi_dsub>
 80050ba:	4603      	mov	r3, r0
 80050bc:	460c      	mov	r4, r1
 80050be:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 80050c2:	e002      	b.n	80050ca <scaraInitDuty+0x8e2>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 80050c4:	230c      	movs	r3, #12
 80050c6:	f000 be73 	b.w	8005db0 <scaraInitDuty+0x15c8>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J2, abs_position)) {
 80050ca:	ed97 0b60 	vldr	d0, [r7, #384]	; 0x180
 80050ce:	2002      	movs	r0, #2
 80050d0:	f003 fdb2 	bl	8008c38 <scaraCheckWorkSpace1>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d067      	beq.n	80051aa <scaraInitDuty+0x9c2>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80050da:	2307      	movs	r3, #7
 80050dc:	f000 be68 	b.w	8005db0 <scaraInitDuty+0x15c8>
 80050e0:	60000000 	.word	0x60000000
 80050e4:	400921fb 	.word	0x400921fb
 80050e8:	20005378 	.word	0x20005378
 80050ec:	20005510 	.word	0x20005510
 80050f0:	20005e38 	.word	0x20005e38
 80050f4:	40668000 	.word	0x40668000
				}
				break;
			case 3:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 80050f8:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 80050fc:	a3cf      	add	r3, pc, #828	; (adr r3, 800543c <scaraInitDuty+0xc54>)
 80050fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005102:	f7fb fa79 	bl	80005f8 <__aeabi_dmul>
 8005106:	4603      	mov	r3, r0
 8005108:	460c      	mov	r4, r1
 800510a:	4618      	mov	r0, r3
 800510c:	4621      	mov	r1, r4
 800510e:	f04f 0200 	mov.w	r2, #0
 8005112:	4bc7      	ldr	r3, [pc, #796]	; (8005430 <scaraInitDuty+0xc48>)
 8005114:	f7fb fb9a 	bl	800084c <__aeabi_ddiv>
 8005118:	4603      	mov	r3, r0
 800511a:	460c      	mov	r4, r1
 800511c:	e9c7 3476 	strd	r3, r4, [r7, #472]	; 0x1d8
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8005120:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 8005124:	2b01      	cmp	r3, #1
 8005126:	d113      	bne.n	8005150 <scaraInitDuty+0x968>
					abs_position = myDUTY.joint.theta4_start + command.sub_para_double;
 8005128:	4bc2      	ldr	r3, [pc, #776]	; (8005434 <scaraInitDuty+0xc4c>)
 800512a:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 800512e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005132:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8005136:	461a      	mov	r2, r3
 8005138:	4623      	mov	r3, r4
 800513a:	f7fb f8a7 	bl	800028c <__adddf3>
 800513e:	4603      	mov	r3, r0
 8005140:	460c      	mov	r4, r1
 8005142:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
					s			 = command.sub_para_double;
 8005146:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 800514a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 800514e:	e01a      	b.n	8005186 <scaraInitDuty+0x99e>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8005150:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 8005154:	2b00      	cmp	r3, #0
 8005156:	d113      	bne.n	8005180 <scaraInitDuty+0x998>
					abs_position = command.sub_para_double;
 8005158:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 800515c:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
					s			 = command.sub_para_double - myDUTY.joint.theta4_start;
 8005160:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 8005164:	4bb3      	ldr	r3, [pc, #716]	; (8005434 <scaraInitDuty+0xc4c>)
 8005166:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 800516a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800516e:	461a      	mov	r2, r3
 8005170:	4623      	mov	r3, r4
 8005172:	f7fb f889 	bl	8000288 <__aeabi_dsub>
 8005176:	4603      	mov	r3, r0
 8005178:	460c      	mov	r4, r1
 800517a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 800517e:	e002      	b.n	8005186 <scaraInitDuty+0x99e>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8005180:	230c      	movs	r3, #12
 8005182:	f000 be15 	b.w	8005db0 <scaraInitDuty+0x15c8>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J3, abs_position)) {
 8005186:	ed97 0b60 	vldr	d0, [r7, #384]	; 0x180
 800518a:	2003      	movs	r0, #3
 800518c:	f003 fd54 	bl	8008c38 <scaraCheckWorkSpace1>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00b      	beq.n	80051ae <scaraInitDuty+0x9c6>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005196:	2307      	movs	r3, #7
 8005198:	f000 be0a 	b.w	8005db0 <scaraInitDuty+0x15c8>
				}
				break;
			default:
				return SCARA_STATUS_ERROR_JOINT_NUM;
 800519c:	230b      	movs	r3, #11
 800519e:	f000 be07 	b.w	8005db0 <scaraInitDuty+0x15c8>
				break;
 80051a2:	bf00      	nop
 80051a4:	e004      	b.n	80051b0 <scaraInitDuty+0x9c8>
				break;
 80051a6:	bf00      	nop
 80051a8:	e002      	b.n	80051b0 <scaraInitDuty+0x9c8>
				break;
 80051aa:	bf00      	nop
 80051ac:	e000      	b.n	80051b0 <scaraInitDuty+0x9c8>
				break;
 80051ae:	bf00      	nop
			}

			// LSPB
			if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 80051b0:	f897 31d0 	ldrb.w	r3, [r7, #464]	; 0x1d0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f040 8128 	bne.w	800540a <scaraInitDuty+0xc22>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 80051ba:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 80051be:	2b01      	cmp	r3, #1
 80051c0:	f040 8097 	bne.w	80052f2 <scaraInitDuty+0xb0a>
					for ( uint8_t i = 0; i < 4; i++) {
 80051c4:	2300      	movs	r3, #0
 80051c6:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 80051ca:	e08c      	b.n	80052e6 <scaraInitDuty+0xafe>
						if ( i == command.sub_para_int) {
 80051cc:	f897 217f 	ldrb.w	r2, [r7, #383]	; 0x17f
 80051d0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d13d      	bne.n	8005254 <scaraInitDuty+0xa6c>
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 80051d8:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 80051dc:	4a95      	ldr	r2, [pc, #596]	; (8005434 <scaraInitDuty+0xc4c>)
 80051de:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80051e2:	fb01 f303 	mul.w	r3, r1, r3
 80051e6:	4413      	add	r3, r2
 80051e8:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 80051ec:	2200      	movs	r2, #0
 80051ee:	701a      	strb	r2, [r3, #0]
							myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 80051f0:	f897 217f 	ldrb.w	r2, [r7, #383]	; 0x17f
 80051f4:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 80051f8:	498e      	ldr	r1, [pc, #568]	; (8005434 <scaraInitDuty+0xc4c>)
 80051fa:	f44f 70ac 	mov.w	r0, #344	; 0x158
 80051fe:	fb00 f202 	mul.w	r2, r0, r2
 8005202:	440a      	add	r2, r1
 8005204:	f502 6284 	add.w	r2, r2, #1056	; 0x420
 8005208:	e9c2 3400 	strd	r3, r4, [r2]
							status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 800520c:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 8005210:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005214:	fb02 f303 	mul.w	r3, r2, r3
 8005218:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 800521c:	4a85      	ldr	r2, [pc, #532]	; (8005434 <scaraInitDuty+0xc4c>)
 800521e:	1898      	adds	r0, r3, r2
 8005220:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 8005224:	4a84      	ldr	r2, [pc, #528]	; (8005438 <scaraInitDuty+0xc50>)
 8005226:	5cd3      	ldrb	r3, [r2, r3]
 8005228:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 800522c:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8005230:	eeb0 2a46 	vmov.f32	s4, s12
 8005234:	eef0 2a66 	vmov.f32	s5, s13
 8005238:	eeb0 1a47 	vmov.f32	s2, s14
 800523c:	eef0 1a67 	vmov.f32	s3, s15
 8005240:	2201      	movs	r2, #1
 8005242:	ed97 0b62 	vldr	d0, [r7, #392]	; 0x188
 8005246:	4619      	mov	r1, r3
 8005248:	f001 f802 	bl	8006250 <scaraInitLSPB>
 800524c:	4603      	mov	r3, r0
 800524e:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
 8005252:	e03c      	b.n	80052ce <scaraInitDuty+0xae6>
											s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
						} else {
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005254:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 8005258:	4a76      	ldr	r2, [pc, #472]	; (8005434 <scaraInitDuty+0xc4c>)
 800525a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800525e:	fb01 f303 	mul.w	r3, r1, r3
 8005262:	4413      	add	r3, r2
 8005264:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005268:	2200      	movs	r2, #0
 800526a:	701a      	strb	r2, [r3, #0]
							myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 800526c:	f897 217f 	ldrb.w	r2, [r7, #383]	; 0x17f
 8005270:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8005274:	496f      	ldr	r1, [pc, #444]	; (8005434 <scaraInitDuty+0xc4c>)
 8005276:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800527a:	fb00 f202 	mul.w	r2, r0, r2
 800527e:	440a      	add	r2, r1
 8005280:	f502 6284 	add.w	r2, r2, #1056	; 0x420
 8005284:	e9c2 3400 	strd	r3, r4, [r2]
							status2 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8005288:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 800528c:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005290:	fb02 f303 	mul.w	r3, r2, r3
 8005294:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8005298:	4a66      	ldr	r2, [pc, #408]	; (8005434 <scaraInitDuty+0xc4c>)
 800529a:	1898      	adds	r0, r3, r2
 800529c:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 80052a0:	4a65      	ldr	r2, [pc, #404]	; (8005438 <scaraInitDuty+0xc50>)
 80052a2:	5cd3      	ldrb	r3, [r2, r3]
 80052a4:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 80052a8:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 80052ac:	eeb0 2a46 	vmov.f32	s4, s12
 80052b0:	eef0 2a66 	vmov.f32	s5, s13
 80052b4:	eeb0 1a47 	vmov.f32	s2, s14
 80052b8:	eef0 1a67 	vmov.f32	s3, s15
 80052bc:	2201      	movs	r2, #1
 80052be:	ed9f 0b5a 	vldr	d0, [pc, #360]	; 8005428 <scaraInitDuty+0xc40>
 80052c2:	4619      	mov	r1, r3
 80052c4:	f000 ffc4 	bl	8006250 <scaraInitLSPB>
 80052c8:	4603      	mov	r3, r0
 80052ca:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
											0, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
						}
						myDUTY.time_total = command.time_total;
 80052ce:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 80052d2:	4a58      	ldr	r2, [pc, #352]	; (8005434 <scaraInitDuty+0xc4c>)
 80052d4:	f602 1248 	addw	r2, r2, #2376	; 0x948
 80052d8:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 80052dc:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 80052e0:	3301      	adds	r3, #1
 80052e2:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 80052e6:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 80052ea:	2b03      	cmp	r3, #3
 80052ec:	f67f af6e 	bls.w	80051cc <scaraInitDuty+0x9e4>
 80052f0:	e1c8      	b.n	8005684 <scaraInitDuty+0xe9c>
					}
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 80052f2:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	f040 8084 	bne.w	8005404 <scaraInitDuty+0xc1c>
					for ( uint8_t i = 0; i < 4; i++) {
 80052fc:	2300      	movs	r3, #0
 80052fe:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 8005302:	e07a      	b.n	80053fa <scaraInitDuty+0xc12>
						if ( i == command.sub_para_int) {
 8005304:	f897 217e 	ldrb.w	r2, [r7, #382]	; 0x17e
 8005308:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800530c:	429a      	cmp	r2, r3
 800530e:	d140      	bne.n	8005392 <scaraInitDuty+0xbaa>
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005310:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 8005314:	4a47      	ldr	r2, [pc, #284]	; (8005434 <scaraInitDuty+0xc4c>)
 8005316:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800531a:	fb01 f303 	mul.w	r3, r1, r3
 800531e:	4413      	add	r3, r2
 8005320:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005324:	2200      	movs	r2, #0
 8005326:	701a      	strb	r2, [r3, #0]
							status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8005328:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 800532c:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005330:	fb02 f303 	mul.w	r3, r2, r3
 8005334:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8005338:	4a3e      	ldr	r2, [pc, #248]	; (8005434 <scaraInitDuty+0xc4c>)
 800533a:	1898      	adds	r0, r3, r2
 800533c:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 8005340:	4a3d      	ldr	r2, [pc, #244]	; (8005438 <scaraInitDuty+0xc50>)
 8005342:	5cd3      	ldrb	r3, [r2, r3]
 8005344:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8005348:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 800534c:	eeb0 2a46 	vmov.f32	s4, s12
 8005350:	eef0 2a66 	vmov.f32	s5, s13
 8005354:	eeb0 1a47 	vmov.f32	s2, s14
 8005358:	eef0 1a67 	vmov.f32	s3, s15
 800535c:	2200      	movs	r2, #0
 800535e:	ed97 0b62 	vldr	d0, [r7, #392]	; 0x188
 8005362:	4619      	mov	r1, r3
 8005364:	f000 ff74 	bl	8006250 <scaraInitLSPB>
 8005368:	4603      	mov	r3, r0
 800536a:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
											s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
							myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 800536e:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 8005372:	4a30      	ldr	r2, [pc, #192]	; (8005434 <scaraInitDuty+0xc4c>)
 8005374:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005378:	fb01 f303 	mul.w	r3, r1, r3
 800537c:	4413      	add	r3, r2
 800537e:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8005382:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005386:	4a2b      	ldr	r2, [pc, #172]	; (8005434 <scaraInitDuty+0xc4c>)
 8005388:	f602 1248 	addw	r2, r2, #2376	; 0x948
 800538c:	e9c2 3400 	strd	r3, r4, [r2]
 8005390:	e02e      	b.n	80053f0 <scaraInitDuty+0xc08>
						} else {
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005392:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 8005396:	4a27      	ldr	r2, [pc, #156]	; (8005434 <scaraInitDuty+0xc4c>)
 8005398:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800539c:	fb01 f303 	mul.w	r3, r1, r3
 80053a0:	4413      	add	r3, r2
 80053a2:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 80053a6:	2200      	movs	r2, #0
 80053a8:	701a      	strb	r2, [r3, #0]
							status2 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 80053aa:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 80053ae:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80053b2:	fb02 f303 	mul.w	r3, r2, r3
 80053b6:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 80053ba:	4a1e      	ldr	r2, [pc, #120]	; (8005434 <scaraInitDuty+0xc4c>)
 80053bc:	1898      	adds	r0, r3, r2
 80053be:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 80053c2:	4a1d      	ldr	r2, [pc, #116]	; (8005438 <scaraInitDuty+0xc50>)
 80053c4:	5cd3      	ldrb	r3, [r2, r3]
 80053c6:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 80053ca:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 80053ce:	eeb0 2a46 	vmov.f32	s4, s12
 80053d2:	eef0 2a66 	vmov.f32	s5, s13
 80053d6:	eeb0 1a47 	vmov.f32	s2, s14
 80053da:	eef0 1a67 	vmov.f32	s3, s15
 80053de:	2200      	movs	r2, #0
 80053e0:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8005428 <scaraInitDuty+0xc40>
 80053e4:	4619      	mov	r1, r3
 80053e6:	f000 ff33 	bl	8006250 <scaraInitLSPB>
 80053ea:	4603      	mov	r3, r0
 80053ec:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
					for ( uint8_t i = 0; i < 4; i++) {
 80053f0:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 80053f4:	3301      	adds	r3, #1
 80053f6:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 80053fa:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 80053fe:	2b03      	cmp	r3, #3
 8005400:	d980      	bls.n	8005304 <scaraInitDuty+0xb1c>
 8005402:	e13f      	b.n	8005684 <scaraInitDuty+0xe9c>
											0, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
						}
					}
				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 8005404:	2308      	movs	r3, #8
 8005406:	f000 bcd3 	b.w	8005db0 <scaraInitDuty+0x15c8>
				}
			// SCURVE
			} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 800540a:	f897 31d0 	ldrb.w	r3, [r7, #464]	; 0x1d0
 800540e:	2b01      	cmp	r3, #1
 8005410:	f040 8136 	bne.w	8005680 <scaraInitDuty+0xe98>
					// Mode Init Time
					if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8005414:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 8005418:	2b01      	cmp	r3, #1
 800541a:	f040 80a6 	bne.w	800556a <scaraInitDuty+0xd82>
						for ( uint8_t i = 0; i < 4; i++) {
 800541e:	2300      	movs	r3, #0
 8005420:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 8005424:	e09b      	b.n	800555e <scaraInitDuty+0xd76>
 8005426:	bf00      	nop
	...
 8005430:	40668000 	.word	0x40668000
 8005434:	20005378 	.word	0x20005378
 8005438:	20000c54 	.word	0x20000c54
 800543c:	60000000 	.word	0x60000000
 8005440:	400921fb 	.word	0x400921fb
							if ( i == command.sub_para_int) {
 8005444:	f897 217d 	ldrb.w	r2, [r7, #381]	; 0x17d
 8005448:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800544c:	429a      	cmp	r2, r3
 800544e:	d13d      	bne.n	80054cc <scaraInitDuty+0xce4>
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005450:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 8005454:	4ac0      	ldr	r2, [pc, #768]	; (8005758 <scaraInitDuty+0xf70>)
 8005456:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800545a:	fb01 f303 	mul.w	r3, r1, r3
 800545e:	4413      	add	r3, r2
 8005460:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005464:	2201      	movs	r2, #1
 8005466:	701a      	strb	r2, [r3, #0]
								myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 8005468:	f897 217d 	ldrb.w	r2, [r7, #381]	; 0x17d
 800546c:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8005470:	49b9      	ldr	r1, [pc, #740]	; (8005758 <scaraInitDuty+0xf70>)
 8005472:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8005476:	fb00 f202 	mul.w	r2, r0, r2
 800547a:	440a      	add	r2, r1
 800547c:	f502 6296 	add.w	r2, r2, #1200	; 0x4b0
 8005480:	e9c2 3400 	strd	r3, r4, [r2]
								status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 8005484:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 8005488:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800548c:	fb02 f303 	mul.w	r3, r2, r3
 8005490:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8005494:	4ab0      	ldr	r2, [pc, #704]	; (8005758 <scaraInitDuty+0xf70>)
 8005496:	1898      	adds	r0, r3, r2
 8005498:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 800549c:	4aaf      	ldr	r2, [pc, #700]	; (800575c <scaraInitDuty+0xf74>)
 800549e:	5cd3      	ldrb	r3, [r2, r3]
 80054a0:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 80054a4:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 80054a8:	eeb0 2a46 	vmov.f32	s4, s12
 80054ac:	eef0 2a66 	vmov.f32	s5, s13
 80054b0:	eeb0 1a47 	vmov.f32	s2, s14
 80054b4:	eef0 1a67 	vmov.f32	s3, s15
 80054b8:	2201      	movs	r2, #1
 80054ba:	ed97 0b62 	vldr	d0, [r7, #392]	; 0x188
 80054be:	4619      	mov	r1, r3
 80054c0:	f001 fab2 	bl	8006a28 <scaraInitScurve>
 80054c4:	4603      	mov	r3, r0
 80054c6:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
 80054ca:	e03c      	b.n	8005546 <scaraInitDuty+0xd5e>
											joint_taget[i],
											s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
							} else {
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80054cc:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 80054d0:	4aa1      	ldr	r2, [pc, #644]	; (8005758 <scaraInitDuty+0xf70>)
 80054d2:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80054d6:	fb01 f303 	mul.w	r3, r1, r3
 80054da:	4413      	add	r3, r2
 80054dc:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 80054e0:	2201      	movs	r2, #1
 80054e2:	701a      	strb	r2, [r3, #0]
								myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 80054e4:	f897 217d 	ldrb.w	r2, [r7, #381]	; 0x17d
 80054e8:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 80054ec:	499a      	ldr	r1, [pc, #616]	; (8005758 <scaraInitDuty+0xf70>)
 80054ee:	f44f 70ac 	mov.w	r0, #344	; 0x158
 80054f2:	fb00 f202 	mul.w	r2, r0, r2
 80054f6:	440a      	add	r2, r1
 80054f8:	f502 6296 	add.w	r2, r2, #1200	; 0x4b0
 80054fc:	e9c2 3400 	strd	r3, r4, [r2]
								status2 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 8005500:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 8005504:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005508:	fb02 f303 	mul.w	r3, r2, r3
 800550c:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8005510:	4a91      	ldr	r2, [pc, #580]	; (8005758 <scaraInitDuty+0xf70>)
 8005512:	1898      	adds	r0, r3, r2
 8005514:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 8005518:	4a90      	ldr	r2, [pc, #576]	; (800575c <scaraInitDuty+0xf74>)
 800551a:	5cd3      	ldrb	r3, [r2, r3]
 800551c:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8005520:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8005524:	eeb0 2a46 	vmov.f32	s4, s12
 8005528:	eef0 2a66 	vmov.f32	s5, s13
 800552c:	eeb0 1a47 	vmov.f32	s2, s14
 8005530:	eef0 1a67 	vmov.f32	s3, s15
 8005534:	2201      	movs	r2, #1
 8005536:	ed9f 0b84 	vldr	d0, [pc, #528]	; 8005748 <scaraInitDuty+0xf60>
 800553a:	4619      	mov	r1, r3
 800553c:	f001 fa74 	bl	8006a28 <scaraInitScurve>
 8005540:	4603      	mov	r3, r0
 8005542:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
											joint_taget[i],
											0, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
							}
							myDUTY.time_total = command.time_total;
 8005546:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 800554a:	4a83      	ldr	r2, [pc, #524]	; (8005758 <scaraInitDuty+0xf70>)
 800554c:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8005550:	e9c2 3400 	strd	r3, r4, [r2]
						for ( uint8_t i = 0; i < 4; i++) {
 8005554:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 8005558:	3301      	adds	r3, #1
 800555a:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 800555e:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 8005562:	2b03      	cmp	r3, #3
 8005564:	f67f af6e 	bls.w	8005444 <scaraInitDuty+0xc5c>
 8005568:	e08c      	b.n	8005684 <scaraInitDuty+0xe9c>
						}
					// Mode Init Acc
					} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 800556a:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 800556e:	2b00      	cmp	r3, #0
 8005570:	f040 8084 	bne.w	800567c <scaraInitDuty+0xe94>
						for ( uint8_t i = 0; i < 4; i++) {
 8005574:	2300      	movs	r3, #0
 8005576:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 800557a:	e07a      	b.n	8005672 <scaraInitDuty+0xe8a>
							if ( i == command.sub_para_int) {
 800557c:	f897 217c 	ldrb.w	r2, [r7, #380]	; 0x17c
 8005580:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8005584:	429a      	cmp	r2, r3
 8005586:	d140      	bne.n	800560a <scaraInitDuty+0xe22>
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005588:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 800558c:	4a72      	ldr	r2, [pc, #456]	; (8005758 <scaraInitDuty+0xf70>)
 800558e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005592:	fb01 f303 	mul.w	r3, r1, r3
 8005596:	4413      	add	r3, r2
 8005598:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 800559c:	2201      	movs	r2, #1
 800559e:	701a      	strb	r2, [r3, #0]
								status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 80055a0:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 80055a4:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80055a8:	fb02 f303 	mul.w	r3, r2, r3
 80055ac:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 80055b0:	4a69      	ldr	r2, [pc, #420]	; (8005758 <scaraInitDuty+0xf70>)
 80055b2:	1898      	adds	r0, r3, r2
 80055b4:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 80055b8:	4a68      	ldr	r2, [pc, #416]	; (800575c <scaraInitDuty+0xf74>)
 80055ba:	5cd3      	ldrb	r3, [r2, r3]
 80055bc:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 80055c0:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 80055c4:	eeb0 2a46 	vmov.f32	s4, s12
 80055c8:	eef0 2a66 	vmov.f32	s5, s13
 80055cc:	eeb0 1a47 	vmov.f32	s2, s14
 80055d0:	eef0 1a67 	vmov.f32	s3, s15
 80055d4:	2200      	movs	r2, #0
 80055d6:	ed97 0b62 	vldr	d0, [r7, #392]	; 0x188
 80055da:	4619      	mov	r1, r3
 80055dc:	f001 fa24 	bl	8006a28 <scaraInitScurve>
 80055e0:	4603      	mov	r3, r0
 80055e2:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
											joint_taget[i],
											s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
								myDUTY.time_total = myDUTY.joint.trajectory[i].scurve.Tf;
 80055e6:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 80055ea:	4a5b      	ldr	r2, [pc, #364]	; (8005758 <scaraInitDuty+0xf70>)
 80055ec:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80055f0:	fb01 f303 	mul.w	r3, r1, r3
 80055f4:	4413      	add	r3, r2
 80055f6:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 80055fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80055fe:	4a56      	ldr	r2, [pc, #344]	; (8005758 <scaraInitDuty+0xf70>)
 8005600:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8005604:	e9c2 3400 	strd	r3, r4, [r2]
 8005608:	e02e      	b.n	8005668 <scaraInitDuty+0xe80>
							} else {
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 800560a:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 800560e:	4a52      	ldr	r2, [pc, #328]	; (8005758 <scaraInitDuty+0xf70>)
 8005610:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005614:	fb01 f303 	mul.w	r3, r1, r3
 8005618:	4413      	add	r3, r2
 800561a:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 800561e:	2201      	movs	r2, #1
 8005620:	701a      	strb	r2, [r3, #0]
								status2 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 8005622:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 8005626:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800562a:	fb02 f303 	mul.w	r3, r2, r3
 800562e:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8005632:	4a49      	ldr	r2, [pc, #292]	; (8005758 <scaraInitDuty+0xf70>)
 8005634:	1898      	adds	r0, r3, r2
 8005636:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 800563a:	4a48      	ldr	r2, [pc, #288]	; (800575c <scaraInitDuty+0xf74>)
 800563c:	5cd3      	ldrb	r3, [r2, r3]
 800563e:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8005642:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8005646:	eeb0 2a46 	vmov.f32	s4, s12
 800564a:	eef0 2a66 	vmov.f32	s5, s13
 800564e:	eeb0 1a47 	vmov.f32	s2, s14
 8005652:	eef0 1a67 	vmov.f32	s3, s15
 8005656:	2200      	movs	r2, #0
 8005658:	ed9f 0b3b 	vldr	d0, [pc, #236]	; 8005748 <scaraInitDuty+0xf60>
 800565c:	4619      	mov	r1, r3
 800565e:	f001 f9e3 	bl	8006a28 <scaraInitScurve>
 8005662:	4603      	mov	r3, r0
 8005664:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
						for ( uint8_t i = 0; i < 4; i++) {
 8005668:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 800566c:	3301      	adds	r3, #1
 800566e:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 8005672:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 8005676:	2b03      	cmp	r3, #3
 8005678:	d980      	bls.n	800557c <scaraInitDuty+0xd94>
 800567a:	e003      	b.n	8005684 <scaraInitDuty+0xe9c>
											0, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
							}
						}

					} else {
						return SCARA_STATUS_ERROR_MODE_INIT;
 800567c:	2308      	movs	r3, #8
 800567e:	e397      	b.n	8005db0 <scaraInitDuty+0x15c8>
					}

			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 8005680:	2305      	movs	r3, #5
 8005682:	e395      	b.n	8005db0 <scaraInitDuty+0x15c8>
			}
		// Check Init Status
			if ( SCARA_STATUS_OK != status1) {
 8005684:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8005688:	2b00      	cmp	r3, #0
 800568a:	d002      	beq.n	8005692 <scaraInitDuty+0xeaa>
				return status1;
 800568c:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8005690:	e38e      	b.n	8005db0 <scaraInitDuty+0x15c8>
			}
			if ( SCARA_STATUS_OK != status2) {
 8005692:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 8005696:	2b00      	cmp	r3, #0
 8005698:	f000 835c 	beq.w	8005d54 <scaraInitDuty+0x156c>
				return status2;
 800569c:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 80056a0:	e386      	b.n	8005db0 <scaraInitDuty+0x15c8>
			}

		//----Joint Quadra
		} else if 	( DUTY_JOINT_4DOF == command.joint_type) {
 80056a2:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	f040 8350 	bne.w	8005d4c <scaraInitDuty+0x1564>
			SCARA_PositionTypeDef	target_point;
			// Change Degree --> Radian
			command.target_point.roll = command.target_point.roll*PI/180.0;
 80056ac:	e9d7 0192 	ldrd	r0, r1, [r7, #584]	; 0x248
 80056b0:	a327      	add	r3, pc, #156	; (adr r3, 8005750 <scaraInitDuty+0xf68>)
 80056b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b6:	f7fa ff9f 	bl	80005f8 <__aeabi_dmul>
 80056ba:	4603      	mov	r3, r0
 80056bc:	460c      	mov	r4, r1
 80056be:	4618      	mov	r0, r3
 80056c0:	4621      	mov	r1, r4
 80056c2:	f04f 0200 	mov.w	r2, #0
 80056c6:	4b26      	ldr	r3, [pc, #152]	; (8005760 <scaraInitDuty+0xf78>)
 80056c8:	f7fb f8c0 	bl	800084c <__aeabi_ddiv>
 80056cc:	4603      	mov	r3, r0
 80056ce:	460c      	mov	r4, r1
 80056d0:	e9c7 3492 	strd	r3, r4, [r7, #584]	; 0x248
			// Coordinate
			if( DUTY_COORDINATES_REL == command.coordinate_type) {
 80056d4:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d145      	bne.n	8005768 <scaraInitDuty+0xf80>
				target_point.x 		= positionCurrent.x + command.target_point.x;
 80056dc:	4b21      	ldr	r3, [pc, #132]	; (8005764 <scaraInitDuty+0xf7c>)
 80056de:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80056e2:	e9d7 348c 	ldrd	r3, r4, [r7, #560]	; 0x230
 80056e6:	461a      	mov	r2, r3
 80056e8:	4623      	mov	r3, r4
 80056ea:	f7fa fdcf 	bl	800028c <__adddf3>
 80056ee:	4603      	mov	r3, r0
 80056f0:	460c      	mov	r4, r1
 80056f2:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
				target_point.y 		= positionCurrent.y + command.target_point.y;
 80056f6:	4b1b      	ldr	r3, [pc, #108]	; (8005764 <scaraInitDuty+0xf7c>)
 80056f8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80056fc:	e9d7 348e 	ldrd	r3, r4, [r7, #568]	; 0x238
 8005700:	461a      	mov	r2, r3
 8005702:	4623      	mov	r3, r4
 8005704:	f7fa fdc2 	bl	800028c <__adddf3>
 8005708:	4603      	mov	r3, r0
 800570a:	460c      	mov	r4, r1
 800570c:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
				target_point.z 		= positionCurrent.z + command.target_point.z;
 8005710:	4b14      	ldr	r3, [pc, #80]	; (8005764 <scaraInitDuty+0xf7c>)
 8005712:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8005716:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 800571a:	461a      	mov	r2, r3
 800571c:	4623      	mov	r3, r4
 800571e:	f7fa fdb5 	bl	800028c <__adddf3>
 8005722:	4603      	mov	r3, r0
 8005724:	460c      	mov	r4, r1
 8005726:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
				target_point.roll	= positionCurrent.roll + command.target_point.roll;
 800572a:	4b0e      	ldr	r3, [pc, #56]	; (8005764 <scaraInitDuty+0xf7c>)
 800572c:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8005730:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 8005734:	461a      	mov	r2, r3
 8005736:	4623      	mov	r3, r4
 8005738:	f7fa fda8 	bl	800028c <__adddf3>
 800573c:	4603      	mov	r3, r0
 800573e:	460c      	mov	r4, r1
 8005740:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8005744:	e027      	b.n	8005796 <scaraInitDuty+0xfae>
 8005746:	bf00      	nop
	...
 8005750:	60000000 	.word	0x60000000
 8005754:	400921fb 	.word	0x400921fb
 8005758:	20005378 	.word	0x20005378
 800575c:	20000c54 	.word	0x20000c54
 8005760:	40668000 	.word	0x40668000
 8005764:	20005e38 	.word	0x20005e38
			} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8005768:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 800576c:	2b00      	cmp	r3, #0
 800576e:	d110      	bne.n	8005792 <scaraInitDuty+0xfaa>
				target_point.x 		= command.target_point.x;
 8005770:	e9d7 348c 	ldrd	r3, r4, [r7, #560]	; 0x230
 8005774:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
				target_point.y 		= command.target_point.y;
 8005778:	e9d7 348e 	ldrd	r3, r4, [r7, #568]	; 0x238
 800577c:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
				target_point.z 		= command.target_point.z;
 8005780:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 8005784:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
				target_point.roll	= command.target_point.roll;
 8005788:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 800578c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8005790:	e001      	b.n	8005796 <scaraInitDuty+0xfae>
			} else {
				return SCARA_STATUS_ERROR_COORDINATE;
 8005792:	230c      	movs	r3, #12
 8005794:	e30c      	b.n	8005db0 <scaraInitDuty+0x15c8>
			}

			if( FALSE == kinematicInverse(&target_point, positionCurrent)) {
 8005796:	4cce      	ldr	r4, [pc, #824]	; (8005ad0 <scaraInitDuty+0x12e8>)
 8005798:	f107 05b8 	add.w	r5, r7, #184	; 0xb8
 800579c:	4668      	mov	r0, sp
 800579e:	f104 0308 	add.w	r3, r4, #8
 80057a2:	22b0      	movs	r2, #176	; 0xb0
 80057a4:	4619      	mov	r1, r3
 80057a6:	f00f ffe3 	bl	8015770 <memcpy>
 80057aa:	e894 000c 	ldmia.w	r4, {r2, r3}
 80057ae:	4628      	mov	r0, r5
 80057b0:	f7fd fd26 	bl	8003200 <kinematicInverse>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d101      	bne.n	80057be <scaraInitDuty+0xfd6>
				return SCARA_STATUS_ERROR_OVER_WORKSPACE;// Exit with error
 80057ba:	2307      	movs	r3, #7
 80057bc:	e2f8      	b.n	8005db0 <scaraInitDuty+0x15c8>
			}
			// Trajectory 4 profile
			double q[4];
			q[0] = target_point.Theta1 - positionCurrent.Theta1;
 80057be:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 80057c2:	4bc3      	ldr	r3, [pc, #780]	; (8005ad0 <scaraInitDuty+0x12e8>)
 80057c4:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 80057c8:	461a      	mov	r2, r3
 80057ca:	4623      	mov	r3, r4
 80057cc:	f7fa fd5c 	bl	8000288 <__aeabi_dsub>
 80057d0:	4603      	mov	r3, r0
 80057d2:	460c      	mov	r4, r1
 80057d4:	463a      	mov	r2, r7
 80057d6:	e9c2 3400 	strd	r3, r4, [r2]
			q[1] = target_point.Theta2 - positionCurrent.Theta2;
 80057da:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80057de:	4bbc      	ldr	r3, [pc, #752]	; (8005ad0 <scaraInitDuty+0x12e8>)
 80057e0:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 80057e4:	461a      	mov	r2, r3
 80057e6:	4623      	mov	r3, r4
 80057e8:	f7fa fd4e 	bl	8000288 <__aeabi_dsub>
 80057ec:	4603      	mov	r3, r0
 80057ee:	460c      	mov	r4, r1
 80057f0:	463a      	mov	r2, r7
 80057f2:	e9c2 3402 	strd	r3, r4, [r2, #8]
			q[2] = target_point.D3 	   - positionCurrent.D3;
 80057f6:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 80057fa:	4bb5      	ldr	r3, [pc, #724]	; (8005ad0 <scaraInitDuty+0x12e8>)
 80057fc:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8005800:	461a      	mov	r2, r3
 8005802:	4623      	mov	r3, r4
 8005804:	f7fa fd40 	bl	8000288 <__aeabi_dsub>
 8005808:	4603      	mov	r3, r0
 800580a:	460c      	mov	r4, r1
 800580c:	463a      	mov	r2, r7
 800580e:	e9c2 3404 	strd	r3, r4, [r2, #16]
			q[3] = target_point.Theta4 - positionCurrent.Theta4;
 8005812:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8005816:	4bae      	ldr	r3, [pc, #696]	; (8005ad0 <scaraInitDuty+0x12e8>)
 8005818:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 800581c:	461a      	mov	r2, r3
 800581e:	4623      	mov	r3, r4
 8005820:	f7fa fd32 	bl	8000288 <__aeabi_dsub>
 8005824:	4603      	mov	r3, r0
 8005826:	460c      	mov	r4, r1
 8005828:	463a      	mov	r2, r7
 800582a:	e9c2 3406 	strd	r3, r4, [r2, #24]

			// LSPB
			if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 800582e:	f897 31d0 	ldrb.w	r3, [r7, #464]	; 0x1d0
 8005832:	2b00      	cmp	r3, #0
 8005834:	f040 813e 	bne.w	8005ab4 <scaraInitDuty+0x12cc>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8005838:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 800583c:	2b01      	cmp	r3, #1
 800583e:	d159      	bne.n	80058f4 <scaraInitDuty+0x110c>
					for ( uint8_t i = 0; i < 4; i++) {
 8005840:	2300      	movs	r3, #0
 8005842:	f887 317b 	strb.w	r3, [r7, #379]	; 0x17b
 8005846:	e049      	b.n	80058dc <scaraInitDuty+0x10f4>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005848:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 800584c:	4aa1      	ldr	r2, [pc, #644]	; (8005ad4 <scaraInitDuty+0x12ec>)
 800584e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005852:	fb01 f303 	mul.w	r3, r1, r3
 8005856:	4413      	add	r3, r2
 8005858:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 800585c:	2200      	movs	r2, #0
 800585e:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 8005860:	f897 217b 	ldrb.w	r2, [r7, #379]	; 0x17b
 8005864:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8005868:	499a      	ldr	r1, [pc, #616]	; (8005ad4 <scaraInitDuty+0x12ec>)
 800586a:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800586e:	fb00 f202 	mul.w	r2, r0, r2
 8005872:	440a      	add	r2, r1
 8005874:	f502 6284 	add.w	r2, r2, #1056	; 0x420
 8005878:	e9c2 3400 	strd	r3, r4, [r2]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 800587c:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 8005880:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005884:	fb02 f303 	mul.w	r3, r2, r3
 8005888:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 800588c:	4a91      	ldr	r2, [pc, #580]	; (8005ad4 <scaraInitDuty+0x12ec>)
 800588e:	1898      	adds	r0, r3, r2
 8005890:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 8005894:	4a90      	ldr	r2, [pc, #576]	; (8005ad8 <scaraInitDuty+0x12f0>)
 8005896:	5cd1      	ldrb	r1, [r2, r3]
 8005898:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 800589c:	463a      	mov	r2, r7
 800589e:	00db      	lsls	r3, r3, #3
 80058a0:	4413      	add	r3, r2
 80058a2:	ed93 7b00 	vldr	d7, [r3]
 80058a6:	ed97 6bd6 	vldr	d6, [r7, #856]	; 0x358
 80058aa:	ed97 5bd8 	vldr	d5, [r7, #864]	; 0x360
 80058ae:	eeb0 2a45 	vmov.f32	s4, s10
 80058b2:	eef0 2a65 	vmov.f32	s5, s11
 80058b6:	eeb0 1a46 	vmov.f32	s2, s12
 80058ba:	eef0 1a66 	vmov.f32	s3, s13
 80058be:	2201      	movs	r2, #1
 80058c0:	eeb0 0a47 	vmov.f32	s0, s14
 80058c4:	eef0 0a67 	vmov.f32	s1, s15
 80058c8:	f000 fcc2 	bl	8006250 <scaraInitLSPB>
 80058cc:	4603      	mov	r3, r0
 80058ce:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
					for ( uint8_t i = 0; i < 4; i++) {
 80058d2:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 80058d6:	3301      	adds	r3, #1
 80058d8:	f887 317b 	strb.w	r3, [r7, #379]	; 0x17b
 80058dc:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 80058e0:	2b03      	cmp	r3, #3
 80058e2:	d9b1      	bls.n	8005848 <scaraInitDuty+0x1060>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

					}
					myDUTY.time_total = command.time_total;
 80058e4:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 80058e8:	4a7a      	ldr	r2, [pc, #488]	; (8005ad4 <scaraInitDuty+0x12ec>)
 80058ea:	f602 1248 	addw	r2, r2, #2376	; 0x948
 80058ee:	e9c2 3400 	strd	r3, r4, [r2]
 80058f2:	e22f      	b.n	8005d54 <scaraInitDuty+0x156c>
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 80058f4:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	f040 80d9 	bne.w	8005ab0 <scaraInitDuty+0x12c8>
					for ( uint8_t i = 0; i < 4; i++) {
 80058fe:	2300      	movs	r3, #0
 8005900:	f887 317a 	strb.w	r3, [r7, #378]	; 0x17a
 8005904:	e03b      	b.n	800597e <scaraInitDuty+0x1196>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005906:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 800590a:	4a72      	ldr	r2, [pc, #456]	; (8005ad4 <scaraInitDuty+0x12ec>)
 800590c:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005910:	fb01 f303 	mul.w	r3, r1, r3
 8005914:	4413      	add	r3, r2
 8005916:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 800591a:	2200      	movs	r2, #0
 800591c:	701a      	strb	r2, [r3, #0]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 800591e:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 8005922:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005926:	fb02 f303 	mul.w	r3, r2, r3
 800592a:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 800592e:	4a69      	ldr	r2, [pc, #420]	; (8005ad4 <scaraInitDuty+0x12ec>)
 8005930:	1898      	adds	r0, r3, r2
 8005932:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 8005936:	4a68      	ldr	r2, [pc, #416]	; (8005ad8 <scaraInitDuty+0x12f0>)
 8005938:	5cd1      	ldrb	r1, [r2, r3]
 800593a:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 800593e:	463a      	mov	r2, r7
 8005940:	00db      	lsls	r3, r3, #3
 8005942:	4413      	add	r3, r2
 8005944:	ed93 7b00 	vldr	d7, [r3]
 8005948:	ed97 6bd6 	vldr	d6, [r7, #856]	; 0x358
 800594c:	ed97 5bd8 	vldr	d5, [r7, #864]	; 0x360
 8005950:	eeb0 2a45 	vmov.f32	s4, s10
 8005954:	eef0 2a65 	vmov.f32	s5, s11
 8005958:	eeb0 1a46 	vmov.f32	s2, s12
 800595c:	eef0 1a66 	vmov.f32	s3, s13
 8005960:	2200      	movs	r2, #0
 8005962:	eeb0 0a47 	vmov.f32	s0, s14
 8005966:	eef0 0a67 	vmov.f32	s1, s15
 800596a:	f000 fc71 	bl	8006250 <scaraInitLSPB>
 800596e:	4603      	mov	r3, r0
 8005970:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
					for ( uint8_t i = 0; i < 4; i++) {
 8005974:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 8005978:	3301      	adds	r3, #1
 800597a:	f887 317a 	strb.w	r3, [r7, #378]	; 0x17a
 800597e:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 8005982:	2b03      	cmp	r3, #3
 8005984:	d9bf      	bls.n	8005906 <scaraInitDuty+0x111e>
											q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
					}
					myDUTY.time_total = 0;
 8005986:	4b53      	ldr	r3, [pc, #332]	; (8005ad4 <scaraInitDuty+0x12ec>)
 8005988:	f603 1248 	addw	r2, r3, #2376	; 0x948
 800598c:	f04f 0300 	mov.w	r3, #0
 8005990:	f04f 0400 	mov.w	r4, #0
 8005994:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 8005998:	2300      	movs	r3, #0
 800599a:	f887 3179 	strb.w	r3, [r7, #377]	; 0x179
 800599e:	e02d      	b.n	80059fc <scaraInitDuty+0x1214>
						if ( myDUTY.joint.trajectory[i].lspb.Tf > myDUTY.time_total) {
 80059a0:	f897 3179 	ldrb.w	r3, [r7, #377]	; 0x179
 80059a4:	4a4b      	ldr	r2, [pc, #300]	; (8005ad4 <scaraInitDuty+0x12ec>)
 80059a6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80059aa:	fb01 f303 	mul.w	r3, r1, r3
 80059ae:	4413      	add	r3, r2
 80059b0:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80059b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80059b8:	4b46      	ldr	r3, [pc, #280]	; (8005ad4 <scaraInitDuty+0x12ec>)
 80059ba:	f603 1348 	addw	r3, r3, #2376	; 0x948
 80059be:	e9d3 3400 	ldrd	r3, r4, [r3]
 80059c2:	461a      	mov	r2, r3
 80059c4:	4623      	mov	r3, r4
 80059c6:	f7fb f8a7 	bl	8000b18 <__aeabi_dcmpgt>
 80059ca:	4603      	mov	r3, r0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d010      	beq.n	80059f2 <scaraInitDuty+0x120a>
							myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 80059d0:	f897 3179 	ldrb.w	r3, [r7, #377]	; 0x179
 80059d4:	4a3f      	ldr	r2, [pc, #252]	; (8005ad4 <scaraInitDuty+0x12ec>)
 80059d6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80059da:	fb01 f303 	mul.w	r3, r1, r3
 80059de:	4413      	add	r3, r2
 80059e0:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80059e4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80059e8:	4a3a      	ldr	r2, [pc, #232]	; (8005ad4 <scaraInitDuty+0x12ec>)
 80059ea:	f602 1248 	addw	r2, r2, #2376	; 0x948
 80059ee:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 80059f2:	f897 3179 	ldrb.w	r3, [r7, #377]	; 0x179
 80059f6:	3301      	adds	r3, #1
 80059f8:	f887 3179 	strb.w	r3, [r7, #377]	; 0x179
 80059fc:	f897 3179 	ldrb.w	r3, [r7, #377]	; 0x179
 8005a00:	2b03      	cmp	r3, #3
 8005a02:	d9cd      	bls.n	80059a0 <scaraInitDuty+0x11b8>
						}
					}
					for ( uint8_t i = 0; i < 4; i++) {
 8005a04:	2300      	movs	r3, #0
 8005a06:	f887 3178 	strb.w	r3, [r7, #376]	; 0x178
 8005a0a:	e04c      	b.n	8005aa6 <scaraInitDuty+0x12be>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005a0c:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8005a10:	4a30      	ldr	r2, [pc, #192]	; (8005ad4 <scaraInitDuty+0x12ec>)
 8005a12:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005a16:	fb01 f303 	mul.w	r3, r1, r3
 8005a1a:	4413      	add	r3, r2
 8005a1c:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005a20:	2200      	movs	r2, #0
 8005a22:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].lspb.Tf = myDUTY.time_total;
 8005a24:	f897 2178 	ldrb.w	r2, [r7, #376]	; 0x178
 8005a28:	4b2a      	ldr	r3, [pc, #168]	; (8005ad4 <scaraInitDuty+0x12ec>)
 8005a2a:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8005a2e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005a32:	4928      	ldr	r1, [pc, #160]	; (8005ad4 <scaraInitDuty+0x12ec>)
 8005a34:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8005a38:	fb00 f202 	mul.w	r2, r0, r2
 8005a3c:	440a      	add	r2, r1
 8005a3e:	f502 6284 	add.w	r2, r2, #1056	; 0x420
 8005a42:	e9c2 3400 	strd	r3, r4, [r2]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8005a46:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8005a4a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005a4e:	fb02 f303 	mul.w	r3, r2, r3
 8005a52:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8005a56:	4a1f      	ldr	r2, [pc, #124]	; (8005ad4 <scaraInitDuty+0x12ec>)
 8005a58:	1898      	adds	r0, r3, r2
 8005a5a:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8005a5e:	4a1e      	ldr	r2, [pc, #120]	; (8005ad8 <scaraInitDuty+0x12f0>)
 8005a60:	5cd1      	ldrb	r1, [r2, r3]
 8005a62:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8005a66:	463a      	mov	r2, r7
 8005a68:	00db      	lsls	r3, r3, #3
 8005a6a:	4413      	add	r3, r2
 8005a6c:	ed93 7b00 	vldr	d7, [r3]
 8005a70:	ed97 6bd6 	vldr	d6, [r7, #856]	; 0x358
 8005a74:	ed97 5bd8 	vldr	d5, [r7, #864]	; 0x360
 8005a78:	eeb0 2a45 	vmov.f32	s4, s10
 8005a7c:	eef0 2a65 	vmov.f32	s5, s11
 8005a80:	eeb0 1a46 	vmov.f32	s2, s12
 8005a84:	eef0 1a66 	vmov.f32	s3, s13
 8005a88:	2201      	movs	r2, #1
 8005a8a:	eeb0 0a47 	vmov.f32	s0, s14
 8005a8e:	eef0 0a67 	vmov.f32	s1, s15
 8005a92:	f000 fbdd 	bl	8006250 <scaraInitLSPB>
 8005a96:	4603      	mov	r3, r0
 8005a98:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
					for ( uint8_t i = 0; i < 4; i++) {
 8005a9c:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	f887 3178 	strb.w	r3, [r7, #376]	; 0x178
 8005aa6:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8005aaa:	2b03      	cmp	r3, #3
 8005aac:	d9ae      	bls.n	8005a0c <scaraInitDuty+0x1224>
 8005aae:	e151      	b.n	8005d54 <scaraInitDuty+0x156c>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					}

				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 8005ab0:	2308      	movs	r3, #8
 8005ab2:	e17d      	b.n	8005db0 <scaraInitDuty+0x15c8>
				}
				// SCURVE
			} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 8005ab4:	f897 31d0 	ldrb.w	r3, [r7, #464]	; 0x1d0
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	f040 8145 	bne.w	8005d48 <scaraInitDuty+0x1560>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8005abe:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d160      	bne.n	8005b88 <scaraInitDuty+0x13a0>
					for ( uint8_t i = 0; i < 4; i++) {
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
 8005acc:	e050      	b.n	8005b70 <scaraInitDuty+0x1388>
 8005ace:	bf00      	nop
 8005ad0:	20005e38 	.word	0x20005e38
 8005ad4:	20005378 	.word	0x20005378
 8005ad8:	20000c54 	.word	0x20000c54
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005adc:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8005ae0:	4ab7      	ldr	r2, [pc, #732]	; (8005dc0 <scaraInitDuty+0x15d8>)
 8005ae2:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005ae6:	fb01 f303 	mul.w	r3, r1, r3
 8005aea:	4413      	add	r3, r2
 8005aec:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005af0:	2201      	movs	r2, #1
 8005af2:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 8005af4:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 8005af8:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8005afc:	49b0      	ldr	r1, [pc, #704]	; (8005dc0 <scaraInitDuty+0x15d8>)
 8005afe:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8005b02:	fb00 f202 	mul.w	r2, r0, r2
 8005b06:	440a      	add	r2, r1
 8005b08:	f502 6296 	add.w	r2, r2, #1200	; 0x4b0
 8005b0c:	e9c2 3400 	strd	r3, r4, [r2]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8005b10:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8005b14:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005b18:	fb02 f303 	mul.w	r3, r2, r3
 8005b1c:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8005b20:	4aa7      	ldr	r2, [pc, #668]	; (8005dc0 <scaraInitDuty+0x15d8>)
 8005b22:	1898      	adds	r0, r3, r2
 8005b24:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8005b28:	4aa6      	ldr	r2, [pc, #664]	; (8005dc4 <scaraInitDuty+0x15dc>)
 8005b2a:	5cd1      	ldrb	r1, [r2, r3]
 8005b2c:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8005b30:	463a      	mov	r2, r7
 8005b32:	00db      	lsls	r3, r3, #3
 8005b34:	4413      	add	r3, r2
 8005b36:	ed93 7b00 	vldr	d7, [r3]
 8005b3a:	ed97 6bd6 	vldr	d6, [r7, #856]	; 0x358
 8005b3e:	ed97 5bd8 	vldr	d5, [r7, #864]	; 0x360
 8005b42:	eeb0 2a45 	vmov.f32	s4, s10
 8005b46:	eef0 2a65 	vmov.f32	s5, s11
 8005b4a:	eeb0 1a46 	vmov.f32	s2, s12
 8005b4e:	eef0 1a66 	vmov.f32	s3, s13
 8005b52:	2201      	movs	r2, #1
 8005b54:	eeb0 0a47 	vmov.f32	s0, s14
 8005b58:	eef0 0a67 	vmov.f32	s1, s15
 8005b5c:	f000 ff64 	bl	8006a28 <scaraInitScurve>
 8005b60:	4603      	mov	r3, r0
 8005b62:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
					for ( uint8_t i = 0; i < 4; i++) {
 8005b66:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
 8005b70:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8005b74:	2b03      	cmp	r3, #3
 8005b76:	d9b1      	bls.n	8005adc <scaraInitDuty+0x12f4>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

					}
					myDUTY.time_total = command.time_total;
 8005b78:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8005b7c:	4a90      	ldr	r2, [pc, #576]	; (8005dc0 <scaraInitDuty+0x15d8>)
 8005b7e:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8005b82:	e9c2 3400 	strd	r3, r4, [r2]
 8005b86:	e0e5      	b.n	8005d54 <scaraInitDuty+0x156c>
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8005b88:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	f040 80d9 	bne.w	8005d44 <scaraInitDuty+0x155c>
					for ( uint8_t i = 0; i < 4; i++) {
 8005b92:	2300      	movs	r3, #0
 8005b94:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
 8005b98:	e03b      	b.n	8005c12 <scaraInitDuty+0x142a>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005b9a:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8005b9e:	4a88      	ldr	r2, [pc, #544]	; (8005dc0 <scaraInitDuty+0x15d8>)
 8005ba0:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005ba4:	fb01 f303 	mul.w	r3, r1, r3
 8005ba8:	4413      	add	r3, r2
 8005baa:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005bae:	2201      	movs	r2, #1
 8005bb0:	701a      	strb	r2, [r3, #0]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8005bb2:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8005bb6:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005bba:	fb02 f303 	mul.w	r3, r2, r3
 8005bbe:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8005bc2:	4a7f      	ldr	r2, [pc, #508]	; (8005dc0 <scaraInitDuty+0x15d8>)
 8005bc4:	1898      	adds	r0, r3, r2
 8005bc6:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8005bca:	4a7e      	ldr	r2, [pc, #504]	; (8005dc4 <scaraInitDuty+0x15dc>)
 8005bcc:	5cd1      	ldrb	r1, [r2, r3]
 8005bce:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8005bd2:	463a      	mov	r2, r7
 8005bd4:	00db      	lsls	r3, r3, #3
 8005bd6:	4413      	add	r3, r2
 8005bd8:	ed93 7b00 	vldr	d7, [r3]
 8005bdc:	ed97 6bd6 	vldr	d6, [r7, #856]	; 0x358
 8005be0:	ed97 5bd8 	vldr	d5, [r7, #864]	; 0x360
 8005be4:	eeb0 2a45 	vmov.f32	s4, s10
 8005be8:	eef0 2a65 	vmov.f32	s5, s11
 8005bec:	eeb0 1a46 	vmov.f32	s2, s12
 8005bf0:	eef0 1a66 	vmov.f32	s3, s13
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	eeb0 0a47 	vmov.f32	s0, s14
 8005bfa:	eef0 0a67 	vmov.f32	s1, s15
 8005bfe:	f000 ff13 	bl	8006a28 <scaraInitScurve>
 8005c02:	4603      	mov	r3, r0
 8005c04:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
					for ( uint8_t i = 0; i < 4; i++) {
 8005c08:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
 8005c12:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8005c16:	2b03      	cmp	r3, #3
 8005c18:	d9bf      	bls.n	8005b9a <scaraInitDuty+0x13b2>
											q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
					}
					myDUTY.time_total = 0;
 8005c1a:	4b69      	ldr	r3, [pc, #420]	; (8005dc0 <scaraInitDuty+0x15d8>)
 8005c1c:	f603 1248 	addw	r2, r3, #2376	; 0x948
 8005c20:	f04f 0300 	mov.w	r3, #0
 8005c24:	f04f 0400 	mov.w	r4, #0
 8005c28:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	f887 3175 	strb.w	r3, [r7, #373]	; 0x175
 8005c32:	e02d      	b.n	8005c90 <scaraInitDuty+0x14a8>
						if ( myDUTY.joint.trajectory[i].scurve.Tf > myDUTY.time_total) {
 8005c34:	f897 3175 	ldrb.w	r3, [r7, #373]	; 0x175
 8005c38:	4a61      	ldr	r2, [pc, #388]	; (8005dc0 <scaraInitDuty+0x15d8>)
 8005c3a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005c3e:	fb01 f303 	mul.w	r3, r1, r3
 8005c42:	4413      	add	r3, r2
 8005c44:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8005c48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c4c:	4b5c      	ldr	r3, [pc, #368]	; (8005dc0 <scaraInitDuty+0x15d8>)
 8005c4e:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8005c52:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005c56:	461a      	mov	r2, r3
 8005c58:	4623      	mov	r3, r4
 8005c5a:	f7fa ff5d 	bl	8000b18 <__aeabi_dcmpgt>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d010      	beq.n	8005c86 <scaraInitDuty+0x149e>
							myDUTY.time_total = myDUTY.joint.trajectory[i].scurve.Tf;
 8005c64:	f897 3175 	ldrb.w	r3, [r7, #373]	; 0x175
 8005c68:	4a55      	ldr	r2, [pc, #340]	; (8005dc0 <scaraInitDuty+0x15d8>)
 8005c6a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005c6e:	fb01 f303 	mul.w	r3, r1, r3
 8005c72:	4413      	add	r3, r2
 8005c74:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8005c78:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005c7c:	4a50      	ldr	r2, [pc, #320]	; (8005dc0 <scaraInitDuty+0x15d8>)
 8005c7e:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8005c82:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 8005c86:	f897 3175 	ldrb.w	r3, [r7, #373]	; 0x175
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	f887 3175 	strb.w	r3, [r7, #373]	; 0x175
 8005c90:	f897 3175 	ldrb.w	r3, [r7, #373]	; 0x175
 8005c94:	2b03      	cmp	r3, #3
 8005c96:	d9cd      	bls.n	8005c34 <scaraInitDuty+0x144c>
						}
					}
					for ( uint8_t i = 0; i < 4; i++) {
 8005c98:	2300      	movs	r3, #0
 8005c9a:	f887 3174 	strb.w	r3, [r7, #372]	; 0x174
 8005c9e:	e04c      	b.n	8005d3a <scaraInitDuty+0x1552>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005ca0:	f897 3174 	ldrb.w	r3, [r7, #372]	; 0x174
 8005ca4:	4a46      	ldr	r2, [pc, #280]	; (8005dc0 <scaraInitDuty+0x15d8>)
 8005ca6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005caa:	fb01 f303 	mul.w	r3, r1, r3
 8005cae:	4413      	add	r3, r2
 8005cb0:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].scurve.Tf = myDUTY.time_total;
 8005cb8:	f897 2174 	ldrb.w	r2, [r7, #372]	; 0x174
 8005cbc:	4b40      	ldr	r3, [pc, #256]	; (8005dc0 <scaraInitDuty+0x15d8>)
 8005cbe:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8005cc2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005cc6:	493e      	ldr	r1, [pc, #248]	; (8005dc0 <scaraInitDuty+0x15d8>)
 8005cc8:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8005ccc:	fb00 f202 	mul.w	r2, r0, r2
 8005cd0:	440a      	add	r2, r1
 8005cd2:	f502 6296 	add.w	r2, r2, #1200	; 0x4b0
 8005cd6:	e9c2 3400 	strd	r3, r4, [r2]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8005cda:	f897 3174 	ldrb.w	r3, [r7, #372]	; 0x174
 8005cde:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005ce2:	fb02 f303 	mul.w	r3, r2, r3
 8005ce6:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8005cea:	4a35      	ldr	r2, [pc, #212]	; (8005dc0 <scaraInitDuty+0x15d8>)
 8005cec:	1898      	adds	r0, r3, r2
 8005cee:	f897 3174 	ldrb.w	r3, [r7, #372]	; 0x174
 8005cf2:	4a34      	ldr	r2, [pc, #208]	; (8005dc4 <scaraInitDuty+0x15dc>)
 8005cf4:	5cd1      	ldrb	r1, [r2, r3]
 8005cf6:	f897 3174 	ldrb.w	r3, [r7, #372]	; 0x174
 8005cfa:	463a      	mov	r2, r7
 8005cfc:	00db      	lsls	r3, r3, #3
 8005cfe:	4413      	add	r3, r2
 8005d00:	ed93 7b00 	vldr	d7, [r3]
 8005d04:	ed97 6bd6 	vldr	d6, [r7, #856]	; 0x358
 8005d08:	ed97 5bd8 	vldr	d5, [r7, #864]	; 0x360
 8005d0c:	eeb0 2a45 	vmov.f32	s4, s10
 8005d10:	eef0 2a65 	vmov.f32	s5, s11
 8005d14:	eeb0 1a46 	vmov.f32	s2, s12
 8005d18:	eef0 1a66 	vmov.f32	s3, s13
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	eeb0 0a47 	vmov.f32	s0, s14
 8005d22:	eef0 0a67 	vmov.f32	s1, s15
 8005d26:	f000 fe7f 	bl	8006a28 <scaraInitScurve>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
					for ( uint8_t i = 0; i < 4; i++) {
 8005d30:	f897 3174 	ldrb.w	r3, [r7, #372]	; 0x174
 8005d34:	3301      	adds	r3, #1
 8005d36:	f887 3174 	strb.w	r3, [r7, #372]	; 0x174
 8005d3a:	f897 3174 	ldrb.w	r3, [r7, #372]	; 0x174
 8005d3e:	2b03      	cmp	r3, #3
 8005d40:	d9ae      	bls.n	8005ca0 <scaraInitDuty+0x14b8>
 8005d42:	e007      	b.n	8005d54 <scaraInitDuty+0x156c>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					}

				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 8005d44:	2308      	movs	r3, #8
 8005d46:	e033      	b.n	8005db0 <scaraInitDuty+0x15c8>
				}

			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 8005d48:	2305      	movs	r3, #5
 8005d4a:	e031      	b.n	8005db0 <scaraInitDuty+0x15c8>
			}

		} else {
			return SCARA_STATUS_ERROR_JOINT;
 8005d4c:	2304      	movs	r3, #4
 8005d4e:	e02f      	b.n	8005db0 <scaraInitDuty+0x15c8>
		}

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 8005d50:	2302      	movs	r3, #2
 8005d52:	e02d      	b.n	8005db0 <scaraInitDuty+0x15c8>
	}

	// Reset time and distance
	positionCurrent.t = 0;
 8005d54:	4a1c      	ldr	r2, [pc, #112]	; (8005dc8 <scaraInitDuty+0x15e0>)
 8005d56:	f04f 0300 	mov.w	r3, #0
 8005d5a:	f04f 0400 	mov.w	r4, #0
 8005d5e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	positionCurrent.total_time = myDUTY.time_total;
 8005d62:	4b17      	ldr	r3, [pc, #92]	; (8005dc0 <scaraInitDuty+0x15d8>)
 8005d64:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8005d68:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005d6c:	4a16      	ldr	r2, [pc, #88]	; (8005dc8 <scaraInitDuty+0x15e0>)
 8005d6e:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	positionNext.t = 0;
 8005d72:	4a16      	ldr	r2, [pc, #88]	; (8005dcc <scaraInitDuty+0x15e4>)
 8005d74:	f04f 0300 	mov.w	r3, #0
 8005d78:	f04f 0400 	mov.w	r4, #0
 8005d7c:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	positionNext.total_time = myDUTY.time_total;
 8005d80:	4b0f      	ldr	r3, [pc, #60]	; (8005dc0 <scaraInitDuty+0x15d8>)
 8005d82:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8005d86:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005d8a:	4a10      	ldr	r2, [pc, #64]	; (8005dcc <scaraInitDuty+0x15e4>)
 8005d8c:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	positionTrue.t = 0;
 8005d90:	4a0f      	ldr	r2, [pc, #60]	; (8005dd0 <scaraInitDuty+0x15e8>)
 8005d92:	f04f 0300 	mov.w	r3, #0
 8005d96:	f04f 0400 	mov.w	r4, #0
 8005d9a:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	positionTrue.total_time = myDUTY.time_total;
 8005d9e:	4b08      	ldr	r3, [pc, #32]	; (8005dc0 <scaraInitDuty+0x15d8>)
 8005da0:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8005da4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005da8:	4a09      	ldr	r2, [pc, #36]	; (8005dd0 <scaraInitDuty+0x15e8>)
 8005daa:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

	return SCARA_STATUS_OK;
 8005dae:	2300      	movs	r3, #0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	f507 77d8 	add.w	r7, r7, #432	; 0x1b0
 8005db6:	46bd      	mov	sp, r7
 8005db8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8005dbc:	b004      	add	sp, #16
 8005dbe:	4770      	bx	lr
 8005dc0:	20005378 	.word	0x20005378
 8005dc4:	20000c54 	.word	0x20000c54
 8005dc8:	20005e38 	.word	0x20005e38
 8005dcc:	20005fa8 	.word	0x20005fa8
 8005dd0:	20005ef0 	.word	0x20005ef0

08005dd4 <scaraInitLine>:

/* Compute straight line path parameters */
SCARA_StatusTypeDef	scaraInitLine		(Path_Line_TypeDef *line,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end) {
 8005dd4:	b082      	sub	sp, #8
 8005dd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dd8:	b0af      	sub	sp, #188	; 0xbc
 8005dda:	af2c      	add	r7, sp, #176	; 0xb0
 8005ddc:	6078      	str	r0, [r7, #4]
 8005dde:	f107 0120 	add.w	r1, r7, #32
 8005de2:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE ==  kinematicInverse(&end, start)) {
 8005de6:	f107 04d8 	add.w	r4, r7, #216	; 0xd8
 8005dea:	4668      	mov	r0, sp
 8005dec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005df0:	22b0      	movs	r2, #176	; 0xb0
 8005df2:	4619      	mov	r1, r3
 8005df4:	f00f fcbc 	bl	8015770 <memcpy>
 8005df8:	f107 0320 	add.w	r3, r7, #32
 8005dfc:	cb0c      	ldmia	r3, {r2, r3}
 8005dfe:	4620      	mov	r0, r4
 8005e00:	f7fd f9fe 	bl	8003200 <kinematicInverse>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d101      	bne.n	8005e0e <scaraInitLine+0x3a>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005e0a:	2307      	movs	r3, #7
 8005e0c:	e09e      	b.n	8005f4c <scaraInitLine+0x178>
	}
	// Init line params
	line->x1 = end.x;
 8005e0e:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	e9c2 3402 	strd	r3, r4, [r2, #8]
	line->y1 = end.y;
 8005e18:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	e9c2 3406 	strd	r3, r4, [r2, #24]
	line->z1 = end.z;
 8005e22:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	line->x0 = start.x;
 8005e2c:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	e9c2 3400 	strd	r3, r4, [r2]
	line->y0 = start.y;
 8005e36:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	e9c2 3404 	strd	r3, r4, [r2, #16]
	line->z0 = start.z;
 8005e40:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	e9c2 3408 	strd	r3, r4, [r2, #32]
	line->denta_x = end.x  -  start.x;
 8005e4a:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8005e4e:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8005e52:	461a      	mov	r2, r3
 8005e54:	4623      	mov	r3, r4
 8005e56:	f7fa fa17 	bl	8000288 <__aeabi_dsub>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	460c      	mov	r4, r1
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	line->denta_y = end.y  -  start.y;
 8005e64:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8005e68:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	4623      	mov	r3, r4
 8005e70:	f7fa fa0a 	bl	8000288 <__aeabi_dsub>
 8005e74:	4603      	mov	r3, r0
 8005e76:	460c      	mov	r4, r1
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	line->denta_z = end.z  -  start.z;
 8005e7e:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8005e82:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8005e86:	461a      	mov	r2, r3
 8005e88:	4623      	mov	r3, r4
 8005e8a:	f7fa f9fd 	bl	8000288 <__aeabi_dsub>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	460c      	mov	r4, r1
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	4623      	mov	r3, r4
 8005ea8:	f7fa fba6 	bl	80005f8 <__aeabi_dmul>
 8005eac:	4603      	mov	r3, r0
 8005eae:	460c      	mov	r4, r1
 8005eb0:	461d      	mov	r5, r3
 8005eb2:	4626      	mov	r6, r4
			       +(line->denta_y)*(line->denta_y)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	4623      	mov	r3, r4
 8005ec4:	f7fa fb98 	bl	80005f8 <__aeabi_dmul>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	460c      	mov	r4, r1
 8005ecc:	461a      	mov	r2, r3
 8005ece:	4623      	mov	r3, r4
 8005ed0:	4628      	mov	r0, r5
 8005ed2:	4631      	mov	r1, r6
 8005ed4:	f7fa f9da 	bl	800028c <__adddf3>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	460c      	mov	r4, r1
 8005edc:	461d      	mov	r5, r3
 8005ede:	4626      	mov	r6, r4
				   +(line->denta_z)*(line->denta_z));
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
 8005eec:	461a      	mov	r2, r3
 8005eee:	4623      	mov	r3, r4
 8005ef0:	f7fa fb82 	bl	80005f8 <__aeabi_dmul>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	460c      	mov	r4, r1
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 8005ef8:	461a      	mov	r2, r3
 8005efa:	4623      	mov	r3, r4
 8005efc:	4628      	mov	r0, r5
 8005efe:	4631      	mov	r1, r6
 8005f00:	f7fa f9c4 	bl	800028c <__adddf3>
 8005f04:	4603      	mov	r3, r0
 8005f06:	460c      	mov	r4, r1
 8005f08:	ec44 3b17 	vmov	d7, r3, r4
 8005f0c:	eeb0 0a47 	vmov.f32	s0, s14
 8005f10:	eef0 0a67 	vmov.f32	s1, s15
 8005f14:	f013 fb42 	bl	801959c <sqrt>
 8005f18:	eeb0 7a40 	vmov.f32	s14, s0
 8005f1c:	eef0 7a60 	vmov.f32	s15, s1
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	line->x_current = line->x0;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	line->y_current = line->y0;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	line->z_current = line->z0;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	return SCARA_STATUS_OK;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	370c      	adds	r7, #12
 8005f50:	46bd      	mov	sp, r7
 8005f52:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8005f56:	b002      	add	sp, #8
 8005f58:	4770      	bx	lr
 8005f5a:	0000      	movs	r0, r0
 8005f5c:	0000      	movs	r0, r0
	...

08005f60 <scaraInitCircle>:
/* Compute circular path parameters */
SCARA_StatusTypeDef	scaraInitCircle		(Path_Circle_TypeDef *circle,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end,
										SCARA_PositionTypeDef center,
										int32_t dir){
 8005f60:	b082      	sub	sp, #8
 8005f62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005f66:	b0c1      	sub	sp, #260	; 0x104
 8005f68:	af2c      	add	r7, sp, #176	; 0xb0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8005f70:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE == kinematicInverse(&end, start) ) {
 8005f74:	f507 7694 	add.w	r6, r7, #296	; 0x128
 8005f78:	4668      	mov	r0, sp
 8005f7a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005f7e:	22b0      	movs	r2, #176	; 0xb0
 8005f80:	4619      	mov	r1, r3
 8005f82:	f00f fbf5 	bl	8015770 <memcpy>
 8005f86:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005f8a:	cb0c      	ldmia	r3, {r2, r3}
 8005f8c:	4630      	mov	r0, r6
 8005f8e:	f7fd f937 	bl	8003200 <kinematicInverse>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d101      	bne.n	8005f9c <scaraInitCircle+0x3c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005f98:	2307      	movs	r3, #7
 8005f9a:	e146      	b.n	800622a <scaraInitCircle+0x2ca>
	}

	if( 1 != dir && -1 != dir) {
 8005f9c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d006      	beq.n	8005fb2 <scaraInitCircle+0x52>
 8005fa4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8005fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fac:	d001      	beq.n	8005fb2 <scaraInitCircle+0x52>
		return SCARA_STATUS_ERROR_PARA;// error direction param !!!
 8005fae:	2306      	movs	r3, #6
 8005fb0:	e13b      	b.n	800622a <scaraInitCircle+0x2ca>
	}

	double v_x_start, v_y_start, v_x_stop, v_y_stop;
	double r1, r2, angle_start, angle_stop, delta_angle;
	v_x_start = start.x - center.x;
 8005fb2:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8005fb6:	e9d7 238a 	ldrd	r2, r3, [r7, #552]	; 0x228
 8005fba:	f7fa f965 	bl	8000288 <__aeabi_dsub>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	v_y_start = start.y - center.y;
 8005fc6:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8005fca:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 8005fce:	f7fa f95b 	bl	8000288 <__aeabi_dsub>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	v_x_stop  = end.x  - center.x;
 8005fda:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8005fde:	e9d7 238a 	ldrd	r2, r3, [r7, #552]	; 0x228
 8005fe2:	f7fa f951 	bl	8000288 <__aeabi_dsub>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	460b      	mov	r3, r1
 8005fea:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	v_y_stop  = end.y  - center.y;
 8005fee:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8005ff2:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 8005ff6:	f7fa f947 	bl	8000288 <__aeabi_dsub>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	r1 = sqrt(v_x_start*v_x_start + v_y_start*v_y_start);
 8006002:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006006:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800600a:	f7fa faf5 	bl	80005f8 <__aeabi_dmul>
 800600e:	4602      	mov	r2, r0
 8006010:	460b      	mov	r3, r1
 8006012:	4690      	mov	r8, r2
 8006014:	4699      	mov	r9, r3
 8006016:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800601a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800601e:	f7fa faeb 	bl	80005f8 <__aeabi_dmul>
 8006022:	4602      	mov	r2, r0
 8006024:	460b      	mov	r3, r1
 8006026:	4640      	mov	r0, r8
 8006028:	4649      	mov	r1, r9
 800602a:	f7fa f92f 	bl	800028c <__adddf3>
 800602e:	4602      	mov	r2, r0
 8006030:	460b      	mov	r3, r1
 8006032:	ec43 2b17 	vmov	d7, r2, r3
 8006036:	eeb0 0a47 	vmov.f32	s0, s14
 800603a:	eef0 0a67 	vmov.f32	s1, s15
 800603e:	f013 faad 	bl	801959c <sqrt>
 8006042:	ed87 0b08 	vstr	d0, [r7, #32]
	r2 = sqrt(v_x_stop*v_x_stop + v_y_stop*v_y_stop);
 8006046:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800604a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800604e:	f7fa fad3 	bl	80005f8 <__aeabi_dmul>
 8006052:	4602      	mov	r2, r0
 8006054:	460b      	mov	r3, r1
 8006056:	4690      	mov	r8, r2
 8006058:	4699      	mov	r9, r3
 800605a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800605e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006062:	f7fa fac9 	bl	80005f8 <__aeabi_dmul>
 8006066:	4602      	mov	r2, r0
 8006068:	460b      	mov	r3, r1
 800606a:	4640      	mov	r0, r8
 800606c:	4649      	mov	r1, r9
 800606e:	f7fa f90d 	bl	800028c <__adddf3>
 8006072:	4602      	mov	r2, r0
 8006074:	460b      	mov	r3, r1
 8006076:	ec43 2b17 	vmov	d7, r2, r3
 800607a:	eeb0 0a47 	vmov.f32	s0, s14
 800607e:	eef0 0a67 	vmov.f32	s1, s15
 8006082:	f013 fa8b 	bl	801959c <sqrt>
 8006086:	ed87 0b06 	vstr	d0, [r7, #24]

	if( 1.0 < fabs(r1 - r2)) {
 800608a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800608e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006092:	f7fa f8f9 	bl	8000288 <__aeabi_dsub>
 8006096:	4602      	mov	r2, r0
 8006098:	460b      	mov	r3, r1
 800609a:	4614      	mov	r4, r2
 800609c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80060a0:	f04f 0200 	mov.w	r2, #0
 80060a4:	4b68      	ldr	r3, [pc, #416]	; (8006248 <scaraInitCircle+0x2e8>)
 80060a6:	4620      	mov	r0, r4
 80060a8:	4629      	mov	r1, r5
 80060aa:	f7fa fd35 	bl	8000b18 <__aeabi_dcmpgt>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d001      	beq.n	80060b8 <scaraInitCircle+0x158>
		return SCARA_STATUS_ERROR_PARA; //start & stop are not in a circle together !!
 80060b4:	2306      	movs	r3, #6
 80060b6:	e0b8      	b.n	800622a <scaraInitCircle+0x2ca>
	}

	if (r1 < 0.1 || r2 < 0.1) {
 80060b8:	a35f      	add	r3, pc, #380	; (adr r3, 8006238 <scaraInitCircle+0x2d8>)
 80060ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060be:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80060c2:	f7fa fd0b 	bl	8000adc <__aeabi_dcmplt>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d109      	bne.n	80060e0 <scaraInitCircle+0x180>
 80060cc:	a35a      	add	r3, pc, #360	; (adr r3, 8006238 <scaraInitCircle+0x2d8>)
 80060ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80060d6:	f7fa fd01 	bl	8000adc <__aeabi_dcmplt>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d001      	beq.n	80060e4 <scaraInitCircle+0x184>
		return SCARA_STATUS_ERROR_PARA; //start and center almost in the same phace, radius = 0 !!
 80060e0:	2306      	movs	r3, #6
 80060e2:	e0a2      	b.n	800622a <scaraInitCircle+0x2ca>
	}

	angle_start = atan2(v_y_start, v_x_start);
 80060e4:	ed97 1b10 	vldr	d1, [r7, #64]	; 0x40
 80060e8:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80060ec:	f013 fa54 	bl	8019598 <atan2>
 80060f0:	ed87 0b04 	vstr	d0, [r7, #16]
	angle_stop  = atan2(v_y_stop, v_x_stop);
 80060f4:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 80060f8:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 80060fc:	f013 fa4c 	bl	8019598 <atan2>
 8006100:	ed87 0b02 	vstr	d0, [r7, #8]
	delta_angle = angle_stop - angle_start;
 8006104:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006108:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800610c:	f7fa f8bc 	bl	8000288 <__aeabi_dsub>
 8006110:	4603      	mov	r3, r0
 8006112:	460c      	mov	r4, r1
 8006114:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

	if ( 0 > delta_angle) {
 8006118:	f04f 0200 	mov.w	r2, #0
 800611c:	f04f 0300 	mov.w	r3, #0
 8006120:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006124:	f7fa fcda 	bl	8000adc <__aeabi_dcmplt>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00a      	beq.n	8006144 <scaraInitCircle+0x1e4>
		delta_angle += 2*PI;
 800612e:	a344      	add	r3, pc, #272	; (adr r3, 8006240 <scaraInitCircle+0x2e0>)
 8006130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006134:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006138:	f7fa f8a8 	bl	800028c <__adddf3>
 800613c:	4603      	mov	r3, r0
 800613e:	460c      	mov	r4, r1
 8006140:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	} // atan2 range : -PI --> PI

	if ( 0 > dir) {
 8006144:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006148:	2b00      	cmp	r3, #0
 800614a:	da0a      	bge.n	8006162 <scaraInitCircle+0x202>
		delta_angle = 2*PI - delta_angle;
 800614c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006150:	a13b      	add	r1, pc, #236	; (adr r1, 8006240 <scaraInitCircle+0x2e0>)
 8006152:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006156:	f7fa f897 	bl	8000288 <__aeabi_dsub>
 800615a:	4603      	mov	r3, r0
 800615c:	460c      	mov	r4, r1
 800615e:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	}
	// Init circle params
	circle->dir = dir;
 8006162:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006166:	b25a      	sxtb	r2, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	701a      	strb	r2, [r3, #0]
	circle->radius = r1;
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8006172:	e9c2 3402 	strd	r3, r4, [r2, #8]
	circle->angle_start = angle_start;
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800617c:	e9c2 3404 	strd	r3, r4, [r2, #16]
	circle->angle_stop  = angle_stop;
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8006186:	e9c2 3406 	strd	r3, r4, [r2, #24]
	circle->total_angle = delta_angle;
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8006190:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	circle->total_s = delta_angle*r1;
 8006194:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006198:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800619c:	f7fa fa2c 	bl	80005f8 <__aeabi_dmul>
 80061a0:	4603      	mov	r3, r0
 80061a2:	460c      	mov	r4, r1
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	circle->x0 = start.x;
 80061aa:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	e9c2 3408 	strd	r3, r4, [r2, #32]
	circle->y0 = start.y;
 80061b4:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	circle->x1 = end.x;
 80061be:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	circle->y1 = end.y;
 80061c8:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	circle->xi = center.x;
 80061d2:	e9d7 348a 	ldrd	r3, r4, [r7, #552]	; 0x228
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	circle->yi = center.y;
 80061dc:	e9d7 348c 	ldrd	r3, r4, [r7, #560]	; 0x230
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	circle->z0 = start.z;
 80061e6:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	circle->z1 = start.z;
 80061f0:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	circle->zi = start.z;
 80061fa:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	circle->x_current = circle->x0;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	circle->y_current = circle->y0;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	circle->z_current = circle->z0;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

	return SCARA_STATUS_OK;
 8006228:	2300      	movs	r3, #0
}
 800622a:	4618      	mov	r0, r3
 800622c:	3754      	adds	r7, #84	; 0x54
 800622e:	46bd      	mov	sp, r7
 8006230:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006234:	b002      	add	sp, #8
 8006236:	4770      	bx	lr
 8006238:	9999999a 	.word	0x9999999a
 800623c:	3fb99999 	.word	0x3fb99999
 8006240:	60000000 	.word	0x60000000
 8006244:	401921fb 	.word	0x401921fb
 8006248:	3ff00000 	.word	0x3ff00000
 800624c:	00000000 	.word	0x00000000

08006250 <scaraInitLSPB>:
SCARA_StatusTypeDef	scaraInitLSPB		(Trajectory_LSPB_TypeDef *lspb,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double a_factor) {
 8006250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006254:	b0ad      	sub	sp, #180	; 0xb4
 8006256:	af00      	add	r7, sp, #0
 8006258:	62f8      	str	r0, [r7, #44]	; 0x2c
 800625a:	460b      	mov	r3, r1
 800625c:	ed87 0b08 	vstr	d0, [r7, #32]
 8006260:	ed87 1b06 	vstr	d1, [r7, #24]
 8006264:	ed87 2b04 	vstr	d2, [r7, #16]
 8006268:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800626c:	4613      	mov	r3, r2
 800626e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	 double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	 uint32_t	no_sample;
	 int8_t	dir;

	 if ( TRAJECTORY_3D == target) {
 8006272:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006276:	2b04      	cmp	r3, #4
 8006278:	d118      	bne.n	80062ac <scaraInitLSPB+0x5c>
		 v_design = V_DESIGN_3D*v_factor;
 800627a:	f20f 7380 	addw	r3, pc, #1920	; 0x780
 800627e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006282:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006286:	f7fa f9b7 	bl	80005f8 <__aeabi_dmul>
 800628a:	4603      	mov	r3, r0
 800628c:	460c      	mov	r4, r1
 800628e:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_3D*a_factor;
 8006292:	f20f 7368 	addw	r3, pc, #1896	; 0x768
 8006296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800629a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800629e:	f7fa f9ab 	bl	80005f8 <__aeabi_dmul>
 80062a2:	4603      	mov	r3, r0
 80062a4:	460c      	mov	r4, r1
 80062a6:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 80062aa:	e092      	b.n	80063d2 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_ROLL == target) {
 80062ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80062b0:	2b05      	cmp	r3, #5
 80062b2:	d118      	bne.n	80062e6 <scaraInitLSPB+0x96>
		 v_design = V_DESIGN_ROLL*v_factor;
 80062b4:	f20f 734c 	addw	r3, pc, #1868	; 0x74c
 80062b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062bc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80062c0:	f7fa f99a 	bl	80005f8 <__aeabi_dmul>
 80062c4:	4603      	mov	r3, r0
 80062c6:	460c      	mov	r4, r1
 80062c8:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_ROLL*a_factor;
 80062cc:	f20f 7334 	addw	r3, pc, #1844	; 0x734
 80062d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80062d8:	f7fa f98e 	bl	80005f8 <__aeabi_dmul>
 80062dc:	4603      	mov	r3, r0
 80062de:	460c      	mov	r4, r1
 80062e0:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 80062e4:	e075      	b.n	80063d2 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J0 == target) {
 80062e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d118      	bne.n	8006320 <scaraInitLSPB+0xd0>
		 v_design = V_DESIGN_J0*v_factor;
 80062ee:	f20f 7314 	addw	r3, pc, #1812	; 0x714
 80062f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80062fa:	f7fa f97d 	bl	80005f8 <__aeabi_dmul>
 80062fe:	4603      	mov	r3, r0
 8006300:	460c      	mov	r4, r1
 8006302:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J0*a_factor;
 8006306:	f20f 63fc 	addw	r3, pc, #1788	; 0x6fc
 800630a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006312:	f7fa f971 	bl	80005f8 <__aeabi_dmul>
 8006316:	4603      	mov	r3, r0
 8006318:	460c      	mov	r4, r1
 800631a:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 800631e:	e058      	b.n	80063d2 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J1 == target) {
 8006320:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006324:	2b01      	cmp	r3, #1
 8006326:	d118      	bne.n	800635a <scaraInitLSPB+0x10a>
		 v_design = V_DESIGN_J1*v_factor;
 8006328:	f20f 63d8 	addw	r3, pc, #1752	; 0x6d8
 800632c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006330:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006334:	f7fa f960 	bl	80005f8 <__aeabi_dmul>
 8006338:	4603      	mov	r3, r0
 800633a:	460c      	mov	r4, r1
 800633c:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J1*a_factor;
 8006340:	f20f 63c0 	addw	r3, pc, #1728	; 0x6c0
 8006344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006348:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800634c:	f7fa f954 	bl	80005f8 <__aeabi_dmul>
 8006350:	4603      	mov	r3, r0
 8006352:	460c      	mov	r4, r1
 8006354:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8006358:	e03b      	b.n	80063d2 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J2 == target) {
 800635a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800635e:	2b02      	cmp	r3, #2
 8006360:	d118      	bne.n	8006394 <scaraInitLSPB+0x144>
		 v_design = V_DESIGN_J2*v_factor;
 8006362:	f20f 6398 	addw	r3, pc, #1688	; 0x698
 8006366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800636e:	f7fa f943 	bl	80005f8 <__aeabi_dmul>
 8006372:	4603      	mov	r3, r0
 8006374:	460c      	mov	r4, r1
 8006376:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J2*a_factor;
 800637a:	f20f 6380 	addw	r3, pc, #1664	; 0x680
 800637e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006382:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006386:	f7fa f937 	bl	80005f8 <__aeabi_dmul>
 800638a:	4603      	mov	r3, r0
 800638c:	460c      	mov	r4, r1
 800638e:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8006392:	e01e      	b.n	80063d2 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J3 == target) {
 8006394:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006398:	2b03      	cmp	r3, #3
 800639a:	d118      	bne.n	80063ce <scaraInitLSPB+0x17e>
		 v_design = V_DESIGN_J3*v_factor;
 800639c:	f20f 636c 	addw	r3, pc, #1644	; 0x66c
 80063a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80063a8:	f7fa f926 	bl	80005f8 <__aeabi_dmul>
 80063ac:	4603      	mov	r3, r0
 80063ae:	460c      	mov	r4, r1
 80063b0:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J3*a_factor;
 80063b4:	f20f 6354 	addw	r3, pc, #1620	; 0x654
 80063b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063bc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80063c0:	f7fa f91a 	bl	80005f8 <__aeabi_dmul>
 80063c4:	4603      	mov	r3, r0
 80063c6:	460c      	mov	r4, r1
 80063c8:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 80063cc:	e001      	b.n	80063d2 <scaraInitLSPB+0x182>
	 } else {
		 return SCARA_STATUS_ERROR_PARA;
 80063ce:	2306      	movs	r3, #6
 80063d0:	e309      	b.n	80069e6 <scaraInitLSPB+0x796>
	 }

	 q0 = 0;
 80063d2:	f04f 0300 	mov.w	r3, #0
 80063d6:	f04f 0400 	mov.w	r4, #0
 80063da:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	 q1 = total_s;
 80063de:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80063e2:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
	 v0 = 0;
 80063e6:	f04f 0300 	mov.w	r3, #0
 80063ea:	f04f 0400 	mov.w	r4, #0
 80063ee:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	 v1 = 0;
 80063f2:	f04f 0300 	mov.w	r3, #0
 80063f6:	f04f 0400 	mov.w	r4, #0
 80063fa:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50

	 if ( q0 <= q1) {
 80063fe:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8006402:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006406:	f7fa fb73 	bl	8000af0 <__aeabi_dcmple>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d003      	beq.n	8006418 <scaraInitLSPB+0x1c8>
		 dir = 1;
 8006410:	2301      	movs	r3, #1
 8006412:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8006416:	e00c      	b.n	8006432 <scaraInitLSPB+0x1e2>
	 } else {
		 dir = -1;
 8006418:	23ff      	movs	r3, #255	; 0xff
 800641a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		 q1 = -q1;
 800641e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006422:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006426:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800642a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800642e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	 }

	 if (DUTY_MODE_INIT_QVT == modeinit) {
 8006432:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006436:	2b01      	cmp	r3, #1
 8006438:	f040 80ad 	bne.w	8006596 <scaraInitLSPB+0x346>
		 double v_lower, v_upper, tc_upper, a_upper;
		 tf = lspb->Tf;
 800643c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643e:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8006442:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 // Avoid division by 0
		 if (tf > 0.001) {
 8006446:	f20f 53cc 	addw	r3, pc, #1484	; 0x5cc
 800644a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8006452:	f7fa fb61 	bl	8000b18 <__aeabi_dcmpgt>
 8006456:	4603      	mov	r3, r0
 8006458:	2b00      	cmp	r3, #0
 800645a:	f000 8090 	beq.w	800657e <scaraInitLSPB+0x32e>
			 v_lower 	= (q1 - q0) / tf;
 800645e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8006462:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8006466:	f7f9 ff0f 	bl	8000288 <__aeabi_dsub>
 800646a:	4603      	mov	r3, r0
 800646c:	460c      	mov	r4, r1
 800646e:	4618      	mov	r0, r3
 8006470:	4621      	mov	r1, r4
 8006472:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8006476:	f7fa f9e9 	bl	800084c <__aeabi_ddiv>
 800647a:	4603      	mov	r3, r0
 800647c:	460c      	mov	r4, r1
 800647e:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			 v_upper 	= 2*(q1 - q0) / tf;
 8006482:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8006486:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800648a:	f7f9 fefd 	bl	8000288 <__aeabi_dsub>
 800648e:	4603      	mov	r3, r0
 8006490:	460c      	mov	r4, r1
 8006492:	4618      	mov	r0, r3
 8006494:	4621      	mov	r1, r4
 8006496:	4602      	mov	r2, r0
 8006498:	460b      	mov	r3, r1
 800649a:	f7f9 fef7 	bl	800028c <__adddf3>
 800649e:	4603      	mov	r3, r0
 80064a0:	460c      	mov	r4, r1
 80064a2:	4618      	mov	r0, r3
 80064a4:	4621      	mov	r1, r4
 80064a6:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80064aa:	f7fa f9cf 	bl	800084c <__aeabi_ddiv>
 80064ae:	4603      	mov	r3, r0
 80064b0:	460c      	mov	r4, r1
 80064b2:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

			 if ( v_design < v_lower) {
 80064b6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80064ba:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80064be:	f7fa fb0d 	bl	8000adc <__aeabi_dcmplt>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d001      	beq.n	80064cc <scaraInitLSPB+0x27c>
				 return SCARA_STATUS_ERROR_OVER_VELOC;
 80064c8:	2309      	movs	r3, #9
 80064ca:	e28c      	b.n	80069e6 <scaraInitLSPB+0x796>
			 } else {
				 if ( v_upper <= v_design) {
 80064cc:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80064d0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80064d4:	f7fa fb0c 	bl	8000af0 <__aeabi_dcmple>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d003      	beq.n	80064e6 <scaraInitLSPB+0x296>
					 v_design = v_upper;
 80064de:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80064e2:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
				 }
				 // Avoid division by 0
				 if (v_design > 0.0000001) {
 80064e6:	f20f 5334 	addw	r3, pc, #1332	; 0x534
 80064ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ee:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80064f2:	f7fa fb11 	bl	8000b18 <__aeabi_dcmpgt>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d01a      	beq.n	8006532 <scaraInitLSPB+0x2e2>
					 tc_upper	= tf - (q1 - q0)/v_design;
 80064fc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8006500:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8006504:	f7f9 fec0 	bl	8000288 <__aeabi_dsub>
 8006508:	4603      	mov	r3, r0
 800650a:	460c      	mov	r4, r1
 800650c:	4618      	mov	r0, r3
 800650e:	4621      	mov	r1, r4
 8006510:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8006514:	f7fa f99a 	bl	800084c <__aeabi_ddiv>
 8006518:	4603      	mov	r3, r0
 800651a:	460c      	mov	r4, r1
 800651c:	461a      	mov	r2, r3
 800651e:	4623      	mov	r3, r4
 8006520:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8006524:	f7f9 feb0 	bl	8000288 <__aeabi_dsub>
 8006528:	4603      	mov	r3, r0
 800652a:	460c      	mov	r4, r1
 800652c:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
 8006530:	e00b      	b.n	800654a <scaraInitLSPB+0x2fa>
				 } else {
					 tc_upper = tf / 2;
 8006532:	f04f 0200 	mov.w	r2, #0
 8006536:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800653a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800653e:	f7fa f985 	bl	800084c <__aeabi_ddiv>
 8006542:	4603      	mov	r3, r0
 8006544:	460c      	mov	r4, r1
 8006546:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
				 }
				 a_upper	= v_design/tc_upper;
 800654a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800654e:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8006552:	f7fa f97b 	bl	800084c <__aeabi_ddiv>
 8006556:	4603      	mov	r3, r0
 8006558:	460c      	mov	r4, r1
 800655a:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
				 if ( a_upper > a_design) {
 800655e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8006562:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8006566:	f7fa fad7 	bl	8000b18 <__aeabi_dcmpgt>
 800656a:	4603      	mov	r3, r0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d001      	beq.n	8006574 <scaraInitLSPB+0x324>
					 return SCARA_STATUS_ERROR_OVER_ACCEL;
 8006570:	230a      	movs	r3, #10
 8006572:	e238      	b.n	80069e6 <scaraInitLSPB+0x796>
				 } else {
					 a_design = a_upper;
 8006574:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8006578:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 800657c:	e00b      	b.n	8006596 <scaraInitLSPB+0x346>
				 }
			 }
		 } else {
			 v_design = 0;
 800657e:	f04f 0300 	mov.w	r3, #0
 8006582:	f04f 0400 	mov.w	r4, #0
 8006586:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
			 a_design = 0;
 800658a:	f04f 0300 	mov.w	r3, #0
 800658e:	f04f 0400 	mov.w	r4, #0
 8006592:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
		 }
	}

	 // Check condition trapezoidal ---> triangle
	 // Avoid division by 0
	 if (a_design > 0.0000001 && v_design > 0.0000001) {
 8006596:	f20f 4384 	addw	r3, pc, #1156	; 0x484
 800659a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80065a2:	f7fa fab9 	bl	8000b18 <__aeabi_dcmpgt>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	f000 819c 	beq.w	80068e6 <scaraInitLSPB+0x696>
 80065ae:	f20f 436c 	addw	r3, pc, #1132	; 0x46c
 80065b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b6:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80065ba:	f7fa faad 	bl	8000b18 <__aeabi_dcmpgt>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f000 8190 	beq.w	80068e6 <scaraInitLSPB+0x696>
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 80065c6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80065ca:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80065ce:	f7f9 fe5b 	bl	8000288 <__aeabi_dsub>
 80065d2:	4603      	mov	r3, r0
 80065d4:	460c      	mov	r4, r1
 80065d6:	461d      	mov	r5, r3
 80065d8:	f024 4600 	bic.w	r6, r4, #2147483648	; 0x80000000
 80065dc:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80065e0:	4628      	mov	r0, r5
 80065e2:	4631      	mov	r1, r6
 80065e4:	f7fa f808 	bl	80005f8 <__aeabi_dmul>
 80065e8:	4603      	mov	r3, r0
 80065ea:	460c      	mov	r4, r1
 80065ec:	e9c7 3402 	strd	r3, r4, [r7, #8]
 80065f0:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80065f4:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80065f8:	f7f9 fffe 	bl	80005f8 <__aeabi_dmul>
 80065fc:	4603      	mov	r3, r0
 80065fe:	460c      	mov	r4, r1
 8006600:	e9c7 3400 	strd	r3, r4, [r7]
 8006604:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006608:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800660c:	f7f9 fff4 	bl	80005f8 <__aeabi_dmul>
 8006610:	4603      	mov	r3, r0
 8006612:	460c      	mov	r4, r1
 8006614:	461d      	mov	r5, r3
 8006616:	4626      	mov	r6, r4
 8006618:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800661c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006620:	f7f9 ffea 	bl	80005f8 <__aeabi_dmul>
 8006624:	4603      	mov	r3, r0
 8006626:	460c      	mov	r4, r1
 8006628:	461a      	mov	r2, r3
 800662a:	4623      	mov	r3, r4
 800662c:	4628      	mov	r0, r5
 800662e:	4631      	mov	r1, r6
 8006630:	f7f9 fe2c 	bl	800028c <__adddf3>
 8006634:	4603      	mov	r3, r0
 8006636:	460c      	mov	r4, r1
 8006638:	4618      	mov	r0, r3
 800663a:	4621      	mov	r1, r4
 800663c:	f04f 0200 	mov.w	r2, #0
 8006640:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006644:	f7fa f902 	bl	800084c <__aeabi_ddiv>
 8006648:	4603      	mov	r3, r0
 800664a:	460c      	mov	r4, r1
 800664c:	461a      	mov	r2, r3
 800664e:	4623      	mov	r3, r4
 8006650:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006654:	f7f9 fe18 	bl	8000288 <__aeabi_dsub>
 8006658:	4603      	mov	r3, r0
 800665a:	460c      	mov	r4, r1
 800665c:	461a      	mov	r2, r3
 800665e:	4623      	mov	r3, r4
 8006660:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006664:	f7fa fa44 	bl	8000af0 <__aeabi_dcmple>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d075      	beq.n	800675a <scaraInitLSPB+0x50a>
			 v_lim 	= sqrt(fabs(q1 - q0)*a_design + (v0*v0 + v1*v1)/2);
 800666e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8006672:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8006676:	f7f9 fe07 	bl	8000288 <__aeabi_dsub>
 800667a:	4603      	mov	r3, r0
 800667c:	460c      	mov	r4, r1
 800667e:	469a      	mov	sl, r3
 8006680:	f024 4b00 	bic.w	fp, r4, #2147483648	; 0x80000000
 8006684:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8006688:	4650      	mov	r0, sl
 800668a:	4659      	mov	r1, fp
 800668c:	f7f9 ffb4 	bl	80005f8 <__aeabi_dmul>
 8006690:	4603      	mov	r3, r0
 8006692:	460c      	mov	r4, r1
 8006694:	4625      	mov	r5, r4
 8006696:	461c      	mov	r4, r3
 8006698:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800669c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80066a0:	f7f9 ffaa 	bl	80005f8 <__aeabi_dmul>
 80066a4:	4602      	mov	r2, r0
 80066a6:	460b      	mov	r3, r1
 80066a8:	4690      	mov	r8, r2
 80066aa:	4699      	mov	r9, r3
 80066ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80066b0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80066b4:	f7f9 ffa0 	bl	80005f8 <__aeabi_dmul>
 80066b8:	4602      	mov	r2, r0
 80066ba:	460b      	mov	r3, r1
 80066bc:	4640      	mov	r0, r8
 80066be:	4649      	mov	r1, r9
 80066c0:	f7f9 fde4 	bl	800028c <__adddf3>
 80066c4:	4602      	mov	r2, r0
 80066c6:	460b      	mov	r3, r1
 80066c8:	4610      	mov	r0, r2
 80066ca:	4619      	mov	r1, r3
 80066cc:	f04f 0200 	mov.w	r2, #0
 80066d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80066d4:	f7fa f8ba 	bl	800084c <__aeabi_ddiv>
 80066d8:	4602      	mov	r2, r0
 80066da:	460b      	mov	r3, r1
 80066dc:	4620      	mov	r0, r4
 80066de:	4629      	mov	r1, r5
 80066e0:	f7f9 fdd4 	bl	800028c <__adddf3>
 80066e4:	4603      	mov	r3, r0
 80066e6:	460c      	mov	r4, r1
 80066e8:	ec44 3b17 	vmov	d7, r3, r4
 80066ec:	eeb0 0a47 	vmov.f32	s0, s14
 80066f0:	eef0 0a67 	vmov.f32	s1, s15
 80066f4:	f012 ff52 	bl	801959c <sqrt>
 80066f8:	ed87 0b26 	vstr	d0, [r7, #152]	; 0x98
			 ta		= (v_lim - v0)/a_design;
 80066fc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006700:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006704:	f7f9 fdc0 	bl	8000288 <__aeabi_dsub>
 8006708:	4603      	mov	r3, r0
 800670a:	460c      	mov	r4, r1
 800670c:	4618      	mov	r0, r3
 800670e:	4621      	mov	r1, r4
 8006710:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8006714:	f7fa f89a 	bl	800084c <__aeabi_ddiv>
 8006718:	4603      	mov	r3, r0
 800671a:	460c      	mov	r4, r1
 800671c:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			 td		= (v_lim - v1)/a_design;
 8006720:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006724:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006728:	f7f9 fdae 	bl	8000288 <__aeabi_dsub>
 800672c:	4603      	mov	r3, r0
 800672e:	460c      	mov	r4, r1
 8006730:	4618      	mov	r0, r3
 8006732:	4621      	mov	r1, r4
 8006734:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8006738:	f7fa f888 	bl	800084c <__aeabi_ddiv>
 800673c:	4603      	mov	r3, r0
 800673e:	460c      	mov	r4, r1
 8006740:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
			 tf		= ta + td;
 8006744:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8006748:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800674c:	f7f9 fd9e 	bl	800028c <__adddf3>
 8006750:	4603      	mov	r3, r0
 8006752:	460c      	mov	r4, r1
 8006754:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 8006758:	e0e3      	b.n	8006922 <scaraInitLSPB+0x6d2>
		 } else {
			 v_lim	= v_design;
 800675a:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 800675e:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
			 ta		= (v_lim - v0)/a_design;
 8006762:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006766:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800676a:	f7f9 fd8d 	bl	8000288 <__aeabi_dsub>
 800676e:	4603      	mov	r3, r0
 8006770:	460c      	mov	r4, r1
 8006772:	4618      	mov	r0, r3
 8006774:	4621      	mov	r1, r4
 8006776:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800677a:	f7fa f867 	bl	800084c <__aeabi_ddiv>
 800677e:	4603      	mov	r3, r0
 8006780:	460c      	mov	r4, r1
 8006782:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			 td		= (v_lim - v1)/a_design;
 8006786:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800678a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800678e:	f7f9 fd7b 	bl	8000288 <__aeabi_dsub>
 8006792:	4603      	mov	r3, r0
 8006794:	460c      	mov	r4, r1
 8006796:	4618      	mov	r0, r3
 8006798:	4621      	mov	r1, r4
 800679a:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800679e:	f7fa f855 	bl	800084c <__aeabi_ddiv>
 80067a2:	4603      	mov	r3, r0
 80067a4:	460c      	mov	r4, r1
 80067a6:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 80067aa:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80067ae:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80067b2:	f7f9 fd69 	bl	8000288 <__aeabi_dsub>
 80067b6:	4603      	mov	r3, r0
 80067b8:	460c      	mov	r4, r1
 80067ba:	4698      	mov	r8, r3
 80067bc:	f024 4900 	bic.w	r9, r4, #2147483648	; 0x80000000
 80067c0:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80067c4:	4640      	mov	r0, r8
 80067c6:	4649      	mov	r1, r9
 80067c8:	f7fa f840 	bl	800084c <__aeabi_ddiv>
 80067cc:	4603      	mov	r3, r0
 80067ce:	460c      	mov	r4, r1
 80067d0:	4625      	mov	r5, r4
 80067d2:	461c      	mov	r4, r3
 80067d4:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80067d8:	4602      	mov	r2, r0
 80067da:	460b      	mov	r3, r1
 80067dc:	f7f9 fd56 	bl	800028c <__adddf3>
 80067e0:	4602      	mov	r2, r0
 80067e2:	460b      	mov	r3, r1
 80067e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80067e8:	f7fa f830 	bl	800084c <__aeabi_ddiv>
 80067ec:	4602      	mov	r2, r0
 80067ee:	460b      	mov	r3, r1
 80067f0:	4690      	mov	r8, r2
 80067f2:	4699      	mov	r9, r3
 80067f4:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80067f8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80067fc:	f7fa f826 	bl	800084c <__aeabi_ddiv>
 8006800:	4602      	mov	r2, r0
 8006802:	460b      	mov	r3, r1
 8006804:	f04f 0000 	mov.w	r0, #0
 8006808:	497b      	ldr	r1, [pc, #492]	; (80069f8 <scaraInitLSPB+0x7a8>)
 800680a:	f7f9 fd3d 	bl	8000288 <__aeabi_dsub>
 800680e:	4602      	mov	r2, r0
 8006810:	460b      	mov	r3, r1
 8006812:	4640      	mov	r0, r8
 8006814:	4649      	mov	r1, r9
 8006816:	f7f9 feef 	bl	80005f8 <__aeabi_dmul>
 800681a:	4602      	mov	r2, r0
 800681c:	460b      	mov	r3, r1
 800681e:	4690      	mov	r8, r2
 8006820:	4699      	mov	r9, r3
 8006822:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8006826:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800682a:	f7fa f80f 	bl	800084c <__aeabi_ddiv>
 800682e:	4602      	mov	r2, r0
 8006830:	460b      	mov	r3, r1
 8006832:	f04f 0000 	mov.w	r0, #0
 8006836:	4970      	ldr	r1, [pc, #448]	; (80069f8 <scaraInitLSPB+0x7a8>)
 8006838:	f7f9 fd26 	bl	8000288 <__aeabi_dsub>
 800683c:	4602      	mov	r2, r0
 800683e:	460b      	mov	r3, r1
 8006840:	4640      	mov	r0, r8
 8006842:	4649      	mov	r1, r9
 8006844:	f7f9 fed8 	bl	80005f8 <__aeabi_dmul>
 8006848:	4602      	mov	r2, r0
 800684a:	460b      	mov	r3, r1
 800684c:	4620      	mov	r0, r4
 800684e:	4629      	mov	r1, r5
 8006850:	f7f9 fd1c 	bl	800028c <__adddf3>
 8006854:	4603      	mov	r3, r0
 8006856:	460c      	mov	r4, r1
 8006858:	4625      	mov	r5, r4
 800685a:	461c      	mov	r4, r3
							+ v_lim/(2*a_design)*(1 - v1/v_lim)*(1 - v1/v_lim);
 800685c:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8006860:	4602      	mov	r2, r0
 8006862:	460b      	mov	r3, r1
 8006864:	f7f9 fd12 	bl	800028c <__adddf3>
 8006868:	4602      	mov	r2, r0
 800686a:	460b      	mov	r3, r1
 800686c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006870:	f7f9 ffec 	bl	800084c <__aeabi_ddiv>
 8006874:	4602      	mov	r2, r0
 8006876:	460b      	mov	r3, r1
 8006878:	4690      	mov	r8, r2
 800687a:	4699      	mov	r9, r3
 800687c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8006880:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006884:	f7f9 ffe2 	bl	800084c <__aeabi_ddiv>
 8006888:	4602      	mov	r2, r0
 800688a:	460b      	mov	r3, r1
 800688c:	f04f 0000 	mov.w	r0, #0
 8006890:	4959      	ldr	r1, [pc, #356]	; (80069f8 <scaraInitLSPB+0x7a8>)
 8006892:	f7f9 fcf9 	bl	8000288 <__aeabi_dsub>
 8006896:	4602      	mov	r2, r0
 8006898:	460b      	mov	r3, r1
 800689a:	4640      	mov	r0, r8
 800689c:	4649      	mov	r1, r9
 800689e:	f7f9 feab 	bl	80005f8 <__aeabi_dmul>
 80068a2:	4602      	mov	r2, r0
 80068a4:	460b      	mov	r3, r1
 80068a6:	4690      	mov	r8, r2
 80068a8:	4699      	mov	r9, r3
 80068aa:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80068ae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80068b2:	f7f9 ffcb 	bl	800084c <__aeabi_ddiv>
 80068b6:	4602      	mov	r2, r0
 80068b8:	460b      	mov	r3, r1
 80068ba:	f04f 0000 	mov.w	r0, #0
 80068be:	494e      	ldr	r1, [pc, #312]	; (80069f8 <scaraInitLSPB+0x7a8>)
 80068c0:	f7f9 fce2 	bl	8000288 <__aeabi_dsub>
 80068c4:	4602      	mov	r2, r0
 80068c6:	460b      	mov	r3, r1
 80068c8:	4640      	mov	r0, r8
 80068ca:	4649      	mov	r1, r9
 80068cc:	f7f9 fe94 	bl	80005f8 <__aeabi_dmul>
 80068d0:	4602      	mov	r2, r0
 80068d2:	460b      	mov	r3, r1
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 80068d4:	4620      	mov	r0, r4
 80068d6:	4629      	mov	r1, r5
 80068d8:	f7f9 fcd8 	bl	800028c <__adddf3>
 80068dc:	4603      	mov	r3, r0
 80068de:	460c      	mov	r4, r1
 80068e0:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 80068e4:	e01d      	b.n	8006922 <scaraInitLSPB+0x6d2>
		 }
	 } else {
		 v_lim	= 0;
 80068e6:	f04f 0300 	mov.w	r3, #0
 80068ea:	f04f 0400 	mov.w	r4, #0
 80068ee:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		 ta = tf/2;
 80068f2:	f04f 0200 	mov.w	r2, #0
 80068f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80068fa:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80068fe:	f7f9 ffa5 	bl	800084c <__aeabi_ddiv>
 8006902:	4603      	mov	r3, r0
 8006904:	460c      	mov	r4, r1
 8006906:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
		 td = tf/2;
 800690a:	f04f 0200 	mov.w	r2, #0
 800690e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006912:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8006916:	f7f9 ff99 	bl	800084c <__aeabi_ddiv>
 800691a:	4603      	mov	r3, r0
 800691c:	460c      	mov	r4, r1
 800691e:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	 }

	 no_sample = ceilf(tf / T_SAMPLING); // ceiling
 8006922:	a333      	add	r3, pc, #204	; (adr r3, 80069f0 <scaraInitLSPB+0x7a0>)
 8006924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006928:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800692c:	f7f9 ff8e 	bl	800084c <__aeabi_ddiv>
 8006930:	4603      	mov	r3, r0
 8006932:	460c      	mov	r4, r1
 8006934:	4618      	mov	r0, r3
 8006936:	4621      	mov	r1, r4
 8006938:	f7fa f956 	bl	8000be8 <__aeabi_d2f>
 800693c:	4603      	mov	r3, r0
 800693e:	ee00 3a10 	vmov	s0, r3
 8006942:	f012 fde9 	bl	8019518 <ceilf>
 8006946:	eef0 7a40 	vmov.f32	s15, s0
 800694a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800694e:	ee17 3a90 	vmov	r3, s15
 8006952:	637b      	str	r3, [r7, #52]	; 0x34
	 // Init lspb params
	 lspb->dir= dir;
 8006954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006956:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800695a:	701a      	strb	r2, [r3, #0]
	 lspb->s0 = q0;
 800695c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800695e:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8006962:	e9c2 3402 	strd	r3, r4, [r2, #8]
	 lspb->s1 = q1;
 8006966:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006968:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800696c:	e9c2 3404 	strd	r3, r4, [r2, #16]
	 lspb->Ta = ta;
 8006970:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006972:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8006976:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	 lspb->Td = td;
 800697a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800697c:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8006980:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	 lspb->Tf = tf;
 8006984:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006986:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800698a:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	 lspb->a_design = a_design;
 800698e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006990:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8006994:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	 lspb->v_design = v_design;
 8006998:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800699a:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 800699e:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	 lspb->v_lim = v_lim;
 80069a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069a4:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 80069a8:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	 lspb->v0 = v0;
 80069ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069ae:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80069b2:	e9c2 3406 	strd	r3, r4, [r2, #24]
	 lspb->v1 = v1;
 80069b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069b8:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80069bc:	e9c2 3408 	strd	r3, r4, [r2, #32]
	 lspb->num_of_sampling = no_sample;
 80069c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069c4:	659a      	str	r2, [r3, #88]	; 0x58
	 lspb->total_s = lspb->s1 - lspb->s0;
 80069c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80069cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ce:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80069d2:	461a      	mov	r2, r3
 80069d4:	4623      	mov	r3, r4
 80069d6:	f7f9 fc57 	bl	8000288 <__aeabi_dsub>
 80069da:	4603      	mov	r3, r0
 80069dc:	460c      	mov	r4, r1
 80069de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069e0:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

	 return SCARA_STATUS_OK;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	37b4      	adds	r7, #180	; 0xb4
 80069ea:	46bd      	mov	sp, r7
 80069ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069f0:	40000000 	.word	0x40000000
 80069f4:	3f847ae1 	.word	0x3f847ae1
 80069f8:	3ff00000 	.word	0x3ff00000
 80069fc:	00000000 	.word	0x00000000
 8006a00:	405c2000 	.word	0x405c2000
 8006a04:	14000000 	.word	0x14000000
 8006a08:	4000f6f0 	.word	0x4000f6f0
 8006a0c:	6b259425 	.word	0x6b259425
 8006a10:	40069b91 	.word	0x40069b91
 8006a14:	d2f1a9fc 	.word	0xd2f1a9fc
 8006a18:	3f50624d 	.word	0x3f50624d
 8006a1c:	9abcaf48 	.word	0x9abcaf48
 8006a20:	3e7ad7f2 	.word	0x3e7ad7f2
 8006a24:	00000000 	.word	0x00000000

08006a28 <scaraInitScurve>:
SCARA_StatusTypeDef	scaraInitScurve		(Trajectory_Scurve_TypeDef *scurve,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double a_factor) {
 8006a28:	b5b0      	push	{r4, r5, r7, lr}
 8006a2a:	b0ba      	sub	sp, #232	; 0xe8
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	61f8      	str	r0, [r7, #28]
 8006a30:	460b      	mov	r3, r1
 8006a32:	ed87 0b04 	vstr	d0, [r7, #16]
 8006a36:	ed87 1b02 	vstr	d1, [r7, #8]
 8006a3a:	ed87 2b00 	vstr	d2, [r7]
 8006a3e:	76fb      	strb	r3, [r7, #27]
 8006a40:	4613      	mov	r3, r2
 8006a42:	76bb      	strb	r3, [r7, #26]
	 double v_design, a_design, q0, q1, v0, v1, v_lim, j_max, tm, tc, tf, dir;
	 double v_1, s_1, v_2, s_2, v_3, s_3, v_4, s_4;
	 uint32_t	 no_sample;
	 uint8_t	 no_phases;

	 if ( TRAJECTORY_3D == target) {
 8006a44:	7efb      	ldrb	r3, [r7, #27]
 8006a46:	2b04      	cmp	r3, #4
 8006a48:	d118      	bne.n	8006a7c <scaraInitScurve+0x54>
		 v_design = V_DESIGN_3D*v_factor;
 8006a4a:	f20f 4320 	addw	r3, pc, #1056	; 0x420
 8006a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006a56:	f7f9 fdcf 	bl	80005f8 <__aeabi_dmul>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	460c      	mov	r4, r1
 8006a5e:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_3D*a_factor;
 8006a62:	f20f 4308 	addw	r3, pc, #1032	; 0x408
 8006a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a6e:	f7f9 fdc3 	bl	80005f8 <__aeabi_dmul>
 8006a72:	4603      	mov	r3, r0
 8006a74:	460c      	mov	r4, r1
 8006a76:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8006a7a:	e083      	b.n	8006b84 <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_ROLL == target) {
 8006a7c:	7efb      	ldrb	r3, [r7, #27]
 8006a7e:	2b05      	cmp	r3, #5
 8006a80:	d116      	bne.n	8006ab0 <scaraInitScurve+0x88>
		 v_design = V_DESIGN_ROLL*v_factor;
 8006a82:	a3fc      	add	r3, pc, #1008	; (adr r3, 8006e74 <scaraInitScurve+0x44c>)
 8006a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a88:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006a8c:	f7f9 fdb4 	bl	80005f8 <__aeabi_dmul>
 8006a90:	4603      	mov	r3, r0
 8006a92:	460c      	mov	r4, r1
 8006a94:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_ROLL*a_factor;
 8006a98:	a3f6      	add	r3, pc, #984	; (adr r3, 8006e74 <scaraInitScurve+0x44c>)
 8006a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006aa2:	f7f9 fda9 	bl	80005f8 <__aeabi_dmul>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	460c      	mov	r4, r1
 8006aaa:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8006aae:	e069      	b.n	8006b84 <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J0 == target) {
 8006ab0:	7efb      	ldrb	r3, [r7, #27]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d116      	bne.n	8006ae4 <scaraInitScurve+0xbc>
		 v_design = V_DESIGN_J0*v_factor;
 8006ab6:	a3ef      	add	r3, pc, #956	; (adr r3, 8006e74 <scaraInitScurve+0x44c>)
 8006ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006abc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006ac0:	f7f9 fd9a 	bl	80005f8 <__aeabi_dmul>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	460c      	mov	r4, r1
 8006ac8:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J0*a_factor;
 8006acc:	a3e9      	add	r3, pc, #932	; (adr r3, 8006e74 <scaraInitScurve+0x44c>)
 8006ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ad6:	f7f9 fd8f 	bl	80005f8 <__aeabi_dmul>
 8006ada:	4603      	mov	r3, r0
 8006adc:	460c      	mov	r4, r1
 8006ade:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8006ae2:	e04f      	b.n	8006b84 <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J1 == target) {
 8006ae4:	7efb      	ldrb	r3, [r7, #27]
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d116      	bne.n	8006b18 <scaraInitScurve+0xf0>
		 v_design = V_DESIGN_J1*v_factor;
 8006aea:	a3e2      	add	r3, pc, #904	; (adr r3, 8006e74 <scaraInitScurve+0x44c>)
 8006aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006af4:	f7f9 fd80 	bl	80005f8 <__aeabi_dmul>
 8006af8:	4603      	mov	r3, r0
 8006afa:	460c      	mov	r4, r1
 8006afc:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J1*a_factor;
 8006b00:	a3dc      	add	r3, pc, #880	; (adr r3, 8006e74 <scaraInitScurve+0x44c>)
 8006b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b0a:	f7f9 fd75 	bl	80005f8 <__aeabi_dmul>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	460c      	mov	r4, r1
 8006b12:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8006b16:	e035      	b.n	8006b84 <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J2 == target) {
 8006b18:	7efb      	ldrb	r3, [r7, #27]
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d116      	bne.n	8006b4c <scaraInitScurve+0x124>
		 v_design = V_DESIGN_J2*v_factor;
 8006b1e:	a3d3      	add	r3, pc, #844	; (adr r3, 8006e6c <scaraInitScurve+0x444>)
 8006b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b24:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006b28:	f7f9 fd66 	bl	80005f8 <__aeabi_dmul>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	460c      	mov	r4, r1
 8006b30:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J2*a_factor;
 8006b34:	a3cd      	add	r3, pc, #820	; (adr r3, 8006e6c <scaraInitScurve+0x444>)
 8006b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b3e:	f7f9 fd5b 	bl	80005f8 <__aeabi_dmul>
 8006b42:	4603      	mov	r3, r0
 8006b44:	460c      	mov	r4, r1
 8006b46:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8006b4a:	e01b      	b.n	8006b84 <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J3 == target) {
 8006b4c:	7efb      	ldrb	r3, [r7, #27]
 8006b4e:	2b03      	cmp	r3, #3
 8006b50:	d116      	bne.n	8006b80 <scaraInitScurve+0x158>
		 v_design = V_DESIGN_J3*v_factor;
 8006b52:	a3ca      	add	r3, pc, #808	; (adr r3, 8006e7c <scaraInitScurve+0x454>)
 8006b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b58:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006b5c:	f7f9 fd4c 	bl	80005f8 <__aeabi_dmul>
 8006b60:	4603      	mov	r3, r0
 8006b62:	460c      	mov	r4, r1
 8006b64:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J3*a_factor;
 8006b68:	a3c4      	add	r3, pc, #784	; (adr r3, 8006e7c <scaraInitScurve+0x454>)
 8006b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b72:	f7f9 fd41 	bl	80005f8 <__aeabi_dmul>
 8006b76:	4603      	mov	r3, r0
 8006b78:	460c      	mov	r4, r1
 8006b7a:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8006b7e:	e001      	b.n	8006b84 <scaraInitScurve+0x15c>
	 } else {
		 return SCARA_STATUS_ERROR_PARA;
 8006b80:	2306      	movs	r3, #6
 8006b82:	e2c8      	b.n	8007116 <scaraInitScurve+0x6ee>
	 }

	 v0 = 0;
 8006b84:	f04f 0300 	mov.w	r3, #0
 8006b88:	f04f 0400 	mov.w	r4, #0
 8006b8c:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
	 v1 = 0;
 8006b90:	f04f 0300 	mov.w	r3, #0
 8006b94:	f04f 0400 	mov.w	r4, #0
 8006b98:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	 q0 = 0;
 8006b9c:	f04f 0300 	mov.w	r3, #0
 8006ba0:	f04f 0400 	mov.w	r4, #0
 8006ba4:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	 q1 = total_s;
 8006ba8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006bac:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0

	 if ( total_s < 0) {
 8006bb0:	f04f 0200 	mov.w	r2, #0
 8006bb4:	f04f 0300 	mov.w	r3, #0
 8006bb8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006bbc:	f7f9 ff8e 	bl	8000adc <__aeabi_dcmplt>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d015      	beq.n	8006bf2 <scaraInitScurve+0x1ca>
		 dir = -1;
 8006bc6:	f04f 0300 	mov.w	r3, #0
 8006bca:	4ca5      	ldr	r4, [pc, #660]	; (8006e60 <scaraInitScurve+0x438>)
 8006bcc:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
		 q1 = -q1;
 8006bd0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006bd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006bd8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006bdc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006be0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		 total_s = -total_s;
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	613b      	str	r3, [r7, #16]
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006bee:	617b      	str	r3, [r7, #20]
 8006bf0:	e004      	b.n	8006bfc <scaraInitScurve+0x1d4>
	 } else {
		 dir = 1;
 8006bf2:	f04f 0300 	mov.w	r3, #0
 8006bf6:	4c9b      	ldr	r4, [pc, #620]	; (8006e64 <scaraInitScurve+0x43c>)
 8006bf8:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
	 }


	 if (DUTY_MODE_INIT_QVT == modeinit) {
 8006bfc:	7ebb      	ldrb	r3, [r7, #26]
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	f040 8082 	bne.w	8006d08 <scaraInitScurve+0x2e0>
		 double t_upper, v_upper, a_upper;
		 tf = scurve->Tf;
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8006c0a:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 // Avoid division by 0
		 if (tf > 0.001) {
 8006c0e:	a390      	add	r3, pc, #576	; (adr r3, 8006e50 <scaraInitScurve+0x428>)
 8006c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c14:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8006c18:	f7f9 ff7e 	bl	8000b18 <__aeabi_dcmpgt>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d066      	beq.n	8006cf0 <scaraInitScurve+0x2c8>
			 // Assume 4 phase
			 t_upper = tf / 4;
 8006c22:	f04f 0200 	mov.w	r2, #0
 8006c26:	4b90      	ldr	r3, [pc, #576]	; (8006e68 <scaraInitScurve+0x440>)
 8006c28:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8006c2c:	f7f9 fe0e 	bl	800084c <__aeabi_ddiv>
 8006c30:	4603      	mov	r3, r0
 8006c32:	460c      	mov	r4, r1
 8006c34:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
			 v_upper = total_s / (2*t_upper);
 8006c38:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	460b      	mov	r3, r1
 8006c40:	f7f9 fb24 	bl	800028c <__adddf3>
 8006c44:	4603      	mov	r3, r0
 8006c46:	460c      	mov	r4, r1
 8006c48:	461a      	mov	r2, r3
 8006c4a:	4623      	mov	r3, r4
 8006c4c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006c50:	f7f9 fdfc 	bl	800084c <__aeabi_ddiv>
 8006c54:	4603      	mov	r3, r0
 8006c56:	460c      	mov	r4, r1
 8006c58:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
			 // Check 4 phase --> 5 phase
			 if ( v_upper > v_design) {
 8006c5c:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8006c60:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8006c64:	f7f9 ff58 	bl	8000b18 <__aeabi_dcmpgt>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d022      	beq.n	8006cb4 <scaraInitScurve+0x28c>
				 t_upper = tf/2 - total_s/(2*v_design);
 8006c6e:	f04f 0200 	mov.w	r2, #0
 8006c72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006c76:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8006c7a:	f7f9 fde7 	bl	800084c <__aeabi_ddiv>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	460c      	mov	r4, r1
 8006c82:	4625      	mov	r5, r4
 8006c84:	461c      	mov	r4, r3
 8006c86:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	460b      	mov	r3, r1
 8006c8e:	f7f9 fafd 	bl	800028c <__adddf3>
 8006c92:	4602      	mov	r2, r0
 8006c94:	460b      	mov	r3, r1
 8006c96:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006c9a:	f7f9 fdd7 	bl	800084c <__aeabi_ddiv>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	4620      	mov	r0, r4
 8006ca4:	4629      	mov	r1, r5
 8006ca6:	f7f9 faef 	bl	8000288 <__aeabi_dsub>
 8006caa:	4603      	mov	r3, r0
 8006cac:	460c      	mov	r4, r1
 8006cae:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
 8006cb2:	e003      	b.n	8006cbc <scaraInitScurve+0x294>
			 } else {
				 v_design = v_upper;
 8006cb4:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8006cb8:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			 }
			 a_upper  = v_design / t_upper;
 8006cbc:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8006cc0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006cc4:	f7f9 fdc2 	bl	800084c <__aeabi_ddiv>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	460c      	mov	r4, r1
 8006ccc:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
			 if ( a_upper > a_design) {
 8006cd0:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8006cd4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006cd8:	f7f9 ff1e 	bl	8000b18 <__aeabi_dcmpgt>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d001      	beq.n	8006ce6 <scaraInitScurve+0x2be>
				 return SCARA_STATUS_ERROR_OVER_ACCEL;
 8006ce2:	230a      	movs	r3, #10
 8006ce4:	e217      	b.n	8007116 <scaraInitScurve+0x6ee>
			 } else {
				 a_design = a_upper;
 8006ce6:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8006cea:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8006cee:	e00b      	b.n	8006d08 <scaraInitScurve+0x2e0>
			 }
		 } else {
			 v_design = 0;
 8006cf0:	f04f 0300 	mov.w	r3, #0
 8006cf4:	f04f 0400 	mov.w	r4, #0
 8006cf8:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			 a_design = 0;
 8006cfc:	f04f 0300 	mov.w	r3, #0
 8006d00:	f04f 0400 	mov.w	r4, #0
 8006d04:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
		 }
	 }
	 // Avoid division by 0
	 if (a_design > 0.0000001 && v_design > 0.0000001) {
 8006d08:	a353      	add	r3, pc, #332	; (adr r3, 8006e58 <scaraInitScurve+0x430>)
 8006d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0e:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8006d12:	f7f9 ff01 	bl	8000b18 <__aeabi_dcmpgt>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	f000 80b3 	beq.w	8006e84 <scaraInitScurve+0x45c>
 8006d1e:	a34e      	add	r3, pc, #312	; (adr r3, 8006e58 <scaraInitScurve+0x430>)
 8006d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006d28:	f7f9 fef6 	bl	8000b18 <__aeabi_dcmpgt>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	f000 80a8 	beq.w	8006e84 <scaraInitScurve+0x45c>
		 no_phases = 5;
 8006d34:	2305      	movs	r3, #5
 8006d36:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		 tm = v_design/a_design;
 8006d3a:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8006d3e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006d42:	f7f9 fd83 	bl	800084c <__aeabi_ddiv>
 8006d46:	4603      	mov	r3, r0
 8006d48:	460c      	mov	r4, r1
 8006d4a:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		 tc = total_s/v_design - 2*tm;
 8006d4e:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8006d52:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006d56:	f7f9 fd79 	bl	800084c <__aeabi_ddiv>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	460c      	mov	r4, r1
 8006d5e:	4625      	mov	r5, r4
 8006d60:	461c      	mov	r4, r3
 8006d62:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8006d66:	4602      	mov	r2, r0
 8006d68:	460b      	mov	r3, r1
 8006d6a:	f7f9 fa8f 	bl	800028c <__adddf3>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	460b      	mov	r3, r1
 8006d72:	4620      	mov	r0, r4
 8006d74:	4629      	mov	r1, r5
 8006d76:	f7f9 fa87 	bl	8000288 <__aeabi_dsub>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	460c      	mov	r4, r1
 8006d7e:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
		 // Check condition 5 phase ---> 4 phase
		 if (tc < 0.0) {
 8006d82:	f04f 0200 	mov.w	r2, #0
 8006d86:	f04f 0300 	mov.w	r3, #0
 8006d8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006d8e:	f7f9 fea5 	bl	8000adc <__aeabi_dcmplt>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d022      	beq.n	8006dde <scaraInitScurve+0x3b6>
			 tc = 0;
 8006d98:	f04f 0300 	mov.w	r3, #0
 8006d9c:	f04f 0400 	mov.w	r4, #0
 8006da0:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
			 no_phases = 4;
 8006da4:	2304      	movs	r3, #4
 8006da6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			 tm = sqrt(total_s/(2*a_design));
 8006daa:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8006dae:	4602      	mov	r2, r0
 8006db0:	460b      	mov	r3, r1
 8006db2:	f7f9 fa6b 	bl	800028c <__adddf3>
 8006db6:	4603      	mov	r3, r0
 8006db8:	460c      	mov	r4, r1
 8006dba:	461a      	mov	r2, r3
 8006dbc:	4623      	mov	r3, r4
 8006dbe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006dc2:	f7f9 fd43 	bl	800084c <__aeabi_ddiv>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	460c      	mov	r4, r1
 8006dca:	ec44 3b17 	vmov	d7, r3, r4
 8006dce:	eeb0 0a47 	vmov.f32	s0, s14
 8006dd2:	eef0 0a67 	vmov.f32	s1, s15
 8006dd6:	f012 fbe1 	bl	801959c <sqrt>
 8006dda:	ed87 0b2e 	vstr	d0, [r7, #184]	; 0xb8
		 }
		 if (tm < 0.001) {
 8006dde:	a31c      	add	r3, pc, #112	; (adr r3, 8006e50 <scaraInitScurve+0x428>)
 8006de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de4:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8006de8:	f7f9 fe78 	bl	8000adc <__aeabi_dcmplt>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d006      	beq.n	8006e00 <scaraInitScurve+0x3d8>
			 j_max = 0;
 8006df2:	f04f 0300 	mov.w	r3, #0
 8006df6:	f04f 0400 	mov.w	r4, #0
 8006dfa:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
 8006dfe:	e009      	b.n	8006e14 <scaraInitScurve+0x3ec>
		 } else {
			 j_max = a_design/tm;
 8006e00:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006e04:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8006e08:	f7f9 fd20 	bl	800084c <__aeabi_ddiv>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	460c      	mov	r4, r1
 8006e10:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
		 }
		 v_lim = a_design*tm;
 8006e14:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006e18:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8006e1c:	f7f9 fbec 	bl	80005f8 <__aeabi_dmul>
 8006e20:	4603      	mov	r3, r0
 8006e22:	460c      	mov	r4, r1
 8006e24:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
		 tf    = 4*tm + tc;
 8006e28:	f04f 0200 	mov.w	r2, #0
 8006e2c:	4b0e      	ldr	r3, [pc, #56]	; (8006e68 <scaraInitScurve+0x440>)
 8006e2e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8006e32:	f7f9 fbe1 	bl	80005f8 <__aeabi_dmul>
 8006e36:	4603      	mov	r3, r0
 8006e38:	460c      	mov	r4, r1
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	4623      	mov	r3, r4
 8006e3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006e42:	f7f9 fa23 	bl	800028c <__adddf3>
 8006e46:	4603      	mov	r3, r0
 8006e48:	460c      	mov	r4, r1
 8006e4a:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
 8006e4e:	e039      	b.n	8006ec4 <scaraInitScurve+0x49c>
 8006e50:	d2f1a9fc 	.word	0xd2f1a9fc
 8006e54:	3f50624d 	.word	0x3f50624d
 8006e58:	9abcaf48 	.word	0x9abcaf48
 8006e5c:	3e7ad7f2 	.word	0x3e7ad7f2
 8006e60:	bff00000 	.word	0xbff00000
 8006e64:	3ff00000 	.word	0x3ff00000
 8006e68:	40100000 	.word	0x40100000
 8006e6c:	00000000 	.word	0x00000000
 8006e70:	405c2000 	.word	0x405c2000
 8006e74:	14000000 	.word	0x14000000
 8006e78:	4000f6f0 	.word	0x4000f6f0
 8006e7c:	6b259425 	.word	0x6b259425
 8006e80:	40069b91 	.word	0x40069b91
	 } else {
		 j_max = 0;
 8006e84:	f04f 0300 	mov.w	r3, #0
 8006e88:	f04f 0400 	mov.w	r4, #0
 8006e8c:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
		 tc = 0;
 8006e90:	f04f 0300 	mov.w	r3, #0
 8006e94:	f04f 0400 	mov.w	r4, #0
 8006e98:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
		 no_phases = 4;
 8006e9c:	2304      	movs	r3, #4
 8006e9e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		 tm = tf / 4;
 8006ea2:	f04f 0200 	mov.w	r2, #0
 8006ea6:	4ba0      	ldr	r3, [pc, #640]	; (8007128 <scaraInitScurve+0x700>)
 8006ea8:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8006eac:	f7f9 fcce 	bl	800084c <__aeabi_ddiv>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	460c      	mov	r4, r1
 8006eb4:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		 v_lim = 0;
 8006eb8:	f04f 0300 	mov.w	r3, #0
 8006ebc:	f04f 0400 	mov.w	r4, #0
 8006ec0:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
	 }

	 no_sample = ceil(tf / T_SAMPLING);
 8006ec4:	a396      	add	r3, pc, #600	; (adr r3, 8007120 <scaraInitScurve+0x6f8>)
 8006ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eca:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8006ece:	f7f9 fcbd 	bl	800084c <__aeabi_ddiv>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	460c      	mov	r4, r1
 8006ed6:	ec44 3b17 	vmov	d7, r3, r4
 8006eda:	eeb0 0a47 	vmov.f32	s0, s14
 8006ede:	eef0 0a67 	vmov.f32	s1, s15
 8006ee2:	f012 f9c1 	bl	8019268 <ceil>
 8006ee6:	ec54 3b10 	vmov	r3, r4, d0
 8006eea:	4618      	mov	r0, r3
 8006eec:	4621      	mov	r1, r4
 8006eee:	f7f9 fe5b 	bl	8000ba8 <__aeabi_d2uiz>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	667b      	str	r3, [r7, #100]	; 0x64
	 v_1 = 0.5*j_max*tm*tm;
 8006ef6:	f04f 0200 	mov.w	r2, #0
 8006efa:	4b8c      	ldr	r3, [pc, #560]	; (800712c <scaraInitScurve+0x704>)
 8006efc:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8006f00:	f7f9 fb7a 	bl	80005f8 <__aeabi_dmul>
 8006f04:	4603      	mov	r3, r0
 8006f06:	460c      	mov	r4, r1
 8006f08:	4618      	mov	r0, r3
 8006f0a:	4621      	mov	r1, r4
 8006f0c:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006f10:	f7f9 fb72 	bl	80005f8 <__aeabi_dmul>
 8006f14:	4603      	mov	r3, r0
 8006f16:	460c      	mov	r4, r1
 8006f18:	461a      	mov	r2, r3
 8006f1a:	4623      	mov	r3, r4
 8006f1c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8006f20:	f7f9 fb6a 	bl	80005f8 <__aeabi_dmul>
 8006f24:	4603      	mov	r3, r0
 8006f26:	460c      	mov	r4, r1
 8006f28:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	 s_1 = j_max*tm*tm*tm/6;
 8006f2c:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006f30:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8006f34:	f7f9 fb60 	bl	80005f8 <__aeabi_dmul>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	460c      	mov	r4, r1
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	4621      	mov	r1, r4
 8006f40:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006f44:	f7f9 fb58 	bl	80005f8 <__aeabi_dmul>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	460c      	mov	r4, r1
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	4621      	mov	r1, r4
 8006f50:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006f54:	f7f9 fb50 	bl	80005f8 <__aeabi_dmul>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	460c      	mov	r4, r1
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	4621      	mov	r1, r4
 8006f60:	f04f 0200 	mov.w	r2, #0
 8006f64:	4b72      	ldr	r3, [pc, #456]	; (8007130 <scaraInitScurve+0x708>)
 8006f66:	f7f9 fc71 	bl	800084c <__aeabi_ddiv>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	460c      	mov	r4, r1
 8006f6e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	 v_2 = j_max*tm*tm;
 8006f72:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006f76:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8006f7a:	f7f9 fb3d 	bl	80005f8 <__aeabi_dmul>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	460c      	mov	r4, r1
 8006f82:	461a      	mov	r2, r3
 8006f84:	4623      	mov	r3, r4
 8006f86:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8006f8a:	f7f9 fb35 	bl	80005f8 <__aeabi_dmul>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	460c      	mov	r4, r1
 8006f92:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	 s_2 = v_2*tm;
 8006f96:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006f9a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006f9e:	f7f9 fb2b 	bl	80005f8 <__aeabi_dmul>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	460c      	mov	r4, r1
 8006fa6:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
	 v_3 = v_2;
 8006faa:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8006fae:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	 s_3 = s_2 + v_2*tc;
 8006fb2:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8006fb6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006fba:	f7f9 fb1d 	bl	80005f8 <__aeabi_dmul>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	460c      	mov	r4, r1
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	4623      	mov	r3, r4
 8006fc6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006fca:	f7f9 f95f 	bl	800028c <__adddf3>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	460c      	mov	r4, r1
 8006fd2:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	 v_4 = v_1;
 8006fd6:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8006fda:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	 s_4 = s_3 + s_2 - s_1;
 8006fde:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006fe2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006fe6:	f7f9 f951 	bl	800028c <__adddf3>
 8006fea:	4603      	mov	r3, r0
 8006fec:	460c      	mov	r4, r1
 8006fee:	4618      	mov	r0, r3
 8006ff0:	4621      	mov	r1, r4
 8006ff2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006ff6:	f7f9 f947 	bl	8000288 <__aeabi_dsub>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	460c      	mov	r4, r1
 8006ffe:	e9c7 3408 	strd	r3, r4, [r7, #32]

	 scurve->Tc = tc;
 8007002:	69fa      	ldr	r2, [r7, #28]
 8007004:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8007008:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	 scurve->Tf = tf;
 800700c:	69fa      	ldr	r2, [r7, #28]
 800700e:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8007012:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	 scurve->Tm = tm;
 8007016:	69fa      	ldr	r2, [r7, #28]
 8007018:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 800701c:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	 scurve->a_design = a_design;
 8007020:	69fa      	ldr	r2, [r7, #28]
 8007022:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 8007026:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	 scurve->v_design = v_design;
 800702a:	69fa      	ldr	r2, [r7, #28]
 800702c:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8007030:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	 scurve->v_lim = v_lim;
 8007034:	69fa      	ldr	r2, [r7, #28]
 8007036:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 800703a:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	 scurve->v0 = v0;
 800703e:	69fa      	ldr	r2, [r7, #28]
 8007040:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8007044:	e9c2 3406 	strd	r3, r4, [r2, #24]
	 scurve->v1 = v1;
 8007048:	69fa      	ldr	r2, [r7, #28]
 800704a:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 800704e:	e9c2 3408 	strd	r3, r4, [r2, #32]
	 scurve->j_max = j_max;
 8007052:	69fa      	ldr	r2, [r7, #28]
 8007054:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8007058:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	 scurve->s0   = q0;
 800705c:	69fa      	ldr	r2, [r7, #28]
 800705e:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8007062:	e9c2 3402 	strd	r3, r4, [r2, #8]
	 scurve->s1   = q1;
 8007066:	69fa      	ldr	r2, [r7, #28]
 8007068:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 800706c:	e9c2 3404 	strd	r3, r4, [r2, #16]
	 scurve->num_of_phase = no_phases;
 8007070:	69fb      	ldr	r3, [r7, #28]
 8007072:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 8007076:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	 scurve->num_of_sampling = no_sample;
 800707a:	69fb      	ldr	r3, [r7, #28]
 800707c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800707e:	669a      	str	r2, [r3, #104]	; 0x68
	 scurve->total_s = total_s;
 8007080:	69fa      	ldr	r2, [r7, #28]
 8007082:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8007086:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	 scurve->dir = dir;
 800708a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800708e:	f7f9 fd63 	bl	8000b58 <__aeabi_d2iz>
 8007092:	4603      	mov	r3, r0
 8007094:	b25a      	sxtb	r2, r3
 8007096:	69fb      	ldr	r3, [r7, #28]
 8007098:	701a      	strb	r2, [r3, #0]

	 scurve->a_current = 0;
 800709a:	69fa      	ldr	r2, [r7, #28]
 800709c:	f04f 0300 	mov.w	r3, #0
 80070a0:	f04f 0400 	mov.w	r4, #0
 80070a4:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
	 scurve->v_current = 0;
 80070a8:	69fa      	ldr	r2, [r7, #28]
 80070aa:	f04f 0300 	mov.w	r3, #0
 80070ae:	f04f 0400 	mov.w	r4, #0
 80070b2:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
	 scurve->s_current = 0;
 80070b6:	69fa      	ldr	r2, [r7, #28]
 80070b8:	f04f 0300 	mov.w	r3, #0
 80070bc:	f04f 0400 	mov.w	r4, #0
 80070c0:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
	 scurve->v_1 = v_1;
 80070c4:	69fa      	ldr	r2, [r7, #28]
 80070c6:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80070ca:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	 scurve->v_2 = v_2;
 80070ce:	69fa      	ldr	r2, [r7, #28]
 80070d0:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80070d4:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
	 scurve->v_3 = v_3;
 80070d8:	69fa      	ldr	r2, [r7, #28]
 80070da:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80070de:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
	 scurve->v_4 = v_4;
 80070e2:	69fa      	ldr	r2, [r7, #28]
 80070e4:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80070e8:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
	 scurve->s_1 = s_1;
 80070ec:	69fa      	ldr	r2, [r7, #28]
 80070ee:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80070f2:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	 scurve->s_2 = s_2;
 80070f6:	69fa      	ldr	r2, [r7, #28]
 80070f8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80070fc:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
	 scurve->s_3 = s_3;
 8007100:	69fa      	ldr	r2, [r7, #28]
 8007102:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8007106:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0
	 scurve->s_4 = s_4;
 800710a:	69fa      	ldr	r2, [r7, #28]
 800710c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8007110:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0

	 return SCARA_STATUS_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	37e8      	adds	r7, #232	; 0xe8
 800711a:	46bd      	mov	sp, r7
 800711c:	bdb0      	pop	{r4, r5, r7, pc}
 800711e:	bf00      	nop
 8007120:	40000000 	.word	0x40000000
 8007124:	3f847ae1 	.word	0x3f847ae1
 8007128:	40100000 	.word	0x40100000
 800712c:	3fe00000 	.word	0x3fe00000
 8007130:	40180000 	.word	0x40180000

08007134 <scaraFlowDuty>:

/* Compute new x, y , z, theta1, theta2 , d3, theta4 corresponding to time */
SCARA_StatusTypeDef	scaraFlowDuty		(double time,
										SCARA_PositionTypeDef *pos_Next ,
										SCARA_PositionTypeDef pos_Current) {
 8007134:	b082      	sub	sp, #8
 8007136:	b5b0      	push	{r4, r5, r7, lr}
 8007138:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800713c:	af2c      	add	r7, sp, #176	; 0xb0
 800713e:	f107 0108 	add.w	r1, r7, #8
 8007142:	ed81 0b00 	vstr	d0, [r1]
 8007146:	1d39      	adds	r1, r7, #4
 8007148:	6008      	str	r0, [r1, #0]
 800714a:	f507 71b4 	add.w	r1, r7, #360	; 0x168
 800714e:	e881 000c 	stmia.w	r1, {r2, r3}
	SCARA_StatusTypeDef status1, status2, status3, status4;
	SCARA_PositionTypeDef	positionCompute;
	// Update time
	positionCompute.t = time;
 8007152:	f107 0210 	add.w	r2, r7, #16
 8007156:	f107 0308 	add.w	r3, r7, #8
 800715a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800715e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	/*---- Task space ----*/
	if ( DUTY_SPACE_TASK == myDUTY.space_type) {
 8007162:	4b92      	ldr	r3, [pc, #584]	; (80073ac <scaraFlowDuty+0x278>)
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	2b00      	cmp	r3, #0
 8007168:	f040 812e 	bne.w	80073c8 <scaraFlowDuty+0x294>
		double s, angle, x, y, z, v, v_angle;
		int8_t	dir_roll;
		//---Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.task.trajectory_3d.trajectory_type) {
 800716c:	4b8f      	ldr	r3, [pc, #572]	; (80073ac <scaraFlowDuty+0x278>)
 800716e:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8007172:	2b00      	cmp	r3, #0
 8007174:	d12d      	bne.n	80071d2 <scaraFlowDuty+0x9e>
			status1 = scaraFlowLSPB(&(myDUTY.task.trajectory_3d.lspb), time);
 8007176:	f107 0308 	add.w	r3, r7, #8
 800717a:	ed93 0b00 	vldr	d0, [r3]
 800717e:	488c      	ldr	r0, [pc, #560]	; (80073b0 <scaraFlowDuty+0x27c>)
 8007180:	f000 fc46 	bl	8007a10 <scaraFlowLSPB>
 8007184:	4603      	mov	r3, r0
 8007186:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
			status2 = scaraFlowLSPB(&(myDUTY.task.trajectory_roll.lspb), time);
 800718a:	f107 0308 	add.w	r3, r7, #8
 800718e:	ed93 0b00 	vldr	d0, [r3]
 8007192:	4888      	ldr	r0, [pc, #544]	; (80073b4 <scaraFlowDuty+0x280>)
 8007194:	f000 fc3c 	bl	8007a10 <scaraFlowLSPB>
 8007198:	4603      	mov	r3, r0
 800719a:	f887 3156 	strb.w	r3, [r7, #342]	; 0x156
			s = myDUTY.task.trajectory_3d.lspb.s_current;
 800719e:	4b83      	ldr	r3, [pc, #524]	; (80073ac <scaraFlowDuty+0x278>)
 80071a0:	e9d3 3464 	ldrd	r3, r4, [r3, #400]	; 0x190
 80071a4:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			v = myDUTY.task.trajectory_3d.lspb.v_current;
 80071a8:	4b80      	ldr	r3, [pc, #512]	; (80073ac <scaraFlowDuty+0x278>)
 80071aa:	e9d3 3462 	ldrd	r3, r4, [r3, #392]	; 0x188
 80071ae:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
			angle = myDUTY.task.trajectory_roll.lspb.s_current;
 80071b2:	4b7e      	ldr	r3, [pc, #504]	; (80073ac <scaraFlowDuty+0x278>)
 80071b4:	e9d3 34ba 	ldrd	r3, r4, [r3, #744]	; 0x2e8
 80071b8:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			v_angle = myDUTY.task.trajectory_roll.lspb.v_current;
 80071bc:	4b7b      	ldr	r3, [pc, #492]	; (80073ac <scaraFlowDuty+0x278>)
 80071be:	e9d3 34b8 	ldrd	r3, r4, [r3, #736]	; 0x2e0
 80071c2:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
			dir_roll = myDUTY.task.trajectory_roll.lspb.dir;
 80071c6:	4b79      	ldr	r3, [pc, #484]	; (80073ac <scaraFlowDuty+0x278>)
 80071c8:	f893 3270 	ldrb.w	r3, [r3, #624]	; 0x270
 80071cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 80071d0:	e034      	b.n	800723c <scaraFlowDuty+0x108>
			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.task.trajectory_3d.trajectory_type) {
 80071d2:	4b76      	ldr	r3, [pc, #472]	; (80073ac <scaraFlowDuty+0x278>)
 80071d4:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d12d      	bne.n	8007238 <scaraFlowDuty+0x104>
			status1 = scaraFLowScurve(&(myDUTY.task.trajectory_3d.scurve), time);
 80071dc:	f107 0308 	add.w	r3, r7, #8
 80071e0:	ed93 0b00 	vldr	d0, [r3]
 80071e4:	4874      	ldr	r0, [pc, #464]	; (80073b8 <scaraFlowDuty+0x284>)
 80071e6:	f000 fdbf 	bl	8007d68 <scaraFLowScurve>
 80071ea:	4603      	mov	r3, r0
 80071ec:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
			status2 = scaraFLowScurve(&(myDUTY.task.trajectory_roll.scurve), time);
 80071f0:	f107 0308 	add.w	r3, r7, #8
 80071f4:	ed93 0b00 	vldr	d0, [r3]
 80071f8:	4870      	ldr	r0, [pc, #448]	; (80073bc <scaraFlowDuty+0x288>)
 80071fa:	f000 fdb5 	bl	8007d68 <scaraFLowScurve>
 80071fe:	4603      	mov	r3, r0
 8007200:	f887 3156 	strb.w	r3, [r7, #342]	; 0x156
			s = myDUTY.task.trajectory_3d.scurve.s_current;
 8007204:	4b69      	ldr	r3, [pc, #420]	; (80073ac <scaraFlowDuty+0x278>)
 8007206:	e9d3 3498 	ldrd	r3, r4, [r3, #608]	; 0x260
 800720a:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			v = myDUTY.task.trajectory_3d.scurve.v_current;
 800720e:	4b67      	ldr	r3, [pc, #412]	; (80073ac <scaraFlowDuty+0x278>)
 8007210:	e9d3 3496 	ldrd	r3, r4, [r3, #600]	; 0x258
 8007214:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
			angle = myDUTY.task.trajectory_roll.scurve.s_current;
 8007218:	4b64      	ldr	r3, [pc, #400]	; (80073ac <scaraFlowDuty+0x278>)
 800721a:	e9d3 34ee 	ldrd	r3, r4, [r3, #952]	; 0x3b8
 800721e:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			v_angle = myDUTY.task.trajectory_roll.scurve.v_current;
 8007222:	4b62      	ldr	r3, [pc, #392]	; (80073ac <scaraFlowDuty+0x278>)
 8007224:	e9d3 34ec 	ldrd	r3, r4, [r3, #944]	; 0x3b0
 8007228:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
			dir_roll = myDUTY.task.trajectory_roll.scurve.dir;
 800722c:	4b5f      	ldr	r3, [pc, #380]	; (80073ac <scaraFlowDuty+0x278>)
 800722e:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 8007232:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8007236:	e001      	b.n	800723c <scaraFlowDuty+0x108>
		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8007238:	2305      	movs	r3, #5
 800723a:	e2ce      	b.n	80077da <scaraFlowDuty+0x6a6>
		}

		if ( SCARA_STATUS_OK != status1) {
 800723c:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8007240:	2b00      	cmp	r3, #0
 8007242:	d002      	beq.n	800724a <scaraFlowDuty+0x116>
			return status1;
 8007244:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8007248:	e2c7      	b.n	80077da <scaraFlowDuty+0x6a6>
		}
		if ( SCARA_STATUS_OK != status2) {
 800724a:	f897 3156 	ldrb.w	r3, [r7, #342]	; 0x156
 800724e:	2b00      	cmp	r3, #0
 8007250:	d002      	beq.n	8007258 <scaraFlowDuty+0x124>
			return status2;
 8007252:	f897 3156 	ldrb.w	r3, [r7, #342]	; 0x156
 8007256:	e2c0      	b.n	80077da <scaraFlowDuty+0x6a6>
		}

		//---Path flowing
			// Straight line
		if( DUTY_PATH_LINE == myDUTY.task.path.path_type) {
 8007258:	4b54      	ldr	r3, [pc, #336]	; (80073ac <scaraFlowDuty+0x278>)
 800725a:	7a1b      	ldrb	r3, [r3, #8]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d117      	bne.n	8007290 <scaraFlowDuty+0x15c>
			status1 = scaraFlowLine(&(myDUTY.task.path.line), s);
 8007260:	ed97 0b52 	vldr	d0, [r7, #328]	; 0x148
 8007264:	4856      	ldr	r0, [pc, #344]	; (80073c0 <scaraFlowDuty+0x28c>)
 8007266:	f000 fac3 	bl	80077f0 <scaraFlowLine>
 800726a:	4603      	mov	r3, r0
 800726c:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
			x = myDUTY.task.path.line.x_current;
 8007270:	4b4e      	ldr	r3, [pc, #312]	; (80073ac <scaraFlowDuty+0x278>)
 8007272:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 8007276:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
			y = myDUTY.task.path.line.y_current;
 800727a:	4b4c      	ldr	r3, [pc, #304]	; (80073ac <scaraFlowDuty+0x278>)
 800727c:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8007280:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
			z = myDUTY.task.path.line.z_current;
 8007284:	4b49      	ldr	r3, [pc, #292]	; (80073ac <scaraFlowDuty+0x278>)
 8007286:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 800728a:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
 800728e:	e01d      	b.n	80072cc <scaraFlowDuty+0x198>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == myDUTY.task.path.path_type) {
 8007290:	4b46      	ldr	r3, [pc, #280]	; (80073ac <scaraFlowDuty+0x278>)
 8007292:	7a1b      	ldrb	r3, [r3, #8]
 8007294:	2b01      	cmp	r3, #1
 8007296:	d117      	bne.n	80072c8 <scaraFlowDuty+0x194>
			status1 = scaraFlowCircle(&(myDUTY.task.path.circle), s);
 8007298:	ed97 0b52 	vldr	d0, [r7, #328]	; 0x148
 800729c:	4849      	ldr	r0, [pc, #292]	; (80073c4 <scaraFlowDuty+0x290>)
 800729e:	f000 fb2f 	bl	8007900 <scaraFlowCircle>
 80072a2:	4603      	mov	r3, r0
 80072a4:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
			x = myDUTY.task.path.circle.x_current;
 80072a8:	4b40      	ldr	r3, [pc, #256]	; (80073ac <scaraFlowDuty+0x278>)
 80072aa:	e9d3 343e 	ldrd	r3, r4, [r3, #248]	; 0xf8
 80072ae:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
			y = myDUTY.task.path.circle.y_current;
 80072b2:	4b3e      	ldr	r3, [pc, #248]	; (80073ac <scaraFlowDuty+0x278>)
 80072b4:	e9d3 3440 	ldrd	r3, r4, [r3, #256]	; 0x100
 80072b8:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
			z = myDUTY.task.path.circle.z_current;
 80072bc:	4b3b      	ldr	r3, [pc, #236]	; (80073ac <scaraFlowDuty+0x278>)
 80072be:	e9d3 3442 	ldrd	r3, r4, [r3, #264]	; 0x108
 80072c2:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
 80072c6:	e001      	b.n	80072cc <scaraFlowDuty+0x198>
		} else {
			return SCARA_STATUS_ERROR_TASK;
 80072c8:	2303      	movs	r3, #3
 80072ca:	e286      	b.n	80077da <scaraFlowDuty+0x6a6>
		}

		positionCompute.x 		= x;
 80072cc:	f107 0210 	add.w	r2, r7, #16
 80072d0:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 80072d4:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
		positionCompute.y		= y;
 80072d8:	f107 0210 	add.w	r2, r7, #16
 80072dc:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 80072e0:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
		positionCompute.z 		= z;
 80072e4:	f107 0210 	add.w	r2, r7, #16
 80072e8:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 80072ec:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		positionCompute.roll 	= myDUTY.task.roll_start + angle*dir_roll;
 80072f0:	4b2e      	ldr	r3, [pc, #184]	; (80073ac <scaraFlowDuty+0x278>)
 80072f2:	e9d3 45f0 	ldrd	r4, r5, [r3, #960]	; 0x3c0
 80072f6:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80072fa:	4618      	mov	r0, r3
 80072fc:	f7f9 f912 	bl	8000524 <__aeabi_i2d>
 8007300:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8007304:	f7f9 f978 	bl	80005f8 <__aeabi_dmul>
 8007308:	4602      	mov	r2, r0
 800730a:	460b      	mov	r3, r1
 800730c:	4620      	mov	r0, r4
 800730e:	4629      	mov	r1, r5
 8007310:	f7f8 ffbc 	bl	800028c <__adddf3>
 8007314:	4603      	mov	r3, r0
 8007316:	460c      	mov	r4, r1
 8007318:	f107 0210 	add.w	r2, r7, #16
 800731c:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

		positionCompute.q		= s;
 8007320:	f107 0210 	add.w	r2, r7, #16
 8007324:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 8007328:	e9c2 3400 	strd	r3, r4, [r2]
		positionCompute.q_roll  = angle;
 800732c:	f107 0210 	add.w	r2, r7, #16
 8007330:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8007334:	e9c2 3402 	strd	r3, r4, [r2, #8]

		positionCompute.v_3d    = v;
 8007338:	f107 0210 	add.w	r2, r7, #16
 800733c:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8007340:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
		positionCompute.v_roll  = v_angle;
 8007344:	f107 0210 	add.w	r2, r7, #16
 8007348:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 800734c:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0

		positionCompute.total_time = myDUTY.time_total;
 8007350:	4b16      	ldr	r3, [pc, #88]	; (80073ac <scaraFlowDuty+0x278>)
 8007352:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8007356:	e9d3 3400 	ldrd	r3, r4, [r3]
 800735a:	f107 0210 	add.w	r2, r7, #16
 800735e:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
		positionCompute.t		= time;
 8007362:	f107 0210 	add.w	r2, r7, #16
 8007366:	f107 0308 	add.w	r3, r7, #8
 800736a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800736e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		if ( FALSE == kinematicInverse(&positionCompute, pos_Current)) {
 8007372:	f107 0410 	add.w	r4, r7, #16
 8007376:	4668      	mov	r0, sp
 8007378:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800737c:	22b0      	movs	r2, #176	; 0xb0
 800737e:	4619      	mov	r1, r3
 8007380:	f00e f9f6 	bl	8015770 <memcpy>
 8007384:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8007388:	cb0c      	ldmia	r3, {r2, r3}
 800738a:	4620      	mov	r0, r4
 800738c:	f7fb ff38 	bl	8003200 <kinematicInverse>
 8007390:	4603      	mov	r3, r0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d101      	bne.n	800739a <scaraFlowDuty+0x266>
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8007396:	2307      	movs	r3, #7
 8007398:	e21f      	b.n	80077da <scaraFlowDuty+0x6a6>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 800739a:	f107 0110 	add.w	r1, r7, #16
 800739e:	1d3b      	adds	r3, r7, #4
 80073a0:	22b8      	movs	r2, #184	; 0xb8
 80073a2:	6818      	ldr	r0, [r3, #0]
 80073a4:	f00e f9e4 	bl	8015770 <memcpy>
 80073a8:	e216      	b.n	80077d8 <scaraFlowDuty+0x6a4>
 80073aa:	bf00      	nop
 80073ac:	20005378 	.word	0x20005378
 80073b0:	20005490 	.word	0x20005490
 80073b4:	200055e8 	.word	0x200055e8
 80073b8:	20005510 	.word	0x20005510
 80073bc:	20005668 	.word	0x20005668
 80073c0:	20005388 	.word	0x20005388
 80073c4:	200053f8 	.word	0x200053f8
		}

	/*---- Joint space -----*/
	} else if (DUTY_SPACE_JOINT == myDUTY.space_type) {
 80073c8:	4b8b      	ldr	r3, [pc, #556]	; (80075f8 <scaraFlowDuty+0x4c4>)
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	f040 8201 	bne.w	80077d4 <scaraFlowDuty+0x6a0>
		double s0, s1, s2, s3;
		double v0, v1, v2, v3;
		int8_t dir0, dir1, dir2, dir3;
		// Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.joint.trajectory[0].trajectory_type) {
 80073d2:	4b89      	ldr	r3, [pc, #548]	; (80075f8 <scaraFlowDuty+0x4c4>)
 80073d4:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d174      	bne.n	80074c6 <scaraFlowDuty+0x392>
			status1 = scaraFlowLSPB(&(myDUTY.joint.trajectory[0].lspb), time);
 80073dc:	f107 0308 	add.w	r3, r7, #8
 80073e0:	ed93 0b00 	vldr	d0, [r3]
 80073e4:	4885      	ldr	r0, [pc, #532]	; (80075fc <scaraFlowDuty+0x4c8>)
 80073e6:	f000 fb13 	bl	8007a10 <scaraFlowLSPB>
 80073ea:	4603      	mov	r3, r0
 80073ec:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
			status2 = scaraFlowLSPB(&(myDUTY.joint.trajectory[1].lspb), time);
 80073f0:	f107 0308 	add.w	r3, r7, #8
 80073f4:	ed93 0b00 	vldr	d0, [r3]
 80073f8:	4881      	ldr	r0, [pc, #516]	; (8007600 <scaraFlowDuty+0x4cc>)
 80073fa:	f000 fb09 	bl	8007a10 <scaraFlowLSPB>
 80073fe:	4603      	mov	r3, r0
 8007400:	f887 3156 	strb.w	r3, [r7, #342]	; 0x156
			status3 = scaraFlowLSPB(&(myDUTY.joint.trajectory[2].lspb), time);
 8007404:	f107 0308 	add.w	r3, r7, #8
 8007408:	ed93 0b00 	vldr	d0, [r3]
 800740c:	487d      	ldr	r0, [pc, #500]	; (8007604 <scaraFlowDuty+0x4d0>)
 800740e:	f000 faff 	bl	8007a10 <scaraFlowLSPB>
 8007412:	4603      	mov	r3, r0
 8007414:	f887 3155 	strb.w	r3, [r7, #341]	; 0x155
			status4 = scaraFlowLSPB(&(myDUTY.joint.trajectory[3].lspb), time);
 8007418:	f107 0308 	add.w	r3, r7, #8
 800741c:	ed93 0b00 	vldr	d0, [r3]
 8007420:	4879      	ldr	r0, [pc, #484]	; (8007608 <scaraFlowDuty+0x4d4>)
 8007422:	f000 faf5 	bl	8007a10 <scaraFlowLSPB>
 8007426:	4603      	mov	r3, r0
 8007428:	f887 3154 	strb.w	r3, [r7, #340]	; 0x154

			dir0 = myDUTY.joint.trajectory[0].lspb.dir;
 800742c:	4b72      	ldr	r3, [pc, #456]	; (80075f8 <scaraFlowDuty+0x4c4>)
 800742e:	f893 33d0 	ldrb.w	r3, [r3, #976]	; 0x3d0
 8007432:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			dir1 = myDUTY.joint.trajectory[1].lspb.dir;
 8007436:	4b70      	ldr	r3, [pc, #448]	; (80075f8 <scaraFlowDuty+0x4c4>)
 8007438:	f893 3528 	ldrb.w	r3, [r3, #1320]	; 0x528
 800743c:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
			dir2 = myDUTY.joint.trajectory[2].lspb.dir;
 8007440:	4b6d      	ldr	r3, [pc, #436]	; (80075f8 <scaraFlowDuty+0x4c4>)
 8007442:	f893 3680 	ldrb.w	r3, [r3, #1664]	; 0x680
 8007446:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
			dir3 = myDUTY.joint.trajectory[3].lspb.dir;
 800744a:	4b6b      	ldr	r3, [pc, #428]	; (80075f8 <scaraFlowDuty+0x4c4>)
 800744c:	f893 37d8 	ldrb.w	r3, [r3, #2008]	; 0x7d8
 8007450:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc

			s0 = myDUTY.joint.trajectory[0].lspb.s_current;
 8007454:	4b68      	ldr	r3, [pc, #416]	; (80075f8 <scaraFlowDuty+0x4c4>)
 8007456:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 800745a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800745e:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
			s1 = myDUTY.joint.trajectory[1].lspb.s_current;
 8007462:	4b65      	ldr	r3, [pc, #404]	; (80075f8 <scaraFlowDuty+0x4c4>)
 8007464:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8007468:	e9d3 3400 	ldrd	r3, r4, [r3]
 800746c:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
			s2 = myDUTY.joint.trajectory[2].lspb.s_current;
 8007470:	4b61      	ldr	r3, [pc, #388]	; (80075f8 <scaraFlowDuty+0x4c4>)
 8007472:	f503 63df 	add.w	r3, r3, #1784	; 0x6f8
 8007476:	e9d3 3400 	ldrd	r3, r4, [r3]
 800747a:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8
			s3 = myDUTY.joint.trajectory[3].lspb.s_current;
 800747e:	4b5e      	ldr	r3, [pc, #376]	; (80075f8 <scaraFlowDuty+0x4c4>)
 8007480:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 8007484:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007488:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0

			v0 = myDUTY.joint.trajectory[0].lspb.v_current;
 800748c:	4b5a      	ldr	r3, [pc, #360]	; (80075f8 <scaraFlowDuty+0x4c4>)
 800748e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007492:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007496:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
			v1 = myDUTY.joint.trajectory[1].lspb.v_current;
 800749a:	4b57      	ldr	r3, [pc, #348]	; (80075f8 <scaraFlowDuty+0x4c4>)
 800749c:	f503 63b3 	add.w	r3, r3, #1432	; 0x598
 80074a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80074a4:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			v2 = myDUTY.joint.trajectory[2].lspb.v_current;
 80074a8:	4b53      	ldr	r3, [pc, #332]	; (80075f8 <scaraFlowDuty+0x4c4>)
 80074aa:	f503 63de 	add.w	r3, r3, #1776	; 0x6f0
 80074ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80074b2:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
			v3 = myDUTY.joint.trajectory[3].lspb.v_current;
 80074b6:	4b50      	ldr	r3, [pc, #320]	; (80075f8 <scaraFlowDuty+0x4c4>)
 80074b8:	f603 0348 	addw	r3, r3, #2120	; 0x848
 80074bc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80074c0:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
 80074c4:	e07b      	b.n	80075be <scaraFlowDuty+0x48a>

			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.joint.trajectory[0].trajectory_type) {
 80074c6:	4b4c      	ldr	r3, [pc, #304]	; (80075f8 <scaraFlowDuty+0x4c4>)
 80074c8:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d174      	bne.n	80075ba <scaraFlowDuty+0x486>
			status1 = scaraFLowScurve(&(myDUTY.joint.trajectory[0].scurve), time);
 80074d0:	f107 0308 	add.w	r3, r7, #8
 80074d4:	ed93 0b00 	vldr	d0, [r3]
 80074d8:	484c      	ldr	r0, [pc, #304]	; (800760c <scaraFlowDuty+0x4d8>)
 80074da:	f000 fc45 	bl	8007d68 <scaraFLowScurve>
 80074de:	4603      	mov	r3, r0
 80074e0:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
			status2 = scaraFLowScurve(&(myDUTY.joint.trajectory[1].scurve), time);
 80074e4:	f107 0308 	add.w	r3, r7, #8
 80074e8:	ed93 0b00 	vldr	d0, [r3]
 80074ec:	4848      	ldr	r0, [pc, #288]	; (8007610 <scaraFlowDuty+0x4dc>)
 80074ee:	f000 fc3b 	bl	8007d68 <scaraFLowScurve>
 80074f2:	4603      	mov	r3, r0
 80074f4:	f887 3156 	strb.w	r3, [r7, #342]	; 0x156
			status3 = scaraFLowScurve(&(myDUTY.joint.trajectory[2].scurve), time);
 80074f8:	f107 0308 	add.w	r3, r7, #8
 80074fc:	ed93 0b00 	vldr	d0, [r3]
 8007500:	4844      	ldr	r0, [pc, #272]	; (8007614 <scaraFlowDuty+0x4e0>)
 8007502:	f000 fc31 	bl	8007d68 <scaraFLowScurve>
 8007506:	4603      	mov	r3, r0
 8007508:	f887 3155 	strb.w	r3, [r7, #341]	; 0x155
			status4 = scaraFLowScurve(&(myDUTY.joint.trajectory[3].scurve), time);
 800750c:	f107 0308 	add.w	r3, r7, #8
 8007510:	ed93 0b00 	vldr	d0, [r3]
 8007514:	4840      	ldr	r0, [pc, #256]	; (8007618 <scaraFlowDuty+0x4e4>)
 8007516:	f000 fc27 	bl	8007d68 <scaraFLowScurve>
 800751a:	4603      	mov	r3, r0
 800751c:	f887 3154 	strb.w	r3, [r7, #340]	; 0x154
			dir0 = myDUTY.joint.trajectory[0].scurve.dir;
 8007520:	4b35      	ldr	r3, [pc, #212]	; (80075f8 <scaraFlowDuty+0x4c4>)
 8007522:	f893 3450 	ldrb.w	r3, [r3, #1104]	; 0x450
 8007526:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			dir1 = myDUTY.joint.trajectory[1].scurve.dir;
 800752a:	4b33      	ldr	r3, [pc, #204]	; (80075f8 <scaraFlowDuty+0x4c4>)
 800752c:	f893 35a8 	ldrb.w	r3, [r3, #1448]	; 0x5a8
 8007530:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
			dir2 = myDUTY.joint.trajectory[2].scurve.dir;
 8007534:	4b30      	ldr	r3, [pc, #192]	; (80075f8 <scaraFlowDuty+0x4c4>)
 8007536:	f893 3700 	ldrb.w	r3, [r3, #1792]	; 0x700
 800753a:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
			dir3 = myDUTY.joint.trajectory[3].scurve.dir;
 800753e:	4b2e      	ldr	r3, [pc, #184]	; (80075f8 <scaraFlowDuty+0x4c4>)
 8007540:	f893 3858 	ldrb.w	r3, [r3, #2136]	; 0x858
 8007544:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
			s0 = myDUTY.joint.trajectory[0].scurve.s_current;
 8007548:	4b2b      	ldr	r3, [pc, #172]	; (80075f8 <scaraFlowDuty+0x4c4>)
 800754a:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 800754e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007552:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
			s1 = myDUTY.joint.trajectory[1].scurve.s_current;
 8007556:	4b28      	ldr	r3, [pc, #160]	; (80075f8 <scaraFlowDuty+0x4c4>)
 8007558:	f503 63ce 	add.w	r3, r3, #1648	; 0x670
 800755c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007560:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
			s2 = myDUTY.joint.trajectory[2].scurve.s_current;
 8007564:	4b24      	ldr	r3, [pc, #144]	; (80075f8 <scaraFlowDuty+0x4c4>)
 8007566:	f503 63f9 	add.w	r3, r3, #1992	; 0x7c8
 800756a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800756e:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8
			s3 = myDUTY.joint.trajectory[3].scurve.s_current;
 8007572:	4b21      	ldr	r3, [pc, #132]	; (80075f8 <scaraFlowDuty+0x4c4>)
 8007574:	f503 6312 	add.w	r3, r3, #2336	; 0x920
 8007578:	e9d3 3400 	ldrd	r3, r4, [r3]
 800757c:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0

			v0 = myDUTY.joint.trajectory[0].scurve.v_current;
 8007580:	4b1d      	ldr	r3, [pc, #116]	; (80075f8 <scaraFlowDuty+0x4c4>)
 8007582:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8007586:	e9d3 3400 	ldrd	r3, r4, [r3]
 800758a:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
			v1 = myDUTY.joint.trajectory[1].scurve.v_current;
 800758e:	4b1a      	ldr	r3, [pc, #104]	; (80075f8 <scaraFlowDuty+0x4c4>)
 8007590:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 8007594:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007598:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			v2 = myDUTY.joint.trajectory[2].scurve.v_current;
 800759c:	4b16      	ldr	r3, [pc, #88]	; (80075f8 <scaraFlowDuty+0x4c4>)
 800759e:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 80075a2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80075a6:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
			v3 = myDUTY.joint.trajectory[3].scurve.v_current;
 80075aa:	4b13      	ldr	r3, [pc, #76]	; (80075f8 <scaraFlowDuty+0x4c4>)
 80075ac:	f603 1318 	addw	r3, r3, #2328	; 0x918
 80075b0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80075b4:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
 80075b8:	e001      	b.n	80075be <scaraFlowDuty+0x48a>

		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 80075ba:	2305      	movs	r3, #5
 80075bc:	e10d      	b.n	80077da <scaraFlowDuty+0x6a6>
		}
		// Check init status
		if ( SCARA_STATUS_OK != status1) {
 80075be:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d002      	beq.n	80075cc <scaraFlowDuty+0x498>
			return status1;
 80075c6:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 80075ca:	e106      	b.n	80077da <scaraFlowDuty+0x6a6>
		}
		if ( SCARA_STATUS_OK != status2) {
 80075cc:	f897 3156 	ldrb.w	r3, [r7, #342]	; 0x156
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d002      	beq.n	80075da <scaraFlowDuty+0x4a6>
			return status2;
 80075d4:	f897 3156 	ldrb.w	r3, [r7, #342]	; 0x156
 80075d8:	e0ff      	b.n	80077da <scaraFlowDuty+0x6a6>
		}
		if ( SCARA_STATUS_OK != status3) {
 80075da:	f897 3155 	ldrb.w	r3, [r7, #341]	; 0x155
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d002      	beq.n	80075e8 <scaraFlowDuty+0x4b4>
			return status3;
 80075e2:	f897 3155 	ldrb.w	r3, [r7, #341]	; 0x155
 80075e6:	e0f8      	b.n	80077da <scaraFlowDuty+0x6a6>
		}
		if ( SCARA_STATUS_OK != status4) {
 80075e8:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d015      	beq.n	800761c <scaraFlowDuty+0x4e8>
			return status4;
 80075f0:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80075f4:	e0f1      	b.n	80077da <scaraFlowDuty+0x6a6>
 80075f6:	bf00      	nop
 80075f8:	20005378 	.word	0x20005378
 80075fc:	20005748 	.word	0x20005748
 8007600:	200058a0 	.word	0x200058a0
 8007604:	200059f8 	.word	0x200059f8
 8007608:	20005b50 	.word	0x20005b50
 800760c:	200057c8 	.word	0x200057c8
 8007610:	20005920 	.word	0x20005920
 8007614:	20005a78 	.word	0x20005a78
 8007618:	20005bd0 	.word	0x20005bd0
		}

		positionCompute.Theta1 	= myDUTY.joint.theta1_start + s0*dir0;
 800761c:	4b73      	ldr	r3, [pc, #460]	; (80077ec <scaraFlowDuty+0x6b8>)
 800761e:	f603 1328 	addw	r3, r3, #2344	; 0x928
 8007622:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007626:	f997 30cf 	ldrsb.w	r3, [r7, #207]	; 0xcf
 800762a:	4618      	mov	r0, r3
 800762c:	f7f8 ff7a 	bl	8000524 <__aeabi_i2d>
 8007630:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8007634:	f7f8 ffe0 	bl	80005f8 <__aeabi_dmul>
 8007638:	4602      	mov	r2, r0
 800763a:	460b      	mov	r3, r1
 800763c:	4620      	mov	r0, r4
 800763e:	4629      	mov	r1, r5
 8007640:	f7f8 fe24 	bl	800028c <__adddf3>
 8007644:	4603      	mov	r3, r0
 8007646:	460c      	mov	r4, r1
 8007648:	f107 0210 	add.w	r2, r7, #16
 800764c:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		positionCompute.Theta2 	= myDUTY.joint.theta2_start + s1*dir1;
 8007650:	4b66      	ldr	r3, [pc, #408]	; (80077ec <scaraFlowDuty+0x6b8>)
 8007652:	f503 6313 	add.w	r3, r3, #2352	; 0x930
 8007656:	e9d3 4500 	ldrd	r4, r5, [r3]
 800765a:	f997 30ce 	ldrsb.w	r3, [r7, #206]	; 0xce
 800765e:	4618      	mov	r0, r3
 8007660:	f7f8 ff60 	bl	8000524 <__aeabi_i2d>
 8007664:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8007668:	f7f8 ffc6 	bl	80005f8 <__aeabi_dmul>
 800766c:	4602      	mov	r2, r0
 800766e:	460b      	mov	r3, r1
 8007670:	4620      	mov	r0, r4
 8007672:	4629      	mov	r1, r5
 8007674:	f7f8 fe0a 	bl	800028c <__adddf3>
 8007678:	4603      	mov	r3, r0
 800767a:	460c      	mov	r4, r1
 800767c:	f107 0210 	add.w	r2, r7, #16
 8007680:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		positionCompute.D3 		= myDUTY.joint.d3_start 	+ s2*dir2;
 8007684:	4b59      	ldr	r3, [pc, #356]	; (80077ec <scaraFlowDuty+0x6b8>)
 8007686:	f603 1338 	addw	r3, r3, #2360	; 0x938
 800768a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800768e:	f997 30cd 	ldrsb.w	r3, [r7, #205]	; 0xcd
 8007692:	4618      	mov	r0, r3
 8007694:	f7f8 ff46 	bl	8000524 <__aeabi_i2d>
 8007698:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800769c:	f7f8 ffac 	bl	80005f8 <__aeabi_dmul>
 80076a0:	4602      	mov	r2, r0
 80076a2:	460b      	mov	r3, r1
 80076a4:	4620      	mov	r0, r4
 80076a6:	4629      	mov	r1, r5
 80076a8:	f7f8 fdf0 	bl	800028c <__adddf3>
 80076ac:	4603      	mov	r3, r0
 80076ae:	460c      	mov	r4, r1
 80076b0:	f107 0210 	add.w	r2, r7, #16
 80076b4:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		positionCompute.Theta4 	= myDUTY.joint.theta4_start + s3*dir3;
 80076b8:	4b4c      	ldr	r3, [pc, #304]	; (80077ec <scaraFlowDuty+0x6b8>)
 80076ba:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 80076be:	e9d3 4500 	ldrd	r4, r5, [r3]
 80076c2:	f997 30cc 	ldrsb.w	r3, [r7, #204]	; 0xcc
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7f8 ff2c 	bl	8000524 <__aeabi_i2d>
 80076cc:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 80076d0:	f7f8 ff92 	bl	80005f8 <__aeabi_dmul>
 80076d4:	4602      	mov	r2, r0
 80076d6:	460b      	mov	r3, r1
 80076d8:	4620      	mov	r0, r4
 80076da:	4629      	mov	r1, r5
 80076dc:	f7f8 fdd6 	bl	800028c <__adddf3>
 80076e0:	4603      	mov	r3, r0
 80076e2:	460c      	mov	r4, r1
 80076e4:	f107 0210 	add.w	r2, r7, #16
 80076e8:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

		positionCompute.v_theta1 	= v0;
 80076ec:	f107 0210 	add.w	r2, r7, #16
 80076f0:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 80076f4:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		positionCompute.v_theta2 	= v1;
 80076f8:	f107 0210 	add.w	r2, r7, #16
 80076fc:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8007700:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
		positionCompute.v_d3 		= v2;
 8007704:	f107 0210 	add.w	r2, r7, #16
 8007708:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 800770c:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
		positionCompute.v_theta4 	= v3;
 8007710:	f107 0210 	add.w	r2, r7, #16
 8007714:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8007718:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0

		positionCompute.q_theta1 = s0;
 800771c:	f107 0210 	add.w	r2, r7, #16
 8007720:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 8007724:	e9c2 3404 	strd	r3, r4, [r2, #16]
		positionCompute.q_theta2 = s1;
 8007728:	f107 0210 	add.w	r2, r7, #16
 800772c:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8007730:	e9c2 3406 	strd	r3, r4, [r2, #24]
		positionCompute.q_d3	 = s2;
 8007734:	f107 0210 	add.w	r2, r7, #16
 8007738:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 800773c:	e9c2 3408 	strd	r3, r4, [r2, #32]
		positionCompute.q_theta4 = s3;
 8007740:	f107 0210 	add.w	r2, r7, #16
 8007744:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8007748:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

		positionCompute.total_time = myDUTY.time_total;
 800774c:	4b27      	ldr	r3, [pc, #156]	; (80077ec <scaraFlowDuty+0x6b8>)
 800774e:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8007752:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007756:	f107 0210 	add.w	r2, r7, #16
 800775a:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
		positionCompute.t		= time;
 800775e:	f107 0210 	add.w	r2, r7, #16
 8007762:	f107 0308 	add.w	r3, r7, #8
 8007766:	e9d3 3400 	ldrd	r3, r4, [r3]
 800776a:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		// Check workspace
		if( SCARA_STATUS_OK != scaraCheckWorkSpace4(positionCompute.Theta1,
 800776e:	f107 0310 	add.w	r3, r7, #16
 8007772:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8007776:	f107 0310 	add.w	r3, r7, #16
 800777a:	ed93 6b1c 	vldr	d6, [r3, #112]	; 0x70
 800777e:	f107 0310 	add.w	r3, r7, #16
 8007782:	ed93 5b1e 	vldr	d5, [r3, #120]	; 0x78
 8007786:	f107 0310 	add.w	r3, r7, #16
 800778a:	ed93 4b20 	vldr	d4, [r3, #128]	; 0x80
 800778e:	eeb0 3a44 	vmov.f32	s6, s8
 8007792:	eef0 3a64 	vmov.f32	s7, s9
 8007796:	eeb0 2a45 	vmov.f32	s4, s10
 800779a:	eef0 2a65 	vmov.f32	s5, s11
 800779e:	eeb0 1a46 	vmov.f32	s2, s12
 80077a2:	eef0 1a66 	vmov.f32	s3, s13
 80077a6:	eeb0 0a47 	vmov.f32	s0, s14
 80077aa:	eef0 0a67 	vmov.f32	s1, s15
 80077ae:	f001 f9bf 	bl	8008b30 <scaraCheckWorkSpace4>
 80077b2:	4603      	mov	r3, r0
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d001      	beq.n	80077bc <scaraFlowDuty+0x688>
							 	 	 	  positionCompute.Theta2,
										  positionCompute.D3,
										  positionCompute.Theta4)) {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80077b8:	2307      	movs	r3, #7
 80077ba:	e00e      	b.n	80077da <scaraFlowDuty+0x6a6>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 80077bc:	f107 0110 	add.w	r1, r7, #16
 80077c0:	1d3b      	adds	r3, r7, #4
 80077c2:	22b8      	movs	r2, #184	; 0xb8
 80077c4:	6818      	ldr	r0, [r3, #0]
 80077c6:	f00d ffd3 	bl	8015770 <memcpy>
		}
		kinematicForward(pos_Next);
 80077ca:	1d3b      	adds	r3, r7, #4
 80077cc:	6818      	ldr	r0, [r3, #0]
 80077ce:	f7fb fbdb 	bl	8002f88 <kinematicForward>
 80077d2:	e001      	b.n	80077d8 <scaraFlowDuty+0x6a4>

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 80077d4:	2302      	movs	r3, #2
 80077d6:	e000      	b.n	80077da <scaraFlowDuty+0x6a6>
	}

	return SCARA_STATUS_OK;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 80077e0:	46bd      	mov	sp, r7
 80077e2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80077e6:	b002      	add	sp, #8
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop
 80077ec:	20005378 	.word	0x20005378

080077f0 <scaraFlowLine>:

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowLine		(Path_Line_TypeDef *line, double s) {
 80077f0:	b5b0      	push	{r4, r5, r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	ed87 0b00 	vstr	d0, [r7]
	// Avoid div with 0
	if ( line->total_s > 0.01) {
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8007802:	a33d      	add	r3, pc, #244	; (adr r3, 80078f8 <scaraFlowLine+0x108>)
 8007804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007808:	f7f9 f986 	bl	8000b18 <__aeabi_dcmpgt>
 800780c:	4603      	mov	r3, r0
 800780e:	2b00      	cmp	r3, #0
 8007810:	d05a      	beq.n	80078c8 <scaraFlowLine+0xd8>
		line->x_current	 = line->x0 + line->denta_x*s/line->total_s;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800781e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007822:	f7f8 fee9 	bl	80005f8 <__aeabi_dmul>
 8007826:	4602      	mov	r2, r0
 8007828:	460b      	mov	r3, r1
 800782a:	4610      	mov	r0, r2
 800782c:	4619      	mov	r1, r3
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8007834:	f7f9 f80a 	bl	800084c <__aeabi_ddiv>
 8007838:	4602      	mov	r2, r0
 800783a:	460b      	mov	r3, r1
 800783c:	4620      	mov	r0, r4
 800783e:	4629      	mov	r1, r5
 8007840:	f7f8 fd24 	bl	800028c <__adddf3>
 8007844:	4603      	mov	r3, r0
 8007846:	460c      	mov	r4, r1
 8007848:	68fa      	ldr	r2, [r7, #12]
 800784a:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		line->y_current	 = line->y0 + line->denta_y*s/line->total_s;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800785a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800785e:	f7f8 fecb 	bl	80005f8 <__aeabi_dmul>
 8007862:	4602      	mov	r2, r0
 8007864:	460b      	mov	r3, r1
 8007866:	4610      	mov	r0, r2
 8007868:	4619      	mov	r1, r3
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8007870:	f7f8 ffec 	bl	800084c <__aeabi_ddiv>
 8007874:	4602      	mov	r2, r0
 8007876:	460b      	mov	r3, r1
 8007878:	4620      	mov	r0, r4
 800787a:	4629      	mov	r1, r5
 800787c:	f7f8 fd06 	bl	800028c <__adddf3>
 8007880:	4603      	mov	r3, r0
 8007882:	460c      	mov	r4, r1
 8007884:	68fa      	ldr	r2, [r7, #12]
 8007886:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
		line->z_current	 = line->z0 + line->denta_z*s/line->total_s;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8007896:	e9d7 2300 	ldrd	r2, r3, [r7]
 800789a:	f7f8 fead 	bl	80005f8 <__aeabi_dmul>
 800789e:	4602      	mov	r2, r0
 80078a0:	460b      	mov	r3, r1
 80078a2:	4610      	mov	r0, r2
 80078a4:	4619      	mov	r1, r3
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80078ac:	f7f8 ffce 	bl	800084c <__aeabi_ddiv>
 80078b0:	4602      	mov	r2, r0
 80078b2:	460b      	mov	r3, r1
 80078b4:	4620      	mov	r0, r4
 80078b6:	4629      	mov	r1, r5
 80078b8:	f7f8 fce8 	bl	800028c <__adddf3>
 80078bc:	4603      	mov	r3, r0
 80078be:	460c      	mov	r4, r1
 80078c0:	68fa      	ldr	r2, [r7, #12]
 80078c2:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
 80078c6:	e011      	b.n	80078ec <scaraFlowLine+0xfc>
	} else {
		line->x_current = line->x1;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80078ce:	68fa      	ldr	r2, [r7, #12]
 80078d0:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		line->y_current = line->y1;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 80078da:	68fa      	ldr	r2, [r7, #12]
 80078dc:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
		line->z_current = line->z1;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 80078e6:	68fa      	ldr	r2, [r7, #12]
 80078e8:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	}

	return SCARA_STATUS_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3710      	adds	r7, #16
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bdb0      	pop	{r4, r5, r7, pc}
 80078f6:	bf00      	nop
 80078f8:	47ae147b 	.word	0x47ae147b
 80078fc:	3f847ae1 	.word	0x3f847ae1

08007900 <scaraFlowCircle>:

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowCircle		(Path_Circle_TypeDef *circle, double s) {
 8007900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007904:	b086      	sub	sp, #24
 8007906:	af00      	add	r7, sp, #0
 8007908:	60f8      	str	r0, [r7, #12]
 800790a:	ed87 0b00 	vstr	d0, [r7]
	double angle;
	angle = s/(circle->radius);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8007914:	461a      	mov	r2, r3
 8007916:	4623      	mov	r3, r4
 8007918:	e9d7 0100 	ldrd	r0, r1, [r7]
 800791c:	f7f8 ff96 	bl	800084c <__aeabi_ddiv>
 8007920:	4603      	mov	r3, r0
 8007922:	460c      	mov	r4, r1
 8007924:	e9c7 3404 	strd	r3, r4, [r7, #16]
	circle->x_current = circle->xi + circle->radius*cos(circle->angle_start + circle->dir*angle);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f993 3000 	ldrsb.w	r3, [r3]
 8007940:	4618      	mov	r0, r3
 8007942:	f7f8 fdef 	bl	8000524 <__aeabi_i2d>
 8007946:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800794a:	f7f8 fe55 	bl	80005f8 <__aeabi_dmul>
 800794e:	4602      	mov	r2, r0
 8007950:	460b      	mov	r3, r1
 8007952:	4650      	mov	r0, sl
 8007954:	4659      	mov	r1, fp
 8007956:	f7f8 fc99 	bl	800028c <__adddf3>
 800795a:	4602      	mov	r2, r0
 800795c:	460b      	mov	r3, r1
 800795e:	ec43 2b17 	vmov	d7, r2, r3
 8007962:	eeb0 0a47 	vmov.f32	s0, s14
 8007966:	eef0 0a67 	vmov.f32	s1, s15
 800796a:	f011 fcfd 	bl	8019368 <cos>
 800796e:	ec53 2b10 	vmov	r2, r3, d0
 8007972:	4640      	mov	r0, r8
 8007974:	4649      	mov	r1, r9
 8007976:	f7f8 fe3f 	bl	80005f8 <__aeabi_dmul>
 800797a:	4602      	mov	r2, r0
 800797c:	460b      	mov	r3, r1
 800797e:	4620      	mov	r0, r4
 8007980:	4629      	mov	r1, r5
 8007982:	f7f8 fc83 	bl	800028c <__adddf3>
 8007986:	4603      	mov	r3, r0
 8007988:	460c      	mov	r4, r1
 800798a:	68fa      	ldr	r2, [r7, #12]
 800798c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	circle->y_current = circle->yi + circle->radius*sin(circle->angle_start + circle->dir*angle);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f993 3000 	ldrsb.w	r3, [r3]
 80079a8:	4618      	mov	r0, r3
 80079aa:	f7f8 fdbb 	bl	8000524 <__aeabi_i2d>
 80079ae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80079b2:	f7f8 fe21 	bl	80005f8 <__aeabi_dmul>
 80079b6:	4602      	mov	r2, r0
 80079b8:	460b      	mov	r3, r1
 80079ba:	4650      	mov	r0, sl
 80079bc:	4659      	mov	r1, fp
 80079be:	f7f8 fc65 	bl	800028c <__adddf3>
 80079c2:	4602      	mov	r2, r0
 80079c4:	460b      	mov	r3, r1
 80079c6:	ec43 2b17 	vmov	d7, r2, r3
 80079ca:	eeb0 0a47 	vmov.f32	s0, s14
 80079ce:	eef0 0a67 	vmov.f32	s1, s15
 80079d2:	f011 fd59 	bl	8019488 <sin>
 80079d6:	ec53 2b10 	vmov	r2, r3, d0
 80079da:	4640      	mov	r0, r8
 80079dc:	4649      	mov	r1, r9
 80079de:	f7f8 fe0b 	bl	80005f8 <__aeabi_dmul>
 80079e2:	4602      	mov	r2, r0
 80079e4:	460b      	mov	r3, r1
 80079e6:	4620      	mov	r0, r4
 80079e8:	4629      	mov	r1, r5
 80079ea:	f7f8 fc4f 	bl	800028c <__adddf3>
 80079ee:	4603      	mov	r3, r0
 80079f0:	460c      	mov	r4, r1
 80079f2:	68fa      	ldr	r2, [r7, #12]
 80079f4:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	circle->z_current = circle->zi; // XY plane
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 80079fe:	68fa      	ldr	r2, [r7, #12]
 8007a00:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

	return SCARA_STATUS_OK;
 8007a04:	2300      	movs	r3, #0
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3718      	adds	r7, #24
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007a10 <scaraFlowLSPB>:

/* Compute new s corresponding to time */
SCARA_StatusTypeDef	scaraFlowLSPB		(Trajectory_LSPB_TypeDef *lspb, double time) {
 8007a10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007a14:	b08b      	sub	sp, #44	; 0x2c
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	60f8      	str	r0, [r7, #12]
 8007a1a:	ed87 0b00 	vstr	d0, [r7]
	double tf, td, ta;

	tf = lspb->Tf;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8007a24:	e9c7 2308 	strd	r2, r3, [r7, #32]
	td = lspb->Td;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8007a2e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	ta = lspb->Ta;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8007a38:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Accelerate
	if ( 0.0f <= time && time <= ta) {
 8007a3c:	f04f 0200 	mov.w	r2, #0
 8007a40:	f04f 0300 	mov.w	r3, #0
 8007a44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a48:	f7f9 f85c 	bl	8000b04 <__aeabi_dcmpge>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d05b      	beq.n	8007b0a <scaraFlowLSPB+0xfa>
 8007a52:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007a56:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a5a:	f7f9 f849 	bl	8000af0 <__aeabi_dcmple>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d052      	beq.n	8007b0a <scaraFlowLSPB+0xfa>
		lspb->a_current		=	lspb->a_design;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8007a6a:	68fa      	ldr	r2, [r7, #12]
 8007a6c:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	lspb->v0 + lspb->a_design*time;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8007a7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a80:	f7f8 fdba 	bl	80005f8 <__aeabi_dmul>
 8007a84:	4602      	mov	r2, r0
 8007a86:	460b      	mov	r3, r1
 8007a88:	4620      	mov	r0, r4
 8007a8a:	4629      	mov	r1, r5
 8007a8c:	f7f8 fbfe 	bl	800028c <__adddf3>
 8007a90:	4603      	mov	r3, r0
 8007a92:	460c      	mov	r4, r1
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*time + 0.5*lspb->a_design*time*time;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007aa6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007aaa:	f7f8 fda5 	bl	80005f8 <__aeabi_dmul>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	460b      	mov	r3, r1
 8007ab2:	4620      	mov	r0, r4
 8007ab4:	4629      	mov	r1, r5
 8007ab6:	f7f8 fbe9 	bl	800028c <__adddf3>
 8007aba:	4603      	mov	r3, r0
 8007abc:	460c      	mov	r4, r1
 8007abe:	4625      	mov	r5, r4
 8007ac0:	461c      	mov	r4, r3
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8007ac8:	f04f 0200 	mov.w	r2, #0
 8007acc:	4ba5      	ldr	r3, [pc, #660]	; (8007d64 <scaraFlowLSPB+0x354>)
 8007ace:	f7f8 fd93 	bl	80005f8 <__aeabi_dmul>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	4610      	mov	r0, r2
 8007ad8:	4619      	mov	r1, r3
 8007ada:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ade:	f7f8 fd8b 	bl	80005f8 <__aeabi_dmul>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	4610      	mov	r0, r2
 8007ae8:	4619      	mov	r1, r3
 8007aea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007aee:	f7f8 fd83 	bl	80005f8 <__aeabi_dmul>
 8007af2:	4602      	mov	r2, r0
 8007af4:	460b      	mov	r3, r1
 8007af6:	4620      	mov	r0, r4
 8007af8:	4629      	mov	r1, r5
 8007afa:	f7f8 fbc7 	bl	800028c <__adddf3>
 8007afe:	4603      	mov	r3, r0
 8007b00:	460c      	mov	r4, r1
 8007b02:	68fa      	ldr	r2, [r7, #12]
 8007b04:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8007b08:	e125      	b.n	8007d56 <scaraFlowLSPB+0x346>
	// Constant velocity
	} else if (ta <= time && time <= (tf - td)) {
 8007b0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b0e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007b12:	f7f8 ffed 	bl	8000af0 <__aeabi_dcmple>
 8007b16:	4603      	mov	r3, r0
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d05e      	beq.n	8007bda <scaraFlowLSPB+0x1ca>
 8007b1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b20:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007b24:	f7f8 fbb0 	bl	8000288 <__aeabi_dsub>
 8007b28:	4602      	mov	r2, r0
 8007b2a:	460b      	mov	r3, r1
 8007b2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b30:	f7f8 ffde 	bl	8000af0 <__aeabi_dcmple>
 8007b34:	4603      	mov	r3, r0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d04f      	beq.n	8007bda <scaraFlowLSPB+0x1ca>
		lspb->a_current		=	0;
 8007b3a:	68fa      	ldr	r2, [r7, #12]
 8007b3c:	f04f 0300 	mov.w	r3, #0
 8007b40:	f04f 0400 	mov.w	r4, #0
 8007b44:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	lspb->v_lim;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8007b4e:	68fa      	ldr	r2, [r7, #12]
 8007b50:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*ta/2 + lspb->v_lim*(time - ta/2);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007b60:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007b64:	f7f8 fd48 	bl	80005f8 <__aeabi_dmul>
 8007b68:	4602      	mov	r2, r0
 8007b6a:	460b      	mov	r3, r1
 8007b6c:	4610      	mov	r0, r2
 8007b6e:	4619      	mov	r1, r3
 8007b70:	f04f 0200 	mov.w	r2, #0
 8007b74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007b78:	f7f8 fe68 	bl	800084c <__aeabi_ddiv>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	460b      	mov	r3, r1
 8007b80:	4620      	mov	r0, r4
 8007b82:	4629      	mov	r1, r5
 8007b84:	f7f8 fb82 	bl	800028c <__adddf3>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	460c      	mov	r4, r1
 8007b8c:	4698      	mov	r8, r3
 8007b8e:	46a1      	mov	r9, r4
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8007b96:	f04f 0200 	mov.w	r2, #0
 8007b9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007b9e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007ba2:	f7f8 fe53 	bl	800084c <__aeabi_ddiv>
 8007ba6:	4602      	mov	r2, r0
 8007ba8:	460b      	mov	r3, r1
 8007baa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007bae:	f7f8 fb6b 	bl	8000288 <__aeabi_dsub>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	4620      	mov	r0, r4
 8007bb8:	4629      	mov	r1, r5
 8007bba:	f7f8 fd1d 	bl	80005f8 <__aeabi_dmul>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	460c      	mov	r4, r1
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	4623      	mov	r3, r4
 8007bc6:	4640      	mov	r0, r8
 8007bc8:	4649      	mov	r1, r9
 8007bca:	f7f8 fb5f 	bl	800028c <__adddf3>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	460c      	mov	r4, r1
 8007bd2:	68fa      	ldr	r2, [r7, #12]
 8007bd4:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8007bd8:	e0bd      	b.n	8007d56 <scaraFlowLSPB+0x346>
	// Decelerate
	} else if ((tf - td) <= time && time <= tf) {
 8007bda:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007bde:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007be2:	f7f8 fb51 	bl	8000288 <__aeabi_dsub>
 8007be6:	4602      	mov	r2, r0
 8007be8:	460b      	mov	r3, r1
 8007bea:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007bee:	f7f8 ff89 	bl	8000b04 <__aeabi_dcmpge>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	f000 809a 	beq.w	8007d2e <scaraFlowLSPB+0x31e>
 8007bfa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007bfe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c02:	f7f8 ff75 	bl	8000af0 <__aeabi_dcmple>
 8007c06:	4603      	mov	r3, r0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	f000 8090 	beq.w	8007d2e <scaraFlowLSPB+0x31e>
		lspb->a_current		=	-lspb->a_design;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8007c14:	4614      	mov	r4, r2
 8007c16:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	e9c3 451a 	strd	r4, r5, [r3, #104]	; 0x68
		lspb->v_current		=	lspb->v1 + lspb->a_design*(tf - time);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	e9d3 890c 	ldrd	r8, r9, [r3, #48]	; 0x30
 8007c2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c30:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007c34:	f7f8 fb28 	bl	8000288 <__aeabi_dsub>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	460b      	mov	r3, r1
 8007c3c:	4640      	mov	r0, r8
 8007c3e:	4649      	mov	r1, r9
 8007c40:	f7f8 fcda 	bl	80005f8 <__aeabi_dmul>
 8007c44:	4602      	mov	r2, r0
 8007c46:	460b      	mov	r3, r1
 8007c48:	4620      	mov	r0, r4
 8007c4a:	4629      	mov	r1, r5
 8007c4c:	f7f8 fb1e 	bl	800028c <__adddf3>
 8007c50:	4603      	mov	r3, r0
 8007c52:	460c      	mov	r4, r1
 8007c54:	68fa      	ldr	r2, [r7, #12]
 8007c56:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s1 - lspb->v1*(tf - time)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8007c66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c6a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007c6e:	f7f8 fb0b 	bl	8000288 <__aeabi_dsub>
 8007c72:	4602      	mov	r2, r0
 8007c74:	460b      	mov	r3, r1
 8007c76:	4640      	mov	r0, r8
 8007c78:	4649      	mov	r1, r9
 8007c7a:	f7f8 fcbd 	bl	80005f8 <__aeabi_dmul>
 8007c7e:	4602      	mov	r2, r0
 8007c80:	460b      	mov	r3, r1
 8007c82:	4620      	mov	r0, r4
 8007c84:	4629      	mov	r1, r5
 8007c86:	f7f8 faff 	bl	8000288 <__aeabi_dsub>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	460c      	mov	r4, r1
 8007c8e:	461d      	mov	r5, r3
 8007c90:	4626      	mov	r6, r4
								- (lspb->v_lim - lspb->v1)*(tf - time)*(tf - time)/(2*td);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	4623      	mov	r3, r4
 8007ca2:	f7f8 faf1 	bl	8000288 <__aeabi_dsub>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	460c      	mov	r4, r1
 8007caa:	4698      	mov	r8, r3
 8007cac:	46a1      	mov	r9, r4
 8007cae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cb2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007cb6:	f7f8 fae7 	bl	8000288 <__aeabi_dsub>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	460c      	mov	r4, r1
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	4623      	mov	r3, r4
 8007cc2:	4640      	mov	r0, r8
 8007cc4:	4649      	mov	r1, r9
 8007cc6:	f7f8 fc97 	bl	80005f8 <__aeabi_dmul>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	460c      	mov	r4, r1
 8007cce:	4698      	mov	r8, r3
 8007cd0:	46a1      	mov	r9, r4
 8007cd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cd6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007cda:	f7f8 fad5 	bl	8000288 <__aeabi_dsub>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	460c      	mov	r4, r1
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	4623      	mov	r3, r4
 8007ce6:	4640      	mov	r0, r8
 8007ce8:	4649      	mov	r1, r9
 8007cea:	f7f8 fc85 	bl	80005f8 <__aeabi_dmul>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	460c      	mov	r4, r1
 8007cf2:	4698      	mov	r8, r3
 8007cf4:	46a1      	mov	r9, r4
 8007cf6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	f7f8 fac5 	bl	800028c <__adddf3>
 8007d02:	4603      	mov	r3, r0
 8007d04:	460c      	mov	r4, r1
 8007d06:	461a      	mov	r2, r3
 8007d08:	4623      	mov	r3, r4
 8007d0a:	4640      	mov	r0, r8
 8007d0c:	4649      	mov	r1, r9
 8007d0e:	f7f8 fd9d 	bl	800084c <__aeabi_ddiv>
 8007d12:	4603      	mov	r3, r0
 8007d14:	460c      	mov	r4, r1
 8007d16:	461a      	mov	r2, r3
 8007d18:	4623      	mov	r3, r4
 8007d1a:	4628      	mov	r0, r5
 8007d1c:	4631      	mov	r1, r6
 8007d1e:	f7f8 fab3 	bl	8000288 <__aeabi_dsub>
 8007d22:	4603      	mov	r3, r0
 8007d24:	460c      	mov	r4, r1
		lspb->s_current		=	lspb->s1 - lspb->v1*(tf - time)
 8007d26:	68fa      	ldr	r2, [r7, #12]
 8007d28:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8007d2c:	e013      	b.n	8007d56 <scaraFlowLSPB+0x346>
	} else {
		lspb->a_current 	=	0;
 8007d2e:	68fa      	ldr	r2, [r7, #12]
 8007d30:	f04f 0300 	mov.w	r3, #0
 8007d34:	f04f 0400 	mov.w	r4, #0
 8007d38:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	0;
 8007d3c:	68fa      	ldr	r2, [r7, #12]
 8007d3e:	f04f 0300 	mov.w	r3, #0
 8007d42:	f04f 0400 	mov.w	r4, #0
 8007d46:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->total_s;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8007d50:	68fa      	ldr	r2, [r7, #12]
 8007d52:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	}

	return SCARA_STATUS_OK;
 8007d56:	2300      	movs	r3, #0
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	372c      	adds	r7, #44	; 0x2c
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d62:	bf00      	nop
 8007d64:	3fe00000 	.word	0x3fe00000

08007d68 <scaraFLowScurve>:

/* Compute new s corresponding to time */
SCARA_StatusTypeDef	scaraFLowScurve		(Trajectory_Scurve_TypeDef *scurve, double time) {
 8007d68:	b5b0      	push	{r4, r5, r7, lr}
 8007d6a:	b092      	sub	sp, #72	; 0x48
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6278      	str	r0, [r7, #36]	; 0x24
 8007d70:	ed87 0b06 	vstr	d0, [r7, #24]
	double j_max, tm, tc, t;

	j_max = scurve->j_max;
 8007d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d76:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8007d7a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	tm	  = scurve->Tm;
 8007d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d80:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8007d84:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	tc	  = scurve->Tc;
 8007d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8007d8e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	 // SCURVE 4 PHASE: tc = 0;
	 if ( 4 == scurve->num_of_phase) {
 8007d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d98:	2b04      	cmp	r3, #4
 8007d9a:	f040 8321 	bne.w	80083e0 <scaraFLowScurve+0x678>
		 // Phase 1
		 if ( (0.0f <= time) && ( time < tm)) {
 8007d9e:	f04f 0200 	mov.w	r2, #0
 8007da2:	f04f 0300 	mov.w	r3, #0
 8007da6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007daa:	f7f8 feab 	bl	8000b04 <__aeabi_dcmpge>
 8007dae:	4603      	mov	r3, r0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d059      	beq.n	8007e68 <scaraFLowScurve+0x100>
 8007db4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007db8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007dbc:	f7f8 fe8e 	bl	8000adc <__aeabi_dcmplt>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d050      	beq.n	8007e68 <scaraFLowScurve+0x100>
			 t = time;
 8007dc6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8007dca:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*t;
 8007dce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007dd2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007dd6:	f7f8 fc0f 	bl	80005f8 <__aeabi_dmul>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	460c      	mov	r4, r1
 8007dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007de0:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	= 	0.5*j_max*t*t;
 8007de4:	f04f 0200 	mov.w	r2, #0
 8007de8:	4b93      	ldr	r3, [pc, #588]	; (8008038 <scaraFLowScurve+0x2d0>)
 8007dea:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007dee:	f7f8 fc03 	bl	80005f8 <__aeabi_dmul>
 8007df2:	4603      	mov	r3, r0
 8007df4:	460c      	mov	r4, r1
 8007df6:	4618      	mov	r0, r3
 8007df8:	4621      	mov	r1, r4
 8007dfa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007dfe:	f7f8 fbfb 	bl	80005f8 <__aeabi_dmul>
 8007e02:	4603      	mov	r3, r0
 8007e04:	460c      	mov	r4, r1
 8007e06:	4618      	mov	r0, r3
 8007e08:	4621      	mov	r1, r4
 8007e0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007e0e:	f7f8 fbf3 	bl	80005f8 <__aeabi_dmul>
 8007e12:	4603      	mov	r3, r0
 8007e14:	460c      	mov	r4, r1
 8007e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e18:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	= 	j_max*t*t*t/6;
 8007e1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007e20:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007e24:	f7f8 fbe8 	bl	80005f8 <__aeabi_dmul>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	460c      	mov	r4, r1
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	4621      	mov	r1, r4
 8007e30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007e34:	f7f8 fbe0 	bl	80005f8 <__aeabi_dmul>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	460c      	mov	r4, r1
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	4621      	mov	r1, r4
 8007e40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007e44:	f7f8 fbd8 	bl	80005f8 <__aeabi_dmul>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	460c      	mov	r4, r1
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	4621      	mov	r1, r4
 8007e50:	f04f 0200 	mov.w	r2, #0
 8007e54:	4b79      	ldr	r3, [pc, #484]	; (800803c <scaraFLowScurve+0x2d4>)
 8007e56:	f7f8 fcf9 	bl	800084c <__aeabi_ddiv>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	460c      	mov	r4, r1
 8007e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e60:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8007e64:	f000 be56 	b.w	8008b14 <scaraFLowScurve+0xdac>
		 // Phase 2
		 } else if ( (tm <= time) && ( time < (2*tm) ) ) {
 8007e68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e6c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007e70:	f7f8 fe3e 	bl	8000af0 <__aeabi_dcmple>
 8007e74:	4603      	mov	r3, r0
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	f000 80e2 	beq.w	8008040 <scaraFLowScurve+0x2d8>
 8007e7c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007e80:	4602      	mov	r2, r0
 8007e82:	460b      	mov	r3, r1
 8007e84:	f7f8 fa02 	bl	800028c <__adddf3>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	460c      	mov	r4, r1
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	4623      	mov	r3, r4
 8007e90:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007e94:	f7f8 fe22 	bl	8000adc <__aeabi_dcmplt>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	f000 80d0 	beq.w	8008040 <scaraFLowScurve+0x2d8>
			 t = time - tm;
 8007ea0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007ea4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007ea8:	f7f8 f9ee 	bl	8000288 <__aeabi_dsub>
 8007eac:	4603      	mov	r3, r0
 8007eae:	460c      	mov	r4, r1
 8007eb0:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*tm - j_max*t;
 8007eb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007eb8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007ebc:	f7f8 fb9c 	bl	80005f8 <__aeabi_dmul>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	460c      	mov	r4, r1
 8007ec4:	4625      	mov	r5, r4
 8007ec6:	461c      	mov	r4, r3
 8007ec8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007ecc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007ed0:	f7f8 fb92 	bl	80005f8 <__aeabi_dmul>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	460b      	mov	r3, r1
 8007ed8:	4620      	mov	r0, r4
 8007eda:	4629      	mov	r1, r5
 8007edc:	f7f8 f9d4 	bl	8000288 <__aeabi_dsub>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	460c      	mov	r4, r1
 8007ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ee6:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current 	= 	scurve->v_1 + j_max*tm*t - 0.5*j_max*t*t;
 8007eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eec:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	; 0x78
 8007ef0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007ef4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007ef8:	f7f8 fb7e 	bl	80005f8 <__aeabi_dmul>
 8007efc:	4602      	mov	r2, r0
 8007efe:	460b      	mov	r3, r1
 8007f00:	4610      	mov	r0, r2
 8007f02:	4619      	mov	r1, r3
 8007f04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f08:	f7f8 fb76 	bl	80005f8 <__aeabi_dmul>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	460b      	mov	r3, r1
 8007f10:	4620      	mov	r0, r4
 8007f12:	4629      	mov	r1, r5
 8007f14:	f7f8 f9ba 	bl	800028c <__adddf3>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	460c      	mov	r4, r1
 8007f1c:	4625      	mov	r5, r4
 8007f1e:	461c      	mov	r4, r3
 8007f20:	f04f 0200 	mov.w	r2, #0
 8007f24:	4b44      	ldr	r3, [pc, #272]	; (8008038 <scaraFLowScurve+0x2d0>)
 8007f26:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007f2a:	f7f8 fb65 	bl	80005f8 <__aeabi_dmul>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	460b      	mov	r3, r1
 8007f32:	4610      	mov	r0, r2
 8007f34:	4619      	mov	r1, r3
 8007f36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f3a:	f7f8 fb5d 	bl	80005f8 <__aeabi_dmul>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	460b      	mov	r3, r1
 8007f42:	4610      	mov	r0, r2
 8007f44:	4619      	mov	r1, r3
 8007f46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f4a:	f7f8 fb55 	bl	80005f8 <__aeabi_dmul>
 8007f4e:	4602      	mov	r2, r0
 8007f50:	460b      	mov	r3, r1
 8007f52:	4620      	mov	r0, r4
 8007f54:	4629      	mov	r1, r5
 8007f56:	f7f8 f997 	bl	8000288 <__aeabi_dsub>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	460c      	mov	r4, r1
 8007f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f60:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	=	scurve->s_1 + scurve->v_1*t + 0.5*j_max*tm*t*t - j_max*t*t*t/6;
 8007f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f66:	e9d3 4520 	ldrd	r4, r5, [r3, #128]	; 0x80
 8007f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6c:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8007f70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f74:	f7f8 fb40 	bl	80005f8 <__aeabi_dmul>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	4620      	mov	r0, r4
 8007f7e:	4629      	mov	r1, r5
 8007f80:	f7f8 f984 	bl	800028c <__adddf3>
 8007f84:	4603      	mov	r3, r0
 8007f86:	460c      	mov	r4, r1
 8007f88:	4625      	mov	r5, r4
 8007f8a:	461c      	mov	r4, r3
 8007f8c:	f04f 0200 	mov.w	r2, #0
 8007f90:	4b29      	ldr	r3, [pc, #164]	; (8008038 <scaraFLowScurve+0x2d0>)
 8007f92:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007f96:	f7f8 fb2f 	bl	80005f8 <__aeabi_dmul>
 8007f9a:	4602      	mov	r2, r0
 8007f9c:	460b      	mov	r3, r1
 8007f9e:	4610      	mov	r0, r2
 8007fa0:	4619      	mov	r1, r3
 8007fa2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007fa6:	f7f8 fb27 	bl	80005f8 <__aeabi_dmul>
 8007faa:	4602      	mov	r2, r0
 8007fac:	460b      	mov	r3, r1
 8007fae:	4610      	mov	r0, r2
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007fb6:	f7f8 fb1f 	bl	80005f8 <__aeabi_dmul>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	4610      	mov	r0, r2
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007fc6:	f7f8 fb17 	bl	80005f8 <__aeabi_dmul>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	460b      	mov	r3, r1
 8007fce:	4620      	mov	r0, r4
 8007fd0:	4629      	mov	r1, r5
 8007fd2:	f7f8 f95b 	bl	800028c <__adddf3>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	460c      	mov	r4, r1
 8007fda:	4625      	mov	r5, r4
 8007fdc:	461c      	mov	r4, r3
 8007fde:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007fe2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007fe6:	f7f8 fb07 	bl	80005f8 <__aeabi_dmul>
 8007fea:	4602      	mov	r2, r0
 8007fec:	460b      	mov	r3, r1
 8007fee:	4610      	mov	r0, r2
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007ff6:	f7f8 faff 	bl	80005f8 <__aeabi_dmul>
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	4610      	mov	r0, r2
 8008000:	4619      	mov	r1, r3
 8008002:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008006:	f7f8 faf7 	bl	80005f8 <__aeabi_dmul>
 800800a:	4602      	mov	r2, r0
 800800c:	460b      	mov	r3, r1
 800800e:	4610      	mov	r0, r2
 8008010:	4619      	mov	r1, r3
 8008012:	f04f 0200 	mov.w	r2, #0
 8008016:	4b09      	ldr	r3, [pc, #36]	; (800803c <scaraFLowScurve+0x2d4>)
 8008018:	f7f8 fc18 	bl	800084c <__aeabi_ddiv>
 800801c:	4602      	mov	r2, r0
 800801e:	460b      	mov	r3, r1
 8008020:	4620      	mov	r0, r4
 8008022:	4629      	mov	r1, r5
 8008024:	f7f8 f930 	bl	8000288 <__aeabi_dsub>
 8008028:	4603      	mov	r3, r0
 800802a:	460c      	mov	r4, r1
 800802c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800802e:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8008032:	f000 bd6f 	b.w	8008b14 <scaraFLowScurve+0xdac>
 8008036:	bf00      	nop
 8008038:	3fe00000 	.word	0x3fe00000
 800803c:	40180000 	.word	0x40180000
		 // Phase 3: does not exist
		 // Phase 4
		 } else if ( ((2*tm) <= time) && ( time < (3*tm)) ) {
 8008040:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008044:	4602      	mov	r2, r0
 8008046:	460b      	mov	r3, r1
 8008048:	f7f8 f920 	bl	800028c <__adddf3>
 800804c:	4603      	mov	r3, r0
 800804e:	460c      	mov	r4, r1
 8008050:	461a      	mov	r2, r3
 8008052:	4623      	mov	r3, r4
 8008054:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008058:	f7f8 fd54 	bl	8000b04 <__aeabi_dcmpge>
 800805c:	4603      	mov	r3, r0
 800805e:	2b00      	cmp	r3, #0
 8008060:	f000 80a2 	beq.w	80081a8 <scaraFLowScurve+0x440>
 8008064:	f04f 0200 	mov.w	r2, #0
 8008068:	4b4c      	ldr	r3, [pc, #304]	; (800819c <scaraFLowScurve+0x434>)
 800806a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800806e:	f7f8 fac3 	bl	80005f8 <__aeabi_dmul>
 8008072:	4603      	mov	r3, r0
 8008074:	460c      	mov	r4, r1
 8008076:	461a      	mov	r2, r3
 8008078:	4623      	mov	r3, r4
 800807a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800807e:	f7f8 fd2d 	bl	8000adc <__aeabi_dcmplt>
 8008082:	4603      	mov	r3, r0
 8008084:	2b00      	cmp	r3, #0
 8008086:	f000 808f 	beq.w	80081a8 <scaraFLowScurve+0x440>
			 t = time - 2*tm;
 800808a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800808e:	4602      	mov	r2, r0
 8008090:	460b      	mov	r3, r1
 8008092:	f7f8 f8fb 	bl	800028c <__adddf3>
 8008096:	4603      	mov	r3, r0
 8008098:	460c      	mov	r4, r1
 800809a:	461a      	mov	r2, r3
 800809c:	4623      	mov	r3, r4
 800809e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80080a2:	f7f8 f8f1 	bl	8000288 <__aeabi_dsub>
 80080a6:	4603      	mov	r3, r0
 80080a8:	460c      	mov	r4, r1
 80080aa:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	=	-j_max*t;
 80080ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080b0:	613b      	str	r3, [r7, #16]
 80080b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080b4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80080b8:	617b      	str	r3, [r7, #20]
 80080ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80080be:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80080c2:	f7f8 fa99 	bl	80005f8 <__aeabi_dmul>
 80080c6:	4603      	mov	r3, r0
 80080c8:	460c      	mov	r4, r1
 80080ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080cc:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_2 - 0.5*j_max*t*t;
 80080d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d2:	e9d3 4522 	ldrd	r4, r5, [r3, #136]	; 0x88
 80080d6:	f04f 0200 	mov.w	r2, #0
 80080da:	4b31      	ldr	r3, [pc, #196]	; (80081a0 <scaraFLowScurve+0x438>)
 80080dc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80080e0:	f7f8 fa8a 	bl	80005f8 <__aeabi_dmul>
 80080e4:	4602      	mov	r2, r0
 80080e6:	460b      	mov	r3, r1
 80080e8:	4610      	mov	r0, r2
 80080ea:	4619      	mov	r1, r3
 80080ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80080f0:	f7f8 fa82 	bl	80005f8 <__aeabi_dmul>
 80080f4:	4602      	mov	r2, r0
 80080f6:	460b      	mov	r3, r1
 80080f8:	4610      	mov	r0, r2
 80080fa:	4619      	mov	r1, r3
 80080fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008100:	f7f8 fa7a 	bl	80005f8 <__aeabi_dmul>
 8008104:	4602      	mov	r2, r0
 8008106:	460b      	mov	r3, r1
 8008108:	4620      	mov	r0, r4
 800810a:	4629      	mov	r1, r5
 800810c:	f7f8 f8bc 	bl	8000288 <__aeabi_dsub>
 8008110:	4603      	mov	r3, r0
 8008112:	460c      	mov	r4, r1
 8008114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008116:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_2 + scurve->v_2*t - j_max*t*t*t/6;
 800811a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811c:	e9d3 4524 	ldrd	r4, r5, [r3, #144]	; 0x90
 8008120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008122:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 8008126:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800812a:	f7f8 fa65 	bl	80005f8 <__aeabi_dmul>
 800812e:	4602      	mov	r2, r0
 8008130:	460b      	mov	r3, r1
 8008132:	4620      	mov	r0, r4
 8008134:	4629      	mov	r1, r5
 8008136:	f7f8 f8a9 	bl	800028c <__adddf3>
 800813a:	4603      	mov	r3, r0
 800813c:	460c      	mov	r4, r1
 800813e:	4625      	mov	r5, r4
 8008140:	461c      	mov	r4, r3
 8008142:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008146:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800814a:	f7f8 fa55 	bl	80005f8 <__aeabi_dmul>
 800814e:	4602      	mov	r2, r0
 8008150:	460b      	mov	r3, r1
 8008152:	4610      	mov	r0, r2
 8008154:	4619      	mov	r1, r3
 8008156:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800815a:	f7f8 fa4d 	bl	80005f8 <__aeabi_dmul>
 800815e:	4602      	mov	r2, r0
 8008160:	460b      	mov	r3, r1
 8008162:	4610      	mov	r0, r2
 8008164:	4619      	mov	r1, r3
 8008166:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800816a:	f7f8 fa45 	bl	80005f8 <__aeabi_dmul>
 800816e:	4602      	mov	r2, r0
 8008170:	460b      	mov	r3, r1
 8008172:	4610      	mov	r0, r2
 8008174:	4619      	mov	r1, r3
 8008176:	f04f 0200 	mov.w	r2, #0
 800817a:	4b0a      	ldr	r3, [pc, #40]	; (80081a4 <scaraFLowScurve+0x43c>)
 800817c:	f7f8 fb66 	bl	800084c <__aeabi_ddiv>
 8008180:	4602      	mov	r2, r0
 8008182:	460b      	mov	r3, r1
 8008184:	4620      	mov	r0, r4
 8008186:	4629      	mov	r1, r5
 8008188:	f7f8 f87e 	bl	8000288 <__aeabi_dsub>
 800818c:	4603      	mov	r3, r0
 800818e:	460c      	mov	r4, r1
 8008190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008192:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8008196:	f000 bcbd 	b.w	8008b14 <scaraFLowScurve+0xdac>
 800819a:	bf00      	nop
 800819c:	40080000 	.word	0x40080000
 80081a0:	3fe00000 	.word	0x3fe00000
 80081a4:	40180000 	.word	0x40180000
		 // Phase 5
		 } else if ( ((3*tm) <= time) && ( time < (4*tm)) ) {
 80081a8:	f04f 0200 	mov.w	r2, #0
 80081ac:	4b88      	ldr	r3, [pc, #544]	; (80083d0 <scaraFLowScurve+0x668>)
 80081ae:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80081b2:	f7f8 fa21 	bl	80005f8 <__aeabi_dmul>
 80081b6:	4603      	mov	r3, r0
 80081b8:	460c      	mov	r4, r1
 80081ba:	461a      	mov	r2, r3
 80081bc:	4623      	mov	r3, r4
 80081be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80081c2:	f7f8 fc9f 	bl	8000b04 <__aeabi_dcmpge>
 80081c6:	4603      	mov	r3, r0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	f000 80ec 	beq.w	80083a6 <scaraFLowScurve+0x63e>
 80081ce:	f04f 0200 	mov.w	r2, #0
 80081d2:	4b80      	ldr	r3, [pc, #512]	; (80083d4 <scaraFLowScurve+0x66c>)
 80081d4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80081d8:	f7f8 fa0e 	bl	80005f8 <__aeabi_dmul>
 80081dc:	4603      	mov	r3, r0
 80081de:	460c      	mov	r4, r1
 80081e0:	461a      	mov	r2, r3
 80081e2:	4623      	mov	r3, r4
 80081e4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80081e8:	f7f8 fc78 	bl	8000adc <__aeabi_dcmplt>
 80081ec:	4603      	mov	r3, r0
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	f000 80d9 	beq.w	80083a6 <scaraFLowScurve+0x63e>
			 t = time - 3*tm;
 80081f4:	f04f 0200 	mov.w	r2, #0
 80081f8:	4b75      	ldr	r3, [pc, #468]	; (80083d0 <scaraFLowScurve+0x668>)
 80081fa:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80081fe:	f7f8 f9fb 	bl	80005f8 <__aeabi_dmul>
 8008202:	4603      	mov	r3, r0
 8008204:	460c      	mov	r4, r1
 8008206:	461a      	mov	r2, r3
 8008208:	4623      	mov	r3, r4
 800820a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800820e:	f7f8 f83b 	bl	8000288 <__aeabi_dsub>
 8008212:	4603      	mov	r3, r0
 8008214:	460c      	mov	r4, r1
 8008216:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current	=	-j_max*tm + j_max*t;
 800821a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800821c:	60bb      	str	r3, [r7, #8]
 800821e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008224:	60fb      	str	r3, [r7, #12]
 8008226:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800822a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800822e:	f7f8 f9e3 	bl	80005f8 <__aeabi_dmul>
 8008232:	4603      	mov	r3, r0
 8008234:	460c      	mov	r4, r1
 8008236:	4625      	mov	r5, r4
 8008238:	461c      	mov	r4, r3
 800823a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800823e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008242:	f7f8 f9d9 	bl	80005f8 <__aeabi_dmul>
 8008246:	4602      	mov	r2, r0
 8008248:	460b      	mov	r3, r1
 800824a:	4620      	mov	r0, r4
 800824c:	4629      	mov	r1, r5
 800824e:	f7f8 f81d 	bl	800028c <__adddf3>
 8008252:	4603      	mov	r3, r0
 8008254:	460c      	mov	r4, r1
 8008256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008258:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_4 - j_max*tm*t + 0.5*j_max*t*t;
 800825c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825e:	e9d3 452a 	ldrd	r4, r5, [r3, #168]	; 0xa8
 8008262:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008266:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800826a:	f7f8 f9c5 	bl	80005f8 <__aeabi_dmul>
 800826e:	4602      	mov	r2, r0
 8008270:	460b      	mov	r3, r1
 8008272:	4610      	mov	r0, r2
 8008274:	4619      	mov	r1, r3
 8008276:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800827a:	f7f8 f9bd 	bl	80005f8 <__aeabi_dmul>
 800827e:	4602      	mov	r2, r0
 8008280:	460b      	mov	r3, r1
 8008282:	4620      	mov	r0, r4
 8008284:	4629      	mov	r1, r5
 8008286:	f7f7 ffff 	bl	8000288 <__aeabi_dsub>
 800828a:	4603      	mov	r3, r0
 800828c:	460c      	mov	r4, r1
 800828e:	4625      	mov	r5, r4
 8008290:	461c      	mov	r4, r3
 8008292:	f04f 0200 	mov.w	r2, #0
 8008296:	4b50      	ldr	r3, [pc, #320]	; (80083d8 <scaraFLowScurve+0x670>)
 8008298:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800829c:	f7f8 f9ac 	bl	80005f8 <__aeabi_dmul>
 80082a0:	4602      	mov	r2, r0
 80082a2:	460b      	mov	r3, r1
 80082a4:	4610      	mov	r0, r2
 80082a6:	4619      	mov	r1, r3
 80082a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80082ac:	f7f8 f9a4 	bl	80005f8 <__aeabi_dmul>
 80082b0:	4602      	mov	r2, r0
 80082b2:	460b      	mov	r3, r1
 80082b4:	4610      	mov	r0, r2
 80082b6:	4619      	mov	r1, r3
 80082b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80082bc:	f7f8 f99c 	bl	80005f8 <__aeabi_dmul>
 80082c0:	4602      	mov	r2, r0
 80082c2:	460b      	mov	r3, r1
 80082c4:	4620      	mov	r0, r4
 80082c6:	4629      	mov	r1, r5
 80082c8:	f7f7 ffe0 	bl	800028c <__adddf3>
 80082cc:	4603      	mov	r3, r0
 80082ce:	460c      	mov	r4, r1
 80082d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082d2:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t
 80082d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d8:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 80082dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082de:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 80082e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80082e6:	f7f8 f987 	bl	80005f8 <__aeabi_dmul>
 80082ea:	4602      	mov	r2, r0
 80082ec:	460b      	mov	r3, r1
 80082ee:	4620      	mov	r0, r4
 80082f0:	4629      	mov	r1, r5
 80082f2:	f7f7 ffcb 	bl	800028c <__adddf3>
 80082f6:	4603      	mov	r3, r0
 80082f8:	460c      	mov	r4, r1
 80082fa:	4625      	mov	r5, r4
 80082fc:	461c      	mov	r4, r3
									- 0.5*j_max*tm*t*t
 80082fe:	f04f 0200 	mov.w	r2, #0
 8008302:	4b35      	ldr	r3, [pc, #212]	; (80083d8 <scaraFLowScurve+0x670>)
 8008304:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008308:	f7f8 f976 	bl	80005f8 <__aeabi_dmul>
 800830c:	4602      	mov	r2, r0
 800830e:	460b      	mov	r3, r1
 8008310:	4610      	mov	r0, r2
 8008312:	4619      	mov	r1, r3
 8008314:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008318:	f7f8 f96e 	bl	80005f8 <__aeabi_dmul>
 800831c:	4602      	mov	r2, r0
 800831e:	460b      	mov	r3, r1
 8008320:	4610      	mov	r0, r2
 8008322:	4619      	mov	r1, r3
 8008324:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008328:	f7f8 f966 	bl	80005f8 <__aeabi_dmul>
 800832c:	4602      	mov	r2, r0
 800832e:	460b      	mov	r3, r1
 8008330:	4610      	mov	r0, r2
 8008332:	4619      	mov	r1, r3
 8008334:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008338:	f7f8 f95e 	bl	80005f8 <__aeabi_dmul>
 800833c:	4602      	mov	r2, r0
 800833e:	460b      	mov	r3, r1
 8008340:	4620      	mov	r0, r4
 8008342:	4629      	mov	r1, r5
 8008344:	f7f7 ffa0 	bl	8000288 <__aeabi_dsub>
 8008348:	4603      	mov	r3, r0
 800834a:	460c      	mov	r4, r1
 800834c:	4625      	mov	r5, r4
 800834e:	461c      	mov	r4, r3
									+ j_max*t*t*t/6;
 8008350:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008354:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008358:	f7f8 f94e 	bl	80005f8 <__aeabi_dmul>
 800835c:	4602      	mov	r2, r0
 800835e:	460b      	mov	r3, r1
 8008360:	4610      	mov	r0, r2
 8008362:	4619      	mov	r1, r3
 8008364:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008368:	f7f8 f946 	bl	80005f8 <__aeabi_dmul>
 800836c:	4602      	mov	r2, r0
 800836e:	460b      	mov	r3, r1
 8008370:	4610      	mov	r0, r2
 8008372:	4619      	mov	r1, r3
 8008374:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008378:	f7f8 f93e 	bl	80005f8 <__aeabi_dmul>
 800837c:	4602      	mov	r2, r0
 800837e:	460b      	mov	r3, r1
 8008380:	4610      	mov	r0, r2
 8008382:	4619      	mov	r1, r3
 8008384:	f04f 0200 	mov.w	r2, #0
 8008388:	4b14      	ldr	r3, [pc, #80]	; (80083dc <scaraFLowScurve+0x674>)
 800838a:	f7f8 fa5f 	bl	800084c <__aeabi_ddiv>
 800838e:	4602      	mov	r2, r0
 8008390:	460b      	mov	r3, r1
 8008392:	4620      	mov	r0, r4
 8008394:	4629      	mov	r1, r5
 8008396:	f7f7 ff79 	bl	800028c <__adddf3>
 800839a:	4603      	mov	r3, r0
 800839c:	460c      	mov	r4, r1
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t
 800839e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083a0:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 80083a4:	e3b6      	b.n	8008b14 <scaraFLowScurve+0xdac>
		 } else {
			 scurve->a_current = 0;
 80083a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083a8:	f04f 0300 	mov.w	r3, #0
 80083ac:	f04f 0400 	mov.w	r4, #0
 80083b0:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current = 0;
 80083b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083b6:	f04f 0300 	mov.w	r3, #0
 80083ba:	f04f 0400 	mov.w	r4, #0
 80083be:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current = scurve->total_s;
 80083c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c4:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 80083c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083ca:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 80083ce:	e3a1      	b.n	8008b14 <scaraFLowScurve+0xdac>
 80083d0:	40080000 	.word	0x40080000
 80083d4:	40100000 	.word	0x40100000
 80083d8:	3fe00000 	.word	0x3fe00000
 80083dc:	40180000 	.word	0x40180000
		 }

	 // SCURVE 5 PHASE: tc > 0
	 } else if ( 5 == scurve->num_of_phase) {
 80083e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80083e6:	2b05      	cmp	r3, #5
 80083e8:	f040 8392 	bne.w	8008b10 <scaraFLowScurve+0xda8>
		 // Phase 1
		 if ( (0 <= time) && ( time < tm)) {
 80083ec:	f04f 0200 	mov.w	r2, #0
 80083f0:	f04f 0300 	mov.w	r3, #0
 80083f4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80083f8:	f7f8 fb84 	bl	8000b04 <__aeabi_dcmpge>
 80083fc:	4603      	mov	r3, r0
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d058      	beq.n	80084b4 <scaraFLowScurve+0x74c>
 8008402:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008406:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800840a:	f7f8 fb67 	bl	8000adc <__aeabi_dcmplt>
 800840e:	4603      	mov	r3, r0
 8008410:	2b00      	cmp	r3, #0
 8008412:	d04f      	beq.n	80084b4 <scaraFLowScurve+0x74c>
			 t = time;
 8008414:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8008418:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*t;
 800841c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008420:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008424:	f7f8 f8e8 	bl	80005f8 <__aeabi_dmul>
 8008428:	4603      	mov	r3, r0
 800842a:	460c      	mov	r4, r1
 800842c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800842e:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	= 	0.5*j_max*t*t;
 8008432:	f04f 0200 	mov.w	r2, #0
 8008436:	4b91      	ldr	r3, [pc, #580]	; (800867c <scaraFLowScurve+0x914>)
 8008438:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800843c:	f7f8 f8dc 	bl	80005f8 <__aeabi_dmul>
 8008440:	4603      	mov	r3, r0
 8008442:	460c      	mov	r4, r1
 8008444:	4618      	mov	r0, r3
 8008446:	4621      	mov	r1, r4
 8008448:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800844c:	f7f8 f8d4 	bl	80005f8 <__aeabi_dmul>
 8008450:	4603      	mov	r3, r0
 8008452:	460c      	mov	r4, r1
 8008454:	4618      	mov	r0, r3
 8008456:	4621      	mov	r1, r4
 8008458:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800845c:	f7f8 f8cc 	bl	80005f8 <__aeabi_dmul>
 8008460:	4603      	mov	r3, r0
 8008462:	460c      	mov	r4, r1
 8008464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008466:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	= 	j_max*t*t*t/6;
 800846a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800846e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008472:	f7f8 f8c1 	bl	80005f8 <__aeabi_dmul>
 8008476:	4603      	mov	r3, r0
 8008478:	460c      	mov	r4, r1
 800847a:	4618      	mov	r0, r3
 800847c:	4621      	mov	r1, r4
 800847e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008482:	f7f8 f8b9 	bl	80005f8 <__aeabi_dmul>
 8008486:	4603      	mov	r3, r0
 8008488:	460c      	mov	r4, r1
 800848a:	4618      	mov	r0, r3
 800848c:	4621      	mov	r1, r4
 800848e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008492:	f7f8 f8b1 	bl	80005f8 <__aeabi_dmul>
 8008496:	4603      	mov	r3, r0
 8008498:	460c      	mov	r4, r1
 800849a:	4618      	mov	r0, r3
 800849c:	4621      	mov	r1, r4
 800849e:	f04f 0200 	mov.w	r2, #0
 80084a2:	4b77      	ldr	r3, [pc, #476]	; (8008680 <scaraFLowScurve+0x918>)
 80084a4:	f7f8 f9d2 	bl	800084c <__aeabi_ddiv>
 80084a8:	4603      	mov	r3, r0
 80084aa:	460c      	mov	r4, r1
 80084ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084ae:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 80084b2:	e32f      	b.n	8008b14 <scaraFLowScurve+0xdac>
		 // Phase 2
		 } else if ( (tm <= time) && ( time < (2*tm) ) ) {
 80084b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80084b8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80084bc:	f7f8 fb18 	bl	8000af0 <__aeabi_dcmple>
 80084c0:	4603      	mov	r3, r0
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	f000 80de 	beq.w	8008684 <scaraFLowScurve+0x91c>
 80084c8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80084cc:	4602      	mov	r2, r0
 80084ce:	460b      	mov	r3, r1
 80084d0:	f7f7 fedc 	bl	800028c <__adddf3>
 80084d4:	4602      	mov	r2, r0
 80084d6:	460b      	mov	r3, r1
 80084d8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80084dc:	f7f8 fafe 	bl	8000adc <__aeabi_dcmplt>
 80084e0:	4603      	mov	r3, r0
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	f000 80ce 	beq.w	8008684 <scaraFLowScurve+0x91c>
			 t = time - tm;
 80084e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80084ec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80084f0:	f7f7 feca 	bl	8000288 <__aeabi_dsub>
 80084f4:	4603      	mov	r3, r0
 80084f6:	460c      	mov	r4, r1
 80084f8:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*tm - j_max*t;
 80084fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008500:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008504:	f7f8 f878 	bl	80005f8 <__aeabi_dmul>
 8008508:	4603      	mov	r3, r0
 800850a:	460c      	mov	r4, r1
 800850c:	4625      	mov	r5, r4
 800850e:	461c      	mov	r4, r3
 8008510:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008514:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008518:	f7f8 f86e 	bl	80005f8 <__aeabi_dmul>
 800851c:	4602      	mov	r2, r0
 800851e:	460b      	mov	r3, r1
 8008520:	4620      	mov	r0, r4
 8008522:	4629      	mov	r1, r5
 8008524:	f7f7 feb0 	bl	8000288 <__aeabi_dsub>
 8008528:	4603      	mov	r3, r0
 800852a:	460c      	mov	r4, r1
 800852c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800852e:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current 	= 	scurve->v_1 + j_max*tm*t - 0.5*j_max*t*t;
 8008532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008534:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	; 0x78
 8008538:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800853c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008540:	f7f8 f85a 	bl	80005f8 <__aeabi_dmul>
 8008544:	4602      	mov	r2, r0
 8008546:	460b      	mov	r3, r1
 8008548:	4610      	mov	r0, r2
 800854a:	4619      	mov	r1, r3
 800854c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008550:	f7f8 f852 	bl	80005f8 <__aeabi_dmul>
 8008554:	4602      	mov	r2, r0
 8008556:	460b      	mov	r3, r1
 8008558:	4620      	mov	r0, r4
 800855a:	4629      	mov	r1, r5
 800855c:	f7f7 fe96 	bl	800028c <__adddf3>
 8008560:	4603      	mov	r3, r0
 8008562:	460c      	mov	r4, r1
 8008564:	4625      	mov	r5, r4
 8008566:	461c      	mov	r4, r3
 8008568:	f04f 0200 	mov.w	r2, #0
 800856c:	4b43      	ldr	r3, [pc, #268]	; (800867c <scaraFLowScurve+0x914>)
 800856e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008572:	f7f8 f841 	bl	80005f8 <__aeabi_dmul>
 8008576:	4602      	mov	r2, r0
 8008578:	460b      	mov	r3, r1
 800857a:	4610      	mov	r0, r2
 800857c:	4619      	mov	r1, r3
 800857e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008582:	f7f8 f839 	bl	80005f8 <__aeabi_dmul>
 8008586:	4602      	mov	r2, r0
 8008588:	460b      	mov	r3, r1
 800858a:	4610      	mov	r0, r2
 800858c:	4619      	mov	r1, r3
 800858e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008592:	f7f8 f831 	bl	80005f8 <__aeabi_dmul>
 8008596:	4602      	mov	r2, r0
 8008598:	460b      	mov	r3, r1
 800859a:	4620      	mov	r0, r4
 800859c:	4629      	mov	r1, r5
 800859e:	f7f7 fe73 	bl	8000288 <__aeabi_dsub>
 80085a2:	4603      	mov	r3, r0
 80085a4:	460c      	mov	r4, r1
 80085a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085a8:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	=	scurve->s_1 + scurve->v_1*t + 0.5*j_max*tm*t*t - j_max*t*t*t/6;
 80085ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ae:	e9d3 4520 	ldrd	r4, r5, [r3, #128]	; 0x80
 80085b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b4:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 80085b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80085bc:	f7f8 f81c 	bl	80005f8 <__aeabi_dmul>
 80085c0:	4602      	mov	r2, r0
 80085c2:	460b      	mov	r3, r1
 80085c4:	4620      	mov	r0, r4
 80085c6:	4629      	mov	r1, r5
 80085c8:	f7f7 fe60 	bl	800028c <__adddf3>
 80085cc:	4603      	mov	r3, r0
 80085ce:	460c      	mov	r4, r1
 80085d0:	4625      	mov	r5, r4
 80085d2:	461c      	mov	r4, r3
 80085d4:	f04f 0200 	mov.w	r2, #0
 80085d8:	4b28      	ldr	r3, [pc, #160]	; (800867c <scaraFLowScurve+0x914>)
 80085da:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80085de:	f7f8 f80b 	bl	80005f8 <__aeabi_dmul>
 80085e2:	4602      	mov	r2, r0
 80085e4:	460b      	mov	r3, r1
 80085e6:	4610      	mov	r0, r2
 80085e8:	4619      	mov	r1, r3
 80085ea:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80085ee:	f7f8 f803 	bl	80005f8 <__aeabi_dmul>
 80085f2:	4602      	mov	r2, r0
 80085f4:	460b      	mov	r3, r1
 80085f6:	4610      	mov	r0, r2
 80085f8:	4619      	mov	r1, r3
 80085fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80085fe:	f7f7 fffb 	bl	80005f8 <__aeabi_dmul>
 8008602:	4602      	mov	r2, r0
 8008604:	460b      	mov	r3, r1
 8008606:	4610      	mov	r0, r2
 8008608:	4619      	mov	r1, r3
 800860a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800860e:	f7f7 fff3 	bl	80005f8 <__aeabi_dmul>
 8008612:	4602      	mov	r2, r0
 8008614:	460b      	mov	r3, r1
 8008616:	4620      	mov	r0, r4
 8008618:	4629      	mov	r1, r5
 800861a:	f7f7 fe37 	bl	800028c <__adddf3>
 800861e:	4603      	mov	r3, r0
 8008620:	460c      	mov	r4, r1
 8008622:	4625      	mov	r5, r4
 8008624:	461c      	mov	r4, r3
 8008626:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800862a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800862e:	f7f7 ffe3 	bl	80005f8 <__aeabi_dmul>
 8008632:	4602      	mov	r2, r0
 8008634:	460b      	mov	r3, r1
 8008636:	4610      	mov	r0, r2
 8008638:	4619      	mov	r1, r3
 800863a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800863e:	f7f7 ffdb 	bl	80005f8 <__aeabi_dmul>
 8008642:	4602      	mov	r2, r0
 8008644:	460b      	mov	r3, r1
 8008646:	4610      	mov	r0, r2
 8008648:	4619      	mov	r1, r3
 800864a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800864e:	f7f7 ffd3 	bl	80005f8 <__aeabi_dmul>
 8008652:	4602      	mov	r2, r0
 8008654:	460b      	mov	r3, r1
 8008656:	4610      	mov	r0, r2
 8008658:	4619      	mov	r1, r3
 800865a:	f04f 0200 	mov.w	r2, #0
 800865e:	4b08      	ldr	r3, [pc, #32]	; (8008680 <scaraFLowScurve+0x918>)
 8008660:	f7f8 f8f4 	bl	800084c <__aeabi_ddiv>
 8008664:	4602      	mov	r2, r0
 8008666:	460b      	mov	r3, r1
 8008668:	4620      	mov	r0, r4
 800866a:	4629      	mov	r1, r5
 800866c:	f7f7 fe0c 	bl	8000288 <__aeabi_dsub>
 8008670:	4603      	mov	r3, r0
 8008672:	460c      	mov	r4, r1
 8008674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008676:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 800867a:	e24b      	b.n	8008b14 <scaraFLowScurve+0xdac>
 800867c:	3fe00000 	.word	0x3fe00000
 8008680:	40180000 	.word	0x40180000
		 // Phase 3
		 } else if ( ((2*tm) <= time) && ( time < (2*tm + tc)) ) {
 8008684:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008688:	4602      	mov	r2, r0
 800868a:	460b      	mov	r3, r1
 800868c:	f7f7 fdfe 	bl	800028c <__adddf3>
 8008690:	4602      	mov	r2, r0
 8008692:	460b      	mov	r3, r1
 8008694:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008698:	f7f8 fa34 	bl	8000b04 <__aeabi_dcmpge>
 800869c:	4603      	mov	r3, r0
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d04b      	beq.n	800873a <scaraFLowScurve+0x9d2>
 80086a2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80086a6:	4602      	mov	r2, r0
 80086a8:	460b      	mov	r3, r1
 80086aa:	f7f7 fdef 	bl	800028c <__adddf3>
 80086ae:	4602      	mov	r2, r0
 80086b0:	460b      	mov	r3, r1
 80086b2:	4610      	mov	r0, r2
 80086b4:	4619      	mov	r1, r3
 80086b6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80086ba:	f7f7 fde7 	bl	800028c <__adddf3>
 80086be:	4602      	mov	r2, r0
 80086c0:	460b      	mov	r3, r1
 80086c2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80086c6:	f7f8 fa09 	bl	8000adc <__aeabi_dcmplt>
 80086ca:	4603      	mov	r3, r0
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d034      	beq.n	800873a <scaraFLowScurve+0x9d2>
			 t = time - 2*tm;
 80086d0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80086d4:	4602      	mov	r2, r0
 80086d6:	460b      	mov	r3, r1
 80086d8:	f7f7 fdd8 	bl	800028c <__adddf3>
 80086dc:	4603      	mov	r3, r0
 80086de:	460c      	mov	r4, r1
 80086e0:	461a      	mov	r2, r3
 80086e2:	4623      	mov	r3, r4
 80086e4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80086e8:	f7f7 fdce 	bl	8000288 <__aeabi_dsub>
 80086ec:	4603      	mov	r3, r0
 80086ee:	460c      	mov	r4, r1
 80086f0:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	=	0;
 80086f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086f6:	f04f 0300 	mov.w	r3, #0
 80086fa:	f04f 0400 	mov.w	r4, #0
 80086fe:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_2;
 8008702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008704:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 8008708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800870a:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_2 + scurve->v_2*t;
 800870e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008710:	e9d3 4524 	ldrd	r4, r5, [r3, #144]	; 0x90
 8008714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008716:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 800871a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800871e:	f7f7 ff6b 	bl	80005f8 <__aeabi_dmul>
 8008722:	4602      	mov	r2, r0
 8008724:	460b      	mov	r3, r1
 8008726:	4620      	mov	r0, r4
 8008728:	4629      	mov	r1, r5
 800872a:	f7f7 fdaf 	bl	800028c <__adddf3>
 800872e:	4603      	mov	r3, r0
 8008730:	460c      	mov	r4, r1
 8008732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008734:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8008738:	e1ec      	b.n	8008b14 <scaraFLowScurve+0xdac>
		 // Phase 4
		 } else if ( ((2*tm + tc) <= time) && ( time < (3*tm + tc)) ) {
 800873a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800873e:	4602      	mov	r2, r0
 8008740:	460b      	mov	r3, r1
 8008742:	f7f7 fda3 	bl	800028c <__adddf3>
 8008746:	4602      	mov	r2, r0
 8008748:	460b      	mov	r3, r1
 800874a:	4610      	mov	r0, r2
 800874c:	4619      	mov	r1, r3
 800874e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008752:	f7f7 fd9b 	bl	800028c <__adddf3>
 8008756:	4602      	mov	r2, r0
 8008758:	460b      	mov	r3, r1
 800875a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800875e:	f7f8 f9d1 	bl	8000b04 <__aeabi_dcmpge>
 8008762:	4603      	mov	r3, r0
 8008764:	2b00      	cmp	r3, #0
 8008766:	f000 80af 	beq.w	80088c8 <scaraFLowScurve+0xb60>
 800876a:	f04f 0200 	mov.w	r2, #0
 800876e:	4b53      	ldr	r3, [pc, #332]	; (80088bc <scaraFLowScurve+0xb54>)
 8008770:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008774:	f7f7 ff40 	bl	80005f8 <__aeabi_dmul>
 8008778:	4602      	mov	r2, r0
 800877a:	460b      	mov	r3, r1
 800877c:	4610      	mov	r0, r2
 800877e:	4619      	mov	r1, r3
 8008780:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008784:	f7f7 fd82 	bl	800028c <__adddf3>
 8008788:	4602      	mov	r2, r0
 800878a:	460b      	mov	r3, r1
 800878c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008790:	f7f8 f9a4 	bl	8000adc <__aeabi_dcmplt>
 8008794:	4603      	mov	r3, r0
 8008796:	2b00      	cmp	r3, #0
 8008798:	f000 8096 	beq.w	80088c8 <scaraFLowScurve+0xb60>
			 t = time - (2*tm + tc);
 800879c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80087a0:	4602      	mov	r2, r0
 80087a2:	460b      	mov	r3, r1
 80087a4:	f7f7 fd72 	bl	800028c <__adddf3>
 80087a8:	4603      	mov	r3, r0
 80087aa:	460c      	mov	r4, r1
 80087ac:	4618      	mov	r0, r3
 80087ae:	4621      	mov	r1, r4
 80087b0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80087b4:	f7f7 fd6a 	bl	800028c <__adddf3>
 80087b8:	4603      	mov	r3, r0
 80087ba:	460c      	mov	r4, r1
 80087bc:	461a      	mov	r2, r3
 80087be:	4623      	mov	r3, r4
 80087c0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80087c4:	f7f7 fd60 	bl	8000288 <__aeabi_dsub>
 80087c8:	4603      	mov	r3, r0
 80087ca:	460c      	mov	r4, r1
 80087cc:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	=	-j_max*t;
 80087d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087d2:	603b      	str	r3, [r7, #0]
 80087d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087d6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80087da:	607b      	str	r3, [r7, #4]
 80087dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80087e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80087e4:	f7f7 ff08 	bl	80005f8 <__aeabi_dmul>
 80087e8:	4603      	mov	r3, r0
 80087ea:	460c      	mov	r4, r1
 80087ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087ee:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_3 - 0.5*j_max*t*t;
 80087f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f4:	e9d3 4526 	ldrd	r4, r5, [r3, #152]	; 0x98
 80087f8:	f04f 0200 	mov.w	r2, #0
 80087fc:	4b30      	ldr	r3, [pc, #192]	; (80088c0 <scaraFLowScurve+0xb58>)
 80087fe:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008802:	f7f7 fef9 	bl	80005f8 <__aeabi_dmul>
 8008806:	4602      	mov	r2, r0
 8008808:	460b      	mov	r3, r1
 800880a:	4610      	mov	r0, r2
 800880c:	4619      	mov	r1, r3
 800880e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008812:	f7f7 fef1 	bl	80005f8 <__aeabi_dmul>
 8008816:	4602      	mov	r2, r0
 8008818:	460b      	mov	r3, r1
 800881a:	4610      	mov	r0, r2
 800881c:	4619      	mov	r1, r3
 800881e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008822:	f7f7 fee9 	bl	80005f8 <__aeabi_dmul>
 8008826:	4602      	mov	r2, r0
 8008828:	460b      	mov	r3, r1
 800882a:	4620      	mov	r0, r4
 800882c:	4629      	mov	r1, r5
 800882e:	f7f7 fd2b 	bl	8000288 <__aeabi_dsub>
 8008832:	4603      	mov	r3, r0
 8008834:	460c      	mov	r4, r1
 8008836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008838:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_3 + scurve->v_3*t - j_max*t*t*t/6;
 800883c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883e:	e9d3 4528 	ldrd	r4, r5, [r3, #160]	; 0xa0
 8008842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008844:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 8008848:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800884c:	f7f7 fed4 	bl	80005f8 <__aeabi_dmul>
 8008850:	4602      	mov	r2, r0
 8008852:	460b      	mov	r3, r1
 8008854:	4620      	mov	r0, r4
 8008856:	4629      	mov	r1, r5
 8008858:	f7f7 fd18 	bl	800028c <__adddf3>
 800885c:	4603      	mov	r3, r0
 800885e:	460c      	mov	r4, r1
 8008860:	4625      	mov	r5, r4
 8008862:	461c      	mov	r4, r3
 8008864:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008868:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800886c:	f7f7 fec4 	bl	80005f8 <__aeabi_dmul>
 8008870:	4602      	mov	r2, r0
 8008872:	460b      	mov	r3, r1
 8008874:	4610      	mov	r0, r2
 8008876:	4619      	mov	r1, r3
 8008878:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800887c:	f7f7 febc 	bl	80005f8 <__aeabi_dmul>
 8008880:	4602      	mov	r2, r0
 8008882:	460b      	mov	r3, r1
 8008884:	4610      	mov	r0, r2
 8008886:	4619      	mov	r1, r3
 8008888:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800888c:	f7f7 feb4 	bl	80005f8 <__aeabi_dmul>
 8008890:	4602      	mov	r2, r0
 8008892:	460b      	mov	r3, r1
 8008894:	4610      	mov	r0, r2
 8008896:	4619      	mov	r1, r3
 8008898:	f04f 0200 	mov.w	r2, #0
 800889c:	4b09      	ldr	r3, [pc, #36]	; (80088c4 <scaraFLowScurve+0xb5c>)
 800889e:	f7f7 ffd5 	bl	800084c <__aeabi_ddiv>
 80088a2:	4602      	mov	r2, r0
 80088a4:	460b      	mov	r3, r1
 80088a6:	4620      	mov	r0, r4
 80088a8:	4629      	mov	r1, r5
 80088aa:	f7f7 fced 	bl	8000288 <__aeabi_dsub>
 80088ae:	4603      	mov	r3, r0
 80088b0:	460c      	mov	r4, r1
 80088b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088b4:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 80088b8:	e12c      	b.n	8008b14 <scaraFLowScurve+0xdac>
 80088ba:	bf00      	nop
 80088bc:	40080000 	.word	0x40080000
 80088c0:	3fe00000 	.word	0x3fe00000
 80088c4:	40180000 	.word	0x40180000
		 // Phase 5
		 } else if ( ((3*tm + tc) <= time) && ( time < (4*tm + tc)) ) {
 80088c8:	f04f 0200 	mov.w	r2, #0
 80088cc:	4b94      	ldr	r3, [pc, #592]	; (8008b20 <scaraFLowScurve+0xdb8>)
 80088ce:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80088d2:	f7f7 fe91 	bl	80005f8 <__aeabi_dmul>
 80088d6:	4602      	mov	r2, r0
 80088d8:	460b      	mov	r3, r1
 80088da:	4610      	mov	r0, r2
 80088dc:	4619      	mov	r1, r3
 80088de:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80088e2:	f7f7 fcd3 	bl	800028c <__adddf3>
 80088e6:	4602      	mov	r2, r0
 80088e8:	460b      	mov	r3, r1
 80088ea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80088ee:	f7f8 f909 	bl	8000b04 <__aeabi_dcmpge>
 80088f2:	4603      	mov	r3, r0
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	f000 80f6 	beq.w	8008ae6 <scaraFLowScurve+0xd7e>
 80088fa:	f04f 0200 	mov.w	r2, #0
 80088fe:	4b89      	ldr	r3, [pc, #548]	; (8008b24 <scaraFLowScurve+0xdbc>)
 8008900:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008904:	f7f7 fe78 	bl	80005f8 <__aeabi_dmul>
 8008908:	4602      	mov	r2, r0
 800890a:	460b      	mov	r3, r1
 800890c:	4610      	mov	r0, r2
 800890e:	4619      	mov	r1, r3
 8008910:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008914:	f7f7 fcba 	bl	800028c <__adddf3>
 8008918:	4602      	mov	r2, r0
 800891a:	460b      	mov	r3, r1
 800891c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008920:	f7f8 f8dc 	bl	8000adc <__aeabi_dcmplt>
 8008924:	4603      	mov	r3, r0
 8008926:	2b00      	cmp	r3, #0
 8008928:	f000 80dd 	beq.w	8008ae6 <scaraFLowScurve+0xd7e>
			 t = time - (3*tm + tc);
 800892c:	f04f 0200 	mov.w	r2, #0
 8008930:	4b7b      	ldr	r3, [pc, #492]	; (8008b20 <scaraFLowScurve+0xdb8>)
 8008932:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008936:	f7f7 fe5f 	bl	80005f8 <__aeabi_dmul>
 800893a:	4602      	mov	r2, r0
 800893c:	460b      	mov	r3, r1
 800893e:	4610      	mov	r0, r2
 8008940:	4619      	mov	r1, r3
 8008942:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008946:	f7f7 fca1 	bl	800028c <__adddf3>
 800894a:	4602      	mov	r2, r0
 800894c:	460b      	mov	r3, r1
 800894e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008952:	f7f7 fc99 	bl	8000288 <__aeabi_dsub>
 8008956:	4602      	mov	r2, r0
 8008958:	460b      	mov	r3, r1
 800895a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			 scurve->a_current	=	-j_max*tm + j_max*t;
 800895e:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8008960:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008962:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8008966:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800896a:	4620      	mov	r0, r4
 800896c:	4629      	mov	r1, r5
 800896e:	f7f7 fe43 	bl	80005f8 <__aeabi_dmul>
 8008972:	4603      	mov	r3, r0
 8008974:	460c      	mov	r4, r1
 8008976:	4625      	mov	r5, r4
 8008978:	461c      	mov	r4, r3
 800897a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800897e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008982:	f7f7 fe39 	bl	80005f8 <__aeabi_dmul>
 8008986:	4602      	mov	r2, r0
 8008988:	460b      	mov	r3, r1
 800898a:	4620      	mov	r0, r4
 800898c:	4629      	mov	r1, r5
 800898e:	f7f7 fc7d 	bl	800028c <__adddf3>
 8008992:	4603      	mov	r3, r0
 8008994:	460c      	mov	r4, r1
 8008996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008998:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_4 - j_max*tm*t + 0.5*j_max*t*t;
 800899c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899e:	e9d3 452a 	ldrd	r4, r5, [r3, #168]	; 0xa8
 80089a2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80089a6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80089aa:	f7f7 fe25 	bl	80005f8 <__aeabi_dmul>
 80089ae:	4602      	mov	r2, r0
 80089b0:	460b      	mov	r3, r1
 80089b2:	4610      	mov	r0, r2
 80089b4:	4619      	mov	r1, r3
 80089b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80089ba:	f7f7 fe1d 	bl	80005f8 <__aeabi_dmul>
 80089be:	4602      	mov	r2, r0
 80089c0:	460b      	mov	r3, r1
 80089c2:	4620      	mov	r0, r4
 80089c4:	4629      	mov	r1, r5
 80089c6:	f7f7 fc5f 	bl	8000288 <__aeabi_dsub>
 80089ca:	4603      	mov	r3, r0
 80089cc:	460c      	mov	r4, r1
 80089ce:	4625      	mov	r5, r4
 80089d0:	461c      	mov	r4, r3
 80089d2:	f04f 0200 	mov.w	r2, #0
 80089d6:	4b54      	ldr	r3, [pc, #336]	; (8008b28 <scaraFLowScurve+0xdc0>)
 80089d8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80089dc:	f7f7 fe0c 	bl	80005f8 <__aeabi_dmul>
 80089e0:	4602      	mov	r2, r0
 80089e2:	460b      	mov	r3, r1
 80089e4:	4610      	mov	r0, r2
 80089e6:	4619      	mov	r1, r3
 80089e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80089ec:	f7f7 fe04 	bl	80005f8 <__aeabi_dmul>
 80089f0:	4602      	mov	r2, r0
 80089f2:	460b      	mov	r3, r1
 80089f4:	4610      	mov	r0, r2
 80089f6:	4619      	mov	r1, r3
 80089f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80089fc:	f7f7 fdfc 	bl	80005f8 <__aeabi_dmul>
 8008a00:	4602      	mov	r2, r0
 8008a02:	460b      	mov	r3, r1
 8008a04:	4620      	mov	r0, r4
 8008a06:	4629      	mov	r1, r5
 8008a08:	f7f7 fc40 	bl	800028c <__adddf3>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	460c      	mov	r4, r1
 8008a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a12:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t - 0.5*j_max*tm*t*t + j_max*t*t*t/6;
 8008a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a18:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 8008a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1e:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 8008a22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008a26:	f7f7 fde7 	bl	80005f8 <__aeabi_dmul>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	460b      	mov	r3, r1
 8008a2e:	4620      	mov	r0, r4
 8008a30:	4629      	mov	r1, r5
 8008a32:	f7f7 fc2b 	bl	800028c <__adddf3>
 8008a36:	4603      	mov	r3, r0
 8008a38:	460c      	mov	r4, r1
 8008a3a:	4625      	mov	r5, r4
 8008a3c:	461c      	mov	r4, r3
 8008a3e:	f04f 0200 	mov.w	r2, #0
 8008a42:	4b39      	ldr	r3, [pc, #228]	; (8008b28 <scaraFLowScurve+0xdc0>)
 8008a44:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008a48:	f7f7 fdd6 	bl	80005f8 <__aeabi_dmul>
 8008a4c:	4602      	mov	r2, r0
 8008a4e:	460b      	mov	r3, r1
 8008a50:	4610      	mov	r0, r2
 8008a52:	4619      	mov	r1, r3
 8008a54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008a58:	f7f7 fdce 	bl	80005f8 <__aeabi_dmul>
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	460b      	mov	r3, r1
 8008a60:	4610      	mov	r0, r2
 8008a62:	4619      	mov	r1, r3
 8008a64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008a68:	f7f7 fdc6 	bl	80005f8 <__aeabi_dmul>
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	460b      	mov	r3, r1
 8008a70:	4610      	mov	r0, r2
 8008a72:	4619      	mov	r1, r3
 8008a74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008a78:	f7f7 fdbe 	bl	80005f8 <__aeabi_dmul>
 8008a7c:	4602      	mov	r2, r0
 8008a7e:	460b      	mov	r3, r1
 8008a80:	4620      	mov	r0, r4
 8008a82:	4629      	mov	r1, r5
 8008a84:	f7f7 fc00 	bl	8000288 <__aeabi_dsub>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	460c      	mov	r4, r1
 8008a8c:	4625      	mov	r5, r4
 8008a8e:	461c      	mov	r4, r3
 8008a90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008a94:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008a98:	f7f7 fdae 	bl	80005f8 <__aeabi_dmul>
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	460b      	mov	r3, r1
 8008aa0:	4610      	mov	r0, r2
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008aa8:	f7f7 fda6 	bl	80005f8 <__aeabi_dmul>
 8008aac:	4602      	mov	r2, r0
 8008aae:	460b      	mov	r3, r1
 8008ab0:	4610      	mov	r0, r2
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008ab8:	f7f7 fd9e 	bl	80005f8 <__aeabi_dmul>
 8008abc:	4602      	mov	r2, r0
 8008abe:	460b      	mov	r3, r1
 8008ac0:	4610      	mov	r0, r2
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	f04f 0200 	mov.w	r2, #0
 8008ac8:	4b18      	ldr	r3, [pc, #96]	; (8008b2c <scaraFLowScurve+0xdc4>)
 8008aca:	f7f7 febf 	bl	800084c <__aeabi_ddiv>
 8008ace:	4602      	mov	r2, r0
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	4620      	mov	r0, r4
 8008ad4:	4629      	mov	r1, r5
 8008ad6:	f7f7 fbd9 	bl	800028c <__adddf3>
 8008ada:	4603      	mov	r3, r0
 8008adc:	460c      	mov	r4, r1
 8008ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ae0:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8008ae4:	e016      	b.n	8008b14 <scaraFLowScurve+0xdac>
		 } else {
			 scurve->a_current = 0;
 8008ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ae8:	f04f 0300 	mov.w	r3, #0
 8008aec:	f04f 0400 	mov.w	r4, #0
 8008af0:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current = 0;
 8008af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008af6:	f04f 0300 	mov.w	r3, #0
 8008afa:	f04f 0400 	mov.w	r4, #0
 8008afe:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current = scurve->total_s;
 8008b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b04:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8008b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b0a:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8008b0e:	e001      	b.n	8008b14 <scaraFLowScurve+0xdac>
		 }

	 } else {
		 return SCARA_STATUS_ERROR;
 8008b10:	2301      	movs	r3, #1
 8008b12:	e000      	b.n	8008b16 <scaraFLowScurve+0xdae>
	 }

	 return SCARA_STATUS_OK;
 8008b14:	2300      	movs	r3, #0
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3748      	adds	r7, #72	; 0x48
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bdb0      	pop	{r4, r5, r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	40080000 	.word	0x40080000
 8008b24:	40100000 	.word	0x40100000
 8008b28:	3fe00000 	.word	0x3fe00000
 8008b2c:	40180000 	.word	0x40180000

08008b30 <scaraCheckWorkSpace4>:

/* Check limit 4 joint variable */
SCARA_StatusTypeDef	scaraCheckWorkSpace4 (double theta1, double theta2, double d3, double theta4) {
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b088      	sub	sp, #32
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	ed87 0b06 	vstr	d0, [r7, #24]
 8008b3a:	ed87 1b04 	vstr	d1, [r7, #16]
 8008b3e:	ed87 2b02 	vstr	d2, [r7, #8]
 8008b42:	ed87 3b00 	vstr	d3, [r7]
	// check theta 1
	if ( theta1 < LIM_MIN_J0 || theta1 > LIM_MAX_J0) {
 8008b46:	a334      	add	r3, pc, #208	; (adr r3, 8008c18 <scaraCheckWorkSpace4+0xe8>)
 8008b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b4c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008b50:	f7f7 ffc4 	bl	8000adc <__aeabi_dcmplt>
 8008b54:	4603      	mov	r3, r0
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d109      	bne.n	8008b6e <scaraCheckWorkSpace4+0x3e>
 8008b5a:	a331      	add	r3, pc, #196	; (adr r3, 8008c20 <scaraCheckWorkSpace4+0xf0>)
 8008b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b60:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008b64:	f7f7 ffd8 	bl	8000b18 <__aeabi_dcmpgt>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d001      	beq.n	8008b72 <scaraCheckWorkSpace4+0x42>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008b6e:	2307      	movs	r3, #7
 8008b70:	e042      	b.n	8008bf8 <scaraCheckWorkSpace4+0xc8>
	}
	// check theta 2
	if ( theta2 < LIM_MIN_J1 || theta2 > LIM_MAX_J1) {
 8008b72:	a32d      	add	r3, pc, #180	; (adr r3, 8008c28 <scaraCheckWorkSpace4+0xf8>)
 8008b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b78:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008b7c:	f7f7 ffae 	bl	8000adc <__aeabi_dcmplt>
 8008b80:	4603      	mov	r3, r0
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d109      	bne.n	8008b9a <scaraCheckWorkSpace4+0x6a>
 8008b86:	a32a      	add	r3, pc, #168	; (adr r3, 8008c30 <scaraCheckWorkSpace4+0x100>)
 8008b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b8c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008b90:	f7f7 ffc2 	bl	8000b18 <__aeabi_dcmpgt>
 8008b94:	4603      	mov	r3, r0
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d001      	beq.n	8008b9e <scaraCheckWorkSpace4+0x6e>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008b9a:	2307      	movs	r3, #7
 8008b9c:	e02c      	b.n	8008bf8 <scaraCheckWorkSpace4+0xc8>
	}
	// check d 3
	if ( d3 < LIM_MIN_J2 || d3 > LIM_MAX_J2) {
 8008b9e:	f04f 0200 	mov.w	r2, #0
 8008ba2:	4b1b      	ldr	r3, [pc, #108]	; (8008c10 <scaraCheckWorkSpace4+0xe0>)
 8008ba4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008ba8:	f7f7 ff98 	bl	8000adc <__aeabi_dcmplt>
 8008bac:	4603      	mov	r3, r0
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d109      	bne.n	8008bc6 <scaraCheckWorkSpace4+0x96>
 8008bb2:	f04f 0200 	mov.w	r2, #0
 8008bb6:	4b17      	ldr	r3, [pc, #92]	; (8008c14 <scaraCheckWorkSpace4+0xe4>)
 8008bb8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008bbc:	f7f7 ffac 	bl	8000b18 <__aeabi_dcmpgt>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d001      	beq.n	8008bca <scaraCheckWorkSpace4+0x9a>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008bc6:	2307      	movs	r3, #7
 8008bc8:	e016      	b.n	8008bf8 <scaraCheckWorkSpace4+0xc8>
	}
	// check theta 4
	if ( theta4 < LIM_MIN_J3 || theta4 > LIM_MAX_J3) {
 8008bca:	a30d      	add	r3, pc, #52	; (adr r3, 8008c00 <scaraCheckWorkSpace4+0xd0>)
 8008bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008bd4:	f7f7 ff82 	bl	8000adc <__aeabi_dcmplt>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d109      	bne.n	8008bf2 <scaraCheckWorkSpace4+0xc2>
 8008bde:	a30a      	add	r3, pc, #40	; (adr r3, 8008c08 <scaraCheckWorkSpace4+0xd8>)
 8008be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008be8:	f7f7 ff96 	bl	8000b18 <__aeabi_dcmpgt>
 8008bec:	4603      	mov	r3, r0
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d001      	beq.n	8008bf6 <scaraCheckWorkSpace4+0xc6>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008bf2:	2307      	movs	r3, #7
 8008bf4:	e000      	b.n	8008bf8 <scaraCheckWorkSpace4+0xc8>
	}
	return SCARA_STATUS_OK;
 8008bf6:	2300      	movs	r3, #0
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3720      	adds	r7, #32
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}
 8008c00:	daaaaaab 	.word	0xdaaaaaab
 8008c04:	c007bc89 	.word	0xc007bc89
 8008c08:	daaaaaab 	.word	0xdaaaaaab
 8008c0c:	4007bc89 	.word	0x4007bc89
 8008c10:	3ff00000 	.word	0x3ff00000
 8008c14:	40590000 	.word	0x40590000
 8008c18:	daaaaaab 	.word	0xdaaaaaab
 8008c1c:	bff7bc89 	.word	0xbff7bc89
 8008c20:	daaaaaab 	.word	0xdaaaaaab
 8008c24:	3ff7bc89 	.word	0x3ff7bc89
 8008c28:	88000000 	.word	0x88000000
 8008c2c:	c002d97c 	.word	0xc002d97c
 8008c30:	88000000 	.word	0x88000000
 8008c34:	4002d97c 	.word	0x4002d97c

08008c38 <scaraCheckWorkSpace1>:

/* Check limit 1 joint variable */
SCARA_StatusTypeDef	scaraCheckWorkSpace1 (Trajectory_TargetTypeDef target, double value) {
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b084      	sub	sp, #16
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	4603      	mov	r3, r0
 8008c40:	ed87 0b00 	vstr	d0, [r7]
 8008c44:	73fb      	strb	r3, [r7, #15]
	if ( TRAJECTORY_J0 == target) {
 8008c46:	7bfb      	ldrb	r3, [r7, #15]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d117      	bne.n	8008c7c <scaraCheckWorkSpace1+0x44>
		if ( (LIM_MIN_J0 <= value) && ( value <= LIM_MAX_J0)) {
 8008c4c:	a33c      	add	r3, pc, #240	; (adr r3, 8008d40 <scaraCheckWorkSpace1+0x108>)
 8008c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c56:	f7f7 ff55 	bl	8000b04 <__aeabi_dcmpge>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d00b      	beq.n	8008c78 <scaraCheckWorkSpace1+0x40>
 8008c60:	a339      	add	r3, pc, #228	; (adr r3, 8008d48 <scaraCheckWorkSpace1+0x110>)
 8008c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c6a:	f7f7 ff41 	bl	8000af0 <__aeabi_dcmple>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d001      	beq.n	8008c78 <scaraCheckWorkSpace1+0x40>
			return SCARA_STATUS_OK;
 8008c74:	2300      	movs	r3, #0
 8008c76:	e053      	b.n	8008d20 <scaraCheckWorkSpace1+0xe8>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008c78:	2307      	movs	r3, #7
 8008c7a:	e051      	b.n	8008d20 <scaraCheckWorkSpace1+0xe8>
		}
	} else if (TRAJECTORY_J1 == target) {
 8008c7c:	7bfb      	ldrb	r3, [r7, #15]
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d117      	bne.n	8008cb2 <scaraCheckWorkSpace1+0x7a>
		if ( (LIM_MIN_J1 <= value) && ( value <= LIM_MAX_J1)) {
 8008c82:	a333      	add	r3, pc, #204	; (adr r3, 8008d50 <scaraCheckWorkSpace1+0x118>)
 8008c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c8c:	f7f7 ff3a 	bl	8000b04 <__aeabi_dcmpge>
 8008c90:	4603      	mov	r3, r0
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d00b      	beq.n	8008cae <scaraCheckWorkSpace1+0x76>
 8008c96:	a330      	add	r3, pc, #192	; (adr r3, 8008d58 <scaraCheckWorkSpace1+0x120>)
 8008c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ca0:	f7f7 ff26 	bl	8000af0 <__aeabi_dcmple>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d001      	beq.n	8008cae <scaraCheckWorkSpace1+0x76>
			return SCARA_STATUS_OK;
 8008caa:	2300      	movs	r3, #0
 8008cac:	e038      	b.n	8008d20 <scaraCheckWorkSpace1+0xe8>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008cae:	2307      	movs	r3, #7
 8008cb0:	e036      	b.n	8008d20 <scaraCheckWorkSpace1+0xe8>
		}
	} else if (TRAJECTORY_J2 == target) {
 8008cb2:	7bfb      	ldrb	r3, [r7, #15]
 8008cb4:	2b02      	cmp	r3, #2
 8008cb6:	d117      	bne.n	8008ce8 <scaraCheckWorkSpace1+0xb0>
		if ( (LIM_MIN_J2 <= value) && ( value <= LIM_MAX_J2)) {
 8008cb8:	f04f 0200 	mov.w	r2, #0
 8008cbc:	4b1e      	ldr	r3, [pc, #120]	; (8008d38 <scaraCheckWorkSpace1+0x100>)
 8008cbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008cc2:	f7f7 ff1f 	bl	8000b04 <__aeabi_dcmpge>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d00b      	beq.n	8008ce4 <scaraCheckWorkSpace1+0xac>
 8008ccc:	f04f 0200 	mov.w	r2, #0
 8008cd0:	4b1a      	ldr	r3, [pc, #104]	; (8008d3c <scaraCheckWorkSpace1+0x104>)
 8008cd2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008cd6:	f7f7 ff0b 	bl	8000af0 <__aeabi_dcmple>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d001      	beq.n	8008ce4 <scaraCheckWorkSpace1+0xac>
			return SCARA_STATUS_OK;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	e01d      	b.n	8008d20 <scaraCheckWorkSpace1+0xe8>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008ce4:	2307      	movs	r3, #7
 8008ce6:	e01b      	b.n	8008d20 <scaraCheckWorkSpace1+0xe8>
		}
	} else if (TRAJECTORY_J3 == target) {
 8008ce8:	7bfb      	ldrb	r3, [r7, #15]
 8008cea:	2b03      	cmp	r3, #3
 8008cec:	d117      	bne.n	8008d1e <scaraCheckWorkSpace1+0xe6>
		if ( (LIM_MIN_J3 <= value) && ( value <= LIM_MAX_J3)) {
 8008cee:	a30e      	add	r3, pc, #56	; (adr r3, 8008d28 <scaraCheckWorkSpace1+0xf0>)
 8008cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008cf8:	f7f7 ff04 	bl	8000b04 <__aeabi_dcmpge>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d00b      	beq.n	8008d1a <scaraCheckWorkSpace1+0xe2>
 8008d02:	a30b      	add	r3, pc, #44	; (adr r3, 8008d30 <scaraCheckWorkSpace1+0xf8>)
 8008d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d0c:	f7f7 fef0 	bl	8000af0 <__aeabi_dcmple>
 8008d10:	4603      	mov	r3, r0
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d001      	beq.n	8008d1a <scaraCheckWorkSpace1+0xe2>
			return SCARA_STATUS_OK;
 8008d16:	2300      	movs	r3, #0
 8008d18:	e002      	b.n	8008d20 <scaraCheckWorkSpace1+0xe8>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008d1a:	2307      	movs	r3, #7
 8008d1c:	e000      	b.n	8008d20 <scaraCheckWorkSpace1+0xe8>
		}
	} else {
		return SCARA_STATUS_ERROR;
 8008d1e:	2301      	movs	r3, #1
	}
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3710      	adds	r7, #16
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	daaaaaab 	.word	0xdaaaaaab
 8008d2c:	c007bc89 	.word	0xc007bc89
 8008d30:	daaaaaab 	.word	0xdaaaaaab
 8008d34:	4007bc89 	.word	0x4007bc89
 8008d38:	3ff00000 	.word	0x3ff00000
 8008d3c:	40590000 	.word	0x40590000
 8008d40:	daaaaaab 	.word	0xdaaaaaab
 8008d44:	bff7bc89 	.word	0xbff7bc89
 8008d48:	daaaaaab 	.word	0xdaaaaaab
 8008d4c:	3ff7bc89 	.word	0x3ff7bc89
 8008d50:	88000000 	.word	0x88000000
 8008d54:	c002d97c 	.word	0xc002d97c
 8008d58:	88000000 	.word	0x88000000
 8008d5c:	4002d97c 	.word	0x4002d97c

08008d60 <scaraTestDuty>:

/* Check all of point in travel */
SCARA_StatusTypeDef	scaraTestDuty(void) {
 8008d60:	b5b0      	push	{r4, r5, r7, lr}
 8008d62:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8008d66:	af2c      	add	r7, sp, #176	; 0xb0
	int32_t sample_count;
	double run_time = 0;
 8008d68:	f04f 0300 	mov.w	r3, #0
 8008d6c:	f04f 0400 	mov.w	r4, #0
 8008d70:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
	SCARA_PositionTypeDef test_Next, test_Current;
	SCARA_StatusTypeDef status;
	memcpy(&test_Current, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 8008d74:	463b      	mov	r3, r7
 8008d76:	4a36      	ldr	r2, [pc, #216]	; (8008e50 <scaraTestDuty+0xf0>)
 8008d78:	4618      	mov	r0, r3
 8008d7a:	4611      	mov	r1, r2
 8008d7c:	23b8      	movs	r3, #184	; 0xb8
 8008d7e:	461a      	mov	r2, r3
 8008d80:	f00c fcf6 	bl	8015770 <memcpy>
	sample_count = ceil(myDUTY.time_total/T_SAMPLING);
 8008d84:	4b33      	ldr	r3, [pc, #204]	; (8008e54 <scaraTestDuty+0xf4>)
 8008d86:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8008d8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008d8e:	a32e      	add	r3, pc, #184	; (adr r3, 8008e48 <scaraTestDuty+0xe8>)
 8008d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d94:	f7f7 fd5a 	bl	800084c <__aeabi_ddiv>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	460c      	mov	r4, r1
 8008d9c:	ec44 3b17 	vmov	d7, r3, r4
 8008da0:	eeb0 0a47 	vmov.f32	s0, s14
 8008da4:	eef0 0a67 	vmov.f32	s1, s15
 8008da8:	f010 fa5e 	bl	8019268 <ceil>
 8008dac:	ec54 3b10 	vmov	r3, r4, d0
 8008db0:	4618      	mov	r0, r3
 8008db2:	4621      	mov	r1, r4
 8008db4:	f7f7 fed0 	bl	8000b58 <__aeabi_d2iz>
 8008db8:	4603      	mov	r3, r0
 8008dba:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
	for (int32_t i = 1; i < sample_count; i++) {
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8008dc4:	e032      	b.n	8008e2c <scaraTestDuty+0xcc>
		run_time += T_SAMPLING;
 8008dc6:	a320      	add	r3, pc, #128	; (adr r3, 8008e48 <scaraTestDuty+0xe8>)
 8008dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dcc:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8008dd0:	f7f7 fa5c 	bl	800028c <__adddf3>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	460c      	mov	r4, r1
 8008dd8:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
		status = scaraFlowDuty(run_time, &test_Next, test_Current);
 8008ddc:	463c      	mov	r4, r7
 8008dde:	f107 05b8 	add.w	r5, r7, #184	; 0xb8
 8008de2:	4668      	mov	r0, sp
 8008de4:	f104 0308 	add.w	r3, r4, #8
 8008de8:	22b0      	movs	r2, #176	; 0xb0
 8008dea:	4619      	mov	r1, r3
 8008dec:	f00c fcc0 	bl	8015770 <memcpy>
 8008df0:	e894 000c 	ldmia.w	r4, {r2, r3}
 8008df4:	4628      	mov	r0, r5
 8008df6:	ed97 0b60 	vldr	d0, [r7, #384]	; 0x180
 8008dfa:	f7fe f99b 	bl	8007134 <scaraFlowDuty>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
		if (status != SCARA_STATUS_OK) {
 8008e04:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d002      	beq.n	8008e12 <scaraTestDuty+0xb2>
			return status;
 8008e0c:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8008e10:	e013      	b.n	8008e3a <scaraTestDuty+0xda>
		}
		memcpy(&test_Next, &test_Current, sizeof(SCARA_PositionTypeDef));
 8008e12:	463a      	mov	r2, r7
 8008e14:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8008e18:	4611      	mov	r1, r2
 8008e1a:	22b8      	movs	r2, #184	; 0xb8
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f00c fca7 	bl	8015770 <memcpy>
	for (int32_t i = 1; i < sample_count; i++) {
 8008e22:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8008e26:	3301      	adds	r3, #1
 8008e28:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8008e2c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8008e30:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8008e34:	429a      	cmp	r2, r3
 8008e36:	dbc6      	blt.n	8008dc6 <scaraTestDuty+0x66>
	}
	return SCARA_STATUS_OK;
 8008e38:	2300      	movs	r3, #0
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bdb0      	pop	{r4, r5, r7, pc}
 8008e44:	f3af 8000 	nop.w
 8008e48:	40000000 	.word	0x40000000
 8008e4c:	3f847ae1 	.word	0x3f847ae1
 8008e50:	20005e38 	.word	0x20005e38
 8008e54:	20005378 	.word	0x20005378

08008e58 <scaraSetScanFlag>:

void				scaraSetScanFlag(void) {
 8008e58:	b480      	push	{r7}
 8008e5a:	af00      	add	r7, sp, #0
	mySCARA.isScanLitmit = TRUE;
 8008e5c:	4b03      	ldr	r3, [pc, #12]	; (8008e6c <scaraSetScanFlag+0x14>)
 8008e5e:	2201      	movs	r2, #1
 8008e60:	70da      	strb	r2, [r3, #3]
}
 8008e62:	bf00      	nop
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr
 8008e6c:	20000c4c 	.word	0x20000c4c

08008e70 <scaraSetOutput>:

void				scaraSetOutput		(uint8_t level) {
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b082      	sub	sp, #8
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	4603      	mov	r3, r0
 8008e78:	71fb      	strb	r3, [r7, #7]
	mySCARA.outputSet	 = level;
 8008e7a:	4a05      	ldr	r2, [pc, #20]	; (8008e90 <scaraSetOutput+0x20>)
 8008e7c:	79fb      	ldrb	r3, [r7, #7]
 8008e7e:	7113      	strb	r3, [r2, #4]
	lowlayer_setOutput(level);
 8008e80:	79fb      	ldrb	r3, [r7, #7]
 8008e82:	4618      	mov	r0, r3
 8008e84:	f7fb fc5e 	bl	8004744 <lowlayer_setOutput>
}
 8008e88:	bf00      	nop
 8008e8a:	3708      	adds	r7, #8
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}
 8008e90:	20000c4c 	.word	0x20000c4c

08008e94 <scaraSetDutyState>:

void				scaraSetDutyState(SCARA_DutyStateTypeDef state) {
 8008e94:	b480      	push	{r7}
 8008e96:	b083      	sub	sp, #12
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	71fb      	strb	r3, [r7, #7]
	mySCARA.duty_State = state;
 8008e9e:	4a04      	ldr	r2, [pc, #16]	; (8008eb0 <scaraSetDutyState+0x1c>)
 8008ea0:	79fb      	ldrb	r3, [r7, #7]
 8008ea2:	7093      	strb	r3, [r2, #2]
}
 8008ea4:	bf00      	nop
 8008ea6:	370c      	adds	r7, #12
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eae:	4770      	bx	lr
 8008eb0:	20000c4c 	.word	0x20000c4c

08008eb4 <scaraSetMode>:

void				scaraSetMode(SCARA_ModeTypeDef mode) {
 8008eb4:	b480      	push	{r7}
 8008eb6:	b083      	sub	sp, #12
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	4603      	mov	r3, r0
 8008ebc:	71fb      	strb	r3, [r7, #7]
	mySCARA.mode = mode;
 8008ebe:	4a04      	ldr	r2, [pc, #16]	; (8008ed0 <scaraSetMode+0x1c>)
 8008ec0:	79fb      	ldrb	r3, [r7, #7]
 8008ec2:	7053      	strb	r3, [r2, #1]
}
 8008ec4:	bf00      	nop
 8008ec6:	370c      	adds	r7, #12
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ece:	4770      	bx	lr
 8008ed0:	20000c4c 	.word	0x20000c4c

08008ed4 <scaraSetMethod>:

void				scaraSetMethod(SCARA_MethodTypeDef method) {
 8008ed4:	b480      	push	{r7}
 8008ed6:	b083      	sub	sp, #12
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	4603      	mov	r3, r0
 8008edc:	71fb      	strb	r3, [r7, #7]
	mySCARA.method = method;
 8008ede:	4a04      	ldr	r2, [pc, #16]	; (8008ef0 <scaraSetMethod+0x1c>)
 8008ee0:	79fb      	ldrb	r3, [r7, #7]
 8008ee2:	7013      	strb	r3, [r2, #0]
}
 8008ee4:	bf00      	nop
 8008ee6:	370c      	adds	r7, #12
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr
 8008ef0:	20000c4c 	.word	0x20000c4c

08008ef4 <scaraGetPosition>:


void				scaraGetPosition	(SCARA_PositionTypeDef *pos) {
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b082      	sub	sp, #8
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
	memcpy(pos, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 8008efc:	22b8      	movs	r2, #184	; 0xb8
 8008efe:	4904      	ldr	r1, [pc, #16]	; (8008f10 <scaraGetPosition+0x1c>)
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f00c fc35 	bl	8015770 <memcpy>
}
 8008f06:	bf00      	nop
 8008f08:	3708      	adds	r7, #8
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop
 8008f10:	20005e38 	.word	0x20005e38

08008f14 <scaraGetMode>:


SCARA_ModeTypeDef	scaraGetMode(void) {
 8008f14:	b480      	push	{r7}
 8008f16:	af00      	add	r7, sp, #0
	return mySCARA.mode;
 8008f18:	4b03      	ldr	r3, [pc, #12]	; (8008f28 <scaraGetMode+0x14>)
 8008f1a:	785b      	ldrb	r3, [r3, #1]
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f24:	4770      	bx	lr
 8008f26:	bf00      	nop
 8008f28:	20000c4c 	.word	0x20000c4c

08008f2c <scaraGetMethod>:

SCARA_MethodTypeDef	scaraGetMethod(void) {
 8008f2c:	b480      	push	{r7}
 8008f2e:	af00      	add	r7, sp, #0
	return mySCARA.method;
 8008f30:	4b03      	ldr	r3, [pc, #12]	; (8008f40 <scaraGetMethod+0x14>)
 8008f32:	781b      	ldrb	r3, [r3, #0]
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	46bd      	mov	sp, r7
 8008f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3c:	4770      	bx	lr
 8008f3e:	bf00      	nop
 8008f40:	20000c4c 	.word	0x20000c4c

08008f44 <scaraGetDutyState>:

SCARA_DutyStateTypeDef	scaraGetDutyState(void) {
 8008f44:	b480      	push	{r7}
 8008f46:	af00      	add	r7, sp, #0
	return mySCARA.duty_State;
 8008f48:	4b03      	ldr	r3, [pc, #12]	; (8008f58 <scaraGetDutyState+0x14>)
 8008f4a:	789b      	ldrb	r3, [r3, #2]
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr
 8008f56:	bf00      	nop
 8008f58:	20000c4c 	.word	0x20000c4c

08008f5c <scaraIsScanLimit>:

uint8_t					scaraIsScanLimit(void) {
 8008f5c:	b480      	push	{r7}
 8008f5e:	af00      	add	r7, sp, #0
	return mySCARA.isScanLitmit;
 8008f60:	4b03      	ldr	r3, [pc, #12]	; (8008f70 <scaraIsScanLimit+0x14>)
 8008f62:	78db      	ldrb	r3, [r3, #3]
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr
 8008f6e:	bf00      	nop
 8008f70:	20000c4c 	.word	0x20000c4c
 8008f74:	00000000 	.word	0x00000000

08008f78 <scaraIsFinish>:

uint8_t					scaraIsFinish		(double run_time) {
 8008f78:	b590      	push	{r4, r7, lr}
 8008f7a:	b083      	sub	sp, #12
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	ed87 0b00 	vstr	d0, [r7]
	if(myDUTY.time_total + 0.03 < run_time) {
 8008f82:	4b11      	ldr	r3, [pc, #68]	; (8008fc8 <scaraIsFinish+0x50>)
 8008f84:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8008f88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008f8c:	a30c      	add	r3, pc, #48	; (adr r3, 8008fc0 <scaraIsFinish+0x48>)
 8008f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f92:	f7f7 f97b 	bl	800028c <__adddf3>
 8008f96:	4603      	mov	r3, r0
 8008f98:	460c      	mov	r4, r1
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	4623      	mov	r3, r4
 8008f9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008fa2:	f7f7 fdb9 	bl	8000b18 <__aeabi_dcmpgt>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d001      	beq.n	8008fb0 <scaraIsFinish+0x38>
		return TRUE;
 8008fac:	2301      	movs	r3, #1
 8008fae:	e000      	b.n	8008fb2 <scaraIsFinish+0x3a>
	} else {
		return FALSE;
 8008fb0:	2300      	movs	r3, #0
	}
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	370c      	adds	r7, #12
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd90      	pop	{r4, r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	f3af 8000 	nop.w
 8008fc0:	eb851eb8 	.word	0xeb851eb8
 8008fc4:	3f9eb851 	.word	0x3f9eb851
 8008fc8:	20005378 	.word	0x20005378
 8008fcc:	00000000 	.word	0x00000000

08008fd0 <scaraPosition2String>:

/* Convert position to string*/
int32_t					scaraPosition2String(char *result, SCARA_PositionTypeDef position) {
 8008fd0:	b082      	sub	sp, #8
 8008fd2:	b590      	push	{r4, r7, lr}
 8008fd4:	b0af      	sub	sp, #188	; 0xbc
 8008fd6:	af0a      	add	r7, sp, #40	; 0x28
 8008fd8:	6078      	str	r0, [r7, #4]
 8008fda:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8008fde:	e881 000c 	stmia.w	r1, {r2, r3}
	uint8_t time[12];
	uint8_t total_time[12];

	int32_t lenght_buff;

	double2string(theta1, position.Theta1*180/PI, 6);
 8008fe2:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8008fe6:	f04f 0200 	mov.w	r2, #0
 8008fea:	4b7f      	ldr	r3, [pc, #508]	; (80091e8 <scaraPosition2String+0x218>)
 8008fec:	f7f7 fb04 	bl	80005f8 <__aeabi_dmul>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	460c      	mov	r4, r1
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	4621      	mov	r1, r4
 8008ff8:	a379      	add	r3, pc, #484	; (adr r3, 80091e0 <scaraPosition2String+0x210>)
 8008ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ffe:	f7f7 fc25 	bl	800084c <__aeabi_ddiv>
 8009002:	4603      	mov	r3, r0
 8009004:	460c      	mov	r4, r1
 8009006:	ec44 3b17 	vmov	d7, r3, r4
 800900a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800900e:	2106      	movs	r1, #6
 8009010:	eeb0 0a47 	vmov.f32	s0, s14
 8009014:	eef0 0a67 	vmov.f32	s1, s15
 8009018:	4618      	mov	r0, r3
 800901a:	f7f8 fba5 	bl	8001768 <double2string>
	double2string(theta2, position.Theta2*180/PI, 6);
 800901e:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8009022:	f04f 0200 	mov.w	r2, #0
 8009026:	4b70      	ldr	r3, [pc, #448]	; (80091e8 <scaraPosition2String+0x218>)
 8009028:	f7f7 fae6 	bl	80005f8 <__aeabi_dmul>
 800902c:	4603      	mov	r3, r0
 800902e:	460c      	mov	r4, r1
 8009030:	4618      	mov	r0, r3
 8009032:	4621      	mov	r1, r4
 8009034:	a36a      	add	r3, pc, #424	; (adr r3, 80091e0 <scaraPosition2String+0x210>)
 8009036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800903a:	f7f7 fc07 	bl	800084c <__aeabi_ddiv>
 800903e:	4603      	mov	r3, r0
 8009040:	460c      	mov	r4, r1
 8009042:	ec44 3b17 	vmov	d7, r3, r4
 8009046:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800904a:	2106      	movs	r1, #6
 800904c:	eeb0 0a47 	vmov.f32	s0, s14
 8009050:	eef0 0a67 	vmov.f32	s1, s15
 8009054:	4618      	mov	r0, r3
 8009056:	f7f8 fb87 	bl	8001768 <double2string>
	double2string(d3, position.D3, 6);
 800905a:	ed97 7b46 	vldr	d7, [r7, #280]	; 0x118
 800905e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009062:	2106      	movs	r1, #6
 8009064:	eeb0 0a47 	vmov.f32	s0, s14
 8009068:	eef0 0a67 	vmov.f32	s1, s15
 800906c:	4618      	mov	r0, r3
 800906e:	f7f8 fb7b 	bl	8001768 <double2string>
	double2string(theta4, position.Theta4*180/PI, 6);
 8009072:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8009076:	f04f 0200 	mov.w	r2, #0
 800907a:	4b5b      	ldr	r3, [pc, #364]	; (80091e8 <scaraPosition2String+0x218>)
 800907c:	f7f7 fabc 	bl	80005f8 <__aeabi_dmul>
 8009080:	4603      	mov	r3, r0
 8009082:	460c      	mov	r4, r1
 8009084:	4618      	mov	r0, r3
 8009086:	4621      	mov	r1, r4
 8009088:	a355      	add	r3, pc, #340	; (adr r3, 80091e0 <scaraPosition2String+0x210>)
 800908a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800908e:	f7f7 fbdd 	bl	800084c <__aeabi_ddiv>
 8009092:	4603      	mov	r3, r0
 8009094:	460c      	mov	r4, r1
 8009096:	ec44 3b17 	vmov	d7, r3, r4
 800909a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800909e:	2106      	movs	r1, #6
 80090a0:	eeb0 0a47 	vmov.f32	s0, s14
 80090a4:	eef0 0a67 	vmov.f32	s1, s15
 80090a8:	4618      	mov	r0, r3
 80090aa:	f7f8 fb5d 	bl	8001768 <double2string>
	double2string(x, position.x, 6);
 80090ae:	ed97 7b3a 	vldr	d7, [r7, #232]	; 0xe8
 80090b2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80090b6:	2106      	movs	r1, #6
 80090b8:	eeb0 0a47 	vmov.f32	s0, s14
 80090bc:	eef0 0a67 	vmov.f32	s1, s15
 80090c0:	4618      	mov	r0, r3
 80090c2:	f7f8 fb51 	bl	8001768 <double2string>
	double2string(y, position.y, 6);
 80090c6:	ed97 7b3c 	vldr	d7, [r7, #240]	; 0xf0
 80090ca:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80090ce:	2106      	movs	r1, #6
 80090d0:	eeb0 0a47 	vmov.f32	s0, s14
 80090d4:	eef0 0a67 	vmov.f32	s1, s15
 80090d8:	4618      	mov	r0, r3
 80090da:	f7f8 fb45 	bl	8001768 <double2string>
	double2string(z, position.z, 6);
 80090de:	ed97 7b3e 	vldr	d7, [r7, #248]	; 0xf8
 80090e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80090e6:	2106      	movs	r1, #6
 80090e8:	eeb0 0a47 	vmov.f32	s0, s14
 80090ec:	eef0 0a67 	vmov.f32	s1, s15
 80090f0:	4618      	mov	r0, r3
 80090f2:	f7f8 fb39 	bl	8001768 <double2string>
	double2string(roll, position.roll*180/PI, 6);
 80090f6:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 80090fa:	f04f 0200 	mov.w	r2, #0
 80090fe:	4b3a      	ldr	r3, [pc, #232]	; (80091e8 <scaraPosition2String+0x218>)
 8009100:	f7f7 fa7a 	bl	80005f8 <__aeabi_dmul>
 8009104:	4603      	mov	r3, r0
 8009106:	460c      	mov	r4, r1
 8009108:	4618      	mov	r0, r3
 800910a:	4621      	mov	r1, r4
 800910c:	a334      	add	r3, pc, #208	; (adr r3, 80091e0 <scaraPosition2String+0x210>)
 800910e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009112:	f7f7 fb9b 	bl	800084c <__aeabi_ddiv>
 8009116:	4603      	mov	r3, r0
 8009118:	460c      	mov	r4, r1
 800911a:	ec44 3b17 	vmov	d7, r3, r4
 800911e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009122:	2106      	movs	r1, #6
 8009124:	eeb0 0a47 	vmov.f32	s0, s14
 8009128:	eef0 0a67 	vmov.f32	s1, s15
 800912c:	4618      	mov	r0, r3
 800912e:	f7f8 fb1b 	bl	8001768 <double2string>
	double2string(lenght, position.q, 6);
 8009132:	ed97 7b28 	vldr	d7, [r7, #160]	; 0xa0
 8009136:	f107 0320 	add.w	r3, r7, #32
 800913a:	2106      	movs	r1, #6
 800913c:	eeb0 0a47 	vmov.f32	s0, s14
 8009140:	eef0 0a67 	vmov.f32	s1, s15
 8009144:	4618      	mov	r0, r3
 8009146:	f7f8 fb0f 	bl	8001768 <double2string>
	double2string(total_time, position.total_time, 4);
 800914a:	ed97 7b38 	vldr	d7, [r7, #224]	; 0xe0
 800914e:	f107 0308 	add.w	r3, r7, #8
 8009152:	2104      	movs	r1, #4
 8009154:	eeb0 0a47 	vmov.f32	s0, s14
 8009158:	eef0 0a67 	vmov.f32	s1, s15
 800915c:	4618      	mov	r0, r3
 800915e:	f7f8 fb03 	bl	8001768 <double2string>
	double2string(time, position.t, 4);
 8009162:	ed97 7b36 	vldr	d7, [r7, #216]	; 0xd8
 8009166:	f107 0314 	add.w	r3, r7, #20
 800916a:	2104      	movs	r1, #4
 800916c:	eeb0 0a47 	vmov.f32	s0, s14
 8009170:	eef0 0a67 	vmov.f32	s1, s15
 8009174:	4618      	mov	r0, r3
 8009176:	f7f8 faf7 	bl	8001768 <double2string>
	lenght_buff = snprintf( (char *)result, 144,
 800917a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800917e:	f107 0314 	add.w	r3, r7, #20
 8009182:	9309      	str	r3, [sp, #36]	; 0x24
 8009184:	f107 0308 	add.w	r3, r7, #8
 8009188:	9308      	str	r3, [sp, #32]
 800918a:	f107 0320 	add.w	r3, r7, #32
 800918e:	9307      	str	r3, [sp, #28]
 8009190:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009194:	9306      	str	r3, [sp, #24]
 8009196:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800919a:	9305      	str	r3, [sp, #20]
 800919c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80091a0:	9304      	str	r3, [sp, #16]
 80091a2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80091a6:	9303      	str	r3, [sp, #12]
 80091a8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80091ac:	9302      	str	r3, [sp, #8]
 80091ae:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80091b2:	9301      	str	r3, [sp, #4]
 80091b4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80091b8:	9300      	str	r3, [sp, #0]
 80091ba:	4613      	mov	r3, r2
 80091bc:	4a0b      	ldr	r2, [pc, #44]	; (80091ec <scaraPosition2String+0x21c>)
 80091be:	2190      	movs	r1, #144	; 0x90
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f00d f9fd 	bl	80165c0 <sniprintf>
 80091c6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
						z,
						roll,
						lenght,
						total_time,
						time);
	return lenght_buff;
 80091ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3794      	adds	r7, #148	; 0x94
 80091d2:	46bd      	mov	sp, r7
 80091d4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80091d8:	b002      	add	sp, #8
 80091da:	4770      	bx	lr
 80091dc:	f3af 8000 	nop.w
 80091e0:	60000000 	.word	0x60000000
 80091e4:	400921fb 	.word	0x400921fb
 80091e8:	40668000 	.word	0x40668000
 80091ec:	0801b108 	.word	0x0801b108

080091f0 <scaraPosition_packaging>:

void scaraPosition_packaging(uint8_t *data_packet, SCARA_PositionTypeDef position)
{
 80091f0:	b082      	sub	sp, #8
 80091f2:	b590      	push	{r4, r7, lr}
 80091f4:	b083      	sub	sp, #12
 80091f6:	af00      	add	r7, sp, #0
 80091f8:	6078      	str	r0, [r7, #4]
 80091fa:	f107 0118 	add.w	r1, r7, #24
 80091fe:	e881 000c 	stmia.w	r1, {r2, r3}
	data_packet[0] = 0x28;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2228      	movs	r2, #40	; 0x28
 8009206:	701a      	strb	r2, [r3, #0]
	data_packet[83] = 0x29;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	3353      	adds	r3, #83	; 0x53
 800920c:	2229      	movs	r2, #41	; 0x29
 800920e:	701a      	strb	r2, [r3, #0]
	data_packet[1] = 0x09;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	3301      	adds	r3, #1
 8009214:	2209      	movs	r2, #9
 8009216:	701a      	strb	r2, [r3, #0]
	memcpy(&data_packet[2], &position.t, 80);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	3302      	adds	r3, #2
 800921c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8009220:	2250      	movs	r2, #80	; 0x50
 8009222:	4618      	mov	r0, r3
 8009224:	f00c faa4 	bl	8015770 <memcpy>
	data_packet[82] = lowlayer_readLimitSwitch();
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f103 0452 	add.w	r4, r3, #82	; 0x52
 800922e:	f7fb f9c7 	bl	80045c0 <lowlayer_readLimitSwitch>
 8009232:	4603      	mov	r3, r0
 8009234:	7023      	strb	r3, [r4, #0]
}
 8009236:	bf00      	nop
 8009238:	370c      	adds	r7, #12
 800923a:	46bd      	mov	sp, r7
 800923c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8009240:	b002      	add	sp, #8
 8009242:	4770      	bx	lr
 8009244:	0000      	movs	r0, r0
	...

08009248 <scaraKeyInit>:

/* Convert key command to duty */
SCARA_StatusTypeDef		scaraKeyInit(SCARA_KeyTypeDef key,int32_t speed, double *runtime) {
 8009248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800924a:	ed2d 8b02 	vpush	{d8}
 800924e:	f5ad 7d6f 	sub.w	sp, sp, #956	; 0x3bc
 8009252:	af66      	add	r7, sp, #408	; 0x198
 8009254:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009258:	6019      	str	r1, [r3, #0]
 800925a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800925e:	601a      	str	r2, [r3, #0]
 8009260:	f107 0247 	add.w	r2, r7, #71	; 0x47
 8009264:	4603      	mov	r3, r0
 8009266:	7013      	strb	r3, [r2, #0]
	DUTY_Command_TypeDef cmd;
	SCARA_StatusTypeDef  status;
	double s, v, a;
	cmd.coordinate_type = DUTY_COORDINATES_REL;
 8009268:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800926c:	2301      	movs	r3, #1
 800926e:	7313      	strb	r3, [r2, #12]
	cmd.trajec_type = DUTY_TRAJECTORY_LSPB;
 8009270:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009274:	2300      	movs	r3, #0
 8009276:	7413      	strb	r3, [r2, #16]
	cmd.modeInit_type = DUTY_MODE_INIT_QVA;
 8009278:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800927c:	2300      	movs	r3, #0
 800927e:	7453      	strb	r3, [r2, #17]
	double v_current;
	Trajectory_LSPB_TypeDef *lspb;
	if (speed < SHIFT_SPEED_MIN || speed > SHIFT_SPPED_MAX) {
 8009280:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	2b00      	cmp	r3, #0
 8009288:	dd04      	ble.n	8009294 <scaraKeyInit+0x4c>
 800928a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	2b07      	cmp	r3, #7
 8009292:	dd02      	ble.n	800929a <scaraKeyInit+0x52>
		return SCARA_STATUS_ERROR_PARA;
 8009294:	2306      	movs	r3, #6
 8009296:	f001 b832 	b.w	800a2fe <scaraKeyInit+0x10b6>
	}
	switch(key) {
 800929a:	f107 0347 	add.w	r3, r7, #71	; 0x47
 800929e:	781b      	ldrb	r3, [r3, #0]
 80092a0:	2b0f      	cmp	r3, #15
 80092a2:	f200 87d3 	bhi.w	800a24c <scaraKeyInit+0x1004>
 80092a6:	a201      	add	r2, pc, #4	; (adr r2, 80092ac <scaraKeyInit+0x64>)
 80092a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ac:	080092ed 	.word	0x080092ed
 80092b0:	080093d3 	.word	0x080093d3
 80092b4:	080094c9 	.word	0x080094c9
 80092b8:	080095af 	.word	0x080095af
 80092bc:	080096c9 	.word	0x080096c9
 80092c0:	080097af 	.word	0x080097af
 80092c4:	080098a5 	.word	0x080098a5
 80092c8:	080099ed 	.word	0x080099ed
 80092cc:	08009b01 	.word	0x08009b01
 80092d0:	08009bdd 	.word	0x08009bdd
 80092d4:	08009cfd 	.word	0x08009cfd
 80092d8:	08009dd9 	.word	0x08009dd9
 80092dc:	08009ec5 	.word	0x08009ec5
 80092e0:	08009f81 	.word	0x08009f81
 80092e4:	0800a085 	.word	0x0800a085
 80092e8:	0800a161 	.word	0x0800a161
	case SCARA_KEY_X_INC:
	{
		s = SHIFT_3D*speed;
 80092ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	ee07 3a90 	vmov	s15, r3
 80092f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80092fa:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80092fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009302:	ee17 0a90 	vmov	r0, s15
 8009306:	f7f7 f91f 	bl	8000548 <__aeabi_f2d>
 800930a:	4603      	mov	r3, r0
 800930c:	460c      	mov	r4, r1
 800930e:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 8009312:	a3e5      	add	r3, pc, #916	; (adr r3, 80096a8 <scaraKeyInit+0x460>)
 8009314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009318:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 800931c:	f7f7 fa96 	bl	800084c <__aeabi_ddiv>
 8009320:	4603      	mov	r3, r0
 8009322:	460c      	mov	r4, r1
 8009324:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 8009328:	a3e1      	add	r3, pc, #900	; (adr r3, 80096b0 <scaraKeyInit+0x468>)
 800932a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800932e:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009332:	f7f7 fa8b 	bl	800084c <__aeabi_ddiv>
 8009336:	4603      	mov	r3, r0
 8009338:	460c      	mov	r4, r1
 800933a:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_3D);
 800933e:	a3de      	add	r3, pc, #888	; (adr r3, 80096b8 <scaraKeyInit+0x470>)
 8009340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009344:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009348:	f7f7 fa80 	bl	800084c <__aeabi_ddiv>
 800934c:	4603      	mov	r3, r0
 800934e:	460c      	mov	r4, r1
 8009350:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009354:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_3D);
 8009358:	a3d7      	add	r3, pc, #860	; (adr r3, 80096b8 <scaraKeyInit+0x470>)
 800935a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800935e:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 8009362:	f7f7 fa73 	bl	800084c <__aeabi_ddiv>
 8009366:	4603      	mov	r3, r0
 8009368:	460c      	mov	r4, r1
 800936a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800936e:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_TASK;
 8009372:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009376:	2200      	movs	r2, #0
 8009378:	735a      	strb	r2, [r3, #13]
		cmd.path_type = DUTY_PATH_LINE;
 800937a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800937e:	2200      	movs	r2, #0
 8009380:	739a      	strb	r2, [r3, #14]
		cmd.target_point.x 		= s;
 8009382:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009386:	e9d7 3482 	ldrd	r3, r4, [r7, #520]	; 0x208
 800938a:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		cmd.target_point.y 		= 0;
 800938e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009392:	f04f 0300 	mov.w	r3, #0
 8009396:	f04f 0400 	mov.w	r4, #0
 800939a:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		cmd.target_point.z 		= 0;
 800939e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80093a2:	f04f 0300 	mov.w	r3, #0
 80093a6:	f04f 0400 	mov.w	r4, #0
 80093aa:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
		cmd.target_point.roll 	= 0;
 80093ae:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80093b2:	f04f 0300 	mov.w	r3, #0
 80093b6:	f04f 0400 	mov.w	r4, #0
 80093ba:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		v_current = positionCurrent.v_3d;
 80093be:	4bc0      	ldr	r3, [pc, #768]	; (80096c0 <scaraKeyInit+0x478>)
 80093c0:	e9d3 342a 	ldrd	r3, r4, [r3, #168]	; 0xa8
 80093c4:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.task.trajectory_3d.lspb);
 80093c8:	4bbe      	ldr	r3, [pc, #760]	; (80096c4 <scaraKeyInit+0x47c>)
 80093ca:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
	break;
 80093ce:	f000 bf3d 	b.w	800a24c <scaraKeyInit+0x1004>
	case SCARA_KEY_X_DEC:
	{
		s = SHIFT_3D*speed;
 80093d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	ee07 3a90 	vmov	s15, r3
 80093dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80093e0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80093e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80093e8:	ee17 0a90 	vmov	r0, s15
 80093ec:	f7f7 f8ac 	bl	8000548 <__aeabi_f2d>
 80093f0:	4603      	mov	r3, r0
 80093f2:	460c      	mov	r4, r1
 80093f4:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 80093f8:	a3ab      	add	r3, pc, #684	; (adr r3, 80096a8 <scaraKeyInit+0x460>)
 80093fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093fe:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009402:	f7f7 fa23 	bl	800084c <__aeabi_ddiv>
 8009406:	4603      	mov	r3, r0
 8009408:	460c      	mov	r4, r1
 800940a:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 800940e:	a3a8      	add	r3, pc, #672	; (adr r3, 80096b0 <scaraKeyInit+0x468>)
 8009410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009414:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009418:	f7f7 fa18 	bl	800084c <__aeabi_ddiv>
 800941c:	4603      	mov	r3, r0
 800941e:	460c      	mov	r4, r1
 8009420:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_3D);
 8009424:	a3a4      	add	r3, pc, #656	; (adr r3, 80096b8 <scaraKeyInit+0x470>)
 8009426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800942a:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 800942e:	f7f7 fa0d 	bl	800084c <__aeabi_ddiv>
 8009432:	4603      	mov	r3, r0
 8009434:	460c      	mov	r4, r1
 8009436:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800943a:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_3D);
 800943e:	a39e      	add	r3, pc, #632	; (adr r3, 80096b8 <scaraKeyInit+0x470>)
 8009440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009444:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 8009448:	f7f7 fa00 	bl	800084c <__aeabi_ddiv>
 800944c:	4603      	mov	r3, r0
 800944e:	460c      	mov	r4, r1
 8009450:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009454:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_TASK;
 8009458:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800945c:	2200      	movs	r2, #0
 800945e:	735a      	strb	r2, [r3, #13]
		cmd.path_type = DUTY_PATH_LINE;
 8009460:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009464:	2200      	movs	r2, #0
 8009466:	739a      	strb	r2, [r3, #14]
		cmd.target_point.x 		= -s;
 8009468:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800946c:	633b      	str	r3, [r7, #48]	; 0x30
 800946e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8009472:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009476:	637b      	str	r3, [r7, #52]	; 0x34
 8009478:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800947c:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8009480:	ed83 7b1c 	vstr	d7, [r3, #112]	; 0x70
		cmd.target_point.y 		= 0;
 8009484:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009488:	f04f 0300 	mov.w	r3, #0
 800948c:	f04f 0400 	mov.w	r4, #0
 8009490:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		cmd.target_point.z 		= 0;
 8009494:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009498:	f04f 0300 	mov.w	r3, #0
 800949c:	f04f 0400 	mov.w	r4, #0
 80094a0:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
		cmd.target_point.roll 	= 0;
 80094a4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80094a8:	f04f 0300 	mov.w	r3, #0
 80094ac:	f04f 0400 	mov.w	r4, #0
 80094b0:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		v_current = positionCurrent.v_3d;
 80094b4:	4b82      	ldr	r3, [pc, #520]	; (80096c0 <scaraKeyInit+0x478>)
 80094b6:	e9d3 342a 	ldrd	r3, r4, [r3, #168]	; 0xa8
 80094ba:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.task.trajectory_3d.lspb);
 80094be:	4b81      	ldr	r3, [pc, #516]	; (80096c4 <scaraKeyInit+0x47c>)
 80094c0:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
	break;
 80094c4:	f000 bec2 	b.w	800a24c <scaraKeyInit+0x1004>
	case SCARA_KEY_Y_INC:
	{
		s = SHIFT_3D*speed;
 80094c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	ee07 3a90 	vmov	s15, r3
 80094d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80094d6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80094da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80094de:	ee17 0a90 	vmov	r0, s15
 80094e2:	f7f7 f831 	bl	8000548 <__aeabi_f2d>
 80094e6:	4603      	mov	r3, r0
 80094e8:	460c      	mov	r4, r1
 80094ea:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 80094ee:	a36e      	add	r3, pc, #440	; (adr r3, 80096a8 <scaraKeyInit+0x460>)
 80094f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f4:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 80094f8:	f7f7 f9a8 	bl	800084c <__aeabi_ddiv>
 80094fc:	4603      	mov	r3, r0
 80094fe:	460c      	mov	r4, r1
 8009500:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 8009504:	a36a      	add	r3, pc, #424	; (adr r3, 80096b0 <scaraKeyInit+0x468>)
 8009506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800950a:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 800950e:	f7f7 f99d 	bl	800084c <__aeabi_ddiv>
 8009512:	4603      	mov	r3, r0
 8009514:	460c      	mov	r4, r1
 8009516:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_3D);
 800951a:	a367      	add	r3, pc, #412	; (adr r3, 80096b8 <scaraKeyInit+0x470>)
 800951c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009520:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009524:	f7f7 f992 	bl	800084c <__aeabi_ddiv>
 8009528:	4603      	mov	r3, r0
 800952a:	460c      	mov	r4, r1
 800952c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009530:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_3D);
 8009534:	a360      	add	r3, pc, #384	; (adr r3, 80096b8 <scaraKeyInit+0x470>)
 8009536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953a:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 800953e:	f7f7 f985 	bl	800084c <__aeabi_ddiv>
 8009542:	4603      	mov	r3, r0
 8009544:	460c      	mov	r4, r1
 8009546:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800954a:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_TASK;
 800954e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009552:	2200      	movs	r2, #0
 8009554:	735a      	strb	r2, [r3, #13]
		cmd.path_type = DUTY_PATH_LINE;
 8009556:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800955a:	2200      	movs	r2, #0
 800955c:	739a      	strb	r2, [r3, #14]
		cmd.target_point.x 		= 0;
 800955e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009562:	f04f 0300 	mov.w	r3, #0
 8009566:	f04f 0400 	mov.w	r4, #0
 800956a:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		cmd.target_point.y 		= s;
 800956e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009572:	e9d7 3482 	ldrd	r3, r4, [r7, #520]	; 0x208
 8009576:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		cmd.target_point.z 		= 0;
 800957a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800957e:	f04f 0300 	mov.w	r3, #0
 8009582:	f04f 0400 	mov.w	r4, #0
 8009586:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
		cmd.target_point.roll	= 0;
 800958a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800958e:	f04f 0300 	mov.w	r3, #0
 8009592:	f04f 0400 	mov.w	r4, #0
 8009596:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		v_current = positionCurrent.v_3d;
 800959a:	4b49      	ldr	r3, [pc, #292]	; (80096c0 <scaraKeyInit+0x478>)
 800959c:	e9d3 342a 	ldrd	r3, r4, [r3, #168]	; 0xa8
 80095a0:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.task.trajectory_3d.lspb);
 80095a4:	4b47      	ldr	r3, [pc, #284]	; (80096c4 <scaraKeyInit+0x47c>)
 80095a6:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 80095aa:	f000 be4f 	b.w	800a24c <scaraKeyInit+0x1004>
	case SCARA_KEY_Y_DEC:
	{
		s = SHIFT_3D*speed;
 80095ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	ee07 3a90 	vmov	s15, r3
 80095b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80095bc:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80095c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80095c4:	ee17 0a90 	vmov	r0, s15
 80095c8:	f7f6 ffbe 	bl	8000548 <__aeabi_f2d>
 80095cc:	4603      	mov	r3, r0
 80095ce:	460c      	mov	r4, r1
 80095d0:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 80095d4:	a334      	add	r3, pc, #208	; (adr r3, 80096a8 <scaraKeyInit+0x460>)
 80095d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095da:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 80095de:	f7f7 f935 	bl	800084c <__aeabi_ddiv>
 80095e2:	4603      	mov	r3, r0
 80095e4:	460c      	mov	r4, r1
 80095e6:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 80095ea:	a331      	add	r3, pc, #196	; (adr r3, 80096b0 <scaraKeyInit+0x468>)
 80095ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f0:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 80095f4:	f7f7 f92a 	bl	800084c <__aeabi_ddiv>
 80095f8:	4603      	mov	r3, r0
 80095fa:	460c      	mov	r4, r1
 80095fc:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_3D);
 8009600:	a32d      	add	r3, pc, #180	; (adr r3, 80096b8 <scaraKeyInit+0x470>)
 8009602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009606:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 800960a:	f7f7 f91f 	bl	800084c <__aeabi_ddiv>
 800960e:	4603      	mov	r3, r0
 8009610:	460c      	mov	r4, r1
 8009612:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009616:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_3D);
 800961a:	a327      	add	r3, pc, #156	; (adr r3, 80096b8 <scaraKeyInit+0x470>)
 800961c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009620:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 8009624:	f7f7 f912 	bl	800084c <__aeabi_ddiv>
 8009628:	4603      	mov	r3, r0
 800962a:	460c      	mov	r4, r1
 800962c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009630:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_TASK;
 8009634:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009638:	2200      	movs	r2, #0
 800963a:	735a      	strb	r2, [r3, #13]
		cmd.path_type = DUTY_PATH_LINE;
 800963c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009640:	2200      	movs	r2, #0
 8009642:	739a      	strb	r2, [r3, #14]
		cmd.target_point.x 		= 0;
 8009644:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009648:	f04f 0300 	mov.w	r3, #0
 800964c:	f04f 0400 	mov.w	r4, #0
 8009650:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		cmd.target_point.y 		= -s;
 8009654:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8009658:	62bb      	str	r3, [r7, #40]	; 0x28
 800965a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800965e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009662:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009664:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009668:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800966c:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
		cmd.target_point.z 		= 0;
 8009670:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009674:	f04f 0300 	mov.w	r3, #0
 8009678:	f04f 0400 	mov.w	r4, #0
 800967c:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
		cmd.target_point.roll 	= 0;
 8009680:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009684:	f04f 0300 	mov.w	r3, #0
 8009688:	f04f 0400 	mov.w	r4, #0
 800968c:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		v_current = positionCurrent.v_3d;
 8009690:	4b0b      	ldr	r3, [pc, #44]	; (80096c0 <scaraKeyInit+0x478>)
 8009692:	e9d3 342a 	ldrd	r3, r4, [r3, #168]	; 0xa8
 8009696:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.task.trajectory_3d.lspb);
 800969a:	4b0a      	ldr	r3, [pc, #40]	; (80096c4 <scaraKeyInit+0x47c>)
 800969c:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 80096a0:	f000 bdd4 	b.w	800a24c <scaraKeyInit+0x1004>
 80096a4:	f3af 8000 	nop.w
 80096a8:	60000000 	.word	0x60000000
 80096ac:	3fedf3b6 	.word	0x3fedf3b6
 80096b0:	40000000 	.word	0x40000000
 80096b4:	3fd0e560 	.word	0x3fd0e560
 80096b8:	00000000 	.word	0x00000000
 80096bc:	405c2000 	.word	0x405c2000
 80096c0:	20005e38 	.word	0x20005e38
 80096c4:	20005490 	.word	0x20005490
	case SCARA_KEY_Z_INC:
	{
		s = SHIFT_3D*speed;
 80096c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	ee07 3a90 	vmov	s15, r3
 80096d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80096d6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80096da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80096de:	ee17 0a90 	vmov	r0, s15
 80096e2:	f7f6 ff31 	bl	8000548 <__aeabi_f2d>
 80096e6:	4603      	mov	r3, r0
 80096e8:	460c      	mov	r4, r1
 80096ea:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 80096ee:	a3b0      	add	r3, pc, #704	; (adr r3, 80099b0 <scaraKeyInit+0x768>)
 80096f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f4:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 80096f8:	f7f7 f8a8 	bl	800084c <__aeabi_ddiv>
 80096fc:	4603      	mov	r3, r0
 80096fe:	460c      	mov	r4, r1
 8009700:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 8009704:	a3ac      	add	r3, pc, #688	; (adr r3, 80099b8 <scaraKeyInit+0x770>)
 8009706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800970a:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 800970e:	f7f7 f89d 	bl	800084c <__aeabi_ddiv>
 8009712:	4603      	mov	r3, r0
 8009714:	460c      	mov	r4, r1
 8009716:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_3D);
 800971a:	a3a9      	add	r3, pc, #676	; (adr r3, 80099c0 <scaraKeyInit+0x778>)
 800971c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009720:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009724:	f7f7 f892 	bl	800084c <__aeabi_ddiv>
 8009728:	4603      	mov	r3, r0
 800972a:	460c      	mov	r4, r1
 800972c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009730:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_3D);
 8009734:	a3a2      	add	r3, pc, #648	; (adr r3, 80099c0 <scaraKeyInit+0x778>)
 8009736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800973a:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 800973e:	f7f7 f885 	bl	800084c <__aeabi_ddiv>
 8009742:	4603      	mov	r3, r0
 8009744:	460c      	mov	r4, r1
 8009746:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800974a:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_TASK;
 800974e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009752:	2200      	movs	r2, #0
 8009754:	735a      	strb	r2, [r3, #13]
		cmd.path_type = DUTY_PATH_LINE;
 8009756:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800975a:	2200      	movs	r2, #0
 800975c:	739a      	strb	r2, [r3, #14]
		cmd.target_point.x 		= 0;
 800975e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009762:	f04f 0300 	mov.w	r3, #0
 8009766:	f04f 0400 	mov.w	r4, #0
 800976a:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		cmd.target_point.y 		= 0;
 800976e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009772:	f04f 0300 	mov.w	r3, #0
 8009776:	f04f 0400 	mov.w	r4, #0
 800977a:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		cmd.target_point.z 		= s;
 800977e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009782:	e9d7 3482 	ldrd	r3, r4, [r7, #520]	; 0x208
 8009786:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
		cmd.target_point.roll 	= 0;
 800978a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800978e:	f04f 0300 	mov.w	r3, #0
 8009792:	f04f 0400 	mov.w	r4, #0
 8009796:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		v_current = positionCurrent.v_3d;
 800979a:	4b8f      	ldr	r3, [pc, #572]	; (80099d8 <scaraKeyInit+0x790>)
 800979c:	e9d3 342a 	ldrd	r3, r4, [r3, #168]	; 0xa8
 80097a0:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.task.trajectory_3d.lspb);
 80097a4:	4b8d      	ldr	r3, [pc, #564]	; (80099dc <scaraKeyInit+0x794>)
 80097a6:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 80097aa:	f000 bd4f 	b.w	800a24c <scaraKeyInit+0x1004>
	case SCARA_KEY_Z_DEC:
	{
		s = SHIFT_3D*speed;
 80097ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	ee07 3a90 	vmov	s15, r3
 80097b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80097bc:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80097c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80097c4:	ee17 0a90 	vmov	r0, s15
 80097c8:	f7f6 febe 	bl	8000548 <__aeabi_f2d>
 80097cc:	4603      	mov	r3, r0
 80097ce:	460c      	mov	r4, r1
 80097d0:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 80097d4:	a376      	add	r3, pc, #472	; (adr r3, 80099b0 <scaraKeyInit+0x768>)
 80097d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097da:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 80097de:	f7f7 f835 	bl	800084c <__aeabi_ddiv>
 80097e2:	4603      	mov	r3, r0
 80097e4:	460c      	mov	r4, r1
 80097e6:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 80097ea:	a373      	add	r3, pc, #460	; (adr r3, 80099b8 <scaraKeyInit+0x770>)
 80097ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f0:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 80097f4:	f7f7 f82a 	bl	800084c <__aeabi_ddiv>
 80097f8:	4603      	mov	r3, r0
 80097fa:	460c      	mov	r4, r1
 80097fc:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_3D);
 8009800:	a36f      	add	r3, pc, #444	; (adr r3, 80099c0 <scaraKeyInit+0x778>)
 8009802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009806:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 800980a:	f7f7 f81f 	bl	800084c <__aeabi_ddiv>
 800980e:	4603      	mov	r3, r0
 8009810:	460c      	mov	r4, r1
 8009812:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009816:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_3D);
 800981a:	a369      	add	r3, pc, #420	; (adr r3, 80099c0 <scaraKeyInit+0x778>)
 800981c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009820:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 8009824:	f7f7 f812 	bl	800084c <__aeabi_ddiv>
 8009828:	4603      	mov	r3, r0
 800982a:	460c      	mov	r4, r1
 800982c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009830:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_TASK;
 8009834:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009838:	2200      	movs	r2, #0
 800983a:	735a      	strb	r2, [r3, #13]
		cmd.path_type = DUTY_PATH_LINE;
 800983c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009840:	2200      	movs	r2, #0
 8009842:	739a      	strb	r2, [r3, #14]
		cmd.target_point.x 		= 0;
 8009844:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009848:	f04f 0300 	mov.w	r3, #0
 800984c:	f04f 0400 	mov.w	r4, #0
 8009850:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		cmd.target_point.y 		= 0;
 8009854:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009858:	f04f 0300 	mov.w	r3, #0
 800985c:	f04f 0400 	mov.w	r4, #0
 8009860:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		cmd.target_point.z 		= -s;
 8009864:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8009868:	623b      	str	r3, [r7, #32]
 800986a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800986e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009872:	627b      	str	r3, [r7, #36]	; 0x24
 8009874:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009878:	ed97 7b08 	vldr	d7, [r7, #32]
 800987c:	ed83 7b20 	vstr	d7, [r3, #128]	; 0x80
		cmd.target_point.roll 	= 0;
 8009880:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009884:	f04f 0300 	mov.w	r3, #0
 8009888:	f04f 0400 	mov.w	r4, #0
 800988c:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		v_current = positionCurrent.v_3d;
 8009890:	4b51      	ldr	r3, [pc, #324]	; (80099d8 <scaraKeyInit+0x790>)
 8009892:	e9d3 342a 	ldrd	r3, r4, [r3, #168]	; 0xa8
 8009896:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.task.trajectory_3d.lspb);
 800989a:	4b50      	ldr	r3, [pc, #320]	; (80099dc <scaraKeyInit+0x794>)
 800989c:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 80098a0:	f000 bcd4 	b.w	800a24c <scaraKeyInit+0x1004>
	case SCARA_KEY_ROLL_INC:
	{
		s = SHIFT_ROLL*speed;
 80098a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	ee07 3a90 	vmov	s15, r3
 80098ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80098b2:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80099e8 <scaraKeyInit+0x7a0>
 80098b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80098ba:	ee17 0a90 	vmov	r0, s15
 80098be:	f7f6 fe43 	bl	8000548 <__aeabi_f2d>
 80098c2:	4603      	mov	r3, r0
 80098c4:	460c      	mov	r4, r1
 80098c6:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 80098ca:	a339      	add	r3, pc, #228	; (adr r3, 80099b0 <scaraKeyInit+0x768>)
 80098cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d0:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 80098d4:	f7f6 ffba 	bl	800084c <__aeabi_ddiv>
 80098d8:	4603      	mov	r3, r0
 80098da:	460c      	mov	r4, r1
 80098dc:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 80098e0:	a335      	add	r3, pc, #212	; (adr r3, 80099b8 <scaraKeyInit+0x770>)
 80098e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e6:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 80098ea:	f7f6 ffaf 	bl	800084c <__aeabi_ddiv>
 80098ee:	4603      	mov	r3, r0
 80098f0:	460c      	mov	r4, r1
 80098f2:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_ROLL);
 80098f6:	a334      	add	r3, pc, #208	; (adr r3, 80099c8 <scaraKeyInit+0x780>)
 80098f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098fc:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009900:	f7f6 ffa4 	bl	800084c <__aeabi_ddiv>
 8009904:	4603      	mov	r3, r0
 8009906:	460c      	mov	r4, r1
 8009908:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800990c:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_ROLL);
 8009910:	a32d      	add	r3, pc, #180	; (adr r3, 80099c8 <scaraKeyInit+0x780>)
 8009912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009916:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 800991a:	f7f6 ff97 	bl	800084c <__aeabi_ddiv>
 800991e:	4603      	mov	r3, r0
 8009920:	460c      	mov	r4, r1
 8009922:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009926:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_TASK;
 800992a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800992e:	2200      	movs	r2, #0
 8009930:	735a      	strb	r2, [r3, #13]
		cmd.path_type = DUTY_PATH_LINE;
 8009932:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009936:	2200      	movs	r2, #0
 8009938:	739a      	strb	r2, [r3, #14]
		cmd.target_point.x 		= 0;
 800993a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800993e:	f04f 0300 	mov.w	r3, #0
 8009942:	f04f 0400 	mov.w	r4, #0
 8009946:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		cmd.target_point.y 		= 0;
 800994a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800994e:	f04f 0300 	mov.w	r3, #0
 8009952:	f04f 0400 	mov.w	r4, #0
 8009956:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		cmd.target_point.z 		= 0;
 800995a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800995e:	f04f 0300 	mov.w	r3, #0
 8009962:	f04f 0400 	mov.w	r4, #0
 8009966:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
		cmd.target_point.roll 	= s*180/PI;
 800996a:	f04f 0200 	mov.w	r2, #0
 800996e:	4b1c      	ldr	r3, [pc, #112]	; (80099e0 <scaraKeyInit+0x798>)
 8009970:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009974:	f7f6 fe40 	bl	80005f8 <__aeabi_dmul>
 8009978:	4603      	mov	r3, r0
 800997a:	460c      	mov	r4, r1
 800997c:	4618      	mov	r0, r3
 800997e:	4621      	mov	r1, r4
 8009980:	a313      	add	r3, pc, #76	; (adr r3, 80099d0 <scaraKeyInit+0x788>)
 8009982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009986:	f7f6 ff61 	bl	800084c <__aeabi_ddiv>
 800998a:	4603      	mov	r3, r0
 800998c:	460c      	mov	r4, r1
 800998e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009992:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		v_current = positionCurrent.v_roll;
 8009996:	4b10      	ldr	r3, [pc, #64]	; (80099d8 <scaraKeyInit+0x790>)
 8009998:	e9d3 342c 	ldrd	r3, r4, [r3, #176]	; 0xb0
 800999c:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.task.trajectory_roll.lspb);
 80099a0:	4b10      	ldr	r3, [pc, #64]	; (80099e4 <scaraKeyInit+0x79c>)
 80099a2:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 80099a6:	f000 bc51 	b.w	800a24c <scaraKeyInit+0x1004>
 80099aa:	bf00      	nop
 80099ac:	f3af 8000 	nop.w
 80099b0:	60000000 	.word	0x60000000
 80099b4:	3fedf3b6 	.word	0x3fedf3b6
 80099b8:	40000000 	.word	0x40000000
 80099bc:	3fd0e560 	.word	0x3fd0e560
 80099c0:	00000000 	.word	0x00000000
 80099c4:	405c2000 	.word	0x405c2000
 80099c8:	14000000 	.word	0x14000000
 80099cc:	4000f6f0 	.word	0x4000f6f0
 80099d0:	60000000 	.word	0x60000000
 80099d4:	400921fb 	.word	0x400921fb
 80099d8:	20005e38 	.word	0x20005e38
 80099dc:	20005490 	.word	0x20005490
 80099e0:	40668000 	.word	0x40668000
 80099e4:	200055e8 	.word	0x200055e8
 80099e8:	3d567750 	.word	0x3d567750
	case SCARA_KEY_ROLL_DEC:
	{
		s = SHIFT_ROLL*speed;
 80099ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	ee07 3a90 	vmov	s15, r3
 80099f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80099fa:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 80099e8 <scaraKeyInit+0x7a0>
 80099fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009a02:	ee17 0a90 	vmov	r0, s15
 8009a06:	f7f6 fd9f 	bl	8000548 <__aeabi_f2d>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	460c      	mov	r4, r1
 8009a0e:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 8009a12:	a3af      	add	r3, pc, #700	; (adr r3, 8009cd0 <scaraKeyInit+0xa88>)
 8009a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a18:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009a1c:	f7f6 ff16 	bl	800084c <__aeabi_ddiv>
 8009a20:	4603      	mov	r3, r0
 8009a22:	460c      	mov	r4, r1
 8009a24:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 8009a28:	a3ab      	add	r3, pc, #684	; (adr r3, 8009cd8 <scaraKeyInit+0xa90>)
 8009a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2e:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009a32:	f7f6 ff0b 	bl	800084c <__aeabi_ddiv>
 8009a36:	4603      	mov	r3, r0
 8009a38:	460c      	mov	r4, r1
 8009a3a:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_ROLL);
 8009a3e:	a3a8      	add	r3, pc, #672	; (adr r3, 8009ce0 <scaraKeyInit+0xa98>)
 8009a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a44:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009a48:	f7f6 ff00 	bl	800084c <__aeabi_ddiv>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	460c      	mov	r4, r1
 8009a50:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009a54:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_ROLL);
 8009a58:	a3a1      	add	r3, pc, #644	; (adr r3, 8009ce0 <scaraKeyInit+0xa98>)
 8009a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a5e:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 8009a62:	f7f6 fef3 	bl	800084c <__aeabi_ddiv>
 8009a66:	4603      	mov	r3, r0
 8009a68:	460c      	mov	r4, r1
 8009a6a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009a6e:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_TASK;
 8009a72:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009a76:	2200      	movs	r2, #0
 8009a78:	735a      	strb	r2, [r3, #13]
		cmd.path_type = DUTY_PATH_LINE;
 8009a7a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009a7e:	2200      	movs	r2, #0
 8009a80:	739a      	strb	r2, [r3, #14]
		cmd.target_point.x 		= 0;
 8009a82:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009a86:	f04f 0300 	mov.w	r3, #0
 8009a8a:	f04f 0400 	mov.w	r4, #0
 8009a8e:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		cmd.target_point.y 		= 0;
 8009a92:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009a96:	f04f 0300 	mov.w	r3, #0
 8009a9a:	f04f 0400 	mov.w	r4, #0
 8009a9e:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		cmd.target_point.z 		= 0;
 8009aa2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009aa6:	f04f 0300 	mov.w	r3, #0
 8009aaa:	f04f 0400 	mov.w	r4, #0
 8009aae:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
		cmd.target_point.roll 	= -s*180/PI;
 8009ab2:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8009ab6:	61bb      	str	r3, [r7, #24]
 8009ab8:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8009abc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009ac0:	61fb      	str	r3, [r7, #28]
 8009ac2:	f04f 0200 	mov.w	r2, #0
 8009ac6:	4b88      	ldr	r3, [pc, #544]	; (8009ce8 <scaraKeyInit+0xaa0>)
 8009ac8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009acc:	f7f6 fd94 	bl	80005f8 <__aeabi_dmul>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	460c      	mov	r4, r1
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	4621      	mov	r1, r4
 8009ad8:	a37b      	add	r3, pc, #492	; (adr r3, 8009cc8 <scaraKeyInit+0xa80>)
 8009ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ade:	f7f6 feb5 	bl	800084c <__aeabi_ddiv>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	460c      	mov	r4, r1
 8009ae6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009aea:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		v_current = positionCurrent.v_roll;
 8009aee:	4b7f      	ldr	r3, [pc, #508]	; (8009cec <scaraKeyInit+0xaa4>)
 8009af0:	e9d3 342c 	ldrd	r3, r4, [r3, #176]	; 0xb0
 8009af4:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.task.trajectory_roll.lspb);
 8009af8:	4b7d      	ldr	r3, [pc, #500]	; (8009cf0 <scaraKeyInit+0xaa8>)
 8009afa:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 8009afe:	e3a5      	b.n	800a24c <scaraKeyInit+0x1004>
	case SCARA_KEY_VAR0_INC:
	{
		s = SHIFT_VAR0*speed;
 8009b00:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	ee07 3a90 	vmov	s15, r3
 8009b0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b0e:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8009cf8 <scaraKeyInit+0xab0>
 8009b12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009b16:	ee17 0a90 	vmov	r0, s15
 8009b1a:	f7f6 fd15 	bl	8000548 <__aeabi_f2d>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	460c      	mov	r4, r1
 8009b22:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 8009b26:	a36a      	add	r3, pc, #424	; (adr r3, 8009cd0 <scaraKeyInit+0xa88>)
 8009b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b2c:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009b30:	f7f6 fe8c 	bl	800084c <__aeabi_ddiv>
 8009b34:	4603      	mov	r3, r0
 8009b36:	460c      	mov	r4, r1
 8009b38:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 8009b3c:	a366      	add	r3, pc, #408	; (adr r3, 8009cd8 <scaraKeyInit+0xa90>)
 8009b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b42:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009b46:	f7f6 fe81 	bl	800084c <__aeabi_ddiv>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	460c      	mov	r4, r1
 8009b4e:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_J0);
 8009b52:	a363      	add	r3, pc, #396	; (adr r3, 8009ce0 <scaraKeyInit+0xa98>)
 8009b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b58:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009b5c:	f7f6 fe76 	bl	800084c <__aeabi_ddiv>
 8009b60:	4603      	mov	r3, r0
 8009b62:	460c      	mov	r4, r1
 8009b64:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009b68:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_J0);
 8009b6c:	a35c      	add	r3, pc, #368	; (adr r3, 8009ce0 <scaraKeyInit+0xa98>)
 8009b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b72:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 8009b76:	f7f6 fe69 	bl	800084c <__aeabi_ddiv>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	460c      	mov	r4, r1
 8009b7e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009b82:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_JOINT;
 8009b86:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	735a      	strb	r2, [r3, #13]
		cmd.joint_type = DUTY_JOINT_SINGLE;
 8009b8e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009b92:	2200      	movs	r2, #0
 8009b94:	73da      	strb	r2, [r3, #15]
		cmd.sub_para_int 	= 0;
 8009b96:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	615a      	str	r2, [r3, #20]
		cmd.sub_para_double = s*180/PI;
 8009b9e:	f04f 0200 	mov.w	r2, #0
 8009ba2:	4b51      	ldr	r3, [pc, #324]	; (8009ce8 <scaraKeyInit+0xaa0>)
 8009ba4:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009ba8:	f7f6 fd26 	bl	80005f8 <__aeabi_dmul>
 8009bac:	4603      	mov	r3, r0
 8009bae:	460c      	mov	r4, r1
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	4621      	mov	r1, r4
 8009bb4:	a344      	add	r3, pc, #272	; (adr r3, 8009cc8 <scaraKeyInit+0xa80>)
 8009bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bba:	f7f6 fe47 	bl	800084c <__aeabi_ddiv>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	460c      	mov	r4, r1
 8009bc2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009bc6:	e9c2 3406 	strd	r3, r4, [r2, #24]
		v_current = positionCurrent.v_theta1;
 8009bca:	4b48      	ldr	r3, [pc, #288]	; (8009cec <scaraKeyInit+0xaa4>)
 8009bcc:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 8009bd0:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.joint.trajectory[0].lspb);
 8009bd4:	4b47      	ldr	r3, [pc, #284]	; (8009cf4 <scaraKeyInit+0xaac>)
 8009bd6:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 8009bda:	e337      	b.n	800a24c <scaraKeyInit+0x1004>
	case SCARA_KEY_VAR0_DEC:
	{
		s = SHIFT_VAR0*speed;
 8009bdc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	ee07 3a90 	vmov	s15, r3
 8009be6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009bea:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8009cf8 <scaraKeyInit+0xab0>
 8009bee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009bf2:	ee17 0a90 	vmov	r0, s15
 8009bf6:	f7f6 fca7 	bl	8000548 <__aeabi_f2d>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	460c      	mov	r4, r1
 8009bfe:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 8009c02:	a333      	add	r3, pc, #204	; (adr r3, 8009cd0 <scaraKeyInit+0xa88>)
 8009c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c08:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009c0c:	f7f6 fe1e 	bl	800084c <__aeabi_ddiv>
 8009c10:	4603      	mov	r3, r0
 8009c12:	460c      	mov	r4, r1
 8009c14:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 8009c18:	a32f      	add	r3, pc, #188	; (adr r3, 8009cd8 <scaraKeyInit+0xa90>)
 8009c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c1e:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009c22:	f7f6 fe13 	bl	800084c <__aeabi_ddiv>
 8009c26:	4603      	mov	r3, r0
 8009c28:	460c      	mov	r4, r1
 8009c2a:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_J0);
 8009c2e:	a32c      	add	r3, pc, #176	; (adr r3, 8009ce0 <scaraKeyInit+0xa98>)
 8009c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c34:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009c38:	f7f6 fe08 	bl	800084c <__aeabi_ddiv>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	460c      	mov	r4, r1
 8009c40:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009c44:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_J0);
 8009c48:	a325      	add	r3, pc, #148	; (adr r3, 8009ce0 <scaraKeyInit+0xa98>)
 8009c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c4e:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 8009c52:	f7f6 fdfb 	bl	800084c <__aeabi_ddiv>
 8009c56:	4603      	mov	r3, r0
 8009c58:	460c      	mov	r4, r1
 8009c5a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009c5e:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_JOINT;
 8009c62:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009c66:	2201      	movs	r2, #1
 8009c68:	735a      	strb	r2, [r3, #13]
		cmd.joint_type = DUTY_JOINT_SINGLE;
 8009c6a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009c6e:	2200      	movs	r2, #0
 8009c70:	73da      	strb	r2, [r3, #15]
		cmd.sub_para_int 	= 0;
 8009c72:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009c76:	2200      	movs	r2, #0
 8009c78:	615a      	str	r2, [r3, #20]
		cmd.sub_para_double = -s*180/PI;
 8009c7a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8009c7e:	613b      	str	r3, [r7, #16]
 8009c80:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8009c84:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009c88:	617b      	str	r3, [r7, #20]
 8009c8a:	f04f 0200 	mov.w	r2, #0
 8009c8e:	4b16      	ldr	r3, [pc, #88]	; (8009ce8 <scaraKeyInit+0xaa0>)
 8009c90:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009c94:	f7f6 fcb0 	bl	80005f8 <__aeabi_dmul>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	460c      	mov	r4, r1
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	4621      	mov	r1, r4
 8009ca0:	a309      	add	r3, pc, #36	; (adr r3, 8009cc8 <scaraKeyInit+0xa80>)
 8009ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca6:	f7f6 fdd1 	bl	800084c <__aeabi_ddiv>
 8009caa:	4603      	mov	r3, r0
 8009cac:	460c      	mov	r4, r1
 8009cae:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009cb2:	e9c2 3406 	strd	r3, r4, [r2, #24]
		v_current = positionCurrent.v_theta1;
 8009cb6:	4b0d      	ldr	r3, [pc, #52]	; (8009cec <scaraKeyInit+0xaa4>)
 8009cb8:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 8009cbc:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.joint.trajectory[0].lspb);
 8009cc0:	4b0c      	ldr	r3, [pc, #48]	; (8009cf4 <scaraKeyInit+0xaac>)
 8009cc2:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 8009cc6:	e2c1      	b.n	800a24c <scaraKeyInit+0x1004>
 8009cc8:	60000000 	.word	0x60000000
 8009ccc:	400921fb 	.word	0x400921fb
 8009cd0:	60000000 	.word	0x60000000
 8009cd4:	3fedf3b6 	.word	0x3fedf3b6
 8009cd8:	40000000 	.word	0x40000000
 8009cdc:	3fd0e560 	.word	0x3fd0e560
 8009ce0:	14000000 	.word	0x14000000
 8009ce4:	4000f6f0 	.word	0x4000f6f0
 8009ce8:	40668000 	.word	0x40668000
 8009cec:	20005e38 	.word	0x20005e38
 8009cf0:	200055e8 	.word	0x200055e8
 8009cf4:	20005748 	.word	0x20005748
 8009cf8:	3d567750 	.word	0x3d567750
	case SCARA_KEY_VAR1_INC:
	{
		s = SHIFT_VAR1*speed;
 8009cfc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	ee07 3a90 	vmov	s15, r3
 8009d06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d0a:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8009cf8 <scaraKeyInit+0xab0>
 8009d0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009d12:	ee17 0a90 	vmov	r0, s15
 8009d16:	f7f6 fc17 	bl	8000548 <__aeabi_f2d>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	460c      	mov	r4, r1
 8009d1e:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 8009d22:	a3cb      	add	r3, pc, #812	; (adr r3, 800a050 <scaraKeyInit+0xe08>)
 8009d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d28:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009d2c:	f7f6 fd8e 	bl	800084c <__aeabi_ddiv>
 8009d30:	4603      	mov	r3, r0
 8009d32:	460c      	mov	r4, r1
 8009d34:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 8009d38:	a3c7      	add	r3, pc, #796	; (adr r3, 800a058 <scaraKeyInit+0xe10>)
 8009d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d3e:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009d42:	f7f6 fd83 	bl	800084c <__aeabi_ddiv>
 8009d46:	4603      	mov	r3, r0
 8009d48:	460c      	mov	r4, r1
 8009d4a:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_J1);
 8009d4e:	a3c4      	add	r3, pc, #784	; (adr r3, 800a060 <scaraKeyInit+0xe18>)
 8009d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d54:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009d58:	f7f6 fd78 	bl	800084c <__aeabi_ddiv>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	460c      	mov	r4, r1
 8009d60:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009d64:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_J1);
 8009d68:	a3bd      	add	r3, pc, #756	; (adr r3, 800a060 <scaraKeyInit+0xe18>)
 8009d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d6e:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 8009d72:	f7f6 fd6b 	bl	800084c <__aeabi_ddiv>
 8009d76:	4603      	mov	r3, r0
 8009d78:	460c      	mov	r4, r1
 8009d7a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009d7e:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_JOINT;
 8009d82:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009d86:	2201      	movs	r2, #1
 8009d88:	735a      	strb	r2, [r3, #13]
		cmd.joint_type = DUTY_JOINT_SINGLE;
 8009d8a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009d8e:	2200      	movs	r2, #0
 8009d90:	73da      	strb	r2, [r3, #15]
		cmd.sub_para_int 	= 1;
 8009d92:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009d96:	2201      	movs	r2, #1
 8009d98:	615a      	str	r2, [r3, #20]
		cmd.sub_para_double = s*180/PI;
 8009d9a:	f04f 0200 	mov.w	r2, #0
 8009d9e:	4bb4      	ldr	r3, [pc, #720]	; (800a070 <scaraKeyInit+0xe28>)
 8009da0:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009da4:	f7f6 fc28 	bl	80005f8 <__aeabi_dmul>
 8009da8:	4603      	mov	r3, r0
 8009daa:	460c      	mov	r4, r1
 8009dac:	4618      	mov	r0, r3
 8009dae:	4621      	mov	r1, r4
 8009db0:	a3a5      	add	r3, pc, #660	; (adr r3, 800a048 <scaraKeyInit+0xe00>)
 8009db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db6:	f7f6 fd49 	bl	800084c <__aeabi_ddiv>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	460c      	mov	r4, r1
 8009dbe:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009dc2:	e9c2 3406 	strd	r3, r4, [r2, #24]
		v_current = positionCurrent.v_theta2;
 8009dc6:	4bab      	ldr	r3, [pc, #684]	; (800a074 <scaraKeyInit+0xe2c>)
 8009dc8:	e9d3 3424 	ldrd	r3, r4, [r3, #144]	; 0x90
 8009dcc:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.joint.trajectory[1].lspb);
 8009dd0:	4ba9      	ldr	r3, [pc, #676]	; (800a078 <scaraKeyInit+0xe30>)
 8009dd2:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 8009dd6:	e239      	b.n	800a24c <scaraKeyInit+0x1004>
	case SCARA_KEY_VAR1_DEC:
	{
		s = SHIFT_VAR1*speed;
 8009dd8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	ee07 3a90 	vmov	s15, r3
 8009de2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009de6:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 800a080 <scaraKeyInit+0xe38>
 8009dea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009dee:	ee17 0a90 	vmov	r0, s15
 8009df2:	f7f6 fba9 	bl	8000548 <__aeabi_f2d>
 8009df6:	4603      	mov	r3, r0
 8009df8:	460c      	mov	r4, r1
 8009dfa:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 8009dfe:	a394      	add	r3, pc, #592	; (adr r3, 800a050 <scaraKeyInit+0xe08>)
 8009e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e04:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009e08:	f7f6 fd20 	bl	800084c <__aeabi_ddiv>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	460c      	mov	r4, r1
 8009e10:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 8009e14:	a390      	add	r3, pc, #576	; (adr r3, 800a058 <scaraKeyInit+0xe10>)
 8009e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e1a:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009e1e:	f7f6 fd15 	bl	800084c <__aeabi_ddiv>
 8009e22:	4603      	mov	r3, r0
 8009e24:	460c      	mov	r4, r1
 8009e26:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_J1);
 8009e2a:	a38d      	add	r3, pc, #564	; (adr r3, 800a060 <scaraKeyInit+0xe18>)
 8009e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e30:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009e34:	f7f6 fd0a 	bl	800084c <__aeabi_ddiv>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	460c      	mov	r4, r1
 8009e3c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009e40:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_J1);
 8009e44:	a386      	add	r3, pc, #536	; (adr r3, 800a060 <scaraKeyInit+0xe18>)
 8009e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e4a:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 8009e4e:	f7f6 fcfd 	bl	800084c <__aeabi_ddiv>
 8009e52:	4603      	mov	r3, r0
 8009e54:	460c      	mov	r4, r1
 8009e56:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009e5a:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_JOINT;
 8009e5e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009e62:	2201      	movs	r2, #1
 8009e64:	735a      	strb	r2, [r3, #13]
		cmd.joint_type = DUTY_JOINT_SINGLE;
 8009e66:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	73da      	strb	r2, [r3, #15]
		cmd.sub_para_int 	= 1;
 8009e6e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009e72:	2201      	movs	r2, #1
 8009e74:	615a      	str	r2, [r3, #20]
		cmd.sub_para_double = -s*180/PI;
 8009e76:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8009e7a:	60bb      	str	r3, [r7, #8]
 8009e7c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8009e80:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009e84:	60fb      	str	r3, [r7, #12]
 8009e86:	f04f 0200 	mov.w	r2, #0
 8009e8a:	4b79      	ldr	r3, [pc, #484]	; (800a070 <scaraKeyInit+0xe28>)
 8009e8c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009e90:	f7f6 fbb2 	bl	80005f8 <__aeabi_dmul>
 8009e94:	4603      	mov	r3, r0
 8009e96:	460c      	mov	r4, r1
 8009e98:	4618      	mov	r0, r3
 8009e9a:	4621      	mov	r1, r4
 8009e9c:	a36a      	add	r3, pc, #424	; (adr r3, 800a048 <scaraKeyInit+0xe00>)
 8009e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea2:	f7f6 fcd3 	bl	800084c <__aeabi_ddiv>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	460c      	mov	r4, r1
 8009eaa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009eae:	e9c2 3406 	strd	r3, r4, [r2, #24]
		v_current = positionCurrent.v_theta2;
 8009eb2:	4b70      	ldr	r3, [pc, #448]	; (800a074 <scaraKeyInit+0xe2c>)
 8009eb4:	e9d3 3424 	ldrd	r3, r4, [r3, #144]	; 0x90
 8009eb8:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.joint.trajectory[1].lspb);
 8009ebc:	4b6e      	ldr	r3, [pc, #440]	; (800a078 <scaraKeyInit+0xe30>)
 8009ebe:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 8009ec2:	e1c3      	b.n	800a24c <scaraKeyInit+0x1004>
	case SCARA_KEY_VAR2_INC:
	{
		s = SHIFT_VAR2*speed;
 8009ec4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	ee07 3a90 	vmov	s15, r3
 8009ece:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ed2:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8009ed6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009eda:	ee17 0a90 	vmov	r0, s15
 8009ede:	f7f6 fb33 	bl	8000548 <__aeabi_f2d>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	460c      	mov	r4, r1
 8009ee6:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 8009eea:	a359      	add	r3, pc, #356	; (adr r3, 800a050 <scaraKeyInit+0xe08>)
 8009eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef0:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009ef4:	f7f6 fcaa 	bl	800084c <__aeabi_ddiv>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	460c      	mov	r4, r1
 8009efc:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 8009f00:	a355      	add	r3, pc, #340	; (adr r3, 800a058 <scaraKeyInit+0xe10>)
 8009f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f06:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009f0a:	f7f6 fc9f 	bl	800084c <__aeabi_ddiv>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	460c      	mov	r4, r1
 8009f12:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_J2);
 8009f16:	a354      	add	r3, pc, #336	; (adr r3, 800a068 <scaraKeyInit+0xe20>)
 8009f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f1c:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009f20:	f7f6 fc94 	bl	800084c <__aeabi_ddiv>
 8009f24:	4603      	mov	r3, r0
 8009f26:	460c      	mov	r4, r1
 8009f28:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009f2c:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_J2);
 8009f30:	a34d      	add	r3, pc, #308	; (adr r3, 800a068 <scaraKeyInit+0xe20>)
 8009f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f36:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 8009f3a:	f7f6 fc87 	bl	800084c <__aeabi_ddiv>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	460c      	mov	r4, r1
 8009f42:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009f46:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_JOINT;
 8009f4a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009f4e:	2201      	movs	r2, #1
 8009f50:	735a      	strb	r2, [r3, #13]
		cmd.joint_type = DUTY_JOINT_SINGLE;
 8009f52:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009f56:	2200      	movs	r2, #0
 8009f58:	73da      	strb	r2, [r3, #15]
		cmd.sub_para_int 	= 2;
 8009f5a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009f5e:	2202      	movs	r2, #2
 8009f60:	615a      	str	r2, [r3, #20]
		cmd.sub_para_double = s;
 8009f62:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009f66:	e9d7 3482 	ldrd	r3, r4, [r7, #520]	; 0x208
 8009f6a:	e9c2 3406 	strd	r3, r4, [r2, #24]
		v_current = positionCurrent.v_d3;
 8009f6e:	4b41      	ldr	r3, [pc, #260]	; (800a074 <scaraKeyInit+0xe2c>)
 8009f70:	e9d3 3426 	ldrd	r3, r4, [r3, #152]	; 0x98
 8009f74:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.joint.trajectory[2].lspb);
 8009f78:	4b40      	ldr	r3, [pc, #256]	; (800a07c <scaraKeyInit+0xe34>)
 8009f7a:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 8009f7e:	e165      	b.n	800a24c <scaraKeyInit+0x1004>
	case SCARA_KEY_VAR2_DEC:
	{
		s = SHIFT_VAR2*speed;
 8009f80:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	ee07 3a90 	vmov	s15, r3
 8009f8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f8e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8009f92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009f96:	ee17 0a90 	vmov	r0, s15
 8009f9a:	f7f6 fad5 	bl	8000548 <__aeabi_f2d>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	460c      	mov	r4, r1
 8009fa2:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 8009fa6:	a32a      	add	r3, pc, #168	; (adr r3, 800a050 <scaraKeyInit+0xe08>)
 8009fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fac:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009fb0:	f7f6 fc4c 	bl	800084c <__aeabi_ddiv>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	460c      	mov	r4, r1
 8009fb8:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 8009fbc:	a326      	add	r3, pc, #152	; (adr r3, 800a058 <scaraKeyInit+0xe10>)
 8009fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc2:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009fc6:	f7f6 fc41 	bl	800084c <__aeabi_ddiv>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	460c      	mov	r4, r1
 8009fce:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_J2);
 8009fd2:	a325      	add	r3, pc, #148	; (adr r3, 800a068 <scaraKeyInit+0xe20>)
 8009fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd8:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009fdc:	f7f6 fc36 	bl	800084c <__aeabi_ddiv>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	460c      	mov	r4, r1
 8009fe4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009fe8:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_J2);
 8009fec:	a31e      	add	r3, pc, #120	; (adr r3, 800a068 <scaraKeyInit+0xe20>)
 8009fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff2:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 8009ff6:	f7f6 fc29 	bl	800084c <__aeabi_ddiv>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	460c      	mov	r4, r1
 8009ffe:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a002:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_JOINT;
 800a006:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a00a:	2201      	movs	r2, #1
 800a00c:	735a      	strb	r2, [r3, #13]
		cmd.joint_type = DUTY_JOINT_SINGLE;
 800a00e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a012:	2200      	movs	r2, #0
 800a014:	73da      	strb	r2, [r3, #15]
		cmd.sub_para_int 	= 2;
 800a016:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a01a:	2202      	movs	r2, #2
 800a01c:	615a      	str	r2, [r3, #20]
		cmd.sub_para_double = -s;
 800a01e:	f8d7 5208 	ldr.w	r5, [r7, #520]	; 0x208
 800a022:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800a026:	f083 4600 	eor.w	r6, r3, #2147483648	; 0x80000000
 800a02a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a02e:	e9c3 5606 	strd	r5, r6, [r3, #24]
		v_current = positionCurrent.v_d3;
 800a032:	4b10      	ldr	r3, [pc, #64]	; (800a074 <scaraKeyInit+0xe2c>)
 800a034:	e9d3 3426 	ldrd	r3, r4, [r3, #152]	; 0x98
 800a038:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.joint.trajectory[2].lspb);
 800a03c:	4b0f      	ldr	r3, [pc, #60]	; (800a07c <scaraKeyInit+0xe34>)
 800a03e:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 800a042:	e103      	b.n	800a24c <scaraKeyInit+0x1004>
 800a044:	f3af 8000 	nop.w
 800a048:	60000000 	.word	0x60000000
 800a04c:	400921fb 	.word	0x400921fb
 800a050:	60000000 	.word	0x60000000
 800a054:	3fedf3b6 	.word	0x3fedf3b6
 800a058:	40000000 	.word	0x40000000
 800a05c:	3fd0e560 	.word	0x3fd0e560
 800a060:	14000000 	.word	0x14000000
 800a064:	4000f6f0 	.word	0x4000f6f0
 800a068:	00000000 	.word	0x00000000
 800a06c:	405c2000 	.word	0x405c2000
 800a070:	40668000 	.word	0x40668000
 800a074:	20005e38 	.word	0x20005e38
 800a078:	200058a0 	.word	0x200058a0
 800a07c:	200059f8 	.word	0x200059f8
 800a080:	3d567750 	.word	0x3d567750
	case SCARA_KEY_VAR3_INC:
	{
		s = SHIFT_VAR3*speed;
 800a084:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	ee07 3a90 	vmov	s15, r3
 800a08e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a092:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 800a080 <scaraKeyInit+0xe38>
 800a096:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a09a:	ee17 0a90 	vmov	r0, s15
 800a09e:	f7f6 fa53 	bl	8000548 <__aeabi_f2d>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	460c      	mov	r4, r1
 800a0a6:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 800a0aa:	a39b      	add	r3, pc, #620	; (adr r3, 800a318 <scaraKeyInit+0x10d0>)
 800a0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b0:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 800a0b4:	f7f6 fbca 	bl	800084c <__aeabi_ddiv>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	460c      	mov	r4, r1
 800a0bc:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 800a0c0:	a397      	add	r3, pc, #604	; (adr r3, 800a320 <scaraKeyInit+0x10d8>)
 800a0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c6:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 800a0ca:	f7f6 fbbf 	bl	800084c <__aeabi_ddiv>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	460c      	mov	r4, r1
 800a0d2:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_J3);
 800a0d6:	a394      	add	r3, pc, #592	; (adr r3, 800a328 <scaraKeyInit+0x10e0>)
 800a0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0dc:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 800a0e0:	f7f6 fbb4 	bl	800084c <__aeabi_ddiv>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	460c      	mov	r4, r1
 800a0e8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a0ec:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_J3);
 800a0f0:	a38d      	add	r3, pc, #564	; (adr r3, 800a328 <scaraKeyInit+0x10e0>)
 800a0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f6:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 800a0fa:	f7f6 fba7 	bl	800084c <__aeabi_ddiv>
 800a0fe:	4603      	mov	r3, r0
 800a100:	460c      	mov	r4, r1
 800a102:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a106:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_JOINT;
 800a10a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a10e:	2201      	movs	r2, #1
 800a110:	735a      	strb	r2, [r3, #13]
		cmd.joint_type = DUTY_JOINT_SINGLE;
 800a112:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a116:	2200      	movs	r2, #0
 800a118:	73da      	strb	r2, [r3, #15]
		cmd.sub_para_int 	= 3;
 800a11a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a11e:	2203      	movs	r2, #3
 800a120:	615a      	str	r2, [r3, #20]
		cmd.sub_para_double = s*180/PI;
 800a122:	f04f 0200 	mov.w	r2, #0
 800a126:	4b82      	ldr	r3, [pc, #520]	; (800a330 <scaraKeyInit+0x10e8>)
 800a128:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 800a12c:	f7f6 fa64 	bl	80005f8 <__aeabi_dmul>
 800a130:	4603      	mov	r3, r0
 800a132:	460c      	mov	r4, r1
 800a134:	4618      	mov	r0, r3
 800a136:	4621      	mov	r1, r4
 800a138:	a375      	add	r3, pc, #468	; (adr r3, 800a310 <scaraKeyInit+0x10c8>)
 800a13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a13e:	f7f6 fb85 	bl	800084c <__aeabi_ddiv>
 800a142:	4603      	mov	r3, r0
 800a144:	460c      	mov	r4, r1
 800a146:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a14a:	e9c2 3406 	strd	r3, r4, [r2, #24]
		v_current = positionCurrent.v_theta4;
 800a14e:	4b79      	ldr	r3, [pc, #484]	; (800a334 <scaraKeyInit+0x10ec>)
 800a150:	e9d3 3428 	ldrd	r3, r4, [r3, #160]	; 0xa0
 800a154:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.joint.trajectory[3].lspb);
 800a158:	4b77      	ldr	r3, [pc, #476]	; (800a338 <scaraKeyInit+0x10f0>)
 800a15a:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 800a15e:	e075      	b.n	800a24c <scaraKeyInit+0x1004>
	case SCARA_KEY_VAR3_DEC:
	{
		s = SHIFT_VAR3*speed;
 800a160:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	ee07 3a90 	vmov	s15, r3
 800a16a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a16e:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800a33c <scaraKeyInit+0x10f4>
 800a172:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a176:	ee17 0a90 	vmov	r0, s15
 800a17a:	f7f6 f9e5 	bl	8000548 <__aeabi_f2d>
 800a17e:	4603      	mov	r3, r0
 800a180:	460c      	mov	r4, r1
 800a182:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 800a186:	a364      	add	r3, pc, #400	; (adr r3, 800a318 <scaraKeyInit+0x10d0>)
 800a188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a18c:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 800a190:	f7f6 fb5c 	bl	800084c <__aeabi_ddiv>
 800a194:	4603      	mov	r3, r0
 800a196:	460c      	mov	r4, r1
 800a198:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 800a19c:	a360      	add	r3, pc, #384	; (adr r3, 800a320 <scaraKeyInit+0x10d8>)
 800a19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a2:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 800a1a6:	f7f6 fb51 	bl	800084c <__aeabi_ddiv>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	460c      	mov	r4, r1
 800a1ae:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_J3);
 800a1b2:	a35d      	add	r3, pc, #372	; (adr r3, 800a328 <scaraKeyInit+0x10e0>)
 800a1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b8:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 800a1bc:	f7f6 fb46 	bl	800084c <__aeabi_ddiv>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	460c      	mov	r4, r1
 800a1c4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a1c8:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_J3);
 800a1cc:	a356      	add	r3, pc, #344	; (adr r3, 800a328 <scaraKeyInit+0x10e0>)
 800a1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d2:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 800a1d6:	f7f6 fb39 	bl	800084c <__aeabi_ddiv>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	460c      	mov	r4, r1
 800a1de:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a1e2:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_JOINT;
 800a1e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a1ea:	2201      	movs	r2, #1
 800a1ec:	735a      	strb	r2, [r3, #13]
		cmd.joint_type = DUTY_JOINT_SINGLE;
 800a1ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	73da      	strb	r2, [r3, #15]
		cmd.sub_para_int 	= 3;
 800a1f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a1fa:	2203      	movs	r2, #3
 800a1fc:	615a      	str	r2, [r3, #20]
		cmd.sub_para_double = -s*180/PI;
 800a1fe:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800a202:	603b      	str	r3, [r7, #0]
 800a204:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800a208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a20c:	607b      	str	r3, [r7, #4]
 800a20e:	f04f 0200 	mov.w	r2, #0
 800a212:	4b47      	ldr	r3, [pc, #284]	; (800a330 <scaraKeyInit+0x10e8>)
 800a214:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a218:	f7f6 f9ee 	bl	80005f8 <__aeabi_dmul>
 800a21c:	4603      	mov	r3, r0
 800a21e:	460c      	mov	r4, r1
 800a220:	4618      	mov	r0, r3
 800a222:	4621      	mov	r1, r4
 800a224:	a33a      	add	r3, pc, #232	; (adr r3, 800a310 <scaraKeyInit+0x10c8>)
 800a226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22a:	f7f6 fb0f 	bl	800084c <__aeabi_ddiv>
 800a22e:	4603      	mov	r3, r0
 800a230:	460c      	mov	r4, r1
 800a232:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a236:	e9c2 3406 	strd	r3, r4, [r2, #24]
		v_current = positionCurrent.v_theta4;
 800a23a:	4b3e      	ldr	r3, [pc, #248]	; (800a334 <scaraKeyInit+0x10ec>)
 800a23c:	e9d3 3428 	ldrd	r3, r4, [r3, #160]	; 0xa0
 800a240:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.joint.trajectory[3].lspb);
 800a244:	4b3c      	ldr	r3, [pc, #240]	; (800a338 <scaraKeyInit+0x10f0>)
 800a246:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 800a24a:	bf00      	nop
	}
	// Initial
	status = scaraInitDuty(cmd);
 800a24c:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800a250:	4668      	mov	r0, sp
 800a252:	f104 0310 	add.w	r3, r4, #16
 800a256:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800a25a:	4619      	mov	r1, r3
 800a25c:	f00b fa88 	bl	8015770 <memcpy>
 800a260:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800a264:	f7fa fac0 	bl	80047e8 <scaraInitDuty>
 800a268:	4603      	mov	r3, r0
 800a26a:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
	if (status == SCARA_STATUS_OK) {
 800a26e:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 800a272:	2b00      	cmp	r3, #0
 800a274:	d141      	bne.n	800a2fa <scaraKeyInit+0x10b2>
		status = scaraTestDuty();
 800a276:	f7fe fd73 	bl	8008d60 <scaraTestDuty>
 800a27a:	4603      	mov	r3, r0
 800a27c:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
		if (status != SCARA_STATUS_OK) {
 800a280:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 800a284:	2b00      	cmp	r3, #0
 800a286:	d002      	beq.n	800a28e <scaraKeyInit+0x1046>
			return status;
 800a288:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 800a28c:	e037      	b.n	800a2fe <scaraKeyInit+0x10b6>
		}
		// tinh lai run time so vs v hien tai
		*(runtime) = (v_current - lspb->v0)/(lspb->a_design);
 800a28e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800a292:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 800a296:	461a      	mov	r2, r3
 800a298:	4623      	mov	r3, r4
 800a29a:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 800a29e:	f7f5 fff3 	bl	8000288 <__aeabi_dsub>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	460c      	mov	r4, r1
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	4621      	mov	r1, r4
 800a2aa:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800a2ae:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 800a2b2:	461a      	mov	r2, r3
 800a2b4:	4623      	mov	r3, r4
 800a2b6:	f7f6 fac9 	bl	800084c <__aeabi_ddiv>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	460c      	mov	r4, r1
 800a2be:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800a2c2:	6812      	ldr	r2, [r2, #0]
 800a2c4:	e9c2 3400 	strd	r3, r4, [r2]
		scaraFlowDuty(*runtime, &positionKeyInit, positionCurrent);
 800a2c8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	ed93 8b00 	vldr	d8, [r3]
 800a2d2:	4c18      	ldr	r4, [pc, #96]	; (800a334 <scaraKeyInit+0x10ec>)
 800a2d4:	4668      	mov	r0, sp
 800a2d6:	f104 0308 	add.w	r3, r4, #8
 800a2da:	22b0      	movs	r2, #176	; 0xb0
 800a2dc:	4619      	mov	r1, r3
 800a2de:	f00b fa47 	bl	8015770 <memcpy>
 800a2e2:	e894 000c 	ldmia.w	r4, {r2, r3}
 800a2e6:	4816      	ldr	r0, [pc, #88]	; (800a340 <scaraKeyInit+0x10f8>)
 800a2e8:	eeb0 0a48 	vmov.f32	s0, s16
 800a2ec:	eef0 0a68 	vmov.f32	s1, s17
 800a2f0:	f7fc ff20 	bl	8007134 <scaraFlowDuty>
		return status;
 800a2f4:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 800a2f8:	e001      	b.n	800a2fe <scaraKeyInit+0x10b6>
	} else {
		return status;
 800a2fa:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
	}
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	f507 7709 	add.w	r7, r7, #548	; 0x224
 800a304:	46bd      	mov	sp, r7
 800a306:	ecbd 8b02 	vpop	{d8}
 800a30a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a30c:	f3af 8000 	nop.w
 800a310:	60000000 	.word	0x60000000
 800a314:	400921fb 	.word	0x400921fb
 800a318:	60000000 	.word	0x60000000
 800a31c:	3fedf3b6 	.word	0x3fedf3b6
 800a320:	40000000 	.word	0x40000000
 800a324:	3fd0e560 	.word	0x3fd0e560
 800a328:	6b259425 	.word	0x6b259425
 800a32c:	40069b91 	.word	0x40069b91
 800a330:	40668000 	.word	0x40668000
 800a334:	20005e38 	.word	0x20005e38
 800a338:	20005b50 	.word	0x20005b50
 800a33c:	3d567750 	.word	0x3d567750
 800a340:	20005d80 	.word	0x20005d80

0800a344 <scaraKeyFlow>:

SCARA_StatusTypeDef		scaraKeyFlow(double time,
									SCARA_PositionTypeDef *pos_Next,
									SCARA_PositionTypeDef pos_Current) {
 800a344:	b082      	sub	sp, #8
 800a346:	b5b0      	push	{r4, r5, r7, lr}
 800a348:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 800a34c:	af2c      	add	r7, sp, #176	; 0xb0
 800a34e:	f107 0108 	add.w	r1, r7, #8
 800a352:	ed81 0b00 	vstr	d0, [r1]
 800a356:	1d39      	adds	r1, r7, #4
 800a358:	6008      	str	r0, [r1, #0]
 800a35a:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 800a35e:	e881 000c 	stmia.w	r1, {r2, r3}
	SCARA_StatusTypeDef status1, status2, status3, status4;
	SCARA_PositionTypeDef	positionCompute;
	// Update time
	positionCompute.t = time;
 800a362:	f107 0210 	add.w	r2, r7, #16
 800a366:	f107 0308 	add.w	r3, r7, #8
 800a36a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a36e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	/*---- Task space ----*/
	if ( DUTY_SPACE_TASK == myDUTY.space_type) {
 800a372:	4b74      	ldr	r3, [pc, #464]	; (800a544 <scaraKeyFlow+0x200>)
 800a374:	781b      	ldrb	r3, [r3, #0]
 800a376:	2b00      	cmp	r3, #0
 800a378:	f040 80ee 	bne.w	800a558 <scaraKeyFlow+0x214>
		double s, angle, x, y, z, v, v_angle;
		double s_shift, angle_shift;
		int8_t	dir_roll;
		//---Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.task.trajectory_3d.trajectory_type) {
 800a37c:	4b71      	ldr	r3, [pc, #452]	; (800a544 <scaraKeyFlow+0x200>)
 800a37e:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800a382:	2b00      	cmp	r3, #0
 800a384:	d12c      	bne.n	800a3e0 <scaraKeyFlow+0x9c>
			status1 = scaraFlowLSPB(&(myDUTY.task.trajectory_3d.lspb), time);
 800a386:	f107 0308 	add.w	r3, r7, #8
 800a38a:	ed93 0b00 	vldr	d0, [r3]
 800a38e:	486e      	ldr	r0, [pc, #440]	; (800a548 <scaraKeyFlow+0x204>)
 800a390:	f7fd fb3e 	bl	8007a10 <scaraFlowLSPB>
 800a394:	4603      	mov	r3, r0
 800a396:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
			status2 = scaraFlowLSPB(&(myDUTY.task.trajectory_roll.lspb), time);
 800a39a:	f107 0308 	add.w	r3, r7, #8
 800a39e:	ed93 0b00 	vldr	d0, [r3]
 800a3a2:	486a      	ldr	r0, [pc, #424]	; (800a54c <scaraKeyFlow+0x208>)
 800a3a4:	f7fd fb34 	bl	8007a10 <scaraFlowLSPB>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
			s = myDUTY.task.trajectory_3d.lspb.s_current;
 800a3ae:	4b65      	ldr	r3, [pc, #404]	; (800a544 <scaraKeyFlow+0x200>)
 800a3b0:	e9d3 3464 	ldrd	r3, r4, [r3, #400]	; 0x190
 800a3b4:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
			v = myDUTY.task.trajectory_3d.lspb.v_current;
 800a3b8:	4b62      	ldr	r3, [pc, #392]	; (800a544 <scaraKeyFlow+0x200>)
 800a3ba:	e9d3 3462 	ldrd	r3, r4, [r3, #392]	; 0x188
 800a3be:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
			angle = myDUTY.task.trajectory_roll.lspb.s_current;
 800a3c2:	4b60      	ldr	r3, [pc, #384]	; (800a544 <scaraKeyFlow+0x200>)
 800a3c4:	e9d3 34ba 	ldrd	r3, r4, [r3, #744]	; 0x2e8
 800a3c8:	e9c7 345c 	strd	r3, r4, [r7, #368]	; 0x170
			v_angle = myDUTY.task.trajectory_roll.lspb.v_current;
 800a3cc:	4b5d      	ldr	r3, [pc, #372]	; (800a544 <scaraKeyFlow+0x200>)
 800a3ce:	e9d3 34b8 	ldrd	r3, r4, [r3, #736]	; 0x2e0
 800a3d2:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			dir_roll = myDUTY.task.trajectory_roll.lspb.dir;
 800a3d6:	4b5b      	ldr	r3, [pc, #364]	; (800a544 <scaraKeyFlow+0x200>)
 800a3d8:	f893 3270 	ldrb.w	r3, [r3, #624]	; 0x270
 800a3dc:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
		}

		if ( SCARA_STATUS_OK != status1) {
 800a3e0:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d002      	beq.n	800a3ee <scaraKeyFlow+0xaa>
			return status1;
 800a3e8:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a3ec:	e26b      	b.n	800a8c6 <scaraKeyFlow+0x582>
		}
		if ( SCARA_STATUS_OK != status2) {
 800a3ee:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d002      	beq.n	800a3fc <scaraKeyFlow+0xb8>
			return status2;
 800a3f6:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 800a3fa:	e264      	b.n	800a8c6 <scaraKeyFlow+0x582>
		}

		// Shift q , q_roll
		s_shift = s - positionKeyInit.q;
 800a3fc:	4b54      	ldr	r3, [pc, #336]	; (800a550 <scaraKeyFlow+0x20c>)
 800a3fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a402:	461a      	mov	r2, r3
 800a404:	4623      	mov	r3, r4
 800a406:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 800a40a:	f7f5 ff3d 	bl	8000288 <__aeabi_dsub>
 800a40e:	4603      	mov	r3, r0
 800a410:	460c      	mov	r4, r1
 800a412:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
		angle_shift = angle - positionKeyInit.q_roll;
 800a416:	4b4e      	ldr	r3, [pc, #312]	; (800a550 <scaraKeyFlow+0x20c>)
 800a418:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800a41c:	461a      	mov	r2, r3
 800a41e:	4623      	mov	r3, r4
 800a420:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800a424:	f7f5 ff30 	bl	8000288 <__aeabi_dsub>
 800a428:	4603      	mov	r3, r0
 800a42a:	460c      	mov	r4, r1
 800a42c:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8

		//---Path flowing
			// Straight line
		if( DUTY_PATH_LINE == myDUTY.task.path.path_type) {
 800a430:	4b44      	ldr	r3, [pc, #272]	; (800a544 <scaraKeyFlow+0x200>)
 800a432:	7a1b      	ldrb	r3, [r3, #8]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d116      	bne.n	800a466 <scaraKeyFlow+0x122>
			status1 = scaraFlowLine(&(myDUTY.task.path.line), s_shift);//shift
 800a438:	ed97 0b34 	vldr	d0, [r7, #208]	; 0xd0
 800a43c:	4845      	ldr	r0, [pc, #276]	; (800a554 <scaraKeyFlow+0x210>)
 800a43e:	f7fd f9d7 	bl	80077f0 <scaraFlowLine>
 800a442:	4603      	mov	r3, r0
 800a444:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
			x = myDUTY.task.path.line.x_current;
 800a448:	4b3e      	ldr	r3, [pc, #248]	; (800a544 <scaraKeyFlow+0x200>)
 800a44a:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 800a44e:	e9c7 345a 	strd	r3, r4, [r7, #360]	; 0x168
			y = myDUTY.task.path.line.y_current;
 800a452:	4b3c      	ldr	r3, [pc, #240]	; (800a544 <scaraKeyFlow+0x200>)
 800a454:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 800a458:	e9c7 3458 	strd	r3, r4, [r7, #352]	; 0x160
			z = myDUTY.task.path.line.z_current;
 800a45c:	4b39      	ldr	r3, [pc, #228]	; (800a544 <scaraKeyFlow+0x200>)
 800a45e:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 800a462:	e9c7 3456 	strd	r3, r4, [r7, #344]	; 0x158
		}

		positionCompute.x 		= x;
 800a466:	f107 0210 	add.w	r2, r7, #16
 800a46a:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 800a46e:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
		positionCompute.y		= y;
 800a472:	f107 0210 	add.w	r2, r7, #16
 800a476:	e9d7 3458 	ldrd	r3, r4, [r7, #352]	; 0x160
 800a47a:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
		positionCompute.z 		= z;
 800a47e:	f107 0210 	add.w	r2, r7, #16
 800a482:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	; 0x158
 800a486:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		positionCompute.roll 	= myDUTY.task.roll_start + angle_shift*dir_roll;// shift
 800a48a:	4b2e      	ldr	r3, [pc, #184]	; (800a544 <scaraKeyFlow+0x200>)
 800a48c:	e9d3 45f0 	ldrd	r4, r5, [r3, #960]	; 0x3c0
 800a490:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800a494:	4618      	mov	r0, r3
 800a496:	f7f6 f845 	bl	8000524 <__aeabi_i2d>
 800a49a:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800a49e:	f7f6 f8ab 	bl	80005f8 <__aeabi_dmul>
 800a4a2:	4602      	mov	r2, r0
 800a4a4:	460b      	mov	r3, r1
 800a4a6:	4620      	mov	r0, r4
 800a4a8:	4629      	mov	r1, r5
 800a4aa:	f7f5 feef 	bl	800028c <__adddf3>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	460c      	mov	r4, r1
 800a4b2:	f107 0210 	add.w	r2, r7, #16
 800a4b6:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

		positionCompute.q		= s;
 800a4ba:	f107 0210 	add.w	r2, r7, #16
 800a4be:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 800a4c2:	e9c2 3400 	strd	r3, r4, [r2]
		positionCompute.q_roll  = angle;
 800a4c6:	f107 0210 	add.w	r2, r7, #16
 800a4ca:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 800a4ce:	e9c2 3402 	strd	r3, r4, [r2, #8]

		positionCompute.v_3d    = v;
 800a4d2:	f107 0210 	add.w	r2, r7, #16
 800a4d6:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 800a4da:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
		positionCompute.v_roll  = v_angle;
 800a4de:	f107 0210 	add.w	r2, r7, #16
 800a4e2:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 800a4e6:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0

		positionCompute.total_time = myDUTY.time_total;
 800a4ea:	4b16      	ldr	r3, [pc, #88]	; (800a544 <scaraKeyFlow+0x200>)
 800a4ec:	f603 1348 	addw	r3, r3, #2376	; 0x948
 800a4f0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a4f4:	f107 0210 	add.w	r2, r7, #16
 800a4f8:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
		positionCompute.t		= time;
 800a4fc:	f107 0210 	add.w	r2, r7, #16
 800a500:	f107 0308 	add.w	r3, r7, #8
 800a504:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a508:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		if ( FALSE == kinematicInverse(&positionCompute, pos_Current)) {
 800a50c:	f107 0410 	add.w	r4, r7, #16
 800a510:	4668      	mov	r0, sp
 800a512:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800a516:	22b0      	movs	r2, #176	; 0xb0
 800a518:	4619      	mov	r1, r3
 800a51a:	f00b f929 	bl	8015770 <memcpy>
 800a51e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800a522:	cb0c      	ldmia	r3, {r2, r3}
 800a524:	4620      	mov	r0, r4
 800a526:	f7f8 fe6b 	bl	8003200 <kinematicInverse>
 800a52a:	4603      	mov	r3, r0
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d101      	bne.n	800a534 <scaraKeyFlow+0x1f0>
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a530:	2307      	movs	r3, #7
 800a532:	e1c8      	b.n	800a8c6 <scaraKeyFlow+0x582>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 800a534:	f107 0110 	add.w	r1, r7, #16
 800a538:	1d3b      	adds	r3, r7, #4
 800a53a:	22b8      	movs	r2, #184	; 0xb8
 800a53c:	6818      	ldr	r0, [r3, #0]
 800a53e:	f00b f917 	bl	8015770 <memcpy>
 800a542:	e1bf      	b.n	800a8c4 <scaraKeyFlow+0x580>
 800a544:	20005378 	.word	0x20005378
 800a548:	20005490 	.word	0x20005490
 800a54c:	200055e8 	.word	0x200055e8
 800a550:	20005d80 	.word	0x20005d80
 800a554:	20005388 	.word	0x20005388
		}

	/*---- Joint space -----*/
	} else if (DUTY_SPACE_JOINT == myDUTY.space_type) {
 800a558:	4b4c      	ldr	r3, [pc, #304]	; (800a68c <scaraKeyFlow+0x348>)
 800a55a:	781b      	ldrb	r3, [r3, #0]
 800a55c:	2b01      	cmp	r3, #1
 800a55e:	f040 81af 	bne.w	800a8c0 <scaraKeyFlow+0x57c>
		double v0, v1, v2, v3;
		double s0_shift, s1_shift, s2_shift, s3_shift;
		int8_t dir0, dir1, dir2, dir3;
		// Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.joint.trajectory[0].trajectory_type) {
 800a562:	4b4a      	ldr	r3, [pc, #296]	; (800a68c <scaraKeyFlow+0x348>)
 800a564:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d173      	bne.n	800a654 <scaraKeyFlow+0x310>
			status1 = scaraFlowLSPB(&(myDUTY.joint.trajectory[0].lspb), time);
 800a56c:	f107 0308 	add.w	r3, r7, #8
 800a570:	ed93 0b00 	vldr	d0, [r3]
 800a574:	4846      	ldr	r0, [pc, #280]	; (800a690 <scaraKeyFlow+0x34c>)
 800a576:	f7fd fa4b 	bl	8007a10 <scaraFlowLSPB>
 800a57a:	4603      	mov	r3, r0
 800a57c:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
			status2 = scaraFlowLSPB(&(myDUTY.joint.trajectory[1].lspb), time);
 800a580:	f107 0308 	add.w	r3, r7, #8
 800a584:	ed93 0b00 	vldr	d0, [r3]
 800a588:	4842      	ldr	r0, [pc, #264]	; (800a694 <scaraKeyFlow+0x350>)
 800a58a:	f7fd fa41 	bl	8007a10 <scaraFlowLSPB>
 800a58e:	4603      	mov	r3, r0
 800a590:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
			status3 = scaraFlowLSPB(&(myDUTY.joint.trajectory[2].lspb), time);
 800a594:	f107 0308 	add.w	r3, r7, #8
 800a598:	ed93 0b00 	vldr	d0, [r3]
 800a59c:	483e      	ldr	r0, [pc, #248]	; (800a698 <scaraKeyFlow+0x354>)
 800a59e:	f7fd fa37 	bl	8007a10 <scaraFlowLSPB>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
			status4 = scaraFlowLSPB(&(myDUTY.joint.trajectory[3].lspb), time);
 800a5a8:	f107 0308 	add.w	r3, r7, #8
 800a5ac:	ed93 0b00 	vldr	d0, [r3]
 800a5b0:	483a      	ldr	r0, [pc, #232]	; (800a69c <scaraKeyFlow+0x358>)
 800a5b2:	f7fd fa2d 	bl	8007a10 <scaraFlowLSPB>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184

			dir0 = myDUTY.joint.trajectory[0].lspb.dir;
 800a5bc:	4b33      	ldr	r3, [pc, #204]	; (800a68c <scaraKeyFlow+0x348>)
 800a5be:	f893 33d0 	ldrb.w	r3, [r3, #976]	; 0x3d0
 800a5c2:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
			dir1 = myDUTY.joint.trajectory[1].lspb.dir;
 800a5c6:	4b31      	ldr	r3, [pc, #196]	; (800a68c <scaraKeyFlow+0x348>)
 800a5c8:	f893 3528 	ldrb.w	r3, [r3, #1320]	; 0x528
 800a5cc:	f887 30fe 	strb.w	r3, [r7, #254]	; 0xfe
			dir2 = myDUTY.joint.trajectory[2].lspb.dir;
 800a5d0:	4b2e      	ldr	r3, [pc, #184]	; (800a68c <scaraKeyFlow+0x348>)
 800a5d2:	f893 3680 	ldrb.w	r3, [r3, #1664]	; 0x680
 800a5d6:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
			dir3 = myDUTY.joint.trajectory[3].lspb.dir;
 800a5da:	4b2c      	ldr	r3, [pc, #176]	; (800a68c <scaraKeyFlow+0x348>)
 800a5dc:	f893 37d8 	ldrb.w	r3, [r3, #2008]	; 0x7d8
 800a5e0:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc

			s0 = myDUTY.joint.trajectory[0].lspb.s_current;
 800a5e4:	4b29      	ldr	r3, [pc, #164]	; (800a68c <scaraKeyFlow+0x348>)
 800a5e6:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 800a5ea:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a5ee:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
			s1 = myDUTY.joint.trajectory[1].lspb.s_current;
 800a5f2:	4b26      	ldr	r3, [pc, #152]	; (800a68c <scaraKeyFlow+0x348>)
 800a5f4:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 800a5f8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a5fc:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
			s2 = myDUTY.joint.trajectory[2].lspb.s_current;
 800a600:	4b22      	ldr	r3, [pc, #136]	; (800a68c <scaraKeyFlow+0x348>)
 800a602:	f503 63df 	add.w	r3, r3, #1784	; 0x6f8
 800a606:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a60a:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
			s3 = myDUTY.joint.trajectory[3].lspb.s_current;
 800a60e:	4b1f      	ldr	r3, [pc, #124]	; (800a68c <scaraKeyFlow+0x348>)
 800a610:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 800a614:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a618:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120

			v0 = myDUTY.joint.trajectory[0].lspb.v_current;
 800a61c:	4b1b      	ldr	r3, [pc, #108]	; (800a68c <scaraKeyFlow+0x348>)
 800a61e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a622:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a626:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
			v1 = myDUTY.joint.trajectory[1].lspb.v_current;
 800a62a:	4b18      	ldr	r3, [pc, #96]	; (800a68c <scaraKeyFlow+0x348>)
 800a62c:	f503 63b3 	add.w	r3, r3, #1432	; 0x598
 800a630:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a634:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
			v2 = myDUTY.joint.trajectory[2].lspb.v_current;
 800a638:	4b14      	ldr	r3, [pc, #80]	; (800a68c <scaraKeyFlow+0x348>)
 800a63a:	f503 63de 	add.w	r3, r3, #1776	; 0x6f0
 800a63e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a642:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
			v3 = myDUTY.joint.trajectory[3].lspb.v_current;
 800a646:	4b11      	ldr	r3, [pc, #68]	; (800a68c <scaraKeyFlow+0x348>)
 800a648:	f603 0348 	addw	r3, r3, #2120	; 0x848
 800a64c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a650:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100

		}
		// Check init status
		if ( SCARA_STATUS_OK != status1) {
 800a654:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d002      	beq.n	800a662 <scaraKeyFlow+0x31e>
			return status1;
 800a65c:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a660:	e131      	b.n	800a8c6 <scaraKeyFlow+0x582>
		}
		if ( SCARA_STATUS_OK != status2) {
 800a662:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 800a666:	2b00      	cmp	r3, #0
 800a668:	d002      	beq.n	800a670 <scaraKeyFlow+0x32c>
			return status2;
 800a66a:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 800a66e:	e12a      	b.n	800a8c6 <scaraKeyFlow+0x582>
		}
		if ( SCARA_STATUS_OK != status3) {
 800a670:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 800a674:	2b00      	cmp	r3, #0
 800a676:	d002      	beq.n	800a67e <scaraKeyFlow+0x33a>
			return status3;
 800a678:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 800a67c:	e123      	b.n	800a8c6 <scaraKeyFlow+0x582>
		}
		if ( SCARA_STATUS_OK != status4) {
 800a67e:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 800a682:	2b00      	cmp	r3, #0
 800a684:	d00c      	beq.n	800a6a0 <scaraKeyFlow+0x35c>
			return status4;
 800a686:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 800a68a:	e11c      	b.n	800a8c6 <scaraKeyFlow+0x582>
 800a68c:	20005378 	.word	0x20005378
 800a690:	20005748 	.word	0x20005748
 800a694:	200058a0 	.word	0x200058a0
 800a698:	200059f8 	.word	0x200059f8
 800a69c:	20005b50 	.word	0x20005b50
		}
		// shift s0, s1, s2, s3
		s0_shift = s0 - positionKeyInit.q_theta1;
 800a6a0:	4b8d      	ldr	r3, [pc, #564]	; (800a8d8 <scaraKeyFlow+0x594>)
 800a6a2:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	4623      	mov	r3, r4
 800a6aa:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800a6ae:	f7f5 fdeb 	bl	8000288 <__aeabi_dsub>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	460c      	mov	r4, r1
 800a6b6:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
		s1_shift = s1 - positionKeyInit.q_theta2;
 800a6ba:	4b87      	ldr	r3, [pc, #540]	; (800a8d8 <scaraKeyFlow+0x594>)
 800a6bc:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 800a6c0:	461a      	mov	r2, r3
 800a6c2:	4623      	mov	r3, r4
 800a6c4:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 800a6c8:	f7f5 fdde 	bl	8000288 <__aeabi_dsub>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	460c      	mov	r4, r1
 800a6d0:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
		s2_shift = s2 - positionKeyInit.q_d3;
 800a6d4:	4b80      	ldr	r3, [pc, #512]	; (800a8d8 <scaraKeyFlow+0x594>)
 800a6d6:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800a6da:	461a      	mov	r2, r3
 800a6dc:	4623      	mov	r3, r4
 800a6de:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800a6e2:	f7f5 fdd1 	bl	8000288 <__aeabi_dsub>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	460c      	mov	r4, r1
 800a6ea:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		s3_shift = s3 - positionKeyInit.q_theta4;
 800a6ee:	4b7a      	ldr	r3, [pc, #488]	; (800a8d8 <scaraKeyFlow+0x594>)
 800a6f0:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 800a6f4:	461a      	mov	r2, r3
 800a6f6:	4623      	mov	r3, r4
 800a6f8:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800a6fc:	f7f5 fdc4 	bl	8000288 <__aeabi_dsub>
 800a700:	4603      	mov	r3, r0
 800a702:	460c      	mov	r4, r1
 800a704:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8

		positionCompute.Theta1 	= myDUTY.joint.theta1_start + s0_shift*dir0;
 800a708:	4b74      	ldr	r3, [pc, #464]	; (800a8dc <scaraKeyFlow+0x598>)
 800a70a:	f603 1328 	addw	r3, r3, #2344	; 0x928
 800a70e:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a712:	f997 30ff 	ldrsb.w	r3, [r7, #255]	; 0xff
 800a716:	4618      	mov	r0, r3
 800a718:	f7f5 ff04 	bl	8000524 <__aeabi_i2d>
 800a71c:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 800a720:	f7f5 ff6a 	bl	80005f8 <__aeabi_dmul>
 800a724:	4602      	mov	r2, r0
 800a726:	460b      	mov	r3, r1
 800a728:	4620      	mov	r0, r4
 800a72a:	4629      	mov	r1, r5
 800a72c:	f7f5 fdae 	bl	800028c <__adddf3>
 800a730:	4603      	mov	r3, r0
 800a732:	460c      	mov	r4, r1
 800a734:	f107 0210 	add.w	r2, r7, #16
 800a738:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		positionCompute.Theta2 	= myDUTY.joint.theta2_start + s1_shift*dir1;
 800a73c:	4b67      	ldr	r3, [pc, #412]	; (800a8dc <scaraKeyFlow+0x598>)
 800a73e:	f503 6313 	add.w	r3, r3, #2352	; 0x930
 800a742:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a746:	f997 30fe 	ldrsb.w	r3, [r7, #254]	; 0xfe
 800a74a:	4618      	mov	r0, r3
 800a74c:	f7f5 feea 	bl	8000524 <__aeabi_i2d>
 800a750:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800a754:	f7f5 ff50 	bl	80005f8 <__aeabi_dmul>
 800a758:	4602      	mov	r2, r0
 800a75a:	460b      	mov	r3, r1
 800a75c:	4620      	mov	r0, r4
 800a75e:	4629      	mov	r1, r5
 800a760:	f7f5 fd94 	bl	800028c <__adddf3>
 800a764:	4603      	mov	r3, r0
 800a766:	460c      	mov	r4, r1
 800a768:	f107 0210 	add.w	r2, r7, #16
 800a76c:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		positionCompute.D3 		= myDUTY.joint.d3_start 	+ s2_shift*dir2;
 800a770:	4b5a      	ldr	r3, [pc, #360]	; (800a8dc <scaraKeyFlow+0x598>)
 800a772:	f603 1338 	addw	r3, r3, #2360	; 0x938
 800a776:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a77a:	f997 30fd 	ldrsb.w	r3, [r7, #253]	; 0xfd
 800a77e:	4618      	mov	r0, r3
 800a780:	f7f5 fed0 	bl	8000524 <__aeabi_i2d>
 800a784:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800a788:	f7f5 ff36 	bl	80005f8 <__aeabi_dmul>
 800a78c:	4602      	mov	r2, r0
 800a78e:	460b      	mov	r3, r1
 800a790:	4620      	mov	r0, r4
 800a792:	4629      	mov	r1, r5
 800a794:	f7f5 fd7a 	bl	800028c <__adddf3>
 800a798:	4603      	mov	r3, r0
 800a79a:	460c      	mov	r4, r1
 800a79c:	f107 0210 	add.w	r2, r7, #16
 800a7a0:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		positionCompute.Theta4 	= myDUTY.joint.theta4_start + s3_shift*dir3;
 800a7a4:	4b4d      	ldr	r3, [pc, #308]	; (800a8dc <scaraKeyFlow+0x598>)
 800a7a6:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 800a7aa:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a7ae:	f997 30fc 	ldrsb.w	r3, [r7, #252]	; 0xfc
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f7f5 feb6 	bl	8000524 <__aeabi_i2d>
 800a7b8:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800a7bc:	f7f5 ff1c 	bl	80005f8 <__aeabi_dmul>
 800a7c0:	4602      	mov	r2, r0
 800a7c2:	460b      	mov	r3, r1
 800a7c4:	4620      	mov	r0, r4
 800a7c6:	4629      	mov	r1, r5
 800a7c8:	f7f5 fd60 	bl	800028c <__adddf3>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	460c      	mov	r4, r1
 800a7d0:	f107 0210 	add.w	r2, r7, #16
 800a7d4:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

		positionCompute.v_theta1 	= v0;
 800a7d8:	f107 0210 	add.w	r2, r7, #16
 800a7dc:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 800a7e0:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		positionCompute.v_theta2 	= v1;
 800a7e4:	f107 0210 	add.w	r2, r7, #16
 800a7e8:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 800a7ec:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
		positionCompute.v_d3 		= v2;
 800a7f0:	f107 0210 	add.w	r2, r7, #16
 800a7f4:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 800a7f8:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
		positionCompute.v_theta4 	= v3;
 800a7fc:	f107 0210 	add.w	r2, r7, #16
 800a800:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 800a804:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0

		positionCompute.q_theta1 = s0;
 800a808:	f107 0210 	add.w	r2, r7, #16
 800a80c:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 800a810:	e9c2 3404 	strd	r3, r4, [r2, #16]
		positionCompute.q_theta2 = s1;
 800a814:	f107 0210 	add.w	r2, r7, #16
 800a818:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 800a81c:	e9c2 3406 	strd	r3, r4, [r2, #24]
		positionCompute.q_d3	 = s2;
 800a820:	f107 0210 	add.w	r2, r7, #16
 800a824:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 800a828:	e9c2 3408 	strd	r3, r4, [r2, #32]
		positionCompute.q_theta4 = s3;
 800a82c:	f107 0210 	add.w	r2, r7, #16
 800a830:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 800a834:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

		positionCompute.total_time = myDUTY.time_total;
 800a838:	4b28      	ldr	r3, [pc, #160]	; (800a8dc <scaraKeyFlow+0x598>)
 800a83a:	f603 1348 	addw	r3, r3, #2376	; 0x948
 800a83e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a842:	f107 0210 	add.w	r2, r7, #16
 800a846:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
		positionCompute.t		= time;
 800a84a:	f107 0210 	add.w	r2, r7, #16
 800a84e:	f107 0308 	add.w	r3, r7, #8
 800a852:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a856:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		// Check workspace
		if( SCARA_STATUS_OK != scaraCheckWorkSpace4(positionCompute.Theta1,
 800a85a:	f107 0310 	add.w	r3, r7, #16
 800a85e:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800a862:	f107 0310 	add.w	r3, r7, #16
 800a866:	ed93 6b1c 	vldr	d6, [r3, #112]	; 0x70
 800a86a:	f107 0310 	add.w	r3, r7, #16
 800a86e:	ed93 5b1e 	vldr	d5, [r3, #120]	; 0x78
 800a872:	f107 0310 	add.w	r3, r7, #16
 800a876:	ed93 4b20 	vldr	d4, [r3, #128]	; 0x80
 800a87a:	eeb0 3a44 	vmov.f32	s6, s8
 800a87e:	eef0 3a64 	vmov.f32	s7, s9
 800a882:	eeb0 2a45 	vmov.f32	s4, s10
 800a886:	eef0 2a65 	vmov.f32	s5, s11
 800a88a:	eeb0 1a46 	vmov.f32	s2, s12
 800a88e:	eef0 1a66 	vmov.f32	s3, s13
 800a892:	eeb0 0a47 	vmov.f32	s0, s14
 800a896:	eef0 0a67 	vmov.f32	s1, s15
 800a89a:	f7fe f949 	bl	8008b30 <scaraCheckWorkSpace4>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d001      	beq.n	800a8a8 <scaraKeyFlow+0x564>
							 	 	 	  positionCompute.Theta2,
										  positionCompute.D3,
										  positionCompute.Theta4)) {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a8a4:	2307      	movs	r3, #7
 800a8a6:	e00e      	b.n	800a8c6 <scaraKeyFlow+0x582>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 800a8a8:	f107 0110 	add.w	r1, r7, #16
 800a8ac:	1d3b      	adds	r3, r7, #4
 800a8ae:	22b8      	movs	r2, #184	; 0xb8
 800a8b0:	6818      	ldr	r0, [r3, #0]
 800a8b2:	f00a ff5d 	bl	8015770 <memcpy>
		}
		kinematicForward(pos_Next);
 800a8b6:	1d3b      	adds	r3, r7, #4
 800a8b8:	6818      	ldr	r0, [r3, #0]
 800a8ba:	f7f8 fb65 	bl	8002f88 <kinematicForward>
 800a8be:	e001      	b.n	800a8c4 <scaraKeyFlow+0x580>

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 800a8c0:	2302      	movs	r3, #2
 800a8c2:	e000      	b.n	800a8c6 <scaraKeyFlow+0x582>
	}

	return SCARA_STATUS_OK;
 800a8c4:	2300      	movs	r3, #0
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800a8d2:	b002      	add	sp, #8
 800a8d4:	4770      	bx	lr
 800a8d6:	bf00      	nop
 800a8d8:	20005d80 	.word	0x20005d80
 800a8dc:	20005378 	.word	0x20005378

0800a8e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b082      	sub	sp, #8
 800a8e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	607b      	str	r3, [r7, #4]
 800a8ea:	4b12      	ldr	r3, [pc, #72]	; (800a934 <HAL_MspInit+0x54>)
 800a8ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8ee:	4a11      	ldr	r2, [pc, #68]	; (800a934 <HAL_MspInit+0x54>)
 800a8f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a8f4:	6453      	str	r3, [r2, #68]	; 0x44
 800a8f6:	4b0f      	ldr	r3, [pc, #60]	; (800a934 <HAL_MspInit+0x54>)
 800a8f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a8fe:	607b      	str	r3, [r7, #4]
 800a900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a902:	2300      	movs	r3, #0
 800a904:	603b      	str	r3, [r7, #0]
 800a906:	4b0b      	ldr	r3, [pc, #44]	; (800a934 <HAL_MspInit+0x54>)
 800a908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a90a:	4a0a      	ldr	r2, [pc, #40]	; (800a934 <HAL_MspInit+0x54>)
 800a90c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a910:	6413      	str	r3, [r2, #64]	; 0x40
 800a912:	4b08      	ldr	r3, [pc, #32]	; (800a934 <HAL_MspInit+0x54>)
 800a914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a91a:	603b      	str	r3, [r7, #0]
 800a91c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800a91e:	2200      	movs	r2, #0
 800a920:	210f      	movs	r1, #15
 800a922:	f06f 0001 	mvn.w	r0, #1
 800a926:	f000 fb85 	bl	800b034 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a92a:	bf00      	nop
 800a92c:	3708      	adds	r7, #8
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}
 800a932:	bf00      	nop
 800a934:	40023800 	.word	0x40023800

0800a938 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b08c      	sub	sp, #48	; 0x30
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800a940:	2300      	movs	r3, #0
 800a942:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800a944:	2300      	movs	r3, #0
 800a946:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800a948:	2200      	movs	r2, #0
 800a94a:	6879      	ldr	r1, [r7, #4]
 800a94c:	2036      	movs	r0, #54	; 0x36
 800a94e:	f000 fb71 	bl	800b034 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800a952:	2036      	movs	r0, #54	; 0x36
 800a954:	f000 fb8a 	bl	800b06c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800a958:	2300      	movs	r3, #0
 800a95a:	60fb      	str	r3, [r7, #12]
 800a95c:	4b1f      	ldr	r3, [pc, #124]	; (800a9dc <HAL_InitTick+0xa4>)
 800a95e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a960:	4a1e      	ldr	r2, [pc, #120]	; (800a9dc <HAL_InitTick+0xa4>)
 800a962:	f043 0310 	orr.w	r3, r3, #16
 800a966:	6413      	str	r3, [r2, #64]	; 0x40
 800a968:	4b1c      	ldr	r3, [pc, #112]	; (800a9dc <HAL_InitTick+0xa4>)
 800a96a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a96c:	f003 0310 	and.w	r3, r3, #16
 800a970:	60fb      	str	r3, [r7, #12]
 800a972:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800a974:	f107 0210 	add.w	r2, r7, #16
 800a978:	f107 0314 	add.w	r3, r7, #20
 800a97c:	4611      	mov	r1, r2
 800a97e:	4618      	mov	r0, r3
 800a980:	f002 ff16 	bl	800d7b0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800a984:	f002 feec 	bl	800d760 <HAL_RCC_GetPCLK1Freq>
 800a988:	4603      	mov	r3, r0
 800a98a:	005b      	lsls	r3, r3, #1
 800a98c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800a98e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a990:	4a13      	ldr	r2, [pc, #76]	; (800a9e0 <HAL_InitTick+0xa8>)
 800a992:	fba2 2303 	umull	r2, r3, r2, r3
 800a996:	0c9b      	lsrs	r3, r3, #18
 800a998:	3b01      	subs	r3, #1
 800a99a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800a99c:	4b11      	ldr	r3, [pc, #68]	; (800a9e4 <HAL_InitTick+0xac>)
 800a99e:	4a12      	ldr	r2, [pc, #72]	; (800a9e8 <HAL_InitTick+0xb0>)
 800a9a0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800a9a2:	4b10      	ldr	r3, [pc, #64]	; (800a9e4 <HAL_InitTick+0xac>)
 800a9a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a9a8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800a9aa:	4a0e      	ldr	r2, [pc, #56]	; (800a9e4 <HAL_InitTick+0xac>)
 800a9ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ae:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800a9b0:	4b0c      	ldr	r3, [pc, #48]	; (800a9e4 <HAL_InitTick+0xac>)
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a9b6:	4b0b      	ldr	r3, [pc, #44]	; (800a9e4 <HAL_InitTick+0xac>)
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800a9bc:	4809      	ldr	r0, [pc, #36]	; (800a9e4 <HAL_InitTick+0xac>)
 800a9be:	f002 ff29 	bl	800d814 <HAL_TIM_Base_Init>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d104      	bne.n	800a9d2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800a9c8:	4806      	ldr	r0, [pc, #24]	; (800a9e4 <HAL_InitTick+0xac>)
 800a9ca:	f002 ff4e 	bl	800d86a <HAL_TIM_Base_Start_IT>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	e000      	b.n	800a9d4 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800a9d2:	2301      	movs	r3, #1
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3730      	adds	r7, #48	; 0x30
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}
 800a9dc:	40023800 	.word	0x40023800
 800a9e0:	431bde83 	.word	0x431bde83
 800a9e4:	20006060 	.word	0x20006060
 800a9e8:	40001000 	.word	0x40001000

0800a9ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a9f0:	bf00      	nop
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f8:	4770      	bx	lr
	...

0800a9fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  LOG_REPORT("ic.c: HARDFAULT ERROR", __LINE__);
 800aa00:	2164      	movs	r1, #100	; 0x64
 800aa02:	4802      	ldr	r0, [pc, #8]	; (800aa0c <HardFault_Handler+0x10>)
 800aa04:	f7f6 fe6a 	bl	80016dc <LOG_REPORT>
 800aa08:	e7fa      	b.n	800aa00 <HardFault_Handler+0x4>
 800aa0a:	bf00      	nop
 800aa0c:	0801b12c 	.word	0x0801b12c

0800aa10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  LOG_REPORT("ic.c: MEMORY ERROR", __LINE__);
 800aa14:	2174      	movs	r1, #116	; 0x74
 800aa16:	4802      	ldr	r0, [pc, #8]	; (800aa20 <MemManage_Handler+0x10>)
 800aa18:	f7f6 fe60 	bl	80016dc <LOG_REPORT>
 800aa1c:	e7fa      	b.n	800aa14 <MemManage_Handler+0x4>
 800aa1e:	bf00      	nop
 800aa20:	0801b144 	.word	0x0801b144

0800aa24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  LOG_REPORT("ic.c: BUS ERROR", __LINE__);
 800aa28:	2184      	movs	r1, #132	; 0x84
 800aa2a:	4802      	ldr	r0, [pc, #8]	; (800aa34 <BusFault_Handler+0x10>)
 800aa2c:	f7f6 fe56 	bl	80016dc <LOG_REPORT>
 800aa30:	e7fa      	b.n	800aa28 <BusFault_Handler+0x4>
 800aa32:	bf00      	nop
 800aa34:	0801b158 	.word	0x0801b158

0800aa38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800aa3c:	e7fe      	b.n	800aa3c <UsageFault_Handler+0x4>

0800aa3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800aa3e:	b480      	push	{r7}
 800aa40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800aa42:	bf00      	nop
 800aa44:	46bd      	mov	sp, r7
 800aa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4a:	4770      	bx	lr

0800aa4c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800aa50:	4802      	ldr	r0, [pc, #8]	; (800aa5c <DMA1_Stream4_IRQHandler+0x10>)
 800aa52:	f000 fc41 	bl	800b2d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800aa56:	bf00      	nop
 800aa58:	bd80      	pop	{r7, pc}
 800aa5a:	bf00      	nop
 800aa5c:	20006120 	.word	0x20006120

0800aa60 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800aa64:	4802      	ldr	r0, [pc, #8]	; (800aa70 <UART4_IRQHandler+0x10>)
 800aa66:	f003 fa3f 	bl	800dee8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800aa6a:	bf00      	nop
 800aa6c:	bd80      	pop	{r7, pc}
 800aa6e:	bf00      	nop
 800aa70:	200060e0 	.word	0x200060e0

0800aa74 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800aa78:	4802      	ldr	r0, [pc, #8]	; (800aa84 <TIM6_DAC_IRQHandler+0x10>)
 800aa7a:	f002 ff1a 	bl	800d8b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800aa7e:	bf00      	nop
 800aa80:	bd80      	pop	{r7, pc}
 800aa82:	bf00      	nop
 800aa84:	20006060 	.word	0x20006060

0800aa88 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	osSignalSet(defaultTaskHandle, 0x01);
 800aa8c:	4b05      	ldr	r3, [pc, #20]	; (800aaa4 <TIM7_IRQHandler+0x1c>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	2101      	movs	r1, #1
 800aa92:	4618      	mov	r0, r3
 800aa94:	f006 ffe8 	bl	8011a68 <osSignalSet>
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800aa98:	4803      	ldr	r0, [pc, #12]	; (800aaa8 <TIM7_IRQHandler+0x20>)
 800aa9a:	f002 ff0a 	bl	800d8b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  /* USER CODE END TIM7_IRQn 1 */
}
 800aa9e:	bf00      	nop
 800aaa0:	bd80      	pop	{r7, pc}
 800aaa2:	bf00      	nop
 800aaa4:	200052b4 	.word	0x200052b4
 800aaa8:	200060a0 	.word	0x200060a0

0800aaac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800aab0:	4802      	ldr	r0, [pc, #8]	; (800aabc <OTG_FS_IRQHandler+0x10>)
 800aab2:	f001 f9e1 	bl	800be78 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800aab6:	bf00      	nop
 800aab8:	bd80      	pop	{r7, pc}
 800aaba:	bf00      	nop
 800aabc:	20006a28 	.word	0x20006a28

0800aac0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b084      	sub	sp, #16
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800aac8:	4b11      	ldr	r3, [pc, #68]	; (800ab10 <_sbrk+0x50>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d102      	bne.n	800aad6 <_sbrk+0x16>
		heap_end = &end;
 800aad0:	4b0f      	ldr	r3, [pc, #60]	; (800ab10 <_sbrk+0x50>)
 800aad2:	4a10      	ldr	r2, [pc, #64]	; (800ab14 <_sbrk+0x54>)
 800aad4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800aad6:	4b0e      	ldr	r3, [pc, #56]	; (800ab10 <_sbrk+0x50>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800aadc:	4b0c      	ldr	r3, [pc, #48]	; (800ab10 <_sbrk+0x50>)
 800aade:	681a      	ldr	r2, [r3, #0]
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	4413      	add	r3, r2
 800aae4:	466a      	mov	r2, sp
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d907      	bls.n	800aafa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800aaea:	f00a fe07 	bl	80156fc <__errno>
 800aaee:	4602      	mov	r2, r0
 800aaf0:	230c      	movs	r3, #12
 800aaf2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800aaf4:	f04f 33ff 	mov.w	r3, #4294967295
 800aaf8:	e006      	b.n	800ab08 <_sbrk+0x48>
	}

	heap_end += incr;
 800aafa:	4b05      	ldr	r3, [pc, #20]	; (800ab10 <_sbrk+0x50>)
 800aafc:	681a      	ldr	r2, [r3, #0]
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	4413      	add	r3, r2
 800ab02:	4a03      	ldr	r2, [pc, #12]	; (800ab10 <_sbrk+0x50>)
 800ab04:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800ab06:	68fb      	ldr	r3, [r7, #12]
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3710      	adds	r7, #16
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}
 800ab10:	20001454 	.word	0x20001454
 800ab14:	20006e38 	.word	0x20006e38

0800ab18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800ab18:	b480      	push	{r7}
 800ab1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800ab1c:	4b08      	ldr	r3, [pc, #32]	; (800ab40 <SystemInit+0x28>)
 800ab1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab22:	4a07      	ldr	r2, [pc, #28]	; (800ab40 <SystemInit+0x28>)
 800ab24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ab28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800ab2c:	4b04      	ldr	r3, [pc, #16]	; (800ab40 <SystemInit+0x28>)
 800ab2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ab32:	609a      	str	r2, [r3, #8]
#endif
}
 800ab34:	bf00      	nop
 800ab36:	46bd      	mov	sp, r7
 800ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3c:	4770      	bx	lr
 800ab3e:	bf00      	nop
 800ab40:	e000ed00 	.word	0xe000ed00

0800ab44 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b082      	sub	sp, #8
 800ab48:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ab4a:	463b      	mov	r3, r7
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	601a      	str	r2, [r3, #0]
 800ab50:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 800ab52:	4b15      	ldr	r3, [pc, #84]	; (800aba8 <MX_TIM7_Init+0x64>)
 800ab54:	4a15      	ldr	r2, [pc, #84]	; (800abac <MX_TIM7_Init+0x68>)
 800ab56:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 800ab58:	4b13      	ldr	r3, [pc, #76]	; (800aba8 <MX_TIM7_Init+0x64>)
 800ab5a:	2253      	movs	r2, #83	; 0x53
 800ab5c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ab5e:	4b12      	ldr	r3, [pc, #72]	; (800aba8 <MX_TIM7_Init+0x64>)
 800ab60:	2200      	movs	r2, #0
 800ab62:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 800ab64:	4b10      	ldr	r3, [pc, #64]	; (800aba8 <MX_TIM7_Init+0x64>)
 800ab66:	f242 720f 	movw	r2, #9999	; 0x270f
 800ab6a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ab6c:	4b0e      	ldr	r3, [pc, #56]	; (800aba8 <MX_TIM7_Init+0x64>)
 800ab6e:	2200      	movs	r2, #0
 800ab70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800ab72:	480d      	ldr	r0, [pc, #52]	; (800aba8 <MX_TIM7_Init+0x64>)
 800ab74:	f002 fe4e 	bl	800d814 <HAL_TIM_Base_Init>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d001      	beq.n	800ab82 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800ab7e:	f7f8 fdcf 	bl	8003720 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ab82:	2300      	movs	r3, #0
 800ab84:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ab86:	2300      	movs	r3, #0
 800ab88:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800ab8a:	463b      	mov	r3, r7
 800ab8c:	4619      	mov	r1, r3
 800ab8e:	4806      	ldr	r0, [pc, #24]	; (800aba8 <MX_TIM7_Init+0x64>)
 800ab90:	f003 f860 	bl	800dc54 <HAL_TIMEx_MasterConfigSynchronization>
 800ab94:	4603      	mov	r3, r0
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d001      	beq.n	800ab9e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800ab9a:	f7f8 fdc1 	bl	8003720 <Error_Handler>
  }

}
 800ab9e:	bf00      	nop
 800aba0:	3708      	adds	r7, #8
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}
 800aba6:	bf00      	nop
 800aba8:	200060a0 	.word	0x200060a0
 800abac:	40001400 	.word	0x40001400

0800abb0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b084      	sub	sp, #16
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	4a0e      	ldr	r2, [pc, #56]	; (800abf8 <HAL_TIM_Base_MspInit+0x48>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d115      	bne.n	800abee <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800abc2:	2300      	movs	r3, #0
 800abc4:	60fb      	str	r3, [r7, #12]
 800abc6:	4b0d      	ldr	r3, [pc, #52]	; (800abfc <HAL_TIM_Base_MspInit+0x4c>)
 800abc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abca:	4a0c      	ldr	r2, [pc, #48]	; (800abfc <HAL_TIM_Base_MspInit+0x4c>)
 800abcc:	f043 0320 	orr.w	r3, r3, #32
 800abd0:	6413      	str	r3, [r2, #64]	; 0x40
 800abd2:	4b0a      	ldr	r3, [pc, #40]	; (800abfc <HAL_TIM_Base_MspInit+0x4c>)
 800abd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abd6:	f003 0320 	and.w	r3, r3, #32
 800abda:	60fb      	str	r3, [r7, #12]
 800abdc:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800abde:	2200      	movs	r2, #0
 800abe0:	2105      	movs	r1, #5
 800abe2:	2037      	movs	r0, #55	; 0x37
 800abe4:	f000 fa26 	bl	800b034 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800abe8:	2037      	movs	r0, #55	; 0x37
 800abea:	f000 fa3f 	bl	800b06c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800abee:	bf00      	nop
 800abf0:	3710      	adds	r7, #16
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}
 800abf6:	bf00      	nop
 800abf8:	40001400 	.word	0x40001400
 800abfc:	40023800 	.word	0x40023800

0800ac00 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 800ac04:	4b11      	ldr	r3, [pc, #68]	; (800ac4c <MX_UART4_Init+0x4c>)
 800ac06:	4a12      	ldr	r2, [pc, #72]	; (800ac50 <MX_UART4_Init+0x50>)
 800ac08:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800ac0a:	4b10      	ldr	r3, [pc, #64]	; (800ac4c <MX_UART4_Init+0x4c>)
 800ac0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800ac10:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800ac12:	4b0e      	ldr	r3, [pc, #56]	; (800ac4c <MX_UART4_Init+0x4c>)
 800ac14:	2200      	movs	r2, #0
 800ac16:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800ac18:	4b0c      	ldr	r3, [pc, #48]	; (800ac4c <MX_UART4_Init+0x4c>)
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800ac1e:	4b0b      	ldr	r3, [pc, #44]	; (800ac4c <MX_UART4_Init+0x4c>)
 800ac20:	2200      	movs	r2, #0
 800ac22:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800ac24:	4b09      	ldr	r3, [pc, #36]	; (800ac4c <MX_UART4_Init+0x4c>)
 800ac26:	220c      	movs	r2, #12
 800ac28:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ac2a:	4b08      	ldr	r3, [pc, #32]	; (800ac4c <MX_UART4_Init+0x4c>)
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800ac30:	4b06      	ldr	r3, [pc, #24]	; (800ac4c <MX_UART4_Init+0x4c>)
 800ac32:	2200      	movs	r2, #0
 800ac34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800ac36:	4805      	ldr	r0, [pc, #20]	; (800ac4c <MX_UART4_Init+0x4c>)
 800ac38:	f003 f89c 	bl	800dd74 <HAL_UART_Init>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d001      	beq.n	800ac46 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800ac42:	f7f8 fd6d 	bl	8003720 <Error_Handler>
  }

}
 800ac46:	bf00      	nop
 800ac48:	bd80      	pop	{r7, pc}
 800ac4a:	bf00      	nop
 800ac4c:	200060e0 	.word	0x200060e0
 800ac50:	40004c00 	.word	0x40004c00

0800ac54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b08a      	sub	sp, #40	; 0x28
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ac5c:	f107 0314 	add.w	r3, r7, #20
 800ac60:	2200      	movs	r2, #0
 800ac62:	601a      	str	r2, [r3, #0]
 800ac64:	605a      	str	r2, [r3, #4]
 800ac66:	609a      	str	r2, [r3, #8]
 800ac68:	60da      	str	r2, [r3, #12]
 800ac6a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	4a34      	ldr	r2, [pc, #208]	; (800ad44 <HAL_UART_MspInit+0xf0>)
 800ac72:	4293      	cmp	r3, r2
 800ac74:	d161      	bne.n	800ad3a <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800ac76:	2300      	movs	r3, #0
 800ac78:	613b      	str	r3, [r7, #16]
 800ac7a:	4b33      	ldr	r3, [pc, #204]	; (800ad48 <HAL_UART_MspInit+0xf4>)
 800ac7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac7e:	4a32      	ldr	r2, [pc, #200]	; (800ad48 <HAL_UART_MspInit+0xf4>)
 800ac80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ac84:	6413      	str	r3, [r2, #64]	; 0x40
 800ac86:	4b30      	ldr	r3, [pc, #192]	; (800ad48 <HAL_UART_MspInit+0xf4>)
 800ac88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ac8e:	613b      	str	r3, [r7, #16]
 800ac90:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ac92:	2300      	movs	r3, #0
 800ac94:	60fb      	str	r3, [r7, #12]
 800ac96:	4b2c      	ldr	r3, [pc, #176]	; (800ad48 <HAL_UART_MspInit+0xf4>)
 800ac98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac9a:	4a2b      	ldr	r2, [pc, #172]	; (800ad48 <HAL_UART_MspInit+0xf4>)
 800ac9c:	f043 0301 	orr.w	r3, r3, #1
 800aca0:	6313      	str	r3, [r2, #48]	; 0x30
 800aca2:	4b29      	ldr	r3, [pc, #164]	; (800ad48 <HAL_UART_MspInit+0xf4>)
 800aca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aca6:	f003 0301 	and.w	r3, r3, #1
 800acaa:	60fb      	str	r3, [r7, #12]
 800acac:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration    
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800acae:	2303      	movs	r3, #3
 800acb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800acb2:	2302      	movs	r3, #2
 800acb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800acb6:	2301      	movs	r3, #1
 800acb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800acba:	2303      	movs	r3, #3
 800acbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800acbe:	2308      	movs	r3, #8
 800acc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800acc2:	f107 0314 	add.w	r3, r7, #20
 800acc6:	4619      	mov	r1, r3
 800acc8:	4820      	ldr	r0, [pc, #128]	; (800ad4c <HAL_UART_MspInit+0xf8>)
 800acca:	f000 fd7b 	bl	800b7c4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800acce:	4b20      	ldr	r3, [pc, #128]	; (800ad50 <HAL_UART_MspInit+0xfc>)
 800acd0:	4a20      	ldr	r2, [pc, #128]	; (800ad54 <HAL_UART_MspInit+0x100>)
 800acd2:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 800acd4:	4b1e      	ldr	r3, [pc, #120]	; (800ad50 <HAL_UART_MspInit+0xfc>)
 800acd6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800acda:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800acdc:	4b1c      	ldr	r3, [pc, #112]	; (800ad50 <HAL_UART_MspInit+0xfc>)
 800acde:	2240      	movs	r2, #64	; 0x40
 800ace0:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ace2:	4b1b      	ldr	r3, [pc, #108]	; (800ad50 <HAL_UART_MspInit+0xfc>)
 800ace4:	2200      	movs	r2, #0
 800ace6:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800ace8:	4b19      	ldr	r3, [pc, #100]	; (800ad50 <HAL_UART_MspInit+0xfc>)
 800acea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800acee:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800acf0:	4b17      	ldr	r3, [pc, #92]	; (800ad50 <HAL_UART_MspInit+0xfc>)
 800acf2:	2200      	movs	r2, #0
 800acf4:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800acf6:	4b16      	ldr	r3, [pc, #88]	; (800ad50 <HAL_UART_MspInit+0xfc>)
 800acf8:	2200      	movs	r2, #0
 800acfa:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800acfc:	4b14      	ldr	r3, [pc, #80]	; (800ad50 <HAL_UART_MspInit+0xfc>)
 800acfe:	2200      	movs	r2, #0
 800ad00:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800ad02:	4b13      	ldr	r3, [pc, #76]	; (800ad50 <HAL_UART_MspInit+0xfc>)
 800ad04:	2200      	movs	r2, #0
 800ad06:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ad08:	4b11      	ldr	r3, [pc, #68]	; (800ad50 <HAL_UART_MspInit+0xfc>)
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800ad0e:	4810      	ldr	r0, [pc, #64]	; (800ad50 <HAL_UART_MspInit+0xfc>)
 800ad10:	f000 f9ba 	bl	800b088 <HAL_DMA_Init>
 800ad14:	4603      	mov	r3, r0
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d001      	beq.n	800ad1e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800ad1a:	f7f8 fd01 	bl	8003720 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	4a0b      	ldr	r2, [pc, #44]	; (800ad50 <HAL_UART_MspInit+0xfc>)
 800ad22:	631a      	str	r2, [r3, #48]	; 0x30
 800ad24:	4a0a      	ldr	r2, [pc, #40]	; (800ad50 <HAL_UART_MspInit+0xfc>)
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	2105      	movs	r1, #5
 800ad2e:	2034      	movs	r0, #52	; 0x34
 800ad30:	f000 f980 	bl	800b034 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800ad34:	2034      	movs	r0, #52	; 0x34
 800ad36:	f000 f999 	bl	800b06c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 800ad3a:	bf00      	nop
 800ad3c:	3728      	adds	r7, #40	; 0x28
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}
 800ad42:	bf00      	nop
 800ad44:	40004c00 	.word	0x40004c00
 800ad48:	40023800 	.word	0x40023800
 800ad4c:	40020000 	.word	0x40020000
 800ad50:	20006120 	.word	0x20006120
 800ad54:	40026070 	.word	0x40026070

0800ad58 <HAL_UART_TxCpltCallback>:
  /* USER CODE END UART4_MspDeInit 1 */
  }
} 

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b084      	sub	sp, #16
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
	if (UART4 == huart->Instance) {
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	4a0c      	ldr	r2, [pc, #48]	; (800ad98 <HAL_UART_TxCpltCallback+0x40>)
 800ad66:	4293      	cmp	r3, r2
 800ad68:	d112      	bne.n	800ad90 <HAL_UART_TxCpltCallback+0x38>
		uint16_t size_dma;
		size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 800ad6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ad6e:	490b      	ldr	r1, [pc, #44]	; (800ad9c <HAL_UART_TxCpltCallback+0x44>)
 800ad70:	480b      	ldr	r0, [pc, #44]	; (800ada0 <HAL_UART_TxCpltCallback+0x48>)
 800ad72:	f7f8 fd74 	bl	800385e <ringBuff_PopArray>
 800ad76:	4603      	mov	r3, r0
 800ad78:	81fb      	strh	r3, [r7, #14]
		if (0 == size_dma) {
 800ad7a:	89fb      	ldrh	r3, [r7, #14]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d006      	beq.n	800ad8e <HAL_UART_TxCpltCallback+0x36>
			return;
		}
		HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 800ad80:	89fb      	ldrh	r3, [r7, #14]
 800ad82:	461a      	mov	r2, r3
 800ad84:	4905      	ldr	r1, [pc, #20]	; (800ad9c <HAL_UART_TxCpltCallback+0x44>)
 800ad86:	4807      	ldr	r0, [pc, #28]	; (800ada4 <HAL_UART_TxCpltCallback+0x4c>)
 800ad88:	f003 f842 	bl	800de10 <HAL_UART_Transmit_DMA>
 800ad8c:	e000      	b.n	800ad90 <HAL_UART_TxCpltCallback+0x38>
			return;
 800ad8e:	bf00      	nop
	}
}
 800ad90:	3710      	adds	r7, #16
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd80      	pop	{r7, pc}
 800ad96:	bf00      	nop
 800ad98:	40004c00 	.word	0x40004c00
 800ad9c:	200051b4 	.word	0x200051b4
 800ada0:	20000840 	.word	0x20000840
 800ada4:	200060e0 	.word	0x200060e0

0800ada8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800ada8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ade0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800adac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800adae:	e003      	b.n	800adb8 <LoopCopyDataInit>

0800adb0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800adb0:	4b0c      	ldr	r3, [pc, #48]	; (800ade4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800adb2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800adb4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800adb6:	3104      	adds	r1, #4

0800adb8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800adb8:	480b      	ldr	r0, [pc, #44]	; (800ade8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800adba:	4b0c      	ldr	r3, [pc, #48]	; (800adec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800adbc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800adbe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800adc0:	d3f6      	bcc.n	800adb0 <CopyDataInit>
  ldr  r2, =_sbss
 800adc2:	4a0b      	ldr	r2, [pc, #44]	; (800adf0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800adc4:	e002      	b.n	800adcc <LoopFillZerobss>

0800adc6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800adc6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800adc8:	f842 3b04 	str.w	r3, [r2], #4

0800adcc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800adcc:	4b09      	ldr	r3, [pc, #36]	; (800adf4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800adce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800add0:	d3f9      	bcc.n	800adc6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800add2:	f7ff fea1 	bl	800ab18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800add6:	f00a fc97 	bl	8015708 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800adda:	f7f8 fc0f 	bl	80035fc <main>
  bx  lr    
 800adde:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800ade0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800ade4:	0801b6c0 	.word	0x0801b6c0
  ldr  r0, =_sdata
 800ade8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800adec:	20000fe0 	.word	0x20000fe0
  ldr  r2, =_sbss
 800adf0:	20000fe0 	.word	0x20000fe0
  ldr  r3, = _ebss
 800adf4:	20006e34 	.word	0x20006e34

0800adf8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800adf8:	e7fe      	b.n	800adf8 <ADC_IRQHandler>
	...

0800adfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800ae00:	4b0e      	ldr	r3, [pc, #56]	; (800ae3c <HAL_Init+0x40>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	4a0d      	ldr	r2, [pc, #52]	; (800ae3c <HAL_Init+0x40>)
 800ae06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ae0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800ae0c:	4b0b      	ldr	r3, [pc, #44]	; (800ae3c <HAL_Init+0x40>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	4a0a      	ldr	r2, [pc, #40]	; (800ae3c <HAL_Init+0x40>)
 800ae12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ae16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800ae18:	4b08      	ldr	r3, [pc, #32]	; (800ae3c <HAL_Init+0x40>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	4a07      	ldr	r2, [pc, #28]	; (800ae3c <HAL_Init+0x40>)
 800ae1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ae24:	2003      	movs	r0, #3
 800ae26:	f000 f8fa 	bl	800b01e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800ae2a:	2000      	movs	r0, #0
 800ae2c:	f7ff fd84 	bl	800a938 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800ae30:	f7ff fd56 	bl	800a8e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800ae34:	2300      	movs	r3, #0
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	bd80      	pop	{r7, pc}
 800ae3a:	bf00      	nop
 800ae3c:	40023c00 	.word	0x40023c00

0800ae40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ae40:	b480      	push	{r7}
 800ae42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800ae44:	4b06      	ldr	r3, [pc, #24]	; (800ae60 <HAL_IncTick+0x20>)
 800ae46:	781b      	ldrb	r3, [r3, #0]
 800ae48:	461a      	mov	r2, r3
 800ae4a:	4b06      	ldr	r3, [pc, #24]	; (800ae64 <HAL_IncTick+0x24>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	4413      	add	r3, r2
 800ae50:	4a04      	ldr	r2, [pc, #16]	; (800ae64 <HAL_IncTick+0x24>)
 800ae52:	6013      	str	r3, [r2, #0]
}
 800ae54:	bf00      	nop
 800ae56:	46bd      	mov	sp, r7
 800ae58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5c:	4770      	bx	lr
 800ae5e:	bf00      	nop
 800ae60:	20000c94 	.word	0x20000c94
 800ae64:	20006180 	.word	0x20006180

0800ae68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	af00      	add	r7, sp, #0
  return uwTick;
 800ae6c:	4b03      	ldr	r3, [pc, #12]	; (800ae7c <HAL_GetTick+0x14>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
}
 800ae70:	4618      	mov	r0, r3
 800ae72:	46bd      	mov	sp, r7
 800ae74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae78:	4770      	bx	lr
 800ae7a:	bf00      	nop
 800ae7c:	20006180 	.word	0x20006180

0800ae80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b084      	sub	sp, #16
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800ae88:	f7ff ffee 	bl	800ae68 <HAL_GetTick>
 800ae8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae98:	d005      	beq.n	800aea6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800ae9a:	4b09      	ldr	r3, [pc, #36]	; (800aec0 <HAL_Delay+0x40>)
 800ae9c:	781b      	ldrb	r3, [r3, #0]
 800ae9e:	461a      	mov	r2, r3
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	4413      	add	r3, r2
 800aea4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800aea6:	bf00      	nop
 800aea8:	f7ff ffde 	bl	800ae68 <HAL_GetTick>
 800aeac:	4602      	mov	r2, r0
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	1ad3      	subs	r3, r2, r3
 800aeb2:	68fa      	ldr	r2, [r7, #12]
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	d8f7      	bhi.n	800aea8 <HAL_Delay+0x28>
  {
  }
}
 800aeb8:	bf00      	nop
 800aeba:	3710      	adds	r7, #16
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}
 800aec0:	20000c94 	.word	0x20000c94

0800aec4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800aec4:	b480      	push	{r7}
 800aec6:	b085      	sub	sp, #20
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f003 0307 	and.w	r3, r3, #7
 800aed2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800aed4:	4b0c      	ldr	r3, [pc, #48]	; (800af08 <__NVIC_SetPriorityGrouping+0x44>)
 800aed6:	68db      	ldr	r3, [r3, #12]
 800aed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800aeda:	68ba      	ldr	r2, [r7, #8]
 800aedc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800aee0:	4013      	ands	r3, r2
 800aee2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800aeec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800aef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800aef6:	4a04      	ldr	r2, [pc, #16]	; (800af08 <__NVIC_SetPriorityGrouping+0x44>)
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	60d3      	str	r3, [r2, #12]
}
 800aefc:	bf00      	nop
 800aefe:	3714      	adds	r7, #20
 800af00:	46bd      	mov	sp, r7
 800af02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af06:	4770      	bx	lr
 800af08:	e000ed00 	.word	0xe000ed00

0800af0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800af0c:	b480      	push	{r7}
 800af0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800af10:	4b04      	ldr	r3, [pc, #16]	; (800af24 <__NVIC_GetPriorityGrouping+0x18>)
 800af12:	68db      	ldr	r3, [r3, #12]
 800af14:	0a1b      	lsrs	r3, r3, #8
 800af16:	f003 0307 	and.w	r3, r3, #7
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	46bd      	mov	sp, r7
 800af1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af22:	4770      	bx	lr
 800af24:	e000ed00 	.word	0xe000ed00

0800af28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800af28:	b480      	push	{r7}
 800af2a:	b083      	sub	sp, #12
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	4603      	mov	r3, r0
 800af30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800af32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af36:	2b00      	cmp	r3, #0
 800af38:	db0b      	blt.n	800af52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800af3a:	79fb      	ldrb	r3, [r7, #7]
 800af3c:	f003 021f 	and.w	r2, r3, #31
 800af40:	4907      	ldr	r1, [pc, #28]	; (800af60 <__NVIC_EnableIRQ+0x38>)
 800af42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af46:	095b      	lsrs	r3, r3, #5
 800af48:	2001      	movs	r0, #1
 800af4a:	fa00 f202 	lsl.w	r2, r0, r2
 800af4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800af52:	bf00      	nop
 800af54:	370c      	adds	r7, #12
 800af56:	46bd      	mov	sp, r7
 800af58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5c:	4770      	bx	lr
 800af5e:	bf00      	nop
 800af60:	e000e100 	.word	0xe000e100

0800af64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800af64:	b480      	push	{r7}
 800af66:	b083      	sub	sp, #12
 800af68:	af00      	add	r7, sp, #0
 800af6a:	4603      	mov	r3, r0
 800af6c:	6039      	str	r1, [r7, #0]
 800af6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800af70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af74:	2b00      	cmp	r3, #0
 800af76:	db0a      	blt.n	800af8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	b2da      	uxtb	r2, r3
 800af7c:	490c      	ldr	r1, [pc, #48]	; (800afb0 <__NVIC_SetPriority+0x4c>)
 800af7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af82:	0112      	lsls	r2, r2, #4
 800af84:	b2d2      	uxtb	r2, r2
 800af86:	440b      	add	r3, r1
 800af88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800af8c:	e00a      	b.n	800afa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	b2da      	uxtb	r2, r3
 800af92:	4908      	ldr	r1, [pc, #32]	; (800afb4 <__NVIC_SetPriority+0x50>)
 800af94:	79fb      	ldrb	r3, [r7, #7]
 800af96:	f003 030f 	and.w	r3, r3, #15
 800af9a:	3b04      	subs	r3, #4
 800af9c:	0112      	lsls	r2, r2, #4
 800af9e:	b2d2      	uxtb	r2, r2
 800afa0:	440b      	add	r3, r1
 800afa2:	761a      	strb	r2, [r3, #24]
}
 800afa4:	bf00      	nop
 800afa6:	370c      	adds	r7, #12
 800afa8:	46bd      	mov	sp, r7
 800afaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afae:	4770      	bx	lr
 800afb0:	e000e100 	.word	0xe000e100
 800afb4:	e000ed00 	.word	0xe000ed00

0800afb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800afb8:	b480      	push	{r7}
 800afba:	b089      	sub	sp, #36	; 0x24
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	60f8      	str	r0, [r7, #12]
 800afc0:	60b9      	str	r1, [r7, #8]
 800afc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	f003 0307 	and.w	r3, r3, #7
 800afca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800afcc:	69fb      	ldr	r3, [r7, #28]
 800afce:	f1c3 0307 	rsb	r3, r3, #7
 800afd2:	2b04      	cmp	r3, #4
 800afd4:	bf28      	it	cs
 800afd6:	2304      	movcs	r3, #4
 800afd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800afda:	69fb      	ldr	r3, [r7, #28]
 800afdc:	3304      	adds	r3, #4
 800afde:	2b06      	cmp	r3, #6
 800afe0:	d902      	bls.n	800afe8 <NVIC_EncodePriority+0x30>
 800afe2:	69fb      	ldr	r3, [r7, #28]
 800afe4:	3b03      	subs	r3, #3
 800afe6:	e000      	b.n	800afea <NVIC_EncodePriority+0x32>
 800afe8:	2300      	movs	r3, #0
 800afea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800afec:	f04f 32ff 	mov.w	r2, #4294967295
 800aff0:	69bb      	ldr	r3, [r7, #24]
 800aff2:	fa02 f303 	lsl.w	r3, r2, r3
 800aff6:	43da      	mvns	r2, r3
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	401a      	ands	r2, r3
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b000:	f04f 31ff 	mov.w	r1, #4294967295
 800b004:	697b      	ldr	r3, [r7, #20]
 800b006:	fa01 f303 	lsl.w	r3, r1, r3
 800b00a:	43d9      	mvns	r1, r3
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b010:	4313      	orrs	r3, r2
         );
}
 800b012:	4618      	mov	r0, r3
 800b014:	3724      	adds	r7, #36	; 0x24
 800b016:	46bd      	mov	sp, r7
 800b018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01c:	4770      	bx	lr

0800b01e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b01e:	b580      	push	{r7, lr}
 800b020:	b082      	sub	sp, #8
 800b022:	af00      	add	r7, sp, #0
 800b024:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f7ff ff4c 	bl	800aec4 <__NVIC_SetPriorityGrouping>
}
 800b02c:	bf00      	nop
 800b02e:	3708      	adds	r7, #8
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}

0800b034 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b034:	b580      	push	{r7, lr}
 800b036:	b086      	sub	sp, #24
 800b038:	af00      	add	r7, sp, #0
 800b03a:	4603      	mov	r3, r0
 800b03c:	60b9      	str	r1, [r7, #8]
 800b03e:	607a      	str	r2, [r7, #4]
 800b040:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800b042:	2300      	movs	r3, #0
 800b044:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b046:	f7ff ff61 	bl	800af0c <__NVIC_GetPriorityGrouping>
 800b04a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b04c:	687a      	ldr	r2, [r7, #4]
 800b04e:	68b9      	ldr	r1, [r7, #8]
 800b050:	6978      	ldr	r0, [r7, #20]
 800b052:	f7ff ffb1 	bl	800afb8 <NVIC_EncodePriority>
 800b056:	4602      	mov	r2, r0
 800b058:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b05c:	4611      	mov	r1, r2
 800b05e:	4618      	mov	r0, r3
 800b060:	f7ff ff80 	bl	800af64 <__NVIC_SetPriority>
}
 800b064:	bf00      	nop
 800b066:	3718      	adds	r7, #24
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}

0800b06c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b082      	sub	sp, #8
 800b070:	af00      	add	r7, sp, #0
 800b072:	4603      	mov	r3, r0
 800b074:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b07a:	4618      	mov	r0, r3
 800b07c:	f7ff ff54 	bl	800af28 <__NVIC_EnableIRQ>
}
 800b080:	bf00      	nop
 800b082:	3708      	adds	r7, #8
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}

0800b088 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b086      	sub	sp, #24
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800b090:	2300      	movs	r3, #0
 800b092:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800b094:	f7ff fee8 	bl	800ae68 <HAL_GetTick>
 800b098:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d101      	bne.n	800b0a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	e099      	b.n	800b1d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2202      	movs	r2, #2
 800b0b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	681a      	ldr	r2, [r3, #0]
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	f022 0201 	bic.w	r2, r2, #1
 800b0c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b0c4:	e00f      	b.n	800b0e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b0c6:	f7ff fecf 	bl	800ae68 <HAL_GetTick>
 800b0ca:	4602      	mov	r2, r0
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	1ad3      	subs	r3, r2, r3
 800b0d0:	2b05      	cmp	r3, #5
 800b0d2:	d908      	bls.n	800b0e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2220      	movs	r2, #32
 800b0d8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2203      	movs	r2, #3
 800b0de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800b0e2:	2303      	movs	r3, #3
 800b0e4:	e078      	b.n	800b1d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f003 0301 	and.w	r3, r3, #1
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d1e8      	bne.n	800b0c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b0fc:	697a      	ldr	r2, [r7, #20]
 800b0fe:	4b38      	ldr	r3, [pc, #224]	; (800b1e0 <HAL_DMA_Init+0x158>)
 800b100:	4013      	ands	r3, r2
 800b102:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	685a      	ldr	r2, [r3, #4]
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	689b      	ldr	r3, [r3, #8]
 800b10c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b112:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	691b      	ldr	r3, [r3, #16]
 800b118:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b11e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	699b      	ldr	r3, [r3, #24]
 800b124:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b12a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	6a1b      	ldr	r3, [r3, #32]
 800b130:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b132:	697a      	ldr	r2, [r7, #20]
 800b134:	4313      	orrs	r3, r2
 800b136:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b13c:	2b04      	cmp	r3, #4
 800b13e:	d107      	bne.n	800b150 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b148:	4313      	orrs	r3, r2
 800b14a:	697a      	ldr	r2, [r7, #20]
 800b14c:	4313      	orrs	r3, r2
 800b14e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	697a      	ldr	r2, [r7, #20]
 800b156:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	695b      	ldr	r3, [r3, #20]
 800b15e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b160:	697b      	ldr	r3, [r7, #20]
 800b162:	f023 0307 	bic.w	r3, r3, #7
 800b166:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b16c:	697a      	ldr	r2, [r7, #20]
 800b16e:	4313      	orrs	r3, r2
 800b170:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b176:	2b04      	cmp	r3, #4
 800b178:	d117      	bne.n	800b1aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b17e:	697a      	ldr	r2, [r7, #20]
 800b180:	4313      	orrs	r3, r2
 800b182:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d00e      	beq.n	800b1aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f000 fa9f 	bl	800b6d0 <DMA_CheckFifoParam>
 800b192:	4603      	mov	r3, r0
 800b194:	2b00      	cmp	r3, #0
 800b196:	d008      	beq.n	800b1aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2240      	movs	r2, #64	; 0x40
 800b19c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2201      	movs	r2, #1
 800b1a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	e016      	b.n	800b1d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	697a      	ldr	r2, [r7, #20]
 800b1b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f000 fa56 	bl	800b664 <DMA_CalcBaseAndBitshift>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b1c0:	223f      	movs	r2, #63	; 0x3f
 800b1c2:	409a      	lsls	r2, r3
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2201      	movs	r2, #1
 800b1d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800b1d6:	2300      	movs	r3, #0
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	3718      	adds	r7, #24
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}
 800b1e0:	f010803f 	.word	0xf010803f

0800b1e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b086      	sub	sp, #24
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	60f8      	str	r0, [r7, #12]
 800b1ec:	60b9      	str	r1, [r7, #8]
 800b1ee:	607a      	str	r2, [r7, #4]
 800b1f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1fa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b202:	2b01      	cmp	r3, #1
 800b204:	d101      	bne.n	800b20a <HAL_DMA_Start_IT+0x26>
 800b206:	2302      	movs	r3, #2
 800b208:	e040      	b.n	800b28c <HAL_DMA_Start_IT+0xa8>
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	2201      	movs	r2, #1
 800b20e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b218:	b2db      	uxtb	r3, r3
 800b21a:	2b01      	cmp	r3, #1
 800b21c:	d12f      	bne.n	800b27e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	2202      	movs	r2, #2
 800b222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	2200      	movs	r2, #0
 800b22a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	687a      	ldr	r2, [r7, #4]
 800b230:	68b9      	ldr	r1, [r7, #8]
 800b232:	68f8      	ldr	r0, [r7, #12]
 800b234:	f000 f9e8 	bl	800b608 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b23c:	223f      	movs	r2, #63	; 0x3f
 800b23e:	409a      	lsls	r2, r3
 800b240:	693b      	ldr	r3, [r7, #16]
 800b242:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	681a      	ldr	r2, [r3, #0]
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f042 0216 	orr.w	r2, r2, #22
 800b252:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d007      	beq.n	800b26c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	681a      	ldr	r2, [r3, #0]
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	f042 0208 	orr.w	r2, r2, #8
 800b26a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	681a      	ldr	r2, [r3, #0]
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f042 0201 	orr.w	r2, r2, #1
 800b27a:	601a      	str	r2, [r3, #0]
 800b27c:	e005      	b.n	800b28a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	2200      	movs	r2, #0
 800b282:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800b286:	2302      	movs	r3, #2
 800b288:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800b28a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b28c:	4618      	mov	r0, r3
 800b28e:	3718      	adds	r7, #24
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}

0800b294 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b294:	b480      	push	{r7}
 800b296:	b083      	sub	sp, #12
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b2a2:	b2db      	uxtb	r3, r3
 800b2a4:	2b02      	cmp	r3, #2
 800b2a6:	d004      	beq.n	800b2b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2280      	movs	r2, #128	; 0x80
 800b2ac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	e00c      	b.n	800b2cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2205      	movs	r2, #5
 800b2b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	681a      	ldr	r2, [r3, #0]
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f022 0201 	bic.w	r2, r2, #1
 800b2c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800b2ca:	2300      	movs	r3, #0
}
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	370c      	adds	r7, #12
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr

0800b2d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b086      	sub	sp, #24
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800b2e4:	4b92      	ldr	r3, [pc, #584]	; (800b530 <HAL_DMA_IRQHandler+0x258>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	4a92      	ldr	r2, [pc, #584]	; (800b534 <HAL_DMA_IRQHandler+0x25c>)
 800b2ea:	fba2 2303 	umull	r2, r3, r2, r3
 800b2ee:	0a9b      	lsrs	r3, r3, #10
 800b2f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800b2f8:	693b      	ldr	r3, [r7, #16]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b302:	2208      	movs	r2, #8
 800b304:	409a      	lsls	r2, r3
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	4013      	ands	r3, r2
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d01a      	beq.n	800b344 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f003 0304 	and.w	r3, r3, #4
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d013      	beq.n	800b344 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	681a      	ldr	r2, [r3, #0]
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	f022 0204 	bic.w	r2, r2, #4
 800b32a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b330:	2208      	movs	r2, #8
 800b332:	409a      	lsls	r2, r3
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b33c:	f043 0201 	orr.w	r2, r3, #1
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b348:	2201      	movs	r2, #1
 800b34a:	409a      	lsls	r2, r3
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	4013      	ands	r3, r2
 800b350:	2b00      	cmp	r3, #0
 800b352:	d012      	beq.n	800b37a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	695b      	ldr	r3, [r3, #20]
 800b35a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d00b      	beq.n	800b37a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b366:	2201      	movs	r2, #1
 800b368:	409a      	lsls	r2, r3
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b372:	f043 0202 	orr.w	r2, r3, #2
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b37e:	2204      	movs	r2, #4
 800b380:	409a      	lsls	r2, r3
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	4013      	ands	r3, r2
 800b386:	2b00      	cmp	r3, #0
 800b388:	d012      	beq.n	800b3b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f003 0302 	and.w	r3, r3, #2
 800b394:	2b00      	cmp	r3, #0
 800b396:	d00b      	beq.n	800b3b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b39c:	2204      	movs	r2, #4
 800b39e:	409a      	lsls	r2, r3
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3a8:	f043 0204 	orr.w	r2, r3, #4
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b3b4:	2210      	movs	r2, #16
 800b3b6:	409a      	lsls	r2, r3
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	4013      	ands	r3, r2
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d043      	beq.n	800b448 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f003 0308 	and.w	r3, r3, #8
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d03c      	beq.n	800b448 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b3d2:	2210      	movs	r2, #16
 800b3d4:	409a      	lsls	r2, r3
 800b3d6:	693b      	ldr	r3, [r7, #16]
 800b3d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d018      	beq.n	800b41a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d108      	bne.n	800b408 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d024      	beq.n	800b448 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	4798      	blx	r3
 800b406:	e01f      	b.n	800b448 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d01b      	beq.n	800b448 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	4798      	blx	r3
 800b418:	e016      	b.n	800b448 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b424:	2b00      	cmp	r3, #0
 800b426:	d107      	bne.n	800b438 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	681a      	ldr	r2, [r3, #0]
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	f022 0208 	bic.w	r2, r2, #8
 800b436:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d003      	beq.n	800b448 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b444:	6878      	ldr	r0, [r7, #4]
 800b446:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b44c:	2220      	movs	r2, #32
 800b44e:	409a      	lsls	r2, r3
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	4013      	ands	r3, r2
 800b454:	2b00      	cmp	r3, #0
 800b456:	f000 808e 	beq.w	800b576 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f003 0310 	and.w	r3, r3, #16
 800b464:	2b00      	cmp	r3, #0
 800b466:	f000 8086 	beq.w	800b576 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b46e:	2220      	movs	r2, #32
 800b470:	409a      	lsls	r2, r3
 800b472:	693b      	ldr	r3, [r7, #16]
 800b474:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b47c:	b2db      	uxtb	r3, r3
 800b47e:	2b05      	cmp	r3, #5
 800b480:	d136      	bne.n	800b4f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	681a      	ldr	r2, [r3, #0]
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	f022 0216 	bic.w	r2, r2, #22
 800b490:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	695a      	ldr	r2, [r3, #20]
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b4a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d103      	bne.n	800b4b2 <HAL_DMA_IRQHandler+0x1da>
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d007      	beq.n	800b4c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	681a      	ldr	r2, [r3, #0]
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	f022 0208 	bic.w	r2, r2, #8
 800b4c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b4c6:	223f      	movs	r2, #63	; 0x3f
 800b4c8:	409a      	lsls	r2, r3
 800b4ca:	693b      	ldr	r3, [r7, #16]
 800b4cc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2201      	movs	r2, #1
 800b4da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d07d      	beq.n	800b5e2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	4798      	blx	r3
        }
        return;
 800b4ee:	e078      	b.n	800b5e2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d01c      	beq.n	800b538 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d108      	bne.n	800b51e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b510:	2b00      	cmp	r3, #0
 800b512:	d030      	beq.n	800b576 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	4798      	blx	r3
 800b51c:	e02b      	b.n	800b576 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b522:	2b00      	cmp	r3, #0
 800b524:	d027      	beq.n	800b576 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	4798      	blx	r3
 800b52e:	e022      	b.n	800b576 <HAL_DMA_IRQHandler+0x29e>
 800b530:	20000c8c 	.word	0x20000c8c
 800b534:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b542:	2b00      	cmp	r3, #0
 800b544:	d10f      	bne.n	800b566 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	681a      	ldr	r2, [r3, #0]
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	f022 0210 	bic.w	r2, r2, #16
 800b554:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2200      	movs	r2, #0
 800b55a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2201      	movs	r2, #1
 800b562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d003      	beq.n	800b576 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d032      	beq.n	800b5e4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b582:	f003 0301 	and.w	r3, r3, #1
 800b586:	2b00      	cmp	r3, #0
 800b588:	d022      	beq.n	800b5d0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	2205      	movs	r2, #5
 800b58e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	681a      	ldr	r2, [r3, #0]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	f022 0201 	bic.w	r2, r2, #1
 800b5a0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	3301      	adds	r3, #1
 800b5a6:	60bb      	str	r3, [r7, #8]
 800b5a8:	697a      	ldr	r2, [r7, #20]
 800b5aa:	429a      	cmp	r2, r3
 800b5ac:	d307      	bcc.n	800b5be <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	f003 0301 	and.w	r3, r3, #1
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d1f2      	bne.n	800b5a2 <HAL_DMA_IRQHandler+0x2ca>
 800b5bc:	e000      	b.n	800b5c0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800b5be:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2201      	movs	r2, #1
 800b5cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d005      	beq.n	800b5e4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	4798      	blx	r3
 800b5e0:	e000      	b.n	800b5e4 <HAL_DMA_IRQHandler+0x30c>
        return;
 800b5e2:	bf00      	nop
    }
  }
}
 800b5e4:	3718      	adds	r7, #24
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}
 800b5ea:	bf00      	nop

0800b5ec <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b083      	sub	sp, #12
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b5fa:	b2db      	uxtb	r3, r3
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	370c      	adds	r7, #12
 800b600:	46bd      	mov	sp, r7
 800b602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b606:	4770      	bx	lr

0800b608 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b608:	b480      	push	{r7}
 800b60a:	b085      	sub	sp, #20
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	60f8      	str	r0, [r7, #12]
 800b610:	60b9      	str	r1, [r7, #8]
 800b612:	607a      	str	r2, [r7, #4]
 800b614:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	681a      	ldr	r2, [r3, #0]
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b624:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	683a      	ldr	r2, [r7, #0]
 800b62c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	689b      	ldr	r3, [r3, #8]
 800b632:	2b40      	cmp	r3, #64	; 0x40
 800b634:	d108      	bne.n	800b648 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	687a      	ldr	r2, [r7, #4]
 800b63c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	68ba      	ldr	r2, [r7, #8]
 800b644:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800b646:	e007      	b.n	800b658 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	68ba      	ldr	r2, [r7, #8]
 800b64e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	687a      	ldr	r2, [r7, #4]
 800b656:	60da      	str	r2, [r3, #12]
}
 800b658:	bf00      	nop
 800b65a:	3714      	adds	r7, #20
 800b65c:	46bd      	mov	sp, r7
 800b65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b662:	4770      	bx	lr

0800b664 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800b664:	b480      	push	{r7}
 800b666:	b085      	sub	sp, #20
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	b2db      	uxtb	r3, r3
 800b672:	3b10      	subs	r3, #16
 800b674:	4a14      	ldr	r2, [pc, #80]	; (800b6c8 <DMA_CalcBaseAndBitshift+0x64>)
 800b676:	fba2 2303 	umull	r2, r3, r2, r3
 800b67a:	091b      	lsrs	r3, r3, #4
 800b67c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800b67e:	4a13      	ldr	r2, [pc, #76]	; (800b6cc <DMA_CalcBaseAndBitshift+0x68>)
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	4413      	add	r3, r2
 800b684:	781b      	ldrb	r3, [r3, #0]
 800b686:	461a      	mov	r2, r3
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	2b03      	cmp	r3, #3
 800b690:	d909      	bls.n	800b6a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800b69a:	f023 0303 	bic.w	r3, r3, #3
 800b69e:	1d1a      	adds	r2, r3, #4
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	659a      	str	r2, [r3, #88]	; 0x58
 800b6a4:	e007      	b.n	800b6b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800b6ae:	f023 0303 	bic.w	r3, r3, #3
 800b6b2:	687a      	ldr	r2, [r7, #4]
 800b6b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	3714      	adds	r7, #20
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c4:	4770      	bx	lr
 800b6c6:	bf00      	nop
 800b6c8:	aaaaaaab 	.word	0xaaaaaaab
 800b6cc:	0801b1d4 	.word	0x0801b1d4

0800b6d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	b085      	sub	sp, #20
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	699b      	ldr	r3, [r3, #24]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d11f      	bne.n	800b72a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	2b03      	cmp	r3, #3
 800b6ee:	d855      	bhi.n	800b79c <DMA_CheckFifoParam+0xcc>
 800b6f0:	a201      	add	r2, pc, #4	; (adr r2, 800b6f8 <DMA_CheckFifoParam+0x28>)
 800b6f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6f6:	bf00      	nop
 800b6f8:	0800b709 	.word	0x0800b709
 800b6fc:	0800b71b 	.word	0x0800b71b
 800b700:	0800b709 	.word	0x0800b709
 800b704:	0800b79d 	.word	0x0800b79d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b70c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b710:	2b00      	cmp	r3, #0
 800b712:	d045      	beq.n	800b7a0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800b714:	2301      	movs	r3, #1
 800b716:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b718:	e042      	b.n	800b7a0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b71e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b722:	d13f      	bne.n	800b7a4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800b724:	2301      	movs	r3, #1
 800b726:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b728:	e03c      	b.n	800b7a4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	699b      	ldr	r3, [r3, #24]
 800b72e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b732:	d121      	bne.n	800b778 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	2b03      	cmp	r3, #3
 800b738:	d836      	bhi.n	800b7a8 <DMA_CheckFifoParam+0xd8>
 800b73a:	a201      	add	r2, pc, #4	; (adr r2, 800b740 <DMA_CheckFifoParam+0x70>)
 800b73c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b740:	0800b751 	.word	0x0800b751
 800b744:	0800b757 	.word	0x0800b757
 800b748:	0800b751 	.word	0x0800b751
 800b74c:	0800b769 	.word	0x0800b769
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800b750:	2301      	movs	r3, #1
 800b752:	73fb      	strb	r3, [r7, #15]
      break;
 800b754:	e02f      	b.n	800b7b6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b75a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d024      	beq.n	800b7ac <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800b762:	2301      	movs	r3, #1
 800b764:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b766:	e021      	b.n	800b7ac <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b76c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b770:	d11e      	bne.n	800b7b0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800b772:	2301      	movs	r3, #1
 800b774:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800b776:	e01b      	b.n	800b7b0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	2b02      	cmp	r3, #2
 800b77c:	d902      	bls.n	800b784 <DMA_CheckFifoParam+0xb4>
 800b77e:	2b03      	cmp	r3, #3
 800b780:	d003      	beq.n	800b78a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800b782:	e018      	b.n	800b7b6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800b784:	2301      	movs	r3, #1
 800b786:	73fb      	strb	r3, [r7, #15]
      break;
 800b788:	e015      	b.n	800b7b6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b78e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b792:	2b00      	cmp	r3, #0
 800b794:	d00e      	beq.n	800b7b4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800b796:	2301      	movs	r3, #1
 800b798:	73fb      	strb	r3, [r7, #15]
      break;
 800b79a:	e00b      	b.n	800b7b4 <DMA_CheckFifoParam+0xe4>
      break;
 800b79c:	bf00      	nop
 800b79e:	e00a      	b.n	800b7b6 <DMA_CheckFifoParam+0xe6>
      break;
 800b7a0:	bf00      	nop
 800b7a2:	e008      	b.n	800b7b6 <DMA_CheckFifoParam+0xe6>
      break;
 800b7a4:	bf00      	nop
 800b7a6:	e006      	b.n	800b7b6 <DMA_CheckFifoParam+0xe6>
      break;
 800b7a8:	bf00      	nop
 800b7aa:	e004      	b.n	800b7b6 <DMA_CheckFifoParam+0xe6>
      break;
 800b7ac:	bf00      	nop
 800b7ae:	e002      	b.n	800b7b6 <DMA_CheckFifoParam+0xe6>
      break;   
 800b7b0:	bf00      	nop
 800b7b2:	e000      	b.n	800b7b6 <DMA_CheckFifoParam+0xe6>
      break;
 800b7b4:	bf00      	nop
    }
  } 
  
  return status; 
 800b7b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3714      	adds	r7, #20
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c2:	4770      	bx	lr

0800b7c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	b089      	sub	sp, #36	; 0x24
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
 800b7cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b7da:	2300      	movs	r3, #0
 800b7dc:	61fb      	str	r3, [r7, #28]
 800b7de:	e16b      	b.n	800bab8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b7e0:	2201      	movs	r2, #1
 800b7e2:	69fb      	ldr	r3, [r7, #28]
 800b7e4:	fa02 f303 	lsl.w	r3, r2, r3
 800b7e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	697a      	ldr	r2, [r7, #20]
 800b7f0:	4013      	ands	r3, r2
 800b7f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b7f4:	693a      	ldr	r2, [r7, #16]
 800b7f6:	697b      	ldr	r3, [r7, #20]
 800b7f8:	429a      	cmp	r2, r3
 800b7fa:	f040 815a 	bne.w	800bab2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	685b      	ldr	r3, [r3, #4]
 800b802:	2b01      	cmp	r3, #1
 800b804:	d00b      	beq.n	800b81e <HAL_GPIO_Init+0x5a>
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	685b      	ldr	r3, [r3, #4]
 800b80a:	2b02      	cmp	r3, #2
 800b80c:	d007      	beq.n	800b81e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b812:	2b11      	cmp	r3, #17
 800b814:	d003      	beq.n	800b81e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	685b      	ldr	r3, [r3, #4]
 800b81a:	2b12      	cmp	r3, #18
 800b81c:	d130      	bne.n	800b880 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	689b      	ldr	r3, [r3, #8]
 800b822:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b824:	69fb      	ldr	r3, [r7, #28]
 800b826:	005b      	lsls	r3, r3, #1
 800b828:	2203      	movs	r2, #3
 800b82a:	fa02 f303 	lsl.w	r3, r2, r3
 800b82e:	43db      	mvns	r3, r3
 800b830:	69ba      	ldr	r2, [r7, #24]
 800b832:	4013      	ands	r3, r2
 800b834:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	68da      	ldr	r2, [r3, #12]
 800b83a:	69fb      	ldr	r3, [r7, #28]
 800b83c:	005b      	lsls	r3, r3, #1
 800b83e:	fa02 f303 	lsl.w	r3, r2, r3
 800b842:	69ba      	ldr	r2, [r7, #24]
 800b844:	4313      	orrs	r3, r2
 800b846:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	69ba      	ldr	r2, [r7, #24]
 800b84c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	685b      	ldr	r3, [r3, #4]
 800b852:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b854:	2201      	movs	r2, #1
 800b856:	69fb      	ldr	r3, [r7, #28]
 800b858:	fa02 f303 	lsl.w	r3, r2, r3
 800b85c:	43db      	mvns	r3, r3
 800b85e:	69ba      	ldr	r2, [r7, #24]
 800b860:	4013      	ands	r3, r2
 800b862:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	685b      	ldr	r3, [r3, #4]
 800b868:	091b      	lsrs	r3, r3, #4
 800b86a:	f003 0201 	and.w	r2, r3, #1
 800b86e:	69fb      	ldr	r3, [r7, #28]
 800b870:	fa02 f303 	lsl.w	r3, r2, r3
 800b874:	69ba      	ldr	r2, [r7, #24]
 800b876:	4313      	orrs	r3, r2
 800b878:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	69ba      	ldr	r2, [r7, #24]
 800b87e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	68db      	ldr	r3, [r3, #12]
 800b884:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b886:	69fb      	ldr	r3, [r7, #28]
 800b888:	005b      	lsls	r3, r3, #1
 800b88a:	2203      	movs	r2, #3
 800b88c:	fa02 f303 	lsl.w	r3, r2, r3
 800b890:	43db      	mvns	r3, r3
 800b892:	69ba      	ldr	r2, [r7, #24]
 800b894:	4013      	ands	r3, r2
 800b896:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	689a      	ldr	r2, [r3, #8]
 800b89c:	69fb      	ldr	r3, [r7, #28]
 800b89e:	005b      	lsls	r3, r3, #1
 800b8a0:	fa02 f303 	lsl.w	r3, r2, r3
 800b8a4:	69ba      	ldr	r2, [r7, #24]
 800b8a6:	4313      	orrs	r3, r2
 800b8a8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	69ba      	ldr	r2, [r7, #24]
 800b8ae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	685b      	ldr	r3, [r3, #4]
 800b8b4:	2b02      	cmp	r3, #2
 800b8b6:	d003      	beq.n	800b8c0 <HAL_GPIO_Init+0xfc>
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	685b      	ldr	r3, [r3, #4]
 800b8bc:	2b12      	cmp	r3, #18
 800b8be:	d123      	bne.n	800b908 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b8c0:	69fb      	ldr	r3, [r7, #28]
 800b8c2:	08da      	lsrs	r2, r3, #3
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	3208      	adds	r2, #8
 800b8c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b8ce:	69fb      	ldr	r3, [r7, #28]
 800b8d0:	f003 0307 	and.w	r3, r3, #7
 800b8d4:	009b      	lsls	r3, r3, #2
 800b8d6:	220f      	movs	r2, #15
 800b8d8:	fa02 f303 	lsl.w	r3, r2, r3
 800b8dc:	43db      	mvns	r3, r3
 800b8de:	69ba      	ldr	r2, [r7, #24]
 800b8e0:	4013      	ands	r3, r2
 800b8e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	691a      	ldr	r2, [r3, #16]
 800b8e8:	69fb      	ldr	r3, [r7, #28]
 800b8ea:	f003 0307 	and.w	r3, r3, #7
 800b8ee:	009b      	lsls	r3, r3, #2
 800b8f0:	fa02 f303 	lsl.w	r3, r2, r3
 800b8f4:	69ba      	ldr	r2, [r7, #24]
 800b8f6:	4313      	orrs	r3, r2
 800b8f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b8fa:	69fb      	ldr	r3, [r7, #28]
 800b8fc:	08da      	lsrs	r2, r3, #3
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	3208      	adds	r2, #8
 800b902:	69b9      	ldr	r1, [r7, #24]
 800b904:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b90e:	69fb      	ldr	r3, [r7, #28]
 800b910:	005b      	lsls	r3, r3, #1
 800b912:	2203      	movs	r2, #3
 800b914:	fa02 f303 	lsl.w	r3, r2, r3
 800b918:	43db      	mvns	r3, r3
 800b91a:	69ba      	ldr	r2, [r7, #24]
 800b91c:	4013      	ands	r3, r2
 800b91e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	685b      	ldr	r3, [r3, #4]
 800b924:	f003 0203 	and.w	r2, r3, #3
 800b928:	69fb      	ldr	r3, [r7, #28]
 800b92a:	005b      	lsls	r3, r3, #1
 800b92c:	fa02 f303 	lsl.w	r3, r2, r3
 800b930:	69ba      	ldr	r2, [r7, #24]
 800b932:	4313      	orrs	r3, r2
 800b934:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	69ba      	ldr	r2, [r7, #24]
 800b93a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	685b      	ldr	r3, [r3, #4]
 800b940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b944:	2b00      	cmp	r3, #0
 800b946:	f000 80b4 	beq.w	800bab2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b94a:	2300      	movs	r3, #0
 800b94c:	60fb      	str	r3, [r7, #12]
 800b94e:	4b5f      	ldr	r3, [pc, #380]	; (800bacc <HAL_GPIO_Init+0x308>)
 800b950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b952:	4a5e      	ldr	r2, [pc, #376]	; (800bacc <HAL_GPIO_Init+0x308>)
 800b954:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b958:	6453      	str	r3, [r2, #68]	; 0x44
 800b95a:	4b5c      	ldr	r3, [pc, #368]	; (800bacc <HAL_GPIO_Init+0x308>)
 800b95c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b95e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b962:	60fb      	str	r3, [r7, #12]
 800b964:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b966:	4a5a      	ldr	r2, [pc, #360]	; (800bad0 <HAL_GPIO_Init+0x30c>)
 800b968:	69fb      	ldr	r3, [r7, #28]
 800b96a:	089b      	lsrs	r3, r3, #2
 800b96c:	3302      	adds	r3, #2
 800b96e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b972:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b974:	69fb      	ldr	r3, [r7, #28]
 800b976:	f003 0303 	and.w	r3, r3, #3
 800b97a:	009b      	lsls	r3, r3, #2
 800b97c:	220f      	movs	r2, #15
 800b97e:	fa02 f303 	lsl.w	r3, r2, r3
 800b982:	43db      	mvns	r3, r3
 800b984:	69ba      	ldr	r2, [r7, #24]
 800b986:	4013      	ands	r3, r2
 800b988:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	4a51      	ldr	r2, [pc, #324]	; (800bad4 <HAL_GPIO_Init+0x310>)
 800b98e:	4293      	cmp	r3, r2
 800b990:	d02b      	beq.n	800b9ea <HAL_GPIO_Init+0x226>
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	4a50      	ldr	r2, [pc, #320]	; (800bad8 <HAL_GPIO_Init+0x314>)
 800b996:	4293      	cmp	r3, r2
 800b998:	d025      	beq.n	800b9e6 <HAL_GPIO_Init+0x222>
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	4a4f      	ldr	r2, [pc, #316]	; (800badc <HAL_GPIO_Init+0x318>)
 800b99e:	4293      	cmp	r3, r2
 800b9a0:	d01f      	beq.n	800b9e2 <HAL_GPIO_Init+0x21e>
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	4a4e      	ldr	r2, [pc, #312]	; (800bae0 <HAL_GPIO_Init+0x31c>)
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	d019      	beq.n	800b9de <HAL_GPIO_Init+0x21a>
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	4a4d      	ldr	r2, [pc, #308]	; (800bae4 <HAL_GPIO_Init+0x320>)
 800b9ae:	4293      	cmp	r3, r2
 800b9b0:	d013      	beq.n	800b9da <HAL_GPIO_Init+0x216>
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	4a4c      	ldr	r2, [pc, #304]	; (800bae8 <HAL_GPIO_Init+0x324>)
 800b9b6:	4293      	cmp	r3, r2
 800b9b8:	d00d      	beq.n	800b9d6 <HAL_GPIO_Init+0x212>
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	4a4b      	ldr	r2, [pc, #300]	; (800baec <HAL_GPIO_Init+0x328>)
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	d007      	beq.n	800b9d2 <HAL_GPIO_Init+0x20e>
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	4a4a      	ldr	r2, [pc, #296]	; (800baf0 <HAL_GPIO_Init+0x32c>)
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	d101      	bne.n	800b9ce <HAL_GPIO_Init+0x20a>
 800b9ca:	2307      	movs	r3, #7
 800b9cc:	e00e      	b.n	800b9ec <HAL_GPIO_Init+0x228>
 800b9ce:	2308      	movs	r3, #8
 800b9d0:	e00c      	b.n	800b9ec <HAL_GPIO_Init+0x228>
 800b9d2:	2306      	movs	r3, #6
 800b9d4:	e00a      	b.n	800b9ec <HAL_GPIO_Init+0x228>
 800b9d6:	2305      	movs	r3, #5
 800b9d8:	e008      	b.n	800b9ec <HAL_GPIO_Init+0x228>
 800b9da:	2304      	movs	r3, #4
 800b9dc:	e006      	b.n	800b9ec <HAL_GPIO_Init+0x228>
 800b9de:	2303      	movs	r3, #3
 800b9e0:	e004      	b.n	800b9ec <HAL_GPIO_Init+0x228>
 800b9e2:	2302      	movs	r3, #2
 800b9e4:	e002      	b.n	800b9ec <HAL_GPIO_Init+0x228>
 800b9e6:	2301      	movs	r3, #1
 800b9e8:	e000      	b.n	800b9ec <HAL_GPIO_Init+0x228>
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	69fa      	ldr	r2, [r7, #28]
 800b9ee:	f002 0203 	and.w	r2, r2, #3
 800b9f2:	0092      	lsls	r2, r2, #2
 800b9f4:	4093      	lsls	r3, r2
 800b9f6:	69ba      	ldr	r2, [r7, #24]
 800b9f8:	4313      	orrs	r3, r2
 800b9fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b9fc:	4934      	ldr	r1, [pc, #208]	; (800bad0 <HAL_GPIO_Init+0x30c>)
 800b9fe:	69fb      	ldr	r3, [r7, #28]
 800ba00:	089b      	lsrs	r3, r3, #2
 800ba02:	3302      	adds	r3, #2
 800ba04:	69ba      	ldr	r2, [r7, #24]
 800ba06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ba0a:	4b3a      	ldr	r3, [pc, #232]	; (800baf4 <HAL_GPIO_Init+0x330>)
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ba10:	693b      	ldr	r3, [r7, #16]
 800ba12:	43db      	mvns	r3, r3
 800ba14:	69ba      	ldr	r2, [r7, #24]
 800ba16:	4013      	ands	r3, r2
 800ba18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	685b      	ldr	r3, [r3, #4]
 800ba1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d003      	beq.n	800ba2e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800ba26:	69ba      	ldr	r2, [r7, #24]
 800ba28:	693b      	ldr	r3, [r7, #16]
 800ba2a:	4313      	orrs	r3, r2
 800ba2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800ba2e:	4a31      	ldr	r2, [pc, #196]	; (800baf4 <HAL_GPIO_Init+0x330>)
 800ba30:	69bb      	ldr	r3, [r7, #24]
 800ba32:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800ba34:	4b2f      	ldr	r3, [pc, #188]	; (800baf4 <HAL_GPIO_Init+0x330>)
 800ba36:	685b      	ldr	r3, [r3, #4]
 800ba38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ba3a:	693b      	ldr	r3, [r7, #16]
 800ba3c:	43db      	mvns	r3, r3
 800ba3e:	69ba      	ldr	r2, [r7, #24]
 800ba40:	4013      	ands	r3, r2
 800ba42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	685b      	ldr	r3, [r3, #4]
 800ba48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d003      	beq.n	800ba58 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800ba50:	69ba      	ldr	r2, [r7, #24]
 800ba52:	693b      	ldr	r3, [r7, #16]
 800ba54:	4313      	orrs	r3, r2
 800ba56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800ba58:	4a26      	ldr	r2, [pc, #152]	; (800baf4 <HAL_GPIO_Init+0x330>)
 800ba5a:	69bb      	ldr	r3, [r7, #24]
 800ba5c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800ba5e:	4b25      	ldr	r3, [pc, #148]	; (800baf4 <HAL_GPIO_Init+0x330>)
 800ba60:	689b      	ldr	r3, [r3, #8]
 800ba62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ba64:	693b      	ldr	r3, [r7, #16]
 800ba66:	43db      	mvns	r3, r3
 800ba68:	69ba      	ldr	r2, [r7, #24]
 800ba6a:	4013      	ands	r3, r2
 800ba6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	685b      	ldr	r3, [r3, #4]
 800ba72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d003      	beq.n	800ba82 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800ba7a:	69ba      	ldr	r2, [r7, #24]
 800ba7c:	693b      	ldr	r3, [r7, #16]
 800ba7e:	4313      	orrs	r3, r2
 800ba80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800ba82:	4a1c      	ldr	r2, [pc, #112]	; (800baf4 <HAL_GPIO_Init+0x330>)
 800ba84:	69bb      	ldr	r3, [r7, #24]
 800ba86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800ba88:	4b1a      	ldr	r3, [pc, #104]	; (800baf4 <HAL_GPIO_Init+0x330>)
 800ba8a:	68db      	ldr	r3, [r3, #12]
 800ba8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ba8e:	693b      	ldr	r3, [r7, #16]
 800ba90:	43db      	mvns	r3, r3
 800ba92:	69ba      	ldr	r2, [r7, #24]
 800ba94:	4013      	ands	r3, r2
 800ba96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	685b      	ldr	r3, [r3, #4]
 800ba9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d003      	beq.n	800baac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800baa4:	69ba      	ldr	r2, [r7, #24]
 800baa6:	693b      	ldr	r3, [r7, #16]
 800baa8:	4313      	orrs	r3, r2
 800baaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800baac:	4a11      	ldr	r2, [pc, #68]	; (800baf4 <HAL_GPIO_Init+0x330>)
 800baae:	69bb      	ldr	r3, [r7, #24]
 800bab0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800bab2:	69fb      	ldr	r3, [r7, #28]
 800bab4:	3301      	adds	r3, #1
 800bab6:	61fb      	str	r3, [r7, #28]
 800bab8:	69fb      	ldr	r3, [r7, #28]
 800baba:	2b0f      	cmp	r3, #15
 800babc:	f67f ae90 	bls.w	800b7e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800bac0:	bf00      	nop
 800bac2:	3724      	adds	r7, #36	; 0x24
 800bac4:	46bd      	mov	sp, r7
 800bac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baca:	4770      	bx	lr
 800bacc:	40023800 	.word	0x40023800
 800bad0:	40013800 	.word	0x40013800
 800bad4:	40020000 	.word	0x40020000
 800bad8:	40020400 	.word	0x40020400
 800badc:	40020800 	.word	0x40020800
 800bae0:	40020c00 	.word	0x40020c00
 800bae4:	40021000 	.word	0x40021000
 800bae8:	40021400 	.word	0x40021400
 800baec:	40021800 	.word	0x40021800
 800baf0:	40021c00 	.word	0x40021c00
 800baf4:	40013c00 	.word	0x40013c00

0800baf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800baf8:	b480      	push	{r7}
 800bafa:	b083      	sub	sp, #12
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
 800bb00:	460b      	mov	r3, r1
 800bb02:	807b      	strh	r3, [r7, #2]
 800bb04:	4613      	mov	r3, r2
 800bb06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800bb08:	787b      	ldrb	r3, [r7, #1]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d003      	beq.n	800bb16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800bb0e:	887a      	ldrh	r2, [r7, #2]
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800bb14:	e003      	b.n	800bb1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800bb16:	887b      	ldrh	r3, [r7, #2]
 800bb18:	041a      	lsls	r2, r3, #16
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	619a      	str	r2, [r3, #24]
}
 800bb1e:	bf00      	nop
 800bb20:	370c      	adds	r7, #12
 800bb22:	46bd      	mov	sp, r7
 800bb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb28:	4770      	bx	lr
	...

0800bb2c <HAL_NOR_Init>:
  * @param  Timing pointer to NOR control timing structure 
  * @param  ExtTiming pointer to NOR extended mode timing structure    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b084      	sub	sp, #16
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	60f8      	str	r0, [r7, #12]
 800bb34:	60b9      	str	r1, [r7, #8]
 800bb36:	607a      	str	r2, [r7, #4]
  /* Check the NOR handle parameter */
  if(hnor == NULL)
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d101      	bne.n	800bb42 <HAL_NOR_Init+0x16>
  {
     return HAL_ERROR;
 800bb3e:	2301      	movs	r3, #1
 800bb40:	e043      	b.n	800bbca <HAL_NOR_Init+0x9e>
  }
  
  if(hnor->State == HAL_NOR_STATE_RESET)
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800bb48:	b2db      	uxtb	r3, r3
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d106      	bne.n	800bb5c <HAL_NOR_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	2200      	movs	r2, #0
 800bb52:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 800bb56:	68f8      	ldr	r0, [r7, #12]
 800bb58:	f7f7 f954 	bl	8002e04 <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }
  
  /* Initialize NOR control Interface */
  FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	681a      	ldr	r2, [r3, #0]
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	3308      	adds	r3, #8
 800bb64:	4619      	mov	r1, r3
 800bb66:	4610      	mov	r0, r2
 800bb68:	f003 f810 	bl	800eb8c <FSMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank); 
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	6818      	ldr	r0, [r3, #0]
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	689b      	ldr	r3, [r3, #8]
 800bb74:	461a      	mov	r2, r3
 800bb76:	68b9      	ldr	r1, [r7, #8]
 800bb78:	f003 f85a 	bl	800ec30 <FSMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	6858      	ldr	r0, [r3, #4]
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	689a      	ldr	r2, [r3, #8]
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb88:	6879      	ldr	r1, [r7, #4]
 800bb8a:	f003 f88f 	bl	800ecac <FSMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	68fa      	ldr	r2, [r7, #12]
 800bb94:	6892      	ldr	r2, [r2, #8]
 800bb96:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	68fa      	ldr	r2, [r7, #12]
 800bba0:	6892      	ldr	r2, [r2, #8]
 800bba2:	f041 0101 	orr.w	r1, r1, #1
 800bba6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	695b      	ldr	r3, [r3, #20]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d103      	bne.n	800bbba <HAL_NOR_Init+0x8e>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 800bbb2:	4b08      	ldr	r3, [pc, #32]	; (800bbd4 <HAL_NOR_Init+0xa8>)
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	601a      	str	r2, [r3, #0]
 800bbb8:	e002      	b.n	800bbc0 <HAL_NOR_Init+0x94>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 800bbba:	4b06      	ldr	r3, [pc, #24]	; (800bbd4 <HAL_NOR_Init+0xa8>)
 800bbbc:	2201      	movs	r2, #1
 800bbbe:	601a      	str	r2, [r3, #0]
  }

  /* Check the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY; 
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	2201      	movs	r2, #1
 800bbc4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  return HAL_OK;
 800bbc8:	2300      	movs	r3, #0
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	3710      	adds	r7, #16
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}
 800bbd2:	bf00      	nop
 800bbd4:	20001458 	.word	0x20001458

0800bbd8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800bbd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbda:	b08f      	sub	sp, #60	; 0x3c
 800bbdc:	af0a      	add	r7, sp, #40	; 0x28
 800bbde:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d101      	bne.n	800bbea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	e10f      	b.n	800be0a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800bbf6:	b2db      	uxtb	r3, r3
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d106      	bne.n	800bc0a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2200      	movs	r2, #0
 800bc00:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f009 fa79 	bl	80150fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2203      	movs	r2, #3
 800bc0e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800bc12:	68bb      	ldr	r3, [r7, #8]
 800bc14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d102      	bne.n	800bc24 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2200      	movs	r2, #0
 800bc22:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	4618      	mov	r0, r3
 800bc2a:	f003 f994 	bl	800ef56 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	603b      	str	r3, [r7, #0]
 800bc34:	687e      	ldr	r6, [r7, #4]
 800bc36:	466d      	mov	r5, sp
 800bc38:	f106 0410 	add.w	r4, r6, #16
 800bc3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bc3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bc40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bc42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bc44:	e894 0003 	ldmia.w	r4, {r0, r1}
 800bc48:	e885 0003 	stmia.w	r5, {r0, r1}
 800bc4c:	1d33      	adds	r3, r6, #4
 800bc4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bc50:	6838      	ldr	r0, [r7, #0]
 800bc52:	f003 f86b 	bl	800ed2c <USB_CoreInit>
 800bc56:	4603      	mov	r3, r0
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d005      	beq.n	800bc68 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2202      	movs	r2, #2
 800bc60:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800bc64:	2301      	movs	r3, #1
 800bc66:	e0d0      	b.n	800be0a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	2100      	movs	r1, #0
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f003 f982 	bl	800ef78 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bc74:	2300      	movs	r3, #0
 800bc76:	73fb      	strb	r3, [r7, #15]
 800bc78:	e04a      	b.n	800bd10 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800bc7a:	7bfa      	ldrb	r2, [r7, #15]
 800bc7c:	6879      	ldr	r1, [r7, #4]
 800bc7e:	4613      	mov	r3, r2
 800bc80:	00db      	lsls	r3, r3, #3
 800bc82:	1a9b      	subs	r3, r3, r2
 800bc84:	009b      	lsls	r3, r3, #2
 800bc86:	440b      	add	r3, r1
 800bc88:	333d      	adds	r3, #61	; 0x3d
 800bc8a:	2201      	movs	r2, #1
 800bc8c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800bc8e:	7bfa      	ldrb	r2, [r7, #15]
 800bc90:	6879      	ldr	r1, [r7, #4]
 800bc92:	4613      	mov	r3, r2
 800bc94:	00db      	lsls	r3, r3, #3
 800bc96:	1a9b      	subs	r3, r3, r2
 800bc98:	009b      	lsls	r3, r3, #2
 800bc9a:	440b      	add	r3, r1
 800bc9c:	333c      	adds	r3, #60	; 0x3c
 800bc9e:	7bfa      	ldrb	r2, [r7, #15]
 800bca0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800bca2:	7bfa      	ldrb	r2, [r7, #15]
 800bca4:	7bfb      	ldrb	r3, [r7, #15]
 800bca6:	b298      	uxth	r0, r3
 800bca8:	6879      	ldr	r1, [r7, #4]
 800bcaa:	4613      	mov	r3, r2
 800bcac:	00db      	lsls	r3, r3, #3
 800bcae:	1a9b      	subs	r3, r3, r2
 800bcb0:	009b      	lsls	r3, r3, #2
 800bcb2:	440b      	add	r3, r1
 800bcb4:	3342      	adds	r3, #66	; 0x42
 800bcb6:	4602      	mov	r2, r0
 800bcb8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800bcba:	7bfa      	ldrb	r2, [r7, #15]
 800bcbc:	6879      	ldr	r1, [r7, #4]
 800bcbe:	4613      	mov	r3, r2
 800bcc0:	00db      	lsls	r3, r3, #3
 800bcc2:	1a9b      	subs	r3, r3, r2
 800bcc4:	009b      	lsls	r3, r3, #2
 800bcc6:	440b      	add	r3, r1
 800bcc8:	333f      	adds	r3, #63	; 0x3f
 800bcca:	2200      	movs	r2, #0
 800bccc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800bcce:	7bfa      	ldrb	r2, [r7, #15]
 800bcd0:	6879      	ldr	r1, [r7, #4]
 800bcd2:	4613      	mov	r3, r2
 800bcd4:	00db      	lsls	r3, r3, #3
 800bcd6:	1a9b      	subs	r3, r3, r2
 800bcd8:	009b      	lsls	r3, r3, #2
 800bcda:	440b      	add	r3, r1
 800bcdc:	3344      	adds	r3, #68	; 0x44
 800bcde:	2200      	movs	r2, #0
 800bce0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800bce2:	7bfa      	ldrb	r2, [r7, #15]
 800bce4:	6879      	ldr	r1, [r7, #4]
 800bce6:	4613      	mov	r3, r2
 800bce8:	00db      	lsls	r3, r3, #3
 800bcea:	1a9b      	subs	r3, r3, r2
 800bcec:	009b      	lsls	r3, r3, #2
 800bcee:	440b      	add	r3, r1
 800bcf0:	3348      	adds	r3, #72	; 0x48
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800bcf6:	7bfa      	ldrb	r2, [r7, #15]
 800bcf8:	6879      	ldr	r1, [r7, #4]
 800bcfa:	4613      	mov	r3, r2
 800bcfc:	00db      	lsls	r3, r3, #3
 800bcfe:	1a9b      	subs	r3, r3, r2
 800bd00:	009b      	lsls	r3, r3, #2
 800bd02:	440b      	add	r3, r1
 800bd04:	3350      	adds	r3, #80	; 0x50
 800bd06:	2200      	movs	r2, #0
 800bd08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bd0a:	7bfb      	ldrb	r3, [r7, #15]
 800bd0c:	3301      	adds	r3, #1
 800bd0e:	73fb      	strb	r3, [r7, #15]
 800bd10:	7bfa      	ldrb	r2, [r7, #15]
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	685b      	ldr	r3, [r3, #4]
 800bd16:	429a      	cmp	r2, r3
 800bd18:	d3af      	bcc.n	800bc7a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	73fb      	strb	r3, [r7, #15]
 800bd1e:	e044      	b.n	800bdaa <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800bd20:	7bfa      	ldrb	r2, [r7, #15]
 800bd22:	6879      	ldr	r1, [r7, #4]
 800bd24:	4613      	mov	r3, r2
 800bd26:	00db      	lsls	r3, r3, #3
 800bd28:	1a9b      	subs	r3, r3, r2
 800bd2a:	009b      	lsls	r3, r3, #2
 800bd2c:	440b      	add	r3, r1
 800bd2e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800bd32:	2200      	movs	r2, #0
 800bd34:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800bd36:	7bfa      	ldrb	r2, [r7, #15]
 800bd38:	6879      	ldr	r1, [r7, #4]
 800bd3a:	4613      	mov	r3, r2
 800bd3c:	00db      	lsls	r3, r3, #3
 800bd3e:	1a9b      	subs	r3, r3, r2
 800bd40:	009b      	lsls	r3, r3, #2
 800bd42:	440b      	add	r3, r1
 800bd44:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800bd48:	7bfa      	ldrb	r2, [r7, #15]
 800bd4a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800bd4c:	7bfa      	ldrb	r2, [r7, #15]
 800bd4e:	6879      	ldr	r1, [r7, #4]
 800bd50:	4613      	mov	r3, r2
 800bd52:	00db      	lsls	r3, r3, #3
 800bd54:	1a9b      	subs	r3, r3, r2
 800bd56:	009b      	lsls	r3, r3, #2
 800bd58:	440b      	add	r3, r1
 800bd5a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800bd5e:	2200      	movs	r2, #0
 800bd60:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800bd62:	7bfa      	ldrb	r2, [r7, #15]
 800bd64:	6879      	ldr	r1, [r7, #4]
 800bd66:	4613      	mov	r3, r2
 800bd68:	00db      	lsls	r3, r3, #3
 800bd6a:	1a9b      	subs	r3, r3, r2
 800bd6c:	009b      	lsls	r3, r3, #2
 800bd6e:	440b      	add	r3, r1
 800bd70:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800bd74:	2200      	movs	r2, #0
 800bd76:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800bd78:	7bfa      	ldrb	r2, [r7, #15]
 800bd7a:	6879      	ldr	r1, [r7, #4]
 800bd7c:	4613      	mov	r3, r2
 800bd7e:	00db      	lsls	r3, r3, #3
 800bd80:	1a9b      	subs	r3, r3, r2
 800bd82:	009b      	lsls	r3, r3, #2
 800bd84:	440b      	add	r3, r1
 800bd86:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800bd8e:	7bfa      	ldrb	r2, [r7, #15]
 800bd90:	6879      	ldr	r1, [r7, #4]
 800bd92:	4613      	mov	r3, r2
 800bd94:	00db      	lsls	r3, r3, #3
 800bd96:	1a9b      	subs	r3, r3, r2
 800bd98:	009b      	lsls	r3, r3, #2
 800bd9a:	440b      	add	r3, r1
 800bd9c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800bda0:	2200      	movs	r2, #0
 800bda2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bda4:	7bfb      	ldrb	r3, [r7, #15]
 800bda6:	3301      	adds	r3, #1
 800bda8:	73fb      	strb	r3, [r7, #15]
 800bdaa:	7bfa      	ldrb	r2, [r7, #15]
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	685b      	ldr	r3, [r3, #4]
 800bdb0:	429a      	cmp	r2, r3
 800bdb2:	d3b5      	bcc.n	800bd20 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	603b      	str	r3, [r7, #0]
 800bdba:	687e      	ldr	r6, [r7, #4]
 800bdbc:	466d      	mov	r5, sp
 800bdbe:	f106 0410 	add.w	r4, r6, #16
 800bdc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bdc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bdc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bdc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bdca:	e894 0003 	ldmia.w	r4, {r0, r1}
 800bdce:	e885 0003 	stmia.w	r5, {r0, r1}
 800bdd2:	1d33      	adds	r3, r6, #4
 800bdd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bdd6:	6838      	ldr	r0, [r7, #0]
 800bdd8:	f003 f8f8 	bl	800efcc <USB_DevInit>
 800bddc:	4603      	mov	r3, r0
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d005      	beq.n	800bdee <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2202      	movs	r2, #2
 800bde6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800bdea:	2301      	movs	r3, #1
 800bdec:	e00d      	b.n	800be0a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2201      	movs	r2, #1
 800bdfa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	4618      	mov	r0, r3
 800be04:	f004 f8ed 	bl	800ffe2 <USB_DevDisconnect>

  return HAL_OK;
 800be08:	2300      	movs	r3, #0
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3714      	adds	r7, #20
 800be0e:	46bd      	mov	sp, r7
 800be10:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800be12 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800be12:	b580      	push	{r7, lr}
 800be14:	b084      	sub	sp, #16
 800be16:	af00      	add	r7, sp, #0
 800be18:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800be26:	2b01      	cmp	r3, #1
 800be28:	d101      	bne.n	800be2e <HAL_PCD_Start+0x1c>
 800be2a:	2302      	movs	r3, #2
 800be2c:	e020      	b.n	800be70 <HAL_PCD_Start+0x5e>
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2201      	movs	r2, #1
 800be32:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be3a:	2b01      	cmp	r3, #1
 800be3c:	d109      	bne.n	800be52 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800be42:	2b01      	cmp	r3, #1
 800be44:	d005      	beq.n	800be52 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be4a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	4618      	mov	r0, r3
 800be58:	f004 f8ab 	bl	800ffb2 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	4618      	mov	r0, r3
 800be62:	f003 f867 	bl	800ef34 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2200      	movs	r2, #0
 800be6a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800be6e:	2300      	movs	r3, #0
}
 800be70:	4618      	mov	r0, r3
 800be72:	3710      	adds	r7, #16
 800be74:	46bd      	mov	sp, r7
 800be76:	bd80      	pop	{r7, pc}

0800be78 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800be78:	b590      	push	{r4, r7, lr}
 800be7a:	b08d      	sub	sp, #52	; 0x34
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be86:	6a3b      	ldr	r3, [r7, #32]
 800be88:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	4618      	mov	r0, r3
 800be90:	f004 f952 	bl	8010138 <USB_GetMode>
 800be94:	4603      	mov	r3, r0
 800be96:	2b00      	cmp	r3, #0
 800be98:	f040 838e 	bne.w	800c5b8 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	4618      	mov	r0, r3
 800bea2:	f004 f8b6 	bl	8010012 <USB_ReadInterrupts>
 800bea6:	4603      	mov	r3, r0
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	f000 8384 	beq.w	800c5b6 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	4618      	mov	r0, r3
 800beb4:	f004 f8ad 	bl	8010012 <USB_ReadInterrupts>
 800beb8:	4603      	mov	r3, r0
 800beba:	f003 0302 	and.w	r3, r3, #2
 800bebe:	2b02      	cmp	r3, #2
 800bec0:	d107      	bne.n	800bed2 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	695a      	ldr	r2, [r3, #20]
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	f002 0202 	and.w	r2, r2, #2
 800bed0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	4618      	mov	r0, r3
 800bed8:	f004 f89b 	bl	8010012 <USB_ReadInterrupts>
 800bedc:	4603      	mov	r3, r0
 800bede:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bee2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800bee6:	d17b      	bne.n	800bfe0 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 800bee8:	2300      	movs	r3, #0
 800beea:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	4618      	mov	r0, r3
 800bef2:	f004 f8a1 	bl	8010038 <USB_ReadDevAllOutEpInterrupt>
 800bef6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800bef8:	e06f      	b.n	800bfda <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 800befa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800befc:	f003 0301 	and.w	r3, r3, #1
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d064      	beq.n	800bfce <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf0a:	b2d2      	uxtb	r2, r2
 800bf0c:	4611      	mov	r1, r2
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f004 f8c6 	bl	80100a0 <USB_ReadDevOutEPInterrupt>
 800bf14:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800bf16:	69bb      	ldr	r3, [r7, #24]
 800bf18:	f003 0301 	and.w	r3, r3, #1
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d00c      	beq.n	800bf3a <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800bf20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf22:	015a      	lsls	r2, r3, #5
 800bf24:	69fb      	ldr	r3, [r7, #28]
 800bf26:	4413      	add	r3, r2
 800bf28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf2c:	461a      	mov	r2, r3
 800bf2e:	2301      	movs	r3, #1
 800bf30:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800bf32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f000 fe0d 	bl	800cb54 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800bf3a:	69bb      	ldr	r3, [r7, #24]
 800bf3c:	f003 0308 	and.w	r3, r3, #8
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d00c      	beq.n	800bf5e <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800bf44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f000 ff0c 	bl	800cd64 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800bf4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf4e:	015a      	lsls	r2, r3, #5
 800bf50:	69fb      	ldr	r3, [r7, #28]
 800bf52:	4413      	add	r3, r2
 800bf54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf58:	461a      	mov	r2, r3
 800bf5a:	2308      	movs	r3, #8
 800bf5c:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800bf5e:	69bb      	ldr	r3, [r7, #24]
 800bf60:	f003 0310 	and.w	r3, r3, #16
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d008      	beq.n	800bf7a <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800bf68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf6a:	015a      	lsls	r2, r3, #5
 800bf6c:	69fb      	ldr	r3, [r7, #28]
 800bf6e:	4413      	add	r3, r2
 800bf70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf74:	461a      	mov	r2, r3
 800bf76:	2310      	movs	r3, #16
 800bf78:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800bf7a:	69bb      	ldr	r3, [r7, #24]
 800bf7c:	f003 0320 	and.w	r3, r3, #32
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d015      	beq.n	800bfb0 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	691b      	ldr	r3, [r3, #16]
 800bf88:	2b01      	cmp	r3, #1
 800bf8a:	d108      	bne.n	800bf9e <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	6818      	ldr	r0, [r3, #0]
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800bf96:	461a      	mov	r2, r3
 800bf98:	2101      	movs	r1, #1
 800bf9a:	f004 f911 	bl	80101c0 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800bf9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfa0:	015a      	lsls	r2, r3, #5
 800bfa2:	69fb      	ldr	r3, [r7, #28]
 800bfa4:	4413      	add	r3, r2
 800bfa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfaa:	461a      	mov	r2, r3
 800bfac:	2320      	movs	r3, #32
 800bfae:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800bfb0:	69bb      	ldr	r3, [r7, #24]
 800bfb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d009      	beq.n	800bfce <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800bfba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfbc:	015a      	lsls	r2, r3, #5
 800bfbe:	69fb      	ldr	r3, [r7, #28]
 800bfc0:	4413      	add	r3, r2
 800bfc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfc6:	461a      	mov	r2, r3
 800bfc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bfcc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800bfce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd0:	3301      	adds	r3, #1
 800bfd2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800bfd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd6:	085b      	lsrs	r3, r3, #1
 800bfd8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800bfda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d18c      	bne.n	800befa <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	f004 f814 	bl	8010012 <USB_ReadInterrupts>
 800bfea:	4603      	mov	r3, r0
 800bfec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bff0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bff4:	f040 80c4 	bne.w	800c180 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	4618      	mov	r0, r3
 800bffe:	f004 f835 	bl	801006c <USB_ReadDevAllInEpInterrupt>
 800c002:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800c004:	2300      	movs	r3, #0
 800c006:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800c008:	e0b6      	b.n	800c178 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800c00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c00c:	f003 0301 	and.w	r3, r3, #1
 800c010:	2b00      	cmp	r3, #0
 800c012:	f000 80ab 	beq.w	800c16c <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c01c:	b2d2      	uxtb	r2, r2
 800c01e:	4611      	mov	r1, r2
 800c020:	4618      	mov	r0, r3
 800c022:	f004 f85b 	bl	80100dc <USB_ReadDevInEPInterrupt>
 800c026:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800c028:	69bb      	ldr	r3, [r7, #24]
 800c02a:	f003 0301 	and.w	r3, r3, #1
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d05b      	beq.n	800c0ea <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c034:	f003 030f 	and.w	r3, r3, #15
 800c038:	2201      	movs	r2, #1
 800c03a:	fa02 f303 	lsl.w	r3, r2, r3
 800c03e:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c040:	69fb      	ldr	r3, [r7, #28]
 800c042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c046:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c048:	697b      	ldr	r3, [r7, #20]
 800c04a:	43db      	mvns	r3, r3
 800c04c:	69f9      	ldr	r1, [r7, #28]
 800c04e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c052:	4013      	ands	r3, r2
 800c054:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800c056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c058:	015a      	lsls	r2, r3, #5
 800c05a:	69fb      	ldr	r3, [r7, #28]
 800c05c:	4413      	add	r3, r2
 800c05e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c062:	461a      	mov	r2, r3
 800c064:	2301      	movs	r3, #1
 800c066:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	691b      	ldr	r3, [r3, #16]
 800c06c:	2b01      	cmp	r3, #1
 800c06e:	d11b      	bne.n	800c0a8 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800c070:	6879      	ldr	r1, [r7, #4]
 800c072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c074:	4613      	mov	r3, r2
 800c076:	00db      	lsls	r3, r3, #3
 800c078:	1a9b      	subs	r3, r3, r2
 800c07a:	009b      	lsls	r3, r3, #2
 800c07c:	440b      	add	r3, r1
 800c07e:	3348      	adds	r3, #72	; 0x48
 800c080:	6819      	ldr	r1, [r3, #0]
 800c082:	6878      	ldr	r0, [r7, #4]
 800c084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c086:	4613      	mov	r3, r2
 800c088:	00db      	lsls	r3, r3, #3
 800c08a:	1a9b      	subs	r3, r3, r2
 800c08c:	009b      	lsls	r3, r3, #2
 800c08e:	4403      	add	r3, r0
 800c090:	3344      	adds	r3, #68	; 0x44
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	4419      	add	r1, r3
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c09a:	4613      	mov	r3, r2
 800c09c:	00db      	lsls	r3, r3, #3
 800c09e:	1a9b      	subs	r3, r3, r2
 800c0a0:	009b      	lsls	r3, r3, #2
 800c0a2:	4403      	add	r3, r0
 800c0a4:	3348      	adds	r3, #72	; 0x48
 800c0a6:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800c0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0aa:	b2db      	uxtb	r3, r3
 800c0ac:	4619      	mov	r1, r3
 800c0ae:	6878      	ldr	r0, [r7, #4]
 800c0b0:	f009 f8a5 	bl	80151fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	691b      	ldr	r3, [r3, #16]
 800c0b8:	2b01      	cmp	r3, #1
 800c0ba:	d116      	bne.n	800c0ea <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800c0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d113      	bne.n	800c0ea <HAL_PCD_IRQHandler+0x272>
 800c0c2:	6879      	ldr	r1, [r7, #4]
 800c0c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0c6:	4613      	mov	r3, r2
 800c0c8:	00db      	lsls	r3, r3, #3
 800c0ca:	1a9b      	subs	r3, r3, r2
 800c0cc:	009b      	lsls	r3, r3, #2
 800c0ce:	440b      	add	r3, r1
 800c0d0:	3350      	adds	r3, #80	; 0x50
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d108      	bne.n	800c0ea <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	6818      	ldr	r0, [r3, #0]
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c0e2:	461a      	mov	r2, r3
 800c0e4:	2101      	movs	r1, #1
 800c0e6:	f004 f86b 	bl	80101c0 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800c0ea:	69bb      	ldr	r3, [r7, #24]
 800c0ec:	f003 0308 	and.w	r3, r3, #8
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d008      	beq.n	800c106 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800c0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f6:	015a      	lsls	r2, r3, #5
 800c0f8:	69fb      	ldr	r3, [r7, #28]
 800c0fa:	4413      	add	r3, r2
 800c0fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c100:	461a      	mov	r2, r3
 800c102:	2308      	movs	r3, #8
 800c104:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800c106:	69bb      	ldr	r3, [r7, #24]
 800c108:	f003 0310 	and.w	r3, r3, #16
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d008      	beq.n	800c122 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800c110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c112:	015a      	lsls	r2, r3, #5
 800c114:	69fb      	ldr	r3, [r7, #28]
 800c116:	4413      	add	r3, r2
 800c118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c11c:	461a      	mov	r2, r3
 800c11e:	2310      	movs	r3, #16
 800c120:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800c122:	69bb      	ldr	r3, [r7, #24]
 800c124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d008      	beq.n	800c13e <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800c12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c12e:	015a      	lsls	r2, r3, #5
 800c130:	69fb      	ldr	r3, [r7, #28]
 800c132:	4413      	add	r3, r2
 800c134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c138:	461a      	mov	r2, r3
 800c13a:	2340      	movs	r3, #64	; 0x40
 800c13c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800c13e:	69bb      	ldr	r3, [r7, #24]
 800c140:	f003 0302 	and.w	r3, r3, #2
 800c144:	2b00      	cmp	r3, #0
 800c146:	d008      	beq.n	800c15a <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800c148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c14a:	015a      	lsls	r2, r3, #5
 800c14c:	69fb      	ldr	r3, [r7, #28]
 800c14e:	4413      	add	r3, r2
 800c150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c154:	461a      	mov	r2, r3
 800c156:	2302      	movs	r3, #2
 800c158:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800c15a:	69bb      	ldr	r3, [r7, #24]
 800c15c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c160:	2b00      	cmp	r3, #0
 800c162:	d003      	beq.n	800c16c <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800c164:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f000 fc67 	bl	800ca3a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800c16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c16e:	3301      	adds	r3, #1
 800c170:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800c172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c174:	085b      	lsrs	r3, r3, #1
 800c176:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800c178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	f47f af45 	bne.w	800c00a <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	4618      	mov	r0, r3
 800c186:	f003 ff44 	bl	8010012 <USB_ReadInterrupts>
 800c18a:	4603      	mov	r3, r0
 800c18c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c190:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c194:	d122      	bne.n	800c1dc <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c196:	69fb      	ldr	r3, [r7, #28]
 800c198:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c19c:	685b      	ldr	r3, [r3, #4]
 800c19e:	69fa      	ldr	r2, [r7, #28]
 800c1a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c1a4:	f023 0301 	bic.w	r3, r3, #1
 800c1a8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800c1b0:	2b01      	cmp	r3, #1
 800c1b2:	d108      	bne.n	800c1c6 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800c1bc:	2100      	movs	r1, #0
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f000 fe88 	bl	800ced4 <HAL_PCDEx_LPM_Callback>
 800c1c4:	e002      	b.n	800c1cc <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f009 f890 	bl	80152ec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	695a      	ldr	r2, [r3, #20]
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800c1da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	f003 ff16 	bl	8010012 <USB_ReadInterrupts>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c1ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c1f0:	d112      	bne.n	800c218 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800c1f2:	69fb      	ldr	r3, [r7, #28]
 800c1f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1f8:	689b      	ldr	r3, [r3, #8]
 800c1fa:	f003 0301 	and.w	r3, r3, #1
 800c1fe:	2b01      	cmp	r3, #1
 800c200:	d102      	bne.n	800c208 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f009 f84c 	bl	80152a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	695a      	ldr	r2, [r3, #20]
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800c216:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	4618      	mov	r0, r3
 800c21e:	f003 fef8 	bl	8010012 <USB_ReadInterrupts>
 800c222:	4603      	mov	r3, r0
 800c224:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c228:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c22c:	f040 80a7 	bne.w	800c37e <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c230:	69fb      	ldr	r3, [r7, #28]
 800c232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c236:	685b      	ldr	r3, [r3, #4]
 800c238:	69fa      	ldr	r2, [r7, #28]
 800c23a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c23e:	f023 0301 	bic.w	r3, r3, #1
 800c242:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	2110      	movs	r1, #16
 800c24a:	4618      	mov	r0, r3
 800c24c:	f003 f830 	bl	800f2b0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c250:	2300      	movs	r3, #0
 800c252:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c254:	e036      	b.n	800c2c4 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800c256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c258:	015a      	lsls	r2, r3, #5
 800c25a:	69fb      	ldr	r3, [r7, #28]
 800c25c:	4413      	add	r3, r2
 800c25e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c262:	461a      	mov	r2, r3
 800c264:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c268:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c26c:	015a      	lsls	r2, r3, #5
 800c26e:	69fb      	ldr	r3, [r7, #28]
 800c270:	4413      	add	r3, r2
 800c272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c27a:	0151      	lsls	r1, r2, #5
 800c27c:	69fa      	ldr	r2, [r7, #28]
 800c27e:	440a      	add	r2, r1
 800c280:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c284:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c288:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800c28a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c28c:	015a      	lsls	r2, r3, #5
 800c28e:	69fb      	ldr	r3, [r7, #28]
 800c290:	4413      	add	r3, r2
 800c292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c296:	461a      	mov	r2, r3
 800c298:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c29c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2a0:	015a      	lsls	r2, r3, #5
 800c2a2:	69fb      	ldr	r3, [r7, #28]
 800c2a4:	4413      	add	r3, r2
 800c2a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c2ae:	0151      	lsls	r1, r2, #5
 800c2b0:	69fa      	ldr	r2, [r7, #28]
 800c2b2:	440a      	add	r2, r1
 800c2b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c2b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c2bc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c2be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2c0:	3301      	adds	r3, #1
 800c2c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	685b      	ldr	r3, [r3, #4]
 800c2c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c2ca:	429a      	cmp	r2, r3
 800c2cc:	d3c3      	bcc.n	800c256 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800c2ce:	69fb      	ldr	r3, [r7, #28]
 800c2d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2d4:	69db      	ldr	r3, [r3, #28]
 800c2d6:	69fa      	ldr	r2, [r7, #28]
 800c2d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c2dc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800c2e0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d016      	beq.n	800c318 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800c2ea:	69fb      	ldr	r3, [r7, #28]
 800c2ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c2f4:	69fa      	ldr	r2, [r7, #28]
 800c2f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c2fa:	f043 030b 	orr.w	r3, r3, #11
 800c2fe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800c302:	69fb      	ldr	r3, [r7, #28]
 800c304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c30a:	69fa      	ldr	r2, [r7, #28]
 800c30c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c310:	f043 030b 	orr.w	r3, r3, #11
 800c314:	6453      	str	r3, [r2, #68]	; 0x44
 800c316:	e015      	b.n	800c344 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800c318:	69fb      	ldr	r3, [r7, #28]
 800c31a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c31e:	695b      	ldr	r3, [r3, #20]
 800c320:	69fa      	ldr	r2, [r7, #28]
 800c322:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c326:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c32a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800c32e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800c330:	69fb      	ldr	r3, [r7, #28]
 800c332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c336:	691b      	ldr	r3, [r3, #16]
 800c338:	69fa      	ldr	r2, [r7, #28]
 800c33a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c33e:	f043 030b 	orr.w	r3, r3, #11
 800c342:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800c344:	69fb      	ldr	r3, [r7, #28]
 800c346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	69fa      	ldr	r2, [r7, #28]
 800c34e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c352:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c356:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	6818      	ldr	r0, [r3, #0]
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	691b      	ldr	r3, [r3, #16]
 800c360:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c368:	461a      	mov	r2, r3
 800c36a:	f003 ff29 	bl	80101c0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	695a      	ldr	r2, [r3, #20]
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800c37c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	4618      	mov	r0, r3
 800c384:	f003 fe45 	bl	8010012 <USB_ReadInterrupts>
 800c388:	4603      	mov	r3, r0
 800c38a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c38e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c392:	d124      	bne.n	800c3de <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	4618      	mov	r0, r3
 800c39a:	f003 fedb 	bl	8010154 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f002 ffe5 	bl	800f372 <USB_GetDevSpeed>
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	461a      	mov	r2, r3
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681c      	ldr	r4, [r3, #0]
 800c3b4:	f001 f9c8 	bl	800d748 <HAL_RCC_GetHCLKFreq>
 800c3b8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c3be:	b2db      	uxtb	r3, r3
 800c3c0:	461a      	mov	r2, r3
 800c3c2:	4620      	mov	r0, r4
 800c3c4:	f002 fd14 	bl	800edf0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f008 ff40 	bl	801524e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	695a      	ldr	r2, [r3, #20]
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800c3dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	f003 fe15 	bl	8010012 <USB_ReadInterrupts>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	f003 0310 	and.w	r3, r3, #16
 800c3ee:	2b10      	cmp	r3, #16
 800c3f0:	d161      	bne.n	800c4b6 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	699a      	ldr	r2, [r3, #24]
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	f022 0210 	bic.w	r2, r2, #16
 800c400:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800c402:	6a3b      	ldr	r3, [r7, #32]
 800c404:	6a1b      	ldr	r3, [r3, #32]
 800c406:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800c408:	693b      	ldr	r3, [r7, #16]
 800c40a:	f003 020f 	and.w	r2, r3, #15
 800c40e:	4613      	mov	r3, r2
 800c410:	00db      	lsls	r3, r3, #3
 800c412:	1a9b      	subs	r3, r3, r2
 800c414:	009b      	lsls	r3, r3, #2
 800c416:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c41a:	687a      	ldr	r2, [r7, #4]
 800c41c:	4413      	add	r3, r2
 800c41e:	3304      	adds	r3, #4
 800c420:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800c422:	693b      	ldr	r3, [r7, #16]
 800c424:	0c5b      	lsrs	r3, r3, #17
 800c426:	f003 030f 	and.w	r3, r3, #15
 800c42a:	2b02      	cmp	r3, #2
 800c42c:	d124      	bne.n	800c478 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800c42e:	693a      	ldr	r2, [r7, #16]
 800c430:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800c434:	4013      	ands	r3, r2
 800c436:	2b00      	cmp	r3, #0
 800c438:	d035      	beq.n	800c4a6 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800c43e:	693b      	ldr	r3, [r7, #16]
 800c440:	091b      	lsrs	r3, r3, #4
 800c442:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c444:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c448:	b29b      	uxth	r3, r3
 800c44a:	461a      	mov	r2, r3
 800c44c:	6a38      	ldr	r0, [r7, #32]
 800c44e:	f003 fc8d 	bl	800fd6c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	68da      	ldr	r2, [r3, #12]
 800c456:	693b      	ldr	r3, [r7, #16]
 800c458:	091b      	lsrs	r3, r3, #4
 800c45a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c45e:	441a      	add	r2, r3
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	699a      	ldr	r2, [r3, #24]
 800c468:	693b      	ldr	r3, [r7, #16]
 800c46a:	091b      	lsrs	r3, r3, #4
 800c46c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c470:	441a      	add	r2, r3
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	619a      	str	r2, [r3, #24]
 800c476:	e016      	b.n	800c4a6 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800c478:	693b      	ldr	r3, [r7, #16]
 800c47a:	0c5b      	lsrs	r3, r3, #17
 800c47c:	f003 030f 	and.w	r3, r3, #15
 800c480:	2b06      	cmp	r3, #6
 800c482:	d110      	bne.n	800c4a6 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c48a:	2208      	movs	r2, #8
 800c48c:	4619      	mov	r1, r3
 800c48e:	6a38      	ldr	r0, [r7, #32]
 800c490:	f003 fc6c 	bl	800fd6c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	699a      	ldr	r2, [r3, #24]
 800c498:	693b      	ldr	r3, [r7, #16]
 800c49a:	091b      	lsrs	r3, r3, #4
 800c49c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c4a0:	441a      	add	r2, r3
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	699a      	ldr	r2, [r3, #24]
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	f042 0210 	orr.w	r2, r2, #16
 800c4b4:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f003 fda9 	bl	8010012 <USB_ReadInterrupts>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	f003 0308 	and.w	r3, r3, #8
 800c4c6:	2b08      	cmp	r3, #8
 800c4c8:	d10a      	bne.n	800c4e0 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800c4ca:	6878      	ldr	r0, [r7, #4]
 800c4cc:	f008 feb1 	bl	8015232 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	695a      	ldr	r2, [r3, #20]
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	f002 0208 	and.w	r2, r2, #8
 800c4de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	f003 fd94 	bl	8010012 <USB_ReadInterrupts>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c4f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c4f4:	d10f      	bne.n	800c516 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800c4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4fc:	b2db      	uxtb	r3, r3
 800c4fe:	4619      	mov	r1, r3
 800c500:	6878      	ldr	r0, [r7, #4]
 800c502:	f008 ff13 	bl	801532c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	695a      	ldr	r2, [r3, #20]
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800c514:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	4618      	mov	r0, r3
 800c51c:	f003 fd79 	bl	8010012 <USB_ReadInterrupts>
 800c520:	4603      	mov	r3, r0
 800c522:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c526:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c52a:	d10f      	bne.n	800c54c <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800c52c:	2300      	movs	r3, #0
 800c52e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800c530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c532:	b2db      	uxtb	r3, r3
 800c534:	4619      	mov	r1, r3
 800c536:	6878      	ldr	r0, [r7, #4]
 800c538:	f008 fee6 	bl	8015308 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	695a      	ldr	r2, [r3, #20]
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800c54a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	4618      	mov	r0, r3
 800c552:	f003 fd5e 	bl	8010012 <USB_ReadInterrupts>
 800c556:	4603      	mov	r3, r0
 800c558:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c55c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c560:	d10a      	bne.n	800c578 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800c562:	6878      	ldr	r0, [r7, #4]
 800c564:	f008 fef4 	bl	8015350 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	695a      	ldr	r2, [r3, #20]
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800c576:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	4618      	mov	r0, r3
 800c57e:	f003 fd48 	bl	8010012 <USB_ReadInterrupts>
 800c582:	4603      	mov	r3, r0
 800c584:	f003 0304 	and.w	r3, r3, #4
 800c588:	2b04      	cmp	r3, #4
 800c58a:	d115      	bne.n	800c5b8 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	685b      	ldr	r3, [r3, #4]
 800c592:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800c594:	693b      	ldr	r3, [r7, #16]
 800c596:	f003 0304 	and.w	r3, r3, #4
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d002      	beq.n	800c5a4 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f008 fee4 	bl	801536c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	6859      	ldr	r1, [r3, #4]
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	693a      	ldr	r2, [r7, #16]
 800c5b0:	430a      	orrs	r2, r1
 800c5b2:	605a      	str	r2, [r3, #4]
 800c5b4:	e000      	b.n	800c5b8 <HAL_PCD_IRQHandler+0x740>
      return;
 800c5b6:	bf00      	nop
    }
  }
}
 800c5b8:	3734      	adds	r7, #52	; 0x34
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd90      	pop	{r4, r7, pc}

0800c5be <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800c5be:	b580      	push	{r7, lr}
 800c5c0:	b082      	sub	sp, #8
 800c5c2:	af00      	add	r7, sp, #0
 800c5c4:	6078      	str	r0, [r7, #4]
 800c5c6:	460b      	mov	r3, r1
 800c5c8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c5d0:	2b01      	cmp	r3, #1
 800c5d2:	d101      	bne.n	800c5d8 <HAL_PCD_SetAddress+0x1a>
 800c5d4:	2302      	movs	r3, #2
 800c5d6:	e013      	b.n	800c600 <HAL_PCD_SetAddress+0x42>
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2201      	movs	r2, #1
 800c5dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	78fa      	ldrb	r2, [r7, #3]
 800c5e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	78fa      	ldrb	r2, [r7, #3]
 800c5ee:	4611      	mov	r1, r2
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	f003 fcb8 	bl	800ff66 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800c5fe:	2300      	movs	r3, #0
}
 800c600:	4618      	mov	r0, r3
 800c602:	3708      	adds	r7, #8
 800c604:	46bd      	mov	sp, r7
 800c606:	bd80      	pop	{r7, pc}

0800c608 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b084      	sub	sp, #16
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
 800c610:	4608      	mov	r0, r1
 800c612:	4611      	mov	r1, r2
 800c614:	461a      	mov	r2, r3
 800c616:	4603      	mov	r3, r0
 800c618:	70fb      	strb	r3, [r7, #3]
 800c61a:	460b      	mov	r3, r1
 800c61c:	803b      	strh	r3, [r7, #0]
 800c61e:	4613      	mov	r3, r2
 800c620:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800c622:	2300      	movs	r3, #0
 800c624:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c626:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	da0f      	bge.n	800c64e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c62e:	78fb      	ldrb	r3, [r7, #3]
 800c630:	f003 020f 	and.w	r2, r3, #15
 800c634:	4613      	mov	r3, r2
 800c636:	00db      	lsls	r3, r3, #3
 800c638:	1a9b      	subs	r3, r3, r2
 800c63a:	009b      	lsls	r3, r3, #2
 800c63c:	3338      	adds	r3, #56	; 0x38
 800c63e:	687a      	ldr	r2, [r7, #4]
 800c640:	4413      	add	r3, r2
 800c642:	3304      	adds	r3, #4
 800c644:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	2201      	movs	r2, #1
 800c64a:	705a      	strb	r2, [r3, #1]
 800c64c:	e00f      	b.n	800c66e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c64e:	78fb      	ldrb	r3, [r7, #3]
 800c650:	f003 020f 	and.w	r2, r3, #15
 800c654:	4613      	mov	r3, r2
 800c656:	00db      	lsls	r3, r3, #3
 800c658:	1a9b      	subs	r3, r3, r2
 800c65a:	009b      	lsls	r3, r3, #2
 800c65c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c660:	687a      	ldr	r2, [r7, #4]
 800c662:	4413      	add	r3, r2
 800c664:	3304      	adds	r3, #4
 800c666:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	2200      	movs	r2, #0
 800c66c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800c66e:	78fb      	ldrb	r3, [r7, #3]
 800c670:	f003 030f 	and.w	r3, r3, #15
 800c674:	b2da      	uxtb	r2, r3
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800c67a:	883a      	ldrh	r2, [r7, #0]
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	78ba      	ldrb	r2, [r7, #2]
 800c684:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	785b      	ldrb	r3, [r3, #1]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d004      	beq.n	800c698 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	781b      	ldrb	r3, [r3, #0]
 800c692:	b29a      	uxth	r2, r3
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800c698:	78bb      	ldrb	r3, [r7, #2]
 800c69a:	2b02      	cmp	r3, #2
 800c69c:	d102      	bne.n	800c6a4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c6aa:	2b01      	cmp	r3, #1
 800c6ac:	d101      	bne.n	800c6b2 <HAL_PCD_EP_Open+0xaa>
 800c6ae:	2302      	movs	r3, #2
 800c6b0:	e00e      	b.n	800c6d0 <HAL_PCD_EP_Open+0xc8>
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	2201      	movs	r2, #1
 800c6b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	68f9      	ldr	r1, [r7, #12]
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	f002 fe7b 	bl	800f3bc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800c6ce:	7afb      	ldrb	r3, [r7, #11]
}
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	3710      	adds	r7, #16
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd80      	pop	{r7, pc}

0800c6d8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b084      	sub	sp, #16
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
 800c6e0:	460b      	mov	r3, r1
 800c6e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c6e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	da0f      	bge.n	800c70c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c6ec:	78fb      	ldrb	r3, [r7, #3]
 800c6ee:	f003 020f 	and.w	r2, r3, #15
 800c6f2:	4613      	mov	r3, r2
 800c6f4:	00db      	lsls	r3, r3, #3
 800c6f6:	1a9b      	subs	r3, r3, r2
 800c6f8:	009b      	lsls	r3, r3, #2
 800c6fa:	3338      	adds	r3, #56	; 0x38
 800c6fc:	687a      	ldr	r2, [r7, #4]
 800c6fe:	4413      	add	r3, r2
 800c700:	3304      	adds	r3, #4
 800c702:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	2201      	movs	r2, #1
 800c708:	705a      	strb	r2, [r3, #1]
 800c70a:	e00f      	b.n	800c72c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c70c:	78fb      	ldrb	r3, [r7, #3]
 800c70e:	f003 020f 	and.w	r2, r3, #15
 800c712:	4613      	mov	r3, r2
 800c714:	00db      	lsls	r3, r3, #3
 800c716:	1a9b      	subs	r3, r3, r2
 800c718:	009b      	lsls	r3, r3, #2
 800c71a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c71e:	687a      	ldr	r2, [r7, #4]
 800c720:	4413      	add	r3, r2
 800c722:	3304      	adds	r3, #4
 800c724:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	2200      	movs	r2, #0
 800c72a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800c72c:	78fb      	ldrb	r3, [r7, #3]
 800c72e:	f003 030f 	and.w	r3, r3, #15
 800c732:	b2da      	uxtb	r2, r3
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c73e:	2b01      	cmp	r3, #1
 800c740:	d101      	bne.n	800c746 <HAL_PCD_EP_Close+0x6e>
 800c742:	2302      	movs	r3, #2
 800c744:	e00e      	b.n	800c764 <HAL_PCD_EP_Close+0x8c>
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2201      	movs	r2, #1
 800c74a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	68f9      	ldr	r1, [r7, #12]
 800c754:	4618      	mov	r0, r3
 800c756:	f002 feb9 	bl	800f4cc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2200      	movs	r2, #0
 800c75e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800c762:	2300      	movs	r3, #0
}
 800c764:	4618      	mov	r0, r3
 800c766:	3710      	adds	r7, #16
 800c768:	46bd      	mov	sp, r7
 800c76a:	bd80      	pop	{r7, pc}

0800c76c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b086      	sub	sp, #24
 800c770:	af00      	add	r7, sp, #0
 800c772:	60f8      	str	r0, [r7, #12]
 800c774:	607a      	str	r2, [r7, #4]
 800c776:	603b      	str	r3, [r7, #0]
 800c778:	460b      	mov	r3, r1
 800c77a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c77c:	7afb      	ldrb	r3, [r7, #11]
 800c77e:	f003 020f 	and.w	r2, r3, #15
 800c782:	4613      	mov	r3, r2
 800c784:	00db      	lsls	r3, r3, #3
 800c786:	1a9b      	subs	r3, r3, r2
 800c788:	009b      	lsls	r3, r3, #2
 800c78a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c78e:	68fa      	ldr	r2, [r7, #12]
 800c790:	4413      	add	r3, r2
 800c792:	3304      	adds	r3, #4
 800c794:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c796:	697b      	ldr	r3, [r7, #20]
 800c798:	687a      	ldr	r2, [r7, #4]
 800c79a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800c79c:	697b      	ldr	r3, [r7, #20]
 800c79e:	683a      	ldr	r2, [r7, #0]
 800c7a0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800c7a2:	697b      	ldr	r3, [r7, #20]
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800c7a8:	697b      	ldr	r3, [r7, #20]
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c7ae:	7afb      	ldrb	r3, [r7, #11]
 800c7b0:	f003 030f 	and.w	r3, r3, #15
 800c7b4:	b2da      	uxtb	r2, r3
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	691b      	ldr	r3, [r3, #16]
 800c7be:	2b01      	cmp	r3, #1
 800c7c0:	d102      	bne.n	800c7c8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800c7c2:	687a      	ldr	r2, [r7, #4]
 800c7c4:	697b      	ldr	r3, [r7, #20]
 800c7c6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c7c8:	7afb      	ldrb	r3, [r7, #11]
 800c7ca:	f003 030f 	and.w	r3, r3, #15
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d109      	bne.n	800c7e6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	6818      	ldr	r0, [r3, #0]
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	691b      	ldr	r3, [r3, #16]
 800c7da:	b2db      	uxtb	r3, r3
 800c7dc:	461a      	mov	r2, r3
 800c7de:	6979      	ldr	r1, [r7, #20]
 800c7e0:	f003 f93c 	bl	800fa5c <USB_EP0StartXfer>
 800c7e4:	e008      	b.n	800c7f8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	6818      	ldr	r0, [r3, #0]
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	691b      	ldr	r3, [r3, #16]
 800c7ee:	b2db      	uxtb	r3, r3
 800c7f0:	461a      	mov	r2, r3
 800c7f2:	6979      	ldr	r1, [r7, #20]
 800c7f4:	f002 feee 	bl	800f5d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800c7f8:	2300      	movs	r3, #0
}
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	3718      	adds	r7, #24
 800c7fe:	46bd      	mov	sp, r7
 800c800:	bd80      	pop	{r7, pc}

0800c802 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c802:	b480      	push	{r7}
 800c804:	b083      	sub	sp, #12
 800c806:	af00      	add	r7, sp, #0
 800c808:	6078      	str	r0, [r7, #4]
 800c80a:	460b      	mov	r3, r1
 800c80c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800c80e:	78fb      	ldrb	r3, [r7, #3]
 800c810:	f003 020f 	and.w	r2, r3, #15
 800c814:	6879      	ldr	r1, [r7, #4]
 800c816:	4613      	mov	r3, r2
 800c818:	00db      	lsls	r3, r3, #3
 800c81a:	1a9b      	subs	r3, r3, r2
 800c81c:	009b      	lsls	r3, r3, #2
 800c81e:	440b      	add	r3, r1
 800c820:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800c824:	681b      	ldr	r3, [r3, #0]
}
 800c826:	4618      	mov	r0, r3
 800c828:	370c      	adds	r7, #12
 800c82a:	46bd      	mov	sp, r7
 800c82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c830:	4770      	bx	lr

0800c832 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c832:	b580      	push	{r7, lr}
 800c834:	b086      	sub	sp, #24
 800c836:	af00      	add	r7, sp, #0
 800c838:	60f8      	str	r0, [r7, #12]
 800c83a:	607a      	str	r2, [r7, #4]
 800c83c:	603b      	str	r3, [r7, #0]
 800c83e:	460b      	mov	r3, r1
 800c840:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c842:	7afb      	ldrb	r3, [r7, #11]
 800c844:	f003 020f 	and.w	r2, r3, #15
 800c848:	4613      	mov	r3, r2
 800c84a:	00db      	lsls	r3, r3, #3
 800c84c:	1a9b      	subs	r3, r3, r2
 800c84e:	009b      	lsls	r3, r3, #2
 800c850:	3338      	adds	r3, #56	; 0x38
 800c852:	68fa      	ldr	r2, [r7, #12]
 800c854:	4413      	add	r3, r2
 800c856:	3304      	adds	r3, #4
 800c858:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c85a:	697b      	ldr	r3, [r7, #20]
 800c85c:	687a      	ldr	r2, [r7, #4]
 800c85e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800c860:	697b      	ldr	r3, [r7, #20]
 800c862:	683a      	ldr	r2, [r7, #0]
 800c864:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800c866:	697b      	ldr	r3, [r7, #20]
 800c868:	2200      	movs	r2, #0
 800c86a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800c86c:	697b      	ldr	r3, [r7, #20]
 800c86e:	2201      	movs	r2, #1
 800c870:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c872:	7afb      	ldrb	r3, [r7, #11]
 800c874:	f003 030f 	and.w	r3, r3, #15
 800c878:	b2da      	uxtb	r2, r3
 800c87a:	697b      	ldr	r3, [r7, #20]
 800c87c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	691b      	ldr	r3, [r3, #16]
 800c882:	2b01      	cmp	r3, #1
 800c884:	d102      	bne.n	800c88c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800c886:	687a      	ldr	r2, [r7, #4]
 800c888:	697b      	ldr	r3, [r7, #20]
 800c88a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c88c:	7afb      	ldrb	r3, [r7, #11]
 800c88e:	f003 030f 	and.w	r3, r3, #15
 800c892:	2b00      	cmp	r3, #0
 800c894:	d109      	bne.n	800c8aa <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	6818      	ldr	r0, [r3, #0]
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	691b      	ldr	r3, [r3, #16]
 800c89e:	b2db      	uxtb	r3, r3
 800c8a0:	461a      	mov	r2, r3
 800c8a2:	6979      	ldr	r1, [r7, #20]
 800c8a4:	f003 f8da 	bl	800fa5c <USB_EP0StartXfer>
 800c8a8:	e008      	b.n	800c8bc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	6818      	ldr	r0, [r3, #0]
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	691b      	ldr	r3, [r3, #16]
 800c8b2:	b2db      	uxtb	r3, r3
 800c8b4:	461a      	mov	r2, r3
 800c8b6:	6979      	ldr	r1, [r7, #20]
 800c8b8:	f002 fe8c 	bl	800f5d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800c8bc:	2300      	movs	r3, #0
}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	3718      	adds	r7, #24
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}

0800c8c6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c8c6:	b580      	push	{r7, lr}
 800c8c8:	b084      	sub	sp, #16
 800c8ca:	af00      	add	r7, sp, #0
 800c8cc:	6078      	str	r0, [r7, #4]
 800c8ce:	460b      	mov	r3, r1
 800c8d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800c8d2:	78fb      	ldrb	r3, [r7, #3]
 800c8d4:	f003 020f 	and.w	r2, r3, #15
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	685b      	ldr	r3, [r3, #4]
 800c8dc:	429a      	cmp	r2, r3
 800c8de:	d901      	bls.n	800c8e4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800c8e0:	2301      	movs	r3, #1
 800c8e2:	e050      	b.n	800c986 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c8e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	da0f      	bge.n	800c90c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c8ec:	78fb      	ldrb	r3, [r7, #3]
 800c8ee:	f003 020f 	and.w	r2, r3, #15
 800c8f2:	4613      	mov	r3, r2
 800c8f4:	00db      	lsls	r3, r3, #3
 800c8f6:	1a9b      	subs	r3, r3, r2
 800c8f8:	009b      	lsls	r3, r3, #2
 800c8fa:	3338      	adds	r3, #56	; 0x38
 800c8fc:	687a      	ldr	r2, [r7, #4]
 800c8fe:	4413      	add	r3, r2
 800c900:	3304      	adds	r3, #4
 800c902:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	2201      	movs	r2, #1
 800c908:	705a      	strb	r2, [r3, #1]
 800c90a:	e00d      	b.n	800c928 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800c90c:	78fa      	ldrb	r2, [r7, #3]
 800c90e:	4613      	mov	r3, r2
 800c910:	00db      	lsls	r3, r3, #3
 800c912:	1a9b      	subs	r3, r3, r2
 800c914:	009b      	lsls	r3, r3, #2
 800c916:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c91a:	687a      	ldr	r2, [r7, #4]
 800c91c:	4413      	add	r3, r2
 800c91e:	3304      	adds	r3, #4
 800c920:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	2200      	movs	r2, #0
 800c926:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	2201      	movs	r2, #1
 800c92c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c92e:	78fb      	ldrb	r3, [r7, #3]
 800c930:	f003 030f 	and.w	r3, r3, #15
 800c934:	b2da      	uxtb	r2, r3
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c940:	2b01      	cmp	r3, #1
 800c942:	d101      	bne.n	800c948 <HAL_PCD_EP_SetStall+0x82>
 800c944:	2302      	movs	r3, #2
 800c946:	e01e      	b.n	800c986 <HAL_PCD_EP_SetStall+0xc0>
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2201      	movs	r2, #1
 800c94c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	68f9      	ldr	r1, [r7, #12]
 800c956:	4618      	mov	r0, r3
 800c958:	f003 fa31 	bl	800fdbe <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c95c:	78fb      	ldrb	r3, [r7, #3]
 800c95e:	f003 030f 	and.w	r3, r3, #15
 800c962:	2b00      	cmp	r3, #0
 800c964:	d10a      	bne.n	800c97c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	6818      	ldr	r0, [r3, #0]
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	691b      	ldr	r3, [r3, #16]
 800c96e:	b2d9      	uxtb	r1, r3
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c976:	461a      	mov	r2, r3
 800c978:	f003 fc22 	bl	80101c0 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2200      	movs	r2, #0
 800c980:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800c984:	2300      	movs	r3, #0
}
 800c986:	4618      	mov	r0, r3
 800c988:	3710      	adds	r7, #16
 800c98a:	46bd      	mov	sp, r7
 800c98c:	bd80      	pop	{r7, pc}

0800c98e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c98e:	b580      	push	{r7, lr}
 800c990:	b084      	sub	sp, #16
 800c992:	af00      	add	r7, sp, #0
 800c994:	6078      	str	r0, [r7, #4]
 800c996:	460b      	mov	r3, r1
 800c998:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800c99a:	78fb      	ldrb	r3, [r7, #3]
 800c99c:	f003 020f 	and.w	r2, r3, #15
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	685b      	ldr	r3, [r3, #4]
 800c9a4:	429a      	cmp	r2, r3
 800c9a6:	d901      	bls.n	800c9ac <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	e042      	b.n	800ca32 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c9ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	da0f      	bge.n	800c9d4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c9b4:	78fb      	ldrb	r3, [r7, #3]
 800c9b6:	f003 020f 	and.w	r2, r3, #15
 800c9ba:	4613      	mov	r3, r2
 800c9bc:	00db      	lsls	r3, r3, #3
 800c9be:	1a9b      	subs	r3, r3, r2
 800c9c0:	009b      	lsls	r3, r3, #2
 800c9c2:	3338      	adds	r3, #56	; 0x38
 800c9c4:	687a      	ldr	r2, [r7, #4]
 800c9c6:	4413      	add	r3, r2
 800c9c8:	3304      	adds	r3, #4
 800c9ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	2201      	movs	r2, #1
 800c9d0:	705a      	strb	r2, [r3, #1]
 800c9d2:	e00f      	b.n	800c9f4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c9d4:	78fb      	ldrb	r3, [r7, #3]
 800c9d6:	f003 020f 	and.w	r2, r3, #15
 800c9da:	4613      	mov	r3, r2
 800c9dc:	00db      	lsls	r3, r3, #3
 800c9de:	1a9b      	subs	r3, r3, r2
 800c9e0:	009b      	lsls	r3, r3, #2
 800c9e2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c9e6:	687a      	ldr	r2, [r7, #4]
 800c9e8:	4413      	add	r3, r2
 800c9ea:	3304      	adds	r3, #4
 800c9ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c9fa:	78fb      	ldrb	r3, [r7, #3]
 800c9fc:	f003 030f 	and.w	r3, r3, #15
 800ca00:	b2da      	uxtb	r2, r3
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ca0c:	2b01      	cmp	r3, #1
 800ca0e:	d101      	bne.n	800ca14 <HAL_PCD_EP_ClrStall+0x86>
 800ca10:	2302      	movs	r3, #2
 800ca12:	e00e      	b.n	800ca32 <HAL_PCD_EP_ClrStall+0xa4>
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2201      	movs	r2, #1
 800ca18:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	68f9      	ldr	r1, [r7, #12]
 800ca22:	4618      	mov	r0, r3
 800ca24:	f003 fa39 	bl	800fe9a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800ca30:	2300      	movs	r3, #0
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	3710      	adds	r7, #16
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bd80      	pop	{r7, pc}

0800ca3a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ca3a:	b580      	push	{r7, lr}
 800ca3c:	b08a      	sub	sp, #40	; 0x28
 800ca3e:	af02      	add	r7, sp, #8
 800ca40:	6078      	str	r0, [r7, #4]
 800ca42:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca4a:	697b      	ldr	r3, [r7, #20]
 800ca4c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800ca4e:	683a      	ldr	r2, [r7, #0]
 800ca50:	4613      	mov	r3, r2
 800ca52:	00db      	lsls	r3, r3, #3
 800ca54:	1a9b      	subs	r3, r3, r2
 800ca56:	009b      	lsls	r3, r3, #2
 800ca58:	3338      	adds	r3, #56	; 0x38
 800ca5a:	687a      	ldr	r2, [r7, #4]
 800ca5c:	4413      	add	r3, r2
 800ca5e:	3304      	adds	r3, #4
 800ca60:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	699a      	ldr	r2, [r3, #24]
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	695b      	ldr	r3, [r3, #20]
 800ca6a:	429a      	cmp	r2, r3
 800ca6c:	d901      	bls.n	800ca72 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800ca6e:	2301      	movs	r3, #1
 800ca70:	e06c      	b.n	800cb4c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	695a      	ldr	r2, [r3, #20]
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	699b      	ldr	r3, [r3, #24]
 800ca7a:	1ad3      	subs	r3, r2, r3
 800ca7c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	689b      	ldr	r3, [r3, #8]
 800ca82:	69fa      	ldr	r2, [r7, #28]
 800ca84:	429a      	cmp	r2, r3
 800ca86:	d902      	bls.n	800ca8e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	689b      	ldr	r3, [r3, #8]
 800ca8c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800ca8e:	69fb      	ldr	r3, [r7, #28]
 800ca90:	3303      	adds	r3, #3
 800ca92:	089b      	lsrs	r3, r3, #2
 800ca94:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ca96:	e02b      	b.n	800caf0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	695a      	ldr	r2, [r3, #20]
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	699b      	ldr	r3, [r3, #24]
 800caa0:	1ad3      	subs	r3, r2, r3
 800caa2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	689b      	ldr	r3, [r3, #8]
 800caa8:	69fa      	ldr	r2, [r7, #28]
 800caaa:	429a      	cmp	r2, r3
 800caac:	d902      	bls.n	800cab4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	689b      	ldr	r3, [r3, #8]
 800cab2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800cab4:	69fb      	ldr	r3, [r7, #28]
 800cab6:	3303      	adds	r3, #3
 800cab8:	089b      	lsrs	r3, r3, #2
 800caba:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	68d9      	ldr	r1, [r3, #12]
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	b2da      	uxtb	r2, r3
 800cac4:	69fb      	ldr	r3, [r7, #28]
 800cac6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800cacc:	b2db      	uxtb	r3, r3
 800cace:	9300      	str	r3, [sp, #0]
 800cad0:	4603      	mov	r3, r0
 800cad2:	6978      	ldr	r0, [r7, #20]
 800cad4:	f003 f915 	bl	800fd02 <USB_WritePacket>

    ep->xfer_buff  += len;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	68da      	ldr	r2, [r3, #12]
 800cadc:	69fb      	ldr	r3, [r7, #28]
 800cade:	441a      	add	r2, r3
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	699a      	ldr	r2, [r3, #24]
 800cae8:	69fb      	ldr	r3, [r7, #28]
 800caea:	441a      	add	r2, r3
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	015a      	lsls	r2, r3, #5
 800caf4:	693b      	ldr	r3, [r7, #16]
 800caf6:	4413      	add	r3, r2
 800caf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cafc:	699b      	ldr	r3, [r3, #24]
 800cafe:	b29b      	uxth	r3, r3
 800cb00:	69ba      	ldr	r2, [r7, #24]
 800cb02:	429a      	cmp	r2, r3
 800cb04:	d809      	bhi.n	800cb1a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	699a      	ldr	r2, [r3, #24]
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cb0e:	429a      	cmp	r2, r3
 800cb10:	d203      	bcs.n	800cb1a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	695b      	ldr	r3, [r3, #20]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d1be      	bne.n	800ca98 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	695a      	ldr	r2, [r3, #20]
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	699b      	ldr	r3, [r3, #24]
 800cb22:	429a      	cmp	r2, r3
 800cb24:	d811      	bhi.n	800cb4a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	f003 030f 	and.w	r3, r3, #15
 800cb2c:	2201      	movs	r2, #1
 800cb2e:	fa02 f303 	lsl.w	r3, r2, r3
 800cb32:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800cb34:	693b      	ldr	r3, [r7, #16]
 800cb36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cb3c:	68bb      	ldr	r3, [r7, #8]
 800cb3e:	43db      	mvns	r3, r3
 800cb40:	6939      	ldr	r1, [r7, #16]
 800cb42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cb46:	4013      	ands	r3, r2
 800cb48:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800cb4a:	2300      	movs	r3, #0
}
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	3720      	adds	r7, #32
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bd80      	pop	{r7, pc}

0800cb54 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b086      	sub	sp, #24
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
 800cb5c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb64:	697b      	ldr	r3, [r7, #20]
 800cb66:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800cb68:	697b      	ldr	r3, [r7, #20]
 800cb6a:	333c      	adds	r3, #60	; 0x3c
 800cb6c:	3304      	adds	r3, #4
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	015a      	lsls	r2, r3, #5
 800cb76:	693b      	ldr	r3, [r7, #16]
 800cb78:	4413      	add	r3, r2
 800cb7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb7e:	689b      	ldr	r3, [r3, #8]
 800cb80:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	691b      	ldr	r3, [r3, #16]
 800cb86:	2b01      	cmp	r3, #1
 800cb88:	f040 80b3 	bne.w	800ccf2 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800cb8c:	68bb      	ldr	r3, [r7, #8]
 800cb8e:	f003 0308 	and.w	r3, r3, #8
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d028      	beq.n	800cbe8 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	4a70      	ldr	r2, [pc, #448]	; (800cd5c <PCD_EP_OutXfrComplete_int+0x208>)
 800cb9a:	4293      	cmp	r3, r2
 800cb9c:	d90e      	bls.n	800cbbc <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800cb9e:	68bb      	ldr	r3, [r7, #8]
 800cba0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d009      	beq.n	800cbbc <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	015a      	lsls	r2, r3, #5
 800cbac:	693b      	ldr	r3, [r7, #16]
 800cbae:	4413      	add	r3, r2
 800cbb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbb4:	461a      	mov	r2, r3
 800cbb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cbba:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	f008 faf1 	bl	80151a4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	6818      	ldr	r0, [r3, #0]
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800cbcc:	461a      	mov	r2, r3
 800cbce:	2101      	movs	r1, #1
 800cbd0:	f003 faf6 	bl	80101c0 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	015a      	lsls	r2, r3, #5
 800cbd8:	693b      	ldr	r3, [r7, #16]
 800cbda:	4413      	add	r3, r2
 800cbdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbe0:	461a      	mov	r2, r3
 800cbe2:	2308      	movs	r3, #8
 800cbe4:	6093      	str	r3, [r2, #8]
 800cbe6:	e0b3      	b.n	800cd50 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800cbe8:	68bb      	ldr	r3, [r7, #8]
 800cbea:	f003 0320 	and.w	r3, r3, #32
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d009      	beq.n	800cc06 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	015a      	lsls	r2, r3, #5
 800cbf6:	693b      	ldr	r3, [r7, #16]
 800cbf8:	4413      	add	r3, r2
 800cbfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbfe:	461a      	mov	r2, r3
 800cc00:	2320      	movs	r3, #32
 800cc02:	6093      	str	r3, [r2, #8]
 800cc04:	e0a4      	b.n	800cd50 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800cc06:	68bb      	ldr	r3, [r7, #8]
 800cc08:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	f040 809f 	bne.w	800cd50 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	4a51      	ldr	r2, [pc, #324]	; (800cd5c <PCD_EP_OutXfrComplete_int+0x208>)
 800cc16:	4293      	cmp	r3, r2
 800cc18:	d90f      	bls.n	800cc3a <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800cc1a:	68bb      	ldr	r3, [r7, #8]
 800cc1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d00a      	beq.n	800cc3a <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	015a      	lsls	r2, r3, #5
 800cc28:	693b      	ldr	r3, [r7, #16]
 800cc2a:	4413      	add	r3, r2
 800cc2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc30:	461a      	mov	r2, r3
 800cc32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cc36:	6093      	str	r3, [r2, #8]
 800cc38:	e08a      	b.n	800cd50 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800cc3a:	6879      	ldr	r1, [r7, #4]
 800cc3c:	683a      	ldr	r2, [r7, #0]
 800cc3e:	4613      	mov	r3, r2
 800cc40:	00db      	lsls	r3, r3, #3
 800cc42:	1a9b      	subs	r3, r3, r2
 800cc44:	009b      	lsls	r3, r3, #2
 800cc46:	440b      	add	r3, r1
 800cc48:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800cc4c:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800cc4e:	683b      	ldr	r3, [r7, #0]
 800cc50:	0159      	lsls	r1, r3, #5
 800cc52:	693b      	ldr	r3, [r7, #16]
 800cc54:	440b      	add	r3, r1
 800cc56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc5a:	691b      	ldr	r3, [r3, #16]
 800cc5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800cc60:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	683a      	ldr	r2, [r7, #0]
 800cc66:	4613      	mov	r3, r2
 800cc68:	00db      	lsls	r3, r3, #3
 800cc6a:	1a9b      	subs	r3, r3, r2
 800cc6c:	009b      	lsls	r3, r3, #2
 800cc6e:	4403      	add	r3, r0
 800cc70:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800cc74:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800cc76:	6879      	ldr	r1, [r7, #4]
 800cc78:	683a      	ldr	r2, [r7, #0]
 800cc7a:	4613      	mov	r3, r2
 800cc7c:	00db      	lsls	r3, r3, #3
 800cc7e:	1a9b      	subs	r3, r3, r2
 800cc80:	009b      	lsls	r3, r3, #2
 800cc82:	440b      	add	r3, r1
 800cc84:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800cc88:	6819      	ldr	r1, [r3, #0]
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	683a      	ldr	r2, [r7, #0]
 800cc8e:	4613      	mov	r3, r2
 800cc90:	00db      	lsls	r3, r3, #3
 800cc92:	1a9b      	subs	r3, r3, r2
 800cc94:	009b      	lsls	r3, r3, #2
 800cc96:	4403      	add	r3, r0
 800cc98:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	4419      	add	r1, r3
 800cca0:	6878      	ldr	r0, [r7, #4]
 800cca2:	683a      	ldr	r2, [r7, #0]
 800cca4:	4613      	mov	r3, r2
 800cca6:	00db      	lsls	r3, r3, #3
 800cca8:	1a9b      	subs	r3, r3, r2
 800ccaa:	009b      	lsls	r3, r3, #2
 800ccac:	4403      	add	r3, r0
 800ccae:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ccb2:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	b2db      	uxtb	r3, r3
 800ccb8:	4619      	mov	r1, r3
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	f008 fa84 	bl	80151c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800ccc0:	683b      	ldr	r3, [r7, #0]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d144      	bne.n	800cd50 <PCD_EP_OutXfrComplete_int+0x1fc>
 800ccc6:	6879      	ldr	r1, [r7, #4]
 800ccc8:	683a      	ldr	r2, [r7, #0]
 800ccca:	4613      	mov	r3, r2
 800cccc:	00db      	lsls	r3, r3, #3
 800ccce:	1a9b      	subs	r3, r3, r2
 800ccd0:	009b      	lsls	r3, r3, #2
 800ccd2:	440b      	add	r3, r1
 800ccd4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d138      	bne.n	800cd50 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	6818      	ldr	r0, [r3, #0]
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800cce8:	461a      	mov	r2, r3
 800ccea:	2101      	movs	r1, #1
 800ccec:	f003 fa68 	bl	80101c0 <USB_EP0_OutStart>
 800ccf0:	e02e      	b.n	800cd50 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	4a1a      	ldr	r2, [pc, #104]	; (800cd60 <PCD_EP_OutXfrComplete_int+0x20c>)
 800ccf6:	4293      	cmp	r3, r2
 800ccf8:	d124      	bne.n	800cd44 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800ccfa:	68bb      	ldr	r3, [r7, #8]
 800ccfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d00a      	beq.n	800cd1a <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800cd04:	683b      	ldr	r3, [r7, #0]
 800cd06:	015a      	lsls	r2, r3, #5
 800cd08:	693b      	ldr	r3, [r7, #16]
 800cd0a:	4413      	add	r3, r2
 800cd0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd10:	461a      	mov	r2, r3
 800cd12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cd16:	6093      	str	r3, [r2, #8]
 800cd18:	e01a      	b.n	800cd50 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800cd1a:	68bb      	ldr	r3, [r7, #8]
 800cd1c:	f003 0320 	and.w	r3, r3, #32
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d008      	beq.n	800cd36 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	015a      	lsls	r2, r3, #5
 800cd28:	693b      	ldr	r3, [r7, #16]
 800cd2a:	4413      	add	r3, r2
 800cd2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd30:	461a      	mov	r2, r3
 800cd32:	2320      	movs	r3, #32
 800cd34:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	b2db      	uxtb	r3, r3
 800cd3a:	4619      	mov	r1, r3
 800cd3c:	6878      	ldr	r0, [r7, #4]
 800cd3e:	f008 fa43 	bl	80151c8 <HAL_PCD_DataOutStageCallback>
 800cd42:	e005      	b.n	800cd50 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	b2db      	uxtb	r3, r3
 800cd48:	4619      	mov	r1, r3
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	f008 fa3c 	bl	80151c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800cd50:	2300      	movs	r3, #0
}
 800cd52:	4618      	mov	r0, r3
 800cd54:	3718      	adds	r7, #24
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd80      	pop	{r7, pc}
 800cd5a:	bf00      	nop
 800cd5c:	4f54300a 	.word	0x4f54300a
 800cd60:	4f54310a 	.word	0x4f54310a

0800cd64 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b086      	sub	sp, #24
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
 800cd6c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd74:	697b      	ldr	r3, [r7, #20]
 800cd76:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800cd78:	697b      	ldr	r3, [r7, #20]
 800cd7a:	333c      	adds	r3, #60	; 0x3c
 800cd7c:	3304      	adds	r3, #4
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	015a      	lsls	r2, r3, #5
 800cd86:	693b      	ldr	r3, [r7, #16]
 800cd88:	4413      	add	r3, r2
 800cd8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd8e:	689b      	ldr	r3, [r3, #8]
 800cd90:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	691b      	ldr	r3, [r3, #16]
 800cd96:	2b01      	cmp	r3, #1
 800cd98:	d113      	bne.n	800cdc2 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	4a1f      	ldr	r2, [pc, #124]	; (800ce1c <PCD_EP_OutSetupPacket_int+0xb8>)
 800cd9e:	4293      	cmp	r3, r2
 800cda0:	d922      	bls.n	800cde8 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d01d      	beq.n	800cde8 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	015a      	lsls	r2, r3, #5
 800cdb0:	693b      	ldr	r3, [r7, #16]
 800cdb2:	4413      	add	r3, r2
 800cdb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdb8:	461a      	mov	r2, r3
 800cdba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cdbe:	6093      	str	r3, [r2, #8]
 800cdc0:	e012      	b.n	800cde8 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	4a16      	ldr	r2, [pc, #88]	; (800ce20 <PCD_EP_OutSetupPacket_int+0xbc>)
 800cdc6:	4293      	cmp	r3, r2
 800cdc8:	d10e      	bne.n	800cde8 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800cdca:	68bb      	ldr	r3, [r7, #8]
 800cdcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d009      	beq.n	800cde8 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	015a      	lsls	r2, r3, #5
 800cdd8:	693b      	ldr	r3, [r7, #16]
 800cdda:	4413      	add	r3, r2
 800cddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cde0:	461a      	mov	r2, r3
 800cde2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cde6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800cde8:	6878      	ldr	r0, [r7, #4]
 800cdea:	f008 f9db 	bl	80151a4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	4a0a      	ldr	r2, [pc, #40]	; (800ce1c <PCD_EP_OutSetupPacket_int+0xb8>)
 800cdf2:	4293      	cmp	r3, r2
 800cdf4:	d90c      	bls.n	800ce10 <PCD_EP_OutSetupPacket_int+0xac>
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	691b      	ldr	r3, [r3, #16]
 800cdfa:	2b01      	cmp	r3, #1
 800cdfc:	d108      	bne.n	800ce10 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	6818      	ldr	r0, [r3, #0]
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ce08:	461a      	mov	r2, r3
 800ce0a:	2101      	movs	r1, #1
 800ce0c:	f003 f9d8 	bl	80101c0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800ce10:	2300      	movs	r3, #0
}
 800ce12:	4618      	mov	r0, r3
 800ce14:	3718      	adds	r7, #24
 800ce16:	46bd      	mov	sp, r7
 800ce18:	bd80      	pop	{r7, pc}
 800ce1a:	bf00      	nop
 800ce1c:	4f54300a 	.word	0x4f54300a
 800ce20:	4f54310a 	.word	0x4f54310a

0800ce24 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800ce24:	b480      	push	{r7}
 800ce26:	b085      	sub	sp, #20
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
 800ce2c:	460b      	mov	r3, r1
 800ce2e:	70fb      	strb	r3, [r7, #3]
 800ce30:	4613      	mov	r3, r2
 800ce32:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce3a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800ce3c:	78fb      	ldrb	r3, [r7, #3]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d107      	bne.n	800ce52 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800ce42:	883b      	ldrh	r3, [r7, #0]
 800ce44:	0419      	lsls	r1, r3, #16
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	68ba      	ldr	r2, [r7, #8]
 800ce4c:	430a      	orrs	r2, r1
 800ce4e:	629a      	str	r2, [r3, #40]	; 0x28
 800ce50:	e028      	b.n	800cea4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce58:	0c1b      	lsrs	r3, r3, #16
 800ce5a:	68ba      	ldr	r2, [r7, #8]
 800ce5c:	4413      	add	r3, r2
 800ce5e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800ce60:	2300      	movs	r3, #0
 800ce62:	73fb      	strb	r3, [r7, #15]
 800ce64:	e00d      	b.n	800ce82 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681a      	ldr	r2, [r3, #0]
 800ce6a:	7bfb      	ldrb	r3, [r7, #15]
 800ce6c:	3340      	adds	r3, #64	; 0x40
 800ce6e:	009b      	lsls	r3, r3, #2
 800ce70:	4413      	add	r3, r2
 800ce72:	685b      	ldr	r3, [r3, #4]
 800ce74:	0c1b      	lsrs	r3, r3, #16
 800ce76:	68ba      	ldr	r2, [r7, #8]
 800ce78:	4413      	add	r3, r2
 800ce7a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800ce7c:	7bfb      	ldrb	r3, [r7, #15]
 800ce7e:	3301      	adds	r3, #1
 800ce80:	73fb      	strb	r3, [r7, #15]
 800ce82:	7bfa      	ldrb	r2, [r7, #15]
 800ce84:	78fb      	ldrb	r3, [r7, #3]
 800ce86:	3b01      	subs	r3, #1
 800ce88:	429a      	cmp	r2, r3
 800ce8a:	d3ec      	bcc.n	800ce66 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800ce8c:	883b      	ldrh	r3, [r7, #0]
 800ce8e:	0418      	lsls	r0, r3, #16
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	6819      	ldr	r1, [r3, #0]
 800ce94:	78fb      	ldrb	r3, [r7, #3]
 800ce96:	3b01      	subs	r3, #1
 800ce98:	68ba      	ldr	r2, [r7, #8]
 800ce9a:	4302      	orrs	r2, r0
 800ce9c:	3340      	adds	r3, #64	; 0x40
 800ce9e:	009b      	lsls	r3, r3, #2
 800cea0:	440b      	add	r3, r1
 800cea2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800cea4:	2300      	movs	r3, #0
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	3714      	adds	r7, #20
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb0:	4770      	bx	lr

0800ceb2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800ceb2:	b480      	push	{r7}
 800ceb4:	b083      	sub	sp, #12
 800ceb6:	af00      	add	r7, sp, #0
 800ceb8:	6078      	str	r0, [r7, #4]
 800ceba:	460b      	mov	r3, r1
 800cebc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	887a      	ldrh	r2, [r7, #2]
 800cec4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800cec6:	2300      	movs	r3, #0
}
 800cec8:	4618      	mov	r0, r3
 800ceca:	370c      	adds	r7, #12
 800cecc:	46bd      	mov	sp, r7
 800cece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced2:	4770      	bx	lr

0800ced4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800ced4:	b480      	push	{r7}
 800ced6:	b083      	sub	sp, #12
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
 800cedc:	460b      	mov	r3, r1
 800cede:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800cee0:	bf00      	nop
 800cee2:	370c      	adds	r7, #12
 800cee4:	46bd      	mov	sp, r7
 800cee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceea:	4770      	bx	lr

0800ceec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b086      	sub	sp, #24
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d101      	bne.n	800cefe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800cefa:	2301      	movs	r3, #1
 800cefc:	e25b      	b.n	800d3b6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	f003 0301 	and.w	r3, r3, #1
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d075      	beq.n	800cff6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800cf0a:	4ba3      	ldr	r3, [pc, #652]	; (800d198 <HAL_RCC_OscConfig+0x2ac>)
 800cf0c:	689b      	ldr	r3, [r3, #8]
 800cf0e:	f003 030c 	and.w	r3, r3, #12
 800cf12:	2b04      	cmp	r3, #4
 800cf14:	d00c      	beq.n	800cf30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cf16:	4ba0      	ldr	r3, [pc, #640]	; (800d198 <HAL_RCC_OscConfig+0x2ac>)
 800cf18:	689b      	ldr	r3, [r3, #8]
 800cf1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800cf1e:	2b08      	cmp	r3, #8
 800cf20:	d112      	bne.n	800cf48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cf22:	4b9d      	ldr	r3, [pc, #628]	; (800d198 <HAL_RCC_OscConfig+0x2ac>)
 800cf24:	685b      	ldr	r3, [r3, #4]
 800cf26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cf2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cf2e:	d10b      	bne.n	800cf48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cf30:	4b99      	ldr	r3, [pc, #612]	; (800d198 <HAL_RCC_OscConfig+0x2ac>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d05b      	beq.n	800cff4 <HAL_RCC_OscConfig+0x108>
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	685b      	ldr	r3, [r3, #4]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d157      	bne.n	800cff4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800cf44:	2301      	movs	r3, #1
 800cf46:	e236      	b.n	800d3b6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	685b      	ldr	r3, [r3, #4]
 800cf4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf50:	d106      	bne.n	800cf60 <HAL_RCC_OscConfig+0x74>
 800cf52:	4b91      	ldr	r3, [pc, #580]	; (800d198 <HAL_RCC_OscConfig+0x2ac>)
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	4a90      	ldr	r2, [pc, #576]	; (800d198 <HAL_RCC_OscConfig+0x2ac>)
 800cf58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cf5c:	6013      	str	r3, [r2, #0]
 800cf5e:	e01d      	b.n	800cf9c <HAL_RCC_OscConfig+0xb0>
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	685b      	ldr	r3, [r3, #4]
 800cf64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cf68:	d10c      	bne.n	800cf84 <HAL_RCC_OscConfig+0x98>
 800cf6a:	4b8b      	ldr	r3, [pc, #556]	; (800d198 <HAL_RCC_OscConfig+0x2ac>)
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	4a8a      	ldr	r2, [pc, #552]	; (800d198 <HAL_RCC_OscConfig+0x2ac>)
 800cf70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cf74:	6013      	str	r3, [r2, #0]
 800cf76:	4b88      	ldr	r3, [pc, #544]	; (800d198 <HAL_RCC_OscConfig+0x2ac>)
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	4a87      	ldr	r2, [pc, #540]	; (800d198 <HAL_RCC_OscConfig+0x2ac>)
 800cf7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cf80:	6013      	str	r3, [r2, #0]
 800cf82:	e00b      	b.n	800cf9c <HAL_RCC_OscConfig+0xb0>
 800cf84:	4b84      	ldr	r3, [pc, #528]	; (800d198 <HAL_RCC_OscConfig+0x2ac>)
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	4a83      	ldr	r2, [pc, #524]	; (800d198 <HAL_RCC_OscConfig+0x2ac>)
 800cf8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cf8e:	6013      	str	r3, [r2, #0]
 800cf90:	4b81      	ldr	r3, [pc, #516]	; (800d198 <HAL_RCC_OscConfig+0x2ac>)
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	4a80      	ldr	r2, [pc, #512]	; (800d198 <HAL_RCC_OscConfig+0x2ac>)
 800cf96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cf9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	685b      	ldr	r3, [r3, #4]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d013      	beq.n	800cfcc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cfa4:	f7fd ff60 	bl	800ae68 <HAL_GetTick>
 800cfa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cfaa:	e008      	b.n	800cfbe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cfac:	f7fd ff5c 	bl	800ae68 <HAL_GetTick>
 800cfb0:	4602      	mov	r2, r0
 800cfb2:	693b      	ldr	r3, [r7, #16]
 800cfb4:	1ad3      	subs	r3, r2, r3
 800cfb6:	2b64      	cmp	r3, #100	; 0x64
 800cfb8:	d901      	bls.n	800cfbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800cfba:	2303      	movs	r3, #3
 800cfbc:	e1fb      	b.n	800d3b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cfbe:	4b76      	ldr	r3, [pc, #472]	; (800d198 <HAL_RCC_OscConfig+0x2ac>)
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d0f0      	beq.n	800cfac <HAL_RCC_OscConfig+0xc0>
 800cfca:	e014      	b.n	800cff6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cfcc:	f7fd ff4c 	bl	800ae68 <HAL_GetTick>
 800cfd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cfd2:	e008      	b.n	800cfe6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cfd4:	f7fd ff48 	bl	800ae68 <HAL_GetTick>
 800cfd8:	4602      	mov	r2, r0
 800cfda:	693b      	ldr	r3, [r7, #16]
 800cfdc:	1ad3      	subs	r3, r2, r3
 800cfde:	2b64      	cmp	r3, #100	; 0x64
 800cfe0:	d901      	bls.n	800cfe6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800cfe2:	2303      	movs	r3, #3
 800cfe4:	e1e7      	b.n	800d3b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cfe6:	4b6c      	ldr	r3, [pc, #432]	; (800d198 <HAL_RCC_OscConfig+0x2ac>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d1f0      	bne.n	800cfd4 <HAL_RCC_OscConfig+0xe8>
 800cff2:	e000      	b.n	800cff6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cff4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	f003 0302 	and.w	r3, r3, #2
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d063      	beq.n	800d0ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d002:	4b65      	ldr	r3, [pc, #404]	; (800d198 <HAL_RCC_OscConfig+0x2ac>)
 800d004:	689b      	ldr	r3, [r3, #8]
 800d006:	f003 030c 	and.w	r3, r3, #12
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d00b      	beq.n	800d026 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d00e:	4b62      	ldr	r3, [pc, #392]	; (800d198 <HAL_RCC_OscConfig+0x2ac>)
 800d010:	689b      	ldr	r3, [r3, #8]
 800d012:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d016:	2b08      	cmp	r3, #8
 800d018:	d11c      	bne.n	800d054 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d01a:	4b5f      	ldr	r3, [pc, #380]	; (800d198 <HAL_RCC_OscConfig+0x2ac>)
 800d01c:	685b      	ldr	r3, [r3, #4]
 800d01e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d022:	2b00      	cmp	r3, #0
 800d024:	d116      	bne.n	800d054 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d026:	4b5c      	ldr	r3, [pc, #368]	; (800d198 <HAL_RCC_OscConfig+0x2ac>)
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	f003 0302 	and.w	r3, r3, #2
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d005      	beq.n	800d03e <HAL_RCC_OscConfig+0x152>
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	68db      	ldr	r3, [r3, #12]
 800d036:	2b01      	cmp	r3, #1
 800d038:	d001      	beq.n	800d03e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800d03a:	2301      	movs	r3, #1
 800d03c:	e1bb      	b.n	800d3b6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d03e:	4b56      	ldr	r3, [pc, #344]	; (800d198 <HAL_RCC_OscConfig+0x2ac>)
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	691b      	ldr	r3, [r3, #16]
 800d04a:	00db      	lsls	r3, r3, #3
 800d04c:	4952      	ldr	r1, [pc, #328]	; (800d198 <HAL_RCC_OscConfig+0x2ac>)
 800d04e:	4313      	orrs	r3, r2
 800d050:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d052:	e03a      	b.n	800d0ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	68db      	ldr	r3, [r3, #12]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d020      	beq.n	800d09e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d05c:	4b4f      	ldr	r3, [pc, #316]	; (800d19c <HAL_RCC_OscConfig+0x2b0>)
 800d05e:	2201      	movs	r2, #1
 800d060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d062:	f7fd ff01 	bl	800ae68 <HAL_GetTick>
 800d066:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d068:	e008      	b.n	800d07c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d06a:	f7fd fefd 	bl	800ae68 <HAL_GetTick>
 800d06e:	4602      	mov	r2, r0
 800d070:	693b      	ldr	r3, [r7, #16]
 800d072:	1ad3      	subs	r3, r2, r3
 800d074:	2b02      	cmp	r3, #2
 800d076:	d901      	bls.n	800d07c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800d078:	2303      	movs	r3, #3
 800d07a:	e19c      	b.n	800d3b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d07c:	4b46      	ldr	r3, [pc, #280]	; (800d198 <HAL_RCC_OscConfig+0x2ac>)
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	f003 0302 	and.w	r3, r3, #2
 800d084:	2b00      	cmp	r3, #0
 800d086:	d0f0      	beq.n	800d06a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d088:	4b43      	ldr	r3, [pc, #268]	; (800d198 <HAL_RCC_OscConfig+0x2ac>)
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	691b      	ldr	r3, [r3, #16]
 800d094:	00db      	lsls	r3, r3, #3
 800d096:	4940      	ldr	r1, [pc, #256]	; (800d198 <HAL_RCC_OscConfig+0x2ac>)
 800d098:	4313      	orrs	r3, r2
 800d09a:	600b      	str	r3, [r1, #0]
 800d09c:	e015      	b.n	800d0ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d09e:	4b3f      	ldr	r3, [pc, #252]	; (800d19c <HAL_RCC_OscConfig+0x2b0>)
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d0a4:	f7fd fee0 	bl	800ae68 <HAL_GetTick>
 800d0a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d0aa:	e008      	b.n	800d0be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d0ac:	f7fd fedc 	bl	800ae68 <HAL_GetTick>
 800d0b0:	4602      	mov	r2, r0
 800d0b2:	693b      	ldr	r3, [r7, #16]
 800d0b4:	1ad3      	subs	r3, r2, r3
 800d0b6:	2b02      	cmp	r3, #2
 800d0b8:	d901      	bls.n	800d0be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800d0ba:	2303      	movs	r3, #3
 800d0bc:	e17b      	b.n	800d3b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d0be:	4b36      	ldr	r3, [pc, #216]	; (800d198 <HAL_RCC_OscConfig+0x2ac>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	f003 0302 	and.w	r3, r3, #2
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d1f0      	bne.n	800d0ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	f003 0308 	and.w	r3, r3, #8
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d030      	beq.n	800d138 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	695b      	ldr	r3, [r3, #20]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d016      	beq.n	800d10c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d0de:	4b30      	ldr	r3, [pc, #192]	; (800d1a0 <HAL_RCC_OscConfig+0x2b4>)
 800d0e0:	2201      	movs	r2, #1
 800d0e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d0e4:	f7fd fec0 	bl	800ae68 <HAL_GetTick>
 800d0e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d0ea:	e008      	b.n	800d0fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d0ec:	f7fd febc 	bl	800ae68 <HAL_GetTick>
 800d0f0:	4602      	mov	r2, r0
 800d0f2:	693b      	ldr	r3, [r7, #16]
 800d0f4:	1ad3      	subs	r3, r2, r3
 800d0f6:	2b02      	cmp	r3, #2
 800d0f8:	d901      	bls.n	800d0fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800d0fa:	2303      	movs	r3, #3
 800d0fc:	e15b      	b.n	800d3b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d0fe:	4b26      	ldr	r3, [pc, #152]	; (800d198 <HAL_RCC_OscConfig+0x2ac>)
 800d100:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d102:	f003 0302 	and.w	r3, r3, #2
 800d106:	2b00      	cmp	r3, #0
 800d108:	d0f0      	beq.n	800d0ec <HAL_RCC_OscConfig+0x200>
 800d10a:	e015      	b.n	800d138 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d10c:	4b24      	ldr	r3, [pc, #144]	; (800d1a0 <HAL_RCC_OscConfig+0x2b4>)
 800d10e:	2200      	movs	r2, #0
 800d110:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d112:	f7fd fea9 	bl	800ae68 <HAL_GetTick>
 800d116:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d118:	e008      	b.n	800d12c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d11a:	f7fd fea5 	bl	800ae68 <HAL_GetTick>
 800d11e:	4602      	mov	r2, r0
 800d120:	693b      	ldr	r3, [r7, #16]
 800d122:	1ad3      	subs	r3, r2, r3
 800d124:	2b02      	cmp	r3, #2
 800d126:	d901      	bls.n	800d12c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800d128:	2303      	movs	r3, #3
 800d12a:	e144      	b.n	800d3b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d12c:	4b1a      	ldr	r3, [pc, #104]	; (800d198 <HAL_RCC_OscConfig+0x2ac>)
 800d12e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d130:	f003 0302 	and.w	r3, r3, #2
 800d134:	2b00      	cmp	r3, #0
 800d136:	d1f0      	bne.n	800d11a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	f003 0304 	and.w	r3, r3, #4
 800d140:	2b00      	cmp	r3, #0
 800d142:	f000 80a0 	beq.w	800d286 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d146:	2300      	movs	r3, #0
 800d148:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d14a:	4b13      	ldr	r3, [pc, #76]	; (800d198 <HAL_RCC_OscConfig+0x2ac>)
 800d14c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d14e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d152:	2b00      	cmp	r3, #0
 800d154:	d10f      	bne.n	800d176 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d156:	2300      	movs	r3, #0
 800d158:	60bb      	str	r3, [r7, #8]
 800d15a:	4b0f      	ldr	r3, [pc, #60]	; (800d198 <HAL_RCC_OscConfig+0x2ac>)
 800d15c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d15e:	4a0e      	ldr	r2, [pc, #56]	; (800d198 <HAL_RCC_OscConfig+0x2ac>)
 800d160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d164:	6413      	str	r3, [r2, #64]	; 0x40
 800d166:	4b0c      	ldr	r3, [pc, #48]	; (800d198 <HAL_RCC_OscConfig+0x2ac>)
 800d168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d16a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d16e:	60bb      	str	r3, [r7, #8]
 800d170:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d172:	2301      	movs	r3, #1
 800d174:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d176:	4b0b      	ldr	r3, [pc, #44]	; (800d1a4 <HAL_RCC_OscConfig+0x2b8>)
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d121      	bne.n	800d1c6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d182:	4b08      	ldr	r3, [pc, #32]	; (800d1a4 <HAL_RCC_OscConfig+0x2b8>)
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	4a07      	ldr	r2, [pc, #28]	; (800d1a4 <HAL_RCC_OscConfig+0x2b8>)
 800d188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d18c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d18e:	f7fd fe6b 	bl	800ae68 <HAL_GetTick>
 800d192:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d194:	e011      	b.n	800d1ba <HAL_RCC_OscConfig+0x2ce>
 800d196:	bf00      	nop
 800d198:	40023800 	.word	0x40023800
 800d19c:	42470000 	.word	0x42470000
 800d1a0:	42470e80 	.word	0x42470e80
 800d1a4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d1a8:	f7fd fe5e 	bl	800ae68 <HAL_GetTick>
 800d1ac:	4602      	mov	r2, r0
 800d1ae:	693b      	ldr	r3, [r7, #16]
 800d1b0:	1ad3      	subs	r3, r2, r3
 800d1b2:	2b02      	cmp	r3, #2
 800d1b4:	d901      	bls.n	800d1ba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800d1b6:	2303      	movs	r3, #3
 800d1b8:	e0fd      	b.n	800d3b6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d1ba:	4b81      	ldr	r3, [pc, #516]	; (800d3c0 <HAL_RCC_OscConfig+0x4d4>)
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d0f0      	beq.n	800d1a8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	689b      	ldr	r3, [r3, #8]
 800d1ca:	2b01      	cmp	r3, #1
 800d1cc:	d106      	bne.n	800d1dc <HAL_RCC_OscConfig+0x2f0>
 800d1ce:	4b7d      	ldr	r3, [pc, #500]	; (800d3c4 <HAL_RCC_OscConfig+0x4d8>)
 800d1d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1d2:	4a7c      	ldr	r2, [pc, #496]	; (800d3c4 <HAL_RCC_OscConfig+0x4d8>)
 800d1d4:	f043 0301 	orr.w	r3, r3, #1
 800d1d8:	6713      	str	r3, [r2, #112]	; 0x70
 800d1da:	e01c      	b.n	800d216 <HAL_RCC_OscConfig+0x32a>
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	689b      	ldr	r3, [r3, #8]
 800d1e0:	2b05      	cmp	r3, #5
 800d1e2:	d10c      	bne.n	800d1fe <HAL_RCC_OscConfig+0x312>
 800d1e4:	4b77      	ldr	r3, [pc, #476]	; (800d3c4 <HAL_RCC_OscConfig+0x4d8>)
 800d1e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1e8:	4a76      	ldr	r2, [pc, #472]	; (800d3c4 <HAL_RCC_OscConfig+0x4d8>)
 800d1ea:	f043 0304 	orr.w	r3, r3, #4
 800d1ee:	6713      	str	r3, [r2, #112]	; 0x70
 800d1f0:	4b74      	ldr	r3, [pc, #464]	; (800d3c4 <HAL_RCC_OscConfig+0x4d8>)
 800d1f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1f4:	4a73      	ldr	r2, [pc, #460]	; (800d3c4 <HAL_RCC_OscConfig+0x4d8>)
 800d1f6:	f043 0301 	orr.w	r3, r3, #1
 800d1fa:	6713      	str	r3, [r2, #112]	; 0x70
 800d1fc:	e00b      	b.n	800d216 <HAL_RCC_OscConfig+0x32a>
 800d1fe:	4b71      	ldr	r3, [pc, #452]	; (800d3c4 <HAL_RCC_OscConfig+0x4d8>)
 800d200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d202:	4a70      	ldr	r2, [pc, #448]	; (800d3c4 <HAL_RCC_OscConfig+0x4d8>)
 800d204:	f023 0301 	bic.w	r3, r3, #1
 800d208:	6713      	str	r3, [r2, #112]	; 0x70
 800d20a:	4b6e      	ldr	r3, [pc, #440]	; (800d3c4 <HAL_RCC_OscConfig+0x4d8>)
 800d20c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d20e:	4a6d      	ldr	r2, [pc, #436]	; (800d3c4 <HAL_RCC_OscConfig+0x4d8>)
 800d210:	f023 0304 	bic.w	r3, r3, #4
 800d214:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	689b      	ldr	r3, [r3, #8]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d015      	beq.n	800d24a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d21e:	f7fd fe23 	bl	800ae68 <HAL_GetTick>
 800d222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d224:	e00a      	b.n	800d23c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d226:	f7fd fe1f 	bl	800ae68 <HAL_GetTick>
 800d22a:	4602      	mov	r2, r0
 800d22c:	693b      	ldr	r3, [r7, #16]
 800d22e:	1ad3      	subs	r3, r2, r3
 800d230:	f241 3288 	movw	r2, #5000	; 0x1388
 800d234:	4293      	cmp	r3, r2
 800d236:	d901      	bls.n	800d23c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800d238:	2303      	movs	r3, #3
 800d23a:	e0bc      	b.n	800d3b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d23c:	4b61      	ldr	r3, [pc, #388]	; (800d3c4 <HAL_RCC_OscConfig+0x4d8>)
 800d23e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d240:	f003 0302 	and.w	r3, r3, #2
 800d244:	2b00      	cmp	r3, #0
 800d246:	d0ee      	beq.n	800d226 <HAL_RCC_OscConfig+0x33a>
 800d248:	e014      	b.n	800d274 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d24a:	f7fd fe0d 	bl	800ae68 <HAL_GetTick>
 800d24e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d250:	e00a      	b.n	800d268 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d252:	f7fd fe09 	bl	800ae68 <HAL_GetTick>
 800d256:	4602      	mov	r2, r0
 800d258:	693b      	ldr	r3, [r7, #16]
 800d25a:	1ad3      	subs	r3, r2, r3
 800d25c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d260:	4293      	cmp	r3, r2
 800d262:	d901      	bls.n	800d268 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800d264:	2303      	movs	r3, #3
 800d266:	e0a6      	b.n	800d3b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d268:	4b56      	ldr	r3, [pc, #344]	; (800d3c4 <HAL_RCC_OscConfig+0x4d8>)
 800d26a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d26c:	f003 0302 	and.w	r3, r3, #2
 800d270:	2b00      	cmp	r3, #0
 800d272:	d1ee      	bne.n	800d252 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d274:	7dfb      	ldrb	r3, [r7, #23]
 800d276:	2b01      	cmp	r3, #1
 800d278:	d105      	bne.n	800d286 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d27a:	4b52      	ldr	r3, [pc, #328]	; (800d3c4 <HAL_RCC_OscConfig+0x4d8>)
 800d27c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d27e:	4a51      	ldr	r2, [pc, #324]	; (800d3c4 <HAL_RCC_OscConfig+0x4d8>)
 800d280:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d284:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	699b      	ldr	r3, [r3, #24]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	f000 8092 	beq.w	800d3b4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d290:	4b4c      	ldr	r3, [pc, #304]	; (800d3c4 <HAL_RCC_OscConfig+0x4d8>)
 800d292:	689b      	ldr	r3, [r3, #8]
 800d294:	f003 030c 	and.w	r3, r3, #12
 800d298:	2b08      	cmp	r3, #8
 800d29a:	d05c      	beq.n	800d356 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	699b      	ldr	r3, [r3, #24]
 800d2a0:	2b02      	cmp	r3, #2
 800d2a2:	d141      	bne.n	800d328 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d2a4:	4b48      	ldr	r3, [pc, #288]	; (800d3c8 <HAL_RCC_OscConfig+0x4dc>)
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d2aa:	f7fd fddd 	bl	800ae68 <HAL_GetTick>
 800d2ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d2b0:	e008      	b.n	800d2c4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d2b2:	f7fd fdd9 	bl	800ae68 <HAL_GetTick>
 800d2b6:	4602      	mov	r2, r0
 800d2b8:	693b      	ldr	r3, [r7, #16]
 800d2ba:	1ad3      	subs	r3, r2, r3
 800d2bc:	2b02      	cmp	r3, #2
 800d2be:	d901      	bls.n	800d2c4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800d2c0:	2303      	movs	r3, #3
 800d2c2:	e078      	b.n	800d3b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d2c4:	4b3f      	ldr	r3, [pc, #252]	; (800d3c4 <HAL_RCC_OscConfig+0x4d8>)
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d1f0      	bne.n	800d2b2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	69da      	ldr	r2, [r3, #28]
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	6a1b      	ldr	r3, [r3, #32]
 800d2d8:	431a      	orrs	r2, r3
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2de:	019b      	lsls	r3, r3, #6
 800d2e0:	431a      	orrs	r2, r3
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2e6:	085b      	lsrs	r3, r3, #1
 800d2e8:	3b01      	subs	r3, #1
 800d2ea:	041b      	lsls	r3, r3, #16
 800d2ec:	431a      	orrs	r2, r3
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2f2:	061b      	lsls	r3, r3, #24
 800d2f4:	4933      	ldr	r1, [pc, #204]	; (800d3c4 <HAL_RCC_OscConfig+0x4d8>)
 800d2f6:	4313      	orrs	r3, r2
 800d2f8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d2fa:	4b33      	ldr	r3, [pc, #204]	; (800d3c8 <HAL_RCC_OscConfig+0x4dc>)
 800d2fc:	2201      	movs	r2, #1
 800d2fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d300:	f7fd fdb2 	bl	800ae68 <HAL_GetTick>
 800d304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d306:	e008      	b.n	800d31a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d308:	f7fd fdae 	bl	800ae68 <HAL_GetTick>
 800d30c:	4602      	mov	r2, r0
 800d30e:	693b      	ldr	r3, [r7, #16]
 800d310:	1ad3      	subs	r3, r2, r3
 800d312:	2b02      	cmp	r3, #2
 800d314:	d901      	bls.n	800d31a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800d316:	2303      	movs	r3, #3
 800d318:	e04d      	b.n	800d3b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d31a:	4b2a      	ldr	r3, [pc, #168]	; (800d3c4 <HAL_RCC_OscConfig+0x4d8>)
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d322:	2b00      	cmp	r3, #0
 800d324:	d0f0      	beq.n	800d308 <HAL_RCC_OscConfig+0x41c>
 800d326:	e045      	b.n	800d3b4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d328:	4b27      	ldr	r3, [pc, #156]	; (800d3c8 <HAL_RCC_OscConfig+0x4dc>)
 800d32a:	2200      	movs	r2, #0
 800d32c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d32e:	f7fd fd9b 	bl	800ae68 <HAL_GetTick>
 800d332:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d334:	e008      	b.n	800d348 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d336:	f7fd fd97 	bl	800ae68 <HAL_GetTick>
 800d33a:	4602      	mov	r2, r0
 800d33c:	693b      	ldr	r3, [r7, #16]
 800d33e:	1ad3      	subs	r3, r2, r3
 800d340:	2b02      	cmp	r3, #2
 800d342:	d901      	bls.n	800d348 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800d344:	2303      	movs	r3, #3
 800d346:	e036      	b.n	800d3b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d348:	4b1e      	ldr	r3, [pc, #120]	; (800d3c4 <HAL_RCC_OscConfig+0x4d8>)
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d350:	2b00      	cmp	r3, #0
 800d352:	d1f0      	bne.n	800d336 <HAL_RCC_OscConfig+0x44a>
 800d354:	e02e      	b.n	800d3b4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	699b      	ldr	r3, [r3, #24]
 800d35a:	2b01      	cmp	r3, #1
 800d35c:	d101      	bne.n	800d362 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800d35e:	2301      	movs	r3, #1
 800d360:	e029      	b.n	800d3b6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800d362:	4b18      	ldr	r3, [pc, #96]	; (800d3c4 <HAL_RCC_OscConfig+0x4d8>)
 800d364:	689b      	ldr	r3, [r3, #8]
 800d366:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	69db      	ldr	r3, [r3, #28]
 800d372:	429a      	cmp	r2, r3
 800d374:	d11c      	bne.n	800d3b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d380:	429a      	cmp	r2, r3
 800d382:	d115      	bne.n	800d3b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800d384:	68fa      	ldr	r2, [r7, #12]
 800d386:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800d38a:	4013      	ands	r3, r2
 800d38c:	687a      	ldr	r2, [r7, #4]
 800d38e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d390:	4293      	cmp	r3, r2
 800d392:	d10d      	bne.n	800d3b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800d39e:	429a      	cmp	r2, r3
 800d3a0:	d106      	bne.n	800d3b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d3ac:	429a      	cmp	r2, r3
 800d3ae:	d001      	beq.n	800d3b4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	e000      	b.n	800d3b6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800d3b4:	2300      	movs	r3, #0
}
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	3718      	adds	r7, #24
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	bd80      	pop	{r7, pc}
 800d3be:	bf00      	nop
 800d3c0:	40007000 	.word	0x40007000
 800d3c4:	40023800 	.word	0x40023800
 800d3c8:	42470060 	.word	0x42470060

0800d3cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b084      	sub	sp, #16
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
 800d3d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d101      	bne.n	800d3e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d3dc:	2301      	movs	r3, #1
 800d3de:	e0cc      	b.n	800d57a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d3e0:	4b68      	ldr	r3, [pc, #416]	; (800d584 <HAL_RCC_ClockConfig+0x1b8>)
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	f003 030f 	and.w	r3, r3, #15
 800d3e8:	683a      	ldr	r2, [r7, #0]
 800d3ea:	429a      	cmp	r2, r3
 800d3ec:	d90c      	bls.n	800d408 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d3ee:	4b65      	ldr	r3, [pc, #404]	; (800d584 <HAL_RCC_ClockConfig+0x1b8>)
 800d3f0:	683a      	ldr	r2, [r7, #0]
 800d3f2:	b2d2      	uxtb	r2, r2
 800d3f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d3f6:	4b63      	ldr	r3, [pc, #396]	; (800d584 <HAL_RCC_ClockConfig+0x1b8>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	f003 030f 	and.w	r3, r3, #15
 800d3fe:	683a      	ldr	r2, [r7, #0]
 800d400:	429a      	cmp	r2, r3
 800d402:	d001      	beq.n	800d408 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800d404:	2301      	movs	r3, #1
 800d406:	e0b8      	b.n	800d57a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	f003 0302 	and.w	r3, r3, #2
 800d410:	2b00      	cmp	r3, #0
 800d412:	d020      	beq.n	800d456 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	f003 0304 	and.w	r3, r3, #4
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d005      	beq.n	800d42c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d420:	4b59      	ldr	r3, [pc, #356]	; (800d588 <HAL_RCC_ClockConfig+0x1bc>)
 800d422:	689b      	ldr	r3, [r3, #8]
 800d424:	4a58      	ldr	r2, [pc, #352]	; (800d588 <HAL_RCC_ClockConfig+0x1bc>)
 800d426:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800d42a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	f003 0308 	and.w	r3, r3, #8
 800d434:	2b00      	cmp	r3, #0
 800d436:	d005      	beq.n	800d444 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d438:	4b53      	ldr	r3, [pc, #332]	; (800d588 <HAL_RCC_ClockConfig+0x1bc>)
 800d43a:	689b      	ldr	r3, [r3, #8]
 800d43c:	4a52      	ldr	r2, [pc, #328]	; (800d588 <HAL_RCC_ClockConfig+0x1bc>)
 800d43e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800d442:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d444:	4b50      	ldr	r3, [pc, #320]	; (800d588 <HAL_RCC_ClockConfig+0x1bc>)
 800d446:	689b      	ldr	r3, [r3, #8]
 800d448:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	689b      	ldr	r3, [r3, #8]
 800d450:	494d      	ldr	r1, [pc, #308]	; (800d588 <HAL_RCC_ClockConfig+0x1bc>)
 800d452:	4313      	orrs	r3, r2
 800d454:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	f003 0301 	and.w	r3, r3, #1
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d044      	beq.n	800d4ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	685b      	ldr	r3, [r3, #4]
 800d466:	2b01      	cmp	r3, #1
 800d468:	d107      	bne.n	800d47a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d46a:	4b47      	ldr	r3, [pc, #284]	; (800d588 <HAL_RCC_ClockConfig+0x1bc>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d472:	2b00      	cmp	r3, #0
 800d474:	d119      	bne.n	800d4aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d476:	2301      	movs	r3, #1
 800d478:	e07f      	b.n	800d57a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	685b      	ldr	r3, [r3, #4]
 800d47e:	2b02      	cmp	r3, #2
 800d480:	d003      	beq.n	800d48a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d486:	2b03      	cmp	r3, #3
 800d488:	d107      	bne.n	800d49a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d48a:	4b3f      	ldr	r3, [pc, #252]	; (800d588 <HAL_RCC_ClockConfig+0x1bc>)
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d492:	2b00      	cmp	r3, #0
 800d494:	d109      	bne.n	800d4aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d496:	2301      	movs	r3, #1
 800d498:	e06f      	b.n	800d57a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d49a:	4b3b      	ldr	r3, [pc, #236]	; (800d588 <HAL_RCC_ClockConfig+0x1bc>)
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	f003 0302 	and.w	r3, r3, #2
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d101      	bne.n	800d4aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d4a6:	2301      	movs	r3, #1
 800d4a8:	e067      	b.n	800d57a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d4aa:	4b37      	ldr	r3, [pc, #220]	; (800d588 <HAL_RCC_ClockConfig+0x1bc>)
 800d4ac:	689b      	ldr	r3, [r3, #8]
 800d4ae:	f023 0203 	bic.w	r2, r3, #3
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	685b      	ldr	r3, [r3, #4]
 800d4b6:	4934      	ldr	r1, [pc, #208]	; (800d588 <HAL_RCC_ClockConfig+0x1bc>)
 800d4b8:	4313      	orrs	r3, r2
 800d4ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800d4bc:	f7fd fcd4 	bl	800ae68 <HAL_GetTick>
 800d4c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d4c2:	e00a      	b.n	800d4da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d4c4:	f7fd fcd0 	bl	800ae68 <HAL_GetTick>
 800d4c8:	4602      	mov	r2, r0
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	1ad3      	subs	r3, r2, r3
 800d4ce:	f241 3288 	movw	r2, #5000	; 0x1388
 800d4d2:	4293      	cmp	r3, r2
 800d4d4:	d901      	bls.n	800d4da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800d4d6:	2303      	movs	r3, #3
 800d4d8:	e04f      	b.n	800d57a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d4da:	4b2b      	ldr	r3, [pc, #172]	; (800d588 <HAL_RCC_ClockConfig+0x1bc>)
 800d4dc:	689b      	ldr	r3, [r3, #8]
 800d4de:	f003 020c 	and.w	r2, r3, #12
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	685b      	ldr	r3, [r3, #4]
 800d4e6:	009b      	lsls	r3, r3, #2
 800d4e8:	429a      	cmp	r2, r3
 800d4ea:	d1eb      	bne.n	800d4c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d4ec:	4b25      	ldr	r3, [pc, #148]	; (800d584 <HAL_RCC_ClockConfig+0x1b8>)
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	f003 030f 	and.w	r3, r3, #15
 800d4f4:	683a      	ldr	r2, [r7, #0]
 800d4f6:	429a      	cmp	r2, r3
 800d4f8:	d20c      	bcs.n	800d514 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d4fa:	4b22      	ldr	r3, [pc, #136]	; (800d584 <HAL_RCC_ClockConfig+0x1b8>)
 800d4fc:	683a      	ldr	r2, [r7, #0]
 800d4fe:	b2d2      	uxtb	r2, r2
 800d500:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d502:	4b20      	ldr	r3, [pc, #128]	; (800d584 <HAL_RCC_ClockConfig+0x1b8>)
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	f003 030f 	and.w	r3, r3, #15
 800d50a:	683a      	ldr	r2, [r7, #0]
 800d50c:	429a      	cmp	r2, r3
 800d50e:	d001      	beq.n	800d514 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800d510:	2301      	movs	r3, #1
 800d512:	e032      	b.n	800d57a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	f003 0304 	and.w	r3, r3, #4
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d008      	beq.n	800d532 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d520:	4b19      	ldr	r3, [pc, #100]	; (800d588 <HAL_RCC_ClockConfig+0x1bc>)
 800d522:	689b      	ldr	r3, [r3, #8]
 800d524:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	68db      	ldr	r3, [r3, #12]
 800d52c:	4916      	ldr	r1, [pc, #88]	; (800d588 <HAL_RCC_ClockConfig+0x1bc>)
 800d52e:	4313      	orrs	r3, r2
 800d530:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	f003 0308 	and.w	r3, r3, #8
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d009      	beq.n	800d552 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d53e:	4b12      	ldr	r3, [pc, #72]	; (800d588 <HAL_RCC_ClockConfig+0x1bc>)
 800d540:	689b      	ldr	r3, [r3, #8]
 800d542:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	691b      	ldr	r3, [r3, #16]
 800d54a:	00db      	lsls	r3, r3, #3
 800d54c:	490e      	ldr	r1, [pc, #56]	; (800d588 <HAL_RCC_ClockConfig+0x1bc>)
 800d54e:	4313      	orrs	r3, r2
 800d550:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800d552:	f000 f821 	bl	800d598 <HAL_RCC_GetSysClockFreq>
 800d556:	4601      	mov	r1, r0
 800d558:	4b0b      	ldr	r3, [pc, #44]	; (800d588 <HAL_RCC_ClockConfig+0x1bc>)
 800d55a:	689b      	ldr	r3, [r3, #8]
 800d55c:	091b      	lsrs	r3, r3, #4
 800d55e:	f003 030f 	and.w	r3, r3, #15
 800d562:	4a0a      	ldr	r2, [pc, #40]	; (800d58c <HAL_RCC_ClockConfig+0x1c0>)
 800d564:	5cd3      	ldrb	r3, [r2, r3]
 800d566:	fa21 f303 	lsr.w	r3, r1, r3
 800d56a:	4a09      	ldr	r2, [pc, #36]	; (800d590 <HAL_RCC_ClockConfig+0x1c4>)
 800d56c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800d56e:	4b09      	ldr	r3, [pc, #36]	; (800d594 <HAL_RCC_ClockConfig+0x1c8>)
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	4618      	mov	r0, r3
 800d574:	f7fd f9e0 	bl	800a938 <HAL_InitTick>

  return HAL_OK;
 800d578:	2300      	movs	r3, #0
}
 800d57a:	4618      	mov	r0, r3
 800d57c:	3710      	adds	r7, #16
 800d57e:	46bd      	mov	sp, r7
 800d580:	bd80      	pop	{r7, pc}
 800d582:	bf00      	nop
 800d584:	40023c00 	.word	0x40023c00
 800d588:	40023800 	.word	0x40023800
 800d58c:	0801b1bc 	.word	0x0801b1bc
 800d590:	20000c8c 	.word	0x20000c8c
 800d594:	20000c90 	.word	0x20000c90

0800d598 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d59a:	b085      	sub	sp, #20
 800d59c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800d59e:	2300      	movs	r3, #0
 800d5a0:	607b      	str	r3, [r7, #4]
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	60fb      	str	r3, [r7, #12]
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d5ae:	4b63      	ldr	r3, [pc, #396]	; (800d73c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d5b0:	689b      	ldr	r3, [r3, #8]
 800d5b2:	f003 030c 	and.w	r3, r3, #12
 800d5b6:	2b04      	cmp	r3, #4
 800d5b8:	d007      	beq.n	800d5ca <HAL_RCC_GetSysClockFreq+0x32>
 800d5ba:	2b08      	cmp	r3, #8
 800d5bc:	d008      	beq.n	800d5d0 <HAL_RCC_GetSysClockFreq+0x38>
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	f040 80b4 	bne.w	800d72c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800d5c4:	4b5e      	ldr	r3, [pc, #376]	; (800d740 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800d5c6:	60bb      	str	r3, [r7, #8]
       break;
 800d5c8:	e0b3      	b.n	800d732 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800d5ca:	4b5e      	ldr	r3, [pc, #376]	; (800d744 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800d5cc:	60bb      	str	r3, [r7, #8]
      break;
 800d5ce:	e0b0      	b.n	800d732 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d5d0:	4b5a      	ldr	r3, [pc, #360]	; (800d73c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d5d2:	685b      	ldr	r3, [r3, #4]
 800d5d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d5d8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800d5da:	4b58      	ldr	r3, [pc, #352]	; (800d73c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d5dc:	685b      	ldr	r3, [r3, #4]
 800d5de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d04a      	beq.n	800d67c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d5e6:	4b55      	ldr	r3, [pc, #340]	; (800d73c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d5e8:	685b      	ldr	r3, [r3, #4]
 800d5ea:	099b      	lsrs	r3, r3, #6
 800d5ec:	f04f 0400 	mov.w	r4, #0
 800d5f0:	f240 11ff 	movw	r1, #511	; 0x1ff
 800d5f4:	f04f 0200 	mov.w	r2, #0
 800d5f8:	ea03 0501 	and.w	r5, r3, r1
 800d5fc:	ea04 0602 	and.w	r6, r4, r2
 800d600:	4629      	mov	r1, r5
 800d602:	4632      	mov	r2, r6
 800d604:	f04f 0300 	mov.w	r3, #0
 800d608:	f04f 0400 	mov.w	r4, #0
 800d60c:	0154      	lsls	r4, r2, #5
 800d60e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800d612:	014b      	lsls	r3, r1, #5
 800d614:	4619      	mov	r1, r3
 800d616:	4622      	mov	r2, r4
 800d618:	1b49      	subs	r1, r1, r5
 800d61a:	eb62 0206 	sbc.w	r2, r2, r6
 800d61e:	f04f 0300 	mov.w	r3, #0
 800d622:	f04f 0400 	mov.w	r4, #0
 800d626:	0194      	lsls	r4, r2, #6
 800d628:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800d62c:	018b      	lsls	r3, r1, #6
 800d62e:	1a5b      	subs	r3, r3, r1
 800d630:	eb64 0402 	sbc.w	r4, r4, r2
 800d634:	f04f 0100 	mov.w	r1, #0
 800d638:	f04f 0200 	mov.w	r2, #0
 800d63c:	00e2      	lsls	r2, r4, #3
 800d63e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800d642:	00d9      	lsls	r1, r3, #3
 800d644:	460b      	mov	r3, r1
 800d646:	4614      	mov	r4, r2
 800d648:	195b      	adds	r3, r3, r5
 800d64a:	eb44 0406 	adc.w	r4, r4, r6
 800d64e:	f04f 0100 	mov.w	r1, #0
 800d652:	f04f 0200 	mov.w	r2, #0
 800d656:	0262      	lsls	r2, r4, #9
 800d658:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800d65c:	0259      	lsls	r1, r3, #9
 800d65e:	460b      	mov	r3, r1
 800d660:	4614      	mov	r4, r2
 800d662:	4618      	mov	r0, r3
 800d664:	4621      	mov	r1, r4
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	f04f 0400 	mov.w	r4, #0
 800d66c:	461a      	mov	r2, r3
 800d66e:	4623      	mov	r3, r4
 800d670:	f7f3 fb0a 	bl	8000c88 <__aeabi_uldivmod>
 800d674:	4603      	mov	r3, r0
 800d676:	460c      	mov	r4, r1
 800d678:	60fb      	str	r3, [r7, #12]
 800d67a:	e049      	b.n	800d710 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d67c:	4b2f      	ldr	r3, [pc, #188]	; (800d73c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d67e:	685b      	ldr	r3, [r3, #4]
 800d680:	099b      	lsrs	r3, r3, #6
 800d682:	f04f 0400 	mov.w	r4, #0
 800d686:	f240 11ff 	movw	r1, #511	; 0x1ff
 800d68a:	f04f 0200 	mov.w	r2, #0
 800d68e:	ea03 0501 	and.w	r5, r3, r1
 800d692:	ea04 0602 	and.w	r6, r4, r2
 800d696:	4629      	mov	r1, r5
 800d698:	4632      	mov	r2, r6
 800d69a:	f04f 0300 	mov.w	r3, #0
 800d69e:	f04f 0400 	mov.w	r4, #0
 800d6a2:	0154      	lsls	r4, r2, #5
 800d6a4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800d6a8:	014b      	lsls	r3, r1, #5
 800d6aa:	4619      	mov	r1, r3
 800d6ac:	4622      	mov	r2, r4
 800d6ae:	1b49      	subs	r1, r1, r5
 800d6b0:	eb62 0206 	sbc.w	r2, r2, r6
 800d6b4:	f04f 0300 	mov.w	r3, #0
 800d6b8:	f04f 0400 	mov.w	r4, #0
 800d6bc:	0194      	lsls	r4, r2, #6
 800d6be:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800d6c2:	018b      	lsls	r3, r1, #6
 800d6c4:	1a5b      	subs	r3, r3, r1
 800d6c6:	eb64 0402 	sbc.w	r4, r4, r2
 800d6ca:	f04f 0100 	mov.w	r1, #0
 800d6ce:	f04f 0200 	mov.w	r2, #0
 800d6d2:	00e2      	lsls	r2, r4, #3
 800d6d4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800d6d8:	00d9      	lsls	r1, r3, #3
 800d6da:	460b      	mov	r3, r1
 800d6dc:	4614      	mov	r4, r2
 800d6de:	195b      	adds	r3, r3, r5
 800d6e0:	eb44 0406 	adc.w	r4, r4, r6
 800d6e4:	f04f 0100 	mov.w	r1, #0
 800d6e8:	f04f 0200 	mov.w	r2, #0
 800d6ec:	02a2      	lsls	r2, r4, #10
 800d6ee:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800d6f2:	0299      	lsls	r1, r3, #10
 800d6f4:	460b      	mov	r3, r1
 800d6f6:	4614      	mov	r4, r2
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	4621      	mov	r1, r4
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	f04f 0400 	mov.w	r4, #0
 800d702:	461a      	mov	r2, r3
 800d704:	4623      	mov	r3, r4
 800d706:	f7f3 fabf 	bl	8000c88 <__aeabi_uldivmod>
 800d70a:	4603      	mov	r3, r0
 800d70c:	460c      	mov	r4, r1
 800d70e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800d710:	4b0a      	ldr	r3, [pc, #40]	; (800d73c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d712:	685b      	ldr	r3, [r3, #4]
 800d714:	0c1b      	lsrs	r3, r3, #16
 800d716:	f003 0303 	and.w	r3, r3, #3
 800d71a:	3301      	adds	r3, #1
 800d71c:	005b      	lsls	r3, r3, #1
 800d71e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800d720:	68fa      	ldr	r2, [r7, #12]
 800d722:	683b      	ldr	r3, [r7, #0]
 800d724:	fbb2 f3f3 	udiv	r3, r2, r3
 800d728:	60bb      	str	r3, [r7, #8]
      break;
 800d72a:	e002      	b.n	800d732 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800d72c:	4b04      	ldr	r3, [pc, #16]	; (800d740 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800d72e:	60bb      	str	r3, [r7, #8]
      break;
 800d730:	bf00      	nop
    }
  }
  return sysclockfreq;
 800d732:	68bb      	ldr	r3, [r7, #8]
}
 800d734:	4618      	mov	r0, r3
 800d736:	3714      	adds	r7, #20
 800d738:	46bd      	mov	sp, r7
 800d73a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d73c:	40023800 	.word	0x40023800
 800d740:	00f42400 	.word	0x00f42400
 800d744:	007a1200 	.word	0x007a1200

0800d748 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d748:	b480      	push	{r7}
 800d74a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d74c:	4b03      	ldr	r3, [pc, #12]	; (800d75c <HAL_RCC_GetHCLKFreq+0x14>)
 800d74e:	681b      	ldr	r3, [r3, #0]
}
 800d750:	4618      	mov	r0, r3
 800d752:	46bd      	mov	sp, r7
 800d754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d758:	4770      	bx	lr
 800d75a:	bf00      	nop
 800d75c:	20000c8c 	.word	0x20000c8c

0800d760 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d760:	b580      	push	{r7, lr}
 800d762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800d764:	f7ff fff0 	bl	800d748 <HAL_RCC_GetHCLKFreq>
 800d768:	4601      	mov	r1, r0
 800d76a:	4b05      	ldr	r3, [pc, #20]	; (800d780 <HAL_RCC_GetPCLK1Freq+0x20>)
 800d76c:	689b      	ldr	r3, [r3, #8]
 800d76e:	0a9b      	lsrs	r3, r3, #10
 800d770:	f003 0307 	and.w	r3, r3, #7
 800d774:	4a03      	ldr	r2, [pc, #12]	; (800d784 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d776:	5cd3      	ldrb	r3, [r2, r3]
 800d778:	fa21 f303 	lsr.w	r3, r1, r3
}
 800d77c:	4618      	mov	r0, r3
 800d77e:	bd80      	pop	{r7, pc}
 800d780:	40023800 	.word	0x40023800
 800d784:	0801b1cc 	.word	0x0801b1cc

0800d788 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800d78c:	f7ff ffdc 	bl	800d748 <HAL_RCC_GetHCLKFreq>
 800d790:	4601      	mov	r1, r0
 800d792:	4b05      	ldr	r3, [pc, #20]	; (800d7a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800d794:	689b      	ldr	r3, [r3, #8]
 800d796:	0b5b      	lsrs	r3, r3, #13
 800d798:	f003 0307 	and.w	r3, r3, #7
 800d79c:	4a03      	ldr	r2, [pc, #12]	; (800d7ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800d79e:	5cd3      	ldrb	r3, [r2, r3]
 800d7a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	bd80      	pop	{r7, pc}
 800d7a8:	40023800 	.word	0x40023800
 800d7ac:	0801b1cc 	.word	0x0801b1cc

0800d7b0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800d7b0:	b480      	push	{r7}
 800d7b2:	b083      	sub	sp, #12
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
 800d7b8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	220f      	movs	r2, #15
 800d7be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800d7c0:	4b12      	ldr	r3, [pc, #72]	; (800d80c <HAL_RCC_GetClockConfig+0x5c>)
 800d7c2:	689b      	ldr	r3, [r3, #8]
 800d7c4:	f003 0203 	and.w	r2, r3, #3
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800d7cc:	4b0f      	ldr	r3, [pc, #60]	; (800d80c <HAL_RCC_GetClockConfig+0x5c>)
 800d7ce:	689b      	ldr	r3, [r3, #8]
 800d7d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800d7d8:	4b0c      	ldr	r3, [pc, #48]	; (800d80c <HAL_RCC_GetClockConfig+0x5c>)
 800d7da:	689b      	ldr	r3, [r3, #8]
 800d7dc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800d7e4:	4b09      	ldr	r3, [pc, #36]	; (800d80c <HAL_RCC_GetClockConfig+0x5c>)
 800d7e6:	689b      	ldr	r3, [r3, #8]
 800d7e8:	08db      	lsrs	r3, r3, #3
 800d7ea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800d7f2:	4b07      	ldr	r3, [pc, #28]	; (800d810 <HAL_RCC_GetClockConfig+0x60>)
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	f003 020f 	and.w	r2, r3, #15
 800d7fa:	683b      	ldr	r3, [r7, #0]
 800d7fc:	601a      	str	r2, [r3, #0]
}
 800d7fe:	bf00      	nop
 800d800:	370c      	adds	r7, #12
 800d802:	46bd      	mov	sp, r7
 800d804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d808:	4770      	bx	lr
 800d80a:	bf00      	nop
 800d80c:	40023800 	.word	0x40023800
 800d810:	40023c00 	.word	0x40023c00

0800d814 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d814:	b580      	push	{r7, lr}
 800d816:	b082      	sub	sp, #8
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d101      	bne.n	800d826 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d822:	2301      	movs	r3, #1
 800d824:	e01d      	b.n	800d862 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d82c:	b2db      	uxtb	r3, r3
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d106      	bne.n	800d840 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	2200      	movs	r2, #0
 800d836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d83a:	6878      	ldr	r0, [r7, #4]
 800d83c:	f7fd f9b8 	bl	800abb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	2202      	movs	r2, #2
 800d844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681a      	ldr	r2, [r3, #0]
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	3304      	adds	r3, #4
 800d850:	4619      	mov	r1, r3
 800d852:	4610      	mov	r0, r2
 800d854:	f000 f95e 	bl	800db14 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	2201      	movs	r2, #1
 800d85c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d860:	2300      	movs	r3, #0
}
 800d862:	4618      	mov	r0, r3
 800d864:	3708      	adds	r7, #8
 800d866:	46bd      	mov	sp, r7
 800d868:	bd80      	pop	{r7, pc}

0800d86a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d86a:	b480      	push	{r7}
 800d86c:	b085      	sub	sp, #20
 800d86e:	af00      	add	r7, sp, #0
 800d870:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	68da      	ldr	r2, [r3, #12]
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	f042 0201 	orr.w	r2, r2, #1
 800d880:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	689b      	ldr	r3, [r3, #8]
 800d888:	f003 0307 	and.w	r3, r3, #7
 800d88c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	2b06      	cmp	r3, #6
 800d892:	d007      	beq.n	800d8a4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	681a      	ldr	r2, [r3, #0]
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	f042 0201 	orr.w	r2, r2, #1
 800d8a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d8a4:	2300      	movs	r3, #0
}
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	3714      	adds	r7, #20
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b0:	4770      	bx	lr

0800d8b2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d8b2:	b580      	push	{r7, lr}
 800d8b4:	b082      	sub	sp, #8
 800d8b6:	af00      	add	r7, sp, #0
 800d8b8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	691b      	ldr	r3, [r3, #16]
 800d8c0:	f003 0302 	and.w	r3, r3, #2
 800d8c4:	2b02      	cmp	r3, #2
 800d8c6:	d122      	bne.n	800d90e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	68db      	ldr	r3, [r3, #12]
 800d8ce:	f003 0302 	and.w	r3, r3, #2
 800d8d2:	2b02      	cmp	r3, #2
 800d8d4:	d11b      	bne.n	800d90e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	f06f 0202 	mvn.w	r2, #2
 800d8de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	2201      	movs	r2, #1
 800d8e4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	699b      	ldr	r3, [r3, #24]
 800d8ec:	f003 0303 	and.w	r3, r3, #3
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d003      	beq.n	800d8fc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d8f4:	6878      	ldr	r0, [r7, #4]
 800d8f6:	f000 f8ee 	bl	800dad6 <HAL_TIM_IC_CaptureCallback>
 800d8fa:	e005      	b.n	800d908 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d8fc:	6878      	ldr	r0, [r7, #4]
 800d8fe:	f000 f8e0 	bl	800dac2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d902:	6878      	ldr	r0, [r7, #4]
 800d904:	f000 f8f1 	bl	800daea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	2200      	movs	r2, #0
 800d90c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	691b      	ldr	r3, [r3, #16]
 800d914:	f003 0304 	and.w	r3, r3, #4
 800d918:	2b04      	cmp	r3, #4
 800d91a:	d122      	bne.n	800d962 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	68db      	ldr	r3, [r3, #12]
 800d922:	f003 0304 	and.w	r3, r3, #4
 800d926:	2b04      	cmp	r3, #4
 800d928:	d11b      	bne.n	800d962 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	f06f 0204 	mvn.w	r2, #4
 800d932:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2202      	movs	r2, #2
 800d938:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	699b      	ldr	r3, [r3, #24]
 800d940:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d944:	2b00      	cmp	r3, #0
 800d946:	d003      	beq.n	800d950 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d948:	6878      	ldr	r0, [r7, #4]
 800d94a:	f000 f8c4 	bl	800dad6 <HAL_TIM_IC_CaptureCallback>
 800d94e:	e005      	b.n	800d95c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d950:	6878      	ldr	r0, [r7, #4]
 800d952:	f000 f8b6 	bl	800dac2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d956:	6878      	ldr	r0, [r7, #4]
 800d958:	f000 f8c7 	bl	800daea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	2200      	movs	r2, #0
 800d960:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	691b      	ldr	r3, [r3, #16]
 800d968:	f003 0308 	and.w	r3, r3, #8
 800d96c:	2b08      	cmp	r3, #8
 800d96e:	d122      	bne.n	800d9b6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	68db      	ldr	r3, [r3, #12]
 800d976:	f003 0308 	and.w	r3, r3, #8
 800d97a:	2b08      	cmp	r3, #8
 800d97c:	d11b      	bne.n	800d9b6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	f06f 0208 	mvn.w	r2, #8
 800d986:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2204      	movs	r2, #4
 800d98c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	69db      	ldr	r3, [r3, #28]
 800d994:	f003 0303 	and.w	r3, r3, #3
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d003      	beq.n	800d9a4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d99c:	6878      	ldr	r0, [r7, #4]
 800d99e:	f000 f89a 	bl	800dad6 <HAL_TIM_IC_CaptureCallback>
 800d9a2:	e005      	b.n	800d9b0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d9a4:	6878      	ldr	r0, [r7, #4]
 800d9a6:	f000 f88c 	bl	800dac2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d9aa:	6878      	ldr	r0, [r7, #4]
 800d9ac:	f000 f89d 	bl	800daea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	691b      	ldr	r3, [r3, #16]
 800d9bc:	f003 0310 	and.w	r3, r3, #16
 800d9c0:	2b10      	cmp	r3, #16
 800d9c2:	d122      	bne.n	800da0a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	68db      	ldr	r3, [r3, #12]
 800d9ca:	f003 0310 	and.w	r3, r3, #16
 800d9ce:	2b10      	cmp	r3, #16
 800d9d0:	d11b      	bne.n	800da0a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	f06f 0210 	mvn.w	r2, #16
 800d9da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	2208      	movs	r2, #8
 800d9e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	69db      	ldr	r3, [r3, #28]
 800d9e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d003      	beq.n	800d9f8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d9f0:	6878      	ldr	r0, [r7, #4]
 800d9f2:	f000 f870 	bl	800dad6 <HAL_TIM_IC_CaptureCallback>
 800d9f6:	e005      	b.n	800da04 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d9f8:	6878      	ldr	r0, [r7, #4]
 800d9fa:	f000 f862 	bl	800dac2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d9fe:	6878      	ldr	r0, [r7, #4]
 800da00:	f000 f873 	bl	800daea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2200      	movs	r2, #0
 800da08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	691b      	ldr	r3, [r3, #16]
 800da10:	f003 0301 	and.w	r3, r3, #1
 800da14:	2b01      	cmp	r3, #1
 800da16:	d10e      	bne.n	800da36 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	68db      	ldr	r3, [r3, #12]
 800da1e:	f003 0301 	and.w	r3, r3, #1
 800da22:	2b01      	cmp	r3, #1
 800da24:	d107      	bne.n	800da36 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	f06f 0201 	mvn.w	r2, #1
 800da2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800da30:	6878      	ldr	r0, [r7, #4]
 800da32:	f7f5 fe63 	bl	80036fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	691b      	ldr	r3, [r3, #16]
 800da3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da40:	2b80      	cmp	r3, #128	; 0x80
 800da42:	d10e      	bne.n	800da62 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	68db      	ldr	r3, [r3, #12]
 800da4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da4e:	2b80      	cmp	r3, #128	; 0x80
 800da50:	d107      	bne.n	800da62 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800da5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800da5c:	6878      	ldr	r0, [r7, #4]
 800da5e:	f000 f97f 	bl	800dd60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	691b      	ldr	r3, [r3, #16]
 800da68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da6c:	2b40      	cmp	r3, #64	; 0x40
 800da6e:	d10e      	bne.n	800da8e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	68db      	ldr	r3, [r3, #12]
 800da76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da7a:	2b40      	cmp	r3, #64	; 0x40
 800da7c:	d107      	bne.n	800da8e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800da86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800da88:	6878      	ldr	r0, [r7, #4]
 800da8a:	f000 f838 	bl	800dafe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	691b      	ldr	r3, [r3, #16]
 800da94:	f003 0320 	and.w	r3, r3, #32
 800da98:	2b20      	cmp	r3, #32
 800da9a:	d10e      	bne.n	800daba <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	68db      	ldr	r3, [r3, #12]
 800daa2:	f003 0320 	and.w	r3, r3, #32
 800daa6:	2b20      	cmp	r3, #32
 800daa8:	d107      	bne.n	800daba <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	f06f 0220 	mvn.w	r2, #32
 800dab2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dab4:	6878      	ldr	r0, [r7, #4]
 800dab6:	f000 f949 	bl	800dd4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800daba:	bf00      	nop
 800dabc:	3708      	adds	r7, #8
 800dabe:	46bd      	mov	sp, r7
 800dac0:	bd80      	pop	{r7, pc}

0800dac2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dac2:	b480      	push	{r7}
 800dac4:	b083      	sub	sp, #12
 800dac6:	af00      	add	r7, sp, #0
 800dac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800daca:	bf00      	nop
 800dacc:	370c      	adds	r7, #12
 800dace:	46bd      	mov	sp, r7
 800dad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad4:	4770      	bx	lr

0800dad6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dad6:	b480      	push	{r7}
 800dad8:	b083      	sub	sp, #12
 800dada:	af00      	add	r7, sp, #0
 800dadc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800dade:	bf00      	nop
 800dae0:	370c      	adds	r7, #12
 800dae2:	46bd      	mov	sp, r7
 800dae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae8:	4770      	bx	lr

0800daea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800daea:	b480      	push	{r7}
 800daec:	b083      	sub	sp, #12
 800daee:	af00      	add	r7, sp, #0
 800daf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800daf2:	bf00      	nop
 800daf4:	370c      	adds	r7, #12
 800daf6:	46bd      	mov	sp, r7
 800daf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafc:	4770      	bx	lr

0800dafe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800dafe:	b480      	push	{r7}
 800db00:	b083      	sub	sp, #12
 800db02:	af00      	add	r7, sp, #0
 800db04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800db06:	bf00      	nop
 800db08:	370c      	adds	r7, #12
 800db0a:	46bd      	mov	sp, r7
 800db0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db10:	4770      	bx	lr
	...

0800db14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800db14:	b480      	push	{r7}
 800db16:	b085      	sub	sp, #20
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
 800db1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	4a40      	ldr	r2, [pc, #256]	; (800dc28 <TIM_Base_SetConfig+0x114>)
 800db28:	4293      	cmp	r3, r2
 800db2a:	d013      	beq.n	800db54 <TIM_Base_SetConfig+0x40>
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db32:	d00f      	beq.n	800db54 <TIM_Base_SetConfig+0x40>
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	4a3d      	ldr	r2, [pc, #244]	; (800dc2c <TIM_Base_SetConfig+0x118>)
 800db38:	4293      	cmp	r3, r2
 800db3a:	d00b      	beq.n	800db54 <TIM_Base_SetConfig+0x40>
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	4a3c      	ldr	r2, [pc, #240]	; (800dc30 <TIM_Base_SetConfig+0x11c>)
 800db40:	4293      	cmp	r3, r2
 800db42:	d007      	beq.n	800db54 <TIM_Base_SetConfig+0x40>
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	4a3b      	ldr	r2, [pc, #236]	; (800dc34 <TIM_Base_SetConfig+0x120>)
 800db48:	4293      	cmp	r3, r2
 800db4a:	d003      	beq.n	800db54 <TIM_Base_SetConfig+0x40>
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	4a3a      	ldr	r2, [pc, #232]	; (800dc38 <TIM_Base_SetConfig+0x124>)
 800db50:	4293      	cmp	r3, r2
 800db52:	d108      	bne.n	800db66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800db5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800db5c:	683b      	ldr	r3, [r7, #0]
 800db5e:	685b      	ldr	r3, [r3, #4]
 800db60:	68fa      	ldr	r2, [r7, #12]
 800db62:	4313      	orrs	r3, r2
 800db64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	4a2f      	ldr	r2, [pc, #188]	; (800dc28 <TIM_Base_SetConfig+0x114>)
 800db6a:	4293      	cmp	r3, r2
 800db6c:	d02b      	beq.n	800dbc6 <TIM_Base_SetConfig+0xb2>
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db74:	d027      	beq.n	800dbc6 <TIM_Base_SetConfig+0xb2>
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	4a2c      	ldr	r2, [pc, #176]	; (800dc2c <TIM_Base_SetConfig+0x118>)
 800db7a:	4293      	cmp	r3, r2
 800db7c:	d023      	beq.n	800dbc6 <TIM_Base_SetConfig+0xb2>
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	4a2b      	ldr	r2, [pc, #172]	; (800dc30 <TIM_Base_SetConfig+0x11c>)
 800db82:	4293      	cmp	r3, r2
 800db84:	d01f      	beq.n	800dbc6 <TIM_Base_SetConfig+0xb2>
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	4a2a      	ldr	r2, [pc, #168]	; (800dc34 <TIM_Base_SetConfig+0x120>)
 800db8a:	4293      	cmp	r3, r2
 800db8c:	d01b      	beq.n	800dbc6 <TIM_Base_SetConfig+0xb2>
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	4a29      	ldr	r2, [pc, #164]	; (800dc38 <TIM_Base_SetConfig+0x124>)
 800db92:	4293      	cmp	r3, r2
 800db94:	d017      	beq.n	800dbc6 <TIM_Base_SetConfig+0xb2>
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	4a28      	ldr	r2, [pc, #160]	; (800dc3c <TIM_Base_SetConfig+0x128>)
 800db9a:	4293      	cmp	r3, r2
 800db9c:	d013      	beq.n	800dbc6 <TIM_Base_SetConfig+0xb2>
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	4a27      	ldr	r2, [pc, #156]	; (800dc40 <TIM_Base_SetConfig+0x12c>)
 800dba2:	4293      	cmp	r3, r2
 800dba4:	d00f      	beq.n	800dbc6 <TIM_Base_SetConfig+0xb2>
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	4a26      	ldr	r2, [pc, #152]	; (800dc44 <TIM_Base_SetConfig+0x130>)
 800dbaa:	4293      	cmp	r3, r2
 800dbac:	d00b      	beq.n	800dbc6 <TIM_Base_SetConfig+0xb2>
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	4a25      	ldr	r2, [pc, #148]	; (800dc48 <TIM_Base_SetConfig+0x134>)
 800dbb2:	4293      	cmp	r3, r2
 800dbb4:	d007      	beq.n	800dbc6 <TIM_Base_SetConfig+0xb2>
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	4a24      	ldr	r2, [pc, #144]	; (800dc4c <TIM_Base_SetConfig+0x138>)
 800dbba:	4293      	cmp	r3, r2
 800dbbc:	d003      	beq.n	800dbc6 <TIM_Base_SetConfig+0xb2>
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	4a23      	ldr	r2, [pc, #140]	; (800dc50 <TIM_Base_SetConfig+0x13c>)
 800dbc2:	4293      	cmp	r3, r2
 800dbc4:	d108      	bne.n	800dbd8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dbcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dbce:	683b      	ldr	r3, [r7, #0]
 800dbd0:	68db      	ldr	r3, [r3, #12]
 800dbd2:	68fa      	ldr	r2, [r7, #12]
 800dbd4:	4313      	orrs	r3, r2
 800dbd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800dbde:	683b      	ldr	r3, [r7, #0]
 800dbe0:	695b      	ldr	r3, [r3, #20]
 800dbe2:	4313      	orrs	r3, r2
 800dbe4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	68fa      	ldr	r2, [r7, #12]
 800dbea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dbec:	683b      	ldr	r3, [r7, #0]
 800dbee:	689a      	ldr	r2, [r3, #8]
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dbf4:	683b      	ldr	r3, [r7, #0]
 800dbf6:	681a      	ldr	r2, [r3, #0]
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	4a0a      	ldr	r2, [pc, #40]	; (800dc28 <TIM_Base_SetConfig+0x114>)
 800dc00:	4293      	cmp	r3, r2
 800dc02:	d003      	beq.n	800dc0c <TIM_Base_SetConfig+0xf8>
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	4a0c      	ldr	r2, [pc, #48]	; (800dc38 <TIM_Base_SetConfig+0x124>)
 800dc08:	4293      	cmp	r3, r2
 800dc0a:	d103      	bne.n	800dc14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dc0c:	683b      	ldr	r3, [r7, #0]
 800dc0e:	691a      	ldr	r2, [r3, #16]
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	2201      	movs	r2, #1
 800dc18:	615a      	str	r2, [r3, #20]
}
 800dc1a:	bf00      	nop
 800dc1c:	3714      	adds	r7, #20
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc24:	4770      	bx	lr
 800dc26:	bf00      	nop
 800dc28:	40010000 	.word	0x40010000
 800dc2c:	40000400 	.word	0x40000400
 800dc30:	40000800 	.word	0x40000800
 800dc34:	40000c00 	.word	0x40000c00
 800dc38:	40010400 	.word	0x40010400
 800dc3c:	40014000 	.word	0x40014000
 800dc40:	40014400 	.word	0x40014400
 800dc44:	40014800 	.word	0x40014800
 800dc48:	40001800 	.word	0x40001800
 800dc4c:	40001c00 	.word	0x40001c00
 800dc50:	40002000 	.word	0x40002000

0800dc54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dc54:	b480      	push	{r7}
 800dc56:	b085      	sub	sp, #20
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
 800dc5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dc64:	2b01      	cmp	r3, #1
 800dc66:	d101      	bne.n	800dc6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dc68:	2302      	movs	r3, #2
 800dc6a:	e05a      	b.n	800dd22 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2201      	movs	r2, #1
 800dc70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	2202      	movs	r2, #2
 800dc78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	685b      	ldr	r3, [r3, #4]
 800dc82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	689b      	ldr	r3, [r3, #8]
 800dc8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dc94:	683b      	ldr	r3, [r7, #0]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	68fa      	ldr	r2, [r7, #12]
 800dc9a:	4313      	orrs	r3, r2
 800dc9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	68fa      	ldr	r2, [r7, #12]
 800dca4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	4a21      	ldr	r2, [pc, #132]	; (800dd30 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800dcac:	4293      	cmp	r3, r2
 800dcae:	d022      	beq.n	800dcf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dcb8:	d01d      	beq.n	800dcf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	4a1d      	ldr	r2, [pc, #116]	; (800dd34 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800dcc0:	4293      	cmp	r3, r2
 800dcc2:	d018      	beq.n	800dcf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	4a1b      	ldr	r2, [pc, #108]	; (800dd38 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800dcca:	4293      	cmp	r3, r2
 800dccc:	d013      	beq.n	800dcf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	4a1a      	ldr	r2, [pc, #104]	; (800dd3c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800dcd4:	4293      	cmp	r3, r2
 800dcd6:	d00e      	beq.n	800dcf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	4a18      	ldr	r2, [pc, #96]	; (800dd40 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800dcde:	4293      	cmp	r3, r2
 800dce0:	d009      	beq.n	800dcf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	4a17      	ldr	r2, [pc, #92]	; (800dd44 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800dce8:	4293      	cmp	r3, r2
 800dcea:	d004      	beq.n	800dcf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	4a15      	ldr	r2, [pc, #84]	; (800dd48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800dcf2:	4293      	cmp	r3, r2
 800dcf4:	d10c      	bne.n	800dd10 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dcf6:	68bb      	ldr	r3, [r7, #8]
 800dcf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dcfc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dcfe:	683b      	ldr	r3, [r7, #0]
 800dd00:	685b      	ldr	r3, [r3, #4]
 800dd02:	68ba      	ldr	r2, [r7, #8]
 800dd04:	4313      	orrs	r3, r2
 800dd06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	68ba      	ldr	r2, [r7, #8]
 800dd0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	2201      	movs	r2, #1
 800dd14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dd20:	2300      	movs	r3, #0
}
 800dd22:	4618      	mov	r0, r3
 800dd24:	3714      	adds	r7, #20
 800dd26:	46bd      	mov	sp, r7
 800dd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2c:	4770      	bx	lr
 800dd2e:	bf00      	nop
 800dd30:	40010000 	.word	0x40010000
 800dd34:	40000400 	.word	0x40000400
 800dd38:	40000800 	.word	0x40000800
 800dd3c:	40000c00 	.word	0x40000c00
 800dd40:	40010400 	.word	0x40010400
 800dd44:	40014000 	.word	0x40014000
 800dd48:	40001800 	.word	0x40001800

0800dd4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dd4c:	b480      	push	{r7}
 800dd4e:	b083      	sub	sp, #12
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dd54:	bf00      	nop
 800dd56:	370c      	adds	r7, #12
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5e:	4770      	bx	lr

0800dd60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dd60:	b480      	push	{r7}
 800dd62:	b083      	sub	sp, #12
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dd68:	bf00      	nop
 800dd6a:	370c      	adds	r7, #12
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd72:	4770      	bx	lr

0800dd74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b082      	sub	sp, #8
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d101      	bne.n	800dd86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dd82:	2301      	movs	r3, #1
 800dd84:	e03f      	b.n	800de06 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800dd8c:	b2db      	uxtb	r3, r3
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d106      	bne.n	800dda0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	2200      	movs	r2, #0
 800dd96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dd9a:	6878      	ldr	r0, [r7, #4]
 800dd9c:	f7fc ff5a 	bl	800ac54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	2224      	movs	r2, #36	; 0x24
 800dda4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	68da      	ldr	r2, [r3, #12]
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ddb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ddb8:	6878      	ldr	r0, [r7, #4]
 800ddba:	f000 fb6b 	bl	800e494 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	691a      	ldr	r2, [r3, #16]
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ddcc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	695a      	ldr	r2, [r3, #20]
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800dddc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	68da      	ldr	r2, [r3, #12]
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ddec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	2220      	movs	r2, #32
 800ddf8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	2220      	movs	r2, #32
 800de00:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800de04:	2300      	movs	r3, #0
}
 800de06:	4618      	mov	r0, r3
 800de08:	3708      	adds	r7, #8
 800de0a:	46bd      	mov	sp, r7
 800de0c:	bd80      	pop	{r7, pc}
	...

0800de10 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b086      	sub	sp, #24
 800de14:	af00      	add	r7, sp, #0
 800de16:	60f8      	str	r0, [r7, #12]
 800de18:	60b9      	str	r1, [r7, #8]
 800de1a:	4613      	mov	r3, r2
 800de1c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800de24:	b2db      	uxtb	r3, r3
 800de26:	2b20      	cmp	r3, #32
 800de28:	d153      	bne.n	800ded2 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800de2a:	68bb      	ldr	r3, [r7, #8]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d002      	beq.n	800de36 <HAL_UART_Transmit_DMA+0x26>
 800de30:	88fb      	ldrh	r3, [r7, #6]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d101      	bne.n	800de3a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800de36:	2301      	movs	r3, #1
 800de38:	e04c      	b.n	800ded4 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800de40:	2b01      	cmp	r3, #1
 800de42:	d101      	bne.n	800de48 <HAL_UART_Transmit_DMA+0x38>
 800de44:	2302      	movs	r3, #2
 800de46:	e045      	b.n	800ded4 <HAL_UART_Transmit_DMA+0xc4>
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	2201      	movs	r2, #1
 800de4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800de50:	68ba      	ldr	r2, [r7, #8]
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	88fa      	ldrh	r2, [r7, #6]
 800de5a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	88fa      	ldrh	r2, [r7, #6]
 800de60:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	2200      	movs	r2, #0
 800de66:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	2221      	movs	r2, #33	; 0x21
 800de6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de74:	4a19      	ldr	r2, [pc, #100]	; (800dedc <HAL_UART_Transmit_DMA+0xcc>)
 800de76:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de7c:	4a18      	ldr	r2, [pc, #96]	; (800dee0 <HAL_UART_Transmit_DMA+0xd0>)
 800de7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de84:	4a17      	ldr	r2, [pc, #92]	; (800dee4 <HAL_UART_Transmit_DMA+0xd4>)
 800de86:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de8c:	2200      	movs	r2, #0
 800de8e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800de90:	f107 0308 	add.w	r3, r7, #8
 800de94:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800de9a:	697b      	ldr	r3, [r7, #20]
 800de9c:	6819      	ldr	r1, [r3, #0]
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	3304      	adds	r3, #4
 800dea4:	461a      	mov	r2, r3
 800dea6:	88fb      	ldrh	r3, [r7, #6]
 800dea8:	f7fd f99c 	bl	800b1e4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800deb4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	2200      	movs	r2, #0
 800deba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	695a      	ldr	r2, [r3, #20]
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800decc:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800dece:	2300      	movs	r3, #0
 800ded0:	e000      	b.n	800ded4 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800ded2:	2302      	movs	r3, #2
  }
}
 800ded4:	4618      	mov	r0, r3
 800ded6:	3718      	adds	r7, #24
 800ded8:	46bd      	mov	sp, r7
 800deda:	bd80      	pop	{r7, pc}
 800dedc:	0800e125 	.word	0x0800e125
 800dee0:	0800e177 	.word	0x0800e177
 800dee4:	0800e193 	.word	0x0800e193

0800dee8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b088      	sub	sp, #32
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	68db      	ldr	r3, [r3, #12]
 800defe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	695b      	ldr	r3, [r3, #20]
 800df06:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800df08:	2300      	movs	r3, #0
 800df0a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800df0c:	2300      	movs	r3, #0
 800df0e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800df10:	69fb      	ldr	r3, [r7, #28]
 800df12:	f003 030f 	and.w	r3, r3, #15
 800df16:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800df18:	693b      	ldr	r3, [r7, #16]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d10d      	bne.n	800df3a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800df1e:	69fb      	ldr	r3, [r7, #28]
 800df20:	f003 0320 	and.w	r3, r3, #32
 800df24:	2b00      	cmp	r3, #0
 800df26:	d008      	beq.n	800df3a <HAL_UART_IRQHandler+0x52>
 800df28:	69bb      	ldr	r3, [r7, #24]
 800df2a:	f003 0320 	and.w	r3, r3, #32
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d003      	beq.n	800df3a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800df32:	6878      	ldr	r0, [r7, #4]
 800df34:	f000 fa2d 	bl	800e392 <UART_Receive_IT>
      return;
 800df38:	e0d1      	b.n	800e0de <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800df3a:	693b      	ldr	r3, [r7, #16]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	f000 80b0 	beq.w	800e0a2 <HAL_UART_IRQHandler+0x1ba>
 800df42:	697b      	ldr	r3, [r7, #20]
 800df44:	f003 0301 	and.w	r3, r3, #1
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d105      	bne.n	800df58 <HAL_UART_IRQHandler+0x70>
 800df4c:	69bb      	ldr	r3, [r7, #24]
 800df4e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800df52:	2b00      	cmp	r3, #0
 800df54:	f000 80a5 	beq.w	800e0a2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800df58:	69fb      	ldr	r3, [r7, #28]
 800df5a:	f003 0301 	and.w	r3, r3, #1
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d00a      	beq.n	800df78 <HAL_UART_IRQHandler+0x90>
 800df62:	69bb      	ldr	r3, [r7, #24]
 800df64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d005      	beq.n	800df78 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df70:	f043 0201 	orr.w	r2, r3, #1
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800df78:	69fb      	ldr	r3, [r7, #28]
 800df7a:	f003 0304 	and.w	r3, r3, #4
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d00a      	beq.n	800df98 <HAL_UART_IRQHandler+0xb0>
 800df82:	697b      	ldr	r3, [r7, #20]
 800df84:	f003 0301 	and.w	r3, r3, #1
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d005      	beq.n	800df98 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df90:	f043 0202 	orr.w	r2, r3, #2
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800df98:	69fb      	ldr	r3, [r7, #28]
 800df9a:	f003 0302 	and.w	r3, r3, #2
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d00a      	beq.n	800dfb8 <HAL_UART_IRQHandler+0xd0>
 800dfa2:	697b      	ldr	r3, [r7, #20]
 800dfa4:	f003 0301 	and.w	r3, r3, #1
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d005      	beq.n	800dfb8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfb0:	f043 0204 	orr.w	r2, r3, #4
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800dfb8:	69fb      	ldr	r3, [r7, #28]
 800dfba:	f003 0308 	and.w	r3, r3, #8
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d00f      	beq.n	800dfe2 <HAL_UART_IRQHandler+0xfa>
 800dfc2:	69bb      	ldr	r3, [r7, #24]
 800dfc4:	f003 0320 	and.w	r3, r3, #32
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d104      	bne.n	800dfd6 <HAL_UART_IRQHandler+0xee>
 800dfcc:	697b      	ldr	r3, [r7, #20]
 800dfce:	f003 0301 	and.w	r3, r3, #1
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d005      	beq.n	800dfe2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfda:	f043 0208 	orr.w	r2, r3, #8
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d078      	beq.n	800e0dc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800dfea:	69fb      	ldr	r3, [r7, #28]
 800dfec:	f003 0320 	and.w	r3, r3, #32
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d007      	beq.n	800e004 <HAL_UART_IRQHandler+0x11c>
 800dff4:	69bb      	ldr	r3, [r7, #24]
 800dff6:	f003 0320 	and.w	r3, r3, #32
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d002      	beq.n	800e004 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800dffe:	6878      	ldr	r0, [r7, #4]
 800e000:	f000 f9c7 	bl	800e392 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	695b      	ldr	r3, [r3, #20]
 800e00a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e00e:	2b40      	cmp	r3, #64	; 0x40
 800e010:	bf0c      	ite	eq
 800e012:	2301      	moveq	r3, #1
 800e014:	2300      	movne	r3, #0
 800e016:	b2db      	uxtb	r3, r3
 800e018:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e01e:	f003 0308 	and.w	r3, r3, #8
 800e022:	2b00      	cmp	r3, #0
 800e024:	d102      	bne.n	800e02c <HAL_UART_IRQHandler+0x144>
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d031      	beq.n	800e090 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e02c:	6878      	ldr	r0, [r7, #4]
 800e02e:	f000 f910 	bl	800e252 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	695b      	ldr	r3, [r3, #20]
 800e038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e03c:	2b40      	cmp	r3, #64	; 0x40
 800e03e:	d123      	bne.n	800e088 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	695a      	ldr	r2, [r3, #20]
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e04e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e054:	2b00      	cmp	r3, #0
 800e056:	d013      	beq.n	800e080 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e05c:	4a21      	ldr	r2, [pc, #132]	; (800e0e4 <HAL_UART_IRQHandler+0x1fc>)
 800e05e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e064:	4618      	mov	r0, r3
 800e066:	f7fd f915 	bl	800b294 <HAL_DMA_Abort_IT>
 800e06a:	4603      	mov	r3, r0
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d016      	beq.n	800e09e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e076:	687a      	ldr	r2, [r7, #4]
 800e078:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e07a:	4610      	mov	r0, r2
 800e07c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e07e:	e00e      	b.n	800e09e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e080:	6878      	ldr	r0, [r7, #4]
 800e082:	f000 f845 	bl	800e110 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e086:	e00a      	b.n	800e09e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e088:	6878      	ldr	r0, [r7, #4]
 800e08a:	f000 f841 	bl	800e110 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e08e:	e006      	b.n	800e09e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e090:	6878      	ldr	r0, [r7, #4]
 800e092:	f000 f83d 	bl	800e110 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	2200      	movs	r2, #0
 800e09a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800e09c:	e01e      	b.n	800e0dc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e09e:	bf00      	nop
    return;
 800e0a0:	e01c      	b.n	800e0dc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800e0a2:	69fb      	ldr	r3, [r7, #28]
 800e0a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d008      	beq.n	800e0be <HAL_UART_IRQHandler+0x1d6>
 800e0ac:	69bb      	ldr	r3, [r7, #24]
 800e0ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d003      	beq.n	800e0be <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800e0b6:	6878      	ldr	r0, [r7, #4]
 800e0b8:	f000 f8fd 	bl	800e2b6 <UART_Transmit_IT>
    return;
 800e0bc:	e00f      	b.n	800e0de <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800e0be:	69fb      	ldr	r3, [r7, #28]
 800e0c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d00a      	beq.n	800e0de <HAL_UART_IRQHandler+0x1f6>
 800e0c8:	69bb      	ldr	r3, [r7, #24]
 800e0ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d005      	beq.n	800e0de <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800e0d2:	6878      	ldr	r0, [r7, #4]
 800e0d4:	f000 f945 	bl	800e362 <UART_EndTransmit_IT>
    return;
 800e0d8:	bf00      	nop
 800e0da:	e000      	b.n	800e0de <HAL_UART_IRQHandler+0x1f6>
    return;
 800e0dc:	bf00      	nop
  }
}
 800e0de:	3720      	adds	r7, #32
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	bd80      	pop	{r7, pc}
 800e0e4:	0800e28f 	.word	0x0800e28f

0800e0e8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e0e8:	b480      	push	{r7}
 800e0ea:	b083      	sub	sp, #12
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800e0f0:	bf00      	nop
 800e0f2:	370c      	adds	r7, #12
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fa:	4770      	bx	lr

0800e0fc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e0fc:	b480      	push	{r7}
 800e0fe:	b083      	sub	sp, #12
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800e104:	bf00      	nop
 800e106:	370c      	adds	r7, #12
 800e108:	46bd      	mov	sp, r7
 800e10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10e:	4770      	bx	lr

0800e110 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e110:	b480      	push	{r7}
 800e112:	b083      	sub	sp, #12
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800e118:	bf00      	nop
 800e11a:	370c      	adds	r7, #12
 800e11c:	46bd      	mov	sp, r7
 800e11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e122:	4770      	bx	lr

0800e124 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b084      	sub	sp, #16
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e130:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d113      	bne.n	800e168 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	2200      	movs	r2, #0
 800e144:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	695a      	ldr	r2, [r3, #20]
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e154:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	68da      	ldr	r2, [r3, #12]
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e164:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e166:	e002      	b.n	800e16e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800e168:	68f8      	ldr	r0, [r7, #12]
 800e16a:	f7fc fdf5 	bl	800ad58 <HAL_UART_TxCpltCallback>
}
 800e16e:	bf00      	nop
 800e170:	3710      	adds	r7, #16
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}

0800e176 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e176:	b580      	push	{r7, lr}
 800e178:	b084      	sub	sp, #16
 800e17a:	af00      	add	r7, sp, #0
 800e17c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e182:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e184:	68f8      	ldr	r0, [r7, #12]
 800e186:	f7ff ffaf 	bl	800e0e8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e18a:	bf00      	nop
 800e18c:	3710      	adds	r7, #16
 800e18e:	46bd      	mov	sp, r7
 800e190:	bd80      	pop	{r7, pc}

0800e192 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e192:	b580      	push	{r7, lr}
 800e194:	b084      	sub	sp, #16
 800e196:	af00      	add	r7, sp, #0
 800e198:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800e19a:	2300      	movs	r3, #0
 800e19c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1a2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800e1a4:	68bb      	ldr	r3, [r7, #8]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	695b      	ldr	r3, [r3, #20]
 800e1aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e1ae:	2b80      	cmp	r3, #128	; 0x80
 800e1b0:	bf0c      	ite	eq
 800e1b2:	2301      	moveq	r3, #1
 800e1b4:	2300      	movne	r3, #0
 800e1b6:	b2db      	uxtb	r3, r3
 800e1b8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800e1ba:	68bb      	ldr	r3, [r7, #8]
 800e1bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e1c0:	b2db      	uxtb	r3, r3
 800e1c2:	2b21      	cmp	r3, #33	; 0x21
 800e1c4:	d108      	bne.n	800e1d8 <UART_DMAError+0x46>
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d005      	beq.n	800e1d8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800e1cc:	68bb      	ldr	r3, [r7, #8]
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800e1d2:	68b8      	ldr	r0, [r7, #8]
 800e1d4:	f000 f827 	bl	800e226 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e1d8:	68bb      	ldr	r3, [r7, #8]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	695b      	ldr	r3, [r3, #20]
 800e1de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1e2:	2b40      	cmp	r3, #64	; 0x40
 800e1e4:	bf0c      	ite	eq
 800e1e6:	2301      	moveq	r3, #1
 800e1e8:	2300      	movne	r3, #0
 800e1ea:	b2db      	uxtb	r3, r3
 800e1ec:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800e1ee:	68bb      	ldr	r3, [r7, #8]
 800e1f0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800e1f4:	b2db      	uxtb	r3, r3
 800e1f6:	2b22      	cmp	r3, #34	; 0x22
 800e1f8:	d108      	bne.n	800e20c <UART_DMAError+0x7a>
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d005      	beq.n	800e20c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800e200:	68bb      	ldr	r3, [r7, #8]
 800e202:	2200      	movs	r2, #0
 800e204:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800e206:	68b8      	ldr	r0, [r7, #8]
 800e208:	f000 f823 	bl	800e252 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e20c:	68bb      	ldr	r3, [r7, #8]
 800e20e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e210:	f043 0210 	orr.w	r2, r3, #16
 800e214:	68bb      	ldr	r3, [r7, #8]
 800e216:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e218:	68b8      	ldr	r0, [r7, #8]
 800e21a:	f7ff ff79 	bl	800e110 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e21e:	bf00      	nop
 800e220:	3710      	adds	r7, #16
 800e222:	46bd      	mov	sp, r7
 800e224:	bd80      	pop	{r7, pc}

0800e226 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e226:	b480      	push	{r7}
 800e228:	b083      	sub	sp, #12
 800e22a:	af00      	add	r7, sp, #0
 800e22c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	68da      	ldr	r2, [r3, #12]
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800e23c:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	2220      	movs	r2, #32
 800e242:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800e246:	bf00      	nop
 800e248:	370c      	adds	r7, #12
 800e24a:	46bd      	mov	sp, r7
 800e24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e250:	4770      	bx	lr

0800e252 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e252:	b480      	push	{r7}
 800e254:	b083      	sub	sp, #12
 800e256:	af00      	add	r7, sp, #0
 800e258:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	68da      	ldr	r2, [r3, #12]
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e268:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	695a      	ldr	r2, [r3, #20]
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	f022 0201 	bic.w	r2, r2, #1
 800e278:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	2220      	movs	r2, #32
 800e27e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800e282:	bf00      	nop
 800e284:	370c      	adds	r7, #12
 800e286:	46bd      	mov	sp, r7
 800e288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28c:	4770      	bx	lr

0800e28e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e28e:	b580      	push	{r7, lr}
 800e290:	b084      	sub	sp, #16
 800e292:	af00      	add	r7, sp, #0
 800e294:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e29a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	2200      	movs	r2, #0
 800e2a0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e2a8:	68f8      	ldr	r0, [r7, #12]
 800e2aa:	f7ff ff31 	bl	800e110 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e2ae:	bf00      	nop
 800e2b0:	3710      	adds	r7, #16
 800e2b2:	46bd      	mov	sp, r7
 800e2b4:	bd80      	pop	{r7, pc}

0800e2b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800e2b6:	b480      	push	{r7}
 800e2b8:	b085      	sub	sp, #20
 800e2ba:	af00      	add	r7, sp, #0
 800e2bc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e2c4:	b2db      	uxtb	r3, r3
 800e2c6:	2b21      	cmp	r3, #33	; 0x21
 800e2c8:	d144      	bne.n	800e354 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	689b      	ldr	r3, [r3, #8]
 800e2ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e2d2:	d11a      	bne.n	800e30a <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	6a1b      	ldr	r3, [r3, #32]
 800e2d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	881b      	ldrh	r3, [r3, #0]
 800e2de:	461a      	mov	r2, r3
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e2e8:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	691b      	ldr	r3, [r3, #16]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d105      	bne.n	800e2fe <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	6a1b      	ldr	r3, [r3, #32]
 800e2f6:	1c9a      	adds	r2, r3, #2
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	621a      	str	r2, [r3, #32]
 800e2fc:	e00e      	b.n	800e31c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	6a1b      	ldr	r3, [r3, #32]
 800e302:	1c5a      	adds	r2, r3, #1
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	621a      	str	r2, [r3, #32]
 800e308:	e008      	b.n	800e31c <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	6a1b      	ldr	r3, [r3, #32]
 800e30e:	1c59      	adds	r1, r3, #1
 800e310:	687a      	ldr	r2, [r7, #4]
 800e312:	6211      	str	r1, [r2, #32]
 800e314:	781a      	ldrb	r2, [r3, #0]
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e320:	b29b      	uxth	r3, r3
 800e322:	3b01      	subs	r3, #1
 800e324:	b29b      	uxth	r3, r3
 800e326:	687a      	ldr	r2, [r7, #4]
 800e328:	4619      	mov	r1, r3
 800e32a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d10f      	bne.n	800e350 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	68da      	ldr	r2, [r3, #12]
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e33e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	68da      	ldr	r2, [r3, #12]
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e34e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800e350:	2300      	movs	r3, #0
 800e352:	e000      	b.n	800e356 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800e354:	2302      	movs	r3, #2
  }
}
 800e356:	4618      	mov	r0, r3
 800e358:	3714      	adds	r7, #20
 800e35a:	46bd      	mov	sp, r7
 800e35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e360:	4770      	bx	lr

0800e362 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e362:	b580      	push	{r7, lr}
 800e364:	b082      	sub	sp, #8
 800e366:	af00      	add	r7, sp, #0
 800e368:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	68da      	ldr	r2, [r3, #12]
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e378:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	2220      	movs	r2, #32
 800e37e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e382:	6878      	ldr	r0, [r7, #4]
 800e384:	f7fc fce8 	bl	800ad58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800e388:	2300      	movs	r3, #0
}
 800e38a:	4618      	mov	r0, r3
 800e38c:	3708      	adds	r7, #8
 800e38e:	46bd      	mov	sp, r7
 800e390:	bd80      	pop	{r7, pc}

0800e392 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800e392:	b580      	push	{r7, lr}
 800e394:	b084      	sub	sp, #16
 800e396:	af00      	add	r7, sp, #0
 800e398:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800e3a0:	b2db      	uxtb	r3, r3
 800e3a2:	2b22      	cmp	r3, #34	; 0x22
 800e3a4:	d171      	bne.n	800e48a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	689b      	ldr	r3, [r3, #8]
 800e3aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e3ae:	d123      	bne.n	800e3f8 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3b4:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	691b      	ldr	r3, [r3, #16]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d10e      	bne.n	800e3dc <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	685b      	ldr	r3, [r3, #4]
 800e3c4:	b29b      	uxth	r3, r3
 800e3c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e3ca:	b29a      	uxth	r2, r3
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3d4:	1c9a      	adds	r2, r3, #2
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	629a      	str	r2, [r3, #40]	; 0x28
 800e3da:	e029      	b.n	800e430 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	685b      	ldr	r3, [r3, #4]
 800e3e2:	b29b      	uxth	r3, r3
 800e3e4:	b2db      	uxtb	r3, r3
 800e3e6:	b29a      	uxth	r2, r3
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3f0:	1c5a      	adds	r2, r3, #1
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	629a      	str	r2, [r3, #40]	; 0x28
 800e3f6:	e01b      	b.n	800e430 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	691b      	ldr	r3, [r3, #16]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d10a      	bne.n	800e416 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	6858      	ldr	r0, [r3, #4]
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e40a:	1c59      	adds	r1, r3, #1
 800e40c:	687a      	ldr	r2, [r7, #4]
 800e40e:	6291      	str	r1, [r2, #40]	; 0x28
 800e410:	b2c2      	uxtb	r2, r0
 800e412:	701a      	strb	r2, [r3, #0]
 800e414:	e00c      	b.n	800e430 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	685b      	ldr	r3, [r3, #4]
 800e41c:	b2da      	uxtb	r2, r3
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e422:	1c58      	adds	r0, r3, #1
 800e424:	6879      	ldr	r1, [r7, #4]
 800e426:	6288      	str	r0, [r1, #40]	; 0x28
 800e428:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e42c:	b2d2      	uxtb	r2, r2
 800e42e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e434:	b29b      	uxth	r3, r3
 800e436:	3b01      	subs	r3, #1
 800e438:	b29b      	uxth	r3, r3
 800e43a:	687a      	ldr	r2, [r7, #4]
 800e43c:	4619      	mov	r1, r3
 800e43e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800e440:	2b00      	cmp	r3, #0
 800e442:	d120      	bne.n	800e486 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	68da      	ldr	r2, [r3, #12]
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	f022 0220 	bic.w	r2, r2, #32
 800e452:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	68da      	ldr	r2, [r3, #12]
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e462:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	695a      	ldr	r2, [r3, #20]
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	f022 0201 	bic.w	r2, r2, #1
 800e472:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	2220      	movs	r2, #32
 800e478:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800e47c:	6878      	ldr	r0, [r7, #4]
 800e47e:	f7ff fe3d 	bl	800e0fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800e482:	2300      	movs	r3, #0
 800e484:	e002      	b.n	800e48c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800e486:	2300      	movs	r3, #0
 800e488:	e000      	b.n	800e48c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800e48a:	2302      	movs	r3, #2
  }
}
 800e48c:	4618      	mov	r0, r3
 800e48e:	3710      	adds	r7, #16
 800e490:	46bd      	mov	sp, r7
 800e492:	bd80      	pop	{r7, pc}

0800e494 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e498:	b085      	sub	sp, #20
 800e49a:	af00      	add	r7, sp, #0
 800e49c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	691b      	ldr	r3, [r3, #16]
 800e4a4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	68da      	ldr	r2, [r3, #12]
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	430a      	orrs	r2, r1
 800e4b2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	689a      	ldr	r2, [r3, #8]
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	691b      	ldr	r3, [r3, #16]
 800e4bc:	431a      	orrs	r2, r3
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	695b      	ldr	r3, [r3, #20]
 800e4c2:	431a      	orrs	r2, r3
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	69db      	ldr	r3, [r3, #28]
 800e4c8:	4313      	orrs	r3, r2
 800e4ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	68db      	ldr	r3, [r3, #12]
 800e4d2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800e4d6:	f023 030c 	bic.w	r3, r3, #12
 800e4da:	687a      	ldr	r2, [r7, #4]
 800e4dc:	6812      	ldr	r2, [r2, #0]
 800e4de:	68f9      	ldr	r1, [r7, #12]
 800e4e0:	430b      	orrs	r3, r1
 800e4e2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	695b      	ldr	r3, [r3, #20]
 800e4ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	699a      	ldr	r2, [r3, #24]
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	430a      	orrs	r2, r1
 800e4f8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	69db      	ldr	r3, [r3, #28]
 800e4fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e502:	f040 818b 	bne.w	800e81c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	4ac1      	ldr	r2, [pc, #772]	; (800e810 <UART_SetConfig+0x37c>)
 800e50c:	4293      	cmp	r3, r2
 800e50e:	d005      	beq.n	800e51c <UART_SetConfig+0x88>
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	4abf      	ldr	r2, [pc, #764]	; (800e814 <UART_SetConfig+0x380>)
 800e516:	4293      	cmp	r3, r2
 800e518:	f040 80bd 	bne.w	800e696 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800e51c:	f7ff f934 	bl	800d788 <HAL_RCC_GetPCLK2Freq>
 800e520:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e522:	68bb      	ldr	r3, [r7, #8]
 800e524:	461d      	mov	r5, r3
 800e526:	f04f 0600 	mov.w	r6, #0
 800e52a:	46a8      	mov	r8, r5
 800e52c:	46b1      	mov	r9, r6
 800e52e:	eb18 0308 	adds.w	r3, r8, r8
 800e532:	eb49 0409 	adc.w	r4, r9, r9
 800e536:	4698      	mov	r8, r3
 800e538:	46a1      	mov	r9, r4
 800e53a:	eb18 0805 	adds.w	r8, r8, r5
 800e53e:	eb49 0906 	adc.w	r9, r9, r6
 800e542:	f04f 0100 	mov.w	r1, #0
 800e546:	f04f 0200 	mov.w	r2, #0
 800e54a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800e54e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800e552:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800e556:	4688      	mov	r8, r1
 800e558:	4691      	mov	r9, r2
 800e55a:	eb18 0005 	adds.w	r0, r8, r5
 800e55e:	eb49 0106 	adc.w	r1, r9, r6
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	685b      	ldr	r3, [r3, #4]
 800e566:	461d      	mov	r5, r3
 800e568:	f04f 0600 	mov.w	r6, #0
 800e56c:	196b      	adds	r3, r5, r5
 800e56e:	eb46 0406 	adc.w	r4, r6, r6
 800e572:	461a      	mov	r2, r3
 800e574:	4623      	mov	r3, r4
 800e576:	f7f2 fb87 	bl	8000c88 <__aeabi_uldivmod>
 800e57a:	4603      	mov	r3, r0
 800e57c:	460c      	mov	r4, r1
 800e57e:	461a      	mov	r2, r3
 800e580:	4ba5      	ldr	r3, [pc, #660]	; (800e818 <UART_SetConfig+0x384>)
 800e582:	fba3 2302 	umull	r2, r3, r3, r2
 800e586:	095b      	lsrs	r3, r3, #5
 800e588:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800e58c:	68bb      	ldr	r3, [r7, #8]
 800e58e:	461d      	mov	r5, r3
 800e590:	f04f 0600 	mov.w	r6, #0
 800e594:	46a9      	mov	r9, r5
 800e596:	46b2      	mov	sl, r6
 800e598:	eb19 0309 	adds.w	r3, r9, r9
 800e59c:	eb4a 040a 	adc.w	r4, sl, sl
 800e5a0:	4699      	mov	r9, r3
 800e5a2:	46a2      	mov	sl, r4
 800e5a4:	eb19 0905 	adds.w	r9, r9, r5
 800e5a8:	eb4a 0a06 	adc.w	sl, sl, r6
 800e5ac:	f04f 0100 	mov.w	r1, #0
 800e5b0:	f04f 0200 	mov.w	r2, #0
 800e5b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e5b8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e5bc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e5c0:	4689      	mov	r9, r1
 800e5c2:	4692      	mov	sl, r2
 800e5c4:	eb19 0005 	adds.w	r0, r9, r5
 800e5c8:	eb4a 0106 	adc.w	r1, sl, r6
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	685b      	ldr	r3, [r3, #4]
 800e5d0:	461d      	mov	r5, r3
 800e5d2:	f04f 0600 	mov.w	r6, #0
 800e5d6:	196b      	adds	r3, r5, r5
 800e5d8:	eb46 0406 	adc.w	r4, r6, r6
 800e5dc:	461a      	mov	r2, r3
 800e5de:	4623      	mov	r3, r4
 800e5e0:	f7f2 fb52 	bl	8000c88 <__aeabi_uldivmod>
 800e5e4:	4603      	mov	r3, r0
 800e5e6:	460c      	mov	r4, r1
 800e5e8:	461a      	mov	r2, r3
 800e5ea:	4b8b      	ldr	r3, [pc, #556]	; (800e818 <UART_SetConfig+0x384>)
 800e5ec:	fba3 1302 	umull	r1, r3, r3, r2
 800e5f0:	095b      	lsrs	r3, r3, #5
 800e5f2:	2164      	movs	r1, #100	; 0x64
 800e5f4:	fb01 f303 	mul.w	r3, r1, r3
 800e5f8:	1ad3      	subs	r3, r2, r3
 800e5fa:	00db      	lsls	r3, r3, #3
 800e5fc:	3332      	adds	r3, #50	; 0x32
 800e5fe:	4a86      	ldr	r2, [pc, #536]	; (800e818 <UART_SetConfig+0x384>)
 800e600:	fba2 2303 	umull	r2, r3, r2, r3
 800e604:	095b      	lsrs	r3, r3, #5
 800e606:	005b      	lsls	r3, r3, #1
 800e608:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e60c:	4498      	add	r8, r3
 800e60e:	68bb      	ldr	r3, [r7, #8]
 800e610:	461d      	mov	r5, r3
 800e612:	f04f 0600 	mov.w	r6, #0
 800e616:	46a9      	mov	r9, r5
 800e618:	46b2      	mov	sl, r6
 800e61a:	eb19 0309 	adds.w	r3, r9, r9
 800e61e:	eb4a 040a 	adc.w	r4, sl, sl
 800e622:	4699      	mov	r9, r3
 800e624:	46a2      	mov	sl, r4
 800e626:	eb19 0905 	adds.w	r9, r9, r5
 800e62a:	eb4a 0a06 	adc.w	sl, sl, r6
 800e62e:	f04f 0100 	mov.w	r1, #0
 800e632:	f04f 0200 	mov.w	r2, #0
 800e636:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e63a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e63e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e642:	4689      	mov	r9, r1
 800e644:	4692      	mov	sl, r2
 800e646:	eb19 0005 	adds.w	r0, r9, r5
 800e64a:	eb4a 0106 	adc.w	r1, sl, r6
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	685b      	ldr	r3, [r3, #4]
 800e652:	461d      	mov	r5, r3
 800e654:	f04f 0600 	mov.w	r6, #0
 800e658:	196b      	adds	r3, r5, r5
 800e65a:	eb46 0406 	adc.w	r4, r6, r6
 800e65e:	461a      	mov	r2, r3
 800e660:	4623      	mov	r3, r4
 800e662:	f7f2 fb11 	bl	8000c88 <__aeabi_uldivmod>
 800e666:	4603      	mov	r3, r0
 800e668:	460c      	mov	r4, r1
 800e66a:	461a      	mov	r2, r3
 800e66c:	4b6a      	ldr	r3, [pc, #424]	; (800e818 <UART_SetConfig+0x384>)
 800e66e:	fba3 1302 	umull	r1, r3, r3, r2
 800e672:	095b      	lsrs	r3, r3, #5
 800e674:	2164      	movs	r1, #100	; 0x64
 800e676:	fb01 f303 	mul.w	r3, r1, r3
 800e67a:	1ad3      	subs	r3, r2, r3
 800e67c:	00db      	lsls	r3, r3, #3
 800e67e:	3332      	adds	r3, #50	; 0x32
 800e680:	4a65      	ldr	r2, [pc, #404]	; (800e818 <UART_SetConfig+0x384>)
 800e682:	fba2 2303 	umull	r2, r3, r2, r3
 800e686:	095b      	lsrs	r3, r3, #5
 800e688:	f003 0207 	and.w	r2, r3, #7
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	4442      	add	r2, r8
 800e692:	609a      	str	r2, [r3, #8]
 800e694:	e26f      	b.n	800eb76 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800e696:	f7ff f863 	bl	800d760 <HAL_RCC_GetPCLK1Freq>
 800e69a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e69c:	68bb      	ldr	r3, [r7, #8]
 800e69e:	461d      	mov	r5, r3
 800e6a0:	f04f 0600 	mov.w	r6, #0
 800e6a4:	46a8      	mov	r8, r5
 800e6a6:	46b1      	mov	r9, r6
 800e6a8:	eb18 0308 	adds.w	r3, r8, r8
 800e6ac:	eb49 0409 	adc.w	r4, r9, r9
 800e6b0:	4698      	mov	r8, r3
 800e6b2:	46a1      	mov	r9, r4
 800e6b4:	eb18 0805 	adds.w	r8, r8, r5
 800e6b8:	eb49 0906 	adc.w	r9, r9, r6
 800e6bc:	f04f 0100 	mov.w	r1, #0
 800e6c0:	f04f 0200 	mov.w	r2, #0
 800e6c4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800e6c8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800e6cc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800e6d0:	4688      	mov	r8, r1
 800e6d2:	4691      	mov	r9, r2
 800e6d4:	eb18 0005 	adds.w	r0, r8, r5
 800e6d8:	eb49 0106 	adc.w	r1, r9, r6
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	685b      	ldr	r3, [r3, #4]
 800e6e0:	461d      	mov	r5, r3
 800e6e2:	f04f 0600 	mov.w	r6, #0
 800e6e6:	196b      	adds	r3, r5, r5
 800e6e8:	eb46 0406 	adc.w	r4, r6, r6
 800e6ec:	461a      	mov	r2, r3
 800e6ee:	4623      	mov	r3, r4
 800e6f0:	f7f2 faca 	bl	8000c88 <__aeabi_uldivmod>
 800e6f4:	4603      	mov	r3, r0
 800e6f6:	460c      	mov	r4, r1
 800e6f8:	461a      	mov	r2, r3
 800e6fa:	4b47      	ldr	r3, [pc, #284]	; (800e818 <UART_SetConfig+0x384>)
 800e6fc:	fba3 2302 	umull	r2, r3, r3, r2
 800e700:	095b      	lsrs	r3, r3, #5
 800e702:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800e706:	68bb      	ldr	r3, [r7, #8]
 800e708:	461d      	mov	r5, r3
 800e70a:	f04f 0600 	mov.w	r6, #0
 800e70e:	46a9      	mov	r9, r5
 800e710:	46b2      	mov	sl, r6
 800e712:	eb19 0309 	adds.w	r3, r9, r9
 800e716:	eb4a 040a 	adc.w	r4, sl, sl
 800e71a:	4699      	mov	r9, r3
 800e71c:	46a2      	mov	sl, r4
 800e71e:	eb19 0905 	adds.w	r9, r9, r5
 800e722:	eb4a 0a06 	adc.w	sl, sl, r6
 800e726:	f04f 0100 	mov.w	r1, #0
 800e72a:	f04f 0200 	mov.w	r2, #0
 800e72e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e732:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e736:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e73a:	4689      	mov	r9, r1
 800e73c:	4692      	mov	sl, r2
 800e73e:	eb19 0005 	adds.w	r0, r9, r5
 800e742:	eb4a 0106 	adc.w	r1, sl, r6
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	685b      	ldr	r3, [r3, #4]
 800e74a:	461d      	mov	r5, r3
 800e74c:	f04f 0600 	mov.w	r6, #0
 800e750:	196b      	adds	r3, r5, r5
 800e752:	eb46 0406 	adc.w	r4, r6, r6
 800e756:	461a      	mov	r2, r3
 800e758:	4623      	mov	r3, r4
 800e75a:	f7f2 fa95 	bl	8000c88 <__aeabi_uldivmod>
 800e75e:	4603      	mov	r3, r0
 800e760:	460c      	mov	r4, r1
 800e762:	461a      	mov	r2, r3
 800e764:	4b2c      	ldr	r3, [pc, #176]	; (800e818 <UART_SetConfig+0x384>)
 800e766:	fba3 1302 	umull	r1, r3, r3, r2
 800e76a:	095b      	lsrs	r3, r3, #5
 800e76c:	2164      	movs	r1, #100	; 0x64
 800e76e:	fb01 f303 	mul.w	r3, r1, r3
 800e772:	1ad3      	subs	r3, r2, r3
 800e774:	00db      	lsls	r3, r3, #3
 800e776:	3332      	adds	r3, #50	; 0x32
 800e778:	4a27      	ldr	r2, [pc, #156]	; (800e818 <UART_SetConfig+0x384>)
 800e77a:	fba2 2303 	umull	r2, r3, r2, r3
 800e77e:	095b      	lsrs	r3, r3, #5
 800e780:	005b      	lsls	r3, r3, #1
 800e782:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e786:	4498      	add	r8, r3
 800e788:	68bb      	ldr	r3, [r7, #8]
 800e78a:	461d      	mov	r5, r3
 800e78c:	f04f 0600 	mov.w	r6, #0
 800e790:	46a9      	mov	r9, r5
 800e792:	46b2      	mov	sl, r6
 800e794:	eb19 0309 	adds.w	r3, r9, r9
 800e798:	eb4a 040a 	adc.w	r4, sl, sl
 800e79c:	4699      	mov	r9, r3
 800e79e:	46a2      	mov	sl, r4
 800e7a0:	eb19 0905 	adds.w	r9, r9, r5
 800e7a4:	eb4a 0a06 	adc.w	sl, sl, r6
 800e7a8:	f04f 0100 	mov.w	r1, #0
 800e7ac:	f04f 0200 	mov.w	r2, #0
 800e7b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e7b4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e7b8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e7bc:	4689      	mov	r9, r1
 800e7be:	4692      	mov	sl, r2
 800e7c0:	eb19 0005 	adds.w	r0, r9, r5
 800e7c4:	eb4a 0106 	adc.w	r1, sl, r6
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	685b      	ldr	r3, [r3, #4]
 800e7cc:	461d      	mov	r5, r3
 800e7ce:	f04f 0600 	mov.w	r6, #0
 800e7d2:	196b      	adds	r3, r5, r5
 800e7d4:	eb46 0406 	adc.w	r4, r6, r6
 800e7d8:	461a      	mov	r2, r3
 800e7da:	4623      	mov	r3, r4
 800e7dc:	f7f2 fa54 	bl	8000c88 <__aeabi_uldivmod>
 800e7e0:	4603      	mov	r3, r0
 800e7e2:	460c      	mov	r4, r1
 800e7e4:	461a      	mov	r2, r3
 800e7e6:	4b0c      	ldr	r3, [pc, #48]	; (800e818 <UART_SetConfig+0x384>)
 800e7e8:	fba3 1302 	umull	r1, r3, r3, r2
 800e7ec:	095b      	lsrs	r3, r3, #5
 800e7ee:	2164      	movs	r1, #100	; 0x64
 800e7f0:	fb01 f303 	mul.w	r3, r1, r3
 800e7f4:	1ad3      	subs	r3, r2, r3
 800e7f6:	00db      	lsls	r3, r3, #3
 800e7f8:	3332      	adds	r3, #50	; 0x32
 800e7fa:	4a07      	ldr	r2, [pc, #28]	; (800e818 <UART_SetConfig+0x384>)
 800e7fc:	fba2 2303 	umull	r2, r3, r2, r3
 800e800:	095b      	lsrs	r3, r3, #5
 800e802:	f003 0207 	and.w	r2, r3, #7
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	4442      	add	r2, r8
 800e80c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800e80e:	e1b2      	b.n	800eb76 <UART_SetConfig+0x6e2>
 800e810:	40011000 	.word	0x40011000
 800e814:	40011400 	.word	0x40011400
 800e818:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	4ad7      	ldr	r2, [pc, #860]	; (800eb80 <UART_SetConfig+0x6ec>)
 800e822:	4293      	cmp	r3, r2
 800e824:	d005      	beq.n	800e832 <UART_SetConfig+0x39e>
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	4ad6      	ldr	r2, [pc, #856]	; (800eb84 <UART_SetConfig+0x6f0>)
 800e82c:	4293      	cmp	r3, r2
 800e82e:	f040 80d1 	bne.w	800e9d4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800e832:	f7fe ffa9 	bl	800d788 <HAL_RCC_GetPCLK2Freq>
 800e836:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e838:	68bb      	ldr	r3, [r7, #8]
 800e83a:	469a      	mov	sl, r3
 800e83c:	f04f 0b00 	mov.w	fp, #0
 800e840:	46d0      	mov	r8, sl
 800e842:	46d9      	mov	r9, fp
 800e844:	eb18 0308 	adds.w	r3, r8, r8
 800e848:	eb49 0409 	adc.w	r4, r9, r9
 800e84c:	4698      	mov	r8, r3
 800e84e:	46a1      	mov	r9, r4
 800e850:	eb18 080a 	adds.w	r8, r8, sl
 800e854:	eb49 090b 	adc.w	r9, r9, fp
 800e858:	f04f 0100 	mov.w	r1, #0
 800e85c:	f04f 0200 	mov.w	r2, #0
 800e860:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800e864:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800e868:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800e86c:	4688      	mov	r8, r1
 800e86e:	4691      	mov	r9, r2
 800e870:	eb1a 0508 	adds.w	r5, sl, r8
 800e874:	eb4b 0609 	adc.w	r6, fp, r9
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	685b      	ldr	r3, [r3, #4]
 800e87c:	4619      	mov	r1, r3
 800e87e:	f04f 0200 	mov.w	r2, #0
 800e882:	f04f 0300 	mov.w	r3, #0
 800e886:	f04f 0400 	mov.w	r4, #0
 800e88a:	0094      	lsls	r4, r2, #2
 800e88c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e890:	008b      	lsls	r3, r1, #2
 800e892:	461a      	mov	r2, r3
 800e894:	4623      	mov	r3, r4
 800e896:	4628      	mov	r0, r5
 800e898:	4631      	mov	r1, r6
 800e89a:	f7f2 f9f5 	bl	8000c88 <__aeabi_uldivmod>
 800e89e:	4603      	mov	r3, r0
 800e8a0:	460c      	mov	r4, r1
 800e8a2:	461a      	mov	r2, r3
 800e8a4:	4bb8      	ldr	r3, [pc, #736]	; (800eb88 <UART_SetConfig+0x6f4>)
 800e8a6:	fba3 2302 	umull	r2, r3, r3, r2
 800e8aa:	095b      	lsrs	r3, r3, #5
 800e8ac:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800e8b0:	68bb      	ldr	r3, [r7, #8]
 800e8b2:	469b      	mov	fp, r3
 800e8b4:	f04f 0c00 	mov.w	ip, #0
 800e8b8:	46d9      	mov	r9, fp
 800e8ba:	46e2      	mov	sl, ip
 800e8bc:	eb19 0309 	adds.w	r3, r9, r9
 800e8c0:	eb4a 040a 	adc.w	r4, sl, sl
 800e8c4:	4699      	mov	r9, r3
 800e8c6:	46a2      	mov	sl, r4
 800e8c8:	eb19 090b 	adds.w	r9, r9, fp
 800e8cc:	eb4a 0a0c 	adc.w	sl, sl, ip
 800e8d0:	f04f 0100 	mov.w	r1, #0
 800e8d4:	f04f 0200 	mov.w	r2, #0
 800e8d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e8dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e8e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e8e4:	4689      	mov	r9, r1
 800e8e6:	4692      	mov	sl, r2
 800e8e8:	eb1b 0509 	adds.w	r5, fp, r9
 800e8ec:	eb4c 060a 	adc.w	r6, ip, sl
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	685b      	ldr	r3, [r3, #4]
 800e8f4:	4619      	mov	r1, r3
 800e8f6:	f04f 0200 	mov.w	r2, #0
 800e8fa:	f04f 0300 	mov.w	r3, #0
 800e8fe:	f04f 0400 	mov.w	r4, #0
 800e902:	0094      	lsls	r4, r2, #2
 800e904:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e908:	008b      	lsls	r3, r1, #2
 800e90a:	461a      	mov	r2, r3
 800e90c:	4623      	mov	r3, r4
 800e90e:	4628      	mov	r0, r5
 800e910:	4631      	mov	r1, r6
 800e912:	f7f2 f9b9 	bl	8000c88 <__aeabi_uldivmod>
 800e916:	4603      	mov	r3, r0
 800e918:	460c      	mov	r4, r1
 800e91a:	461a      	mov	r2, r3
 800e91c:	4b9a      	ldr	r3, [pc, #616]	; (800eb88 <UART_SetConfig+0x6f4>)
 800e91e:	fba3 1302 	umull	r1, r3, r3, r2
 800e922:	095b      	lsrs	r3, r3, #5
 800e924:	2164      	movs	r1, #100	; 0x64
 800e926:	fb01 f303 	mul.w	r3, r1, r3
 800e92a:	1ad3      	subs	r3, r2, r3
 800e92c:	011b      	lsls	r3, r3, #4
 800e92e:	3332      	adds	r3, #50	; 0x32
 800e930:	4a95      	ldr	r2, [pc, #596]	; (800eb88 <UART_SetConfig+0x6f4>)
 800e932:	fba2 2303 	umull	r2, r3, r2, r3
 800e936:	095b      	lsrs	r3, r3, #5
 800e938:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e93c:	4498      	add	r8, r3
 800e93e:	68bb      	ldr	r3, [r7, #8]
 800e940:	469b      	mov	fp, r3
 800e942:	f04f 0c00 	mov.w	ip, #0
 800e946:	46d9      	mov	r9, fp
 800e948:	46e2      	mov	sl, ip
 800e94a:	eb19 0309 	adds.w	r3, r9, r9
 800e94e:	eb4a 040a 	adc.w	r4, sl, sl
 800e952:	4699      	mov	r9, r3
 800e954:	46a2      	mov	sl, r4
 800e956:	eb19 090b 	adds.w	r9, r9, fp
 800e95a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800e95e:	f04f 0100 	mov.w	r1, #0
 800e962:	f04f 0200 	mov.w	r2, #0
 800e966:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e96a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e96e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e972:	4689      	mov	r9, r1
 800e974:	4692      	mov	sl, r2
 800e976:	eb1b 0509 	adds.w	r5, fp, r9
 800e97a:	eb4c 060a 	adc.w	r6, ip, sl
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	685b      	ldr	r3, [r3, #4]
 800e982:	4619      	mov	r1, r3
 800e984:	f04f 0200 	mov.w	r2, #0
 800e988:	f04f 0300 	mov.w	r3, #0
 800e98c:	f04f 0400 	mov.w	r4, #0
 800e990:	0094      	lsls	r4, r2, #2
 800e992:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e996:	008b      	lsls	r3, r1, #2
 800e998:	461a      	mov	r2, r3
 800e99a:	4623      	mov	r3, r4
 800e99c:	4628      	mov	r0, r5
 800e99e:	4631      	mov	r1, r6
 800e9a0:	f7f2 f972 	bl	8000c88 <__aeabi_uldivmod>
 800e9a4:	4603      	mov	r3, r0
 800e9a6:	460c      	mov	r4, r1
 800e9a8:	461a      	mov	r2, r3
 800e9aa:	4b77      	ldr	r3, [pc, #476]	; (800eb88 <UART_SetConfig+0x6f4>)
 800e9ac:	fba3 1302 	umull	r1, r3, r3, r2
 800e9b0:	095b      	lsrs	r3, r3, #5
 800e9b2:	2164      	movs	r1, #100	; 0x64
 800e9b4:	fb01 f303 	mul.w	r3, r1, r3
 800e9b8:	1ad3      	subs	r3, r2, r3
 800e9ba:	011b      	lsls	r3, r3, #4
 800e9bc:	3332      	adds	r3, #50	; 0x32
 800e9be:	4a72      	ldr	r2, [pc, #456]	; (800eb88 <UART_SetConfig+0x6f4>)
 800e9c0:	fba2 2303 	umull	r2, r3, r2, r3
 800e9c4:	095b      	lsrs	r3, r3, #5
 800e9c6:	f003 020f 	and.w	r2, r3, #15
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	4442      	add	r2, r8
 800e9d0:	609a      	str	r2, [r3, #8]
 800e9d2:	e0d0      	b.n	800eb76 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800e9d4:	f7fe fec4 	bl	800d760 <HAL_RCC_GetPCLK1Freq>
 800e9d8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e9da:	68bb      	ldr	r3, [r7, #8]
 800e9dc:	469a      	mov	sl, r3
 800e9de:	f04f 0b00 	mov.w	fp, #0
 800e9e2:	46d0      	mov	r8, sl
 800e9e4:	46d9      	mov	r9, fp
 800e9e6:	eb18 0308 	adds.w	r3, r8, r8
 800e9ea:	eb49 0409 	adc.w	r4, r9, r9
 800e9ee:	4698      	mov	r8, r3
 800e9f0:	46a1      	mov	r9, r4
 800e9f2:	eb18 080a 	adds.w	r8, r8, sl
 800e9f6:	eb49 090b 	adc.w	r9, r9, fp
 800e9fa:	f04f 0100 	mov.w	r1, #0
 800e9fe:	f04f 0200 	mov.w	r2, #0
 800ea02:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ea06:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ea0a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ea0e:	4688      	mov	r8, r1
 800ea10:	4691      	mov	r9, r2
 800ea12:	eb1a 0508 	adds.w	r5, sl, r8
 800ea16:	eb4b 0609 	adc.w	r6, fp, r9
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	685b      	ldr	r3, [r3, #4]
 800ea1e:	4619      	mov	r1, r3
 800ea20:	f04f 0200 	mov.w	r2, #0
 800ea24:	f04f 0300 	mov.w	r3, #0
 800ea28:	f04f 0400 	mov.w	r4, #0
 800ea2c:	0094      	lsls	r4, r2, #2
 800ea2e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ea32:	008b      	lsls	r3, r1, #2
 800ea34:	461a      	mov	r2, r3
 800ea36:	4623      	mov	r3, r4
 800ea38:	4628      	mov	r0, r5
 800ea3a:	4631      	mov	r1, r6
 800ea3c:	f7f2 f924 	bl	8000c88 <__aeabi_uldivmod>
 800ea40:	4603      	mov	r3, r0
 800ea42:	460c      	mov	r4, r1
 800ea44:	461a      	mov	r2, r3
 800ea46:	4b50      	ldr	r3, [pc, #320]	; (800eb88 <UART_SetConfig+0x6f4>)
 800ea48:	fba3 2302 	umull	r2, r3, r3, r2
 800ea4c:	095b      	lsrs	r3, r3, #5
 800ea4e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ea52:	68bb      	ldr	r3, [r7, #8]
 800ea54:	469b      	mov	fp, r3
 800ea56:	f04f 0c00 	mov.w	ip, #0
 800ea5a:	46d9      	mov	r9, fp
 800ea5c:	46e2      	mov	sl, ip
 800ea5e:	eb19 0309 	adds.w	r3, r9, r9
 800ea62:	eb4a 040a 	adc.w	r4, sl, sl
 800ea66:	4699      	mov	r9, r3
 800ea68:	46a2      	mov	sl, r4
 800ea6a:	eb19 090b 	adds.w	r9, r9, fp
 800ea6e:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ea72:	f04f 0100 	mov.w	r1, #0
 800ea76:	f04f 0200 	mov.w	r2, #0
 800ea7a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ea7e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ea82:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ea86:	4689      	mov	r9, r1
 800ea88:	4692      	mov	sl, r2
 800ea8a:	eb1b 0509 	adds.w	r5, fp, r9
 800ea8e:	eb4c 060a 	adc.w	r6, ip, sl
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	685b      	ldr	r3, [r3, #4]
 800ea96:	4619      	mov	r1, r3
 800ea98:	f04f 0200 	mov.w	r2, #0
 800ea9c:	f04f 0300 	mov.w	r3, #0
 800eaa0:	f04f 0400 	mov.w	r4, #0
 800eaa4:	0094      	lsls	r4, r2, #2
 800eaa6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800eaaa:	008b      	lsls	r3, r1, #2
 800eaac:	461a      	mov	r2, r3
 800eaae:	4623      	mov	r3, r4
 800eab0:	4628      	mov	r0, r5
 800eab2:	4631      	mov	r1, r6
 800eab4:	f7f2 f8e8 	bl	8000c88 <__aeabi_uldivmod>
 800eab8:	4603      	mov	r3, r0
 800eaba:	460c      	mov	r4, r1
 800eabc:	461a      	mov	r2, r3
 800eabe:	4b32      	ldr	r3, [pc, #200]	; (800eb88 <UART_SetConfig+0x6f4>)
 800eac0:	fba3 1302 	umull	r1, r3, r3, r2
 800eac4:	095b      	lsrs	r3, r3, #5
 800eac6:	2164      	movs	r1, #100	; 0x64
 800eac8:	fb01 f303 	mul.w	r3, r1, r3
 800eacc:	1ad3      	subs	r3, r2, r3
 800eace:	011b      	lsls	r3, r3, #4
 800ead0:	3332      	adds	r3, #50	; 0x32
 800ead2:	4a2d      	ldr	r2, [pc, #180]	; (800eb88 <UART_SetConfig+0x6f4>)
 800ead4:	fba2 2303 	umull	r2, r3, r2, r3
 800ead8:	095b      	lsrs	r3, r3, #5
 800eada:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800eade:	4498      	add	r8, r3
 800eae0:	68bb      	ldr	r3, [r7, #8]
 800eae2:	469b      	mov	fp, r3
 800eae4:	f04f 0c00 	mov.w	ip, #0
 800eae8:	46d9      	mov	r9, fp
 800eaea:	46e2      	mov	sl, ip
 800eaec:	eb19 0309 	adds.w	r3, r9, r9
 800eaf0:	eb4a 040a 	adc.w	r4, sl, sl
 800eaf4:	4699      	mov	r9, r3
 800eaf6:	46a2      	mov	sl, r4
 800eaf8:	eb19 090b 	adds.w	r9, r9, fp
 800eafc:	eb4a 0a0c 	adc.w	sl, sl, ip
 800eb00:	f04f 0100 	mov.w	r1, #0
 800eb04:	f04f 0200 	mov.w	r2, #0
 800eb08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800eb0c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800eb10:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800eb14:	4689      	mov	r9, r1
 800eb16:	4692      	mov	sl, r2
 800eb18:	eb1b 0509 	adds.w	r5, fp, r9
 800eb1c:	eb4c 060a 	adc.w	r6, ip, sl
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	685b      	ldr	r3, [r3, #4]
 800eb24:	4619      	mov	r1, r3
 800eb26:	f04f 0200 	mov.w	r2, #0
 800eb2a:	f04f 0300 	mov.w	r3, #0
 800eb2e:	f04f 0400 	mov.w	r4, #0
 800eb32:	0094      	lsls	r4, r2, #2
 800eb34:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800eb38:	008b      	lsls	r3, r1, #2
 800eb3a:	461a      	mov	r2, r3
 800eb3c:	4623      	mov	r3, r4
 800eb3e:	4628      	mov	r0, r5
 800eb40:	4631      	mov	r1, r6
 800eb42:	f7f2 f8a1 	bl	8000c88 <__aeabi_uldivmod>
 800eb46:	4603      	mov	r3, r0
 800eb48:	460c      	mov	r4, r1
 800eb4a:	461a      	mov	r2, r3
 800eb4c:	4b0e      	ldr	r3, [pc, #56]	; (800eb88 <UART_SetConfig+0x6f4>)
 800eb4e:	fba3 1302 	umull	r1, r3, r3, r2
 800eb52:	095b      	lsrs	r3, r3, #5
 800eb54:	2164      	movs	r1, #100	; 0x64
 800eb56:	fb01 f303 	mul.w	r3, r1, r3
 800eb5a:	1ad3      	subs	r3, r2, r3
 800eb5c:	011b      	lsls	r3, r3, #4
 800eb5e:	3332      	adds	r3, #50	; 0x32
 800eb60:	4a09      	ldr	r2, [pc, #36]	; (800eb88 <UART_SetConfig+0x6f4>)
 800eb62:	fba2 2303 	umull	r2, r3, r2, r3
 800eb66:	095b      	lsrs	r3, r3, #5
 800eb68:	f003 020f 	and.w	r2, r3, #15
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	4442      	add	r2, r8
 800eb72:	609a      	str	r2, [r3, #8]
}
 800eb74:	e7ff      	b.n	800eb76 <UART_SetConfig+0x6e2>
 800eb76:	bf00      	nop
 800eb78:	3714      	adds	r7, #20
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb80:	40011000 	.word	0x40011000
 800eb84:	40011400 	.word	0x40011400
 800eb88:	51eb851f 	.word	0x51eb851f

0800eb8c <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800eb8c:	b480      	push	{r7}
 800eb8e:	b085      	sub	sp, #20
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	6078      	str	r0, [r7, #4]
 800eb94:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800eb96:	2300      	movs	r3, #0
 800eb98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800eb9a:	683b      	ldr	r3, [r7, #0]
 800eb9c:	681a      	ldr	r2, [r3, #0]
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eba4:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800eba6:	68fa      	ldr	r2, [r7, #12]
 800eba8:	4b20      	ldr	r3, [pc, #128]	; (800ec2c <FSMC_NORSRAM_Init+0xa0>)
 800ebaa:	4013      	ands	r3, r2
 800ebac:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800ebb2:	683b      	ldr	r3, [r7, #0]
 800ebb4:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800ebb6:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800ebb8:	683b      	ldr	r3, [r7, #0]
 800ebba:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800ebbc:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800ebbe:	683b      	ldr	r3, [r7, #0]
 800ebc0:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800ebc2:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800ebc4:	683b      	ldr	r3, [r7, #0]
 800ebc6:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800ebc8:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800ebca:	683b      	ldr	r3, [r7, #0]
 800ebcc:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800ebce:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800ebd0:	683b      	ldr	r3, [r7, #0]
 800ebd2:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800ebd4:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800ebd6:	683b      	ldr	r3, [r7, #0]
 800ebd8:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800ebda:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800ebe0:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800ebe2:	683b      	ldr	r3, [r7, #0]
 800ebe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800ebe6:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800ebe8:	683b      	ldr	r3, [r7, #0]
 800ebea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800ebec:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800ebee:	683b      	ldr	r3, [r7, #0]
 800ebf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800ebf2:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800ebf4:	683b      	ldr	r3, [r7, #0]
 800ebf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800ebf8:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800ebfa:	68fa      	ldr	r2, [r7, #12]
 800ebfc:	4313      	orrs	r3, r2
 800ebfe:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800ec00:	683b      	ldr	r3, [r7, #0]
 800ec02:	689b      	ldr	r3, [r3, #8]
 800ec04:	2b08      	cmp	r3, #8
 800ec06:	d103      	bne.n	800ec10 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec0e:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800ec10:	683b      	ldr	r3, [r7, #0]
 800ec12:	681a      	ldr	r2, [r3, #0]
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	68f9      	ldr	r1, [r7, #12]
 800ec18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800ec1c:	2300      	movs	r3, #0
}
 800ec1e:	4618      	mov	r0, r3
 800ec20:	3714      	adds	r7, #20
 800ec22:	46bd      	mov	sp, r7
 800ec24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec28:	4770      	bx	lr
 800ec2a:	bf00      	nop
 800ec2c:	fff00080 	.word	0xfff00080

0800ec30 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ec30:	b480      	push	{r7}
 800ec32:	b087      	sub	sp, #28
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	60f8      	str	r0, [r7, #12]
 800ec38:	60b9      	str	r1, [r7, #8]
 800ec3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	1c5a      	adds	r2, r3, #1
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec4a:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800ec4c:	697b      	ldr	r3, [r7, #20]
 800ec4e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800ec52:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800ec54:	68bb      	ldr	r3, [r7, #8]
 800ec56:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800ec58:	68bb      	ldr	r3, [r7, #8]
 800ec5a:	685b      	ldr	r3, [r3, #4]
 800ec5c:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800ec5e:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800ec60:	68bb      	ldr	r3, [r7, #8]
 800ec62:	689b      	ldr	r3, [r3, #8]
 800ec64:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800ec66:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800ec68:	68bb      	ldr	r3, [r7, #8]
 800ec6a:	68db      	ldr	r3, [r3, #12]
 800ec6c:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800ec6e:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800ec70:	68bb      	ldr	r3, [r7, #8]
 800ec72:	691b      	ldr	r3, [r3, #16]
 800ec74:	3b01      	subs	r3, #1
 800ec76:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800ec78:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800ec7a:	68bb      	ldr	r3, [r7, #8]
 800ec7c:	695b      	ldr	r3, [r3, #20]
 800ec7e:	3b02      	subs	r3, #2
 800ec80:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800ec82:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800ec84:	68bb      	ldr	r3, [r7, #8]
 800ec86:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800ec88:	4313      	orrs	r3, r2
 800ec8a:	697a      	ldr	r2, [r7, #20]
 800ec8c:	4313      	orrs	r3, r2
 800ec8e:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	1c5a      	adds	r2, r3, #1
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	6979      	ldr	r1, [r7, #20]
 800ec98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800ec9c:	2300      	movs	r3, #0
}
 800ec9e:	4618      	mov	r0, r3
 800eca0:	371c      	adds	r7, #28
 800eca2:	46bd      	mov	sp, r7
 800eca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca8:	4770      	bx	lr
	...

0800ecac <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800ecac:	b480      	push	{r7}
 800ecae:	b087      	sub	sp, #28
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	60f8      	str	r0, [r7, #12]
 800ecb4:	60b9      	str	r1, [r7, #8]
 800ecb6:	607a      	str	r2, [r7, #4]
 800ecb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800ecba:	2300      	movs	r3, #0
 800ecbc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800ecbe:	683b      	ldr	r3, [r7, #0]
 800ecc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ecc4:	d122      	bne.n	800ed0c <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	687a      	ldr	r2, [r7, #4]
 800ecca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecce:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800ecd0:	697a      	ldr	r2, [r7, #20]
 800ecd2:	4b15      	ldr	r3, [pc, #84]	; (800ed28 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800ecd4:	4013      	ands	r3, r2
 800ecd6:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800ecd8:	68bb      	ldr	r3, [r7, #8]
 800ecda:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800ecdc:	68bb      	ldr	r3, [r7, #8]
 800ecde:	685b      	ldr	r3, [r3, #4]
 800ece0:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800ece2:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800ece4:	68bb      	ldr	r3, [r7, #8]
 800ece6:	689b      	ldr	r3, [r3, #8]
 800ece8:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800ecea:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800ecec:	68bb      	ldr	r3, [r7, #8]
 800ecee:	68db      	ldr	r3, [r3, #12]
 800ecf0:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800ecf2:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800ecf4:	68bb      	ldr	r3, [r7, #8]
 800ecf6:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800ecf8:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800ecfa:	697a      	ldr	r2, [r7, #20]
 800ecfc:	4313      	orrs	r3, r2
 800ecfe:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	687a      	ldr	r2, [r7, #4]
 800ed04:	6979      	ldr	r1, [r7, #20]
 800ed06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800ed0a:	e005      	b.n	800ed18 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	687a      	ldr	r2, [r7, #4]
 800ed10:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800ed14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800ed18:	2300      	movs	r3, #0
}
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	371c      	adds	r7, #28
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed24:	4770      	bx	lr
 800ed26:	bf00      	nop
 800ed28:	cff00000 	.word	0xcff00000

0800ed2c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ed2c:	b084      	sub	sp, #16
 800ed2e:	b580      	push	{r7, lr}
 800ed30:	b084      	sub	sp, #16
 800ed32:	af00      	add	r7, sp, #0
 800ed34:	6078      	str	r0, [r7, #4]
 800ed36:	f107 001c 	add.w	r0, r7, #28
 800ed3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ed3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed40:	2b01      	cmp	r3, #1
 800ed42:	d122      	bne.n	800ed8a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	68db      	ldr	r3, [r3, #12]
 800ed54:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800ed58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ed5c:	687a      	ldr	r2, [r7, #4]
 800ed5e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	68db      	ldr	r3, [r3, #12]
 800ed64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ed6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed6e:	2b01      	cmp	r3, #1
 800ed70:	d105      	bne.n	800ed7e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	68db      	ldr	r3, [r3, #12]
 800ed76:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800ed7e:	6878      	ldr	r0, [r7, #4]
 800ed80:	f001 fa7c 	bl	801027c <USB_CoreReset>
 800ed84:	4603      	mov	r3, r0
 800ed86:	73fb      	strb	r3, [r7, #15]
 800ed88:	e01a      	b.n	800edc0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	68db      	ldr	r3, [r3, #12]
 800ed8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800ed96:	6878      	ldr	r0, [r7, #4]
 800ed98:	f001 fa70 	bl	801027c <USB_CoreReset>
 800ed9c:	4603      	mov	r3, r0
 800ed9e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800eda0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d106      	bne.n	800edb4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edaa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	639a      	str	r2, [r3, #56]	; 0x38
 800edb2:	e005      	b.n	800edc0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edb8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800edc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edc2:	2b01      	cmp	r3, #1
 800edc4:	d10b      	bne.n	800edde <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	689b      	ldr	r3, [r3, #8]
 800edca:	f043 0206 	orr.w	r2, r3, #6
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	689b      	ldr	r3, [r3, #8]
 800edd6:	f043 0220 	orr.w	r2, r3, #32
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800edde:	7bfb      	ldrb	r3, [r7, #15]
}
 800ede0:	4618      	mov	r0, r3
 800ede2:	3710      	adds	r7, #16
 800ede4:	46bd      	mov	sp, r7
 800ede6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800edea:	b004      	add	sp, #16
 800edec:	4770      	bx	lr
	...

0800edf0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800edf0:	b480      	push	{r7}
 800edf2:	b087      	sub	sp, #28
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	60f8      	str	r0, [r7, #12]
 800edf8:	60b9      	str	r1, [r7, #8]
 800edfa:	4613      	mov	r3, r2
 800edfc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800edfe:	79fb      	ldrb	r3, [r7, #7]
 800ee00:	2b02      	cmp	r3, #2
 800ee02:	d165      	bne.n	800eed0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ee04:	68bb      	ldr	r3, [r7, #8]
 800ee06:	4a41      	ldr	r2, [pc, #260]	; (800ef0c <USB_SetTurnaroundTime+0x11c>)
 800ee08:	4293      	cmp	r3, r2
 800ee0a:	d906      	bls.n	800ee1a <USB_SetTurnaroundTime+0x2a>
 800ee0c:	68bb      	ldr	r3, [r7, #8]
 800ee0e:	4a40      	ldr	r2, [pc, #256]	; (800ef10 <USB_SetTurnaroundTime+0x120>)
 800ee10:	4293      	cmp	r3, r2
 800ee12:	d802      	bhi.n	800ee1a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ee14:	230f      	movs	r3, #15
 800ee16:	617b      	str	r3, [r7, #20]
 800ee18:	e062      	b.n	800eee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ee1a:	68bb      	ldr	r3, [r7, #8]
 800ee1c:	4a3c      	ldr	r2, [pc, #240]	; (800ef10 <USB_SetTurnaroundTime+0x120>)
 800ee1e:	4293      	cmp	r3, r2
 800ee20:	d906      	bls.n	800ee30 <USB_SetTurnaroundTime+0x40>
 800ee22:	68bb      	ldr	r3, [r7, #8]
 800ee24:	4a3b      	ldr	r2, [pc, #236]	; (800ef14 <USB_SetTurnaroundTime+0x124>)
 800ee26:	4293      	cmp	r3, r2
 800ee28:	d802      	bhi.n	800ee30 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800ee2a:	230e      	movs	r3, #14
 800ee2c:	617b      	str	r3, [r7, #20]
 800ee2e:	e057      	b.n	800eee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ee30:	68bb      	ldr	r3, [r7, #8]
 800ee32:	4a38      	ldr	r2, [pc, #224]	; (800ef14 <USB_SetTurnaroundTime+0x124>)
 800ee34:	4293      	cmp	r3, r2
 800ee36:	d906      	bls.n	800ee46 <USB_SetTurnaroundTime+0x56>
 800ee38:	68bb      	ldr	r3, [r7, #8]
 800ee3a:	4a37      	ldr	r2, [pc, #220]	; (800ef18 <USB_SetTurnaroundTime+0x128>)
 800ee3c:	4293      	cmp	r3, r2
 800ee3e:	d802      	bhi.n	800ee46 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800ee40:	230d      	movs	r3, #13
 800ee42:	617b      	str	r3, [r7, #20]
 800ee44:	e04c      	b.n	800eee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ee46:	68bb      	ldr	r3, [r7, #8]
 800ee48:	4a33      	ldr	r2, [pc, #204]	; (800ef18 <USB_SetTurnaroundTime+0x128>)
 800ee4a:	4293      	cmp	r3, r2
 800ee4c:	d906      	bls.n	800ee5c <USB_SetTurnaroundTime+0x6c>
 800ee4e:	68bb      	ldr	r3, [r7, #8]
 800ee50:	4a32      	ldr	r2, [pc, #200]	; (800ef1c <USB_SetTurnaroundTime+0x12c>)
 800ee52:	4293      	cmp	r3, r2
 800ee54:	d802      	bhi.n	800ee5c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800ee56:	230c      	movs	r3, #12
 800ee58:	617b      	str	r3, [r7, #20]
 800ee5a:	e041      	b.n	800eee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ee5c:	68bb      	ldr	r3, [r7, #8]
 800ee5e:	4a2f      	ldr	r2, [pc, #188]	; (800ef1c <USB_SetTurnaroundTime+0x12c>)
 800ee60:	4293      	cmp	r3, r2
 800ee62:	d906      	bls.n	800ee72 <USB_SetTurnaroundTime+0x82>
 800ee64:	68bb      	ldr	r3, [r7, #8]
 800ee66:	4a2e      	ldr	r2, [pc, #184]	; (800ef20 <USB_SetTurnaroundTime+0x130>)
 800ee68:	4293      	cmp	r3, r2
 800ee6a:	d802      	bhi.n	800ee72 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800ee6c:	230b      	movs	r3, #11
 800ee6e:	617b      	str	r3, [r7, #20]
 800ee70:	e036      	b.n	800eee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ee72:	68bb      	ldr	r3, [r7, #8]
 800ee74:	4a2a      	ldr	r2, [pc, #168]	; (800ef20 <USB_SetTurnaroundTime+0x130>)
 800ee76:	4293      	cmp	r3, r2
 800ee78:	d906      	bls.n	800ee88 <USB_SetTurnaroundTime+0x98>
 800ee7a:	68bb      	ldr	r3, [r7, #8]
 800ee7c:	4a29      	ldr	r2, [pc, #164]	; (800ef24 <USB_SetTurnaroundTime+0x134>)
 800ee7e:	4293      	cmp	r3, r2
 800ee80:	d802      	bhi.n	800ee88 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ee82:	230a      	movs	r3, #10
 800ee84:	617b      	str	r3, [r7, #20]
 800ee86:	e02b      	b.n	800eee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ee88:	68bb      	ldr	r3, [r7, #8]
 800ee8a:	4a26      	ldr	r2, [pc, #152]	; (800ef24 <USB_SetTurnaroundTime+0x134>)
 800ee8c:	4293      	cmp	r3, r2
 800ee8e:	d906      	bls.n	800ee9e <USB_SetTurnaroundTime+0xae>
 800ee90:	68bb      	ldr	r3, [r7, #8]
 800ee92:	4a25      	ldr	r2, [pc, #148]	; (800ef28 <USB_SetTurnaroundTime+0x138>)
 800ee94:	4293      	cmp	r3, r2
 800ee96:	d802      	bhi.n	800ee9e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ee98:	2309      	movs	r3, #9
 800ee9a:	617b      	str	r3, [r7, #20]
 800ee9c:	e020      	b.n	800eee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ee9e:	68bb      	ldr	r3, [r7, #8]
 800eea0:	4a21      	ldr	r2, [pc, #132]	; (800ef28 <USB_SetTurnaroundTime+0x138>)
 800eea2:	4293      	cmp	r3, r2
 800eea4:	d906      	bls.n	800eeb4 <USB_SetTurnaroundTime+0xc4>
 800eea6:	68bb      	ldr	r3, [r7, #8]
 800eea8:	4a20      	ldr	r2, [pc, #128]	; (800ef2c <USB_SetTurnaroundTime+0x13c>)
 800eeaa:	4293      	cmp	r3, r2
 800eeac:	d802      	bhi.n	800eeb4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800eeae:	2308      	movs	r3, #8
 800eeb0:	617b      	str	r3, [r7, #20]
 800eeb2:	e015      	b.n	800eee0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800eeb4:	68bb      	ldr	r3, [r7, #8]
 800eeb6:	4a1d      	ldr	r2, [pc, #116]	; (800ef2c <USB_SetTurnaroundTime+0x13c>)
 800eeb8:	4293      	cmp	r3, r2
 800eeba:	d906      	bls.n	800eeca <USB_SetTurnaroundTime+0xda>
 800eebc:	68bb      	ldr	r3, [r7, #8]
 800eebe:	4a1c      	ldr	r2, [pc, #112]	; (800ef30 <USB_SetTurnaroundTime+0x140>)
 800eec0:	4293      	cmp	r3, r2
 800eec2:	d802      	bhi.n	800eeca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800eec4:	2307      	movs	r3, #7
 800eec6:	617b      	str	r3, [r7, #20]
 800eec8:	e00a      	b.n	800eee0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800eeca:	2306      	movs	r3, #6
 800eecc:	617b      	str	r3, [r7, #20]
 800eece:	e007      	b.n	800eee0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800eed0:	79fb      	ldrb	r3, [r7, #7]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d102      	bne.n	800eedc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800eed6:	2309      	movs	r3, #9
 800eed8:	617b      	str	r3, [r7, #20]
 800eeda:	e001      	b.n	800eee0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800eedc:	2309      	movs	r3, #9
 800eede:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	68db      	ldr	r3, [r3, #12]
 800eee4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	68da      	ldr	r2, [r3, #12]
 800eef0:	697b      	ldr	r3, [r7, #20]
 800eef2:	029b      	lsls	r3, r3, #10
 800eef4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800eef8:	431a      	orrs	r2, r3
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800eefe:	2300      	movs	r3, #0
}
 800ef00:	4618      	mov	r0, r3
 800ef02:	371c      	adds	r7, #28
 800ef04:	46bd      	mov	sp, r7
 800ef06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0a:	4770      	bx	lr
 800ef0c:	00d8acbf 	.word	0x00d8acbf
 800ef10:	00e4e1bf 	.word	0x00e4e1bf
 800ef14:	00f423ff 	.word	0x00f423ff
 800ef18:	0106737f 	.word	0x0106737f
 800ef1c:	011a499f 	.word	0x011a499f
 800ef20:	01312cff 	.word	0x01312cff
 800ef24:	014ca43f 	.word	0x014ca43f
 800ef28:	016e35ff 	.word	0x016e35ff
 800ef2c:	01a6ab1f 	.word	0x01a6ab1f
 800ef30:	01e847ff 	.word	0x01e847ff

0800ef34 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ef34:	b480      	push	{r7}
 800ef36:	b083      	sub	sp, #12
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	689b      	ldr	r3, [r3, #8]
 800ef40:	f043 0201 	orr.w	r2, r3, #1
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ef48:	2300      	movs	r3, #0
}
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	370c      	adds	r7, #12
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef54:	4770      	bx	lr

0800ef56 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ef56:	b480      	push	{r7}
 800ef58:	b083      	sub	sp, #12
 800ef5a:	af00      	add	r7, sp, #0
 800ef5c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	689b      	ldr	r3, [r3, #8]
 800ef62:	f023 0201 	bic.w	r2, r3, #1
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ef6a:	2300      	movs	r3, #0
}
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	370c      	adds	r7, #12
 800ef70:	46bd      	mov	sp, r7
 800ef72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef76:	4770      	bx	lr

0800ef78 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	b082      	sub	sp, #8
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	6078      	str	r0, [r7, #4]
 800ef80:	460b      	mov	r3, r1
 800ef82:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	68db      	ldr	r3, [r3, #12]
 800ef88:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ef90:	78fb      	ldrb	r3, [r7, #3]
 800ef92:	2b01      	cmp	r3, #1
 800ef94:	d106      	bne.n	800efa4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	68db      	ldr	r3, [r3, #12]
 800ef9a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	60da      	str	r2, [r3, #12]
 800efa2:	e00b      	b.n	800efbc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800efa4:	78fb      	ldrb	r3, [r7, #3]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d106      	bne.n	800efb8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	68db      	ldr	r3, [r3, #12]
 800efae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	60da      	str	r2, [r3, #12]
 800efb6:	e001      	b.n	800efbc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800efb8:	2301      	movs	r3, #1
 800efba:	e003      	b.n	800efc4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800efbc:	2032      	movs	r0, #50	; 0x32
 800efbe:	f7fb ff5f 	bl	800ae80 <HAL_Delay>

  return HAL_OK;
 800efc2:	2300      	movs	r3, #0
}
 800efc4:	4618      	mov	r0, r3
 800efc6:	3708      	adds	r7, #8
 800efc8:	46bd      	mov	sp, r7
 800efca:	bd80      	pop	{r7, pc}

0800efcc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800efcc:	b084      	sub	sp, #16
 800efce:	b580      	push	{r7, lr}
 800efd0:	b086      	sub	sp, #24
 800efd2:	af00      	add	r7, sp, #0
 800efd4:	6078      	str	r0, [r7, #4]
 800efd6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800efda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800efde:	2300      	movs	r3, #0
 800efe0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800efe6:	2300      	movs	r3, #0
 800efe8:	613b      	str	r3, [r7, #16]
 800efea:	e009      	b.n	800f000 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800efec:	687a      	ldr	r2, [r7, #4]
 800efee:	693b      	ldr	r3, [r7, #16]
 800eff0:	3340      	adds	r3, #64	; 0x40
 800eff2:	009b      	lsls	r3, r3, #2
 800eff4:	4413      	add	r3, r2
 800eff6:	2200      	movs	r2, #0
 800eff8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800effa:	693b      	ldr	r3, [r7, #16]
 800effc:	3301      	adds	r3, #1
 800effe:	613b      	str	r3, [r7, #16]
 800f000:	693b      	ldr	r3, [r7, #16]
 800f002:	2b0e      	cmp	r3, #14
 800f004:	d9f2      	bls.n	800efec <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f006:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d112      	bne.n	800f032 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f010:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f01c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f028:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	639a      	str	r2, [r3, #56]	; 0x38
 800f030:	e00b      	b.n	800f04a <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f042:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f050:	461a      	mov	r2, r3
 800f052:	2300      	movs	r3, #0
 800f054:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f05c:	4619      	mov	r1, r3
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f064:	461a      	mov	r2, r3
 800f066:	680b      	ldr	r3, [r1, #0]
 800f068:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f06a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f06c:	2b01      	cmp	r3, #1
 800f06e:	d10c      	bne.n	800f08a <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f072:	2b00      	cmp	r3, #0
 800f074:	d104      	bne.n	800f080 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f076:	2100      	movs	r1, #0
 800f078:	6878      	ldr	r0, [r7, #4]
 800f07a:	f000 f961 	bl	800f340 <USB_SetDevSpeed>
 800f07e:	e008      	b.n	800f092 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f080:	2101      	movs	r1, #1
 800f082:	6878      	ldr	r0, [r7, #4]
 800f084:	f000 f95c 	bl	800f340 <USB_SetDevSpeed>
 800f088:	e003      	b.n	800f092 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f08a:	2103      	movs	r1, #3
 800f08c:	6878      	ldr	r0, [r7, #4]
 800f08e:	f000 f957 	bl	800f340 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f092:	2110      	movs	r1, #16
 800f094:	6878      	ldr	r0, [r7, #4]
 800f096:	f000 f90b 	bl	800f2b0 <USB_FlushTxFifo>
 800f09a:	4603      	mov	r3, r0
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d001      	beq.n	800f0a4 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 800f0a0:	2301      	movs	r3, #1
 800f0a2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f0a4:	6878      	ldr	r0, [r7, #4]
 800f0a6:	f000 f929 	bl	800f2fc <USB_FlushRxFifo>
 800f0aa:	4603      	mov	r3, r0
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d001      	beq.n	800f0b4 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 800f0b0:	2301      	movs	r3, #1
 800f0b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f0ba:	461a      	mov	r2, r3
 800f0bc:	2300      	movs	r3, #0
 800f0be:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f0c6:	461a      	mov	r2, r3
 800f0c8:	2300      	movs	r3, #0
 800f0ca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f0d2:	461a      	mov	r2, r3
 800f0d4:	2300      	movs	r3, #0
 800f0d6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f0d8:	2300      	movs	r3, #0
 800f0da:	613b      	str	r3, [r7, #16]
 800f0dc:	e043      	b.n	800f166 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f0de:	693b      	ldr	r3, [r7, #16]
 800f0e0:	015a      	lsls	r2, r3, #5
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	4413      	add	r3, r2
 800f0e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f0f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f0f4:	d118      	bne.n	800f128 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800f0f6:	693b      	ldr	r3, [r7, #16]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d10a      	bne.n	800f112 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f0fc:	693b      	ldr	r3, [r7, #16]
 800f0fe:	015a      	lsls	r2, r3, #5
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	4413      	add	r3, r2
 800f104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f108:	461a      	mov	r2, r3
 800f10a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f10e:	6013      	str	r3, [r2, #0]
 800f110:	e013      	b.n	800f13a <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f112:	693b      	ldr	r3, [r7, #16]
 800f114:	015a      	lsls	r2, r3, #5
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	4413      	add	r3, r2
 800f11a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f11e:	461a      	mov	r2, r3
 800f120:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f124:	6013      	str	r3, [r2, #0]
 800f126:	e008      	b.n	800f13a <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f128:	693b      	ldr	r3, [r7, #16]
 800f12a:	015a      	lsls	r2, r3, #5
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	4413      	add	r3, r2
 800f130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f134:	461a      	mov	r2, r3
 800f136:	2300      	movs	r3, #0
 800f138:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f13a:	693b      	ldr	r3, [r7, #16]
 800f13c:	015a      	lsls	r2, r3, #5
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	4413      	add	r3, r2
 800f142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f146:	461a      	mov	r2, r3
 800f148:	2300      	movs	r3, #0
 800f14a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f14c:	693b      	ldr	r3, [r7, #16]
 800f14e:	015a      	lsls	r2, r3, #5
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	4413      	add	r3, r2
 800f154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f158:	461a      	mov	r2, r3
 800f15a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f15e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f160:	693b      	ldr	r3, [r7, #16]
 800f162:	3301      	adds	r3, #1
 800f164:	613b      	str	r3, [r7, #16]
 800f166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f168:	693a      	ldr	r2, [r7, #16]
 800f16a:	429a      	cmp	r2, r3
 800f16c:	d3b7      	bcc.n	800f0de <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f16e:	2300      	movs	r3, #0
 800f170:	613b      	str	r3, [r7, #16]
 800f172:	e043      	b.n	800f1fc <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f174:	693b      	ldr	r3, [r7, #16]
 800f176:	015a      	lsls	r2, r3, #5
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	4413      	add	r3, r2
 800f17c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f186:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f18a:	d118      	bne.n	800f1be <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 800f18c:	693b      	ldr	r3, [r7, #16]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d10a      	bne.n	800f1a8 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f192:	693b      	ldr	r3, [r7, #16]
 800f194:	015a      	lsls	r2, r3, #5
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	4413      	add	r3, r2
 800f19a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f19e:	461a      	mov	r2, r3
 800f1a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f1a4:	6013      	str	r3, [r2, #0]
 800f1a6:	e013      	b.n	800f1d0 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f1a8:	693b      	ldr	r3, [r7, #16]
 800f1aa:	015a      	lsls	r2, r3, #5
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	4413      	add	r3, r2
 800f1b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1b4:	461a      	mov	r2, r3
 800f1b6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f1ba:	6013      	str	r3, [r2, #0]
 800f1bc:	e008      	b.n	800f1d0 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f1be:	693b      	ldr	r3, [r7, #16]
 800f1c0:	015a      	lsls	r2, r3, #5
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	4413      	add	r3, r2
 800f1c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1ca:	461a      	mov	r2, r3
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f1d0:	693b      	ldr	r3, [r7, #16]
 800f1d2:	015a      	lsls	r2, r3, #5
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	4413      	add	r3, r2
 800f1d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1dc:	461a      	mov	r2, r3
 800f1de:	2300      	movs	r3, #0
 800f1e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f1e2:	693b      	ldr	r3, [r7, #16]
 800f1e4:	015a      	lsls	r2, r3, #5
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	4413      	add	r3, r2
 800f1ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1ee:	461a      	mov	r2, r3
 800f1f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f1f4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f1f6:	693b      	ldr	r3, [r7, #16]
 800f1f8:	3301      	adds	r3, #1
 800f1fa:	613b      	str	r3, [r7, #16]
 800f1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1fe:	693a      	ldr	r2, [r7, #16]
 800f200:	429a      	cmp	r2, r3
 800f202:	d3b7      	bcc.n	800f174 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f20a:	691b      	ldr	r3, [r3, #16]
 800f20c:	68fa      	ldr	r2, [r7, #12]
 800f20e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f212:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f216:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800f218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f21a:	2b01      	cmp	r3, #1
 800f21c:	d111      	bne.n	800f242 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f224:	461a      	mov	r2, r3
 800f226:	4b20      	ldr	r3, [pc, #128]	; (800f2a8 <USB_DevInit+0x2dc>)
 800f228:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f232:	68fa      	ldr	r2, [r7, #12]
 800f234:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f23c:	f043 0303 	orr.w	r3, r3, #3
 800f240:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	2200      	movs	r2, #0
 800f246:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800f24e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f252:	2b00      	cmp	r3, #0
 800f254:	d105      	bne.n	800f262 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	699b      	ldr	r3, [r3, #24]
 800f25a:	f043 0210 	orr.w	r2, r3, #16
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	699a      	ldr	r2, [r3, #24]
 800f266:	4b11      	ldr	r3, [pc, #68]	; (800f2ac <USB_DevInit+0x2e0>)
 800f268:	4313      	orrs	r3, r2
 800f26a:	687a      	ldr	r2, [r7, #4]
 800f26c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f26e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f270:	2b00      	cmp	r3, #0
 800f272:	d005      	beq.n	800f280 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	699b      	ldr	r3, [r3, #24]
 800f278:	f043 0208 	orr.w	r2, r3, #8
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f280:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f282:	2b01      	cmp	r3, #1
 800f284:	d107      	bne.n	800f296 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	699b      	ldr	r3, [r3, #24]
 800f28a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f28e:	f043 0304 	orr.w	r3, r3, #4
 800f292:	687a      	ldr	r2, [r7, #4]
 800f294:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f296:	7dfb      	ldrb	r3, [r7, #23]
}
 800f298:	4618      	mov	r0, r3
 800f29a:	3718      	adds	r7, #24
 800f29c:	46bd      	mov	sp, r7
 800f29e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f2a2:	b004      	add	sp, #16
 800f2a4:	4770      	bx	lr
 800f2a6:	bf00      	nop
 800f2a8:	00800100 	.word	0x00800100
 800f2ac:	803c3800 	.word	0x803c3800

0800f2b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f2b0:	b480      	push	{r7}
 800f2b2:	b085      	sub	sp, #20
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
 800f2b8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f2be:	683b      	ldr	r3, [r7, #0]
 800f2c0:	019b      	lsls	r3, r3, #6
 800f2c2:	f043 0220 	orr.w	r2, r3, #32
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	3301      	adds	r3, #1
 800f2ce:	60fb      	str	r3, [r7, #12]
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	4a09      	ldr	r2, [pc, #36]	; (800f2f8 <USB_FlushTxFifo+0x48>)
 800f2d4:	4293      	cmp	r3, r2
 800f2d6:	d901      	bls.n	800f2dc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800f2d8:	2303      	movs	r3, #3
 800f2da:	e006      	b.n	800f2ea <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	691b      	ldr	r3, [r3, #16]
 800f2e0:	f003 0320 	and.w	r3, r3, #32
 800f2e4:	2b20      	cmp	r3, #32
 800f2e6:	d0f0      	beq.n	800f2ca <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800f2e8:	2300      	movs	r3, #0
}
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	3714      	adds	r7, #20
 800f2ee:	46bd      	mov	sp, r7
 800f2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f4:	4770      	bx	lr
 800f2f6:	bf00      	nop
 800f2f8:	00030d40 	.word	0x00030d40

0800f2fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f2fc:	b480      	push	{r7}
 800f2fe:	b085      	sub	sp, #20
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800f304:	2300      	movs	r3, #0
 800f306:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	2210      	movs	r2, #16
 800f30c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	3301      	adds	r3, #1
 800f312:	60fb      	str	r3, [r7, #12]
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	4a09      	ldr	r2, [pc, #36]	; (800f33c <USB_FlushRxFifo+0x40>)
 800f318:	4293      	cmp	r3, r2
 800f31a:	d901      	bls.n	800f320 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800f31c:	2303      	movs	r3, #3
 800f31e:	e006      	b.n	800f32e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	691b      	ldr	r3, [r3, #16]
 800f324:	f003 0310 	and.w	r3, r3, #16
 800f328:	2b10      	cmp	r3, #16
 800f32a:	d0f0      	beq.n	800f30e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800f32c:	2300      	movs	r3, #0
}
 800f32e:	4618      	mov	r0, r3
 800f330:	3714      	adds	r7, #20
 800f332:	46bd      	mov	sp, r7
 800f334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f338:	4770      	bx	lr
 800f33a:	bf00      	nop
 800f33c:	00030d40 	.word	0x00030d40

0800f340 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f340:	b480      	push	{r7}
 800f342:	b085      	sub	sp, #20
 800f344:	af00      	add	r7, sp, #0
 800f346:	6078      	str	r0, [r7, #4]
 800f348:	460b      	mov	r3, r1
 800f34a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f356:	681a      	ldr	r2, [r3, #0]
 800f358:	78fb      	ldrb	r3, [r7, #3]
 800f35a:	68f9      	ldr	r1, [r7, #12]
 800f35c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f360:	4313      	orrs	r3, r2
 800f362:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800f364:	2300      	movs	r3, #0
}
 800f366:	4618      	mov	r0, r3
 800f368:	3714      	adds	r7, #20
 800f36a:	46bd      	mov	sp, r7
 800f36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f370:	4770      	bx	lr

0800f372 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800f372:	b480      	push	{r7}
 800f374:	b087      	sub	sp, #28
 800f376:	af00      	add	r7, sp, #0
 800f378:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800f37e:	693b      	ldr	r3, [r7, #16]
 800f380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f384:	689b      	ldr	r3, [r3, #8]
 800f386:	f003 0306 	and.w	r3, r3, #6
 800f38a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d102      	bne.n	800f398 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800f392:	2300      	movs	r3, #0
 800f394:	75fb      	strb	r3, [r7, #23]
 800f396:	e00a      	b.n	800f3ae <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	2b02      	cmp	r3, #2
 800f39c:	d002      	beq.n	800f3a4 <USB_GetDevSpeed+0x32>
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	2b06      	cmp	r3, #6
 800f3a2:	d102      	bne.n	800f3aa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800f3a4:	2302      	movs	r3, #2
 800f3a6:	75fb      	strb	r3, [r7, #23]
 800f3a8:	e001      	b.n	800f3ae <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800f3aa:	230f      	movs	r3, #15
 800f3ac:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800f3ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	371c      	adds	r7, #28
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ba:	4770      	bx	lr

0800f3bc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f3bc:	b480      	push	{r7}
 800f3be:	b085      	sub	sp, #20
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	6078      	str	r0, [r7, #4]
 800f3c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f3ca:	683b      	ldr	r3, [r7, #0]
 800f3cc:	781b      	ldrb	r3, [r3, #0]
 800f3ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f3d0:	683b      	ldr	r3, [r7, #0]
 800f3d2:	785b      	ldrb	r3, [r3, #1]
 800f3d4:	2b01      	cmp	r3, #1
 800f3d6:	d13a      	bne.n	800f44e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f3de:	69da      	ldr	r2, [r3, #28]
 800f3e0:	683b      	ldr	r3, [r7, #0]
 800f3e2:	781b      	ldrb	r3, [r3, #0]
 800f3e4:	f003 030f 	and.w	r3, r3, #15
 800f3e8:	2101      	movs	r1, #1
 800f3ea:	fa01 f303 	lsl.w	r3, r1, r3
 800f3ee:	b29b      	uxth	r3, r3
 800f3f0:	68f9      	ldr	r1, [r7, #12]
 800f3f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f3f6:	4313      	orrs	r3, r2
 800f3f8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800f3fa:	68bb      	ldr	r3, [r7, #8]
 800f3fc:	015a      	lsls	r2, r3, #5
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	4413      	add	r3, r2
 800f402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d155      	bne.n	800f4bc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f410:	68bb      	ldr	r3, [r7, #8]
 800f412:	015a      	lsls	r2, r3, #5
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	4413      	add	r3, r2
 800f418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f41c:	681a      	ldr	r2, [r3, #0]
 800f41e:	683b      	ldr	r3, [r7, #0]
 800f420:	689b      	ldr	r3, [r3, #8]
 800f422:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f426:	683b      	ldr	r3, [r7, #0]
 800f428:	78db      	ldrb	r3, [r3, #3]
 800f42a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f42c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f42e:	68bb      	ldr	r3, [r7, #8]
 800f430:	059b      	lsls	r3, r3, #22
 800f432:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f434:	4313      	orrs	r3, r2
 800f436:	68ba      	ldr	r2, [r7, #8]
 800f438:	0151      	lsls	r1, r2, #5
 800f43a:	68fa      	ldr	r2, [r7, #12]
 800f43c:	440a      	add	r2, r1
 800f43e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f442:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f446:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f44a:	6013      	str	r3, [r2, #0]
 800f44c:	e036      	b.n	800f4bc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f454:	69da      	ldr	r2, [r3, #28]
 800f456:	683b      	ldr	r3, [r7, #0]
 800f458:	781b      	ldrb	r3, [r3, #0]
 800f45a:	f003 030f 	and.w	r3, r3, #15
 800f45e:	2101      	movs	r1, #1
 800f460:	fa01 f303 	lsl.w	r3, r1, r3
 800f464:	041b      	lsls	r3, r3, #16
 800f466:	68f9      	ldr	r1, [r7, #12]
 800f468:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f46c:	4313      	orrs	r3, r2
 800f46e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800f470:	68bb      	ldr	r3, [r7, #8]
 800f472:	015a      	lsls	r2, r3, #5
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	4413      	add	r3, r2
 800f478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f482:	2b00      	cmp	r3, #0
 800f484:	d11a      	bne.n	800f4bc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f486:	68bb      	ldr	r3, [r7, #8]
 800f488:	015a      	lsls	r2, r3, #5
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	4413      	add	r3, r2
 800f48e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f492:	681a      	ldr	r2, [r3, #0]
 800f494:	683b      	ldr	r3, [r7, #0]
 800f496:	689b      	ldr	r3, [r3, #8]
 800f498:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800f49c:	683b      	ldr	r3, [r7, #0]
 800f49e:	78db      	ldrb	r3, [r3, #3]
 800f4a0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f4a2:	430b      	orrs	r3, r1
 800f4a4:	4313      	orrs	r3, r2
 800f4a6:	68ba      	ldr	r2, [r7, #8]
 800f4a8:	0151      	lsls	r1, r2, #5
 800f4aa:	68fa      	ldr	r2, [r7, #12]
 800f4ac:	440a      	add	r2, r1
 800f4ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f4b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f4b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f4ba:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800f4bc:	2300      	movs	r3, #0
}
 800f4be:	4618      	mov	r0, r3
 800f4c0:	3714      	adds	r7, #20
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c8:	4770      	bx	lr
	...

0800f4cc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f4cc:	b480      	push	{r7}
 800f4ce:	b085      	sub	sp, #20
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]
 800f4d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f4da:	683b      	ldr	r3, [r7, #0]
 800f4dc:	781b      	ldrb	r3, [r3, #0]
 800f4de:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800f4e0:	683b      	ldr	r3, [r7, #0]
 800f4e2:	785b      	ldrb	r3, [r3, #1]
 800f4e4:	2b01      	cmp	r3, #1
 800f4e6:	d135      	bne.n	800f554 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f4ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f4f0:	683b      	ldr	r3, [r7, #0]
 800f4f2:	781b      	ldrb	r3, [r3, #0]
 800f4f4:	f003 030f 	and.w	r3, r3, #15
 800f4f8:	2101      	movs	r1, #1
 800f4fa:	fa01 f303 	lsl.w	r3, r1, r3
 800f4fe:	b29b      	uxth	r3, r3
 800f500:	43db      	mvns	r3, r3
 800f502:	68f9      	ldr	r1, [r7, #12]
 800f504:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f508:	4013      	ands	r3, r2
 800f50a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f512:	69da      	ldr	r2, [r3, #28]
 800f514:	683b      	ldr	r3, [r7, #0]
 800f516:	781b      	ldrb	r3, [r3, #0]
 800f518:	f003 030f 	and.w	r3, r3, #15
 800f51c:	2101      	movs	r1, #1
 800f51e:	fa01 f303 	lsl.w	r3, r1, r3
 800f522:	b29b      	uxth	r3, r3
 800f524:	43db      	mvns	r3, r3
 800f526:	68f9      	ldr	r1, [r7, #12]
 800f528:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f52c:	4013      	ands	r3, r2
 800f52e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800f530:	68bb      	ldr	r3, [r7, #8]
 800f532:	015a      	lsls	r2, r3, #5
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	4413      	add	r3, r2
 800f538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f53c:	681a      	ldr	r2, [r3, #0]
 800f53e:	68bb      	ldr	r3, [r7, #8]
 800f540:	0159      	lsls	r1, r3, #5
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	440b      	add	r3, r1
 800f546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f54a:	4619      	mov	r1, r3
 800f54c:	4b1f      	ldr	r3, [pc, #124]	; (800f5cc <USB_DeactivateEndpoint+0x100>)
 800f54e:	4013      	ands	r3, r2
 800f550:	600b      	str	r3, [r1, #0]
 800f552:	e034      	b.n	800f5be <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f55a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f55c:	683b      	ldr	r3, [r7, #0]
 800f55e:	781b      	ldrb	r3, [r3, #0]
 800f560:	f003 030f 	and.w	r3, r3, #15
 800f564:	2101      	movs	r1, #1
 800f566:	fa01 f303 	lsl.w	r3, r1, r3
 800f56a:	041b      	lsls	r3, r3, #16
 800f56c:	43db      	mvns	r3, r3
 800f56e:	68f9      	ldr	r1, [r7, #12]
 800f570:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f574:	4013      	ands	r3, r2
 800f576:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f57e:	69da      	ldr	r2, [r3, #28]
 800f580:	683b      	ldr	r3, [r7, #0]
 800f582:	781b      	ldrb	r3, [r3, #0]
 800f584:	f003 030f 	and.w	r3, r3, #15
 800f588:	2101      	movs	r1, #1
 800f58a:	fa01 f303 	lsl.w	r3, r1, r3
 800f58e:	041b      	lsls	r3, r3, #16
 800f590:	43db      	mvns	r3, r3
 800f592:	68f9      	ldr	r1, [r7, #12]
 800f594:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f598:	4013      	ands	r3, r2
 800f59a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800f59c:	68bb      	ldr	r3, [r7, #8]
 800f59e:	015a      	lsls	r2, r3, #5
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	4413      	add	r3, r2
 800f5a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f5a8:	681a      	ldr	r2, [r3, #0]
 800f5aa:	68bb      	ldr	r3, [r7, #8]
 800f5ac:	0159      	lsls	r1, r3, #5
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	440b      	add	r3, r1
 800f5b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f5b6:	4619      	mov	r1, r3
 800f5b8:	4b05      	ldr	r3, [pc, #20]	; (800f5d0 <USB_DeactivateEndpoint+0x104>)
 800f5ba:	4013      	ands	r3, r2
 800f5bc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800f5be:	2300      	movs	r3, #0
}
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	3714      	adds	r7, #20
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ca:	4770      	bx	lr
 800f5cc:	ec337800 	.word	0xec337800
 800f5d0:	eff37800 	.word	0xeff37800

0800f5d4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b08a      	sub	sp, #40	; 0x28
 800f5d8:	af02      	add	r7, sp, #8
 800f5da:	60f8      	str	r0, [r7, #12]
 800f5dc:	60b9      	str	r1, [r7, #8]
 800f5de:	4613      	mov	r3, r2
 800f5e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800f5e6:	68bb      	ldr	r3, [r7, #8]
 800f5e8:	781b      	ldrb	r3, [r3, #0]
 800f5ea:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f5ec:	68bb      	ldr	r3, [r7, #8]
 800f5ee:	785b      	ldrb	r3, [r3, #1]
 800f5f0:	2b01      	cmp	r3, #1
 800f5f2:	f040 815c 	bne.w	800f8ae <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f5f6:	68bb      	ldr	r3, [r7, #8]
 800f5f8:	695b      	ldr	r3, [r3, #20]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d132      	bne.n	800f664 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f5fe:	69bb      	ldr	r3, [r7, #24]
 800f600:	015a      	lsls	r2, r3, #5
 800f602:	69fb      	ldr	r3, [r7, #28]
 800f604:	4413      	add	r3, r2
 800f606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f60a:	691b      	ldr	r3, [r3, #16]
 800f60c:	69ba      	ldr	r2, [r7, #24]
 800f60e:	0151      	lsls	r1, r2, #5
 800f610:	69fa      	ldr	r2, [r7, #28]
 800f612:	440a      	add	r2, r1
 800f614:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f618:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f61c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f620:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f622:	69bb      	ldr	r3, [r7, #24]
 800f624:	015a      	lsls	r2, r3, #5
 800f626:	69fb      	ldr	r3, [r7, #28]
 800f628:	4413      	add	r3, r2
 800f62a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f62e:	691b      	ldr	r3, [r3, #16]
 800f630:	69ba      	ldr	r2, [r7, #24]
 800f632:	0151      	lsls	r1, r2, #5
 800f634:	69fa      	ldr	r2, [r7, #28]
 800f636:	440a      	add	r2, r1
 800f638:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f63c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f640:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f642:	69bb      	ldr	r3, [r7, #24]
 800f644:	015a      	lsls	r2, r3, #5
 800f646:	69fb      	ldr	r3, [r7, #28]
 800f648:	4413      	add	r3, r2
 800f64a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f64e:	691b      	ldr	r3, [r3, #16]
 800f650:	69ba      	ldr	r2, [r7, #24]
 800f652:	0151      	lsls	r1, r2, #5
 800f654:	69fa      	ldr	r2, [r7, #28]
 800f656:	440a      	add	r2, r1
 800f658:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f65c:	0cdb      	lsrs	r3, r3, #19
 800f65e:	04db      	lsls	r3, r3, #19
 800f660:	6113      	str	r3, [r2, #16]
 800f662:	e074      	b.n	800f74e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f664:	69bb      	ldr	r3, [r7, #24]
 800f666:	015a      	lsls	r2, r3, #5
 800f668:	69fb      	ldr	r3, [r7, #28]
 800f66a:	4413      	add	r3, r2
 800f66c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f670:	691b      	ldr	r3, [r3, #16]
 800f672:	69ba      	ldr	r2, [r7, #24]
 800f674:	0151      	lsls	r1, r2, #5
 800f676:	69fa      	ldr	r2, [r7, #28]
 800f678:	440a      	add	r2, r1
 800f67a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f67e:	0cdb      	lsrs	r3, r3, #19
 800f680:	04db      	lsls	r3, r3, #19
 800f682:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f684:	69bb      	ldr	r3, [r7, #24]
 800f686:	015a      	lsls	r2, r3, #5
 800f688:	69fb      	ldr	r3, [r7, #28]
 800f68a:	4413      	add	r3, r2
 800f68c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f690:	691b      	ldr	r3, [r3, #16]
 800f692:	69ba      	ldr	r2, [r7, #24]
 800f694:	0151      	lsls	r1, r2, #5
 800f696:	69fa      	ldr	r2, [r7, #28]
 800f698:	440a      	add	r2, r1
 800f69a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f69e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f6a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f6a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f6a8:	69bb      	ldr	r3, [r7, #24]
 800f6aa:	015a      	lsls	r2, r3, #5
 800f6ac:	69fb      	ldr	r3, [r7, #28]
 800f6ae:	4413      	add	r3, r2
 800f6b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6b4:	691a      	ldr	r2, [r3, #16]
 800f6b6:	68bb      	ldr	r3, [r7, #8]
 800f6b8:	6959      	ldr	r1, [r3, #20]
 800f6ba:	68bb      	ldr	r3, [r7, #8]
 800f6bc:	689b      	ldr	r3, [r3, #8]
 800f6be:	440b      	add	r3, r1
 800f6c0:	1e59      	subs	r1, r3, #1
 800f6c2:	68bb      	ldr	r3, [r7, #8]
 800f6c4:	689b      	ldr	r3, [r3, #8]
 800f6c6:	fbb1 f3f3 	udiv	r3, r1, r3
 800f6ca:	04d9      	lsls	r1, r3, #19
 800f6cc:	4b9d      	ldr	r3, [pc, #628]	; (800f944 <USB_EPStartXfer+0x370>)
 800f6ce:	400b      	ands	r3, r1
 800f6d0:	69b9      	ldr	r1, [r7, #24]
 800f6d2:	0148      	lsls	r0, r1, #5
 800f6d4:	69f9      	ldr	r1, [r7, #28]
 800f6d6:	4401      	add	r1, r0
 800f6d8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f6dc:	4313      	orrs	r3, r2
 800f6de:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f6e0:	69bb      	ldr	r3, [r7, #24]
 800f6e2:	015a      	lsls	r2, r3, #5
 800f6e4:	69fb      	ldr	r3, [r7, #28]
 800f6e6:	4413      	add	r3, r2
 800f6e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6ec:	691a      	ldr	r2, [r3, #16]
 800f6ee:	68bb      	ldr	r3, [r7, #8]
 800f6f0:	695b      	ldr	r3, [r3, #20]
 800f6f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f6f6:	69b9      	ldr	r1, [r7, #24]
 800f6f8:	0148      	lsls	r0, r1, #5
 800f6fa:	69f9      	ldr	r1, [r7, #28]
 800f6fc:	4401      	add	r1, r0
 800f6fe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f702:	4313      	orrs	r3, r2
 800f704:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800f706:	68bb      	ldr	r3, [r7, #8]
 800f708:	78db      	ldrb	r3, [r3, #3]
 800f70a:	2b01      	cmp	r3, #1
 800f70c:	d11f      	bne.n	800f74e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800f70e:	69bb      	ldr	r3, [r7, #24]
 800f710:	015a      	lsls	r2, r3, #5
 800f712:	69fb      	ldr	r3, [r7, #28]
 800f714:	4413      	add	r3, r2
 800f716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f71a:	691b      	ldr	r3, [r3, #16]
 800f71c:	69ba      	ldr	r2, [r7, #24]
 800f71e:	0151      	lsls	r1, r2, #5
 800f720:	69fa      	ldr	r2, [r7, #28]
 800f722:	440a      	add	r2, r1
 800f724:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f728:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800f72c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800f72e:	69bb      	ldr	r3, [r7, #24]
 800f730:	015a      	lsls	r2, r3, #5
 800f732:	69fb      	ldr	r3, [r7, #28]
 800f734:	4413      	add	r3, r2
 800f736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f73a:	691b      	ldr	r3, [r3, #16]
 800f73c:	69ba      	ldr	r2, [r7, #24]
 800f73e:	0151      	lsls	r1, r2, #5
 800f740:	69fa      	ldr	r2, [r7, #28]
 800f742:	440a      	add	r2, r1
 800f744:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f748:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f74c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800f74e:	79fb      	ldrb	r3, [r7, #7]
 800f750:	2b01      	cmp	r3, #1
 800f752:	d14b      	bne.n	800f7ec <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f754:	68bb      	ldr	r3, [r7, #8]
 800f756:	691b      	ldr	r3, [r3, #16]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d009      	beq.n	800f770 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f75c:	69bb      	ldr	r3, [r7, #24]
 800f75e:	015a      	lsls	r2, r3, #5
 800f760:	69fb      	ldr	r3, [r7, #28]
 800f762:	4413      	add	r3, r2
 800f764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f768:	461a      	mov	r2, r3
 800f76a:	68bb      	ldr	r3, [r7, #8]
 800f76c:	691b      	ldr	r3, [r3, #16]
 800f76e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800f770:	68bb      	ldr	r3, [r7, #8]
 800f772:	78db      	ldrb	r3, [r3, #3]
 800f774:	2b01      	cmp	r3, #1
 800f776:	d128      	bne.n	800f7ca <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f778:	69fb      	ldr	r3, [r7, #28]
 800f77a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f77e:	689b      	ldr	r3, [r3, #8]
 800f780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f784:	2b00      	cmp	r3, #0
 800f786:	d110      	bne.n	800f7aa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f788:	69bb      	ldr	r3, [r7, #24]
 800f78a:	015a      	lsls	r2, r3, #5
 800f78c:	69fb      	ldr	r3, [r7, #28]
 800f78e:	4413      	add	r3, r2
 800f790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	69ba      	ldr	r2, [r7, #24]
 800f798:	0151      	lsls	r1, r2, #5
 800f79a:	69fa      	ldr	r2, [r7, #28]
 800f79c:	440a      	add	r2, r1
 800f79e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f7a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f7a6:	6013      	str	r3, [r2, #0]
 800f7a8:	e00f      	b.n	800f7ca <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f7aa:	69bb      	ldr	r3, [r7, #24]
 800f7ac:	015a      	lsls	r2, r3, #5
 800f7ae:	69fb      	ldr	r3, [r7, #28]
 800f7b0:	4413      	add	r3, r2
 800f7b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	69ba      	ldr	r2, [r7, #24]
 800f7ba:	0151      	lsls	r1, r2, #5
 800f7bc:	69fa      	ldr	r2, [r7, #28]
 800f7be:	440a      	add	r2, r1
 800f7c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f7c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f7c8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f7ca:	69bb      	ldr	r3, [r7, #24]
 800f7cc:	015a      	lsls	r2, r3, #5
 800f7ce:	69fb      	ldr	r3, [r7, #28]
 800f7d0:	4413      	add	r3, r2
 800f7d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	69ba      	ldr	r2, [r7, #24]
 800f7da:	0151      	lsls	r1, r2, #5
 800f7dc:	69fa      	ldr	r2, [r7, #28]
 800f7de:	440a      	add	r2, r1
 800f7e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f7e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f7e8:	6013      	str	r3, [r2, #0]
 800f7ea:	e12f      	b.n	800fa4c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f7ec:	69bb      	ldr	r3, [r7, #24]
 800f7ee:	015a      	lsls	r2, r3, #5
 800f7f0:	69fb      	ldr	r3, [r7, #28]
 800f7f2:	4413      	add	r3, r2
 800f7f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	69ba      	ldr	r2, [r7, #24]
 800f7fc:	0151      	lsls	r1, r2, #5
 800f7fe:	69fa      	ldr	r2, [r7, #28]
 800f800:	440a      	add	r2, r1
 800f802:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f806:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f80a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f80c:	68bb      	ldr	r3, [r7, #8]
 800f80e:	78db      	ldrb	r3, [r3, #3]
 800f810:	2b01      	cmp	r3, #1
 800f812:	d015      	beq.n	800f840 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800f814:	68bb      	ldr	r3, [r7, #8]
 800f816:	695b      	ldr	r3, [r3, #20]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	f000 8117 	beq.w	800fa4c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f81e:	69fb      	ldr	r3, [r7, #28]
 800f820:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f824:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f826:	68bb      	ldr	r3, [r7, #8]
 800f828:	781b      	ldrb	r3, [r3, #0]
 800f82a:	f003 030f 	and.w	r3, r3, #15
 800f82e:	2101      	movs	r1, #1
 800f830:	fa01 f303 	lsl.w	r3, r1, r3
 800f834:	69f9      	ldr	r1, [r7, #28]
 800f836:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f83a:	4313      	orrs	r3, r2
 800f83c:	634b      	str	r3, [r1, #52]	; 0x34
 800f83e:	e105      	b.n	800fa4c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f840:	69fb      	ldr	r3, [r7, #28]
 800f842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f846:	689b      	ldr	r3, [r3, #8]
 800f848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d110      	bne.n	800f872 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f850:	69bb      	ldr	r3, [r7, #24]
 800f852:	015a      	lsls	r2, r3, #5
 800f854:	69fb      	ldr	r3, [r7, #28]
 800f856:	4413      	add	r3, r2
 800f858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	69ba      	ldr	r2, [r7, #24]
 800f860:	0151      	lsls	r1, r2, #5
 800f862:	69fa      	ldr	r2, [r7, #28]
 800f864:	440a      	add	r2, r1
 800f866:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f86a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f86e:	6013      	str	r3, [r2, #0]
 800f870:	e00f      	b.n	800f892 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f872:	69bb      	ldr	r3, [r7, #24]
 800f874:	015a      	lsls	r2, r3, #5
 800f876:	69fb      	ldr	r3, [r7, #28]
 800f878:	4413      	add	r3, r2
 800f87a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	69ba      	ldr	r2, [r7, #24]
 800f882:	0151      	lsls	r1, r2, #5
 800f884:	69fa      	ldr	r2, [r7, #28]
 800f886:	440a      	add	r2, r1
 800f888:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f88c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f890:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800f892:	68bb      	ldr	r3, [r7, #8]
 800f894:	68d9      	ldr	r1, [r3, #12]
 800f896:	68bb      	ldr	r3, [r7, #8]
 800f898:	781a      	ldrb	r2, [r3, #0]
 800f89a:	68bb      	ldr	r3, [r7, #8]
 800f89c:	695b      	ldr	r3, [r3, #20]
 800f89e:	b298      	uxth	r0, r3
 800f8a0:	79fb      	ldrb	r3, [r7, #7]
 800f8a2:	9300      	str	r3, [sp, #0]
 800f8a4:	4603      	mov	r3, r0
 800f8a6:	68f8      	ldr	r0, [r7, #12]
 800f8a8:	f000 fa2b 	bl	800fd02 <USB_WritePacket>
 800f8ac:	e0ce      	b.n	800fa4c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f8ae:	69bb      	ldr	r3, [r7, #24]
 800f8b0:	015a      	lsls	r2, r3, #5
 800f8b2:	69fb      	ldr	r3, [r7, #28]
 800f8b4:	4413      	add	r3, r2
 800f8b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8ba:	691b      	ldr	r3, [r3, #16]
 800f8bc:	69ba      	ldr	r2, [r7, #24]
 800f8be:	0151      	lsls	r1, r2, #5
 800f8c0:	69fa      	ldr	r2, [r7, #28]
 800f8c2:	440a      	add	r2, r1
 800f8c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f8c8:	0cdb      	lsrs	r3, r3, #19
 800f8ca:	04db      	lsls	r3, r3, #19
 800f8cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f8ce:	69bb      	ldr	r3, [r7, #24]
 800f8d0:	015a      	lsls	r2, r3, #5
 800f8d2:	69fb      	ldr	r3, [r7, #28]
 800f8d4:	4413      	add	r3, r2
 800f8d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8da:	691b      	ldr	r3, [r3, #16]
 800f8dc:	69ba      	ldr	r2, [r7, #24]
 800f8de:	0151      	lsls	r1, r2, #5
 800f8e0:	69fa      	ldr	r2, [r7, #28]
 800f8e2:	440a      	add	r2, r1
 800f8e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f8e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f8ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f8f0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800f8f2:	68bb      	ldr	r3, [r7, #8]
 800f8f4:	695b      	ldr	r3, [r3, #20]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d126      	bne.n	800f948 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800f8fa:	69bb      	ldr	r3, [r7, #24]
 800f8fc:	015a      	lsls	r2, r3, #5
 800f8fe:	69fb      	ldr	r3, [r7, #28]
 800f900:	4413      	add	r3, r2
 800f902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f906:	691a      	ldr	r2, [r3, #16]
 800f908:	68bb      	ldr	r3, [r7, #8]
 800f90a:	689b      	ldr	r3, [r3, #8]
 800f90c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f910:	69b9      	ldr	r1, [r7, #24]
 800f912:	0148      	lsls	r0, r1, #5
 800f914:	69f9      	ldr	r1, [r7, #28]
 800f916:	4401      	add	r1, r0
 800f918:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f91c:	4313      	orrs	r3, r2
 800f91e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f920:	69bb      	ldr	r3, [r7, #24]
 800f922:	015a      	lsls	r2, r3, #5
 800f924:	69fb      	ldr	r3, [r7, #28]
 800f926:	4413      	add	r3, r2
 800f928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f92c:	691b      	ldr	r3, [r3, #16]
 800f92e:	69ba      	ldr	r2, [r7, #24]
 800f930:	0151      	lsls	r1, r2, #5
 800f932:	69fa      	ldr	r2, [r7, #28]
 800f934:	440a      	add	r2, r1
 800f936:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f93a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f93e:	6113      	str	r3, [r2, #16]
 800f940:	e036      	b.n	800f9b0 <USB_EPStartXfer+0x3dc>
 800f942:	bf00      	nop
 800f944:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f948:	68bb      	ldr	r3, [r7, #8]
 800f94a:	695a      	ldr	r2, [r3, #20]
 800f94c:	68bb      	ldr	r3, [r7, #8]
 800f94e:	689b      	ldr	r3, [r3, #8]
 800f950:	4413      	add	r3, r2
 800f952:	1e5a      	subs	r2, r3, #1
 800f954:	68bb      	ldr	r3, [r7, #8]
 800f956:	689b      	ldr	r3, [r3, #8]
 800f958:	fbb2 f3f3 	udiv	r3, r2, r3
 800f95c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f95e:	69bb      	ldr	r3, [r7, #24]
 800f960:	015a      	lsls	r2, r3, #5
 800f962:	69fb      	ldr	r3, [r7, #28]
 800f964:	4413      	add	r3, r2
 800f966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f96a:	691a      	ldr	r2, [r3, #16]
 800f96c:	8afb      	ldrh	r3, [r7, #22]
 800f96e:	04d9      	lsls	r1, r3, #19
 800f970:	4b39      	ldr	r3, [pc, #228]	; (800fa58 <USB_EPStartXfer+0x484>)
 800f972:	400b      	ands	r3, r1
 800f974:	69b9      	ldr	r1, [r7, #24]
 800f976:	0148      	lsls	r0, r1, #5
 800f978:	69f9      	ldr	r1, [r7, #28]
 800f97a:	4401      	add	r1, r0
 800f97c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f980:	4313      	orrs	r3, r2
 800f982:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800f984:	69bb      	ldr	r3, [r7, #24]
 800f986:	015a      	lsls	r2, r3, #5
 800f988:	69fb      	ldr	r3, [r7, #28]
 800f98a:	4413      	add	r3, r2
 800f98c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f990:	691a      	ldr	r2, [r3, #16]
 800f992:	68bb      	ldr	r3, [r7, #8]
 800f994:	689b      	ldr	r3, [r3, #8]
 800f996:	8af9      	ldrh	r1, [r7, #22]
 800f998:	fb01 f303 	mul.w	r3, r1, r3
 800f99c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f9a0:	69b9      	ldr	r1, [r7, #24]
 800f9a2:	0148      	lsls	r0, r1, #5
 800f9a4:	69f9      	ldr	r1, [r7, #28]
 800f9a6:	4401      	add	r1, r0
 800f9a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f9ac:	4313      	orrs	r3, r2
 800f9ae:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f9b0:	79fb      	ldrb	r3, [r7, #7]
 800f9b2:	2b01      	cmp	r3, #1
 800f9b4:	d10d      	bne.n	800f9d2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f9b6:	68bb      	ldr	r3, [r7, #8]
 800f9b8:	68db      	ldr	r3, [r3, #12]
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d009      	beq.n	800f9d2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f9be:	68bb      	ldr	r3, [r7, #8]
 800f9c0:	68d9      	ldr	r1, [r3, #12]
 800f9c2:	69bb      	ldr	r3, [r7, #24]
 800f9c4:	015a      	lsls	r2, r3, #5
 800f9c6:	69fb      	ldr	r3, [r7, #28]
 800f9c8:	4413      	add	r3, r2
 800f9ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f9ce:	460a      	mov	r2, r1
 800f9d0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800f9d2:	68bb      	ldr	r3, [r7, #8]
 800f9d4:	78db      	ldrb	r3, [r3, #3]
 800f9d6:	2b01      	cmp	r3, #1
 800f9d8:	d128      	bne.n	800fa2c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f9da:	69fb      	ldr	r3, [r7, #28]
 800f9dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f9e0:	689b      	ldr	r3, [r3, #8]
 800f9e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d110      	bne.n	800fa0c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800f9ea:	69bb      	ldr	r3, [r7, #24]
 800f9ec:	015a      	lsls	r2, r3, #5
 800f9ee:	69fb      	ldr	r3, [r7, #28]
 800f9f0:	4413      	add	r3, r2
 800f9f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	69ba      	ldr	r2, [r7, #24]
 800f9fa:	0151      	lsls	r1, r2, #5
 800f9fc:	69fa      	ldr	r2, [r7, #28]
 800f9fe:	440a      	add	r2, r1
 800fa00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fa04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fa08:	6013      	str	r3, [r2, #0]
 800fa0a:	e00f      	b.n	800fa2c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800fa0c:	69bb      	ldr	r3, [r7, #24]
 800fa0e:	015a      	lsls	r2, r3, #5
 800fa10:	69fb      	ldr	r3, [r7, #28]
 800fa12:	4413      	add	r3, r2
 800fa14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	69ba      	ldr	r2, [r7, #24]
 800fa1c:	0151      	lsls	r1, r2, #5
 800fa1e:	69fa      	ldr	r2, [r7, #28]
 800fa20:	440a      	add	r2, r1
 800fa22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fa26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fa2a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800fa2c:	69bb      	ldr	r3, [r7, #24]
 800fa2e:	015a      	lsls	r2, r3, #5
 800fa30:	69fb      	ldr	r3, [r7, #28]
 800fa32:	4413      	add	r3, r2
 800fa34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	69ba      	ldr	r2, [r7, #24]
 800fa3c:	0151      	lsls	r1, r2, #5
 800fa3e:	69fa      	ldr	r2, [r7, #28]
 800fa40:	440a      	add	r2, r1
 800fa42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fa46:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fa4a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fa4c:	2300      	movs	r3, #0
}
 800fa4e:	4618      	mov	r0, r3
 800fa50:	3720      	adds	r7, #32
 800fa52:	46bd      	mov	sp, r7
 800fa54:	bd80      	pop	{r7, pc}
 800fa56:	bf00      	nop
 800fa58:	1ff80000 	.word	0x1ff80000

0800fa5c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800fa5c:	b480      	push	{r7}
 800fa5e:	b087      	sub	sp, #28
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	60f8      	str	r0, [r7, #12]
 800fa64:	60b9      	str	r1, [r7, #8]
 800fa66:	4613      	mov	r3, r2
 800fa68:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800fa6e:	68bb      	ldr	r3, [r7, #8]
 800fa70:	781b      	ldrb	r3, [r3, #0]
 800fa72:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800fa74:	68bb      	ldr	r3, [r7, #8]
 800fa76:	785b      	ldrb	r3, [r3, #1]
 800fa78:	2b01      	cmp	r3, #1
 800fa7a:	f040 80cd 	bne.w	800fc18 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800fa7e:	68bb      	ldr	r3, [r7, #8]
 800fa80:	695b      	ldr	r3, [r3, #20]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d132      	bne.n	800faec <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fa86:	693b      	ldr	r3, [r7, #16]
 800fa88:	015a      	lsls	r2, r3, #5
 800fa8a:	697b      	ldr	r3, [r7, #20]
 800fa8c:	4413      	add	r3, r2
 800fa8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa92:	691b      	ldr	r3, [r3, #16]
 800fa94:	693a      	ldr	r2, [r7, #16]
 800fa96:	0151      	lsls	r1, r2, #5
 800fa98:	697a      	ldr	r2, [r7, #20]
 800fa9a:	440a      	add	r2, r1
 800fa9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800faa0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800faa4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800faa8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800faaa:	693b      	ldr	r3, [r7, #16]
 800faac:	015a      	lsls	r2, r3, #5
 800faae:	697b      	ldr	r3, [r7, #20]
 800fab0:	4413      	add	r3, r2
 800fab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fab6:	691b      	ldr	r3, [r3, #16]
 800fab8:	693a      	ldr	r2, [r7, #16]
 800faba:	0151      	lsls	r1, r2, #5
 800fabc:	697a      	ldr	r2, [r7, #20]
 800fabe:	440a      	add	r2, r1
 800fac0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fac4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fac8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800faca:	693b      	ldr	r3, [r7, #16]
 800facc:	015a      	lsls	r2, r3, #5
 800face:	697b      	ldr	r3, [r7, #20]
 800fad0:	4413      	add	r3, r2
 800fad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fad6:	691b      	ldr	r3, [r3, #16]
 800fad8:	693a      	ldr	r2, [r7, #16]
 800fada:	0151      	lsls	r1, r2, #5
 800fadc:	697a      	ldr	r2, [r7, #20]
 800fade:	440a      	add	r2, r1
 800fae0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fae4:	0cdb      	lsrs	r3, r3, #19
 800fae6:	04db      	lsls	r3, r3, #19
 800fae8:	6113      	str	r3, [r2, #16]
 800faea:	e04e      	b.n	800fb8a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800faec:	693b      	ldr	r3, [r7, #16]
 800faee:	015a      	lsls	r2, r3, #5
 800faf0:	697b      	ldr	r3, [r7, #20]
 800faf2:	4413      	add	r3, r2
 800faf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800faf8:	691b      	ldr	r3, [r3, #16]
 800fafa:	693a      	ldr	r2, [r7, #16]
 800fafc:	0151      	lsls	r1, r2, #5
 800fafe:	697a      	ldr	r2, [r7, #20]
 800fb00:	440a      	add	r2, r1
 800fb02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fb06:	0cdb      	lsrs	r3, r3, #19
 800fb08:	04db      	lsls	r3, r3, #19
 800fb0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fb0c:	693b      	ldr	r3, [r7, #16]
 800fb0e:	015a      	lsls	r2, r3, #5
 800fb10:	697b      	ldr	r3, [r7, #20]
 800fb12:	4413      	add	r3, r2
 800fb14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb18:	691b      	ldr	r3, [r3, #16]
 800fb1a:	693a      	ldr	r2, [r7, #16]
 800fb1c:	0151      	lsls	r1, r2, #5
 800fb1e:	697a      	ldr	r2, [r7, #20]
 800fb20:	440a      	add	r2, r1
 800fb22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fb26:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fb2a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fb2e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800fb30:	68bb      	ldr	r3, [r7, #8]
 800fb32:	695a      	ldr	r2, [r3, #20]
 800fb34:	68bb      	ldr	r3, [r7, #8]
 800fb36:	689b      	ldr	r3, [r3, #8]
 800fb38:	429a      	cmp	r2, r3
 800fb3a:	d903      	bls.n	800fb44 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800fb3c:	68bb      	ldr	r3, [r7, #8]
 800fb3e:	689a      	ldr	r2, [r3, #8]
 800fb40:	68bb      	ldr	r3, [r7, #8]
 800fb42:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fb44:	693b      	ldr	r3, [r7, #16]
 800fb46:	015a      	lsls	r2, r3, #5
 800fb48:	697b      	ldr	r3, [r7, #20]
 800fb4a:	4413      	add	r3, r2
 800fb4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb50:	691b      	ldr	r3, [r3, #16]
 800fb52:	693a      	ldr	r2, [r7, #16]
 800fb54:	0151      	lsls	r1, r2, #5
 800fb56:	697a      	ldr	r2, [r7, #20]
 800fb58:	440a      	add	r2, r1
 800fb5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fb5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fb62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800fb64:	693b      	ldr	r3, [r7, #16]
 800fb66:	015a      	lsls	r2, r3, #5
 800fb68:	697b      	ldr	r3, [r7, #20]
 800fb6a:	4413      	add	r3, r2
 800fb6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb70:	691a      	ldr	r2, [r3, #16]
 800fb72:	68bb      	ldr	r3, [r7, #8]
 800fb74:	695b      	ldr	r3, [r3, #20]
 800fb76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fb7a:	6939      	ldr	r1, [r7, #16]
 800fb7c:	0148      	lsls	r0, r1, #5
 800fb7e:	6979      	ldr	r1, [r7, #20]
 800fb80:	4401      	add	r1, r0
 800fb82:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800fb86:	4313      	orrs	r3, r2
 800fb88:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800fb8a:	79fb      	ldrb	r3, [r7, #7]
 800fb8c:	2b01      	cmp	r3, #1
 800fb8e:	d11e      	bne.n	800fbce <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800fb90:	68bb      	ldr	r3, [r7, #8]
 800fb92:	691b      	ldr	r3, [r3, #16]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d009      	beq.n	800fbac <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800fb98:	693b      	ldr	r3, [r7, #16]
 800fb9a:	015a      	lsls	r2, r3, #5
 800fb9c:	697b      	ldr	r3, [r7, #20]
 800fb9e:	4413      	add	r3, r2
 800fba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fba4:	461a      	mov	r2, r3
 800fba6:	68bb      	ldr	r3, [r7, #8]
 800fba8:	691b      	ldr	r3, [r3, #16]
 800fbaa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fbac:	693b      	ldr	r3, [r7, #16]
 800fbae:	015a      	lsls	r2, r3, #5
 800fbb0:	697b      	ldr	r3, [r7, #20]
 800fbb2:	4413      	add	r3, r2
 800fbb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	693a      	ldr	r2, [r7, #16]
 800fbbc:	0151      	lsls	r1, r2, #5
 800fbbe:	697a      	ldr	r2, [r7, #20]
 800fbc0:	440a      	add	r2, r1
 800fbc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fbc6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fbca:	6013      	str	r3, [r2, #0]
 800fbcc:	e092      	b.n	800fcf4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fbce:	693b      	ldr	r3, [r7, #16]
 800fbd0:	015a      	lsls	r2, r3, #5
 800fbd2:	697b      	ldr	r3, [r7, #20]
 800fbd4:	4413      	add	r3, r2
 800fbd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	693a      	ldr	r2, [r7, #16]
 800fbde:	0151      	lsls	r1, r2, #5
 800fbe0:	697a      	ldr	r2, [r7, #20]
 800fbe2:	440a      	add	r2, r1
 800fbe4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fbe8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fbec:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800fbee:	68bb      	ldr	r3, [r7, #8]
 800fbf0:	695b      	ldr	r3, [r3, #20]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d07e      	beq.n	800fcf4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800fbf6:	697b      	ldr	r3, [r7, #20]
 800fbf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fbfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fbfe:	68bb      	ldr	r3, [r7, #8]
 800fc00:	781b      	ldrb	r3, [r3, #0]
 800fc02:	f003 030f 	and.w	r3, r3, #15
 800fc06:	2101      	movs	r1, #1
 800fc08:	fa01 f303 	lsl.w	r3, r1, r3
 800fc0c:	6979      	ldr	r1, [r7, #20]
 800fc0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fc12:	4313      	orrs	r3, r2
 800fc14:	634b      	str	r3, [r1, #52]	; 0x34
 800fc16:	e06d      	b.n	800fcf4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800fc18:	693b      	ldr	r3, [r7, #16]
 800fc1a:	015a      	lsls	r2, r3, #5
 800fc1c:	697b      	ldr	r3, [r7, #20]
 800fc1e:	4413      	add	r3, r2
 800fc20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc24:	691b      	ldr	r3, [r3, #16]
 800fc26:	693a      	ldr	r2, [r7, #16]
 800fc28:	0151      	lsls	r1, r2, #5
 800fc2a:	697a      	ldr	r2, [r7, #20]
 800fc2c:	440a      	add	r2, r1
 800fc2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fc32:	0cdb      	lsrs	r3, r3, #19
 800fc34:	04db      	lsls	r3, r3, #19
 800fc36:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800fc38:	693b      	ldr	r3, [r7, #16]
 800fc3a:	015a      	lsls	r2, r3, #5
 800fc3c:	697b      	ldr	r3, [r7, #20]
 800fc3e:	4413      	add	r3, r2
 800fc40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc44:	691b      	ldr	r3, [r3, #16]
 800fc46:	693a      	ldr	r2, [r7, #16]
 800fc48:	0151      	lsls	r1, r2, #5
 800fc4a:	697a      	ldr	r2, [r7, #20]
 800fc4c:	440a      	add	r2, r1
 800fc4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fc52:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fc56:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fc5a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800fc5c:	68bb      	ldr	r3, [r7, #8]
 800fc5e:	695b      	ldr	r3, [r3, #20]
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d003      	beq.n	800fc6c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800fc64:	68bb      	ldr	r3, [r7, #8]
 800fc66:	689a      	ldr	r2, [r3, #8]
 800fc68:	68bb      	ldr	r3, [r7, #8]
 800fc6a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fc6c:	693b      	ldr	r3, [r7, #16]
 800fc6e:	015a      	lsls	r2, r3, #5
 800fc70:	697b      	ldr	r3, [r7, #20]
 800fc72:	4413      	add	r3, r2
 800fc74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc78:	691b      	ldr	r3, [r3, #16]
 800fc7a:	693a      	ldr	r2, [r7, #16]
 800fc7c:	0151      	lsls	r1, r2, #5
 800fc7e:	697a      	ldr	r2, [r7, #20]
 800fc80:	440a      	add	r2, r1
 800fc82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fc86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fc8a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800fc8c:	693b      	ldr	r3, [r7, #16]
 800fc8e:	015a      	lsls	r2, r3, #5
 800fc90:	697b      	ldr	r3, [r7, #20]
 800fc92:	4413      	add	r3, r2
 800fc94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc98:	691a      	ldr	r2, [r3, #16]
 800fc9a:	68bb      	ldr	r3, [r7, #8]
 800fc9c:	689b      	ldr	r3, [r3, #8]
 800fc9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fca2:	6939      	ldr	r1, [r7, #16]
 800fca4:	0148      	lsls	r0, r1, #5
 800fca6:	6979      	ldr	r1, [r7, #20]
 800fca8:	4401      	add	r1, r0
 800fcaa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fcae:	4313      	orrs	r3, r2
 800fcb0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800fcb2:	79fb      	ldrb	r3, [r7, #7]
 800fcb4:	2b01      	cmp	r3, #1
 800fcb6:	d10d      	bne.n	800fcd4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800fcb8:	68bb      	ldr	r3, [r7, #8]
 800fcba:	68db      	ldr	r3, [r3, #12]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d009      	beq.n	800fcd4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800fcc0:	68bb      	ldr	r3, [r7, #8]
 800fcc2:	68d9      	ldr	r1, [r3, #12]
 800fcc4:	693b      	ldr	r3, [r7, #16]
 800fcc6:	015a      	lsls	r2, r3, #5
 800fcc8:	697b      	ldr	r3, [r7, #20]
 800fcca:	4413      	add	r3, r2
 800fccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fcd0:	460a      	mov	r2, r1
 800fcd2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800fcd4:	693b      	ldr	r3, [r7, #16]
 800fcd6:	015a      	lsls	r2, r3, #5
 800fcd8:	697b      	ldr	r3, [r7, #20]
 800fcda:	4413      	add	r3, r2
 800fcdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	693a      	ldr	r2, [r7, #16]
 800fce4:	0151      	lsls	r1, r2, #5
 800fce6:	697a      	ldr	r2, [r7, #20]
 800fce8:	440a      	add	r2, r1
 800fcea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fcee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fcf2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fcf4:	2300      	movs	r3, #0
}
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	371c      	adds	r7, #28
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd00:	4770      	bx	lr

0800fd02 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800fd02:	b480      	push	{r7}
 800fd04:	b089      	sub	sp, #36	; 0x24
 800fd06:	af00      	add	r7, sp, #0
 800fd08:	60f8      	str	r0, [r7, #12]
 800fd0a:	60b9      	str	r1, [r7, #8]
 800fd0c:	4611      	mov	r1, r2
 800fd0e:	461a      	mov	r2, r3
 800fd10:	460b      	mov	r3, r1
 800fd12:	71fb      	strb	r3, [r7, #7]
 800fd14:	4613      	mov	r3, r2
 800fd16:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800fd1c:	68bb      	ldr	r3, [r7, #8]
 800fd1e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800fd20:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d11a      	bne.n	800fd5e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800fd28:	88bb      	ldrh	r3, [r7, #4]
 800fd2a:	3303      	adds	r3, #3
 800fd2c:	089b      	lsrs	r3, r3, #2
 800fd2e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800fd30:	2300      	movs	r3, #0
 800fd32:	61bb      	str	r3, [r7, #24]
 800fd34:	e00f      	b.n	800fd56 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800fd36:	79fb      	ldrb	r3, [r7, #7]
 800fd38:	031a      	lsls	r2, r3, #12
 800fd3a:	697b      	ldr	r3, [r7, #20]
 800fd3c:	4413      	add	r3, r2
 800fd3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fd42:	461a      	mov	r2, r3
 800fd44:	69fb      	ldr	r3, [r7, #28]
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	6013      	str	r3, [r2, #0]
      pSrc++;
 800fd4a:	69fb      	ldr	r3, [r7, #28]
 800fd4c:	3304      	adds	r3, #4
 800fd4e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800fd50:	69bb      	ldr	r3, [r7, #24]
 800fd52:	3301      	adds	r3, #1
 800fd54:	61bb      	str	r3, [r7, #24]
 800fd56:	69ba      	ldr	r2, [r7, #24]
 800fd58:	693b      	ldr	r3, [r7, #16]
 800fd5a:	429a      	cmp	r2, r3
 800fd5c:	d3eb      	bcc.n	800fd36 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800fd5e:	2300      	movs	r3, #0
}
 800fd60:	4618      	mov	r0, r3
 800fd62:	3724      	adds	r7, #36	; 0x24
 800fd64:	46bd      	mov	sp, r7
 800fd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6a:	4770      	bx	lr

0800fd6c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800fd6c:	b480      	push	{r7}
 800fd6e:	b089      	sub	sp, #36	; 0x24
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	60f8      	str	r0, [r7, #12]
 800fd74:	60b9      	str	r1, [r7, #8]
 800fd76:	4613      	mov	r3, r2
 800fd78:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800fd7e:	68bb      	ldr	r3, [r7, #8]
 800fd80:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800fd82:	88fb      	ldrh	r3, [r7, #6]
 800fd84:	3303      	adds	r3, #3
 800fd86:	089b      	lsrs	r3, r3, #2
 800fd88:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	61bb      	str	r3, [r7, #24]
 800fd8e:	e00b      	b.n	800fda8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800fd90:	697b      	ldr	r3, [r7, #20]
 800fd92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fd96:	681a      	ldr	r2, [r3, #0]
 800fd98:	69fb      	ldr	r3, [r7, #28]
 800fd9a:	601a      	str	r2, [r3, #0]
    pDest++;
 800fd9c:	69fb      	ldr	r3, [r7, #28]
 800fd9e:	3304      	adds	r3, #4
 800fda0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800fda2:	69bb      	ldr	r3, [r7, #24]
 800fda4:	3301      	adds	r3, #1
 800fda6:	61bb      	str	r3, [r7, #24]
 800fda8:	69ba      	ldr	r2, [r7, #24]
 800fdaa:	693b      	ldr	r3, [r7, #16]
 800fdac:	429a      	cmp	r2, r3
 800fdae:	d3ef      	bcc.n	800fd90 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800fdb0:	69fb      	ldr	r3, [r7, #28]
}
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	3724      	adds	r7, #36	; 0x24
 800fdb6:	46bd      	mov	sp, r7
 800fdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdbc:	4770      	bx	lr

0800fdbe <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fdbe:	b480      	push	{r7}
 800fdc0:	b085      	sub	sp, #20
 800fdc2:	af00      	add	r7, sp, #0
 800fdc4:	6078      	str	r0, [r7, #4]
 800fdc6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fdcc:	683b      	ldr	r3, [r7, #0]
 800fdce:	781b      	ldrb	r3, [r3, #0]
 800fdd0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fdd2:	683b      	ldr	r3, [r7, #0]
 800fdd4:	785b      	ldrb	r3, [r3, #1]
 800fdd6:	2b01      	cmp	r3, #1
 800fdd8:	d12c      	bne.n	800fe34 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800fdda:	68bb      	ldr	r3, [r7, #8]
 800fddc:	015a      	lsls	r2, r3, #5
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	4413      	add	r3, r2
 800fde2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	db12      	blt.n	800fe12 <USB_EPSetStall+0x54>
 800fdec:	68bb      	ldr	r3, [r7, #8]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d00f      	beq.n	800fe12 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800fdf2:	68bb      	ldr	r3, [r7, #8]
 800fdf4:	015a      	lsls	r2, r3, #5
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	4413      	add	r3, r2
 800fdfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	68ba      	ldr	r2, [r7, #8]
 800fe02:	0151      	lsls	r1, r2, #5
 800fe04:	68fa      	ldr	r2, [r7, #12]
 800fe06:	440a      	add	r2, r1
 800fe08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe0c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800fe10:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800fe12:	68bb      	ldr	r3, [r7, #8]
 800fe14:	015a      	lsls	r2, r3, #5
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	4413      	add	r3, r2
 800fe1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	68ba      	ldr	r2, [r7, #8]
 800fe22:	0151      	lsls	r1, r2, #5
 800fe24:	68fa      	ldr	r2, [r7, #12]
 800fe26:	440a      	add	r2, r1
 800fe28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800fe30:	6013      	str	r3, [r2, #0]
 800fe32:	e02b      	b.n	800fe8c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800fe34:	68bb      	ldr	r3, [r7, #8]
 800fe36:	015a      	lsls	r2, r3, #5
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	4413      	add	r3, r2
 800fe3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	db12      	blt.n	800fe6c <USB_EPSetStall+0xae>
 800fe46:	68bb      	ldr	r3, [r7, #8]
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d00f      	beq.n	800fe6c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800fe4c:	68bb      	ldr	r3, [r7, #8]
 800fe4e:	015a      	lsls	r2, r3, #5
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	4413      	add	r3, r2
 800fe54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	68ba      	ldr	r2, [r7, #8]
 800fe5c:	0151      	lsls	r1, r2, #5
 800fe5e:	68fa      	ldr	r2, [r7, #12]
 800fe60:	440a      	add	r2, r1
 800fe62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fe66:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800fe6a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800fe6c:	68bb      	ldr	r3, [r7, #8]
 800fe6e:	015a      	lsls	r2, r3, #5
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	4413      	add	r3, r2
 800fe74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	68ba      	ldr	r2, [r7, #8]
 800fe7c:	0151      	lsls	r1, r2, #5
 800fe7e:	68fa      	ldr	r2, [r7, #12]
 800fe80:	440a      	add	r2, r1
 800fe82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fe86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800fe8a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fe8c:	2300      	movs	r3, #0
}
 800fe8e:	4618      	mov	r0, r3
 800fe90:	3714      	adds	r7, #20
 800fe92:	46bd      	mov	sp, r7
 800fe94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe98:	4770      	bx	lr

0800fe9a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fe9a:	b480      	push	{r7}
 800fe9c:	b085      	sub	sp, #20
 800fe9e:	af00      	add	r7, sp, #0
 800fea0:	6078      	str	r0, [r7, #4]
 800fea2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fea8:	683b      	ldr	r3, [r7, #0]
 800feaa:	781b      	ldrb	r3, [r3, #0]
 800feac:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800feae:	683b      	ldr	r3, [r7, #0]
 800feb0:	785b      	ldrb	r3, [r3, #1]
 800feb2:	2b01      	cmp	r3, #1
 800feb4:	d128      	bne.n	800ff08 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800feb6:	68bb      	ldr	r3, [r7, #8]
 800feb8:	015a      	lsls	r2, r3, #5
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	4413      	add	r3, r2
 800febe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	68ba      	ldr	r2, [r7, #8]
 800fec6:	0151      	lsls	r1, r2, #5
 800fec8:	68fa      	ldr	r2, [r7, #12]
 800feca:	440a      	add	r2, r1
 800fecc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fed0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fed4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800fed6:	683b      	ldr	r3, [r7, #0]
 800fed8:	78db      	ldrb	r3, [r3, #3]
 800feda:	2b03      	cmp	r3, #3
 800fedc:	d003      	beq.n	800fee6 <USB_EPClearStall+0x4c>
 800fede:	683b      	ldr	r3, [r7, #0]
 800fee0:	78db      	ldrb	r3, [r3, #3]
 800fee2:	2b02      	cmp	r3, #2
 800fee4:	d138      	bne.n	800ff58 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800fee6:	68bb      	ldr	r3, [r7, #8]
 800fee8:	015a      	lsls	r2, r3, #5
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	4413      	add	r3, r2
 800feee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	68ba      	ldr	r2, [r7, #8]
 800fef6:	0151      	lsls	r1, r2, #5
 800fef8:	68fa      	ldr	r2, [r7, #12]
 800fefa:	440a      	add	r2, r1
 800fefc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ff00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ff04:	6013      	str	r3, [r2, #0]
 800ff06:	e027      	b.n	800ff58 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ff08:	68bb      	ldr	r3, [r7, #8]
 800ff0a:	015a      	lsls	r2, r3, #5
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	4413      	add	r3, r2
 800ff10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	68ba      	ldr	r2, [r7, #8]
 800ff18:	0151      	lsls	r1, r2, #5
 800ff1a:	68fa      	ldr	r2, [r7, #12]
 800ff1c:	440a      	add	r2, r1
 800ff1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ff22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ff26:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ff28:	683b      	ldr	r3, [r7, #0]
 800ff2a:	78db      	ldrb	r3, [r3, #3]
 800ff2c:	2b03      	cmp	r3, #3
 800ff2e:	d003      	beq.n	800ff38 <USB_EPClearStall+0x9e>
 800ff30:	683b      	ldr	r3, [r7, #0]
 800ff32:	78db      	ldrb	r3, [r3, #3]
 800ff34:	2b02      	cmp	r3, #2
 800ff36:	d10f      	bne.n	800ff58 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ff38:	68bb      	ldr	r3, [r7, #8]
 800ff3a:	015a      	lsls	r2, r3, #5
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	4413      	add	r3, r2
 800ff40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	68ba      	ldr	r2, [r7, #8]
 800ff48:	0151      	lsls	r1, r2, #5
 800ff4a:	68fa      	ldr	r2, [r7, #12]
 800ff4c:	440a      	add	r2, r1
 800ff4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ff52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ff56:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ff58:	2300      	movs	r3, #0
}
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	3714      	adds	r7, #20
 800ff5e:	46bd      	mov	sp, r7
 800ff60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff64:	4770      	bx	lr

0800ff66 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ff66:	b480      	push	{r7}
 800ff68:	b085      	sub	sp, #20
 800ff6a:	af00      	add	r7, sp, #0
 800ff6c:	6078      	str	r0, [r7, #4]
 800ff6e:	460b      	mov	r3, r1
 800ff70:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	68fa      	ldr	r2, [r7, #12]
 800ff80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ff84:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ff88:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff90:	681a      	ldr	r2, [r3, #0]
 800ff92:	78fb      	ldrb	r3, [r7, #3]
 800ff94:	011b      	lsls	r3, r3, #4
 800ff96:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800ff9a:	68f9      	ldr	r1, [r7, #12]
 800ff9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ffa0:	4313      	orrs	r3, r2
 800ffa2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ffa4:	2300      	movs	r3, #0
}
 800ffa6:	4618      	mov	r0, r3
 800ffa8:	3714      	adds	r7, #20
 800ffaa:	46bd      	mov	sp, r7
 800ffac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb0:	4770      	bx	lr

0800ffb2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ffb2:	b580      	push	{r7, lr}
 800ffb4:	b084      	sub	sp, #16
 800ffb6:	af00      	add	r7, sp, #0
 800ffb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ffc4:	685b      	ldr	r3, [r3, #4]
 800ffc6:	68fa      	ldr	r2, [r7, #12]
 800ffc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ffcc:	f023 0302 	bic.w	r3, r3, #2
 800ffd0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800ffd2:	2003      	movs	r0, #3
 800ffd4:	f7fa ff54 	bl	800ae80 <HAL_Delay>

  return HAL_OK;
 800ffd8:	2300      	movs	r3, #0
}
 800ffda:	4618      	mov	r0, r3
 800ffdc:	3710      	adds	r7, #16
 800ffde:	46bd      	mov	sp, r7
 800ffe0:	bd80      	pop	{r7, pc}

0800ffe2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ffe2:	b580      	push	{r7, lr}
 800ffe4:	b084      	sub	sp, #16
 800ffe6:	af00      	add	r7, sp, #0
 800ffe8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fff4:	685b      	ldr	r3, [r3, #4]
 800fff6:	68fa      	ldr	r2, [r7, #12]
 800fff8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fffc:	f043 0302 	orr.w	r3, r3, #2
 8010000:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8010002:	2003      	movs	r0, #3
 8010004:	f7fa ff3c 	bl	800ae80 <HAL_Delay>

  return HAL_OK;
 8010008:	2300      	movs	r3, #0
}
 801000a:	4618      	mov	r0, r3
 801000c:	3710      	adds	r7, #16
 801000e:	46bd      	mov	sp, r7
 8010010:	bd80      	pop	{r7, pc}

08010012 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8010012:	b480      	push	{r7}
 8010014:	b085      	sub	sp, #20
 8010016:	af00      	add	r7, sp, #0
 8010018:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	695b      	ldr	r3, [r3, #20]
 801001e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	699b      	ldr	r3, [r3, #24]
 8010024:	68fa      	ldr	r2, [r7, #12]
 8010026:	4013      	ands	r3, r2
 8010028:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801002a:	68fb      	ldr	r3, [r7, #12]
}
 801002c:	4618      	mov	r0, r3
 801002e:	3714      	adds	r7, #20
 8010030:	46bd      	mov	sp, r7
 8010032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010036:	4770      	bx	lr

08010038 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010038:	b480      	push	{r7}
 801003a:	b085      	sub	sp, #20
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801004a:	699b      	ldr	r3, [r3, #24]
 801004c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010054:	69db      	ldr	r3, [r3, #28]
 8010056:	68ba      	ldr	r2, [r7, #8]
 8010058:	4013      	ands	r3, r2
 801005a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801005c:	68bb      	ldr	r3, [r7, #8]
 801005e:	0c1b      	lsrs	r3, r3, #16
}
 8010060:	4618      	mov	r0, r3
 8010062:	3714      	adds	r7, #20
 8010064:	46bd      	mov	sp, r7
 8010066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006a:	4770      	bx	lr

0801006c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801006c:	b480      	push	{r7}
 801006e:	b085      	sub	sp, #20
 8010070:	af00      	add	r7, sp, #0
 8010072:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801007e:	699b      	ldr	r3, [r3, #24]
 8010080:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010088:	69db      	ldr	r3, [r3, #28]
 801008a:	68ba      	ldr	r2, [r7, #8]
 801008c:	4013      	ands	r3, r2
 801008e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8010090:	68bb      	ldr	r3, [r7, #8]
 8010092:	b29b      	uxth	r3, r3
}
 8010094:	4618      	mov	r0, r3
 8010096:	3714      	adds	r7, #20
 8010098:	46bd      	mov	sp, r7
 801009a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801009e:	4770      	bx	lr

080100a0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80100a0:	b480      	push	{r7}
 80100a2:	b085      	sub	sp, #20
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	6078      	str	r0, [r7, #4]
 80100a8:	460b      	mov	r3, r1
 80100aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80100b0:	78fb      	ldrb	r3, [r7, #3]
 80100b2:	015a      	lsls	r2, r3, #5
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	4413      	add	r3, r2
 80100b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100bc:	689b      	ldr	r3, [r3, #8]
 80100be:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80100c6:	695b      	ldr	r3, [r3, #20]
 80100c8:	68ba      	ldr	r2, [r7, #8]
 80100ca:	4013      	ands	r3, r2
 80100cc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80100ce:	68bb      	ldr	r3, [r7, #8]
}
 80100d0:	4618      	mov	r0, r3
 80100d2:	3714      	adds	r7, #20
 80100d4:	46bd      	mov	sp, r7
 80100d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100da:	4770      	bx	lr

080100dc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80100dc:	b480      	push	{r7}
 80100de:	b087      	sub	sp, #28
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	6078      	str	r0, [r7, #4]
 80100e4:	460b      	mov	r3, r1
 80100e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80100ec:	697b      	ldr	r3, [r7, #20]
 80100ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80100f2:	691b      	ldr	r3, [r3, #16]
 80100f4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80100f6:	697b      	ldr	r3, [r7, #20]
 80100f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80100fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80100fe:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8010100:	78fb      	ldrb	r3, [r7, #3]
 8010102:	f003 030f 	and.w	r3, r3, #15
 8010106:	68fa      	ldr	r2, [r7, #12]
 8010108:	fa22 f303 	lsr.w	r3, r2, r3
 801010c:	01db      	lsls	r3, r3, #7
 801010e:	b2db      	uxtb	r3, r3
 8010110:	693a      	ldr	r2, [r7, #16]
 8010112:	4313      	orrs	r3, r2
 8010114:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010116:	78fb      	ldrb	r3, [r7, #3]
 8010118:	015a      	lsls	r2, r3, #5
 801011a:	697b      	ldr	r3, [r7, #20]
 801011c:	4413      	add	r3, r2
 801011e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010122:	689b      	ldr	r3, [r3, #8]
 8010124:	693a      	ldr	r2, [r7, #16]
 8010126:	4013      	ands	r3, r2
 8010128:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801012a:	68bb      	ldr	r3, [r7, #8]
}
 801012c:	4618      	mov	r0, r3
 801012e:	371c      	adds	r7, #28
 8010130:	46bd      	mov	sp, r7
 8010132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010136:	4770      	bx	lr

08010138 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010138:	b480      	push	{r7}
 801013a:	b083      	sub	sp, #12
 801013c:	af00      	add	r7, sp, #0
 801013e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	695b      	ldr	r3, [r3, #20]
 8010144:	f003 0301 	and.w	r3, r3, #1
}
 8010148:	4618      	mov	r0, r3
 801014a:	370c      	adds	r7, #12
 801014c:	46bd      	mov	sp, r7
 801014e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010152:	4770      	bx	lr

08010154 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8010154:	b480      	push	{r7}
 8010156:	b085      	sub	sp, #20
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	68fa      	ldr	r2, [r7, #12]
 801016a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801016e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8010172:	f023 0307 	bic.w	r3, r3, #7
 8010176:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801017e:	689b      	ldr	r3, [r3, #8]
 8010180:	f003 0306 	and.w	r3, r3, #6
 8010184:	2b04      	cmp	r3, #4
 8010186:	d109      	bne.n	801019c <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	68fa      	ldr	r2, [r7, #12]
 8010192:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010196:	f043 0303 	orr.w	r3, r3, #3
 801019a:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101a2:	685b      	ldr	r3, [r3, #4]
 80101a4:	68fa      	ldr	r2, [r7, #12]
 80101a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80101aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80101ae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80101b0:	2300      	movs	r3, #0
}
 80101b2:	4618      	mov	r0, r3
 80101b4:	3714      	adds	r7, #20
 80101b6:	46bd      	mov	sp, r7
 80101b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101bc:	4770      	bx	lr
	...

080101c0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80101c0:	b480      	push	{r7}
 80101c2:	b087      	sub	sp, #28
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	60f8      	str	r0, [r7, #12]
 80101c8:	460b      	mov	r3, r1
 80101ca:	607a      	str	r2, [r7, #4]
 80101cc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	333c      	adds	r3, #60	; 0x3c
 80101d6:	3304      	adds	r3, #4
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80101dc:	693b      	ldr	r3, [r7, #16]
 80101de:	4a26      	ldr	r2, [pc, #152]	; (8010278 <USB_EP0_OutStart+0xb8>)
 80101e0:	4293      	cmp	r3, r2
 80101e2:	d90a      	bls.n	80101fa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80101e4:	697b      	ldr	r3, [r7, #20]
 80101e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80101f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80101f4:	d101      	bne.n	80101fa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80101f6:	2300      	movs	r3, #0
 80101f8:	e037      	b.n	801026a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80101fa:	697b      	ldr	r3, [r7, #20]
 80101fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010200:	461a      	mov	r2, r3
 8010202:	2300      	movs	r3, #0
 8010204:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010206:	697b      	ldr	r3, [r7, #20]
 8010208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801020c:	691b      	ldr	r3, [r3, #16]
 801020e:	697a      	ldr	r2, [r7, #20]
 8010210:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010214:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010218:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801021a:	697b      	ldr	r3, [r7, #20]
 801021c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010220:	691b      	ldr	r3, [r3, #16]
 8010222:	697a      	ldr	r2, [r7, #20]
 8010224:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010228:	f043 0318 	orr.w	r3, r3, #24
 801022c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801022e:	697b      	ldr	r3, [r7, #20]
 8010230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010234:	691b      	ldr	r3, [r3, #16]
 8010236:	697a      	ldr	r2, [r7, #20]
 8010238:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801023c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8010240:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8010242:	7afb      	ldrb	r3, [r7, #11]
 8010244:	2b01      	cmp	r3, #1
 8010246:	d10f      	bne.n	8010268 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010248:	697b      	ldr	r3, [r7, #20]
 801024a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801024e:	461a      	mov	r2, r3
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8010254:	697b      	ldr	r3, [r7, #20]
 8010256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	697a      	ldr	r2, [r7, #20]
 801025e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010262:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8010266:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010268:	2300      	movs	r3, #0
}
 801026a:	4618      	mov	r0, r3
 801026c:	371c      	adds	r7, #28
 801026e:	46bd      	mov	sp, r7
 8010270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010274:	4770      	bx	lr
 8010276:	bf00      	nop
 8010278:	4f54300a 	.word	0x4f54300a

0801027c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801027c:	b480      	push	{r7}
 801027e:	b085      	sub	sp, #20
 8010280:	af00      	add	r7, sp, #0
 8010282:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8010284:	2300      	movs	r3, #0
 8010286:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	3301      	adds	r3, #1
 801028c:	60fb      	str	r3, [r7, #12]
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	4a13      	ldr	r2, [pc, #76]	; (80102e0 <USB_CoreReset+0x64>)
 8010292:	4293      	cmp	r3, r2
 8010294:	d901      	bls.n	801029a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010296:	2303      	movs	r3, #3
 8010298:	e01b      	b.n	80102d2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	691b      	ldr	r3, [r3, #16]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	daf2      	bge.n	8010288 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80102a2:	2300      	movs	r3, #0
 80102a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	691b      	ldr	r3, [r3, #16]
 80102aa:	f043 0201 	orr.w	r2, r3, #1
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	3301      	adds	r3, #1
 80102b6:	60fb      	str	r3, [r7, #12]
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	4a09      	ldr	r2, [pc, #36]	; (80102e0 <USB_CoreReset+0x64>)
 80102bc:	4293      	cmp	r3, r2
 80102be:	d901      	bls.n	80102c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80102c0:	2303      	movs	r3, #3
 80102c2:	e006      	b.n	80102d2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	691b      	ldr	r3, [r3, #16]
 80102c8:	f003 0301 	and.w	r3, r3, #1
 80102cc:	2b01      	cmp	r3, #1
 80102ce:	d0f0      	beq.n	80102b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80102d0:	2300      	movs	r3, #0
}
 80102d2:	4618      	mov	r0, r3
 80102d4:	3714      	adds	r7, #20
 80102d6:	46bd      	mov	sp, r7
 80102d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102dc:	4770      	bx	lr
 80102de:	bf00      	nop
 80102e0:	00030d40 	.word	0x00030d40

080102e4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80102e4:	b580      	push	{r7, lr}
 80102e6:	b084      	sub	sp, #16
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	6078      	str	r0, [r7, #4]
 80102ec:	460b      	mov	r3, r1
 80102ee:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80102f0:	2300      	movs	r3, #0
 80102f2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	7c1b      	ldrb	r3, [r3, #16]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d115      	bne.n	8010328 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80102fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010300:	2202      	movs	r2, #2
 8010302:	2181      	movs	r1, #129	; 0x81
 8010304:	6878      	ldr	r0, [r7, #4]
 8010306:	f005 f8a6 	bl	8015456 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	2201      	movs	r2, #1
 801030e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010310:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010314:	2202      	movs	r2, #2
 8010316:	2101      	movs	r1, #1
 8010318:	6878      	ldr	r0, [r7, #4]
 801031a:	f005 f89c 	bl	8015456 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	2201      	movs	r2, #1
 8010322:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8010326:	e012      	b.n	801034e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010328:	2340      	movs	r3, #64	; 0x40
 801032a:	2202      	movs	r2, #2
 801032c:	2181      	movs	r1, #129	; 0x81
 801032e:	6878      	ldr	r0, [r7, #4]
 8010330:	f005 f891 	bl	8015456 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	2201      	movs	r2, #1
 8010338:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801033a:	2340      	movs	r3, #64	; 0x40
 801033c:	2202      	movs	r2, #2
 801033e:	2101      	movs	r1, #1
 8010340:	6878      	ldr	r0, [r7, #4]
 8010342:	f005 f888 	bl	8015456 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	2201      	movs	r2, #1
 801034a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801034e:	2308      	movs	r3, #8
 8010350:	2203      	movs	r2, #3
 8010352:	2182      	movs	r1, #130	; 0x82
 8010354:	6878      	ldr	r0, [r7, #4]
 8010356:	f005 f87e 	bl	8015456 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	2201      	movs	r2, #1
 801035e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8010360:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8010364:	f005 f9f4 	bl	8015750 <malloc>
 8010368:	4603      	mov	r3, r0
 801036a:	461a      	mov	r2, r3
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010378:	2b00      	cmp	r3, #0
 801037a:	d102      	bne.n	8010382 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 801037c:	2301      	movs	r3, #1
 801037e:	73fb      	strb	r3, [r7, #15]
 8010380:	e026      	b.n	80103d0 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010388:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8010394:	68bb      	ldr	r3, [r7, #8]
 8010396:	2200      	movs	r2, #0
 8010398:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 801039c:	68bb      	ldr	r3, [r7, #8]
 801039e:	2200      	movs	r2, #0
 80103a0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	7c1b      	ldrb	r3, [r3, #16]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d109      	bne.n	80103c0 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80103ac:	68bb      	ldr	r3, [r7, #8]
 80103ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80103b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80103b6:	2101      	movs	r1, #1
 80103b8:	6878      	ldr	r0, [r7, #4]
 80103ba:	f005 f93d 	bl	8015638 <USBD_LL_PrepareReceive>
 80103be:	e007      	b.n	80103d0 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80103c0:	68bb      	ldr	r3, [r7, #8]
 80103c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80103c6:	2340      	movs	r3, #64	; 0x40
 80103c8:	2101      	movs	r1, #1
 80103ca:	6878      	ldr	r0, [r7, #4]
 80103cc:	f005 f934 	bl	8015638 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80103d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80103d2:	4618      	mov	r0, r3
 80103d4:	3710      	adds	r7, #16
 80103d6:	46bd      	mov	sp, r7
 80103d8:	bd80      	pop	{r7, pc}

080103da <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80103da:	b580      	push	{r7, lr}
 80103dc:	b084      	sub	sp, #16
 80103de:	af00      	add	r7, sp, #0
 80103e0:	6078      	str	r0, [r7, #4]
 80103e2:	460b      	mov	r3, r1
 80103e4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80103e6:	2300      	movs	r3, #0
 80103e8:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80103ea:	2181      	movs	r1, #129	; 0x81
 80103ec:	6878      	ldr	r0, [r7, #4]
 80103ee:	f005 f858 	bl	80154a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	2200      	movs	r2, #0
 80103f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80103f8:	2101      	movs	r1, #1
 80103fa:	6878      	ldr	r0, [r7, #4]
 80103fc:	f005 f851 	bl	80154a2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	2200      	movs	r2, #0
 8010404:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8010408:	2182      	movs	r1, #130	; 0x82
 801040a:	6878      	ldr	r0, [r7, #4]
 801040c:	f005 f849 	bl	80154a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	2200      	movs	r2, #0
 8010414:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 801041c:	2b00      	cmp	r3, #0
 801041e:	d00e      	beq.n	801043e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010426:	685b      	ldr	r3, [r3, #4]
 8010428:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010430:	4618      	mov	r0, r3
 8010432:	f005 f995 	bl	8015760 <free>
    pdev->pClassData = NULL;
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	2200      	movs	r2, #0
 801043a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 801043e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010440:	4618      	mov	r0, r3
 8010442:	3710      	adds	r7, #16
 8010444:	46bd      	mov	sp, r7
 8010446:	bd80      	pop	{r7, pc}

08010448 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8010448:	b580      	push	{r7, lr}
 801044a:	b086      	sub	sp, #24
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
 8010450:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010458:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801045a:	2300      	movs	r3, #0
 801045c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 801045e:	2300      	movs	r3, #0
 8010460:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8010462:	2300      	movs	r3, #0
 8010464:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010466:	683b      	ldr	r3, [r7, #0]
 8010468:	781b      	ldrb	r3, [r3, #0]
 801046a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801046e:	2b00      	cmp	r3, #0
 8010470:	d039      	beq.n	80104e6 <USBD_CDC_Setup+0x9e>
 8010472:	2b20      	cmp	r3, #32
 8010474:	d17c      	bne.n	8010570 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8010476:	683b      	ldr	r3, [r7, #0]
 8010478:	88db      	ldrh	r3, [r3, #6]
 801047a:	2b00      	cmp	r3, #0
 801047c:	d029      	beq.n	80104d2 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 801047e:	683b      	ldr	r3, [r7, #0]
 8010480:	781b      	ldrb	r3, [r3, #0]
 8010482:	b25b      	sxtb	r3, r3
 8010484:	2b00      	cmp	r3, #0
 8010486:	da11      	bge.n	80104ac <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801048e:	689b      	ldr	r3, [r3, #8]
 8010490:	683a      	ldr	r2, [r7, #0]
 8010492:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8010494:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010496:	683a      	ldr	r2, [r7, #0]
 8010498:	88d2      	ldrh	r2, [r2, #6]
 801049a:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801049c:	6939      	ldr	r1, [r7, #16]
 801049e:	683b      	ldr	r3, [r7, #0]
 80104a0:	88db      	ldrh	r3, [r3, #6]
 80104a2:	461a      	mov	r2, r3
 80104a4:	6878      	ldr	r0, [r7, #4]
 80104a6:	f001 f9c9 	bl	801183c <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 80104aa:	e068      	b.n	801057e <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 80104ac:	683b      	ldr	r3, [r7, #0]
 80104ae:	785a      	ldrb	r2, [r3, #1]
 80104b0:	693b      	ldr	r3, [r7, #16]
 80104b2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80104b6:	683b      	ldr	r3, [r7, #0]
 80104b8:	88db      	ldrh	r3, [r3, #6]
 80104ba:	b2da      	uxtb	r2, r3
 80104bc:	693b      	ldr	r3, [r7, #16]
 80104be:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80104c2:	6939      	ldr	r1, [r7, #16]
 80104c4:	683b      	ldr	r3, [r7, #0]
 80104c6:	88db      	ldrh	r3, [r3, #6]
 80104c8:	461a      	mov	r2, r3
 80104ca:	6878      	ldr	r0, [r7, #4]
 80104cc:	f001 f9e4 	bl	8011898 <USBD_CtlPrepareRx>
    break;
 80104d0:	e055      	b.n	801057e <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80104d8:	689b      	ldr	r3, [r3, #8]
 80104da:	683a      	ldr	r2, [r7, #0]
 80104dc:	7850      	ldrb	r0, [r2, #1]
 80104de:	2200      	movs	r2, #0
 80104e0:	6839      	ldr	r1, [r7, #0]
 80104e2:	4798      	blx	r3
    break;
 80104e4:	e04b      	b.n	801057e <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80104e6:	683b      	ldr	r3, [r7, #0]
 80104e8:	785b      	ldrb	r3, [r3, #1]
 80104ea:	2b0a      	cmp	r3, #10
 80104ec:	d017      	beq.n	801051e <USBD_CDC_Setup+0xd6>
 80104ee:	2b0b      	cmp	r3, #11
 80104f0:	d029      	beq.n	8010546 <USBD_CDC_Setup+0xfe>
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d133      	bne.n	801055e <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80104fc:	2b03      	cmp	r3, #3
 80104fe:	d107      	bne.n	8010510 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8010500:	f107 030c 	add.w	r3, r7, #12
 8010504:	2202      	movs	r2, #2
 8010506:	4619      	mov	r1, r3
 8010508:	6878      	ldr	r0, [r7, #4]
 801050a:	f001 f997 	bl	801183c <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 801050e:	e02e      	b.n	801056e <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8010510:	6839      	ldr	r1, [r7, #0]
 8010512:	6878      	ldr	r0, [r7, #4]
 8010514:	f001 f927 	bl	8011766 <USBD_CtlError>
			  ret = USBD_FAIL;
 8010518:	2302      	movs	r3, #2
 801051a:	75fb      	strb	r3, [r7, #23]
      break;
 801051c:	e027      	b.n	801056e <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010524:	2b03      	cmp	r3, #3
 8010526:	d107      	bne.n	8010538 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8010528:	f107 030f 	add.w	r3, r7, #15
 801052c:	2201      	movs	r2, #1
 801052e:	4619      	mov	r1, r3
 8010530:	6878      	ldr	r0, [r7, #4]
 8010532:	f001 f983 	bl	801183c <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8010536:	e01a      	b.n	801056e <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8010538:	6839      	ldr	r1, [r7, #0]
 801053a:	6878      	ldr	r0, [r7, #4]
 801053c:	f001 f913 	bl	8011766 <USBD_CtlError>
			  ret = USBD_FAIL;
 8010540:	2302      	movs	r3, #2
 8010542:	75fb      	strb	r3, [r7, #23]
      break;
 8010544:	e013      	b.n	801056e <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 801054c:	2b03      	cmp	r3, #3
 801054e:	d00d      	beq.n	801056c <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 8010550:	6839      	ldr	r1, [r7, #0]
 8010552:	6878      	ldr	r0, [r7, #4]
 8010554:	f001 f907 	bl	8011766 <USBD_CtlError>
			  ret = USBD_FAIL;
 8010558:	2302      	movs	r3, #2
 801055a:	75fb      	strb	r3, [r7, #23]
      }
      break;
 801055c:	e006      	b.n	801056c <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 801055e:	6839      	ldr	r1, [r7, #0]
 8010560:	6878      	ldr	r0, [r7, #4]
 8010562:	f001 f900 	bl	8011766 <USBD_CtlError>
      ret = USBD_FAIL;
 8010566:	2302      	movs	r3, #2
 8010568:	75fb      	strb	r3, [r7, #23]
      break;
 801056a:	e000      	b.n	801056e <USBD_CDC_Setup+0x126>
      break;
 801056c:	bf00      	nop
    }
    break;
 801056e:	e006      	b.n	801057e <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 8010570:	6839      	ldr	r1, [r7, #0]
 8010572:	6878      	ldr	r0, [r7, #4]
 8010574:	f001 f8f7 	bl	8011766 <USBD_CtlError>
    ret = USBD_FAIL;
 8010578:	2302      	movs	r3, #2
 801057a:	75fb      	strb	r3, [r7, #23]
    break;
 801057c:	bf00      	nop
  }

  return ret;
 801057e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010580:	4618      	mov	r0, r3
 8010582:	3718      	adds	r7, #24
 8010584:	46bd      	mov	sp, r7
 8010586:	bd80      	pop	{r7, pc}

08010588 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010588:	b580      	push	{r7, lr}
 801058a:	b084      	sub	sp, #16
 801058c:	af00      	add	r7, sp, #0
 801058e:	6078      	str	r0, [r7, #4]
 8010590:	460b      	mov	r3, r1
 8010592:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 801059a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80105a2:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d03a      	beq.n	8010624 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80105ae:	78fa      	ldrb	r2, [r7, #3]
 80105b0:	6879      	ldr	r1, [r7, #4]
 80105b2:	4613      	mov	r3, r2
 80105b4:	009b      	lsls	r3, r3, #2
 80105b6:	4413      	add	r3, r2
 80105b8:	009b      	lsls	r3, r3, #2
 80105ba:	440b      	add	r3, r1
 80105bc:	331c      	adds	r3, #28
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d029      	beq.n	8010618 <USBD_CDC_DataIn+0x90>
 80105c4:	78fa      	ldrb	r2, [r7, #3]
 80105c6:	6879      	ldr	r1, [r7, #4]
 80105c8:	4613      	mov	r3, r2
 80105ca:	009b      	lsls	r3, r3, #2
 80105cc:	4413      	add	r3, r2
 80105ce:	009b      	lsls	r3, r3, #2
 80105d0:	440b      	add	r3, r1
 80105d2:	331c      	adds	r3, #28
 80105d4:	681a      	ldr	r2, [r3, #0]
 80105d6:	78f9      	ldrb	r1, [r7, #3]
 80105d8:	68b8      	ldr	r0, [r7, #8]
 80105da:	460b      	mov	r3, r1
 80105dc:	00db      	lsls	r3, r3, #3
 80105de:	1a5b      	subs	r3, r3, r1
 80105e0:	009b      	lsls	r3, r3, #2
 80105e2:	4403      	add	r3, r0
 80105e4:	3344      	adds	r3, #68	; 0x44
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	fbb2 f1f3 	udiv	r1, r2, r3
 80105ec:	fb03 f301 	mul.w	r3, r3, r1
 80105f0:	1ad3      	subs	r3, r2, r3
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d110      	bne.n	8010618 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80105f6:	78fa      	ldrb	r2, [r7, #3]
 80105f8:	6879      	ldr	r1, [r7, #4]
 80105fa:	4613      	mov	r3, r2
 80105fc:	009b      	lsls	r3, r3, #2
 80105fe:	4413      	add	r3, r2
 8010600:	009b      	lsls	r3, r3, #2
 8010602:	440b      	add	r3, r1
 8010604:	331c      	adds	r3, #28
 8010606:	2200      	movs	r2, #0
 8010608:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 801060a:	78f9      	ldrb	r1, [r7, #3]
 801060c:	2300      	movs	r3, #0
 801060e:	2200      	movs	r2, #0
 8010610:	6878      	ldr	r0, [r7, #4]
 8010612:	f004 ffee 	bl	80155f2 <USBD_LL_Transmit>
 8010616:	e003      	b.n	8010620 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	2200      	movs	r2, #0
 801061c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8010620:	2300      	movs	r3, #0
 8010622:	e000      	b.n	8010626 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8010624:	2302      	movs	r3, #2
  }
}
 8010626:	4618      	mov	r0, r3
 8010628:	3710      	adds	r7, #16
 801062a:	46bd      	mov	sp, r7
 801062c:	bd80      	pop	{r7, pc}

0801062e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801062e:	b580      	push	{r7, lr}
 8010630:	b084      	sub	sp, #16
 8010632:	af00      	add	r7, sp, #0
 8010634:	6078      	str	r0, [r7, #4]
 8010636:	460b      	mov	r3, r1
 8010638:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010640:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8010642:	78fb      	ldrb	r3, [r7, #3]
 8010644:	4619      	mov	r1, r3
 8010646:	6878      	ldr	r0, [r7, #4]
 8010648:	f005 f819 	bl	801567e <USBD_LL_GetRxDataSize>
 801064c:	4602      	mov	r2, r0
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 801065a:	2b00      	cmp	r3, #0
 801065c:	d00d      	beq.n	801067a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010664:	68db      	ldr	r3, [r3, #12]
 8010666:	68fa      	ldr	r2, [r7, #12]
 8010668:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801066c:	68fa      	ldr	r2, [r7, #12]
 801066e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8010672:	4611      	mov	r1, r2
 8010674:	4798      	blx	r3

    return USBD_OK;
 8010676:	2300      	movs	r3, #0
 8010678:	e000      	b.n	801067c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 801067a:	2302      	movs	r3, #2
  }
}
 801067c:	4618      	mov	r0, r3
 801067e:	3710      	adds	r7, #16
 8010680:	46bd      	mov	sp, r7
 8010682:	bd80      	pop	{r7, pc}

08010684 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8010684:	b580      	push	{r7, lr}
 8010686:	b084      	sub	sp, #16
 8010688:	af00      	add	r7, sp, #0
 801068a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010692:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801069a:	2b00      	cmp	r3, #0
 801069c:	d015      	beq.n	80106ca <USBD_CDC_EP0_RxReady+0x46>
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80106a4:	2bff      	cmp	r3, #255	; 0xff
 80106a6:	d010      	beq.n	80106ca <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80106ae:	689b      	ldr	r3, [r3, #8]
 80106b0:	68fa      	ldr	r2, [r7, #12]
 80106b2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80106b6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80106b8:	68fa      	ldr	r2, [r7, #12]
 80106ba:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80106be:	b292      	uxth	r2, r2
 80106c0:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	22ff      	movs	r2, #255	; 0xff
 80106c6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80106ca:	2300      	movs	r3, #0
}
 80106cc:	4618      	mov	r0, r3
 80106ce:	3710      	adds	r7, #16
 80106d0:	46bd      	mov	sp, r7
 80106d2:	bd80      	pop	{r7, pc}

080106d4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 80106d4:	b480      	push	{r7}
 80106d6:	b083      	sub	sp, #12
 80106d8:	af00      	add	r7, sp, #0
 80106da:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	2243      	movs	r2, #67	; 0x43
 80106e0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80106e2:	4b03      	ldr	r3, [pc, #12]	; (80106f0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80106e4:	4618      	mov	r0, r3
 80106e6:	370c      	adds	r7, #12
 80106e8:	46bd      	mov	sp, r7
 80106ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ee:	4770      	bx	lr
 80106f0:	20000d20 	.word	0x20000d20

080106f4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 80106f4:	b480      	push	{r7}
 80106f6:	b083      	sub	sp, #12
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	2243      	movs	r2, #67	; 0x43
 8010700:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8010702:	4b03      	ldr	r3, [pc, #12]	; (8010710 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8010704:	4618      	mov	r0, r3
 8010706:	370c      	adds	r7, #12
 8010708:	46bd      	mov	sp, r7
 801070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801070e:	4770      	bx	lr
 8010710:	20000cdc 	.word	0x20000cdc

08010714 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8010714:	b480      	push	{r7}
 8010716:	b083      	sub	sp, #12
 8010718:	af00      	add	r7, sp, #0
 801071a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	2243      	movs	r2, #67	; 0x43
 8010720:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8010722:	4b03      	ldr	r3, [pc, #12]	; (8010730 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8010724:	4618      	mov	r0, r3
 8010726:	370c      	adds	r7, #12
 8010728:	46bd      	mov	sp, r7
 801072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801072e:	4770      	bx	lr
 8010730:	20000d64 	.word	0x20000d64

08010734 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8010734:	b480      	push	{r7}
 8010736:	b083      	sub	sp, #12
 8010738:	af00      	add	r7, sp, #0
 801073a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	220a      	movs	r2, #10
 8010740:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8010742:	4b03      	ldr	r3, [pc, #12]	; (8010750 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010744:	4618      	mov	r0, r3
 8010746:	370c      	adds	r7, #12
 8010748:	46bd      	mov	sp, r7
 801074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801074e:	4770      	bx	lr
 8010750:	20000c98 	.word	0x20000c98

08010754 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8010754:	b480      	push	{r7}
 8010756:	b085      	sub	sp, #20
 8010758:	af00      	add	r7, sp, #0
 801075a:	6078      	str	r0, [r7, #4]
 801075c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 801075e:	2302      	movs	r3, #2
 8010760:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8010762:	683b      	ldr	r3, [r7, #0]
 8010764:	2b00      	cmp	r3, #0
 8010766:	d005      	beq.n	8010774 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	683a      	ldr	r2, [r7, #0]
 801076c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8010770:	2300      	movs	r3, #0
 8010772:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8010774:	7bfb      	ldrb	r3, [r7, #15]
}
 8010776:	4618      	mov	r0, r3
 8010778:	3714      	adds	r7, #20
 801077a:	46bd      	mov	sp, r7
 801077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010780:	4770      	bx	lr

08010782 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8010782:	b480      	push	{r7}
 8010784:	b087      	sub	sp, #28
 8010786:	af00      	add	r7, sp, #0
 8010788:	60f8      	str	r0, [r7, #12]
 801078a:	60b9      	str	r1, [r7, #8]
 801078c:	4613      	mov	r3, r2
 801078e:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010796:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8010798:	697b      	ldr	r3, [r7, #20]
 801079a:	68ba      	ldr	r2, [r7, #8]
 801079c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80107a0:	88fa      	ldrh	r2, [r7, #6]
 80107a2:	697b      	ldr	r3, [r7, #20]
 80107a4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80107a8:	2300      	movs	r3, #0
}
 80107aa:	4618      	mov	r0, r3
 80107ac:	371c      	adds	r7, #28
 80107ae:	46bd      	mov	sp, r7
 80107b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b4:	4770      	bx	lr

080107b6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 80107b6:	b480      	push	{r7}
 80107b8:	b085      	sub	sp, #20
 80107ba:	af00      	add	r7, sp, #0
 80107bc:	6078      	str	r0, [r7, #4]
 80107be:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80107c6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	683a      	ldr	r2, [r7, #0]
 80107cc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80107d0:	2300      	movs	r3, #0
}
 80107d2:	4618      	mov	r0, r3
 80107d4:	3714      	adds	r7, #20
 80107d6:	46bd      	mov	sp, r7
 80107d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107dc:	4770      	bx	lr

080107de <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80107de:	b580      	push	{r7, lr}
 80107e0:	b084      	sub	sp, #16
 80107e2:	af00      	add	r7, sp, #0
 80107e4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80107ec:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d01c      	beq.n	8010832 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d115      	bne.n	801082e <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	2201      	movs	r2, #1
 8010806:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8010820:	b29b      	uxth	r3, r3
 8010822:	2181      	movs	r1, #129	; 0x81
 8010824:	6878      	ldr	r0, [r7, #4]
 8010826:	f004 fee4 	bl	80155f2 <USBD_LL_Transmit>

      return USBD_OK;
 801082a:	2300      	movs	r3, #0
 801082c:	e002      	b.n	8010834 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 801082e:	2301      	movs	r3, #1
 8010830:	e000      	b.n	8010834 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8010832:	2302      	movs	r3, #2
  }
}
 8010834:	4618      	mov	r0, r3
 8010836:	3710      	adds	r7, #16
 8010838:	46bd      	mov	sp, r7
 801083a:	bd80      	pop	{r7, pc}

0801083c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801083c:	b580      	push	{r7, lr}
 801083e:	b084      	sub	sp, #16
 8010840:	af00      	add	r7, sp, #0
 8010842:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 801084a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010852:	2b00      	cmp	r3, #0
 8010854:	d017      	beq.n	8010886 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	7c1b      	ldrb	r3, [r3, #16]
 801085a:	2b00      	cmp	r3, #0
 801085c:	d109      	bne.n	8010872 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010864:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010868:	2101      	movs	r1, #1
 801086a:	6878      	ldr	r0, [r7, #4]
 801086c:	f004 fee4 	bl	8015638 <USBD_LL_PrepareReceive>
 8010870:	e007      	b.n	8010882 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010878:	2340      	movs	r3, #64	; 0x40
 801087a:	2101      	movs	r1, #1
 801087c:	6878      	ldr	r0, [r7, #4]
 801087e:	f004 fedb 	bl	8015638 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8010882:	2300      	movs	r3, #0
 8010884:	e000      	b.n	8010888 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8010886:	2302      	movs	r3, #2
  }
}
 8010888:	4618      	mov	r0, r3
 801088a:	3710      	adds	r7, #16
 801088c:	46bd      	mov	sp, r7
 801088e:	bd80      	pop	{r7, pc}

08010890 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010890:	b580      	push	{r7, lr}
 8010892:	b084      	sub	sp, #16
 8010894:	af00      	add	r7, sp, #0
 8010896:	60f8      	str	r0, [r7, #12]
 8010898:	60b9      	str	r1, [r7, #8]
 801089a:	4613      	mov	r3, r2
 801089c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d101      	bne.n	80108a8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80108a4:	2302      	movs	r3, #2
 80108a6:	e01a      	b.n	80108de <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d003      	beq.n	80108ba <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	2200      	movs	r2, #0
 80108b6:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80108ba:	68bb      	ldr	r3, [r7, #8]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d003      	beq.n	80108c8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	68ba      	ldr	r2, [r7, #8]
 80108c4:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	2201      	movs	r2, #1
 80108cc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	79fa      	ldrb	r2, [r7, #7]
 80108d4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80108d6:	68f8      	ldr	r0, [r7, #12]
 80108d8:	f004 fd56 	bl	8015388 <USBD_LL_Init>

  return USBD_OK;
 80108dc:	2300      	movs	r3, #0
}
 80108de:	4618      	mov	r0, r3
 80108e0:	3710      	adds	r7, #16
 80108e2:	46bd      	mov	sp, r7
 80108e4:	bd80      	pop	{r7, pc}

080108e6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80108e6:	b480      	push	{r7}
 80108e8:	b085      	sub	sp, #20
 80108ea:	af00      	add	r7, sp, #0
 80108ec:	6078      	str	r0, [r7, #4]
 80108ee:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 80108f0:	2300      	movs	r3, #0
 80108f2:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 80108f4:	683b      	ldr	r3, [r7, #0]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d006      	beq.n	8010908 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	683a      	ldr	r2, [r7, #0]
 80108fe:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8010902:	2300      	movs	r3, #0
 8010904:	73fb      	strb	r3, [r7, #15]
 8010906:	e001      	b.n	801090c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8010908:	2302      	movs	r3, #2
 801090a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801090c:	7bfb      	ldrb	r3, [r7, #15]
}
 801090e:	4618      	mov	r0, r3
 8010910:	3714      	adds	r7, #20
 8010912:	46bd      	mov	sp, r7
 8010914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010918:	4770      	bx	lr

0801091a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 801091a:	b580      	push	{r7, lr}
 801091c:	b082      	sub	sp, #8
 801091e:	af00      	add	r7, sp, #0
 8010920:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8010922:	6878      	ldr	r0, [r7, #4]
 8010924:	f004 fd7c 	bl	8015420 <USBD_LL_Start>

  return USBD_OK;
 8010928:	2300      	movs	r3, #0
}
 801092a:	4618      	mov	r0, r3
 801092c:	3708      	adds	r7, #8
 801092e:	46bd      	mov	sp, r7
 8010930:	bd80      	pop	{r7, pc}

08010932 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8010932:	b480      	push	{r7}
 8010934:	b083      	sub	sp, #12
 8010936:	af00      	add	r7, sp, #0
 8010938:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801093a:	2300      	movs	r3, #0
}
 801093c:	4618      	mov	r0, r3
 801093e:	370c      	adds	r7, #12
 8010940:	46bd      	mov	sp, r7
 8010942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010946:	4770      	bx	lr

08010948 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8010948:	b580      	push	{r7, lr}
 801094a:	b084      	sub	sp, #16
 801094c:	af00      	add	r7, sp, #0
 801094e:	6078      	str	r0, [r7, #4]
 8010950:	460b      	mov	r3, r1
 8010952:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8010954:	2302      	movs	r3, #2
 8010956:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801095e:	2b00      	cmp	r3, #0
 8010960:	d00c      	beq.n	801097c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	78fa      	ldrb	r2, [r7, #3]
 801096c:	4611      	mov	r1, r2
 801096e:	6878      	ldr	r0, [r7, #4]
 8010970:	4798      	blx	r3
 8010972:	4603      	mov	r3, r0
 8010974:	2b00      	cmp	r3, #0
 8010976:	d101      	bne.n	801097c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8010978:	2300      	movs	r3, #0
 801097a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 801097c:	7bfb      	ldrb	r3, [r7, #15]
}
 801097e:	4618      	mov	r0, r3
 8010980:	3710      	adds	r7, #16
 8010982:	46bd      	mov	sp, r7
 8010984:	bd80      	pop	{r7, pc}

08010986 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8010986:	b580      	push	{r7, lr}
 8010988:	b082      	sub	sp, #8
 801098a:	af00      	add	r7, sp, #0
 801098c:	6078      	str	r0, [r7, #4]
 801098e:	460b      	mov	r3, r1
 8010990:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010998:	685b      	ldr	r3, [r3, #4]
 801099a:	78fa      	ldrb	r2, [r7, #3]
 801099c:	4611      	mov	r1, r2
 801099e:	6878      	ldr	r0, [r7, #4]
 80109a0:	4798      	blx	r3
  return USBD_OK;
 80109a2:	2300      	movs	r3, #0
}
 80109a4:	4618      	mov	r0, r3
 80109a6:	3708      	adds	r7, #8
 80109a8:	46bd      	mov	sp, r7
 80109aa:	bd80      	pop	{r7, pc}

080109ac <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80109ac:	b580      	push	{r7, lr}
 80109ae:	b082      	sub	sp, #8
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	6078      	str	r0, [r7, #4]
 80109b4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80109bc:	6839      	ldr	r1, [r7, #0]
 80109be:	4618      	mov	r0, r3
 80109c0:	f000 fe94 	bl	80116ec <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	2201      	movs	r2, #1
 80109c8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 80109d2:	461a      	mov	r2, r3
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80109e0:	f003 031f 	and.w	r3, r3, #31
 80109e4:	2b01      	cmp	r3, #1
 80109e6:	d00c      	beq.n	8010a02 <USBD_LL_SetupStage+0x56>
 80109e8:	2b01      	cmp	r3, #1
 80109ea:	d302      	bcc.n	80109f2 <USBD_LL_SetupStage+0x46>
 80109ec:	2b02      	cmp	r3, #2
 80109ee:	d010      	beq.n	8010a12 <USBD_LL_SetupStage+0x66>
 80109f0:	e017      	b.n	8010a22 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80109f8:	4619      	mov	r1, r3
 80109fa:	6878      	ldr	r0, [r7, #4]
 80109fc:	f000 fa04 	bl	8010e08 <USBD_StdDevReq>
    break;
 8010a00:	e01a      	b.n	8010a38 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8010a08:	4619      	mov	r1, r3
 8010a0a:	6878      	ldr	r0, [r7, #4]
 8010a0c:	f000 fa66 	bl	8010edc <USBD_StdItfReq>
    break;
 8010a10:	e012      	b.n	8010a38 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8010a18:	4619      	mov	r1, r3
 8010a1a:	6878      	ldr	r0, [r7, #4]
 8010a1c:	f000 faa4 	bl	8010f68 <USBD_StdEPReq>
    break;
 8010a20:	e00a      	b.n	8010a38 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8010a28:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010a2c:	b2db      	uxtb	r3, r3
 8010a2e:	4619      	mov	r1, r3
 8010a30:	6878      	ldr	r0, [r7, #4]
 8010a32:	f004 fd55 	bl	80154e0 <USBD_LL_StallEP>
    break;
 8010a36:	bf00      	nop
  }

  return USBD_OK;
 8010a38:	2300      	movs	r3, #0
}
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	3708      	adds	r7, #8
 8010a3e:	46bd      	mov	sp, r7
 8010a40:	bd80      	pop	{r7, pc}

08010a42 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010a42:	b580      	push	{r7, lr}
 8010a44:	b086      	sub	sp, #24
 8010a46:	af00      	add	r7, sp, #0
 8010a48:	60f8      	str	r0, [r7, #12]
 8010a4a:	460b      	mov	r3, r1
 8010a4c:	607a      	str	r2, [r7, #4]
 8010a4e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8010a50:	7afb      	ldrb	r3, [r7, #11]
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d14b      	bne.n	8010aee <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010a5c:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8010a64:	2b03      	cmp	r3, #3
 8010a66:	d134      	bne.n	8010ad2 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8010a68:	697b      	ldr	r3, [r7, #20]
 8010a6a:	68da      	ldr	r2, [r3, #12]
 8010a6c:	697b      	ldr	r3, [r7, #20]
 8010a6e:	691b      	ldr	r3, [r3, #16]
 8010a70:	429a      	cmp	r2, r3
 8010a72:	d919      	bls.n	8010aa8 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8010a74:	697b      	ldr	r3, [r7, #20]
 8010a76:	68da      	ldr	r2, [r3, #12]
 8010a78:	697b      	ldr	r3, [r7, #20]
 8010a7a:	691b      	ldr	r3, [r3, #16]
 8010a7c:	1ad2      	subs	r2, r2, r3
 8010a7e:	697b      	ldr	r3, [r7, #20]
 8010a80:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8010a82:	697b      	ldr	r3, [r7, #20]
 8010a84:	68da      	ldr	r2, [r3, #12]
 8010a86:	697b      	ldr	r3, [r7, #20]
 8010a88:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8010a8a:	429a      	cmp	r2, r3
 8010a8c:	d203      	bcs.n	8010a96 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8010a8e:	697b      	ldr	r3, [r7, #20]
 8010a90:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8010a92:	b29b      	uxth	r3, r3
 8010a94:	e002      	b.n	8010a9c <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8010a96:	697b      	ldr	r3, [r7, #20]
 8010a98:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8010a9a:	b29b      	uxth	r3, r3
 8010a9c:	461a      	mov	r2, r3
 8010a9e:	6879      	ldr	r1, [r7, #4]
 8010aa0:	68f8      	ldr	r0, [r7, #12]
 8010aa2:	f000 ff17 	bl	80118d4 <USBD_CtlContinueRx>
 8010aa6:	e038      	b.n	8010b1a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010aae:	691b      	ldr	r3, [r3, #16]
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d00a      	beq.n	8010aca <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8010aba:	2b03      	cmp	r3, #3
 8010abc:	d105      	bne.n	8010aca <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010ac4:	691b      	ldr	r3, [r3, #16]
 8010ac6:	68f8      	ldr	r0, [r7, #12]
 8010ac8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8010aca:	68f8      	ldr	r0, [r7, #12]
 8010acc:	f000 ff14 	bl	80118f8 <USBD_CtlSendStatus>
 8010ad0:	e023      	b.n	8010b1a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8010ad8:	2b05      	cmp	r3, #5
 8010ada:	d11e      	bne.n	8010b1a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	2200      	movs	r2, #0
 8010ae0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8010ae4:	2100      	movs	r1, #0
 8010ae6:	68f8      	ldr	r0, [r7, #12]
 8010ae8:	f004 fcfa 	bl	80154e0 <USBD_LL_StallEP>
 8010aec:	e015      	b.n	8010b1a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010af4:	699b      	ldr	r3, [r3, #24]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d00d      	beq.n	8010b16 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8010b00:	2b03      	cmp	r3, #3
 8010b02:	d108      	bne.n	8010b16 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010b0a:	699b      	ldr	r3, [r3, #24]
 8010b0c:	7afa      	ldrb	r2, [r7, #11]
 8010b0e:	4611      	mov	r1, r2
 8010b10:	68f8      	ldr	r0, [r7, #12]
 8010b12:	4798      	blx	r3
 8010b14:	e001      	b.n	8010b1a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8010b16:	2302      	movs	r3, #2
 8010b18:	e000      	b.n	8010b1c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8010b1a:	2300      	movs	r3, #0
}
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	3718      	adds	r7, #24
 8010b20:	46bd      	mov	sp, r7
 8010b22:	bd80      	pop	{r7, pc}

08010b24 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8010b24:	b580      	push	{r7, lr}
 8010b26:	b086      	sub	sp, #24
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	60f8      	str	r0, [r7, #12]
 8010b2c:	460b      	mov	r3, r1
 8010b2e:	607a      	str	r2, [r7, #4]
 8010b30:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8010b32:	7afb      	ldrb	r3, [r7, #11]
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d17f      	bne.n	8010c38 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	3314      	adds	r3, #20
 8010b3c:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8010b44:	2b02      	cmp	r3, #2
 8010b46:	d15c      	bne.n	8010c02 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8010b48:	697b      	ldr	r3, [r7, #20]
 8010b4a:	68da      	ldr	r2, [r3, #12]
 8010b4c:	697b      	ldr	r3, [r7, #20]
 8010b4e:	691b      	ldr	r3, [r3, #16]
 8010b50:	429a      	cmp	r2, r3
 8010b52:	d915      	bls.n	8010b80 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8010b54:	697b      	ldr	r3, [r7, #20]
 8010b56:	68da      	ldr	r2, [r3, #12]
 8010b58:	697b      	ldr	r3, [r7, #20]
 8010b5a:	691b      	ldr	r3, [r3, #16]
 8010b5c:	1ad2      	subs	r2, r2, r3
 8010b5e:	697b      	ldr	r3, [r7, #20]
 8010b60:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8010b62:	697b      	ldr	r3, [r7, #20]
 8010b64:	68db      	ldr	r3, [r3, #12]
 8010b66:	b29b      	uxth	r3, r3
 8010b68:	461a      	mov	r2, r3
 8010b6a:	6879      	ldr	r1, [r7, #4]
 8010b6c:	68f8      	ldr	r0, [r7, #12]
 8010b6e:	f000 fe81 	bl	8011874 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8010b72:	2300      	movs	r3, #0
 8010b74:	2200      	movs	r2, #0
 8010b76:	2100      	movs	r1, #0
 8010b78:	68f8      	ldr	r0, [r7, #12]
 8010b7a:	f004 fd5d 	bl	8015638 <USBD_LL_PrepareReceive>
 8010b7e:	e04e      	b.n	8010c1e <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8010b80:	697b      	ldr	r3, [r7, #20]
 8010b82:	689b      	ldr	r3, [r3, #8]
 8010b84:	697a      	ldr	r2, [r7, #20]
 8010b86:	6912      	ldr	r2, [r2, #16]
 8010b88:	fbb3 f1f2 	udiv	r1, r3, r2
 8010b8c:	fb02 f201 	mul.w	r2, r2, r1
 8010b90:	1a9b      	subs	r3, r3, r2
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d11c      	bne.n	8010bd0 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8010b96:	697b      	ldr	r3, [r7, #20]
 8010b98:	689a      	ldr	r2, [r3, #8]
 8010b9a:	697b      	ldr	r3, [r7, #20]
 8010b9c:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8010b9e:	429a      	cmp	r2, r3
 8010ba0:	d316      	bcc.n	8010bd0 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8010ba2:	697b      	ldr	r3, [r7, #20]
 8010ba4:	689a      	ldr	r2, [r3, #8]
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8010bac:	429a      	cmp	r2, r3
 8010bae:	d20f      	bcs.n	8010bd0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8010bb0:	2200      	movs	r2, #0
 8010bb2:	2100      	movs	r1, #0
 8010bb4:	68f8      	ldr	r0, [r7, #12]
 8010bb6:	f000 fe5d 	bl	8011874 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	2200      	movs	r2, #0
 8010bbe:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8010bc2:	2300      	movs	r3, #0
 8010bc4:	2200      	movs	r2, #0
 8010bc6:	2100      	movs	r1, #0
 8010bc8:	68f8      	ldr	r0, [r7, #12]
 8010bca:	f004 fd35 	bl	8015638 <USBD_LL_PrepareReceive>
 8010bce:	e026      	b.n	8010c1e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010bd6:	68db      	ldr	r3, [r3, #12]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d00a      	beq.n	8010bf2 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8010be2:	2b03      	cmp	r3, #3
 8010be4:	d105      	bne.n	8010bf2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010bec:	68db      	ldr	r3, [r3, #12]
 8010bee:	68f8      	ldr	r0, [r7, #12]
 8010bf0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8010bf2:	2180      	movs	r1, #128	; 0x80
 8010bf4:	68f8      	ldr	r0, [r7, #12]
 8010bf6:	f004 fc73 	bl	80154e0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8010bfa:	68f8      	ldr	r0, [r7, #12]
 8010bfc:	f000 fe8f 	bl	801191e <USBD_CtlReceiveStatus>
 8010c00:	e00d      	b.n	8010c1e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8010c08:	2b04      	cmp	r3, #4
 8010c0a:	d004      	beq.n	8010c16 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d103      	bne.n	8010c1e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8010c16:	2180      	movs	r1, #128	; 0x80
 8010c18:	68f8      	ldr	r0, [r7, #12]
 8010c1a:	f004 fc61 	bl	80154e0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8010c24:	2b01      	cmp	r3, #1
 8010c26:	d11d      	bne.n	8010c64 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8010c28:	68f8      	ldr	r0, [r7, #12]
 8010c2a:	f7ff fe82 	bl	8010932 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	2200      	movs	r2, #0
 8010c32:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8010c36:	e015      	b.n	8010c64 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010c3e:	695b      	ldr	r3, [r3, #20]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d00d      	beq.n	8010c60 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8010c4a:	2b03      	cmp	r3, #3
 8010c4c:	d108      	bne.n	8010c60 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010c54:	695b      	ldr	r3, [r3, #20]
 8010c56:	7afa      	ldrb	r2, [r7, #11]
 8010c58:	4611      	mov	r1, r2
 8010c5a:	68f8      	ldr	r0, [r7, #12]
 8010c5c:	4798      	blx	r3
 8010c5e:	e001      	b.n	8010c64 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8010c60:	2302      	movs	r3, #2
 8010c62:	e000      	b.n	8010c66 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8010c64:	2300      	movs	r3, #0
}
 8010c66:	4618      	mov	r0, r3
 8010c68:	3718      	adds	r7, #24
 8010c6a:	46bd      	mov	sp, r7
 8010c6c:	bd80      	pop	{r7, pc}

08010c6e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8010c6e:	b580      	push	{r7, lr}
 8010c70:	b082      	sub	sp, #8
 8010c72:	af00      	add	r7, sp, #0
 8010c74:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010c76:	2340      	movs	r3, #64	; 0x40
 8010c78:	2200      	movs	r2, #0
 8010c7a:	2100      	movs	r1, #0
 8010c7c:	6878      	ldr	r0, [r7, #4]
 8010c7e:	f004 fbea 	bl	8015456 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	2201      	movs	r2, #1
 8010c86:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	2240      	movs	r2, #64	; 0x40
 8010c8e:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010c92:	2340      	movs	r3, #64	; 0x40
 8010c94:	2200      	movs	r2, #0
 8010c96:	2180      	movs	r1, #128	; 0x80
 8010c98:	6878      	ldr	r0, [r7, #4]
 8010c9a:	f004 fbdc 	bl	8015456 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	2201      	movs	r2, #1
 8010ca2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	2240      	movs	r2, #64	; 0x40
 8010ca8:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	2201      	movs	r2, #1
 8010cae:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	2200      	movs	r2, #0
 8010cb6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	2200      	movs	r2, #0
 8010cbe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	2200      	movs	r2, #0
 8010cc4:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d009      	beq.n	8010ce6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010cd8:	685b      	ldr	r3, [r3, #4]
 8010cda:	687a      	ldr	r2, [r7, #4]
 8010cdc:	6852      	ldr	r2, [r2, #4]
 8010cde:	b2d2      	uxtb	r2, r2
 8010ce0:	4611      	mov	r1, r2
 8010ce2:	6878      	ldr	r0, [r7, #4]
 8010ce4:	4798      	blx	r3
  }

  return USBD_OK;
 8010ce6:	2300      	movs	r3, #0
}
 8010ce8:	4618      	mov	r0, r3
 8010cea:	3708      	adds	r7, #8
 8010cec:	46bd      	mov	sp, r7
 8010cee:	bd80      	pop	{r7, pc}

08010cf0 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8010cf0:	b480      	push	{r7}
 8010cf2:	b083      	sub	sp, #12
 8010cf4:	af00      	add	r7, sp, #0
 8010cf6:	6078      	str	r0, [r7, #4]
 8010cf8:	460b      	mov	r3, r1
 8010cfa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	78fa      	ldrb	r2, [r7, #3]
 8010d00:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8010d02:	2300      	movs	r3, #0
}
 8010d04:	4618      	mov	r0, r3
 8010d06:	370c      	adds	r7, #12
 8010d08:	46bd      	mov	sp, r7
 8010d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d0e:	4770      	bx	lr

08010d10 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8010d10:	b480      	push	{r7}
 8010d12:	b083      	sub	sp, #12
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	2204      	movs	r2, #4
 8010d28:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8010d2c:	2300      	movs	r3, #0
}
 8010d2e:	4618      	mov	r0, r3
 8010d30:	370c      	adds	r7, #12
 8010d32:	46bd      	mov	sp, r7
 8010d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d38:	4770      	bx	lr

08010d3a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8010d3a:	b480      	push	{r7}
 8010d3c:	b083      	sub	sp, #12
 8010d3e:	af00      	add	r7, sp, #0
 8010d40:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8010d4e:	2300      	movs	r3, #0
}
 8010d50:	4618      	mov	r0, r3
 8010d52:	370c      	adds	r7, #12
 8010d54:	46bd      	mov	sp, r7
 8010d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d5a:	4770      	bx	lr

08010d5c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8010d5c:	b580      	push	{r7, lr}
 8010d5e:	b082      	sub	sp, #8
 8010d60:	af00      	add	r7, sp, #0
 8010d62:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010d6a:	2b03      	cmp	r3, #3
 8010d6c:	d10b      	bne.n	8010d86 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010d74:	69db      	ldr	r3, [r3, #28]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d005      	beq.n	8010d86 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010d80:	69db      	ldr	r3, [r3, #28]
 8010d82:	6878      	ldr	r0, [r7, #4]
 8010d84:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8010d86:	2300      	movs	r3, #0
}
 8010d88:	4618      	mov	r0, r3
 8010d8a:	3708      	adds	r7, #8
 8010d8c:	46bd      	mov	sp, r7
 8010d8e:	bd80      	pop	{r7, pc}

08010d90 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8010d90:	b480      	push	{r7}
 8010d92:	b083      	sub	sp, #12
 8010d94:	af00      	add	r7, sp, #0
 8010d96:	6078      	str	r0, [r7, #4]
 8010d98:	460b      	mov	r3, r1
 8010d9a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8010d9c:	2300      	movs	r3, #0
}
 8010d9e:	4618      	mov	r0, r3
 8010da0:	370c      	adds	r7, #12
 8010da2:	46bd      	mov	sp, r7
 8010da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da8:	4770      	bx	lr

08010daa <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8010daa:	b480      	push	{r7}
 8010dac:	b083      	sub	sp, #12
 8010dae:	af00      	add	r7, sp, #0
 8010db0:	6078      	str	r0, [r7, #4]
 8010db2:	460b      	mov	r3, r1
 8010db4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8010db6:	2300      	movs	r3, #0
}
 8010db8:	4618      	mov	r0, r3
 8010dba:	370c      	adds	r7, #12
 8010dbc:	46bd      	mov	sp, r7
 8010dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc2:	4770      	bx	lr

08010dc4 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8010dc4:	b480      	push	{r7}
 8010dc6:	b083      	sub	sp, #12
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010dcc:	2300      	movs	r3, #0
}
 8010dce:	4618      	mov	r0, r3
 8010dd0:	370c      	adds	r7, #12
 8010dd2:	46bd      	mov	sp, r7
 8010dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd8:	4770      	bx	lr

08010dda <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8010dda:	b580      	push	{r7, lr}
 8010ddc:	b082      	sub	sp, #8
 8010dde:	af00      	add	r7, sp, #0
 8010de0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	2201      	movs	r2, #1
 8010de6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010df0:	685b      	ldr	r3, [r3, #4]
 8010df2:	687a      	ldr	r2, [r7, #4]
 8010df4:	6852      	ldr	r2, [r2, #4]
 8010df6:	b2d2      	uxtb	r2, r2
 8010df8:	4611      	mov	r1, r2
 8010dfa:	6878      	ldr	r0, [r7, #4]
 8010dfc:	4798      	blx	r3

  return USBD_OK;
 8010dfe:	2300      	movs	r3, #0
}
 8010e00:	4618      	mov	r0, r3
 8010e02:	3708      	adds	r7, #8
 8010e04:	46bd      	mov	sp, r7
 8010e06:	bd80      	pop	{r7, pc}

08010e08 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	b084      	sub	sp, #16
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	6078      	str	r0, [r7, #4]
 8010e10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010e12:	2300      	movs	r3, #0
 8010e14:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010e16:	683b      	ldr	r3, [r7, #0]
 8010e18:	781b      	ldrb	r3, [r3, #0]
 8010e1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010e1e:	2b20      	cmp	r3, #32
 8010e20:	d004      	beq.n	8010e2c <USBD_StdDevReq+0x24>
 8010e22:	2b40      	cmp	r3, #64	; 0x40
 8010e24:	d002      	beq.n	8010e2c <USBD_StdDevReq+0x24>
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d008      	beq.n	8010e3c <USBD_StdDevReq+0x34>
 8010e2a:	e04c      	b.n	8010ec6 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010e32:	689b      	ldr	r3, [r3, #8]
 8010e34:	6839      	ldr	r1, [r7, #0]
 8010e36:	6878      	ldr	r0, [r7, #4]
 8010e38:	4798      	blx	r3
    break;
 8010e3a:	e049      	b.n	8010ed0 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8010e3c:	683b      	ldr	r3, [r7, #0]
 8010e3e:	785b      	ldrb	r3, [r3, #1]
 8010e40:	2b09      	cmp	r3, #9
 8010e42:	d83a      	bhi.n	8010eba <USBD_StdDevReq+0xb2>
 8010e44:	a201      	add	r2, pc, #4	; (adr r2, 8010e4c <USBD_StdDevReq+0x44>)
 8010e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e4a:	bf00      	nop
 8010e4c:	08010e9d 	.word	0x08010e9d
 8010e50:	08010eb1 	.word	0x08010eb1
 8010e54:	08010ebb 	.word	0x08010ebb
 8010e58:	08010ea7 	.word	0x08010ea7
 8010e5c:	08010ebb 	.word	0x08010ebb
 8010e60:	08010e7f 	.word	0x08010e7f
 8010e64:	08010e75 	.word	0x08010e75
 8010e68:	08010ebb 	.word	0x08010ebb
 8010e6c:	08010e93 	.word	0x08010e93
 8010e70:	08010e89 	.word	0x08010e89
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8010e74:	6839      	ldr	r1, [r7, #0]
 8010e76:	6878      	ldr	r0, [r7, #4]
 8010e78:	f000 f9d2 	bl	8011220 <USBD_GetDescriptor>
      break;
 8010e7c:	e022      	b.n	8010ec4 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8010e7e:	6839      	ldr	r1, [r7, #0]
 8010e80:	6878      	ldr	r0, [r7, #4]
 8010e82:	f000 fac7 	bl	8011414 <USBD_SetAddress>
      break;
 8010e86:	e01d      	b.n	8010ec4 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8010e88:	6839      	ldr	r1, [r7, #0]
 8010e8a:	6878      	ldr	r0, [r7, #4]
 8010e8c:	f000 fb04 	bl	8011498 <USBD_SetConfig>
      break;
 8010e90:	e018      	b.n	8010ec4 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8010e92:	6839      	ldr	r1, [r7, #0]
 8010e94:	6878      	ldr	r0, [r7, #4]
 8010e96:	f000 fb8d 	bl	80115b4 <USBD_GetConfig>
      break;
 8010e9a:	e013      	b.n	8010ec4 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8010e9c:	6839      	ldr	r1, [r7, #0]
 8010e9e:	6878      	ldr	r0, [r7, #4]
 8010ea0:	f000 fbbc 	bl	801161c <USBD_GetStatus>
      break;
 8010ea4:	e00e      	b.n	8010ec4 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8010ea6:	6839      	ldr	r1, [r7, #0]
 8010ea8:	6878      	ldr	r0, [r7, #4]
 8010eaa:	f000 fbea 	bl	8011682 <USBD_SetFeature>
      break;
 8010eae:	e009      	b.n	8010ec4 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8010eb0:	6839      	ldr	r1, [r7, #0]
 8010eb2:	6878      	ldr	r0, [r7, #4]
 8010eb4:	f000 fbf9 	bl	80116aa <USBD_ClrFeature>
      break;
 8010eb8:	e004      	b.n	8010ec4 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8010eba:	6839      	ldr	r1, [r7, #0]
 8010ebc:	6878      	ldr	r0, [r7, #4]
 8010ebe:	f000 fc52 	bl	8011766 <USBD_CtlError>
      break;
 8010ec2:	bf00      	nop
    }
    break;
 8010ec4:	e004      	b.n	8010ed0 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8010ec6:	6839      	ldr	r1, [r7, #0]
 8010ec8:	6878      	ldr	r0, [r7, #4]
 8010eca:	f000 fc4c 	bl	8011766 <USBD_CtlError>
    break;
 8010ece:	bf00      	nop
  }

  return ret;
 8010ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	3710      	adds	r7, #16
 8010ed6:	46bd      	mov	sp, r7
 8010ed8:	bd80      	pop	{r7, pc}
 8010eda:	bf00      	nop

08010edc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8010edc:	b580      	push	{r7, lr}
 8010ede:	b084      	sub	sp, #16
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	6078      	str	r0, [r7, #4]
 8010ee4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010eea:	683b      	ldr	r3, [r7, #0]
 8010eec:	781b      	ldrb	r3, [r3, #0]
 8010eee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010ef2:	2b20      	cmp	r3, #32
 8010ef4:	d003      	beq.n	8010efe <USBD_StdItfReq+0x22>
 8010ef6:	2b40      	cmp	r3, #64	; 0x40
 8010ef8:	d001      	beq.n	8010efe <USBD_StdItfReq+0x22>
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d12a      	bne.n	8010f54 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010f04:	3b01      	subs	r3, #1
 8010f06:	2b02      	cmp	r3, #2
 8010f08:	d81d      	bhi.n	8010f46 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010f0a:	683b      	ldr	r3, [r7, #0]
 8010f0c:	889b      	ldrh	r3, [r3, #4]
 8010f0e:	b2db      	uxtb	r3, r3
 8010f10:	2b01      	cmp	r3, #1
 8010f12:	d813      	bhi.n	8010f3c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010f1a:	689b      	ldr	r3, [r3, #8]
 8010f1c:	6839      	ldr	r1, [r7, #0]
 8010f1e:	6878      	ldr	r0, [r7, #4]
 8010f20:	4798      	blx	r3
 8010f22:	4603      	mov	r3, r0
 8010f24:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8010f26:	683b      	ldr	r3, [r7, #0]
 8010f28:	88db      	ldrh	r3, [r3, #6]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d110      	bne.n	8010f50 <USBD_StdItfReq+0x74>
 8010f2e:	7bfb      	ldrb	r3, [r7, #15]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d10d      	bne.n	8010f50 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8010f34:	6878      	ldr	r0, [r7, #4]
 8010f36:	f000 fcdf 	bl	80118f8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8010f3a:	e009      	b.n	8010f50 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8010f3c:	6839      	ldr	r1, [r7, #0]
 8010f3e:	6878      	ldr	r0, [r7, #4]
 8010f40:	f000 fc11 	bl	8011766 <USBD_CtlError>
      break;
 8010f44:	e004      	b.n	8010f50 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8010f46:	6839      	ldr	r1, [r7, #0]
 8010f48:	6878      	ldr	r0, [r7, #4]
 8010f4a:	f000 fc0c 	bl	8011766 <USBD_CtlError>
      break;
 8010f4e:	e000      	b.n	8010f52 <USBD_StdItfReq+0x76>
      break;
 8010f50:	bf00      	nop
    }
    break;
 8010f52:	e004      	b.n	8010f5e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8010f54:	6839      	ldr	r1, [r7, #0]
 8010f56:	6878      	ldr	r0, [r7, #4]
 8010f58:	f000 fc05 	bl	8011766 <USBD_CtlError>
    break;
 8010f5c:	bf00      	nop
  }

  return USBD_OK;
 8010f5e:	2300      	movs	r3, #0
}
 8010f60:	4618      	mov	r0, r3
 8010f62:	3710      	adds	r7, #16
 8010f64:	46bd      	mov	sp, r7
 8010f66:	bd80      	pop	{r7, pc}

08010f68 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8010f68:	b580      	push	{r7, lr}
 8010f6a:	b084      	sub	sp, #16
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	6078      	str	r0, [r7, #4]
 8010f70:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8010f72:	2300      	movs	r3, #0
 8010f74:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8010f76:	683b      	ldr	r3, [r7, #0]
 8010f78:	889b      	ldrh	r3, [r3, #4]
 8010f7a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010f7c:	683b      	ldr	r3, [r7, #0]
 8010f7e:	781b      	ldrb	r3, [r3, #0]
 8010f80:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010f84:	2b20      	cmp	r3, #32
 8010f86:	d004      	beq.n	8010f92 <USBD_StdEPReq+0x2a>
 8010f88:	2b40      	cmp	r3, #64	; 0x40
 8010f8a:	d002      	beq.n	8010f92 <USBD_StdEPReq+0x2a>
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d008      	beq.n	8010fa2 <USBD_StdEPReq+0x3a>
 8010f90:	e13b      	b.n	801120a <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010f98:	689b      	ldr	r3, [r3, #8]
 8010f9a:	6839      	ldr	r1, [r7, #0]
 8010f9c:	6878      	ldr	r0, [r7, #4]
 8010f9e:	4798      	blx	r3
    break;
 8010fa0:	e138      	b.n	8011214 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8010fa2:	683b      	ldr	r3, [r7, #0]
 8010fa4:	781b      	ldrb	r3, [r3, #0]
 8010fa6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010faa:	2b20      	cmp	r3, #32
 8010fac:	d10a      	bne.n	8010fc4 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010fb4:	689b      	ldr	r3, [r3, #8]
 8010fb6:	6839      	ldr	r1, [r7, #0]
 8010fb8:	6878      	ldr	r0, [r7, #4]
 8010fba:	4798      	blx	r3
 8010fbc:	4603      	mov	r3, r0
 8010fbe:	73fb      	strb	r3, [r7, #15]

      return ret;
 8010fc0:	7bfb      	ldrb	r3, [r7, #15]
 8010fc2:	e128      	b.n	8011216 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8010fc4:	683b      	ldr	r3, [r7, #0]
 8010fc6:	785b      	ldrb	r3, [r3, #1]
 8010fc8:	2b01      	cmp	r3, #1
 8010fca:	d03e      	beq.n	801104a <USBD_StdEPReq+0xe2>
 8010fcc:	2b03      	cmp	r3, #3
 8010fce:	d002      	beq.n	8010fd6 <USBD_StdEPReq+0x6e>
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d070      	beq.n	80110b6 <USBD_StdEPReq+0x14e>
 8010fd4:	e113      	b.n	80111fe <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010fdc:	2b02      	cmp	r3, #2
 8010fde:	d002      	beq.n	8010fe6 <USBD_StdEPReq+0x7e>
 8010fe0:	2b03      	cmp	r3, #3
 8010fe2:	d015      	beq.n	8011010 <USBD_StdEPReq+0xa8>
 8010fe4:	e02b      	b.n	801103e <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010fe6:	7bbb      	ldrb	r3, [r7, #14]
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d00c      	beq.n	8011006 <USBD_StdEPReq+0x9e>
 8010fec:	7bbb      	ldrb	r3, [r7, #14]
 8010fee:	2b80      	cmp	r3, #128	; 0x80
 8010ff0:	d009      	beq.n	8011006 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8010ff2:	7bbb      	ldrb	r3, [r7, #14]
 8010ff4:	4619      	mov	r1, r3
 8010ff6:	6878      	ldr	r0, [r7, #4]
 8010ff8:	f004 fa72 	bl	80154e0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8010ffc:	2180      	movs	r1, #128	; 0x80
 8010ffe:	6878      	ldr	r0, [r7, #4]
 8011000:	f004 fa6e 	bl	80154e0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8011004:	e020      	b.n	8011048 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 8011006:	6839      	ldr	r1, [r7, #0]
 8011008:	6878      	ldr	r0, [r7, #4]
 801100a:	f000 fbac 	bl	8011766 <USBD_CtlError>
        break;
 801100e:	e01b      	b.n	8011048 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8011010:	683b      	ldr	r3, [r7, #0]
 8011012:	885b      	ldrh	r3, [r3, #2]
 8011014:	2b00      	cmp	r3, #0
 8011016:	d10e      	bne.n	8011036 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011018:	7bbb      	ldrb	r3, [r7, #14]
 801101a:	2b00      	cmp	r3, #0
 801101c:	d00b      	beq.n	8011036 <USBD_StdEPReq+0xce>
 801101e:	7bbb      	ldrb	r3, [r7, #14]
 8011020:	2b80      	cmp	r3, #128	; 0x80
 8011022:	d008      	beq.n	8011036 <USBD_StdEPReq+0xce>
 8011024:	683b      	ldr	r3, [r7, #0]
 8011026:	88db      	ldrh	r3, [r3, #6]
 8011028:	2b00      	cmp	r3, #0
 801102a:	d104      	bne.n	8011036 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 801102c:	7bbb      	ldrb	r3, [r7, #14]
 801102e:	4619      	mov	r1, r3
 8011030:	6878      	ldr	r0, [r7, #4]
 8011032:	f004 fa55 	bl	80154e0 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8011036:	6878      	ldr	r0, [r7, #4]
 8011038:	f000 fc5e 	bl	80118f8 <USBD_CtlSendStatus>

        break;
 801103c:	e004      	b.n	8011048 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 801103e:	6839      	ldr	r1, [r7, #0]
 8011040:	6878      	ldr	r0, [r7, #4]
 8011042:	f000 fb90 	bl	8011766 <USBD_CtlError>
        break;
 8011046:	bf00      	nop
      }
      break;
 8011048:	e0de      	b.n	8011208 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8011050:	2b02      	cmp	r3, #2
 8011052:	d002      	beq.n	801105a <USBD_StdEPReq+0xf2>
 8011054:	2b03      	cmp	r3, #3
 8011056:	d015      	beq.n	8011084 <USBD_StdEPReq+0x11c>
 8011058:	e026      	b.n	80110a8 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801105a:	7bbb      	ldrb	r3, [r7, #14]
 801105c:	2b00      	cmp	r3, #0
 801105e:	d00c      	beq.n	801107a <USBD_StdEPReq+0x112>
 8011060:	7bbb      	ldrb	r3, [r7, #14]
 8011062:	2b80      	cmp	r3, #128	; 0x80
 8011064:	d009      	beq.n	801107a <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8011066:	7bbb      	ldrb	r3, [r7, #14]
 8011068:	4619      	mov	r1, r3
 801106a:	6878      	ldr	r0, [r7, #4]
 801106c:	f004 fa38 	bl	80154e0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8011070:	2180      	movs	r1, #128	; 0x80
 8011072:	6878      	ldr	r0, [r7, #4]
 8011074:	f004 fa34 	bl	80154e0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8011078:	e01c      	b.n	80110b4 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 801107a:	6839      	ldr	r1, [r7, #0]
 801107c:	6878      	ldr	r0, [r7, #4]
 801107e:	f000 fb72 	bl	8011766 <USBD_CtlError>
        break;
 8011082:	e017      	b.n	80110b4 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8011084:	683b      	ldr	r3, [r7, #0]
 8011086:	885b      	ldrh	r3, [r3, #2]
 8011088:	2b00      	cmp	r3, #0
 801108a:	d112      	bne.n	80110b2 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 801108c:	7bbb      	ldrb	r3, [r7, #14]
 801108e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011092:	2b00      	cmp	r3, #0
 8011094:	d004      	beq.n	80110a0 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8011096:	7bbb      	ldrb	r3, [r7, #14]
 8011098:	4619      	mov	r1, r3
 801109a:	6878      	ldr	r0, [r7, #4]
 801109c:	f004 fa3f 	bl	801551e <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 80110a0:	6878      	ldr	r0, [r7, #4]
 80110a2:	f000 fc29 	bl	80118f8 <USBD_CtlSendStatus>
        }
        break;
 80110a6:	e004      	b.n	80110b2 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 80110a8:	6839      	ldr	r1, [r7, #0]
 80110aa:	6878      	ldr	r0, [r7, #4]
 80110ac:	f000 fb5b 	bl	8011766 <USBD_CtlError>
        break;
 80110b0:	e000      	b.n	80110b4 <USBD_StdEPReq+0x14c>
        break;
 80110b2:	bf00      	nop
      }
      break;
 80110b4:	e0a8      	b.n	8011208 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80110bc:	2b02      	cmp	r3, #2
 80110be:	d002      	beq.n	80110c6 <USBD_StdEPReq+0x15e>
 80110c0:	2b03      	cmp	r3, #3
 80110c2:	d031      	beq.n	8011128 <USBD_StdEPReq+0x1c0>
 80110c4:	e095      	b.n	80111f2 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80110c6:	7bbb      	ldrb	r3, [r7, #14]
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d007      	beq.n	80110dc <USBD_StdEPReq+0x174>
 80110cc:	7bbb      	ldrb	r3, [r7, #14]
 80110ce:	2b80      	cmp	r3, #128	; 0x80
 80110d0:	d004      	beq.n	80110dc <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 80110d2:	6839      	ldr	r1, [r7, #0]
 80110d4:	6878      	ldr	r0, [r7, #4]
 80110d6:	f000 fb46 	bl	8011766 <USBD_CtlError>
          break;
 80110da:	e08f      	b.n	80111fc <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80110dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	da0b      	bge.n	80110fc <USBD_StdEPReq+0x194>
 80110e4:	7bbb      	ldrb	r3, [r7, #14]
 80110e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80110ea:	4613      	mov	r3, r2
 80110ec:	009b      	lsls	r3, r3, #2
 80110ee:	4413      	add	r3, r2
 80110f0:	009b      	lsls	r3, r3, #2
 80110f2:	3310      	adds	r3, #16
 80110f4:	687a      	ldr	r2, [r7, #4]
 80110f6:	4413      	add	r3, r2
 80110f8:	3304      	adds	r3, #4
 80110fa:	e00a      	b.n	8011112 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 80110fc:	7bbb      	ldrb	r3, [r7, #14]
 80110fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8011102:	4613      	mov	r3, r2
 8011104:	009b      	lsls	r3, r3, #2
 8011106:	4413      	add	r3, r2
 8011108:	009b      	lsls	r3, r3, #2
 801110a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 801110e:	687a      	ldr	r2, [r7, #4]
 8011110:	4413      	add	r3, r2
 8011112:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8011114:	68bb      	ldr	r3, [r7, #8]
 8011116:	2200      	movs	r2, #0
 8011118:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 801111a:	68bb      	ldr	r3, [r7, #8]
 801111c:	2202      	movs	r2, #2
 801111e:	4619      	mov	r1, r3
 8011120:	6878      	ldr	r0, [r7, #4]
 8011122:	f000 fb8b 	bl	801183c <USBD_CtlSendData>
          break;
 8011126:	e069      	b.n	80111fc <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8011128:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801112c:	2b00      	cmp	r3, #0
 801112e:	da11      	bge.n	8011154 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011130:	7bbb      	ldrb	r3, [r7, #14]
 8011132:	f003 020f 	and.w	r2, r3, #15
 8011136:	6879      	ldr	r1, [r7, #4]
 8011138:	4613      	mov	r3, r2
 801113a:	009b      	lsls	r3, r3, #2
 801113c:	4413      	add	r3, r2
 801113e:	009b      	lsls	r3, r3, #2
 8011140:	440b      	add	r3, r1
 8011142:	3318      	adds	r3, #24
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	2b00      	cmp	r3, #0
 8011148:	d117      	bne.n	801117a <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 801114a:	6839      	ldr	r1, [r7, #0]
 801114c:	6878      	ldr	r0, [r7, #4]
 801114e:	f000 fb0a 	bl	8011766 <USBD_CtlError>
            break;
 8011152:	e053      	b.n	80111fc <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011154:	7bbb      	ldrb	r3, [r7, #14]
 8011156:	f003 020f 	and.w	r2, r3, #15
 801115a:	6879      	ldr	r1, [r7, #4]
 801115c:	4613      	mov	r3, r2
 801115e:	009b      	lsls	r3, r3, #2
 8011160:	4413      	add	r3, r2
 8011162:	009b      	lsls	r3, r3, #2
 8011164:	440b      	add	r3, r1
 8011166:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	2b00      	cmp	r3, #0
 801116e:	d104      	bne.n	801117a <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8011170:	6839      	ldr	r1, [r7, #0]
 8011172:	6878      	ldr	r0, [r7, #4]
 8011174:	f000 faf7 	bl	8011766 <USBD_CtlError>
            break;
 8011178:	e040      	b.n	80111fc <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 801117a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801117e:	2b00      	cmp	r3, #0
 8011180:	da0b      	bge.n	801119a <USBD_StdEPReq+0x232>
 8011182:	7bbb      	ldrb	r3, [r7, #14]
 8011184:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011188:	4613      	mov	r3, r2
 801118a:	009b      	lsls	r3, r3, #2
 801118c:	4413      	add	r3, r2
 801118e:	009b      	lsls	r3, r3, #2
 8011190:	3310      	adds	r3, #16
 8011192:	687a      	ldr	r2, [r7, #4]
 8011194:	4413      	add	r3, r2
 8011196:	3304      	adds	r3, #4
 8011198:	e00a      	b.n	80111b0 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 801119a:	7bbb      	ldrb	r3, [r7, #14]
 801119c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80111a0:	4613      	mov	r3, r2
 80111a2:	009b      	lsls	r3, r3, #2
 80111a4:	4413      	add	r3, r2
 80111a6:	009b      	lsls	r3, r3, #2
 80111a8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80111ac:	687a      	ldr	r2, [r7, #4]
 80111ae:	4413      	add	r3, r2
 80111b0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80111b2:	7bbb      	ldrb	r3, [r7, #14]
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d002      	beq.n	80111be <USBD_StdEPReq+0x256>
 80111b8:	7bbb      	ldrb	r3, [r7, #14]
 80111ba:	2b80      	cmp	r3, #128	; 0x80
 80111bc:	d103      	bne.n	80111c6 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 80111be:	68bb      	ldr	r3, [r7, #8]
 80111c0:	2200      	movs	r2, #0
 80111c2:	601a      	str	r2, [r3, #0]
 80111c4:	e00e      	b.n	80111e4 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 80111c6:	7bbb      	ldrb	r3, [r7, #14]
 80111c8:	4619      	mov	r1, r3
 80111ca:	6878      	ldr	r0, [r7, #4]
 80111cc:	f004 f9c6 	bl	801555c <USBD_LL_IsStallEP>
 80111d0:	4603      	mov	r3, r0
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d003      	beq.n	80111de <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 80111d6:	68bb      	ldr	r3, [r7, #8]
 80111d8:	2201      	movs	r2, #1
 80111da:	601a      	str	r2, [r3, #0]
 80111dc:	e002      	b.n	80111e4 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 80111de:	68bb      	ldr	r3, [r7, #8]
 80111e0:	2200      	movs	r2, #0
 80111e2:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80111e4:	68bb      	ldr	r3, [r7, #8]
 80111e6:	2202      	movs	r2, #2
 80111e8:	4619      	mov	r1, r3
 80111ea:	6878      	ldr	r0, [r7, #4]
 80111ec:	f000 fb26 	bl	801183c <USBD_CtlSendData>
          break;
 80111f0:	e004      	b.n	80111fc <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 80111f2:	6839      	ldr	r1, [r7, #0]
 80111f4:	6878      	ldr	r0, [r7, #4]
 80111f6:	f000 fab6 	bl	8011766 <USBD_CtlError>
        break;
 80111fa:	bf00      	nop
      }
      break;
 80111fc:	e004      	b.n	8011208 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 80111fe:	6839      	ldr	r1, [r7, #0]
 8011200:	6878      	ldr	r0, [r7, #4]
 8011202:	f000 fab0 	bl	8011766 <USBD_CtlError>
      break;
 8011206:	bf00      	nop
    }
    break;
 8011208:	e004      	b.n	8011214 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 801120a:	6839      	ldr	r1, [r7, #0]
 801120c:	6878      	ldr	r0, [r7, #4]
 801120e:	f000 faaa 	bl	8011766 <USBD_CtlError>
    break;
 8011212:	bf00      	nop
  }

  return ret;
 8011214:	7bfb      	ldrb	r3, [r7, #15]
}
 8011216:	4618      	mov	r0, r3
 8011218:	3710      	adds	r7, #16
 801121a:	46bd      	mov	sp, r7
 801121c:	bd80      	pop	{r7, pc}
	...

08011220 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8011220:	b580      	push	{r7, lr}
 8011222:	b084      	sub	sp, #16
 8011224:	af00      	add	r7, sp, #0
 8011226:	6078      	str	r0, [r7, #4]
 8011228:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 801122a:	683b      	ldr	r3, [r7, #0]
 801122c:	885b      	ldrh	r3, [r3, #2]
 801122e:	0a1b      	lsrs	r3, r3, #8
 8011230:	b29b      	uxth	r3, r3
 8011232:	3b01      	subs	r3, #1
 8011234:	2b06      	cmp	r3, #6
 8011236:	f200 80c9 	bhi.w	80113cc <USBD_GetDescriptor+0x1ac>
 801123a:	a201      	add	r2, pc, #4	; (adr r2, 8011240 <USBD_GetDescriptor+0x20>)
 801123c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011240:	0801125d 	.word	0x0801125d
 8011244:	08011275 	.word	0x08011275
 8011248:	080112b5 	.word	0x080112b5
 801124c:	080113cd 	.word	0x080113cd
 8011250:	080113cd 	.word	0x080113cd
 8011254:	08011379 	.word	0x08011379
 8011258:	0801139f 	.word	0x0801139f
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	687a      	ldr	r2, [r7, #4]
 8011266:	7c12      	ldrb	r2, [r2, #16]
 8011268:	f107 010a 	add.w	r1, r7, #10
 801126c:	4610      	mov	r0, r2
 801126e:	4798      	blx	r3
 8011270:	60f8      	str	r0, [r7, #12]
    break;
 8011272:	e0b0      	b.n	80113d6 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	7c1b      	ldrb	r3, [r3, #16]
 8011278:	2b00      	cmp	r3, #0
 801127a:	d10d      	bne.n	8011298 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011284:	f107 020a 	add.w	r2, r7, #10
 8011288:	4610      	mov	r0, r2
 801128a:	4798      	blx	r3
 801128c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	3301      	adds	r3, #1
 8011292:	2202      	movs	r2, #2
 8011294:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8011296:	e09e      	b.n	80113d6 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801129e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112a0:	f107 020a 	add.w	r2, r7, #10
 80112a4:	4610      	mov	r0, r2
 80112a6:	4798      	blx	r3
 80112a8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	3301      	adds	r3, #1
 80112ae:	2202      	movs	r2, #2
 80112b0:	701a      	strb	r2, [r3, #0]
    break;
 80112b2:	e090      	b.n	80113d6 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80112b4:	683b      	ldr	r3, [r7, #0]
 80112b6:	885b      	ldrh	r3, [r3, #2]
 80112b8:	b2db      	uxtb	r3, r3
 80112ba:	2b05      	cmp	r3, #5
 80112bc:	d856      	bhi.n	801136c <USBD_GetDescriptor+0x14c>
 80112be:	a201      	add	r2, pc, #4	; (adr r2, 80112c4 <USBD_GetDescriptor+0xa4>)
 80112c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112c4:	080112dd 	.word	0x080112dd
 80112c8:	080112f5 	.word	0x080112f5
 80112cc:	0801130d 	.word	0x0801130d
 80112d0:	08011325 	.word	0x08011325
 80112d4:	0801133d 	.word	0x0801133d
 80112d8:	08011355 	.word	0x08011355
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80112e2:	685b      	ldr	r3, [r3, #4]
 80112e4:	687a      	ldr	r2, [r7, #4]
 80112e6:	7c12      	ldrb	r2, [r2, #16]
 80112e8:	f107 010a 	add.w	r1, r7, #10
 80112ec:	4610      	mov	r0, r2
 80112ee:	4798      	blx	r3
 80112f0:	60f8      	str	r0, [r7, #12]
      break;
 80112f2:	e040      	b.n	8011376 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80112fa:	689b      	ldr	r3, [r3, #8]
 80112fc:	687a      	ldr	r2, [r7, #4]
 80112fe:	7c12      	ldrb	r2, [r2, #16]
 8011300:	f107 010a 	add.w	r1, r7, #10
 8011304:	4610      	mov	r0, r2
 8011306:	4798      	blx	r3
 8011308:	60f8      	str	r0, [r7, #12]
      break;
 801130a:	e034      	b.n	8011376 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8011312:	68db      	ldr	r3, [r3, #12]
 8011314:	687a      	ldr	r2, [r7, #4]
 8011316:	7c12      	ldrb	r2, [r2, #16]
 8011318:	f107 010a 	add.w	r1, r7, #10
 801131c:	4610      	mov	r0, r2
 801131e:	4798      	blx	r3
 8011320:	60f8      	str	r0, [r7, #12]
      break;
 8011322:	e028      	b.n	8011376 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 801132a:	691b      	ldr	r3, [r3, #16]
 801132c:	687a      	ldr	r2, [r7, #4]
 801132e:	7c12      	ldrb	r2, [r2, #16]
 8011330:	f107 010a 	add.w	r1, r7, #10
 8011334:	4610      	mov	r0, r2
 8011336:	4798      	blx	r3
 8011338:	60f8      	str	r0, [r7, #12]
      break;
 801133a:	e01c      	b.n	8011376 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8011342:	695b      	ldr	r3, [r3, #20]
 8011344:	687a      	ldr	r2, [r7, #4]
 8011346:	7c12      	ldrb	r2, [r2, #16]
 8011348:	f107 010a 	add.w	r1, r7, #10
 801134c:	4610      	mov	r0, r2
 801134e:	4798      	blx	r3
 8011350:	60f8      	str	r0, [r7, #12]
      break;
 8011352:	e010      	b.n	8011376 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 801135a:	699b      	ldr	r3, [r3, #24]
 801135c:	687a      	ldr	r2, [r7, #4]
 801135e:	7c12      	ldrb	r2, [r2, #16]
 8011360:	f107 010a 	add.w	r1, r7, #10
 8011364:	4610      	mov	r0, r2
 8011366:	4798      	blx	r3
 8011368:	60f8      	str	r0, [r7, #12]
      break;
 801136a:	e004      	b.n	8011376 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 801136c:	6839      	ldr	r1, [r7, #0]
 801136e:	6878      	ldr	r0, [r7, #4]
 8011370:	f000 f9f9 	bl	8011766 <USBD_CtlError>
      return;
 8011374:	e04b      	b.n	801140e <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8011376:	e02e      	b.n	80113d6 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	7c1b      	ldrb	r3, [r3, #16]
 801137c:	2b00      	cmp	r3, #0
 801137e:	d109      	bne.n	8011394 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011388:	f107 020a 	add.w	r2, r7, #10
 801138c:	4610      	mov	r0, r2
 801138e:	4798      	blx	r3
 8011390:	60f8      	str	r0, [r7, #12]
      break;
 8011392:	e020      	b.n	80113d6 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8011394:	6839      	ldr	r1, [r7, #0]
 8011396:	6878      	ldr	r0, [r7, #4]
 8011398:	f000 f9e5 	bl	8011766 <USBD_CtlError>
      return;
 801139c:	e037      	b.n	801140e <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	7c1b      	ldrb	r3, [r3, #16]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d10d      	bne.n	80113c2 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80113ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80113ae:	f107 020a 	add.w	r2, r7, #10
 80113b2:	4610      	mov	r0, r2
 80113b4:	4798      	blx	r3
 80113b6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	3301      	adds	r3, #1
 80113bc:	2207      	movs	r2, #7
 80113be:	701a      	strb	r2, [r3, #0]
      break;
 80113c0:	e009      	b.n	80113d6 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80113c2:	6839      	ldr	r1, [r7, #0]
 80113c4:	6878      	ldr	r0, [r7, #4]
 80113c6:	f000 f9ce 	bl	8011766 <USBD_CtlError>
      return;
 80113ca:	e020      	b.n	801140e <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 80113cc:	6839      	ldr	r1, [r7, #0]
 80113ce:	6878      	ldr	r0, [r7, #4]
 80113d0:	f000 f9c9 	bl	8011766 <USBD_CtlError>
    return;
 80113d4:	e01b      	b.n	801140e <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 80113d6:	897b      	ldrh	r3, [r7, #10]
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d011      	beq.n	8011400 <USBD_GetDescriptor+0x1e0>
 80113dc:	683b      	ldr	r3, [r7, #0]
 80113de:	88db      	ldrh	r3, [r3, #6]
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d00d      	beq.n	8011400 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 80113e4:	683b      	ldr	r3, [r7, #0]
 80113e6:	88da      	ldrh	r2, [r3, #6]
 80113e8:	897b      	ldrh	r3, [r7, #10]
 80113ea:	4293      	cmp	r3, r2
 80113ec:	bf28      	it	cs
 80113ee:	4613      	movcs	r3, r2
 80113f0:	b29b      	uxth	r3, r3
 80113f2:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 80113f4:	897b      	ldrh	r3, [r7, #10]
 80113f6:	461a      	mov	r2, r3
 80113f8:	68f9      	ldr	r1, [r7, #12]
 80113fa:	6878      	ldr	r0, [r7, #4]
 80113fc:	f000 fa1e 	bl	801183c <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8011400:	683b      	ldr	r3, [r7, #0]
 8011402:	88db      	ldrh	r3, [r3, #6]
 8011404:	2b00      	cmp	r3, #0
 8011406:	d102      	bne.n	801140e <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8011408:	6878      	ldr	r0, [r7, #4]
 801140a:	f000 fa75 	bl	80118f8 <USBD_CtlSendStatus>
  }
}
 801140e:	3710      	adds	r7, #16
 8011410:	46bd      	mov	sp, r7
 8011412:	bd80      	pop	{r7, pc}

08011414 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8011414:	b580      	push	{r7, lr}
 8011416:	b084      	sub	sp, #16
 8011418:	af00      	add	r7, sp, #0
 801141a:	6078      	str	r0, [r7, #4]
 801141c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801141e:	683b      	ldr	r3, [r7, #0]
 8011420:	889b      	ldrh	r3, [r3, #4]
 8011422:	2b00      	cmp	r3, #0
 8011424:	d130      	bne.n	8011488 <USBD_SetAddress+0x74>
 8011426:	683b      	ldr	r3, [r7, #0]
 8011428:	88db      	ldrh	r3, [r3, #6]
 801142a:	2b00      	cmp	r3, #0
 801142c:	d12c      	bne.n	8011488 <USBD_SetAddress+0x74>
 801142e:	683b      	ldr	r3, [r7, #0]
 8011430:	885b      	ldrh	r3, [r3, #2]
 8011432:	2b7f      	cmp	r3, #127	; 0x7f
 8011434:	d828      	bhi.n	8011488 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011436:	683b      	ldr	r3, [r7, #0]
 8011438:	885b      	ldrh	r3, [r3, #2]
 801143a:	b2db      	uxtb	r3, r3
 801143c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011440:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8011448:	2b03      	cmp	r3, #3
 801144a:	d104      	bne.n	8011456 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 801144c:	6839      	ldr	r1, [r7, #0]
 801144e:	6878      	ldr	r0, [r7, #4]
 8011450:	f000 f989 	bl	8011766 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011454:	e01c      	b.n	8011490 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	7bfa      	ldrb	r2, [r7, #15]
 801145a:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801145e:	7bfb      	ldrb	r3, [r7, #15]
 8011460:	4619      	mov	r1, r3
 8011462:	6878      	ldr	r0, [r7, #4]
 8011464:	f004 f8a6 	bl	80155b4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8011468:	6878      	ldr	r0, [r7, #4]
 801146a:	f000 fa45 	bl	80118f8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801146e:	7bfb      	ldrb	r3, [r7, #15]
 8011470:	2b00      	cmp	r3, #0
 8011472:	d004      	beq.n	801147e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	2202      	movs	r2, #2
 8011478:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801147c:	e008      	b.n	8011490 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	2201      	movs	r2, #1
 8011482:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011486:	e003      	b.n	8011490 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011488:	6839      	ldr	r1, [r7, #0]
 801148a:	6878      	ldr	r0, [r7, #4]
 801148c:	f000 f96b 	bl	8011766 <USBD_CtlError>
  }
}
 8011490:	bf00      	nop
 8011492:	3710      	adds	r7, #16
 8011494:	46bd      	mov	sp, r7
 8011496:	bd80      	pop	{r7, pc}

08011498 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011498:	b580      	push	{r7, lr}
 801149a:	b082      	sub	sp, #8
 801149c:	af00      	add	r7, sp, #0
 801149e:	6078      	str	r0, [r7, #4]
 80114a0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80114a2:	683b      	ldr	r3, [r7, #0]
 80114a4:	885b      	ldrh	r3, [r3, #2]
 80114a6:	b2da      	uxtb	r2, r3
 80114a8:	4b41      	ldr	r3, [pc, #260]	; (80115b0 <USBD_SetConfig+0x118>)
 80114aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80114ac:	4b40      	ldr	r3, [pc, #256]	; (80115b0 <USBD_SetConfig+0x118>)
 80114ae:	781b      	ldrb	r3, [r3, #0]
 80114b0:	2b01      	cmp	r3, #1
 80114b2:	d904      	bls.n	80114be <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80114b4:	6839      	ldr	r1, [r7, #0]
 80114b6:	6878      	ldr	r0, [r7, #4]
 80114b8:	f000 f955 	bl	8011766 <USBD_CtlError>
 80114bc:	e075      	b.n	80115aa <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80114c4:	2b02      	cmp	r3, #2
 80114c6:	d002      	beq.n	80114ce <USBD_SetConfig+0x36>
 80114c8:	2b03      	cmp	r3, #3
 80114ca:	d023      	beq.n	8011514 <USBD_SetConfig+0x7c>
 80114cc:	e062      	b.n	8011594 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 80114ce:	4b38      	ldr	r3, [pc, #224]	; (80115b0 <USBD_SetConfig+0x118>)
 80114d0:	781b      	ldrb	r3, [r3, #0]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d01a      	beq.n	801150c <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 80114d6:	4b36      	ldr	r3, [pc, #216]	; (80115b0 <USBD_SetConfig+0x118>)
 80114d8:	781b      	ldrb	r3, [r3, #0]
 80114da:	461a      	mov	r2, r3
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	2203      	movs	r2, #3
 80114e4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80114e8:	4b31      	ldr	r3, [pc, #196]	; (80115b0 <USBD_SetConfig+0x118>)
 80114ea:	781b      	ldrb	r3, [r3, #0]
 80114ec:	4619      	mov	r1, r3
 80114ee:	6878      	ldr	r0, [r7, #4]
 80114f0:	f7ff fa2a 	bl	8010948 <USBD_SetClassConfig>
 80114f4:	4603      	mov	r3, r0
 80114f6:	2b02      	cmp	r3, #2
 80114f8:	d104      	bne.n	8011504 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 80114fa:	6839      	ldr	r1, [r7, #0]
 80114fc:	6878      	ldr	r0, [r7, #4]
 80114fe:	f000 f932 	bl	8011766 <USBD_CtlError>
          return;
 8011502:	e052      	b.n	80115aa <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8011504:	6878      	ldr	r0, [r7, #4]
 8011506:	f000 f9f7 	bl	80118f8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 801150a:	e04e      	b.n	80115aa <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 801150c:	6878      	ldr	r0, [r7, #4]
 801150e:	f000 f9f3 	bl	80118f8 <USBD_CtlSendStatus>
      break;
 8011512:	e04a      	b.n	80115aa <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8011514:	4b26      	ldr	r3, [pc, #152]	; (80115b0 <USBD_SetConfig+0x118>)
 8011516:	781b      	ldrb	r3, [r3, #0]
 8011518:	2b00      	cmp	r3, #0
 801151a:	d112      	bne.n	8011542 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	2202      	movs	r2, #2
 8011520:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8011524:	4b22      	ldr	r3, [pc, #136]	; (80115b0 <USBD_SetConfig+0x118>)
 8011526:	781b      	ldrb	r3, [r3, #0]
 8011528:	461a      	mov	r2, r3
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 801152e:	4b20      	ldr	r3, [pc, #128]	; (80115b0 <USBD_SetConfig+0x118>)
 8011530:	781b      	ldrb	r3, [r3, #0]
 8011532:	4619      	mov	r1, r3
 8011534:	6878      	ldr	r0, [r7, #4]
 8011536:	f7ff fa26 	bl	8010986 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 801153a:	6878      	ldr	r0, [r7, #4]
 801153c:	f000 f9dc 	bl	80118f8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8011540:	e033      	b.n	80115aa <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8011542:	4b1b      	ldr	r3, [pc, #108]	; (80115b0 <USBD_SetConfig+0x118>)
 8011544:	781b      	ldrb	r3, [r3, #0]
 8011546:	461a      	mov	r2, r3
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	685b      	ldr	r3, [r3, #4]
 801154c:	429a      	cmp	r2, r3
 801154e:	d01d      	beq.n	801158c <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	685b      	ldr	r3, [r3, #4]
 8011554:	b2db      	uxtb	r3, r3
 8011556:	4619      	mov	r1, r3
 8011558:	6878      	ldr	r0, [r7, #4]
 801155a:	f7ff fa14 	bl	8010986 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801155e:	4b14      	ldr	r3, [pc, #80]	; (80115b0 <USBD_SetConfig+0x118>)
 8011560:	781b      	ldrb	r3, [r3, #0]
 8011562:	461a      	mov	r2, r3
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8011568:	4b11      	ldr	r3, [pc, #68]	; (80115b0 <USBD_SetConfig+0x118>)
 801156a:	781b      	ldrb	r3, [r3, #0]
 801156c:	4619      	mov	r1, r3
 801156e:	6878      	ldr	r0, [r7, #4]
 8011570:	f7ff f9ea 	bl	8010948 <USBD_SetClassConfig>
 8011574:	4603      	mov	r3, r0
 8011576:	2b02      	cmp	r3, #2
 8011578:	d104      	bne.n	8011584 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 801157a:	6839      	ldr	r1, [r7, #0]
 801157c:	6878      	ldr	r0, [r7, #4]
 801157e:	f000 f8f2 	bl	8011766 <USBD_CtlError>
          return;
 8011582:	e012      	b.n	80115aa <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8011584:	6878      	ldr	r0, [r7, #4]
 8011586:	f000 f9b7 	bl	80118f8 <USBD_CtlSendStatus>
      break;
 801158a:	e00e      	b.n	80115aa <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 801158c:	6878      	ldr	r0, [r7, #4]
 801158e:	f000 f9b3 	bl	80118f8 <USBD_CtlSendStatus>
      break;
 8011592:	e00a      	b.n	80115aa <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8011594:	6839      	ldr	r1, [r7, #0]
 8011596:	6878      	ldr	r0, [r7, #4]
 8011598:	f000 f8e5 	bl	8011766 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 801159c:	4b04      	ldr	r3, [pc, #16]	; (80115b0 <USBD_SetConfig+0x118>)
 801159e:	781b      	ldrb	r3, [r3, #0]
 80115a0:	4619      	mov	r1, r3
 80115a2:	6878      	ldr	r0, [r7, #4]
 80115a4:	f7ff f9ef 	bl	8010986 <USBD_ClrClassConfig>
      break;
 80115a8:	bf00      	nop
    }
  }
}
 80115aa:	3708      	adds	r7, #8
 80115ac:	46bd      	mov	sp, r7
 80115ae:	bd80      	pop	{r7, pc}
 80115b0:	2000145c 	.word	0x2000145c

080115b4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80115b4:	b580      	push	{r7, lr}
 80115b6:	b082      	sub	sp, #8
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	6078      	str	r0, [r7, #4]
 80115bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80115be:	683b      	ldr	r3, [r7, #0]
 80115c0:	88db      	ldrh	r3, [r3, #6]
 80115c2:	2b01      	cmp	r3, #1
 80115c4:	d004      	beq.n	80115d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 80115c6:	6839      	ldr	r1, [r7, #0]
 80115c8:	6878      	ldr	r0, [r7, #4]
 80115ca:	f000 f8cc 	bl	8011766 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80115ce:	e021      	b.n	8011614 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80115d6:	2b01      	cmp	r3, #1
 80115d8:	db17      	blt.n	801160a <USBD_GetConfig+0x56>
 80115da:	2b02      	cmp	r3, #2
 80115dc:	dd02      	ble.n	80115e4 <USBD_GetConfig+0x30>
 80115de:	2b03      	cmp	r3, #3
 80115e0:	d00b      	beq.n	80115fa <USBD_GetConfig+0x46>
 80115e2:	e012      	b.n	801160a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	2200      	movs	r2, #0
 80115e8:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	3308      	adds	r3, #8
 80115ee:	2201      	movs	r2, #1
 80115f0:	4619      	mov	r1, r3
 80115f2:	6878      	ldr	r0, [r7, #4]
 80115f4:	f000 f922 	bl	801183c <USBD_CtlSendData>
      break;
 80115f8:	e00c      	b.n	8011614 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	3304      	adds	r3, #4
 80115fe:	2201      	movs	r2, #1
 8011600:	4619      	mov	r1, r3
 8011602:	6878      	ldr	r0, [r7, #4]
 8011604:	f000 f91a 	bl	801183c <USBD_CtlSendData>
      break;
 8011608:	e004      	b.n	8011614 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 801160a:	6839      	ldr	r1, [r7, #0]
 801160c:	6878      	ldr	r0, [r7, #4]
 801160e:	f000 f8aa 	bl	8011766 <USBD_CtlError>
      break;
 8011612:	bf00      	nop
}
 8011614:	bf00      	nop
 8011616:	3708      	adds	r7, #8
 8011618:	46bd      	mov	sp, r7
 801161a:	bd80      	pop	{r7, pc}

0801161c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801161c:	b580      	push	{r7, lr}
 801161e:	b082      	sub	sp, #8
 8011620:	af00      	add	r7, sp, #0
 8011622:	6078      	str	r0, [r7, #4]
 8011624:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 801162c:	3b01      	subs	r3, #1
 801162e:	2b02      	cmp	r3, #2
 8011630:	d81e      	bhi.n	8011670 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8011632:	683b      	ldr	r3, [r7, #0]
 8011634:	88db      	ldrh	r3, [r3, #6]
 8011636:	2b02      	cmp	r3, #2
 8011638:	d004      	beq.n	8011644 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 801163a:	6839      	ldr	r1, [r7, #0]
 801163c:	6878      	ldr	r0, [r7, #4]
 801163e:	f000 f892 	bl	8011766 <USBD_CtlError>
      break;
 8011642:	e01a      	b.n	801167a <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	2201      	movs	r2, #1
 8011648:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8011650:	2b00      	cmp	r3, #0
 8011652:	d005      	beq.n	8011660 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	68db      	ldr	r3, [r3, #12]
 8011658:	f043 0202 	orr.w	r2, r3, #2
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	330c      	adds	r3, #12
 8011664:	2202      	movs	r2, #2
 8011666:	4619      	mov	r1, r3
 8011668:	6878      	ldr	r0, [r7, #4]
 801166a:	f000 f8e7 	bl	801183c <USBD_CtlSendData>
    break;
 801166e:	e004      	b.n	801167a <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8011670:	6839      	ldr	r1, [r7, #0]
 8011672:	6878      	ldr	r0, [r7, #4]
 8011674:	f000 f877 	bl	8011766 <USBD_CtlError>
    break;
 8011678:	bf00      	nop
  }
}
 801167a:	bf00      	nop
 801167c:	3708      	adds	r7, #8
 801167e:	46bd      	mov	sp, r7
 8011680:	bd80      	pop	{r7, pc}

08011682 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8011682:	b580      	push	{r7, lr}
 8011684:	b082      	sub	sp, #8
 8011686:	af00      	add	r7, sp, #0
 8011688:	6078      	str	r0, [r7, #4]
 801168a:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801168c:	683b      	ldr	r3, [r7, #0]
 801168e:	885b      	ldrh	r3, [r3, #2]
 8011690:	2b01      	cmp	r3, #1
 8011692:	d106      	bne.n	80116a2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	2201      	movs	r2, #1
 8011698:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 801169c:	6878      	ldr	r0, [r7, #4]
 801169e:	f000 f92b 	bl	80118f8 <USBD_CtlSendStatus>
  }

}
 80116a2:	bf00      	nop
 80116a4:	3708      	adds	r7, #8
 80116a6:	46bd      	mov	sp, r7
 80116a8:	bd80      	pop	{r7, pc}

080116aa <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80116aa:	b580      	push	{r7, lr}
 80116ac:	b082      	sub	sp, #8
 80116ae:	af00      	add	r7, sp, #0
 80116b0:	6078      	str	r0, [r7, #4]
 80116b2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80116ba:	3b01      	subs	r3, #1
 80116bc:	2b02      	cmp	r3, #2
 80116be:	d80b      	bhi.n	80116d8 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80116c0:	683b      	ldr	r3, [r7, #0]
 80116c2:	885b      	ldrh	r3, [r3, #2]
 80116c4:	2b01      	cmp	r3, #1
 80116c6:	d10c      	bne.n	80116e2 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	2200      	movs	r2, #0
 80116cc:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 80116d0:	6878      	ldr	r0, [r7, #4]
 80116d2:	f000 f911 	bl	80118f8 <USBD_CtlSendStatus>
    }
    break;
 80116d6:	e004      	b.n	80116e2 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 80116d8:	6839      	ldr	r1, [r7, #0]
 80116da:	6878      	ldr	r0, [r7, #4]
 80116dc:	f000 f843 	bl	8011766 <USBD_CtlError>
    break;
 80116e0:	e000      	b.n	80116e4 <USBD_ClrFeature+0x3a>
    break;
 80116e2:	bf00      	nop
  }
}
 80116e4:	bf00      	nop
 80116e6:	3708      	adds	r7, #8
 80116e8:	46bd      	mov	sp, r7
 80116ea:	bd80      	pop	{r7, pc}

080116ec <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80116ec:	b480      	push	{r7}
 80116ee:	b083      	sub	sp, #12
 80116f0:	af00      	add	r7, sp, #0
 80116f2:	6078      	str	r0, [r7, #4]
 80116f4:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80116f6:	683b      	ldr	r3, [r7, #0]
 80116f8:	781a      	ldrb	r2, [r3, #0]
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80116fe:	683b      	ldr	r3, [r7, #0]
 8011700:	785a      	ldrb	r2, [r3, #1]
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8011706:	683b      	ldr	r3, [r7, #0]
 8011708:	3302      	adds	r3, #2
 801170a:	781b      	ldrb	r3, [r3, #0]
 801170c:	b29a      	uxth	r2, r3
 801170e:	683b      	ldr	r3, [r7, #0]
 8011710:	3303      	adds	r3, #3
 8011712:	781b      	ldrb	r3, [r3, #0]
 8011714:	b29b      	uxth	r3, r3
 8011716:	021b      	lsls	r3, r3, #8
 8011718:	b29b      	uxth	r3, r3
 801171a:	4413      	add	r3, r2
 801171c:	b29a      	uxth	r2, r3
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8011722:	683b      	ldr	r3, [r7, #0]
 8011724:	3304      	adds	r3, #4
 8011726:	781b      	ldrb	r3, [r3, #0]
 8011728:	b29a      	uxth	r2, r3
 801172a:	683b      	ldr	r3, [r7, #0]
 801172c:	3305      	adds	r3, #5
 801172e:	781b      	ldrb	r3, [r3, #0]
 8011730:	b29b      	uxth	r3, r3
 8011732:	021b      	lsls	r3, r3, #8
 8011734:	b29b      	uxth	r3, r3
 8011736:	4413      	add	r3, r2
 8011738:	b29a      	uxth	r2, r3
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 801173e:	683b      	ldr	r3, [r7, #0]
 8011740:	3306      	adds	r3, #6
 8011742:	781b      	ldrb	r3, [r3, #0]
 8011744:	b29a      	uxth	r2, r3
 8011746:	683b      	ldr	r3, [r7, #0]
 8011748:	3307      	adds	r3, #7
 801174a:	781b      	ldrb	r3, [r3, #0]
 801174c:	b29b      	uxth	r3, r3
 801174e:	021b      	lsls	r3, r3, #8
 8011750:	b29b      	uxth	r3, r3
 8011752:	4413      	add	r3, r2
 8011754:	b29a      	uxth	r2, r3
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	80da      	strh	r2, [r3, #6]

}
 801175a:	bf00      	nop
 801175c:	370c      	adds	r7, #12
 801175e:	46bd      	mov	sp, r7
 8011760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011764:	4770      	bx	lr

08011766 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8011766:	b580      	push	{r7, lr}
 8011768:	b082      	sub	sp, #8
 801176a:	af00      	add	r7, sp, #0
 801176c:	6078      	str	r0, [r7, #4]
 801176e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8011770:	2180      	movs	r1, #128	; 0x80
 8011772:	6878      	ldr	r0, [r7, #4]
 8011774:	f003 feb4 	bl	80154e0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8011778:	2100      	movs	r1, #0
 801177a:	6878      	ldr	r0, [r7, #4]
 801177c:	f003 feb0 	bl	80154e0 <USBD_LL_StallEP>
}
 8011780:	bf00      	nop
 8011782:	3708      	adds	r7, #8
 8011784:	46bd      	mov	sp, r7
 8011786:	bd80      	pop	{r7, pc}

08011788 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011788:	b580      	push	{r7, lr}
 801178a:	b086      	sub	sp, #24
 801178c:	af00      	add	r7, sp, #0
 801178e:	60f8      	str	r0, [r7, #12]
 8011790:	60b9      	str	r1, [r7, #8]
 8011792:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011794:	2300      	movs	r3, #0
 8011796:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	2b00      	cmp	r3, #0
 801179c:	d032      	beq.n	8011804 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 801179e:	68f8      	ldr	r0, [r7, #12]
 80117a0:	f000 f834 	bl	801180c <USBD_GetLen>
 80117a4:	4603      	mov	r3, r0
 80117a6:	3301      	adds	r3, #1
 80117a8:	b29b      	uxth	r3, r3
 80117aa:	005b      	lsls	r3, r3, #1
 80117ac:	b29a      	uxth	r2, r3
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80117b2:	7dfb      	ldrb	r3, [r7, #23]
 80117b4:	1c5a      	adds	r2, r3, #1
 80117b6:	75fa      	strb	r2, [r7, #23]
 80117b8:	461a      	mov	r2, r3
 80117ba:	68bb      	ldr	r3, [r7, #8]
 80117bc:	4413      	add	r3, r2
 80117be:	687a      	ldr	r2, [r7, #4]
 80117c0:	7812      	ldrb	r2, [r2, #0]
 80117c2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80117c4:	7dfb      	ldrb	r3, [r7, #23]
 80117c6:	1c5a      	adds	r2, r3, #1
 80117c8:	75fa      	strb	r2, [r7, #23]
 80117ca:	461a      	mov	r2, r3
 80117cc:	68bb      	ldr	r3, [r7, #8]
 80117ce:	4413      	add	r3, r2
 80117d0:	2203      	movs	r2, #3
 80117d2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80117d4:	e012      	b.n	80117fc <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	1c5a      	adds	r2, r3, #1
 80117da:	60fa      	str	r2, [r7, #12]
 80117dc:	7dfa      	ldrb	r2, [r7, #23]
 80117de:	1c51      	adds	r1, r2, #1
 80117e0:	75f9      	strb	r1, [r7, #23]
 80117e2:	4611      	mov	r1, r2
 80117e4:	68ba      	ldr	r2, [r7, #8]
 80117e6:	440a      	add	r2, r1
 80117e8:	781b      	ldrb	r3, [r3, #0]
 80117ea:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80117ec:	7dfb      	ldrb	r3, [r7, #23]
 80117ee:	1c5a      	adds	r2, r3, #1
 80117f0:	75fa      	strb	r2, [r7, #23]
 80117f2:	461a      	mov	r2, r3
 80117f4:	68bb      	ldr	r3, [r7, #8]
 80117f6:	4413      	add	r3, r2
 80117f8:	2200      	movs	r2, #0
 80117fa:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	781b      	ldrb	r3, [r3, #0]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d1e8      	bne.n	80117d6 <USBD_GetString+0x4e>
    }
  }
}
 8011804:	bf00      	nop
 8011806:	3718      	adds	r7, #24
 8011808:	46bd      	mov	sp, r7
 801180a:	bd80      	pop	{r7, pc}

0801180c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801180c:	b480      	push	{r7}
 801180e:	b085      	sub	sp, #20
 8011810:	af00      	add	r7, sp, #0
 8011812:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8011814:	2300      	movs	r3, #0
 8011816:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8011818:	e005      	b.n	8011826 <USBD_GetLen+0x1a>
    {
        len++;
 801181a:	7bfb      	ldrb	r3, [r7, #15]
 801181c:	3301      	adds	r3, #1
 801181e:	73fb      	strb	r3, [r7, #15]
        buf++;
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	3301      	adds	r3, #1
 8011824:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	781b      	ldrb	r3, [r3, #0]
 801182a:	2b00      	cmp	r3, #0
 801182c:	d1f5      	bne.n	801181a <USBD_GetLen+0xe>
    }

    return len;
 801182e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011830:	4618      	mov	r0, r3
 8011832:	3714      	adds	r7, #20
 8011834:	46bd      	mov	sp, r7
 8011836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801183a:	4770      	bx	lr

0801183c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 801183c:	b580      	push	{r7, lr}
 801183e:	b084      	sub	sp, #16
 8011840:	af00      	add	r7, sp, #0
 8011842:	60f8      	str	r0, [r7, #12]
 8011844:	60b9      	str	r1, [r7, #8]
 8011846:	4613      	mov	r3, r2
 8011848:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	2202      	movs	r2, #2
 801184e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8011852:	88fa      	ldrh	r2, [r7, #6]
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8011858:	88fa      	ldrh	r2, [r7, #6]
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 801185e:	88fb      	ldrh	r3, [r7, #6]
 8011860:	68ba      	ldr	r2, [r7, #8]
 8011862:	2100      	movs	r1, #0
 8011864:	68f8      	ldr	r0, [r7, #12]
 8011866:	f003 fec4 	bl	80155f2 <USBD_LL_Transmit>

  return USBD_OK;
 801186a:	2300      	movs	r3, #0
}
 801186c:	4618      	mov	r0, r3
 801186e:	3710      	adds	r7, #16
 8011870:	46bd      	mov	sp, r7
 8011872:	bd80      	pop	{r7, pc}

08011874 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8011874:	b580      	push	{r7, lr}
 8011876:	b084      	sub	sp, #16
 8011878:	af00      	add	r7, sp, #0
 801187a:	60f8      	str	r0, [r7, #12]
 801187c:	60b9      	str	r1, [r7, #8]
 801187e:	4613      	mov	r3, r2
 8011880:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8011882:	88fb      	ldrh	r3, [r7, #6]
 8011884:	68ba      	ldr	r2, [r7, #8]
 8011886:	2100      	movs	r1, #0
 8011888:	68f8      	ldr	r0, [r7, #12]
 801188a:	f003 feb2 	bl	80155f2 <USBD_LL_Transmit>

  return USBD_OK;
 801188e:	2300      	movs	r3, #0
}
 8011890:	4618      	mov	r0, r3
 8011892:	3710      	adds	r7, #16
 8011894:	46bd      	mov	sp, r7
 8011896:	bd80      	pop	{r7, pc}

08011898 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8011898:	b580      	push	{r7, lr}
 801189a:	b084      	sub	sp, #16
 801189c:	af00      	add	r7, sp, #0
 801189e:	60f8      	str	r0, [r7, #12]
 80118a0:	60b9      	str	r1, [r7, #8]
 80118a2:	4613      	mov	r3, r2
 80118a4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	2203      	movs	r2, #3
 80118aa:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 80118ae:	88fa      	ldrh	r2, [r7, #6]
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 80118b6:	88fa      	ldrh	r2, [r7, #6]
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 80118be:	88fb      	ldrh	r3, [r7, #6]
 80118c0:	68ba      	ldr	r2, [r7, #8]
 80118c2:	2100      	movs	r1, #0
 80118c4:	68f8      	ldr	r0, [r7, #12]
 80118c6:	f003 feb7 	bl	8015638 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80118ca:	2300      	movs	r3, #0
}
 80118cc:	4618      	mov	r0, r3
 80118ce:	3710      	adds	r7, #16
 80118d0:	46bd      	mov	sp, r7
 80118d2:	bd80      	pop	{r7, pc}

080118d4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 80118d4:	b580      	push	{r7, lr}
 80118d6:	b084      	sub	sp, #16
 80118d8:	af00      	add	r7, sp, #0
 80118da:	60f8      	str	r0, [r7, #12]
 80118dc:	60b9      	str	r1, [r7, #8]
 80118de:	4613      	mov	r3, r2
 80118e0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80118e2:	88fb      	ldrh	r3, [r7, #6]
 80118e4:	68ba      	ldr	r2, [r7, #8]
 80118e6:	2100      	movs	r1, #0
 80118e8:	68f8      	ldr	r0, [r7, #12]
 80118ea:	f003 fea5 	bl	8015638 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80118ee:	2300      	movs	r3, #0
}
 80118f0:	4618      	mov	r0, r3
 80118f2:	3710      	adds	r7, #16
 80118f4:	46bd      	mov	sp, r7
 80118f6:	bd80      	pop	{r7, pc}

080118f8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80118f8:	b580      	push	{r7, lr}
 80118fa:	b082      	sub	sp, #8
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	2204      	movs	r2, #4
 8011904:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011908:	2300      	movs	r3, #0
 801190a:	2200      	movs	r2, #0
 801190c:	2100      	movs	r1, #0
 801190e:	6878      	ldr	r0, [r7, #4]
 8011910:	f003 fe6f 	bl	80155f2 <USBD_LL_Transmit>

  return USBD_OK;
 8011914:	2300      	movs	r3, #0
}
 8011916:	4618      	mov	r0, r3
 8011918:	3708      	adds	r7, #8
 801191a:	46bd      	mov	sp, r7
 801191c:	bd80      	pop	{r7, pc}

0801191e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 801191e:	b580      	push	{r7, lr}
 8011920:	b082      	sub	sp, #8
 8011922:	af00      	add	r7, sp, #0
 8011924:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	2205      	movs	r2, #5
 801192a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 801192e:	2300      	movs	r3, #0
 8011930:	2200      	movs	r2, #0
 8011932:	2100      	movs	r1, #0
 8011934:	6878      	ldr	r0, [r7, #4]
 8011936:	f003 fe7f 	bl	8015638 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801193a:	2300      	movs	r3, #0
}
 801193c:	4618      	mov	r0, r3
 801193e:	3708      	adds	r7, #8
 8011940:	46bd      	mov	sp, r7
 8011942:	bd80      	pop	{r7, pc}

08011944 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8011944:	b480      	push	{r7}
 8011946:	b085      	sub	sp, #20
 8011948:	af00      	add	r7, sp, #0
 801194a:	4603      	mov	r3, r0
 801194c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 801194e:	2300      	movs	r3, #0
 8011950:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8011952:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011956:	2b84      	cmp	r3, #132	; 0x84
 8011958:	d005      	beq.n	8011966 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 801195a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	4413      	add	r3, r2
 8011962:	3303      	adds	r3, #3
 8011964:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8011966:	68fb      	ldr	r3, [r7, #12]
}
 8011968:	4618      	mov	r0, r3
 801196a:	3714      	adds	r7, #20
 801196c:	46bd      	mov	sp, r7
 801196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011972:	4770      	bx	lr

08011974 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8011974:	b480      	push	{r7}
 8011976:	b083      	sub	sp, #12
 8011978:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801197a:	f3ef 8305 	mrs	r3, IPSR
 801197e:	607b      	str	r3, [r7, #4]
  return(result);
 8011980:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8011982:	2b00      	cmp	r3, #0
 8011984:	bf14      	ite	ne
 8011986:	2301      	movne	r3, #1
 8011988:	2300      	moveq	r3, #0
 801198a:	b2db      	uxtb	r3, r3
}
 801198c:	4618      	mov	r0, r3
 801198e:	370c      	adds	r7, #12
 8011990:	46bd      	mov	sp, r7
 8011992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011996:	4770      	bx	lr

08011998 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8011998:	b580      	push	{r7, lr}
 801199a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 801199c:	f001 fd56 	bl	801344c <vTaskStartScheduler>
  
  return osOK;
 80119a0:	2300      	movs	r3, #0
}
 80119a2:	4618      	mov	r0, r3
 80119a4:	bd80      	pop	{r7, pc}

080119a6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80119a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80119a8:	b089      	sub	sp, #36	; 0x24
 80119aa:	af04      	add	r7, sp, #16
 80119ac:	6078      	str	r0, [r7, #4]
 80119ae:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	695b      	ldr	r3, [r3, #20]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d020      	beq.n	80119fa <osThreadCreate+0x54>
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	699b      	ldr	r3, [r3, #24]
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d01c      	beq.n	80119fa <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	685c      	ldr	r4, [r3, #4]
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	681d      	ldr	r5, [r3, #0]
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	691e      	ldr	r6, [r3, #16]
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80119d2:	4618      	mov	r0, r3
 80119d4:	f7ff ffb6 	bl	8011944 <makeFreeRtosPriority>
 80119d8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	695b      	ldr	r3, [r3, #20]
 80119de:	687a      	ldr	r2, [r7, #4]
 80119e0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80119e2:	9202      	str	r2, [sp, #8]
 80119e4:	9301      	str	r3, [sp, #4]
 80119e6:	9100      	str	r1, [sp, #0]
 80119e8:	683b      	ldr	r3, [r7, #0]
 80119ea:	4632      	mov	r2, r6
 80119ec:	4629      	mov	r1, r5
 80119ee:	4620      	mov	r0, r4
 80119f0:	f001 fb71 	bl	80130d6 <xTaskCreateStatic>
 80119f4:	4603      	mov	r3, r0
 80119f6:	60fb      	str	r3, [r7, #12]
 80119f8:	e01c      	b.n	8011a34 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	685c      	ldr	r4, [r3, #4]
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011a06:	b29e      	uxth	r6, r3
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011a0e:	4618      	mov	r0, r3
 8011a10:	f7ff ff98 	bl	8011944 <makeFreeRtosPriority>
 8011a14:	4602      	mov	r2, r0
 8011a16:	f107 030c 	add.w	r3, r7, #12
 8011a1a:	9301      	str	r3, [sp, #4]
 8011a1c:	9200      	str	r2, [sp, #0]
 8011a1e:	683b      	ldr	r3, [r7, #0]
 8011a20:	4632      	mov	r2, r6
 8011a22:	4629      	mov	r1, r5
 8011a24:	4620      	mov	r0, r4
 8011a26:	f001 fbaf 	bl	8013188 <xTaskCreate>
 8011a2a:	4603      	mov	r3, r0
 8011a2c:	2b01      	cmp	r3, #1
 8011a2e:	d001      	beq.n	8011a34 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8011a30:	2300      	movs	r3, #0
 8011a32:	e000      	b.n	8011a36 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8011a34:	68fb      	ldr	r3, [r7, #12]
}
 8011a36:	4618      	mov	r0, r3
 8011a38:	3714      	adds	r7, #20
 8011a3a:	46bd      	mov	sp, r7
 8011a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011a3e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8011a3e:	b580      	push	{r7, lr}
 8011a40:	b084      	sub	sp, #16
 8011a42:	af00      	add	r7, sp, #0
 8011a44:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d001      	beq.n	8011a54 <osDelay+0x16>
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	e000      	b.n	8011a56 <osDelay+0x18>
 8011a54:	2301      	movs	r3, #1
 8011a56:	4618      	mov	r0, r3
 8011a58:	f001 fcc4 	bl	80133e4 <vTaskDelay>
  
  return osOK;
 8011a5c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8011a5e:	4618      	mov	r0, r3
 8011a60:	3710      	adds	r7, #16
 8011a62:	46bd      	mov	sp, r7
 8011a64:	bd80      	pop	{r7, pc}
	...

08011a68 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8011a68:	b580      	push	{r7, lr}
 8011a6a:	b086      	sub	sp, #24
 8011a6c:	af02      	add	r7, sp, #8
 8011a6e:	6078      	str	r0, [r7, #4]
 8011a70:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8011a72:	2300      	movs	r3, #0
 8011a74:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8011a76:	2300      	movs	r3, #0
 8011a78:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8011a7a:	f7ff ff7b 	bl	8011974 <inHandlerMode>
 8011a7e:	4603      	mov	r3, r0
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d01c      	beq.n	8011abe <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8011a84:	6839      	ldr	r1, [r7, #0]
 8011a86:	f107 0208 	add.w	r2, r7, #8
 8011a8a:	f107 030c 	add.w	r3, r7, #12
 8011a8e:	9300      	str	r3, [sp, #0]
 8011a90:	4613      	mov	r3, r2
 8011a92:	2201      	movs	r2, #1
 8011a94:	6878      	ldr	r0, [r7, #4]
 8011a96:	f002 fbab 	bl	80141f0 <xTaskGenericNotifyFromISR>
 8011a9a:	4603      	mov	r3, r0
 8011a9c:	2b01      	cmp	r3, #1
 8011a9e:	d002      	beq.n	8011aa6 <osSignalSet+0x3e>
      return 0x80000000;
 8011aa0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011aa4:	e019      	b.n	8011ada <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d015      	beq.n	8011ad8 <osSignalSet+0x70>
 8011aac:	4b0d      	ldr	r3, [pc, #52]	; (8011ae4 <osSignalSet+0x7c>)
 8011aae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ab2:	601a      	str	r2, [r3, #0]
 8011ab4:	f3bf 8f4f 	dsb	sy
 8011ab8:	f3bf 8f6f 	isb	sy
 8011abc:	e00c      	b.n	8011ad8 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8011abe:	6839      	ldr	r1, [r7, #0]
 8011ac0:	f107 0308 	add.w	r3, r7, #8
 8011ac4:	2201      	movs	r2, #1
 8011ac6:	6878      	ldr	r0, [r7, #4]
 8011ac8:	f002 faf2 	bl	80140b0 <xTaskGenericNotify>
 8011acc:	4603      	mov	r3, r0
 8011ace:	2b01      	cmp	r3, #1
 8011ad0:	d002      	beq.n	8011ad8 <osSignalSet+0x70>
    return 0x80000000;
 8011ad2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011ad6:	e000      	b.n	8011ada <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8011ad8:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8011ada:	4618      	mov	r0, r3
 8011adc:	3710      	adds	r7, #16
 8011ade:	46bd      	mov	sp, r7
 8011ae0:	bd80      	pop	{r7, pc}
 8011ae2:	bf00      	nop
 8011ae4:	e000ed04 	.word	0xe000ed04

08011ae8 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8011ae8:	b590      	push	{r4, r7, lr}
 8011aea:	b089      	sub	sp, #36	; 0x24
 8011aec:	af00      	add	r7, sp, #0
 8011aee:	60f8      	str	r0, [r7, #12]
 8011af0:	60b9      	str	r1, [r7, #8]
 8011af2:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8011af4:	2300      	movs	r3, #0
 8011af6:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8011af8:	2300      	movs	r3, #0
 8011afa:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b02:	d103      	bne.n	8011b0c <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8011b04:	f04f 33ff 	mov.w	r3, #4294967295
 8011b08:	61fb      	str	r3, [r7, #28]
 8011b0a:	e009      	b.n	8011b20 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d006      	beq.n	8011b20 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8011b16:	69fb      	ldr	r3, [r7, #28]
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d101      	bne.n	8011b20 <osSignalWait+0x38>
      ticks = 1;
 8011b1c:	2301      	movs	r3, #1
 8011b1e:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8011b20:	f7ff ff28 	bl	8011974 <inHandlerMode>
 8011b24:	4603      	mov	r3, r0
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d002      	beq.n	8011b30 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8011b2a:	2382      	movs	r3, #130	; 0x82
 8011b2c:	613b      	str	r3, [r7, #16]
 8011b2e:	e01b      	b.n	8011b68 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8011b30:	68b9      	ldr	r1, [r7, #8]
 8011b32:	f107 0310 	add.w	r3, r7, #16
 8011b36:	1d1a      	adds	r2, r3, #4
 8011b38:	69fb      	ldr	r3, [r7, #28]
 8011b3a:	2000      	movs	r0, #0
 8011b3c:	f002 fa5e 	bl	8013ffc <xTaskNotifyWait>
 8011b40:	4603      	mov	r3, r0
 8011b42:	2b01      	cmp	r3, #1
 8011b44:	d008      	beq.n	8011b58 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8011b46:	69fb      	ldr	r3, [r7, #28]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d102      	bne.n	8011b52 <osSignalWait+0x6a>
 8011b4c:	2300      	movs	r3, #0
 8011b4e:	613b      	str	r3, [r7, #16]
 8011b50:	e00a      	b.n	8011b68 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8011b52:	2340      	movs	r3, #64	; 0x40
 8011b54:	613b      	str	r3, [r7, #16]
 8011b56:	e007      	b.n	8011b68 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8011b58:	697b      	ldr	r3, [r7, #20]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	da02      	bge.n	8011b64 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8011b5e:	2386      	movs	r3, #134	; 0x86
 8011b60:	613b      	str	r3, [r7, #16]
 8011b62:	e001      	b.n	8011b68 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8011b64:	2308      	movs	r3, #8
 8011b66:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	461c      	mov	r4, r3
 8011b6c:	f107 0310 	add.w	r3, r7, #16
 8011b70:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011b74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8011b78:	68f8      	ldr	r0, [r7, #12]
 8011b7a:	3724      	adds	r7, #36	; 0x24
 8011b7c:	46bd      	mov	sp, r7
 8011b7e:	bd90      	pop	{r4, r7, pc}

08011b80 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8011b80:	b580      	push	{r7, lr}
 8011b82:	b082      	sub	sp, #8
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	685b      	ldr	r3, [r3, #4]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d007      	beq.n	8011ba0 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	685b      	ldr	r3, [r3, #4]
 8011b94:	4619      	mov	r1, r3
 8011b96:	2001      	movs	r0, #1
 8011b98:	f000 fce0 	bl	801255c <xQueueCreateMutexStatic>
 8011b9c:	4603      	mov	r3, r0
 8011b9e:	e003      	b.n	8011ba8 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8011ba0:	2001      	movs	r0, #1
 8011ba2:	f000 fcc3 	bl	801252c <xQueueCreateMutex>
 8011ba6:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8011ba8:	4618      	mov	r0, r3
 8011baa:	3708      	adds	r7, #8
 8011bac:	46bd      	mov	sp, r7
 8011bae:	bd80      	pop	{r7, pc}

08011bb0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8011bb0:	b580      	push	{r7, lr}
 8011bb2:	b084      	sub	sp, #16
 8011bb4:	af00      	add	r7, sp, #0
 8011bb6:	6078      	str	r0, [r7, #4]
 8011bb8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8011bba:	2300      	movs	r3, #0
 8011bbc:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d101      	bne.n	8011bc8 <osMutexWait+0x18>
    return osErrorParameter;
 8011bc4:	2380      	movs	r3, #128	; 0x80
 8011bc6:	e03a      	b.n	8011c3e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8011bc8:	2300      	movs	r3, #0
 8011bca:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8011bcc:	683b      	ldr	r3, [r7, #0]
 8011bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011bd2:	d103      	bne.n	8011bdc <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8011bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8011bd8:	60fb      	str	r3, [r7, #12]
 8011bda:	e009      	b.n	8011bf0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8011bdc:	683b      	ldr	r3, [r7, #0]
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d006      	beq.n	8011bf0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8011be2:	683b      	ldr	r3, [r7, #0]
 8011be4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d101      	bne.n	8011bf0 <osMutexWait+0x40>
      ticks = 1;
 8011bec:	2301      	movs	r3, #1
 8011bee:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8011bf0:	f7ff fec0 	bl	8011974 <inHandlerMode>
 8011bf4:	4603      	mov	r3, r0
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d017      	beq.n	8011c2a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8011bfa:	f107 0308 	add.w	r3, r7, #8
 8011bfe:	461a      	mov	r2, r3
 8011c00:	2100      	movs	r1, #0
 8011c02:	6878      	ldr	r0, [r7, #4]
 8011c04:	f001 f8c2 	bl	8012d8c <xQueueReceiveFromISR>
 8011c08:	4603      	mov	r3, r0
 8011c0a:	2b01      	cmp	r3, #1
 8011c0c:	d001      	beq.n	8011c12 <osMutexWait+0x62>
      return osErrorOS;
 8011c0e:	23ff      	movs	r3, #255	; 0xff
 8011c10:	e015      	b.n	8011c3e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8011c12:	68bb      	ldr	r3, [r7, #8]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d011      	beq.n	8011c3c <osMutexWait+0x8c>
 8011c18:	4b0b      	ldr	r3, [pc, #44]	; (8011c48 <osMutexWait+0x98>)
 8011c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c1e:	601a      	str	r2, [r3, #0]
 8011c20:	f3bf 8f4f 	dsb	sy
 8011c24:	f3bf 8f6f 	isb	sy
 8011c28:	e008      	b.n	8011c3c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8011c2a:	68f9      	ldr	r1, [r7, #12]
 8011c2c:	6878      	ldr	r0, [r7, #4]
 8011c2e:	f000 ffa5 	bl	8012b7c <xQueueSemaphoreTake>
 8011c32:	4603      	mov	r3, r0
 8011c34:	2b01      	cmp	r3, #1
 8011c36:	d001      	beq.n	8011c3c <osMutexWait+0x8c>
    return osErrorOS;
 8011c38:	23ff      	movs	r3, #255	; 0xff
 8011c3a:	e000      	b.n	8011c3e <osMutexWait+0x8e>
  }
  
  return osOK;
 8011c3c:	2300      	movs	r3, #0
}
 8011c3e:	4618      	mov	r0, r3
 8011c40:	3710      	adds	r7, #16
 8011c42:	46bd      	mov	sp, r7
 8011c44:	bd80      	pop	{r7, pc}
 8011c46:	bf00      	nop
 8011c48:	e000ed04 	.word	0xe000ed04

08011c4c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8011c4c:	b580      	push	{r7, lr}
 8011c4e:	b084      	sub	sp, #16
 8011c50:	af00      	add	r7, sp, #0
 8011c52:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8011c54:	2300      	movs	r3, #0
 8011c56:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8011c58:	2300      	movs	r3, #0
 8011c5a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8011c5c:	f7ff fe8a 	bl	8011974 <inHandlerMode>
 8011c60:	4603      	mov	r3, r0
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d016      	beq.n	8011c94 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8011c66:	f107 0308 	add.w	r3, r7, #8
 8011c6a:	4619      	mov	r1, r3
 8011c6c:	6878      	ldr	r0, [r7, #4]
 8011c6e:	f000 fe1f 	bl	80128b0 <xQueueGiveFromISR>
 8011c72:	4603      	mov	r3, r0
 8011c74:	2b01      	cmp	r3, #1
 8011c76:	d001      	beq.n	8011c7c <osMutexRelease+0x30>
      return osErrorOS;
 8011c78:	23ff      	movs	r3, #255	; 0xff
 8011c7a:	e017      	b.n	8011cac <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011c7c:	68bb      	ldr	r3, [r7, #8]
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d013      	beq.n	8011caa <osMutexRelease+0x5e>
 8011c82:	4b0c      	ldr	r3, [pc, #48]	; (8011cb4 <osMutexRelease+0x68>)
 8011c84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c88:	601a      	str	r2, [r3, #0]
 8011c8a:	f3bf 8f4f 	dsb	sy
 8011c8e:	f3bf 8f6f 	isb	sy
 8011c92:	e00a      	b.n	8011caa <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8011c94:	2300      	movs	r3, #0
 8011c96:	2200      	movs	r2, #0
 8011c98:	2100      	movs	r1, #0
 8011c9a:	6878      	ldr	r0, [r7, #4]
 8011c9c:	f000 fc7a 	bl	8012594 <xQueueGenericSend>
 8011ca0:	4603      	mov	r3, r0
 8011ca2:	2b01      	cmp	r3, #1
 8011ca4:	d001      	beq.n	8011caa <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8011ca6:	23ff      	movs	r3, #255	; 0xff
 8011ca8:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8011caa:	68fb      	ldr	r3, [r7, #12]
}
 8011cac:	4618      	mov	r0, r3
 8011cae:	3710      	adds	r7, #16
 8011cb0:	46bd      	mov	sp, r7
 8011cb2:	bd80      	pop	{r7, pc}
 8011cb4:	e000ed04 	.word	0xe000ed04

08011cb8 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8011cb8:	b580      	push	{r7, lr}
 8011cba:	b086      	sub	sp, #24
 8011cbc:	af00      	add	r7, sp, #0
 8011cbe:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	685b      	ldr	r3, [r3, #4]
 8011cc4:	3303      	adds	r3, #3
 8011cc6:	f023 0303 	bic.w	r3, r3, #3
 8011cca:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8011ccc:	2014      	movs	r0, #20
 8011cce:	f002 fdff 	bl	80148d0 <pvPortMalloc>
 8011cd2:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8011cd4:	697b      	ldr	r3, [r7, #20]
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d046      	beq.n	8011d68 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	681a      	ldr	r2, [r3, #0]
 8011cde:	697b      	ldr	r3, [r7, #20]
 8011ce0:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8011ce2:	68fa      	ldr	r2, [r7, #12]
 8011ce4:	697b      	ldr	r3, [r7, #20]
 8011ce6:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8011ce8:	697b      	ldr	r3, [r7, #20]
 8011cea:	2200      	movs	r2, #0
 8011cec:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	f002 fdec 	bl	80148d0 <pvPortMalloc>
 8011cf8:	4602      	mov	r2, r0
 8011cfa:	697b      	ldr	r3, [r7, #20]
 8011cfc:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8011cfe:	697b      	ldr	r3, [r7, #20]
 8011d00:	685b      	ldr	r3, [r3, #4]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d02b      	beq.n	8011d5e <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	68fa      	ldr	r2, [r7, #12]
 8011d0c:	fb02 f303 	mul.w	r3, r2, r3
 8011d10:	4618      	mov	r0, r3
 8011d12:	f002 fddd 	bl	80148d0 <pvPortMalloc>
 8011d16:	4602      	mov	r2, r0
 8011d18:	697b      	ldr	r3, [r7, #20]
 8011d1a:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8011d1c:	697b      	ldr	r3, [r7, #20]
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d011      	beq.n	8011d48 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8011d24:	2300      	movs	r3, #0
 8011d26:	613b      	str	r3, [r7, #16]
 8011d28:	e008      	b.n	8011d3c <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8011d2a:	697b      	ldr	r3, [r7, #20]
 8011d2c:	685a      	ldr	r2, [r3, #4]
 8011d2e:	693b      	ldr	r3, [r7, #16]
 8011d30:	4413      	add	r3, r2
 8011d32:	2200      	movs	r2, #0
 8011d34:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8011d36:	693b      	ldr	r3, [r7, #16]
 8011d38:	3301      	adds	r3, #1
 8011d3a:	613b      	str	r3, [r7, #16]
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	693a      	ldr	r2, [r7, #16]
 8011d42:	429a      	cmp	r2, r3
 8011d44:	d3f1      	bcc.n	8011d2a <osPoolCreate+0x72>
 8011d46:	e00f      	b.n	8011d68 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8011d48:	697b      	ldr	r3, [r7, #20]
 8011d4a:	685b      	ldr	r3, [r3, #4]
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	f002 fe81 	bl	8014a54 <vPortFree>
        vPortFree(thePool);
 8011d52:	6978      	ldr	r0, [r7, #20]
 8011d54:	f002 fe7e 	bl	8014a54 <vPortFree>
        thePool = NULL;
 8011d58:	2300      	movs	r3, #0
 8011d5a:	617b      	str	r3, [r7, #20]
 8011d5c:	e004      	b.n	8011d68 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8011d5e:	6978      	ldr	r0, [r7, #20]
 8011d60:	f002 fe78 	bl	8014a54 <vPortFree>
      thePool = NULL;
 8011d64:	2300      	movs	r3, #0
 8011d66:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8011d68:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8011d6a:	4618      	mov	r0, r3
 8011d6c:	3718      	adds	r7, #24
 8011d6e:	46bd      	mov	sp, r7
 8011d70:	bd80      	pop	{r7, pc}

08011d72 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8011d72:	b580      	push	{r7, lr}
 8011d74:	b08a      	sub	sp, #40	; 0x28
 8011d76:	af00      	add	r7, sp, #0
 8011d78:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8011d7a:	2300      	movs	r3, #0
 8011d7c:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 8011d7e:	2300      	movs	r3, #0
 8011d80:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8011d82:	f7ff fdf7 	bl	8011974 <inHandlerMode>
 8011d86:	4603      	mov	r3, r0
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d00e      	beq.n	8011daa <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011d8c:	f3ef 8211 	mrs	r2, BASEPRI
 8011d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d94:	f383 8811 	msr	BASEPRI, r3
 8011d98:	f3bf 8f6f 	isb	sy
 8011d9c:	f3bf 8f4f 	dsb	sy
 8011da0:	617a      	str	r2, [r7, #20]
 8011da2:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011da4:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8011da6:	627b      	str	r3, [r7, #36]	; 0x24
 8011da8:	e001      	b.n	8011dae <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8011daa:	f002 fc77 	bl	801469c <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8011dae:	2300      	movs	r3, #0
 8011db0:	61fb      	str	r3, [r7, #28]
 8011db2:	e029      	b.n	8011e08 <osPoolAlloc+0x96>
    index = pool_id->currentIndex + i;
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	691b      	ldr	r3, [r3, #16]
 8011db8:	69fa      	ldr	r2, [r7, #28]
 8011dba:	4413      	add	r3, r2
 8011dbc:	61bb      	str	r3, [r7, #24]
    if (index >= pool_id->pool_sz) {
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	689b      	ldr	r3, [r3, #8]
 8011dc2:	69ba      	ldr	r2, [r7, #24]
 8011dc4:	429a      	cmp	r2, r3
 8011dc6:	d301      	bcc.n	8011dcc <osPoolAlloc+0x5a>
      index = 0;
 8011dc8:	2300      	movs	r3, #0
 8011dca:	61bb      	str	r3, [r7, #24]
    }
    
    if (pool_id->markers[index] == 0) {
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	685a      	ldr	r2, [r3, #4]
 8011dd0:	69bb      	ldr	r3, [r7, #24]
 8011dd2:	4413      	add	r3, r2
 8011dd4:	781b      	ldrb	r3, [r3, #0]
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d113      	bne.n	8011e02 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	685a      	ldr	r2, [r3, #4]
 8011dde:	69bb      	ldr	r3, [r7, #24]
 8011de0:	4413      	add	r3, r2
 8011de2:	2201      	movs	r2, #1
 8011de4:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	4619      	mov	r1, r3
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	68db      	ldr	r3, [r3, #12]
 8011df0:	69ba      	ldr	r2, [r7, #24]
 8011df2:	fb02 f303 	mul.w	r3, r2, r3
 8011df6:	440b      	add	r3, r1
 8011df8:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	69ba      	ldr	r2, [r7, #24]
 8011dfe:	611a      	str	r2, [r3, #16]
      break;
 8011e00:	e007      	b.n	8011e12 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8011e02:	69fb      	ldr	r3, [r7, #28]
 8011e04:	3301      	adds	r3, #1
 8011e06:	61fb      	str	r3, [r7, #28]
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	689b      	ldr	r3, [r3, #8]
 8011e0c:	69fa      	ldr	r2, [r7, #28]
 8011e0e:	429a      	cmp	r2, r3
 8011e10:	d3d0      	bcc.n	8011db4 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8011e12:	f7ff fdaf 	bl	8011974 <inHandlerMode>
 8011e16:	4603      	mov	r3, r0
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d005      	beq.n	8011e28 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8011e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e1e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	f383 8811 	msr	BASEPRI, r3
 8011e26:	e001      	b.n	8011e2c <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8011e28:	f002 fc66 	bl	80146f8 <vPortExitCritical>
  }
  
  return p;
 8011e2c:	6a3b      	ldr	r3, [r7, #32]
}
 8011e2e:	4618      	mov	r0, r3
 8011e30:	3728      	adds	r7, #40	; 0x28
 8011e32:	46bd      	mov	sp, r7
 8011e34:	bd80      	pop	{r7, pc}

08011e36 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8011e36:	b480      	push	{r7}
 8011e38:	b085      	sub	sp, #20
 8011e3a:	af00      	add	r7, sp, #0
 8011e3c:	6078      	str	r0, [r7, #4]
 8011e3e:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d101      	bne.n	8011e4a <osPoolFree+0x14>
    return osErrorParameter;
 8011e46:	2380      	movs	r3, #128	; 0x80
 8011e48:	e030      	b.n	8011eac <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 8011e4a:	683b      	ldr	r3, [r7, #0]
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d101      	bne.n	8011e54 <osPoolFree+0x1e>
    return osErrorParameter;
 8011e50:	2380      	movs	r3, #128	; 0x80
 8011e52:	e02b      	b.n	8011eac <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	683a      	ldr	r2, [r7, #0]
 8011e5a:	429a      	cmp	r2, r3
 8011e5c:	d201      	bcs.n	8011e62 <osPoolFree+0x2c>
    return osErrorParameter;
 8011e5e:	2380      	movs	r3, #128	; 0x80
 8011e60:	e024      	b.n	8011eac <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8011e62:	683b      	ldr	r3, [r7, #0]
 8011e64:	687a      	ldr	r2, [r7, #4]
 8011e66:	6812      	ldr	r2, [r2, #0]
 8011e68:	1a9b      	subs	r3, r3, r2
 8011e6a:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	68da      	ldr	r2, [r3, #12]
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	fbb3 f1f2 	udiv	r1, r3, r2
 8011e76:	fb02 f201 	mul.w	r2, r2, r1
 8011e7a:	1a9b      	subs	r3, r3, r2
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d001      	beq.n	8011e84 <osPoolFree+0x4e>
    return osErrorParameter;
 8011e80:	2380      	movs	r3, #128	; 0x80
 8011e82:	e013      	b.n	8011eac <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	68db      	ldr	r3, [r3, #12]
 8011e88:	68fa      	ldr	r2, [r7, #12]
 8011e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8011e8e:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	689b      	ldr	r3, [r3, #8]
 8011e94:	68fa      	ldr	r2, [r7, #12]
 8011e96:	429a      	cmp	r2, r3
 8011e98:	d301      	bcc.n	8011e9e <osPoolFree+0x68>
    return osErrorParameter;
 8011e9a:	2380      	movs	r3, #128	; 0x80
 8011e9c:	e006      	b.n	8011eac <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	685a      	ldr	r2, [r3, #4]
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	4413      	add	r3, r2
 8011ea6:	2200      	movs	r2, #0
 8011ea8:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8011eaa:	2300      	movs	r3, #0
}
 8011eac:	4618      	mov	r0, r3
 8011eae:	3714      	adds	r7, #20
 8011eb0:	46bd      	mov	sp, r7
 8011eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb6:	4770      	bx	lr

08011eb8 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8011eb8:	b590      	push	{r4, r7, lr}
 8011eba:	b087      	sub	sp, #28
 8011ebc:	af00      	add	r7, sp, #0
 8011ebe:	6078      	str	r0, [r7, #4]
 8011ec0:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	60fb      	str	r3, [r7, #12]
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	685b      	ldr	r3, [r3, #4]
 8011ecc:	613b      	str	r3, [r7, #16]
 8011ece:	2300      	movs	r3, #0
 8011ed0:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	689c      	ldr	r4, [r3, #8]
 8011ed6:	200c      	movs	r0, #12
 8011ed8:	f002 fcfa 	bl	80148d0 <pvPortMalloc>
 8011edc:	4603      	mov	r3, r0
 8011ede:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	689b      	ldr	r3, [r3, #8]
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d101      	bne.n	8011eee <osMailCreate+0x36>
    return NULL;
 8011eea:	2300      	movs	r3, #0
 8011eec:	e038      	b.n	8011f60 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	689b      	ldr	r3, [r3, #8]
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	687a      	ldr	r2, [r7, #4]
 8011ef6:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	6818      	ldr	r0, [r3, #0]
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	689b      	ldr	r3, [r3, #8]
 8011f00:	681c      	ldr	r4, [r3, #0]
 8011f02:	2200      	movs	r2, #0
 8011f04:	2104      	movs	r1, #4
 8011f06:	f000 fa9b 	bl	8012440 <xQueueGenericCreate>
 8011f0a:	4603      	mov	r3, r0
 8011f0c:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	689b      	ldr	r3, [r3, #8]
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	685b      	ldr	r3, [r3, #4]
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d107      	bne.n	8011f2a <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	689b      	ldr	r3, [r3, #8]
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	4618      	mov	r0, r3
 8011f22:	f002 fd97 	bl	8014a54 <vPortFree>
    return NULL;
 8011f26:	2300      	movs	r3, #0
 8011f28:	e01a      	b.n	8011f60 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	689b      	ldr	r3, [r3, #8]
 8011f2e:	681c      	ldr	r4, [r3, #0]
 8011f30:	f107 030c 	add.w	r3, r7, #12
 8011f34:	4618      	mov	r0, r3
 8011f36:	f7ff febf 	bl	8011cb8 <osPoolCreate>
 8011f3a:	4603      	mov	r3, r0
 8011f3c:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	689b      	ldr	r3, [r3, #8]
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	689b      	ldr	r3, [r3, #8]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d107      	bne.n	8011f5a <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	689b      	ldr	r3, [r3, #8]
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	4618      	mov	r0, r3
 8011f52:	f002 fd7f 	bl	8014a54 <vPortFree>
    return NULL;
 8011f56:	2300      	movs	r3, #0
 8011f58:	e002      	b.n	8011f60 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	689b      	ldr	r3, [r3, #8]
 8011f5e:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8011f60:	4618      	mov	r0, r3
 8011f62:	371c      	adds	r7, #28
 8011f64:	46bd      	mov	sp, r7
 8011f66:	bd90      	pop	{r4, r7, pc}

08011f68 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 8011f68:	b580      	push	{r7, lr}
 8011f6a:	b084      	sub	sp, #16
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	6078      	str	r0, [r7, #4]
 8011f70:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d101      	bne.n	8011f7c <osMailAlloc+0x14>
    return NULL;
 8011f78:	2300      	movs	r3, #0
 8011f7a:	e006      	b.n	8011f8a <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	689b      	ldr	r3, [r3, #8]
 8011f80:	4618      	mov	r0, r3
 8011f82:	f7ff fef6 	bl	8011d72 <osPoolAlloc>
 8011f86:	60f8      	str	r0, [r7, #12]
  
  return p;
 8011f88:	68fb      	ldr	r3, [r7, #12]
}
 8011f8a:	4618      	mov	r0, r3
 8011f8c:	3710      	adds	r7, #16
 8011f8e:	46bd      	mov	sp, r7
 8011f90:	bd80      	pop	{r7, pc}
	...

08011f94 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8011f94:	b580      	push	{r7, lr}
 8011f96:	b084      	sub	sp, #16
 8011f98:	af00      	add	r7, sp, #0
 8011f9a:	6078      	str	r0, [r7, #4]
 8011f9c:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d101      	bne.n	8011fa8 <osMailPut+0x14>
    return osErrorParameter;
 8011fa4:	2380      	movs	r3, #128	; 0x80
 8011fa6:	e02c      	b.n	8012002 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8011fa8:	2300      	movs	r3, #0
 8011faa:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8011fac:	f7ff fce2 	bl	8011974 <inHandlerMode>
 8011fb0:	4603      	mov	r3, r0
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d018      	beq.n	8011fe8 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	6858      	ldr	r0, [r3, #4]
 8011fba:	f107 020c 	add.w	r2, r7, #12
 8011fbe:	4639      	mov	r1, r7
 8011fc0:	2300      	movs	r3, #0
 8011fc2:	f000 fbe1 	bl	8012788 <xQueueGenericSendFromISR>
 8011fc6:	4603      	mov	r3, r0
 8011fc8:	2b01      	cmp	r3, #1
 8011fca:	d001      	beq.n	8011fd0 <osMailPut+0x3c>
      return osErrorOS;
 8011fcc:	23ff      	movs	r3, #255	; 0xff
 8011fce:	e018      	b.n	8012002 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d014      	beq.n	8012000 <osMailPut+0x6c>
 8011fd6:	4b0d      	ldr	r3, [pc, #52]	; (801200c <osMailPut+0x78>)
 8011fd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011fdc:	601a      	str	r2, [r3, #0]
 8011fde:	f3bf 8f4f 	dsb	sy
 8011fe2:	f3bf 8f6f 	isb	sy
 8011fe6:	e00b      	b.n	8012000 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	6858      	ldr	r0, [r3, #4]
 8011fec:	4639      	mov	r1, r7
 8011fee:	2300      	movs	r3, #0
 8011ff0:	2200      	movs	r2, #0
 8011ff2:	f000 facf 	bl	8012594 <xQueueGenericSend>
 8011ff6:	4603      	mov	r3, r0
 8011ff8:	2b01      	cmp	r3, #1
 8011ffa:	d001      	beq.n	8012000 <osMailPut+0x6c>
      return osErrorOS;
 8011ffc:	23ff      	movs	r3, #255	; 0xff
 8011ffe:	e000      	b.n	8012002 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8012000:	2300      	movs	r3, #0
}
 8012002:	4618      	mov	r0, r3
 8012004:	3710      	adds	r7, #16
 8012006:	46bd      	mov	sp, r7
 8012008:	bd80      	pop	{r7, pc}
 801200a:	bf00      	nop
 801200c:	e000ed04 	.word	0xe000ed04

08012010 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8012010:	b590      	push	{r4, r7, lr}
 8012012:	b08b      	sub	sp, #44	; 0x2c
 8012014:	af00      	add	r7, sp, #0
 8012016:	60f8      	str	r0, [r7, #12]
 8012018:	60b9      	str	r1, [r7, #8]
 801201a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 801201c:	68bb      	ldr	r3, [r7, #8]
 801201e:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8012020:	68bb      	ldr	r3, [r7, #8]
 8012022:	2b00      	cmp	r3, #0
 8012024:	d10a      	bne.n	801203c <osMailGet+0x2c>
    event.status = osErrorParameter;
 8012026:	2380      	movs	r3, #128	; 0x80
 8012028:	617b      	str	r3, [r7, #20]
    return event;
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	461c      	mov	r4, r3
 801202e:	f107 0314 	add.w	r3, r7, #20
 8012032:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012036:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801203a:	e056      	b.n	80120ea <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 801203c:	2300      	movs	r3, #0
 801203e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8012040:	2300      	movs	r3, #0
 8012042:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	f1b3 3fff 	cmp.w	r3, #4294967295
 801204a:	d103      	bne.n	8012054 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 801204c:	f04f 33ff 	mov.w	r3, #4294967295
 8012050:	627b      	str	r3, [r7, #36]	; 0x24
 8012052:	e009      	b.n	8012068 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	2b00      	cmp	r3, #0
 8012058:	d006      	beq.n	8012068 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 801205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012060:	2b00      	cmp	r3, #0
 8012062:	d101      	bne.n	8012068 <osMailGet+0x58>
      ticks = 1;
 8012064:	2301      	movs	r3, #1
 8012066:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8012068:	f7ff fc84 	bl	8011974 <inHandlerMode>
 801206c:	4603      	mov	r3, r0
 801206e:	2b00      	cmp	r3, #0
 8012070:	d01d      	beq.n	80120ae <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8012072:	68bb      	ldr	r3, [r7, #8]
 8012074:	6858      	ldr	r0, [r3, #4]
 8012076:	f107 0220 	add.w	r2, r7, #32
 801207a:	f107 0314 	add.w	r3, r7, #20
 801207e:	3304      	adds	r3, #4
 8012080:	4619      	mov	r1, r3
 8012082:	f000 fe83 	bl	8012d8c <xQueueReceiveFromISR>
 8012086:	4603      	mov	r3, r0
 8012088:	2b01      	cmp	r3, #1
 801208a:	d102      	bne.n	8012092 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 801208c:	2320      	movs	r3, #32
 801208e:	617b      	str	r3, [r7, #20]
 8012090:	e001      	b.n	8012096 <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 8012092:	2300      	movs	r3, #0
 8012094:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012096:	6a3b      	ldr	r3, [r7, #32]
 8012098:	2b00      	cmp	r3, #0
 801209a:	d01e      	beq.n	80120da <osMailGet+0xca>
 801209c:	4b15      	ldr	r3, [pc, #84]	; (80120f4 <osMailGet+0xe4>)
 801209e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80120a2:	601a      	str	r2, [r3, #0]
 80120a4:	f3bf 8f4f 	dsb	sy
 80120a8:	f3bf 8f6f 	isb	sy
 80120ac:	e015      	b.n	80120da <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 80120ae:	68bb      	ldr	r3, [r7, #8]
 80120b0:	6858      	ldr	r0, [r3, #4]
 80120b2:	f107 0314 	add.w	r3, r7, #20
 80120b6:	3304      	adds	r3, #4
 80120b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80120ba:	4619      	mov	r1, r3
 80120bc:	f000 fc82 	bl	80129c4 <xQueueReceive>
 80120c0:	4603      	mov	r3, r0
 80120c2:	2b01      	cmp	r3, #1
 80120c4:	d102      	bne.n	80120cc <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 80120c6:	2320      	movs	r3, #32
 80120c8:	617b      	str	r3, [r7, #20]
 80120ca:	e006      	b.n	80120da <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80120cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d101      	bne.n	80120d6 <osMailGet+0xc6>
 80120d2:	2300      	movs	r3, #0
 80120d4:	e000      	b.n	80120d8 <osMailGet+0xc8>
 80120d6:	2340      	movs	r3, #64	; 0x40
 80120d8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80120da:	68fb      	ldr	r3, [r7, #12]
 80120dc:	461c      	mov	r4, r3
 80120de:	f107 0314 	add.w	r3, r7, #20
 80120e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80120e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80120ea:	68f8      	ldr	r0, [r7, #12]
 80120ec:	372c      	adds	r7, #44	; 0x2c
 80120ee:	46bd      	mov	sp, r7
 80120f0:	bd90      	pop	{r4, r7, pc}
 80120f2:	bf00      	nop
 80120f4:	e000ed04 	.word	0xe000ed04

080120f8 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 80120f8:	b580      	push	{r7, lr}
 80120fa:	b082      	sub	sp, #8
 80120fc:	af00      	add	r7, sp, #0
 80120fe:	6078      	str	r0, [r7, #4]
 8012100:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	2b00      	cmp	r3, #0
 8012106:	d101      	bne.n	801210c <osMailFree+0x14>
    return osErrorParameter;
 8012108:	2380      	movs	r3, #128	; 0x80
 801210a:	e006      	b.n	801211a <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	689b      	ldr	r3, [r3, #8]
 8012110:	6839      	ldr	r1, [r7, #0]
 8012112:	4618      	mov	r0, r3
 8012114:	f7ff fe8f 	bl	8011e36 <osPoolFree>
 8012118:	4603      	mov	r3, r0
}
 801211a:	4618      	mov	r0, r3
 801211c:	3708      	adds	r7, #8
 801211e:	46bd      	mov	sp, r7
 8012120:	bd80      	pop	{r7, pc}

08012122 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012122:	b480      	push	{r7}
 8012124:	b083      	sub	sp, #12
 8012126:	af00      	add	r7, sp, #0
 8012128:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	f103 0208 	add.w	r2, r3, #8
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	f04f 32ff 	mov.w	r2, #4294967295
 801213a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	f103 0208 	add.w	r2, r3, #8
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	f103 0208 	add.w	r2, r3, #8
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	2200      	movs	r2, #0
 8012154:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012156:	bf00      	nop
 8012158:	370c      	adds	r7, #12
 801215a:	46bd      	mov	sp, r7
 801215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012160:	4770      	bx	lr

08012162 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012162:	b480      	push	{r7}
 8012164:	b083      	sub	sp, #12
 8012166:	af00      	add	r7, sp, #0
 8012168:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	2200      	movs	r2, #0
 801216e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012170:	bf00      	nop
 8012172:	370c      	adds	r7, #12
 8012174:	46bd      	mov	sp, r7
 8012176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801217a:	4770      	bx	lr

0801217c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801217c:	b480      	push	{r7}
 801217e:	b085      	sub	sp, #20
 8012180:	af00      	add	r7, sp, #0
 8012182:	6078      	str	r0, [r7, #4]
 8012184:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	685b      	ldr	r3, [r3, #4]
 801218a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801218c:	683b      	ldr	r3, [r7, #0]
 801218e:	68fa      	ldr	r2, [r7, #12]
 8012190:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	689a      	ldr	r2, [r3, #8]
 8012196:	683b      	ldr	r3, [r7, #0]
 8012198:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	689b      	ldr	r3, [r3, #8]
 801219e:	683a      	ldr	r2, [r7, #0]
 80121a0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	683a      	ldr	r2, [r7, #0]
 80121a6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80121a8:	683b      	ldr	r3, [r7, #0]
 80121aa:	687a      	ldr	r2, [r7, #4]
 80121ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	1c5a      	adds	r2, r3, #1
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	601a      	str	r2, [r3, #0]
}
 80121b8:	bf00      	nop
 80121ba:	3714      	adds	r7, #20
 80121bc:	46bd      	mov	sp, r7
 80121be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121c2:	4770      	bx	lr

080121c4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80121c4:	b480      	push	{r7}
 80121c6:	b085      	sub	sp, #20
 80121c8:	af00      	add	r7, sp, #0
 80121ca:	6078      	str	r0, [r7, #4]
 80121cc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80121ce:	683b      	ldr	r3, [r7, #0]
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80121d4:	68bb      	ldr	r3, [r7, #8]
 80121d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121da:	d103      	bne.n	80121e4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	691b      	ldr	r3, [r3, #16]
 80121e0:	60fb      	str	r3, [r7, #12]
 80121e2:	e00c      	b.n	80121fe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	3308      	adds	r3, #8
 80121e8:	60fb      	str	r3, [r7, #12]
 80121ea:	e002      	b.n	80121f2 <vListInsert+0x2e>
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	685b      	ldr	r3, [r3, #4]
 80121f0:	60fb      	str	r3, [r7, #12]
 80121f2:	68fb      	ldr	r3, [r7, #12]
 80121f4:	685b      	ldr	r3, [r3, #4]
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	68ba      	ldr	r2, [r7, #8]
 80121fa:	429a      	cmp	r2, r3
 80121fc:	d2f6      	bcs.n	80121ec <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	685a      	ldr	r2, [r3, #4]
 8012202:	683b      	ldr	r3, [r7, #0]
 8012204:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012206:	683b      	ldr	r3, [r7, #0]
 8012208:	685b      	ldr	r3, [r3, #4]
 801220a:	683a      	ldr	r2, [r7, #0]
 801220c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801220e:	683b      	ldr	r3, [r7, #0]
 8012210:	68fa      	ldr	r2, [r7, #12]
 8012212:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	683a      	ldr	r2, [r7, #0]
 8012218:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 801221a:	683b      	ldr	r3, [r7, #0]
 801221c:	687a      	ldr	r2, [r7, #4]
 801221e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	1c5a      	adds	r2, r3, #1
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	601a      	str	r2, [r3, #0]
}
 801222a:	bf00      	nop
 801222c:	3714      	adds	r7, #20
 801222e:	46bd      	mov	sp, r7
 8012230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012234:	4770      	bx	lr

08012236 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012236:	b480      	push	{r7}
 8012238:	b085      	sub	sp, #20
 801223a:	af00      	add	r7, sp, #0
 801223c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	691b      	ldr	r3, [r3, #16]
 8012242:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	685b      	ldr	r3, [r3, #4]
 8012248:	687a      	ldr	r2, [r7, #4]
 801224a:	6892      	ldr	r2, [r2, #8]
 801224c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	689b      	ldr	r3, [r3, #8]
 8012252:	687a      	ldr	r2, [r7, #4]
 8012254:	6852      	ldr	r2, [r2, #4]
 8012256:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	685b      	ldr	r3, [r3, #4]
 801225c:	687a      	ldr	r2, [r7, #4]
 801225e:	429a      	cmp	r2, r3
 8012260:	d103      	bne.n	801226a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	689a      	ldr	r2, [r3, #8]
 8012266:	68fb      	ldr	r3, [r7, #12]
 8012268:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	2200      	movs	r2, #0
 801226e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	1e5a      	subs	r2, r3, #1
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	681b      	ldr	r3, [r3, #0]
}
 801227e:	4618      	mov	r0, r3
 8012280:	3714      	adds	r7, #20
 8012282:	46bd      	mov	sp, r7
 8012284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012288:	4770      	bx	lr
	...

0801228c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801228c:	b580      	push	{r7, lr}
 801228e:	b084      	sub	sp, #16
 8012290:	af00      	add	r7, sp, #0
 8012292:	6078      	str	r0, [r7, #4]
 8012294:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	2b00      	cmp	r3, #0
 801229e:	d109      	bne.n	80122b4 <xQueueGenericReset+0x28>
	__asm volatile
 80122a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122a4:	f383 8811 	msr	BASEPRI, r3
 80122a8:	f3bf 8f6f 	isb	sy
 80122ac:	f3bf 8f4f 	dsb	sy
 80122b0:	60bb      	str	r3, [r7, #8]
 80122b2:	e7fe      	b.n	80122b2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80122b4:	f002 f9f2 	bl	801469c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	681a      	ldr	r2, [r3, #0]
 80122bc:	68fb      	ldr	r3, [r7, #12]
 80122be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80122c0:	68f9      	ldr	r1, [r7, #12]
 80122c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80122c4:	fb01 f303 	mul.w	r3, r1, r3
 80122c8:	441a      	add	r2, r3
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80122ce:	68fb      	ldr	r3, [r7, #12]
 80122d0:	2200      	movs	r2, #0
 80122d2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	681a      	ldr	r2, [r3, #0]
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	681a      	ldr	r2, [r3, #0]
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80122e4:	3b01      	subs	r3, #1
 80122e6:	68f9      	ldr	r1, [r7, #12]
 80122e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80122ea:	fb01 f303 	mul.w	r3, r1, r3
 80122ee:	441a      	add	r2, r3
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80122f4:	68fb      	ldr	r3, [r7, #12]
 80122f6:	22ff      	movs	r2, #255	; 0xff
 80122f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	22ff      	movs	r2, #255	; 0xff
 8012300:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8012304:	683b      	ldr	r3, [r7, #0]
 8012306:	2b00      	cmp	r3, #0
 8012308:	d114      	bne.n	8012334 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	691b      	ldr	r3, [r3, #16]
 801230e:	2b00      	cmp	r3, #0
 8012310:	d01a      	beq.n	8012348 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	3310      	adds	r3, #16
 8012316:	4618      	mov	r0, r3
 8012318:	f001 fada 	bl	80138d0 <xTaskRemoveFromEventList>
 801231c:	4603      	mov	r3, r0
 801231e:	2b00      	cmp	r3, #0
 8012320:	d012      	beq.n	8012348 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012322:	4b0d      	ldr	r3, [pc, #52]	; (8012358 <xQueueGenericReset+0xcc>)
 8012324:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012328:	601a      	str	r2, [r3, #0]
 801232a:	f3bf 8f4f 	dsb	sy
 801232e:	f3bf 8f6f 	isb	sy
 8012332:	e009      	b.n	8012348 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	3310      	adds	r3, #16
 8012338:	4618      	mov	r0, r3
 801233a:	f7ff fef2 	bl	8012122 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	3324      	adds	r3, #36	; 0x24
 8012342:	4618      	mov	r0, r3
 8012344:	f7ff feed 	bl	8012122 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012348:	f002 f9d6 	bl	80146f8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801234c:	2301      	movs	r3, #1
}
 801234e:	4618      	mov	r0, r3
 8012350:	3710      	adds	r7, #16
 8012352:	46bd      	mov	sp, r7
 8012354:	bd80      	pop	{r7, pc}
 8012356:	bf00      	nop
 8012358:	e000ed04 	.word	0xe000ed04

0801235c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801235c:	b580      	push	{r7, lr}
 801235e:	b08e      	sub	sp, #56	; 0x38
 8012360:	af02      	add	r7, sp, #8
 8012362:	60f8      	str	r0, [r7, #12]
 8012364:	60b9      	str	r1, [r7, #8]
 8012366:	607a      	str	r2, [r7, #4]
 8012368:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	2b00      	cmp	r3, #0
 801236e:	d109      	bne.n	8012384 <xQueueGenericCreateStatic+0x28>
 8012370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012374:	f383 8811 	msr	BASEPRI, r3
 8012378:	f3bf 8f6f 	isb	sy
 801237c:	f3bf 8f4f 	dsb	sy
 8012380:	62bb      	str	r3, [r7, #40]	; 0x28
 8012382:	e7fe      	b.n	8012382 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012384:	683b      	ldr	r3, [r7, #0]
 8012386:	2b00      	cmp	r3, #0
 8012388:	d109      	bne.n	801239e <xQueueGenericCreateStatic+0x42>
 801238a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801238e:	f383 8811 	msr	BASEPRI, r3
 8012392:	f3bf 8f6f 	isb	sy
 8012396:	f3bf 8f4f 	dsb	sy
 801239a:	627b      	str	r3, [r7, #36]	; 0x24
 801239c:	e7fe      	b.n	801239c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d002      	beq.n	80123aa <xQueueGenericCreateStatic+0x4e>
 80123a4:	68bb      	ldr	r3, [r7, #8]
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d001      	beq.n	80123ae <xQueueGenericCreateStatic+0x52>
 80123aa:	2301      	movs	r3, #1
 80123ac:	e000      	b.n	80123b0 <xQueueGenericCreateStatic+0x54>
 80123ae:	2300      	movs	r3, #0
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d109      	bne.n	80123c8 <xQueueGenericCreateStatic+0x6c>
 80123b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123b8:	f383 8811 	msr	BASEPRI, r3
 80123bc:	f3bf 8f6f 	isb	sy
 80123c0:	f3bf 8f4f 	dsb	sy
 80123c4:	623b      	str	r3, [r7, #32]
 80123c6:	e7fe      	b.n	80123c6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d102      	bne.n	80123d4 <xQueueGenericCreateStatic+0x78>
 80123ce:	68bb      	ldr	r3, [r7, #8]
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d101      	bne.n	80123d8 <xQueueGenericCreateStatic+0x7c>
 80123d4:	2301      	movs	r3, #1
 80123d6:	e000      	b.n	80123da <xQueueGenericCreateStatic+0x7e>
 80123d8:	2300      	movs	r3, #0
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d109      	bne.n	80123f2 <xQueueGenericCreateStatic+0x96>
 80123de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123e2:	f383 8811 	msr	BASEPRI, r3
 80123e6:	f3bf 8f6f 	isb	sy
 80123ea:	f3bf 8f4f 	dsb	sy
 80123ee:	61fb      	str	r3, [r7, #28]
 80123f0:	e7fe      	b.n	80123f0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80123f2:	2348      	movs	r3, #72	; 0x48
 80123f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80123f6:	697b      	ldr	r3, [r7, #20]
 80123f8:	2b48      	cmp	r3, #72	; 0x48
 80123fa:	d009      	beq.n	8012410 <xQueueGenericCreateStatic+0xb4>
 80123fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012400:	f383 8811 	msr	BASEPRI, r3
 8012404:	f3bf 8f6f 	isb	sy
 8012408:	f3bf 8f4f 	dsb	sy
 801240c:	61bb      	str	r3, [r7, #24]
 801240e:	e7fe      	b.n	801240e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012410:	683b      	ldr	r3, [r7, #0]
 8012412:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8012414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012416:	2b00      	cmp	r3, #0
 8012418:	d00d      	beq.n	8012436 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801241a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801241c:	2201      	movs	r2, #1
 801241e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012422:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8012426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012428:	9300      	str	r3, [sp, #0]
 801242a:	4613      	mov	r3, r2
 801242c:	687a      	ldr	r2, [r7, #4]
 801242e:	68b9      	ldr	r1, [r7, #8]
 8012430:	68f8      	ldr	r0, [r7, #12]
 8012432:	f000 f842 	bl	80124ba <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8012436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8012438:	4618      	mov	r0, r3
 801243a:	3730      	adds	r7, #48	; 0x30
 801243c:	46bd      	mov	sp, r7
 801243e:	bd80      	pop	{r7, pc}

08012440 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012440:	b580      	push	{r7, lr}
 8012442:	b08a      	sub	sp, #40	; 0x28
 8012444:	af02      	add	r7, sp, #8
 8012446:	60f8      	str	r0, [r7, #12]
 8012448:	60b9      	str	r1, [r7, #8]
 801244a:	4613      	mov	r3, r2
 801244c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	2b00      	cmp	r3, #0
 8012452:	d109      	bne.n	8012468 <xQueueGenericCreate+0x28>
 8012454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012458:	f383 8811 	msr	BASEPRI, r3
 801245c:	f3bf 8f6f 	isb	sy
 8012460:	f3bf 8f4f 	dsb	sy
 8012464:	613b      	str	r3, [r7, #16]
 8012466:	e7fe      	b.n	8012466 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8012468:	68bb      	ldr	r3, [r7, #8]
 801246a:	2b00      	cmp	r3, #0
 801246c:	d102      	bne.n	8012474 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 801246e:	2300      	movs	r3, #0
 8012470:	61fb      	str	r3, [r7, #28]
 8012472:	e004      	b.n	801247e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	68ba      	ldr	r2, [r7, #8]
 8012478:	fb02 f303 	mul.w	r3, r2, r3
 801247c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 801247e:	69fb      	ldr	r3, [r7, #28]
 8012480:	3348      	adds	r3, #72	; 0x48
 8012482:	4618      	mov	r0, r3
 8012484:	f002 fa24 	bl	80148d0 <pvPortMalloc>
 8012488:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801248a:	69bb      	ldr	r3, [r7, #24]
 801248c:	2b00      	cmp	r3, #0
 801248e:	d00f      	beq.n	80124b0 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8012490:	69bb      	ldr	r3, [r7, #24]
 8012492:	3348      	adds	r3, #72	; 0x48
 8012494:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012496:	69bb      	ldr	r3, [r7, #24]
 8012498:	2200      	movs	r2, #0
 801249a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801249e:	79fa      	ldrb	r2, [r7, #7]
 80124a0:	69bb      	ldr	r3, [r7, #24]
 80124a2:	9300      	str	r3, [sp, #0]
 80124a4:	4613      	mov	r3, r2
 80124a6:	697a      	ldr	r2, [r7, #20]
 80124a8:	68b9      	ldr	r1, [r7, #8]
 80124aa:	68f8      	ldr	r0, [r7, #12]
 80124ac:	f000 f805 	bl	80124ba <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80124b0:	69bb      	ldr	r3, [r7, #24]
	}
 80124b2:	4618      	mov	r0, r3
 80124b4:	3720      	adds	r7, #32
 80124b6:	46bd      	mov	sp, r7
 80124b8:	bd80      	pop	{r7, pc}

080124ba <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80124ba:	b580      	push	{r7, lr}
 80124bc:	b084      	sub	sp, #16
 80124be:	af00      	add	r7, sp, #0
 80124c0:	60f8      	str	r0, [r7, #12]
 80124c2:	60b9      	str	r1, [r7, #8]
 80124c4:	607a      	str	r2, [r7, #4]
 80124c6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80124c8:	68bb      	ldr	r3, [r7, #8]
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d103      	bne.n	80124d6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80124ce:	69bb      	ldr	r3, [r7, #24]
 80124d0:	69ba      	ldr	r2, [r7, #24]
 80124d2:	601a      	str	r2, [r3, #0]
 80124d4:	e002      	b.n	80124dc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80124d6:	69bb      	ldr	r3, [r7, #24]
 80124d8:	687a      	ldr	r2, [r7, #4]
 80124da:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80124dc:	69bb      	ldr	r3, [r7, #24]
 80124de:	68fa      	ldr	r2, [r7, #12]
 80124e0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80124e2:	69bb      	ldr	r3, [r7, #24]
 80124e4:	68ba      	ldr	r2, [r7, #8]
 80124e6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80124e8:	2101      	movs	r1, #1
 80124ea:	69b8      	ldr	r0, [r7, #24]
 80124ec:	f7ff fece 	bl	801228c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80124f0:	bf00      	nop
 80124f2:	3710      	adds	r7, #16
 80124f4:	46bd      	mov	sp, r7
 80124f6:	bd80      	pop	{r7, pc}

080124f8 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80124f8:	b580      	push	{r7, lr}
 80124fa:	b082      	sub	sp, #8
 80124fc:	af00      	add	r7, sp, #0
 80124fe:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	2b00      	cmp	r3, #0
 8012504:	d00e      	beq.n	8012524 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	2200      	movs	r2, #0
 801250a:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	2200      	movs	r2, #0
 8012510:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	2200      	movs	r2, #0
 8012516:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8012518:	2300      	movs	r3, #0
 801251a:	2200      	movs	r2, #0
 801251c:	2100      	movs	r1, #0
 801251e:	6878      	ldr	r0, [r7, #4]
 8012520:	f000 f838 	bl	8012594 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8012524:	bf00      	nop
 8012526:	3708      	adds	r7, #8
 8012528:	46bd      	mov	sp, r7
 801252a:	bd80      	pop	{r7, pc}

0801252c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 801252c:	b580      	push	{r7, lr}
 801252e:	b086      	sub	sp, #24
 8012530:	af00      	add	r7, sp, #0
 8012532:	4603      	mov	r3, r0
 8012534:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8012536:	2301      	movs	r3, #1
 8012538:	617b      	str	r3, [r7, #20]
 801253a:	2300      	movs	r3, #0
 801253c:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 801253e:	79fb      	ldrb	r3, [r7, #7]
 8012540:	461a      	mov	r2, r3
 8012542:	6939      	ldr	r1, [r7, #16]
 8012544:	6978      	ldr	r0, [r7, #20]
 8012546:	f7ff ff7b 	bl	8012440 <xQueueGenericCreate>
 801254a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 801254c:	68f8      	ldr	r0, [r7, #12]
 801254e:	f7ff ffd3 	bl	80124f8 <prvInitialiseMutex>

		return pxNewQueue;
 8012552:	68fb      	ldr	r3, [r7, #12]
	}
 8012554:	4618      	mov	r0, r3
 8012556:	3718      	adds	r7, #24
 8012558:	46bd      	mov	sp, r7
 801255a:	bd80      	pop	{r7, pc}

0801255c <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 801255c:	b580      	push	{r7, lr}
 801255e:	b088      	sub	sp, #32
 8012560:	af02      	add	r7, sp, #8
 8012562:	4603      	mov	r3, r0
 8012564:	6039      	str	r1, [r7, #0]
 8012566:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8012568:	2301      	movs	r3, #1
 801256a:	617b      	str	r3, [r7, #20]
 801256c:	2300      	movs	r3, #0
 801256e:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8012570:	79fb      	ldrb	r3, [r7, #7]
 8012572:	9300      	str	r3, [sp, #0]
 8012574:	683b      	ldr	r3, [r7, #0]
 8012576:	2200      	movs	r2, #0
 8012578:	6939      	ldr	r1, [r7, #16]
 801257a:	6978      	ldr	r0, [r7, #20]
 801257c:	f7ff feee 	bl	801235c <xQueueGenericCreateStatic>
 8012580:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8012582:	68f8      	ldr	r0, [r7, #12]
 8012584:	f7ff ffb8 	bl	80124f8 <prvInitialiseMutex>

		return pxNewQueue;
 8012588:	68fb      	ldr	r3, [r7, #12]
	}
 801258a:	4618      	mov	r0, r3
 801258c:	3718      	adds	r7, #24
 801258e:	46bd      	mov	sp, r7
 8012590:	bd80      	pop	{r7, pc}
	...

08012594 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012594:	b580      	push	{r7, lr}
 8012596:	b08e      	sub	sp, #56	; 0x38
 8012598:	af00      	add	r7, sp, #0
 801259a:	60f8      	str	r0, [r7, #12]
 801259c:	60b9      	str	r1, [r7, #8]
 801259e:	607a      	str	r2, [r7, #4]
 80125a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80125a2:	2300      	movs	r3, #0
 80125a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80125a6:	68fb      	ldr	r3, [r7, #12]
 80125a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80125aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d109      	bne.n	80125c4 <xQueueGenericSend+0x30>
 80125b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125b4:	f383 8811 	msr	BASEPRI, r3
 80125b8:	f3bf 8f6f 	isb	sy
 80125bc:	f3bf 8f4f 	dsb	sy
 80125c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80125c2:	e7fe      	b.n	80125c2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80125c4:	68bb      	ldr	r3, [r7, #8]
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d103      	bne.n	80125d2 <xQueueGenericSend+0x3e>
 80125ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d101      	bne.n	80125d6 <xQueueGenericSend+0x42>
 80125d2:	2301      	movs	r3, #1
 80125d4:	e000      	b.n	80125d8 <xQueueGenericSend+0x44>
 80125d6:	2300      	movs	r3, #0
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d109      	bne.n	80125f0 <xQueueGenericSend+0x5c>
 80125dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125e0:	f383 8811 	msr	BASEPRI, r3
 80125e4:	f3bf 8f6f 	isb	sy
 80125e8:	f3bf 8f4f 	dsb	sy
 80125ec:	627b      	str	r3, [r7, #36]	; 0x24
 80125ee:	e7fe      	b.n	80125ee <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80125f0:	683b      	ldr	r3, [r7, #0]
 80125f2:	2b02      	cmp	r3, #2
 80125f4:	d103      	bne.n	80125fe <xQueueGenericSend+0x6a>
 80125f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80125fa:	2b01      	cmp	r3, #1
 80125fc:	d101      	bne.n	8012602 <xQueueGenericSend+0x6e>
 80125fe:	2301      	movs	r3, #1
 8012600:	e000      	b.n	8012604 <xQueueGenericSend+0x70>
 8012602:	2300      	movs	r3, #0
 8012604:	2b00      	cmp	r3, #0
 8012606:	d109      	bne.n	801261c <xQueueGenericSend+0x88>
 8012608:	f04f 0350 	mov.w	r3, #80	; 0x50
 801260c:	f383 8811 	msr	BASEPRI, r3
 8012610:	f3bf 8f6f 	isb	sy
 8012614:	f3bf 8f4f 	dsb	sy
 8012618:	623b      	str	r3, [r7, #32]
 801261a:	e7fe      	b.n	801261a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801261c:	f001 fb14 	bl	8013c48 <xTaskGetSchedulerState>
 8012620:	4603      	mov	r3, r0
 8012622:	2b00      	cmp	r3, #0
 8012624:	d102      	bne.n	801262c <xQueueGenericSend+0x98>
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	2b00      	cmp	r3, #0
 801262a:	d101      	bne.n	8012630 <xQueueGenericSend+0x9c>
 801262c:	2301      	movs	r3, #1
 801262e:	e000      	b.n	8012632 <xQueueGenericSend+0x9e>
 8012630:	2300      	movs	r3, #0
 8012632:	2b00      	cmp	r3, #0
 8012634:	d109      	bne.n	801264a <xQueueGenericSend+0xb6>
 8012636:	f04f 0350 	mov.w	r3, #80	; 0x50
 801263a:	f383 8811 	msr	BASEPRI, r3
 801263e:	f3bf 8f6f 	isb	sy
 8012642:	f3bf 8f4f 	dsb	sy
 8012646:	61fb      	str	r3, [r7, #28]
 8012648:	e7fe      	b.n	8012648 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801264a:	f002 f827 	bl	801469c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801264e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012650:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012656:	429a      	cmp	r2, r3
 8012658:	d302      	bcc.n	8012660 <xQueueGenericSend+0xcc>
 801265a:	683b      	ldr	r3, [r7, #0]
 801265c:	2b02      	cmp	r3, #2
 801265e:	d129      	bne.n	80126b4 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012660:	683a      	ldr	r2, [r7, #0]
 8012662:	68b9      	ldr	r1, [r7, #8]
 8012664:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012666:	f000 fc26 	bl	8012eb6 <prvCopyDataToQueue>
 801266a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801266c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801266e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012670:	2b00      	cmp	r3, #0
 8012672:	d010      	beq.n	8012696 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012676:	3324      	adds	r3, #36	; 0x24
 8012678:	4618      	mov	r0, r3
 801267a:	f001 f929 	bl	80138d0 <xTaskRemoveFromEventList>
 801267e:	4603      	mov	r3, r0
 8012680:	2b00      	cmp	r3, #0
 8012682:	d013      	beq.n	80126ac <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012684:	4b3f      	ldr	r3, [pc, #252]	; (8012784 <xQueueGenericSend+0x1f0>)
 8012686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801268a:	601a      	str	r2, [r3, #0]
 801268c:	f3bf 8f4f 	dsb	sy
 8012690:	f3bf 8f6f 	isb	sy
 8012694:	e00a      	b.n	80126ac <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012698:	2b00      	cmp	r3, #0
 801269a:	d007      	beq.n	80126ac <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801269c:	4b39      	ldr	r3, [pc, #228]	; (8012784 <xQueueGenericSend+0x1f0>)
 801269e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80126a2:	601a      	str	r2, [r3, #0]
 80126a4:	f3bf 8f4f 	dsb	sy
 80126a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80126ac:	f002 f824 	bl	80146f8 <vPortExitCritical>
				return pdPASS;
 80126b0:	2301      	movs	r3, #1
 80126b2:	e063      	b.n	801277c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d103      	bne.n	80126c2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80126ba:	f002 f81d 	bl	80146f8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80126be:	2300      	movs	r3, #0
 80126c0:	e05c      	b.n	801277c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80126c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d106      	bne.n	80126d6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80126c8:	f107 0314 	add.w	r3, r7, #20
 80126cc:	4618      	mov	r0, r3
 80126ce:	f001 f961 	bl	8013994 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80126d2:	2301      	movs	r3, #1
 80126d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80126d6:	f002 f80f 	bl	80146f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80126da:	f000 ff15 	bl	8013508 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80126de:	f001 ffdd 	bl	801469c <vPortEnterCritical>
 80126e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80126e8:	b25b      	sxtb	r3, r3
 80126ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126ee:	d103      	bne.n	80126f8 <xQueueGenericSend+0x164>
 80126f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126f2:	2200      	movs	r2, #0
 80126f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80126f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80126fe:	b25b      	sxtb	r3, r3
 8012700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012704:	d103      	bne.n	801270e <xQueueGenericSend+0x17a>
 8012706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012708:	2200      	movs	r2, #0
 801270a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801270e:	f001 fff3 	bl	80146f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012712:	1d3a      	adds	r2, r7, #4
 8012714:	f107 0314 	add.w	r3, r7, #20
 8012718:	4611      	mov	r1, r2
 801271a:	4618      	mov	r0, r3
 801271c:	f001 f950 	bl	80139c0 <xTaskCheckForTimeOut>
 8012720:	4603      	mov	r3, r0
 8012722:	2b00      	cmp	r3, #0
 8012724:	d124      	bne.n	8012770 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8012726:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012728:	f000 fcbd 	bl	80130a6 <prvIsQueueFull>
 801272c:	4603      	mov	r3, r0
 801272e:	2b00      	cmp	r3, #0
 8012730:	d018      	beq.n	8012764 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012734:	3310      	adds	r3, #16
 8012736:	687a      	ldr	r2, [r7, #4]
 8012738:	4611      	mov	r1, r2
 801273a:	4618      	mov	r0, r3
 801273c:	f001 f8a4 	bl	8013888 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012740:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012742:	f000 fc48 	bl	8012fd6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8012746:	f000 feed 	bl	8013524 <xTaskResumeAll>
 801274a:	4603      	mov	r3, r0
 801274c:	2b00      	cmp	r3, #0
 801274e:	f47f af7c 	bne.w	801264a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8012752:	4b0c      	ldr	r3, [pc, #48]	; (8012784 <xQueueGenericSend+0x1f0>)
 8012754:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012758:	601a      	str	r2, [r3, #0]
 801275a:	f3bf 8f4f 	dsb	sy
 801275e:	f3bf 8f6f 	isb	sy
 8012762:	e772      	b.n	801264a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012764:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012766:	f000 fc36 	bl	8012fd6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801276a:	f000 fedb 	bl	8013524 <xTaskResumeAll>
 801276e:	e76c      	b.n	801264a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012770:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012772:	f000 fc30 	bl	8012fd6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012776:	f000 fed5 	bl	8013524 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801277a:	2300      	movs	r3, #0
		}
	}
}
 801277c:	4618      	mov	r0, r3
 801277e:	3738      	adds	r7, #56	; 0x38
 8012780:	46bd      	mov	sp, r7
 8012782:	bd80      	pop	{r7, pc}
 8012784:	e000ed04 	.word	0xe000ed04

08012788 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012788:	b580      	push	{r7, lr}
 801278a:	b08e      	sub	sp, #56	; 0x38
 801278c:	af00      	add	r7, sp, #0
 801278e:	60f8      	str	r0, [r7, #12]
 8012790:	60b9      	str	r1, [r7, #8]
 8012792:	607a      	str	r2, [r7, #4]
 8012794:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801279a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801279c:	2b00      	cmp	r3, #0
 801279e:	d109      	bne.n	80127b4 <xQueueGenericSendFromISR+0x2c>
 80127a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127a4:	f383 8811 	msr	BASEPRI, r3
 80127a8:	f3bf 8f6f 	isb	sy
 80127ac:	f3bf 8f4f 	dsb	sy
 80127b0:	627b      	str	r3, [r7, #36]	; 0x24
 80127b2:	e7fe      	b.n	80127b2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80127b4:	68bb      	ldr	r3, [r7, #8]
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d103      	bne.n	80127c2 <xQueueGenericSendFromISR+0x3a>
 80127ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d101      	bne.n	80127c6 <xQueueGenericSendFromISR+0x3e>
 80127c2:	2301      	movs	r3, #1
 80127c4:	e000      	b.n	80127c8 <xQueueGenericSendFromISR+0x40>
 80127c6:	2300      	movs	r3, #0
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d109      	bne.n	80127e0 <xQueueGenericSendFromISR+0x58>
 80127cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127d0:	f383 8811 	msr	BASEPRI, r3
 80127d4:	f3bf 8f6f 	isb	sy
 80127d8:	f3bf 8f4f 	dsb	sy
 80127dc:	623b      	str	r3, [r7, #32]
 80127de:	e7fe      	b.n	80127de <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80127e0:	683b      	ldr	r3, [r7, #0]
 80127e2:	2b02      	cmp	r3, #2
 80127e4:	d103      	bne.n	80127ee <xQueueGenericSendFromISR+0x66>
 80127e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80127ea:	2b01      	cmp	r3, #1
 80127ec:	d101      	bne.n	80127f2 <xQueueGenericSendFromISR+0x6a>
 80127ee:	2301      	movs	r3, #1
 80127f0:	e000      	b.n	80127f4 <xQueueGenericSendFromISR+0x6c>
 80127f2:	2300      	movs	r3, #0
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d109      	bne.n	801280c <xQueueGenericSendFromISR+0x84>
 80127f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127fc:	f383 8811 	msr	BASEPRI, r3
 8012800:	f3bf 8f6f 	isb	sy
 8012804:	f3bf 8f4f 	dsb	sy
 8012808:	61fb      	str	r3, [r7, #28]
 801280a:	e7fe      	b.n	801280a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801280c:	f002 f822 	bl	8014854 <vPortValidateInterruptPriority>
	__asm volatile
 8012810:	f3ef 8211 	mrs	r2, BASEPRI
 8012814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012818:	f383 8811 	msr	BASEPRI, r3
 801281c:	f3bf 8f6f 	isb	sy
 8012820:	f3bf 8f4f 	dsb	sy
 8012824:	61ba      	str	r2, [r7, #24]
 8012826:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012828:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801282a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801282c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801282e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012834:	429a      	cmp	r2, r3
 8012836:	d302      	bcc.n	801283e <xQueueGenericSendFromISR+0xb6>
 8012838:	683b      	ldr	r3, [r7, #0]
 801283a:	2b02      	cmp	r3, #2
 801283c:	d12c      	bne.n	8012898 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801283e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012840:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012844:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012848:	683a      	ldr	r2, [r7, #0]
 801284a:	68b9      	ldr	r1, [r7, #8]
 801284c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801284e:	f000 fb32 	bl	8012eb6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012852:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8012856:	f1b3 3fff 	cmp.w	r3, #4294967295
 801285a:	d112      	bne.n	8012882 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801285c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801285e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012860:	2b00      	cmp	r3, #0
 8012862:	d016      	beq.n	8012892 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012866:	3324      	adds	r3, #36	; 0x24
 8012868:	4618      	mov	r0, r3
 801286a:	f001 f831 	bl	80138d0 <xTaskRemoveFromEventList>
 801286e:	4603      	mov	r3, r0
 8012870:	2b00      	cmp	r3, #0
 8012872:	d00e      	beq.n	8012892 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	2b00      	cmp	r3, #0
 8012878:	d00b      	beq.n	8012892 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	2201      	movs	r2, #1
 801287e:	601a      	str	r2, [r3, #0]
 8012880:	e007      	b.n	8012892 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012882:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012886:	3301      	adds	r3, #1
 8012888:	b2db      	uxtb	r3, r3
 801288a:	b25a      	sxtb	r2, r3
 801288c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801288e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012892:	2301      	movs	r3, #1
 8012894:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8012896:	e001      	b.n	801289c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012898:	2300      	movs	r3, #0
 801289a:	637b      	str	r3, [r7, #52]	; 0x34
 801289c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801289e:	613b      	str	r3, [r7, #16]
	__asm volatile
 80128a0:	693b      	ldr	r3, [r7, #16]
 80128a2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80128a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80128a8:	4618      	mov	r0, r3
 80128aa:	3738      	adds	r7, #56	; 0x38
 80128ac:	46bd      	mov	sp, r7
 80128ae:	bd80      	pop	{r7, pc}

080128b0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80128b0:	b580      	push	{r7, lr}
 80128b2:	b08e      	sub	sp, #56	; 0x38
 80128b4:	af00      	add	r7, sp, #0
 80128b6:	6078      	str	r0, [r7, #4]
 80128b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80128be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d109      	bne.n	80128d8 <xQueueGiveFromISR+0x28>
	__asm volatile
 80128c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128c8:	f383 8811 	msr	BASEPRI, r3
 80128cc:	f3bf 8f6f 	isb	sy
 80128d0:	f3bf 8f4f 	dsb	sy
 80128d4:	623b      	str	r3, [r7, #32]
 80128d6:	e7fe      	b.n	80128d6 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80128d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d009      	beq.n	80128f4 <xQueueGiveFromISR+0x44>
 80128e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128e4:	f383 8811 	msr	BASEPRI, r3
 80128e8:	f3bf 8f6f 	isb	sy
 80128ec:	f3bf 8f4f 	dsb	sy
 80128f0:	61fb      	str	r3, [r7, #28]
 80128f2:	e7fe      	b.n	80128f2 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80128f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d103      	bne.n	8012904 <xQueueGiveFromISR+0x54>
 80128fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128fe:	685b      	ldr	r3, [r3, #4]
 8012900:	2b00      	cmp	r3, #0
 8012902:	d101      	bne.n	8012908 <xQueueGiveFromISR+0x58>
 8012904:	2301      	movs	r3, #1
 8012906:	e000      	b.n	801290a <xQueueGiveFromISR+0x5a>
 8012908:	2300      	movs	r3, #0
 801290a:	2b00      	cmp	r3, #0
 801290c:	d109      	bne.n	8012922 <xQueueGiveFromISR+0x72>
 801290e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012912:	f383 8811 	msr	BASEPRI, r3
 8012916:	f3bf 8f6f 	isb	sy
 801291a:	f3bf 8f4f 	dsb	sy
 801291e:	61bb      	str	r3, [r7, #24]
 8012920:	e7fe      	b.n	8012920 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012922:	f001 ff97 	bl	8014854 <vPortValidateInterruptPriority>
	__asm volatile
 8012926:	f3ef 8211 	mrs	r2, BASEPRI
 801292a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801292e:	f383 8811 	msr	BASEPRI, r3
 8012932:	f3bf 8f6f 	isb	sy
 8012936:	f3bf 8f4f 	dsb	sy
 801293a:	617a      	str	r2, [r7, #20]
 801293c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801293e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012940:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012946:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8012948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801294a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801294c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801294e:	429a      	cmp	r2, r3
 8012950:	d22b      	bcs.n	80129aa <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012954:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012958:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801295c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801295e:	1c5a      	adds	r2, r3, #1
 8012960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012962:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012964:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012968:	f1b3 3fff 	cmp.w	r3, #4294967295
 801296c:	d112      	bne.n	8012994 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801296e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012972:	2b00      	cmp	r3, #0
 8012974:	d016      	beq.n	80129a4 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012978:	3324      	adds	r3, #36	; 0x24
 801297a:	4618      	mov	r0, r3
 801297c:	f000 ffa8 	bl	80138d0 <xTaskRemoveFromEventList>
 8012980:	4603      	mov	r3, r0
 8012982:	2b00      	cmp	r3, #0
 8012984:	d00e      	beq.n	80129a4 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012986:	683b      	ldr	r3, [r7, #0]
 8012988:	2b00      	cmp	r3, #0
 801298a:	d00b      	beq.n	80129a4 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801298c:	683b      	ldr	r3, [r7, #0]
 801298e:	2201      	movs	r2, #1
 8012990:	601a      	str	r2, [r3, #0]
 8012992:	e007      	b.n	80129a4 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012994:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012998:	3301      	adds	r3, #1
 801299a:	b2db      	uxtb	r3, r3
 801299c:	b25a      	sxtb	r2, r3
 801299e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80129a4:	2301      	movs	r3, #1
 80129a6:	637b      	str	r3, [r7, #52]	; 0x34
 80129a8:	e001      	b.n	80129ae <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80129aa:	2300      	movs	r3, #0
 80129ac:	637b      	str	r3, [r7, #52]	; 0x34
 80129ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129b0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80129b2:	68fb      	ldr	r3, [r7, #12]
 80129b4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80129b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80129ba:	4618      	mov	r0, r3
 80129bc:	3738      	adds	r7, #56	; 0x38
 80129be:	46bd      	mov	sp, r7
 80129c0:	bd80      	pop	{r7, pc}
	...

080129c4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80129c4:	b580      	push	{r7, lr}
 80129c6:	b08c      	sub	sp, #48	; 0x30
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	60f8      	str	r0, [r7, #12]
 80129cc:	60b9      	str	r1, [r7, #8]
 80129ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80129d0:	2300      	movs	r3, #0
 80129d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80129d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d109      	bne.n	80129f2 <xQueueReceive+0x2e>
	__asm volatile
 80129de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129e2:	f383 8811 	msr	BASEPRI, r3
 80129e6:	f3bf 8f6f 	isb	sy
 80129ea:	f3bf 8f4f 	dsb	sy
 80129ee:	623b      	str	r3, [r7, #32]
 80129f0:	e7fe      	b.n	80129f0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80129f2:	68bb      	ldr	r3, [r7, #8]
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d103      	bne.n	8012a00 <xQueueReceive+0x3c>
 80129f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d101      	bne.n	8012a04 <xQueueReceive+0x40>
 8012a00:	2301      	movs	r3, #1
 8012a02:	e000      	b.n	8012a06 <xQueueReceive+0x42>
 8012a04:	2300      	movs	r3, #0
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d109      	bne.n	8012a1e <xQueueReceive+0x5a>
 8012a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a0e:	f383 8811 	msr	BASEPRI, r3
 8012a12:	f3bf 8f6f 	isb	sy
 8012a16:	f3bf 8f4f 	dsb	sy
 8012a1a:	61fb      	str	r3, [r7, #28]
 8012a1c:	e7fe      	b.n	8012a1c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012a1e:	f001 f913 	bl	8013c48 <xTaskGetSchedulerState>
 8012a22:	4603      	mov	r3, r0
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d102      	bne.n	8012a2e <xQueueReceive+0x6a>
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d101      	bne.n	8012a32 <xQueueReceive+0x6e>
 8012a2e:	2301      	movs	r3, #1
 8012a30:	e000      	b.n	8012a34 <xQueueReceive+0x70>
 8012a32:	2300      	movs	r3, #0
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d109      	bne.n	8012a4c <xQueueReceive+0x88>
 8012a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a3c:	f383 8811 	msr	BASEPRI, r3
 8012a40:	f3bf 8f6f 	isb	sy
 8012a44:	f3bf 8f4f 	dsb	sy
 8012a48:	61bb      	str	r3, [r7, #24]
 8012a4a:	e7fe      	b.n	8012a4a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8012a4c:	f001 fe26 	bl	801469c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a54:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d01f      	beq.n	8012a9c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012a5c:	68b9      	ldr	r1, [r7, #8]
 8012a5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012a60:	f000 fa93 	bl	8012f8a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a66:	1e5a      	subs	r2, r3, #1
 8012a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a6a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a6e:	691b      	ldr	r3, [r3, #16]
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d00f      	beq.n	8012a94 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a76:	3310      	adds	r3, #16
 8012a78:	4618      	mov	r0, r3
 8012a7a:	f000 ff29 	bl	80138d0 <xTaskRemoveFromEventList>
 8012a7e:	4603      	mov	r3, r0
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d007      	beq.n	8012a94 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012a84:	4b3c      	ldr	r3, [pc, #240]	; (8012b78 <xQueueReceive+0x1b4>)
 8012a86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a8a:	601a      	str	r2, [r3, #0]
 8012a8c:	f3bf 8f4f 	dsb	sy
 8012a90:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012a94:	f001 fe30 	bl	80146f8 <vPortExitCritical>
				return pdPASS;
 8012a98:	2301      	movs	r3, #1
 8012a9a:	e069      	b.n	8012b70 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d103      	bne.n	8012aaa <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012aa2:	f001 fe29 	bl	80146f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012aa6:	2300      	movs	r3, #0
 8012aa8:	e062      	b.n	8012b70 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d106      	bne.n	8012abe <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012ab0:	f107 0310 	add.w	r3, r7, #16
 8012ab4:	4618      	mov	r0, r3
 8012ab6:	f000 ff6d 	bl	8013994 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012aba:	2301      	movs	r3, #1
 8012abc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012abe:	f001 fe1b 	bl	80146f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012ac2:	f000 fd21 	bl	8013508 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012ac6:	f001 fde9 	bl	801469c <vPortEnterCritical>
 8012aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012acc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012ad0:	b25b      	sxtb	r3, r3
 8012ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ad6:	d103      	bne.n	8012ae0 <xQueueReceive+0x11c>
 8012ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ada:	2200      	movs	r2, #0
 8012adc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ae2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012ae6:	b25b      	sxtb	r3, r3
 8012ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012aec:	d103      	bne.n	8012af6 <xQueueReceive+0x132>
 8012aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012af0:	2200      	movs	r2, #0
 8012af2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012af6:	f001 fdff 	bl	80146f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012afa:	1d3a      	adds	r2, r7, #4
 8012afc:	f107 0310 	add.w	r3, r7, #16
 8012b00:	4611      	mov	r1, r2
 8012b02:	4618      	mov	r0, r3
 8012b04:	f000 ff5c 	bl	80139c0 <xTaskCheckForTimeOut>
 8012b08:	4603      	mov	r3, r0
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d123      	bne.n	8012b56 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012b0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012b10:	f000 fab3 	bl	801307a <prvIsQueueEmpty>
 8012b14:	4603      	mov	r3, r0
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d017      	beq.n	8012b4a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b1c:	3324      	adds	r3, #36	; 0x24
 8012b1e:	687a      	ldr	r2, [r7, #4]
 8012b20:	4611      	mov	r1, r2
 8012b22:	4618      	mov	r0, r3
 8012b24:	f000 feb0 	bl	8013888 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012b28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012b2a:	f000 fa54 	bl	8012fd6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012b2e:	f000 fcf9 	bl	8013524 <xTaskResumeAll>
 8012b32:	4603      	mov	r3, r0
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d189      	bne.n	8012a4c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8012b38:	4b0f      	ldr	r3, [pc, #60]	; (8012b78 <xQueueReceive+0x1b4>)
 8012b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012b3e:	601a      	str	r2, [r3, #0]
 8012b40:	f3bf 8f4f 	dsb	sy
 8012b44:	f3bf 8f6f 	isb	sy
 8012b48:	e780      	b.n	8012a4c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8012b4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012b4c:	f000 fa43 	bl	8012fd6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012b50:	f000 fce8 	bl	8013524 <xTaskResumeAll>
 8012b54:	e77a      	b.n	8012a4c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8012b56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012b58:	f000 fa3d 	bl	8012fd6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012b5c:	f000 fce2 	bl	8013524 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012b60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012b62:	f000 fa8a 	bl	801307a <prvIsQueueEmpty>
 8012b66:	4603      	mov	r3, r0
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	f43f af6f 	beq.w	8012a4c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012b6e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8012b70:	4618      	mov	r0, r3
 8012b72:	3730      	adds	r7, #48	; 0x30
 8012b74:	46bd      	mov	sp, r7
 8012b76:	bd80      	pop	{r7, pc}
 8012b78:	e000ed04 	.word	0xe000ed04

08012b7c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8012b7c:	b580      	push	{r7, lr}
 8012b7e:	b08e      	sub	sp, #56	; 0x38
 8012b80:	af00      	add	r7, sp, #0
 8012b82:	6078      	str	r0, [r7, #4]
 8012b84:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8012b86:	2300      	movs	r3, #0
 8012b88:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8012b8e:	2300      	movs	r3, #0
 8012b90:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d109      	bne.n	8012bac <xQueueSemaphoreTake+0x30>
 8012b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b9c:	f383 8811 	msr	BASEPRI, r3
 8012ba0:	f3bf 8f6f 	isb	sy
 8012ba4:	f3bf 8f4f 	dsb	sy
 8012ba8:	623b      	str	r3, [r7, #32]
 8012baa:	e7fe      	b.n	8012baa <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d009      	beq.n	8012bc8 <xQueueSemaphoreTake+0x4c>
 8012bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bb8:	f383 8811 	msr	BASEPRI, r3
 8012bbc:	f3bf 8f6f 	isb	sy
 8012bc0:	f3bf 8f4f 	dsb	sy
 8012bc4:	61fb      	str	r3, [r7, #28]
 8012bc6:	e7fe      	b.n	8012bc6 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012bc8:	f001 f83e 	bl	8013c48 <xTaskGetSchedulerState>
 8012bcc:	4603      	mov	r3, r0
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d102      	bne.n	8012bd8 <xQueueSemaphoreTake+0x5c>
 8012bd2:	683b      	ldr	r3, [r7, #0]
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d101      	bne.n	8012bdc <xQueueSemaphoreTake+0x60>
 8012bd8:	2301      	movs	r3, #1
 8012bda:	e000      	b.n	8012bde <xQueueSemaphoreTake+0x62>
 8012bdc:	2300      	movs	r3, #0
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d109      	bne.n	8012bf6 <xQueueSemaphoreTake+0x7a>
 8012be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012be6:	f383 8811 	msr	BASEPRI, r3
 8012bea:	f3bf 8f6f 	isb	sy
 8012bee:	f3bf 8f4f 	dsb	sy
 8012bf2:	61bb      	str	r3, [r7, #24]
 8012bf4:	e7fe      	b.n	8012bf4 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8012bf6:	f001 fd51 	bl	801469c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8012bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012bfe:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8012c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d024      	beq.n	8012c50 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8012c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c08:	1e5a      	subs	r2, r3, #1
 8012c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c0c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c10:	681b      	ldr	r3, [r3, #0]
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d104      	bne.n	8012c20 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8012c16:	f001 f9dd 	bl	8013fd4 <pvTaskIncrementMutexHeldCount>
 8012c1a:	4602      	mov	r2, r0
 8012c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c1e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c22:	691b      	ldr	r3, [r3, #16]
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d00f      	beq.n	8012c48 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c2a:	3310      	adds	r3, #16
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	f000 fe4f 	bl	80138d0 <xTaskRemoveFromEventList>
 8012c32:	4603      	mov	r3, r0
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d007      	beq.n	8012c48 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012c38:	4b53      	ldr	r3, [pc, #332]	; (8012d88 <xQueueSemaphoreTake+0x20c>)
 8012c3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c3e:	601a      	str	r2, [r3, #0]
 8012c40:	f3bf 8f4f 	dsb	sy
 8012c44:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012c48:	f001 fd56 	bl	80146f8 <vPortExitCritical>
				return pdPASS;
 8012c4c:	2301      	movs	r3, #1
 8012c4e:	e096      	b.n	8012d7e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012c50:	683b      	ldr	r3, [r7, #0]
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d110      	bne.n	8012c78 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8012c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d009      	beq.n	8012c70 <xQueueSemaphoreTake+0xf4>
 8012c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c60:	f383 8811 	msr	BASEPRI, r3
 8012c64:	f3bf 8f6f 	isb	sy
 8012c68:	f3bf 8f4f 	dsb	sy
 8012c6c:	617b      	str	r3, [r7, #20]
 8012c6e:	e7fe      	b.n	8012c6e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8012c70:	f001 fd42 	bl	80146f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012c74:	2300      	movs	r3, #0
 8012c76:	e082      	b.n	8012d7e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d106      	bne.n	8012c8c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012c7e:	f107 030c 	add.w	r3, r7, #12
 8012c82:	4618      	mov	r0, r3
 8012c84:	f000 fe86 	bl	8013994 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012c88:	2301      	movs	r3, #1
 8012c8a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012c8c:	f001 fd34 	bl	80146f8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012c90:	f000 fc3a 	bl	8013508 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012c94:	f001 fd02 	bl	801469c <vPortEnterCritical>
 8012c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012c9e:	b25b      	sxtb	r3, r3
 8012ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ca4:	d103      	bne.n	8012cae <xQueueSemaphoreTake+0x132>
 8012ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ca8:	2200      	movs	r2, #0
 8012caa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012cb4:	b25b      	sxtb	r3, r3
 8012cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012cba:	d103      	bne.n	8012cc4 <xQueueSemaphoreTake+0x148>
 8012cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cbe:	2200      	movs	r2, #0
 8012cc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012cc4:	f001 fd18 	bl	80146f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012cc8:	463a      	mov	r2, r7
 8012cca:	f107 030c 	add.w	r3, r7, #12
 8012cce:	4611      	mov	r1, r2
 8012cd0:	4618      	mov	r0, r3
 8012cd2:	f000 fe75 	bl	80139c0 <xTaskCheckForTimeOut>
 8012cd6:	4603      	mov	r3, r0
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d132      	bne.n	8012d42 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012cdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012cde:	f000 f9cc 	bl	801307a <prvIsQueueEmpty>
 8012ce2:	4603      	mov	r3, r0
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d026      	beq.n	8012d36 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d109      	bne.n	8012d04 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8012cf0:	f001 fcd4 	bl	801469c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8012cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cf6:	685b      	ldr	r3, [r3, #4]
 8012cf8:	4618      	mov	r0, r3
 8012cfa:	f000 ffc3 	bl	8013c84 <xTaskPriorityInherit>
 8012cfe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8012d00:	f001 fcfa 	bl	80146f8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d06:	3324      	adds	r3, #36	; 0x24
 8012d08:	683a      	ldr	r2, [r7, #0]
 8012d0a:	4611      	mov	r1, r2
 8012d0c:	4618      	mov	r0, r3
 8012d0e:	f000 fdbb 	bl	8013888 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012d12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012d14:	f000 f95f 	bl	8012fd6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012d18:	f000 fc04 	bl	8013524 <xTaskResumeAll>
 8012d1c:	4603      	mov	r3, r0
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	f47f af69 	bne.w	8012bf6 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8012d24:	4b18      	ldr	r3, [pc, #96]	; (8012d88 <xQueueSemaphoreTake+0x20c>)
 8012d26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d2a:	601a      	str	r2, [r3, #0]
 8012d2c:	f3bf 8f4f 	dsb	sy
 8012d30:	f3bf 8f6f 	isb	sy
 8012d34:	e75f      	b.n	8012bf6 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8012d36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012d38:	f000 f94d 	bl	8012fd6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012d3c:	f000 fbf2 	bl	8013524 <xTaskResumeAll>
 8012d40:	e759      	b.n	8012bf6 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8012d42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012d44:	f000 f947 	bl	8012fd6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012d48:	f000 fbec 	bl	8013524 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012d4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012d4e:	f000 f994 	bl	801307a <prvIsQueueEmpty>
 8012d52:	4603      	mov	r3, r0
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	f43f af4e 	beq.w	8012bf6 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8012d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d00d      	beq.n	8012d7c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8012d60:	f001 fc9c 	bl	801469c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8012d64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012d66:	f000 f88e 	bl	8012e86 <prvGetDisinheritPriorityAfterTimeout>
 8012d6a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8012d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d6e:	685b      	ldr	r3, [r3, #4]
 8012d70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012d72:	4618      	mov	r0, r3
 8012d74:	f001 f890 	bl	8013e98 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8012d78:	f001 fcbe 	bl	80146f8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012d7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8012d7e:	4618      	mov	r0, r3
 8012d80:	3738      	adds	r7, #56	; 0x38
 8012d82:	46bd      	mov	sp, r7
 8012d84:	bd80      	pop	{r7, pc}
 8012d86:	bf00      	nop
 8012d88:	e000ed04 	.word	0xe000ed04

08012d8c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012d8c:	b580      	push	{r7, lr}
 8012d8e:	b08e      	sub	sp, #56	; 0x38
 8012d90:	af00      	add	r7, sp, #0
 8012d92:	60f8      	str	r0, [r7, #12]
 8012d94:	60b9      	str	r1, [r7, #8]
 8012d96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012d98:	68fb      	ldr	r3, [r7, #12]
 8012d9a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d109      	bne.n	8012db6 <xQueueReceiveFromISR+0x2a>
 8012da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012da6:	f383 8811 	msr	BASEPRI, r3
 8012daa:	f3bf 8f6f 	isb	sy
 8012dae:	f3bf 8f4f 	dsb	sy
 8012db2:	623b      	str	r3, [r7, #32]
 8012db4:	e7fe      	b.n	8012db4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012db6:	68bb      	ldr	r3, [r7, #8]
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d103      	bne.n	8012dc4 <xQueueReceiveFromISR+0x38>
 8012dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d101      	bne.n	8012dc8 <xQueueReceiveFromISR+0x3c>
 8012dc4:	2301      	movs	r3, #1
 8012dc6:	e000      	b.n	8012dca <xQueueReceiveFromISR+0x3e>
 8012dc8:	2300      	movs	r3, #0
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d109      	bne.n	8012de2 <xQueueReceiveFromISR+0x56>
 8012dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dd2:	f383 8811 	msr	BASEPRI, r3
 8012dd6:	f3bf 8f6f 	isb	sy
 8012dda:	f3bf 8f4f 	dsb	sy
 8012dde:	61fb      	str	r3, [r7, #28]
 8012de0:	e7fe      	b.n	8012de0 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012de2:	f001 fd37 	bl	8014854 <vPortValidateInterruptPriority>
	__asm volatile
 8012de6:	f3ef 8211 	mrs	r2, BASEPRI
 8012dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dee:	f383 8811 	msr	BASEPRI, r3
 8012df2:	f3bf 8f6f 	isb	sy
 8012df6:	f3bf 8f4f 	dsb	sy
 8012dfa:	61ba      	str	r2, [r7, #24]
 8012dfc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012dfe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012e00:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e06:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d02f      	beq.n	8012e6e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8012e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012e14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012e18:	68b9      	ldr	r1, [r7, #8]
 8012e1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012e1c:	f000 f8b5 	bl	8012f8a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e22:	1e5a      	subs	r2, r3, #1
 8012e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e26:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012e28:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e30:	d112      	bne.n	8012e58 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e34:	691b      	ldr	r3, [r3, #16]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d016      	beq.n	8012e68 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e3c:	3310      	adds	r3, #16
 8012e3e:	4618      	mov	r0, r3
 8012e40:	f000 fd46 	bl	80138d0 <xTaskRemoveFromEventList>
 8012e44:	4603      	mov	r3, r0
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d00e      	beq.n	8012e68 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d00b      	beq.n	8012e68 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	2201      	movs	r2, #1
 8012e54:	601a      	str	r2, [r3, #0]
 8012e56:	e007      	b.n	8012e68 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012e58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012e5c:	3301      	adds	r3, #1
 8012e5e:	b2db      	uxtb	r3, r3
 8012e60:	b25a      	sxtb	r2, r3
 8012e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8012e68:	2301      	movs	r3, #1
 8012e6a:	637b      	str	r3, [r7, #52]	; 0x34
 8012e6c:	e001      	b.n	8012e72 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8012e6e:	2300      	movs	r3, #0
 8012e70:	637b      	str	r3, [r7, #52]	; 0x34
 8012e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e74:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012e76:	693b      	ldr	r3, [r7, #16]
 8012e78:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012e7e:	4618      	mov	r0, r3
 8012e80:	3738      	adds	r7, #56	; 0x38
 8012e82:	46bd      	mov	sp, r7
 8012e84:	bd80      	pop	{r7, pc}

08012e86 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8012e86:	b480      	push	{r7}
 8012e88:	b085      	sub	sp, #20
 8012e8a:	af00      	add	r7, sp, #0
 8012e8c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d006      	beq.n	8012ea4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	f1c3 0307 	rsb	r3, r3, #7
 8012ea0:	60fb      	str	r3, [r7, #12]
 8012ea2:	e001      	b.n	8012ea8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8012ea4:	2300      	movs	r3, #0
 8012ea6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8012ea8:	68fb      	ldr	r3, [r7, #12]
	}
 8012eaa:	4618      	mov	r0, r3
 8012eac:	3714      	adds	r7, #20
 8012eae:	46bd      	mov	sp, r7
 8012eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eb4:	4770      	bx	lr

08012eb6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012eb6:	b580      	push	{r7, lr}
 8012eb8:	b086      	sub	sp, #24
 8012eba:	af00      	add	r7, sp, #0
 8012ebc:	60f8      	str	r0, [r7, #12]
 8012ebe:	60b9      	str	r1, [r7, #8]
 8012ec0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012ec2:	2300      	movs	r3, #0
 8012ec4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012ec6:	68fb      	ldr	r3, [r7, #12]
 8012ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012eca:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d10d      	bne.n	8012ef0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	681b      	ldr	r3, [r3, #0]
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d14d      	bne.n	8012f78 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	685b      	ldr	r3, [r3, #4]
 8012ee0:	4618      	mov	r0, r3
 8012ee2:	f000 ff55 	bl	8013d90 <xTaskPriorityDisinherit>
 8012ee6:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	2200      	movs	r2, #0
 8012eec:	605a      	str	r2, [r3, #4]
 8012eee:	e043      	b.n	8012f78 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d119      	bne.n	8012f2a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	6898      	ldr	r0, [r3, #8]
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012efe:	461a      	mov	r2, r3
 8012f00:	68b9      	ldr	r1, [r7, #8]
 8012f02:	f002 fc35 	bl	8015770 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	689a      	ldr	r2, [r3, #8]
 8012f0a:	68fb      	ldr	r3, [r7, #12]
 8012f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f0e:	441a      	add	r2, r3
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012f14:	68fb      	ldr	r3, [r7, #12]
 8012f16:	689a      	ldr	r2, [r3, #8]
 8012f18:	68fb      	ldr	r3, [r7, #12]
 8012f1a:	685b      	ldr	r3, [r3, #4]
 8012f1c:	429a      	cmp	r2, r3
 8012f1e:	d32b      	bcc.n	8012f78 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	681a      	ldr	r2, [r3, #0]
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	609a      	str	r2, [r3, #8]
 8012f28:	e026      	b.n	8012f78 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	68d8      	ldr	r0, [r3, #12]
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f32:	461a      	mov	r2, r3
 8012f34:	68b9      	ldr	r1, [r7, #8]
 8012f36:	f002 fc1b 	bl	8015770 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	68da      	ldr	r2, [r3, #12]
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f42:	425b      	negs	r3, r3
 8012f44:	441a      	add	r2, r3
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	68da      	ldr	r2, [r3, #12]
 8012f4e:	68fb      	ldr	r3, [r7, #12]
 8012f50:	681b      	ldr	r3, [r3, #0]
 8012f52:	429a      	cmp	r2, r3
 8012f54:	d207      	bcs.n	8012f66 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8012f56:	68fb      	ldr	r3, [r7, #12]
 8012f58:	685a      	ldr	r2, [r3, #4]
 8012f5a:	68fb      	ldr	r3, [r7, #12]
 8012f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f5e:	425b      	negs	r3, r3
 8012f60:	441a      	add	r2, r3
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	2b02      	cmp	r3, #2
 8012f6a:	d105      	bne.n	8012f78 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012f6c:	693b      	ldr	r3, [r7, #16]
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d002      	beq.n	8012f78 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012f72:	693b      	ldr	r3, [r7, #16]
 8012f74:	3b01      	subs	r3, #1
 8012f76:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012f78:	693b      	ldr	r3, [r7, #16]
 8012f7a:	1c5a      	adds	r2, r3, #1
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8012f80:	697b      	ldr	r3, [r7, #20]
}
 8012f82:	4618      	mov	r0, r3
 8012f84:	3718      	adds	r7, #24
 8012f86:	46bd      	mov	sp, r7
 8012f88:	bd80      	pop	{r7, pc}

08012f8a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012f8a:	b580      	push	{r7, lr}
 8012f8c:	b082      	sub	sp, #8
 8012f8e:	af00      	add	r7, sp, #0
 8012f90:	6078      	str	r0, [r7, #4]
 8012f92:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d018      	beq.n	8012fce <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	68da      	ldr	r2, [r3, #12]
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012fa4:	441a      	add	r2, r3
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	68da      	ldr	r2, [r3, #12]
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	685b      	ldr	r3, [r3, #4]
 8012fb2:	429a      	cmp	r2, r3
 8012fb4:	d303      	bcc.n	8012fbe <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	681a      	ldr	r2, [r3, #0]
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	68d9      	ldr	r1, [r3, #12]
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012fc6:	461a      	mov	r2, r3
 8012fc8:	6838      	ldr	r0, [r7, #0]
 8012fca:	f002 fbd1 	bl	8015770 <memcpy>
	}
}
 8012fce:	bf00      	nop
 8012fd0:	3708      	adds	r7, #8
 8012fd2:	46bd      	mov	sp, r7
 8012fd4:	bd80      	pop	{r7, pc}

08012fd6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012fd6:	b580      	push	{r7, lr}
 8012fd8:	b084      	sub	sp, #16
 8012fda:	af00      	add	r7, sp, #0
 8012fdc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012fde:	f001 fb5d 	bl	801469c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012fe8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012fea:	e011      	b.n	8013010 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d012      	beq.n	801301a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	3324      	adds	r3, #36	; 0x24
 8012ff8:	4618      	mov	r0, r3
 8012ffa:	f000 fc69 	bl	80138d0 <xTaskRemoveFromEventList>
 8012ffe:	4603      	mov	r3, r0
 8013000:	2b00      	cmp	r3, #0
 8013002:	d001      	beq.n	8013008 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013004:	f000 fd3c 	bl	8013a80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013008:	7bfb      	ldrb	r3, [r7, #15]
 801300a:	3b01      	subs	r3, #1
 801300c:	b2db      	uxtb	r3, r3
 801300e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013010:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013014:	2b00      	cmp	r3, #0
 8013016:	dce9      	bgt.n	8012fec <prvUnlockQueue+0x16>
 8013018:	e000      	b.n	801301c <prvUnlockQueue+0x46>
					break;
 801301a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	22ff      	movs	r2, #255	; 0xff
 8013020:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8013024:	f001 fb68 	bl	80146f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013028:	f001 fb38 	bl	801469c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013032:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013034:	e011      	b.n	801305a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	691b      	ldr	r3, [r3, #16]
 801303a:	2b00      	cmp	r3, #0
 801303c:	d012      	beq.n	8013064 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	3310      	adds	r3, #16
 8013042:	4618      	mov	r0, r3
 8013044:	f000 fc44 	bl	80138d0 <xTaskRemoveFromEventList>
 8013048:	4603      	mov	r3, r0
 801304a:	2b00      	cmp	r3, #0
 801304c:	d001      	beq.n	8013052 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801304e:	f000 fd17 	bl	8013a80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013052:	7bbb      	ldrb	r3, [r7, #14]
 8013054:	3b01      	subs	r3, #1
 8013056:	b2db      	uxtb	r3, r3
 8013058:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801305a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801305e:	2b00      	cmp	r3, #0
 8013060:	dce9      	bgt.n	8013036 <prvUnlockQueue+0x60>
 8013062:	e000      	b.n	8013066 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013064:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	22ff      	movs	r2, #255	; 0xff
 801306a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801306e:	f001 fb43 	bl	80146f8 <vPortExitCritical>
}
 8013072:	bf00      	nop
 8013074:	3710      	adds	r7, #16
 8013076:	46bd      	mov	sp, r7
 8013078:	bd80      	pop	{r7, pc}

0801307a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801307a:	b580      	push	{r7, lr}
 801307c:	b084      	sub	sp, #16
 801307e:	af00      	add	r7, sp, #0
 8013080:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013082:	f001 fb0b 	bl	801469c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801308a:	2b00      	cmp	r3, #0
 801308c:	d102      	bne.n	8013094 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801308e:	2301      	movs	r3, #1
 8013090:	60fb      	str	r3, [r7, #12]
 8013092:	e001      	b.n	8013098 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013094:	2300      	movs	r3, #0
 8013096:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013098:	f001 fb2e 	bl	80146f8 <vPortExitCritical>

	return xReturn;
 801309c:	68fb      	ldr	r3, [r7, #12]
}
 801309e:	4618      	mov	r0, r3
 80130a0:	3710      	adds	r7, #16
 80130a2:	46bd      	mov	sp, r7
 80130a4:	bd80      	pop	{r7, pc}

080130a6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80130a6:	b580      	push	{r7, lr}
 80130a8:	b084      	sub	sp, #16
 80130aa:	af00      	add	r7, sp, #0
 80130ac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80130ae:	f001 faf5 	bl	801469c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80130ba:	429a      	cmp	r2, r3
 80130bc:	d102      	bne.n	80130c4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80130be:	2301      	movs	r3, #1
 80130c0:	60fb      	str	r3, [r7, #12]
 80130c2:	e001      	b.n	80130c8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80130c4:	2300      	movs	r3, #0
 80130c6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80130c8:	f001 fb16 	bl	80146f8 <vPortExitCritical>

	return xReturn;
 80130cc:	68fb      	ldr	r3, [r7, #12]
}
 80130ce:	4618      	mov	r0, r3
 80130d0:	3710      	adds	r7, #16
 80130d2:	46bd      	mov	sp, r7
 80130d4:	bd80      	pop	{r7, pc}

080130d6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80130d6:	b580      	push	{r7, lr}
 80130d8:	b08e      	sub	sp, #56	; 0x38
 80130da:	af04      	add	r7, sp, #16
 80130dc:	60f8      	str	r0, [r7, #12]
 80130de:	60b9      	str	r1, [r7, #8]
 80130e0:	607a      	str	r2, [r7, #4]
 80130e2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80130e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d109      	bne.n	80130fe <xTaskCreateStatic+0x28>
	__asm volatile
 80130ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130ee:	f383 8811 	msr	BASEPRI, r3
 80130f2:	f3bf 8f6f 	isb	sy
 80130f6:	f3bf 8f4f 	dsb	sy
 80130fa:	623b      	str	r3, [r7, #32]
 80130fc:	e7fe      	b.n	80130fc <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80130fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013100:	2b00      	cmp	r3, #0
 8013102:	d109      	bne.n	8013118 <xTaskCreateStatic+0x42>
 8013104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013108:	f383 8811 	msr	BASEPRI, r3
 801310c:	f3bf 8f6f 	isb	sy
 8013110:	f3bf 8f4f 	dsb	sy
 8013114:	61fb      	str	r3, [r7, #28]
 8013116:	e7fe      	b.n	8013116 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013118:	2354      	movs	r3, #84	; 0x54
 801311a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801311c:	693b      	ldr	r3, [r7, #16]
 801311e:	2b54      	cmp	r3, #84	; 0x54
 8013120:	d009      	beq.n	8013136 <xTaskCreateStatic+0x60>
 8013122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013126:	f383 8811 	msr	BASEPRI, r3
 801312a:	f3bf 8f6f 	isb	sy
 801312e:	f3bf 8f4f 	dsb	sy
 8013132:	61bb      	str	r3, [r7, #24]
 8013134:	e7fe      	b.n	8013134 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013138:	2b00      	cmp	r3, #0
 801313a:	d01e      	beq.n	801317a <xTaskCreateStatic+0xa4>
 801313c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801313e:	2b00      	cmp	r3, #0
 8013140:	d01b      	beq.n	801317a <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013144:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013148:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801314a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801314c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801314e:	2202      	movs	r2, #2
 8013150:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013154:	2300      	movs	r3, #0
 8013156:	9303      	str	r3, [sp, #12]
 8013158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801315a:	9302      	str	r3, [sp, #8]
 801315c:	f107 0314 	add.w	r3, r7, #20
 8013160:	9301      	str	r3, [sp, #4]
 8013162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013164:	9300      	str	r3, [sp, #0]
 8013166:	683b      	ldr	r3, [r7, #0]
 8013168:	687a      	ldr	r2, [r7, #4]
 801316a:	68b9      	ldr	r1, [r7, #8]
 801316c:	68f8      	ldr	r0, [r7, #12]
 801316e:	f000 f850 	bl	8013212 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013172:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013174:	f000 f8cc 	bl	8013310 <prvAddNewTaskToReadyList>
 8013178:	e001      	b.n	801317e <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 801317a:	2300      	movs	r3, #0
 801317c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801317e:	697b      	ldr	r3, [r7, #20]
	}
 8013180:	4618      	mov	r0, r3
 8013182:	3728      	adds	r7, #40	; 0x28
 8013184:	46bd      	mov	sp, r7
 8013186:	bd80      	pop	{r7, pc}

08013188 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013188:	b580      	push	{r7, lr}
 801318a:	b08c      	sub	sp, #48	; 0x30
 801318c:	af04      	add	r7, sp, #16
 801318e:	60f8      	str	r0, [r7, #12]
 8013190:	60b9      	str	r1, [r7, #8]
 8013192:	603b      	str	r3, [r7, #0]
 8013194:	4613      	mov	r3, r2
 8013196:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013198:	88fb      	ldrh	r3, [r7, #6]
 801319a:	009b      	lsls	r3, r3, #2
 801319c:	4618      	mov	r0, r3
 801319e:	f001 fb97 	bl	80148d0 <pvPortMalloc>
 80131a2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80131a4:	697b      	ldr	r3, [r7, #20]
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d00e      	beq.n	80131c8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80131aa:	2054      	movs	r0, #84	; 0x54
 80131ac:	f001 fb90 	bl	80148d0 <pvPortMalloc>
 80131b0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80131b2:	69fb      	ldr	r3, [r7, #28]
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d003      	beq.n	80131c0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80131b8:	69fb      	ldr	r3, [r7, #28]
 80131ba:	697a      	ldr	r2, [r7, #20]
 80131bc:	631a      	str	r2, [r3, #48]	; 0x30
 80131be:	e005      	b.n	80131cc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80131c0:	6978      	ldr	r0, [r7, #20]
 80131c2:	f001 fc47 	bl	8014a54 <vPortFree>
 80131c6:	e001      	b.n	80131cc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80131c8:	2300      	movs	r3, #0
 80131ca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80131cc:	69fb      	ldr	r3, [r7, #28]
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d017      	beq.n	8013202 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80131d2:	69fb      	ldr	r3, [r7, #28]
 80131d4:	2200      	movs	r2, #0
 80131d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80131da:	88fa      	ldrh	r2, [r7, #6]
 80131dc:	2300      	movs	r3, #0
 80131de:	9303      	str	r3, [sp, #12]
 80131e0:	69fb      	ldr	r3, [r7, #28]
 80131e2:	9302      	str	r3, [sp, #8]
 80131e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131e6:	9301      	str	r3, [sp, #4]
 80131e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131ea:	9300      	str	r3, [sp, #0]
 80131ec:	683b      	ldr	r3, [r7, #0]
 80131ee:	68b9      	ldr	r1, [r7, #8]
 80131f0:	68f8      	ldr	r0, [r7, #12]
 80131f2:	f000 f80e 	bl	8013212 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80131f6:	69f8      	ldr	r0, [r7, #28]
 80131f8:	f000 f88a 	bl	8013310 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80131fc:	2301      	movs	r3, #1
 80131fe:	61bb      	str	r3, [r7, #24]
 8013200:	e002      	b.n	8013208 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013202:	f04f 33ff 	mov.w	r3, #4294967295
 8013206:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013208:	69bb      	ldr	r3, [r7, #24]
	}
 801320a:	4618      	mov	r0, r3
 801320c:	3720      	adds	r7, #32
 801320e:	46bd      	mov	sp, r7
 8013210:	bd80      	pop	{r7, pc}

08013212 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013212:	b580      	push	{r7, lr}
 8013214:	b088      	sub	sp, #32
 8013216:	af00      	add	r7, sp, #0
 8013218:	60f8      	str	r0, [r7, #12]
 801321a:	60b9      	str	r1, [r7, #8]
 801321c:	607a      	str	r2, [r7, #4]
 801321e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8013220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013222:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801322a:	3b01      	subs	r3, #1
 801322c:	009b      	lsls	r3, r3, #2
 801322e:	4413      	add	r3, r2
 8013230:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8013232:	69bb      	ldr	r3, [r7, #24]
 8013234:	f023 0307 	bic.w	r3, r3, #7
 8013238:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801323a:	69bb      	ldr	r3, [r7, #24]
 801323c:	f003 0307 	and.w	r3, r3, #7
 8013240:	2b00      	cmp	r3, #0
 8013242:	d009      	beq.n	8013258 <prvInitialiseNewTask+0x46>
 8013244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013248:	f383 8811 	msr	BASEPRI, r3
 801324c:	f3bf 8f6f 	isb	sy
 8013250:	f3bf 8f4f 	dsb	sy
 8013254:	617b      	str	r3, [r7, #20]
 8013256:	e7fe      	b.n	8013256 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013258:	2300      	movs	r3, #0
 801325a:	61fb      	str	r3, [r7, #28]
 801325c:	e012      	b.n	8013284 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801325e:	68ba      	ldr	r2, [r7, #8]
 8013260:	69fb      	ldr	r3, [r7, #28]
 8013262:	4413      	add	r3, r2
 8013264:	7819      	ldrb	r1, [r3, #0]
 8013266:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013268:	69fb      	ldr	r3, [r7, #28]
 801326a:	4413      	add	r3, r2
 801326c:	3334      	adds	r3, #52	; 0x34
 801326e:	460a      	mov	r2, r1
 8013270:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8013272:	68ba      	ldr	r2, [r7, #8]
 8013274:	69fb      	ldr	r3, [r7, #28]
 8013276:	4413      	add	r3, r2
 8013278:	781b      	ldrb	r3, [r3, #0]
 801327a:	2b00      	cmp	r3, #0
 801327c:	d006      	beq.n	801328c <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801327e:	69fb      	ldr	r3, [r7, #28]
 8013280:	3301      	adds	r3, #1
 8013282:	61fb      	str	r3, [r7, #28]
 8013284:	69fb      	ldr	r3, [r7, #28]
 8013286:	2b0f      	cmp	r3, #15
 8013288:	d9e9      	bls.n	801325e <prvInitialiseNewTask+0x4c>
 801328a:	e000      	b.n	801328e <prvInitialiseNewTask+0x7c>
		{
			break;
 801328c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801328e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013290:	2200      	movs	r2, #0
 8013292:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013298:	2b06      	cmp	r3, #6
 801329a:	d901      	bls.n	80132a0 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801329c:	2306      	movs	r3, #6
 801329e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80132a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80132a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80132a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80132aa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80132ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132ae:	2200      	movs	r2, #0
 80132b0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80132b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132b4:	3304      	adds	r3, #4
 80132b6:	4618      	mov	r0, r3
 80132b8:	f7fe ff53 	bl	8012162 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80132bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132be:	3318      	adds	r3, #24
 80132c0:	4618      	mov	r0, r3
 80132c2:	f7fe ff4e 	bl	8012162 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80132c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80132ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80132cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132ce:	f1c3 0207 	rsb	r2, r3, #7
 80132d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80132d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80132da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80132dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132de:	2200      	movs	r2, #0
 80132e0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80132e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132e4:	2200      	movs	r2, #0
 80132e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80132ea:	683a      	ldr	r2, [r7, #0]
 80132ec:	68f9      	ldr	r1, [r7, #12]
 80132ee:	69b8      	ldr	r0, [r7, #24]
 80132f0:	f001 f8aa 	bl	8014448 <pxPortInitialiseStack>
 80132f4:	4602      	mov	r2, r0
 80132f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132f8:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80132fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d002      	beq.n	8013306 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013302:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013304:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013306:	bf00      	nop
 8013308:	3720      	adds	r7, #32
 801330a:	46bd      	mov	sp, r7
 801330c:	bd80      	pop	{r7, pc}
	...

08013310 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013310:	b580      	push	{r7, lr}
 8013312:	b082      	sub	sp, #8
 8013314:	af00      	add	r7, sp, #0
 8013316:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013318:	f001 f9c0 	bl	801469c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801331c:	4b2a      	ldr	r3, [pc, #168]	; (80133c8 <prvAddNewTaskToReadyList+0xb8>)
 801331e:	681b      	ldr	r3, [r3, #0]
 8013320:	3301      	adds	r3, #1
 8013322:	4a29      	ldr	r2, [pc, #164]	; (80133c8 <prvAddNewTaskToReadyList+0xb8>)
 8013324:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013326:	4b29      	ldr	r3, [pc, #164]	; (80133cc <prvAddNewTaskToReadyList+0xbc>)
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	2b00      	cmp	r3, #0
 801332c:	d109      	bne.n	8013342 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801332e:	4a27      	ldr	r2, [pc, #156]	; (80133cc <prvAddNewTaskToReadyList+0xbc>)
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013334:	4b24      	ldr	r3, [pc, #144]	; (80133c8 <prvAddNewTaskToReadyList+0xb8>)
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	2b01      	cmp	r3, #1
 801333a:	d110      	bne.n	801335e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801333c:	f000 fbc4 	bl	8013ac8 <prvInitialiseTaskLists>
 8013340:	e00d      	b.n	801335e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013342:	4b23      	ldr	r3, [pc, #140]	; (80133d0 <prvAddNewTaskToReadyList+0xc0>)
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	2b00      	cmp	r3, #0
 8013348:	d109      	bne.n	801335e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801334a:	4b20      	ldr	r3, [pc, #128]	; (80133cc <prvAddNewTaskToReadyList+0xbc>)
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013354:	429a      	cmp	r2, r3
 8013356:	d802      	bhi.n	801335e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013358:	4a1c      	ldr	r2, [pc, #112]	; (80133cc <prvAddNewTaskToReadyList+0xbc>)
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801335e:	4b1d      	ldr	r3, [pc, #116]	; (80133d4 <prvAddNewTaskToReadyList+0xc4>)
 8013360:	681b      	ldr	r3, [r3, #0]
 8013362:	3301      	adds	r3, #1
 8013364:	4a1b      	ldr	r2, [pc, #108]	; (80133d4 <prvAddNewTaskToReadyList+0xc4>)
 8013366:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801336c:	2201      	movs	r2, #1
 801336e:	409a      	lsls	r2, r3
 8013370:	4b19      	ldr	r3, [pc, #100]	; (80133d8 <prvAddNewTaskToReadyList+0xc8>)
 8013372:	681b      	ldr	r3, [r3, #0]
 8013374:	4313      	orrs	r3, r2
 8013376:	4a18      	ldr	r2, [pc, #96]	; (80133d8 <prvAddNewTaskToReadyList+0xc8>)
 8013378:	6013      	str	r3, [r2, #0]
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801337e:	4613      	mov	r3, r2
 8013380:	009b      	lsls	r3, r3, #2
 8013382:	4413      	add	r3, r2
 8013384:	009b      	lsls	r3, r3, #2
 8013386:	4a15      	ldr	r2, [pc, #84]	; (80133dc <prvAddNewTaskToReadyList+0xcc>)
 8013388:	441a      	add	r2, r3
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	3304      	adds	r3, #4
 801338e:	4619      	mov	r1, r3
 8013390:	4610      	mov	r0, r2
 8013392:	f7fe fef3 	bl	801217c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013396:	f001 f9af 	bl	80146f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801339a:	4b0d      	ldr	r3, [pc, #52]	; (80133d0 <prvAddNewTaskToReadyList+0xc0>)
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d00e      	beq.n	80133c0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80133a2:	4b0a      	ldr	r3, [pc, #40]	; (80133cc <prvAddNewTaskToReadyList+0xbc>)
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133ac:	429a      	cmp	r2, r3
 80133ae:	d207      	bcs.n	80133c0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80133b0:	4b0b      	ldr	r3, [pc, #44]	; (80133e0 <prvAddNewTaskToReadyList+0xd0>)
 80133b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80133b6:	601a      	str	r2, [r3, #0]
 80133b8:	f3bf 8f4f 	dsb	sy
 80133bc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80133c0:	bf00      	nop
 80133c2:	3708      	adds	r7, #8
 80133c4:	46bd      	mov	sp, r7
 80133c6:	bd80      	pop	{r7, pc}
 80133c8:	20001560 	.word	0x20001560
 80133cc:	20001460 	.word	0x20001460
 80133d0:	2000156c 	.word	0x2000156c
 80133d4:	2000157c 	.word	0x2000157c
 80133d8:	20001568 	.word	0x20001568
 80133dc:	20001464 	.word	0x20001464
 80133e0:	e000ed04 	.word	0xe000ed04

080133e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80133e4:	b580      	push	{r7, lr}
 80133e6:	b084      	sub	sp, #16
 80133e8:	af00      	add	r7, sp, #0
 80133ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80133ec:	2300      	movs	r3, #0
 80133ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d016      	beq.n	8013424 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80133f6:	4b13      	ldr	r3, [pc, #76]	; (8013444 <vTaskDelay+0x60>)
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d009      	beq.n	8013412 <vTaskDelay+0x2e>
 80133fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013402:	f383 8811 	msr	BASEPRI, r3
 8013406:	f3bf 8f6f 	isb	sy
 801340a:	f3bf 8f4f 	dsb	sy
 801340e:	60bb      	str	r3, [r7, #8]
 8013410:	e7fe      	b.n	8013410 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8013412:	f000 f879 	bl	8013508 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013416:	2100      	movs	r1, #0
 8013418:	6878      	ldr	r0, [r7, #4]
 801341a:	f000 ffaf 	bl	801437c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801341e:	f000 f881 	bl	8013524 <xTaskResumeAll>
 8013422:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	2b00      	cmp	r3, #0
 8013428:	d107      	bne.n	801343a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 801342a:	4b07      	ldr	r3, [pc, #28]	; (8013448 <vTaskDelay+0x64>)
 801342c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013430:	601a      	str	r2, [r3, #0]
 8013432:	f3bf 8f4f 	dsb	sy
 8013436:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801343a:	bf00      	nop
 801343c:	3710      	adds	r7, #16
 801343e:	46bd      	mov	sp, r7
 8013440:	bd80      	pop	{r7, pc}
 8013442:	bf00      	nop
 8013444:	20001588 	.word	0x20001588
 8013448:	e000ed04 	.word	0xe000ed04

0801344c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801344c:	b580      	push	{r7, lr}
 801344e:	b08a      	sub	sp, #40	; 0x28
 8013450:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013452:	2300      	movs	r3, #0
 8013454:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013456:	2300      	movs	r3, #0
 8013458:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801345a:	463a      	mov	r2, r7
 801345c:	1d39      	adds	r1, r7, #4
 801345e:	f107 0308 	add.w	r3, r7, #8
 8013462:	4618      	mov	r0, r3
 8013464:	f7ee fd2c 	bl	8001ec0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013468:	6839      	ldr	r1, [r7, #0]
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	68ba      	ldr	r2, [r7, #8]
 801346e:	9202      	str	r2, [sp, #8]
 8013470:	9301      	str	r3, [sp, #4]
 8013472:	2300      	movs	r3, #0
 8013474:	9300      	str	r3, [sp, #0]
 8013476:	2300      	movs	r3, #0
 8013478:	460a      	mov	r2, r1
 801347a:	491d      	ldr	r1, [pc, #116]	; (80134f0 <vTaskStartScheduler+0xa4>)
 801347c:	481d      	ldr	r0, [pc, #116]	; (80134f4 <vTaskStartScheduler+0xa8>)
 801347e:	f7ff fe2a 	bl	80130d6 <xTaskCreateStatic>
 8013482:	4602      	mov	r2, r0
 8013484:	4b1c      	ldr	r3, [pc, #112]	; (80134f8 <vTaskStartScheduler+0xac>)
 8013486:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013488:	4b1b      	ldr	r3, [pc, #108]	; (80134f8 <vTaskStartScheduler+0xac>)
 801348a:	681b      	ldr	r3, [r3, #0]
 801348c:	2b00      	cmp	r3, #0
 801348e:	d002      	beq.n	8013496 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013490:	2301      	movs	r3, #1
 8013492:	617b      	str	r3, [r7, #20]
 8013494:	e001      	b.n	801349a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013496:	2300      	movs	r3, #0
 8013498:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801349a:	697b      	ldr	r3, [r7, #20]
 801349c:	2b01      	cmp	r3, #1
 801349e:	d115      	bne.n	80134cc <vTaskStartScheduler+0x80>
 80134a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134a4:	f383 8811 	msr	BASEPRI, r3
 80134a8:	f3bf 8f6f 	isb	sy
 80134ac:	f3bf 8f4f 	dsb	sy
 80134b0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80134b2:	4b12      	ldr	r3, [pc, #72]	; (80134fc <vTaskStartScheduler+0xb0>)
 80134b4:	f04f 32ff 	mov.w	r2, #4294967295
 80134b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80134ba:	4b11      	ldr	r3, [pc, #68]	; (8013500 <vTaskStartScheduler+0xb4>)
 80134bc:	2201      	movs	r2, #1
 80134be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80134c0:	4b10      	ldr	r3, [pc, #64]	; (8013504 <vTaskStartScheduler+0xb8>)
 80134c2:	2200      	movs	r2, #0
 80134c4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80134c6:	f001 f84b 	bl	8014560 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80134ca:	e00d      	b.n	80134e8 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80134cc:	697b      	ldr	r3, [r7, #20]
 80134ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134d2:	d109      	bne.n	80134e8 <vTaskStartScheduler+0x9c>
 80134d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134d8:	f383 8811 	msr	BASEPRI, r3
 80134dc:	f3bf 8f6f 	isb	sy
 80134e0:	f3bf 8f4f 	dsb	sy
 80134e4:	60fb      	str	r3, [r7, #12]
 80134e6:	e7fe      	b.n	80134e6 <vTaskStartScheduler+0x9a>
}
 80134e8:	bf00      	nop
 80134ea:	3718      	adds	r7, #24
 80134ec:	46bd      	mov	sp, r7
 80134ee:	bd80      	pop	{r7, pc}
 80134f0:	0801b168 	.word	0x0801b168
 80134f4:	08013a99 	.word	0x08013a99
 80134f8:	20001584 	.word	0x20001584
 80134fc:	20001580 	.word	0x20001580
 8013500:	2000156c 	.word	0x2000156c
 8013504:	20001564 	.word	0x20001564

08013508 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013508:	b480      	push	{r7}
 801350a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 801350c:	4b04      	ldr	r3, [pc, #16]	; (8013520 <vTaskSuspendAll+0x18>)
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	3301      	adds	r3, #1
 8013512:	4a03      	ldr	r2, [pc, #12]	; (8013520 <vTaskSuspendAll+0x18>)
 8013514:	6013      	str	r3, [r2, #0]
}
 8013516:	bf00      	nop
 8013518:	46bd      	mov	sp, r7
 801351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801351e:	4770      	bx	lr
 8013520:	20001588 	.word	0x20001588

08013524 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013524:	b580      	push	{r7, lr}
 8013526:	b084      	sub	sp, #16
 8013528:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801352a:	2300      	movs	r3, #0
 801352c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801352e:	2300      	movs	r3, #0
 8013530:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013532:	4b41      	ldr	r3, [pc, #260]	; (8013638 <xTaskResumeAll+0x114>)
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	2b00      	cmp	r3, #0
 8013538:	d109      	bne.n	801354e <xTaskResumeAll+0x2a>
 801353a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801353e:	f383 8811 	msr	BASEPRI, r3
 8013542:	f3bf 8f6f 	isb	sy
 8013546:	f3bf 8f4f 	dsb	sy
 801354a:	603b      	str	r3, [r7, #0]
 801354c:	e7fe      	b.n	801354c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801354e:	f001 f8a5 	bl	801469c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013552:	4b39      	ldr	r3, [pc, #228]	; (8013638 <xTaskResumeAll+0x114>)
 8013554:	681b      	ldr	r3, [r3, #0]
 8013556:	3b01      	subs	r3, #1
 8013558:	4a37      	ldr	r2, [pc, #220]	; (8013638 <xTaskResumeAll+0x114>)
 801355a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801355c:	4b36      	ldr	r3, [pc, #216]	; (8013638 <xTaskResumeAll+0x114>)
 801355e:	681b      	ldr	r3, [r3, #0]
 8013560:	2b00      	cmp	r3, #0
 8013562:	d161      	bne.n	8013628 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013564:	4b35      	ldr	r3, [pc, #212]	; (801363c <xTaskResumeAll+0x118>)
 8013566:	681b      	ldr	r3, [r3, #0]
 8013568:	2b00      	cmp	r3, #0
 801356a:	d05d      	beq.n	8013628 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801356c:	e02e      	b.n	80135cc <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 801356e:	4b34      	ldr	r3, [pc, #208]	; (8013640 <xTaskResumeAll+0x11c>)
 8013570:	68db      	ldr	r3, [r3, #12]
 8013572:	68db      	ldr	r3, [r3, #12]
 8013574:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	3318      	adds	r3, #24
 801357a:	4618      	mov	r0, r3
 801357c:	f7fe fe5b 	bl	8012236 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013580:	68fb      	ldr	r3, [r7, #12]
 8013582:	3304      	adds	r3, #4
 8013584:	4618      	mov	r0, r3
 8013586:	f7fe fe56 	bl	8012236 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801358a:	68fb      	ldr	r3, [r7, #12]
 801358c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801358e:	2201      	movs	r2, #1
 8013590:	409a      	lsls	r2, r3
 8013592:	4b2c      	ldr	r3, [pc, #176]	; (8013644 <xTaskResumeAll+0x120>)
 8013594:	681b      	ldr	r3, [r3, #0]
 8013596:	4313      	orrs	r3, r2
 8013598:	4a2a      	ldr	r2, [pc, #168]	; (8013644 <xTaskResumeAll+0x120>)
 801359a:	6013      	str	r3, [r2, #0]
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135a0:	4613      	mov	r3, r2
 80135a2:	009b      	lsls	r3, r3, #2
 80135a4:	4413      	add	r3, r2
 80135a6:	009b      	lsls	r3, r3, #2
 80135a8:	4a27      	ldr	r2, [pc, #156]	; (8013648 <xTaskResumeAll+0x124>)
 80135aa:	441a      	add	r2, r3
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	3304      	adds	r3, #4
 80135b0:	4619      	mov	r1, r3
 80135b2:	4610      	mov	r0, r2
 80135b4:	f7fe fde2 	bl	801217c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135bc:	4b23      	ldr	r3, [pc, #140]	; (801364c <xTaskResumeAll+0x128>)
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135c2:	429a      	cmp	r2, r3
 80135c4:	d302      	bcc.n	80135cc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80135c6:	4b22      	ldr	r3, [pc, #136]	; (8013650 <xTaskResumeAll+0x12c>)
 80135c8:	2201      	movs	r2, #1
 80135ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80135cc:	4b1c      	ldr	r3, [pc, #112]	; (8013640 <xTaskResumeAll+0x11c>)
 80135ce:	681b      	ldr	r3, [r3, #0]
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d1cc      	bne.n	801356e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d001      	beq.n	80135de <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80135da:	f000 fb0f 	bl	8013bfc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80135de:	4b1d      	ldr	r3, [pc, #116]	; (8013654 <xTaskResumeAll+0x130>)
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	d010      	beq.n	801360c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80135ea:	f000 f837 	bl	801365c <xTaskIncrementTick>
 80135ee:	4603      	mov	r3, r0
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d002      	beq.n	80135fa <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80135f4:	4b16      	ldr	r3, [pc, #88]	; (8013650 <xTaskResumeAll+0x12c>)
 80135f6:	2201      	movs	r2, #1
 80135f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	3b01      	subs	r3, #1
 80135fe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	2b00      	cmp	r3, #0
 8013604:	d1f1      	bne.n	80135ea <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8013606:	4b13      	ldr	r3, [pc, #76]	; (8013654 <xTaskResumeAll+0x130>)
 8013608:	2200      	movs	r2, #0
 801360a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801360c:	4b10      	ldr	r3, [pc, #64]	; (8013650 <xTaskResumeAll+0x12c>)
 801360e:	681b      	ldr	r3, [r3, #0]
 8013610:	2b00      	cmp	r3, #0
 8013612:	d009      	beq.n	8013628 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013614:	2301      	movs	r3, #1
 8013616:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013618:	4b0f      	ldr	r3, [pc, #60]	; (8013658 <xTaskResumeAll+0x134>)
 801361a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801361e:	601a      	str	r2, [r3, #0]
 8013620:	f3bf 8f4f 	dsb	sy
 8013624:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013628:	f001 f866 	bl	80146f8 <vPortExitCritical>

	return xAlreadyYielded;
 801362c:	68bb      	ldr	r3, [r7, #8]
}
 801362e:	4618      	mov	r0, r3
 8013630:	3710      	adds	r7, #16
 8013632:	46bd      	mov	sp, r7
 8013634:	bd80      	pop	{r7, pc}
 8013636:	bf00      	nop
 8013638:	20001588 	.word	0x20001588
 801363c:	20001560 	.word	0x20001560
 8013640:	20001520 	.word	0x20001520
 8013644:	20001568 	.word	0x20001568
 8013648:	20001464 	.word	0x20001464
 801364c:	20001460 	.word	0x20001460
 8013650:	20001574 	.word	0x20001574
 8013654:	20001570 	.word	0x20001570
 8013658:	e000ed04 	.word	0xe000ed04

0801365c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801365c:	b580      	push	{r7, lr}
 801365e:	b086      	sub	sp, #24
 8013660:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013662:	2300      	movs	r3, #0
 8013664:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013666:	4b50      	ldr	r3, [pc, #320]	; (80137a8 <xTaskIncrementTick+0x14c>)
 8013668:	681b      	ldr	r3, [r3, #0]
 801366a:	2b00      	cmp	r3, #0
 801366c:	f040 808c 	bne.w	8013788 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013670:	4b4e      	ldr	r3, [pc, #312]	; (80137ac <xTaskIncrementTick+0x150>)
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	3301      	adds	r3, #1
 8013676:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013678:	4a4c      	ldr	r2, [pc, #304]	; (80137ac <xTaskIncrementTick+0x150>)
 801367a:	693b      	ldr	r3, [r7, #16]
 801367c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801367e:	693b      	ldr	r3, [r7, #16]
 8013680:	2b00      	cmp	r3, #0
 8013682:	d11f      	bne.n	80136c4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8013684:	4b4a      	ldr	r3, [pc, #296]	; (80137b0 <xTaskIncrementTick+0x154>)
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	2b00      	cmp	r3, #0
 801368c:	d009      	beq.n	80136a2 <xTaskIncrementTick+0x46>
 801368e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013692:	f383 8811 	msr	BASEPRI, r3
 8013696:	f3bf 8f6f 	isb	sy
 801369a:	f3bf 8f4f 	dsb	sy
 801369e:	603b      	str	r3, [r7, #0]
 80136a0:	e7fe      	b.n	80136a0 <xTaskIncrementTick+0x44>
 80136a2:	4b43      	ldr	r3, [pc, #268]	; (80137b0 <xTaskIncrementTick+0x154>)
 80136a4:	681b      	ldr	r3, [r3, #0]
 80136a6:	60fb      	str	r3, [r7, #12]
 80136a8:	4b42      	ldr	r3, [pc, #264]	; (80137b4 <xTaskIncrementTick+0x158>)
 80136aa:	681b      	ldr	r3, [r3, #0]
 80136ac:	4a40      	ldr	r2, [pc, #256]	; (80137b0 <xTaskIncrementTick+0x154>)
 80136ae:	6013      	str	r3, [r2, #0]
 80136b0:	4a40      	ldr	r2, [pc, #256]	; (80137b4 <xTaskIncrementTick+0x158>)
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	6013      	str	r3, [r2, #0]
 80136b6:	4b40      	ldr	r3, [pc, #256]	; (80137b8 <xTaskIncrementTick+0x15c>)
 80136b8:	681b      	ldr	r3, [r3, #0]
 80136ba:	3301      	adds	r3, #1
 80136bc:	4a3e      	ldr	r2, [pc, #248]	; (80137b8 <xTaskIncrementTick+0x15c>)
 80136be:	6013      	str	r3, [r2, #0]
 80136c0:	f000 fa9c 	bl	8013bfc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80136c4:	4b3d      	ldr	r3, [pc, #244]	; (80137bc <xTaskIncrementTick+0x160>)
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	693a      	ldr	r2, [r7, #16]
 80136ca:	429a      	cmp	r2, r3
 80136cc:	d34d      	bcc.n	801376a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80136ce:	4b38      	ldr	r3, [pc, #224]	; (80137b0 <xTaskIncrementTick+0x154>)
 80136d0:	681b      	ldr	r3, [r3, #0]
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d101      	bne.n	80136dc <xTaskIncrementTick+0x80>
 80136d8:	2301      	movs	r3, #1
 80136da:	e000      	b.n	80136de <xTaskIncrementTick+0x82>
 80136dc:	2300      	movs	r3, #0
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d004      	beq.n	80136ec <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80136e2:	4b36      	ldr	r3, [pc, #216]	; (80137bc <xTaskIncrementTick+0x160>)
 80136e4:	f04f 32ff 	mov.w	r2, #4294967295
 80136e8:	601a      	str	r2, [r3, #0]
					break;
 80136ea:	e03e      	b.n	801376a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80136ec:	4b30      	ldr	r3, [pc, #192]	; (80137b0 <xTaskIncrementTick+0x154>)
 80136ee:	681b      	ldr	r3, [r3, #0]
 80136f0:	68db      	ldr	r3, [r3, #12]
 80136f2:	68db      	ldr	r3, [r3, #12]
 80136f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80136f6:	68bb      	ldr	r3, [r7, #8]
 80136f8:	685b      	ldr	r3, [r3, #4]
 80136fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80136fc:	693a      	ldr	r2, [r7, #16]
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	429a      	cmp	r2, r3
 8013702:	d203      	bcs.n	801370c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013704:	4a2d      	ldr	r2, [pc, #180]	; (80137bc <xTaskIncrementTick+0x160>)
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	6013      	str	r3, [r2, #0]
						break;
 801370a:	e02e      	b.n	801376a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801370c:	68bb      	ldr	r3, [r7, #8]
 801370e:	3304      	adds	r3, #4
 8013710:	4618      	mov	r0, r3
 8013712:	f7fe fd90 	bl	8012236 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013716:	68bb      	ldr	r3, [r7, #8]
 8013718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801371a:	2b00      	cmp	r3, #0
 801371c:	d004      	beq.n	8013728 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801371e:	68bb      	ldr	r3, [r7, #8]
 8013720:	3318      	adds	r3, #24
 8013722:	4618      	mov	r0, r3
 8013724:	f7fe fd87 	bl	8012236 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013728:	68bb      	ldr	r3, [r7, #8]
 801372a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801372c:	2201      	movs	r2, #1
 801372e:	409a      	lsls	r2, r3
 8013730:	4b23      	ldr	r3, [pc, #140]	; (80137c0 <xTaskIncrementTick+0x164>)
 8013732:	681b      	ldr	r3, [r3, #0]
 8013734:	4313      	orrs	r3, r2
 8013736:	4a22      	ldr	r2, [pc, #136]	; (80137c0 <xTaskIncrementTick+0x164>)
 8013738:	6013      	str	r3, [r2, #0]
 801373a:	68bb      	ldr	r3, [r7, #8]
 801373c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801373e:	4613      	mov	r3, r2
 8013740:	009b      	lsls	r3, r3, #2
 8013742:	4413      	add	r3, r2
 8013744:	009b      	lsls	r3, r3, #2
 8013746:	4a1f      	ldr	r2, [pc, #124]	; (80137c4 <xTaskIncrementTick+0x168>)
 8013748:	441a      	add	r2, r3
 801374a:	68bb      	ldr	r3, [r7, #8]
 801374c:	3304      	adds	r3, #4
 801374e:	4619      	mov	r1, r3
 8013750:	4610      	mov	r0, r2
 8013752:	f7fe fd13 	bl	801217c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013756:	68bb      	ldr	r3, [r7, #8]
 8013758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801375a:	4b1b      	ldr	r3, [pc, #108]	; (80137c8 <xTaskIncrementTick+0x16c>)
 801375c:	681b      	ldr	r3, [r3, #0]
 801375e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013760:	429a      	cmp	r2, r3
 8013762:	d3b4      	bcc.n	80136ce <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8013764:	2301      	movs	r3, #1
 8013766:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013768:	e7b1      	b.n	80136ce <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801376a:	4b17      	ldr	r3, [pc, #92]	; (80137c8 <xTaskIncrementTick+0x16c>)
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013770:	4914      	ldr	r1, [pc, #80]	; (80137c4 <xTaskIncrementTick+0x168>)
 8013772:	4613      	mov	r3, r2
 8013774:	009b      	lsls	r3, r3, #2
 8013776:	4413      	add	r3, r2
 8013778:	009b      	lsls	r3, r3, #2
 801377a:	440b      	add	r3, r1
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	2b01      	cmp	r3, #1
 8013780:	d907      	bls.n	8013792 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8013782:	2301      	movs	r3, #1
 8013784:	617b      	str	r3, [r7, #20]
 8013786:	e004      	b.n	8013792 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8013788:	4b10      	ldr	r3, [pc, #64]	; (80137cc <xTaskIncrementTick+0x170>)
 801378a:	681b      	ldr	r3, [r3, #0]
 801378c:	3301      	adds	r3, #1
 801378e:	4a0f      	ldr	r2, [pc, #60]	; (80137cc <xTaskIncrementTick+0x170>)
 8013790:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8013792:	4b0f      	ldr	r3, [pc, #60]	; (80137d0 <xTaskIncrementTick+0x174>)
 8013794:	681b      	ldr	r3, [r3, #0]
 8013796:	2b00      	cmp	r3, #0
 8013798:	d001      	beq.n	801379e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 801379a:	2301      	movs	r3, #1
 801379c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801379e:	697b      	ldr	r3, [r7, #20]
}
 80137a0:	4618      	mov	r0, r3
 80137a2:	3718      	adds	r7, #24
 80137a4:	46bd      	mov	sp, r7
 80137a6:	bd80      	pop	{r7, pc}
 80137a8:	20001588 	.word	0x20001588
 80137ac:	20001564 	.word	0x20001564
 80137b0:	20001518 	.word	0x20001518
 80137b4:	2000151c 	.word	0x2000151c
 80137b8:	20001578 	.word	0x20001578
 80137bc:	20001580 	.word	0x20001580
 80137c0:	20001568 	.word	0x20001568
 80137c4:	20001464 	.word	0x20001464
 80137c8:	20001460 	.word	0x20001460
 80137cc:	20001570 	.word	0x20001570
 80137d0:	20001574 	.word	0x20001574

080137d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80137d4:	b480      	push	{r7}
 80137d6:	b087      	sub	sp, #28
 80137d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80137da:	4b26      	ldr	r3, [pc, #152]	; (8013874 <vTaskSwitchContext+0xa0>)
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d003      	beq.n	80137ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80137e2:	4b25      	ldr	r3, [pc, #148]	; (8013878 <vTaskSwitchContext+0xa4>)
 80137e4:	2201      	movs	r2, #1
 80137e6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80137e8:	e03e      	b.n	8013868 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80137ea:	4b23      	ldr	r3, [pc, #140]	; (8013878 <vTaskSwitchContext+0xa4>)
 80137ec:	2200      	movs	r2, #0
 80137ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80137f0:	4b22      	ldr	r3, [pc, #136]	; (801387c <vTaskSwitchContext+0xa8>)
 80137f2:	681b      	ldr	r3, [r3, #0]
 80137f4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80137f6:	68fb      	ldr	r3, [r7, #12]
 80137f8:	fab3 f383 	clz	r3, r3
 80137fc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80137fe:	7afb      	ldrb	r3, [r7, #11]
 8013800:	f1c3 031f 	rsb	r3, r3, #31
 8013804:	617b      	str	r3, [r7, #20]
 8013806:	491e      	ldr	r1, [pc, #120]	; (8013880 <vTaskSwitchContext+0xac>)
 8013808:	697a      	ldr	r2, [r7, #20]
 801380a:	4613      	mov	r3, r2
 801380c:	009b      	lsls	r3, r3, #2
 801380e:	4413      	add	r3, r2
 8013810:	009b      	lsls	r3, r3, #2
 8013812:	440b      	add	r3, r1
 8013814:	681b      	ldr	r3, [r3, #0]
 8013816:	2b00      	cmp	r3, #0
 8013818:	d109      	bne.n	801382e <vTaskSwitchContext+0x5a>
	__asm volatile
 801381a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801381e:	f383 8811 	msr	BASEPRI, r3
 8013822:	f3bf 8f6f 	isb	sy
 8013826:	f3bf 8f4f 	dsb	sy
 801382a:	607b      	str	r3, [r7, #4]
 801382c:	e7fe      	b.n	801382c <vTaskSwitchContext+0x58>
 801382e:	697a      	ldr	r2, [r7, #20]
 8013830:	4613      	mov	r3, r2
 8013832:	009b      	lsls	r3, r3, #2
 8013834:	4413      	add	r3, r2
 8013836:	009b      	lsls	r3, r3, #2
 8013838:	4a11      	ldr	r2, [pc, #68]	; (8013880 <vTaskSwitchContext+0xac>)
 801383a:	4413      	add	r3, r2
 801383c:	613b      	str	r3, [r7, #16]
 801383e:	693b      	ldr	r3, [r7, #16]
 8013840:	685b      	ldr	r3, [r3, #4]
 8013842:	685a      	ldr	r2, [r3, #4]
 8013844:	693b      	ldr	r3, [r7, #16]
 8013846:	605a      	str	r2, [r3, #4]
 8013848:	693b      	ldr	r3, [r7, #16]
 801384a:	685a      	ldr	r2, [r3, #4]
 801384c:	693b      	ldr	r3, [r7, #16]
 801384e:	3308      	adds	r3, #8
 8013850:	429a      	cmp	r2, r3
 8013852:	d104      	bne.n	801385e <vTaskSwitchContext+0x8a>
 8013854:	693b      	ldr	r3, [r7, #16]
 8013856:	685b      	ldr	r3, [r3, #4]
 8013858:	685a      	ldr	r2, [r3, #4]
 801385a:	693b      	ldr	r3, [r7, #16]
 801385c:	605a      	str	r2, [r3, #4]
 801385e:	693b      	ldr	r3, [r7, #16]
 8013860:	685b      	ldr	r3, [r3, #4]
 8013862:	68db      	ldr	r3, [r3, #12]
 8013864:	4a07      	ldr	r2, [pc, #28]	; (8013884 <vTaskSwitchContext+0xb0>)
 8013866:	6013      	str	r3, [r2, #0]
}
 8013868:	bf00      	nop
 801386a:	371c      	adds	r7, #28
 801386c:	46bd      	mov	sp, r7
 801386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013872:	4770      	bx	lr
 8013874:	20001588 	.word	0x20001588
 8013878:	20001574 	.word	0x20001574
 801387c:	20001568 	.word	0x20001568
 8013880:	20001464 	.word	0x20001464
 8013884:	20001460 	.word	0x20001460

08013888 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013888:	b580      	push	{r7, lr}
 801388a:	b084      	sub	sp, #16
 801388c:	af00      	add	r7, sp, #0
 801388e:	6078      	str	r0, [r7, #4]
 8013890:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	2b00      	cmp	r3, #0
 8013896:	d109      	bne.n	80138ac <vTaskPlaceOnEventList+0x24>
 8013898:	f04f 0350 	mov.w	r3, #80	; 0x50
 801389c:	f383 8811 	msr	BASEPRI, r3
 80138a0:	f3bf 8f6f 	isb	sy
 80138a4:	f3bf 8f4f 	dsb	sy
 80138a8:	60fb      	str	r3, [r7, #12]
 80138aa:	e7fe      	b.n	80138aa <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80138ac:	4b07      	ldr	r3, [pc, #28]	; (80138cc <vTaskPlaceOnEventList+0x44>)
 80138ae:	681b      	ldr	r3, [r3, #0]
 80138b0:	3318      	adds	r3, #24
 80138b2:	4619      	mov	r1, r3
 80138b4:	6878      	ldr	r0, [r7, #4]
 80138b6:	f7fe fc85 	bl	80121c4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80138ba:	2101      	movs	r1, #1
 80138bc:	6838      	ldr	r0, [r7, #0]
 80138be:	f000 fd5d 	bl	801437c <prvAddCurrentTaskToDelayedList>
}
 80138c2:	bf00      	nop
 80138c4:	3710      	adds	r7, #16
 80138c6:	46bd      	mov	sp, r7
 80138c8:	bd80      	pop	{r7, pc}
 80138ca:	bf00      	nop
 80138cc:	20001460 	.word	0x20001460

080138d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80138d0:	b580      	push	{r7, lr}
 80138d2:	b086      	sub	sp, #24
 80138d4:	af00      	add	r7, sp, #0
 80138d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	68db      	ldr	r3, [r3, #12]
 80138dc:	68db      	ldr	r3, [r3, #12]
 80138de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80138e0:	693b      	ldr	r3, [r7, #16]
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d109      	bne.n	80138fa <xTaskRemoveFromEventList+0x2a>
 80138e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138ea:	f383 8811 	msr	BASEPRI, r3
 80138ee:	f3bf 8f6f 	isb	sy
 80138f2:	f3bf 8f4f 	dsb	sy
 80138f6:	60fb      	str	r3, [r7, #12]
 80138f8:	e7fe      	b.n	80138f8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80138fa:	693b      	ldr	r3, [r7, #16]
 80138fc:	3318      	adds	r3, #24
 80138fe:	4618      	mov	r0, r3
 8013900:	f7fe fc99 	bl	8012236 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013904:	4b1d      	ldr	r3, [pc, #116]	; (801397c <xTaskRemoveFromEventList+0xac>)
 8013906:	681b      	ldr	r3, [r3, #0]
 8013908:	2b00      	cmp	r3, #0
 801390a:	d11c      	bne.n	8013946 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801390c:	693b      	ldr	r3, [r7, #16]
 801390e:	3304      	adds	r3, #4
 8013910:	4618      	mov	r0, r3
 8013912:	f7fe fc90 	bl	8012236 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013916:	693b      	ldr	r3, [r7, #16]
 8013918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801391a:	2201      	movs	r2, #1
 801391c:	409a      	lsls	r2, r3
 801391e:	4b18      	ldr	r3, [pc, #96]	; (8013980 <xTaskRemoveFromEventList+0xb0>)
 8013920:	681b      	ldr	r3, [r3, #0]
 8013922:	4313      	orrs	r3, r2
 8013924:	4a16      	ldr	r2, [pc, #88]	; (8013980 <xTaskRemoveFromEventList+0xb0>)
 8013926:	6013      	str	r3, [r2, #0]
 8013928:	693b      	ldr	r3, [r7, #16]
 801392a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801392c:	4613      	mov	r3, r2
 801392e:	009b      	lsls	r3, r3, #2
 8013930:	4413      	add	r3, r2
 8013932:	009b      	lsls	r3, r3, #2
 8013934:	4a13      	ldr	r2, [pc, #76]	; (8013984 <xTaskRemoveFromEventList+0xb4>)
 8013936:	441a      	add	r2, r3
 8013938:	693b      	ldr	r3, [r7, #16]
 801393a:	3304      	adds	r3, #4
 801393c:	4619      	mov	r1, r3
 801393e:	4610      	mov	r0, r2
 8013940:	f7fe fc1c 	bl	801217c <vListInsertEnd>
 8013944:	e005      	b.n	8013952 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013946:	693b      	ldr	r3, [r7, #16]
 8013948:	3318      	adds	r3, #24
 801394a:	4619      	mov	r1, r3
 801394c:	480e      	ldr	r0, [pc, #56]	; (8013988 <xTaskRemoveFromEventList+0xb8>)
 801394e:	f7fe fc15 	bl	801217c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013952:	693b      	ldr	r3, [r7, #16]
 8013954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013956:	4b0d      	ldr	r3, [pc, #52]	; (801398c <xTaskRemoveFromEventList+0xbc>)
 8013958:	681b      	ldr	r3, [r3, #0]
 801395a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801395c:	429a      	cmp	r2, r3
 801395e:	d905      	bls.n	801396c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013960:	2301      	movs	r3, #1
 8013962:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013964:	4b0a      	ldr	r3, [pc, #40]	; (8013990 <xTaskRemoveFromEventList+0xc0>)
 8013966:	2201      	movs	r2, #1
 8013968:	601a      	str	r2, [r3, #0]
 801396a:	e001      	b.n	8013970 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 801396c:	2300      	movs	r3, #0
 801396e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8013970:	697b      	ldr	r3, [r7, #20]
}
 8013972:	4618      	mov	r0, r3
 8013974:	3718      	adds	r7, #24
 8013976:	46bd      	mov	sp, r7
 8013978:	bd80      	pop	{r7, pc}
 801397a:	bf00      	nop
 801397c:	20001588 	.word	0x20001588
 8013980:	20001568 	.word	0x20001568
 8013984:	20001464 	.word	0x20001464
 8013988:	20001520 	.word	0x20001520
 801398c:	20001460 	.word	0x20001460
 8013990:	20001574 	.word	0x20001574

08013994 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013994:	b480      	push	{r7}
 8013996:	b083      	sub	sp, #12
 8013998:	af00      	add	r7, sp, #0
 801399a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801399c:	4b06      	ldr	r3, [pc, #24]	; (80139b8 <vTaskInternalSetTimeOutState+0x24>)
 801399e:	681a      	ldr	r2, [r3, #0]
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80139a4:	4b05      	ldr	r3, [pc, #20]	; (80139bc <vTaskInternalSetTimeOutState+0x28>)
 80139a6:	681a      	ldr	r2, [r3, #0]
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	605a      	str	r2, [r3, #4]
}
 80139ac:	bf00      	nop
 80139ae:	370c      	adds	r7, #12
 80139b0:	46bd      	mov	sp, r7
 80139b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139b6:	4770      	bx	lr
 80139b8:	20001578 	.word	0x20001578
 80139bc:	20001564 	.word	0x20001564

080139c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80139c0:	b580      	push	{r7, lr}
 80139c2:	b088      	sub	sp, #32
 80139c4:	af00      	add	r7, sp, #0
 80139c6:	6078      	str	r0, [r7, #4]
 80139c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d109      	bne.n	80139e4 <xTaskCheckForTimeOut+0x24>
 80139d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139d4:	f383 8811 	msr	BASEPRI, r3
 80139d8:	f3bf 8f6f 	isb	sy
 80139dc:	f3bf 8f4f 	dsb	sy
 80139e0:	613b      	str	r3, [r7, #16]
 80139e2:	e7fe      	b.n	80139e2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80139e4:	683b      	ldr	r3, [r7, #0]
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d109      	bne.n	80139fe <xTaskCheckForTimeOut+0x3e>
 80139ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139ee:	f383 8811 	msr	BASEPRI, r3
 80139f2:	f3bf 8f6f 	isb	sy
 80139f6:	f3bf 8f4f 	dsb	sy
 80139fa:	60fb      	str	r3, [r7, #12]
 80139fc:	e7fe      	b.n	80139fc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80139fe:	f000 fe4d 	bl	801469c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013a02:	4b1d      	ldr	r3, [pc, #116]	; (8013a78 <xTaskCheckForTimeOut+0xb8>)
 8013a04:	681b      	ldr	r3, [r3, #0]
 8013a06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	685b      	ldr	r3, [r3, #4]
 8013a0c:	69ba      	ldr	r2, [r7, #24]
 8013a0e:	1ad3      	subs	r3, r2, r3
 8013a10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013a12:	683b      	ldr	r3, [r7, #0]
 8013a14:	681b      	ldr	r3, [r3, #0]
 8013a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a1a:	d102      	bne.n	8013a22 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013a1c:	2300      	movs	r3, #0
 8013a1e:	61fb      	str	r3, [r7, #28]
 8013a20:	e023      	b.n	8013a6a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	681a      	ldr	r2, [r3, #0]
 8013a26:	4b15      	ldr	r3, [pc, #84]	; (8013a7c <xTaskCheckForTimeOut+0xbc>)
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	429a      	cmp	r2, r3
 8013a2c:	d007      	beq.n	8013a3e <xTaskCheckForTimeOut+0x7e>
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	685b      	ldr	r3, [r3, #4]
 8013a32:	69ba      	ldr	r2, [r7, #24]
 8013a34:	429a      	cmp	r2, r3
 8013a36:	d302      	bcc.n	8013a3e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013a38:	2301      	movs	r3, #1
 8013a3a:	61fb      	str	r3, [r7, #28]
 8013a3c:	e015      	b.n	8013a6a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8013a3e:	683b      	ldr	r3, [r7, #0]
 8013a40:	681b      	ldr	r3, [r3, #0]
 8013a42:	697a      	ldr	r2, [r7, #20]
 8013a44:	429a      	cmp	r2, r3
 8013a46:	d20b      	bcs.n	8013a60 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013a48:	683b      	ldr	r3, [r7, #0]
 8013a4a:	681a      	ldr	r2, [r3, #0]
 8013a4c:	697b      	ldr	r3, [r7, #20]
 8013a4e:	1ad2      	subs	r2, r2, r3
 8013a50:	683b      	ldr	r3, [r7, #0]
 8013a52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013a54:	6878      	ldr	r0, [r7, #4]
 8013a56:	f7ff ff9d 	bl	8013994 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8013a5a:	2300      	movs	r3, #0
 8013a5c:	61fb      	str	r3, [r7, #28]
 8013a5e:	e004      	b.n	8013a6a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8013a60:	683b      	ldr	r3, [r7, #0]
 8013a62:	2200      	movs	r2, #0
 8013a64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013a66:	2301      	movs	r3, #1
 8013a68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8013a6a:	f000 fe45 	bl	80146f8 <vPortExitCritical>

	return xReturn;
 8013a6e:	69fb      	ldr	r3, [r7, #28]
}
 8013a70:	4618      	mov	r0, r3
 8013a72:	3720      	adds	r7, #32
 8013a74:	46bd      	mov	sp, r7
 8013a76:	bd80      	pop	{r7, pc}
 8013a78:	20001564 	.word	0x20001564
 8013a7c:	20001578 	.word	0x20001578

08013a80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013a80:	b480      	push	{r7}
 8013a82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013a84:	4b03      	ldr	r3, [pc, #12]	; (8013a94 <vTaskMissedYield+0x14>)
 8013a86:	2201      	movs	r2, #1
 8013a88:	601a      	str	r2, [r3, #0]
}
 8013a8a:	bf00      	nop
 8013a8c:	46bd      	mov	sp, r7
 8013a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a92:	4770      	bx	lr
 8013a94:	20001574 	.word	0x20001574

08013a98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013a98:	b580      	push	{r7, lr}
 8013a9a:	b082      	sub	sp, #8
 8013a9c:	af00      	add	r7, sp, #0
 8013a9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013aa0:	f000 f852 	bl	8013b48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013aa4:	4b06      	ldr	r3, [pc, #24]	; (8013ac0 <prvIdleTask+0x28>)
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	2b01      	cmp	r3, #1
 8013aaa:	d9f9      	bls.n	8013aa0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8013aac:	4b05      	ldr	r3, [pc, #20]	; (8013ac4 <prvIdleTask+0x2c>)
 8013aae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013ab2:	601a      	str	r2, [r3, #0]
 8013ab4:	f3bf 8f4f 	dsb	sy
 8013ab8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8013abc:	e7f0      	b.n	8013aa0 <prvIdleTask+0x8>
 8013abe:	bf00      	nop
 8013ac0:	20001464 	.word	0x20001464
 8013ac4:	e000ed04 	.word	0xe000ed04

08013ac8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013ac8:	b580      	push	{r7, lr}
 8013aca:	b082      	sub	sp, #8
 8013acc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013ace:	2300      	movs	r3, #0
 8013ad0:	607b      	str	r3, [r7, #4]
 8013ad2:	e00c      	b.n	8013aee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013ad4:	687a      	ldr	r2, [r7, #4]
 8013ad6:	4613      	mov	r3, r2
 8013ad8:	009b      	lsls	r3, r3, #2
 8013ada:	4413      	add	r3, r2
 8013adc:	009b      	lsls	r3, r3, #2
 8013ade:	4a12      	ldr	r2, [pc, #72]	; (8013b28 <prvInitialiseTaskLists+0x60>)
 8013ae0:	4413      	add	r3, r2
 8013ae2:	4618      	mov	r0, r3
 8013ae4:	f7fe fb1d 	bl	8012122 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	3301      	adds	r3, #1
 8013aec:	607b      	str	r3, [r7, #4]
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	2b06      	cmp	r3, #6
 8013af2:	d9ef      	bls.n	8013ad4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013af4:	480d      	ldr	r0, [pc, #52]	; (8013b2c <prvInitialiseTaskLists+0x64>)
 8013af6:	f7fe fb14 	bl	8012122 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013afa:	480d      	ldr	r0, [pc, #52]	; (8013b30 <prvInitialiseTaskLists+0x68>)
 8013afc:	f7fe fb11 	bl	8012122 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013b00:	480c      	ldr	r0, [pc, #48]	; (8013b34 <prvInitialiseTaskLists+0x6c>)
 8013b02:	f7fe fb0e 	bl	8012122 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013b06:	480c      	ldr	r0, [pc, #48]	; (8013b38 <prvInitialiseTaskLists+0x70>)
 8013b08:	f7fe fb0b 	bl	8012122 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013b0c:	480b      	ldr	r0, [pc, #44]	; (8013b3c <prvInitialiseTaskLists+0x74>)
 8013b0e:	f7fe fb08 	bl	8012122 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013b12:	4b0b      	ldr	r3, [pc, #44]	; (8013b40 <prvInitialiseTaskLists+0x78>)
 8013b14:	4a05      	ldr	r2, [pc, #20]	; (8013b2c <prvInitialiseTaskLists+0x64>)
 8013b16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013b18:	4b0a      	ldr	r3, [pc, #40]	; (8013b44 <prvInitialiseTaskLists+0x7c>)
 8013b1a:	4a05      	ldr	r2, [pc, #20]	; (8013b30 <prvInitialiseTaskLists+0x68>)
 8013b1c:	601a      	str	r2, [r3, #0]
}
 8013b1e:	bf00      	nop
 8013b20:	3708      	adds	r7, #8
 8013b22:	46bd      	mov	sp, r7
 8013b24:	bd80      	pop	{r7, pc}
 8013b26:	bf00      	nop
 8013b28:	20001464 	.word	0x20001464
 8013b2c:	200014f0 	.word	0x200014f0
 8013b30:	20001504 	.word	0x20001504
 8013b34:	20001520 	.word	0x20001520
 8013b38:	20001534 	.word	0x20001534
 8013b3c:	2000154c 	.word	0x2000154c
 8013b40:	20001518 	.word	0x20001518
 8013b44:	2000151c 	.word	0x2000151c

08013b48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013b48:	b580      	push	{r7, lr}
 8013b4a:	b082      	sub	sp, #8
 8013b4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013b4e:	e019      	b.n	8013b84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013b50:	f000 fda4 	bl	801469c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8013b54:	4b0f      	ldr	r3, [pc, #60]	; (8013b94 <prvCheckTasksWaitingTermination+0x4c>)
 8013b56:	68db      	ldr	r3, [r3, #12]
 8013b58:	68db      	ldr	r3, [r3, #12]
 8013b5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	3304      	adds	r3, #4
 8013b60:	4618      	mov	r0, r3
 8013b62:	f7fe fb68 	bl	8012236 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013b66:	4b0c      	ldr	r3, [pc, #48]	; (8013b98 <prvCheckTasksWaitingTermination+0x50>)
 8013b68:	681b      	ldr	r3, [r3, #0]
 8013b6a:	3b01      	subs	r3, #1
 8013b6c:	4a0a      	ldr	r2, [pc, #40]	; (8013b98 <prvCheckTasksWaitingTermination+0x50>)
 8013b6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013b70:	4b0a      	ldr	r3, [pc, #40]	; (8013b9c <prvCheckTasksWaitingTermination+0x54>)
 8013b72:	681b      	ldr	r3, [r3, #0]
 8013b74:	3b01      	subs	r3, #1
 8013b76:	4a09      	ldr	r2, [pc, #36]	; (8013b9c <prvCheckTasksWaitingTermination+0x54>)
 8013b78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013b7a:	f000 fdbd 	bl	80146f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013b7e:	6878      	ldr	r0, [r7, #4]
 8013b80:	f000 f80e 	bl	8013ba0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013b84:	4b05      	ldr	r3, [pc, #20]	; (8013b9c <prvCheckTasksWaitingTermination+0x54>)
 8013b86:	681b      	ldr	r3, [r3, #0]
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d1e1      	bne.n	8013b50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013b8c:	bf00      	nop
 8013b8e:	3708      	adds	r7, #8
 8013b90:	46bd      	mov	sp, r7
 8013b92:	bd80      	pop	{r7, pc}
 8013b94:	20001534 	.word	0x20001534
 8013b98:	20001560 	.word	0x20001560
 8013b9c:	20001548 	.word	0x20001548

08013ba0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013ba0:	b580      	push	{r7, lr}
 8013ba2:	b084      	sub	sp, #16
 8013ba4:	af00      	add	r7, sp, #0
 8013ba6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d108      	bne.n	8013bc4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013bb6:	4618      	mov	r0, r3
 8013bb8:	f000 ff4c 	bl	8014a54 <vPortFree>
				vPortFree( pxTCB );
 8013bbc:	6878      	ldr	r0, [r7, #4]
 8013bbe:	f000 ff49 	bl	8014a54 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013bc2:	e017      	b.n	8013bf4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013bca:	2b01      	cmp	r3, #1
 8013bcc:	d103      	bne.n	8013bd6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8013bce:	6878      	ldr	r0, [r7, #4]
 8013bd0:	f000 ff40 	bl	8014a54 <vPortFree>
	}
 8013bd4:	e00e      	b.n	8013bf4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013bdc:	2b02      	cmp	r3, #2
 8013bde:	d009      	beq.n	8013bf4 <prvDeleteTCB+0x54>
 8013be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013be4:	f383 8811 	msr	BASEPRI, r3
 8013be8:	f3bf 8f6f 	isb	sy
 8013bec:	f3bf 8f4f 	dsb	sy
 8013bf0:	60fb      	str	r3, [r7, #12]
 8013bf2:	e7fe      	b.n	8013bf2 <prvDeleteTCB+0x52>
	}
 8013bf4:	bf00      	nop
 8013bf6:	3710      	adds	r7, #16
 8013bf8:	46bd      	mov	sp, r7
 8013bfa:	bd80      	pop	{r7, pc}

08013bfc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013bfc:	b480      	push	{r7}
 8013bfe:	b083      	sub	sp, #12
 8013c00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013c02:	4b0f      	ldr	r3, [pc, #60]	; (8013c40 <prvResetNextTaskUnblockTime+0x44>)
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	681b      	ldr	r3, [r3, #0]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d101      	bne.n	8013c10 <prvResetNextTaskUnblockTime+0x14>
 8013c0c:	2301      	movs	r3, #1
 8013c0e:	e000      	b.n	8013c12 <prvResetNextTaskUnblockTime+0x16>
 8013c10:	2300      	movs	r3, #0
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d004      	beq.n	8013c20 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013c16:	4b0b      	ldr	r3, [pc, #44]	; (8013c44 <prvResetNextTaskUnblockTime+0x48>)
 8013c18:	f04f 32ff 	mov.w	r2, #4294967295
 8013c1c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013c1e:	e008      	b.n	8013c32 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8013c20:	4b07      	ldr	r3, [pc, #28]	; (8013c40 <prvResetNextTaskUnblockTime+0x44>)
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	68db      	ldr	r3, [r3, #12]
 8013c26:	68db      	ldr	r3, [r3, #12]
 8013c28:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	685b      	ldr	r3, [r3, #4]
 8013c2e:	4a05      	ldr	r2, [pc, #20]	; (8013c44 <prvResetNextTaskUnblockTime+0x48>)
 8013c30:	6013      	str	r3, [r2, #0]
}
 8013c32:	bf00      	nop
 8013c34:	370c      	adds	r7, #12
 8013c36:	46bd      	mov	sp, r7
 8013c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c3c:	4770      	bx	lr
 8013c3e:	bf00      	nop
 8013c40:	20001518 	.word	0x20001518
 8013c44:	20001580 	.word	0x20001580

08013c48 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013c48:	b480      	push	{r7}
 8013c4a:	b083      	sub	sp, #12
 8013c4c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013c4e:	4b0b      	ldr	r3, [pc, #44]	; (8013c7c <xTaskGetSchedulerState+0x34>)
 8013c50:	681b      	ldr	r3, [r3, #0]
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	d102      	bne.n	8013c5c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8013c56:	2301      	movs	r3, #1
 8013c58:	607b      	str	r3, [r7, #4]
 8013c5a:	e008      	b.n	8013c6e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013c5c:	4b08      	ldr	r3, [pc, #32]	; (8013c80 <xTaskGetSchedulerState+0x38>)
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d102      	bne.n	8013c6a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013c64:	2302      	movs	r3, #2
 8013c66:	607b      	str	r3, [r7, #4]
 8013c68:	e001      	b.n	8013c6e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8013c6a:	2300      	movs	r3, #0
 8013c6c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013c6e:	687b      	ldr	r3, [r7, #4]
	}
 8013c70:	4618      	mov	r0, r3
 8013c72:	370c      	adds	r7, #12
 8013c74:	46bd      	mov	sp, r7
 8013c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c7a:	4770      	bx	lr
 8013c7c:	2000156c 	.word	0x2000156c
 8013c80:	20001588 	.word	0x20001588

08013c84 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8013c84:	b580      	push	{r7, lr}
 8013c86:	b084      	sub	sp, #16
 8013c88:	af00      	add	r7, sp, #0
 8013c8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8013c90:	2300      	movs	r3, #0
 8013c92:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d06e      	beq.n	8013d78 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8013c9a:	68bb      	ldr	r3, [r7, #8]
 8013c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c9e:	4b39      	ldr	r3, [pc, #228]	; (8013d84 <xTaskPriorityInherit+0x100>)
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ca4:	429a      	cmp	r2, r3
 8013ca6:	d25e      	bcs.n	8013d66 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013ca8:	68bb      	ldr	r3, [r7, #8]
 8013caa:	699b      	ldr	r3, [r3, #24]
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	db06      	blt.n	8013cbe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013cb0:	4b34      	ldr	r3, [pc, #208]	; (8013d84 <xTaskPriorityInherit+0x100>)
 8013cb2:	681b      	ldr	r3, [r3, #0]
 8013cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013cb6:	f1c3 0207 	rsb	r2, r3, #7
 8013cba:	68bb      	ldr	r3, [r7, #8]
 8013cbc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8013cbe:	68bb      	ldr	r3, [r7, #8]
 8013cc0:	6959      	ldr	r1, [r3, #20]
 8013cc2:	68bb      	ldr	r3, [r7, #8]
 8013cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013cc6:	4613      	mov	r3, r2
 8013cc8:	009b      	lsls	r3, r3, #2
 8013cca:	4413      	add	r3, r2
 8013ccc:	009b      	lsls	r3, r3, #2
 8013cce:	4a2e      	ldr	r2, [pc, #184]	; (8013d88 <xTaskPriorityInherit+0x104>)
 8013cd0:	4413      	add	r3, r2
 8013cd2:	4299      	cmp	r1, r3
 8013cd4:	d101      	bne.n	8013cda <xTaskPriorityInherit+0x56>
 8013cd6:	2301      	movs	r3, #1
 8013cd8:	e000      	b.n	8013cdc <xTaskPriorityInherit+0x58>
 8013cda:	2300      	movs	r3, #0
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d03a      	beq.n	8013d56 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013ce0:	68bb      	ldr	r3, [r7, #8]
 8013ce2:	3304      	adds	r3, #4
 8013ce4:	4618      	mov	r0, r3
 8013ce6:	f7fe faa6 	bl	8012236 <uxListRemove>
 8013cea:	4603      	mov	r3, r0
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d115      	bne.n	8013d1c <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8013cf0:	68bb      	ldr	r3, [r7, #8]
 8013cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013cf4:	4924      	ldr	r1, [pc, #144]	; (8013d88 <xTaskPriorityInherit+0x104>)
 8013cf6:	4613      	mov	r3, r2
 8013cf8:	009b      	lsls	r3, r3, #2
 8013cfa:	4413      	add	r3, r2
 8013cfc:	009b      	lsls	r3, r3, #2
 8013cfe:	440b      	add	r3, r1
 8013d00:	681b      	ldr	r3, [r3, #0]
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d10a      	bne.n	8013d1c <xTaskPriorityInherit+0x98>
 8013d06:	68bb      	ldr	r3, [r7, #8]
 8013d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d0a:	2201      	movs	r2, #1
 8013d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8013d10:	43da      	mvns	r2, r3
 8013d12:	4b1e      	ldr	r3, [pc, #120]	; (8013d8c <xTaskPriorityInherit+0x108>)
 8013d14:	681b      	ldr	r3, [r3, #0]
 8013d16:	4013      	ands	r3, r2
 8013d18:	4a1c      	ldr	r2, [pc, #112]	; (8013d8c <xTaskPriorityInherit+0x108>)
 8013d1a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013d1c:	4b19      	ldr	r3, [pc, #100]	; (8013d84 <xTaskPriorityInherit+0x100>)
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d22:	68bb      	ldr	r3, [r7, #8]
 8013d24:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8013d26:	68bb      	ldr	r3, [r7, #8]
 8013d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d2a:	2201      	movs	r2, #1
 8013d2c:	409a      	lsls	r2, r3
 8013d2e:	4b17      	ldr	r3, [pc, #92]	; (8013d8c <xTaskPriorityInherit+0x108>)
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	4313      	orrs	r3, r2
 8013d34:	4a15      	ldr	r2, [pc, #84]	; (8013d8c <xTaskPriorityInherit+0x108>)
 8013d36:	6013      	str	r3, [r2, #0]
 8013d38:	68bb      	ldr	r3, [r7, #8]
 8013d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d3c:	4613      	mov	r3, r2
 8013d3e:	009b      	lsls	r3, r3, #2
 8013d40:	4413      	add	r3, r2
 8013d42:	009b      	lsls	r3, r3, #2
 8013d44:	4a10      	ldr	r2, [pc, #64]	; (8013d88 <xTaskPriorityInherit+0x104>)
 8013d46:	441a      	add	r2, r3
 8013d48:	68bb      	ldr	r3, [r7, #8]
 8013d4a:	3304      	adds	r3, #4
 8013d4c:	4619      	mov	r1, r3
 8013d4e:	4610      	mov	r0, r2
 8013d50:	f7fe fa14 	bl	801217c <vListInsertEnd>
 8013d54:	e004      	b.n	8013d60 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013d56:	4b0b      	ldr	r3, [pc, #44]	; (8013d84 <xTaskPriorityInherit+0x100>)
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d5c:	68bb      	ldr	r3, [r7, #8]
 8013d5e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8013d60:	2301      	movs	r3, #1
 8013d62:	60fb      	str	r3, [r7, #12]
 8013d64:	e008      	b.n	8013d78 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8013d66:	68bb      	ldr	r3, [r7, #8]
 8013d68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013d6a:	4b06      	ldr	r3, [pc, #24]	; (8013d84 <xTaskPriorityInherit+0x100>)
 8013d6c:	681b      	ldr	r3, [r3, #0]
 8013d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d70:	429a      	cmp	r2, r3
 8013d72:	d201      	bcs.n	8013d78 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8013d74:	2301      	movs	r3, #1
 8013d76:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013d78:	68fb      	ldr	r3, [r7, #12]
	}
 8013d7a:	4618      	mov	r0, r3
 8013d7c:	3710      	adds	r7, #16
 8013d7e:	46bd      	mov	sp, r7
 8013d80:	bd80      	pop	{r7, pc}
 8013d82:	bf00      	nop
 8013d84:	20001460 	.word	0x20001460
 8013d88:	20001464 	.word	0x20001464
 8013d8c:	20001568 	.word	0x20001568

08013d90 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013d90:	b580      	push	{r7, lr}
 8013d92:	b086      	sub	sp, #24
 8013d94:	af00      	add	r7, sp, #0
 8013d96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013d9c:	2300      	movs	r3, #0
 8013d9e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d06c      	beq.n	8013e80 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8013da6:	4b39      	ldr	r3, [pc, #228]	; (8013e8c <xTaskPriorityDisinherit+0xfc>)
 8013da8:	681b      	ldr	r3, [r3, #0]
 8013daa:	693a      	ldr	r2, [r7, #16]
 8013dac:	429a      	cmp	r2, r3
 8013dae:	d009      	beq.n	8013dc4 <xTaskPriorityDisinherit+0x34>
 8013db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013db4:	f383 8811 	msr	BASEPRI, r3
 8013db8:	f3bf 8f6f 	isb	sy
 8013dbc:	f3bf 8f4f 	dsb	sy
 8013dc0:	60fb      	str	r3, [r7, #12]
 8013dc2:	e7fe      	b.n	8013dc2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8013dc4:	693b      	ldr	r3, [r7, #16]
 8013dc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d109      	bne.n	8013de0 <xTaskPriorityDisinherit+0x50>
 8013dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dd0:	f383 8811 	msr	BASEPRI, r3
 8013dd4:	f3bf 8f6f 	isb	sy
 8013dd8:	f3bf 8f4f 	dsb	sy
 8013ddc:	60bb      	str	r3, [r7, #8]
 8013dde:	e7fe      	b.n	8013dde <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8013de0:	693b      	ldr	r3, [r7, #16]
 8013de2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013de4:	1e5a      	subs	r2, r3, #1
 8013de6:	693b      	ldr	r3, [r7, #16]
 8013de8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013dea:	693b      	ldr	r3, [r7, #16]
 8013dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013dee:	693b      	ldr	r3, [r7, #16]
 8013df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013df2:	429a      	cmp	r2, r3
 8013df4:	d044      	beq.n	8013e80 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013df6:	693b      	ldr	r3, [r7, #16]
 8013df8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d140      	bne.n	8013e80 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013dfe:	693b      	ldr	r3, [r7, #16]
 8013e00:	3304      	adds	r3, #4
 8013e02:	4618      	mov	r0, r3
 8013e04:	f7fe fa17 	bl	8012236 <uxListRemove>
 8013e08:	4603      	mov	r3, r0
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	d115      	bne.n	8013e3a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8013e0e:	693b      	ldr	r3, [r7, #16]
 8013e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e12:	491f      	ldr	r1, [pc, #124]	; (8013e90 <xTaskPriorityDisinherit+0x100>)
 8013e14:	4613      	mov	r3, r2
 8013e16:	009b      	lsls	r3, r3, #2
 8013e18:	4413      	add	r3, r2
 8013e1a:	009b      	lsls	r3, r3, #2
 8013e1c:	440b      	add	r3, r1
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d10a      	bne.n	8013e3a <xTaskPriorityDisinherit+0xaa>
 8013e24:	693b      	ldr	r3, [r7, #16]
 8013e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e28:	2201      	movs	r2, #1
 8013e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8013e2e:	43da      	mvns	r2, r3
 8013e30:	4b18      	ldr	r3, [pc, #96]	; (8013e94 <xTaskPriorityDisinherit+0x104>)
 8013e32:	681b      	ldr	r3, [r3, #0]
 8013e34:	4013      	ands	r3, r2
 8013e36:	4a17      	ldr	r2, [pc, #92]	; (8013e94 <xTaskPriorityDisinherit+0x104>)
 8013e38:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013e3a:	693b      	ldr	r3, [r7, #16]
 8013e3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013e3e:	693b      	ldr	r3, [r7, #16]
 8013e40:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013e42:	693b      	ldr	r3, [r7, #16]
 8013e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e46:	f1c3 0207 	rsb	r2, r3, #7
 8013e4a:	693b      	ldr	r3, [r7, #16]
 8013e4c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8013e4e:	693b      	ldr	r3, [r7, #16]
 8013e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e52:	2201      	movs	r2, #1
 8013e54:	409a      	lsls	r2, r3
 8013e56:	4b0f      	ldr	r3, [pc, #60]	; (8013e94 <xTaskPriorityDisinherit+0x104>)
 8013e58:	681b      	ldr	r3, [r3, #0]
 8013e5a:	4313      	orrs	r3, r2
 8013e5c:	4a0d      	ldr	r2, [pc, #52]	; (8013e94 <xTaskPriorityDisinherit+0x104>)
 8013e5e:	6013      	str	r3, [r2, #0]
 8013e60:	693b      	ldr	r3, [r7, #16]
 8013e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e64:	4613      	mov	r3, r2
 8013e66:	009b      	lsls	r3, r3, #2
 8013e68:	4413      	add	r3, r2
 8013e6a:	009b      	lsls	r3, r3, #2
 8013e6c:	4a08      	ldr	r2, [pc, #32]	; (8013e90 <xTaskPriorityDisinherit+0x100>)
 8013e6e:	441a      	add	r2, r3
 8013e70:	693b      	ldr	r3, [r7, #16]
 8013e72:	3304      	adds	r3, #4
 8013e74:	4619      	mov	r1, r3
 8013e76:	4610      	mov	r0, r2
 8013e78:	f7fe f980 	bl	801217c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013e7c:	2301      	movs	r3, #1
 8013e7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013e80:	697b      	ldr	r3, [r7, #20]
	}
 8013e82:	4618      	mov	r0, r3
 8013e84:	3718      	adds	r7, #24
 8013e86:	46bd      	mov	sp, r7
 8013e88:	bd80      	pop	{r7, pc}
 8013e8a:	bf00      	nop
 8013e8c:	20001460 	.word	0x20001460
 8013e90:	20001464 	.word	0x20001464
 8013e94:	20001568 	.word	0x20001568

08013e98 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8013e98:	b580      	push	{r7, lr}
 8013e9a:	b088      	sub	sp, #32
 8013e9c:	af00      	add	r7, sp, #0
 8013e9e:	6078      	str	r0, [r7, #4]
 8013ea0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8013ea6:	2301      	movs	r3, #1
 8013ea8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	f000 8086 	beq.w	8013fbe <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8013eb2:	69bb      	ldr	r3, [r7, #24]
 8013eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d109      	bne.n	8013ece <vTaskPriorityDisinheritAfterTimeout+0x36>
 8013eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ebe:	f383 8811 	msr	BASEPRI, r3
 8013ec2:	f3bf 8f6f 	isb	sy
 8013ec6:	f3bf 8f4f 	dsb	sy
 8013eca:	60fb      	str	r3, [r7, #12]
 8013ecc:	e7fe      	b.n	8013ecc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8013ece:	69bb      	ldr	r3, [r7, #24]
 8013ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013ed2:	683a      	ldr	r2, [r7, #0]
 8013ed4:	429a      	cmp	r2, r3
 8013ed6:	d902      	bls.n	8013ede <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8013ed8:	683b      	ldr	r3, [r7, #0]
 8013eda:	61fb      	str	r3, [r7, #28]
 8013edc:	e002      	b.n	8013ee4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8013ede:	69bb      	ldr	r3, [r7, #24]
 8013ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013ee2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8013ee4:	69bb      	ldr	r3, [r7, #24]
 8013ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ee8:	69fa      	ldr	r2, [r7, #28]
 8013eea:	429a      	cmp	r2, r3
 8013eec:	d067      	beq.n	8013fbe <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8013eee:	69bb      	ldr	r3, [r7, #24]
 8013ef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013ef2:	697a      	ldr	r2, [r7, #20]
 8013ef4:	429a      	cmp	r2, r3
 8013ef6:	d162      	bne.n	8013fbe <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8013ef8:	4b33      	ldr	r3, [pc, #204]	; (8013fc8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	69ba      	ldr	r2, [r7, #24]
 8013efe:	429a      	cmp	r2, r3
 8013f00:	d109      	bne.n	8013f16 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8013f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f06:	f383 8811 	msr	BASEPRI, r3
 8013f0a:	f3bf 8f6f 	isb	sy
 8013f0e:	f3bf 8f4f 	dsb	sy
 8013f12:	60bb      	str	r3, [r7, #8]
 8013f14:	e7fe      	b.n	8013f14 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8013f16:	69bb      	ldr	r3, [r7, #24]
 8013f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f1a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8013f1c:	69bb      	ldr	r3, [r7, #24]
 8013f1e:	69fa      	ldr	r2, [r7, #28]
 8013f20:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013f22:	69bb      	ldr	r3, [r7, #24]
 8013f24:	699b      	ldr	r3, [r3, #24]
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	db04      	blt.n	8013f34 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013f2a:	69fb      	ldr	r3, [r7, #28]
 8013f2c:	f1c3 0207 	rsb	r2, r3, #7
 8013f30:	69bb      	ldr	r3, [r7, #24]
 8013f32:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013f34:	69bb      	ldr	r3, [r7, #24]
 8013f36:	6959      	ldr	r1, [r3, #20]
 8013f38:	693a      	ldr	r2, [r7, #16]
 8013f3a:	4613      	mov	r3, r2
 8013f3c:	009b      	lsls	r3, r3, #2
 8013f3e:	4413      	add	r3, r2
 8013f40:	009b      	lsls	r3, r3, #2
 8013f42:	4a22      	ldr	r2, [pc, #136]	; (8013fcc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8013f44:	4413      	add	r3, r2
 8013f46:	4299      	cmp	r1, r3
 8013f48:	d101      	bne.n	8013f4e <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8013f4a:	2301      	movs	r3, #1
 8013f4c:	e000      	b.n	8013f50 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8013f4e:	2300      	movs	r3, #0
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d034      	beq.n	8013fbe <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013f54:	69bb      	ldr	r3, [r7, #24]
 8013f56:	3304      	adds	r3, #4
 8013f58:	4618      	mov	r0, r3
 8013f5a:	f7fe f96c 	bl	8012236 <uxListRemove>
 8013f5e:	4603      	mov	r3, r0
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d115      	bne.n	8013f90 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8013f64:	69bb      	ldr	r3, [r7, #24]
 8013f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f68:	4918      	ldr	r1, [pc, #96]	; (8013fcc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8013f6a:	4613      	mov	r3, r2
 8013f6c:	009b      	lsls	r3, r3, #2
 8013f6e:	4413      	add	r3, r2
 8013f70:	009b      	lsls	r3, r3, #2
 8013f72:	440b      	add	r3, r1
 8013f74:	681b      	ldr	r3, [r3, #0]
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d10a      	bne.n	8013f90 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 8013f7a:	69bb      	ldr	r3, [r7, #24]
 8013f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f7e:	2201      	movs	r2, #1
 8013f80:	fa02 f303 	lsl.w	r3, r2, r3
 8013f84:	43da      	mvns	r2, r3
 8013f86:	4b12      	ldr	r3, [pc, #72]	; (8013fd0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8013f88:	681b      	ldr	r3, [r3, #0]
 8013f8a:	4013      	ands	r3, r2
 8013f8c:	4a10      	ldr	r2, [pc, #64]	; (8013fd0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8013f8e:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8013f90:	69bb      	ldr	r3, [r7, #24]
 8013f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f94:	2201      	movs	r2, #1
 8013f96:	409a      	lsls	r2, r3
 8013f98:	4b0d      	ldr	r3, [pc, #52]	; (8013fd0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8013f9a:	681b      	ldr	r3, [r3, #0]
 8013f9c:	4313      	orrs	r3, r2
 8013f9e:	4a0c      	ldr	r2, [pc, #48]	; (8013fd0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8013fa0:	6013      	str	r3, [r2, #0]
 8013fa2:	69bb      	ldr	r3, [r7, #24]
 8013fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fa6:	4613      	mov	r3, r2
 8013fa8:	009b      	lsls	r3, r3, #2
 8013faa:	4413      	add	r3, r2
 8013fac:	009b      	lsls	r3, r3, #2
 8013fae:	4a07      	ldr	r2, [pc, #28]	; (8013fcc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8013fb0:	441a      	add	r2, r3
 8013fb2:	69bb      	ldr	r3, [r7, #24]
 8013fb4:	3304      	adds	r3, #4
 8013fb6:	4619      	mov	r1, r3
 8013fb8:	4610      	mov	r0, r2
 8013fba:	f7fe f8df 	bl	801217c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013fbe:	bf00      	nop
 8013fc0:	3720      	adds	r7, #32
 8013fc2:	46bd      	mov	sp, r7
 8013fc4:	bd80      	pop	{r7, pc}
 8013fc6:	bf00      	nop
 8013fc8:	20001460 	.word	0x20001460
 8013fcc:	20001464 	.word	0x20001464
 8013fd0:	20001568 	.word	0x20001568

08013fd4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8013fd4:	b480      	push	{r7}
 8013fd6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8013fd8:	4b07      	ldr	r3, [pc, #28]	; (8013ff8 <pvTaskIncrementMutexHeldCount+0x24>)
 8013fda:	681b      	ldr	r3, [r3, #0]
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d004      	beq.n	8013fea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8013fe0:	4b05      	ldr	r3, [pc, #20]	; (8013ff8 <pvTaskIncrementMutexHeldCount+0x24>)
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013fe6:	3201      	adds	r2, #1
 8013fe8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8013fea:	4b03      	ldr	r3, [pc, #12]	; (8013ff8 <pvTaskIncrementMutexHeldCount+0x24>)
 8013fec:	681b      	ldr	r3, [r3, #0]
	}
 8013fee:	4618      	mov	r0, r3
 8013ff0:	46bd      	mov	sp, r7
 8013ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ff6:	4770      	bx	lr
 8013ff8:	20001460 	.word	0x20001460

08013ffc <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8013ffc:	b580      	push	{r7, lr}
 8013ffe:	b086      	sub	sp, #24
 8014000:	af00      	add	r7, sp, #0
 8014002:	60f8      	str	r0, [r7, #12]
 8014004:	60b9      	str	r1, [r7, #8]
 8014006:	607a      	str	r2, [r7, #4]
 8014008:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 801400a:	f000 fb47 	bl	801469c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801400e:	4b26      	ldr	r3, [pc, #152]	; (80140a8 <xTaskNotifyWait+0xac>)
 8014010:	681b      	ldr	r3, [r3, #0]
 8014012:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014016:	b2db      	uxtb	r3, r3
 8014018:	2b02      	cmp	r3, #2
 801401a:	d01a      	beq.n	8014052 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 801401c:	4b22      	ldr	r3, [pc, #136]	; (80140a8 <xTaskNotifyWait+0xac>)
 801401e:	681b      	ldr	r3, [r3, #0]
 8014020:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8014022:	68fa      	ldr	r2, [r7, #12]
 8014024:	43d2      	mvns	r2, r2
 8014026:	400a      	ands	r2, r1
 8014028:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801402a:	4b1f      	ldr	r3, [pc, #124]	; (80140a8 <xTaskNotifyWait+0xac>)
 801402c:	681b      	ldr	r3, [r3, #0]
 801402e:	2201      	movs	r2, #1
 8014030:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8014034:	683b      	ldr	r3, [r7, #0]
 8014036:	2b00      	cmp	r3, #0
 8014038:	d00b      	beq.n	8014052 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801403a:	2101      	movs	r1, #1
 801403c:	6838      	ldr	r0, [r7, #0]
 801403e:	f000 f99d 	bl	801437c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8014042:	4b1a      	ldr	r3, [pc, #104]	; (80140ac <xTaskNotifyWait+0xb0>)
 8014044:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014048:	601a      	str	r2, [r3, #0]
 801404a:	f3bf 8f4f 	dsb	sy
 801404e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8014052:	f000 fb51 	bl	80146f8 <vPortExitCritical>

		taskENTER_CRITICAL();
 8014056:	f000 fb21 	bl	801469c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	2b00      	cmp	r3, #0
 801405e:	d004      	beq.n	801406a <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8014060:	4b11      	ldr	r3, [pc, #68]	; (80140a8 <xTaskNotifyWait+0xac>)
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801406a:	4b0f      	ldr	r3, [pc, #60]	; (80140a8 <xTaskNotifyWait+0xac>)
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014072:	b2db      	uxtb	r3, r3
 8014074:	2b02      	cmp	r3, #2
 8014076:	d002      	beq.n	801407e <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8014078:	2300      	movs	r3, #0
 801407a:	617b      	str	r3, [r7, #20]
 801407c:	e008      	b.n	8014090 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 801407e:	4b0a      	ldr	r3, [pc, #40]	; (80140a8 <xTaskNotifyWait+0xac>)
 8014080:	681b      	ldr	r3, [r3, #0]
 8014082:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8014084:	68ba      	ldr	r2, [r7, #8]
 8014086:	43d2      	mvns	r2, r2
 8014088:	400a      	ands	r2, r1
 801408a:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 801408c:	2301      	movs	r3, #1
 801408e:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014090:	4b05      	ldr	r3, [pc, #20]	; (80140a8 <xTaskNotifyWait+0xac>)
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	2200      	movs	r2, #0
 8014096:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 801409a:	f000 fb2d 	bl	80146f8 <vPortExitCritical>

		return xReturn;
 801409e:	697b      	ldr	r3, [r7, #20]
	}
 80140a0:	4618      	mov	r0, r3
 80140a2:	3718      	adds	r7, #24
 80140a4:	46bd      	mov	sp, r7
 80140a6:	bd80      	pop	{r7, pc}
 80140a8:	20001460 	.word	0x20001460
 80140ac:	e000ed04 	.word	0xe000ed04

080140b0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80140b0:	b580      	push	{r7, lr}
 80140b2:	b08a      	sub	sp, #40	; 0x28
 80140b4:	af00      	add	r7, sp, #0
 80140b6:	60f8      	str	r0, [r7, #12]
 80140b8:	60b9      	str	r1, [r7, #8]
 80140ba:	603b      	str	r3, [r7, #0]
 80140bc:	4613      	mov	r3, r2
 80140be:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80140c0:	2301      	movs	r3, #1
 80140c2:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80140c4:	68fb      	ldr	r3, [r7, #12]
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	d109      	bne.n	80140de <xTaskGenericNotify+0x2e>
 80140ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140ce:	f383 8811 	msr	BASEPRI, r3
 80140d2:	f3bf 8f6f 	isb	sy
 80140d6:	f3bf 8f4f 	dsb	sy
 80140da:	61bb      	str	r3, [r7, #24]
 80140dc:	e7fe      	b.n	80140dc <xTaskGenericNotify+0x2c>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 80140de:	68fb      	ldr	r3, [r7, #12]
 80140e0:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80140e2:	f000 fadb 	bl	801469c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80140e6:	683b      	ldr	r3, [r7, #0]
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	d003      	beq.n	80140f4 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80140ec:	6a3b      	ldr	r3, [r7, #32]
 80140ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80140f0:	683b      	ldr	r3, [r7, #0]
 80140f2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80140f4:	6a3b      	ldr	r3, [r7, #32]
 80140f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80140fa:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80140fc:	6a3b      	ldr	r3, [r7, #32]
 80140fe:	2202      	movs	r2, #2
 8014100:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8014104:	79fb      	ldrb	r3, [r7, #7]
 8014106:	2b04      	cmp	r3, #4
 8014108:	d827      	bhi.n	801415a <xTaskGenericNotify+0xaa>
 801410a:	a201      	add	r2, pc, #4	; (adr r2, 8014110 <xTaskGenericNotify+0x60>)
 801410c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014110:	0801415b 	.word	0x0801415b
 8014114:	08014125 	.word	0x08014125
 8014118:	08014133 	.word	0x08014133
 801411c:	0801413f 	.word	0x0801413f
 8014120:	08014147 	.word	0x08014147
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8014124:	6a3b      	ldr	r3, [r7, #32]
 8014126:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014128:	68bb      	ldr	r3, [r7, #8]
 801412a:	431a      	orrs	r2, r3
 801412c:	6a3b      	ldr	r3, [r7, #32]
 801412e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014130:	e013      	b.n	801415a <xTaskGenericNotify+0xaa>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8014132:	6a3b      	ldr	r3, [r7, #32]
 8014134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014136:	1c5a      	adds	r2, r3, #1
 8014138:	6a3b      	ldr	r3, [r7, #32]
 801413a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 801413c:	e00d      	b.n	801415a <xTaskGenericNotify+0xaa>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801413e:	6a3b      	ldr	r3, [r7, #32]
 8014140:	68ba      	ldr	r2, [r7, #8]
 8014142:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014144:	e009      	b.n	801415a <xTaskGenericNotify+0xaa>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8014146:	7ffb      	ldrb	r3, [r7, #31]
 8014148:	2b02      	cmp	r3, #2
 801414a:	d003      	beq.n	8014154 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801414c:	6a3b      	ldr	r3, [r7, #32]
 801414e:	68ba      	ldr	r2, [r7, #8]
 8014150:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8014152:	e001      	b.n	8014158 <xTaskGenericNotify+0xa8>
						xReturn = pdFAIL;
 8014154:	2300      	movs	r3, #0
 8014156:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8014158:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801415a:	7ffb      	ldrb	r3, [r7, #31]
 801415c:	2b01      	cmp	r3, #1
 801415e:	d138      	bne.n	80141d2 <xTaskGenericNotify+0x122>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014160:	6a3b      	ldr	r3, [r7, #32]
 8014162:	3304      	adds	r3, #4
 8014164:	4618      	mov	r0, r3
 8014166:	f7fe f866 	bl	8012236 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 801416a:	6a3b      	ldr	r3, [r7, #32]
 801416c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801416e:	2201      	movs	r2, #1
 8014170:	409a      	lsls	r2, r3
 8014172:	4b1b      	ldr	r3, [pc, #108]	; (80141e0 <xTaskGenericNotify+0x130>)
 8014174:	681b      	ldr	r3, [r3, #0]
 8014176:	4313      	orrs	r3, r2
 8014178:	4a19      	ldr	r2, [pc, #100]	; (80141e0 <xTaskGenericNotify+0x130>)
 801417a:	6013      	str	r3, [r2, #0]
 801417c:	6a3b      	ldr	r3, [r7, #32]
 801417e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014180:	4613      	mov	r3, r2
 8014182:	009b      	lsls	r3, r3, #2
 8014184:	4413      	add	r3, r2
 8014186:	009b      	lsls	r3, r3, #2
 8014188:	4a16      	ldr	r2, [pc, #88]	; (80141e4 <xTaskGenericNotify+0x134>)
 801418a:	441a      	add	r2, r3
 801418c:	6a3b      	ldr	r3, [r7, #32]
 801418e:	3304      	adds	r3, #4
 8014190:	4619      	mov	r1, r3
 8014192:	4610      	mov	r0, r2
 8014194:	f7fd fff2 	bl	801217c <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8014198:	6a3b      	ldr	r3, [r7, #32]
 801419a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801419c:	2b00      	cmp	r3, #0
 801419e:	d009      	beq.n	80141b4 <xTaskGenericNotify+0x104>
 80141a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141a4:	f383 8811 	msr	BASEPRI, r3
 80141a8:	f3bf 8f6f 	isb	sy
 80141ac:	f3bf 8f4f 	dsb	sy
 80141b0:	617b      	str	r3, [r7, #20]
 80141b2:	e7fe      	b.n	80141b2 <xTaskGenericNotify+0x102>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80141b4:	6a3b      	ldr	r3, [r7, #32]
 80141b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80141b8:	4b0b      	ldr	r3, [pc, #44]	; (80141e8 <xTaskGenericNotify+0x138>)
 80141ba:	681b      	ldr	r3, [r3, #0]
 80141bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141be:	429a      	cmp	r2, r3
 80141c0:	d907      	bls.n	80141d2 <xTaskGenericNotify+0x122>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80141c2:	4b0a      	ldr	r3, [pc, #40]	; (80141ec <xTaskGenericNotify+0x13c>)
 80141c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80141c8:	601a      	str	r2, [r3, #0]
 80141ca:	f3bf 8f4f 	dsb	sy
 80141ce:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80141d2:	f000 fa91 	bl	80146f8 <vPortExitCritical>

		return xReturn;
 80141d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80141d8:	4618      	mov	r0, r3
 80141da:	3728      	adds	r7, #40	; 0x28
 80141dc:	46bd      	mov	sp, r7
 80141de:	bd80      	pop	{r7, pc}
 80141e0:	20001568 	.word	0x20001568
 80141e4:	20001464 	.word	0x20001464
 80141e8:	20001460 	.word	0x20001460
 80141ec:	e000ed04 	.word	0xe000ed04

080141f0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80141f0:	b580      	push	{r7, lr}
 80141f2:	b08e      	sub	sp, #56	; 0x38
 80141f4:	af00      	add	r7, sp, #0
 80141f6:	60f8      	str	r0, [r7, #12]
 80141f8:	60b9      	str	r1, [r7, #8]
 80141fa:	603b      	str	r3, [r7, #0]
 80141fc:	4613      	mov	r3, r2
 80141fe:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8014200:	2301      	movs	r3, #1
 8014202:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	2b00      	cmp	r3, #0
 8014208:	d109      	bne.n	801421e <xTaskGenericNotifyFromISR+0x2e>
 801420a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801420e:	f383 8811 	msr	BASEPRI, r3
 8014212:	f3bf 8f6f 	isb	sy
 8014216:	f3bf 8f4f 	dsb	sy
 801421a:	627b      	str	r3, [r7, #36]	; 0x24
 801421c:	e7fe      	b.n	801421c <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801421e:	f000 fb19 	bl	8014854 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8014222:	68fb      	ldr	r3, [r7, #12]
 8014224:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8014226:	f3ef 8211 	mrs	r2, BASEPRI
 801422a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801422e:	f383 8811 	msr	BASEPRI, r3
 8014232:	f3bf 8f6f 	isb	sy
 8014236:	f3bf 8f4f 	dsb	sy
 801423a:	623a      	str	r2, [r7, #32]
 801423c:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 801423e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014240:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8014242:	683b      	ldr	r3, [r7, #0]
 8014244:	2b00      	cmp	r3, #0
 8014246:	d003      	beq.n	8014250 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8014248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801424a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801424c:	683b      	ldr	r3, [r7, #0]
 801424e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8014250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014252:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014256:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801425a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801425c:	2202      	movs	r2, #2
 801425e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8014262:	79fb      	ldrb	r3, [r7, #7]
 8014264:	2b04      	cmp	r3, #4
 8014266:	d829      	bhi.n	80142bc <xTaskGenericNotifyFromISR+0xcc>
 8014268:	a201      	add	r2, pc, #4	; (adr r2, 8014270 <xTaskGenericNotifyFromISR+0x80>)
 801426a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801426e:	bf00      	nop
 8014270:	080142bd 	.word	0x080142bd
 8014274:	08014285 	.word	0x08014285
 8014278:	08014293 	.word	0x08014293
 801427c:	0801429f 	.word	0x0801429f
 8014280:	080142a7 	.word	0x080142a7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8014284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014286:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014288:	68bb      	ldr	r3, [r7, #8]
 801428a:	431a      	orrs	r2, r3
 801428c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801428e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014290:	e014      	b.n	80142bc <xTaskGenericNotifyFromISR+0xcc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8014292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014296:	1c5a      	adds	r2, r3, #1
 8014298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801429a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 801429c:	e00e      	b.n	80142bc <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801429e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142a0:	68ba      	ldr	r2, [r7, #8]
 80142a2:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80142a4:	e00a      	b.n	80142bc <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80142a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80142aa:	2b02      	cmp	r3, #2
 80142ac:	d003      	beq.n	80142b6 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80142ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142b0:	68ba      	ldr	r2, [r7, #8]
 80142b2:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80142b4:	e001      	b.n	80142ba <xTaskGenericNotifyFromISR+0xca>
						xReturn = pdFAIL;
 80142b6:	2300      	movs	r3, #0
 80142b8:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80142ba:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80142bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80142c0:	2b01      	cmp	r3, #1
 80142c2:	d145      	bne.n	8014350 <xTaskGenericNotifyFromISR+0x160>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80142c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d009      	beq.n	80142e0 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 80142cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142d0:	f383 8811 	msr	BASEPRI, r3
 80142d4:	f3bf 8f6f 	isb	sy
 80142d8:	f3bf 8f4f 	dsb	sy
 80142dc:	61bb      	str	r3, [r7, #24]
 80142de:	e7fe      	b.n	80142de <xTaskGenericNotifyFromISR+0xee>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80142e0:	4b20      	ldr	r3, [pc, #128]	; (8014364 <xTaskGenericNotifyFromISR+0x174>)
 80142e2:	681b      	ldr	r3, [r3, #0]
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d11c      	bne.n	8014322 <xTaskGenericNotifyFromISR+0x132>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80142e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142ea:	3304      	adds	r3, #4
 80142ec:	4618      	mov	r0, r3
 80142ee:	f7fd ffa2 	bl	8012236 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80142f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142f6:	2201      	movs	r2, #1
 80142f8:	409a      	lsls	r2, r3
 80142fa:	4b1b      	ldr	r3, [pc, #108]	; (8014368 <xTaskGenericNotifyFromISR+0x178>)
 80142fc:	681b      	ldr	r3, [r3, #0]
 80142fe:	4313      	orrs	r3, r2
 8014300:	4a19      	ldr	r2, [pc, #100]	; (8014368 <xTaskGenericNotifyFromISR+0x178>)
 8014302:	6013      	str	r3, [r2, #0]
 8014304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014308:	4613      	mov	r3, r2
 801430a:	009b      	lsls	r3, r3, #2
 801430c:	4413      	add	r3, r2
 801430e:	009b      	lsls	r3, r3, #2
 8014310:	4a16      	ldr	r2, [pc, #88]	; (801436c <xTaskGenericNotifyFromISR+0x17c>)
 8014312:	441a      	add	r2, r3
 8014314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014316:	3304      	adds	r3, #4
 8014318:	4619      	mov	r1, r3
 801431a:	4610      	mov	r0, r2
 801431c:	f7fd ff2e 	bl	801217c <vListInsertEnd>
 8014320:	e005      	b.n	801432e <xTaskGenericNotifyFromISR+0x13e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8014322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014324:	3318      	adds	r3, #24
 8014326:	4619      	mov	r1, r3
 8014328:	4811      	ldr	r0, [pc, #68]	; (8014370 <xTaskGenericNotifyFromISR+0x180>)
 801432a:	f7fd ff27 	bl	801217c <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801432e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014332:	4b10      	ldr	r3, [pc, #64]	; (8014374 <xTaskGenericNotifyFromISR+0x184>)
 8014334:	681b      	ldr	r3, [r3, #0]
 8014336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014338:	429a      	cmp	r2, r3
 801433a:	d909      	bls.n	8014350 <xTaskGenericNotifyFromISR+0x160>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 801433c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801433e:	2b00      	cmp	r3, #0
 8014340:	d003      	beq.n	801434a <xTaskGenericNotifyFromISR+0x15a>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8014342:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014344:	2201      	movs	r2, #1
 8014346:	601a      	str	r2, [r3, #0]
 8014348:	e002      	b.n	8014350 <xTaskGenericNotifyFromISR+0x160>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 801434a:	4b0b      	ldr	r3, [pc, #44]	; (8014378 <xTaskGenericNotifyFromISR+0x188>)
 801434c:	2201      	movs	r2, #1
 801434e:	601a      	str	r2, [r3, #0]
 8014350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014352:	617b      	str	r3, [r7, #20]
	__asm volatile
 8014354:	697b      	ldr	r3, [r7, #20]
 8014356:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 801435a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 801435c:	4618      	mov	r0, r3
 801435e:	3738      	adds	r7, #56	; 0x38
 8014360:	46bd      	mov	sp, r7
 8014362:	bd80      	pop	{r7, pc}
 8014364:	20001588 	.word	0x20001588
 8014368:	20001568 	.word	0x20001568
 801436c:	20001464 	.word	0x20001464
 8014370:	20001520 	.word	0x20001520
 8014374:	20001460 	.word	0x20001460
 8014378:	20001574 	.word	0x20001574

0801437c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801437c:	b580      	push	{r7, lr}
 801437e:	b084      	sub	sp, #16
 8014380:	af00      	add	r7, sp, #0
 8014382:	6078      	str	r0, [r7, #4]
 8014384:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014386:	4b29      	ldr	r3, [pc, #164]	; (801442c <prvAddCurrentTaskToDelayedList+0xb0>)
 8014388:	681b      	ldr	r3, [r3, #0]
 801438a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801438c:	4b28      	ldr	r3, [pc, #160]	; (8014430 <prvAddCurrentTaskToDelayedList+0xb4>)
 801438e:	681b      	ldr	r3, [r3, #0]
 8014390:	3304      	adds	r3, #4
 8014392:	4618      	mov	r0, r3
 8014394:	f7fd ff4f 	bl	8012236 <uxListRemove>
 8014398:	4603      	mov	r3, r0
 801439a:	2b00      	cmp	r3, #0
 801439c:	d10b      	bne.n	80143b6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 801439e:	4b24      	ldr	r3, [pc, #144]	; (8014430 <prvAddCurrentTaskToDelayedList+0xb4>)
 80143a0:	681b      	ldr	r3, [r3, #0]
 80143a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143a4:	2201      	movs	r2, #1
 80143a6:	fa02 f303 	lsl.w	r3, r2, r3
 80143aa:	43da      	mvns	r2, r3
 80143ac:	4b21      	ldr	r3, [pc, #132]	; (8014434 <prvAddCurrentTaskToDelayedList+0xb8>)
 80143ae:	681b      	ldr	r3, [r3, #0]
 80143b0:	4013      	ands	r3, r2
 80143b2:	4a20      	ldr	r2, [pc, #128]	; (8014434 <prvAddCurrentTaskToDelayedList+0xb8>)
 80143b4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80143bc:	d10a      	bne.n	80143d4 <prvAddCurrentTaskToDelayedList+0x58>
 80143be:	683b      	ldr	r3, [r7, #0]
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	d007      	beq.n	80143d4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80143c4:	4b1a      	ldr	r3, [pc, #104]	; (8014430 <prvAddCurrentTaskToDelayedList+0xb4>)
 80143c6:	681b      	ldr	r3, [r3, #0]
 80143c8:	3304      	adds	r3, #4
 80143ca:	4619      	mov	r1, r3
 80143cc:	481a      	ldr	r0, [pc, #104]	; (8014438 <prvAddCurrentTaskToDelayedList+0xbc>)
 80143ce:	f7fd fed5 	bl	801217c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80143d2:	e026      	b.n	8014422 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80143d4:	68fa      	ldr	r2, [r7, #12]
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	4413      	add	r3, r2
 80143da:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80143dc:	4b14      	ldr	r3, [pc, #80]	; (8014430 <prvAddCurrentTaskToDelayedList+0xb4>)
 80143de:	681b      	ldr	r3, [r3, #0]
 80143e0:	68ba      	ldr	r2, [r7, #8]
 80143e2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80143e4:	68ba      	ldr	r2, [r7, #8]
 80143e6:	68fb      	ldr	r3, [r7, #12]
 80143e8:	429a      	cmp	r2, r3
 80143ea:	d209      	bcs.n	8014400 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80143ec:	4b13      	ldr	r3, [pc, #76]	; (801443c <prvAddCurrentTaskToDelayedList+0xc0>)
 80143ee:	681a      	ldr	r2, [r3, #0]
 80143f0:	4b0f      	ldr	r3, [pc, #60]	; (8014430 <prvAddCurrentTaskToDelayedList+0xb4>)
 80143f2:	681b      	ldr	r3, [r3, #0]
 80143f4:	3304      	adds	r3, #4
 80143f6:	4619      	mov	r1, r3
 80143f8:	4610      	mov	r0, r2
 80143fa:	f7fd fee3 	bl	80121c4 <vListInsert>
}
 80143fe:	e010      	b.n	8014422 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014400:	4b0f      	ldr	r3, [pc, #60]	; (8014440 <prvAddCurrentTaskToDelayedList+0xc4>)
 8014402:	681a      	ldr	r2, [r3, #0]
 8014404:	4b0a      	ldr	r3, [pc, #40]	; (8014430 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	3304      	adds	r3, #4
 801440a:	4619      	mov	r1, r3
 801440c:	4610      	mov	r0, r2
 801440e:	f7fd fed9 	bl	80121c4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014412:	4b0c      	ldr	r3, [pc, #48]	; (8014444 <prvAddCurrentTaskToDelayedList+0xc8>)
 8014414:	681b      	ldr	r3, [r3, #0]
 8014416:	68ba      	ldr	r2, [r7, #8]
 8014418:	429a      	cmp	r2, r3
 801441a:	d202      	bcs.n	8014422 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801441c:	4a09      	ldr	r2, [pc, #36]	; (8014444 <prvAddCurrentTaskToDelayedList+0xc8>)
 801441e:	68bb      	ldr	r3, [r7, #8]
 8014420:	6013      	str	r3, [r2, #0]
}
 8014422:	bf00      	nop
 8014424:	3710      	adds	r7, #16
 8014426:	46bd      	mov	sp, r7
 8014428:	bd80      	pop	{r7, pc}
 801442a:	bf00      	nop
 801442c:	20001564 	.word	0x20001564
 8014430:	20001460 	.word	0x20001460
 8014434:	20001568 	.word	0x20001568
 8014438:	2000154c 	.word	0x2000154c
 801443c:	2000151c 	.word	0x2000151c
 8014440:	20001518 	.word	0x20001518
 8014444:	20001580 	.word	0x20001580

08014448 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014448:	b480      	push	{r7}
 801444a:	b085      	sub	sp, #20
 801444c:	af00      	add	r7, sp, #0
 801444e:	60f8      	str	r0, [r7, #12]
 8014450:	60b9      	str	r1, [r7, #8]
 8014452:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014454:	68fb      	ldr	r3, [r7, #12]
 8014456:	3b04      	subs	r3, #4
 8014458:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014460:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014462:	68fb      	ldr	r3, [r7, #12]
 8014464:	3b04      	subs	r3, #4
 8014466:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014468:	68bb      	ldr	r3, [r7, #8]
 801446a:	f023 0201 	bic.w	r2, r3, #1
 801446e:	68fb      	ldr	r3, [r7, #12]
 8014470:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014472:	68fb      	ldr	r3, [r7, #12]
 8014474:	3b04      	subs	r3, #4
 8014476:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014478:	4a0c      	ldr	r2, [pc, #48]	; (80144ac <pxPortInitialiseStack+0x64>)
 801447a:	68fb      	ldr	r3, [r7, #12]
 801447c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801447e:	68fb      	ldr	r3, [r7, #12]
 8014480:	3b14      	subs	r3, #20
 8014482:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014484:	687a      	ldr	r2, [r7, #4]
 8014486:	68fb      	ldr	r3, [r7, #12]
 8014488:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801448a:	68fb      	ldr	r3, [r7, #12]
 801448c:	3b04      	subs	r3, #4
 801448e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014490:	68fb      	ldr	r3, [r7, #12]
 8014492:	f06f 0202 	mvn.w	r2, #2
 8014496:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014498:	68fb      	ldr	r3, [r7, #12]
 801449a:	3b20      	subs	r3, #32
 801449c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801449e:	68fb      	ldr	r3, [r7, #12]
}
 80144a0:	4618      	mov	r0, r3
 80144a2:	3714      	adds	r7, #20
 80144a4:	46bd      	mov	sp, r7
 80144a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144aa:	4770      	bx	lr
 80144ac:	080144b1 	.word	0x080144b1

080144b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80144b0:	b480      	push	{r7}
 80144b2:	b085      	sub	sp, #20
 80144b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80144b6:	2300      	movs	r3, #0
 80144b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80144ba:	4b11      	ldr	r3, [pc, #68]	; (8014500 <prvTaskExitError+0x50>)
 80144bc:	681b      	ldr	r3, [r3, #0]
 80144be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80144c2:	d009      	beq.n	80144d8 <prvTaskExitError+0x28>
	__asm volatile
 80144c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144c8:	f383 8811 	msr	BASEPRI, r3
 80144cc:	f3bf 8f6f 	isb	sy
 80144d0:	f3bf 8f4f 	dsb	sy
 80144d4:	60fb      	str	r3, [r7, #12]
 80144d6:	e7fe      	b.n	80144d6 <prvTaskExitError+0x26>
 80144d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144dc:	f383 8811 	msr	BASEPRI, r3
 80144e0:	f3bf 8f6f 	isb	sy
 80144e4:	f3bf 8f4f 	dsb	sy
 80144e8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80144ea:	bf00      	nop
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d0fc      	beq.n	80144ec <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80144f2:	bf00      	nop
 80144f4:	3714      	adds	r7, #20
 80144f6:	46bd      	mov	sp, r7
 80144f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144fc:	4770      	bx	lr
 80144fe:	bf00      	nop
 8014500:	20000da8 	.word	0x20000da8
	...

08014510 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014510:	4b07      	ldr	r3, [pc, #28]	; (8014530 <pxCurrentTCBConst2>)
 8014512:	6819      	ldr	r1, [r3, #0]
 8014514:	6808      	ldr	r0, [r1, #0]
 8014516:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801451a:	f380 8809 	msr	PSP, r0
 801451e:	f3bf 8f6f 	isb	sy
 8014522:	f04f 0000 	mov.w	r0, #0
 8014526:	f380 8811 	msr	BASEPRI, r0
 801452a:	4770      	bx	lr
 801452c:	f3af 8000 	nop.w

08014530 <pxCurrentTCBConst2>:
 8014530:	20001460 	.word	0x20001460
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014534:	bf00      	nop
 8014536:	bf00      	nop

08014538 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014538:	4808      	ldr	r0, [pc, #32]	; (801455c <prvPortStartFirstTask+0x24>)
 801453a:	6800      	ldr	r0, [r0, #0]
 801453c:	6800      	ldr	r0, [r0, #0]
 801453e:	f380 8808 	msr	MSP, r0
 8014542:	f04f 0000 	mov.w	r0, #0
 8014546:	f380 8814 	msr	CONTROL, r0
 801454a:	b662      	cpsie	i
 801454c:	b661      	cpsie	f
 801454e:	f3bf 8f4f 	dsb	sy
 8014552:	f3bf 8f6f 	isb	sy
 8014556:	df00      	svc	0
 8014558:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801455a:	bf00      	nop
 801455c:	e000ed08 	.word	0xe000ed08

08014560 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014560:	b580      	push	{r7, lr}
 8014562:	b086      	sub	sp, #24
 8014564:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014566:	4b44      	ldr	r3, [pc, #272]	; (8014678 <xPortStartScheduler+0x118>)
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	4a44      	ldr	r2, [pc, #272]	; (801467c <xPortStartScheduler+0x11c>)
 801456c:	4293      	cmp	r3, r2
 801456e:	d109      	bne.n	8014584 <xPortStartScheduler+0x24>
 8014570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014574:	f383 8811 	msr	BASEPRI, r3
 8014578:	f3bf 8f6f 	isb	sy
 801457c:	f3bf 8f4f 	dsb	sy
 8014580:	613b      	str	r3, [r7, #16]
 8014582:	e7fe      	b.n	8014582 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014584:	4b3c      	ldr	r3, [pc, #240]	; (8014678 <xPortStartScheduler+0x118>)
 8014586:	681b      	ldr	r3, [r3, #0]
 8014588:	4a3d      	ldr	r2, [pc, #244]	; (8014680 <xPortStartScheduler+0x120>)
 801458a:	4293      	cmp	r3, r2
 801458c:	d109      	bne.n	80145a2 <xPortStartScheduler+0x42>
 801458e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014592:	f383 8811 	msr	BASEPRI, r3
 8014596:	f3bf 8f6f 	isb	sy
 801459a:	f3bf 8f4f 	dsb	sy
 801459e:	60fb      	str	r3, [r7, #12]
 80145a0:	e7fe      	b.n	80145a0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80145a2:	4b38      	ldr	r3, [pc, #224]	; (8014684 <xPortStartScheduler+0x124>)
 80145a4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80145a6:	697b      	ldr	r3, [r7, #20]
 80145a8:	781b      	ldrb	r3, [r3, #0]
 80145aa:	b2db      	uxtb	r3, r3
 80145ac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80145ae:	697b      	ldr	r3, [r7, #20]
 80145b0:	22ff      	movs	r2, #255	; 0xff
 80145b2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80145b4:	697b      	ldr	r3, [r7, #20]
 80145b6:	781b      	ldrb	r3, [r3, #0]
 80145b8:	b2db      	uxtb	r3, r3
 80145ba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80145bc:	78fb      	ldrb	r3, [r7, #3]
 80145be:	b2db      	uxtb	r3, r3
 80145c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80145c4:	b2da      	uxtb	r2, r3
 80145c6:	4b30      	ldr	r3, [pc, #192]	; (8014688 <xPortStartScheduler+0x128>)
 80145c8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80145ca:	4b30      	ldr	r3, [pc, #192]	; (801468c <xPortStartScheduler+0x12c>)
 80145cc:	2207      	movs	r2, #7
 80145ce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80145d0:	e009      	b.n	80145e6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80145d2:	4b2e      	ldr	r3, [pc, #184]	; (801468c <xPortStartScheduler+0x12c>)
 80145d4:	681b      	ldr	r3, [r3, #0]
 80145d6:	3b01      	subs	r3, #1
 80145d8:	4a2c      	ldr	r2, [pc, #176]	; (801468c <xPortStartScheduler+0x12c>)
 80145da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80145dc:	78fb      	ldrb	r3, [r7, #3]
 80145de:	b2db      	uxtb	r3, r3
 80145e0:	005b      	lsls	r3, r3, #1
 80145e2:	b2db      	uxtb	r3, r3
 80145e4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80145e6:	78fb      	ldrb	r3, [r7, #3]
 80145e8:	b2db      	uxtb	r3, r3
 80145ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80145ee:	2b80      	cmp	r3, #128	; 0x80
 80145f0:	d0ef      	beq.n	80145d2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80145f2:	4b26      	ldr	r3, [pc, #152]	; (801468c <xPortStartScheduler+0x12c>)
 80145f4:	681b      	ldr	r3, [r3, #0]
 80145f6:	f1c3 0307 	rsb	r3, r3, #7
 80145fa:	2b04      	cmp	r3, #4
 80145fc:	d009      	beq.n	8014612 <xPortStartScheduler+0xb2>
 80145fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014602:	f383 8811 	msr	BASEPRI, r3
 8014606:	f3bf 8f6f 	isb	sy
 801460a:	f3bf 8f4f 	dsb	sy
 801460e:	60bb      	str	r3, [r7, #8]
 8014610:	e7fe      	b.n	8014610 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014612:	4b1e      	ldr	r3, [pc, #120]	; (801468c <xPortStartScheduler+0x12c>)
 8014614:	681b      	ldr	r3, [r3, #0]
 8014616:	021b      	lsls	r3, r3, #8
 8014618:	4a1c      	ldr	r2, [pc, #112]	; (801468c <xPortStartScheduler+0x12c>)
 801461a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801461c:	4b1b      	ldr	r3, [pc, #108]	; (801468c <xPortStartScheduler+0x12c>)
 801461e:	681b      	ldr	r3, [r3, #0]
 8014620:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014624:	4a19      	ldr	r2, [pc, #100]	; (801468c <xPortStartScheduler+0x12c>)
 8014626:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	b2da      	uxtb	r2, r3
 801462c:	697b      	ldr	r3, [r7, #20]
 801462e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014630:	4b17      	ldr	r3, [pc, #92]	; (8014690 <xPortStartScheduler+0x130>)
 8014632:	681b      	ldr	r3, [r3, #0]
 8014634:	4a16      	ldr	r2, [pc, #88]	; (8014690 <xPortStartScheduler+0x130>)
 8014636:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801463a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801463c:	4b14      	ldr	r3, [pc, #80]	; (8014690 <xPortStartScheduler+0x130>)
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	4a13      	ldr	r2, [pc, #76]	; (8014690 <xPortStartScheduler+0x130>)
 8014642:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8014646:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014648:	f000 f8d6 	bl	80147f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801464c:	4b11      	ldr	r3, [pc, #68]	; (8014694 <xPortStartScheduler+0x134>)
 801464e:	2200      	movs	r2, #0
 8014650:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014652:	f000 f8f5 	bl	8014840 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014656:	4b10      	ldr	r3, [pc, #64]	; (8014698 <xPortStartScheduler+0x138>)
 8014658:	681b      	ldr	r3, [r3, #0]
 801465a:	4a0f      	ldr	r2, [pc, #60]	; (8014698 <xPortStartScheduler+0x138>)
 801465c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014660:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014662:	f7ff ff69 	bl	8014538 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014666:	f7ff f8b5 	bl	80137d4 <vTaskSwitchContext>
	prvTaskExitError();
 801466a:	f7ff ff21 	bl	80144b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801466e:	2300      	movs	r3, #0
}
 8014670:	4618      	mov	r0, r3
 8014672:	3718      	adds	r7, #24
 8014674:	46bd      	mov	sp, r7
 8014676:	bd80      	pop	{r7, pc}
 8014678:	e000ed00 	.word	0xe000ed00
 801467c:	410fc271 	.word	0x410fc271
 8014680:	410fc270 	.word	0x410fc270
 8014684:	e000e400 	.word	0xe000e400
 8014688:	2000158c 	.word	0x2000158c
 801468c:	20001590 	.word	0x20001590
 8014690:	e000ed20 	.word	0xe000ed20
 8014694:	20000da8 	.word	0x20000da8
 8014698:	e000ef34 	.word	0xe000ef34

0801469c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801469c:	b480      	push	{r7}
 801469e:	b083      	sub	sp, #12
 80146a0:	af00      	add	r7, sp, #0
 80146a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146a6:	f383 8811 	msr	BASEPRI, r3
 80146aa:	f3bf 8f6f 	isb	sy
 80146ae:	f3bf 8f4f 	dsb	sy
 80146b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80146b4:	4b0e      	ldr	r3, [pc, #56]	; (80146f0 <vPortEnterCritical+0x54>)
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	3301      	adds	r3, #1
 80146ba:	4a0d      	ldr	r2, [pc, #52]	; (80146f0 <vPortEnterCritical+0x54>)
 80146bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80146be:	4b0c      	ldr	r3, [pc, #48]	; (80146f0 <vPortEnterCritical+0x54>)
 80146c0:	681b      	ldr	r3, [r3, #0]
 80146c2:	2b01      	cmp	r3, #1
 80146c4:	d10e      	bne.n	80146e4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80146c6:	4b0b      	ldr	r3, [pc, #44]	; (80146f4 <vPortEnterCritical+0x58>)
 80146c8:	681b      	ldr	r3, [r3, #0]
 80146ca:	b2db      	uxtb	r3, r3
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d009      	beq.n	80146e4 <vPortEnterCritical+0x48>
 80146d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146d4:	f383 8811 	msr	BASEPRI, r3
 80146d8:	f3bf 8f6f 	isb	sy
 80146dc:	f3bf 8f4f 	dsb	sy
 80146e0:	603b      	str	r3, [r7, #0]
 80146e2:	e7fe      	b.n	80146e2 <vPortEnterCritical+0x46>
	}
}
 80146e4:	bf00      	nop
 80146e6:	370c      	adds	r7, #12
 80146e8:	46bd      	mov	sp, r7
 80146ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ee:	4770      	bx	lr
 80146f0:	20000da8 	.word	0x20000da8
 80146f4:	e000ed04 	.word	0xe000ed04

080146f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80146f8:	b480      	push	{r7}
 80146fa:	b083      	sub	sp, #12
 80146fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80146fe:	4b11      	ldr	r3, [pc, #68]	; (8014744 <vPortExitCritical+0x4c>)
 8014700:	681b      	ldr	r3, [r3, #0]
 8014702:	2b00      	cmp	r3, #0
 8014704:	d109      	bne.n	801471a <vPortExitCritical+0x22>
 8014706:	f04f 0350 	mov.w	r3, #80	; 0x50
 801470a:	f383 8811 	msr	BASEPRI, r3
 801470e:	f3bf 8f6f 	isb	sy
 8014712:	f3bf 8f4f 	dsb	sy
 8014716:	607b      	str	r3, [r7, #4]
 8014718:	e7fe      	b.n	8014718 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 801471a:	4b0a      	ldr	r3, [pc, #40]	; (8014744 <vPortExitCritical+0x4c>)
 801471c:	681b      	ldr	r3, [r3, #0]
 801471e:	3b01      	subs	r3, #1
 8014720:	4a08      	ldr	r2, [pc, #32]	; (8014744 <vPortExitCritical+0x4c>)
 8014722:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014724:	4b07      	ldr	r3, [pc, #28]	; (8014744 <vPortExitCritical+0x4c>)
 8014726:	681b      	ldr	r3, [r3, #0]
 8014728:	2b00      	cmp	r3, #0
 801472a:	d104      	bne.n	8014736 <vPortExitCritical+0x3e>
 801472c:	2300      	movs	r3, #0
 801472e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014730:	683b      	ldr	r3, [r7, #0]
 8014732:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8014736:	bf00      	nop
 8014738:	370c      	adds	r7, #12
 801473a:	46bd      	mov	sp, r7
 801473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014740:	4770      	bx	lr
 8014742:	bf00      	nop
 8014744:	20000da8 	.word	0x20000da8
	...

08014750 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014750:	f3ef 8009 	mrs	r0, PSP
 8014754:	f3bf 8f6f 	isb	sy
 8014758:	4b15      	ldr	r3, [pc, #84]	; (80147b0 <pxCurrentTCBConst>)
 801475a:	681a      	ldr	r2, [r3, #0]
 801475c:	f01e 0f10 	tst.w	lr, #16
 8014760:	bf08      	it	eq
 8014762:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014766:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801476a:	6010      	str	r0, [r2, #0]
 801476c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014770:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014774:	f380 8811 	msr	BASEPRI, r0
 8014778:	f3bf 8f4f 	dsb	sy
 801477c:	f3bf 8f6f 	isb	sy
 8014780:	f7ff f828 	bl	80137d4 <vTaskSwitchContext>
 8014784:	f04f 0000 	mov.w	r0, #0
 8014788:	f380 8811 	msr	BASEPRI, r0
 801478c:	bc09      	pop	{r0, r3}
 801478e:	6819      	ldr	r1, [r3, #0]
 8014790:	6808      	ldr	r0, [r1, #0]
 8014792:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014796:	f01e 0f10 	tst.w	lr, #16
 801479a:	bf08      	it	eq
 801479c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80147a0:	f380 8809 	msr	PSP, r0
 80147a4:	f3bf 8f6f 	isb	sy
 80147a8:	4770      	bx	lr
 80147aa:	bf00      	nop
 80147ac:	f3af 8000 	nop.w

080147b0 <pxCurrentTCBConst>:
 80147b0:	20001460 	.word	0x20001460
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80147b4:	bf00      	nop
 80147b6:	bf00      	nop

080147b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80147b8:	b580      	push	{r7, lr}
 80147ba:	b082      	sub	sp, #8
 80147bc:	af00      	add	r7, sp, #0
	__asm volatile
 80147be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147c2:	f383 8811 	msr	BASEPRI, r3
 80147c6:	f3bf 8f6f 	isb	sy
 80147ca:	f3bf 8f4f 	dsb	sy
 80147ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80147d0:	f7fe ff44 	bl	801365c <xTaskIncrementTick>
 80147d4:	4603      	mov	r3, r0
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d003      	beq.n	80147e2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80147da:	4b06      	ldr	r3, [pc, #24]	; (80147f4 <SysTick_Handler+0x3c>)
 80147dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80147e0:	601a      	str	r2, [r3, #0]
 80147e2:	2300      	movs	r3, #0
 80147e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80147e6:	683b      	ldr	r3, [r7, #0]
 80147e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80147ec:	bf00      	nop
 80147ee:	3708      	adds	r7, #8
 80147f0:	46bd      	mov	sp, r7
 80147f2:	bd80      	pop	{r7, pc}
 80147f4:	e000ed04 	.word	0xe000ed04

080147f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80147f8:	b480      	push	{r7}
 80147fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80147fc:	4b0b      	ldr	r3, [pc, #44]	; (801482c <vPortSetupTimerInterrupt+0x34>)
 80147fe:	2200      	movs	r2, #0
 8014800:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014802:	4b0b      	ldr	r3, [pc, #44]	; (8014830 <vPortSetupTimerInterrupt+0x38>)
 8014804:	2200      	movs	r2, #0
 8014806:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014808:	4b0a      	ldr	r3, [pc, #40]	; (8014834 <vPortSetupTimerInterrupt+0x3c>)
 801480a:	681b      	ldr	r3, [r3, #0]
 801480c:	4a0a      	ldr	r2, [pc, #40]	; (8014838 <vPortSetupTimerInterrupt+0x40>)
 801480e:	fba2 2303 	umull	r2, r3, r2, r3
 8014812:	099b      	lsrs	r3, r3, #6
 8014814:	4a09      	ldr	r2, [pc, #36]	; (801483c <vPortSetupTimerInterrupt+0x44>)
 8014816:	3b01      	subs	r3, #1
 8014818:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801481a:	4b04      	ldr	r3, [pc, #16]	; (801482c <vPortSetupTimerInterrupt+0x34>)
 801481c:	2207      	movs	r2, #7
 801481e:	601a      	str	r2, [r3, #0]
}
 8014820:	bf00      	nop
 8014822:	46bd      	mov	sp, r7
 8014824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014828:	4770      	bx	lr
 801482a:	bf00      	nop
 801482c:	e000e010 	.word	0xe000e010
 8014830:	e000e018 	.word	0xe000e018
 8014834:	20000c8c 	.word	0x20000c8c
 8014838:	10624dd3 	.word	0x10624dd3
 801483c:	e000e014 	.word	0xe000e014

08014840 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014840:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014850 <vPortEnableVFP+0x10>
 8014844:	6801      	ldr	r1, [r0, #0]
 8014846:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801484a:	6001      	str	r1, [r0, #0]
 801484c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801484e:	bf00      	nop
 8014850:	e000ed88 	.word	0xe000ed88

08014854 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014854:	b480      	push	{r7}
 8014856:	b085      	sub	sp, #20
 8014858:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801485a:	f3ef 8305 	mrs	r3, IPSR
 801485e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014860:	68fb      	ldr	r3, [r7, #12]
 8014862:	2b0f      	cmp	r3, #15
 8014864:	d913      	bls.n	801488e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014866:	4a16      	ldr	r2, [pc, #88]	; (80148c0 <vPortValidateInterruptPriority+0x6c>)
 8014868:	68fb      	ldr	r3, [r7, #12]
 801486a:	4413      	add	r3, r2
 801486c:	781b      	ldrb	r3, [r3, #0]
 801486e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014870:	4b14      	ldr	r3, [pc, #80]	; (80148c4 <vPortValidateInterruptPriority+0x70>)
 8014872:	781b      	ldrb	r3, [r3, #0]
 8014874:	7afa      	ldrb	r2, [r7, #11]
 8014876:	429a      	cmp	r2, r3
 8014878:	d209      	bcs.n	801488e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 801487a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801487e:	f383 8811 	msr	BASEPRI, r3
 8014882:	f3bf 8f6f 	isb	sy
 8014886:	f3bf 8f4f 	dsb	sy
 801488a:	607b      	str	r3, [r7, #4]
 801488c:	e7fe      	b.n	801488c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801488e:	4b0e      	ldr	r3, [pc, #56]	; (80148c8 <vPortValidateInterruptPriority+0x74>)
 8014890:	681b      	ldr	r3, [r3, #0]
 8014892:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8014896:	4b0d      	ldr	r3, [pc, #52]	; (80148cc <vPortValidateInterruptPriority+0x78>)
 8014898:	681b      	ldr	r3, [r3, #0]
 801489a:	429a      	cmp	r2, r3
 801489c:	d909      	bls.n	80148b2 <vPortValidateInterruptPriority+0x5e>
 801489e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148a2:	f383 8811 	msr	BASEPRI, r3
 80148a6:	f3bf 8f6f 	isb	sy
 80148aa:	f3bf 8f4f 	dsb	sy
 80148ae:	603b      	str	r3, [r7, #0]
 80148b0:	e7fe      	b.n	80148b0 <vPortValidateInterruptPriority+0x5c>
	}
 80148b2:	bf00      	nop
 80148b4:	3714      	adds	r7, #20
 80148b6:	46bd      	mov	sp, r7
 80148b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148bc:	4770      	bx	lr
 80148be:	bf00      	nop
 80148c0:	e000e3f0 	.word	0xe000e3f0
 80148c4:	2000158c 	.word	0x2000158c
 80148c8:	e000ed0c 	.word	0xe000ed0c
 80148cc:	20001590 	.word	0x20001590

080148d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80148d0:	b580      	push	{r7, lr}
 80148d2:	b08a      	sub	sp, #40	; 0x28
 80148d4:	af00      	add	r7, sp, #0
 80148d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80148d8:	2300      	movs	r3, #0
 80148da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80148dc:	f7fe fe14 	bl	8013508 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80148e0:	4b57      	ldr	r3, [pc, #348]	; (8014a40 <pvPortMalloc+0x170>)
 80148e2:	681b      	ldr	r3, [r3, #0]
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d101      	bne.n	80148ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80148e8:	f000 f90c 	bl	8014b04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80148ec:	4b55      	ldr	r3, [pc, #340]	; (8014a44 <pvPortMalloc+0x174>)
 80148ee:	681a      	ldr	r2, [r3, #0]
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	4013      	ands	r3, r2
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	f040 808c 	bne.w	8014a12 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d01c      	beq.n	801493a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8014900:	2208      	movs	r2, #8
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	4413      	add	r3, r2
 8014906:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	f003 0307 	and.w	r3, r3, #7
 801490e:	2b00      	cmp	r3, #0
 8014910:	d013      	beq.n	801493a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	f023 0307 	bic.w	r3, r3, #7
 8014918:	3308      	adds	r3, #8
 801491a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	f003 0307 	and.w	r3, r3, #7
 8014922:	2b00      	cmp	r3, #0
 8014924:	d009      	beq.n	801493a <pvPortMalloc+0x6a>
 8014926:	f04f 0350 	mov.w	r3, #80	; 0x50
 801492a:	f383 8811 	msr	BASEPRI, r3
 801492e:	f3bf 8f6f 	isb	sy
 8014932:	f3bf 8f4f 	dsb	sy
 8014936:	617b      	str	r3, [r7, #20]
 8014938:	e7fe      	b.n	8014938 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	2b00      	cmp	r3, #0
 801493e:	d068      	beq.n	8014a12 <pvPortMalloc+0x142>
 8014940:	4b41      	ldr	r3, [pc, #260]	; (8014a48 <pvPortMalloc+0x178>)
 8014942:	681b      	ldr	r3, [r3, #0]
 8014944:	687a      	ldr	r2, [r7, #4]
 8014946:	429a      	cmp	r2, r3
 8014948:	d863      	bhi.n	8014a12 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801494a:	4b40      	ldr	r3, [pc, #256]	; (8014a4c <pvPortMalloc+0x17c>)
 801494c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801494e:	4b3f      	ldr	r3, [pc, #252]	; (8014a4c <pvPortMalloc+0x17c>)
 8014950:	681b      	ldr	r3, [r3, #0]
 8014952:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014954:	e004      	b.n	8014960 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8014956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014958:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801495c:	681b      	ldr	r3, [r3, #0]
 801495e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014962:	685b      	ldr	r3, [r3, #4]
 8014964:	687a      	ldr	r2, [r7, #4]
 8014966:	429a      	cmp	r2, r3
 8014968:	d903      	bls.n	8014972 <pvPortMalloc+0xa2>
 801496a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801496c:	681b      	ldr	r3, [r3, #0]
 801496e:	2b00      	cmp	r3, #0
 8014970:	d1f1      	bne.n	8014956 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8014972:	4b33      	ldr	r3, [pc, #204]	; (8014a40 <pvPortMalloc+0x170>)
 8014974:	681b      	ldr	r3, [r3, #0]
 8014976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014978:	429a      	cmp	r2, r3
 801497a:	d04a      	beq.n	8014a12 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801497c:	6a3b      	ldr	r3, [r7, #32]
 801497e:	681b      	ldr	r3, [r3, #0]
 8014980:	2208      	movs	r2, #8
 8014982:	4413      	add	r3, r2
 8014984:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014988:	681a      	ldr	r2, [r3, #0]
 801498a:	6a3b      	ldr	r3, [r7, #32]
 801498c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801498e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014990:	685a      	ldr	r2, [r3, #4]
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	1ad2      	subs	r2, r2, r3
 8014996:	2308      	movs	r3, #8
 8014998:	005b      	lsls	r3, r3, #1
 801499a:	429a      	cmp	r2, r3
 801499c:	d91e      	bls.n	80149dc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801499e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	4413      	add	r3, r2
 80149a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80149a6:	69bb      	ldr	r3, [r7, #24]
 80149a8:	f003 0307 	and.w	r3, r3, #7
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d009      	beq.n	80149c4 <pvPortMalloc+0xf4>
 80149b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149b4:	f383 8811 	msr	BASEPRI, r3
 80149b8:	f3bf 8f6f 	isb	sy
 80149bc:	f3bf 8f4f 	dsb	sy
 80149c0:	613b      	str	r3, [r7, #16]
 80149c2:	e7fe      	b.n	80149c2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80149c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149c6:	685a      	ldr	r2, [r3, #4]
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	1ad2      	subs	r2, r2, r3
 80149cc:	69bb      	ldr	r3, [r7, #24]
 80149ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80149d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149d2:	687a      	ldr	r2, [r7, #4]
 80149d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80149d6:	69b8      	ldr	r0, [r7, #24]
 80149d8:	f000 f8f6 	bl	8014bc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80149dc:	4b1a      	ldr	r3, [pc, #104]	; (8014a48 <pvPortMalloc+0x178>)
 80149de:	681a      	ldr	r2, [r3, #0]
 80149e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149e2:	685b      	ldr	r3, [r3, #4]
 80149e4:	1ad3      	subs	r3, r2, r3
 80149e6:	4a18      	ldr	r2, [pc, #96]	; (8014a48 <pvPortMalloc+0x178>)
 80149e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80149ea:	4b17      	ldr	r3, [pc, #92]	; (8014a48 <pvPortMalloc+0x178>)
 80149ec:	681a      	ldr	r2, [r3, #0]
 80149ee:	4b18      	ldr	r3, [pc, #96]	; (8014a50 <pvPortMalloc+0x180>)
 80149f0:	681b      	ldr	r3, [r3, #0]
 80149f2:	429a      	cmp	r2, r3
 80149f4:	d203      	bcs.n	80149fe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80149f6:	4b14      	ldr	r3, [pc, #80]	; (8014a48 <pvPortMalloc+0x178>)
 80149f8:	681b      	ldr	r3, [r3, #0]
 80149fa:	4a15      	ldr	r2, [pc, #84]	; (8014a50 <pvPortMalloc+0x180>)
 80149fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80149fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a00:	685a      	ldr	r2, [r3, #4]
 8014a02:	4b10      	ldr	r3, [pc, #64]	; (8014a44 <pvPortMalloc+0x174>)
 8014a04:	681b      	ldr	r3, [r3, #0]
 8014a06:	431a      	orrs	r2, r3
 8014a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a0e:	2200      	movs	r2, #0
 8014a10:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014a12:	f7fe fd87 	bl	8013524 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8014a16:	69fb      	ldr	r3, [r7, #28]
 8014a18:	f003 0307 	and.w	r3, r3, #7
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d009      	beq.n	8014a34 <pvPortMalloc+0x164>
 8014a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a24:	f383 8811 	msr	BASEPRI, r3
 8014a28:	f3bf 8f6f 	isb	sy
 8014a2c:	f3bf 8f4f 	dsb	sy
 8014a30:	60fb      	str	r3, [r7, #12]
 8014a32:	e7fe      	b.n	8014a32 <pvPortMalloc+0x162>
	return pvReturn;
 8014a34:	69fb      	ldr	r3, [r7, #28]
}
 8014a36:	4618      	mov	r0, r3
 8014a38:	3728      	adds	r7, #40	; 0x28
 8014a3a:	46bd      	mov	sp, r7
 8014a3c:	bd80      	pop	{r7, pc}
 8014a3e:	bf00      	nop
 8014a40:	2000519c 	.word	0x2000519c
 8014a44:	200051a8 	.word	0x200051a8
 8014a48:	200051a0 	.word	0x200051a0
 8014a4c:	20005194 	.word	0x20005194
 8014a50:	200051a4 	.word	0x200051a4

08014a54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014a54:	b580      	push	{r7, lr}
 8014a56:	b086      	sub	sp, #24
 8014a58:	af00      	add	r7, sp, #0
 8014a5a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d046      	beq.n	8014af4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014a66:	2308      	movs	r3, #8
 8014a68:	425b      	negs	r3, r3
 8014a6a:	697a      	ldr	r2, [r7, #20]
 8014a6c:	4413      	add	r3, r2
 8014a6e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8014a70:	697b      	ldr	r3, [r7, #20]
 8014a72:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014a74:	693b      	ldr	r3, [r7, #16]
 8014a76:	685a      	ldr	r2, [r3, #4]
 8014a78:	4b20      	ldr	r3, [pc, #128]	; (8014afc <vPortFree+0xa8>)
 8014a7a:	681b      	ldr	r3, [r3, #0]
 8014a7c:	4013      	ands	r3, r2
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	d109      	bne.n	8014a96 <vPortFree+0x42>
 8014a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a86:	f383 8811 	msr	BASEPRI, r3
 8014a8a:	f3bf 8f6f 	isb	sy
 8014a8e:	f3bf 8f4f 	dsb	sy
 8014a92:	60fb      	str	r3, [r7, #12]
 8014a94:	e7fe      	b.n	8014a94 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014a96:	693b      	ldr	r3, [r7, #16]
 8014a98:	681b      	ldr	r3, [r3, #0]
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d009      	beq.n	8014ab2 <vPortFree+0x5e>
 8014a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014aa2:	f383 8811 	msr	BASEPRI, r3
 8014aa6:	f3bf 8f6f 	isb	sy
 8014aaa:	f3bf 8f4f 	dsb	sy
 8014aae:	60bb      	str	r3, [r7, #8]
 8014ab0:	e7fe      	b.n	8014ab0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014ab2:	693b      	ldr	r3, [r7, #16]
 8014ab4:	685a      	ldr	r2, [r3, #4]
 8014ab6:	4b11      	ldr	r3, [pc, #68]	; (8014afc <vPortFree+0xa8>)
 8014ab8:	681b      	ldr	r3, [r3, #0]
 8014aba:	4013      	ands	r3, r2
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	d019      	beq.n	8014af4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014ac0:	693b      	ldr	r3, [r7, #16]
 8014ac2:	681b      	ldr	r3, [r3, #0]
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d115      	bne.n	8014af4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014ac8:	693b      	ldr	r3, [r7, #16]
 8014aca:	685a      	ldr	r2, [r3, #4]
 8014acc:	4b0b      	ldr	r3, [pc, #44]	; (8014afc <vPortFree+0xa8>)
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	43db      	mvns	r3, r3
 8014ad2:	401a      	ands	r2, r3
 8014ad4:	693b      	ldr	r3, [r7, #16]
 8014ad6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014ad8:	f7fe fd16 	bl	8013508 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8014adc:	693b      	ldr	r3, [r7, #16]
 8014ade:	685a      	ldr	r2, [r3, #4]
 8014ae0:	4b07      	ldr	r3, [pc, #28]	; (8014b00 <vPortFree+0xac>)
 8014ae2:	681b      	ldr	r3, [r3, #0]
 8014ae4:	4413      	add	r3, r2
 8014ae6:	4a06      	ldr	r2, [pc, #24]	; (8014b00 <vPortFree+0xac>)
 8014ae8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8014aea:	6938      	ldr	r0, [r7, #16]
 8014aec:	f000 f86c 	bl	8014bc8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8014af0:	f7fe fd18 	bl	8013524 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8014af4:	bf00      	nop
 8014af6:	3718      	adds	r7, #24
 8014af8:	46bd      	mov	sp, r7
 8014afa:	bd80      	pop	{r7, pc}
 8014afc:	200051a8 	.word	0x200051a8
 8014b00:	200051a0 	.word	0x200051a0

08014b04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014b04:	b480      	push	{r7}
 8014b06:	b085      	sub	sp, #20
 8014b08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8014b0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8014b0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014b10:	4b27      	ldr	r3, [pc, #156]	; (8014bb0 <prvHeapInit+0xac>)
 8014b12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014b14:	68fb      	ldr	r3, [r7, #12]
 8014b16:	f003 0307 	and.w	r3, r3, #7
 8014b1a:	2b00      	cmp	r3, #0
 8014b1c:	d00c      	beq.n	8014b38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8014b1e:	68fb      	ldr	r3, [r7, #12]
 8014b20:	3307      	adds	r3, #7
 8014b22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014b24:	68fb      	ldr	r3, [r7, #12]
 8014b26:	f023 0307 	bic.w	r3, r3, #7
 8014b2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8014b2c:	68ba      	ldr	r2, [r7, #8]
 8014b2e:	68fb      	ldr	r3, [r7, #12]
 8014b30:	1ad3      	subs	r3, r2, r3
 8014b32:	4a1f      	ldr	r2, [pc, #124]	; (8014bb0 <prvHeapInit+0xac>)
 8014b34:	4413      	add	r3, r2
 8014b36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014b38:	68fb      	ldr	r3, [r7, #12]
 8014b3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8014b3c:	4a1d      	ldr	r2, [pc, #116]	; (8014bb4 <prvHeapInit+0xb0>)
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014b42:	4b1c      	ldr	r3, [pc, #112]	; (8014bb4 <prvHeapInit+0xb0>)
 8014b44:	2200      	movs	r2, #0
 8014b46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	68ba      	ldr	r2, [r7, #8]
 8014b4c:	4413      	add	r3, r2
 8014b4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014b50:	2208      	movs	r2, #8
 8014b52:	68fb      	ldr	r3, [r7, #12]
 8014b54:	1a9b      	subs	r3, r3, r2
 8014b56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014b58:	68fb      	ldr	r3, [r7, #12]
 8014b5a:	f023 0307 	bic.w	r3, r3, #7
 8014b5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014b60:	68fb      	ldr	r3, [r7, #12]
 8014b62:	4a15      	ldr	r2, [pc, #84]	; (8014bb8 <prvHeapInit+0xb4>)
 8014b64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014b66:	4b14      	ldr	r3, [pc, #80]	; (8014bb8 <prvHeapInit+0xb4>)
 8014b68:	681b      	ldr	r3, [r3, #0]
 8014b6a:	2200      	movs	r2, #0
 8014b6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8014b6e:	4b12      	ldr	r3, [pc, #72]	; (8014bb8 <prvHeapInit+0xb4>)
 8014b70:	681b      	ldr	r3, [r3, #0]
 8014b72:	2200      	movs	r2, #0
 8014b74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8014b7a:	683b      	ldr	r3, [r7, #0]
 8014b7c:	68fa      	ldr	r2, [r7, #12]
 8014b7e:	1ad2      	subs	r2, r2, r3
 8014b80:	683b      	ldr	r3, [r7, #0]
 8014b82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014b84:	4b0c      	ldr	r3, [pc, #48]	; (8014bb8 <prvHeapInit+0xb4>)
 8014b86:	681a      	ldr	r2, [r3, #0]
 8014b88:	683b      	ldr	r3, [r7, #0]
 8014b8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014b8c:	683b      	ldr	r3, [r7, #0]
 8014b8e:	685b      	ldr	r3, [r3, #4]
 8014b90:	4a0a      	ldr	r2, [pc, #40]	; (8014bbc <prvHeapInit+0xb8>)
 8014b92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014b94:	683b      	ldr	r3, [r7, #0]
 8014b96:	685b      	ldr	r3, [r3, #4]
 8014b98:	4a09      	ldr	r2, [pc, #36]	; (8014bc0 <prvHeapInit+0xbc>)
 8014b9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8014b9c:	4b09      	ldr	r3, [pc, #36]	; (8014bc4 <prvHeapInit+0xc0>)
 8014b9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014ba2:	601a      	str	r2, [r3, #0]
}
 8014ba4:	bf00      	nop
 8014ba6:	3714      	adds	r7, #20
 8014ba8:	46bd      	mov	sp, r7
 8014baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bae:	4770      	bx	lr
 8014bb0:	20001594 	.word	0x20001594
 8014bb4:	20005194 	.word	0x20005194
 8014bb8:	2000519c 	.word	0x2000519c
 8014bbc:	200051a4 	.word	0x200051a4
 8014bc0:	200051a0 	.word	0x200051a0
 8014bc4:	200051a8 	.word	0x200051a8

08014bc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014bc8:	b480      	push	{r7}
 8014bca:	b085      	sub	sp, #20
 8014bcc:	af00      	add	r7, sp, #0
 8014bce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014bd0:	4b28      	ldr	r3, [pc, #160]	; (8014c74 <prvInsertBlockIntoFreeList+0xac>)
 8014bd2:	60fb      	str	r3, [r7, #12]
 8014bd4:	e002      	b.n	8014bdc <prvInsertBlockIntoFreeList+0x14>
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	681b      	ldr	r3, [r3, #0]
 8014bda:	60fb      	str	r3, [r7, #12]
 8014bdc:	68fb      	ldr	r3, [r7, #12]
 8014bde:	681b      	ldr	r3, [r3, #0]
 8014be0:	687a      	ldr	r2, [r7, #4]
 8014be2:	429a      	cmp	r2, r3
 8014be4:	d8f7      	bhi.n	8014bd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014be6:	68fb      	ldr	r3, [r7, #12]
 8014be8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8014bea:	68fb      	ldr	r3, [r7, #12]
 8014bec:	685b      	ldr	r3, [r3, #4]
 8014bee:	68ba      	ldr	r2, [r7, #8]
 8014bf0:	4413      	add	r3, r2
 8014bf2:	687a      	ldr	r2, [r7, #4]
 8014bf4:	429a      	cmp	r2, r3
 8014bf6:	d108      	bne.n	8014c0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014bf8:	68fb      	ldr	r3, [r7, #12]
 8014bfa:	685a      	ldr	r2, [r3, #4]
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	685b      	ldr	r3, [r3, #4]
 8014c00:	441a      	add	r2, r3
 8014c02:	68fb      	ldr	r3, [r7, #12]
 8014c04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8014c06:	68fb      	ldr	r3, [r7, #12]
 8014c08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	685b      	ldr	r3, [r3, #4]
 8014c12:	68ba      	ldr	r2, [r7, #8]
 8014c14:	441a      	add	r2, r3
 8014c16:	68fb      	ldr	r3, [r7, #12]
 8014c18:	681b      	ldr	r3, [r3, #0]
 8014c1a:	429a      	cmp	r2, r3
 8014c1c:	d118      	bne.n	8014c50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8014c1e:	68fb      	ldr	r3, [r7, #12]
 8014c20:	681a      	ldr	r2, [r3, #0]
 8014c22:	4b15      	ldr	r3, [pc, #84]	; (8014c78 <prvInsertBlockIntoFreeList+0xb0>)
 8014c24:	681b      	ldr	r3, [r3, #0]
 8014c26:	429a      	cmp	r2, r3
 8014c28:	d00d      	beq.n	8014c46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	685a      	ldr	r2, [r3, #4]
 8014c2e:	68fb      	ldr	r3, [r7, #12]
 8014c30:	681b      	ldr	r3, [r3, #0]
 8014c32:	685b      	ldr	r3, [r3, #4]
 8014c34:	441a      	add	r2, r3
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8014c3a:	68fb      	ldr	r3, [r7, #12]
 8014c3c:	681b      	ldr	r3, [r3, #0]
 8014c3e:	681a      	ldr	r2, [r3, #0]
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	601a      	str	r2, [r3, #0]
 8014c44:	e008      	b.n	8014c58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014c46:	4b0c      	ldr	r3, [pc, #48]	; (8014c78 <prvInsertBlockIntoFreeList+0xb0>)
 8014c48:	681a      	ldr	r2, [r3, #0]
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	601a      	str	r2, [r3, #0]
 8014c4e:	e003      	b.n	8014c58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014c50:	68fb      	ldr	r3, [r7, #12]
 8014c52:	681a      	ldr	r2, [r3, #0]
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014c58:	68fa      	ldr	r2, [r7, #12]
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	429a      	cmp	r2, r3
 8014c5e:	d002      	beq.n	8014c66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	687a      	ldr	r2, [r7, #4]
 8014c64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014c66:	bf00      	nop
 8014c68:	3714      	adds	r7, #20
 8014c6a:	46bd      	mov	sp, r7
 8014c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c70:	4770      	bx	lr
 8014c72:	bf00      	nop
 8014c74:	20005194 	.word	0x20005194
 8014c78:	2000519c 	.word	0x2000519c

08014c7c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8014c7c:	b580      	push	{r7, lr}
 8014c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8014c80:	2200      	movs	r2, #0
 8014c82:	4912      	ldr	r1, [pc, #72]	; (8014ccc <MX_USB_DEVICE_Init+0x50>)
 8014c84:	4812      	ldr	r0, [pc, #72]	; (8014cd0 <MX_USB_DEVICE_Init+0x54>)
 8014c86:	f7fb fe03 	bl	8010890 <USBD_Init>
 8014c8a:	4603      	mov	r3, r0
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d001      	beq.n	8014c94 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8014c90:	f7ee fd46 	bl	8003720 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8014c94:	490f      	ldr	r1, [pc, #60]	; (8014cd4 <MX_USB_DEVICE_Init+0x58>)
 8014c96:	480e      	ldr	r0, [pc, #56]	; (8014cd0 <MX_USB_DEVICE_Init+0x54>)
 8014c98:	f7fb fe25 	bl	80108e6 <USBD_RegisterClass>
 8014c9c:	4603      	mov	r3, r0
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d001      	beq.n	8014ca6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8014ca2:	f7ee fd3d 	bl	8003720 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8014ca6:	490c      	ldr	r1, [pc, #48]	; (8014cd8 <MX_USB_DEVICE_Init+0x5c>)
 8014ca8:	4809      	ldr	r0, [pc, #36]	; (8014cd0 <MX_USB_DEVICE_Init+0x54>)
 8014caa:	f7fb fd53 	bl	8010754 <USBD_CDC_RegisterInterface>
 8014cae:	4603      	mov	r3, r0
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	d001      	beq.n	8014cb8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8014cb4:	f7ee fd34 	bl	8003720 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8014cb8:	4805      	ldr	r0, [pc, #20]	; (8014cd0 <MX_USB_DEVICE_Init+0x54>)
 8014cba:	f7fb fe2e 	bl	801091a <USBD_Start>
 8014cbe:	4603      	mov	r3, r0
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	d001      	beq.n	8014cc8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8014cc4:	f7ee fd2c 	bl	8003720 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8014cc8:	bf00      	nop
 8014cca:	bd80      	pop	{r7, pc}
 8014ccc:	20000dbc 	.word	0x20000dbc
 8014cd0:	20006184 	.word	0x20006184
 8014cd4:	20000ca4 	.word	0x20000ca4
 8014cd8:	20000dac 	.word	0x20000dac

08014cdc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8014cdc:	b580      	push	{r7, lr}
 8014cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8014ce0:	2200      	movs	r2, #0
 8014ce2:	4905      	ldr	r1, [pc, #20]	; (8014cf8 <CDC_Init_FS+0x1c>)
 8014ce4:	4805      	ldr	r0, [pc, #20]	; (8014cfc <CDC_Init_FS+0x20>)
 8014ce6:	f7fb fd4c 	bl	8010782 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8014cea:	4905      	ldr	r1, [pc, #20]	; (8014d00 <CDC_Init_FS+0x24>)
 8014cec:	4803      	ldr	r0, [pc, #12]	; (8014cfc <CDC_Init_FS+0x20>)
 8014cee:	f7fb fd62 	bl	80107b6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8014cf2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8014cf4:	4618      	mov	r0, r3
 8014cf6:	bd80      	pop	{r7, pc}
 8014cf8:	20006620 	.word	0x20006620
 8014cfc:	20006184 	.word	0x20006184
 8014d00:	20006420 	.word	0x20006420

08014d04 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8014d04:	b480      	push	{r7}
 8014d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8014d08:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8014d0a:	4618      	mov	r0, r3
 8014d0c:	46bd      	mov	sp, r7
 8014d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d12:	4770      	bx	lr

08014d14 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8014d14:	b480      	push	{r7}
 8014d16:	b083      	sub	sp, #12
 8014d18:	af00      	add	r7, sp, #0
 8014d1a:	4603      	mov	r3, r0
 8014d1c:	6039      	str	r1, [r7, #0]
 8014d1e:	71fb      	strb	r3, [r7, #7]
 8014d20:	4613      	mov	r3, r2
 8014d22:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8014d24:	79fb      	ldrb	r3, [r7, #7]
 8014d26:	2b23      	cmp	r3, #35	; 0x23
 8014d28:	f200 808c 	bhi.w	8014e44 <CDC_Control_FS+0x130>
 8014d2c:	a201      	add	r2, pc, #4	; (adr r2, 8014d34 <CDC_Control_FS+0x20>)
 8014d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d32:	bf00      	nop
 8014d34:	08014e45 	.word	0x08014e45
 8014d38:	08014e45 	.word	0x08014e45
 8014d3c:	08014e45 	.word	0x08014e45
 8014d40:	08014e45 	.word	0x08014e45
 8014d44:	08014e45 	.word	0x08014e45
 8014d48:	08014e45 	.word	0x08014e45
 8014d4c:	08014e45 	.word	0x08014e45
 8014d50:	08014e45 	.word	0x08014e45
 8014d54:	08014e45 	.word	0x08014e45
 8014d58:	08014e45 	.word	0x08014e45
 8014d5c:	08014e45 	.word	0x08014e45
 8014d60:	08014e45 	.word	0x08014e45
 8014d64:	08014e45 	.word	0x08014e45
 8014d68:	08014e45 	.word	0x08014e45
 8014d6c:	08014e45 	.word	0x08014e45
 8014d70:	08014e45 	.word	0x08014e45
 8014d74:	08014e45 	.word	0x08014e45
 8014d78:	08014e45 	.word	0x08014e45
 8014d7c:	08014e45 	.word	0x08014e45
 8014d80:	08014e45 	.word	0x08014e45
 8014d84:	08014e45 	.word	0x08014e45
 8014d88:	08014e45 	.word	0x08014e45
 8014d8c:	08014e45 	.word	0x08014e45
 8014d90:	08014e45 	.word	0x08014e45
 8014d94:	08014e45 	.word	0x08014e45
 8014d98:	08014e45 	.word	0x08014e45
 8014d9c:	08014e45 	.word	0x08014e45
 8014da0:	08014e45 	.word	0x08014e45
 8014da4:	08014e45 	.word	0x08014e45
 8014da8:	08014e45 	.word	0x08014e45
 8014dac:	08014e45 	.word	0x08014e45
 8014db0:	08014e45 	.word	0x08014e45
 8014db4:	08014dc5 	.word	0x08014dc5
 8014db8:	08014dff 	.word	0x08014dff
 8014dbc:	08014e45 	.word	0x08014e45
 8014dc0:	08014e45 	.word	0x08014e45
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	TempBuf_USB[0]=pbuf[0];
 8014dc4:	683b      	ldr	r3, [r7, #0]
 8014dc6:	781a      	ldrb	r2, [r3, #0]
 8014dc8:	4b22      	ldr	r3, [pc, #136]	; (8014e54 <CDC_Control_FS+0x140>)
 8014dca:	701a      	strb	r2, [r3, #0]
    	TempBuf_USB[1]=pbuf[1];
 8014dcc:	683b      	ldr	r3, [r7, #0]
 8014dce:	785a      	ldrb	r2, [r3, #1]
 8014dd0:	4b20      	ldr	r3, [pc, #128]	; (8014e54 <CDC_Control_FS+0x140>)
 8014dd2:	705a      	strb	r2, [r3, #1]
    	TempBuf_USB[2]=pbuf[2];
 8014dd4:	683b      	ldr	r3, [r7, #0]
 8014dd6:	789a      	ldrb	r2, [r3, #2]
 8014dd8:	4b1e      	ldr	r3, [pc, #120]	; (8014e54 <CDC_Control_FS+0x140>)
 8014dda:	709a      	strb	r2, [r3, #2]
    	TempBuf_USB[3]=pbuf[3];
 8014ddc:	683b      	ldr	r3, [r7, #0]
 8014dde:	78da      	ldrb	r2, [r3, #3]
 8014de0:	4b1c      	ldr	r3, [pc, #112]	; (8014e54 <CDC_Control_FS+0x140>)
 8014de2:	70da      	strb	r2, [r3, #3]
    	TempBuf_USB[4]=pbuf[4];
 8014de4:	683b      	ldr	r3, [r7, #0]
 8014de6:	791a      	ldrb	r2, [r3, #4]
 8014de8:	4b1a      	ldr	r3, [pc, #104]	; (8014e54 <CDC_Control_FS+0x140>)
 8014dea:	711a      	strb	r2, [r3, #4]
    	TempBuf_USB[5]=pbuf[5];
 8014dec:	683b      	ldr	r3, [r7, #0]
 8014dee:	795a      	ldrb	r2, [r3, #5]
 8014df0:	4b18      	ldr	r3, [pc, #96]	; (8014e54 <CDC_Control_FS+0x140>)
 8014df2:	715a      	strb	r2, [r3, #5]
    	TempBuf_USB[6]=pbuf[6];
 8014df4:	683b      	ldr	r3, [r7, #0]
 8014df6:	799a      	ldrb	r2, [r3, #6]
 8014df8:	4b16      	ldr	r3, [pc, #88]	; (8014e54 <CDC_Control_FS+0x140>)
 8014dfa:	719a      	strb	r2, [r3, #6]
    	break;
 8014dfc:	e023      	b.n	8014e46 <CDC_Control_FS+0x132>


    case CDC_GET_LINE_CODING:
        pbuf[0]=TempBuf_USB[0];
 8014dfe:	4b15      	ldr	r3, [pc, #84]	; (8014e54 <CDC_Control_FS+0x140>)
 8014e00:	781a      	ldrb	r2, [r3, #0]
 8014e02:	683b      	ldr	r3, [r7, #0]
 8014e04:	701a      	strb	r2, [r3, #0]
        pbuf[1]=TempBuf_USB[1];
 8014e06:	683b      	ldr	r3, [r7, #0]
 8014e08:	3301      	adds	r3, #1
 8014e0a:	4a12      	ldr	r2, [pc, #72]	; (8014e54 <CDC_Control_FS+0x140>)
 8014e0c:	7852      	ldrb	r2, [r2, #1]
 8014e0e:	701a      	strb	r2, [r3, #0]
        pbuf[2]=TempBuf_USB[2];
 8014e10:	683b      	ldr	r3, [r7, #0]
 8014e12:	3302      	adds	r3, #2
 8014e14:	4a0f      	ldr	r2, [pc, #60]	; (8014e54 <CDC_Control_FS+0x140>)
 8014e16:	7892      	ldrb	r2, [r2, #2]
 8014e18:	701a      	strb	r2, [r3, #0]
        pbuf[3]=TempBuf_USB[3];
 8014e1a:	683b      	ldr	r3, [r7, #0]
 8014e1c:	3303      	adds	r3, #3
 8014e1e:	4a0d      	ldr	r2, [pc, #52]	; (8014e54 <CDC_Control_FS+0x140>)
 8014e20:	78d2      	ldrb	r2, [r2, #3]
 8014e22:	701a      	strb	r2, [r3, #0]
        pbuf[4]=TempBuf_USB[4];
 8014e24:	683b      	ldr	r3, [r7, #0]
 8014e26:	3304      	adds	r3, #4
 8014e28:	4a0a      	ldr	r2, [pc, #40]	; (8014e54 <CDC_Control_FS+0x140>)
 8014e2a:	7912      	ldrb	r2, [r2, #4]
 8014e2c:	701a      	strb	r2, [r3, #0]
        pbuf[5]=TempBuf_USB[5];
 8014e2e:	683b      	ldr	r3, [r7, #0]
 8014e30:	3305      	adds	r3, #5
 8014e32:	4a08      	ldr	r2, [pc, #32]	; (8014e54 <CDC_Control_FS+0x140>)
 8014e34:	7952      	ldrb	r2, [r2, #5]
 8014e36:	701a      	strb	r2, [r3, #0]
        pbuf[6]=TempBuf_USB[6];
 8014e38:	683b      	ldr	r3, [r7, #0]
 8014e3a:	3306      	adds	r3, #6
 8014e3c:	4a05      	ldr	r2, [pc, #20]	; (8014e54 <CDC_Control_FS+0x140>)
 8014e3e:	7992      	ldrb	r2, [r2, #6]
 8014e40:	701a      	strb	r2, [r3, #0]
    break;
 8014e42:	e000      	b.n	8014e46 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8014e44:	bf00      	nop
  }

  return (USBD_OK);
 8014e46:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8014e48:	4618      	mov	r0, r3
 8014e4a:	370c      	adds	r7, #12
 8014e4c:	46bd      	mov	sp, r7
 8014e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e52:	4770      	bx	lr
 8014e54:	20006820 	.word	0x20006820

08014e58 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8014e58:	b580      	push	{r7, lr}
 8014e5a:	b082      	sub	sp, #8
 8014e5c:	af00      	add	r7, sp, #0
 8014e5e:	6078      	str	r0, [r7, #4]
 8014e60:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	ringBuff_PushArray(&usb_rx_ringbuff, Buf, (uint16_t)*Len);
 8014e62:	683b      	ldr	r3, [r7, #0]
 8014e64:	681b      	ldr	r3, [r3, #0]
 8014e66:	b29b      	uxth	r3, r3
 8014e68:	461a      	mov	r2, r3
 8014e6a:	6879      	ldr	r1, [r7, #4]
 8014e6c:	4807      	ldr	r0, [pc, #28]	; (8014e8c <CDC_Receive_FS+0x34>)
 8014e6e:	f7ee fcce 	bl	800380e <ringBuff_PushArray>
//	if ( END_CHAR == Buf[*Len - 1]) {
//		osSignalSet(USB_RX_Check_Handle, 0x01);
//	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8014e72:	6879      	ldr	r1, [r7, #4]
 8014e74:	4806      	ldr	r0, [pc, #24]	; (8014e90 <CDC_Receive_FS+0x38>)
 8014e76:	f7fb fc9e 	bl	80107b6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8014e7a:	4805      	ldr	r0, [pc, #20]	; (8014e90 <CDC_Receive_FS+0x38>)
 8014e7c:	f7fb fcde 	bl	801083c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8014e80:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8014e82:	4618      	mov	r0, r3
 8014e84:	3708      	adds	r7, #8
 8014e86:	46bd      	mov	sp, r7
 8014e88:	bd80      	pop	{r7, pc}
 8014e8a:	bf00      	nop
 8014e8c:	20000028 	.word	0x20000028
 8014e90:	20006184 	.word	0x20006184

08014e94 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8014e94:	b580      	push	{r7, lr}
 8014e96:	b084      	sub	sp, #16
 8014e98:	af00      	add	r7, sp, #0
 8014e9a:	6078      	str	r0, [r7, #4]
 8014e9c:	460b      	mov	r3, r1
 8014e9e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8014ea0:	2300      	movs	r3, #0
 8014ea2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8014ea4:	4b0d      	ldr	r3, [pc, #52]	; (8014edc <CDC_Transmit_FS+0x48>)
 8014ea6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8014eaa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8014eac:	68bb      	ldr	r3, [r7, #8]
 8014eae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	d001      	beq.n	8014eba <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8014eb6:	2301      	movs	r3, #1
 8014eb8:	e00b      	b.n	8014ed2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8014eba:	887b      	ldrh	r3, [r7, #2]
 8014ebc:	461a      	mov	r2, r3
 8014ebe:	6879      	ldr	r1, [r7, #4]
 8014ec0:	4806      	ldr	r0, [pc, #24]	; (8014edc <CDC_Transmit_FS+0x48>)
 8014ec2:	f7fb fc5e 	bl	8010782 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8014ec6:	4805      	ldr	r0, [pc, #20]	; (8014edc <CDC_Transmit_FS+0x48>)
 8014ec8:	f7fb fc89 	bl	80107de <USBD_CDC_TransmitPacket>
 8014ecc:	4603      	mov	r3, r0
 8014ece:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8014ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8014ed2:	4618      	mov	r0, r3
 8014ed4:	3710      	adds	r7, #16
 8014ed6:	46bd      	mov	sp, r7
 8014ed8:	bd80      	pop	{r7, pc}
 8014eda:	bf00      	nop
 8014edc:	20006184 	.word	0x20006184

08014ee0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014ee0:	b480      	push	{r7}
 8014ee2:	b083      	sub	sp, #12
 8014ee4:	af00      	add	r7, sp, #0
 8014ee6:	4603      	mov	r3, r0
 8014ee8:	6039      	str	r1, [r7, #0]
 8014eea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8014eec:	683b      	ldr	r3, [r7, #0]
 8014eee:	2212      	movs	r2, #18
 8014ef0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8014ef2:	4b03      	ldr	r3, [pc, #12]	; (8014f00 <USBD_FS_DeviceDescriptor+0x20>)
}
 8014ef4:	4618      	mov	r0, r3
 8014ef6:	370c      	adds	r7, #12
 8014ef8:	46bd      	mov	sp, r7
 8014efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014efe:	4770      	bx	lr
 8014f00:	20000dd8 	.word	0x20000dd8

08014f04 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014f04:	b480      	push	{r7}
 8014f06:	b083      	sub	sp, #12
 8014f08:	af00      	add	r7, sp, #0
 8014f0a:	4603      	mov	r3, r0
 8014f0c:	6039      	str	r1, [r7, #0]
 8014f0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8014f10:	683b      	ldr	r3, [r7, #0]
 8014f12:	2204      	movs	r2, #4
 8014f14:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8014f16:	4b03      	ldr	r3, [pc, #12]	; (8014f24 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8014f18:	4618      	mov	r0, r3
 8014f1a:	370c      	adds	r7, #12
 8014f1c:	46bd      	mov	sp, r7
 8014f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f22:	4770      	bx	lr
 8014f24:	20000dec 	.word	0x20000dec

08014f28 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014f28:	b580      	push	{r7, lr}
 8014f2a:	b082      	sub	sp, #8
 8014f2c:	af00      	add	r7, sp, #0
 8014f2e:	4603      	mov	r3, r0
 8014f30:	6039      	str	r1, [r7, #0]
 8014f32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014f34:	79fb      	ldrb	r3, [r7, #7]
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	d105      	bne.n	8014f46 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8014f3a:	683a      	ldr	r2, [r7, #0]
 8014f3c:	4907      	ldr	r1, [pc, #28]	; (8014f5c <USBD_FS_ProductStrDescriptor+0x34>)
 8014f3e:	4808      	ldr	r0, [pc, #32]	; (8014f60 <USBD_FS_ProductStrDescriptor+0x38>)
 8014f40:	f7fc fc22 	bl	8011788 <USBD_GetString>
 8014f44:	e004      	b.n	8014f50 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8014f46:	683a      	ldr	r2, [r7, #0]
 8014f48:	4904      	ldr	r1, [pc, #16]	; (8014f5c <USBD_FS_ProductStrDescriptor+0x34>)
 8014f4a:	4805      	ldr	r0, [pc, #20]	; (8014f60 <USBD_FS_ProductStrDescriptor+0x38>)
 8014f4c:	f7fc fc1c 	bl	8011788 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014f50:	4b02      	ldr	r3, [pc, #8]	; (8014f5c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8014f52:	4618      	mov	r0, r3
 8014f54:	3708      	adds	r7, #8
 8014f56:	46bd      	mov	sp, r7
 8014f58:	bd80      	pop	{r7, pc}
 8014f5a:	bf00      	nop
 8014f5c:	20006828 	.word	0x20006828
 8014f60:	0801b170 	.word	0x0801b170

08014f64 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014f64:	b580      	push	{r7, lr}
 8014f66:	b082      	sub	sp, #8
 8014f68:	af00      	add	r7, sp, #0
 8014f6a:	4603      	mov	r3, r0
 8014f6c:	6039      	str	r1, [r7, #0]
 8014f6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8014f70:	683a      	ldr	r2, [r7, #0]
 8014f72:	4904      	ldr	r1, [pc, #16]	; (8014f84 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8014f74:	4804      	ldr	r0, [pc, #16]	; (8014f88 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8014f76:	f7fc fc07 	bl	8011788 <USBD_GetString>
  return USBD_StrDesc;
 8014f7a:	4b02      	ldr	r3, [pc, #8]	; (8014f84 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8014f7c:	4618      	mov	r0, r3
 8014f7e:	3708      	adds	r7, #8
 8014f80:	46bd      	mov	sp, r7
 8014f82:	bd80      	pop	{r7, pc}
 8014f84:	20006828 	.word	0x20006828
 8014f88:	0801b188 	.word	0x0801b188

08014f8c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014f8c:	b580      	push	{r7, lr}
 8014f8e:	b082      	sub	sp, #8
 8014f90:	af00      	add	r7, sp, #0
 8014f92:	4603      	mov	r3, r0
 8014f94:	6039      	str	r1, [r7, #0]
 8014f96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8014f98:	683b      	ldr	r3, [r7, #0]
 8014f9a:	221a      	movs	r2, #26
 8014f9c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8014f9e:	f000 f843 	bl	8015028 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8014fa2:	4b02      	ldr	r3, [pc, #8]	; (8014fac <USBD_FS_SerialStrDescriptor+0x20>)
}
 8014fa4:	4618      	mov	r0, r3
 8014fa6:	3708      	adds	r7, #8
 8014fa8:	46bd      	mov	sp, r7
 8014faa:	bd80      	pop	{r7, pc}
 8014fac:	20000df0 	.word	0x20000df0

08014fb0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014fb0:	b580      	push	{r7, lr}
 8014fb2:	b082      	sub	sp, #8
 8014fb4:	af00      	add	r7, sp, #0
 8014fb6:	4603      	mov	r3, r0
 8014fb8:	6039      	str	r1, [r7, #0]
 8014fba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8014fbc:	79fb      	ldrb	r3, [r7, #7]
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d105      	bne.n	8014fce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8014fc2:	683a      	ldr	r2, [r7, #0]
 8014fc4:	4907      	ldr	r1, [pc, #28]	; (8014fe4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8014fc6:	4808      	ldr	r0, [pc, #32]	; (8014fe8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8014fc8:	f7fc fbde 	bl	8011788 <USBD_GetString>
 8014fcc:	e004      	b.n	8014fd8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8014fce:	683a      	ldr	r2, [r7, #0]
 8014fd0:	4904      	ldr	r1, [pc, #16]	; (8014fe4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8014fd2:	4805      	ldr	r0, [pc, #20]	; (8014fe8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8014fd4:	f7fc fbd8 	bl	8011788 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014fd8:	4b02      	ldr	r3, [pc, #8]	; (8014fe4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8014fda:	4618      	mov	r0, r3
 8014fdc:	3708      	adds	r7, #8
 8014fde:	46bd      	mov	sp, r7
 8014fe0:	bd80      	pop	{r7, pc}
 8014fe2:	bf00      	nop
 8014fe4:	20006828 	.word	0x20006828
 8014fe8:	0801b19c 	.word	0x0801b19c

08014fec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014fec:	b580      	push	{r7, lr}
 8014fee:	b082      	sub	sp, #8
 8014ff0:	af00      	add	r7, sp, #0
 8014ff2:	4603      	mov	r3, r0
 8014ff4:	6039      	str	r1, [r7, #0]
 8014ff6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014ff8:	79fb      	ldrb	r3, [r7, #7]
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d105      	bne.n	801500a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8014ffe:	683a      	ldr	r2, [r7, #0]
 8015000:	4907      	ldr	r1, [pc, #28]	; (8015020 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015002:	4808      	ldr	r0, [pc, #32]	; (8015024 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015004:	f7fc fbc0 	bl	8011788 <USBD_GetString>
 8015008:	e004      	b.n	8015014 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801500a:	683a      	ldr	r2, [r7, #0]
 801500c:	4904      	ldr	r1, [pc, #16]	; (8015020 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801500e:	4805      	ldr	r0, [pc, #20]	; (8015024 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015010:	f7fc fbba 	bl	8011788 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015014:	4b02      	ldr	r3, [pc, #8]	; (8015020 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8015016:	4618      	mov	r0, r3
 8015018:	3708      	adds	r7, #8
 801501a:	46bd      	mov	sp, r7
 801501c:	bd80      	pop	{r7, pc}
 801501e:	bf00      	nop
 8015020:	20006828 	.word	0x20006828
 8015024:	0801b1a8 	.word	0x0801b1a8

08015028 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015028:	b580      	push	{r7, lr}
 801502a:	b084      	sub	sp, #16
 801502c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801502e:	4b0f      	ldr	r3, [pc, #60]	; (801506c <Get_SerialNum+0x44>)
 8015030:	681b      	ldr	r3, [r3, #0]
 8015032:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015034:	4b0e      	ldr	r3, [pc, #56]	; (8015070 <Get_SerialNum+0x48>)
 8015036:	681b      	ldr	r3, [r3, #0]
 8015038:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801503a:	4b0e      	ldr	r3, [pc, #56]	; (8015074 <Get_SerialNum+0x4c>)
 801503c:	681b      	ldr	r3, [r3, #0]
 801503e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015040:	68fa      	ldr	r2, [r7, #12]
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	4413      	add	r3, r2
 8015046:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015048:	68fb      	ldr	r3, [r7, #12]
 801504a:	2b00      	cmp	r3, #0
 801504c:	d009      	beq.n	8015062 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801504e:	2208      	movs	r2, #8
 8015050:	4909      	ldr	r1, [pc, #36]	; (8015078 <Get_SerialNum+0x50>)
 8015052:	68f8      	ldr	r0, [r7, #12]
 8015054:	f000 f814 	bl	8015080 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015058:	2204      	movs	r2, #4
 801505a:	4908      	ldr	r1, [pc, #32]	; (801507c <Get_SerialNum+0x54>)
 801505c:	68b8      	ldr	r0, [r7, #8]
 801505e:	f000 f80f 	bl	8015080 <IntToUnicode>
  }
}
 8015062:	bf00      	nop
 8015064:	3710      	adds	r7, #16
 8015066:	46bd      	mov	sp, r7
 8015068:	bd80      	pop	{r7, pc}
 801506a:	bf00      	nop
 801506c:	1fff7a10 	.word	0x1fff7a10
 8015070:	1fff7a14 	.word	0x1fff7a14
 8015074:	1fff7a18 	.word	0x1fff7a18
 8015078:	20000df2 	.word	0x20000df2
 801507c:	20000e02 	.word	0x20000e02

08015080 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015080:	b480      	push	{r7}
 8015082:	b087      	sub	sp, #28
 8015084:	af00      	add	r7, sp, #0
 8015086:	60f8      	str	r0, [r7, #12]
 8015088:	60b9      	str	r1, [r7, #8]
 801508a:	4613      	mov	r3, r2
 801508c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801508e:	2300      	movs	r3, #0
 8015090:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8015092:	2300      	movs	r3, #0
 8015094:	75fb      	strb	r3, [r7, #23]
 8015096:	e027      	b.n	80150e8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015098:	68fb      	ldr	r3, [r7, #12]
 801509a:	0f1b      	lsrs	r3, r3, #28
 801509c:	2b09      	cmp	r3, #9
 801509e:	d80b      	bhi.n	80150b8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80150a0:	68fb      	ldr	r3, [r7, #12]
 80150a2:	0f1b      	lsrs	r3, r3, #28
 80150a4:	b2da      	uxtb	r2, r3
 80150a6:	7dfb      	ldrb	r3, [r7, #23]
 80150a8:	005b      	lsls	r3, r3, #1
 80150aa:	4619      	mov	r1, r3
 80150ac:	68bb      	ldr	r3, [r7, #8]
 80150ae:	440b      	add	r3, r1
 80150b0:	3230      	adds	r2, #48	; 0x30
 80150b2:	b2d2      	uxtb	r2, r2
 80150b4:	701a      	strb	r2, [r3, #0]
 80150b6:	e00a      	b.n	80150ce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	0f1b      	lsrs	r3, r3, #28
 80150bc:	b2da      	uxtb	r2, r3
 80150be:	7dfb      	ldrb	r3, [r7, #23]
 80150c0:	005b      	lsls	r3, r3, #1
 80150c2:	4619      	mov	r1, r3
 80150c4:	68bb      	ldr	r3, [r7, #8]
 80150c6:	440b      	add	r3, r1
 80150c8:	3237      	adds	r2, #55	; 0x37
 80150ca:	b2d2      	uxtb	r2, r2
 80150cc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80150ce:	68fb      	ldr	r3, [r7, #12]
 80150d0:	011b      	lsls	r3, r3, #4
 80150d2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80150d4:	7dfb      	ldrb	r3, [r7, #23]
 80150d6:	005b      	lsls	r3, r3, #1
 80150d8:	3301      	adds	r3, #1
 80150da:	68ba      	ldr	r2, [r7, #8]
 80150dc:	4413      	add	r3, r2
 80150de:	2200      	movs	r2, #0
 80150e0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80150e2:	7dfb      	ldrb	r3, [r7, #23]
 80150e4:	3301      	adds	r3, #1
 80150e6:	75fb      	strb	r3, [r7, #23]
 80150e8:	7dfa      	ldrb	r2, [r7, #23]
 80150ea:	79fb      	ldrb	r3, [r7, #7]
 80150ec:	429a      	cmp	r2, r3
 80150ee:	d3d3      	bcc.n	8015098 <IntToUnicode+0x18>
  }
}
 80150f0:	bf00      	nop
 80150f2:	371c      	adds	r7, #28
 80150f4:	46bd      	mov	sp, r7
 80150f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150fa:	4770      	bx	lr

080150fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80150fc:	b580      	push	{r7, lr}
 80150fe:	b08a      	sub	sp, #40	; 0x28
 8015100:	af00      	add	r7, sp, #0
 8015102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015104:	f107 0314 	add.w	r3, r7, #20
 8015108:	2200      	movs	r2, #0
 801510a:	601a      	str	r2, [r3, #0]
 801510c:	605a      	str	r2, [r3, #4]
 801510e:	609a      	str	r2, [r3, #8]
 8015110:	60da      	str	r2, [r3, #12]
 8015112:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801511c:	d13a      	bne.n	8015194 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801511e:	2300      	movs	r3, #0
 8015120:	613b      	str	r3, [r7, #16]
 8015122:	4b1e      	ldr	r3, [pc, #120]	; (801519c <HAL_PCD_MspInit+0xa0>)
 8015124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015126:	4a1d      	ldr	r2, [pc, #116]	; (801519c <HAL_PCD_MspInit+0xa0>)
 8015128:	f043 0301 	orr.w	r3, r3, #1
 801512c:	6313      	str	r3, [r2, #48]	; 0x30
 801512e:	4b1b      	ldr	r3, [pc, #108]	; (801519c <HAL_PCD_MspInit+0xa0>)
 8015130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015132:	f003 0301 	and.w	r3, r3, #1
 8015136:	613b      	str	r3, [r7, #16]
 8015138:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801513a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801513e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015140:	2302      	movs	r3, #2
 8015142:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015144:	2300      	movs	r3, #0
 8015146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015148:	2303      	movs	r3, #3
 801514a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801514c:	230a      	movs	r3, #10
 801514e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015150:	f107 0314 	add.w	r3, r7, #20
 8015154:	4619      	mov	r1, r3
 8015156:	4812      	ldr	r0, [pc, #72]	; (80151a0 <HAL_PCD_MspInit+0xa4>)
 8015158:	f7f6 fb34 	bl	800b7c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801515c:	4b0f      	ldr	r3, [pc, #60]	; (801519c <HAL_PCD_MspInit+0xa0>)
 801515e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015160:	4a0e      	ldr	r2, [pc, #56]	; (801519c <HAL_PCD_MspInit+0xa0>)
 8015162:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015166:	6353      	str	r3, [r2, #52]	; 0x34
 8015168:	2300      	movs	r3, #0
 801516a:	60fb      	str	r3, [r7, #12]
 801516c:	4b0b      	ldr	r3, [pc, #44]	; (801519c <HAL_PCD_MspInit+0xa0>)
 801516e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015170:	4a0a      	ldr	r2, [pc, #40]	; (801519c <HAL_PCD_MspInit+0xa0>)
 8015172:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015176:	6453      	str	r3, [r2, #68]	; 0x44
 8015178:	4b08      	ldr	r3, [pc, #32]	; (801519c <HAL_PCD_MspInit+0xa0>)
 801517a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801517c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015180:	60fb      	str	r3, [r7, #12]
 8015182:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8015184:	2200      	movs	r2, #0
 8015186:	2105      	movs	r1, #5
 8015188:	2043      	movs	r0, #67	; 0x43
 801518a:	f7f5 ff53 	bl	800b034 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801518e:	2043      	movs	r0, #67	; 0x43
 8015190:	f7f5 ff6c 	bl	800b06c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015194:	bf00      	nop
 8015196:	3728      	adds	r7, #40	; 0x28
 8015198:	46bd      	mov	sp, r7
 801519a:	bd80      	pop	{r7, pc}
 801519c:	40023800 	.word	0x40023800
 80151a0:	40020000 	.word	0x40020000

080151a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80151a4:	b580      	push	{r7, lr}
 80151a6:	b082      	sub	sp, #8
 80151a8:	af00      	add	r7, sp, #0
 80151aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80151b8:	4619      	mov	r1, r3
 80151ba:	4610      	mov	r0, r2
 80151bc:	f7fb fbf6 	bl	80109ac <USBD_LL_SetupStage>
}
 80151c0:	bf00      	nop
 80151c2:	3708      	adds	r7, #8
 80151c4:	46bd      	mov	sp, r7
 80151c6:	bd80      	pop	{r7, pc}

080151c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80151c8:	b580      	push	{r7, lr}
 80151ca:	b082      	sub	sp, #8
 80151cc:	af00      	add	r7, sp, #0
 80151ce:	6078      	str	r0, [r7, #4]
 80151d0:	460b      	mov	r3, r1
 80151d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80151da:	78fa      	ldrb	r2, [r7, #3]
 80151dc:	6879      	ldr	r1, [r7, #4]
 80151de:	4613      	mov	r3, r2
 80151e0:	00db      	lsls	r3, r3, #3
 80151e2:	1a9b      	subs	r3, r3, r2
 80151e4:	009b      	lsls	r3, r3, #2
 80151e6:	440b      	add	r3, r1
 80151e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80151ec:	681a      	ldr	r2, [r3, #0]
 80151ee:	78fb      	ldrb	r3, [r7, #3]
 80151f0:	4619      	mov	r1, r3
 80151f2:	f7fb fc26 	bl	8010a42 <USBD_LL_DataOutStage>
}
 80151f6:	bf00      	nop
 80151f8:	3708      	adds	r7, #8
 80151fa:	46bd      	mov	sp, r7
 80151fc:	bd80      	pop	{r7, pc}

080151fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80151fe:	b580      	push	{r7, lr}
 8015200:	b082      	sub	sp, #8
 8015202:	af00      	add	r7, sp, #0
 8015204:	6078      	str	r0, [r7, #4]
 8015206:	460b      	mov	r3, r1
 8015208:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8015210:	78fa      	ldrb	r2, [r7, #3]
 8015212:	6879      	ldr	r1, [r7, #4]
 8015214:	4613      	mov	r3, r2
 8015216:	00db      	lsls	r3, r3, #3
 8015218:	1a9b      	subs	r3, r3, r2
 801521a:	009b      	lsls	r3, r3, #2
 801521c:	440b      	add	r3, r1
 801521e:	3348      	adds	r3, #72	; 0x48
 8015220:	681a      	ldr	r2, [r3, #0]
 8015222:	78fb      	ldrb	r3, [r7, #3]
 8015224:	4619      	mov	r1, r3
 8015226:	f7fb fc7d 	bl	8010b24 <USBD_LL_DataInStage>
}
 801522a:	bf00      	nop
 801522c:	3708      	adds	r7, #8
 801522e:	46bd      	mov	sp, r7
 8015230:	bd80      	pop	{r7, pc}

08015232 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015232:	b580      	push	{r7, lr}
 8015234:	b082      	sub	sp, #8
 8015236:	af00      	add	r7, sp, #0
 8015238:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015240:	4618      	mov	r0, r3
 8015242:	f7fb fd8b 	bl	8010d5c <USBD_LL_SOF>
}
 8015246:	bf00      	nop
 8015248:	3708      	adds	r7, #8
 801524a:	46bd      	mov	sp, r7
 801524c:	bd80      	pop	{r7, pc}

0801524e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 801524e:	b580      	push	{r7, lr}
 8015250:	b084      	sub	sp, #16
 8015252:	af00      	add	r7, sp, #0
 8015254:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015256:	2301      	movs	r3, #1
 8015258:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	68db      	ldr	r3, [r3, #12]
 801525e:	2b00      	cmp	r3, #0
 8015260:	d102      	bne.n	8015268 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8015262:	2300      	movs	r3, #0
 8015264:	73fb      	strb	r3, [r7, #15]
 8015266:	e008      	b.n	801527a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	68db      	ldr	r3, [r3, #12]
 801526c:	2b02      	cmp	r3, #2
 801526e:	d102      	bne.n	8015276 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8015270:	2301      	movs	r3, #1
 8015272:	73fb      	strb	r3, [r7, #15]
 8015274:	e001      	b.n	801527a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8015276:	f7ee fa53 	bl	8003720 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015280:	7bfa      	ldrb	r2, [r7, #15]
 8015282:	4611      	mov	r1, r2
 8015284:	4618      	mov	r0, r3
 8015286:	f7fb fd33 	bl	8010cf0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015290:	4618      	mov	r0, r3
 8015292:	f7fb fcec 	bl	8010c6e <USBD_LL_Reset>
}
 8015296:	bf00      	nop
 8015298:	3710      	adds	r7, #16
 801529a:	46bd      	mov	sp, r7
 801529c:	bd80      	pop	{r7, pc}
	...

080152a0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80152a0:	b580      	push	{r7, lr}
 80152a2:	b082      	sub	sp, #8
 80152a4:	af00      	add	r7, sp, #0
 80152a6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80152ae:	4618      	mov	r0, r3
 80152b0:	f7fb fd2e 	bl	8010d10 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	681b      	ldr	r3, [r3, #0]
 80152b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80152bc:	681b      	ldr	r3, [r3, #0]
 80152be:	687a      	ldr	r2, [r7, #4]
 80152c0:	6812      	ldr	r2, [r2, #0]
 80152c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80152c6:	f043 0301 	orr.w	r3, r3, #1
 80152ca:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	6a1b      	ldr	r3, [r3, #32]
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d005      	beq.n	80152e0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80152d4:	4b04      	ldr	r3, [pc, #16]	; (80152e8 <HAL_PCD_SuspendCallback+0x48>)
 80152d6:	691b      	ldr	r3, [r3, #16]
 80152d8:	4a03      	ldr	r2, [pc, #12]	; (80152e8 <HAL_PCD_SuspendCallback+0x48>)
 80152da:	f043 0306 	orr.w	r3, r3, #6
 80152de:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80152e0:	bf00      	nop
 80152e2:	3708      	adds	r7, #8
 80152e4:	46bd      	mov	sp, r7
 80152e6:	bd80      	pop	{r7, pc}
 80152e8:	e000ed00 	.word	0xe000ed00

080152ec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80152ec:	b580      	push	{r7, lr}
 80152ee:	b082      	sub	sp, #8
 80152f0:	af00      	add	r7, sp, #0
 80152f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80152fa:	4618      	mov	r0, r3
 80152fc:	f7fb fd1d 	bl	8010d3a <USBD_LL_Resume>
}
 8015300:	bf00      	nop
 8015302:	3708      	adds	r7, #8
 8015304:	46bd      	mov	sp, r7
 8015306:	bd80      	pop	{r7, pc}

08015308 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015308:	b580      	push	{r7, lr}
 801530a:	b082      	sub	sp, #8
 801530c:	af00      	add	r7, sp, #0
 801530e:	6078      	str	r0, [r7, #4]
 8015310:	460b      	mov	r3, r1
 8015312:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801531a:	78fa      	ldrb	r2, [r7, #3]
 801531c:	4611      	mov	r1, r2
 801531e:	4618      	mov	r0, r3
 8015320:	f7fb fd43 	bl	8010daa <USBD_LL_IsoOUTIncomplete>
}
 8015324:	bf00      	nop
 8015326:	3708      	adds	r7, #8
 8015328:	46bd      	mov	sp, r7
 801532a:	bd80      	pop	{r7, pc}

0801532c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801532c:	b580      	push	{r7, lr}
 801532e:	b082      	sub	sp, #8
 8015330:	af00      	add	r7, sp, #0
 8015332:	6078      	str	r0, [r7, #4]
 8015334:	460b      	mov	r3, r1
 8015336:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801533e:	78fa      	ldrb	r2, [r7, #3]
 8015340:	4611      	mov	r1, r2
 8015342:	4618      	mov	r0, r3
 8015344:	f7fb fd24 	bl	8010d90 <USBD_LL_IsoINIncomplete>
}
 8015348:	bf00      	nop
 801534a:	3708      	adds	r7, #8
 801534c:	46bd      	mov	sp, r7
 801534e:	bd80      	pop	{r7, pc}

08015350 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015350:	b580      	push	{r7, lr}
 8015352:	b082      	sub	sp, #8
 8015354:	af00      	add	r7, sp, #0
 8015356:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801535e:	4618      	mov	r0, r3
 8015360:	f7fb fd30 	bl	8010dc4 <USBD_LL_DevConnected>
}
 8015364:	bf00      	nop
 8015366:	3708      	adds	r7, #8
 8015368:	46bd      	mov	sp, r7
 801536a:	bd80      	pop	{r7, pc}

0801536c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801536c:	b580      	push	{r7, lr}
 801536e:	b082      	sub	sp, #8
 8015370:	af00      	add	r7, sp, #0
 8015372:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801537a:	4618      	mov	r0, r3
 801537c:	f7fb fd2d 	bl	8010dda <USBD_LL_DevDisconnected>
}
 8015380:	bf00      	nop
 8015382:	3708      	adds	r7, #8
 8015384:	46bd      	mov	sp, r7
 8015386:	bd80      	pop	{r7, pc}

08015388 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015388:	b580      	push	{r7, lr}
 801538a:	b082      	sub	sp, #8
 801538c:	af00      	add	r7, sp, #0
 801538e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	781b      	ldrb	r3, [r3, #0]
 8015394:	2b00      	cmp	r3, #0
 8015396:	d13c      	bne.n	8015412 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8015398:	4a20      	ldr	r2, [pc, #128]	; (801541c <USBD_LL_Init+0x94>)
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	4a1e      	ldr	r2, [pc, #120]	; (801541c <USBD_LL_Init+0x94>)
 80153a4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80153a8:	4b1c      	ldr	r3, [pc, #112]	; (801541c <USBD_LL_Init+0x94>)
 80153aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80153ae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80153b0:	4b1a      	ldr	r3, [pc, #104]	; (801541c <USBD_LL_Init+0x94>)
 80153b2:	2204      	movs	r2, #4
 80153b4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80153b6:	4b19      	ldr	r3, [pc, #100]	; (801541c <USBD_LL_Init+0x94>)
 80153b8:	2202      	movs	r2, #2
 80153ba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80153bc:	4b17      	ldr	r3, [pc, #92]	; (801541c <USBD_LL_Init+0x94>)
 80153be:	2200      	movs	r2, #0
 80153c0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80153c2:	4b16      	ldr	r3, [pc, #88]	; (801541c <USBD_LL_Init+0x94>)
 80153c4:	2202      	movs	r2, #2
 80153c6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80153c8:	4b14      	ldr	r3, [pc, #80]	; (801541c <USBD_LL_Init+0x94>)
 80153ca:	2200      	movs	r2, #0
 80153cc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80153ce:	4b13      	ldr	r3, [pc, #76]	; (801541c <USBD_LL_Init+0x94>)
 80153d0:	2200      	movs	r2, #0
 80153d2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80153d4:	4b11      	ldr	r3, [pc, #68]	; (801541c <USBD_LL_Init+0x94>)
 80153d6:	2200      	movs	r2, #0
 80153d8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80153da:	4b10      	ldr	r3, [pc, #64]	; (801541c <USBD_LL_Init+0x94>)
 80153dc:	2200      	movs	r2, #0
 80153de:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80153e0:	4b0e      	ldr	r3, [pc, #56]	; (801541c <USBD_LL_Init+0x94>)
 80153e2:	2200      	movs	r2, #0
 80153e4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80153e6:	480d      	ldr	r0, [pc, #52]	; (801541c <USBD_LL_Init+0x94>)
 80153e8:	f7f6 fbf6 	bl	800bbd8 <HAL_PCD_Init>
 80153ec:	4603      	mov	r3, r0
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	d001      	beq.n	80153f6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80153f2:	f7ee f995 	bl	8003720 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80153f6:	2180      	movs	r1, #128	; 0x80
 80153f8:	4808      	ldr	r0, [pc, #32]	; (801541c <USBD_LL_Init+0x94>)
 80153fa:	f7f7 fd5a 	bl	800ceb2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80153fe:	2240      	movs	r2, #64	; 0x40
 8015400:	2100      	movs	r1, #0
 8015402:	4806      	ldr	r0, [pc, #24]	; (801541c <USBD_LL_Init+0x94>)
 8015404:	f7f7 fd0e 	bl	800ce24 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8015408:	2280      	movs	r2, #128	; 0x80
 801540a:	2101      	movs	r1, #1
 801540c:	4803      	ldr	r0, [pc, #12]	; (801541c <USBD_LL_Init+0x94>)
 801540e:	f7f7 fd09 	bl	800ce24 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8015412:	2300      	movs	r3, #0
}
 8015414:	4618      	mov	r0, r3
 8015416:	3708      	adds	r7, #8
 8015418:	46bd      	mov	sp, r7
 801541a:	bd80      	pop	{r7, pc}
 801541c:	20006a28 	.word	0x20006a28

08015420 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015420:	b580      	push	{r7, lr}
 8015422:	b084      	sub	sp, #16
 8015424:	af00      	add	r7, sp, #0
 8015426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015428:	2300      	movs	r3, #0
 801542a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801542c:	2300      	movs	r3, #0
 801542e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8015436:	4618      	mov	r0, r3
 8015438:	f7f6 fceb 	bl	800be12 <HAL_PCD_Start>
 801543c:	4603      	mov	r3, r0
 801543e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8015440:	7bfb      	ldrb	r3, [r7, #15]
 8015442:	4618      	mov	r0, r3
 8015444:	f000 f92e 	bl	80156a4 <USBD_Get_USB_Status>
 8015448:	4603      	mov	r3, r0
 801544a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801544c:	7bbb      	ldrb	r3, [r7, #14]
}
 801544e:	4618      	mov	r0, r3
 8015450:	3710      	adds	r7, #16
 8015452:	46bd      	mov	sp, r7
 8015454:	bd80      	pop	{r7, pc}

08015456 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015456:	b580      	push	{r7, lr}
 8015458:	b084      	sub	sp, #16
 801545a:	af00      	add	r7, sp, #0
 801545c:	6078      	str	r0, [r7, #4]
 801545e:	4608      	mov	r0, r1
 8015460:	4611      	mov	r1, r2
 8015462:	461a      	mov	r2, r3
 8015464:	4603      	mov	r3, r0
 8015466:	70fb      	strb	r3, [r7, #3]
 8015468:	460b      	mov	r3, r1
 801546a:	70bb      	strb	r3, [r7, #2]
 801546c:	4613      	mov	r3, r2
 801546e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015470:	2300      	movs	r3, #0
 8015472:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015474:	2300      	movs	r3, #0
 8015476:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 801547e:	78bb      	ldrb	r3, [r7, #2]
 8015480:	883a      	ldrh	r2, [r7, #0]
 8015482:	78f9      	ldrb	r1, [r7, #3]
 8015484:	f7f7 f8c0 	bl	800c608 <HAL_PCD_EP_Open>
 8015488:	4603      	mov	r3, r0
 801548a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801548c:	7bfb      	ldrb	r3, [r7, #15]
 801548e:	4618      	mov	r0, r3
 8015490:	f000 f908 	bl	80156a4 <USBD_Get_USB_Status>
 8015494:	4603      	mov	r3, r0
 8015496:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8015498:	7bbb      	ldrb	r3, [r7, #14]
}
 801549a:	4618      	mov	r0, r3
 801549c:	3710      	adds	r7, #16
 801549e:	46bd      	mov	sp, r7
 80154a0:	bd80      	pop	{r7, pc}

080154a2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80154a2:	b580      	push	{r7, lr}
 80154a4:	b084      	sub	sp, #16
 80154a6:	af00      	add	r7, sp, #0
 80154a8:	6078      	str	r0, [r7, #4]
 80154aa:	460b      	mov	r3, r1
 80154ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80154ae:	2300      	movs	r3, #0
 80154b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80154b2:	2300      	movs	r3, #0
 80154b4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80154bc:	78fa      	ldrb	r2, [r7, #3]
 80154be:	4611      	mov	r1, r2
 80154c0:	4618      	mov	r0, r3
 80154c2:	f7f7 f909 	bl	800c6d8 <HAL_PCD_EP_Close>
 80154c6:	4603      	mov	r3, r0
 80154c8:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 80154ca:	7bfb      	ldrb	r3, [r7, #15]
 80154cc:	4618      	mov	r0, r3
 80154ce:	f000 f8e9 	bl	80156a4 <USBD_Get_USB_Status>
 80154d2:	4603      	mov	r3, r0
 80154d4:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80154d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80154d8:	4618      	mov	r0, r3
 80154da:	3710      	adds	r7, #16
 80154dc:	46bd      	mov	sp, r7
 80154de:	bd80      	pop	{r7, pc}

080154e0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80154e0:	b580      	push	{r7, lr}
 80154e2:	b084      	sub	sp, #16
 80154e4:	af00      	add	r7, sp, #0
 80154e6:	6078      	str	r0, [r7, #4]
 80154e8:	460b      	mov	r3, r1
 80154ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80154ec:	2300      	movs	r3, #0
 80154ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80154f0:	2300      	movs	r3, #0
 80154f2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80154fa:	78fa      	ldrb	r2, [r7, #3]
 80154fc:	4611      	mov	r1, r2
 80154fe:	4618      	mov	r0, r3
 8015500:	f7f7 f9e1 	bl	800c8c6 <HAL_PCD_EP_SetStall>
 8015504:	4603      	mov	r3, r0
 8015506:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015508:	7bfb      	ldrb	r3, [r7, #15]
 801550a:	4618      	mov	r0, r3
 801550c:	f000 f8ca 	bl	80156a4 <USBD_Get_USB_Status>
 8015510:	4603      	mov	r3, r0
 8015512:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8015514:	7bbb      	ldrb	r3, [r7, #14]
}
 8015516:	4618      	mov	r0, r3
 8015518:	3710      	adds	r7, #16
 801551a:	46bd      	mov	sp, r7
 801551c:	bd80      	pop	{r7, pc}

0801551e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801551e:	b580      	push	{r7, lr}
 8015520:	b084      	sub	sp, #16
 8015522:	af00      	add	r7, sp, #0
 8015524:	6078      	str	r0, [r7, #4]
 8015526:	460b      	mov	r3, r1
 8015528:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801552a:	2300      	movs	r3, #0
 801552c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801552e:	2300      	movs	r3, #0
 8015530:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8015538:	78fa      	ldrb	r2, [r7, #3]
 801553a:	4611      	mov	r1, r2
 801553c:	4618      	mov	r0, r3
 801553e:	f7f7 fa26 	bl	800c98e <HAL_PCD_EP_ClrStall>
 8015542:	4603      	mov	r3, r0
 8015544:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8015546:	7bfb      	ldrb	r3, [r7, #15]
 8015548:	4618      	mov	r0, r3
 801554a:	f000 f8ab 	bl	80156a4 <USBD_Get_USB_Status>
 801554e:	4603      	mov	r3, r0
 8015550:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8015552:	7bbb      	ldrb	r3, [r7, #14]
}
 8015554:	4618      	mov	r0, r3
 8015556:	3710      	adds	r7, #16
 8015558:	46bd      	mov	sp, r7
 801555a:	bd80      	pop	{r7, pc}

0801555c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801555c:	b480      	push	{r7}
 801555e:	b085      	sub	sp, #20
 8015560:	af00      	add	r7, sp, #0
 8015562:	6078      	str	r0, [r7, #4]
 8015564:	460b      	mov	r3, r1
 8015566:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801556e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8015570:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015574:	2b00      	cmp	r3, #0
 8015576:	da0b      	bge.n	8015590 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8015578:	78fb      	ldrb	r3, [r7, #3]
 801557a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801557e:	68f9      	ldr	r1, [r7, #12]
 8015580:	4613      	mov	r3, r2
 8015582:	00db      	lsls	r3, r3, #3
 8015584:	1a9b      	subs	r3, r3, r2
 8015586:	009b      	lsls	r3, r3, #2
 8015588:	440b      	add	r3, r1
 801558a:	333e      	adds	r3, #62	; 0x3e
 801558c:	781b      	ldrb	r3, [r3, #0]
 801558e:	e00b      	b.n	80155a8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8015590:	78fb      	ldrb	r3, [r7, #3]
 8015592:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015596:	68f9      	ldr	r1, [r7, #12]
 8015598:	4613      	mov	r3, r2
 801559a:	00db      	lsls	r3, r3, #3
 801559c:	1a9b      	subs	r3, r3, r2
 801559e:	009b      	lsls	r3, r3, #2
 80155a0:	440b      	add	r3, r1
 80155a2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80155a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80155a8:	4618      	mov	r0, r3
 80155aa:	3714      	adds	r7, #20
 80155ac:	46bd      	mov	sp, r7
 80155ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155b2:	4770      	bx	lr

080155b4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80155b4:	b580      	push	{r7, lr}
 80155b6:	b084      	sub	sp, #16
 80155b8:	af00      	add	r7, sp, #0
 80155ba:	6078      	str	r0, [r7, #4]
 80155bc:	460b      	mov	r3, r1
 80155be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80155c0:	2300      	movs	r3, #0
 80155c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80155c4:	2300      	movs	r3, #0
 80155c6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80155ce:	78fa      	ldrb	r2, [r7, #3]
 80155d0:	4611      	mov	r1, r2
 80155d2:	4618      	mov	r0, r3
 80155d4:	f7f6 fff3 	bl	800c5be <HAL_PCD_SetAddress>
 80155d8:	4603      	mov	r3, r0
 80155da:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 80155dc:	7bfb      	ldrb	r3, [r7, #15]
 80155de:	4618      	mov	r0, r3
 80155e0:	f000 f860 	bl	80156a4 <USBD_Get_USB_Status>
 80155e4:	4603      	mov	r3, r0
 80155e6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80155e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80155ea:	4618      	mov	r0, r3
 80155ec:	3710      	adds	r7, #16
 80155ee:	46bd      	mov	sp, r7
 80155f0:	bd80      	pop	{r7, pc}

080155f2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80155f2:	b580      	push	{r7, lr}
 80155f4:	b086      	sub	sp, #24
 80155f6:	af00      	add	r7, sp, #0
 80155f8:	60f8      	str	r0, [r7, #12]
 80155fa:	607a      	str	r2, [r7, #4]
 80155fc:	461a      	mov	r2, r3
 80155fe:	460b      	mov	r3, r1
 8015600:	72fb      	strb	r3, [r7, #11]
 8015602:	4613      	mov	r3, r2
 8015604:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015606:	2300      	movs	r3, #0
 8015608:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801560a:	2300      	movs	r3, #0
 801560c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801560e:	68fb      	ldr	r3, [r7, #12]
 8015610:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8015614:	893b      	ldrh	r3, [r7, #8]
 8015616:	7af9      	ldrb	r1, [r7, #11]
 8015618:	687a      	ldr	r2, [r7, #4]
 801561a:	f7f7 f90a 	bl	800c832 <HAL_PCD_EP_Transmit>
 801561e:	4603      	mov	r3, r0
 8015620:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8015622:	7dfb      	ldrb	r3, [r7, #23]
 8015624:	4618      	mov	r0, r3
 8015626:	f000 f83d 	bl	80156a4 <USBD_Get_USB_Status>
 801562a:	4603      	mov	r3, r0
 801562c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 801562e:	7dbb      	ldrb	r3, [r7, #22]
}
 8015630:	4618      	mov	r0, r3
 8015632:	3718      	adds	r7, #24
 8015634:	46bd      	mov	sp, r7
 8015636:	bd80      	pop	{r7, pc}

08015638 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8015638:	b580      	push	{r7, lr}
 801563a:	b086      	sub	sp, #24
 801563c:	af00      	add	r7, sp, #0
 801563e:	60f8      	str	r0, [r7, #12]
 8015640:	607a      	str	r2, [r7, #4]
 8015642:	461a      	mov	r2, r3
 8015644:	460b      	mov	r3, r1
 8015646:	72fb      	strb	r3, [r7, #11]
 8015648:	4613      	mov	r3, r2
 801564a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801564c:	2300      	movs	r3, #0
 801564e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015650:	2300      	movs	r3, #0
 8015652:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015654:	68fb      	ldr	r3, [r7, #12]
 8015656:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 801565a:	893b      	ldrh	r3, [r7, #8]
 801565c:	7af9      	ldrb	r1, [r7, #11]
 801565e:	687a      	ldr	r2, [r7, #4]
 8015660:	f7f7 f884 	bl	800c76c <HAL_PCD_EP_Receive>
 8015664:	4603      	mov	r3, r0
 8015666:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8015668:	7dfb      	ldrb	r3, [r7, #23]
 801566a:	4618      	mov	r0, r3
 801566c:	f000 f81a 	bl	80156a4 <USBD_Get_USB_Status>
 8015670:	4603      	mov	r3, r0
 8015672:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8015674:	7dbb      	ldrb	r3, [r7, #22]
}
 8015676:	4618      	mov	r0, r3
 8015678:	3718      	adds	r7, #24
 801567a:	46bd      	mov	sp, r7
 801567c:	bd80      	pop	{r7, pc}

0801567e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801567e:	b580      	push	{r7, lr}
 8015680:	b082      	sub	sp, #8
 8015682:	af00      	add	r7, sp, #0
 8015684:	6078      	str	r0, [r7, #4]
 8015686:	460b      	mov	r3, r1
 8015688:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8015690:	78fa      	ldrb	r2, [r7, #3]
 8015692:	4611      	mov	r1, r2
 8015694:	4618      	mov	r0, r3
 8015696:	f7f7 f8b4 	bl	800c802 <HAL_PCD_EP_GetRxCount>
 801569a:	4603      	mov	r3, r0
}
 801569c:	4618      	mov	r0, r3
 801569e:	3708      	adds	r7, #8
 80156a0:	46bd      	mov	sp, r7
 80156a2:	bd80      	pop	{r7, pc}

080156a4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80156a4:	b480      	push	{r7}
 80156a6:	b085      	sub	sp, #20
 80156a8:	af00      	add	r7, sp, #0
 80156aa:	4603      	mov	r3, r0
 80156ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80156ae:	2300      	movs	r3, #0
 80156b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80156b2:	79fb      	ldrb	r3, [r7, #7]
 80156b4:	2b03      	cmp	r3, #3
 80156b6:	d817      	bhi.n	80156e8 <USBD_Get_USB_Status+0x44>
 80156b8:	a201      	add	r2, pc, #4	; (adr r2, 80156c0 <USBD_Get_USB_Status+0x1c>)
 80156ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80156be:	bf00      	nop
 80156c0:	080156d1 	.word	0x080156d1
 80156c4:	080156d7 	.word	0x080156d7
 80156c8:	080156dd 	.word	0x080156dd
 80156cc:	080156e3 	.word	0x080156e3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80156d0:	2300      	movs	r3, #0
 80156d2:	73fb      	strb	r3, [r7, #15]
    break;
 80156d4:	e00b      	b.n	80156ee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80156d6:	2302      	movs	r3, #2
 80156d8:	73fb      	strb	r3, [r7, #15]
    break;
 80156da:	e008      	b.n	80156ee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80156dc:	2301      	movs	r3, #1
 80156de:	73fb      	strb	r3, [r7, #15]
    break;
 80156e0:	e005      	b.n	80156ee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80156e2:	2302      	movs	r3, #2
 80156e4:	73fb      	strb	r3, [r7, #15]
    break;
 80156e6:	e002      	b.n	80156ee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80156e8:	2302      	movs	r3, #2
 80156ea:	73fb      	strb	r3, [r7, #15]
    break;
 80156ec:	bf00      	nop
  }
  return usb_status;
 80156ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80156f0:	4618      	mov	r0, r3
 80156f2:	3714      	adds	r7, #20
 80156f4:	46bd      	mov	sp, r7
 80156f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156fa:	4770      	bx	lr

080156fc <__errno>:
 80156fc:	4b01      	ldr	r3, [pc, #4]	; (8015704 <__errno+0x8>)
 80156fe:	6818      	ldr	r0, [r3, #0]
 8015700:	4770      	bx	lr
 8015702:	bf00      	nop
 8015704:	20000e0c 	.word	0x20000e0c

08015708 <__libc_init_array>:
 8015708:	b570      	push	{r4, r5, r6, lr}
 801570a:	4e0d      	ldr	r6, [pc, #52]	; (8015740 <__libc_init_array+0x38>)
 801570c:	4c0d      	ldr	r4, [pc, #52]	; (8015744 <__libc_init_array+0x3c>)
 801570e:	1ba4      	subs	r4, r4, r6
 8015710:	10a4      	asrs	r4, r4, #2
 8015712:	2500      	movs	r5, #0
 8015714:	42a5      	cmp	r5, r4
 8015716:	d109      	bne.n	801572c <__libc_init_array+0x24>
 8015718:	4e0b      	ldr	r6, [pc, #44]	; (8015748 <__libc_init_array+0x40>)
 801571a:	4c0c      	ldr	r4, [pc, #48]	; (801574c <__libc_init_array+0x44>)
 801571c:	f005 fa9a 	bl	801ac54 <_init>
 8015720:	1ba4      	subs	r4, r4, r6
 8015722:	10a4      	asrs	r4, r4, #2
 8015724:	2500      	movs	r5, #0
 8015726:	42a5      	cmp	r5, r4
 8015728:	d105      	bne.n	8015736 <__libc_init_array+0x2e>
 801572a:	bd70      	pop	{r4, r5, r6, pc}
 801572c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015730:	4798      	blx	r3
 8015732:	3501      	adds	r5, #1
 8015734:	e7ee      	b.n	8015714 <__libc_init_array+0xc>
 8015736:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801573a:	4798      	blx	r3
 801573c:	3501      	adds	r5, #1
 801573e:	e7f2      	b.n	8015726 <__libc_init_array+0x1e>
 8015740:	0801b6b8 	.word	0x0801b6b8
 8015744:	0801b6b8 	.word	0x0801b6b8
 8015748:	0801b6b8 	.word	0x0801b6b8
 801574c:	0801b6bc 	.word	0x0801b6bc

08015750 <malloc>:
 8015750:	4b02      	ldr	r3, [pc, #8]	; (801575c <malloc+0xc>)
 8015752:	4601      	mov	r1, r0
 8015754:	6818      	ldr	r0, [r3, #0]
 8015756:	f000 b885 	b.w	8015864 <_malloc_r>
 801575a:	bf00      	nop
 801575c:	20000e0c 	.word	0x20000e0c

08015760 <free>:
 8015760:	4b02      	ldr	r3, [pc, #8]	; (801576c <free+0xc>)
 8015762:	4601      	mov	r1, r0
 8015764:	6818      	ldr	r0, [r3, #0]
 8015766:	f000 b82f 	b.w	80157c8 <_free_r>
 801576a:	bf00      	nop
 801576c:	20000e0c 	.word	0x20000e0c

08015770 <memcpy>:
 8015770:	b510      	push	{r4, lr}
 8015772:	1e43      	subs	r3, r0, #1
 8015774:	440a      	add	r2, r1
 8015776:	4291      	cmp	r1, r2
 8015778:	d100      	bne.n	801577c <memcpy+0xc>
 801577a:	bd10      	pop	{r4, pc}
 801577c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015780:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015784:	e7f7      	b.n	8015776 <memcpy+0x6>

08015786 <memmove>:
 8015786:	4288      	cmp	r0, r1
 8015788:	b510      	push	{r4, lr}
 801578a:	eb01 0302 	add.w	r3, r1, r2
 801578e:	d807      	bhi.n	80157a0 <memmove+0x1a>
 8015790:	1e42      	subs	r2, r0, #1
 8015792:	4299      	cmp	r1, r3
 8015794:	d00a      	beq.n	80157ac <memmove+0x26>
 8015796:	f811 4b01 	ldrb.w	r4, [r1], #1
 801579a:	f802 4f01 	strb.w	r4, [r2, #1]!
 801579e:	e7f8      	b.n	8015792 <memmove+0xc>
 80157a0:	4283      	cmp	r3, r0
 80157a2:	d9f5      	bls.n	8015790 <memmove+0xa>
 80157a4:	1881      	adds	r1, r0, r2
 80157a6:	1ad2      	subs	r2, r2, r3
 80157a8:	42d3      	cmn	r3, r2
 80157aa:	d100      	bne.n	80157ae <memmove+0x28>
 80157ac:	bd10      	pop	{r4, pc}
 80157ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80157b2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80157b6:	e7f7      	b.n	80157a8 <memmove+0x22>

080157b8 <memset>:
 80157b8:	4402      	add	r2, r0
 80157ba:	4603      	mov	r3, r0
 80157bc:	4293      	cmp	r3, r2
 80157be:	d100      	bne.n	80157c2 <memset+0xa>
 80157c0:	4770      	bx	lr
 80157c2:	f803 1b01 	strb.w	r1, [r3], #1
 80157c6:	e7f9      	b.n	80157bc <memset+0x4>

080157c8 <_free_r>:
 80157c8:	b538      	push	{r3, r4, r5, lr}
 80157ca:	4605      	mov	r5, r0
 80157cc:	2900      	cmp	r1, #0
 80157ce:	d045      	beq.n	801585c <_free_r+0x94>
 80157d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80157d4:	1f0c      	subs	r4, r1, #4
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	bfb8      	it	lt
 80157da:	18e4      	addlt	r4, r4, r3
 80157dc:	f002 ff94 	bl	8018708 <__malloc_lock>
 80157e0:	4a1f      	ldr	r2, [pc, #124]	; (8015860 <_free_r+0x98>)
 80157e2:	6813      	ldr	r3, [r2, #0]
 80157e4:	4610      	mov	r0, r2
 80157e6:	b933      	cbnz	r3, 80157f6 <_free_r+0x2e>
 80157e8:	6063      	str	r3, [r4, #4]
 80157ea:	6014      	str	r4, [r2, #0]
 80157ec:	4628      	mov	r0, r5
 80157ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80157f2:	f002 bf8a 	b.w	801870a <__malloc_unlock>
 80157f6:	42a3      	cmp	r3, r4
 80157f8:	d90c      	bls.n	8015814 <_free_r+0x4c>
 80157fa:	6821      	ldr	r1, [r4, #0]
 80157fc:	1862      	adds	r2, r4, r1
 80157fe:	4293      	cmp	r3, r2
 8015800:	bf04      	itt	eq
 8015802:	681a      	ldreq	r2, [r3, #0]
 8015804:	685b      	ldreq	r3, [r3, #4]
 8015806:	6063      	str	r3, [r4, #4]
 8015808:	bf04      	itt	eq
 801580a:	1852      	addeq	r2, r2, r1
 801580c:	6022      	streq	r2, [r4, #0]
 801580e:	6004      	str	r4, [r0, #0]
 8015810:	e7ec      	b.n	80157ec <_free_r+0x24>
 8015812:	4613      	mov	r3, r2
 8015814:	685a      	ldr	r2, [r3, #4]
 8015816:	b10a      	cbz	r2, 801581c <_free_r+0x54>
 8015818:	42a2      	cmp	r2, r4
 801581a:	d9fa      	bls.n	8015812 <_free_r+0x4a>
 801581c:	6819      	ldr	r1, [r3, #0]
 801581e:	1858      	adds	r0, r3, r1
 8015820:	42a0      	cmp	r0, r4
 8015822:	d10b      	bne.n	801583c <_free_r+0x74>
 8015824:	6820      	ldr	r0, [r4, #0]
 8015826:	4401      	add	r1, r0
 8015828:	1858      	adds	r0, r3, r1
 801582a:	4282      	cmp	r2, r0
 801582c:	6019      	str	r1, [r3, #0]
 801582e:	d1dd      	bne.n	80157ec <_free_r+0x24>
 8015830:	6810      	ldr	r0, [r2, #0]
 8015832:	6852      	ldr	r2, [r2, #4]
 8015834:	605a      	str	r2, [r3, #4]
 8015836:	4401      	add	r1, r0
 8015838:	6019      	str	r1, [r3, #0]
 801583a:	e7d7      	b.n	80157ec <_free_r+0x24>
 801583c:	d902      	bls.n	8015844 <_free_r+0x7c>
 801583e:	230c      	movs	r3, #12
 8015840:	602b      	str	r3, [r5, #0]
 8015842:	e7d3      	b.n	80157ec <_free_r+0x24>
 8015844:	6820      	ldr	r0, [r4, #0]
 8015846:	1821      	adds	r1, r4, r0
 8015848:	428a      	cmp	r2, r1
 801584a:	bf04      	itt	eq
 801584c:	6811      	ldreq	r1, [r2, #0]
 801584e:	6852      	ldreq	r2, [r2, #4]
 8015850:	6062      	str	r2, [r4, #4]
 8015852:	bf04      	itt	eq
 8015854:	1809      	addeq	r1, r1, r0
 8015856:	6021      	streq	r1, [r4, #0]
 8015858:	605c      	str	r4, [r3, #4]
 801585a:	e7c7      	b.n	80157ec <_free_r+0x24>
 801585c:	bd38      	pop	{r3, r4, r5, pc}
 801585e:	bf00      	nop
 8015860:	200051ac 	.word	0x200051ac

08015864 <_malloc_r>:
 8015864:	b570      	push	{r4, r5, r6, lr}
 8015866:	1ccd      	adds	r5, r1, #3
 8015868:	f025 0503 	bic.w	r5, r5, #3
 801586c:	3508      	adds	r5, #8
 801586e:	2d0c      	cmp	r5, #12
 8015870:	bf38      	it	cc
 8015872:	250c      	movcc	r5, #12
 8015874:	2d00      	cmp	r5, #0
 8015876:	4606      	mov	r6, r0
 8015878:	db01      	blt.n	801587e <_malloc_r+0x1a>
 801587a:	42a9      	cmp	r1, r5
 801587c:	d903      	bls.n	8015886 <_malloc_r+0x22>
 801587e:	230c      	movs	r3, #12
 8015880:	6033      	str	r3, [r6, #0]
 8015882:	2000      	movs	r0, #0
 8015884:	bd70      	pop	{r4, r5, r6, pc}
 8015886:	f002 ff3f 	bl	8018708 <__malloc_lock>
 801588a:	4a21      	ldr	r2, [pc, #132]	; (8015910 <_malloc_r+0xac>)
 801588c:	6814      	ldr	r4, [r2, #0]
 801588e:	4621      	mov	r1, r4
 8015890:	b991      	cbnz	r1, 80158b8 <_malloc_r+0x54>
 8015892:	4c20      	ldr	r4, [pc, #128]	; (8015914 <_malloc_r+0xb0>)
 8015894:	6823      	ldr	r3, [r4, #0]
 8015896:	b91b      	cbnz	r3, 80158a0 <_malloc_r+0x3c>
 8015898:	4630      	mov	r0, r6
 801589a:	f000 fe7b 	bl	8016594 <_sbrk_r>
 801589e:	6020      	str	r0, [r4, #0]
 80158a0:	4629      	mov	r1, r5
 80158a2:	4630      	mov	r0, r6
 80158a4:	f000 fe76 	bl	8016594 <_sbrk_r>
 80158a8:	1c43      	adds	r3, r0, #1
 80158aa:	d124      	bne.n	80158f6 <_malloc_r+0x92>
 80158ac:	230c      	movs	r3, #12
 80158ae:	6033      	str	r3, [r6, #0]
 80158b0:	4630      	mov	r0, r6
 80158b2:	f002 ff2a 	bl	801870a <__malloc_unlock>
 80158b6:	e7e4      	b.n	8015882 <_malloc_r+0x1e>
 80158b8:	680b      	ldr	r3, [r1, #0]
 80158ba:	1b5b      	subs	r3, r3, r5
 80158bc:	d418      	bmi.n	80158f0 <_malloc_r+0x8c>
 80158be:	2b0b      	cmp	r3, #11
 80158c0:	d90f      	bls.n	80158e2 <_malloc_r+0x7e>
 80158c2:	600b      	str	r3, [r1, #0]
 80158c4:	50cd      	str	r5, [r1, r3]
 80158c6:	18cc      	adds	r4, r1, r3
 80158c8:	4630      	mov	r0, r6
 80158ca:	f002 ff1e 	bl	801870a <__malloc_unlock>
 80158ce:	f104 000b 	add.w	r0, r4, #11
 80158d2:	1d23      	adds	r3, r4, #4
 80158d4:	f020 0007 	bic.w	r0, r0, #7
 80158d8:	1ac3      	subs	r3, r0, r3
 80158da:	d0d3      	beq.n	8015884 <_malloc_r+0x20>
 80158dc:	425a      	negs	r2, r3
 80158de:	50e2      	str	r2, [r4, r3]
 80158e0:	e7d0      	b.n	8015884 <_malloc_r+0x20>
 80158e2:	428c      	cmp	r4, r1
 80158e4:	684b      	ldr	r3, [r1, #4]
 80158e6:	bf16      	itet	ne
 80158e8:	6063      	strne	r3, [r4, #4]
 80158ea:	6013      	streq	r3, [r2, #0]
 80158ec:	460c      	movne	r4, r1
 80158ee:	e7eb      	b.n	80158c8 <_malloc_r+0x64>
 80158f0:	460c      	mov	r4, r1
 80158f2:	6849      	ldr	r1, [r1, #4]
 80158f4:	e7cc      	b.n	8015890 <_malloc_r+0x2c>
 80158f6:	1cc4      	adds	r4, r0, #3
 80158f8:	f024 0403 	bic.w	r4, r4, #3
 80158fc:	42a0      	cmp	r0, r4
 80158fe:	d005      	beq.n	801590c <_malloc_r+0xa8>
 8015900:	1a21      	subs	r1, r4, r0
 8015902:	4630      	mov	r0, r6
 8015904:	f000 fe46 	bl	8016594 <_sbrk_r>
 8015908:	3001      	adds	r0, #1
 801590a:	d0cf      	beq.n	80158ac <_malloc_r+0x48>
 801590c:	6025      	str	r5, [r4, #0]
 801590e:	e7db      	b.n	80158c8 <_malloc_r+0x64>
 8015910:	200051ac 	.word	0x200051ac
 8015914:	200051b0 	.word	0x200051b0

08015918 <__cvt>:
 8015918:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801591c:	ec55 4b10 	vmov	r4, r5, d0
 8015920:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8015922:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015926:	2d00      	cmp	r5, #0
 8015928:	460e      	mov	r6, r1
 801592a:	4691      	mov	r9, r2
 801592c:	4619      	mov	r1, r3
 801592e:	bfb8      	it	lt
 8015930:	4622      	movlt	r2, r4
 8015932:	462b      	mov	r3, r5
 8015934:	f027 0720 	bic.w	r7, r7, #32
 8015938:	bfbb      	ittet	lt
 801593a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801593e:	461d      	movlt	r5, r3
 8015940:	2300      	movge	r3, #0
 8015942:	232d      	movlt	r3, #45	; 0x2d
 8015944:	bfb8      	it	lt
 8015946:	4614      	movlt	r4, r2
 8015948:	2f46      	cmp	r7, #70	; 0x46
 801594a:	700b      	strb	r3, [r1, #0]
 801594c:	d004      	beq.n	8015958 <__cvt+0x40>
 801594e:	2f45      	cmp	r7, #69	; 0x45
 8015950:	d100      	bne.n	8015954 <__cvt+0x3c>
 8015952:	3601      	adds	r6, #1
 8015954:	2102      	movs	r1, #2
 8015956:	e000      	b.n	801595a <__cvt+0x42>
 8015958:	2103      	movs	r1, #3
 801595a:	ab03      	add	r3, sp, #12
 801595c:	9301      	str	r3, [sp, #4]
 801595e:	ab02      	add	r3, sp, #8
 8015960:	9300      	str	r3, [sp, #0]
 8015962:	4632      	mov	r2, r6
 8015964:	4653      	mov	r3, sl
 8015966:	ec45 4b10 	vmov	d0, r4, r5
 801596a:	f001 fdc9 	bl	8017500 <_dtoa_r>
 801596e:	2f47      	cmp	r7, #71	; 0x47
 8015970:	4680      	mov	r8, r0
 8015972:	d102      	bne.n	801597a <__cvt+0x62>
 8015974:	f019 0f01 	tst.w	r9, #1
 8015978:	d026      	beq.n	80159c8 <__cvt+0xb0>
 801597a:	2f46      	cmp	r7, #70	; 0x46
 801597c:	eb08 0906 	add.w	r9, r8, r6
 8015980:	d111      	bne.n	80159a6 <__cvt+0x8e>
 8015982:	f898 3000 	ldrb.w	r3, [r8]
 8015986:	2b30      	cmp	r3, #48	; 0x30
 8015988:	d10a      	bne.n	80159a0 <__cvt+0x88>
 801598a:	2200      	movs	r2, #0
 801598c:	2300      	movs	r3, #0
 801598e:	4620      	mov	r0, r4
 8015990:	4629      	mov	r1, r5
 8015992:	f7eb f899 	bl	8000ac8 <__aeabi_dcmpeq>
 8015996:	b918      	cbnz	r0, 80159a0 <__cvt+0x88>
 8015998:	f1c6 0601 	rsb	r6, r6, #1
 801599c:	f8ca 6000 	str.w	r6, [sl]
 80159a0:	f8da 3000 	ldr.w	r3, [sl]
 80159a4:	4499      	add	r9, r3
 80159a6:	2200      	movs	r2, #0
 80159a8:	2300      	movs	r3, #0
 80159aa:	4620      	mov	r0, r4
 80159ac:	4629      	mov	r1, r5
 80159ae:	f7eb f88b 	bl	8000ac8 <__aeabi_dcmpeq>
 80159b2:	b938      	cbnz	r0, 80159c4 <__cvt+0xac>
 80159b4:	2230      	movs	r2, #48	; 0x30
 80159b6:	9b03      	ldr	r3, [sp, #12]
 80159b8:	454b      	cmp	r3, r9
 80159ba:	d205      	bcs.n	80159c8 <__cvt+0xb0>
 80159bc:	1c59      	adds	r1, r3, #1
 80159be:	9103      	str	r1, [sp, #12]
 80159c0:	701a      	strb	r2, [r3, #0]
 80159c2:	e7f8      	b.n	80159b6 <__cvt+0x9e>
 80159c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80159c8:	9b03      	ldr	r3, [sp, #12]
 80159ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80159cc:	eba3 0308 	sub.w	r3, r3, r8
 80159d0:	4640      	mov	r0, r8
 80159d2:	6013      	str	r3, [r2, #0]
 80159d4:	b004      	add	sp, #16
 80159d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080159da <__exponent>:
 80159da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80159dc:	2900      	cmp	r1, #0
 80159de:	4604      	mov	r4, r0
 80159e0:	bfba      	itte	lt
 80159e2:	4249      	neglt	r1, r1
 80159e4:	232d      	movlt	r3, #45	; 0x2d
 80159e6:	232b      	movge	r3, #43	; 0x2b
 80159e8:	2909      	cmp	r1, #9
 80159ea:	f804 2b02 	strb.w	r2, [r4], #2
 80159ee:	7043      	strb	r3, [r0, #1]
 80159f0:	dd20      	ble.n	8015a34 <__exponent+0x5a>
 80159f2:	f10d 0307 	add.w	r3, sp, #7
 80159f6:	461f      	mov	r7, r3
 80159f8:	260a      	movs	r6, #10
 80159fa:	fb91 f5f6 	sdiv	r5, r1, r6
 80159fe:	fb06 1115 	mls	r1, r6, r5, r1
 8015a02:	3130      	adds	r1, #48	; 0x30
 8015a04:	2d09      	cmp	r5, #9
 8015a06:	f803 1c01 	strb.w	r1, [r3, #-1]
 8015a0a:	f103 32ff 	add.w	r2, r3, #4294967295
 8015a0e:	4629      	mov	r1, r5
 8015a10:	dc09      	bgt.n	8015a26 <__exponent+0x4c>
 8015a12:	3130      	adds	r1, #48	; 0x30
 8015a14:	3b02      	subs	r3, #2
 8015a16:	f802 1c01 	strb.w	r1, [r2, #-1]
 8015a1a:	42bb      	cmp	r3, r7
 8015a1c:	4622      	mov	r2, r4
 8015a1e:	d304      	bcc.n	8015a2a <__exponent+0x50>
 8015a20:	1a10      	subs	r0, r2, r0
 8015a22:	b003      	add	sp, #12
 8015a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a26:	4613      	mov	r3, r2
 8015a28:	e7e7      	b.n	80159fa <__exponent+0x20>
 8015a2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015a2e:	f804 2b01 	strb.w	r2, [r4], #1
 8015a32:	e7f2      	b.n	8015a1a <__exponent+0x40>
 8015a34:	2330      	movs	r3, #48	; 0x30
 8015a36:	4419      	add	r1, r3
 8015a38:	7083      	strb	r3, [r0, #2]
 8015a3a:	1d02      	adds	r2, r0, #4
 8015a3c:	70c1      	strb	r1, [r0, #3]
 8015a3e:	e7ef      	b.n	8015a20 <__exponent+0x46>

08015a40 <_printf_float>:
 8015a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a44:	b08d      	sub	sp, #52	; 0x34
 8015a46:	460c      	mov	r4, r1
 8015a48:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8015a4c:	4616      	mov	r6, r2
 8015a4e:	461f      	mov	r7, r3
 8015a50:	4605      	mov	r5, r0
 8015a52:	f002 fe39 	bl	80186c8 <_localeconv_r>
 8015a56:	6803      	ldr	r3, [r0, #0]
 8015a58:	9304      	str	r3, [sp, #16]
 8015a5a:	4618      	mov	r0, r3
 8015a5c:	f7ea fbb8 	bl	80001d0 <strlen>
 8015a60:	2300      	movs	r3, #0
 8015a62:	930a      	str	r3, [sp, #40]	; 0x28
 8015a64:	f8d8 3000 	ldr.w	r3, [r8]
 8015a68:	9005      	str	r0, [sp, #20]
 8015a6a:	3307      	adds	r3, #7
 8015a6c:	f023 0307 	bic.w	r3, r3, #7
 8015a70:	f103 0208 	add.w	r2, r3, #8
 8015a74:	f894 a018 	ldrb.w	sl, [r4, #24]
 8015a78:	f8d4 b000 	ldr.w	fp, [r4]
 8015a7c:	f8c8 2000 	str.w	r2, [r8]
 8015a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a84:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8015a88:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8015a8c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015a90:	9307      	str	r3, [sp, #28]
 8015a92:	f8cd 8018 	str.w	r8, [sp, #24]
 8015a96:	f04f 32ff 	mov.w	r2, #4294967295
 8015a9a:	4ba7      	ldr	r3, [pc, #668]	; (8015d38 <_printf_float+0x2f8>)
 8015a9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015aa0:	f7eb f844 	bl	8000b2c <__aeabi_dcmpun>
 8015aa4:	bb70      	cbnz	r0, 8015b04 <_printf_float+0xc4>
 8015aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8015aaa:	4ba3      	ldr	r3, [pc, #652]	; (8015d38 <_printf_float+0x2f8>)
 8015aac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015ab0:	f7eb f81e 	bl	8000af0 <__aeabi_dcmple>
 8015ab4:	bb30      	cbnz	r0, 8015b04 <_printf_float+0xc4>
 8015ab6:	2200      	movs	r2, #0
 8015ab8:	2300      	movs	r3, #0
 8015aba:	4640      	mov	r0, r8
 8015abc:	4649      	mov	r1, r9
 8015abe:	f7eb f80d 	bl	8000adc <__aeabi_dcmplt>
 8015ac2:	b110      	cbz	r0, 8015aca <_printf_float+0x8a>
 8015ac4:	232d      	movs	r3, #45	; 0x2d
 8015ac6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015aca:	4a9c      	ldr	r2, [pc, #624]	; (8015d3c <_printf_float+0x2fc>)
 8015acc:	4b9c      	ldr	r3, [pc, #624]	; (8015d40 <_printf_float+0x300>)
 8015ace:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015ad2:	bf8c      	ite	hi
 8015ad4:	4690      	movhi	r8, r2
 8015ad6:	4698      	movls	r8, r3
 8015ad8:	2303      	movs	r3, #3
 8015ada:	f02b 0204 	bic.w	r2, fp, #4
 8015ade:	6123      	str	r3, [r4, #16]
 8015ae0:	6022      	str	r2, [r4, #0]
 8015ae2:	f04f 0900 	mov.w	r9, #0
 8015ae6:	9700      	str	r7, [sp, #0]
 8015ae8:	4633      	mov	r3, r6
 8015aea:	aa0b      	add	r2, sp, #44	; 0x2c
 8015aec:	4621      	mov	r1, r4
 8015aee:	4628      	mov	r0, r5
 8015af0:	f000 f9e6 	bl	8015ec0 <_printf_common>
 8015af4:	3001      	adds	r0, #1
 8015af6:	f040 808d 	bne.w	8015c14 <_printf_float+0x1d4>
 8015afa:	f04f 30ff 	mov.w	r0, #4294967295
 8015afe:	b00d      	add	sp, #52	; 0x34
 8015b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b04:	4642      	mov	r2, r8
 8015b06:	464b      	mov	r3, r9
 8015b08:	4640      	mov	r0, r8
 8015b0a:	4649      	mov	r1, r9
 8015b0c:	f7eb f80e 	bl	8000b2c <__aeabi_dcmpun>
 8015b10:	b110      	cbz	r0, 8015b18 <_printf_float+0xd8>
 8015b12:	4a8c      	ldr	r2, [pc, #560]	; (8015d44 <_printf_float+0x304>)
 8015b14:	4b8c      	ldr	r3, [pc, #560]	; (8015d48 <_printf_float+0x308>)
 8015b16:	e7da      	b.n	8015ace <_printf_float+0x8e>
 8015b18:	6861      	ldr	r1, [r4, #4]
 8015b1a:	1c4b      	adds	r3, r1, #1
 8015b1c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8015b20:	a80a      	add	r0, sp, #40	; 0x28
 8015b22:	d13e      	bne.n	8015ba2 <_printf_float+0x162>
 8015b24:	2306      	movs	r3, #6
 8015b26:	6063      	str	r3, [r4, #4]
 8015b28:	2300      	movs	r3, #0
 8015b2a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015b2e:	ab09      	add	r3, sp, #36	; 0x24
 8015b30:	9300      	str	r3, [sp, #0]
 8015b32:	ec49 8b10 	vmov	d0, r8, r9
 8015b36:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015b3a:	6022      	str	r2, [r4, #0]
 8015b3c:	f8cd a004 	str.w	sl, [sp, #4]
 8015b40:	6861      	ldr	r1, [r4, #4]
 8015b42:	4628      	mov	r0, r5
 8015b44:	f7ff fee8 	bl	8015918 <__cvt>
 8015b48:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8015b4c:	2b47      	cmp	r3, #71	; 0x47
 8015b4e:	4680      	mov	r8, r0
 8015b50:	d109      	bne.n	8015b66 <_printf_float+0x126>
 8015b52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b54:	1cd8      	adds	r0, r3, #3
 8015b56:	db02      	blt.n	8015b5e <_printf_float+0x11e>
 8015b58:	6862      	ldr	r2, [r4, #4]
 8015b5a:	4293      	cmp	r3, r2
 8015b5c:	dd47      	ble.n	8015bee <_printf_float+0x1ae>
 8015b5e:	f1aa 0a02 	sub.w	sl, sl, #2
 8015b62:	fa5f fa8a 	uxtb.w	sl, sl
 8015b66:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015b6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015b6c:	d824      	bhi.n	8015bb8 <_printf_float+0x178>
 8015b6e:	3901      	subs	r1, #1
 8015b70:	4652      	mov	r2, sl
 8015b72:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015b76:	9109      	str	r1, [sp, #36]	; 0x24
 8015b78:	f7ff ff2f 	bl	80159da <__exponent>
 8015b7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015b7e:	1813      	adds	r3, r2, r0
 8015b80:	2a01      	cmp	r2, #1
 8015b82:	4681      	mov	r9, r0
 8015b84:	6123      	str	r3, [r4, #16]
 8015b86:	dc02      	bgt.n	8015b8e <_printf_float+0x14e>
 8015b88:	6822      	ldr	r2, [r4, #0]
 8015b8a:	07d1      	lsls	r1, r2, #31
 8015b8c:	d501      	bpl.n	8015b92 <_printf_float+0x152>
 8015b8e:	3301      	adds	r3, #1
 8015b90:	6123      	str	r3, [r4, #16]
 8015b92:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	d0a5      	beq.n	8015ae6 <_printf_float+0xa6>
 8015b9a:	232d      	movs	r3, #45	; 0x2d
 8015b9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015ba0:	e7a1      	b.n	8015ae6 <_printf_float+0xa6>
 8015ba2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8015ba6:	f000 8177 	beq.w	8015e98 <_printf_float+0x458>
 8015baa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015bae:	d1bb      	bne.n	8015b28 <_printf_float+0xe8>
 8015bb0:	2900      	cmp	r1, #0
 8015bb2:	d1b9      	bne.n	8015b28 <_printf_float+0xe8>
 8015bb4:	2301      	movs	r3, #1
 8015bb6:	e7b6      	b.n	8015b26 <_printf_float+0xe6>
 8015bb8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8015bbc:	d119      	bne.n	8015bf2 <_printf_float+0x1b2>
 8015bbe:	2900      	cmp	r1, #0
 8015bc0:	6863      	ldr	r3, [r4, #4]
 8015bc2:	dd0c      	ble.n	8015bde <_printf_float+0x19e>
 8015bc4:	6121      	str	r1, [r4, #16]
 8015bc6:	b913      	cbnz	r3, 8015bce <_printf_float+0x18e>
 8015bc8:	6822      	ldr	r2, [r4, #0]
 8015bca:	07d2      	lsls	r2, r2, #31
 8015bcc:	d502      	bpl.n	8015bd4 <_printf_float+0x194>
 8015bce:	3301      	adds	r3, #1
 8015bd0:	440b      	add	r3, r1
 8015bd2:	6123      	str	r3, [r4, #16]
 8015bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015bd6:	65a3      	str	r3, [r4, #88]	; 0x58
 8015bd8:	f04f 0900 	mov.w	r9, #0
 8015bdc:	e7d9      	b.n	8015b92 <_printf_float+0x152>
 8015bde:	b913      	cbnz	r3, 8015be6 <_printf_float+0x1a6>
 8015be0:	6822      	ldr	r2, [r4, #0]
 8015be2:	07d0      	lsls	r0, r2, #31
 8015be4:	d501      	bpl.n	8015bea <_printf_float+0x1aa>
 8015be6:	3302      	adds	r3, #2
 8015be8:	e7f3      	b.n	8015bd2 <_printf_float+0x192>
 8015bea:	2301      	movs	r3, #1
 8015bec:	e7f1      	b.n	8015bd2 <_printf_float+0x192>
 8015bee:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8015bf2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015bf6:	4293      	cmp	r3, r2
 8015bf8:	db05      	blt.n	8015c06 <_printf_float+0x1c6>
 8015bfa:	6822      	ldr	r2, [r4, #0]
 8015bfc:	6123      	str	r3, [r4, #16]
 8015bfe:	07d1      	lsls	r1, r2, #31
 8015c00:	d5e8      	bpl.n	8015bd4 <_printf_float+0x194>
 8015c02:	3301      	adds	r3, #1
 8015c04:	e7e5      	b.n	8015bd2 <_printf_float+0x192>
 8015c06:	2b00      	cmp	r3, #0
 8015c08:	bfd4      	ite	le
 8015c0a:	f1c3 0302 	rsble	r3, r3, #2
 8015c0e:	2301      	movgt	r3, #1
 8015c10:	4413      	add	r3, r2
 8015c12:	e7de      	b.n	8015bd2 <_printf_float+0x192>
 8015c14:	6823      	ldr	r3, [r4, #0]
 8015c16:	055a      	lsls	r2, r3, #21
 8015c18:	d407      	bmi.n	8015c2a <_printf_float+0x1ea>
 8015c1a:	6923      	ldr	r3, [r4, #16]
 8015c1c:	4642      	mov	r2, r8
 8015c1e:	4631      	mov	r1, r6
 8015c20:	4628      	mov	r0, r5
 8015c22:	47b8      	blx	r7
 8015c24:	3001      	adds	r0, #1
 8015c26:	d12b      	bne.n	8015c80 <_printf_float+0x240>
 8015c28:	e767      	b.n	8015afa <_printf_float+0xba>
 8015c2a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015c2e:	f240 80dc 	bls.w	8015dea <_printf_float+0x3aa>
 8015c32:	2200      	movs	r2, #0
 8015c34:	2300      	movs	r3, #0
 8015c36:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015c3a:	f7ea ff45 	bl	8000ac8 <__aeabi_dcmpeq>
 8015c3e:	2800      	cmp	r0, #0
 8015c40:	d033      	beq.n	8015caa <_printf_float+0x26a>
 8015c42:	2301      	movs	r3, #1
 8015c44:	4a41      	ldr	r2, [pc, #260]	; (8015d4c <_printf_float+0x30c>)
 8015c46:	4631      	mov	r1, r6
 8015c48:	4628      	mov	r0, r5
 8015c4a:	47b8      	blx	r7
 8015c4c:	3001      	adds	r0, #1
 8015c4e:	f43f af54 	beq.w	8015afa <_printf_float+0xba>
 8015c52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015c56:	429a      	cmp	r2, r3
 8015c58:	db02      	blt.n	8015c60 <_printf_float+0x220>
 8015c5a:	6823      	ldr	r3, [r4, #0]
 8015c5c:	07d8      	lsls	r0, r3, #31
 8015c5e:	d50f      	bpl.n	8015c80 <_printf_float+0x240>
 8015c60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015c64:	4631      	mov	r1, r6
 8015c66:	4628      	mov	r0, r5
 8015c68:	47b8      	blx	r7
 8015c6a:	3001      	adds	r0, #1
 8015c6c:	f43f af45 	beq.w	8015afa <_printf_float+0xba>
 8015c70:	f04f 0800 	mov.w	r8, #0
 8015c74:	f104 091a 	add.w	r9, r4, #26
 8015c78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c7a:	3b01      	subs	r3, #1
 8015c7c:	4543      	cmp	r3, r8
 8015c7e:	dc09      	bgt.n	8015c94 <_printf_float+0x254>
 8015c80:	6823      	ldr	r3, [r4, #0]
 8015c82:	079b      	lsls	r3, r3, #30
 8015c84:	f100 8103 	bmi.w	8015e8e <_printf_float+0x44e>
 8015c88:	68e0      	ldr	r0, [r4, #12]
 8015c8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015c8c:	4298      	cmp	r0, r3
 8015c8e:	bfb8      	it	lt
 8015c90:	4618      	movlt	r0, r3
 8015c92:	e734      	b.n	8015afe <_printf_float+0xbe>
 8015c94:	2301      	movs	r3, #1
 8015c96:	464a      	mov	r2, r9
 8015c98:	4631      	mov	r1, r6
 8015c9a:	4628      	mov	r0, r5
 8015c9c:	47b8      	blx	r7
 8015c9e:	3001      	adds	r0, #1
 8015ca0:	f43f af2b 	beq.w	8015afa <_printf_float+0xba>
 8015ca4:	f108 0801 	add.w	r8, r8, #1
 8015ca8:	e7e6      	b.n	8015c78 <_printf_float+0x238>
 8015caa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	dc2b      	bgt.n	8015d08 <_printf_float+0x2c8>
 8015cb0:	2301      	movs	r3, #1
 8015cb2:	4a26      	ldr	r2, [pc, #152]	; (8015d4c <_printf_float+0x30c>)
 8015cb4:	4631      	mov	r1, r6
 8015cb6:	4628      	mov	r0, r5
 8015cb8:	47b8      	blx	r7
 8015cba:	3001      	adds	r0, #1
 8015cbc:	f43f af1d 	beq.w	8015afa <_printf_float+0xba>
 8015cc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015cc2:	b923      	cbnz	r3, 8015cce <_printf_float+0x28e>
 8015cc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015cc6:	b913      	cbnz	r3, 8015cce <_printf_float+0x28e>
 8015cc8:	6823      	ldr	r3, [r4, #0]
 8015cca:	07d9      	lsls	r1, r3, #31
 8015ccc:	d5d8      	bpl.n	8015c80 <_printf_float+0x240>
 8015cce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015cd2:	4631      	mov	r1, r6
 8015cd4:	4628      	mov	r0, r5
 8015cd6:	47b8      	blx	r7
 8015cd8:	3001      	adds	r0, #1
 8015cda:	f43f af0e 	beq.w	8015afa <_printf_float+0xba>
 8015cde:	f04f 0900 	mov.w	r9, #0
 8015ce2:	f104 0a1a 	add.w	sl, r4, #26
 8015ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ce8:	425b      	negs	r3, r3
 8015cea:	454b      	cmp	r3, r9
 8015cec:	dc01      	bgt.n	8015cf2 <_printf_float+0x2b2>
 8015cee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015cf0:	e794      	b.n	8015c1c <_printf_float+0x1dc>
 8015cf2:	2301      	movs	r3, #1
 8015cf4:	4652      	mov	r2, sl
 8015cf6:	4631      	mov	r1, r6
 8015cf8:	4628      	mov	r0, r5
 8015cfa:	47b8      	blx	r7
 8015cfc:	3001      	adds	r0, #1
 8015cfe:	f43f aefc 	beq.w	8015afa <_printf_float+0xba>
 8015d02:	f109 0901 	add.w	r9, r9, #1
 8015d06:	e7ee      	b.n	8015ce6 <_printf_float+0x2a6>
 8015d08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015d0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015d0c:	429a      	cmp	r2, r3
 8015d0e:	bfa8      	it	ge
 8015d10:	461a      	movge	r2, r3
 8015d12:	2a00      	cmp	r2, #0
 8015d14:	4691      	mov	r9, r2
 8015d16:	dd07      	ble.n	8015d28 <_printf_float+0x2e8>
 8015d18:	4613      	mov	r3, r2
 8015d1a:	4631      	mov	r1, r6
 8015d1c:	4642      	mov	r2, r8
 8015d1e:	4628      	mov	r0, r5
 8015d20:	47b8      	blx	r7
 8015d22:	3001      	adds	r0, #1
 8015d24:	f43f aee9 	beq.w	8015afa <_printf_float+0xba>
 8015d28:	f104 031a 	add.w	r3, r4, #26
 8015d2c:	f04f 0b00 	mov.w	fp, #0
 8015d30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015d34:	9306      	str	r3, [sp, #24]
 8015d36:	e015      	b.n	8015d64 <_printf_float+0x324>
 8015d38:	7fefffff 	.word	0x7fefffff
 8015d3c:	0801b1e0 	.word	0x0801b1e0
 8015d40:	0801b1dc 	.word	0x0801b1dc
 8015d44:	0801b1e8 	.word	0x0801b1e8
 8015d48:	0801b1e4 	.word	0x0801b1e4
 8015d4c:	0801b1ec 	.word	0x0801b1ec
 8015d50:	2301      	movs	r3, #1
 8015d52:	9a06      	ldr	r2, [sp, #24]
 8015d54:	4631      	mov	r1, r6
 8015d56:	4628      	mov	r0, r5
 8015d58:	47b8      	blx	r7
 8015d5a:	3001      	adds	r0, #1
 8015d5c:	f43f aecd 	beq.w	8015afa <_printf_float+0xba>
 8015d60:	f10b 0b01 	add.w	fp, fp, #1
 8015d64:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8015d68:	ebaa 0309 	sub.w	r3, sl, r9
 8015d6c:	455b      	cmp	r3, fp
 8015d6e:	dcef      	bgt.n	8015d50 <_printf_float+0x310>
 8015d70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015d74:	429a      	cmp	r2, r3
 8015d76:	44d0      	add	r8, sl
 8015d78:	db15      	blt.n	8015da6 <_printf_float+0x366>
 8015d7a:	6823      	ldr	r3, [r4, #0]
 8015d7c:	07da      	lsls	r2, r3, #31
 8015d7e:	d412      	bmi.n	8015da6 <_printf_float+0x366>
 8015d80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015d82:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015d84:	eba3 020a 	sub.w	r2, r3, sl
 8015d88:	eba3 0a01 	sub.w	sl, r3, r1
 8015d8c:	4592      	cmp	sl, r2
 8015d8e:	bfa8      	it	ge
 8015d90:	4692      	movge	sl, r2
 8015d92:	f1ba 0f00 	cmp.w	sl, #0
 8015d96:	dc0e      	bgt.n	8015db6 <_printf_float+0x376>
 8015d98:	f04f 0800 	mov.w	r8, #0
 8015d9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015da0:	f104 091a 	add.w	r9, r4, #26
 8015da4:	e019      	b.n	8015dda <_printf_float+0x39a>
 8015da6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015daa:	4631      	mov	r1, r6
 8015dac:	4628      	mov	r0, r5
 8015dae:	47b8      	blx	r7
 8015db0:	3001      	adds	r0, #1
 8015db2:	d1e5      	bne.n	8015d80 <_printf_float+0x340>
 8015db4:	e6a1      	b.n	8015afa <_printf_float+0xba>
 8015db6:	4653      	mov	r3, sl
 8015db8:	4642      	mov	r2, r8
 8015dba:	4631      	mov	r1, r6
 8015dbc:	4628      	mov	r0, r5
 8015dbe:	47b8      	blx	r7
 8015dc0:	3001      	adds	r0, #1
 8015dc2:	d1e9      	bne.n	8015d98 <_printf_float+0x358>
 8015dc4:	e699      	b.n	8015afa <_printf_float+0xba>
 8015dc6:	2301      	movs	r3, #1
 8015dc8:	464a      	mov	r2, r9
 8015dca:	4631      	mov	r1, r6
 8015dcc:	4628      	mov	r0, r5
 8015dce:	47b8      	blx	r7
 8015dd0:	3001      	adds	r0, #1
 8015dd2:	f43f ae92 	beq.w	8015afa <_printf_float+0xba>
 8015dd6:	f108 0801 	add.w	r8, r8, #1
 8015dda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015dde:	1a9b      	subs	r3, r3, r2
 8015de0:	eba3 030a 	sub.w	r3, r3, sl
 8015de4:	4543      	cmp	r3, r8
 8015de6:	dcee      	bgt.n	8015dc6 <_printf_float+0x386>
 8015de8:	e74a      	b.n	8015c80 <_printf_float+0x240>
 8015dea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015dec:	2a01      	cmp	r2, #1
 8015dee:	dc01      	bgt.n	8015df4 <_printf_float+0x3b4>
 8015df0:	07db      	lsls	r3, r3, #31
 8015df2:	d53a      	bpl.n	8015e6a <_printf_float+0x42a>
 8015df4:	2301      	movs	r3, #1
 8015df6:	4642      	mov	r2, r8
 8015df8:	4631      	mov	r1, r6
 8015dfa:	4628      	mov	r0, r5
 8015dfc:	47b8      	blx	r7
 8015dfe:	3001      	adds	r0, #1
 8015e00:	f43f ae7b 	beq.w	8015afa <_printf_float+0xba>
 8015e04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015e08:	4631      	mov	r1, r6
 8015e0a:	4628      	mov	r0, r5
 8015e0c:	47b8      	blx	r7
 8015e0e:	3001      	adds	r0, #1
 8015e10:	f108 0801 	add.w	r8, r8, #1
 8015e14:	f43f ae71 	beq.w	8015afa <_printf_float+0xba>
 8015e18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e1a:	2200      	movs	r2, #0
 8015e1c:	f103 3aff 	add.w	sl, r3, #4294967295
 8015e20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015e24:	2300      	movs	r3, #0
 8015e26:	f7ea fe4f 	bl	8000ac8 <__aeabi_dcmpeq>
 8015e2a:	b9c8      	cbnz	r0, 8015e60 <_printf_float+0x420>
 8015e2c:	4653      	mov	r3, sl
 8015e2e:	4642      	mov	r2, r8
 8015e30:	4631      	mov	r1, r6
 8015e32:	4628      	mov	r0, r5
 8015e34:	47b8      	blx	r7
 8015e36:	3001      	adds	r0, #1
 8015e38:	d10e      	bne.n	8015e58 <_printf_float+0x418>
 8015e3a:	e65e      	b.n	8015afa <_printf_float+0xba>
 8015e3c:	2301      	movs	r3, #1
 8015e3e:	4652      	mov	r2, sl
 8015e40:	4631      	mov	r1, r6
 8015e42:	4628      	mov	r0, r5
 8015e44:	47b8      	blx	r7
 8015e46:	3001      	adds	r0, #1
 8015e48:	f43f ae57 	beq.w	8015afa <_printf_float+0xba>
 8015e4c:	f108 0801 	add.w	r8, r8, #1
 8015e50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e52:	3b01      	subs	r3, #1
 8015e54:	4543      	cmp	r3, r8
 8015e56:	dcf1      	bgt.n	8015e3c <_printf_float+0x3fc>
 8015e58:	464b      	mov	r3, r9
 8015e5a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015e5e:	e6de      	b.n	8015c1e <_printf_float+0x1de>
 8015e60:	f04f 0800 	mov.w	r8, #0
 8015e64:	f104 0a1a 	add.w	sl, r4, #26
 8015e68:	e7f2      	b.n	8015e50 <_printf_float+0x410>
 8015e6a:	2301      	movs	r3, #1
 8015e6c:	e7df      	b.n	8015e2e <_printf_float+0x3ee>
 8015e6e:	2301      	movs	r3, #1
 8015e70:	464a      	mov	r2, r9
 8015e72:	4631      	mov	r1, r6
 8015e74:	4628      	mov	r0, r5
 8015e76:	47b8      	blx	r7
 8015e78:	3001      	adds	r0, #1
 8015e7a:	f43f ae3e 	beq.w	8015afa <_printf_float+0xba>
 8015e7e:	f108 0801 	add.w	r8, r8, #1
 8015e82:	68e3      	ldr	r3, [r4, #12]
 8015e84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015e86:	1a9b      	subs	r3, r3, r2
 8015e88:	4543      	cmp	r3, r8
 8015e8a:	dcf0      	bgt.n	8015e6e <_printf_float+0x42e>
 8015e8c:	e6fc      	b.n	8015c88 <_printf_float+0x248>
 8015e8e:	f04f 0800 	mov.w	r8, #0
 8015e92:	f104 0919 	add.w	r9, r4, #25
 8015e96:	e7f4      	b.n	8015e82 <_printf_float+0x442>
 8015e98:	2900      	cmp	r1, #0
 8015e9a:	f43f ae8b 	beq.w	8015bb4 <_printf_float+0x174>
 8015e9e:	2300      	movs	r3, #0
 8015ea0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015ea4:	ab09      	add	r3, sp, #36	; 0x24
 8015ea6:	9300      	str	r3, [sp, #0]
 8015ea8:	ec49 8b10 	vmov	d0, r8, r9
 8015eac:	6022      	str	r2, [r4, #0]
 8015eae:	f8cd a004 	str.w	sl, [sp, #4]
 8015eb2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015eb6:	4628      	mov	r0, r5
 8015eb8:	f7ff fd2e 	bl	8015918 <__cvt>
 8015ebc:	4680      	mov	r8, r0
 8015ebe:	e648      	b.n	8015b52 <_printf_float+0x112>

08015ec0 <_printf_common>:
 8015ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ec4:	4691      	mov	r9, r2
 8015ec6:	461f      	mov	r7, r3
 8015ec8:	688a      	ldr	r2, [r1, #8]
 8015eca:	690b      	ldr	r3, [r1, #16]
 8015ecc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015ed0:	4293      	cmp	r3, r2
 8015ed2:	bfb8      	it	lt
 8015ed4:	4613      	movlt	r3, r2
 8015ed6:	f8c9 3000 	str.w	r3, [r9]
 8015eda:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015ede:	4606      	mov	r6, r0
 8015ee0:	460c      	mov	r4, r1
 8015ee2:	b112      	cbz	r2, 8015eea <_printf_common+0x2a>
 8015ee4:	3301      	adds	r3, #1
 8015ee6:	f8c9 3000 	str.w	r3, [r9]
 8015eea:	6823      	ldr	r3, [r4, #0]
 8015eec:	0699      	lsls	r1, r3, #26
 8015eee:	bf42      	ittt	mi
 8015ef0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8015ef4:	3302      	addmi	r3, #2
 8015ef6:	f8c9 3000 	strmi.w	r3, [r9]
 8015efa:	6825      	ldr	r5, [r4, #0]
 8015efc:	f015 0506 	ands.w	r5, r5, #6
 8015f00:	d107      	bne.n	8015f12 <_printf_common+0x52>
 8015f02:	f104 0a19 	add.w	sl, r4, #25
 8015f06:	68e3      	ldr	r3, [r4, #12]
 8015f08:	f8d9 2000 	ldr.w	r2, [r9]
 8015f0c:	1a9b      	subs	r3, r3, r2
 8015f0e:	42ab      	cmp	r3, r5
 8015f10:	dc28      	bgt.n	8015f64 <_printf_common+0xa4>
 8015f12:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8015f16:	6822      	ldr	r2, [r4, #0]
 8015f18:	3300      	adds	r3, #0
 8015f1a:	bf18      	it	ne
 8015f1c:	2301      	movne	r3, #1
 8015f1e:	0692      	lsls	r2, r2, #26
 8015f20:	d42d      	bmi.n	8015f7e <_printf_common+0xbe>
 8015f22:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015f26:	4639      	mov	r1, r7
 8015f28:	4630      	mov	r0, r6
 8015f2a:	47c0      	blx	r8
 8015f2c:	3001      	adds	r0, #1
 8015f2e:	d020      	beq.n	8015f72 <_printf_common+0xb2>
 8015f30:	6823      	ldr	r3, [r4, #0]
 8015f32:	68e5      	ldr	r5, [r4, #12]
 8015f34:	f8d9 2000 	ldr.w	r2, [r9]
 8015f38:	f003 0306 	and.w	r3, r3, #6
 8015f3c:	2b04      	cmp	r3, #4
 8015f3e:	bf08      	it	eq
 8015f40:	1aad      	subeq	r5, r5, r2
 8015f42:	68a3      	ldr	r3, [r4, #8]
 8015f44:	6922      	ldr	r2, [r4, #16]
 8015f46:	bf0c      	ite	eq
 8015f48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015f4c:	2500      	movne	r5, #0
 8015f4e:	4293      	cmp	r3, r2
 8015f50:	bfc4      	itt	gt
 8015f52:	1a9b      	subgt	r3, r3, r2
 8015f54:	18ed      	addgt	r5, r5, r3
 8015f56:	f04f 0900 	mov.w	r9, #0
 8015f5a:	341a      	adds	r4, #26
 8015f5c:	454d      	cmp	r5, r9
 8015f5e:	d11a      	bne.n	8015f96 <_printf_common+0xd6>
 8015f60:	2000      	movs	r0, #0
 8015f62:	e008      	b.n	8015f76 <_printf_common+0xb6>
 8015f64:	2301      	movs	r3, #1
 8015f66:	4652      	mov	r2, sl
 8015f68:	4639      	mov	r1, r7
 8015f6a:	4630      	mov	r0, r6
 8015f6c:	47c0      	blx	r8
 8015f6e:	3001      	adds	r0, #1
 8015f70:	d103      	bne.n	8015f7a <_printf_common+0xba>
 8015f72:	f04f 30ff 	mov.w	r0, #4294967295
 8015f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f7a:	3501      	adds	r5, #1
 8015f7c:	e7c3      	b.n	8015f06 <_printf_common+0x46>
 8015f7e:	18e1      	adds	r1, r4, r3
 8015f80:	1c5a      	adds	r2, r3, #1
 8015f82:	2030      	movs	r0, #48	; 0x30
 8015f84:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015f88:	4422      	add	r2, r4
 8015f8a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015f8e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015f92:	3302      	adds	r3, #2
 8015f94:	e7c5      	b.n	8015f22 <_printf_common+0x62>
 8015f96:	2301      	movs	r3, #1
 8015f98:	4622      	mov	r2, r4
 8015f9a:	4639      	mov	r1, r7
 8015f9c:	4630      	mov	r0, r6
 8015f9e:	47c0      	blx	r8
 8015fa0:	3001      	adds	r0, #1
 8015fa2:	d0e6      	beq.n	8015f72 <_printf_common+0xb2>
 8015fa4:	f109 0901 	add.w	r9, r9, #1
 8015fa8:	e7d8      	b.n	8015f5c <_printf_common+0x9c>
	...

08015fac <_printf_i>:
 8015fac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015fb0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8015fb4:	460c      	mov	r4, r1
 8015fb6:	7e09      	ldrb	r1, [r1, #24]
 8015fb8:	b085      	sub	sp, #20
 8015fba:	296e      	cmp	r1, #110	; 0x6e
 8015fbc:	4617      	mov	r7, r2
 8015fbe:	4606      	mov	r6, r0
 8015fc0:	4698      	mov	r8, r3
 8015fc2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015fc4:	f000 80b3 	beq.w	801612e <_printf_i+0x182>
 8015fc8:	d822      	bhi.n	8016010 <_printf_i+0x64>
 8015fca:	2963      	cmp	r1, #99	; 0x63
 8015fcc:	d036      	beq.n	801603c <_printf_i+0x90>
 8015fce:	d80a      	bhi.n	8015fe6 <_printf_i+0x3a>
 8015fd0:	2900      	cmp	r1, #0
 8015fd2:	f000 80b9 	beq.w	8016148 <_printf_i+0x19c>
 8015fd6:	2958      	cmp	r1, #88	; 0x58
 8015fd8:	f000 8083 	beq.w	80160e2 <_printf_i+0x136>
 8015fdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015fe0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8015fe4:	e032      	b.n	801604c <_printf_i+0xa0>
 8015fe6:	2964      	cmp	r1, #100	; 0x64
 8015fe8:	d001      	beq.n	8015fee <_printf_i+0x42>
 8015fea:	2969      	cmp	r1, #105	; 0x69
 8015fec:	d1f6      	bne.n	8015fdc <_printf_i+0x30>
 8015fee:	6820      	ldr	r0, [r4, #0]
 8015ff0:	6813      	ldr	r3, [r2, #0]
 8015ff2:	0605      	lsls	r5, r0, #24
 8015ff4:	f103 0104 	add.w	r1, r3, #4
 8015ff8:	d52a      	bpl.n	8016050 <_printf_i+0xa4>
 8015ffa:	681b      	ldr	r3, [r3, #0]
 8015ffc:	6011      	str	r1, [r2, #0]
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	da03      	bge.n	801600a <_printf_i+0x5e>
 8016002:	222d      	movs	r2, #45	; 0x2d
 8016004:	425b      	negs	r3, r3
 8016006:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801600a:	486f      	ldr	r0, [pc, #444]	; (80161c8 <_printf_i+0x21c>)
 801600c:	220a      	movs	r2, #10
 801600e:	e039      	b.n	8016084 <_printf_i+0xd8>
 8016010:	2973      	cmp	r1, #115	; 0x73
 8016012:	f000 809d 	beq.w	8016150 <_printf_i+0x1a4>
 8016016:	d808      	bhi.n	801602a <_printf_i+0x7e>
 8016018:	296f      	cmp	r1, #111	; 0x6f
 801601a:	d020      	beq.n	801605e <_printf_i+0xb2>
 801601c:	2970      	cmp	r1, #112	; 0x70
 801601e:	d1dd      	bne.n	8015fdc <_printf_i+0x30>
 8016020:	6823      	ldr	r3, [r4, #0]
 8016022:	f043 0320 	orr.w	r3, r3, #32
 8016026:	6023      	str	r3, [r4, #0]
 8016028:	e003      	b.n	8016032 <_printf_i+0x86>
 801602a:	2975      	cmp	r1, #117	; 0x75
 801602c:	d017      	beq.n	801605e <_printf_i+0xb2>
 801602e:	2978      	cmp	r1, #120	; 0x78
 8016030:	d1d4      	bne.n	8015fdc <_printf_i+0x30>
 8016032:	2378      	movs	r3, #120	; 0x78
 8016034:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016038:	4864      	ldr	r0, [pc, #400]	; (80161cc <_printf_i+0x220>)
 801603a:	e055      	b.n	80160e8 <_printf_i+0x13c>
 801603c:	6813      	ldr	r3, [r2, #0]
 801603e:	1d19      	adds	r1, r3, #4
 8016040:	681b      	ldr	r3, [r3, #0]
 8016042:	6011      	str	r1, [r2, #0]
 8016044:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016048:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801604c:	2301      	movs	r3, #1
 801604e:	e08c      	b.n	801616a <_printf_i+0x1be>
 8016050:	681b      	ldr	r3, [r3, #0]
 8016052:	6011      	str	r1, [r2, #0]
 8016054:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016058:	bf18      	it	ne
 801605a:	b21b      	sxthne	r3, r3
 801605c:	e7cf      	b.n	8015ffe <_printf_i+0x52>
 801605e:	6813      	ldr	r3, [r2, #0]
 8016060:	6825      	ldr	r5, [r4, #0]
 8016062:	1d18      	adds	r0, r3, #4
 8016064:	6010      	str	r0, [r2, #0]
 8016066:	0628      	lsls	r0, r5, #24
 8016068:	d501      	bpl.n	801606e <_printf_i+0xc2>
 801606a:	681b      	ldr	r3, [r3, #0]
 801606c:	e002      	b.n	8016074 <_printf_i+0xc8>
 801606e:	0668      	lsls	r0, r5, #25
 8016070:	d5fb      	bpl.n	801606a <_printf_i+0xbe>
 8016072:	881b      	ldrh	r3, [r3, #0]
 8016074:	4854      	ldr	r0, [pc, #336]	; (80161c8 <_printf_i+0x21c>)
 8016076:	296f      	cmp	r1, #111	; 0x6f
 8016078:	bf14      	ite	ne
 801607a:	220a      	movne	r2, #10
 801607c:	2208      	moveq	r2, #8
 801607e:	2100      	movs	r1, #0
 8016080:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016084:	6865      	ldr	r5, [r4, #4]
 8016086:	60a5      	str	r5, [r4, #8]
 8016088:	2d00      	cmp	r5, #0
 801608a:	f2c0 8095 	blt.w	80161b8 <_printf_i+0x20c>
 801608e:	6821      	ldr	r1, [r4, #0]
 8016090:	f021 0104 	bic.w	r1, r1, #4
 8016094:	6021      	str	r1, [r4, #0]
 8016096:	2b00      	cmp	r3, #0
 8016098:	d13d      	bne.n	8016116 <_printf_i+0x16a>
 801609a:	2d00      	cmp	r5, #0
 801609c:	f040 808e 	bne.w	80161bc <_printf_i+0x210>
 80160a0:	4665      	mov	r5, ip
 80160a2:	2a08      	cmp	r2, #8
 80160a4:	d10b      	bne.n	80160be <_printf_i+0x112>
 80160a6:	6823      	ldr	r3, [r4, #0]
 80160a8:	07db      	lsls	r3, r3, #31
 80160aa:	d508      	bpl.n	80160be <_printf_i+0x112>
 80160ac:	6923      	ldr	r3, [r4, #16]
 80160ae:	6862      	ldr	r2, [r4, #4]
 80160b0:	429a      	cmp	r2, r3
 80160b2:	bfde      	ittt	le
 80160b4:	2330      	movle	r3, #48	; 0x30
 80160b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80160ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 80160be:	ebac 0305 	sub.w	r3, ip, r5
 80160c2:	6123      	str	r3, [r4, #16]
 80160c4:	f8cd 8000 	str.w	r8, [sp]
 80160c8:	463b      	mov	r3, r7
 80160ca:	aa03      	add	r2, sp, #12
 80160cc:	4621      	mov	r1, r4
 80160ce:	4630      	mov	r0, r6
 80160d0:	f7ff fef6 	bl	8015ec0 <_printf_common>
 80160d4:	3001      	adds	r0, #1
 80160d6:	d14d      	bne.n	8016174 <_printf_i+0x1c8>
 80160d8:	f04f 30ff 	mov.w	r0, #4294967295
 80160dc:	b005      	add	sp, #20
 80160de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80160e2:	4839      	ldr	r0, [pc, #228]	; (80161c8 <_printf_i+0x21c>)
 80160e4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80160e8:	6813      	ldr	r3, [r2, #0]
 80160ea:	6821      	ldr	r1, [r4, #0]
 80160ec:	1d1d      	adds	r5, r3, #4
 80160ee:	681b      	ldr	r3, [r3, #0]
 80160f0:	6015      	str	r5, [r2, #0]
 80160f2:	060a      	lsls	r2, r1, #24
 80160f4:	d50b      	bpl.n	801610e <_printf_i+0x162>
 80160f6:	07ca      	lsls	r2, r1, #31
 80160f8:	bf44      	itt	mi
 80160fa:	f041 0120 	orrmi.w	r1, r1, #32
 80160fe:	6021      	strmi	r1, [r4, #0]
 8016100:	b91b      	cbnz	r3, 801610a <_printf_i+0x15e>
 8016102:	6822      	ldr	r2, [r4, #0]
 8016104:	f022 0220 	bic.w	r2, r2, #32
 8016108:	6022      	str	r2, [r4, #0]
 801610a:	2210      	movs	r2, #16
 801610c:	e7b7      	b.n	801607e <_printf_i+0xd2>
 801610e:	064d      	lsls	r5, r1, #25
 8016110:	bf48      	it	mi
 8016112:	b29b      	uxthmi	r3, r3
 8016114:	e7ef      	b.n	80160f6 <_printf_i+0x14a>
 8016116:	4665      	mov	r5, ip
 8016118:	fbb3 f1f2 	udiv	r1, r3, r2
 801611c:	fb02 3311 	mls	r3, r2, r1, r3
 8016120:	5cc3      	ldrb	r3, [r0, r3]
 8016122:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8016126:	460b      	mov	r3, r1
 8016128:	2900      	cmp	r1, #0
 801612a:	d1f5      	bne.n	8016118 <_printf_i+0x16c>
 801612c:	e7b9      	b.n	80160a2 <_printf_i+0xf6>
 801612e:	6813      	ldr	r3, [r2, #0]
 8016130:	6825      	ldr	r5, [r4, #0]
 8016132:	6961      	ldr	r1, [r4, #20]
 8016134:	1d18      	adds	r0, r3, #4
 8016136:	6010      	str	r0, [r2, #0]
 8016138:	0628      	lsls	r0, r5, #24
 801613a:	681b      	ldr	r3, [r3, #0]
 801613c:	d501      	bpl.n	8016142 <_printf_i+0x196>
 801613e:	6019      	str	r1, [r3, #0]
 8016140:	e002      	b.n	8016148 <_printf_i+0x19c>
 8016142:	066a      	lsls	r2, r5, #25
 8016144:	d5fb      	bpl.n	801613e <_printf_i+0x192>
 8016146:	8019      	strh	r1, [r3, #0]
 8016148:	2300      	movs	r3, #0
 801614a:	6123      	str	r3, [r4, #16]
 801614c:	4665      	mov	r5, ip
 801614e:	e7b9      	b.n	80160c4 <_printf_i+0x118>
 8016150:	6813      	ldr	r3, [r2, #0]
 8016152:	1d19      	adds	r1, r3, #4
 8016154:	6011      	str	r1, [r2, #0]
 8016156:	681d      	ldr	r5, [r3, #0]
 8016158:	6862      	ldr	r2, [r4, #4]
 801615a:	2100      	movs	r1, #0
 801615c:	4628      	mov	r0, r5
 801615e:	f7ea f83f 	bl	80001e0 <memchr>
 8016162:	b108      	cbz	r0, 8016168 <_printf_i+0x1bc>
 8016164:	1b40      	subs	r0, r0, r5
 8016166:	6060      	str	r0, [r4, #4]
 8016168:	6863      	ldr	r3, [r4, #4]
 801616a:	6123      	str	r3, [r4, #16]
 801616c:	2300      	movs	r3, #0
 801616e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016172:	e7a7      	b.n	80160c4 <_printf_i+0x118>
 8016174:	6923      	ldr	r3, [r4, #16]
 8016176:	462a      	mov	r2, r5
 8016178:	4639      	mov	r1, r7
 801617a:	4630      	mov	r0, r6
 801617c:	47c0      	blx	r8
 801617e:	3001      	adds	r0, #1
 8016180:	d0aa      	beq.n	80160d8 <_printf_i+0x12c>
 8016182:	6823      	ldr	r3, [r4, #0]
 8016184:	079b      	lsls	r3, r3, #30
 8016186:	d413      	bmi.n	80161b0 <_printf_i+0x204>
 8016188:	68e0      	ldr	r0, [r4, #12]
 801618a:	9b03      	ldr	r3, [sp, #12]
 801618c:	4298      	cmp	r0, r3
 801618e:	bfb8      	it	lt
 8016190:	4618      	movlt	r0, r3
 8016192:	e7a3      	b.n	80160dc <_printf_i+0x130>
 8016194:	2301      	movs	r3, #1
 8016196:	464a      	mov	r2, r9
 8016198:	4639      	mov	r1, r7
 801619a:	4630      	mov	r0, r6
 801619c:	47c0      	blx	r8
 801619e:	3001      	adds	r0, #1
 80161a0:	d09a      	beq.n	80160d8 <_printf_i+0x12c>
 80161a2:	3501      	adds	r5, #1
 80161a4:	68e3      	ldr	r3, [r4, #12]
 80161a6:	9a03      	ldr	r2, [sp, #12]
 80161a8:	1a9b      	subs	r3, r3, r2
 80161aa:	42ab      	cmp	r3, r5
 80161ac:	dcf2      	bgt.n	8016194 <_printf_i+0x1e8>
 80161ae:	e7eb      	b.n	8016188 <_printf_i+0x1dc>
 80161b0:	2500      	movs	r5, #0
 80161b2:	f104 0919 	add.w	r9, r4, #25
 80161b6:	e7f5      	b.n	80161a4 <_printf_i+0x1f8>
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	d1ac      	bne.n	8016116 <_printf_i+0x16a>
 80161bc:	7803      	ldrb	r3, [r0, #0]
 80161be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80161c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80161c6:	e76c      	b.n	80160a2 <_printf_i+0xf6>
 80161c8:	0801b1ee 	.word	0x0801b1ee
 80161cc:	0801b1ff 	.word	0x0801b1ff

080161d0 <_scanf_float>:
 80161d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161d4:	469a      	mov	sl, r3
 80161d6:	688b      	ldr	r3, [r1, #8]
 80161d8:	4616      	mov	r6, r2
 80161da:	1e5a      	subs	r2, r3, #1
 80161dc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80161e0:	b087      	sub	sp, #28
 80161e2:	bf83      	ittte	hi
 80161e4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80161e8:	189b      	addhi	r3, r3, r2
 80161ea:	9301      	strhi	r3, [sp, #4]
 80161ec:	2300      	movls	r3, #0
 80161ee:	bf86      	itte	hi
 80161f0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80161f4:	608b      	strhi	r3, [r1, #8]
 80161f6:	9301      	strls	r3, [sp, #4]
 80161f8:	680b      	ldr	r3, [r1, #0]
 80161fa:	4688      	mov	r8, r1
 80161fc:	f04f 0b00 	mov.w	fp, #0
 8016200:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8016204:	f848 3b1c 	str.w	r3, [r8], #28
 8016208:	e9cd bb03 	strd	fp, fp, [sp, #12]
 801620c:	4607      	mov	r7, r0
 801620e:	460c      	mov	r4, r1
 8016210:	4645      	mov	r5, r8
 8016212:	465a      	mov	r2, fp
 8016214:	46d9      	mov	r9, fp
 8016216:	f8cd b008 	str.w	fp, [sp, #8]
 801621a:	68a1      	ldr	r1, [r4, #8]
 801621c:	b181      	cbz	r1, 8016240 <_scanf_float+0x70>
 801621e:	6833      	ldr	r3, [r6, #0]
 8016220:	781b      	ldrb	r3, [r3, #0]
 8016222:	2b49      	cmp	r3, #73	; 0x49
 8016224:	d071      	beq.n	801630a <_scanf_float+0x13a>
 8016226:	d84d      	bhi.n	80162c4 <_scanf_float+0xf4>
 8016228:	2b39      	cmp	r3, #57	; 0x39
 801622a:	d840      	bhi.n	80162ae <_scanf_float+0xde>
 801622c:	2b31      	cmp	r3, #49	; 0x31
 801622e:	f080 8088 	bcs.w	8016342 <_scanf_float+0x172>
 8016232:	2b2d      	cmp	r3, #45	; 0x2d
 8016234:	f000 8090 	beq.w	8016358 <_scanf_float+0x188>
 8016238:	d815      	bhi.n	8016266 <_scanf_float+0x96>
 801623a:	2b2b      	cmp	r3, #43	; 0x2b
 801623c:	f000 808c 	beq.w	8016358 <_scanf_float+0x188>
 8016240:	f1b9 0f00 	cmp.w	r9, #0
 8016244:	d003      	beq.n	801624e <_scanf_float+0x7e>
 8016246:	6823      	ldr	r3, [r4, #0]
 8016248:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801624c:	6023      	str	r3, [r4, #0]
 801624e:	3a01      	subs	r2, #1
 8016250:	2a01      	cmp	r2, #1
 8016252:	f200 80ea 	bhi.w	801642a <_scanf_float+0x25a>
 8016256:	4545      	cmp	r5, r8
 8016258:	f200 80dc 	bhi.w	8016414 <_scanf_float+0x244>
 801625c:	2601      	movs	r6, #1
 801625e:	4630      	mov	r0, r6
 8016260:	b007      	add	sp, #28
 8016262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016266:	2b2e      	cmp	r3, #46	; 0x2e
 8016268:	f000 809f 	beq.w	80163aa <_scanf_float+0x1da>
 801626c:	2b30      	cmp	r3, #48	; 0x30
 801626e:	d1e7      	bne.n	8016240 <_scanf_float+0x70>
 8016270:	6820      	ldr	r0, [r4, #0]
 8016272:	f410 7f80 	tst.w	r0, #256	; 0x100
 8016276:	d064      	beq.n	8016342 <_scanf_float+0x172>
 8016278:	9b01      	ldr	r3, [sp, #4]
 801627a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 801627e:	6020      	str	r0, [r4, #0]
 8016280:	f109 0901 	add.w	r9, r9, #1
 8016284:	b11b      	cbz	r3, 801628e <_scanf_float+0xbe>
 8016286:	3b01      	subs	r3, #1
 8016288:	3101      	adds	r1, #1
 801628a:	9301      	str	r3, [sp, #4]
 801628c:	60a1      	str	r1, [r4, #8]
 801628e:	68a3      	ldr	r3, [r4, #8]
 8016290:	3b01      	subs	r3, #1
 8016292:	60a3      	str	r3, [r4, #8]
 8016294:	6923      	ldr	r3, [r4, #16]
 8016296:	3301      	adds	r3, #1
 8016298:	6123      	str	r3, [r4, #16]
 801629a:	6873      	ldr	r3, [r6, #4]
 801629c:	3b01      	subs	r3, #1
 801629e:	2b00      	cmp	r3, #0
 80162a0:	6073      	str	r3, [r6, #4]
 80162a2:	f340 80ac 	ble.w	80163fe <_scanf_float+0x22e>
 80162a6:	6833      	ldr	r3, [r6, #0]
 80162a8:	3301      	adds	r3, #1
 80162aa:	6033      	str	r3, [r6, #0]
 80162ac:	e7b5      	b.n	801621a <_scanf_float+0x4a>
 80162ae:	2b45      	cmp	r3, #69	; 0x45
 80162b0:	f000 8085 	beq.w	80163be <_scanf_float+0x1ee>
 80162b4:	2b46      	cmp	r3, #70	; 0x46
 80162b6:	d06a      	beq.n	801638e <_scanf_float+0x1be>
 80162b8:	2b41      	cmp	r3, #65	; 0x41
 80162ba:	d1c1      	bne.n	8016240 <_scanf_float+0x70>
 80162bc:	2a01      	cmp	r2, #1
 80162be:	d1bf      	bne.n	8016240 <_scanf_float+0x70>
 80162c0:	2202      	movs	r2, #2
 80162c2:	e046      	b.n	8016352 <_scanf_float+0x182>
 80162c4:	2b65      	cmp	r3, #101	; 0x65
 80162c6:	d07a      	beq.n	80163be <_scanf_float+0x1ee>
 80162c8:	d818      	bhi.n	80162fc <_scanf_float+0x12c>
 80162ca:	2b54      	cmp	r3, #84	; 0x54
 80162cc:	d066      	beq.n	801639c <_scanf_float+0x1cc>
 80162ce:	d811      	bhi.n	80162f4 <_scanf_float+0x124>
 80162d0:	2b4e      	cmp	r3, #78	; 0x4e
 80162d2:	d1b5      	bne.n	8016240 <_scanf_float+0x70>
 80162d4:	2a00      	cmp	r2, #0
 80162d6:	d146      	bne.n	8016366 <_scanf_float+0x196>
 80162d8:	f1b9 0f00 	cmp.w	r9, #0
 80162dc:	d145      	bne.n	801636a <_scanf_float+0x19a>
 80162de:	6821      	ldr	r1, [r4, #0]
 80162e0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80162e4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80162e8:	d13f      	bne.n	801636a <_scanf_float+0x19a>
 80162ea:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80162ee:	6021      	str	r1, [r4, #0]
 80162f0:	2201      	movs	r2, #1
 80162f2:	e02e      	b.n	8016352 <_scanf_float+0x182>
 80162f4:	2b59      	cmp	r3, #89	; 0x59
 80162f6:	d01e      	beq.n	8016336 <_scanf_float+0x166>
 80162f8:	2b61      	cmp	r3, #97	; 0x61
 80162fa:	e7de      	b.n	80162ba <_scanf_float+0xea>
 80162fc:	2b6e      	cmp	r3, #110	; 0x6e
 80162fe:	d0e9      	beq.n	80162d4 <_scanf_float+0x104>
 8016300:	d815      	bhi.n	801632e <_scanf_float+0x15e>
 8016302:	2b66      	cmp	r3, #102	; 0x66
 8016304:	d043      	beq.n	801638e <_scanf_float+0x1be>
 8016306:	2b69      	cmp	r3, #105	; 0x69
 8016308:	d19a      	bne.n	8016240 <_scanf_float+0x70>
 801630a:	f1bb 0f00 	cmp.w	fp, #0
 801630e:	d138      	bne.n	8016382 <_scanf_float+0x1b2>
 8016310:	f1b9 0f00 	cmp.w	r9, #0
 8016314:	d197      	bne.n	8016246 <_scanf_float+0x76>
 8016316:	6821      	ldr	r1, [r4, #0]
 8016318:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801631c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8016320:	d195      	bne.n	801624e <_scanf_float+0x7e>
 8016322:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016326:	6021      	str	r1, [r4, #0]
 8016328:	f04f 0b01 	mov.w	fp, #1
 801632c:	e011      	b.n	8016352 <_scanf_float+0x182>
 801632e:	2b74      	cmp	r3, #116	; 0x74
 8016330:	d034      	beq.n	801639c <_scanf_float+0x1cc>
 8016332:	2b79      	cmp	r3, #121	; 0x79
 8016334:	d184      	bne.n	8016240 <_scanf_float+0x70>
 8016336:	f1bb 0f07 	cmp.w	fp, #7
 801633a:	d181      	bne.n	8016240 <_scanf_float+0x70>
 801633c:	f04f 0b08 	mov.w	fp, #8
 8016340:	e007      	b.n	8016352 <_scanf_float+0x182>
 8016342:	eb12 0f0b 	cmn.w	r2, fp
 8016346:	f47f af7b 	bne.w	8016240 <_scanf_float+0x70>
 801634a:	6821      	ldr	r1, [r4, #0]
 801634c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8016350:	6021      	str	r1, [r4, #0]
 8016352:	702b      	strb	r3, [r5, #0]
 8016354:	3501      	adds	r5, #1
 8016356:	e79a      	b.n	801628e <_scanf_float+0xbe>
 8016358:	6821      	ldr	r1, [r4, #0]
 801635a:	0608      	lsls	r0, r1, #24
 801635c:	f57f af70 	bpl.w	8016240 <_scanf_float+0x70>
 8016360:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8016364:	e7f4      	b.n	8016350 <_scanf_float+0x180>
 8016366:	2a02      	cmp	r2, #2
 8016368:	d047      	beq.n	80163fa <_scanf_float+0x22a>
 801636a:	f1bb 0f01 	cmp.w	fp, #1
 801636e:	d003      	beq.n	8016378 <_scanf_float+0x1a8>
 8016370:	f1bb 0f04 	cmp.w	fp, #4
 8016374:	f47f af64 	bne.w	8016240 <_scanf_float+0x70>
 8016378:	f10b 0b01 	add.w	fp, fp, #1
 801637c:	fa5f fb8b 	uxtb.w	fp, fp
 8016380:	e7e7      	b.n	8016352 <_scanf_float+0x182>
 8016382:	f1bb 0f03 	cmp.w	fp, #3
 8016386:	d0f7      	beq.n	8016378 <_scanf_float+0x1a8>
 8016388:	f1bb 0f05 	cmp.w	fp, #5
 801638c:	e7f2      	b.n	8016374 <_scanf_float+0x1a4>
 801638e:	f1bb 0f02 	cmp.w	fp, #2
 8016392:	f47f af55 	bne.w	8016240 <_scanf_float+0x70>
 8016396:	f04f 0b03 	mov.w	fp, #3
 801639a:	e7da      	b.n	8016352 <_scanf_float+0x182>
 801639c:	f1bb 0f06 	cmp.w	fp, #6
 80163a0:	f47f af4e 	bne.w	8016240 <_scanf_float+0x70>
 80163a4:	f04f 0b07 	mov.w	fp, #7
 80163a8:	e7d3      	b.n	8016352 <_scanf_float+0x182>
 80163aa:	6821      	ldr	r1, [r4, #0]
 80163ac:	0588      	lsls	r0, r1, #22
 80163ae:	f57f af47 	bpl.w	8016240 <_scanf_float+0x70>
 80163b2:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80163b6:	6021      	str	r1, [r4, #0]
 80163b8:	f8cd 9008 	str.w	r9, [sp, #8]
 80163bc:	e7c9      	b.n	8016352 <_scanf_float+0x182>
 80163be:	6821      	ldr	r1, [r4, #0]
 80163c0:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80163c4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80163c8:	d006      	beq.n	80163d8 <_scanf_float+0x208>
 80163ca:	0548      	lsls	r0, r1, #21
 80163cc:	f57f af38 	bpl.w	8016240 <_scanf_float+0x70>
 80163d0:	f1b9 0f00 	cmp.w	r9, #0
 80163d4:	f43f af3b 	beq.w	801624e <_scanf_float+0x7e>
 80163d8:	0588      	lsls	r0, r1, #22
 80163da:	bf58      	it	pl
 80163dc:	9802      	ldrpl	r0, [sp, #8]
 80163de:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80163e2:	bf58      	it	pl
 80163e4:	eba9 0000 	subpl.w	r0, r9, r0
 80163e8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80163ec:	bf58      	it	pl
 80163ee:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80163f2:	6021      	str	r1, [r4, #0]
 80163f4:	f04f 0900 	mov.w	r9, #0
 80163f8:	e7ab      	b.n	8016352 <_scanf_float+0x182>
 80163fa:	2203      	movs	r2, #3
 80163fc:	e7a9      	b.n	8016352 <_scanf_float+0x182>
 80163fe:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016402:	9205      	str	r2, [sp, #20]
 8016404:	4631      	mov	r1, r6
 8016406:	4638      	mov	r0, r7
 8016408:	4798      	blx	r3
 801640a:	9a05      	ldr	r2, [sp, #20]
 801640c:	2800      	cmp	r0, #0
 801640e:	f43f af04 	beq.w	801621a <_scanf_float+0x4a>
 8016412:	e715      	b.n	8016240 <_scanf_float+0x70>
 8016414:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016418:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801641c:	4632      	mov	r2, r6
 801641e:	4638      	mov	r0, r7
 8016420:	4798      	blx	r3
 8016422:	6923      	ldr	r3, [r4, #16]
 8016424:	3b01      	subs	r3, #1
 8016426:	6123      	str	r3, [r4, #16]
 8016428:	e715      	b.n	8016256 <_scanf_float+0x86>
 801642a:	f10b 33ff 	add.w	r3, fp, #4294967295
 801642e:	2b06      	cmp	r3, #6
 8016430:	d80a      	bhi.n	8016448 <_scanf_float+0x278>
 8016432:	f1bb 0f02 	cmp.w	fp, #2
 8016436:	d968      	bls.n	801650a <_scanf_float+0x33a>
 8016438:	f1ab 0b03 	sub.w	fp, fp, #3
 801643c:	fa5f fb8b 	uxtb.w	fp, fp
 8016440:	eba5 0b0b 	sub.w	fp, r5, fp
 8016444:	455d      	cmp	r5, fp
 8016446:	d14b      	bne.n	80164e0 <_scanf_float+0x310>
 8016448:	6823      	ldr	r3, [r4, #0]
 801644a:	05da      	lsls	r2, r3, #23
 801644c:	d51f      	bpl.n	801648e <_scanf_float+0x2be>
 801644e:	055b      	lsls	r3, r3, #21
 8016450:	d468      	bmi.n	8016524 <_scanf_float+0x354>
 8016452:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016456:	6923      	ldr	r3, [r4, #16]
 8016458:	2965      	cmp	r1, #101	; 0x65
 801645a:	f103 33ff 	add.w	r3, r3, #4294967295
 801645e:	f105 3bff 	add.w	fp, r5, #4294967295
 8016462:	6123      	str	r3, [r4, #16]
 8016464:	d00d      	beq.n	8016482 <_scanf_float+0x2b2>
 8016466:	2945      	cmp	r1, #69	; 0x45
 8016468:	d00b      	beq.n	8016482 <_scanf_float+0x2b2>
 801646a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801646e:	4632      	mov	r2, r6
 8016470:	4638      	mov	r0, r7
 8016472:	4798      	blx	r3
 8016474:	6923      	ldr	r3, [r4, #16]
 8016476:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 801647a:	3b01      	subs	r3, #1
 801647c:	f1a5 0b02 	sub.w	fp, r5, #2
 8016480:	6123      	str	r3, [r4, #16]
 8016482:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016486:	4632      	mov	r2, r6
 8016488:	4638      	mov	r0, r7
 801648a:	4798      	blx	r3
 801648c:	465d      	mov	r5, fp
 801648e:	6826      	ldr	r6, [r4, #0]
 8016490:	f016 0610 	ands.w	r6, r6, #16
 8016494:	d17a      	bne.n	801658c <_scanf_float+0x3bc>
 8016496:	702e      	strb	r6, [r5, #0]
 8016498:	6823      	ldr	r3, [r4, #0]
 801649a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801649e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80164a2:	d142      	bne.n	801652a <_scanf_float+0x35a>
 80164a4:	9b02      	ldr	r3, [sp, #8]
 80164a6:	eba9 0303 	sub.w	r3, r9, r3
 80164aa:	425a      	negs	r2, r3
 80164ac:	2b00      	cmp	r3, #0
 80164ae:	d149      	bne.n	8016544 <_scanf_float+0x374>
 80164b0:	2200      	movs	r2, #0
 80164b2:	4641      	mov	r1, r8
 80164b4:	4638      	mov	r0, r7
 80164b6:	f000 fef7 	bl	80172a8 <_strtod_r>
 80164ba:	6825      	ldr	r5, [r4, #0]
 80164bc:	f8da 3000 	ldr.w	r3, [sl]
 80164c0:	f015 0f02 	tst.w	r5, #2
 80164c4:	f103 0204 	add.w	r2, r3, #4
 80164c8:	ec59 8b10 	vmov	r8, r9, d0
 80164cc:	f8ca 2000 	str.w	r2, [sl]
 80164d0:	d043      	beq.n	801655a <_scanf_float+0x38a>
 80164d2:	681b      	ldr	r3, [r3, #0]
 80164d4:	e9c3 8900 	strd	r8, r9, [r3]
 80164d8:	68e3      	ldr	r3, [r4, #12]
 80164da:	3301      	adds	r3, #1
 80164dc:	60e3      	str	r3, [r4, #12]
 80164de:	e6be      	b.n	801625e <_scanf_float+0x8e>
 80164e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80164e4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80164e8:	4632      	mov	r2, r6
 80164ea:	4638      	mov	r0, r7
 80164ec:	4798      	blx	r3
 80164ee:	6923      	ldr	r3, [r4, #16]
 80164f0:	3b01      	subs	r3, #1
 80164f2:	6123      	str	r3, [r4, #16]
 80164f4:	e7a6      	b.n	8016444 <_scanf_float+0x274>
 80164f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80164fa:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80164fe:	4632      	mov	r2, r6
 8016500:	4638      	mov	r0, r7
 8016502:	4798      	blx	r3
 8016504:	6923      	ldr	r3, [r4, #16]
 8016506:	3b01      	subs	r3, #1
 8016508:	6123      	str	r3, [r4, #16]
 801650a:	4545      	cmp	r5, r8
 801650c:	d8f3      	bhi.n	80164f6 <_scanf_float+0x326>
 801650e:	e6a5      	b.n	801625c <_scanf_float+0x8c>
 8016510:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016514:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016518:	4632      	mov	r2, r6
 801651a:	4638      	mov	r0, r7
 801651c:	4798      	blx	r3
 801651e:	6923      	ldr	r3, [r4, #16]
 8016520:	3b01      	subs	r3, #1
 8016522:	6123      	str	r3, [r4, #16]
 8016524:	4545      	cmp	r5, r8
 8016526:	d8f3      	bhi.n	8016510 <_scanf_float+0x340>
 8016528:	e698      	b.n	801625c <_scanf_float+0x8c>
 801652a:	9b03      	ldr	r3, [sp, #12]
 801652c:	2b00      	cmp	r3, #0
 801652e:	d0bf      	beq.n	80164b0 <_scanf_float+0x2e0>
 8016530:	9904      	ldr	r1, [sp, #16]
 8016532:	230a      	movs	r3, #10
 8016534:	4632      	mov	r2, r6
 8016536:	3101      	adds	r1, #1
 8016538:	4638      	mov	r0, r7
 801653a:	f000 ff41 	bl	80173c0 <_strtol_r>
 801653e:	9b03      	ldr	r3, [sp, #12]
 8016540:	9d04      	ldr	r5, [sp, #16]
 8016542:	1ac2      	subs	r2, r0, r3
 8016544:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016548:	429d      	cmp	r5, r3
 801654a:	bf28      	it	cs
 801654c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8016550:	490f      	ldr	r1, [pc, #60]	; (8016590 <_scanf_float+0x3c0>)
 8016552:	4628      	mov	r0, r5
 8016554:	f000 f868 	bl	8016628 <siprintf>
 8016558:	e7aa      	b.n	80164b0 <_scanf_float+0x2e0>
 801655a:	f015 0504 	ands.w	r5, r5, #4
 801655e:	d1b8      	bne.n	80164d2 <_scanf_float+0x302>
 8016560:	681f      	ldr	r7, [r3, #0]
 8016562:	ee10 2a10 	vmov	r2, s0
 8016566:	464b      	mov	r3, r9
 8016568:	ee10 0a10 	vmov	r0, s0
 801656c:	4649      	mov	r1, r9
 801656e:	f7ea fadd 	bl	8000b2c <__aeabi_dcmpun>
 8016572:	b128      	cbz	r0, 8016580 <_scanf_float+0x3b0>
 8016574:	4628      	mov	r0, r5
 8016576:	f000 f81d 	bl	80165b4 <nanf>
 801657a:	ed87 0a00 	vstr	s0, [r7]
 801657e:	e7ab      	b.n	80164d8 <_scanf_float+0x308>
 8016580:	4640      	mov	r0, r8
 8016582:	4649      	mov	r1, r9
 8016584:	f7ea fb30 	bl	8000be8 <__aeabi_d2f>
 8016588:	6038      	str	r0, [r7, #0]
 801658a:	e7a5      	b.n	80164d8 <_scanf_float+0x308>
 801658c:	2600      	movs	r6, #0
 801658e:	e666      	b.n	801625e <_scanf_float+0x8e>
 8016590:	0801b210 	.word	0x0801b210

08016594 <_sbrk_r>:
 8016594:	b538      	push	{r3, r4, r5, lr}
 8016596:	4c06      	ldr	r4, [pc, #24]	; (80165b0 <_sbrk_r+0x1c>)
 8016598:	2300      	movs	r3, #0
 801659a:	4605      	mov	r5, r0
 801659c:	4608      	mov	r0, r1
 801659e:	6023      	str	r3, [r4, #0]
 80165a0:	f7f4 fa8e 	bl	800aac0 <_sbrk>
 80165a4:	1c43      	adds	r3, r0, #1
 80165a6:	d102      	bne.n	80165ae <_sbrk_r+0x1a>
 80165a8:	6823      	ldr	r3, [r4, #0]
 80165aa:	b103      	cbz	r3, 80165ae <_sbrk_r+0x1a>
 80165ac:	602b      	str	r3, [r5, #0]
 80165ae:	bd38      	pop	{r3, r4, r5, pc}
 80165b0:	20006e30 	.word	0x20006e30

080165b4 <nanf>:
 80165b4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80165bc <nanf+0x8>
 80165b8:	4770      	bx	lr
 80165ba:	bf00      	nop
 80165bc:	7fc00000 	.word	0x7fc00000

080165c0 <sniprintf>:
 80165c0:	b40c      	push	{r2, r3}
 80165c2:	b530      	push	{r4, r5, lr}
 80165c4:	4b17      	ldr	r3, [pc, #92]	; (8016624 <sniprintf+0x64>)
 80165c6:	1e0c      	subs	r4, r1, #0
 80165c8:	b09d      	sub	sp, #116	; 0x74
 80165ca:	681d      	ldr	r5, [r3, #0]
 80165cc:	da08      	bge.n	80165e0 <sniprintf+0x20>
 80165ce:	238b      	movs	r3, #139	; 0x8b
 80165d0:	602b      	str	r3, [r5, #0]
 80165d2:	f04f 30ff 	mov.w	r0, #4294967295
 80165d6:	b01d      	add	sp, #116	; 0x74
 80165d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80165dc:	b002      	add	sp, #8
 80165de:	4770      	bx	lr
 80165e0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80165e4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80165e8:	bf14      	ite	ne
 80165ea:	f104 33ff 	addne.w	r3, r4, #4294967295
 80165ee:	4623      	moveq	r3, r4
 80165f0:	9304      	str	r3, [sp, #16]
 80165f2:	9307      	str	r3, [sp, #28]
 80165f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80165f8:	9002      	str	r0, [sp, #8]
 80165fa:	9006      	str	r0, [sp, #24]
 80165fc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016600:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016602:	ab21      	add	r3, sp, #132	; 0x84
 8016604:	a902      	add	r1, sp, #8
 8016606:	4628      	mov	r0, r5
 8016608:	9301      	str	r3, [sp, #4]
 801660a:	f002 fce7 	bl	8018fdc <_svfiprintf_r>
 801660e:	1c43      	adds	r3, r0, #1
 8016610:	bfbc      	itt	lt
 8016612:	238b      	movlt	r3, #139	; 0x8b
 8016614:	602b      	strlt	r3, [r5, #0]
 8016616:	2c00      	cmp	r4, #0
 8016618:	d0dd      	beq.n	80165d6 <sniprintf+0x16>
 801661a:	9b02      	ldr	r3, [sp, #8]
 801661c:	2200      	movs	r2, #0
 801661e:	701a      	strb	r2, [r3, #0]
 8016620:	e7d9      	b.n	80165d6 <sniprintf+0x16>
 8016622:	bf00      	nop
 8016624:	20000e0c 	.word	0x20000e0c

08016628 <siprintf>:
 8016628:	b40e      	push	{r1, r2, r3}
 801662a:	b500      	push	{lr}
 801662c:	b09c      	sub	sp, #112	; 0x70
 801662e:	ab1d      	add	r3, sp, #116	; 0x74
 8016630:	9002      	str	r0, [sp, #8]
 8016632:	9006      	str	r0, [sp, #24]
 8016634:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016638:	4809      	ldr	r0, [pc, #36]	; (8016660 <siprintf+0x38>)
 801663a:	9107      	str	r1, [sp, #28]
 801663c:	9104      	str	r1, [sp, #16]
 801663e:	4909      	ldr	r1, [pc, #36]	; (8016664 <siprintf+0x3c>)
 8016640:	f853 2b04 	ldr.w	r2, [r3], #4
 8016644:	9105      	str	r1, [sp, #20]
 8016646:	6800      	ldr	r0, [r0, #0]
 8016648:	9301      	str	r3, [sp, #4]
 801664a:	a902      	add	r1, sp, #8
 801664c:	f002 fcc6 	bl	8018fdc <_svfiprintf_r>
 8016650:	9b02      	ldr	r3, [sp, #8]
 8016652:	2200      	movs	r2, #0
 8016654:	701a      	strb	r2, [r3, #0]
 8016656:	b01c      	add	sp, #112	; 0x70
 8016658:	f85d eb04 	ldr.w	lr, [sp], #4
 801665c:	b003      	add	sp, #12
 801665e:	4770      	bx	lr
 8016660:	20000e0c 	.word	0x20000e0c
 8016664:	ffff0208 	.word	0xffff0208

08016668 <strcat>:
 8016668:	b510      	push	{r4, lr}
 801666a:	4603      	mov	r3, r0
 801666c:	781a      	ldrb	r2, [r3, #0]
 801666e:	1c5c      	adds	r4, r3, #1
 8016670:	b93a      	cbnz	r2, 8016682 <strcat+0x1a>
 8016672:	3b01      	subs	r3, #1
 8016674:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016678:	f803 2f01 	strb.w	r2, [r3, #1]!
 801667c:	2a00      	cmp	r2, #0
 801667e:	d1f9      	bne.n	8016674 <strcat+0xc>
 8016680:	bd10      	pop	{r4, pc}
 8016682:	4623      	mov	r3, r4
 8016684:	e7f2      	b.n	801666c <strcat+0x4>

08016686 <sulp>:
 8016686:	b570      	push	{r4, r5, r6, lr}
 8016688:	4604      	mov	r4, r0
 801668a:	460d      	mov	r5, r1
 801668c:	ec45 4b10 	vmov	d0, r4, r5
 8016690:	4616      	mov	r6, r2
 8016692:	f002 fb07 	bl	8018ca4 <__ulp>
 8016696:	ec51 0b10 	vmov	r0, r1, d0
 801669a:	b17e      	cbz	r6, 80166bc <sulp+0x36>
 801669c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80166a0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80166a4:	2b00      	cmp	r3, #0
 80166a6:	dd09      	ble.n	80166bc <sulp+0x36>
 80166a8:	051b      	lsls	r3, r3, #20
 80166aa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80166ae:	2400      	movs	r4, #0
 80166b0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80166b4:	4622      	mov	r2, r4
 80166b6:	462b      	mov	r3, r5
 80166b8:	f7e9 ff9e 	bl	80005f8 <__aeabi_dmul>
 80166bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080166c0 <_strtod_l>:
 80166c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166c4:	461f      	mov	r7, r3
 80166c6:	b0a1      	sub	sp, #132	; 0x84
 80166c8:	2300      	movs	r3, #0
 80166ca:	4681      	mov	r9, r0
 80166cc:	4638      	mov	r0, r7
 80166ce:	460e      	mov	r6, r1
 80166d0:	9217      	str	r2, [sp, #92]	; 0x5c
 80166d2:	931c      	str	r3, [sp, #112]	; 0x70
 80166d4:	f001 fff5 	bl	80186c2 <__localeconv_l>
 80166d8:	4680      	mov	r8, r0
 80166da:	6800      	ldr	r0, [r0, #0]
 80166dc:	f7e9 fd78 	bl	80001d0 <strlen>
 80166e0:	f04f 0a00 	mov.w	sl, #0
 80166e4:	4604      	mov	r4, r0
 80166e6:	f04f 0b00 	mov.w	fp, #0
 80166ea:	961b      	str	r6, [sp, #108]	; 0x6c
 80166ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80166ee:	781a      	ldrb	r2, [r3, #0]
 80166f0:	2a0d      	cmp	r2, #13
 80166f2:	d832      	bhi.n	801675a <_strtod_l+0x9a>
 80166f4:	2a09      	cmp	r2, #9
 80166f6:	d236      	bcs.n	8016766 <_strtod_l+0xa6>
 80166f8:	2a00      	cmp	r2, #0
 80166fa:	d03e      	beq.n	801677a <_strtod_l+0xba>
 80166fc:	2300      	movs	r3, #0
 80166fe:	930d      	str	r3, [sp, #52]	; 0x34
 8016700:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8016702:	782b      	ldrb	r3, [r5, #0]
 8016704:	2b30      	cmp	r3, #48	; 0x30
 8016706:	f040 80ac 	bne.w	8016862 <_strtod_l+0x1a2>
 801670a:	786b      	ldrb	r3, [r5, #1]
 801670c:	2b58      	cmp	r3, #88	; 0x58
 801670e:	d001      	beq.n	8016714 <_strtod_l+0x54>
 8016710:	2b78      	cmp	r3, #120	; 0x78
 8016712:	d167      	bne.n	80167e4 <_strtod_l+0x124>
 8016714:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016716:	9301      	str	r3, [sp, #4]
 8016718:	ab1c      	add	r3, sp, #112	; 0x70
 801671a:	9300      	str	r3, [sp, #0]
 801671c:	9702      	str	r7, [sp, #8]
 801671e:	ab1d      	add	r3, sp, #116	; 0x74
 8016720:	4a88      	ldr	r2, [pc, #544]	; (8016944 <_strtod_l+0x284>)
 8016722:	a91b      	add	r1, sp, #108	; 0x6c
 8016724:	4648      	mov	r0, r9
 8016726:	f001 fcf2 	bl	801810e <__gethex>
 801672a:	f010 0407 	ands.w	r4, r0, #7
 801672e:	4606      	mov	r6, r0
 8016730:	d005      	beq.n	801673e <_strtod_l+0x7e>
 8016732:	2c06      	cmp	r4, #6
 8016734:	d12b      	bne.n	801678e <_strtod_l+0xce>
 8016736:	3501      	adds	r5, #1
 8016738:	2300      	movs	r3, #0
 801673a:	951b      	str	r5, [sp, #108]	; 0x6c
 801673c:	930d      	str	r3, [sp, #52]	; 0x34
 801673e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016740:	2b00      	cmp	r3, #0
 8016742:	f040 859a 	bne.w	801727a <_strtod_l+0xbba>
 8016746:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016748:	b1e3      	cbz	r3, 8016784 <_strtod_l+0xc4>
 801674a:	4652      	mov	r2, sl
 801674c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016750:	ec43 2b10 	vmov	d0, r2, r3
 8016754:	b021      	add	sp, #132	; 0x84
 8016756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801675a:	2a2b      	cmp	r2, #43	; 0x2b
 801675c:	d015      	beq.n	801678a <_strtod_l+0xca>
 801675e:	2a2d      	cmp	r2, #45	; 0x2d
 8016760:	d004      	beq.n	801676c <_strtod_l+0xac>
 8016762:	2a20      	cmp	r2, #32
 8016764:	d1ca      	bne.n	80166fc <_strtod_l+0x3c>
 8016766:	3301      	adds	r3, #1
 8016768:	931b      	str	r3, [sp, #108]	; 0x6c
 801676a:	e7bf      	b.n	80166ec <_strtod_l+0x2c>
 801676c:	2201      	movs	r2, #1
 801676e:	920d      	str	r2, [sp, #52]	; 0x34
 8016770:	1c5a      	adds	r2, r3, #1
 8016772:	921b      	str	r2, [sp, #108]	; 0x6c
 8016774:	785b      	ldrb	r3, [r3, #1]
 8016776:	2b00      	cmp	r3, #0
 8016778:	d1c2      	bne.n	8016700 <_strtod_l+0x40>
 801677a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801677c:	961b      	str	r6, [sp, #108]	; 0x6c
 801677e:	2b00      	cmp	r3, #0
 8016780:	f040 8579 	bne.w	8017276 <_strtod_l+0xbb6>
 8016784:	4652      	mov	r2, sl
 8016786:	465b      	mov	r3, fp
 8016788:	e7e2      	b.n	8016750 <_strtod_l+0x90>
 801678a:	2200      	movs	r2, #0
 801678c:	e7ef      	b.n	801676e <_strtod_l+0xae>
 801678e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016790:	b13a      	cbz	r2, 80167a2 <_strtod_l+0xe2>
 8016792:	2135      	movs	r1, #53	; 0x35
 8016794:	a81e      	add	r0, sp, #120	; 0x78
 8016796:	f002 fb7d 	bl	8018e94 <__copybits>
 801679a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801679c:	4648      	mov	r0, r9
 801679e:	f001 ffe9 	bl	8018774 <_Bfree>
 80167a2:	3c01      	subs	r4, #1
 80167a4:	2c04      	cmp	r4, #4
 80167a6:	d806      	bhi.n	80167b6 <_strtod_l+0xf6>
 80167a8:	e8df f004 	tbb	[pc, r4]
 80167ac:	1714030a 	.word	0x1714030a
 80167b0:	0a          	.byte	0x0a
 80167b1:	00          	.byte	0x00
 80167b2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80167b6:	0730      	lsls	r0, r6, #28
 80167b8:	d5c1      	bpl.n	801673e <_strtod_l+0x7e>
 80167ba:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80167be:	e7be      	b.n	801673e <_strtod_l+0x7e>
 80167c0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80167c4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80167c6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80167ca:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80167ce:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80167d2:	e7f0      	b.n	80167b6 <_strtod_l+0xf6>
 80167d4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8016948 <_strtod_l+0x288>
 80167d8:	e7ed      	b.n	80167b6 <_strtod_l+0xf6>
 80167da:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80167de:	f04f 3aff 	mov.w	sl, #4294967295
 80167e2:	e7e8      	b.n	80167b6 <_strtod_l+0xf6>
 80167e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80167e6:	1c5a      	adds	r2, r3, #1
 80167e8:	921b      	str	r2, [sp, #108]	; 0x6c
 80167ea:	785b      	ldrb	r3, [r3, #1]
 80167ec:	2b30      	cmp	r3, #48	; 0x30
 80167ee:	d0f9      	beq.n	80167e4 <_strtod_l+0x124>
 80167f0:	2b00      	cmp	r3, #0
 80167f2:	d0a4      	beq.n	801673e <_strtod_l+0x7e>
 80167f4:	2301      	movs	r3, #1
 80167f6:	2500      	movs	r5, #0
 80167f8:	9306      	str	r3, [sp, #24]
 80167fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80167fc:	9308      	str	r3, [sp, #32]
 80167fe:	9507      	str	r5, [sp, #28]
 8016800:	9505      	str	r5, [sp, #20]
 8016802:	220a      	movs	r2, #10
 8016804:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8016806:	7807      	ldrb	r7, [r0, #0]
 8016808:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 801680c:	b2d9      	uxtb	r1, r3
 801680e:	2909      	cmp	r1, #9
 8016810:	d929      	bls.n	8016866 <_strtod_l+0x1a6>
 8016812:	4622      	mov	r2, r4
 8016814:	f8d8 1000 	ldr.w	r1, [r8]
 8016818:	f002 fcd8 	bl	80191cc <strncmp>
 801681c:	2800      	cmp	r0, #0
 801681e:	d031      	beq.n	8016884 <_strtod_l+0x1c4>
 8016820:	2000      	movs	r0, #0
 8016822:	9c05      	ldr	r4, [sp, #20]
 8016824:	9004      	str	r0, [sp, #16]
 8016826:	463b      	mov	r3, r7
 8016828:	4602      	mov	r2, r0
 801682a:	2b65      	cmp	r3, #101	; 0x65
 801682c:	d001      	beq.n	8016832 <_strtod_l+0x172>
 801682e:	2b45      	cmp	r3, #69	; 0x45
 8016830:	d114      	bne.n	801685c <_strtod_l+0x19c>
 8016832:	b924      	cbnz	r4, 801683e <_strtod_l+0x17e>
 8016834:	b910      	cbnz	r0, 801683c <_strtod_l+0x17c>
 8016836:	9b06      	ldr	r3, [sp, #24]
 8016838:	2b00      	cmp	r3, #0
 801683a:	d09e      	beq.n	801677a <_strtod_l+0xba>
 801683c:	2400      	movs	r4, #0
 801683e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8016840:	1c73      	adds	r3, r6, #1
 8016842:	931b      	str	r3, [sp, #108]	; 0x6c
 8016844:	7873      	ldrb	r3, [r6, #1]
 8016846:	2b2b      	cmp	r3, #43	; 0x2b
 8016848:	d078      	beq.n	801693c <_strtod_l+0x27c>
 801684a:	2b2d      	cmp	r3, #45	; 0x2d
 801684c:	d070      	beq.n	8016930 <_strtod_l+0x270>
 801684e:	f04f 0c00 	mov.w	ip, #0
 8016852:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8016856:	2f09      	cmp	r7, #9
 8016858:	d97c      	bls.n	8016954 <_strtod_l+0x294>
 801685a:	961b      	str	r6, [sp, #108]	; 0x6c
 801685c:	f04f 0e00 	mov.w	lr, #0
 8016860:	e09a      	b.n	8016998 <_strtod_l+0x2d8>
 8016862:	2300      	movs	r3, #0
 8016864:	e7c7      	b.n	80167f6 <_strtod_l+0x136>
 8016866:	9905      	ldr	r1, [sp, #20]
 8016868:	2908      	cmp	r1, #8
 801686a:	bfdd      	ittte	le
 801686c:	9907      	ldrle	r1, [sp, #28]
 801686e:	fb02 3301 	mlale	r3, r2, r1, r3
 8016872:	9307      	strle	r3, [sp, #28]
 8016874:	fb02 3505 	mlagt	r5, r2, r5, r3
 8016878:	9b05      	ldr	r3, [sp, #20]
 801687a:	3001      	adds	r0, #1
 801687c:	3301      	adds	r3, #1
 801687e:	9305      	str	r3, [sp, #20]
 8016880:	901b      	str	r0, [sp, #108]	; 0x6c
 8016882:	e7bf      	b.n	8016804 <_strtod_l+0x144>
 8016884:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016886:	191a      	adds	r2, r3, r4
 8016888:	921b      	str	r2, [sp, #108]	; 0x6c
 801688a:	9a05      	ldr	r2, [sp, #20]
 801688c:	5d1b      	ldrb	r3, [r3, r4]
 801688e:	2a00      	cmp	r2, #0
 8016890:	d037      	beq.n	8016902 <_strtod_l+0x242>
 8016892:	9c05      	ldr	r4, [sp, #20]
 8016894:	4602      	mov	r2, r0
 8016896:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801689a:	2909      	cmp	r1, #9
 801689c:	d913      	bls.n	80168c6 <_strtod_l+0x206>
 801689e:	2101      	movs	r1, #1
 80168a0:	9104      	str	r1, [sp, #16]
 80168a2:	e7c2      	b.n	801682a <_strtod_l+0x16a>
 80168a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80168a6:	1c5a      	adds	r2, r3, #1
 80168a8:	921b      	str	r2, [sp, #108]	; 0x6c
 80168aa:	785b      	ldrb	r3, [r3, #1]
 80168ac:	3001      	adds	r0, #1
 80168ae:	2b30      	cmp	r3, #48	; 0x30
 80168b0:	d0f8      	beq.n	80168a4 <_strtod_l+0x1e4>
 80168b2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80168b6:	2a08      	cmp	r2, #8
 80168b8:	f200 84e4 	bhi.w	8017284 <_strtod_l+0xbc4>
 80168bc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80168be:	9208      	str	r2, [sp, #32]
 80168c0:	4602      	mov	r2, r0
 80168c2:	2000      	movs	r0, #0
 80168c4:	4604      	mov	r4, r0
 80168c6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80168ca:	f100 0101 	add.w	r1, r0, #1
 80168ce:	d012      	beq.n	80168f6 <_strtod_l+0x236>
 80168d0:	440a      	add	r2, r1
 80168d2:	eb00 0c04 	add.w	ip, r0, r4
 80168d6:	4621      	mov	r1, r4
 80168d8:	270a      	movs	r7, #10
 80168da:	458c      	cmp	ip, r1
 80168dc:	d113      	bne.n	8016906 <_strtod_l+0x246>
 80168de:	1821      	adds	r1, r4, r0
 80168e0:	2908      	cmp	r1, #8
 80168e2:	f104 0401 	add.w	r4, r4, #1
 80168e6:	4404      	add	r4, r0
 80168e8:	dc19      	bgt.n	801691e <_strtod_l+0x25e>
 80168ea:	9b07      	ldr	r3, [sp, #28]
 80168ec:	210a      	movs	r1, #10
 80168ee:	fb01 e303 	mla	r3, r1, r3, lr
 80168f2:	9307      	str	r3, [sp, #28]
 80168f4:	2100      	movs	r1, #0
 80168f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80168f8:	1c58      	adds	r0, r3, #1
 80168fa:	901b      	str	r0, [sp, #108]	; 0x6c
 80168fc:	785b      	ldrb	r3, [r3, #1]
 80168fe:	4608      	mov	r0, r1
 8016900:	e7c9      	b.n	8016896 <_strtod_l+0x1d6>
 8016902:	9805      	ldr	r0, [sp, #20]
 8016904:	e7d3      	b.n	80168ae <_strtod_l+0x1ee>
 8016906:	2908      	cmp	r1, #8
 8016908:	f101 0101 	add.w	r1, r1, #1
 801690c:	dc03      	bgt.n	8016916 <_strtod_l+0x256>
 801690e:	9b07      	ldr	r3, [sp, #28]
 8016910:	437b      	muls	r3, r7
 8016912:	9307      	str	r3, [sp, #28]
 8016914:	e7e1      	b.n	80168da <_strtod_l+0x21a>
 8016916:	2910      	cmp	r1, #16
 8016918:	bfd8      	it	le
 801691a:	437d      	mulle	r5, r7
 801691c:	e7dd      	b.n	80168da <_strtod_l+0x21a>
 801691e:	2c10      	cmp	r4, #16
 8016920:	bfdc      	itt	le
 8016922:	210a      	movle	r1, #10
 8016924:	fb01 e505 	mlale	r5, r1, r5, lr
 8016928:	e7e4      	b.n	80168f4 <_strtod_l+0x234>
 801692a:	2301      	movs	r3, #1
 801692c:	9304      	str	r3, [sp, #16]
 801692e:	e781      	b.n	8016834 <_strtod_l+0x174>
 8016930:	f04f 0c01 	mov.w	ip, #1
 8016934:	1cb3      	adds	r3, r6, #2
 8016936:	931b      	str	r3, [sp, #108]	; 0x6c
 8016938:	78b3      	ldrb	r3, [r6, #2]
 801693a:	e78a      	b.n	8016852 <_strtod_l+0x192>
 801693c:	f04f 0c00 	mov.w	ip, #0
 8016940:	e7f8      	b.n	8016934 <_strtod_l+0x274>
 8016942:	bf00      	nop
 8016944:	0801b218 	.word	0x0801b218
 8016948:	7ff00000 	.word	0x7ff00000
 801694c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801694e:	1c5f      	adds	r7, r3, #1
 8016950:	971b      	str	r7, [sp, #108]	; 0x6c
 8016952:	785b      	ldrb	r3, [r3, #1]
 8016954:	2b30      	cmp	r3, #48	; 0x30
 8016956:	d0f9      	beq.n	801694c <_strtod_l+0x28c>
 8016958:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 801695c:	2f08      	cmp	r7, #8
 801695e:	f63f af7d 	bhi.w	801685c <_strtod_l+0x19c>
 8016962:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8016966:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016968:	930a      	str	r3, [sp, #40]	; 0x28
 801696a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801696c:	1c5f      	adds	r7, r3, #1
 801696e:	971b      	str	r7, [sp, #108]	; 0x6c
 8016970:	785b      	ldrb	r3, [r3, #1]
 8016972:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8016976:	f1b8 0f09 	cmp.w	r8, #9
 801697a:	d937      	bls.n	80169ec <_strtod_l+0x32c>
 801697c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801697e:	1a7f      	subs	r7, r7, r1
 8016980:	2f08      	cmp	r7, #8
 8016982:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8016986:	dc37      	bgt.n	80169f8 <_strtod_l+0x338>
 8016988:	45be      	cmp	lr, r7
 801698a:	bfa8      	it	ge
 801698c:	46be      	movge	lr, r7
 801698e:	f1bc 0f00 	cmp.w	ip, #0
 8016992:	d001      	beq.n	8016998 <_strtod_l+0x2d8>
 8016994:	f1ce 0e00 	rsb	lr, lr, #0
 8016998:	2c00      	cmp	r4, #0
 801699a:	d151      	bne.n	8016a40 <_strtod_l+0x380>
 801699c:	2800      	cmp	r0, #0
 801699e:	f47f aece 	bne.w	801673e <_strtod_l+0x7e>
 80169a2:	9a06      	ldr	r2, [sp, #24]
 80169a4:	2a00      	cmp	r2, #0
 80169a6:	f47f aeca 	bne.w	801673e <_strtod_l+0x7e>
 80169aa:	9a04      	ldr	r2, [sp, #16]
 80169ac:	2a00      	cmp	r2, #0
 80169ae:	f47f aee4 	bne.w	801677a <_strtod_l+0xba>
 80169b2:	2b4e      	cmp	r3, #78	; 0x4e
 80169b4:	d027      	beq.n	8016a06 <_strtod_l+0x346>
 80169b6:	dc21      	bgt.n	80169fc <_strtod_l+0x33c>
 80169b8:	2b49      	cmp	r3, #73	; 0x49
 80169ba:	f47f aede 	bne.w	801677a <_strtod_l+0xba>
 80169be:	49a0      	ldr	r1, [pc, #640]	; (8016c40 <_strtod_l+0x580>)
 80169c0:	a81b      	add	r0, sp, #108	; 0x6c
 80169c2:	f001 fdd7 	bl	8018574 <__match>
 80169c6:	2800      	cmp	r0, #0
 80169c8:	f43f aed7 	beq.w	801677a <_strtod_l+0xba>
 80169cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80169ce:	499d      	ldr	r1, [pc, #628]	; (8016c44 <_strtod_l+0x584>)
 80169d0:	3b01      	subs	r3, #1
 80169d2:	a81b      	add	r0, sp, #108	; 0x6c
 80169d4:	931b      	str	r3, [sp, #108]	; 0x6c
 80169d6:	f001 fdcd 	bl	8018574 <__match>
 80169da:	b910      	cbnz	r0, 80169e2 <_strtod_l+0x322>
 80169dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80169de:	3301      	adds	r3, #1
 80169e0:	931b      	str	r3, [sp, #108]	; 0x6c
 80169e2:	f8df b274 	ldr.w	fp, [pc, #628]	; 8016c58 <_strtod_l+0x598>
 80169e6:	f04f 0a00 	mov.w	sl, #0
 80169ea:	e6a8      	b.n	801673e <_strtod_l+0x7e>
 80169ec:	210a      	movs	r1, #10
 80169ee:	fb01 3e0e 	mla	lr, r1, lr, r3
 80169f2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80169f6:	e7b8      	b.n	801696a <_strtod_l+0x2aa>
 80169f8:	46be      	mov	lr, r7
 80169fa:	e7c8      	b.n	801698e <_strtod_l+0x2ce>
 80169fc:	2b69      	cmp	r3, #105	; 0x69
 80169fe:	d0de      	beq.n	80169be <_strtod_l+0x2fe>
 8016a00:	2b6e      	cmp	r3, #110	; 0x6e
 8016a02:	f47f aeba 	bne.w	801677a <_strtod_l+0xba>
 8016a06:	4990      	ldr	r1, [pc, #576]	; (8016c48 <_strtod_l+0x588>)
 8016a08:	a81b      	add	r0, sp, #108	; 0x6c
 8016a0a:	f001 fdb3 	bl	8018574 <__match>
 8016a0e:	2800      	cmp	r0, #0
 8016a10:	f43f aeb3 	beq.w	801677a <_strtod_l+0xba>
 8016a14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016a16:	781b      	ldrb	r3, [r3, #0]
 8016a18:	2b28      	cmp	r3, #40	; 0x28
 8016a1a:	d10e      	bne.n	8016a3a <_strtod_l+0x37a>
 8016a1c:	aa1e      	add	r2, sp, #120	; 0x78
 8016a1e:	498b      	ldr	r1, [pc, #556]	; (8016c4c <_strtod_l+0x58c>)
 8016a20:	a81b      	add	r0, sp, #108	; 0x6c
 8016a22:	f001 fdbb 	bl	801859c <__hexnan>
 8016a26:	2805      	cmp	r0, #5
 8016a28:	d107      	bne.n	8016a3a <_strtod_l+0x37a>
 8016a2a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016a2c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8016a30:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8016a34:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8016a38:	e681      	b.n	801673e <_strtod_l+0x7e>
 8016a3a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8016c60 <_strtod_l+0x5a0>
 8016a3e:	e7d2      	b.n	80169e6 <_strtod_l+0x326>
 8016a40:	ebae 0302 	sub.w	r3, lr, r2
 8016a44:	9306      	str	r3, [sp, #24]
 8016a46:	9b05      	ldr	r3, [sp, #20]
 8016a48:	9807      	ldr	r0, [sp, #28]
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	bf08      	it	eq
 8016a4e:	4623      	moveq	r3, r4
 8016a50:	2c10      	cmp	r4, #16
 8016a52:	9305      	str	r3, [sp, #20]
 8016a54:	46a0      	mov	r8, r4
 8016a56:	bfa8      	it	ge
 8016a58:	f04f 0810 	movge.w	r8, #16
 8016a5c:	f7e9 fd52 	bl	8000504 <__aeabi_ui2d>
 8016a60:	2c09      	cmp	r4, #9
 8016a62:	4682      	mov	sl, r0
 8016a64:	468b      	mov	fp, r1
 8016a66:	dc13      	bgt.n	8016a90 <_strtod_l+0x3d0>
 8016a68:	9b06      	ldr	r3, [sp, #24]
 8016a6a:	2b00      	cmp	r3, #0
 8016a6c:	f43f ae67 	beq.w	801673e <_strtod_l+0x7e>
 8016a70:	9b06      	ldr	r3, [sp, #24]
 8016a72:	dd7a      	ble.n	8016b6a <_strtod_l+0x4aa>
 8016a74:	2b16      	cmp	r3, #22
 8016a76:	dc61      	bgt.n	8016b3c <_strtod_l+0x47c>
 8016a78:	4a75      	ldr	r2, [pc, #468]	; (8016c50 <_strtod_l+0x590>)
 8016a7a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8016a7e:	e9de 0100 	ldrd	r0, r1, [lr]
 8016a82:	4652      	mov	r2, sl
 8016a84:	465b      	mov	r3, fp
 8016a86:	f7e9 fdb7 	bl	80005f8 <__aeabi_dmul>
 8016a8a:	4682      	mov	sl, r0
 8016a8c:	468b      	mov	fp, r1
 8016a8e:	e656      	b.n	801673e <_strtod_l+0x7e>
 8016a90:	4b6f      	ldr	r3, [pc, #444]	; (8016c50 <_strtod_l+0x590>)
 8016a92:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8016a96:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8016a9a:	f7e9 fdad 	bl	80005f8 <__aeabi_dmul>
 8016a9e:	4606      	mov	r6, r0
 8016aa0:	4628      	mov	r0, r5
 8016aa2:	460f      	mov	r7, r1
 8016aa4:	f7e9 fd2e 	bl	8000504 <__aeabi_ui2d>
 8016aa8:	4602      	mov	r2, r0
 8016aaa:	460b      	mov	r3, r1
 8016aac:	4630      	mov	r0, r6
 8016aae:	4639      	mov	r1, r7
 8016ab0:	f7e9 fbec 	bl	800028c <__adddf3>
 8016ab4:	2c0f      	cmp	r4, #15
 8016ab6:	4682      	mov	sl, r0
 8016ab8:	468b      	mov	fp, r1
 8016aba:	ddd5      	ble.n	8016a68 <_strtod_l+0x3a8>
 8016abc:	9b06      	ldr	r3, [sp, #24]
 8016abe:	eba4 0808 	sub.w	r8, r4, r8
 8016ac2:	4498      	add	r8, r3
 8016ac4:	f1b8 0f00 	cmp.w	r8, #0
 8016ac8:	f340 8096 	ble.w	8016bf8 <_strtod_l+0x538>
 8016acc:	f018 030f 	ands.w	r3, r8, #15
 8016ad0:	d00a      	beq.n	8016ae8 <_strtod_l+0x428>
 8016ad2:	495f      	ldr	r1, [pc, #380]	; (8016c50 <_strtod_l+0x590>)
 8016ad4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016ad8:	4652      	mov	r2, sl
 8016ada:	465b      	mov	r3, fp
 8016adc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016ae0:	f7e9 fd8a 	bl	80005f8 <__aeabi_dmul>
 8016ae4:	4682      	mov	sl, r0
 8016ae6:	468b      	mov	fp, r1
 8016ae8:	f038 080f 	bics.w	r8, r8, #15
 8016aec:	d073      	beq.n	8016bd6 <_strtod_l+0x516>
 8016aee:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8016af2:	dd47      	ble.n	8016b84 <_strtod_l+0x4c4>
 8016af4:	2400      	movs	r4, #0
 8016af6:	46a0      	mov	r8, r4
 8016af8:	9407      	str	r4, [sp, #28]
 8016afa:	9405      	str	r4, [sp, #20]
 8016afc:	2322      	movs	r3, #34	; 0x22
 8016afe:	f8df b158 	ldr.w	fp, [pc, #344]	; 8016c58 <_strtod_l+0x598>
 8016b02:	f8c9 3000 	str.w	r3, [r9]
 8016b06:	f04f 0a00 	mov.w	sl, #0
 8016b0a:	9b07      	ldr	r3, [sp, #28]
 8016b0c:	2b00      	cmp	r3, #0
 8016b0e:	f43f ae16 	beq.w	801673e <_strtod_l+0x7e>
 8016b12:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016b14:	4648      	mov	r0, r9
 8016b16:	f001 fe2d 	bl	8018774 <_Bfree>
 8016b1a:	9905      	ldr	r1, [sp, #20]
 8016b1c:	4648      	mov	r0, r9
 8016b1e:	f001 fe29 	bl	8018774 <_Bfree>
 8016b22:	4641      	mov	r1, r8
 8016b24:	4648      	mov	r0, r9
 8016b26:	f001 fe25 	bl	8018774 <_Bfree>
 8016b2a:	9907      	ldr	r1, [sp, #28]
 8016b2c:	4648      	mov	r0, r9
 8016b2e:	f001 fe21 	bl	8018774 <_Bfree>
 8016b32:	4621      	mov	r1, r4
 8016b34:	4648      	mov	r0, r9
 8016b36:	f001 fe1d 	bl	8018774 <_Bfree>
 8016b3a:	e600      	b.n	801673e <_strtod_l+0x7e>
 8016b3c:	9a06      	ldr	r2, [sp, #24]
 8016b3e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8016b42:	4293      	cmp	r3, r2
 8016b44:	dbba      	blt.n	8016abc <_strtod_l+0x3fc>
 8016b46:	4d42      	ldr	r5, [pc, #264]	; (8016c50 <_strtod_l+0x590>)
 8016b48:	f1c4 040f 	rsb	r4, r4, #15
 8016b4c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8016b50:	4652      	mov	r2, sl
 8016b52:	465b      	mov	r3, fp
 8016b54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016b58:	f7e9 fd4e 	bl	80005f8 <__aeabi_dmul>
 8016b5c:	9b06      	ldr	r3, [sp, #24]
 8016b5e:	1b1c      	subs	r4, r3, r4
 8016b60:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8016b64:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016b68:	e78d      	b.n	8016a86 <_strtod_l+0x3c6>
 8016b6a:	f113 0f16 	cmn.w	r3, #22
 8016b6e:	dba5      	blt.n	8016abc <_strtod_l+0x3fc>
 8016b70:	4a37      	ldr	r2, [pc, #220]	; (8016c50 <_strtod_l+0x590>)
 8016b72:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8016b76:	e9d2 2300 	ldrd	r2, r3, [r2]
 8016b7a:	4650      	mov	r0, sl
 8016b7c:	4659      	mov	r1, fp
 8016b7e:	f7e9 fe65 	bl	800084c <__aeabi_ddiv>
 8016b82:	e782      	b.n	8016a8a <_strtod_l+0x3ca>
 8016b84:	2300      	movs	r3, #0
 8016b86:	4e33      	ldr	r6, [pc, #204]	; (8016c54 <_strtod_l+0x594>)
 8016b88:	ea4f 1828 	mov.w	r8, r8, asr #4
 8016b8c:	4650      	mov	r0, sl
 8016b8e:	4659      	mov	r1, fp
 8016b90:	461d      	mov	r5, r3
 8016b92:	f1b8 0f01 	cmp.w	r8, #1
 8016b96:	dc21      	bgt.n	8016bdc <_strtod_l+0x51c>
 8016b98:	b10b      	cbz	r3, 8016b9e <_strtod_l+0x4de>
 8016b9a:	4682      	mov	sl, r0
 8016b9c:	468b      	mov	fp, r1
 8016b9e:	4b2d      	ldr	r3, [pc, #180]	; (8016c54 <_strtod_l+0x594>)
 8016ba0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8016ba4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8016ba8:	4652      	mov	r2, sl
 8016baa:	465b      	mov	r3, fp
 8016bac:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016bb0:	f7e9 fd22 	bl	80005f8 <__aeabi_dmul>
 8016bb4:	4b28      	ldr	r3, [pc, #160]	; (8016c58 <_strtod_l+0x598>)
 8016bb6:	460a      	mov	r2, r1
 8016bb8:	400b      	ands	r3, r1
 8016bba:	4928      	ldr	r1, [pc, #160]	; (8016c5c <_strtod_l+0x59c>)
 8016bbc:	428b      	cmp	r3, r1
 8016bbe:	4682      	mov	sl, r0
 8016bc0:	d898      	bhi.n	8016af4 <_strtod_l+0x434>
 8016bc2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8016bc6:	428b      	cmp	r3, r1
 8016bc8:	bf86      	itte	hi
 8016bca:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8016c64 <_strtod_l+0x5a4>
 8016bce:	f04f 3aff 	movhi.w	sl, #4294967295
 8016bd2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8016bd6:	2300      	movs	r3, #0
 8016bd8:	9304      	str	r3, [sp, #16]
 8016bda:	e077      	b.n	8016ccc <_strtod_l+0x60c>
 8016bdc:	f018 0f01 	tst.w	r8, #1
 8016be0:	d006      	beq.n	8016bf0 <_strtod_l+0x530>
 8016be2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8016be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bea:	f7e9 fd05 	bl	80005f8 <__aeabi_dmul>
 8016bee:	2301      	movs	r3, #1
 8016bf0:	3501      	adds	r5, #1
 8016bf2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016bf6:	e7cc      	b.n	8016b92 <_strtod_l+0x4d2>
 8016bf8:	d0ed      	beq.n	8016bd6 <_strtod_l+0x516>
 8016bfa:	f1c8 0800 	rsb	r8, r8, #0
 8016bfe:	f018 020f 	ands.w	r2, r8, #15
 8016c02:	d00a      	beq.n	8016c1a <_strtod_l+0x55a>
 8016c04:	4b12      	ldr	r3, [pc, #72]	; (8016c50 <_strtod_l+0x590>)
 8016c06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016c0a:	4650      	mov	r0, sl
 8016c0c:	4659      	mov	r1, fp
 8016c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c12:	f7e9 fe1b 	bl	800084c <__aeabi_ddiv>
 8016c16:	4682      	mov	sl, r0
 8016c18:	468b      	mov	fp, r1
 8016c1a:	ea5f 1828 	movs.w	r8, r8, asr #4
 8016c1e:	d0da      	beq.n	8016bd6 <_strtod_l+0x516>
 8016c20:	f1b8 0f1f 	cmp.w	r8, #31
 8016c24:	dd20      	ble.n	8016c68 <_strtod_l+0x5a8>
 8016c26:	2400      	movs	r4, #0
 8016c28:	46a0      	mov	r8, r4
 8016c2a:	9407      	str	r4, [sp, #28]
 8016c2c:	9405      	str	r4, [sp, #20]
 8016c2e:	2322      	movs	r3, #34	; 0x22
 8016c30:	f04f 0a00 	mov.w	sl, #0
 8016c34:	f04f 0b00 	mov.w	fp, #0
 8016c38:	f8c9 3000 	str.w	r3, [r9]
 8016c3c:	e765      	b.n	8016b0a <_strtod_l+0x44a>
 8016c3e:	bf00      	nop
 8016c40:	0801b1e1 	.word	0x0801b1e1
 8016c44:	0801b26b 	.word	0x0801b26b
 8016c48:	0801b1e9 	.word	0x0801b1e9
 8016c4c:	0801b22c 	.word	0x0801b22c
 8016c50:	0801b2a8 	.word	0x0801b2a8
 8016c54:	0801b280 	.word	0x0801b280
 8016c58:	7ff00000 	.word	0x7ff00000
 8016c5c:	7ca00000 	.word	0x7ca00000
 8016c60:	fff80000 	.word	0xfff80000
 8016c64:	7fefffff 	.word	0x7fefffff
 8016c68:	f018 0310 	ands.w	r3, r8, #16
 8016c6c:	bf18      	it	ne
 8016c6e:	236a      	movne	r3, #106	; 0x6a
 8016c70:	4da0      	ldr	r5, [pc, #640]	; (8016ef4 <_strtod_l+0x834>)
 8016c72:	9304      	str	r3, [sp, #16]
 8016c74:	4650      	mov	r0, sl
 8016c76:	4659      	mov	r1, fp
 8016c78:	2300      	movs	r3, #0
 8016c7a:	f1b8 0f00 	cmp.w	r8, #0
 8016c7e:	f300 810a 	bgt.w	8016e96 <_strtod_l+0x7d6>
 8016c82:	b10b      	cbz	r3, 8016c88 <_strtod_l+0x5c8>
 8016c84:	4682      	mov	sl, r0
 8016c86:	468b      	mov	fp, r1
 8016c88:	9b04      	ldr	r3, [sp, #16]
 8016c8a:	b1bb      	cbz	r3, 8016cbc <_strtod_l+0x5fc>
 8016c8c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8016c90:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	4659      	mov	r1, fp
 8016c98:	dd10      	ble.n	8016cbc <_strtod_l+0x5fc>
 8016c9a:	2b1f      	cmp	r3, #31
 8016c9c:	f340 8107 	ble.w	8016eae <_strtod_l+0x7ee>
 8016ca0:	2b34      	cmp	r3, #52	; 0x34
 8016ca2:	bfde      	ittt	le
 8016ca4:	3b20      	suble	r3, #32
 8016ca6:	f04f 32ff 	movle.w	r2, #4294967295
 8016caa:	fa02 f303 	lslle.w	r3, r2, r3
 8016cae:	f04f 0a00 	mov.w	sl, #0
 8016cb2:	bfcc      	ite	gt
 8016cb4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8016cb8:	ea03 0b01 	andle.w	fp, r3, r1
 8016cbc:	2200      	movs	r2, #0
 8016cbe:	2300      	movs	r3, #0
 8016cc0:	4650      	mov	r0, sl
 8016cc2:	4659      	mov	r1, fp
 8016cc4:	f7e9 ff00 	bl	8000ac8 <__aeabi_dcmpeq>
 8016cc8:	2800      	cmp	r0, #0
 8016cca:	d1ac      	bne.n	8016c26 <_strtod_l+0x566>
 8016ccc:	9b07      	ldr	r3, [sp, #28]
 8016cce:	9300      	str	r3, [sp, #0]
 8016cd0:	9a05      	ldr	r2, [sp, #20]
 8016cd2:	9908      	ldr	r1, [sp, #32]
 8016cd4:	4623      	mov	r3, r4
 8016cd6:	4648      	mov	r0, r9
 8016cd8:	f001 fd9e 	bl	8018818 <__s2b>
 8016cdc:	9007      	str	r0, [sp, #28]
 8016cde:	2800      	cmp	r0, #0
 8016ce0:	f43f af08 	beq.w	8016af4 <_strtod_l+0x434>
 8016ce4:	9a06      	ldr	r2, [sp, #24]
 8016ce6:	9b06      	ldr	r3, [sp, #24]
 8016ce8:	2a00      	cmp	r2, #0
 8016cea:	f1c3 0300 	rsb	r3, r3, #0
 8016cee:	bfa8      	it	ge
 8016cf0:	2300      	movge	r3, #0
 8016cf2:	930e      	str	r3, [sp, #56]	; 0x38
 8016cf4:	2400      	movs	r4, #0
 8016cf6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8016cfa:	9316      	str	r3, [sp, #88]	; 0x58
 8016cfc:	46a0      	mov	r8, r4
 8016cfe:	9b07      	ldr	r3, [sp, #28]
 8016d00:	4648      	mov	r0, r9
 8016d02:	6859      	ldr	r1, [r3, #4]
 8016d04:	f001 fd02 	bl	801870c <_Balloc>
 8016d08:	9005      	str	r0, [sp, #20]
 8016d0a:	2800      	cmp	r0, #0
 8016d0c:	f43f aef6 	beq.w	8016afc <_strtod_l+0x43c>
 8016d10:	9b07      	ldr	r3, [sp, #28]
 8016d12:	691a      	ldr	r2, [r3, #16]
 8016d14:	3202      	adds	r2, #2
 8016d16:	f103 010c 	add.w	r1, r3, #12
 8016d1a:	0092      	lsls	r2, r2, #2
 8016d1c:	300c      	adds	r0, #12
 8016d1e:	f7fe fd27 	bl	8015770 <memcpy>
 8016d22:	aa1e      	add	r2, sp, #120	; 0x78
 8016d24:	a91d      	add	r1, sp, #116	; 0x74
 8016d26:	ec4b ab10 	vmov	d0, sl, fp
 8016d2a:	4648      	mov	r0, r9
 8016d2c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8016d30:	f002 f82e 	bl	8018d90 <__d2b>
 8016d34:	901c      	str	r0, [sp, #112]	; 0x70
 8016d36:	2800      	cmp	r0, #0
 8016d38:	f43f aee0 	beq.w	8016afc <_strtod_l+0x43c>
 8016d3c:	2101      	movs	r1, #1
 8016d3e:	4648      	mov	r0, r9
 8016d40:	f001 fdf6 	bl	8018930 <__i2b>
 8016d44:	4680      	mov	r8, r0
 8016d46:	2800      	cmp	r0, #0
 8016d48:	f43f aed8 	beq.w	8016afc <_strtod_l+0x43c>
 8016d4c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8016d4e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016d50:	2e00      	cmp	r6, #0
 8016d52:	bfab      	itete	ge
 8016d54:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8016d56:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8016d58:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8016d5a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8016d5c:	bfac      	ite	ge
 8016d5e:	18f7      	addge	r7, r6, r3
 8016d60:	1b9d      	sublt	r5, r3, r6
 8016d62:	9b04      	ldr	r3, [sp, #16]
 8016d64:	1af6      	subs	r6, r6, r3
 8016d66:	4416      	add	r6, r2
 8016d68:	4b63      	ldr	r3, [pc, #396]	; (8016ef8 <_strtod_l+0x838>)
 8016d6a:	3e01      	subs	r6, #1
 8016d6c:	429e      	cmp	r6, r3
 8016d6e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8016d72:	f280 80af 	bge.w	8016ed4 <_strtod_l+0x814>
 8016d76:	1b9b      	subs	r3, r3, r6
 8016d78:	2b1f      	cmp	r3, #31
 8016d7a:	eba2 0203 	sub.w	r2, r2, r3
 8016d7e:	f04f 0101 	mov.w	r1, #1
 8016d82:	f300 809b 	bgt.w	8016ebc <_strtod_l+0x7fc>
 8016d86:	fa01 f303 	lsl.w	r3, r1, r3
 8016d8a:	930f      	str	r3, [sp, #60]	; 0x3c
 8016d8c:	2300      	movs	r3, #0
 8016d8e:	930a      	str	r3, [sp, #40]	; 0x28
 8016d90:	18be      	adds	r6, r7, r2
 8016d92:	9b04      	ldr	r3, [sp, #16]
 8016d94:	42b7      	cmp	r7, r6
 8016d96:	4415      	add	r5, r2
 8016d98:	441d      	add	r5, r3
 8016d9a:	463b      	mov	r3, r7
 8016d9c:	bfa8      	it	ge
 8016d9e:	4633      	movge	r3, r6
 8016da0:	42ab      	cmp	r3, r5
 8016da2:	bfa8      	it	ge
 8016da4:	462b      	movge	r3, r5
 8016da6:	2b00      	cmp	r3, #0
 8016da8:	bfc2      	ittt	gt
 8016daa:	1af6      	subgt	r6, r6, r3
 8016dac:	1aed      	subgt	r5, r5, r3
 8016dae:	1aff      	subgt	r7, r7, r3
 8016db0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016db2:	b1bb      	cbz	r3, 8016de4 <_strtod_l+0x724>
 8016db4:	4641      	mov	r1, r8
 8016db6:	461a      	mov	r2, r3
 8016db8:	4648      	mov	r0, r9
 8016dba:	f001 fe59 	bl	8018a70 <__pow5mult>
 8016dbe:	4680      	mov	r8, r0
 8016dc0:	2800      	cmp	r0, #0
 8016dc2:	f43f ae9b 	beq.w	8016afc <_strtod_l+0x43c>
 8016dc6:	4601      	mov	r1, r0
 8016dc8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016dca:	4648      	mov	r0, r9
 8016dcc:	f001 fdb9 	bl	8018942 <__multiply>
 8016dd0:	900c      	str	r0, [sp, #48]	; 0x30
 8016dd2:	2800      	cmp	r0, #0
 8016dd4:	f43f ae92 	beq.w	8016afc <_strtod_l+0x43c>
 8016dd8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016dda:	4648      	mov	r0, r9
 8016ddc:	f001 fcca 	bl	8018774 <_Bfree>
 8016de0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016de2:	931c      	str	r3, [sp, #112]	; 0x70
 8016de4:	2e00      	cmp	r6, #0
 8016de6:	dc7a      	bgt.n	8016ede <_strtod_l+0x81e>
 8016de8:	9b06      	ldr	r3, [sp, #24]
 8016dea:	2b00      	cmp	r3, #0
 8016dec:	dd08      	ble.n	8016e00 <_strtod_l+0x740>
 8016dee:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016df0:	9905      	ldr	r1, [sp, #20]
 8016df2:	4648      	mov	r0, r9
 8016df4:	f001 fe3c 	bl	8018a70 <__pow5mult>
 8016df8:	9005      	str	r0, [sp, #20]
 8016dfa:	2800      	cmp	r0, #0
 8016dfc:	f43f ae7e 	beq.w	8016afc <_strtod_l+0x43c>
 8016e00:	2d00      	cmp	r5, #0
 8016e02:	dd08      	ble.n	8016e16 <_strtod_l+0x756>
 8016e04:	462a      	mov	r2, r5
 8016e06:	9905      	ldr	r1, [sp, #20]
 8016e08:	4648      	mov	r0, r9
 8016e0a:	f001 fe7f 	bl	8018b0c <__lshift>
 8016e0e:	9005      	str	r0, [sp, #20]
 8016e10:	2800      	cmp	r0, #0
 8016e12:	f43f ae73 	beq.w	8016afc <_strtod_l+0x43c>
 8016e16:	2f00      	cmp	r7, #0
 8016e18:	dd08      	ble.n	8016e2c <_strtod_l+0x76c>
 8016e1a:	4641      	mov	r1, r8
 8016e1c:	463a      	mov	r2, r7
 8016e1e:	4648      	mov	r0, r9
 8016e20:	f001 fe74 	bl	8018b0c <__lshift>
 8016e24:	4680      	mov	r8, r0
 8016e26:	2800      	cmp	r0, #0
 8016e28:	f43f ae68 	beq.w	8016afc <_strtod_l+0x43c>
 8016e2c:	9a05      	ldr	r2, [sp, #20]
 8016e2e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016e30:	4648      	mov	r0, r9
 8016e32:	f001 fed9 	bl	8018be8 <__mdiff>
 8016e36:	4604      	mov	r4, r0
 8016e38:	2800      	cmp	r0, #0
 8016e3a:	f43f ae5f 	beq.w	8016afc <_strtod_l+0x43c>
 8016e3e:	68c3      	ldr	r3, [r0, #12]
 8016e40:	930c      	str	r3, [sp, #48]	; 0x30
 8016e42:	2300      	movs	r3, #0
 8016e44:	60c3      	str	r3, [r0, #12]
 8016e46:	4641      	mov	r1, r8
 8016e48:	f001 feb4 	bl	8018bb4 <__mcmp>
 8016e4c:	2800      	cmp	r0, #0
 8016e4e:	da55      	bge.n	8016efc <_strtod_l+0x83c>
 8016e50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016e52:	b9e3      	cbnz	r3, 8016e8e <_strtod_l+0x7ce>
 8016e54:	f1ba 0f00 	cmp.w	sl, #0
 8016e58:	d119      	bne.n	8016e8e <_strtod_l+0x7ce>
 8016e5a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016e5e:	b9b3      	cbnz	r3, 8016e8e <_strtod_l+0x7ce>
 8016e60:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016e64:	0d1b      	lsrs	r3, r3, #20
 8016e66:	051b      	lsls	r3, r3, #20
 8016e68:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8016e6c:	d90f      	bls.n	8016e8e <_strtod_l+0x7ce>
 8016e6e:	6963      	ldr	r3, [r4, #20]
 8016e70:	b913      	cbnz	r3, 8016e78 <_strtod_l+0x7b8>
 8016e72:	6923      	ldr	r3, [r4, #16]
 8016e74:	2b01      	cmp	r3, #1
 8016e76:	dd0a      	ble.n	8016e8e <_strtod_l+0x7ce>
 8016e78:	4621      	mov	r1, r4
 8016e7a:	2201      	movs	r2, #1
 8016e7c:	4648      	mov	r0, r9
 8016e7e:	f001 fe45 	bl	8018b0c <__lshift>
 8016e82:	4641      	mov	r1, r8
 8016e84:	4604      	mov	r4, r0
 8016e86:	f001 fe95 	bl	8018bb4 <__mcmp>
 8016e8a:	2800      	cmp	r0, #0
 8016e8c:	dc67      	bgt.n	8016f5e <_strtod_l+0x89e>
 8016e8e:	9b04      	ldr	r3, [sp, #16]
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	d171      	bne.n	8016f78 <_strtod_l+0x8b8>
 8016e94:	e63d      	b.n	8016b12 <_strtod_l+0x452>
 8016e96:	f018 0f01 	tst.w	r8, #1
 8016e9a:	d004      	beq.n	8016ea6 <_strtod_l+0x7e6>
 8016e9c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016ea0:	f7e9 fbaa 	bl	80005f8 <__aeabi_dmul>
 8016ea4:	2301      	movs	r3, #1
 8016ea6:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016eaa:	3508      	adds	r5, #8
 8016eac:	e6e5      	b.n	8016c7a <_strtod_l+0x5ba>
 8016eae:	f04f 32ff 	mov.w	r2, #4294967295
 8016eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8016eb6:	ea03 0a0a 	and.w	sl, r3, sl
 8016eba:	e6ff      	b.n	8016cbc <_strtod_l+0x5fc>
 8016ebc:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8016ec0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8016ec4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8016ec8:	36e2      	adds	r6, #226	; 0xe2
 8016eca:	fa01 f306 	lsl.w	r3, r1, r6
 8016ece:	930a      	str	r3, [sp, #40]	; 0x28
 8016ed0:	910f      	str	r1, [sp, #60]	; 0x3c
 8016ed2:	e75d      	b.n	8016d90 <_strtod_l+0x6d0>
 8016ed4:	2300      	movs	r3, #0
 8016ed6:	930a      	str	r3, [sp, #40]	; 0x28
 8016ed8:	2301      	movs	r3, #1
 8016eda:	930f      	str	r3, [sp, #60]	; 0x3c
 8016edc:	e758      	b.n	8016d90 <_strtod_l+0x6d0>
 8016ede:	4632      	mov	r2, r6
 8016ee0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016ee2:	4648      	mov	r0, r9
 8016ee4:	f001 fe12 	bl	8018b0c <__lshift>
 8016ee8:	901c      	str	r0, [sp, #112]	; 0x70
 8016eea:	2800      	cmp	r0, #0
 8016eec:	f47f af7c 	bne.w	8016de8 <_strtod_l+0x728>
 8016ef0:	e604      	b.n	8016afc <_strtod_l+0x43c>
 8016ef2:	bf00      	nop
 8016ef4:	0801b240 	.word	0x0801b240
 8016ef8:	fffffc02 	.word	0xfffffc02
 8016efc:	465d      	mov	r5, fp
 8016efe:	f040 8086 	bne.w	801700e <_strtod_l+0x94e>
 8016f02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016f04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016f08:	b32a      	cbz	r2, 8016f56 <_strtod_l+0x896>
 8016f0a:	4aaf      	ldr	r2, [pc, #700]	; (80171c8 <_strtod_l+0xb08>)
 8016f0c:	4293      	cmp	r3, r2
 8016f0e:	d153      	bne.n	8016fb8 <_strtod_l+0x8f8>
 8016f10:	9b04      	ldr	r3, [sp, #16]
 8016f12:	4650      	mov	r0, sl
 8016f14:	b1d3      	cbz	r3, 8016f4c <_strtod_l+0x88c>
 8016f16:	4aad      	ldr	r2, [pc, #692]	; (80171cc <_strtod_l+0xb0c>)
 8016f18:	402a      	ands	r2, r5
 8016f1a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8016f1e:	f04f 31ff 	mov.w	r1, #4294967295
 8016f22:	d816      	bhi.n	8016f52 <_strtod_l+0x892>
 8016f24:	0d12      	lsrs	r2, r2, #20
 8016f26:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8016f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8016f2e:	4298      	cmp	r0, r3
 8016f30:	d142      	bne.n	8016fb8 <_strtod_l+0x8f8>
 8016f32:	4ba7      	ldr	r3, [pc, #668]	; (80171d0 <_strtod_l+0xb10>)
 8016f34:	429d      	cmp	r5, r3
 8016f36:	d102      	bne.n	8016f3e <_strtod_l+0x87e>
 8016f38:	3001      	adds	r0, #1
 8016f3a:	f43f addf 	beq.w	8016afc <_strtod_l+0x43c>
 8016f3e:	4ba3      	ldr	r3, [pc, #652]	; (80171cc <_strtod_l+0xb0c>)
 8016f40:	402b      	ands	r3, r5
 8016f42:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8016f46:	f04f 0a00 	mov.w	sl, #0
 8016f4a:	e7a0      	b.n	8016e8e <_strtod_l+0x7ce>
 8016f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8016f50:	e7ed      	b.n	8016f2e <_strtod_l+0x86e>
 8016f52:	460b      	mov	r3, r1
 8016f54:	e7eb      	b.n	8016f2e <_strtod_l+0x86e>
 8016f56:	bb7b      	cbnz	r3, 8016fb8 <_strtod_l+0x8f8>
 8016f58:	f1ba 0f00 	cmp.w	sl, #0
 8016f5c:	d12c      	bne.n	8016fb8 <_strtod_l+0x8f8>
 8016f5e:	9904      	ldr	r1, [sp, #16]
 8016f60:	4a9a      	ldr	r2, [pc, #616]	; (80171cc <_strtod_l+0xb0c>)
 8016f62:	465b      	mov	r3, fp
 8016f64:	b1f1      	cbz	r1, 8016fa4 <_strtod_l+0x8e4>
 8016f66:	ea02 010b 	and.w	r1, r2, fp
 8016f6a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8016f6e:	dc19      	bgt.n	8016fa4 <_strtod_l+0x8e4>
 8016f70:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8016f74:	f77f ae5b 	ble.w	8016c2e <_strtod_l+0x56e>
 8016f78:	4a96      	ldr	r2, [pc, #600]	; (80171d4 <_strtod_l+0xb14>)
 8016f7a:	2300      	movs	r3, #0
 8016f7c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8016f80:	4650      	mov	r0, sl
 8016f82:	4659      	mov	r1, fp
 8016f84:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8016f88:	f7e9 fb36 	bl	80005f8 <__aeabi_dmul>
 8016f8c:	4682      	mov	sl, r0
 8016f8e:	468b      	mov	fp, r1
 8016f90:	2900      	cmp	r1, #0
 8016f92:	f47f adbe 	bne.w	8016b12 <_strtod_l+0x452>
 8016f96:	2800      	cmp	r0, #0
 8016f98:	f47f adbb 	bne.w	8016b12 <_strtod_l+0x452>
 8016f9c:	2322      	movs	r3, #34	; 0x22
 8016f9e:	f8c9 3000 	str.w	r3, [r9]
 8016fa2:	e5b6      	b.n	8016b12 <_strtod_l+0x452>
 8016fa4:	4013      	ands	r3, r2
 8016fa6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016faa:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016fae:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8016fb2:	f04f 3aff 	mov.w	sl, #4294967295
 8016fb6:	e76a      	b.n	8016e8e <_strtod_l+0x7ce>
 8016fb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016fba:	b193      	cbz	r3, 8016fe2 <_strtod_l+0x922>
 8016fbc:	422b      	tst	r3, r5
 8016fbe:	f43f af66 	beq.w	8016e8e <_strtod_l+0x7ce>
 8016fc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016fc4:	9a04      	ldr	r2, [sp, #16]
 8016fc6:	4650      	mov	r0, sl
 8016fc8:	4659      	mov	r1, fp
 8016fca:	b173      	cbz	r3, 8016fea <_strtod_l+0x92a>
 8016fcc:	f7ff fb5b 	bl	8016686 <sulp>
 8016fd0:	4602      	mov	r2, r0
 8016fd2:	460b      	mov	r3, r1
 8016fd4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016fd8:	f7e9 f958 	bl	800028c <__adddf3>
 8016fdc:	4682      	mov	sl, r0
 8016fde:	468b      	mov	fp, r1
 8016fe0:	e755      	b.n	8016e8e <_strtod_l+0x7ce>
 8016fe2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016fe4:	ea13 0f0a 	tst.w	r3, sl
 8016fe8:	e7e9      	b.n	8016fbe <_strtod_l+0x8fe>
 8016fea:	f7ff fb4c 	bl	8016686 <sulp>
 8016fee:	4602      	mov	r2, r0
 8016ff0:	460b      	mov	r3, r1
 8016ff2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016ff6:	f7e9 f947 	bl	8000288 <__aeabi_dsub>
 8016ffa:	2200      	movs	r2, #0
 8016ffc:	2300      	movs	r3, #0
 8016ffe:	4682      	mov	sl, r0
 8017000:	468b      	mov	fp, r1
 8017002:	f7e9 fd61 	bl	8000ac8 <__aeabi_dcmpeq>
 8017006:	2800      	cmp	r0, #0
 8017008:	f47f ae11 	bne.w	8016c2e <_strtod_l+0x56e>
 801700c:	e73f      	b.n	8016e8e <_strtod_l+0x7ce>
 801700e:	4641      	mov	r1, r8
 8017010:	4620      	mov	r0, r4
 8017012:	f001 ff0c 	bl	8018e2e <__ratio>
 8017016:	ec57 6b10 	vmov	r6, r7, d0
 801701a:	2200      	movs	r2, #0
 801701c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017020:	ee10 0a10 	vmov	r0, s0
 8017024:	4639      	mov	r1, r7
 8017026:	f7e9 fd63 	bl	8000af0 <__aeabi_dcmple>
 801702a:	2800      	cmp	r0, #0
 801702c:	d077      	beq.n	801711e <_strtod_l+0xa5e>
 801702e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017030:	2b00      	cmp	r3, #0
 8017032:	d04a      	beq.n	80170ca <_strtod_l+0xa0a>
 8017034:	4b68      	ldr	r3, [pc, #416]	; (80171d8 <_strtod_l+0xb18>)
 8017036:	2200      	movs	r2, #0
 8017038:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801703c:	4f66      	ldr	r7, [pc, #408]	; (80171d8 <_strtod_l+0xb18>)
 801703e:	2600      	movs	r6, #0
 8017040:	4b62      	ldr	r3, [pc, #392]	; (80171cc <_strtod_l+0xb0c>)
 8017042:	402b      	ands	r3, r5
 8017044:	930f      	str	r3, [sp, #60]	; 0x3c
 8017046:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017048:	4b64      	ldr	r3, [pc, #400]	; (80171dc <_strtod_l+0xb1c>)
 801704a:	429a      	cmp	r2, r3
 801704c:	f040 80ce 	bne.w	80171ec <_strtod_l+0xb2c>
 8017050:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017054:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017058:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 801705c:	ec4b ab10 	vmov	d0, sl, fp
 8017060:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8017064:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8017068:	f001 fe1c 	bl	8018ca4 <__ulp>
 801706c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017070:	ec53 2b10 	vmov	r2, r3, d0
 8017074:	f7e9 fac0 	bl	80005f8 <__aeabi_dmul>
 8017078:	4652      	mov	r2, sl
 801707a:	465b      	mov	r3, fp
 801707c:	f7e9 f906 	bl	800028c <__adddf3>
 8017080:	460b      	mov	r3, r1
 8017082:	4952      	ldr	r1, [pc, #328]	; (80171cc <_strtod_l+0xb0c>)
 8017084:	4a56      	ldr	r2, [pc, #344]	; (80171e0 <_strtod_l+0xb20>)
 8017086:	4019      	ands	r1, r3
 8017088:	4291      	cmp	r1, r2
 801708a:	4682      	mov	sl, r0
 801708c:	d95b      	bls.n	8017146 <_strtod_l+0xa86>
 801708e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017090:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8017094:	4293      	cmp	r3, r2
 8017096:	d103      	bne.n	80170a0 <_strtod_l+0x9e0>
 8017098:	9b08      	ldr	r3, [sp, #32]
 801709a:	3301      	adds	r3, #1
 801709c:	f43f ad2e 	beq.w	8016afc <_strtod_l+0x43c>
 80170a0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80171d0 <_strtod_l+0xb10>
 80170a4:	f04f 3aff 	mov.w	sl, #4294967295
 80170a8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80170aa:	4648      	mov	r0, r9
 80170ac:	f001 fb62 	bl	8018774 <_Bfree>
 80170b0:	9905      	ldr	r1, [sp, #20]
 80170b2:	4648      	mov	r0, r9
 80170b4:	f001 fb5e 	bl	8018774 <_Bfree>
 80170b8:	4641      	mov	r1, r8
 80170ba:	4648      	mov	r0, r9
 80170bc:	f001 fb5a 	bl	8018774 <_Bfree>
 80170c0:	4621      	mov	r1, r4
 80170c2:	4648      	mov	r0, r9
 80170c4:	f001 fb56 	bl	8018774 <_Bfree>
 80170c8:	e619      	b.n	8016cfe <_strtod_l+0x63e>
 80170ca:	f1ba 0f00 	cmp.w	sl, #0
 80170ce:	d11a      	bne.n	8017106 <_strtod_l+0xa46>
 80170d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80170d4:	b9eb      	cbnz	r3, 8017112 <_strtod_l+0xa52>
 80170d6:	2200      	movs	r2, #0
 80170d8:	4b3f      	ldr	r3, [pc, #252]	; (80171d8 <_strtod_l+0xb18>)
 80170da:	4630      	mov	r0, r6
 80170dc:	4639      	mov	r1, r7
 80170de:	f7e9 fcfd 	bl	8000adc <__aeabi_dcmplt>
 80170e2:	b9c8      	cbnz	r0, 8017118 <_strtod_l+0xa58>
 80170e4:	4630      	mov	r0, r6
 80170e6:	4639      	mov	r1, r7
 80170e8:	2200      	movs	r2, #0
 80170ea:	4b3e      	ldr	r3, [pc, #248]	; (80171e4 <_strtod_l+0xb24>)
 80170ec:	f7e9 fa84 	bl	80005f8 <__aeabi_dmul>
 80170f0:	4606      	mov	r6, r0
 80170f2:	460f      	mov	r7, r1
 80170f4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80170f8:	9618      	str	r6, [sp, #96]	; 0x60
 80170fa:	9319      	str	r3, [sp, #100]	; 0x64
 80170fc:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8017100:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017104:	e79c      	b.n	8017040 <_strtod_l+0x980>
 8017106:	f1ba 0f01 	cmp.w	sl, #1
 801710a:	d102      	bne.n	8017112 <_strtod_l+0xa52>
 801710c:	2d00      	cmp	r5, #0
 801710e:	f43f ad8e 	beq.w	8016c2e <_strtod_l+0x56e>
 8017112:	2200      	movs	r2, #0
 8017114:	4b34      	ldr	r3, [pc, #208]	; (80171e8 <_strtod_l+0xb28>)
 8017116:	e78f      	b.n	8017038 <_strtod_l+0x978>
 8017118:	2600      	movs	r6, #0
 801711a:	4f32      	ldr	r7, [pc, #200]	; (80171e4 <_strtod_l+0xb24>)
 801711c:	e7ea      	b.n	80170f4 <_strtod_l+0xa34>
 801711e:	4b31      	ldr	r3, [pc, #196]	; (80171e4 <_strtod_l+0xb24>)
 8017120:	4630      	mov	r0, r6
 8017122:	4639      	mov	r1, r7
 8017124:	2200      	movs	r2, #0
 8017126:	f7e9 fa67 	bl	80005f8 <__aeabi_dmul>
 801712a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801712c:	4606      	mov	r6, r0
 801712e:	460f      	mov	r7, r1
 8017130:	b933      	cbnz	r3, 8017140 <_strtod_l+0xa80>
 8017132:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017136:	9010      	str	r0, [sp, #64]	; 0x40
 8017138:	9311      	str	r3, [sp, #68]	; 0x44
 801713a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801713e:	e7df      	b.n	8017100 <_strtod_l+0xa40>
 8017140:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8017144:	e7f9      	b.n	801713a <_strtod_l+0xa7a>
 8017146:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801714a:	9b04      	ldr	r3, [sp, #16]
 801714c:	2b00      	cmp	r3, #0
 801714e:	d1ab      	bne.n	80170a8 <_strtod_l+0x9e8>
 8017150:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017154:	0d1b      	lsrs	r3, r3, #20
 8017156:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017158:	051b      	lsls	r3, r3, #20
 801715a:	429a      	cmp	r2, r3
 801715c:	465d      	mov	r5, fp
 801715e:	d1a3      	bne.n	80170a8 <_strtod_l+0x9e8>
 8017160:	4639      	mov	r1, r7
 8017162:	4630      	mov	r0, r6
 8017164:	f7e9 fcf8 	bl	8000b58 <__aeabi_d2iz>
 8017168:	f7e9 f9dc 	bl	8000524 <__aeabi_i2d>
 801716c:	460b      	mov	r3, r1
 801716e:	4602      	mov	r2, r0
 8017170:	4639      	mov	r1, r7
 8017172:	4630      	mov	r0, r6
 8017174:	f7e9 f888 	bl	8000288 <__aeabi_dsub>
 8017178:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801717a:	4606      	mov	r6, r0
 801717c:	460f      	mov	r7, r1
 801717e:	b933      	cbnz	r3, 801718e <_strtod_l+0xace>
 8017180:	f1ba 0f00 	cmp.w	sl, #0
 8017184:	d103      	bne.n	801718e <_strtod_l+0xace>
 8017186:	f3cb 0513 	ubfx	r5, fp, #0, #20
 801718a:	2d00      	cmp	r5, #0
 801718c:	d06d      	beq.n	801726a <_strtod_l+0xbaa>
 801718e:	a30a      	add	r3, pc, #40	; (adr r3, 80171b8 <_strtod_l+0xaf8>)
 8017190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017194:	4630      	mov	r0, r6
 8017196:	4639      	mov	r1, r7
 8017198:	f7e9 fca0 	bl	8000adc <__aeabi_dcmplt>
 801719c:	2800      	cmp	r0, #0
 801719e:	f47f acb8 	bne.w	8016b12 <_strtod_l+0x452>
 80171a2:	a307      	add	r3, pc, #28	; (adr r3, 80171c0 <_strtod_l+0xb00>)
 80171a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171a8:	4630      	mov	r0, r6
 80171aa:	4639      	mov	r1, r7
 80171ac:	f7e9 fcb4 	bl	8000b18 <__aeabi_dcmpgt>
 80171b0:	2800      	cmp	r0, #0
 80171b2:	f43f af79 	beq.w	80170a8 <_strtod_l+0x9e8>
 80171b6:	e4ac      	b.n	8016b12 <_strtod_l+0x452>
 80171b8:	94a03595 	.word	0x94a03595
 80171bc:	3fdfffff 	.word	0x3fdfffff
 80171c0:	35afe535 	.word	0x35afe535
 80171c4:	3fe00000 	.word	0x3fe00000
 80171c8:	000fffff 	.word	0x000fffff
 80171cc:	7ff00000 	.word	0x7ff00000
 80171d0:	7fefffff 	.word	0x7fefffff
 80171d4:	39500000 	.word	0x39500000
 80171d8:	3ff00000 	.word	0x3ff00000
 80171dc:	7fe00000 	.word	0x7fe00000
 80171e0:	7c9fffff 	.word	0x7c9fffff
 80171e4:	3fe00000 	.word	0x3fe00000
 80171e8:	bff00000 	.word	0xbff00000
 80171ec:	9b04      	ldr	r3, [sp, #16]
 80171ee:	b333      	cbz	r3, 801723e <_strtod_l+0xb7e>
 80171f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80171f2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80171f6:	d822      	bhi.n	801723e <_strtod_l+0xb7e>
 80171f8:	a327      	add	r3, pc, #156	; (adr r3, 8017298 <_strtod_l+0xbd8>)
 80171fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171fe:	4630      	mov	r0, r6
 8017200:	4639      	mov	r1, r7
 8017202:	f7e9 fc75 	bl	8000af0 <__aeabi_dcmple>
 8017206:	b1a0      	cbz	r0, 8017232 <_strtod_l+0xb72>
 8017208:	4639      	mov	r1, r7
 801720a:	4630      	mov	r0, r6
 801720c:	f7e9 fccc 	bl	8000ba8 <__aeabi_d2uiz>
 8017210:	2800      	cmp	r0, #0
 8017212:	bf08      	it	eq
 8017214:	2001      	moveq	r0, #1
 8017216:	f7e9 f975 	bl	8000504 <__aeabi_ui2d>
 801721a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801721c:	4606      	mov	r6, r0
 801721e:	460f      	mov	r7, r1
 8017220:	bb03      	cbnz	r3, 8017264 <_strtod_l+0xba4>
 8017222:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017226:	9012      	str	r0, [sp, #72]	; 0x48
 8017228:	9313      	str	r3, [sp, #76]	; 0x4c
 801722a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801722e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017232:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017234:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017236:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801723a:	1a9b      	subs	r3, r3, r2
 801723c:	930b      	str	r3, [sp, #44]	; 0x2c
 801723e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8017242:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8017246:	f001 fd2d 	bl	8018ca4 <__ulp>
 801724a:	4650      	mov	r0, sl
 801724c:	ec53 2b10 	vmov	r2, r3, d0
 8017250:	4659      	mov	r1, fp
 8017252:	f7e9 f9d1 	bl	80005f8 <__aeabi_dmul>
 8017256:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801725a:	f7e9 f817 	bl	800028c <__adddf3>
 801725e:	4682      	mov	sl, r0
 8017260:	468b      	mov	fp, r1
 8017262:	e772      	b.n	801714a <_strtod_l+0xa8a>
 8017264:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8017268:	e7df      	b.n	801722a <_strtod_l+0xb6a>
 801726a:	a30d      	add	r3, pc, #52	; (adr r3, 80172a0 <_strtod_l+0xbe0>)
 801726c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017270:	f7e9 fc34 	bl	8000adc <__aeabi_dcmplt>
 8017274:	e79c      	b.n	80171b0 <_strtod_l+0xaf0>
 8017276:	2300      	movs	r3, #0
 8017278:	930d      	str	r3, [sp, #52]	; 0x34
 801727a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801727c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801727e:	6013      	str	r3, [r2, #0]
 8017280:	f7ff ba61 	b.w	8016746 <_strtod_l+0x86>
 8017284:	2b65      	cmp	r3, #101	; 0x65
 8017286:	f04f 0200 	mov.w	r2, #0
 801728a:	f43f ab4e 	beq.w	801692a <_strtod_l+0x26a>
 801728e:	2101      	movs	r1, #1
 8017290:	4614      	mov	r4, r2
 8017292:	9104      	str	r1, [sp, #16]
 8017294:	f7ff bacb 	b.w	801682e <_strtod_l+0x16e>
 8017298:	ffc00000 	.word	0xffc00000
 801729c:	41dfffff 	.word	0x41dfffff
 80172a0:	94a03595 	.word	0x94a03595
 80172a4:	3fcfffff 	.word	0x3fcfffff

080172a8 <_strtod_r>:
 80172a8:	4b05      	ldr	r3, [pc, #20]	; (80172c0 <_strtod_r+0x18>)
 80172aa:	681b      	ldr	r3, [r3, #0]
 80172ac:	b410      	push	{r4}
 80172ae:	6a1b      	ldr	r3, [r3, #32]
 80172b0:	4c04      	ldr	r4, [pc, #16]	; (80172c4 <_strtod_r+0x1c>)
 80172b2:	2b00      	cmp	r3, #0
 80172b4:	bf08      	it	eq
 80172b6:	4623      	moveq	r3, r4
 80172b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80172bc:	f7ff ba00 	b.w	80166c0 <_strtod_l>
 80172c0:	20000e0c 	.word	0x20000e0c
 80172c4:	20000e70 	.word	0x20000e70

080172c8 <_strtol_l.isra.0>:
 80172c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80172cc:	4680      	mov	r8, r0
 80172ce:	4689      	mov	r9, r1
 80172d0:	4692      	mov	sl, r2
 80172d2:	461e      	mov	r6, r3
 80172d4:	460f      	mov	r7, r1
 80172d6:	463d      	mov	r5, r7
 80172d8:	9808      	ldr	r0, [sp, #32]
 80172da:	f815 4b01 	ldrb.w	r4, [r5], #1
 80172de:	f001 f9ed 	bl	80186bc <__locale_ctype_ptr_l>
 80172e2:	4420      	add	r0, r4
 80172e4:	7843      	ldrb	r3, [r0, #1]
 80172e6:	f013 0308 	ands.w	r3, r3, #8
 80172ea:	d132      	bne.n	8017352 <_strtol_l.isra.0+0x8a>
 80172ec:	2c2d      	cmp	r4, #45	; 0x2d
 80172ee:	d132      	bne.n	8017356 <_strtol_l.isra.0+0x8e>
 80172f0:	787c      	ldrb	r4, [r7, #1]
 80172f2:	1cbd      	adds	r5, r7, #2
 80172f4:	2201      	movs	r2, #1
 80172f6:	2e00      	cmp	r6, #0
 80172f8:	d05d      	beq.n	80173b6 <_strtol_l.isra.0+0xee>
 80172fa:	2e10      	cmp	r6, #16
 80172fc:	d109      	bne.n	8017312 <_strtol_l.isra.0+0x4a>
 80172fe:	2c30      	cmp	r4, #48	; 0x30
 8017300:	d107      	bne.n	8017312 <_strtol_l.isra.0+0x4a>
 8017302:	782b      	ldrb	r3, [r5, #0]
 8017304:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017308:	2b58      	cmp	r3, #88	; 0x58
 801730a:	d14f      	bne.n	80173ac <_strtol_l.isra.0+0xe4>
 801730c:	786c      	ldrb	r4, [r5, #1]
 801730e:	2610      	movs	r6, #16
 8017310:	3502      	adds	r5, #2
 8017312:	2a00      	cmp	r2, #0
 8017314:	bf14      	ite	ne
 8017316:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801731a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801731e:	2700      	movs	r7, #0
 8017320:	fbb1 fcf6 	udiv	ip, r1, r6
 8017324:	4638      	mov	r0, r7
 8017326:	fb06 1e1c 	mls	lr, r6, ip, r1
 801732a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801732e:	2b09      	cmp	r3, #9
 8017330:	d817      	bhi.n	8017362 <_strtol_l.isra.0+0x9a>
 8017332:	461c      	mov	r4, r3
 8017334:	42a6      	cmp	r6, r4
 8017336:	dd23      	ble.n	8017380 <_strtol_l.isra.0+0xb8>
 8017338:	1c7b      	adds	r3, r7, #1
 801733a:	d007      	beq.n	801734c <_strtol_l.isra.0+0x84>
 801733c:	4584      	cmp	ip, r0
 801733e:	d31c      	bcc.n	801737a <_strtol_l.isra.0+0xb2>
 8017340:	d101      	bne.n	8017346 <_strtol_l.isra.0+0x7e>
 8017342:	45a6      	cmp	lr, r4
 8017344:	db19      	blt.n	801737a <_strtol_l.isra.0+0xb2>
 8017346:	fb00 4006 	mla	r0, r0, r6, r4
 801734a:	2701      	movs	r7, #1
 801734c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017350:	e7eb      	b.n	801732a <_strtol_l.isra.0+0x62>
 8017352:	462f      	mov	r7, r5
 8017354:	e7bf      	b.n	80172d6 <_strtol_l.isra.0+0xe>
 8017356:	2c2b      	cmp	r4, #43	; 0x2b
 8017358:	bf04      	itt	eq
 801735a:	1cbd      	addeq	r5, r7, #2
 801735c:	787c      	ldrbeq	r4, [r7, #1]
 801735e:	461a      	mov	r2, r3
 8017360:	e7c9      	b.n	80172f6 <_strtol_l.isra.0+0x2e>
 8017362:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8017366:	2b19      	cmp	r3, #25
 8017368:	d801      	bhi.n	801736e <_strtol_l.isra.0+0xa6>
 801736a:	3c37      	subs	r4, #55	; 0x37
 801736c:	e7e2      	b.n	8017334 <_strtol_l.isra.0+0x6c>
 801736e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8017372:	2b19      	cmp	r3, #25
 8017374:	d804      	bhi.n	8017380 <_strtol_l.isra.0+0xb8>
 8017376:	3c57      	subs	r4, #87	; 0x57
 8017378:	e7dc      	b.n	8017334 <_strtol_l.isra.0+0x6c>
 801737a:	f04f 37ff 	mov.w	r7, #4294967295
 801737e:	e7e5      	b.n	801734c <_strtol_l.isra.0+0x84>
 8017380:	1c7b      	adds	r3, r7, #1
 8017382:	d108      	bne.n	8017396 <_strtol_l.isra.0+0xce>
 8017384:	2322      	movs	r3, #34	; 0x22
 8017386:	f8c8 3000 	str.w	r3, [r8]
 801738a:	4608      	mov	r0, r1
 801738c:	f1ba 0f00 	cmp.w	sl, #0
 8017390:	d107      	bne.n	80173a2 <_strtol_l.isra.0+0xda>
 8017392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017396:	b102      	cbz	r2, 801739a <_strtol_l.isra.0+0xd2>
 8017398:	4240      	negs	r0, r0
 801739a:	f1ba 0f00 	cmp.w	sl, #0
 801739e:	d0f8      	beq.n	8017392 <_strtol_l.isra.0+0xca>
 80173a0:	b10f      	cbz	r7, 80173a6 <_strtol_l.isra.0+0xde>
 80173a2:	f105 39ff 	add.w	r9, r5, #4294967295
 80173a6:	f8ca 9000 	str.w	r9, [sl]
 80173aa:	e7f2      	b.n	8017392 <_strtol_l.isra.0+0xca>
 80173ac:	2430      	movs	r4, #48	; 0x30
 80173ae:	2e00      	cmp	r6, #0
 80173b0:	d1af      	bne.n	8017312 <_strtol_l.isra.0+0x4a>
 80173b2:	2608      	movs	r6, #8
 80173b4:	e7ad      	b.n	8017312 <_strtol_l.isra.0+0x4a>
 80173b6:	2c30      	cmp	r4, #48	; 0x30
 80173b8:	d0a3      	beq.n	8017302 <_strtol_l.isra.0+0x3a>
 80173ba:	260a      	movs	r6, #10
 80173bc:	e7a9      	b.n	8017312 <_strtol_l.isra.0+0x4a>
	...

080173c0 <_strtol_r>:
 80173c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80173c2:	4c06      	ldr	r4, [pc, #24]	; (80173dc <_strtol_r+0x1c>)
 80173c4:	4d06      	ldr	r5, [pc, #24]	; (80173e0 <_strtol_r+0x20>)
 80173c6:	6824      	ldr	r4, [r4, #0]
 80173c8:	6a24      	ldr	r4, [r4, #32]
 80173ca:	2c00      	cmp	r4, #0
 80173cc:	bf08      	it	eq
 80173ce:	462c      	moveq	r4, r5
 80173d0:	9400      	str	r4, [sp, #0]
 80173d2:	f7ff ff79 	bl	80172c8 <_strtol_l.isra.0>
 80173d6:	b003      	add	sp, #12
 80173d8:	bd30      	pop	{r4, r5, pc}
 80173da:	bf00      	nop
 80173dc:	20000e0c 	.word	0x20000e0c
 80173e0:	20000e70 	.word	0x20000e70

080173e4 <quorem>:
 80173e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173e8:	6903      	ldr	r3, [r0, #16]
 80173ea:	690c      	ldr	r4, [r1, #16]
 80173ec:	42a3      	cmp	r3, r4
 80173ee:	4680      	mov	r8, r0
 80173f0:	f2c0 8082 	blt.w	80174f8 <quorem+0x114>
 80173f4:	3c01      	subs	r4, #1
 80173f6:	f101 0714 	add.w	r7, r1, #20
 80173fa:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80173fe:	f100 0614 	add.w	r6, r0, #20
 8017402:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8017406:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801740a:	eb06 030c 	add.w	r3, r6, ip
 801740e:	3501      	adds	r5, #1
 8017410:	eb07 090c 	add.w	r9, r7, ip
 8017414:	9301      	str	r3, [sp, #4]
 8017416:	fbb0 f5f5 	udiv	r5, r0, r5
 801741a:	b395      	cbz	r5, 8017482 <quorem+0x9e>
 801741c:	f04f 0a00 	mov.w	sl, #0
 8017420:	4638      	mov	r0, r7
 8017422:	46b6      	mov	lr, r6
 8017424:	46d3      	mov	fp, sl
 8017426:	f850 2b04 	ldr.w	r2, [r0], #4
 801742a:	b293      	uxth	r3, r2
 801742c:	fb05 a303 	mla	r3, r5, r3, sl
 8017430:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017434:	b29b      	uxth	r3, r3
 8017436:	ebab 0303 	sub.w	r3, fp, r3
 801743a:	0c12      	lsrs	r2, r2, #16
 801743c:	f8de b000 	ldr.w	fp, [lr]
 8017440:	fb05 a202 	mla	r2, r5, r2, sl
 8017444:	fa13 f38b 	uxtah	r3, r3, fp
 8017448:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801744c:	fa1f fb82 	uxth.w	fp, r2
 8017450:	f8de 2000 	ldr.w	r2, [lr]
 8017454:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8017458:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801745c:	b29b      	uxth	r3, r3
 801745e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017462:	4581      	cmp	r9, r0
 8017464:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8017468:	f84e 3b04 	str.w	r3, [lr], #4
 801746c:	d2db      	bcs.n	8017426 <quorem+0x42>
 801746e:	f856 300c 	ldr.w	r3, [r6, ip]
 8017472:	b933      	cbnz	r3, 8017482 <quorem+0x9e>
 8017474:	9b01      	ldr	r3, [sp, #4]
 8017476:	3b04      	subs	r3, #4
 8017478:	429e      	cmp	r6, r3
 801747a:	461a      	mov	r2, r3
 801747c:	d330      	bcc.n	80174e0 <quorem+0xfc>
 801747e:	f8c8 4010 	str.w	r4, [r8, #16]
 8017482:	4640      	mov	r0, r8
 8017484:	f001 fb96 	bl	8018bb4 <__mcmp>
 8017488:	2800      	cmp	r0, #0
 801748a:	db25      	blt.n	80174d8 <quorem+0xf4>
 801748c:	3501      	adds	r5, #1
 801748e:	4630      	mov	r0, r6
 8017490:	f04f 0c00 	mov.w	ip, #0
 8017494:	f857 2b04 	ldr.w	r2, [r7], #4
 8017498:	f8d0 e000 	ldr.w	lr, [r0]
 801749c:	b293      	uxth	r3, r2
 801749e:	ebac 0303 	sub.w	r3, ip, r3
 80174a2:	0c12      	lsrs	r2, r2, #16
 80174a4:	fa13 f38e 	uxtah	r3, r3, lr
 80174a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80174ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80174b0:	b29b      	uxth	r3, r3
 80174b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80174b6:	45b9      	cmp	r9, r7
 80174b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80174bc:	f840 3b04 	str.w	r3, [r0], #4
 80174c0:	d2e8      	bcs.n	8017494 <quorem+0xb0>
 80174c2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80174c6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80174ca:	b92a      	cbnz	r2, 80174d8 <quorem+0xf4>
 80174cc:	3b04      	subs	r3, #4
 80174ce:	429e      	cmp	r6, r3
 80174d0:	461a      	mov	r2, r3
 80174d2:	d30b      	bcc.n	80174ec <quorem+0x108>
 80174d4:	f8c8 4010 	str.w	r4, [r8, #16]
 80174d8:	4628      	mov	r0, r5
 80174da:	b003      	add	sp, #12
 80174dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174e0:	6812      	ldr	r2, [r2, #0]
 80174e2:	3b04      	subs	r3, #4
 80174e4:	2a00      	cmp	r2, #0
 80174e6:	d1ca      	bne.n	801747e <quorem+0x9a>
 80174e8:	3c01      	subs	r4, #1
 80174ea:	e7c5      	b.n	8017478 <quorem+0x94>
 80174ec:	6812      	ldr	r2, [r2, #0]
 80174ee:	3b04      	subs	r3, #4
 80174f0:	2a00      	cmp	r2, #0
 80174f2:	d1ef      	bne.n	80174d4 <quorem+0xf0>
 80174f4:	3c01      	subs	r4, #1
 80174f6:	e7ea      	b.n	80174ce <quorem+0xea>
 80174f8:	2000      	movs	r0, #0
 80174fa:	e7ee      	b.n	80174da <quorem+0xf6>
 80174fc:	0000      	movs	r0, r0
	...

08017500 <_dtoa_r>:
 8017500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017504:	ec57 6b10 	vmov	r6, r7, d0
 8017508:	b097      	sub	sp, #92	; 0x5c
 801750a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801750c:	9106      	str	r1, [sp, #24]
 801750e:	4604      	mov	r4, r0
 8017510:	920b      	str	r2, [sp, #44]	; 0x2c
 8017512:	9312      	str	r3, [sp, #72]	; 0x48
 8017514:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017518:	e9cd 6700 	strd	r6, r7, [sp]
 801751c:	b93d      	cbnz	r5, 801752e <_dtoa_r+0x2e>
 801751e:	2010      	movs	r0, #16
 8017520:	f7fe f916 	bl	8015750 <malloc>
 8017524:	6260      	str	r0, [r4, #36]	; 0x24
 8017526:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801752a:	6005      	str	r5, [r0, #0]
 801752c:	60c5      	str	r5, [r0, #12]
 801752e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017530:	6819      	ldr	r1, [r3, #0]
 8017532:	b151      	cbz	r1, 801754a <_dtoa_r+0x4a>
 8017534:	685a      	ldr	r2, [r3, #4]
 8017536:	604a      	str	r2, [r1, #4]
 8017538:	2301      	movs	r3, #1
 801753a:	4093      	lsls	r3, r2
 801753c:	608b      	str	r3, [r1, #8]
 801753e:	4620      	mov	r0, r4
 8017540:	f001 f918 	bl	8018774 <_Bfree>
 8017544:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017546:	2200      	movs	r2, #0
 8017548:	601a      	str	r2, [r3, #0]
 801754a:	1e3b      	subs	r3, r7, #0
 801754c:	bfbb      	ittet	lt
 801754e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017552:	9301      	strlt	r3, [sp, #4]
 8017554:	2300      	movge	r3, #0
 8017556:	2201      	movlt	r2, #1
 8017558:	bfac      	ite	ge
 801755a:	f8c8 3000 	strge.w	r3, [r8]
 801755e:	f8c8 2000 	strlt.w	r2, [r8]
 8017562:	4baf      	ldr	r3, [pc, #700]	; (8017820 <_dtoa_r+0x320>)
 8017564:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8017568:	ea33 0308 	bics.w	r3, r3, r8
 801756c:	d114      	bne.n	8017598 <_dtoa_r+0x98>
 801756e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017570:	f242 730f 	movw	r3, #9999	; 0x270f
 8017574:	6013      	str	r3, [r2, #0]
 8017576:	9b00      	ldr	r3, [sp, #0]
 8017578:	b923      	cbnz	r3, 8017584 <_dtoa_r+0x84>
 801757a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801757e:	2800      	cmp	r0, #0
 8017580:	f000 8542 	beq.w	8018008 <_dtoa_r+0xb08>
 8017584:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017586:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8017834 <_dtoa_r+0x334>
 801758a:	2b00      	cmp	r3, #0
 801758c:	f000 8544 	beq.w	8018018 <_dtoa_r+0xb18>
 8017590:	f10b 0303 	add.w	r3, fp, #3
 8017594:	f000 bd3e 	b.w	8018014 <_dtoa_r+0xb14>
 8017598:	e9dd 6700 	ldrd	r6, r7, [sp]
 801759c:	2200      	movs	r2, #0
 801759e:	2300      	movs	r3, #0
 80175a0:	4630      	mov	r0, r6
 80175a2:	4639      	mov	r1, r7
 80175a4:	f7e9 fa90 	bl	8000ac8 <__aeabi_dcmpeq>
 80175a8:	4681      	mov	r9, r0
 80175aa:	b168      	cbz	r0, 80175c8 <_dtoa_r+0xc8>
 80175ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80175ae:	2301      	movs	r3, #1
 80175b0:	6013      	str	r3, [r2, #0]
 80175b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	f000 8524 	beq.w	8018002 <_dtoa_r+0xb02>
 80175ba:	4b9a      	ldr	r3, [pc, #616]	; (8017824 <_dtoa_r+0x324>)
 80175bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80175be:	f103 3bff 	add.w	fp, r3, #4294967295
 80175c2:	6013      	str	r3, [r2, #0]
 80175c4:	f000 bd28 	b.w	8018018 <_dtoa_r+0xb18>
 80175c8:	aa14      	add	r2, sp, #80	; 0x50
 80175ca:	a915      	add	r1, sp, #84	; 0x54
 80175cc:	ec47 6b10 	vmov	d0, r6, r7
 80175d0:	4620      	mov	r0, r4
 80175d2:	f001 fbdd 	bl	8018d90 <__d2b>
 80175d6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80175da:	9004      	str	r0, [sp, #16]
 80175dc:	2d00      	cmp	r5, #0
 80175de:	d07c      	beq.n	80176da <_dtoa_r+0x1da>
 80175e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80175e4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80175e8:	46b2      	mov	sl, r6
 80175ea:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80175ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80175f2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80175f6:	2200      	movs	r2, #0
 80175f8:	4b8b      	ldr	r3, [pc, #556]	; (8017828 <_dtoa_r+0x328>)
 80175fa:	4650      	mov	r0, sl
 80175fc:	4659      	mov	r1, fp
 80175fe:	f7e8 fe43 	bl	8000288 <__aeabi_dsub>
 8017602:	a381      	add	r3, pc, #516	; (adr r3, 8017808 <_dtoa_r+0x308>)
 8017604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017608:	f7e8 fff6 	bl	80005f8 <__aeabi_dmul>
 801760c:	a380      	add	r3, pc, #512	; (adr r3, 8017810 <_dtoa_r+0x310>)
 801760e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017612:	f7e8 fe3b 	bl	800028c <__adddf3>
 8017616:	4606      	mov	r6, r0
 8017618:	4628      	mov	r0, r5
 801761a:	460f      	mov	r7, r1
 801761c:	f7e8 ff82 	bl	8000524 <__aeabi_i2d>
 8017620:	a37d      	add	r3, pc, #500	; (adr r3, 8017818 <_dtoa_r+0x318>)
 8017622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017626:	f7e8 ffe7 	bl	80005f8 <__aeabi_dmul>
 801762a:	4602      	mov	r2, r0
 801762c:	460b      	mov	r3, r1
 801762e:	4630      	mov	r0, r6
 8017630:	4639      	mov	r1, r7
 8017632:	f7e8 fe2b 	bl	800028c <__adddf3>
 8017636:	4606      	mov	r6, r0
 8017638:	460f      	mov	r7, r1
 801763a:	f7e9 fa8d 	bl	8000b58 <__aeabi_d2iz>
 801763e:	2200      	movs	r2, #0
 8017640:	4682      	mov	sl, r0
 8017642:	2300      	movs	r3, #0
 8017644:	4630      	mov	r0, r6
 8017646:	4639      	mov	r1, r7
 8017648:	f7e9 fa48 	bl	8000adc <__aeabi_dcmplt>
 801764c:	b148      	cbz	r0, 8017662 <_dtoa_r+0x162>
 801764e:	4650      	mov	r0, sl
 8017650:	f7e8 ff68 	bl	8000524 <__aeabi_i2d>
 8017654:	4632      	mov	r2, r6
 8017656:	463b      	mov	r3, r7
 8017658:	f7e9 fa36 	bl	8000ac8 <__aeabi_dcmpeq>
 801765c:	b908      	cbnz	r0, 8017662 <_dtoa_r+0x162>
 801765e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017662:	f1ba 0f16 	cmp.w	sl, #22
 8017666:	d859      	bhi.n	801771c <_dtoa_r+0x21c>
 8017668:	4970      	ldr	r1, [pc, #448]	; (801782c <_dtoa_r+0x32c>)
 801766a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801766e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017672:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017676:	f7e9 fa4f 	bl	8000b18 <__aeabi_dcmpgt>
 801767a:	2800      	cmp	r0, #0
 801767c:	d050      	beq.n	8017720 <_dtoa_r+0x220>
 801767e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017682:	2300      	movs	r3, #0
 8017684:	930f      	str	r3, [sp, #60]	; 0x3c
 8017686:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017688:	1b5d      	subs	r5, r3, r5
 801768a:	f1b5 0801 	subs.w	r8, r5, #1
 801768e:	bf49      	itett	mi
 8017690:	f1c5 0301 	rsbmi	r3, r5, #1
 8017694:	2300      	movpl	r3, #0
 8017696:	9305      	strmi	r3, [sp, #20]
 8017698:	f04f 0800 	movmi.w	r8, #0
 801769c:	bf58      	it	pl
 801769e:	9305      	strpl	r3, [sp, #20]
 80176a0:	f1ba 0f00 	cmp.w	sl, #0
 80176a4:	db3e      	blt.n	8017724 <_dtoa_r+0x224>
 80176a6:	2300      	movs	r3, #0
 80176a8:	44d0      	add	r8, sl
 80176aa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80176ae:	9307      	str	r3, [sp, #28]
 80176b0:	9b06      	ldr	r3, [sp, #24]
 80176b2:	2b09      	cmp	r3, #9
 80176b4:	f200 8090 	bhi.w	80177d8 <_dtoa_r+0x2d8>
 80176b8:	2b05      	cmp	r3, #5
 80176ba:	bfc4      	itt	gt
 80176bc:	3b04      	subgt	r3, #4
 80176be:	9306      	strgt	r3, [sp, #24]
 80176c0:	9b06      	ldr	r3, [sp, #24]
 80176c2:	f1a3 0302 	sub.w	r3, r3, #2
 80176c6:	bfcc      	ite	gt
 80176c8:	2500      	movgt	r5, #0
 80176ca:	2501      	movle	r5, #1
 80176cc:	2b03      	cmp	r3, #3
 80176ce:	f200 808f 	bhi.w	80177f0 <_dtoa_r+0x2f0>
 80176d2:	e8df f003 	tbb	[pc, r3]
 80176d6:	7f7d      	.short	0x7f7d
 80176d8:	7131      	.short	0x7131
 80176da:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80176de:	441d      	add	r5, r3
 80176e0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80176e4:	2820      	cmp	r0, #32
 80176e6:	dd13      	ble.n	8017710 <_dtoa_r+0x210>
 80176e8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80176ec:	9b00      	ldr	r3, [sp, #0]
 80176ee:	fa08 f800 	lsl.w	r8, r8, r0
 80176f2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80176f6:	fa23 f000 	lsr.w	r0, r3, r0
 80176fa:	ea48 0000 	orr.w	r0, r8, r0
 80176fe:	f7e8 ff01 	bl	8000504 <__aeabi_ui2d>
 8017702:	2301      	movs	r3, #1
 8017704:	4682      	mov	sl, r0
 8017706:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801770a:	3d01      	subs	r5, #1
 801770c:	9313      	str	r3, [sp, #76]	; 0x4c
 801770e:	e772      	b.n	80175f6 <_dtoa_r+0xf6>
 8017710:	9b00      	ldr	r3, [sp, #0]
 8017712:	f1c0 0020 	rsb	r0, r0, #32
 8017716:	fa03 f000 	lsl.w	r0, r3, r0
 801771a:	e7f0      	b.n	80176fe <_dtoa_r+0x1fe>
 801771c:	2301      	movs	r3, #1
 801771e:	e7b1      	b.n	8017684 <_dtoa_r+0x184>
 8017720:	900f      	str	r0, [sp, #60]	; 0x3c
 8017722:	e7b0      	b.n	8017686 <_dtoa_r+0x186>
 8017724:	9b05      	ldr	r3, [sp, #20]
 8017726:	eba3 030a 	sub.w	r3, r3, sl
 801772a:	9305      	str	r3, [sp, #20]
 801772c:	f1ca 0300 	rsb	r3, sl, #0
 8017730:	9307      	str	r3, [sp, #28]
 8017732:	2300      	movs	r3, #0
 8017734:	930e      	str	r3, [sp, #56]	; 0x38
 8017736:	e7bb      	b.n	80176b0 <_dtoa_r+0x1b0>
 8017738:	2301      	movs	r3, #1
 801773a:	930a      	str	r3, [sp, #40]	; 0x28
 801773c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801773e:	2b00      	cmp	r3, #0
 8017740:	dd59      	ble.n	80177f6 <_dtoa_r+0x2f6>
 8017742:	9302      	str	r3, [sp, #8]
 8017744:	4699      	mov	r9, r3
 8017746:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017748:	2200      	movs	r2, #0
 801774a:	6072      	str	r2, [r6, #4]
 801774c:	2204      	movs	r2, #4
 801774e:	f102 0014 	add.w	r0, r2, #20
 8017752:	4298      	cmp	r0, r3
 8017754:	6871      	ldr	r1, [r6, #4]
 8017756:	d953      	bls.n	8017800 <_dtoa_r+0x300>
 8017758:	4620      	mov	r0, r4
 801775a:	f000 ffd7 	bl	801870c <_Balloc>
 801775e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017760:	6030      	str	r0, [r6, #0]
 8017762:	f1b9 0f0e 	cmp.w	r9, #14
 8017766:	f8d3 b000 	ldr.w	fp, [r3]
 801776a:	f200 80e6 	bhi.w	801793a <_dtoa_r+0x43a>
 801776e:	2d00      	cmp	r5, #0
 8017770:	f000 80e3 	beq.w	801793a <_dtoa_r+0x43a>
 8017774:	ed9d 7b00 	vldr	d7, [sp]
 8017778:	f1ba 0f00 	cmp.w	sl, #0
 801777c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8017780:	dd74      	ble.n	801786c <_dtoa_r+0x36c>
 8017782:	4a2a      	ldr	r2, [pc, #168]	; (801782c <_dtoa_r+0x32c>)
 8017784:	f00a 030f 	and.w	r3, sl, #15
 8017788:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801778c:	ed93 7b00 	vldr	d7, [r3]
 8017790:	ea4f 162a 	mov.w	r6, sl, asr #4
 8017794:	06f0      	lsls	r0, r6, #27
 8017796:	ed8d 7b08 	vstr	d7, [sp, #32]
 801779a:	d565      	bpl.n	8017868 <_dtoa_r+0x368>
 801779c:	4b24      	ldr	r3, [pc, #144]	; (8017830 <_dtoa_r+0x330>)
 801779e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80177a2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80177a6:	f7e9 f851 	bl	800084c <__aeabi_ddiv>
 80177aa:	e9cd 0100 	strd	r0, r1, [sp]
 80177ae:	f006 060f 	and.w	r6, r6, #15
 80177b2:	2503      	movs	r5, #3
 80177b4:	4f1e      	ldr	r7, [pc, #120]	; (8017830 <_dtoa_r+0x330>)
 80177b6:	e04c      	b.n	8017852 <_dtoa_r+0x352>
 80177b8:	2301      	movs	r3, #1
 80177ba:	930a      	str	r3, [sp, #40]	; 0x28
 80177bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80177be:	4453      	add	r3, sl
 80177c0:	f103 0901 	add.w	r9, r3, #1
 80177c4:	9302      	str	r3, [sp, #8]
 80177c6:	464b      	mov	r3, r9
 80177c8:	2b01      	cmp	r3, #1
 80177ca:	bfb8      	it	lt
 80177cc:	2301      	movlt	r3, #1
 80177ce:	e7ba      	b.n	8017746 <_dtoa_r+0x246>
 80177d0:	2300      	movs	r3, #0
 80177d2:	e7b2      	b.n	801773a <_dtoa_r+0x23a>
 80177d4:	2300      	movs	r3, #0
 80177d6:	e7f0      	b.n	80177ba <_dtoa_r+0x2ba>
 80177d8:	2501      	movs	r5, #1
 80177da:	2300      	movs	r3, #0
 80177dc:	9306      	str	r3, [sp, #24]
 80177de:	950a      	str	r5, [sp, #40]	; 0x28
 80177e0:	f04f 33ff 	mov.w	r3, #4294967295
 80177e4:	9302      	str	r3, [sp, #8]
 80177e6:	4699      	mov	r9, r3
 80177e8:	2200      	movs	r2, #0
 80177ea:	2312      	movs	r3, #18
 80177ec:	920b      	str	r2, [sp, #44]	; 0x2c
 80177ee:	e7aa      	b.n	8017746 <_dtoa_r+0x246>
 80177f0:	2301      	movs	r3, #1
 80177f2:	930a      	str	r3, [sp, #40]	; 0x28
 80177f4:	e7f4      	b.n	80177e0 <_dtoa_r+0x2e0>
 80177f6:	2301      	movs	r3, #1
 80177f8:	9302      	str	r3, [sp, #8]
 80177fa:	4699      	mov	r9, r3
 80177fc:	461a      	mov	r2, r3
 80177fe:	e7f5      	b.n	80177ec <_dtoa_r+0x2ec>
 8017800:	3101      	adds	r1, #1
 8017802:	6071      	str	r1, [r6, #4]
 8017804:	0052      	lsls	r2, r2, #1
 8017806:	e7a2      	b.n	801774e <_dtoa_r+0x24e>
 8017808:	636f4361 	.word	0x636f4361
 801780c:	3fd287a7 	.word	0x3fd287a7
 8017810:	8b60c8b3 	.word	0x8b60c8b3
 8017814:	3fc68a28 	.word	0x3fc68a28
 8017818:	509f79fb 	.word	0x509f79fb
 801781c:	3fd34413 	.word	0x3fd34413
 8017820:	7ff00000 	.word	0x7ff00000
 8017824:	0801b1ed 	.word	0x0801b1ed
 8017828:	3ff80000 	.word	0x3ff80000
 801782c:	0801b2a8 	.word	0x0801b2a8
 8017830:	0801b280 	.word	0x0801b280
 8017834:	0801b271 	.word	0x0801b271
 8017838:	07f1      	lsls	r1, r6, #31
 801783a:	d508      	bpl.n	801784e <_dtoa_r+0x34e>
 801783c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017840:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017844:	f7e8 fed8 	bl	80005f8 <__aeabi_dmul>
 8017848:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801784c:	3501      	adds	r5, #1
 801784e:	1076      	asrs	r6, r6, #1
 8017850:	3708      	adds	r7, #8
 8017852:	2e00      	cmp	r6, #0
 8017854:	d1f0      	bne.n	8017838 <_dtoa_r+0x338>
 8017856:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801785a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801785e:	f7e8 fff5 	bl	800084c <__aeabi_ddiv>
 8017862:	e9cd 0100 	strd	r0, r1, [sp]
 8017866:	e01a      	b.n	801789e <_dtoa_r+0x39e>
 8017868:	2502      	movs	r5, #2
 801786a:	e7a3      	b.n	80177b4 <_dtoa_r+0x2b4>
 801786c:	f000 80a0 	beq.w	80179b0 <_dtoa_r+0x4b0>
 8017870:	f1ca 0600 	rsb	r6, sl, #0
 8017874:	4b9f      	ldr	r3, [pc, #636]	; (8017af4 <_dtoa_r+0x5f4>)
 8017876:	4fa0      	ldr	r7, [pc, #640]	; (8017af8 <_dtoa_r+0x5f8>)
 8017878:	f006 020f 	and.w	r2, r6, #15
 801787c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017884:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017888:	f7e8 feb6 	bl	80005f8 <__aeabi_dmul>
 801788c:	e9cd 0100 	strd	r0, r1, [sp]
 8017890:	1136      	asrs	r6, r6, #4
 8017892:	2300      	movs	r3, #0
 8017894:	2502      	movs	r5, #2
 8017896:	2e00      	cmp	r6, #0
 8017898:	d17f      	bne.n	801799a <_dtoa_r+0x49a>
 801789a:	2b00      	cmp	r3, #0
 801789c:	d1e1      	bne.n	8017862 <_dtoa_r+0x362>
 801789e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80178a0:	2b00      	cmp	r3, #0
 80178a2:	f000 8087 	beq.w	80179b4 <_dtoa_r+0x4b4>
 80178a6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80178aa:	2200      	movs	r2, #0
 80178ac:	4b93      	ldr	r3, [pc, #588]	; (8017afc <_dtoa_r+0x5fc>)
 80178ae:	4630      	mov	r0, r6
 80178b0:	4639      	mov	r1, r7
 80178b2:	f7e9 f913 	bl	8000adc <__aeabi_dcmplt>
 80178b6:	2800      	cmp	r0, #0
 80178b8:	d07c      	beq.n	80179b4 <_dtoa_r+0x4b4>
 80178ba:	f1b9 0f00 	cmp.w	r9, #0
 80178be:	d079      	beq.n	80179b4 <_dtoa_r+0x4b4>
 80178c0:	9b02      	ldr	r3, [sp, #8]
 80178c2:	2b00      	cmp	r3, #0
 80178c4:	dd35      	ble.n	8017932 <_dtoa_r+0x432>
 80178c6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80178ca:	9308      	str	r3, [sp, #32]
 80178cc:	4639      	mov	r1, r7
 80178ce:	2200      	movs	r2, #0
 80178d0:	4b8b      	ldr	r3, [pc, #556]	; (8017b00 <_dtoa_r+0x600>)
 80178d2:	4630      	mov	r0, r6
 80178d4:	f7e8 fe90 	bl	80005f8 <__aeabi_dmul>
 80178d8:	e9cd 0100 	strd	r0, r1, [sp]
 80178dc:	9f02      	ldr	r7, [sp, #8]
 80178de:	3501      	adds	r5, #1
 80178e0:	4628      	mov	r0, r5
 80178e2:	f7e8 fe1f 	bl	8000524 <__aeabi_i2d>
 80178e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80178ea:	f7e8 fe85 	bl	80005f8 <__aeabi_dmul>
 80178ee:	2200      	movs	r2, #0
 80178f0:	4b84      	ldr	r3, [pc, #528]	; (8017b04 <_dtoa_r+0x604>)
 80178f2:	f7e8 fccb 	bl	800028c <__adddf3>
 80178f6:	4605      	mov	r5, r0
 80178f8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80178fc:	2f00      	cmp	r7, #0
 80178fe:	d15d      	bne.n	80179bc <_dtoa_r+0x4bc>
 8017900:	2200      	movs	r2, #0
 8017902:	4b81      	ldr	r3, [pc, #516]	; (8017b08 <_dtoa_r+0x608>)
 8017904:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017908:	f7e8 fcbe 	bl	8000288 <__aeabi_dsub>
 801790c:	462a      	mov	r2, r5
 801790e:	4633      	mov	r3, r6
 8017910:	e9cd 0100 	strd	r0, r1, [sp]
 8017914:	f7e9 f900 	bl	8000b18 <__aeabi_dcmpgt>
 8017918:	2800      	cmp	r0, #0
 801791a:	f040 8288 	bne.w	8017e2e <_dtoa_r+0x92e>
 801791e:	462a      	mov	r2, r5
 8017920:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8017924:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017928:	f7e9 f8d8 	bl	8000adc <__aeabi_dcmplt>
 801792c:	2800      	cmp	r0, #0
 801792e:	f040 827c 	bne.w	8017e2a <_dtoa_r+0x92a>
 8017932:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017936:	e9cd 2300 	strd	r2, r3, [sp]
 801793a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801793c:	2b00      	cmp	r3, #0
 801793e:	f2c0 8150 	blt.w	8017be2 <_dtoa_r+0x6e2>
 8017942:	f1ba 0f0e 	cmp.w	sl, #14
 8017946:	f300 814c 	bgt.w	8017be2 <_dtoa_r+0x6e2>
 801794a:	4b6a      	ldr	r3, [pc, #424]	; (8017af4 <_dtoa_r+0x5f4>)
 801794c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017950:	ed93 7b00 	vldr	d7, [r3]
 8017954:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017956:	2b00      	cmp	r3, #0
 8017958:	ed8d 7b02 	vstr	d7, [sp, #8]
 801795c:	f280 80d8 	bge.w	8017b10 <_dtoa_r+0x610>
 8017960:	f1b9 0f00 	cmp.w	r9, #0
 8017964:	f300 80d4 	bgt.w	8017b10 <_dtoa_r+0x610>
 8017968:	f040 825e 	bne.w	8017e28 <_dtoa_r+0x928>
 801796c:	2200      	movs	r2, #0
 801796e:	4b66      	ldr	r3, [pc, #408]	; (8017b08 <_dtoa_r+0x608>)
 8017970:	ec51 0b17 	vmov	r0, r1, d7
 8017974:	f7e8 fe40 	bl	80005f8 <__aeabi_dmul>
 8017978:	e9dd 2300 	ldrd	r2, r3, [sp]
 801797c:	f7e9 f8c2 	bl	8000b04 <__aeabi_dcmpge>
 8017980:	464f      	mov	r7, r9
 8017982:	464e      	mov	r6, r9
 8017984:	2800      	cmp	r0, #0
 8017986:	f040 8234 	bne.w	8017df2 <_dtoa_r+0x8f2>
 801798a:	2331      	movs	r3, #49	; 0x31
 801798c:	f10b 0501 	add.w	r5, fp, #1
 8017990:	f88b 3000 	strb.w	r3, [fp]
 8017994:	f10a 0a01 	add.w	sl, sl, #1
 8017998:	e22f      	b.n	8017dfa <_dtoa_r+0x8fa>
 801799a:	07f2      	lsls	r2, r6, #31
 801799c:	d505      	bpl.n	80179aa <_dtoa_r+0x4aa>
 801799e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80179a2:	f7e8 fe29 	bl	80005f8 <__aeabi_dmul>
 80179a6:	3501      	adds	r5, #1
 80179a8:	2301      	movs	r3, #1
 80179aa:	1076      	asrs	r6, r6, #1
 80179ac:	3708      	adds	r7, #8
 80179ae:	e772      	b.n	8017896 <_dtoa_r+0x396>
 80179b0:	2502      	movs	r5, #2
 80179b2:	e774      	b.n	801789e <_dtoa_r+0x39e>
 80179b4:	f8cd a020 	str.w	sl, [sp, #32]
 80179b8:	464f      	mov	r7, r9
 80179ba:	e791      	b.n	80178e0 <_dtoa_r+0x3e0>
 80179bc:	4b4d      	ldr	r3, [pc, #308]	; (8017af4 <_dtoa_r+0x5f4>)
 80179be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80179c2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80179c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80179c8:	2b00      	cmp	r3, #0
 80179ca:	d047      	beq.n	8017a5c <_dtoa_r+0x55c>
 80179cc:	4602      	mov	r2, r0
 80179ce:	460b      	mov	r3, r1
 80179d0:	2000      	movs	r0, #0
 80179d2:	494e      	ldr	r1, [pc, #312]	; (8017b0c <_dtoa_r+0x60c>)
 80179d4:	f7e8 ff3a 	bl	800084c <__aeabi_ddiv>
 80179d8:	462a      	mov	r2, r5
 80179da:	4633      	mov	r3, r6
 80179dc:	f7e8 fc54 	bl	8000288 <__aeabi_dsub>
 80179e0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80179e4:	465d      	mov	r5, fp
 80179e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80179ea:	f7e9 f8b5 	bl	8000b58 <__aeabi_d2iz>
 80179ee:	4606      	mov	r6, r0
 80179f0:	f7e8 fd98 	bl	8000524 <__aeabi_i2d>
 80179f4:	4602      	mov	r2, r0
 80179f6:	460b      	mov	r3, r1
 80179f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80179fc:	f7e8 fc44 	bl	8000288 <__aeabi_dsub>
 8017a00:	3630      	adds	r6, #48	; 0x30
 8017a02:	f805 6b01 	strb.w	r6, [r5], #1
 8017a06:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017a0a:	e9cd 0100 	strd	r0, r1, [sp]
 8017a0e:	f7e9 f865 	bl	8000adc <__aeabi_dcmplt>
 8017a12:	2800      	cmp	r0, #0
 8017a14:	d163      	bne.n	8017ade <_dtoa_r+0x5de>
 8017a16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017a1a:	2000      	movs	r0, #0
 8017a1c:	4937      	ldr	r1, [pc, #220]	; (8017afc <_dtoa_r+0x5fc>)
 8017a1e:	f7e8 fc33 	bl	8000288 <__aeabi_dsub>
 8017a22:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017a26:	f7e9 f859 	bl	8000adc <__aeabi_dcmplt>
 8017a2a:	2800      	cmp	r0, #0
 8017a2c:	f040 80b7 	bne.w	8017b9e <_dtoa_r+0x69e>
 8017a30:	eba5 030b 	sub.w	r3, r5, fp
 8017a34:	429f      	cmp	r7, r3
 8017a36:	f77f af7c 	ble.w	8017932 <_dtoa_r+0x432>
 8017a3a:	2200      	movs	r2, #0
 8017a3c:	4b30      	ldr	r3, [pc, #192]	; (8017b00 <_dtoa_r+0x600>)
 8017a3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017a42:	f7e8 fdd9 	bl	80005f8 <__aeabi_dmul>
 8017a46:	2200      	movs	r2, #0
 8017a48:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017a4c:	4b2c      	ldr	r3, [pc, #176]	; (8017b00 <_dtoa_r+0x600>)
 8017a4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017a52:	f7e8 fdd1 	bl	80005f8 <__aeabi_dmul>
 8017a56:	e9cd 0100 	strd	r0, r1, [sp]
 8017a5a:	e7c4      	b.n	80179e6 <_dtoa_r+0x4e6>
 8017a5c:	462a      	mov	r2, r5
 8017a5e:	4633      	mov	r3, r6
 8017a60:	f7e8 fdca 	bl	80005f8 <__aeabi_dmul>
 8017a64:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017a68:	eb0b 0507 	add.w	r5, fp, r7
 8017a6c:	465e      	mov	r6, fp
 8017a6e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017a72:	f7e9 f871 	bl	8000b58 <__aeabi_d2iz>
 8017a76:	4607      	mov	r7, r0
 8017a78:	f7e8 fd54 	bl	8000524 <__aeabi_i2d>
 8017a7c:	3730      	adds	r7, #48	; 0x30
 8017a7e:	4602      	mov	r2, r0
 8017a80:	460b      	mov	r3, r1
 8017a82:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017a86:	f7e8 fbff 	bl	8000288 <__aeabi_dsub>
 8017a8a:	f806 7b01 	strb.w	r7, [r6], #1
 8017a8e:	42ae      	cmp	r6, r5
 8017a90:	e9cd 0100 	strd	r0, r1, [sp]
 8017a94:	f04f 0200 	mov.w	r2, #0
 8017a98:	d126      	bne.n	8017ae8 <_dtoa_r+0x5e8>
 8017a9a:	4b1c      	ldr	r3, [pc, #112]	; (8017b0c <_dtoa_r+0x60c>)
 8017a9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017aa0:	f7e8 fbf4 	bl	800028c <__adddf3>
 8017aa4:	4602      	mov	r2, r0
 8017aa6:	460b      	mov	r3, r1
 8017aa8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017aac:	f7e9 f834 	bl	8000b18 <__aeabi_dcmpgt>
 8017ab0:	2800      	cmp	r0, #0
 8017ab2:	d174      	bne.n	8017b9e <_dtoa_r+0x69e>
 8017ab4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017ab8:	2000      	movs	r0, #0
 8017aba:	4914      	ldr	r1, [pc, #80]	; (8017b0c <_dtoa_r+0x60c>)
 8017abc:	f7e8 fbe4 	bl	8000288 <__aeabi_dsub>
 8017ac0:	4602      	mov	r2, r0
 8017ac2:	460b      	mov	r3, r1
 8017ac4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017ac8:	f7e9 f808 	bl	8000adc <__aeabi_dcmplt>
 8017acc:	2800      	cmp	r0, #0
 8017ace:	f43f af30 	beq.w	8017932 <_dtoa_r+0x432>
 8017ad2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017ad6:	2b30      	cmp	r3, #48	; 0x30
 8017ad8:	f105 32ff 	add.w	r2, r5, #4294967295
 8017adc:	d002      	beq.n	8017ae4 <_dtoa_r+0x5e4>
 8017ade:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017ae2:	e04a      	b.n	8017b7a <_dtoa_r+0x67a>
 8017ae4:	4615      	mov	r5, r2
 8017ae6:	e7f4      	b.n	8017ad2 <_dtoa_r+0x5d2>
 8017ae8:	4b05      	ldr	r3, [pc, #20]	; (8017b00 <_dtoa_r+0x600>)
 8017aea:	f7e8 fd85 	bl	80005f8 <__aeabi_dmul>
 8017aee:	e9cd 0100 	strd	r0, r1, [sp]
 8017af2:	e7bc      	b.n	8017a6e <_dtoa_r+0x56e>
 8017af4:	0801b2a8 	.word	0x0801b2a8
 8017af8:	0801b280 	.word	0x0801b280
 8017afc:	3ff00000 	.word	0x3ff00000
 8017b00:	40240000 	.word	0x40240000
 8017b04:	401c0000 	.word	0x401c0000
 8017b08:	40140000 	.word	0x40140000
 8017b0c:	3fe00000 	.word	0x3fe00000
 8017b10:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017b14:	465d      	mov	r5, fp
 8017b16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017b1a:	4630      	mov	r0, r6
 8017b1c:	4639      	mov	r1, r7
 8017b1e:	f7e8 fe95 	bl	800084c <__aeabi_ddiv>
 8017b22:	f7e9 f819 	bl	8000b58 <__aeabi_d2iz>
 8017b26:	4680      	mov	r8, r0
 8017b28:	f7e8 fcfc 	bl	8000524 <__aeabi_i2d>
 8017b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017b30:	f7e8 fd62 	bl	80005f8 <__aeabi_dmul>
 8017b34:	4602      	mov	r2, r0
 8017b36:	460b      	mov	r3, r1
 8017b38:	4630      	mov	r0, r6
 8017b3a:	4639      	mov	r1, r7
 8017b3c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8017b40:	f7e8 fba2 	bl	8000288 <__aeabi_dsub>
 8017b44:	f805 6b01 	strb.w	r6, [r5], #1
 8017b48:	eba5 060b 	sub.w	r6, r5, fp
 8017b4c:	45b1      	cmp	r9, r6
 8017b4e:	4602      	mov	r2, r0
 8017b50:	460b      	mov	r3, r1
 8017b52:	d139      	bne.n	8017bc8 <_dtoa_r+0x6c8>
 8017b54:	f7e8 fb9a 	bl	800028c <__adddf3>
 8017b58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017b5c:	4606      	mov	r6, r0
 8017b5e:	460f      	mov	r7, r1
 8017b60:	f7e8 ffda 	bl	8000b18 <__aeabi_dcmpgt>
 8017b64:	b9c8      	cbnz	r0, 8017b9a <_dtoa_r+0x69a>
 8017b66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017b6a:	4630      	mov	r0, r6
 8017b6c:	4639      	mov	r1, r7
 8017b6e:	f7e8 ffab 	bl	8000ac8 <__aeabi_dcmpeq>
 8017b72:	b110      	cbz	r0, 8017b7a <_dtoa_r+0x67a>
 8017b74:	f018 0f01 	tst.w	r8, #1
 8017b78:	d10f      	bne.n	8017b9a <_dtoa_r+0x69a>
 8017b7a:	9904      	ldr	r1, [sp, #16]
 8017b7c:	4620      	mov	r0, r4
 8017b7e:	f000 fdf9 	bl	8018774 <_Bfree>
 8017b82:	2300      	movs	r3, #0
 8017b84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017b86:	702b      	strb	r3, [r5, #0]
 8017b88:	f10a 0301 	add.w	r3, sl, #1
 8017b8c:	6013      	str	r3, [r2, #0]
 8017b8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017b90:	2b00      	cmp	r3, #0
 8017b92:	f000 8241 	beq.w	8018018 <_dtoa_r+0xb18>
 8017b96:	601d      	str	r5, [r3, #0]
 8017b98:	e23e      	b.n	8018018 <_dtoa_r+0xb18>
 8017b9a:	f8cd a020 	str.w	sl, [sp, #32]
 8017b9e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017ba2:	2a39      	cmp	r2, #57	; 0x39
 8017ba4:	f105 33ff 	add.w	r3, r5, #4294967295
 8017ba8:	d108      	bne.n	8017bbc <_dtoa_r+0x6bc>
 8017baa:	459b      	cmp	fp, r3
 8017bac:	d10a      	bne.n	8017bc4 <_dtoa_r+0x6c4>
 8017bae:	9b08      	ldr	r3, [sp, #32]
 8017bb0:	3301      	adds	r3, #1
 8017bb2:	9308      	str	r3, [sp, #32]
 8017bb4:	2330      	movs	r3, #48	; 0x30
 8017bb6:	f88b 3000 	strb.w	r3, [fp]
 8017bba:	465b      	mov	r3, fp
 8017bbc:	781a      	ldrb	r2, [r3, #0]
 8017bbe:	3201      	adds	r2, #1
 8017bc0:	701a      	strb	r2, [r3, #0]
 8017bc2:	e78c      	b.n	8017ade <_dtoa_r+0x5de>
 8017bc4:	461d      	mov	r5, r3
 8017bc6:	e7ea      	b.n	8017b9e <_dtoa_r+0x69e>
 8017bc8:	2200      	movs	r2, #0
 8017bca:	4b9b      	ldr	r3, [pc, #620]	; (8017e38 <_dtoa_r+0x938>)
 8017bcc:	f7e8 fd14 	bl	80005f8 <__aeabi_dmul>
 8017bd0:	2200      	movs	r2, #0
 8017bd2:	2300      	movs	r3, #0
 8017bd4:	4606      	mov	r6, r0
 8017bd6:	460f      	mov	r7, r1
 8017bd8:	f7e8 ff76 	bl	8000ac8 <__aeabi_dcmpeq>
 8017bdc:	2800      	cmp	r0, #0
 8017bde:	d09a      	beq.n	8017b16 <_dtoa_r+0x616>
 8017be0:	e7cb      	b.n	8017b7a <_dtoa_r+0x67a>
 8017be2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017be4:	2a00      	cmp	r2, #0
 8017be6:	f000 808b 	beq.w	8017d00 <_dtoa_r+0x800>
 8017bea:	9a06      	ldr	r2, [sp, #24]
 8017bec:	2a01      	cmp	r2, #1
 8017bee:	dc6e      	bgt.n	8017cce <_dtoa_r+0x7ce>
 8017bf0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017bf2:	2a00      	cmp	r2, #0
 8017bf4:	d067      	beq.n	8017cc6 <_dtoa_r+0x7c6>
 8017bf6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017bfa:	9f07      	ldr	r7, [sp, #28]
 8017bfc:	9d05      	ldr	r5, [sp, #20]
 8017bfe:	9a05      	ldr	r2, [sp, #20]
 8017c00:	2101      	movs	r1, #1
 8017c02:	441a      	add	r2, r3
 8017c04:	4620      	mov	r0, r4
 8017c06:	9205      	str	r2, [sp, #20]
 8017c08:	4498      	add	r8, r3
 8017c0a:	f000 fe91 	bl	8018930 <__i2b>
 8017c0e:	4606      	mov	r6, r0
 8017c10:	2d00      	cmp	r5, #0
 8017c12:	dd0c      	ble.n	8017c2e <_dtoa_r+0x72e>
 8017c14:	f1b8 0f00 	cmp.w	r8, #0
 8017c18:	dd09      	ble.n	8017c2e <_dtoa_r+0x72e>
 8017c1a:	4545      	cmp	r5, r8
 8017c1c:	9a05      	ldr	r2, [sp, #20]
 8017c1e:	462b      	mov	r3, r5
 8017c20:	bfa8      	it	ge
 8017c22:	4643      	movge	r3, r8
 8017c24:	1ad2      	subs	r2, r2, r3
 8017c26:	9205      	str	r2, [sp, #20]
 8017c28:	1aed      	subs	r5, r5, r3
 8017c2a:	eba8 0803 	sub.w	r8, r8, r3
 8017c2e:	9b07      	ldr	r3, [sp, #28]
 8017c30:	b1eb      	cbz	r3, 8017c6e <_dtoa_r+0x76e>
 8017c32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017c34:	2b00      	cmp	r3, #0
 8017c36:	d067      	beq.n	8017d08 <_dtoa_r+0x808>
 8017c38:	b18f      	cbz	r7, 8017c5e <_dtoa_r+0x75e>
 8017c3a:	4631      	mov	r1, r6
 8017c3c:	463a      	mov	r2, r7
 8017c3e:	4620      	mov	r0, r4
 8017c40:	f000 ff16 	bl	8018a70 <__pow5mult>
 8017c44:	9a04      	ldr	r2, [sp, #16]
 8017c46:	4601      	mov	r1, r0
 8017c48:	4606      	mov	r6, r0
 8017c4a:	4620      	mov	r0, r4
 8017c4c:	f000 fe79 	bl	8018942 <__multiply>
 8017c50:	9904      	ldr	r1, [sp, #16]
 8017c52:	9008      	str	r0, [sp, #32]
 8017c54:	4620      	mov	r0, r4
 8017c56:	f000 fd8d 	bl	8018774 <_Bfree>
 8017c5a:	9b08      	ldr	r3, [sp, #32]
 8017c5c:	9304      	str	r3, [sp, #16]
 8017c5e:	9b07      	ldr	r3, [sp, #28]
 8017c60:	1bda      	subs	r2, r3, r7
 8017c62:	d004      	beq.n	8017c6e <_dtoa_r+0x76e>
 8017c64:	9904      	ldr	r1, [sp, #16]
 8017c66:	4620      	mov	r0, r4
 8017c68:	f000 ff02 	bl	8018a70 <__pow5mult>
 8017c6c:	9004      	str	r0, [sp, #16]
 8017c6e:	2101      	movs	r1, #1
 8017c70:	4620      	mov	r0, r4
 8017c72:	f000 fe5d 	bl	8018930 <__i2b>
 8017c76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017c78:	4607      	mov	r7, r0
 8017c7a:	2b00      	cmp	r3, #0
 8017c7c:	f000 81d0 	beq.w	8018020 <_dtoa_r+0xb20>
 8017c80:	461a      	mov	r2, r3
 8017c82:	4601      	mov	r1, r0
 8017c84:	4620      	mov	r0, r4
 8017c86:	f000 fef3 	bl	8018a70 <__pow5mult>
 8017c8a:	9b06      	ldr	r3, [sp, #24]
 8017c8c:	2b01      	cmp	r3, #1
 8017c8e:	4607      	mov	r7, r0
 8017c90:	dc40      	bgt.n	8017d14 <_dtoa_r+0x814>
 8017c92:	9b00      	ldr	r3, [sp, #0]
 8017c94:	2b00      	cmp	r3, #0
 8017c96:	d139      	bne.n	8017d0c <_dtoa_r+0x80c>
 8017c98:	9b01      	ldr	r3, [sp, #4]
 8017c9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017c9e:	2b00      	cmp	r3, #0
 8017ca0:	d136      	bne.n	8017d10 <_dtoa_r+0x810>
 8017ca2:	9b01      	ldr	r3, [sp, #4]
 8017ca4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017ca8:	0d1b      	lsrs	r3, r3, #20
 8017caa:	051b      	lsls	r3, r3, #20
 8017cac:	b12b      	cbz	r3, 8017cba <_dtoa_r+0x7ba>
 8017cae:	9b05      	ldr	r3, [sp, #20]
 8017cb0:	3301      	adds	r3, #1
 8017cb2:	9305      	str	r3, [sp, #20]
 8017cb4:	f108 0801 	add.w	r8, r8, #1
 8017cb8:	2301      	movs	r3, #1
 8017cba:	9307      	str	r3, [sp, #28]
 8017cbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017cbe:	2b00      	cmp	r3, #0
 8017cc0:	d12a      	bne.n	8017d18 <_dtoa_r+0x818>
 8017cc2:	2001      	movs	r0, #1
 8017cc4:	e030      	b.n	8017d28 <_dtoa_r+0x828>
 8017cc6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017cc8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017ccc:	e795      	b.n	8017bfa <_dtoa_r+0x6fa>
 8017cce:	9b07      	ldr	r3, [sp, #28]
 8017cd0:	f109 37ff 	add.w	r7, r9, #4294967295
 8017cd4:	42bb      	cmp	r3, r7
 8017cd6:	bfbf      	itttt	lt
 8017cd8:	9b07      	ldrlt	r3, [sp, #28]
 8017cda:	9707      	strlt	r7, [sp, #28]
 8017cdc:	1afa      	sublt	r2, r7, r3
 8017cde:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8017ce0:	bfbb      	ittet	lt
 8017ce2:	189b      	addlt	r3, r3, r2
 8017ce4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8017ce6:	1bdf      	subge	r7, r3, r7
 8017ce8:	2700      	movlt	r7, #0
 8017cea:	f1b9 0f00 	cmp.w	r9, #0
 8017cee:	bfb5      	itete	lt
 8017cf0:	9b05      	ldrlt	r3, [sp, #20]
 8017cf2:	9d05      	ldrge	r5, [sp, #20]
 8017cf4:	eba3 0509 	sublt.w	r5, r3, r9
 8017cf8:	464b      	movge	r3, r9
 8017cfa:	bfb8      	it	lt
 8017cfc:	2300      	movlt	r3, #0
 8017cfe:	e77e      	b.n	8017bfe <_dtoa_r+0x6fe>
 8017d00:	9f07      	ldr	r7, [sp, #28]
 8017d02:	9d05      	ldr	r5, [sp, #20]
 8017d04:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8017d06:	e783      	b.n	8017c10 <_dtoa_r+0x710>
 8017d08:	9a07      	ldr	r2, [sp, #28]
 8017d0a:	e7ab      	b.n	8017c64 <_dtoa_r+0x764>
 8017d0c:	2300      	movs	r3, #0
 8017d0e:	e7d4      	b.n	8017cba <_dtoa_r+0x7ba>
 8017d10:	9b00      	ldr	r3, [sp, #0]
 8017d12:	e7d2      	b.n	8017cba <_dtoa_r+0x7ba>
 8017d14:	2300      	movs	r3, #0
 8017d16:	9307      	str	r3, [sp, #28]
 8017d18:	693b      	ldr	r3, [r7, #16]
 8017d1a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8017d1e:	6918      	ldr	r0, [r3, #16]
 8017d20:	f000 fdb8 	bl	8018894 <__hi0bits>
 8017d24:	f1c0 0020 	rsb	r0, r0, #32
 8017d28:	4440      	add	r0, r8
 8017d2a:	f010 001f 	ands.w	r0, r0, #31
 8017d2e:	d047      	beq.n	8017dc0 <_dtoa_r+0x8c0>
 8017d30:	f1c0 0320 	rsb	r3, r0, #32
 8017d34:	2b04      	cmp	r3, #4
 8017d36:	dd3b      	ble.n	8017db0 <_dtoa_r+0x8b0>
 8017d38:	9b05      	ldr	r3, [sp, #20]
 8017d3a:	f1c0 001c 	rsb	r0, r0, #28
 8017d3e:	4403      	add	r3, r0
 8017d40:	9305      	str	r3, [sp, #20]
 8017d42:	4405      	add	r5, r0
 8017d44:	4480      	add	r8, r0
 8017d46:	9b05      	ldr	r3, [sp, #20]
 8017d48:	2b00      	cmp	r3, #0
 8017d4a:	dd05      	ble.n	8017d58 <_dtoa_r+0x858>
 8017d4c:	461a      	mov	r2, r3
 8017d4e:	9904      	ldr	r1, [sp, #16]
 8017d50:	4620      	mov	r0, r4
 8017d52:	f000 fedb 	bl	8018b0c <__lshift>
 8017d56:	9004      	str	r0, [sp, #16]
 8017d58:	f1b8 0f00 	cmp.w	r8, #0
 8017d5c:	dd05      	ble.n	8017d6a <_dtoa_r+0x86a>
 8017d5e:	4639      	mov	r1, r7
 8017d60:	4642      	mov	r2, r8
 8017d62:	4620      	mov	r0, r4
 8017d64:	f000 fed2 	bl	8018b0c <__lshift>
 8017d68:	4607      	mov	r7, r0
 8017d6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017d6c:	b353      	cbz	r3, 8017dc4 <_dtoa_r+0x8c4>
 8017d6e:	4639      	mov	r1, r7
 8017d70:	9804      	ldr	r0, [sp, #16]
 8017d72:	f000 ff1f 	bl	8018bb4 <__mcmp>
 8017d76:	2800      	cmp	r0, #0
 8017d78:	da24      	bge.n	8017dc4 <_dtoa_r+0x8c4>
 8017d7a:	2300      	movs	r3, #0
 8017d7c:	220a      	movs	r2, #10
 8017d7e:	9904      	ldr	r1, [sp, #16]
 8017d80:	4620      	mov	r0, r4
 8017d82:	f000 fd0e 	bl	80187a2 <__multadd>
 8017d86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017d88:	9004      	str	r0, [sp, #16]
 8017d8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017d8e:	2b00      	cmp	r3, #0
 8017d90:	f000 814d 	beq.w	801802e <_dtoa_r+0xb2e>
 8017d94:	2300      	movs	r3, #0
 8017d96:	4631      	mov	r1, r6
 8017d98:	220a      	movs	r2, #10
 8017d9a:	4620      	mov	r0, r4
 8017d9c:	f000 fd01 	bl	80187a2 <__multadd>
 8017da0:	9b02      	ldr	r3, [sp, #8]
 8017da2:	2b00      	cmp	r3, #0
 8017da4:	4606      	mov	r6, r0
 8017da6:	dc4f      	bgt.n	8017e48 <_dtoa_r+0x948>
 8017da8:	9b06      	ldr	r3, [sp, #24]
 8017daa:	2b02      	cmp	r3, #2
 8017dac:	dd4c      	ble.n	8017e48 <_dtoa_r+0x948>
 8017dae:	e011      	b.n	8017dd4 <_dtoa_r+0x8d4>
 8017db0:	d0c9      	beq.n	8017d46 <_dtoa_r+0x846>
 8017db2:	9a05      	ldr	r2, [sp, #20]
 8017db4:	331c      	adds	r3, #28
 8017db6:	441a      	add	r2, r3
 8017db8:	9205      	str	r2, [sp, #20]
 8017dba:	441d      	add	r5, r3
 8017dbc:	4498      	add	r8, r3
 8017dbe:	e7c2      	b.n	8017d46 <_dtoa_r+0x846>
 8017dc0:	4603      	mov	r3, r0
 8017dc2:	e7f6      	b.n	8017db2 <_dtoa_r+0x8b2>
 8017dc4:	f1b9 0f00 	cmp.w	r9, #0
 8017dc8:	dc38      	bgt.n	8017e3c <_dtoa_r+0x93c>
 8017dca:	9b06      	ldr	r3, [sp, #24]
 8017dcc:	2b02      	cmp	r3, #2
 8017dce:	dd35      	ble.n	8017e3c <_dtoa_r+0x93c>
 8017dd0:	f8cd 9008 	str.w	r9, [sp, #8]
 8017dd4:	9b02      	ldr	r3, [sp, #8]
 8017dd6:	b963      	cbnz	r3, 8017df2 <_dtoa_r+0x8f2>
 8017dd8:	4639      	mov	r1, r7
 8017dda:	2205      	movs	r2, #5
 8017ddc:	4620      	mov	r0, r4
 8017dde:	f000 fce0 	bl	80187a2 <__multadd>
 8017de2:	4601      	mov	r1, r0
 8017de4:	4607      	mov	r7, r0
 8017de6:	9804      	ldr	r0, [sp, #16]
 8017de8:	f000 fee4 	bl	8018bb4 <__mcmp>
 8017dec:	2800      	cmp	r0, #0
 8017dee:	f73f adcc 	bgt.w	801798a <_dtoa_r+0x48a>
 8017df2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017df4:	465d      	mov	r5, fp
 8017df6:	ea6f 0a03 	mvn.w	sl, r3
 8017dfa:	f04f 0900 	mov.w	r9, #0
 8017dfe:	4639      	mov	r1, r7
 8017e00:	4620      	mov	r0, r4
 8017e02:	f000 fcb7 	bl	8018774 <_Bfree>
 8017e06:	2e00      	cmp	r6, #0
 8017e08:	f43f aeb7 	beq.w	8017b7a <_dtoa_r+0x67a>
 8017e0c:	f1b9 0f00 	cmp.w	r9, #0
 8017e10:	d005      	beq.n	8017e1e <_dtoa_r+0x91e>
 8017e12:	45b1      	cmp	r9, r6
 8017e14:	d003      	beq.n	8017e1e <_dtoa_r+0x91e>
 8017e16:	4649      	mov	r1, r9
 8017e18:	4620      	mov	r0, r4
 8017e1a:	f000 fcab 	bl	8018774 <_Bfree>
 8017e1e:	4631      	mov	r1, r6
 8017e20:	4620      	mov	r0, r4
 8017e22:	f000 fca7 	bl	8018774 <_Bfree>
 8017e26:	e6a8      	b.n	8017b7a <_dtoa_r+0x67a>
 8017e28:	2700      	movs	r7, #0
 8017e2a:	463e      	mov	r6, r7
 8017e2c:	e7e1      	b.n	8017df2 <_dtoa_r+0x8f2>
 8017e2e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017e32:	463e      	mov	r6, r7
 8017e34:	e5a9      	b.n	801798a <_dtoa_r+0x48a>
 8017e36:	bf00      	nop
 8017e38:	40240000 	.word	0x40240000
 8017e3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017e3e:	f8cd 9008 	str.w	r9, [sp, #8]
 8017e42:	2b00      	cmp	r3, #0
 8017e44:	f000 80fa 	beq.w	801803c <_dtoa_r+0xb3c>
 8017e48:	2d00      	cmp	r5, #0
 8017e4a:	dd05      	ble.n	8017e58 <_dtoa_r+0x958>
 8017e4c:	4631      	mov	r1, r6
 8017e4e:	462a      	mov	r2, r5
 8017e50:	4620      	mov	r0, r4
 8017e52:	f000 fe5b 	bl	8018b0c <__lshift>
 8017e56:	4606      	mov	r6, r0
 8017e58:	9b07      	ldr	r3, [sp, #28]
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	d04c      	beq.n	8017ef8 <_dtoa_r+0x9f8>
 8017e5e:	6871      	ldr	r1, [r6, #4]
 8017e60:	4620      	mov	r0, r4
 8017e62:	f000 fc53 	bl	801870c <_Balloc>
 8017e66:	6932      	ldr	r2, [r6, #16]
 8017e68:	3202      	adds	r2, #2
 8017e6a:	4605      	mov	r5, r0
 8017e6c:	0092      	lsls	r2, r2, #2
 8017e6e:	f106 010c 	add.w	r1, r6, #12
 8017e72:	300c      	adds	r0, #12
 8017e74:	f7fd fc7c 	bl	8015770 <memcpy>
 8017e78:	2201      	movs	r2, #1
 8017e7a:	4629      	mov	r1, r5
 8017e7c:	4620      	mov	r0, r4
 8017e7e:	f000 fe45 	bl	8018b0c <__lshift>
 8017e82:	9b00      	ldr	r3, [sp, #0]
 8017e84:	f8cd b014 	str.w	fp, [sp, #20]
 8017e88:	f003 0301 	and.w	r3, r3, #1
 8017e8c:	46b1      	mov	r9, r6
 8017e8e:	9307      	str	r3, [sp, #28]
 8017e90:	4606      	mov	r6, r0
 8017e92:	4639      	mov	r1, r7
 8017e94:	9804      	ldr	r0, [sp, #16]
 8017e96:	f7ff faa5 	bl	80173e4 <quorem>
 8017e9a:	4649      	mov	r1, r9
 8017e9c:	4605      	mov	r5, r0
 8017e9e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017ea2:	9804      	ldr	r0, [sp, #16]
 8017ea4:	f000 fe86 	bl	8018bb4 <__mcmp>
 8017ea8:	4632      	mov	r2, r6
 8017eaa:	9000      	str	r0, [sp, #0]
 8017eac:	4639      	mov	r1, r7
 8017eae:	4620      	mov	r0, r4
 8017eb0:	f000 fe9a 	bl	8018be8 <__mdiff>
 8017eb4:	68c3      	ldr	r3, [r0, #12]
 8017eb6:	4602      	mov	r2, r0
 8017eb8:	bb03      	cbnz	r3, 8017efc <_dtoa_r+0x9fc>
 8017eba:	4601      	mov	r1, r0
 8017ebc:	9008      	str	r0, [sp, #32]
 8017ebe:	9804      	ldr	r0, [sp, #16]
 8017ec0:	f000 fe78 	bl	8018bb4 <__mcmp>
 8017ec4:	9a08      	ldr	r2, [sp, #32]
 8017ec6:	4603      	mov	r3, r0
 8017ec8:	4611      	mov	r1, r2
 8017eca:	4620      	mov	r0, r4
 8017ecc:	9308      	str	r3, [sp, #32]
 8017ece:	f000 fc51 	bl	8018774 <_Bfree>
 8017ed2:	9b08      	ldr	r3, [sp, #32]
 8017ed4:	b9a3      	cbnz	r3, 8017f00 <_dtoa_r+0xa00>
 8017ed6:	9a06      	ldr	r2, [sp, #24]
 8017ed8:	b992      	cbnz	r2, 8017f00 <_dtoa_r+0xa00>
 8017eda:	9a07      	ldr	r2, [sp, #28]
 8017edc:	b982      	cbnz	r2, 8017f00 <_dtoa_r+0xa00>
 8017ede:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017ee2:	d029      	beq.n	8017f38 <_dtoa_r+0xa38>
 8017ee4:	9b00      	ldr	r3, [sp, #0]
 8017ee6:	2b00      	cmp	r3, #0
 8017ee8:	dd01      	ble.n	8017eee <_dtoa_r+0x9ee>
 8017eea:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8017eee:	9b05      	ldr	r3, [sp, #20]
 8017ef0:	1c5d      	adds	r5, r3, #1
 8017ef2:	f883 8000 	strb.w	r8, [r3]
 8017ef6:	e782      	b.n	8017dfe <_dtoa_r+0x8fe>
 8017ef8:	4630      	mov	r0, r6
 8017efa:	e7c2      	b.n	8017e82 <_dtoa_r+0x982>
 8017efc:	2301      	movs	r3, #1
 8017efe:	e7e3      	b.n	8017ec8 <_dtoa_r+0x9c8>
 8017f00:	9a00      	ldr	r2, [sp, #0]
 8017f02:	2a00      	cmp	r2, #0
 8017f04:	db04      	blt.n	8017f10 <_dtoa_r+0xa10>
 8017f06:	d125      	bne.n	8017f54 <_dtoa_r+0xa54>
 8017f08:	9a06      	ldr	r2, [sp, #24]
 8017f0a:	bb1a      	cbnz	r2, 8017f54 <_dtoa_r+0xa54>
 8017f0c:	9a07      	ldr	r2, [sp, #28]
 8017f0e:	bb0a      	cbnz	r2, 8017f54 <_dtoa_r+0xa54>
 8017f10:	2b00      	cmp	r3, #0
 8017f12:	ddec      	ble.n	8017eee <_dtoa_r+0x9ee>
 8017f14:	2201      	movs	r2, #1
 8017f16:	9904      	ldr	r1, [sp, #16]
 8017f18:	4620      	mov	r0, r4
 8017f1a:	f000 fdf7 	bl	8018b0c <__lshift>
 8017f1e:	4639      	mov	r1, r7
 8017f20:	9004      	str	r0, [sp, #16]
 8017f22:	f000 fe47 	bl	8018bb4 <__mcmp>
 8017f26:	2800      	cmp	r0, #0
 8017f28:	dc03      	bgt.n	8017f32 <_dtoa_r+0xa32>
 8017f2a:	d1e0      	bne.n	8017eee <_dtoa_r+0x9ee>
 8017f2c:	f018 0f01 	tst.w	r8, #1
 8017f30:	d0dd      	beq.n	8017eee <_dtoa_r+0x9ee>
 8017f32:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017f36:	d1d8      	bne.n	8017eea <_dtoa_r+0x9ea>
 8017f38:	9b05      	ldr	r3, [sp, #20]
 8017f3a:	9a05      	ldr	r2, [sp, #20]
 8017f3c:	1c5d      	adds	r5, r3, #1
 8017f3e:	2339      	movs	r3, #57	; 0x39
 8017f40:	7013      	strb	r3, [r2, #0]
 8017f42:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017f46:	2b39      	cmp	r3, #57	; 0x39
 8017f48:	f105 32ff 	add.w	r2, r5, #4294967295
 8017f4c:	d04f      	beq.n	8017fee <_dtoa_r+0xaee>
 8017f4e:	3301      	adds	r3, #1
 8017f50:	7013      	strb	r3, [r2, #0]
 8017f52:	e754      	b.n	8017dfe <_dtoa_r+0x8fe>
 8017f54:	9a05      	ldr	r2, [sp, #20]
 8017f56:	2b00      	cmp	r3, #0
 8017f58:	f102 0501 	add.w	r5, r2, #1
 8017f5c:	dd06      	ble.n	8017f6c <_dtoa_r+0xa6c>
 8017f5e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017f62:	d0e9      	beq.n	8017f38 <_dtoa_r+0xa38>
 8017f64:	f108 0801 	add.w	r8, r8, #1
 8017f68:	9b05      	ldr	r3, [sp, #20]
 8017f6a:	e7c2      	b.n	8017ef2 <_dtoa_r+0x9f2>
 8017f6c:	9a02      	ldr	r2, [sp, #8]
 8017f6e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8017f72:	eba5 030b 	sub.w	r3, r5, fp
 8017f76:	4293      	cmp	r3, r2
 8017f78:	d021      	beq.n	8017fbe <_dtoa_r+0xabe>
 8017f7a:	2300      	movs	r3, #0
 8017f7c:	220a      	movs	r2, #10
 8017f7e:	9904      	ldr	r1, [sp, #16]
 8017f80:	4620      	mov	r0, r4
 8017f82:	f000 fc0e 	bl	80187a2 <__multadd>
 8017f86:	45b1      	cmp	r9, r6
 8017f88:	9004      	str	r0, [sp, #16]
 8017f8a:	f04f 0300 	mov.w	r3, #0
 8017f8e:	f04f 020a 	mov.w	r2, #10
 8017f92:	4649      	mov	r1, r9
 8017f94:	4620      	mov	r0, r4
 8017f96:	d105      	bne.n	8017fa4 <_dtoa_r+0xaa4>
 8017f98:	f000 fc03 	bl	80187a2 <__multadd>
 8017f9c:	4681      	mov	r9, r0
 8017f9e:	4606      	mov	r6, r0
 8017fa0:	9505      	str	r5, [sp, #20]
 8017fa2:	e776      	b.n	8017e92 <_dtoa_r+0x992>
 8017fa4:	f000 fbfd 	bl	80187a2 <__multadd>
 8017fa8:	4631      	mov	r1, r6
 8017faa:	4681      	mov	r9, r0
 8017fac:	2300      	movs	r3, #0
 8017fae:	220a      	movs	r2, #10
 8017fb0:	4620      	mov	r0, r4
 8017fb2:	f000 fbf6 	bl	80187a2 <__multadd>
 8017fb6:	4606      	mov	r6, r0
 8017fb8:	e7f2      	b.n	8017fa0 <_dtoa_r+0xaa0>
 8017fba:	f04f 0900 	mov.w	r9, #0
 8017fbe:	2201      	movs	r2, #1
 8017fc0:	9904      	ldr	r1, [sp, #16]
 8017fc2:	4620      	mov	r0, r4
 8017fc4:	f000 fda2 	bl	8018b0c <__lshift>
 8017fc8:	4639      	mov	r1, r7
 8017fca:	9004      	str	r0, [sp, #16]
 8017fcc:	f000 fdf2 	bl	8018bb4 <__mcmp>
 8017fd0:	2800      	cmp	r0, #0
 8017fd2:	dcb6      	bgt.n	8017f42 <_dtoa_r+0xa42>
 8017fd4:	d102      	bne.n	8017fdc <_dtoa_r+0xadc>
 8017fd6:	f018 0f01 	tst.w	r8, #1
 8017fda:	d1b2      	bne.n	8017f42 <_dtoa_r+0xa42>
 8017fdc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017fe0:	2b30      	cmp	r3, #48	; 0x30
 8017fe2:	f105 32ff 	add.w	r2, r5, #4294967295
 8017fe6:	f47f af0a 	bne.w	8017dfe <_dtoa_r+0x8fe>
 8017fea:	4615      	mov	r5, r2
 8017fec:	e7f6      	b.n	8017fdc <_dtoa_r+0xadc>
 8017fee:	4593      	cmp	fp, r2
 8017ff0:	d105      	bne.n	8017ffe <_dtoa_r+0xafe>
 8017ff2:	2331      	movs	r3, #49	; 0x31
 8017ff4:	f10a 0a01 	add.w	sl, sl, #1
 8017ff8:	f88b 3000 	strb.w	r3, [fp]
 8017ffc:	e6ff      	b.n	8017dfe <_dtoa_r+0x8fe>
 8017ffe:	4615      	mov	r5, r2
 8018000:	e79f      	b.n	8017f42 <_dtoa_r+0xa42>
 8018002:	f8df b064 	ldr.w	fp, [pc, #100]	; 8018068 <_dtoa_r+0xb68>
 8018006:	e007      	b.n	8018018 <_dtoa_r+0xb18>
 8018008:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801800a:	f8df b060 	ldr.w	fp, [pc, #96]	; 801806c <_dtoa_r+0xb6c>
 801800e:	b11b      	cbz	r3, 8018018 <_dtoa_r+0xb18>
 8018010:	f10b 0308 	add.w	r3, fp, #8
 8018014:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018016:	6013      	str	r3, [r2, #0]
 8018018:	4658      	mov	r0, fp
 801801a:	b017      	add	sp, #92	; 0x5c
 801801c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018020:	9b06      	ldr	r3, [sp, #24]
 8018022:	2b01      	cmp	r3, #1
 8018024:	f77f ae35 	ble.w	8017c92 <_dtoa_r+0x792>
 8018028:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801802a:	9307      	str	r3, [sp, #28]
 801802c:	e649      	b.n	8017cc2 <_dtoa_r+0x7c2>
 801802e:	9b02      	ldr	r3, [sp, #8]
 8018030:	2b00      	cmp	r3, #0
 8018032:	dc03      	bgt.n	801803c <_dtoa_r+0xb3c>
 8018034:	9b06      	ldr	r3, [sp, #24]
 8018036:	2b02      	cmp	r3, #2
 8018038:	f73f aecc 	bgt.w	8017dd4 <_dtoa_r+0x8d4>
 801803c:	465d      	mov	r5, fp
 801803e:	4639      	mov	r1, r7
 8018040:	9804      	ldr	r0, [sp, #16]
 8018042:	f7ff f9cf 	bl	80173e4 <quorem>
 8018046:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801804a:	f805 8b01 	strb.w	r8, [r5], #1
 801804e:	9a02      	ldr	r2, [sp, #8]
 8018050:	eba5 030b 	sub.w	r3, r5, fp
 8018054:	429a      	cmp	r2, r3
 8018056:	ddb0      	ble.n	8017fba <_dtoa_r+0xaba>
 8018058:	2300      	movs	r3, #0
 801805a:	220a      	movs	r2, #10
 801805c:	9904      	ldr	r1, [sp, #16]
 801805e:	4620      	mov	r0, r4
 8018060:	f000 fb9f 	bl	80187a2 <__multadd>
 8018064:	9004      	str	r0, [sp, #16]
 8018066:	e7ea      	b.n	801803e <_dtoa_r+0xb3e>
 8018068:	0801b1ec 	.word	0x0801b1ec
 801806c:	0801b268 	.word	0x0801b268

08018070 <rshift>:
 8018070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018072:	6906      	ldr	r6, [r0, #16]
 8018074:	114b      	asrs	r3, r1, #5
 8018076:	429e      	cmp	r6, r3
 8018078:	f100 0414 	add.w	r4, r0, #20
 801807c:	dd30      	ble.n	80180e0 <rshift+0x70>
 801807e:	f011 011f 	ands.w	r1, r1, #31
 8018082:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8018086:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801808a:	d108      	bne.n	801809e <rshift+0x2e>
 801808c:	4621      	mov	r1, r4
 801808e:	42b2      	cmp	r2, r6
 8018090:	460b      	mov	r3, r1
 8018092:	d211      	bcs.n	80180b8 <rshift+0x48>
 8018094:	f852 3b04 	ldr.w	r3, [r2], #4
 8018098:	f841 3b04 	str.w	r3, [r1], #4
 801809c:	e7f7      	b.n	801808e <rshift+0x1e>
 801809e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80180a2:	f1c1 0c20 	rsb	ip, r1, #32
 80180a6:	40cd      	lsrs	r5, r1
 80180a8:	3204      	adds	r2, #4
 80180aa:	4623      	mov	r3, r4
 80180ac:	42b2      	cmp	r2, r6
 80180ae:	4617      	mov	r7, r2
 80180b0:	d30c      	bcc.n	80180cc <rshift+0x5c>
 80180b2:	601d      	str	r5, [r3, #0]
 80180b4:	b105      	cbz	r5, 80180b8 <rshift+0x48>
 80180b6:	3304      	adds	r3, #4
 80180b8:	1b1a      	subs	r2, r3, r4
 80180ba:	42a3      	cmp	r3, r4
 80180bc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80180c0:	bf08      	it	eq
 80180c2:	2300      	moveq	r3, #0
 80180c4:	6102      	str	r2, [r0, #16]
 80180c6:	bf08      	it	eq
 80180c8:	6143      	streq	r3, [r0, #20]
 80180ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80180cc:	683f      	ldr	r7, [r7, #0]
 80180ce:	fa07 f70c 	lsl.w	r7, r7, ip
 80180d2:	433d      	orrs	r5, r7
 80180d4:	f843 5b04 	str.w	r5, [r3], #4
 80180d8:	f852 5b04 	ldr.w	r5, [r2], #4
 80180dc:	40cd      	lsrs	r5, r1
 80180de:	e7e5      	b.n	80180ac <rshift+0x3c>
 80180e0:	4623      	mov	r3, r4
 80180e2:	e7e9      	b.n	80180b8 <rshift+0x48>

080180e4 <__hexdig_fun>:
 80180e4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80180e8:	2b09      	cmp	r3, #9
 80180ea:	d802      	bhi.n	80180f2 <__hexdig_fun+0xe>
 80180ec:	3820      	subs	r0, #32
 80180ee:	b2c0      	uxtb	r0, r0
 80180f0:	4770      	bx	lr
 80180f2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80180f6:	2b05      	cmp	r3, #5
 80180f8:	d801      	bhi.n	80180fe <__hexdig_fun+0x1a>
 80180fa:	3847      	subs	r0, #71	; 0x47
 80180fc:	e7f7      	b.n	80180ee <__hexdig_fun+0xa>
 80180fe:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8018102:	2b05      	cmp	r3, #5
 8018104:	d801      	bhi.n	801810a <__hexdig_fun+0x26>
 8018106:	3827      	subs	r0, #39	; 0x27
 8018108:	e7f1      	b.n	80180ee <__hexdig_fun+0xa>
 801810a:	2000      	movs	r0, #0
 801810c:	4770      	bx	lr

0801810e <__gethex>:
 801810e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018112:	b08b      	sub	sp, #44	; 0x2c
 8018114:	468a      	mov	sl, r1
 8018116:	9002      	str	r0, [sp, #8]
 8018118:	9816      	ldr	r0, [sp, #88]	; 0x58
 801811a:	9306      	str	r3, [sp, #24]
 801811c:	4690      	mov	r8, r2
 801811e:	f000 fad0 	bl	80186c2 <__localeconv_l>
 8018122:	6803      	ldr	r3, [r0, #0]
 8018124:	9303      	str	r3, [sp, #12]
 8018126:	4618      	mov	r0, r3
 8018128:	f7e8 f852 	bl	80001d0 <strlen>
 801812c:	9b03      	ldr	r3, [sp, #12]
 801812e:	9001      	str	r0, [sp, #4]
 8018130:	4403      	add	r3, r0
 8018132:	f04f 0b00 	mov.w	fp, #0
 8018136:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801813a:	9307      	str	r3, [sp, #28]
 801813c:	f8da 3000 	ldr.w	r3, [sl]
 8018140:	3302      	adds	r3, #2
 8018142:	461f      	mov	r7, r3
 8018144:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018148:	2830      	cmp	r0, #48	; 0x30
 801814a:	d06c      	beq.n	8018226 <__gethex+0x118>
 801814c:	f7ff ffca 	bl	80180e4 <__hexdig_fun>
 8018150:	4604      	mov	r4, r0
 8018152:	2800      	cmp	r0, #0
 8018154:	d16a      	bne.n	801822c <__gethex+0x11e>
 8018156:	9a01      	ldr	r2, [sp, #4]
 8018158:	9903      	ldr	r1, [sp, #12]
 801815a:	4638      	mov	r0, r7
 801815c:	f001 f836 	bl	80191cc <strncmp>
 8018160:	2800      	cmp	r0, #0
 8018162:	d166      	bne.n	8018232 <__gethex+0x124>
 8018164:	9b01      	ldr	r3, [sp, #4]
 8018166:	5cf8      	ldrb	r0, [r7, r3]
 8018168:	18fe      	adds	r6, r7, r3
 801816a:	f7ff ffbb 	bl	80180e4 <__hexdig_fun>
 801816e:	2800      	cmp	r0, #0
 8018170:	d062      	beq.n	8018238 <__gethex+0x12a>
 8018172:	4633      	mov	r3, r6
 8018174:	7818      	ldrb	r0, [r3, #0]
 8018176:	2830      	cmp	r0, #48	; 0x30
 8018178:	461f      	mov	r7, r3
 801817a:	f103 0301 	add.w	r3, r3, #1
 801817e:	d0f9      	beq.n	8018174 <__gethex+0x66>
 8018180:	f7ff ffb0 	bl	80180e4 <__hexdig_fun>
 8018184:	fab0 f580 	clz	r5, r0
 8018188:	096d      	lsrs	r5, r5, #5
 801818a:	4634      	mov	r4, r6
 801818c:	f04f 0b01 	mov.w	fp, #1
 8018190:	463a      	mov	r2, r7
 8018192:	4616      	mov	r6, r2
 8018194:	3201      	adds	r2, #1
 8018196:	7830      	ldrb	r0, [r6, #0]
 8018198:	f7ff ffa4 	bl	80180e4 <__hexdig_fun>
 801819c:	2800      	cmp	r0, #0
 801819e:	d1f8      	bne.n	8018192 <__gethex+0x84>
 80181a0:	9a01      	ldr	r2, [sp, #4]
 80181a2:	9903      	ldr	r1, [sp, #12]
 80181a4:	4630      	mov	r0, r6
 80181a6:	f001 f811 	bl	80191cc <strncmp>
 80181aa:	b950      	cbnz	r0, 80181c2 <__gethex+0xb4>
 80181ac:	b954      	cbnz	r4, 80181c4 <__gethex+0xb6>
 80181ae:	9b01      	ldr	r3, [sp, #4]
 80181b0:	18f4      	adds	r4, r6, r3
 80181b2:	4622      	mov	r2, r4
 80181b4:	4616      	mov	r6, r2
 80181b6:	3201      	adds	r2, #1
 80181b8:	7830      	ldrb	r0, [r6, #0]
 80181ba:	f7ff ff93 	bl	80180e4 <__hexdig_fun>
 80181be:	2800      	cmp	r0, #0
 80181c0:	d1f8      	bne.n	80181b4 <__gethex+0xa6>
 80181c2:	b10c      	cbz	r4, 80181c8 <__gethex+0xba>
 80181c4:	1ba4      	subs	r4, r4, r6
 80181c6:	00a4      	lsls	r4, r4, #2
 80181c8:	7833      	ldrb	r3, [r6, #0]
 80181ca:	2b50      	cmp	r3, #80	; 0x50
 80181cc:	d001      	beq.n	80181d2 <__gethex+0xc4>
 80181ce:	2b70      	cmp	r3, #112	; 0x70
 80181d0:	d140      	bne.n	8018254 <__gethex+0x146>
 80181d2:	7873      	ldrb	r3, [r6, #1]
 80181d4:	2b2b      	cmp	r3, #43	; 0x2b
 80181d6:	d031      	beq.n	801823c <__gethex+0x12e>
 80181d8:	2b2d      	cmp	r3, #45	; 0x2d
 80181da:	d033      	beq.n	8018244 <__gethex+0x136>
 80181dc:	1c71      	adds	r1, r6, #1
 80181de:	f04f 0900 	mov.w	r9, #0
 80181e2:	7808      	ldrb	r0, [r1, #0]
 80181e4:	f7ff ff7e 	bl	80180e4 <__hexdig_fun>
 80181e8:	1e43      	subs	r3, r0, #1
 80181ea:	b2db      	uxtb	r3, r3
 80181ec:	2b18      	cmp	r3, #24
 80181ee:	d831      	bhi.n	8018254 <__gethex+0x146>
 80181f0:	f1a0 0210 	sub.w	r2, r0, #16
 80181f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80181f8:	f7ff ff74 	bl	80180e4 <__hexdig_fun>
 80181fc:	1e43      	subs	r3, r0, #1
 80181fe:	b2db      	uxtb	r3, r3
 8018200:	2b18      	cmp	r3, #24
 8018202:	d922      	bls.n	801824a <__gethex+0x13c>
 8018204:	f1b9 0f00 	cmp.w	r9, #0
 8018208:	d000      	beq.n	801820c <__gethex+0xfe>
 801820a:	4252      	negs	r2, r2
 801820c:	4414      	add	r4, r2
 801820e:	f8ca 1000 	str.w	r1, [sl]
 8018212:	b30d      	cbz	r5, 8018258 <__gethex+0x14a>
 8018214:	f1bb 0f00 	cmp.w	fp, #0
 8018218:	bf0c      	ite	eq
 801821a:	2706      	moveq	r7, #6
 801821c:	2700      	movne	r7, #0
 801821e:	4638      	mov	r0, r7
 8018220:	b00b      	add	sp, #44	; 0x2c
 8018222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018226:	f10b 0b01 	add.w	fp, fp, #1
 801822a:	e78a      	b.n	8018142 <__gethex+0x34>
 801822c:	2500      	movs	r5, #0
 801822e:	462c      	mov	r4, r5
 8018230:	e7ae      	b.n	8018190 <__gethex+0x82>
 8018232:	463e      	mov	r6, r7
 8018234:	2501      	movs	r5, #1
 8018236:	e7c7      	b.n	80181c8 <__gethex+0xba>
 8018238:	4604      	mov	r4, r0
 801823a:	e7fb      	b.n	8018234 <__gethex+0x126>
 801823c:	f04f 0900 	mov.w	r9, #0
 8018240:	1cb1      	adds	r1, r6, #2
 8018242:	e7ce      	b.n	80181e2 <__gethex+0xd4>
 8018244:	f04f 0901 	mov.w	r9, #1
 8018248:	e7fa      	b.n	8018240 <__gethex+0x132>
 801824a:	230a      	movs	r3, #10
 801824c:	fb03 0202 	mla	r2, r3, r2, r0
 8018250:	3a10      	subs	r2, #16
 8018252:	e7cf      	b.n	80181f4 <__gethex+0xe6>
 8018254:	4631      	mov	r1, r6
 8018256:	e7da      	b.n	801820e <__gethex+0x100>
 8018258:	1bf3      	subs	r3, r6, r7
 801825a:	3b01      	subs	r3, #1
 801825c:	4629      	mov	r1, r5
 801825e:	2b07      	cmp	r3, #7
 8018260:	dc49      	bgt.n	80182f6 <__gethex+0x1e8>
 8018262:	9802      	ldr	r0, [sp, #8]
 8018264:	f000 fa52 	bl	801870c <_Balloc>
 8018268:	9b01      	ldr	r3, [sp, #4]
 801826a:	f100 0914 	add.w	r9, r0, #20
 801826e:	f04f 0b00 	mov.w	fp, #0
 8018272:	f1c3 0301 	rsb	r3, r3, #1
 8018276:	4605      	mov	r5, r0
 8018278:	f8cd 9010 	str.w	r9, [sp, #16]
 801827c:	46da      	mov	sl, fp
 801827e:	9308      	str	r3, [sp, #32]
 8018280:	42b7      	cmp	r7, r6
 8018282:	d33b      	bcc.n	80182fc <__gethex+0x1ee>
 8018284:	9804      	ldr	r0, [sp, #16]
 8018286:	f840 ab04 	str.w	sl, [r0], #4
 801828a:	eba0 0009 	sub.w	r0, r0, r9
 801828e:	1080      	asrs	r0, r0, #2
 8018290:	6128      	str	r0, [r5, #16]
 8018292:	0147      	lsls	r7, r0, #5
 8018294:	4650      	mov	r0, sl
 8018296:	f000 fafd 	bl	8018894 <__hi0bits>
 801829a:	f8d8 6000 	ldr.w	r6, [r8]
 801829e:	1a3f      	subs	r7, r7, r0
 80182a0:	42b7      	cmp	r7, r6
 80182a2:	dd64      	ble.n	801836e <__gethex+0x260>
 80182a4:	1bbf      	subs	r7, r7, r6
 80182a6:	4639      	mov	r1, r7
 80182a8:	4628      	mov	r0, r5
 80182aa:	f000 fe0d 	bl	8018ec8 <__any_on>
 80182ae:	4682      	mov	sl, r0
 80182b0:	b178      	cbz	r0, 80182d2 <__gethex+0x1c4>
 80182b2:	1e7b      	subs	r3, r7, #1
 80182b4:	1159      	asrs	r1, r3, #5
 80182b6:	f003 021f 	and.w	r2, r3, #31
 80182ba:	f04f 0a01 	mov.w	sl, #1
 80182be:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80182c2:	fa0a f202 	lsl.w	r2, sl, r2
 80182c6:	420a      	tst	r2, r1
 80182c8:	d003      	beq.n	80182d2 <__gethex+0x1c4>
 80182ca:	4553      	cmp	r3, sl
 80182cc:	dc46      	bgt.n	801835c <__gethex+0x24e>
 80182ce:	f04f 0a02 	mov.w	sl, #2
 80182d2:	4639      	mov	r1, r7
 80182d4:	4628      	mov	r0, r5
 80182d6:	f7ff fecb 	bl	8018070 <rshift>
 80182da:	443c      	add	r4, r7
 80182dc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80182e0:	42a3      	cmp	r3, r4
 80182e2:	da52      	bge.n	801838a <__gethex+0x27c>
 80182e4:	4629      	mov	r1, r5
 80182e6:	9802      	ldr	r0, [sp, #8]
 80182e8:	f000 fa44 	bl	8018774 <_Bfree>
 80182ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80182ee:	2300      	movs	r3, #0
 80182f0:	6013      	str	r3, [r2, #0]
 80182f2:	27a3      	movs	r7, #163	; 0xa3
 80182f4:	e793      	b.n	801821e <__gethex+0x110>
 80182f6:	3101      	adds	r1, #1
 80182f8:	105b      	asrs	r3, r3, #1
 80182fa:	e7b0      	b.n	801825e <__gethex+0x150>
 80182fc:	1e73      	subs	r3, r6, #1
 80182fe:	9305      	str	r3, [sp, #20]
 8018300:	9a07      	ldr	r2, [sp, #28]
 8018302:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8018306:	4293      	cmp	r3, r2
 8018308:	d018      	beq.n	801833c <__gethex+0x22e>
 801830a:	f1bb 0f20 	cmp.w	fp, #32
 801830e:	d107      	bne.n	8018320 <__gethex+0x212>
 8018310:	9b04      	ldr	r3, [sp, #16]
 8018312:	f8c3 a000 	str.w	sl, [r3]
 8018316:	3304      	adds	r3, #4
 8018318:	f04f 0a00 	mov.w	sl, #0
 801831c:	9304      	str	r3, [sp, #16]
 801831e:	46d3      	mov	fp, sl
 8018320:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8018324:	f7ff fede 	bl	80180e4 <__hexdig_fun>
 8018328:	f000 000f 	and.w	r0, r0, #15
 801832c:	fa00 f00b 	lsl.w	r0, r0, fp
 8018330:	ea4a 0a00 	orr.w	sl, sl, r0
 8018334:	f10b 0b04 	add.w	fp, fp, #4
 8018338:	9b05      	ldr	r3, [sp, #20]
 801833a:	e00d      	b.n	8018358 <__gethex+0x24a>
 801833c:	9b05      	ldr	r3, [sp, #20]
 801833e:	9a08      	ldr	r2, [sp, #32]
 8018340:	4413      	add	r3, r2
 8018342:	42bb      	cmp	r3, r7
 8018344:	d3e1      	bcc.n	801830a <__gethex+0x1fc>
 8018346:	4618      	mov	r0, r3
 8018348:	9a01      	ldr	r2, [sp, #4]
 801834a:	9903      	ldr	r1, [sp, #12]
 801834c:	9309      	str	r3, [sp, #36]	; 0x24
 801834e:	f000 ff3d 	bl	80191cc <strncmp>
 8018352:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018354:	2800      	cmp	r0, #0
 8018356:	d1d8      	bne.n	801830a <__gethex+0x1fc>
 8018358:	461e      	mov	r6, r3
 801835a:	e791      	b.n	8018280 <__gethex+0x172>
 801835c:	1eb9      	subs	r1, r7, #2
 801835e:	4628      	mov	r0, r5
 8018360:	f000 fdb2 	bl	8018ec8 <__any_on>
 8018364:	2800      	cmp	r0, #0
 8018366:	d0b2      	beq.n	80182ce <__gethex+0x1c0>
 8018368:	f04f 0a03 	mov.w	sl, #3
 801836c:	e7b1      	b.n	80182d2 <__gethex+0x1c4>
 801836e:	da09      	bge.n	8018384 <__gethex+0x276>
 8018370:	1bf7      	subs	r7, r6, r7
 8018372:	4629      	mov	r1, r5
 8018374:	463a      	mov	r2, r7
 8018376:	9802      	ldr	r0, [sp, #8]
 8018378:	f000 fbc8 	bl	8018b0c <__lshift>
 801837c:	1be4      	subs	r4, r4, r7
 801837e:	4605      	mov	r5, r0
 8018380:	f100 0914 	add.w	r9, r0, #20
 8018384:	f04f 0a00 	mov.w	sl, #0
 8018388:	e7a8      	b.n	80182dc <__gethex+0x1ce>
 801838a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801838e:	42a0      	cmp	r0, r4
 8018390:	dd6a      	ble.n	8018468 <__gethex+0x35a>
 8018392:	1b04      	subs	r4, r0, r4
 8018394:	42a6      	cmp	r6, r4
 8018396:	dc2e      	bgt.n	80183f6 <__gethex+0x2e8>
 8018398:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801839c:	2b02      	cmp	r3, #2
 801839e:	d022      	beq.n	80183e6 <__gethex+0x2d8>
 80183a0:	2b03      	cmp	r3, #3
 80183a2:	d024      	beq.n	80183ee <__gethex+0x2e0>
 80183a4:	2b01      	cmp	r3, #1
 80183a6:	d115      	bne.n	80183d4 <__gethex+0x2c6>
 80183a8:	42a6      	cmp	r6, r4
 80183aa:	d113      	bne.n	80183d4 <__gethex+0x2c6>
 80183ac:	2e01      	cmp	r6, #1
 80183ae:	dc0b      	bgt.n	80183c8 <__gethex+0x2ba>
 80183b0:	9a06      	ldr	r2, [sp, #24]
 80183b2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80183b6:	6013      	str	r3, [r2, #0]
 80183b8:	2301      	movs	r3, #1
 80183ba:	612b      	str	r3, [r5, #16]
 80183bc:	f8c9 3000 	str.w	r3, [r9]
 80183c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80183c2:	2762      	movs	r7, #98	; 0x62
 80183c4:	601d      	str	r5, [r3, #0]
 80183c6:	e72a      	b.n	801821e <__gethex+0x110>
 80183c8:	1e71      	subs	r1, r6, #1
 80183ca:	4628      	mov	r0, r5
 80183cc:	f000 fd7c 	bl	8018ec8 <__any_on>
 80183d0:	2800      	cmp	r0, #0
 80183d2:	d1ed      	bne.n	80183b0 <__gethex+0x2a2>
 80183d4:	4629      	mov	r1, r5
 80183d6:	9802      	ldr	r0, [sp, #8]
 80183d8:	f000 f9cc 	bl	8018774 <_Bfree>
 80183dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80183de:	2300      	movs	r3, #0
 80183e0:	6013      	str	r3, [r2, #0]
 80183e2:	2750      	movs	r7, #80	; 0x50
 80183e4:	e71b      	b.n	801821e <__gethex+0x110>
 80183e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80183e8:	2b00      	cmp	r3, #0
 80183ea:	d0e1      	beq.n	80183b0 <__gethex+0x2a2>
 80183ec:	e7f2      	b.n	80183d4 <__gethex+0x2c6>
 80183ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80183f0:	2b00      	cmp	r3, #0
 80183f2:	d1dd      	bne.n	80183b0 <__gethex+0x2a2>
 80183f4:	e7ee      	b.n	80183d4 <__gethex+0x2c6>
 80183f6:	1e67      	subs	r7, r4, #1
 80183f8:	f1ba 0f00 	cmp.w	sl, #0
 80183fc:	d131      	bne.n	8018462 <__gethex+0x354>
 80183fe:	b127      	cbz	r7, 801840a <__gethex+0x2fc>
 8018400:	4639      	mov	r1, r7
 8018402:	4628      	mov	r0, r5
 8018404:	f000 fd60 	bl	8018ec8 <__any_on>
 8018408:	4682      	mov	sl, r0
 801840a:	117a      	asrs	r2, r7, #5
 801840c:	2301      	movs	r3, #1
 801840e:	f007 071f 	and.w	r7, r7, #31
 8018412:	fa03 f707 	lsl.w	r7, r3, r7
 8018416:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801841a:	4621      	mov	r1, r4
 801841c:	421f      	tst	r7, r3
 801841e:	4628      	mov	r0, r5
 8018420:	bf18      	it	ne
 8018422:	f04a 0a02 	orrne.w	sl, sl, #2
 8018426:	1b36      	subs	r6, r6, r4
 8018428:	f7ff fe22 	bl	8018070 <rshift>
 801842c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8018430:	2702      	movs	r7, #2
 8018432:	f1ba 0f00 	cmp.w	sl, #0
 8018436:	d048      	beq.n	80184ca <__gethex+0x3bc>
 8018438:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801843c:	2b02      	cmp	r3, #2
 801843e:	d015      	beq.n	801846c <__gethex+0x35e>
 8018440:	2b03      	cmp	r3, #3
 8018442:	d017      	beq.n	8018474 <__gethex+0x366>
 8018444:	2b01      	cmp	r3, #1
 8018446:	d109      	bne.n	801845c <__gethex+0x34e>
 8018448:	f01a 0f02 	tst.w	sl, #2
 801844c:	d006      	beq.n	801845c <__gethex+0x34e>
 801844e:	f8d9 3000 	ldr.w	r3, [r9]
 8018452:	ea4a 0a03 	orr.w	sl, sl, r3
 8018456:	f01a 0f01 	tst.w	sl, #1
 801845a:	d10e      	bne.n	801847a <__gethex+0x36c>
 801845c:	f047 0710 	orr.w	r7, r7, #16
 8018460:	e033      	b.n	80184ca <__gethex+0x3bc>
 8018462:	f04f 0a01 	mov.w	sl, #1
 8018466:	e7d0      	b.n	801840a <__gethex+0x2fc>
 8018468:	2701      	movs	r7, #1
 801846a:	e7e2      	b.n	8018432 <__gethex+0x324>
 801846c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801846e:	f1c3 0301 	rsb	r3, r3, #1
 8018472:	9315      	str	r3, [sp, #84]	; 0x54
 8018474:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018476:	2b00      	cmp	r3, #0
 8018478:	d0f0      	beq.n	801845c <__gethex+0x34e>
 801847a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801847e:	f105 0314 	add.w	r3, r5, #20
 8018482:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8018486:	eb03 010a 	add.w	r1, r3, sl
 801848a:	f04f 0c00 	mov.w	ip, #0
 801848e:	4618      	mov	r0, r3
 8018490:	f853 2b04 	ldr.w	r2, [r3], #4
 8018494:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018498:	d01c      	beq.n	80184d4 <__gethex+0x3c6>
 801849a:	3201      	adds	r2, #1
 801849c:	6002      	str	r2, [r0, #0]
 801849e:	2f02      	cmp	r7, #2
 80184a0:	f105 0314 	add.w	r3, r5, #20
 80184a4:	d138      	bne.n	8018518 <__gethex+0x40a>
 80184a6:	f8d8 2000 	ldr.w	r2, [r8]
 80184aa:	3a01      	subs	r2, #1
 80184ac:	42b2      	cmp	r2, r6
 80184ae:	d10a      	bne.n	80184c6 <__gethex+0x3b8>
 80184b0:	1171      	asrs	r1, r6, #5
 80184b2:	2201      	movs	r2, #1
 80184b4:	f006 061f 	and.w	r6, r6, #31
 80184b8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80184bc:	fa02 f606 	lsl.w	r6, r2, r6
 80184c0:	421e      	tst	r6, r3
 80184c2:	bf18      	it	ne
 80184c4:	4617      	movne	r7, r2
 80184c6:	f047 0720 	orr.w	r7, r7, #32
 80184ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80184cc:	601d      	str	r5, [r3, #0]
 80184ce:	9b06      	ldr	r3, [sp, #24]
 80184d0:	601c      	str	r4, [r3, #0]
 80184d2:	e6a4      	b.n	801821e <__gethex+0x110>
 80184d4:	4299      	cmp	r1, r3
 80184d6:	f843 cc04 	str.w	ip, [r3, #-4]
 80184da:	d8d8      	bhi.n	801848e <__gethex+0x380>
 80184dc:	68ab      	ldr	r3, [r5, #8]
 80184de:	4599      	cmp	r9, r3
 80184e0:	db12      	blt.n	8018508 <__gethex+0x3fa>
 80184e2:	6869      	ldr	r1, [r5, #4]
 80184e4:	9802      	ldr	r0, [sp, #8]
 80184e6:	3101      	adds	r1, #1
 80184e8:	f000 f910 	bl	801870c <_Balloc>
 80184ec:	692a      	ldr	r2, [r5, #16]
 80184ee:	3202      	adds	r2, #2
 80184f0:	f105 010c 	add.w	r1, r5, #12
 80184f4:	4683      	mov	fp, r0
 80184f6:	0092      	lsls	r2, r2, #2
 80184f8:	300c      	adds	r0, #12
 80184fa:	f7fd f939 	bl	8015770 <memcpy>
 80184fe:	4629      	mov	r1, r5
 8018500:	9802      	ldr	r0, [sp, #8]
 8018502:	f000 f937 	bl	8018774 <_Bfree>
 8018506:	465d      	mov	r5, fp
 8018508:	692b      	ldr	r3, [r5, #16]
 801850a:	1c5a      	adds	r2, r3, #1
 801850c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8018510:	612a      	str	r2, [r5, #16]
 8018512:	2201      	movs	r2, #1
 8018514:	615a      	str	r2, [r3, #20]
 8018516:	e7c2      	b.n	801849e <__gethex+0x390>
 8018518:	692a      	ldr	r2, [r5, #16]
 801851a:	454a      	cmp	r2, r9
 801851c:	dd0b      	ble.n	8018536 <__gethex+0x428>
 801851e:	2101      	movs	r1, #1
 8018520:	4628      	mov	r0, r5
 8018522:	f7ff fda5 	bl	8018070 <rshift>
 8018526:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801852a:	3401      	adds	r4, #1
 801852c:	42a3      	cmp	r3, r4
 801852e:	f6ff aed9 	blt.w	80182e4 <__gethex+0x1d6>
 8018532:	2701      	movs	r7, #1
 8018534:	e7c7      	b.n	80184c6 <__gethex+0x3b8>
 8018536:	f016 061f 	ands.w	r6, r6, #31
 801853a:	d0fa      	beq.n	8018532 <__gethex+0x424>
 801853c:	449a      	add	sl, r3
 801853e:	f1c6 0620 	rsb	r6, r6, #32
 8018542:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8018546:	f000 f9a5 	bl	8018894 <__hi0bits>
 801854a:	42b0      	cmp	r0, r6
 801854c:	dbe7      	blt.n	801851e <__gethex+0x410>
 801854e:	e7f0      	b.n	8018532 <__gethex+0x424>

08018550 <L_shift>:
 8018550:	f1c2 0208 	rsb	r2, r2, #8
 8018554:	0092      	lsls	r2, r2, #2
 8018556:	b570      	push	{r4, r5, r6, lr}
 8018558:	f1c2 0620 	rsb	r6, r2, #32
 801855c:	6843      	ldr	r3, [r0, #4]
 801855e:	6804      	ldr	r4, [r0, #0]
 8018560:	fa03 f506 	lsl.w	r5, r3, r6
 8018564:	432c      	orrs	r4, r5
 8018566:	40d3      	lsrs	r3, r2
 8018568:	6004      	str	r4, [r0, #0]
 801856a:	f840 3f04 	str.w	r3, [r0, #4]!
 801856e:	4288      	cmp	r0, r1
 8018570:	d3f4      	bcc.n	801855c <L_shift+0xc>
 8018572:	bd70      	pop	{r4, r5, r6, pc}

08018574 <__match>:
 8018574:	b530      	push	{r4, r5, lr}
 8018576:	6803      	ldr	r3, [r0, #0]
 8018578:	3301      	adds	r3, #1
 801857a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801857e:	b914      	cbnz	r4, 8018586 <__match+0x12>
 8018580:	6003      	str	r3, [r0, #0]
 8018582:	2001      	movs	r0, #1
 8018584:	bd30      	pop	{r4, r5, pc}
 8018586:	f813 2b01 	ldrb.w	r2, [r3], #1
 801858a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801858e:	2d19      	cmp	r5, #25
 8018590:	bf98      	it	ls
 8018592:	3220      	addls	r2, #32
 8018594:	42a2      	cmp	r2, r4
 8018596:	d0f0      	beq.n	801857a <__match+0x6>
 8018598:	2000      	movs	r0, #0
 801859a:	e7f3      	b.n	8018584 <__match+0x10>

0801859c <__hexnan>:
 801859c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185a0:	680b      	ldr	r3, [r1, #0]
 80185a2:	6801      	ldr	r1, [r0, #0]
 80185a4:	115f      	asrs	r7, r3, #5
 80185a6:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80185aa:	f013 031f 	ands.w	r3, r3, #31
 80185ae:	b087      	sub	sp, #28
 80185b0:	bf18      	it	ne
 80185b2:	3704      	addne	r7, #4
 80185b4:	2500      	movs	r5, #0
 80185b6:	1f3e      	subs	r6, r7, #4
 80185b8:	4682      	mov	sl, r0
 80185ba:	4690      	mov	r8, r2
 80185bc:	9301      	str	r3, [sp, #4]
 80185be:	f847 5c04 	str.w	r5, [r7, #-4]
 80185c2:	46b1      	mov	r9, r6
 80185c4:	4634      	mov	r4, r6
 80185c6:	9502      	str	r5, [sp, #8]
 80185c8:	46ab      	mov	fp, r5
 80185ca:	784a      	ldrb	r2, [r1, #1]
 80185cc:	1c4b      	adds	r3, r1, #1
 80185ce:	9303      	str	r3, [sp, #12]
 80185d0:	b342      	cbz	r2, 8018624 <__hexnan+0x88>
 80185d2:	4610      	mov	r0, r2
 80185d4:	9105      	str	r1, [sp, #20]
 80185d6:	9204      	str	r2, [sp, #16]
 80185d8:	f7ff fd84 	bl	80180e4 <__hexdig_fun>
 80185dc:	2800      	cmp	r0, #0
 80185de:	d143      	bne.n	8018668 <__hexnan+0xcc>
 80185e0:	9a04      	ldr	r2, [sp, #16]
 80185e2:	9905      	ldr	r1, [sp, #20]
 80185e4:	2a20      	cmp	r2, #32
 80185e6:	d818      	bhi.n	801861a <__hexnan+0x7e>
 80185e8:	9b02      	ldr	r3, [sp, #8]
 80185ea:	459b      	cmp	fp, r3
 80185ec:	dd13      	ble.n	8018616 <__hexnan+0x7a>
 80185ee:	454c      	cmp	r4, r9
 80185f0:	d206      	bcs.n	8018600 <__hexnan+0x64>
 80185f2:	2d07      	cmp	r5, #7
 80185f4:	dc04      	bgt.n	8018600 <__hexnan+0x64>
 80185f6:	462a      	mov	r2, r5
 80185f8:	4649      	mov	r1, r9
 80185fa:	4620      	mov	r0, r4
 80185fc:	f7ff ffa8 	bl	8018550 <L_shift>
 8018600:	4544      	cmp	r4, r8
 8018602:	d944      	bls.n	801868e <__hexnan+0xf2>
 8018604:	2300      	movs	r3, #0
 8018606:	f1a4 0904 	sub.w	r9, r4, #4
 801860a:	f844 3c04 	str.w	r3, [r4, #-4]
 801860e:	f8cd b008 	str.w	fp, [sp, #8]
 8018612:	464c      	mov	r4, r9
 8018614:	461d      	mov	r5, r3
 8018616:	9903      	ldr	r1, [sp, #12]
 8018618:	e7d7      	b.n	80185ca <__hexnan+0x2e>
 801861a:	2a29      	cmp	r2, #41	; 0x29
 801861c:	d14a      	bne.n	80186b4 <__hexnan+0x118>
 801861e:	3102      	adds	r1, #2
 8018620:	f8ca 1000 	str.w	r1, [sl]
 8018624:	f1bb 0f00 	cmp.w	fp, #0
 8018628:	d044      	beq.n	80186b4 <__hexnan+0x118>
 801862a:	454c      	cmp	r4, r9
 801862c:	d206      	bcs.n	801863c <__hexnan+0xa0>
 801862e:	2d07      	cmp	r5, #7
 8018630:	dc04      	bgt.n	801863c <__hexnan+0xa0>
 8018632:	462a      	mov	r2, r5
 8018634:	4649      	mov	r1, r9
 8018636:	4620      	mov	r0, r4
 8018638:	f7ff ff8a 	bl	8018550 <L_shift>
 801863c:	4544      	cmp	r4, r8
 801863e:	d928      	bls.n	8018692 <__hexnan+0xf6>
 8018640:	4643      	mov	r3, r8
 8018642:	f854 2b04 	ldr.w	r2, [r4], #4
 8018646:	f843 2b04 	str.w	r2, [r3], #4
 801864a:	42a6      	cmp	r6, r4
 801864c:	d2f9      	bcs.n	8018642 <__hexnan+0xa6>
 801864e:	2200      	movs	r2, #0
 8018650:	f843 2b04 	str.w	r2, [r3], #4
 8018654:	429e      	cmp	r6, r3
 8018656:	d2fb      	bcs.n	8018650 <__hexnan+0xb4>
 8018658:	6833      	ldr	r3, [r6, #0]
 801865a:	b91b      	cbnz	r3, 8018664 <__hexnan+0xc8>
 801865c:	4546      	cmp	r6, r8
 801865e:	d127      	bne.n	80186b0 <__hexnan+0x114>
 8018660:	2301      	movs	r3, #1
 8018662:	6033      	str	r3, [r6, #0]
 8018664:	2005      	movs	r0, #5
 8018666:	e026      	b.n	80186b6 <__hexnan+0x11a>
 8018668:	3501      	adds	r5, #1
 801866a:	2d08      	cmp	r5, #8
 801866c:	f10b 0b01 	add.w	fp, fp, #1
 8018670:	dd06      	ble.n	8018680 <__hexnan+0xe4>
 8018672:	4544      	cmp	r4, r8
 8018674:	d9cf      	bls.n	8018616 <__hexnan+0x7a>
 8018676:	2300      	movs	r3, #0
 8018678:	f844 3c04 	str.w	r3, [r4, #-4]
 801867c:	2501      	movs	r5, #1
 801867e:	3c04      	subs	r4, #4
 8018680:	6822      	ldr	r2, [r4, #0]
 8018682:	f000 000f 	and.w	r0, r0, #15
 8018686:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801868a:	6020      	str	r0, [r4, #0]
 801868c:	e7c3      	b.n	8018616 <__hexnan+0x7a>
 801868e:	2508      	movs	r5, #8
 8018690:	e7c1      	b.n	8018616 <__hexnan+0x7a>
 8018692:	9b01      	ldr	r3, [sp, #4]
 8018694:	2b00      	cmp	r3, #0
 8018696:	d0df      	beq.n	8018658 <__hexnan+0xbc>
 8018698:	f04f 32ff 	mov.w	r2, #4294967295
 801869c:	f1c3 0320 	rsb	r3, r3, #32
 80186a0:	fa22 f303 	lsr.w	r3, r2, r3
 80186a4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80186a8:	401a      	ands	r2, r3
 80186aa:	f847 2c04 	str.w	r2, [r7, #-4]
 80186ae:	e7d3      	b.n	8018658 <__hexnan+0xbc>
 80186b0:	3e04      	subs	r6, #4
 80186b2:	e7d1      	b.n	8018658 <__hexnan+0xbc>
 80186b4:	2004      	movs	r0, #4
 80186b6:	b007      	add	sp, #28
 80186b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080186bc <__locale_ctype_ptr_l>:
 80186bc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80186c0:	4770      	bx	lr

080186c2 <__localeconv_l>:
 80186c2:	30f0      	adds	r0, #240	; 0xf0
 80186c4:	4770      	bx	lr
	...

080186c8 <_localeconv_r>:
 80186c8:	4b04      	ldr	r3, [pc, #16]	; (80186dc <_localeconv_r+0x14>)
 80186ca:	681b      	ldr	r3, [r3, #0]
 80186cc:	6a18      	ldr	r0, [r3, #32]
 80186ce:	4b04      	ldr	r3, [pc, #16]	; (80186e0 <_localeconv_r+0x18>)
 80186d0:	2800      	cmp	r0, #0
 80186d2:	bf08      	it	eq
 80186d4:	4618      	moveq	r0, r3
 80186d6:	30f0      	adds	r0, #240	; 0xf0
 80186d8:	4770      	bx	lr
 80186da:	bf00      	nop
 80186dc:	20000e0c 	.word	0x20000e0c
 80186e0:	20000e70 	.word	0x20000e70

080186e4 <__ascii_mbtowc>:
 80186e4:	b082      	sub	sp, #8
 80186e6:	b901      	cbnz	r1, 80186ea <__ascii_mbtowc+0x6>
 80186e8:	a901      	add	r1, sp, #4
 80186ea:	b142      	cbz	r2, 80186fe <__ascii_mbtowc+0x1a>
 80186ec:	b14b      	cbz	r3, 8018702 <__ascii_mbtowc+0x1e>
 80186ee:	7813      	ldrb	r3, [r2, #0]
 80186f0:	600b      	str	r3, [r1, #0]
 80186f2:	7812      	ldrb	r2, [r2, #0]
 80186f4:	1c10      	adds	r0, r2, #0
 80186f6:	bf18      	it	ne
 80186f8:	2001      	movne	r0, #1
 80186fa:	b002      	add	sp, #8
 80186fc:	4770      	bx	lr
 80186fe:	4610      	mov	r0, r2
 8018700:	e7fb      	b.n	80186fa <__ascii_mbtowc+0x16>
 8018702:	f06f 0001 	mvn.w	r0, #1
 8018706:	e7f8      	b.n	80186fa <__ascii_mbtowc+0x16>

08018708 <__malloc_lock>:
 8018708:	4770      	bx	lr

0801870a <__malloc_unlock>:
 801870a:	4770      	bx	lr

0801870c <_Balloc>:
 801870c:	b570      	push	{r4, r5, r6, lr}
 801870e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018710:	4604      	mov	r4, r0
 8018712:	460e      	mov	r6, r1
 8018714:	b93d      	cbnz	r5, 8018726 <_Balloc+0x1a>
 8018716:	2010      	movs	r0, #16
 8018718:	f7fd f81a 	bl	8015750 <malloc>
 801871c:	6260      	str	r0, [r4, #36]	; 0x24
 801871e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8018722:	6005      	str	r5, [r0, #0]
 8018724:	60c5      	str	r5, [r0, #12]
 8018726:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8018728:	68eb      	ldr	r3, [r5, #12]
 801872a:	b183      	cbz	r3, 801874e <_Balloc+0x42>
 801872c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801872e:	68db      	ldr	r3, [r3, #12]
 8018730:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8018734:	b9b8      	cbnz	r0, 8018766 <_Balloc+0x5a>
 8018736:	2101      	movs	r1, #1
 8018738:	fa01 f506 	lsl.w	r5, r1, r6
 801873c:	1d6a      	adds	r2, r5, #5
 801873e:	0092      	lsls	r2, r2, #2
 8018740:	4620      	mov	r0, r4
 8018742:	f000 fbe2 	bl	8018f0a <_calloc_r>
 8018746:	b160      	cbz	r0, 8018762 <_Balloc+0x56>
 8018748:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801874c:	e00e      	b.n	801876c <_Balloc+0x60>
 801874e:	2221      	movs	r2, #33	; 0x21
 8018750:	2104      	movs	r1, #4
 8018752:	4620      	mov	r0, r4
 8018754:	f000 fbd9 	bl	8018f0a <_calloc_r>
 8018758:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801875a:	60e8      	str	r0, [r5, #12]
 801875c:	68db      	ldr	r3, [r3, #12]
 801875e:	2b00      	cmp	r3, #0
 8018760:	d1e4      	bne.n	801872c <_Balloc+0x20>
 8018762:	2000      	movs	r0, #0
 8018764:	bd70      	pop	{r4, r5, r6, pc}
 8018766:	6802      	ldr	r2, [r0, #0]
 8018768:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801876c:	2300      	movs	r3, #0
 801876e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018772:	e7f7      	b.n	8018764 <_Balloc+0x58>

08018774 <_Bfree>:
 8018774:	b570      	push	{r4, r5, r6, lr}
 8018776:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8018778:	4606      	mov	r6, r0
 801877a:	460d      	mov	r5, r1
 801877c:	b93c      	cbnz	r4, 801878e <_Bfree+0x1a>
 801877e:	2010      	movs	r0, #16
 8018780:	f7fc ffe6 	bl	8015750 <malloc>
 8018784:	6270      	str	r0, [r6, #36]	; 0x24
 8018786:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801878a:	6004      	str	r4, [r0, #0]
 801878c:	60c4      	str	r4, [r0, #12]
 801878e:	b13d      	cbz	r5, 80187a0 <_Bfree+0x2c>
 8018790:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8018792:	686a      	ldr	r2, [r5, #4]
 8018794:	68db      	ldr	r3, [r3, #12]
 8018796:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801879a:	6029      	str	r1, [r5, #0]
 801879c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80187a0:	bd70      	pop	{r4, r5, r6, pc}

080187a2 <__multadd>:
 80187a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80187a6:	690d      	ldr	r5, [r1, #16]
 80187a8:	461f      	mov	r7, r3
 80187aa:	4606      	mov	r6, r0
 80187ac:	460c      	mov	r4, r1
 80187ae:	f101 0c14 	add.w	ip, r1, #20
 80187b2:	2300      	movs	r3, #0
 80187b4:	f8dc 0000 	ldr.w	r0, [ip]
 80187b8:	b281      	uxth	r1, r0
 80187ba:	fb02 7101 	mla	r1, r2, r1, r7
 80187be:	0c0f      	lsrs	r7, r1, #16
 80187c0:	0c00      	lsrs	r0, r0, #16
 80187c2:	fb02 7000 	mla	r0, r2, r0, r7
 80187c6:	b289      	uxth	r1, r1
 80187c8:	3301      	adds	r3, #1
 80187ca:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80187ce:	429d      	cmp	r5, r3
 80187d0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80187d4:	f84c 1b04 	str.w	r1, [ip], #4
 80187d8:	dcec      	bgt.n	80187b4 <__multadd+0x12>
 80187da:	b1d7      	cbz	r7, 8018812 <__multadd+0x70>
 80187dc:	68a3      	ldr	r3, [r4, #8]
 80187de:	42ab      	cmp	r3, r5
 80187e0:	dc12      	bgt.n	8018808 <__multadd+0x66>
 80187e2:	6861      	ldr	r1, [r4, #4]
 80187e4:	4630      	mov	r0, r6
 80187e6:	3101      	adds	r1, #1
 80187e8:	f7ff ff90 	bl	801870c <_Balloc>
 80187ec:	6922      	ldr	r2, [r4, #16]
 80187ee:	3202      	adds	r2, #2
 80187f0:	f104 010c 	add.w	r1, r4, #12
 80187f4:	4680      	mov	r8, r0
 80187f6:	0092      	lsls	r2, r2, #2
 80187f8:	300c      	adds	r0, #12
 80187fa:	f7fc ffb9 	bl	8015770 <memcpy>
 80187fe:	4621      	mov	r1, r4
 8018800:	4630      	mov	r0, r6
 8018802:	f7ff ffb7 	bl	8018774 <_Bfree>
 8018806:	4644      	mov	r4, r8
 8018808:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801880c:	3501      	adds	r5, #1
 801880e:	615f      	str	r7, [r3, #20]
 8018810:	6125      	str	r5, [r4, #16]
 8018812:	4620      	mov	r0, r4
 8018814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018818 <__s2b>:
 8018818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801881c:	460c      	mov	r4, r1
 801881e:	4615      	mov	r5, r2
 8018820:	461f      	mov	r7, r3
 8018822:	2209      	movs	r2, #9
 8018824:	3308      	adds	r3, #8
 8018826:	4606      	mov	r6, r0
 8018828:	fb93 f3f2 	sdiv	r3, r3, r2
 801882c:	2100      	movs	r1, #0
 801882e:	2201      	movs	r2, #1
 8018830:	429a      	cmp	r2, r3
 8018832:	db20      	blt.n	8018876 <__s2b+0x5e>
 8018834:	4630      	mov	r0, r6
 8018836:	f7ff ff69 	bl	801870c <_Balloc>
 801883a:	9b08      	ldr	r3, [sp, #32]
 801883c:	6143      	str	r3, [r0, #20]
 801883e:	2d09      	cmp	r5, #9
 8018840:	f04f 0301 	mov.w	r3, #1
 8018844:	6103      	str	r3, [r0, #16]
 8018846:	dd19      	ble.n	801887c <__s2b+0x64>
 8018848:	f104 0809 	add.w	r8, r4, #9
 801884c:	46c1      	mov	r9, r8
 801884e:	442c      	add	r4, r5
 8018850:	f819 3b01 	ldrb.w	r3, [r9], #1
 8018854:	4601      	mov	r1, r0
 8018856:	3b30      	subs	r3, #48	; 0x30
 8018858:	220a      	movs	r2, #10
 801885a:	4630      	mov	r0, r6
 801885c:	f7ff ffa1 	bl	80187a2 <__multadd>
 8018860:	45a1      	cmp	r9, r4
 8018862:	d1f5      	bne.n	8018850 <__s2b+0x38>
 8018864:	eb08 0405 	add.w	r4, r8, r5
 8018868:	3c08      	subs	r4, #8
 801886a:	1b2d      	subs	r5, r5, r4
 801886c:	1963      	adds	r3, r4, r5
 801886e:	42bb      	cmp	r3, r7
 8018870:	db07      	blt.n	8018882 <__s2b+0x6a>
 8018872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018876:	0052      	lsls	r2, r2, #1
 8018878:	3101      	adds	r1, #1
 801887a:	e7d9      	b.n	8018830 <__s2b+0x18>
 801887c:	340a      	adds	r4, #10
 801887e:	2509      	movs	r5, #9
 8018880:	e7f3      	b.n	801886a <__s2b+0x52>
 8018882:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018886:	4601      	mov	r1, r0
 8018888:	3b30      	subs	r3, #48	; 0x30
 801888a:	220a      	movs	r2, #10
 801888c:	4630      	mov	r0, r6
 801888e:	f7ff ff88 	bl	80187a2 <__multadd>
 8018892:	e7eb      	b.n	801886c <__s2b+0x54>

08018894 <__hi0bits>:
 8018894:	0c02      	lsrs	r2, r0, #16
 8018896:	0412      	lsls	r2, r2, #16
 8018898:	4603      	mov	r3, r0
 801889a:	b9b2      	cbnz	r2, 80188ca <__hi0bits+0x36>
 801889c:	0403      	lsls	r3, r0, #16
 801889e:	2010      	movs	r0, #16
 80188a0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80188a4:	bf04      	itt	eq
 80188a6:	021b      	lsleq	r3, r3, #8
 80188a8:	3008      	addeq	r0, #8
 80188aa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80188ae:	bf04      	itt	eq
 80188b0:	011b      	lsleq	r3, r3, #4
 80188b2:	3004      	addeq	r0, #4
 80188b4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80188b8:	bf04      	itt	eq
 80188ba:	009b      	lsleq	r3, r3, #2
 80188bc:	3002      	addeq	r0, #2
 80188be:	2b00      	cmp	r3, #0
 80188c0:	db06      	blt.n	80188d0 <__hi0bits+0x3c>
 80188c2:	005b      	lsls	r3, r3, #1
 80188c4:	d503      	bpl.n	80188ce <__hi0bits+0x3a>
 80188c6:	3001      	adds	r0, #1
 80188c8:	4770      	bx	lr
 80188ca:	2000      	movs	r0, #0
 80188cc:	e7e8      	b.n	80188a0 <__hi0bits+0xc>
 80188ce:	2020      	movs	r0, #32
 80188d0:	4770      	bx	lr

080188d2 <__lo0bits>:
 80188d2:	6803      	ldr	r3, [r0, #0]
 80188d4:	f013 0207 	ands.w	r2, r3, #7
 80188d8:	4601      	mov	r1, r0
 80188da:	d00b      	beq.n	80188f4 <__lo0bits+0x22>
 80188dc:	07da      	lsls	r2, r3, #31
 80188de:	d423      	bmi.n	8018928 <__lo0bits+0x56>
 80188e0:	0798      	lsls	r0, r3, #30
 80188e2:	bf49      	itett	mi
 80188e4:	085b      	lsrmi	r3, r3, #1
 80188e6:	089b      	lsrpl	r3, r3, #2
 80188e8:	2001      	movmi	r0, #1
 80188ea:	600b      	strmi	r3, [r1, #0]
 80188ec:	bf5c      	itt	pl
 80188ee:	600b      	strpl	r3, [r1, #0]
 80188f0:	2002      	movpl	r0, #2
 80188f2:	4770      	bx	lr
 80188f4:	b298      	uxth	r0, r3
 80188f6:	b9a8      	cbnz	r0, 8018924 <__lo0bits+0x52>
 80188f8:	0c1b      	lsrs	r3, r3, #16
 80188fa:	2010      	movs	r0, #16
 80188fc:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018900:	bf04      	itt	eq
 8018902:	0a1b      	lsreq	r3, r3, #8
 8018904:	3008      	addeq	r0, #8
 8018906:	071a      	lsls	r2, r3, #28
 8018908:	bf04      	itt	eq
 801890a:	091b      	lsreq	r3, r3, #4
 801890c:	3004      	addeq	r0, #4
 801890e:	079a      	lsls	r2, r3, #30
 8018910:	bf04      	itt	eq
 8018912:	089b      	lsreq	r3, r3, #2
 8018914:	3002      	addeq	r0, #2
 8018916:	07da      	lsls	r2, r3, #31
 8018918:	d402      	bmi.n	8018920 <__lo0bits+0x4e>
 801891a:	085b      	lsrs	r3, r3, #1
 801891c:	d006      	beq.n	801892c <__lo0bits+0x5a>
 801891e:	3001      	adds	r0, #1
 8018920:	600b      	str	r3, [r1, #0]
 8018922:	4770      	bx	lr
 8018924:	4610      	mov	r0, r2
 8018926:	e7e9      	b.n	80188fc <__lo0bits+0x2a>
 8018928:	2000      	movs	r0, #0
 801892a:	4770      	bx	lr
 801892c:	2020      	movs	r0, #32
 801892e:	4770      	bx	lr

08018930 <__i2b>:
 8018930:	b510      	push	{r4, lr}
 8018932:	460c      	mov	r4, r1
 8018934:	2101      	movs	r1, #1
 8018936:	f7ff fee9 	bl	801870c <_Balloc>
 801893a:	2201      	movs	r2, #1
 801893c:	6144      	str	r4, [r0, #20]
 801893e:	6102      	str	r2, [r0, #16]
 8018940:	bd10      	pop	{r4, pc}

08018942 <__multiply>:
 8018942:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018946:	4614      	mov	r4, r2
 8018948:	690a      	ldr	r2, [r1, #16]
 801894a:	6923      	ldr	r3, [r4, #16]
 801894c:	429a      	cmp	r2, r3
 801894e:	bfb8      	it	lt
 8018950:	460b      	movlt	r3, r1
 8018952:	4688      	mov	r8, r1
 8018954:	bfbc      	itt	lt
 8018956:	46a0      	movlt	r8, r4
 8018958:	461c      	movlt	r4, r3
 801895a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801895e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8018962:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018966:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801896a:	eb07 0609 	add.w	r6, r7, r9
 801896e:	42b3      	cmp	r3, r6
 8018970:	bfb8      	it	lt
 8018972:	3101      	addlt	r1, #1
 8018974:	f7ff feca 	bl	801870c <_Balloc>
 8018978:	f100 0514 	add.w	r5, r0, #20
 801897c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8018980:	462b      	mov	r3, r5
 8018982:	2200      	movs	r2, #0
 8018984:	4573      	cmp	r3, lr
 8018986:	d316      	bcc.n	80189b6 <__multiply+0x74>
 8018988:	f104 0214 	add.w	r2, r4, #20
 801898c:	f108 0114 	add.w	r1, r8, #20
 8018990:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8018994:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8018998:	9300      	str	r3, [sp, #0]
 801899a:	9b00      	ldr	r3, [sp, #0]
 801899c:	9201      	str	r2, [sp, #4]
 801899e:	4293      	cmp	r3, r2
 80189a0:	d80c      	bhi.n	80189bc <__multiply+0x7a>
 80189a2:	2e00      	cmp	r6, #0
 80189a4:	dd03      	ble.n	80189ae <__multiply+0x6c>
 80189a6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80189aa:	2b00      	cmp	r3, #0
 80189ac:	d05d      	beq.n	8018a6a <__multiply+0x128>
 80189ae:	6106      	str	r6, [r0, #16]
 80189b0:	b003      	add	sp, #12
 80189b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189b6:	f843 2b04 	str.w	r2, [r3], #4
 80189ba:	e7e3      	b.n	8018984 <__multiply+0x42>
 80189bc:	f8b2 b000 	ldrh.w	fp, [r2]
 80189c0:	f1bb 0f00 	cmp.w	fp, #0
 80189c4:	d023      	beq.n	8018a0e <__multiply+0xcc>
 80189c6:	4689      	mov	r9, r1
 80189c8:	46ac      	mov	ip, r5
 80189ca:	f04f 0800 	mov.w	r8, #0
 80189ce:	f859 4b04 	ldr.w	r4, [r9], #4
 80189d2:	f8dc a000 	ldr.w	sl, [ip]
 80189d6:	b2a3      	uxth	r3, r4
 80189d8:	fa1f fa8a 	uxth.w	sl, sl
 80189dc:	fb0b a303 	mla	r3, fp, r3, sl
 80189e0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80189e4:	f8dc 4000 	ldr.w	r4, [ip]
 80189e8:	4443      	add	r3, r8
 80189ea:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80189ee:	fb0b 840a 	mla	r4, fp, sl, r8
 80189f2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80189f6:	46e2      	mov	sl, ip
 80189f8:	b29b      	uxth	r3, r3
 80189fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80189fe:	454f      	cmp	r7, r9
 8018a00:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018a04:	f84a 3b04 	str.w	r3, [sl], #4
 8018a08:	d82b      	bhi.n	8018a62 <__multiply+0x120>
 8018a0a:	f8cc 8004 	str.w	r8, [ip, #4]
 8018a0e:	9b01      	ldr	r3, [sp, #4]
 8018a10:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8018a14:	3204      	adds	r2, #4
 8018a16:	f1ba 0f00 	cmp.w	sl, #0
 8018a1a:	d020      	beq.n	8018a5e <__multiply+0x11c>
 8018a1c:	682b      	ldr	r3, [r5, #0]
 8018a1e:	4689      	mov	r9, r1
 8018a20:	46a8      	mov	r8, r5
 8018a22:	f04f 0b00 	mov.w	fp, #0
 8018a26:	f8b9 c000 	ldrh.w	ip, [r9]
 8018a2a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8018a2e:	fb0a 440c 	mla	r4, sl, ip, r4
 8018a32:	445c      	add	r4, fp
 8018a34:	46c4      	mov	ip, r8
 8018a36:	b29b      	uxth	r3, r3
 8018a38:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018a3c:	f84c 3b04 	str.w	r3, [ip], #4
 8018a40:	f859 3b04 	ldr.w	r3, [r9], #4
 8018a44:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8018a48:	0c1b      	lsrs	r3, r3, #16
 8018a4a:	fb0a b303 	mla	r3, sl, r3, fp
 8018a4e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8018a52:	454f      	cmp	r7, r9
 8018a54:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8018a58:	d805      	bhi.n	8018a66 <__multiply+0x124>
 8018a5a:	f8c8 3004 	str.w	r3, [r8, #4]
 8018a5e:	3504      	adds	r5, #4
 8018a60:	e79b      	b.n	801899a <__multiply+0x58>
 8018a62:	46d4      	mov	ip, sl
 8018a64:	e7b3      	b.n	80189ce <__multiply+0x8c>
 8018a66:	46e0      	mov	r8, ip
 8018a68:	e7dd      	b.n	8018a26 <__multiply+0xe4>
 8018a6a:	3e01      	subs	r6, #1
 8018a6c:	e799      	b.n	80189a2 <__multiply+0x60>
	...

08018a70 <__pow5mult>:
 8018a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018a74:	4615      	mov	r5, r2
 8018a76:	f012 0203 	ands.w	r2, r2, #3
 8018a7a:	4606      	mov	r6, r0
 8018a7c:	460f      	mov	r7, r1
 8018a7e:	d007      	beq.n	8018a90 <__pow5mult+0x20>
 8018a80:	3a01      	subs	r2, #1
 8018a82:	4c21      	ldr	r4, [pc, #132]	; (8018b08 <__pow5mult+0x98>)
 8018a84:	2300      	movs	r3, #0
 8018a86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018a8a:	f7ff fe8a 	bl	80187a2 <__multadd>
 8018a8e:	4607      	mov	r7, r0
 8018a90:	10ad      	asrs	r5, r5, #2
 8018a92:	d035      	beq.n	8018b00 <__pow5mult+0x90>
 8018a94:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8018a96:	b93c      	cbnz	r4, 8018aa8 <__pow5mult+0x38>
 8018a98:	2010      	movs	r0, #16
 8018a9a:	f7fc fe59 	bl	8015750 <malloc>
 8018a9e:	6270      	str	r0, [r6, #36]	; 0x24
 8018aa0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018aa4:	6004      	str	r4, [r0, #0]
 8018aa6:	60c4      	str	r4, [r0, #12]
 8018aa8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018aac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018ab0:	b94c      	cbnz	r4, 8018ac6 <__pow5mult+0x56>
 8018ab2:	f240 2171 	movw	r1, #625	; 0x271
 8018ab6:	4630      	mov	r0, r6
 8018ab8:	f7ff ff3a 	bl	8018930 <__i2b>
 8018abc:	2300      	movs	r3, #0
 8018abe:	f8c8 0008 	str.w	r0, [r8, #8]
 8018ac2:	4604      	mov	r4, r0
 8018ac4:	6003      	str	r3, [r0, #0]
 8018ac6:	f04f 0800 	mov.w	r8, #0
 8018aca:	07eb      	lsls	r3, r5, #31
 8018acc:	d50a      	bpl.n	8018ae4 <__pow5mult+0x74>
 8018ace:	4639      	mov	r1, r7
 8018ad0:	4622      	mov	r2, r4
 8018ad2:	4630      	mov	r0, r6
 8018ad4:	f7ff ff35 	bl	8018942 <__multiply>
 8018ad8:	4639      	mov	r1, r7
 8018ada:	4681      	mov	r9, r0
 8018adc:	4630      	mov	r0, r6
 8018ade:	f7ff fe49 	bl	8018774 <_Bfree>
 8018ae2:	464f      	mov	r7, r9
 8018ae4:	106d      	asrs	r5, r5, #1
 8018ae6:	d00b      	beq.n	8018b00 <__pow5mult+0x90>
 8018ae8:	6820      	ldr	r0, [r4, #0]
 8018aea:	b938      	cbnz	r0, 8018afc <__pow5mult+0x8c>
 8018aec:	4622      	mov	r2, r4
 8018aee:	4621      	mov	r1, r4
 8018af0:	4630      	mov	r0, r6
 8018af2:	f7ff ff26 	bl	8018942 <__multiply>
 8018af6:	6020      	str	r0, [r4, #0]
 8018af8:	f8c0 8000 	str.w	r8, [r0]
 8018afc:	4604      	mov	r4, r0
 8018afe:	e7e4      	b.n	8018aca <__pow5mult+0x5a>
 8018b00:	4638      	mov	r0, r7
 8018b02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018b06:	bf00      	nop
 8018b08:	0801b370 	.word	0x0801b370

08018b0c <__lshift>:
 8018b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018b10:	460c      	mov	r4, r1
 8018b12:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018b16:	6923      	ldr	r3, [r4, #16]
 8018b18:	6849      	ldr	r1, [r1, #4]
 8018b1a:	eb0a 0903 	add.w	r9, sl, r3
 8018b1e:	68a3      	ldr	r3, [r4, #8]
 8018b20:	4607      	mov	r7, r0
 8018b22:	4616      	mov	r6, r2
 8018b24:	f109 0501 	add.w	r5, r9, #1
 8018b28:	42ab      	cmp	r3, r5
 8018b2a:	db32      	blt.n	8018b92 <__lshift+0x86>
 8018b2c:	4638      	mov	r0, r7
 8018b2e:	f7ff fded 	bl	801870c <_Balloc>
 8018b32:	2300      	movs	r3, #0
 8018b34:	4680      	mov	r8, r0
 8018b36:	f100 0114 	add.w	r1, r0, #20
 8018b3a:	461a      	mov	r2, r3
 8018b3c:	4553      	cmp	r3, sl
 8018b3e:	db2b      	blt.n	8018b98 <__lshift+0x8c>
 8018b40:	6920      	ldr	r0, [r4, #16]
 8018b42:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018b46:	f104 0314 	add.w	r3, r4, #20
 8018b4a:	f016 021f 	ands.w	r2, r6, #31
 8018b4e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018b52:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018b56:	d025      	beq.n	8018ba4 <__lshift+0x98>
 8018b58:	f1c2 0e20 	rsb	lr, r2, #32
 8018b5c:	2000      	movs	r0, #0
 8018b5e:	681e      	ldr	r6, [r3, #0]
 8018b60:	468a      	mov	sl, r1
 8018b62:	4096      	lsls	r6, r2
 8018b64:	4330      	orrs	r0, r6
 8018b66:	f84a 0b04 	str.w	r0, [sl], #4
 8018b6a:	f853 0b04 	ldr.w	r0, [r3], #4
 8018b6e:	459c      	cmp	ip, r3
 8018b70:	fa20 f00e 	lsr.w	r0, r0, lr
 8018b74:	d814      	bhi.n	8018ba0 <__lshift+0x94>
 8018b76:	6048      	str	r0, [r1, #4]
 8018b78:	b108      	cbz	r0, 8018b7e <__lshift+0x72>
 8018b7a:	f109 0502 	add.w	r5, r9, #2
 8018b7e:	3d01      	subs	r5, #1
 8018b80:	4638      	mov	r0, r7
 8018b82:	f8c8 5010 	str.w	r5, [r8, #16]
 8018b86:	4621      	mov	r1, r4
 8018b88:	f7ff fdf4 	bl	8018774 <_Bfree>
 8018b8c:	4640      	mov	r0, r8
 8018b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018b92:	3101      	adds	r1, #1
 8018b94:	005b      	lsls	r3, r3, #1
 8018b96:	e7c7      	b.n	8018b28 <__lshift+0x1c>
 8018b98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8018b9c:	3301      	adds	r3, #1
 8018b9e:	e7cd      	b.n	8018b3c <__lshift+0x30>
 8018ba0:	4651      	mov	r1, sl
 8018ba2:	e7dc      	b.n	8018b5e <__lshift+0x52>
 8018ba4:	3904      	subs	r1, #4
 8018ba6:	f853 2b04 	ldr.w	r2, [r3], #4
 8018baa:	f841 2f04 	str.w	r2, [r1, #4]!
 8018bae:	459c      	cmp	ip, r3
 8018bb0:	d8f9      	bhi.n	8018ba6 <__lshift+0x9a>
 8018bb2:	e7e4      	b.n	8018b7e <__lshift+0x72>

08018bb4 <__mcmp>:
 8018bb4:	6903      	ldr	r3, [r0, #16]
 8018bb6:	690a      	ldr	r2, [r1, #16]
 8018bb8:	1a9b      	subs	r3, r3, r2
 8018bba:	b530      	push	{r4, r5, lr}
 8018bbc:	d10c      	bne.n	8018bd8 <__mcmp+0x24>
 8018bbe:	0092      	lsls	r2, r2, #2
 8018bc0:	3014      	adds	r0, #20
 8018bc2:	3114      	adds	r1, #20
 8018bc4:	1884      	adds	r4, r0, r2
 8018bc6:	4411      	add	r1, r2
 8018bc8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018bcc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018bd0:	4295      	cmp	r5, r2
 8018bd2:	d003      	beq.n	8018bdc <__mcmp+0x28>
 8018bd4:	d305      	bcc.n	8018be2 <__mcmp+0x2e>
 8018bd6:	2301      	movs	r3, #1
 8018bd8:	4618      	mov	r0, r3
 8018bda:	bd30      	pop	{r4, r5, pc}
 8018bdc:	42a0      	cmp	r0, r4
 8018bde:	d3f3      	bcc.n	8018bc8 <__mcmp+0x14>
 8018be0:	e7fa      	b.n	8018bd8 <__mcmp+0x24>
 8018be2:	f04f 33ff 	mov.w	r3, #4294967295
 8018be6:	e7f7      	b.n	8018bd8 <__mcmp+0x24>

08018be8 <__mdiff>:
 8018be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018bec:	460d      	mov	r5, r1
 8018bee:	4607      	mov	r7, r0
 8018bf0:	4611      	mov	r1, r2
 8018bf2:	4628      	mov	r0, r5
 8018bf4:	4614      	mov	r4, r2
 8018bf6:	f7ff ffdd 	bl	8018bb4 <__mcmp>
 8018bfa:	1e06      	subs	r6, r0, #0
 8018bfc:	d108      	bne.n	8018c10 <__mdiff+0x28>
 8018bfe:	4631      	mov	r1, r6
 8018c00:	4638      	mov	r0, r7
 8018c02:	f7ff fd83 	bl	801870c <_Balloc>
 8018c06:	2301      	movs	r3, #1
 8018c08:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8018c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018c10:	bfa4      	itt	ge
 8018c12:	4623      	movge	r3, r4
 8018c14:	462c      	movge	r4, r5
 8018c16:	4638      	mov	r0, r7
 8018c18:	6861      	ldr	r1, [r4, #4]
 8018c1a:	bfa6      	itte	ge
 8018c1c:	461d      	movge	r5, r3
 8018c1e:	2600      	movge	r6, #0
 8018c20:	2601      	movlt	r6, #1
 8018c22:	f7ff fd73 	bl	801870c <_Balloc>
 8018c26:	692b      	ldr	r3, [r5, #16]
 8018c28:	60c6      	str	r6, [r0, #12]
 8018c2a:	6926      	ldr	r6, [r4, #16]
 8018c2c:	f105 0914 	add.w	r9, r5, #20
 8018c30:	f104 0214 	add.w	r2, r4, #20
 8018c34:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8018c38:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8018c3c:	f100 0514 	add.w	r5, r0, #20
 8018c40:	f04f 0e00 	mov.w	lr, #0
 8018c44:	f852 ab04 	ldr.w	sl, [r2], #4
 8018c48:	f859 4b04 	ldr.w	r4, [r9], #4
 8018c4c:	fa1e f18a 	uxtah	r1, lr, sl
 8018c50:	b2a3      	uxth	r3, r4
 8018c52:	1ac9      	subs	r1, r1, r3
 8018c54:	0c23      	lsrs	r3, r4, #16
 8018c56:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8018c5a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8018c5e:	b289      	uxth	r1, r1
 8018c60:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8018c64:	45c8      	cmp	r8, r9
 8018c66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8018c6a:	4694      	mov	ip, r2
 8018c6c:	f845 3b04 	str.w	r3, [r5], #4
 8018c70:	d8e8      	bhi.n	8018c44 <__mdiff+0x5c>
 8018c72:	45bc      	cmp	ip, r7
 8018c74:	d304      	bcc.n	8018c80 <__mdiff+0x98>
 8018c76:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8018c7a:	b183      	cbz	r3, 8018c9e <__mdiff+0xb6>
 8018c7c:	6106      	str	r6, [r0, #16]
 8018c7e:	e7c5      	b.n	8018c0c <__mdiff+0x24>
 8018c80:	f85c 1b04 	ldr.w	r1, [ip], #4
 8018c84:	fa1e f381 	uxtah	r3, lr, r1
 8018c88:	141a      	asrs	r2, r3, #16
 8018c8a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018c8e:	b29b      	uxth	r3, r3
 8018c90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018c94:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8018c98:	f845 3b04 	str.w	r3, [r5], #4
 8018c9c:	e7e9      	b.n	8018c72 <__mdiff+0x8a>
 8018c9e:	3e01      	subs	r6, #1
 8018ca0:	e7e9      	b.n	8018c76 <__mdiff+0x8e>
	...

08018ca4 <__ulp>:
 8018ca4:	4b12      	ldr	r3, [pc, #72]	; (8018cf0 <__ulp+0x4c>)
 8018ca6:	ee10 2a90 	vmov	r2, s1
 8018caa:	401a      	ands	r2, r3
 8018cac:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8018cb0:	2b00      	cmp	r3, #0
 8018cb2:	dd04      	ble.n	8018cbe <__ulp+0x1a>
 8018cb4:	2000      	movs	r0, #0
 8018cb6:	4619      	mov	r1, r3
 8018cb8:	ec41 0b10 	vmov	d0, r0, r1
 8018cbc:	4770      	bx	lr
 8018cbe:	425b      	negs	r3, r3
 8018cc0:	151b      	asrs	r3, r3, #20
 8018cc2:	2b13      	cmp	r3, #19
 8018cc4:	f04f 0000 	mov.w	r0, #0
 8018cc8:	f04f 0100 	mov.w	r1, #0
 8018ccc:	dc04      	bgt.n	8018cd8 <__ulp+0x34>
 8018cce:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8018cd2:	fa42 f103 	asr.w	r1, r2, r3
 8018cd6:	e7ef      	b.n	8018cb8 <__ulp+0x14>
 8018cd8:	3b14      	subs	r3, #20
 8018cda:	2b1e      	cmp	r3, #30
 8018cdc:	f04f 0201 	mov.w	r2, #1
 8018ce0:	bfda      	itte	le
 8018ce2:	f1c3 031f 	rsble	r3, r3, #31
 8018ce6:	fa02 f303 	lslle.w	r3, r2, r3
 8018cea:	4613      	movgt	r3, r2
 8018cec:	4618      	mov	r0, r3
 8018cee:	e7e3      	b.n	8018cb8 <__ulp+0x14>
 8018cf0:	7ff00000 	.word	0x7ff00000

08018cf4 <__b2d>:
 8018cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018cf6:	6905      	ldr	r5, [r0, #16]
 8018cf8:	f100 0714 	add.w	r7, r0, #20
 8018cfc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8018d00:	1f2e      	subs	r6, r5, #4
 8018d02:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8018d06:	4620      	mov	r0, r4
 8018d08:	f7ff fdc4 	bl	8018894 <__hi0bits>
 8018d0c:	f1c0 0320 	rsb	r3, r0, #32
 8018d10:	280a      	cmp	r0, #10
 8018d12:	600b      	str	r3, [r1, #0]
 8018d14:	f8df c074 	ldr.w	ip, [pc, #116]	; 8018d8c <__b2d+0x98>
 8018d18:	dc14      	bgt.n	8018d44 <__b2d+0x50>
 8018d1a:	f1c0 0e0b 	rsb	lr, r0, #11
 8018d1e:	fa24 f10e 	lsr.w	r1, r4, lr
 8018d22:	42b7      	cmp	r7, r6
 8018d24:	ea41 030c 	orr.w	r3, r1, ip
 8018d28:	bf34      	ite	cc
 8018d2a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018d2e:	2100      	movcs	r1, #0
 8018d30:	3015      	adds	r0, #21
 8018d32:	fa04 f000 	lsl.w	r0, r4, r0
 8018d36:	fa21 f10e 	lsr.w	r1, r1, lr
 8018d3a:	ea40 0201 	orr.w	r2, r0, r1
 8018d3e:	ec43 2b10 	vmov	d0, r2, r3
 8018d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018d44:	42b7      	cmp	r7, r6
 8018d46:	bf3a      	itte	cc
 8018d48:	f1a5 0608 	subcc.w	r6, r5, #8
 8018d4c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018d50:	2100      	movcs	r1, #0
 8018d52:	380b      	subs	r0, #11
 8018d54:	d015      	beq.n	8018d82 <__b2d+0x8e>
 8018d56:	4084      	lsls	r4, r0
 8018d58:	f1c0 0520 	rsb	r5, r0, #32
 8018d5c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8018d60:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8018d64:	42be      	cmp	r6, r7
 8018d66:	fa21 fc05 	lsr.w	ip, r1, r5
 8018d6a:	ea44 030c 	orr.w	r3, r4, ip
 8018d6e:	bf8c      	ite	hi
 8018d70:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8018d74:	2400      	movls	r4, #0
 8018d76:	fa01 f000 	lsl.w	r0, r1, r0
 8018d7a:	40ec      	lsrs	r4, r5
 8018d7c:	ea40 0204 	orr.w	r2, r0, r4
 8018d80:	e7dd      	b.n	8018d3e <__b2d+0x4a>
 8018d82:	ea44 030c 	orr.w	r3, r4, ip
 8018d86:	460a      	mov	r2, r1
 8018d88:	e7d9      	b.n	8018d3e <__b2d+0x4a>
 8018d8a:	bf00      	nop
 8018d8c:	3ff00000 	.word	0x3ff00000

08018d90 <__d2b>:
 8018d90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018d94:	460e      	mov	r6, r1
 8018d96:	2101      	movs	r1, #1
 8018d98:	ec59 8b10 	vmov	r8, r9, d0
 8018d9c:	4615      	mov	r5, r2
 8018d9e:	f7ff fcb5 	bl	801870c <_Balloc>
 8018da2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8018da6:	4607      	mov	r7, r0
 8018da8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018dac:	bb34      	cbnz	r4, 8018dfc <__d2b+0x6c>
 8018dae:	9301      	str	r3, [sp, #4]
 8018db0:	f1b8 0300 	subs.w	r3, r8, #0
 8018db4:	d027      	beq.n	8018e06 <__d2b+0x76>
 8018db6:	a802      	add	r0, sp, #8
 8018db8:	f840 3d08 	str.w	r3, [r0, #-8]!
 8018dbc:	f7ff fd89 	bl	80188d2 <__lo0bits>
 8018dc0:	9900      	ldr	r1, [sp, #0]
 8018dc2:	b1f0      	cbz	r0, 8018e02 <__d2b+0x72>
 8018dc4:	9a01      	ldr	r2, [sp, #4]
 8018dc6:	f1c0 0320 	rsb	r3, r0, #32
 8018dca:	fa02 f303 	lsl.w	r3, r2, r3
 8018dce:	430b      	orrs	r3, r1
 8018dd0:	40c2      	lsrs	r2, r0
 8018dd2:	617b      	str	r3, [r7, #20]
 8018dd4:	9201      	str	r2, [sp, #4]
 8018dd6:	9b01      	ldr	r3, [sp, #4]
 8018dd8:	61bb      	str	r3, [r7, #24]
 8018dda:	2b00      	cmp	r3, #0
 8018ddc:	bf14      	ite	ne
 8018dde:	2102      	movne	r1, #2
 8018de0:	2101      	moveq	r1, #1
 8018de2:	6139      	str	r1, [r7, #16]
 8018de4:	b1c4      	cbz	r4, 8018e18 <__d2b+0x88>
 8018de6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8018dea:	4404      	add	r4, r0
 8018dec:	6034      	str	r4, [r6, #0]
 8018dee:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018df2:	6028      	str	r0, [r5, #0]
 8018df4:	4638      	mov	r0, r7
 8018df6:	b003      	add	sp, #12
 8018df8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018dfc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018e00:	e7d5      	b.n	8018dae <__d2b+0x1e>
 8018e02:	6179      	str	r1, [r7, #20]
 8018e04:	e7e7      	b.n	8018dd6 <__d2b+0x46>
 8018e06:	a801      	add	r0, sp, #4
 8018e08:	f7ff fd63 	bl	80188d2 <__lo0bits>
 8018e0c:	9b01      	ldr	r3, [sp, #4]
 8018e0e:	617b      	str	r3, [r7, #20]
 8018e10:	2101      	movs	r1, #1
 8018e12:	6139      	str	r1, [r7, #16]
 8018e14:	3020      	adds	r0, #32
 8018e16:	e7e5      	b.n	8018de4 <__d2b+0x54>
 8018e18:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8018e1c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018e20:	6030      	str	r0, [r6, #0]
 8018e22:	6918      	ldr	r0, [r3, #16]
 8018e24:	f7ff fd36 	bl	8018894 <__hi0bits>
 8018e28:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8018e2c:	e7e1      	b.n	8018df2 <__d2b+0x62>

08018e2e <__ratio>:
 8018e2e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e32:	4688      	mov	r8, r1
 8018e34:	4669      	mov	r1, sp
 8018e36:	4681      	mov	r9, r0
 8018e38:	f7ff ff5c 	bl	8018cf4 <__b2d>
 8018e3c:	a901      	add	r1, sp, #4
 8018e3e:	4640      	mov	r0, r8
 8018e40:	ec57 6b10 	vmov	r6, r7, d0
 8018e44:	f7ff ff56 	bl	8018cf4 <__b2d>
 8018e48:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018e4c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018e50:	eba3 0c02 	sub.w	ip, r3, r2
 8018e54:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018e58:	1a9b      	subs	r3, r3, r2
 8018e5a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8018e5e:	ec5b ab10 	vmov	sl, fp, d0
 8018e62:	2b00      	cmp	r3, #0
 8018e64:	bfce      	itee	gt
 8018e66:	463a      	movgt	r2, r7
 8018e68:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018e6c:	465a      	movle	r2, fp
 8018e6e:	4659      	mov	r1, fp
 8018e70:	463d      	mov	r5, r7
 8018e72:	bfd4      	ite	le
 8018e74:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8018e78:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8018e7c:	4630      	mov	r0, r6
 8018e7e:	ee10 2a10 	vmov	r2, s0
 8018e82:	460b      	mov	r3, r1
 8018e84:	4629      	mov	r1, r5
 8018e86:	f7e7 fce1 	bl	800084c <__aeabi_ddiv>
 8018e8a:	ec41 0b10 	vmov	d0, r0, r1
 8018e8e:	b003      	add	sp, #12
 8018e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018e94 <__copybits>:
 8018e94:	3901      	subs	r1, #1
 8018e96:	b510      	push	{r4, lr}
 8018e98:	1149      	asrs	r1, r1, #5
 8018e9a:	6914      	ldr	r4, [r2, #16]
 8018e9c:	3101      	adds	r1, #1
 8018e9e:	f102 0314 	add.w	r3, r2, #20
 8018ea2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018ea6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018eaa:	42a3      	cmp	r3, r4
 8018eac:	4602      	mov	r2, r0
 8018eae:	d303      	bcc.n	8018eb8 <__copybits+0x24>
 8018eb0:	2300      	movs	r3, #0
 8018eb2:	428a      	cmp	r2, r1
 8018eb4:	d305      	bcc.n	8018ec2 <__copybits+0x2e>
 8018eb6:	bd10      	pop	{r4, pc}
 8018eb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8018ebc:	f840 2b04 	str.w	r2, [r0], #4
 8018ec0:	e7f3      	b.n	8018eaa <__copybits+0x16>
 8018ec2:	f842 3b04 	str.w	r3, [r2], #4
 8018ec6:	e7f4      	b.n	8018eb2 <__copybits+0x1e>

08018ec8 <__any_on>:
 8018ec8:	f100 0214 	add.w	r2, r0, #20
 8018ecc:	6900      	ldr	r0, [r0, #16]
 8018ece:	114b      	asrs	r3, r1, #5
 8018ed0:	4298      	cmp	r0, r3
 8018ed2:	b510      	push	{r4, lr}
 8018ed4:	db11      	blt.n	8018efa <__any_on+0x32>
 8018ed6:	dd0a      	ble.n	8018eee <__any_on+0x26>
 8018ed8:	f011 011f 	ands.w	r1, r1, #31
 8018edc:	d007      	beq.n	8018eee <__any_on+0x26>
 8018ede:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018ee2:	fa24 f001 	lsr.w	r0, r4, r1
 8018ee6:	fa00 f101 	lsl.w	r1, r0, r1
 8018eea:	428c      	cmp	r4, r1
 8018eec:	d10b      	bne.n	8018f06 <__any_on+0x3e>
 8018eee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018ef2:	4293      	cmp	r3, r2
 8018ef4:	d803      	bhi.n	8018efe <__any_on+0x36>
 8018ef6:	2000      	movs	r0, #0
 8018ef8:	bd10      	pop	{r4, pc}
 8018efa:	4603      	mov	r3, r0
 8018efc:	e7f7      	b.n	8018eee <__any_on+0x26>
 8018efe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018f02:	2900      	cmp	r1, #0
 8018f04:	d0f5      	beq.n	8018ef2 <__any_on+0x2a>
 8018f06:	2001      	movs	r0, #1
 8018f08:	e7f6      	b.n	8018ef8 <__any_on+0x30>

08018f0a <_calloc_r>:
 8018f0a:	b538      	push	{r3, r4, r5, lr}
 8018f0c:	fb02 f401 	mul.w	r4, r2, r1
 8018f10:	4621      	mov	r1, r4
 8018f12:	f7fc fca7 	bl	8015864 <_malloc_r>
 8018f16:	4605      	mov	r5, r0
 8018f18:	b118      	cbz	r0, 8018f22 <_calloc_r+0x18>
 8018f1a:	4622      	mov	r2, r4
 8018f1c:	2100      	movs	r1, #0
 8018f1e:	f7fc fc4b 	bl	80157b8 <memset>
 8018f22:	4628      	mov	r0, r5
 8018f24:	bd38      	pop	{r3, r4, r5, pc}

08018f26 <__ssputs_r>:
 8018f26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018f2a:	688e      	ldr	r6, [r1, #8]
 8018f2c:	429e      	cmp	r6, r3
 8018f2e:	4682      	mov	sl, r0
 8018f30:	460c      	mov	r4, r1
 8018f32:	4690      	mov	r8, r2
 8018f34:	4699      	mov	r9, r3
 8018f36:	d837      	bhi.n	8018fa8 <__ssputs_r+0x82>
 8018f38:	898a      	ldrh	r2, [r1, #12]
 8018f3a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018f3e:	d031      	beq.n	8018fa4 <__ssputs_r+0x7e>
 8018f40:	6825      	ldr	r5, [r4, #0]
 8018f42:	6909      	ldr	r1, [r1, #16]
 8018f44:	1a6f      	subs	r7, r5, r1
 8018f46:	6965      	ldr	r5, [r4, #20]
 8018f48:	2302      	movs	r3, #2
 8018f4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018f4e:	fb95 f5f3 	sdiv	r5, r5, r3
 8018f52:	f109 0301 	add.w	r3, r9, #1
 8018f56:	443b      	add	r3, r7
 8018f58:	429d      	cmp	r5, r3
 8018f5a:	bf38      	it	cc
 8018f5c:	461d      	movcc	r5, r3
 8018f5e:	0553      	lsls	r3, r2, #21
 8018f60:	d530      	bpl.n	8018fc4 <__ssputs_r+0x9e>
 8018f62:	4629      	mov	r1, r5
 8018f64:	f7fc fc7e 	bl	8015864 <_malloc_r>
 8018f68:	4606      	mov	r6, r0
 8018f6a:	b950      	cbnz	r0, 8018f82 <__ssputs_r+0x5c>
 8018f6c:	230c      	movs	r3, #12
 8018f6e:	f8ca 3000 	str.w	r3, [sl]
 8018f72:	89a3      	ldrh	r3, [r4, #12]
 8018f74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018f78:	81a3      	strh	r3, [r4, #12]
 8018f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8018f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018f82:	463a      	mov	r2, r7
 8018f84:	6921      	ldr	r1, [r4, #16]
 8018f86:	f7fc fbf3 	bl	8015770 <memcpy>
 8018f8a:	89a3      	ldrh	r3, [r4, #12]
 8018f8c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018f90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018f94:	81a3      	strh	r3, [r4, #12]
 8018f96:	6126      	str	r6, [r4, #16]
 8018f98:	6165      	str	r5, [r4, #20]
 8018f9a:	443e      	add	r6, r7
 8018f9c:	1bed      	subs	r5, r5, r7
 8018f9e:	6026      	str	r6, [r4, #0]
 8018fa0:	60a5      	str	r5, [r4, #8]
 8018fa2:	464e      	mov	r6, r9
 8018fa4:	454e      	cmp	r6, r9
 8018fa6:	d900      	bls.n	8018faa <__ssputs_r+0x84>
 8018fa8:	464e      	mov	r6, r9
 8018faa:	4632      	mov	r2, r6
 8018fac:	4641      	mov	r1, r8
 8018fae:	6820      	ldr	r0, [r4, #0]
 8018fb0:	f7fc fbe9 	bl	8015786 <memmove>
 8018fb4:	68a3      	ldr	r3, [r4, #8]
 8018fb6:	1b9b      	subs	r3, r3, r6
 8018fb8:	60a3      	str	r3, [r4, #8]
 8018fba:	6823      	ldr	r3, [r4, #0]
 8018fbc:	441e      	add	r6, r3
 8018fbe:	6026      	str	r6, [r4, #0]
 8018fc0:	2000      	movs	r0, #0
 8018fc2:	e7dc      	b.n	8018f7e <__ssputs_r+0x58>
 8018fc4:	462a      	mov	r2, r5
 8018fc6:	f000 f920 	bl	801920a <_realloc_r>
 8018fca:	4606      	mov	r6, r0
 8018fcc:	2800      	cmp	r0, #0
 8018fce:	d1e2      	bne.n	8018f96 <__ssputs_r+0x70>
 8018fd0:	6921      	ldr	r1, [r4, #16]
 8018fd2:	4650      	mov	r0, sl
 8018fd4:	f7fc fbf8 	bl	80157c8 <_free_r>
 8018fd8:	e7c8      	b.n	8018f6c <__ssputs_r+0x46>
	...

08018fdc <_svfiprintf_r>:
 8018fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fe0:	461d      	mov	r5, r3
 8018fe2:	898b      	ldrh	r3, [r1, #12]
 8018fe4:	061f      	lsls	r7, r3, #24
 8018fe6:	b09d      	sub	sp, #116	; 0x74
 8018fe8:	4680      	mov	r8, r0
 8018fea:	460c      	mov	r4, r1
 8018fec:	4616      	mov	r6, r2
 8018fee:	d50f      	bpl.n	8019010 <_svfiprintf_r+0x34>
 8018ff0:	690b      	ldr	r3, [r1, #16]
 8018ff2:	b96b      	cbnz	r3, 8019010 <_svfiprintf_r+0x34>
 8018ff4:	2140      	movs	r1, #64	; 0x40
 8018ff6:	f7fc fc35 	bl	8015864 <_malloc_r>
 8018ffa:	6020      	str	r0, [r4, #0]
 8018ffc:	6120      	str	r0, [r4, #16]
 8018ffe:	b928      	cbnz	r0, 801900c <_svfiprintf_r+0x30>
 8019000:	230c      	movs	r3, #12
 8019002:	f8c8 3000 	str.w	r3, [r8]
 8019006:	f04f 30ff 	mov.w	r0, #4294967295
 801900a:	e0c8      	b.n	801919e <_svfiprintf_r+0x1c2>
 801900c:	2340      	movs	r3, #64	; 0x40
 801900e:	6163      	str	r3, [r4, #20]
 8019010:	2300      	movs	r3, #0
 8019012:	9309      	str	r3, [sp, #36]	; 0x24
 8019014:	2320      	movs	r3, #32
 8019016:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801901a:	2330      	movs	r3, #48	; 0x30
 801901c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019020:	9503      	str	r5, [sp, #12]
 8019022:	f04f 0b01 	mov.w	fp, #1
 8019026:	4637      	mov	r7, r6
 8019028:	463d      	mov	r5, r7
 801902a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801902e:	b10b      	cbz	r3, 8019034 <_svfiprintf_r+0x58>
 8019030:	2b25      	cmp	r3, #37	; 0x25
 8019032:	d13e      	bne.n	80190b2 <_svfiprintf_r+0xd6>
 8019034:	ebb7 0a06 	subs.w	sl, r7, r6
 8019038:	d00b      	beq.n	8019052 <_svfiprintf_r+0x76>
 801903a:	4653      	mov	r3, sl
 801903c:	4632      	mov	r2, r6
 801903e:	4621      	mov	r1, r4
 8019040:	4640      	mov	r0, r8
 8019042:	f7ff ff70 	bl	8018f26 <__ssputs_r>
 8019046:	3001      	adds	r0, #1
 8019048:	f000 80a4 	beq.w	8019194 <_svfiprintf_r+0x1b8>
 801904c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801904e:	4453      	add	r3, sl
 8019050:	9309      	str	r3, [sp, #36]	; 0x24
 8019052:	783b      	ldrb	r3, [r7, #0]
 8019054:	2b00      	cmp	r3, #0
 8019056:	f000 809d 	beq.w	8019194 <_svfiprintf_r+0x1b8>
 801905a:	2300      	movs	r3, #0
 801905c:	f04f 32ff 	mov.w	r2, #4294967295
 8019060:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019064:	9304      	str	r3, [sp, #16]
 8019066:	9307      	str	r3, [sp, #28]
 8019068:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801906c:	931a      	str	r3, [sp, #104]	; 0x68
 801906e:	462f      	mov	r7, r5
 8019070:	2205      	movs	r2, #5
 8019072:	f817 1b01 	ldrb.w	r1, [r7], #1
 8019076:	4850      	ldr	r0, [pc, #320]	; (80191b8 <_svfiprintf_r+0x1dc>)
 8019078:	f7e7 f8b2 	bl	80001e0 <memchr>
 801907c:	9b04      	ldr	r3, [sp, #16]
 801907e:	b9d0      	cbnz	r0, 80190b6 <_svfiprintf_r+0xda>
 8019080:	06d9      	lsls	r1, r3, #27
 8019082:	bf44      	itt	mi
 8019084:	2220      	movmi	r2, #32
 8019086:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801908a:	071a      	lsls	r2, r3, #28
 801908c:	bf44      	itt	mi
 801908e:	222b      	movmi	r2, #43	; 0x2b
 8019090:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019094:	782a      	ldrb	r2, [r5, #0]
 8019096:	2a2a      	cmp	r2, #42	; 0x2a
 8019098:	d015      	beq.n	80190c6 <_svfiprintf_r+0xea>
 801909a:	9a07      	ldr	r2, [sp, #28]
 801909c:	462f      	mov	r7, r5
 801909e:	2000      	movs	r0, #0
 80190a0:	250a      	movs	r5, #10
 80190a2:	4639      	mov	r1, r7
 80190a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80190a8:	3b30      	subs	r3, #48	; 0x30
 80190aa:	2b09      	cmp	r3, #9
 80190ac:	d94d      	bls.n	801914a <_svfiprintf_r+0x16e>
 80190ae:	b1b8      	cbz	r0, 80190e0 <_svfiprintf_r+0x104>
 80190b0:	e00f      	b.n	80190d2 <_svfiprintf_r+0xf6>
 80190b2:	462f      	mov	r7, r5
 80190b4:	e7b8      	b.n	8019028 <_svfiprintf_r+0x4c>
 80190b6:	4a40      	ldr	r2, [pc, #256]	; (80191b8 <_svfiprintf_r+0x1dc>)
 80190b8:	1a80      	subs	r0, r0, r2
 80190ba:	fa0b f000 	lsl.w	r0, fp, r0
 80190be:	4318      	orrs	r0, r3
 80190c0:	9004      	str	r0, [sp, #16]
 80190c2:	463d      	mov	r5, r7
 80190c4:	e7d3      	b.n	801906e <_svfiprintf_r+0x92>
 80190c6:	9a03      	ldr	r2, [sp, #12]
 80190c8:	1d11      	adds	r1, r2, #4
 80190ca:	6812      	ldr	r2, [r2, #0]
 80190cc:	9103      	str	r1, [sp, #12]
 80190ce:	2a00      	cmp	r2, #0
 80190d0:	db01      	blt.n	80190d6 <_svfiprintf_r+0xfa>
 80190d2:	9207      	str	r2, [sp, #28]
 80190d4:	e004      	b.n	80190e0 <_svfiprintf_r+0x104>
 80190d6:	4252      	negs	r2, r2
 80190d8:	f043 0302 	orr.w	r3, r3, #2
 80190dc:	9207      	str	r2, [sp, #28]
 80190de:	9304      	str	r3, [sp, #16]
 80190e0:	783b      	ldrb	r3, [r7, #0]
 80190e2:	2b2e      	cmp	r3, #46	; 0x2e
 80190e4:	d10c      	bne.n	8019100 <_svfiprintf_r+0x124>
 80190e6:	787b      	ldrb	r3, [r7, #1]
 80190e8:	2b2a      	cmp	r3, #42	; 0x2a
 80190ea:	d133      	bne.n	8019154 <_svfiprintf_r+0x178>
 80190ec:	9b03      	ldr	r3, [sp, #12]
 80190ee:	1d1a      	adds	r2, r3, #4
 80190f0:	681b      	ldr	r3, [r3, #0]
 80190f2:	9203      	str	r2, [sp, #12]
 80190f4:	2b00      	cmp	r3, #0
 80190f6:	bfb8      	it	lt
 80190f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80190fc:	3702      	adds	r7, #2
 80190fe:	9305      	str	r3, [sp, #20]
 8019100:	4d2e      	ldr	r5, [pc, #184]	; (80191bc <_svfiprintf_r+0x1e0>)
 8019102:	7839      	ldrb	r1, [r7, #0]
 8019104:	2203      	movs	r2, #3
 8019106:	4628      	mov	r0, r5
 8019108:	f7e7 f86a 	bl	80001e0 <memchr>
 801910c:	b138      	cbz	r0, 801911e <_svfiprintf_r+0x142>
 801910e:	2340      	movs	r3, #64	; 0x40
 8019110:	1b40      	subs	r0, r0, r5
 8019112:	fa03 f000 	lsl.w	r0, r3, r0
 8019116:	9b04      	ldr	r3, [sp, #16]
 8019118:	4303      	orrs	r3, r0
 801911a:	3701      	adds	r7, #1
 801911c:	9304      	str	r3, [sp, #16]
 801911e:	7839      	ldrb	r1, [r7, #0]
 8019120:	4827      	ldr	r0, [pc, #156]	; (80191c0 <_svfiprintf_r+0x1e4>)
 8019122:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019126:	2206      	movs	r2, #6
 8019128:	1c7e      	adds	r6, r7, #1
 801912a:	f7e7 f859 	bl	80001e0 <memchr>
 801912e:	2800      	cmp	r0, #0
 8019130:	d038      	beq.n	80191a4 <_svfiprintf_r+0x1c8>
 8019132:	4b24      	ldr	r3, [pc, #144]	; (80191c4 <_svfiprintf_r+0x1e8>)
 8019134:	bb13      	cbnz	r3, 801917c <_svfiprintf_r+0x1a0>
 8019136:	9b03      	ldr	r3, [sp, #12]
 8019138:	3307      	adds	r3, #7
 801913a:	f023 0307 	bic.w	r3, r3, #7
 801913e:	3308      	adds	r3, #8
 8019140:	9303      	str	r3, [sp, #12]
 8019142:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019144:	444b      	add	r3, r9
 8019146:	9309      	str	r3, [sp, #36]	; 0x24
 8019148:	e76d      	b.n	8019026 <_svfiprintf_r+0x4a>
 801914a:	fb05 3202 	mla	r2, r5, r2, r3
 801914e:	2001      	movs	r0, #1
 8019150:	460f      	mov	r7, r1
 8019152:	e7a6      	b.n	80190a2 <_svfiprintf_r+0xc6>
 8019154:	2300      	movs	r3, #0
 8019156:	3701      	adds	r7, #1
 8019158:	9305      	str	r3, [sp, #20]
 801915a:	4619      	mov	r1, r3
 801915c:	250a      	movs	r5, #10
 801915e:	4638      	mov	r0, r7
 8019160:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019164:	3a30      	subs	r2, #48	; 0x30
 8019166:	2a09      	cmp	r2, #9
 8019168:	d903      	bls.n	8019172 <_svfiprintf_r+0x196>
 801916a:	2b00      	cmp	r3, #0
 801916c:	d0c8      	beq.n	8019100 <_svfiprintf_r+0x124>
 801916e:	9105      	str	r1, [sp, #20]
 8019170:	e7c6      	b.n	8019100 <_svfiprintf_r+0x124>
 8019172:	fb05 2101 	mla	r1, r5, r1, r2
 8019176:	2301      	movs	r3, #1
 8019178:	4607      	mov	r7, r0
 801917a:	e7f0      	b.n	801915e <_svfiprintf_r+0x182>
 801917c:	ab03      	add	r3, sp, #12
 801917e:	9300      	str	r3, [sp, #0]
 8019180:	4622      	mov	r2, r4
 8019182:	4b11      	ldr	r3, [pc, #68]	; (80191c8 <_svfiprintf_r+0x1ec>)
 8019184:	a904      	add	r1, sp, #16
 8019186:	4640      	mov	r0, r8
 8019188:	f7fc fc5a 	bl	8015a40 <_printf_float>
 801918c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8019190:	4681      	mov	r9, r0
 8019192:	d1d6      	bne.n	8019142 <_svfiprintf_r+0x166>
 8019194:	89a3      	ldrh	r3, [r4, #12]
 8019196:	065b      	lsls	r3, r3, #25
 8019198:	f53f af35 	bmi.w	8019006 <_svfiprintf_r+0x2a>
 801919c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801919e:	b01d      	add	sp, #116	; 0x74
 80191a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80191a4:	ab03      	add	r3, sp, #12
 80191a6:	9300      	str	r3, [sp, #0]
 80191a8:	4622      	mov	r2, r4
 80191aa:	4b07      	ldr	r3, [pc, #28]	; (80191c8 <_svfiprintf_r+0x1ec>)
 80191ac:	a904      	add	r1, sp, #16
 80191ae:	4640      	mov	r0, r8
 80191b0:	f7fc fefc 	bl	8015fac <_printf_i>
 80191b4:	e7ea      	b.n	801918c <_svfiprintf_r+0x1b0>
 80191b6:	bf00      	nop
 80191b8:	0801b37c 	.word	0x0801b37c
 80191bc:	0801b382 	.word	0x0801b382
 80191c0:	0801b386 	.word	0x0801b386
 80191c4:	08015a41 	.word	0x08015a41
 80191c8:	08018f27 	.word	0x08018f27

080191cc <strncmp>:
 80191cc:	b510      	push	{r4, lr}
 80191ce:	b16a      	cbz	r2, 80191ec <strncmp+0x20>
 80191d0:	3901      	subs	r1, #1
 80191d2:	1884      	adds	r4, r0, r2
 80191d4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80191d8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80191dc:	4293      	cmp	r3, r2
 80191de:	d103      	bne.n	80191e8 <strncmp+0x1c>
 80191e0:	42a0      	cmp	r0, r4
 80191e2:	d001      	beq.n	80191e8 <strncmp+0x1c>
 80191e4:	2b00      	cmp	r3, #0
 80191e6:	d1f5      	bne.n	80191d4 <strncmp+0x8>
 80191e8:	1a98      	subs	r0, r3, r2
 80191ea:	bd10      	pop	{r4, pc}
 80191ec:	4610      	mov	r0, r2
 80191ee:	e7fc      	b.n	80191ea <strncmp+0x1e>

080191f0 <__ascii_wctomb>:
 80191f0:	b149      	cbz	r1, 8019206 <__ascii_wctomb+0x16>
 80191f2:	2aff      	cmp	r2, #255	; 0xff
 80191f4:	bf85      	ittet	hi
 80191f6:	238a      	movhi	r3, #138	; 0x8a
 80191f8:	6003      	strhi	r3, [r0, #0]
 80191fa:	700a      	strbls	r2, [r1, #0]
 80191fc:	f04f 30ff 	movhi.w	r0, #4294967295
 8019200:	bf98      	it	ls
 8019202:	2001      	movls	r0, #1
 8019204:	4770      	bx	lr
 8019206:	4608      	mov	r0, r1
 8019208:	4770      	bx	lr

0801920a <_realloc_r>:
 801920a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801920c:	4607      	mov	r7, r0
 801920e:	4614      	mov	r4, r2
 8019210:	460e      	mov	r6, r1
 8019212:	b921      	cbnz	r1, 801921e <_realloc_r+0x14>
 8019214:	4611      	mov	r1, r2
 8019216:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801921a:	f7fc bb23 	b.w	8015864 <_malloc_r>
 801921e:	b922      	cbnz	r2, 801922a <_realloc_r+0x20>
 8019220:	f7fc fad2 	bl	80157c8 <_free_r>
 8019224:	4625      	mov	r5, r4
 8019226:	4628      	mov	r0, r5
 8019228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801922a:	f000 f814 	bl	8019256 <_malloc_usable_size_r>
 801922e:	42a0      	cmp	r0, r4
 8019230:	d20f      	bcs.n	8019252 <_realloc_r+0x48>
 8019232:	4621      	mov	r1, r4
 8019234:	4638      	mov	r0, r7
 8019236:	f7fc fb15 	bl	8015864 <_malloc_r>
 801923a:	4605      	mov	r5, r0
 801923c:	2800      	cmp	r0, #0
 801923e:	d0f2      	beq.n	8019226 <_realloc_r+0x1c>
 8019240:	4631      	mov	r1, r6
 8019242:	4622      	mov	r2, r4
 8019244:	f7fc fa94 	bl	8015770 <memcpy>
 8019248:	4631      	mov	r1, r6
 801924a:	4638      	mov	r0, r7
 801924c:	f7fc fabc 	bl	80157c8 <_free_r>
 8019250:	e7e9      	b.n	8019226 <_realloc_r+0x1c>
 8019252:	4635      	mov	r5, r6
 8019254:	e7e7      	b.n	8019226 <_realloc_r+0x1c>

08019256 <_malloc_usable_size_r>:
 8019256:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801925a:	1f18      	subs	r0, r3, #4
 801925c:	2b00      	cmp	r3, #0
 801925e:	bfbc      	itt	lt
 8019260:	580b      	ldrlt	r3, [r1, r0]
 8019262:	18c0      	addlt	r0, r0, r3
 8019264:	4770      	bx	lr
	...

08019268 <ceil>:
 8019268:	ec51 0b10 	vmov	r0, r1, d0
 801926c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019270:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8019274:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8019278:	2e13      	cmp	r6, #19
 801927a:	460c      	mov	r4, r1
 801927c:	ee10 5a10 	vmov	r5, s0
 8019280:	4680      	mov	r8, r0
 8019282:	dc30      	bgt.n	80192e6 <ceil+0x7e>
 8019284:	2e00      	cmp	r6, #0
 8019286:	da12      	bge.n	80192ae <ceil+0x46>
 8019288:	a333      	add	r3, pc, #204	; (adr r3, 8019358 <ceil+0xf0>)
 801928a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801928e:	f7e6 fffd 	bl	800028c <__adddf3>
 8019292:	2200      	movs	r2, #0
 8019294:	2300      	movs	r3, #0
 8019296:	f7e7 fc3f 	bl	8000b18 <__aeabi_dcmpgt>
 801929a:	b128      	cbz	r0, 80192a8 <ceil+0x40>
 801929c:	2c00      	cmp	r4, #0
 801929e:	db55      	blt.n	801934c <ceil+0xe4>
 80192a0:	432c      	orrs	r4, r5
 80192a2:	d057      	beq.n	8019354 <ceil+0xec>
 80192a4:	4c2e      	ldr	r4, [pc, #184]	; (8019360 <ceil+0xf8>)
 80192a6:	2500      	movs	r5, #0
 80192a8:	4621      	mov	r1, r4
 80192aa:	4628      	mov	r0, r5
 80192ac:	e025      	b.n	80192fa <ceil+0x92>
 80192ae:	4f2d      	ldr	r7, [pc, #180]	; (8019364 <ceil+0xfc>)
 80192b0:	4137      	asrs	r7, r6
 80192b2:	ea01 0307 	and.w	r3, r1, r7
 80192b6:	4303      	orrs	r3, r0
 80192b8:	d01f      	beq.n	80192fa <ceil+0x92>
 80192ba:	a327      	add	r3, pc, #156	; (adr r3, 8019358 <ceil+0xf0>)
 80192bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192c0:	f7e6 ffe4 	bl	800028c <__adddf3>
 80192c4:	2200      	movs	r2, #0
 80192c6:	2300      	movs	r3, #0
 80192c8:	f7e7 fc26 	bl	8000b18 <__aeabi_dcmpgt>
 80192cc:	2800      	cmp	r0, #0
 80192ce:	d0eb      	beq.n	80192a8 <ceil+0x40>
 80192d0:	2c00      	cmp	r4, #0
 80192d2:	bfc2      	ittt	gt
 80192d4:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 80192d8:	fa43 f606 	asrgt.w	r6, r3, r6
 80192dc:	19a4      	addgt	r4, r4, r6
 80192de:	ea24 0407 	bic.w	r4, r4, r7
 80192e2:	2500      	movs	r5, #0
 80192e4:	e7e0      	b.n	80192a8 <ceil+0x40>
 80192e6:	2e33      	cmp	r6, #51	; 0x33
 80192e8:	dd0b      	ble.n	8019302 <ceil+0x9a>
 80192ea:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80192ee:	d104      	bne.n	80192fa <ceil+0x92>
 80192f0:	ee10 2a10 	vmov	r2, s0
 80192f4:	460b      	mov	r3, r1
 80192f6:	f7e6 ffc9 	bl	800028c <__adddf3>
 80192fa:	ec41 0b10 	vmov	d0, r0, r1
 80192fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019302:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8019306:	f04f 33ff 	mov.w	r3, #4294967295
 801930a:	fa23 f707 	lsr.w	r7, r3, r7
 801930e:	4207      	tst	r7, r0
 8019310:	d0f3      	beq.n	80192fa <ceil+0x92>
 8019312:	a311      	add	r3, pc, #68	; (adr r3, 8019358 <ceil+0xf0>)
 8019314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019318:	f7e6 ffb8 	bl	800028c <__adddf3>
 801931c:	2200      	movs	r2, #0
 801931e:	2300      	movs	r3, #0
 8019320:	f7e7 fbfa 	bl	8000b18 <__aeabi_dcmpgt>
 8019324:	2800      	cmp	r0, #0
 8019326:	d0bf      	beq.n	80192a8 <ceil+0x40>
 8019328:	2c00      	cmp	r4, #0
 801932a:	dd02      	ble.n	8019332 <ceil+0xca>
 801932c:	2e14      	cmp	r6, #20
 801932e:	d103      	bne.n	8019338 <ceil+0xd0>
 8019330:	3401      	adds	r4, #1
 8019332:	ea25 0507 	bic.w	r5, r5, r7
 8019336:	e7b7      	b.n	80192a8 <ceil+0x40>
 8019338:	2301      	movs	r3, #1
 801933a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801933e:	fa03 f606 	lsl.w	r6, r3, r6
 8019342:	4435      	add	r5, r6
 8019344:	4545      	cmp	r5, r8
 8019346:	bf38      	it	cc
 8019348:	18e4      	addcc	r4, r4, r3
 801934a:	e7f2      	b.n	8019332 <ceil+0xca>
 801934c:	2500      	movs	r5, #0
 801934e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8019352:	e7a9      	b.n	80192a8 <ceil+0x40>
 8019354:	4625      	mov	r5, r4
 8019356:	e7a7      	b.n	80192a8 <ceil+0x40>
 8019358:	8800759c 	.word	0x8800759c
 801935c:	7e37e43c 	.word	0x7e37e43c
 8019360:	3ff00000 	.word	0x3ff00000
 8019364:	000fffff 	.word	0x000fffff

08019368 <cos>:
 8019368:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801936a:	ec51 0b10 	vmov	r0, r1, d0
 801936e:	4a1e      	ldr	r2, [pc, #120]	; (80193e8 <cos+0x80>)
 8019370:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019374:	4293      	cmp	r3, r2
 8019376:	dc06      	bgt.n	8019386 <cos+0x1e>
 8019378:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80193e0 <cos+0x78>
 801937c:	f000 fcec 	bl	8019d58 <__kernel_cos>
 8019380:	ec51 0b10 	vmov	r0, r1, d0
 8019384:	e007      	b.n	8019396 <cos+0x2e>
 8019386:	4a19      	ldr	r2, [pc, #100]	; (80193ec <cos+0x84>)
 8019388:	4293      	cmp	r3, r2
 801938a:	dd09      	ble.n	80193a0 <cos+0x38>
 801938c:	ee10 2a10 	vmov	r2, s0
 8019390:	460b      	mov	r3, r1
 8019392:	f7e6 ff79 	bl	8000288 <__aeabi_dsub>
 8019396:	ec41 0b10 	vmov	d0, r0, r1
 801939a:	b005      	add	sp, #20
 801939c:	f85d fb04 	ldr.w	pc, [sp], #4
 80193a0:	4668      	mov	r0, sp
 80193a2:	f000 fa35 	bl	8019810 <__ieee754_rem_pio2>
 80193a6:	f000 0003 	and.w	r0, r0, #3
 80193aa:	2801      	cmp	r0, #1
 80193ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 80193b0:	ed9d 0b00 	vldr	d0, [sp]
 80193b4:	d007      	beq.n	80193c6 <cos+0x5e>
 80193b6:	2802      	cmp	r0, #2
 80193b8:	d00e      	beq.n	80193d8 <cos+0x70>
 80193ba:	2800      	cmp	r0, #0
 80193bc:	d0de      	beq.n	801937c <cos+0x14>
 80193be:	2001      	movs	r0, #1
 80193c0:	f001 f8d2 	bl	801a568 <__kernel_sin>
 80193c4:	e7dc      	b.n	8019380 <cos+0x18>
 80193c6:	f001 f8cf 	bl	801a568 <__kernel_sin>
 80193ca:	ec53 2b10 	vmov	r2, r3, d0
 80193ce:	ee10 0a10 	vmov	r0, s0
 80193d2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80193d6:	e7de      	b.n	8019396 <cos+0x2e>
 80193d8:	f000 fcbe 	bl	8019d58 <__kernel_cos>
 80193dc:	e7f5      	b.n	80193ca <cos+0x62>
 80193de:	bf00      	nop
	...
 80193e8:	3fe921fb 	.word	0x3fe921fb
 80193ec:	7fefffff 	.word	0x7fefffff

080193f0 <round>:
 80193f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80193f2:	ec57 6b10 	vmov	r6, r7, d0
 80193f6:	f3c7 500a 	ubfx	r0, r7, #20, #11
 80193fa:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 80193fe:	2c13      	cmp	r4, #19
 8019400:	463b      	mov	r3, r7
 8019402:	463d      	mov	r5, r7
 8019404:	dc17      	bgt.n	8019436 <round+0x46>
 8019406:	2c00      	cmp	r4, #0
 8019408:	da09      	bge.n	801941e <round+0x2e>
 801940a:	3401      	adds	r4, #1
 801940c:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8019410:	d103      	bne.n	801941a <round+0x2a>
 8019412:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8019416:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801941a:	2100      	movs	r1, #0
 801941c:	e02c      	b.n	8019478 <round+0x88>
 801941e:	4a18      	ldr	r2, [pc, #96]	; (8019480 <round+0x90>)
 8019420:	4122      	asrs	r2, r4
 8019422:	4217      	tst	r7, r2
 8019424:	d100      	bne.n	8019428 <round+0x38>
 8019426:	b19e      	cbz	r6, 8019450 <round+0x60>
 8019428:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801942c:	4123      	asrs	r3, r4
 801942e:	442b      	add	r3, r5
 8019430:	ea23 0302 	bic.w	r3, r3, r2
 8019434:	e7f1      	b.n	801941a <round+0x2a>
 8019436:	2c33      	cmp	r4, #51	; 0x33
 8019438:	dd0d      	ble.n	8019456 <round+0x66>
 801943a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 801943e:	d107      	bne.n	8019450 <round+0x60>
 8019440:	4630      	mov	r0, r6
 8019442:	4639      	mov	r1, r7
 8019444:	ee10 2a10 	vmov	r2, s0
 8019448:	f7e6 ff20 	bl	800028c <__adddf3>
 801944c:	4606      	mov	r6, r0
 801944e:	460f      	mov	r7, r1
 8019450:	ec47 6b10 	vmov	d0, r6, r7
 8019454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019456:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 801945a:	f04f 30ff 	mov.w	r0, #4294967295
 801945e:	40d0      	lsrs	r0, r2
 8019460:	4206      	tst	r6, r0
 8019462:	d0f5      	beq.n	8019450 <round+0x60>
 8019464:	2201      	movs	r2, #1
 8019466:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 801946a:	fa02 f404 	lsl.w	r4, r2, r4
 801946e:	1931      	adds	r1, r6, r4
 8019470:	bf28      	it	cs
 8019472:	189b      	addcs	r3, r3, r2
 8019474:	ea21 0100 	bic.w	r1, r1, r0
 8019478:	461f      	mov	r7, r3
 801947a:	460e      	mov	r6, r1
 801947c:	e7e8      	b.n	8019450 <round+0x60>
 801947e:	bf00      	nop
 8019480:	000fffff 	.word	0x000fffff
 8019484:	00000000 	.word	0x00000000

08019488 <sin>:
 8019488:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801948a:	ec51 0b10 	vmov	r0, r1, d0
 801948e:	4a20      	ldr	r2, [pc, #128]	; (8019510 <sin+0x88>)
 8019490:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019494:	4293      	cmp	r3, r2
 8019496:	dc07      	bgt.n	80194a8 <sin+0x20>
 8019498:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8019508 <sin+0x80>
 801949c:	2000      	movs	r0, #0
 801949e:	f001 f863 	bl	801a568 <__kernel_sin>
 80194a2:	ec51 0b10 	vmov	r0, r1, d0
 80194a6:	e007      	b.n	80194b8 <sin+0x30>
 80194a8:	4a1a      	ldr	r2, [pc, #104]	; (8019514 <sin+0x8c>)
 80194aa:	4293      	cmp	r3, r2
 80194ac:	dd09      	ble.n	80194c2 <sin+0x3a>
 80194ae:	ee10 2a10 	vmov	r2, s0
 80194b2:	460b      	mov	r3, r1
 80194b4:	f7e6 fee8 	bl	8000288 <__aeabi_dsub>
 80194b8:	ec41 0b10 	vmov	d0, r0, r1
 80194bc:	b005      	add	sp, #20
 80194be:	f85d fb04 	ldr.w	pc, [sp], #4
 80194c2:	4668      	mov	r0, sp
 80194c4:	f000 f9a4 	bl	8019810 <__ieee754_rem_pio2>
 80194c8:	f000 0003 	and.w	r0, r0, #3
 80194cc:	2801      	cmp	r0, #1
 80194ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 80194d2:	ed9d 0b00 	vldr	d0, [sp]
 80194d6:	d004      	beq.n	80194e2 <sin+0x5a>
 80194d8:	2802      	cmp	r0, #2
 80194da:	d005      	beq.n	80194e8 <sin+0x60>
 80194dc:	b970      	cbnz	r0, 80194fc <sin+0x74>
 80194de:	2001      	movs	r0, #1
 80194e0:	e7dd      	b.n	801949e <sin+0x16>
 80194e2:	f000 fc39 	bl	8019d58 <__kernel_cos>
 80194e6:	e7dc      	b.n	80194a2 <sin+0x1a>
 80194e8:	2001      	movs	r0, #1
 80194ea:	f001 f83d 	bl	801a568 <__kernel_sin>
 80194ee:	ec53 2b10 	vmov	r2, r3, d0
 80194f2:	ee10 0a10 	vmov	r0, s0
 80194f6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80194fa:	e7dd      	b.n	80194b8 <sin+0x30>
 80194fc:	f000 fc2c 	bl	8019d58 <__kernel_cos>
 8019500:	e7f5      	b.n	80194ee <sin+0x66>
 8019502:	bf00      	nop
 8019504:	f3af 8000 	nop.w
	...
 8019510:	3fe921fb 	.word	0x3fe921fb
 8019514:	7fefffff 	.word	0x7fefffff

08019518 <ceilf>:
 8019518:	ee10 3a10 	vmov	r3, s0
 801951c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8019520:	0dca      	lsrs	r2, r1, #23
 8019522:	3a7f      	subs	r2, #127	; 0x7f
 8019524:	2a16      	cmp	r2, #22
 8019526:	dc2a      	bgt.n	801957e <ceilf+0x66>
 8019528:	2a00      	cmp	r2, #0
 801952a:	da11      	bge.n	8019550 <ceilf+0x38>
 801952c:	eddf 7a18 	vldr	s15, [pc, #96]	; 8019590 <ceilf+0x78>
 8019530:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019534:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801953c:	dd05      	ble.n	801954a <ceilf+0x32>
 801953e:	2b00      	cmp	r3, #0
 8019540:	db23      	blt.n	801958a <ceilf+0x72>
 8019542:	2900      	cmp	r1, #0
 8019544:	bf18      	it	ne
 8019546:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 801954a:	ee00 3a10 	vmov	s0, r3
 801954e:	4770      	bx	lr
 8019550:	4910      	ldr	r1, [pc, #64]	; (8019594 <ceilf+0x7c>)
 8019552:	4111      	asrs	r1, r2
 8019554:	420b      	tst	r3, r1
 8019556:	d0fa      	beq.n	801954e <ceilf+0x36>
 8019558:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8019590 <ceilf+0x78>
 801955c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019560:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019568:	ddef      	ble.n	801954a <ceilf+0x32>
 801956a:	2b00      	cmp	r3, #0
 801956c:	bfc2      	ittt	gt
 801956e:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 8019572:	fa40 f202 	asrgt.w	r2, r0, r2
 8019576:	189b      	addgt	r3, r3, r2
 8019578:	ea23 0301 	bic.w	r3, r3, r1
 801957c:	e7e5      	b.n	801954a <ceilf+0x32>
 801957e:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8019582:	d3e4      	bcc.n	801954e <ceilf+0x36>
 8019584:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019588:	4770      	bx	lr
 801958a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801958e:	e7dc      	b.n	801954a <ceilf+0x32>
 8019590:	7149f2ca 	.word	0x7149f2ca
 8019594:	007fffff 	.word	0x007fffff

08019598 <atan2>:
 8019598:	f000 b85a 	b.w	8019650 <__ieee754_atan2>

0801959c <sqrt>:
 801959c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80195a0:	ed2d 8b02 	vpush	{d8}
 80195a4:	b08b      	sub	sp, #44	; 0x2c
 80195a6:	ec55 4b10 	vmov	r4, r5, d0
 80195aa:	f000 fb23 	bl	8019bf4 <__ieee754_sqrt>
 80195ae:	4b26      	ldr	r3, [pc, #152]	; (8019648 <sqrt+0xac>)
 80195b0:	eeb0 8a40 	vmov.f32	s16, s0
 80195b4:	eef0 8a60 	vmov.f32	s17, s1
 80195b8:	f993 6000 	ldrsb.w	r6, [r3]
 80195bc:	1c73      	adds	r3, r6, #1
 80195be:	d02a      	beq.n	8019616 <sqrt+0x7a>
 80195c0:	4622      	mov	r2, r4
 80195c2:	462b      	mov	r3, r5
 80195c4:	4620      	mov	r0, r4
 80195c6:	4629      	mov	r1, r5
 80195c8:	f7e7 fab0 	bl	8000b2c <__aeabi_dcmpun>
 80195cc:	4607      	mov	r7, r0
 80195ce:	bb10      	cbnz	r0, 8019616 <sqrt+0x7a>
 80195d0:	f04f 0800 	mov.w	r8, #0
 80195d4:	f04f 0900 	mov.w	r9, #0
 80195d8:	4642      	mov	r2, r8
 80195da:	464b      	mov	r3, r9
 80195dc:	4620      	mov	r0, r4
 80195de:	4629      	mov	r1, r5
 80195e0:	f7e7 fa7c 	bl	8000adc <__aeabi_dcmplt>
 80195e4:	b1b8      	cbz	r0, 8019616 <sqrt+0x7a>
 80195e6:	2301      	movs	r3, #1
 80195e8:	9300      	str	r3, [sp, #0]
 80195ea:	4b18      	ldr	r3, [pc, #96]	; (801964c <sqrt+0xb0>)
 80195ec:	9301      	str	r3, [sp, #4]
 80195ee:	9708      	str	r7, [sp, #32]
 80195f0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80195f4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80195f8:	b9b6      	cbnz	r6, 8019628 <sqrt+0x8c>
 80195fa:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80195fe:	4668      	mov	r0, sp
 8019600:	f001 fa9e 	bl	801ab40 <matherr>
 8019604:	b1d0      	cbz	r0, 801963c <sqrt+0xa0>
 8019606:	9b08      	ldr	r3, [sp, #32]
 8019608:	b11b      	cbz	r3, 8019612 <sqrt+0x76>
 801960a:	f7fc f877 	bl	80156fc <__errno>
 801960e:	9b08      	ldr	r3, [sp, #32]
 8019610:	6003      	str	r3, [r0, #0]
 8019612:	ed9d 8b06 	vldr	d8, [sp, #24]
 8019616:	eeb0 0a48 	vmov.f32	s0, s16
 801961a:	eef0 0a68 	vmov.f32	s1, s17
 801961e:	b00b      	add	sp, #44	; 0x2c
 8019620:	ecbd 8b02 	vpop	{d8}
 8019624:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019628:	4642      	mov	r2, r8
 801962a:	464b      	mov	r3, r9
 801962c:	4640      	mov	r0, r8
 801962e:	4649      	mov	r1, r9
 8019630:	f7e7 f90c 	bl	800084c <__aeabi_ddiv>
 8019634:	2e02      	cmp	r6, #2
 8019636:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801963a:	d1e0      	bne.n	80195fe <sqrt+0x62>
 801963c:	f7fc f85e 	bl	80156fc <__errno>
 8019640:	2321      	movs	r3, #33	; 0x21
 8019642:	6003      	str	r3, [r0, #0]
 8019644:	e7df      	b.n	8019606 <sqrt+0x6a>
 8019646:	bf00      	nop
 8019648:	20000fdc 	.word	0x20000fdc
 801964c:	0801b48e 	.word	0x0801b48e

08019650 <__ieee754_atan2>:
 8019650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019654:	ec57 6b11 	vmov	r6, r7, d1
 8019658:	4273      	negs	r3, r6
 801965a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801965e:	4333      	orrs	r3, r6
 8019660:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8019808 <__ieee754_atan2+0x1b8>
 8019664:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8019668:	4573      	cmp	r3, lr
 801966a:	ec51 0b10 	vmov	r0, r1, d0
 801966e:	ee11 8a10 	vmov	r8, s2
 8019672:	d80a      	bhi.n	801968a <__ieee754_atan2+0x3a>
 8019674:	4244      	negs	r4, r0
 8019676:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801967a:	4304      	orrs	r4, r0
 801967c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8019680:	4574      	cmp	r4, lr
 8019682:	468c      	mov	ip, r1
 8019684:	ee10 9a10 	vmov	r9, s0
 8019688:	d907      	bls.n	801969a <__ieee754_atan2+0x4a>
 801968a:	4632      	mov	r2, r6
 801968c:	463b      	mov	r3, r7
 801968e:	f7e6 fdfd 	bl	800028c <__adddf3>
 8019692:	ec41 0b10 	vmov	d0, r0, r1
 8019696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801969a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801969e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80196a2:	4334      	orrs	r4, r6
 80196a4:	d103      	bne.n	80196ae <__ieee754_atan2+0x5e>
 80196a6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80196aa:	f001 b819 	b.w	801a6e0 <atan>
 80196ae:	17bc      	asrs	r4, r7, #30
 80196b0:	f004 0402 	and.w	r4, r4, #2
 80196b4:	ea53 0909 	orrs.w	r9, r3, r9
 80196b8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80196bc:	d107      	bne.n	80196ce <__ieee754_atan2+0x7e>
 80196be:	2c02      	cmp	r4, #2
 80196c0:	d073      	beq.n	80197aa <__ieee754_atan2+0x15a>
 80196c2:	2c03      	cmp	r4, #3
 80196c4:	d1e5      	bne.n	8019692 <__ieee754_atan2+0x42>
 80196c6:	a13e      	add	r1, pc, #248	; (adr r1, 80197c0 <__ieee754_atan2+0x170>)
 80196c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80196cc:	e7e1      	b.n	8019692 <__ieee754_atan2+0x42>
 80196ce:	ea52 0808 	orrs.w	r8, r2, r8
 80196d2:	d106      	bne.n	80196e2 <__ieee754_atan2+0x92>
 80196d4:	f1bc 0f00 	cmp.w	ip, #0
 80196d8:	da6b      	bge.n	80197b2 <__ieee754_atan2+0x162>
 80196da:	a13b      	add	r1, pc, #236	; (adr r1, 80197c8 <__ieee754_atan2+0x178>)
 80196dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80196e0:	e7d7      	b.n	8019692 <__ieee754_atan2+0x42>
 80196e2:	4572      	cmp	r2, lr
 80196e4:	d120      	bne.n	8019728 <__ieee754_atan2+0xd8>
 80196e6:	4293      	cmp	r3, r2
 80196e8:	d111      	bne.n	801970e <__ieee754_atan2+0xbe>
 80196ea:	2c02      	cmp	r4, #2
 80196ec:	d007      	beq.n	80196fe <__ieee754_atan2+0xae>
 80196ee:	2c03      	cmp	r4, #3
 80196f0:	d009      	beq.n	8019706 <__ieee754_atan2+0xb6>
 80196f2:	2c01      	cmp	r4, #1
 80196f4:	d155      	bne.n	80197a2 <__ieee754_atan2+0x152>
 80196f6:	a136      	add	r1, pc, #216	; (adr r1, 80197d0 <__ieee754_atan2+0x180>)
 80196f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80196fc:	e7c9      	b.n	8019692 <__ieee754_atan2+0x42>
 80196fe:	a136      	add	r1, pc, #216	; (adr r1, 80197d8 <__ieee754_atan2+0x188>)
 8019700:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019704:	e7c5      	b.n	8019692 <__ieee754_atan2+0x42>
 8019706:	a136      	add	r1, pc, #216	; (adr r1, 80197e0 <__ieee754_atan2+0x190>)
 8019708:	e9d1 0100 	ldrd	r0, r1, [r1]
 801970c:	e7c1      	b.n	8019692 <__ieee754_atan2+0x42>
 801970e:	2c02      	cmp	r4, #2
 8019710:	d04b      	beq.n	80197aa <__ieee754_atan2+0x15a>
 8019712:	2c03      	cmp	r4, #3
 8019714:	d0d7      	beq.n	80196c6 <__ieee754_atan2+0x76>
 8019716:	2c01      	cmp	r4, #1
 8019718:	f04f 0000 	mov.w	r0, #0
 801971c:	d102      	bne.n	8019724 <__ieee754_atan2+0xd4>
 801971e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8019722:	e7b6      	b.n	8019692 <__ieee754_atan2+0x42>
 8019724:	2100      	movs	r1, #0
 8019726:	e7b4      	b.n	8019692 <__ieee754_atan2+0x42>
 8019728:	4573      	cmp	r3, lr
 801972a:	d0d3      	beq.n	80196d4 <__ieee754_atan2+0x84>
 801972c:	1a9b      	subs	r3, r3, r2
 801972e:	151b      	asrs	r3, r3, #20
 8019730:	2b3c      	cmp	r3, #60	; 0x3c
 8019732:	dc1e      	bgt.n	8019772 <__ieee754_atan2+0x122>
 8019734:	2f00      	cmp	r7, #0
 8019736:	da01      	bge.n	801973c <__ieee754_atan2+0xec>
 8019738:	333c      	adds	r3, #60	; 0x3c
 801973a:	db1e      	blt.n	801977a <__ieee754_atan2+0x12a>
 801973c:	4632      	mov	r2, r6
 801973e:	463b      	mov	r3, r7
 8019740:	f7e7 f884 	bl	800084c <__aeabi_ddiv>
 8019744:	ec41 0b10 	vmov	d0, r0, r1
 8019748:	f001 f96a 	bl	801aa20 <fabs>
 801974c:	f000 ffc8 	bl	801a6e0 <atan>
 8019750:	ec51 0b10 	vmov	r0, r1, d0
 8019754:	2c01      	cmp	r4, #1
 8019756:	d013      	beq.n	8019780 <__ieee754_atan2+0x130>
 8019758:	2c02      	cmp	r4, #2
 801975a:	d015      	beq.n	8019788 <__ieee754_atan2+0x138>
 801975c:	2c00      	cmp	r4, #0
 801975e:	d098      	beq.n	8019692 <__ieee754_atan2+0x42>
 8019760:	a321      	add	r3, pc, #132	; (adr r3, 80197e8 <__ieee754_atan2+0x198>)
 8019762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019766:	f7e6 fd8f 	bl	8000288 <__aeabi_dsub>
 801976a:	a321      	add	r3, pc, #132	; (adr r3, 80197f0 <__ieee754_atan2+0x1a0>)
 801976c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019770:	e014      	b.n	801979c <__ieee754_atan2+0x14c>
 8019772:	a121      	add	r1, pc, #132	; (adr r1, 80197f8 <__ieee754_atan2+0x1a8>)
 8019774:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019778:	e7ec      	b.n	8019754 <__ieee754_atan2+0x104>
 801977a:	2000      	movs	r0, #0
 801977c:	2100      	movs	r1, #0
 801977e:	e7e9      	b.n	8019754 <__ieee754_atan2+0x104>
 8019780:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019784:	4619      	mov	r1, r3
 8019786:	e784      	b.n	8019692 <__ieee754_atan2+0x42>
 8019788:	a317      	add	r3, pc, #92	; (adr r3, 80197e8 <__ieee754_atan2+0x198>)
 801978a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801978e:	f7e6 fd7b 	bl	8000288 <__aeabi_dsub>
 8019792:	4602      	mov	r2, r0
 8019794:	460b      	mov	r3, r1
 8019796:	a116      	add	r1, pc, #88	; (adr r1, 80197f0 <__ieee754_atan2+0x1a0>)
 8019798:	e9d1 0100 	ldrd	r0, r1, [r1]
 801979c:	f7e6 fd74 	bl	8000288 <__aeabi_dsub>
 80197a0:	e777      	b.n	8019692 <__ieee754_atan2+0x42>
 80197a2:	a117      	add	r1, pc, #92	; (adr r1, 8019800 <__ieee754_atan2+0x1b0>)
 80197a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80197a8:	e773      	b.n	8019692 <__ieee754_atan2+0x42>
 80197aa:	a111      	add	r1, pc, #68	; (adr r1, 80197f0 <__ieee754_atan2+0x1a0>)
 80197ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80197b0:	e76f      	b.n	8019692 <__ieee754_atan2+0x42>
 80197b2:	a111      	add	r1, pc, #68	; (adr r1, 80197f8 <__ieee754_atan2+0x1a8>)
 80197b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80197b8:	e76b      	b.n	8019692 <__ieee754_atan2+0x42>
 80197ba:	bf00      	nop
 80197bc:	f3af 8000 	nop.w
 80197c0:	54442d18 	.word	0x54442d18
 80197c4:	c00921fb 	.word	0xc00921fb
 80197c8:	54442d18 	.word	0x54442d18
 80197cc:	bff921fb 	.word	0xbff921fb
 80197d0:	54442d18 	.word	0x54442d18
 80197d4:	bfe921fb 	.word	0xbfe921fb
 80197d8:	7f3321d2 	.word	0x7f3321d2
 80197dc:	4002d97c 	.word	0x4002d97c
 80197e0:	7f3321d2 	.word	0x7f3321d2
 80197e4:	c002d97c 	.word	0xc002d97c
 80197e8:	33145c07 	.word	0x33145c07
 80197ec:	3ca1a626 	.word	0x3ca1a626
 80197f0:	54442d18 	.word	0x54442d18
 80197f4:	400921fb 	.word	0x400921fb
 80197f8:	54442d18 	.word	0x54442d18
 80197fc:	3ff921fb 	.word	0x3ff921fb
 8019800:	54442d18 	.word	0x54442d18
 8019804:	3fe921fb 	.word	0x3fe921fb
 8019808:	7ff00000 	.word	0x7ff00000
 801980c:	00000000 	.word	0x00000000

08019810 <__ieee754_rem_pio2>:
 8019810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019814:	ec57 6b10 	vmov	r6, r7, d0
 8019818:	4bc3      	ldr	r3, [pc, #780]	; (8019b28 <__ieee754_rem_pio2+0x318>)
 801981a:	b08d      	sub	sp, #52	; 0x34
 801981c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8019820:	4598      	cmp	r8, r3
 8019822:	4604      	mov	r4, r0
 8019824:	9704      	str	r7, [sp, #16]
 8019826:	dc07      	bgt.n	8019838 <__ieee754_rem_pio2+0x28>
 8019828:	2200      	movs	r2, #0
 801982a:	2300      	movs	r3, #0
 801982c:	ed84 0b00 	vstr	d0, [r4]
 8019830:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8019834:	2500      	movs	r5, #0
 8019836:	e027      	b.n	8019888 <__ieee754_rem_pio2+0x78>
 8019838:	4bbc      	ldr	r3, [pc, #752]	; (8019b2c <__ieee754_rem_pio2+0x31c>)
 801983a:	4598      	cmp	r8, r3
 801983c:	dc75      	bgt.n	801992a <__ieee754_rem_pio2+0x11a>
 801983e:	9b04      	ldr	r3, [sp, #16]
 8019840:	4dbb      	ldr	r5, [pc, #748]	; (8019b30 <__ieee754_rem_pio2+0x320>)
 8019842:	2b00      	cmp	r3, #0
 8019844:	ee10 0a10 	vmov	r0, s0
 8019848:	a3a9      	add	r3, pc, #676	; (adr r3, 8019af0 <__ieee754_rem_pio2+0x2e0>)
 801984a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801984e:	4639      	mov	r1, r7
 8019850:	dd36      	ble.n	80198c0 <__ieee754_rem_pio2+0xb0>
 8019852:	f7e6 fd19 	bl	8000288 <__aeabi_dsub>
 8019856:	45a8      	cmp	r8, r5
 8019858:	4606      	mov	r6, r0
 801985a:	460f      	mov	r7, r1
 801985c:	d018      	beq.n	8019890 <__ieee754_rem_pio2+0x80>
 801985e:	a3a6      	add	r3, pc, #664	; (adr r3, 8019af8 <__ieee754_rem_pio2+0x2e8>)
 8019860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019864:	f7e6 fd10 	bl	8000288 <__aeabi_dsub>
 8019868:	4602      	mov	r2, r0
 801986a:	460b      	mov	r3, r1
 801986c:	e9c4 2300 	strd	r2, r3, [r4]
 8019870:	4630      	mov	r0, r6
 8019872:	4639      	mov	r1, r7
 8019874:	f7e6 fd08 	bl	8000288 <__aeabi_dsub>
 8019878:	a39f      	add	r3, pc, #636	; (adr r3, 8019af8 <__ieee754_rem_pio2+0x2e8>)
 801987a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801987e:	f7e6 fd03 	bl	8000288 <__aeabi_dsub>
 8019882:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8019886:	2501      	movs	r5, #1
 8019888:	4628      	mov	r0, r5
 801988a:	b00d      	add	sp, #52	; 0x34
 801988c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019890:	a39b      	add	r3, pc, #620	; (adr r3, 8019b00 <__ieee754_rem_pio2+0x2f0>)
 8019892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019896:	f7e6 fcf7 	bl	8000288 <__aeabi_dsub>
 801989a:	a39b      	add	r3, pc, #620	; (adr r3, 8019b08 <__ieee754_rem_pio2+0x2f8>)
 801989c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198a0:	4606      	mov	r6, r0
 80198a2:	460f      	mov	r7, r1
 80198a4:	f7e6 fcf0 	bl	8000288 <__aeabi_dsub>
 80198a8:	4602      	mov	r2, r0
 80198aa:	460b      	mov	r3, r1
 80198ac:	e9c4 2300 	strd	r2, r3, [r4]
 80198b0:	4630      	mov	r0, r6
 80198b2:	4639      	mov	r1, r7
 80198b4:	f7e6 fce8 	bl	8000288 <__aeabi_dsub>
 80198b8:	a393      	add	r3, pc, #588	; (adr r3, 8019b08 <__ieee754_rem_pio2+0x2f8>)
 80198ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198be:	e7de      	b.n	801987e <__ieee754_rem_pio2+0x6e>
 80198c0:	f7e6 fce4 	bl	800028c <__adddf3>
 80198c4:	45a8      	cmp	r8, r5
 80198c6:	4606      	mov	r6, r0
 80198c8:	460f      	mov	r7, r1
 80198ca:	d016      	beq.n	80198fa <__ieee754_rem_pio2+0xea>
 80198cc:	a38a      	add	r3, pc, #552	; (adr r3, 8019af8 <__ieee754_rem_pio2+0x2e8>)
 80198ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198d2:	f7e6 fcdb 	bl	800028c <__adddf3>
 80198d6:	4602      	mov	r2, r0
 80198d8:	460b      	mov	r3, r1
 80198da:	e9c4 2300 	strd	r2, r3, [r4]
 80198de:	4630      	mov	r0, r6
 80198e0:	4639      	mov	r1, r7
 80198e2:	f7e6 fcd1 	bl	8000288 <__aeabi_dsub>
 80198e6:	a384      	add	r3, pc, #528	; (adr r3, 8019af8 <__ieee754_rem_pio2+0x2e8>)
 80198e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198ec:	f7e6 fcce 	bl	800028c <__adddf3>
 80198f0:	f04f 35ff 	mov.w	r5, #4294967295
 80198f4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80198f8:	e7c6      	b.n	8019888 <__ieee754_rem_pio2+0x78>
 80198fa:	a381      	add	r3, pc, #516	; (adr r3, 8019b00 <__ieee754_rem_pio2+0x2f0>)
 80198fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019900:	f7e6 fcc4 	bl	800028c <__adddf3>
 8019904:	a380      	add	r3, pc, #512	; (adr r3, 8019b08 <__ieee754_rem_pio2+0x2f8>)
 8019906:	e9d3 2300 	ldrd	r2, r3, [r3]
 801990a:	4606      	mov	r6, r0
 801990c:	460f      	mov	r7, r1
 801990e:	f7e6 fcbd 	bl	800028c <__adddf3>
 8019912:	4602      	mov	r2, r0
 8019914:	460b      	mov	r3, r1
 8019916:	e9c4 2300 	strd	r2, r3, [r4]
 801991a:	4630      	mov	r0, r6
 801991c:	4639      	mov	r1, r7
 801991e:	f7e6 fcb3 	bl	8000288 <__aeabi_dsub>
 8019922:	a379      	add	r3, pc, #484	; (adr r3, 8019b08 <__ieee754_rem_pio2+0x2f8>)
 8019924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019928:	e7e0      	b.n	80198ec <__ieee754_rem_pio2+0xdc>
 801992a:	4b82      	ldr	r3, [pc, #520]	; (8019b34 <__ieee754_rem_pio2+0x324>)
 801992c:	4598      	cmp	r8, r3
 801992e:	f300 80d0 	bgt.w	8019ad2 <__ieee754_rem_pio2+0x2c2>
 8019932:	f001 f875 	bl	801aa20 <fabs>
 8019936:	ec57 6b10 	vmov	r6, r7, d0
 801993a:	ee10 0a10 	vmov	r0, s0
 801993e:	a374      	add	r3, pc, #464	; (adr r3, 8019b10 <__ieee754_rem_pio2+0x300>)
 8019940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019944:	4639      	mov	r1, r7
 8019946:	f7e6 fe57 	bl	80005f8 <__aeabi_dmul>
 801994a:	2200      	movs	r2, #0
 801994c:	4b7a      	ldr	r3, [pc, #488]	; (8019b38 <__ieee754_rem_pio2+0x328>)
 801994e:	f7e6 fc9d 	bl	800028c <__adddf3>
 8019952:	f7e7 f901 	bl	8000b58 <__aeabi_d2iz>
 8019956:	4605      	mov	r5, r0
 8019958:	f7e6 fde4 	bl	8000524 <__aeabi_i2d>
 801995c:	a364      	add	r3, pc, #400	; (adr r3, 8019af0 <__ieee754_rem_pio2+0x2e0>)
 801995e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019962:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019966:	f7e6 fe47 	bl	80005f8 <__aeabi_dmul>
 801996a:	4602      	mov	r2, r0
 801996c:	460b      	mov	r3, r1
 801996e:	4630      	mov	r0, r6
 8019970:	4639      	mov	r1, r7
 8019972:	f7e6 fc89 	bl	8000288 <__aeabi_dsub>
 8019976:	a360      	add	r3, pc, #384	; (adr r3, 8019af8 <__ieee754_rem_pio2+0x2e8>)
 8019978:	e9d3 2300 	ldrd	r2, r3, [r3]
 801997c:	4682      	mov	sl, r0
 801997e:	468b      	mov	fp, r1
 8019980:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019984:	f7e6 fe38 	bl	80005f8 <__aeabi_dmul>
 8019988:	2d1f      	cmp	r5, #31
 801998a:	4606      	mov	r6, r0
 801998c:	460f      	mov	r7, r1
 801998e:	dc0c      	bgt.n	80199aa <__ieee754_rem_pio2+0x19a>
 8019990:	1e6a      	subs	r2, r5, #1
 8019992:	4b6a      	ldr	r3, [pc, #424]	; (8019b3c <__ieee754_rem_pio2+0x32c>)
 8019994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019998:	4543      	cmp	r3, r8
 801999a:	d006      	beq.n	80199aa <__ieee754_rem_pio2+0x19a>
 801999c:	4632      	mov	r2, r6
 801999e:	463b      	mov	r3, r7
 80199a0:	4650      	mov	r0, sl
 80199a2:	4659      	mov	r1, fp
 80199a4:	f7e6 fc70 	bl	8000288 <__aeabi_dsub>
 80199a8:	e00e      	b.n	80199c8 <__ieee754_rem_pio2+0x1b8>
 80199aa:	4632      	mov	r2, r6
 80199ac:	463b      	mov	r3, r7
 80199ae:	4650      	mov	r0, sl
 80199b0:	4659      	mov	r1, fp
 80199b2:	f7e6 fc69 	bl	8000288 <__aeabi_dsub>
 80199b6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80199ba:	9305      	str	r3, [sp, #20]
 80199bc:	9a05      	ldr	r2, [sp, #20]
 80199be:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80199c2:	1ad3      	subs	r3, r2, r3
 80199c4:	2b10      	cmp	r3, #16
 80199c6:	dc02      	bgt.n	80199ce <__ieee754_rem_pio2+0x1be>
 80199c8:	e9c4 0100 	strd	r0, r1, [r4]
 80199cc:	e039      	b.n	8019a42 <__ieee754_rem_pio2+0x232>
 80199ce:	a34c      	add	r3, pc, #304	; (adr r3, 8019b00 <__ieee754_rem_pio2+0x2f0>)
 80199d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80199d8:	f7e6 fe0e 	bl	80005f8 <__aeabi_dmul>
 80199dc:	4606      	mov	r6, r0
 80199de:	460f      	mov	r7, r1
 80199e0:	4602      	mov	r2, r0
 80199e2:	460b      	mov	r3, r1
 80199e4:	4650      	mov	r0, sl
 80199e6:	4659      	mov	r1, fp
 80199e8:	f7e6 fc4e 	bl	8000288 <__aeabi_dsub>
 80199ec:	4602      	mov	r2, r0
 80199ee:	460b      	mov	r3, r1
 80199f0:	4680      	mov	r8, r0
 80199f2:	4689      	mov	r9, r1
 80199f4:	4650      	mov	r0, sl
 80199f6:	4659      	mov	r1, fp
 80199f8:	f7e6 fc46 	bl	8000288 <__aeabi_dsub>
 80199fc:	4632      	mov	r2, r6
 80199fe:	463b      	mov	r3, r7
 8019a00:	f7e6 fc42 	bl	8000288 <__aeabi_dsub>
 8019a04:	a340      	add	r3, pc, #256	; (adr r3, 8019b08 <__ieee754_rem_pio2+0x2f8>)
 8019a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a0a:	4606      	mov	r6, r0
 8019a0c:	460f      	mov	r7, r1
 8019a0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019a12:	f7e6 fdf1 	bl	80005f8 <__aeabi_dmul>
 8019a16:	4632      	mov	r2, r6
 8019a18:	463b      	mov	r3, r7
 8019a1a:	f7e6 fc35 	bl	8000288 <__aeabi_dsub>
 8019a1e:	4602      	mov	r2, r0
 8019a20:	460b      	mov	r3, r1
 8019a22:	4606      	mov	r6, r0
 8019a24:	460f      	mov	r7, r1
 8019a26:	4640      	mov	r0, r8
 8019a28:	4649      	mov	r1, r9
 8019a2a:	f7e6 fc2d 	bl	8000288 <__aeabi_dsub>
 8019a2e:	9a05      	ldr	r2, [sp, #20]
 8019a30:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8019a34:	1ad3      	subs	r3, r2, r3
 8019a36:	2b31      	cmp	r3, #49	; 0x31
 8019a38:	dc20      	bgt.n	8019a7c <__ieee754_rem_pio2+0x26c>
 8019a3a:	e9c4 0100 	strd	r0, r1, [r4]
 8019a3e:	46c2      	mov	sl, r8
 8019a40:	46cb      	mov	fp, r9
 8019a42:	e9d4 8900 	ldrd	r8, r9, [r4]
 8019a46:	4650      	mov	r0, sl
 8019a48:	4642      	mov	r2, r8
 8019a4a:	464b      	mov	r3, r9
 8019a4c:	4659      	mov	r1, fp
 8019a4e:	f7e6 fc1b 	bl	8000288 <__aeabi_dsub>
 8019a52:	463b      	mov	r3, r7
 8019a54:	4632      	mov	r2, r6
 8019a56:	f7e6 fc17 	bl	8000288 <__aeabi_dsub>
 8019a5a:	9b04      	ldr	r3, [sp, #16]
 8019a5c:	2b00      	cmp	r3, #0
 8019a5e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8019a62:	f6bf af11 	bge.w	8019888 <__ieee754_rem_pio2+0x78>
 8019a66:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8019a6a:	6063      	str	r3, [r4, #4]
 8019a6c:	f8c4 8000 	str.w	r8, [r4]
 8019a70:	60a0      	str	r0, [r4, #8]
 8019a72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019a76:	60e3      	str	r3, [r4, #12]
 8019a78:	426d      	negs	r5, r5
 8019a7a:	e705      	b.n	8019888 <__ieee754_rem_pio2+0x78>
 8019a7c:	a326      	add	r3, pc, #152	; (adr r3, 8019b18 <__ieee754_rem_pio2+0x308>)
 8019a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019a86:	f7e6 fdb7 	bl	80005f8 <__aeabi_dmul>
 8019a8a:	4606      	mov	r6, r0
 8019a8c:	460f      	mov	r7, r1
 8019a8e:	4602      	mov	r2, r0
 8019a90:	460b      	mov	r3, r1
 8019a92:	4640      	mov	r0, r8
 8019a94:	4649      	mov	r1, r9
 8019a96:	f7e6 fbf7 	bl	8000288 <__aeabi_dsub>
 8019a9a:	4602      	mov	r2, r0
 8019a9c:	460b      	mov	r3, r1
 8019a9e:	4682      	mov	sl, r0
 8019aa0:	468b      	mov	fp, r1
 8019aa2:	4640      	mov	r0, r8
 8019aa4:	4649      	mov	r1, r9
 8019aa6:	f7e6 fbef 	bl	8000288 <__aeabi_dsub>
 8019aaa:	4632      	mov	r2, r6
 8019aac:	463b      	mov	r3, r7
 8019aae:	f7e6 fbeb 	bl	8000288 <__aeabi_dsub>
 8019ab2:	a31b      	add	r3, pc, #108	; (adr r3, 8019b20 <__ieee754_rem_pio2+0x310>)
 8019ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ab8:	4606      	mov	r6, r0
 8019aba:	460f      	mov	r7, r1
 8019abc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019ac0:	f7e6 fd9a 	bl	80005f8 <__aeabi_dmul>
 8019ac4:	4632      	mov	r2, r6
 8019ac6:	463b      	mov	r3, r7
 8019ac8:	f7e6 fbde 	bl	8000288 <__aeabi_dsub>
 8019acc:	4606      	mov	r6, r0
 8019ace:	460f      	mov	r7, r1
 8019ad0:	e764      	b.n	801999c <__ieee754_rem_pio2+0x18c>
 8019ad2:	4b1b      	ldr	r3, [pc, #108]	; (8019b40 <__ieee754_rem_pio2+0x330>)
 8019ad4:	4598      	cmp	r8, r3
 8019ad6:	dd35      	ble.n	8019b44 <__ieee754_rem_pio2+0x334>
 8019ad8:	ee10 2a10 	vmov	r2, s0
 8019adc:	463b      	mov	r3, r7
 8019ade:	4630      	mov	r0, r6
 8019ae0:	4639      	mov	r1, r7
 8019ae2:	f7e6 fbd1 	bl	8000288 <__aeabi_dsub>
 8019ae6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8019aea:	e9c4 0100 	strd	r0, r1, [r4]
 8019aee:	e6a1      	b.n	8019834 <__ieee754_rem_pio2+0x24>
 8019af0:	54400000 	.word	0x54400000
 8019af4:	3ff921fb 	.word	0x3ff921fb
 8019af8:	1a626331 	.word	0x1a626331
 8019afc:	3dd0b461 	.word	0x3dd0b461
 8019b00:	1a600000 	.word	0x1a600000
 8019b04:	3dd0b461 	.word	0x3dd0b461
 8019b08:	2e037073 	.word	0x2e037073
 8019b0c:	3ba3198a 	.word	0x3ba3198a
 8019b10:	6dc9c883 	.word	0x6dc9c883
 8019b14:	3fe45f30 	.word	0x3fe45f30
 8019b18:	2e000000 	.word	0x2e000000
 8019b1c:	3ba3198a 	.word	0x3ba3198a
 8019b20:	252049c1 	.word	0x252049c1
 8019b24:	397b839a 	.word	0x397b839a
 8019b28:	3fe921fb 	.word	0x3fe921fb
 8019b2c:	4002d97b 	.word	0x4002d97b
 8019b30:	3ff921fb 	.word	0x3ff921fb
 8019b34:	413921fb 	.word	0x413921fb
 8019b38:	3fe00000 	.word	0x3fe00000
 8019b3c:	0801b494 	.word	0x0801b494
 8019b40:	7fefffff 	.word	0x7fefffff
 8019b44:	ea4f 5528 	mov.w	r5, r8, asr #20
 8019b48:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8019b4c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8019b50:	4630      	mov	r0, r6
 8019b52:	460f      	mov	r7, r1
 8019b54:	f7e7 f800 	bl	8000b58 <__aeabi_d2iz>
 8019b58:	f7e6 fce4 	bl	8000524 <__aeabi_i2d>
 8019b5c:	4602      	mov	r2, r0
 8019b5e:	460b      	mov	r3, r1
 8019b60:	4630      	mov	r0, r6
 8019b62:	4639      	mov	r1, r7
 8019b64:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8019b68:	f7e6 fb8e 	bl	8000288 <__aeabi_dsub>
 8019b6c:	2200      	movs	r2, #0
 8019b6e:	4b1f      	ldr	r3, [pc, #124]	; (8019bec <__ieee754_rem_pio2+0x3dc>)
 8019b70:	f7e6 fd42 	bl	80005f8 <__aeabi_dmul>
 8019b74:	460f      	mov	r7, r1
 8019b76:	4606      	mov	r6, r0
 8019b78:	f7e6 ffee 	bl	8000b58 <__aeabi_d2iz>
 8019b7c:	f7e6 fcd2 	bl	8000524 <__aeabi_i2d>
 8019b80:	4602      	mov	r2, r0
 8019b82:	460b      	mov	r3, r1
 8019b84:	4630      	mov	r0, r6
 8019b86:	4639      	mov	r1, r7
 8019b88:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8019b8c:	f7e6 fb7c 	bl	8000288 <__aeabi_dsub>
 8019b90:	2200      	movs	r2, #0
 8019b92:	4b16      	ldr	r3, [pc, #88]	; (8019bec <__ieee754_rem_pio2+0x3dc>)
 8019b94:	f7e6 fd30 	bl	80005f8 <__aeabi_dmul>
 8019b98:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8019b9c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8019ba0:	f04f 0803 	mov.w	r8, #3
 8019ba4:	2600      	movs	r6, #0
 8019ba6:	2700      	movs	r7, #0
 8019ba8:	4632      	mov	r2, r6
 8019baa:	463b      	mov	r3, r7
 8019bac:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8019bb0:	f108 3aff 	add.w	sl, r8, #4294967295
 8019bb4:	f7e6 ff88 	bl	8000ac8 <__aeabi_dcmpeq>
 8019bb8:	b9b0      	cbnz	r0, 8019be8 <__ieee754_rem_pio2+0x3d8>
 8019bba:	4b0d      	ldr	r3, [pc, #52]	; (8019bf0 <__ieee754_rem_pio2+0x3e0>)
 8019bbc:	9301      	str	r3, [sp, #4]
 8019bbe:	2302      	movs	r3, #2
 8019bc0:	9300      	str	r3, [sp, #0]
 8019bc2:	462a      	mov	r2, r5
 8019bc4:	4643      	mov	r3, r8
 8019bc6:	4621      	mov	r1, r4
 8019bc8:	a806      	add	r0, sp, #24
 8019bca:	f000 f98d 	bl	8019ee8 <__kernel_rem_pio2>
 8019bce:	9b04      	ldr	r3, [sp, #16]
 8019bd0:	2b00      	cmp	r3, #0
 8019bd2:	4605      	mov	r5, r0
 8019bd4:	f6bf ae58 	bge.w	8019888 <__ieee754_rem_pio2+0x78>
 8019bd8:	6863      	ldr	r3, [r4, #4]
 8019bda:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8019bde:	6063      	str	r3, [r4, #4]
 8019be0:	68e3      	ldr	r3, [r4, #12]
 8019be2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8019be6:	e746      	b.n	8019a76 <__ieee754_rem_pio2+0x266>
 8019be8:	46d0      	mov	r8, sl
 8019bea:	e7dd      	b.n	8019ba8 <__ieee754_rem_pio2+0x398>
 8019bec:	41700000 	.word	0x41700000
 8019bf0:	0801b514 	.word	0x0801b514

08019bf4 <__ieee754_sqrt>:
 8019bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019bf8:	4955      	ldr	r1, [pc, #340]	; (8019d50 <__ieee754_sqrt+0x15c>)
 8019bfa:	ec55 4b10 	vmov	r4, r5, d0
 8019bfe:	43a9      	bics	r1, r5
 8019c00:	462b      	mov	r3, r5
 8019c02:	462a      	mov	r2, r5
 8019c04:	d112      	bne.n	8019c2c <__ieee754_sqrt+0x38>
 8019c06:	ee10 2a10 	vmov	r2, s0
 8019c0a:	ee10 0a10 	vmov	r0, s0
 8019c0e:	4629      	mov	r1, r5
 8019c10:	f7e6 fcf2 	bl	80005f8 <__aeabi_dmul>
 8019c14:	4602      	mov	r2, r0
 8019c16:	460b      	mov	r3, r1
 8019c18:	4620      	mov	r0, r4
 8019c1a:	4629      	mov	r1, r5
 8019c1c:	f7e6 fb36 	bl	800028c <__adddf3>
 8019c20:	4604      	mov	r4, r0
 8019c22:	460d      	mov	r5, r1
 8019c24:	ec45 4b10 	vmov	d0, r4, r5
 8019c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019c2c:	2d00      	cmp	r5, #0
 8019c2e:	ee10 0a10 	vmov	r0, s0
 8019c32:	4621      	mov	r1, r4
 8019c34:	dc0f      	bgt.n	8019c56 <__ieee754_sqrt+0x62>
 8019c36:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8019c3a:	4330      	orrs	r0, r6
 8019c3c:	d0f2      	beq.n	8019c24 <__ieee754_sqrt+0x30>
 8019c3e:	b155      	cbz	r5, 8019c56 <__ieee754_sqrt+0x62>
 8019c40:	ee10 2a10 	vmov	r2, s0
 8019c44:	4620      	mov	r0, r4
 8019c46:	4629      	mov	r1, r5
 8019c48:	f7e6 fb1e 	bl	8000288 <__aeabi_dsub>
 8019c4c:	4602      	mov	r2, r0
 8019c4e:	460b      	mov	r3, r1
 8019c50:	f7e6 fdfc 	bl	800084c <__aeabi_ddiv>
 8019c54:	e7e4      	b.n	8019c20 <__ieee754_sqrt+0x2c>
 8019c56:	151b      	asrs	r3, r3, #20
 8019c58:	d073      	beq.n	8019d42 <__ieee754_sqrt+0x14e>
 8019c5a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8019c5e:	07dd      	lsls	r5, r3, #31
 8019c60:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8019c64:	bf48      	it	mi
 8019c66:	0fc8      	lsrmi	r0, r1, #31
 8019c68:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8019c6c:	bf44      	itt	mi
 8019c6e:	0049      	lslmi	r1, r1, #1
 8019c70:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8019c74:	2500      	movs	r5, #0
 8019c76:	1058      	asrs	r0, r3, #1
 8019c78:	0fcb      	lsrs	r3, r1, #31
 8019c7a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8019c7e:	0049      	lsls	r1, r1, #1
 8019c80:	2316      	movs	r3, #22
 8019c82:	462c      	mov	r4, r5
 8019c84:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8019c88:	19a7      	adds	r7, r4, r6
 8019c8a:	4297      	cmp	r7, r2
 8019c8c:	bfde      	ittt	le
 8019c8e:	19bc      	addle	r4, r7, r6
 8019c90:	1bd2      	suble	r2, r2, r7
 8019c92:	19ad      	addle	r5, r5, r6
 8019c94:	0fcf      	lsrs	r7, r1, #31
 8019c96:	3b01      	subs	r3, #1
 8019c98:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8019c9c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8019ca0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8019ca4:	d1f0      	bne.n	8019c88 <__ieee754_sqrt+0x94>
 8019ca6:	f04f 0c20 	mov.w	ip, #32
 8019caa:	469e      	mov	lr, r3
 8019cac:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8019cb0:	42a2      	cmp	r2, r4
 8019cb2:	eb06 070e 	add.w	r7, r6, lr
 8019cb6:	dc02      	bgt.n	8019cbe <__ieee754_sqrt+0xca>
 8019cb8:	d112      	bne.n	8019ce0 <__ieee754_sqrt+0xec>
 8019cba:	428f      	cmp	r7, r1
 8019cbc:	d810      	bhi.n	8019ce0 <__ieee754_sqrt+0xec>
 8019cbe:	2f00      	cmp	r7, #0
 8019cc0:	eb07 0e06 	add.w	lr, r7, r6
 8019cc4:	da42      	bge.n	8019d4c <__ieee754_sqrt+0x158>
 8019cc6:	f1be 0f00 	cmp.w	lr, #0
 8019cca:	db3f      	blt.n	8019d4c <__ieee754_sqrt+0x158>
 8019ccc:	f104 0801 	add.w	r8, r4, #1
 8019cd0:	1b12      	subs	r2, r2, r4
 8019cd2:	428f      	cmp	r7, r1
 8019cd4:	bf88      	it	hi
 8019cd6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8019cda:	1bc9      	subs	r1, r1, r7
 8019cdc:	4433      	add	r3, r6
 8019cde:	4644      	mov	r4, r8
 8019ce0:	0052      	lsls	r2, r2, #1
 8019ce2:	f1bc 0c01 	subs.w	ip, ip, #1
 8019ce6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8019cea:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8019cee:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8019cf2:	d1dd      	bne.n	8019cb0 <__ieee754_sqrt+0xbc>
 8019cf4:	430a      	orrs	r2, r1
 8019cf6:	d006      	beq.n	8019d06 <__ieee754_sqrt+0x112>
 8019cf8:	1c5c      	adds	r4, r3, #1
 8019cfa:	bf13      	iteet	ne
 8019cfc:	3301      	addne	r3, #1
 8019cfe:	3501      	addeq	r5, #1
 8019d00:	4663      	moveq	r3, ip
 8019d02:	f023 0301 	bicne.w	r3, r3, #1
 8019d06:	106a      	asrs	r2, r5, #1
 8019d08:	085b      	lsrs	r3, r3, #1
 8019d0a:	07e9      	lsls	r1, r5, #31
 8019d0c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8019d10:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8019d14:	bf48      	it	mi
 8019d16:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8019d1a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8019d1e:	461c      	mov	r4, r3
 8019d20:	e780      	b.n	8019c24 <__ieee754_sqrt+0x30>
 8019d22:	0aca      	lsrs	r2, r1, #11
 8019d24:	3815      	subs	r0, #21
 8019d26:	0549      	lsls	r1, r1, #21
 8019d28:	2a00      	cmp	r2, #0
 8019d2a:	d0fa      	beq.n	8019d22 <__ieee754_sqrt+0x12e>
 8019d2c:	02d6      	lsls	r6, r2, #11
 8019d2e:	d50a      	bpl.n	8019d46 <__ieee754_sqrt+0x152>
 8019d30:	f1c3 0420 	rsb	r4, r3, #32
 8019d34:	fa21 f404 	lsr.w	r4, r1, r4
 8019d38:	1e5d      	subs	r5, r3, #1
 8019d3a:	4099      	lsls	r1, r3
 8019d3c:	4322      	orrs	r2, r4
 8019d3e:	1b43      	subs	r3, r0, r5
 8019d40:	e78b      	b.n	8019c5a <__ieee754_sqrt+0x66>
 8019d42:	4618      	mov	r0, r3
 8019d44:	e7f0      	b.n	8019d28 <__ieee754_sqrt+0x134>
 8019d46:	0052      	lsls	r2, r2, #1
 8019d48:	3301      	adds	r3, #1
 8019d4a:	e7ef      	b.n	8019d2c <__ieee754_sqrt+0x138>
 8019d4c:	46a0      	mov	r8, r4
 8019d4e:	e7bf      	b.n	8019cd0 <__ieee754_sqrt+0xdc>
 8019d50:	7ff00000 	.word	0x7ff00000
 8019d54:	00000000 	.word	0x00000000

08019d58 <__kernel_cos>:
 8019d58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d5c:	ec59 8b10 	vmov	r8, r9, d0
 8019d60:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8019d64:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8019d68:	ed2d 8b02 	vpush	{d8}
 8019d6c:	eeb0 8a41 	vmov.f32	s16, s2
 8019d70:	eef0 8a61 	vmov.f32	s17, s3
 8019d74:	da07      	bge.n	8019d86 <__kernel_cos+0x2e>
 8019d76:	ee10 0a10 	vmov	r0, s0
 8019d7a:	4649      	mov	r1, r9
 8019d7c:	f7e6 feec 	bl	8000b58 <__aeabi_d2iz>
 8019d80:	2800      	cmp	r0, #0
 8019d82:	f000 8089 	beq.w	8019e98 <__kernel_cos+0x140>
 8019d86:	4642      	mov	r2, r8
 8019d88:	464b      	mov	r3, r9
 8019d8a:	4640      	mov	r0, r8
 8019d8c:	4649      	mov	r1, r9
 8019d8e:	f7e6 fc33 	bl	80005f8 <__aeabi_dmul>
 8019d92:	2200      	movs	r2, #0
 8019d94:	4b4e      	ldr	r3, [pc, #312]	; (8019ed0 <__kernel_cos+0x178>)
 8019d96:	4604      	mov	r4, r0
 8019d98:	460d      	mov	r5, r1
 8019d9a:	f7e6 fc2d 	bl	80005f8 <__aeabi_dmul>
 8019d9e:	a340      	add	r3, pc, #256	; (adr r3, 8019ea0 <__kernel_cos+0x148>)
 8019da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019da4:	4682      	mov	sl, r0
 8019da6:	468b      	mov	fp, r1
 8019da8:	4620      	mov	r0, r4
 8019daa:	4629      	mov	r1, r5
 8019dac:	f7e6 fc24 	bl	80005f8 <__aeabi_dmul>
 8019db0:	a33d      	add	r3, pc, #244	; (adr r3, 8019ea8 <__kernel_cos+0x150>)
 8019db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019db6:	f7e6 fa69 	bl	800028c <__adddf3>
 8019dba:	4622      	mov	r2, r4
 8019dbc:	462b      	mov	r3, r5
 8019dbe:	f7e6 fc1b 	bl	80005f8 <__aeabi_dmul>
 8019dc2:	a33b      	add	r3, pc, #236	; (adr r3, 8019eb0 <__kernel_cos+0x158>)
 8019dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019dc8:	f7e6 fa5e 	bl	8000288 <__aeabi_dsub>
 8019dcc:	4622      	mov	r2, r4
 8019dce:	462b      	mov	r3, r5
 8019dd0:	f7e6 fc12 	bl	80005f8 <__aeabi_dmul>
 8019dd4:	a338      	add	r3, pc, #224	; (adr r3, 8019eb8 <__kernel_cos+0x160>)
 8019dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019dda:	f7e6 fa57 	bl	800028c <__adddf3>
 8019dde:	4622      	mov	r2, r4
 8019de0:	462b      	mov	r3, r5
 8019de2:	f7e6 fc09 	bl	80005f8 <__aeabi_dmul>
 8019de6:	a336      	add	r3, pc, #216	; (adr r3, 8019ec0 <__kernel_cos+0x168>)
 8019de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019dec:	f7e6 fa4c 	bl	8000288 <__aeabi_dsub>
 8019df0:	4622      	mov	r2, r4
 8019df2:	462b      	mov	r3, r5
 8019df4:	f7e6 fc00 	bl	80005f8 <__aeabi_dmul>
 8019df8:	a333      	add	r3, pc, #204	; (adr r3, 8019ec8 <__kernel_cos+0x170>)
 8019dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019dfe:	f7e6 fa45 	bl	800028c <__adddf3>
 8019e02:	4622      	mov	r2, r4
 8019e04:	462b      	mov	r3, r5
 8019e06:	f7e6 fbf7 	bl	80005f8 <__aeabi_dmul>
 8019e0a:	4622      	mov	r2, r4
 8019e0c:	462b      	mov	r3, r5
 8019e0e:	f7e6 fbf3 	bl	80005f8 <__aeabi_dmul>
 8019e12:	ec53 2b18 	vmov	r2, r3, d8
 8019e16:	4604      	mov	r4, r0
 8019e18:	460d      	mov	r5, r1
 8019e1a:	4640      	mov	r0, r8
 8019e1c:	4649      	mov	r1, r9
 8019e1e:	f7e6 fbeb 	bl	80005f8 <__aeabi_dmul>
 8019e22:	460b      	mov	r3, r1
 8019e24:	4602      	mov	r2, r0
 8019e26:	4629      	mov	r1, r5
 8019e28:	4620      	mov	r0, r4
 8019e2a:	f7e6 fa2d 	bl	8000288 <__aeabi_dsub>
 8019e2e:	4b29      	ldr	r3, [pc, #164]	; (8019ed4 <__kernel_cos+0x17c>)
 8019e30:	429e      	cmp	r6, r3
 8019e32:	4680      	mov	r8, r0
 8019e34:	4689      	mov	r9, r1
 8019e36:	dc11      	bgt.n	8019e5c <__kernel_cos+0x104>
 8019e38:	4602      	mov	r2, r0
 8019e3a:	460b      	mov	r3, r1
 8019e3c:	4650      	mov	r0, sl
 8019e3e:	4659      	mov	r1, fp
 8019e40:	f7e6 fa22 	bl	8000288 <__aeabi_dsub>
 8019e44:	460b      	mov	r3, r1
 8019e46:	4924      	ldr	r1, [pc, #144]	; (8019ed8 <__kernel_cos+0x180>)
 8019e48:	4602      	mov	r2, r0
 8019e4a:	2000      	movs	r0, #0
 8019e4c:	f7e6 fa1c 	bl	8000288 <__aeabi_dsub>
 8019e50:	ecbd 8b02 	vpop	{d8}
 8019e54:	ec41 0b10 	vmov	d0, r0, r1
 8019e58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e5c:	4b1f      	ldr	r3, [pc, #124]	; (8019edc <__kernel_cos+0x184>)
 8019e5e:	491e      	ldr	r1, [pc, #120]	; (8019ed8 <__kernel_cos+0x180>)
 8019e60:	429e      	cmp	r6, r3
 8019e62:	bfcc      	ite	gt
 8019e64:	4d1e      	ldrgt	r5, [pc, #120]	; (8019ee0 <__kernel_cos+0x188>)
 8019e66:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8019e6a:	2400      	movs	r4, #0
 8019e6c:	4622      	mov	r2, r4
 8019e6e:	462b      	mov	r3, r5
 8019e70:	2000      	movs	r0, #0
 8019e72:	f7e6 fa09 	bl	8000288 <__aeabi_dsub>
 8019e76:	4622      	mov	r2, r4
 8019e78:	4606      	mov	r6, r0
 8019e7a:	460f      	mov	r7, r1
 8019e7c:	462b      	mov	r3, r5
 8019e7e:	4650      	mov	r0, sl
 8019e80:	4659      	mov	r1, fp
 8019e82:	f7e6 fa01 	bl	8000288 <__aeabi_dsub>
 8019e86:	4642      	mov	r2, r8
 8019e88:	464b      	mov	r3, r9
 8019e8a:	f7e6 f9fd 	bl	8000288 <__aeabi_dsub>
 8019e8e:	4602      	mov	r2, r0
 8019e90:	460b      	mov	r3, r1
 8019e92:	4630      	mov	r0, r6
 8019e94:	4639      	mov	r1, r7
 8019e96:	e7d9      	b.n	8019e4c <__kernel_cos+0xf4>
 8019e98:	2000      	movs	r0, #0
 8019e9a:	490f      	ldr	r1, [pc, #60]	; (8019ed8 <__kernel_cos+0x180>)
 8019e9c:	e7d8      	b.n	8019e50 <__kernel_cos+0xf8>
 8019e9e:	bf00      	nop
 8019ea0:	be8838d4 	.word	0xbe8838d4
 8019ea4:	bda8fae9 	.word	0xbda8fae9
 8019ea8:	bdb4b1c4 	.word	0xbdb4b1c4
 8019eac:	3e21ee9e 	.word	0x3e21ee9e
 8019eb0:	809c52ad 	.word	0x809c52ad
 8019eb4:	3e927e4f 	.word	0x3e927e4f
 8019eb8:	19cb1590 	.word	0x19cb1590
 8019ebc:	3efa01a0 	.word	0x3efa01a0
 8019ec0:	16c15177 	.word	0x16c15177
 8019ec4:	3f56c16c 	.word	0x3f56c16c
 8019ec8:	5555554c 	.word	0x5555554c
 8019ecc:	3fa55555 	.word	0x3fa55555
 8019ed0:	3fe00000 	.word	0x3fe00000
 8019ed4:	3fd33332 	.word	0x3fd33332
 8019ed8:	3ff00000 	.word	0x3ff00000
 8019edc:	3fe90000 	.word	0x3fe90000
 8019ee0:	3fd20000 	.word	0x3fd20000
 8019ee4:	00000000 	.word	0x00000000

08019ee8 <__kernel_rem_pio2>:
 8019ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019eec:	ed2d 8b02 	vpush	{d8}
 8019ef0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8019ef4:	1ed4      	subs	r4, r2, #3
 8019ef6:	9308      	str	r3, [sp, #32]
 8019ef8:	9101      	str	r1, [sp, #4]
 8019efa:	4bc5      	ldr	r3, [pc, #788]	; (801a210 <__kernel_rem_pio2+0x328>)
 8019efc:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8019efe:	9009      	str	r0, [sp, #36]	; 0x24
 8019f00:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8019f04:	9304      	str	r3, [sp, #16]
 8019f06:	9b08      	ldr	r3, [sp, #32]
 8019f08:	3b01      	subs	r3, #1
 8019f0a:	9307      	str	r3, [sp, #28]
 8019f0c:	2318      	movs	r3, #24
 8019f0e:	fb94 f4f3 	sdiv	r4, r4, r3
 8019f12:	f06f 0317 	mvn.w	r3, #23
 8019f16:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8019f1a:	fb04 3303 	mla	r3, r4, r3, r3
 8019f1e:	eb03 0a02 	add.w	sl, r3, r2
 8019f22:	9b04      	ldr	r3, [sp, #16]
 8019f24:	9a07      	ldr	r2, [sp, #28]
 8019f26:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 801a200 <__kernel_rem_pio2+0x318>
 8019f2a:	eb03 0802 	add.w	r8, r3, r2
 8019f2e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8019f30:	1aa7      	subs	r7, r4, r2
 8019f32:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8019f36:	ae22      	add	r6, sp, #136	; 0x88
 8019f38:	2500      	movs	r5, #0
 8019f3a:	4545      	cmp	r5, r8
 8019f3c:	dd13      	ble.n	8019f66 <__kernel_rem_pio2+0x7e>
 8019f3e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 801a200 <__kernel_rem_pio2+0x318>
 8019f42:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8019f46:	2600      	movs	r6, #0
 8019f48:	9b04      	ldr	r3, [sp, #16]
 8019f4a:	429e      	cmp	r6, r3
 8019f4c:	dc32      	bgt.n	8019fb4 <__kernel_rem_pio2+0xcc>
 8019f4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f50:	9302      	str	r3, [sp, #8]
 8019f52:	9b08      	ldr	r3, [sp, #32]
 8019f54:	199d      	adds	r5, r3, r6
 8019f56:	ab22      	add	r3, sp, #136	; 0x88
 8019f58:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8019f5c:	9306      	str	r3, [sp, #24]
 8019f5e:	ec59 8b18 	vmov	r8, r9, d8
 8019f62:	2700      	movs	r7, #0
 8019f64:	e01f      	b.n	8019fa6 <__kernel_rem_pio2+0xbe>
 8019f66:	42ef      	cmn	r7, r5
 8019f68:	d407      	bmi.n	8019f7a <__kernel_rem_pio2+0x92>
 8019f6a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8019f6e:	f7e6 fad9 	bl	8000524 <__aeabi_i2d>
 8019f72:	e8e6 0102 	strd	r0, r1, [r6], #8
 8019f76:	3501      	adds	r5, #1
 8019f78:	e7df      	b.n	8019f3a <__kernel_rem_pio2+0x52>
 8019f7a:	ec51 0b18 	vmov	r0, r1, d8
 8019f7e:	e7f8      	b.n	8019f72 <__kernel_rem_pio2+0x8a>
 8019f80:	9906      	ldr	r1, [sp, #24]
 8019f82:	9d02      	ldr	r5, [sp, #8]
 8019f84:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8019f88:	9106      	str	r1, [sp, #24]
 8019f8a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8019f8e:	9502      	str	r5, [sp, #8]
 8019f90:	f7e6 fb32 	bl	80005f8 <__aeabi_dmul>
 8019f94:	4602      	mov	r2, r0
 8019f96:	460b      	mov	r3, r1
 8019f98:	4640      	mov	r0, r8
 8019f9a:	4649      	mov	r1, r9
 8019f9c:	f7e6 f976 	bl	800028c <__adddf3>
 8019fa0:	3701      	adds	r7, #1
 8019fa2:	4680      	mov	r8, r0
 8019fa4:	4689      	mov	r9, r1
 8019fa6:	9b07      	ldr	r3, [sp, #28]
 8019fa8:	429f      	cmp	r7, r3
 8019faa:	dde9      	ble.n	8019f80 <__kernel_rem_pio2+0x98>
 8019fac:	e8eb 8902 	strd	r8, r9, [fp], #8
 8019fb0:	3601      	adds	r6, #1
 8019fb2:	e7c9      	b.n	8019f48 <__kernel_rem_pio2+0x60>
 8019fb4:	9b04      	ldr	r3, [sp, #16]
 8019fb6:	aa0e      	add	r2, sp, #56	; 0x38
 8019fb8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019fbc:	930c      	str	r3, [sp, #48]	; 0x30
 8019fbe:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8019fc0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8019fc4:	9c04      	ldr	r4, [sp, #16]
 8019fc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8019fc8:	ab9a      	add	r3, sp, #616	; 0x268
 8019fca:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8019fce:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8019fd2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019fd6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8019fda:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8019fde:	ab9a      	add	r3, sp, #616	; 0x268
 8019fe0:	445b      	add	r3, fp
 8019fe2:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8019fe6:	2500      	movs	r5, #0
 8019fe8:	1b63      	subs	r3, r4, r5
 8019fea:	2b00      	cmp	r3, #0
 8019fec:	dc78      	bgt.n	801a0e0 <__kernel_rem_pio2+0x1f8>
 8019fee:	4650      	mov	r0, sl
 8019ff0:	ec49 8b10 	vmov	d0, r8, r9
 8019ff4:	f000 fda8 	bl	801ab48 <scalbn>
 8019ff8:	ec57 6b10 	vmov	r6, r7, d0
 8019ffc:	2200      	movs	r2, #0
 8019ffe:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801a002:	ee10 0a10 	vmov	r0, s0
 801a006:	4639      	mov	r1, r7
 801a008:	f7e6 faf6 	bl	80005f8 <__aeabi_dmul>
 801a00c:	ec41 0b10 	vmov	d0, r0, r1
 801a010:	f000 fd12 	bl	801aa38 <floor>
 801a014:	2200      	movs	r2, #0
 801a016:	ec51 0b10 	vmov	r0, r1, d0
 801a01a:	4b7e      	ldr	r3, [pc, #504]	; (801a214 <__kernel_rem_pio2+0x32c>)
 801a01c:	f7e6 faec 	bl	80005f8 <__aeabi_dmul>
 801a020:	4602      	mov	r2, r0
 801a022:	460b      	mov	r3, r1
 801a024:	4630      	mov	r0, r6
 801a026:	4639      	mov	r1, r7
 801a028:	f7e6 f92e 	bl	8000288 <__aeabi_dsub>
 801a02c:	460f      	mov	r7, r1
 801a02e:	4606      	mov	r6, r0
 801a030:	f7e6 fd92 	bl	8000b58 <__aeabi_d2iz>
 801a034:	9006      	str	r0, [sp, #24]
 801a036:	f7e6 fa75 	bl	8000524 <__aeabi_i2d>
 801a03a:	4602      	mov	r2, r0
 801a03c:	460b      	mov	r3, r1
 801a03e:	4630      	mov	r0, r6
 801a040:	4639      	mov	r1, r7
 801a042:	f7e6 f921 	bl	8000288 <__aeabi_dsub>
 801a046:	f1ba 0f00 	cmp.w	sl, #0
 801a04a:	4606      	mov	r6, r0
 801a04c:	460f      	mov	r7, r1
 801a04e:	dd6c      	ble.n	801a12a <__kernel_rem_pio2+0x242>
 801a050:	1e62      	subs	r2, r4, #1
 801a052:	ab0e      	add	r3, sp, #56	; 0x38
 801a054:	f1ca 0118 	rsb	r1, sl, #24
 801a058:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801a05c:	9d06      	ldr	r5, [sp, #24]
 801a05e:	fa40 f301 	asr.w	r3, r0, r1
 801a062:	441d      	add	r5, r3
 801a064:	408b      	lsls	r3, r1
 801a066:	1ac0      	subs	r0, r0, r3
 801a068:	ab0e      	add	r3, sp, #56	; 0x38
 801a06a:	9506      	str	r5, [sp, #24]
 801a06c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801a070:	f1ca 0317 	rsb	r3, sl, #23
 801a074:	fa40 f303 	asr.w	r3, r0, r3
 801a078:	9302      	str	r3, [sp, #8]
 801a07a:	9b02      	ldr	r3, [sp, #8]
 801a07c:	2b00      	cmp	r3, #0
 801a07e:	dd62      	ble.n	801a146 <__kernel_rem_pio2+0x25e>
 801a080:	9b06      	ldr	r3, [sp, #24]
 801a082:	2200      	movs	r2, #0
 801a084:	3301      	adds	r3, #1
 801a086:	9306      	str	r3, [sp, #24]
 801a088:	4615      	mov	r5, r2
 801a08a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801a08e:	4294      	cmp	r4, r2
 801a090:	f300 8095 	bgt.w	801a1be <__kernel_rem_pio2+0x2d6>
 801a094:	f1ba 0f00 	cmp.w	sl, #0
 801a098:	dd07      	ble.n	801a0aa <__kernel_rem_pio2+0x1c2>
 801a09a:	f1ba 0f01 	cmp.w	sl, #1
 801a09e:	f000 80a2 	beq.w	801a1e6 <__kernel_rem_pio2+0x2fe>
 801a0a2:	f1ba 0f02 	cmp.w	sl, #2
 801a0a6:	f000 80c1 	beq.w	801a22c <__kernel_rem_pio2+0x344>
 801a0aa:	9b02      	ldr	r3, [sp, #8]
 801a0ac:	2b02      	cmp	r3, #2
 801a0ae:	d14a      	bne.n	801a146 <__kernel_rem_pio2+0x25e>
 801a0b0:	4632      	mov	r2, r6
 801a0b2:	463b      	mov	r3, r7
 801a0b4:	2000      	movs	r0, #0
 801a0b6:	4958      	ldr	r1, [pc, #352]	; (801a218 <__kernel_rem_pio2+0x330>)
 801a0b8:	f7e6 f8e6 	bl	8000288 <__aeabi_dsub>
 801a0bc:	4606      	mov	r6, r0
 801a0be:	460f      	mov	r7, r1
 801a0c0:	2d00      	cmp	r5, #0
 801a0c2:	d040      	beq.n	801a146 <__kernel_rem_pio2+0x25e>
 801a0c4:	4650      	mov	r0, sl
 801a0c6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 801a208 <__kernel_rem_pio2+0x320>
 801a0ca:	f000 fd3d 	bl	801ab48 <scalbn>
 801a0ce:	4630      	mov	r0, r6
 801a0d0:	4639      	mov	r1, r7
 801a0d2:	ec53 2b10 	vmov	r2, r3, d0
 801a0d6:	f7e6 f8d7 	bl	8000288 <__aeabi_dsub>
 801a0da:	4606      	mov	r6, r0
 801a0dc:	460f      	mov	r7, r1
 801a0de:	e032      	b.n	801a146 <__kernel_rem_pio2+0x25e>
 801a0e0:	2200      	movs	r2, #0
 801a0e2:	4b4e      	ldr	r3, [pc, #312]	; (801a21c <__kernel_rem_pio2+0x334>)
 801a0e4:	4640      	mov	r0, r8
 801a0e6:	4649      	mov	r1, r9
 801a0e8:	f7e6 fa86 	bl	80005f8 <__aeabi_dmul>
 801a0ec:	f7e6 fd34 	bl	8000b58 <__aeabi_d2iz>
 801a0f0:	f7e6 fa18 	bl	8000524 <__aeabi_i2d>
 801a0f4:	2200      	movs	r2, #0
 801a0f6:	4b4a      	ldr	r3, [pc, #296]	; (801a220 <__kernel_rem_pio2+0x338>)
 801a0f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a0fc:	f7e6 fa7c 	bl	80005f8 <__aeabi_dmul>
 801a100:	4602      	mov	r2, r0
 801a102:	460b      	mov	r3, r1
 801a104:	4640      	mov	r0, r8
 801a106:	4649      	mov	r1, r9
 801a108:	f7e6 f8be 	bl	8000288 <__aeabi_dsub>
 801a10c:	f7e6 fd24 	bl	8000b58 <__aeabi_d2iz>
 801a110:	ab0e      	add	r3, sp, #56	; 0x38
 801a112:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 801a116:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801a11a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a11e:	f7e6 f8b5 	bl	800028c <__adddf3>
 801a122:	3501      	adds	r5, #1
 801a124:	4680      	mov	r8, r0
 801a126:	4689      	mov	r9, r1
 801a128:	e75e      	b.n	8019fe8 <__kernel_rem_pio2+0x100>
 801a12a:	d105      	bne.n	801a138 <__kernel_rem_pio2+0x250>
 801a12c:	1e63      	subs	r3, r4, #1
 801a12e:	aa0e      	add	r2, sp, #56	; 0x38
 801a130:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801a134:	15c3      	asrs	r3, r0, #23
 801a136:	e79f      	b.n	801a078 <__kernel_rem_pio2+0x190>
 801a138:	2200      	movs	r2, #0
 801a13a:	4b3a      	ldr	r3, [pc, #232]	; (801a224 <__kernel_rem_pio2+0x33c>)
 801a13c:	f7e6 fce2 	bl	8000b04 <__aeabi_dcmpge>
 801a140:	2800      	cmp	r0, #0
 801a142:	d139      	bne.n	801a1b8 <__kernel_rem_pio2+0x2d0>
 801a144:	9002      	str	r0, [sp, #8]
 801a146:	2200      	movs	r2, #0
 801a148:	2300      	movs	r3, #0
 801a14a:	4630      	mov	r0, r6
 801a14c:	4639      	mov	r1, r7
 801a14e:	f7e6 fcbb 	bl	8000ac8 <__aeabi_dcmpeq>
 801a152:	2800      	cmp	r0, #0
 801a154:	f000 80c7 	beq.w	801a2e6 <__kernel_rem_pio2+0x3fe>
 801a158:	1e65      	subs	r5, r4, #1
 801a15a:	462b      	mov	r3, r5
 801a15c:	2200      	movs	r2, #0
 801a15e:	9904      	ldr	r1, [sp, #16]
 801a160:	428b      	cmp	r3, r1
 801a162:	da6a      	bge.n	801a23a <__kernel_rem_pio2+0x352>
 801a164:	2a00      	cmp	r2, #0
 801a166:	f000 8088 	beq.w	801a27a <__kernel_rem_pio2+0x392>
 801a16a:	ab0e      	add	r3, sp, #56	; 0x38
 801a16c:	f1aa 0a18 	sub.w	sl, sl, #24
 801a170:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801a174:	2b00      	cmp	r3, #0
 801a176:	f000 80b4 	beq.w	801a2e2 <__kernel_rem_pio2+0x3fa>
 801a17a:	4650      	mov	r0, sl
 801a17c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 801a208 <__kernel_rem_pio2+0x320>
 801a180:	f000 fce2 	bl	801ab48 <scalbn>
 801a184:	00ec      	lsls	r4, r5, #3
 801a186:	ab72      	add	r3, sp, #456	; 0x1c8
 801a188:	191e      	adds	r6, r3, r4
 801a18a:	ec59 8b10 	vmov	r8, r9, d0
 801a18e:	f106 0a08 	add.w	sl, r6, #8
 801a192:	462f      	mov	r7, r5
 801a194:	2f00      	cmp	r7, #0
 801a196:	f280 80df 	bge.w	801a358 <__kernel_rem_pio2+0x470>
 801a19a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 801a200 <__kernel_rem_pio2+0x318>
 801a19e:	f04f 0a00 	mov.w	sl, #0
 801a1a2:	eba5 030a 	sub.w	r3, r5, sl
 801a1a6:	2b00      	cmp	r3, #0
 801a1a8:	f2c0 810a 	blt.w	801a3c0 <__kernel_rem_pio2+0x4d8>
 801a1ac:	f8df b078 	ldr.w	fp, [pc, #120]	; 801a228 <__kernel_rem_pio2+0x340>
 801a1b0:	ec59 8b18 	vmov	r8, r9, d8
 801a1b4:	2700      	movs	r7, #0
 801a1b6:	e0f5      	b.n	801a3a4 <__kernel_rem_pio2+0x4bc>
 801a1b8:	2302      	movs	r3, #2
 801a1ba:	9302      	str	r3, [sp, #8]
 801a1bc:	e760      	b.n	801a080 <__kernel_rem_pio2+0x198>
 801a1be:	ab0e      	add	r3, sp, #56	; 0x38
 801a1c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a1c4:	b94d      	cbnz	r5, 801a1da <__kernel_rem_pio2+0x2f2>
 801a1c6:	b12b      	cbz	r3, 801a1d4 <__kernel_rem_pio2+0x2ec>
 801a1c8:	a80e      	add	r0, sp, #56	; 0x38
 801a1ca:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801a1ce:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801a1d2:	2301      	movs	r3, #1
 801a1d4:	3201      	adds	r2, #1
 801a1d6:	461d      	mov	r5, r3
 801a1d8:	e759      	b.n	801a08e <__kernel_rem_pio2+0x1a6>
 801a1da:	a80e      	add	r0, sp, #56	; 0x38
 801a1dc:	1acb      	subs	r3, r1, r3
 801a1de:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801a1e2:	462b      	mov	r3, r5
 801a1e4:	e7f6      	b.n	801a1d4 <__kernel_rem_pio2+0x2ec>
 801a1e6:	1e62      	subs	r2, r4, #1
 801a1e8:	ab0e      	add	r3, sp, #56	; 0x38
 801a1ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a1ee:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801a1f2:	a90e      	add	r1, sp, #56	; 0x38
 801a1f4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801a1f8:	e757      	b.n	801a0aa <__kernel_rem_pio2+0x1c2>
 801a1fa:	bf00      	nop
 801a1fc:	f3af 8000 	nop.w
	...
 801a20c:	3ff00000 	.word	0x3ff00000
 801a210:	0801b660 	.word	0x0801b660
 801a214:	40200000 	.word	0x40200000
 801a218:	3ff00000 	.word	0x3ff00000
 801a21c:	3e700000 	.word	0x3e700000
 801a220:	41700000 	.word	0x41700000
 801a224:	3fe00000 	.word	0x3fe00000
 801a228:	0801b620 	.word	0x0801b620
 801a22c:	1e62      	subs	r2, r4, #1
 801a22e:	ab0e      	add	r3, sp, #56	; 0x38
 801a230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a234:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801a238:	e7db      	b.n	801a1f2 <__kernel_rem_pio2+0x30a>
 801a23a:	a90e      	add	r1, sp, #56	; 0x38
 801a23c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801a240:	3b01      	subs	r3, #1
 801a242:	430a      	orrs	r2, r1
 801a244:	e78b      	b.n	801a15e <__kernel_rem_pio2+0x276>
 801a246:	3301      	adds	r3, #1
 801a248:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801a24c:	2900      	cmp	r1, #0
 801a24e:	d0fa      	beq.n	801a246 <__kernel_rem_pio2+0x35e>
 801a250:	9a08      	ldr	r2, [sp, #32]
 801a252:	4422      	add	r2, r4
 801a254:	00d2      	lsls	r2, r2, #3
 801a256:	a922      	add	r1, sp, #136	; 0x88
 801a258:	18e3      	adds	r3, r4, r3
 801a25a:	9206      	str	r2, [sp, #24]
 801a25c:	440a      	add	r2, r1
 801a25e:	9302      	str	r3, [sp, #8]
 801a260:	f10b 0108 	add.w	r1, fp, #8
 801a264:	f102 0308 	add.w	r3, r2, #8
 801a268:	1c66      	adds	r6, r4, #1
 801a26a:	910a      	str	r1, [sp, #40]	; 0x28
 801a26c:	2500      	movs	r5, #0
 801a26e:	930d      	str	r3, [sp, #52]	; 0x34
 801a270:	9b02      	ldr	r3, [sp, #8]
 801a272:	42b3      	cmp	r3, r6
 801a274:	da04      	bge.n	801a280 <__kernel_rem_pio2+0x398>
 801a276:	461c      	mov	r4, r3
 801a278:	e6a6      	b.n	8019fc8 <__kernel_rem_pio2+0xe0>
 801a27a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a27c:	2301      	movs	r3, #1
 801a27e:	e7e3      	b.n	801a248 <__kernel_rem_pio2+0x360>
 801a280:	9b06      	ldr	r3, [sp, #24]
 801a282:	18ef      	adds	r7, r5, r3
 801a284:	ab22      	add	r3, sp, #136	; 0x88
 801a286:	441f      	add	r7, r3
 801a288:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a28a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801a28e:	f7e6 f949 	bl	8000524 <__aeabi_i2d>
 801a292:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a294:	461c      	mov	r4, r3
 801a296:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a298:	e9c7 0100 	strd	r0, r1, [r7]
 801a29c:	eb03 0b05 	add.w	fp, r3, r5
 801a2a0:	2700      	movs	r7, #0
 801a2a2:	f04f 0800 	mov.w	r8, #0
 801a2a6:	f04f 0900 	mov.w	r9, #0
 801a2aa:	9b07      	ldr	r3, [sp, #28]
 801a2ac:	429f      	cmp	r7, r3
 801a2ae:	dd08      	ble.n	801a2c2 <__kernel_rem_pio2+0x3da>
 801a2b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a2b2:	aa72      	add	r2, sp, #456	; 0x1c8
 801a2b4:	18eb      	adds	r3, r5, r3
 801a2b6:	4413      	add	r3, r2
 801a2b8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 801a2bc:	3601      	adds	r6, #1
 801a2be:	3508      	adds	r5, #8
 801a2c0:	e7d6      	b.n	801a270 <__kernel_rem_pio2+0x388>
 801a2c2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801a2c6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801a2ca:	f7e6 f995 	bl	80005f8 <__aeabi_dmul>
 801a2ce:	4602      	mov	r2, r0
 801a2d0:	460b      	mov	r3, r1
 801a2d2:	4640      	mov	r0, r8
 801a2d4:	4649      	mov	r1, r9
 801a2d6:	f7e5 ffd9 	bl	800028c <__adddf3>
 801a2da:	3701      	adds	r7, #1
 801a2dc:	4680      	mov	r8, r0
 801a2de:	4689      	mov	r9, r1
 801a2e0:	e7e3      	b.n	801a2aa <__kernel_rem_pio2+0x3c2>
 801a2e2:	3d01      	subs	r5, #1
 801a2e4:	e741      	b.n	801a16a <__kernel_rem_pio2+0x282>
 801a2e6:	f1ca 0000 	rsb	r0, sl, #0
 801a2ea:	ec47 6b10 	vmov	d0, r6, r7
 801a2ee:	f000 fc2b 	bl	801ab48 <scalbn>
 801a2f2:	ec57 6b10 	vmov	r6, r7, d0
 801a2f6:	2200      	movs	r2, #0
 801a2f8:	4b99      	ldr	r3, [pc, #612]	; (801a560 <__kernel_rem_pio2+0x678>)
 801a2fa:	ee10 0a10 	vmov	r0, s0
 801a2fe:	4639      	mov	r1, r7
 801a300:	f7e6 fc00 	bl	8000b04 <__aeabi_dcmpge>
 801a304:	b1f8      	cbz	r0, 801a346 <__kernel_rem_pio2+0x45e>
 801a306:	2200      	movs	r2, #0
 801a308:	4b96      	ldr	r3, [pc, #600]	; (801a564 <__kernel_rem_pio2+0x67c>)
 801a30a:	4630      	mov	r0, r6
 801a30c:	4639      	mov	r1, r7
 801a30e:	f7e6 f973 	bl	80005f8 <__aeabi_dmul>
 801a312:	f7e6 fc21 	bl	8000b58 <__aeabi_d2iz>
 801a316:	4680      	mov	r8, r0
 801a318:	f7e6 f904 	bl	8000524 <__aeabi_i2d>
 801a31c:	2200      	movs	r2, #0
 801a31e:	4b90      	ldr	r3, [pc, #576]	; (801a560 <__kernel_rem_pio2+0x678>)
 801a320:	f7e6 f96a 	bl	80005f8 <__aeabi_dmul>
 801a324:	460b      	mov	r3, r1
 801a326:	4602      	mov	r2, r0
 801a328:	4639      	mov	r1, r7
 801a32a:	4630      	mov	r0, r6
 801a32c:	f7e5 ffac 	bl	8000288 <__aeabi_dsub>
 801a330:	f7e6 fc12 	bl	8000b58 <__aeabi_d2iz>
 801a334:	1c65      	adds	r5, r4, #1
 801a336:	ab0e      	add	r3, sp, #56	; 0x38
 801a338:	f10a 0a18 	add.w	sl, sl, #24
 801a33c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801a340:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801a344:	e719      	b.n	801a17a <__kernel_rem_pio2+0x292>
 801a346:	4630      	mov	r0, r6
 801a348:	4639      	mov	r1, r7
 801a34a:	f7e6 fc05 	bl	8000b58 <__aeabi_d2iz>
 801a34e:	ab0e      	add	r3, sp, #56	; 0x38
 801a350:	4625      	mov	r5, r4
 801a352:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801a356:	e710      	b.n	801a17a <__kernel_rem_pio2+0x292>
 801a358:	ab0e      	add	r3, sp, #56	; 0x38
 801a35a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801a35e:	f7e6 f8e1 	bl	8000524 <__aeabi_i2d>
 801a362:	4642      	mov	r2, r8
 801a364:	464b      	mov	r3, r9
 801a366:	f7e6 f947 	bl	80005f8 <__aeabi_dmul>
 801a36a:	2200      	movs	r2, #0
 801a36c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 801a370:	4b7c      	ldr	r3, [pc, #496]	; (801a564 <__kernel_rem_pio2+0x67c>)
 801a372:	4640      	mov	r0, r8
 801a374:	4649      	mov	r1, r9
 801a376:	f7e6 f93f 	bl	80005f8 <__aeabi_dmul>
 801a37a:	3f01      	subs	r7, #1
 801a37c:	4680      	mov	r8, r0
 801a37e:	4689      	mov	r9, r1
 801a380:	e708      	b.n	801a194 <__kernel_rem_pio2+0x2ac>
 801a382:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 801a386:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a38a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 801a38e:	f7e6 f933 	bl	80005f8 <__aeabi_dmul>
 801a392:	4602      	mov	r2, r0
 801a394:	460b      	mov	r3, r1
 801a396:	4640      	mov	r0, r8
 801a398:	4649      	mov	r1, r9
 801a39a:	f7e5 ff77 	bl	800028c <__adddf3>
 801a39e:	3701      	adds	r7, #1
 801a3a0:	4680      	mov	r8, r0
 801a3a2:	4689      	mov	r9, r1
 801a3a4:	9b04      	ldr	r3, [sp, #16]
 801a3a6:	429f      	cmp	r7, r3
 801a3a8:	dc01      	bgt.n	801a3ae <__kernel_rem_pio2+0x4c6>
 801a3aa:	45ba      	cmp	sl, r7
 801a3ac:	dae9      	bge.n	801a382 <__kernel_rem_pio2+0x49a>
 801a3ae:	ab4a      	add	r3, sp, #296	; 0x128
 801a3b0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801a3b4:	e9c3 8900 	strd	r8, r9, [r3]
 801a3b8:	f10a 0a01 	add.w	sl, sl, #1
 801a3bc:	3e08      	subs	r6, #8
 801a3be:	e6f0      	b.n	801a1a2 <__kernel_rem_pio2+0x2ba>
 801a3c0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801a3c2:	2b03      	cmp	r3, #3
 801a3c4:	d85b      	bhi.n	801a47e <__kernel_rem_pio2+0x596>
 801a3c6:	e8df f003 	tbb	[pc, r3]
 801a3ca:	264a      	.short	0x264a
 801a3cc:	0226      	.short	0x0226
 801a3ce:	ab9a      	add	r3, sp, #616	; 0x268
 801a3d0:	441c      	add	r4, r3
 801a3d2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801a3d6:	46a2      	mov	sl, r4
 801a3d8:	46ab      	mov	fp, r5
 801a3da:	f1bb 0f00 	cmp.w	fp, #0
 801a3de:	dc6c      	bgt.n	801a4ba <__kernel_rem_pio2+0x5d2>
 801a3e0:	46a2      	mov	sl, r4
 801a3e2:	46ab      	mov	fp, r5
 801a3e4:	f1bb 0f01 	cmp.w	fp, #1
 801a3e8:	f300 8086 	bgt.w	801a4f8 <__kernel_rem_pio2+0x610>
 801a3ec:	2000      	movs	r0, #0
 801a3ee:	2100      	movs	r1, #0
 801a3f0:	2d01      	cmp	r5, #1
 801a3f2:	f300 80a0 	bgt.w	801a536 <__kernel_rem_pio2+0x64e>
 801a3f6:	9b02      	ldr	r3, [sp, #8]
 801a3f8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801a3fc:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 801a400:	2b00      	cmp	r3, #0
 801a402:	f040 809e 	bne.w	801a542 <__kernel_rem_pio2+0x65a>
 801a406:	9b01      	ldr	r3, [sp, #4]
 801a408:	e9c3 7800 	strd	r7, r8, [r3]
 801a40c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801a410:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801a414:	e033      	b.n	801a47e <__kernel_rem_pio2+0x596>
 801a416:	3408      	adds	r4, #8
 801a418:	ab4a      	add	r3, sp, #296	; 0x128
 801a41a:	441c      	add	r4, r3
 801a41c:	462e      	mov	r6, r5
 801a41e:	2000      	movs	r0, #0
 801a420:	2100      	movs	r1, #0
 801a422:	2e00      	cmp	r6, #0
 801a424:	da3a      	bge.n	801a49c <__kernel_rem_pio2+0x5b4>
 801a426:	9b02      	ldr	r3, [sp, #8]
 801a428:	2b00      	cmp	r3, #0
 801a42a:	d03d      	beq.n	801a4a8 <__kernel_rem_pio2+0x5c0>
 801a42c:	4602      	mov	r2, r0
 801a42e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a432:	9c01      	ldr	r4, [sp, #4]
 801a434:	e9c4 2300 	strd	r2, r3, [r4]
 801a438:	4602      	mov	r2, r0
 801a43a:	460b      	mov	r3, r1
 801a43c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 801a440:	f7e5 ff22 	bl	8000288 <__aeabi_dsub>
 801a444:	ae4c      	add	r6, sp, #304	; 0x130
 801a446:	2401      	movs	r4, #1
 801a448:	42a5      	cmp	r5, r4
 801a44a:	da30      	bge.n	801a4ae <__kernel_rem_pio2+0x5c6>
 801a44c:	9b02      	ldr	r3, [sp, #8]
 801a44e:	b113      	cbz	r3, 801a456 <__kernel_rem_pio2+0x56e>
 801a450:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a454:	4619      	mov	r1, r3
 801a456:	9b01      	ldr	r3, [sp, #4]
 801a458:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801a45c:	e00f      	b.n	801a47e <__kernel_rem_pio2+0x596>
 801a45e:	ab9a      	add	r3, sp, #616	; 0x268
 801a460:	441c      	add	r4, r3
 801a462:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801a466:	2000      	movs	r0, #0
 801a468:	2100      	movs	r1, #0
 801a46a:	2d00      	cmp	r5, #0
 801a46c:	da10      	bge.n	801a490 <__kernel_rem_pio2+0x5a8>
 801a46e:	9b02      	ldr	r3, [sp, #8]
 801a470:	b113      	cbz	r3, 801a478 <__kernel_rem_pio2+0x590>
 801a472:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a476:	4619      	mov	r1, r3
 801a478:	9b01      	ldr	r3, [sp, #4]
 801a47a:	e9c3 0100 	strd	r0, r1, [r3]
 801a47e:	9b06      	ldr	r3, [sp, #24]
 801a480:	f003 0007 	and.w	r0, r3, #7
 801a484:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 801a488:	ecbd 8b02 	vpop	{d8}
 801a48c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a490:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801a494:	f7e5 fefa 	bl	800028c <__adddf3>
 801a498:	3d01      	subs	r5, #1
 801a49a:	e7e6      	b.n	801a46a <__kernel_rem_pio2+0x582>
 801a49c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801a4a0:	f7e5 fef4 	bl	800028c <__adddf3>
 801a4a4:	3e01      	subs	r6, #1
 801a4a6:	e7bc      	b.n	801a422 <__kernel_rem_pio2+0x53a>
 801a4a8:	4602      	mov	r2, r0
 801a4aa:	460b      	mov	r3, r1
 801a4ac:	e7c1      	b.n	801a432 <__kernel_rem_pio2+0x54a>
 801a4ae:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801a4b2:	f7e5 feeb 	bl	800028c <__adddf3>
 801a4b6:	3401      	adds	r4, #1
 801a4b8:	e7c6      	b.n	801a448 <__kernel_rem_pio2+0x560>
 801a4ba:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 801a4be:	ed3a 7b02 	vldmdb	sl!, {d7}
 801a4c2:	4640      	mov	r0, r8
 801a4c4:	ec53 2b17 	vmov	r2, r3, d7
 801a4c8:	4649      	mov	r1, r9
 801a4ca:	ed8d 7b04 	vstr	d7, [sp, #16]
 801a4ce:	f7e5 fedd 	bl	800028c <__adddf3>
 801a4d2:	4602      	mov	r2, r0
 801a4d4:	460b      	mov	r3, r1
 801a4d6:	4606      	mov	r6, r0
 801a4d8:	460f      	mov	r7, r1
 801a4da:	4640      	mov	r0, r8
 801a4dc:	4649      	mov	r1, r9
 801a4de:	f7e5 fed3 	bl	8000288 <__aeabi_dsub>
 801a4e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a4e6:	f7e5 fed1 	bl	800028c <__adddf3>
 801a4ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a4ee:	e9ca 0100 	strd	r0, r1, [sl]
 801a4f2:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801a4f6:	e770      	b.n	801a3da <__kernel_rem_pio2+0x4f2>
 801a4f8:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 801a4fc:	ed3a 7b02 	vldmdb	sl!, {d7}
 801a500:	4630      	mov	r0, r6
 801a502:	ec53 2b17 	vmov	r2, r3, d7
 801a506:	4639      	mov	r1, r7
 801a508:	ed8d 7b04 	vstr	d7, [sp, #16]
 801a50c:	f7e5 febe 	bl	800028c <__adddf3>
 801a510:	4602      	mov	r2, r0
 801a512:	460b      	mov	r3, r1
 801a514:	4680      	mov	r8, r0
 801a516:	4689      	mov	r9, r1
 801a518:	4630      	mov	r0, r6
 801a51a:	4639      	mov	r1, r7
 801a51c:	f7e5 feb4 	bl	8000288 <__aeabi_dsub>
 801a520:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a524:	f7e5 feb2 	bl	800028c <__adddf3>
 801a528:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a52c:	e9ca 0100 	strd	r0, r1, [sl]
 801a530:	e94a 8902 	strd	r8, r9, [sl, #-8]
 801a534:	e756      	b.n	801a3e4 <__kernel_rem_pio2+0x4fc>
 801a536:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801a53a:	f7e5 fea7 	bl	800028c <__adddf3>
 801a53e:	3d01      	subs	r5, #1
 801a540:	e756      	b.n	801a3f0 <__kernel_rem_pio2+0x508>
 801a542:	9b01      	ldr	r3, [sp, #4]
 801a544:	9a01      	ldr	r2, [sp, #4]
 801a546:	601f      	str	r7, [r3, #0]
 801a548:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 801a54c:	605c      	str	r4, [r3, #4]
 801a54e:	609d      	str	r5, [r3, #8]
 801a550:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801a554:	60d3      	str	r3, [r2, #12]
 801a556:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a55a:	6110      	str	r0, [r2, #16]
 801a55c:	6153      	str	r3, [r2, #20]
 801a55e:	e78e      	b.n	801a47e <__kernel_rem_pio2+0x596>
 801a560:	41700000 	.word	0x41700000
 801a564:	3e700000 	.word	0x3e700000

0801a568 <__kernel_sin>:
 801a568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a56c:	ec55 4b10 	vmov	r4, r5, d0
 801a570:	b085      	sub	sp, #20
 801a572:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801a576:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801a57a:	ed8d 1b00 	vstr	d1, [sp]
 801a57e:	9002      	str	r0, [sp, #8]
 801a580:	da06      	bge.n	801a590 <__kernel_sin+0x28>
 801a582:	ee10 0a10 	vmov	r0, s0
 801a586:	4629      	mov	r1, r5
 801a588:	f7e6 fae6 	bl	8000b58 <__aeabi_d2iz>
 801a58c:	2800      	cmp	r0, #0
 801a58e:	d051      	beq.n	801a634 <__kernel_sin+0xcc>
 801a590:	4622      	mov	r2, r4
 801a592:	462b      	mov	r3, r5
 801a594:	4620      	mov	r0, r4
 801a596:	4629      	mov	r1, r5
 801a598:	f7e6 f82e 	bl	80005f8 <__aeabi_dmul>
 801a59c:	4682      	mov	sl, r0
 801a59e:	468b      	mov	fp, r1
 801a5a0:	4602      	mov	r2, r0
 801a5a2:	460b      	mov	r3, r1
 801a5a4:	4620      	mov	r0, r4
 801a5a6:	4629      	mov	r1, r5
 801a5a8:	f7e6 f826 	bl	80005f8 <__aeabi_dmul>
 801a5ac:	a341      	add	r3, pc, #260	; (adr r3, 801a6b4 <__kernel_sin+0x14c>)
 801a5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5b2:	4680      	mov	r8, r0
 801a5b4:	4689      	mov	r9, r1
 801a5b6:	4650      	mov	r0, sl
 801a5b8:	4659      	mov	r1, fp
 801a5ba:	f7e6 f81d 	bl	80005f8 <__aeabi_dmul>
 801a5be:	a33f      	add	r3, pc, #252	; (adr r3, 801a6bc <__kernel_sin+0x154>)
 801a5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5c4:	f7e5 fe60 	bl	8000288 <__aeabi_dsub>
 801a5c8:	4652      	mov	r2, sl
 801a5ca:	465b      	mov	r3, fp
 801a5cc:	f7e6 f814 	bl	80005f8 <__aeabi_dmul>
 801a5d0:	a33c      	add	r3, pc, #240	; (adr r3, 801a6c4 <__kernel_sin+0x15c>)
 801a5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5d6:	f7e5 fe59 	bl	800028c <__adddf3>
 801a5da:	4652      	mov	r2, sl
 801a5dc:	465b      	mov	r3, fp
 801a5de:	f7e6 f80b 	bl	80005f8 <__aeabi_dmul>
 801a5e2:	a33a      	add	r3, pc, #232	; (adr r3, 801a6cc <__kernel_sin+0x164>)
 801a5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5e8:	f7e5 fe4e 	bl	8000288 <__aeabi_dsub>
 801a5ec:	4652      	mov	r2, sl
 801a5ee:	465b      	mov	r3, fp
 801a5f0:	f7e6 f802 	bl	80005f8 <__aeabi_dmul>
 801a5f4:	a337      	add	r3, pc, #220	; (adr r3, 801a6d4 <__kernel_sin+0x16c>)
 801a5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5fa:	f7e5 fe47 	bl	800028c <__adddf3>
 801a5fe:	9b02      	ldr	r3, [sp, #8]
 801a600:	4606      	mov	r6, r0
 801a602:	460f      	mov	r7, r1
 801a604:	b9db      	cbnz	r3, 801a63e <__kernel_sin+0xd6>
 801a606:	4602      	mov	r2, r0
 801a608:	460b      	mov	r3, r1
 801a60a:	4650      	mov	r0, sl
 801a60c:	4659      	mov	r1, fp
 801a60e:	f7e5 fff3 	bl	80005f8 <__aeabi_dmul>
 801a612:	a325      	add	r3, pc, #148	; (adr r3, 801a6a8 <__kernel_sin+0x140>)
 801a614:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a618:	f7e5 fe36 	bl	8000288 <__aeabi_dsub>
 801a61c:	4642      	mov	r2, r8
 801a61e:	464b      	mov	r3, r9
 801a620:	f7e5 ffea 	bl	80005f8 <__aeabi_dmul>
 801a624:	4602      	mov	r2, r0
 801a626:	460b      	mov	r3, r1
 801a628:	4620      	mov	r0, r4
 801a62a:	4629      	mov	r1, r5
 801a62c:	f7e5 fe2e 	bl	800028c <__adddf3>
 801a630:	4604      	mov	r4, r0
 801a632:	460d      	mov	r5, r1
 801a634:	ec45 4b10 	vmov	d0, r4, r5
 801a638:	b005      	add	sp, #20
 801a63a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a63e:	2200      	movs	r2, #0
 801a640:	4b1b      	ldr	r3, [pc, #108]	; (801a6b0 <__kernel_sin+0x148>)
 801a642:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a646:	f7e5 ffd7 	bl	80005f8 <__aeabi_dmul>
 801a64a:	4632      	mov	r2, r6
 801a64c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a650:	463b      	mov	r3, r7
 801a652:	4640      	mov	r0, r8
 801a654:	4649      	mov	r1, r9
 801a656:	f7e5 ffcf 	bl	80005f8 <__aeabi_dmul>
 801a65a:	4602      	mov	r2, r0
 801a65c:	460b      	mov	r3, r1
 801a65e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a662:	f7e5 fe11 	bl	8000288 <__aeabi_dsub>
 801a666:	4652      	mov	r2, sl
 801a668:	465b      	mov	r3, fp
 801a66a:	f7e5 ffc5 	bl	80005f8 <__aeabi_dmul>
 801a66e:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a672:	f7e5 fe09 	bl	8000288 <__aeabi_dsub>
 801a676:	a30c      	add	r3, pc, #48	; (adr r3, 801a6a8 <__kernel_sin+0x140>)
 801a678:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a67c:	4606      	mov	r6, r0
 801a67e:	460f      	mov	r7, r1
 801a680:	4640      	mov	r0, r8
 801a682:	4649      	mov	r1, r9
 801a684:	f7e5 ffb8 	bl	80005f8 <__aeabi_dmul>
 801a688:	4602      	mov	r2, r0
 801a68a:	460b      	mov	r3, r1
 801a68c:	4630      	mov	r0, r6
 801a68e:	4639      	mov	r1, r7
 801a690:	f7e5 fdfc 	bl	800028c <__adddf3>
 801a694:	4602      	mov	r2, r0
 801a696:	460b      	mov	r3, r1
 801a698:	4620      	mov	r0, r4
 801a69a:	4629      	mov	r1, r5
 801a69c:	f7e5 fdf4 	bl	8000288 <__aeabi_dsub>
 801a6a0:	e7c6      	b.n	801a630 <__kernel_sin+0xc8>
 801a6a2:	bf00      	nop
 801a6a4:	f3af 8000 	nop.w
 801a6a8:	55555549 	.word	0x55555549
 801a6ac:	3fc55555 	.word	0x3fc55555
 801a6b0:	3fe00000 	.word	0x3fe00000
 801a6b4:	5acfd57c 	.word	0x5acfd57c
 801a6b8:	3de5d93a 	.word	0x3de5d93a
 801a6bc:	8a2b9ceb 	.word	0x8a2b9ceb
 801a6c0:	3e5ae5e6 	.word	0x3e5ae5e6
 801a6c4:	57b1fe7d 	.word	0x57b1fe7d
 801a6c8:	3ec71de3 	.word	0x3ec71de3
 801a6cc:	19c161d5 	.word	0x19c161d5
 801a6d0:	3f2a01a0 	.word	0x3f2a01a0
 801a6d4:	1110f8a6 	.word	0x1110f8a6
 801a6d8:	3f811111 	.word	0x3f811111
 801a6dc:	00000000 	.word	0x00000000

0801a6e0 <atan>:
 801a6e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6e4:	ec55 4b10 	vmov	r4, r5, d0
 801a6e8:	4bc3      	ldr	r3, [pc, #780]	; (801a9f8 <atan+0x318>)
 801a6ea:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801a6ee:	429e      	cmp	r6, r3
 801a6f0:	46ab      	mov	fp, r5
 801a6f2:	dd18      	ble.n	801a726 <atan+0x46>
 801a6f4:	4bc1      	ldr	r3, [pc, #772]	; (801a9fc <atan+0x31c>)
 801a6f6:	429e      	cmp	r6, r3
 801a6f8:	dc01      	bgt.n	801a6fe <atan+0x1e>
 801a6fa:	d109      	bne.n	801a710 <atan+0x30>
 801a6fc:	b144      	cbz	r4, 801a710 <atan+0x30>
 801a6fe:	4622      	mov	r2, r4
 801a700:	462b      	mov	r3, r5
 801a702:	4620      	mov	r0, r4
 801a704:	4629      	mov	r1, r5
 801a706:	f7e5 fdc1 	bl	800028c <__adddf3>
 801a70a:	4604      	mov	r4, r0
 801a70c:	460d      	mov	r5, r1
 801a70e:	e006      	b.n	801a71e <atan+0x3e>
 801a710:	f1bb 0f00 	cmp.w	fp, #0
 801a714:	f340 8131 	ble.w	801a97a <atan+0x29a>
 801a718:	a59b      	add	r5, pc, #620	; (adr r5, 801a988 <atan+0x2a8>)
 801a71a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801a71e:	ec45 4b10 	vmov	d0, r4, r5
 801a722:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a726:	4bb6      	ldr	r3, [pc, #728]	; (801aa00 <atan+0x320>)
 801a728:	429e      	cmp	r6, r3
 801a72a:	dc14      	bgt.n	801a756 <atan+0x76>
 801a72c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801a730:	429e      	cmp	r6, r3
 801a732:	dc0d      	bgt.n	801a750 <atan+0x70>
 801a734:	a396      	add	r3, pc, #600	; (adr r3, 801a990 <atan+0x2b0>)
 801a736:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a73a:	ee10 0a10 	vmov	r0, s0
 801a73e:	4629      	mov	r1, r5
 801a740:	f7e5 fda4 	bl	800028c <__adddf3>
 801a744:	2200      	movs	r2, #0
 801a746:	4baf      	ldr	r3, [pc, #700]	; (801aa04 <atan+0x324>)
 801a748:	f7e6 f9e6 	bl	8000b18 <__aeabi_dcmpgt>
 801a74c:	2800      	cmp	r0, #0
 801a74e:	d1e6      	bne.n	801a71e <atan+0x3e>
 801a750:	f04f 3aff 	mov.w	sl, #4294967295
 801a754:	e02b      	b.n	801a7ae <atan+0xce>
 801a756:	f000 f963 	bl	801aa20 <fabs>
 801a75a:	4bab      	ldr	r3, [pc, #684]	; (801aa08 <atan+0x328>)
 801a75c:	429e      	cmp	r6, r3
 801a75e:	ec55 4b10 	vmov	r4, r5, d0
 801a762:	f300 80bf 	bgt.w	801a8e4 <atan+0x204>
 801a766:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801a76a:	429e      	cmp	r6, r3
 801a76c:	f300 80a0 	bgt.w	801a8b0 <atan+0x1d0>
 801a770:	ee10 2a10 	vmov	r2, s0
 801a774:	ee10 0a10 	vmov	r0, s0
 801a778:	462b      	mov	r3, r5
 801a77a:	4629      	mov	r1, r5
 801a77c:	f7e5 fd86 	bl	800028c <__adddf3>
 801a780:	2200      	movs	r2, #0
 801a782:	4ba0      	ldr	r3, [pc, #640]	; (801aa04 <atan+0x324>)
 801a784:	f7e5 fd80 	bl	8000288 <__aeabi_dsub>
 801a788:	2200      	movs	r2, #0
 801a78a:	4606      	mov	r6, r0
 801a78c:	460f      	mov	r7, r1
 801a78e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801a792:	4620      	mov	r0, r4
 801a794:	4629      	mov	r1, r5
 801a796:	f7e5 fd79 	bl	800028c <__adddf3>
 801a79a:	4602      	mov	r2, r0
 801a79c:	460b      	mov	r3, r1
 801a79e:	4630      	mov	r0, r6
 801a7a0:	4639      	mov	r1, r7
 801a7a2:	f7e6 f853 	bl	800084c <__aeabi_ddiv>
 801a7a6:	f04f 0a00 	mov.w	sl, #0
 801a7aa:	4604      	mov	r4, r0
 801a7ac:	460d      	mov	r5, r1
 801a7ae:	4622      	mov	r2, r4
 801a7b0:	462b      	mov	r3, r5
 801a7b2:	4620      	mov	r0, r4
 801a7b4:	4629      	mov	r1, r5
 801a7b6:	f7e5 ff1f 	bl	80005f8 <__aeabi_dmul>
 801a7ba:	4602      	mov	r2, r0
 801a7bc:	460b      	mov	r3, r1
 801a7be:	4680      	mov	r8, r0
 801a7c0:	4689      	mov	r9, r1
 801a7c2:	f7e5 ff19 	bl	80005f8 <__aeabi_dmul>
 801a7c6:	a374      	add	r3, pc, #464	; (adr r3, 801a998 <atan+0x2b8>)
 801a7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7cc:	4606      	mov	r6, r0
 801a7ce:	460f      	mov	r7, r1
 801a7d0:	f7e5 ff12 	bl	80005f8 <__aeabi_dmul>
 801a7d4:	a372      	add	r3, pc, #456	; (adr r3, 801a9a0 <atan+0x2c0>)
 801a7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7da:	f7e5 fd57 	bl	800028c <__adddf3>
 801a7de:	4632      	mov	r2, r6
 801a7e0:	463b      	mov	r3, r7
 801a7e2:	f7e5 ff09 	bl	80005f8 <__aeabi_dmul>
 801a7e6:	a370      	add	r3, pc, #448	; (adr r3, 801a9a8 <atan+0x2c8>)
 801a7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7ec:	f7e5 fd4e 	bl	800028c <__adddf3>
 801a7f0:	4632      	mov	r2, r6
 801a7f2:	463b      	mov	r3, r7
 801a7f4:	f7e5 ff00 	bl	80005f8 <__aeabi_dmul>
 801a7f8:	a36d      	add	r3, pc, #436	; (adr r3, 801a9b0 <atan+0x2d0>)
 801a7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7fe:	f7e5 fd45 	bl	800028c <__adddf3>
 801a802:	4632      	mov	r2, r6
 801a804:	463b      	mov	r3, r7
 801a806:	f7e5 fef7 	bl	80005f8 <__aeabi_dmul>
 801a80a:	a36b      	add	r3, pc, #428	; (adr r3, 801a9b8 <atan+0x2d8>)
 801a80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a810:	f7e5 fd3c 	bl	800028c <__adddf3>
 801a814:	4632      	mov	r2, r6
 801a816:	463b      	mov	r3, r7
 801a818:	f7e5 feee 	bl	80005f8 <__aeabi_dmul>
 801a81c:	a368      	add	r3, pc, #416	; (adr r3, 801a9c0 <atan+0x2e0>)
 801a81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a822:	f7e5 fd33 	bl	800028c <__adddf3>
 801a826:	4642      	mov	r2, r8
 801a828:	464b      	mov	r3, r9
 801a82a:	f7e5 fee5 	bl	80005f8 <__aeabi_dmul>
 801a82e:	a366      	add	r3, pc, #408	; (adr r3, 801a9c8 <atan+0x2e8>)
 801a830:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a834:	4680      	mov	r8, r0
 801a836:	4689      	mov	r9, r1
 801a838:	4630      	mov	r0, r6
 801a83a:	4639      	mov	r1, r7
 801a83c:	f7e5 fedc 	bl	80005f8 <__aeabi_dmul>
 801a840:	a363      	add	r3, pc, #396	; (adr r3, 801a9d0 <atan+0x2f0>)
 801a842:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a846:	f7e5 fd1f 	bl	8000288 <__aeabi_dsub>
 801a84a:	4632      	mov	r2, r6
 801a84c:	463b      	mov	r3, r7
 801a84e:	f7e5 fed3 	bl	80005f8 <__aeabi_dmul>
 801a852:	a361      	add	r3, pc, #388	; (adr r3, 801a9d8 <atan+0x2f8>)
 801a854:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a858:	f7e5 fd16 	bl	8000288 <__aeabi_dsub>
 801a85c:	4632      	mov	r2, r6
 801a85e:	463b      	mov	r3, r7
 801a860:	f7e5 feca 	bl	80005f8 <__aeabi_dmul>
 801a864:	a35e      	add	r3, pc, #376	; (adr r3, 801a9e0 <atan+0x300>)
 801a866:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a86a:	f7e5 fd0d 	bl	8000288 <__aeabi_dsub>
 801a86e:	4632      	mov	r2, r6
 801a870:	463b      	mov	r3, r7
 801a872:	f7e5 fec1 	bl	80005f8 <__aeabi_dmul>
 801a876:	a35c      	add	r3, pc, #368	; (adr r3, 801a9e8 <atan+0x308>)
 801a878:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a87c:	f7e5 fd04 	bl	8000288 <__aeabi_dsub>
 801a880:	4632      	mov	r2, r6
 801a882:	463b      	mov	r3, r7
 801a884:	f7e5 feb8 	bl	80005f8 <__aeabi_dmul>
 801a888:	4602      	mov	r2, r0
 801a88a:	460b      	mov	r3, r1
 801a88c:	4640      	mov	r0, r8
 801a88e:	4649      	mov	r1, r9
 801a890:	f7e5 fcfc 	bl	800028c <__adddf3>
 801a894:	4622      	mov	r2, r4
 801a896:	462b      	mov	r3, r5
 801a898:	f7e5 feae 	bl	80005f8 <__aeabi_dmul>
 801a89c:	f1ba 3fff 	cmp.w	sl, #4294967295
 801a8a0:	4602      	mov	r2, r0
 801a8a2:	460b      	mov	r3, r1
 801a8a4:	d14b      	bne.n	801a93e <atan+0x25e>
 801a8a6:	4620      	mov	r0, r4
 801a8a8:	4629      	mov	r1, r5
 801a8aa:	f7e5 fced 	bl	8000288 <__aeabi_dsub>
 801a8ae:	e72c      	b.n	801a70a <atan+0x2a>
 801a8b0:	ee10 0a10 	vmov	r0, s0
 801a8b4:	2200      	movs	r2, #0
 801a8b6:	4b53      	ldr	r3, [pc, #332]	; (801aa04 <atan+0x324>)
 801a8b8:	4629      	mov	r1, r5
 801a8ba:	f7e5 fce5 	bl	8000288 <__aeabi_dsub>
 801a8be:	2200      	movs	r2, #0
 801a8c0:	4606      	mov	r6, r0
 801a8c2:	460f      	mov	r7, r1
 801a8c4:	4b4f      	ldr	r3, [pc, #316]	; (801aa04 <atan+0x324>)
 801a8c6:	4620      	mov	r0, r4
 801a8c8:	4629      	mov	r1, r5
 801a8ca:	f7e5 fcdf 	bl	800028c <__adddf3>
 801a8ce:	4602      	mov	r2, r0
 801a8d0:	460b      	mov	r3, r1
 801a8d2:	4630      	mov	r0, r6
 801a8d4:	4639      	mov	r1, r7
 801a8d6:	f7e5 ffb9 	bl	800084c <__aeabi_ddiv>
 801a8da:	f04f 0a01 	mov.w	sl, #1
 801a8de:	4604      	mov	r4, r0
 801a8e0:	460d      	mov	r5, r1
 801a8e2:	e764      	b.n	801a7ae <atan+0xce>
 801a8e4:	4b49      	ldr	r3, [pc, #292]	; (801aa0c <atan+0x32c>)
 801a8e6:	429e      	cmp	r6, r3
 801a8e8:	dc1d      	bgt.n	801a926 <atan+0x246>
 801a8ea:	ee10 0a10 	vmov	r0, s0
 801a8ee:	2200      	movs	r2, #0
 801a8f0:	4b47      	ldr	r3, [pc, #284]	; (801aa10 <atan+0x330>)
 801a8f2:	4629      	mov	r1, r5
 801a8f4:	f7e5 fcc8 	bl	8000288 <__aeabi_dsub>
 801a8f8:	2200      	movs	r2, #0
 801a8fa:	4606      	mov	r6, r0
 801a8fc:	460f      	mov	r7, r1
 801a8fe:	4b44      	ldr	r3, [pc, #272]	; (801aa10 <atan+0x330>)
 801a900:	4620      	mov	r0, r4
 801a902:	4629      	mov	r1, r5
 801a904:	f7e5 fe78 	bl	80005f8 <__aeabi_dmul>
 801a908:	2200      	movs	r2, #0
 801a90a:	4b3e      	ldr	r3, [pc, #248]	; (801aa04 <atan+0x324>)
 801a90c:	f7e5 fcbe 	bl	800028c <__adddf3>
 801a910:	4602      	mov	r2, r0
 801a912:	460b      	mov	r3, r1
 801a914:	4630      	mov	r0, r6
 801a916:	4639      	mov	r1, r7
 801a918:	f7e5 ff98 	bl	800084c <__aeabi_ddiv>
 801a91c:	f04f 0a02 	mov.w	sl, #2
 801a920:	4604      	mov	r4, r0
 801a922:	460d      	mov	r5, r1
 801a924:	e743      	b.n	801a7ae <atan+0xce>
 801a926:	462b      	mov	r3, r5
 801a928:	ee10 2a10 	vmov	r2, s0
 801a92c:	2000      	movs	r0, #0
 801a92e:	4939      	ldr	r1, [pc, #228]	; (801aa14 <atan+0x334>)
 801a930:	f7e5 ff8c 	bl	800084c <__aeabi_ddiv>
 801a934:	f04f 0a03 	mov.w	sl, #3
 801a938:	4604      	mov	r4, r0
 801a93a:	460d      	mov	r5, r1
 801a93c:	e737      	b.n	801a7ae <atan+0xce>
 801a93e:	4b36      	ldr	r3, [pc, #216]	; (801aa18 <atan+0x338>)
 801a940:	4e36      	ldr	r6, [pc, #216]	; (801aa1c <atan+0x33c>)
 801a942:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 801a946:	4456      	add	r6, sl
 801a948:	449a      	add	sl, r3
 801a94a:	e9da 2300 	ldrd	r2, r3, [sl]
 801a94e:	f7e5 fc9b 	bl	8000288 <__aeabi_dsub>
 801a952:	4622      	mov	r2, r4
 801a954:	462b      	mov	r3, r5
 801a956:	f7e5 fc97 	bl	8000288 <__aeabi_dsub>
 801a95a:	4602      	mov	r2, r0
 801a95c:	460b      	mov	r3, r1
 801a95e:	e9d6 0100 	ldrd	r0, r1, [r6]
 801a962:	f7e5 fc91 	bl	8000288 <__aeabi_dsub>
 801a966:	f1bb 0f00 	cmp.w	fp, #0
 801a96a:	4604      	mov	r4, r0
 801a96c:	460d      	mov	r5, r1
 801a96e:	f6bf aed6 	bge.w	801a71e <atan+0x3e>
 801a972:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a976:	461d      	mov	r5, r3
 801a978:	e6d1      	b.n	801a71e <atan+0x3e>
 801a97a:	a51d      	add	r5, pc, #116	; (adr r5, 801a9f0 <atan+0x310>)
 801a97c:	e9d5 4500 	ldrd	r4, r5, [r5]
 801a980:	e6cd      	b.n	801a71e <atan+0x3e>
 801a982:	bf00      	nop
 801a984:	f3af 8000 	nop.w
 801a988:	54442d18 	.word	0x54442d18
 801a98c:	3ff921fb 	.word	0x3ff921fb
 801a990:	8800759c 	.word	0x8800759c
 801a994:	7e37e43c 	.word	0x7e37e43c
 801a998:	e322da11 	.word	0xe322da11
 801a99c:	3f90ad3a 	.word	0x3f90ad3a
 801a9a0:	24760deb 	.word	0x24760deb
 801a9a4:	3fa97b4b 	.word	0x3fa97b4b
 801a9a8:	a0d03d51 	.word	0xa0d03d51
 801a9ac:	3fb10d66 	.word	0x3fb10d66
 801a9b0:	c54c206e 	.word	0xc54c206e
 801a9b4:	3fb745cd 	.word	0x3fb745cd
 801a9b8:	920083ff 	.word	0x920083ff
 801a9bc:	3fc24924 	.word	0x3fc24924
 801a9c0:	5555550d 	.word	0x5555550d
 801a9c4:	3fd55555 	.word	0x3fd55555
 801a9c8:	2c6a6c2f 	.word	0x2c6a6c2f
 801a9cc:	bfa2b444 	.word	0xbfa2b444
 801a9d0:	52defd9a 	.word	0x52defd9a
 801a9d4:	3fadde2d 	.word	0x3fadde2d
 801a9d8:	af749a6d 	.word	0xaf749a6d
 801a9dc:	3fb3b0f2 	.word	0x3fb3b0f2
 801a9e0:	fe231671 	.word	0xfe231671
 801a9e4:	3fbc71c6 	.word	0x3fbc71c6
 801a9e8:	9998ebc4 	.word	0x9998ebc4
 801a9ec:	3fc99999 	.word	0x3fc99999
 801a9f0:	54442d18 	.word	0x54442d18
 801a9f4:	bff921fb 	.word	0xbff921fb
 801a9f8:	440fffff 	.word	0x440fffff
 801a9fc:	7ff00000 	.word	0x7ff00000
 801aa00:	3fdbffff 	.word	0x3fdbffff
 801aa04:	3ff00000 	.word	0x3ff00000
 801aa08:	3ff2ffff 	.word	0x3ff2ffff
 801aa0c:	40037fff 	.word	0x40037fff
 801aa10:	3ff80000 	.word	0x3ff80000
 801aa14:	bff00000 	.word	0xbff00000
 801aa18:	0801b690 	.word	0x0801b690
 801aa1c:	0801b670 	.word	0x0801b670

0801aa20 <fabs>:
 801aa20:	ec51 0b10 	vmov	r0, r1, d0
 801aa24:	ee10 2a10 	vmov	r2, s0
 801aa28:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801aa2c:	ec43 2b10 	vmov	d0, r2, r3
 801aa30:	4770      	bx	lr
 801aa32:	0000      	movs	r0, r0
 801aa34:	0000      	movs	r0, r0
	...

0801aa38 <floor>:
 801aa38:	ec51 0b10 	vmov	r0, r1, d0
 801aa3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aa40:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801aa44:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801aa48:	2e13      	cmp	r6, #19
 801aa4a:	460c      	mov	r4, r1
 801aa4c:	ee10 5a10 	vmov	r5, s0
 801aa50:	4680      	mov	r8, r0
 801aa52:	dc34      	bgt.n	801aabe <floor+0x86>
 801aa54:	2e00      	cmp	r6, #0
 801aa56:	da16      	bge.n	801aa86 <floor+0x4e>
 801aa58:	a335      	add	r3, pc, #212	; (adr r3, 801ab30 <floor+0xf8>)
 801aa5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa5e:	f7e5 fc15 	bl	800028c <__adddf3>
 801aa62:	2200      	movs	r2, #0
 801aa64:	2300      	movs	r3, #0
 801aa66:	f7e6 f857 	bl	8000b18 <__aeabi_dcmpgt>
 801aa6a:	b148      	cbz	r0, 801aa80 <floor+0x48>
 801aa6c:	2c00      	cmp	r4, #0
 801aa6e:	da59      	bge.n	801ab24 <floor+0xec>
 801aa70:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801aa74:	4a30      	ldr	r2, [pc, #192]	; (801ab38 <floor+0x100>)
 801aa76:	432b      	orrs	r3, r5
 801aa78:	2500      	movs	r5, #0
 801aa7a:	42ab      	cmp	r3, r5
 801aa7c:	bf18      	it	ne
 801aa7e:	4614      	movne	r4, r2
 801aa80:	4621      	mov	r1, r4
 801aa82:	4628      	mov	r0, r5
 801aa84:	e025      	b.n	801aad2 <floor+0x9a>
 801aa86:	4f2d      	ldr	r7, [pc, #180]	; (801ab3c <floor+0x104>)
 801aa88:	4137      	asrs	r7, r6
 801aa8a:	ea01 0307 	and.w	r3, r1, r7
 801aa8e:	4303      	orrs	r3, r0
 801aa90:	d01f      	beq.n	801aad2 <floor+0x9a>
 801aa92:	a327      	add	r3, pc, #156	; (adr r3, 801ab30 <floor+0xf8>)
 801aa94:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa98:	f7e5 fbf8 	bl	800028c <__adddf3>
 801aa9c:	2200      	movs	r2, #0
 801aa9e:	2300      	movs	r3, #0
 801aaa0:	f7e6 f83a 	bl	8000b18 <__aeabi_dcmpgt>
 801aaa4:	2800      	cmp	r0, #0
 801aaa6:	d0eb      	beq.n	801aa80 <floor+0x48>
 801aaa8:	2c00      	cmp	r4, #0
 801aaaa:	bfbe      	ittt	lt
 801aaac:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801aab0:	fa43 f606 	asrlt.w	r6, r3, r6
 801aab4:	19a4      	addlt	r4, r4, r6
 801aab6:	ea24 0407 	bic.w	r4, r4, r7
 801aaba:	2500      	movs	r5, #0
 801aabc:	e7e0      	b.n	801aa80 <floor+0x48>
 801aabe:	2e33      	cmp	r6, #51	; 0x33
 801aac0:	dd0b      	ble.n	801aada <floor+0xa2>
 801aac2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801aac6:	d104      	bne.n	801aad2 <floor+0x9a>
 801aac8:	ee10 2a10 	vmov	r2, s0
 801aacc:	460b      	mov	r3, r1
 801aace:	f7e5 fbdd 	bl	800028c <__adddf3>
 801aad2:	ec41 0b10 	vmov	d0, r0, r1
 801aad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aada:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801aade:	f04f 33ff 	mov.w	r3, #4294967295
 801aae2:	fa23 f707 	lsr.w	r7, r3, r7
 801aae6:	4207      	tst	r7, r0
 801aae8:	d0f3      	beq.n	801aad2 <floor+0x9a>
 801aaea:	a311      	add	r3, pc, #68	; (adr r3, 801ab30 <floor+0xf8>)
 801aaec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aaf0:	f7e5 fbcc 	bl	800028c <__adddf3>
 801aaf4:	2200      	movs	r2, #0
 801aaf6:	2300      	movs	r3, #0
 801aaf8:	f7e6 f80e 	bl	8000b18 <__aeabi_dcmpgt>
 801aafc:	2800      	cmp	r0, #0
 801aafe:	d0bf      	beq.n	801aa80 <floor+0x48>
 801ab00:	2c00      	cmp	r4, #0
 801ab02:	da02      	bge.n	801ab0a <floor+0xd2>
 801ab04:	2e14      	cmp	r6, #20
 801ab06:	d103      	bne.n	801ab10 <floor+0xd8>
 801ab08:	3401      	adds	r4, #1
 801ab0a:	ea25 0507 	bic.w	r5, r5, r7
 801ab0e:	e7b7      	b.n	801aa80 <floor+0x48>
 801ab10:	2301      	movs	r3, #1
 801ab12:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801ab16:	fa03 f606 	lsl.w	r6, r3, r6
 801ab1a:	4435      	add	r5, r6
 801ab1c:	4545      	cmp	r5, r8
 801ab1e:	bf38      	it	cc
 801ab20:	18e4      	addcc	r4, r4, r3
 801ab22:	e7f2      	b.n	801ab0a <floor+0xd2>
 801ab24:	2500      	movs	r5, #0
 801ab26:	462c      	mov	r4, r5
 801ab28:	e7aa      	b.n	801aa80 <floor+0x48>
 801ab2a:	bf00      	nop
 801ab2c:	f3af 8000 	nop.w
 801ab30:	8800759c 	.word	0x8800759c
 801ab34:	7e37e43c 	.word	0x7e37e43c
 801ab38:	bff00000 	.word	0xbff00000
 801ab3c:	000fffff 	.word	0x000fffff

0801ab40 <matherr>:
 801ab40:	2000      	movs	r0, #0
 801ab42:	4770      	bx	lr
 801ab44:	0000      	movs	r0, r0
	...

0801ab48 <scalbn>:
 801ab48:	b570      	push	{r4, r5, r6, lr}
 801ab4a:	ec55 4b10 	vmov	r4, r5, d0
 801ab4e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801ab52:	4606      	mov	r6, r0
 801ab54:	462b      	mov	r3, r5
 801ab56:	b9aa      	cbnz	r2, 801ab84 <scalbn+0x3c>
 801ab58:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801ab5c:	4323      	orrs	r3, r4
 801ab5e:	d03b      	beq.n	801abd8 <scalbn+0x90>
 801ab60:	4b31      	ldr	r3, [pc, #196]	; (801ac28 <scalbn+0xe0>)
 801ab62:	4629      	mov	r1, r5
 801ab64:	2200      	movs	r2, #0
 801ab66:	ee10 0a10 	vmov	r0, s0
 801ab6a:	f7e5 fd45 	bl	80005f8 <__aeabi_dmul>
 801ab6e:	4b2f      	ldr	r3, [pc, #188]	; (801ac2c <scalbn+0xe4>)
 801ab70:	429e      	cmp	r6, r3
 801ab72:	4604      	mov	r4, r0
 801ab74:	460d      	mov	r5, r1
 801ab76:	da12      	bge.n	801ab9e <scalbn+0x56>
 801ab78:	a327      	add	r3, pc, #156	; (adr r3, 801ac18 <scalbn+0xd0>)
 801ab7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab7e:	f7e5 fd3b 	bl	80005f8 <__aeabi_dmul>
 801ab82:	e009      	b.n	801ab98 <scalbn+0x50>
 801ab84:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801ab88:	428a      	cmp	r2, r1
 801ab8a:	d10c      	bne.n	801aba6 <scalbn+0x5e>
 801ab8c:	ee10 2a10 	vmov	r2, s0
 801ab90:	4620      	mov	r0, r4
 801ab92:	4629      	mov	r1, r5
 801ab94:	f7e5 fb7a 	bl	800028c <__adddf3>
 801ab98:	4604      	mov	r4, r0
 801ab9a:	460d      	mov	r5, r1
 801ab9c:	e01c      	b.n	801abd8 <scalbn+0x90>
 801ab9e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801aba2:	460b      	mov	r3, r1
 801aba4:	3a36      	subs	r2, #54	; 0x36
 801aba6:	4432      	add	r2, r6
 801aba8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801abac:	428a      	cmp	r2, r1
 801abae:	dd0b      	ble.n	801abc8 <scalbn+0x80>
 801abb0:	ec45 4b11 	vmov	d1, r4, r5
 801abb4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 801ac20 <scalbn+0xd8>
 801abb8:	f000 f83c 	bl	801ac34 <copysign>
 801abbc:	a318      	add	r3, pc, #96	; (adr r3, 801ac20 <scalbn+0xd8>)
 801abbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abc2:	ec51 0b10 	vmov	r0, r1, d0
 801abc6:	e7da      	b.n	801ab7e <scalbn+0x36>
 801abc8:	2a00      	cmp	r2, #0
 801abca:	dd08      	ble.n	801abde <scalbn+0x96>
 801abcc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801abd0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801abd4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801abd8:	ec45 4b10 	vmov	d0, r4, r5
 801abdc:	bd70      	pop	{r4, r5, r6, pc}
 801abde:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801abe2:	da0d      	bge.n	801ac00 <scalbn+0xb8>
 801abe4:	f24c 3350 	movw	r3, #50000	; 0xc350
 801abe8:	429e      	cmp	r6, r3
 801abea:	ec45 4b11 	vmov	d1, r4, r5
 801abee:	dce1      	bgt.n	801abb4 <scalbn+0x6c>
 801abf0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 801ac18 <scalbn+0xd0>
 801abf4:	f000 f81e 	bl	801ac34 <copysign>
 801abf8:	a307      	add	r3, pc, #28	; (adr r3, 801ac18 <scalbn+0xd0>)
 801abfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abfe:	e7e0      	b.n	801abc2 <scalbn+0x7a>
 801ac00:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801ac04:	3236      	adds	r2, #54	; 0x36
 801ac06:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801ac0a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801ac0e:	4620      	mov	r0, r4
 801ac10:	4629      	mov	r1, r5
 801ac12:	2200      	movs	r2, #0
 801ac14:	4b06      	ldr	r3, [pc, #24]	; (801ac30 <scalbn+0xe8>)
 801ac16:	e7b2      	b.n	801ab7e <scalbn+0x36>
 801ac18:	c2f8f359 	.word	0xc2f8f359
 801ac1c:	01a56e1f 	.word	0x01a56e1f
 801ac20:	8800759c 	.word	0x8800759c
 801ac24:	7e37e43c 	.word	0x7e37e43c
 801ac28:	43500000 	.word	0x43500000
 801ac2c:	ffff3cb0 	.word	0xffff3cb0
 801ac30:	3c900000 	.word	0x3c900000

0801ac34 <copysign>:
 801ac34:	ec51 0b10 	vmov	r0, r1, d0
 801ac38:	ee11 0a90 	vmov	r0, s3
 801ac3c:	ee10 2a10 	vmov	r2, s0
 801ac40:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801ac44:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801ac48:	ea41 0300 	orr.w	r3, r1, r0
 801ac4c:	ec43 2b10 	vmov	d0, r2, r3
 801ac50:	4770      	bx	lr
	...

0801ac54 <_init>:
 801ac54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac56:	bf00      	nop
 801ac58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ac5a:	bc08      	pop	{r3}
 801ac5c:	469e      	mov	lr, r3
 801ac5e:	4770      	bx	lr

0801ac60 <_fini>:
 801ac60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac62:	bf00      	nop
 801ac64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ac66:	bc08      	pop	{r3}
 801ac68:	469e      	mov	lr, r3
 801ac6a:	4770      	bx	lr
