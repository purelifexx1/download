
DMA_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001aa1c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a40  0801abb0  0801abb0  0002abb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b5f0  0801b5f0  00030fe0  2**0
                  CONTENTS
  4 .ARM          00000008  0801b5f0  0801b5f0  0002b5f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b5f8  0801b5f8  00030fe0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b5f8  0801b5f8  0002b5f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b5fc  0801b5fc  0002b5fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000fe0  20000000  0801b600  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005e54  20000fe0  0801c5e0  00030fe0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20006e34  0801c5e0  00036e34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030fe0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e0ee  00000000  00000000  00031010  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000620a  00000000  00000000  0005f0fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001d40  00000000  00000000  00065308  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ae8  00000000  00000000  00067048  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000299c4  00000000  00000000  00068b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001f17d  00000000  00000000  000924f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dcaf5  00000000  00000000  000b1671  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018e166  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008974  00000000  00000000  0018e1e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000fe0 	.word	0x20000fe0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801ab94 	.word	0x0801ab94

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000fe4 	.word	0x20000fe4
 80001cc:	0801ab94 	.word	0x0801ab94

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <commandRead>:
												"STOP",
												"ERRO",
												"OKAY"};


Robot_CommandTypedef 	commandRead	(uint8_t *message, int32_t length, int32_t *id_command, DUTY_Command_TypeDef *duty_cmd) {
 8000f88:	b590      	push	{r4, r7, lr}
 8000f8a:	b08b      	sub	sp, #44	; 0x2c
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
 8000f94:	603b      	str	r3, [r7, #0]
	Transfer_Protocol protocol_id = message[0];
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    Robot_CommandTypedef command_id = message[1];
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	785b      	ldrb	r3, [r3, #1]
 8000fa2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    duty_cmd->id_command = command_id;
 8000fa6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	609a      	str	r2, [r3, #8]
	int32_t temp_pointer = 2;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	623b      	str	r3, [r7, #32]
    switch(protocol_id) 
 8000fb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	f000 815a 	beq.w	8001270 <commandRead+0x2e8>
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	f040 8155 	bne.w	800126c <commandRead+0x2e4>
        break;

        // command control from pc
        case COMMAND_TRANSMISION:
        {
            switch(command_id)
 8000fc2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000fc6:	2b0a      	cmp	r3, #10
 8000fc8:	f200 814e 	bhi.w	8001268 <commandRead+0x2e0>
 8000fcc:	a201      	add	r2, pc, #4	; (adr r2, 8000fd4 <commandRead+0x4c>)
 8000fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fd2:	bf00      	nop
 8000fd4:	08001001 	.word	0x08001001
 8000fd8:	08001017 	.word	0x08001017
 8000fdc:	0800102d 	.word	0x0800102d
 8000fe0:	080010bf 	.word	0x080010bf
 8000fe4:	080011d1 	.word	0x080011d1
 8000fe8:	080011d5 	.word	0x080011d5
 8000fec:	080011d9 	.word	0x080011d9
 8000ff0:	080011dd 	.word	0x080011dd
 8000ff4:	08001269 	.word	0x08001269
 8000ff8:	080011fd 	.word	0x080011fd
 8000ffc:	08001201 	.word	0x08001201
            {
                // Stop now
                case CMD_STOPNOW:
                {
                    duty_cmd->robot_mode = SCARA_MODE_STOP;
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	2200      	movs	r2, #0
 8001004:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	2201      	movs	r2, #1
 800100a:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	2200      	movs	r2, #0
 8001010:	701a      	strb	r2, [r3, #0]
                    return CMD_STOPNOW;
 8001012:	2300      	movs	r3, #0
 8001014:	e12d      	b.n	8001272 <commandRead+0x2ea>
                break;

                // Scan limit
                case CMD_SCAN_LIMIT:
                {
                    duty_cmd->robot_mode = SCARA_MODE_SCAN;
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	2201      	movs	r2, #1
 800101a:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	2201      	movs	r2, #1
 8001020:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	2200      	movs	r2, #0
 8001026:	701a      	strb	r2, [r3, #0]
                    return CMD_SCAN_LIMIT;
 8001028:	2301      	movs	r3, #1
 800102a:	e122      	b.n	8001272 <commandRead+0x2ea>
                break;

                // Move home
                case CMD_MOVE_HOME:
                {
                    if (length == 18){ // 2 double number + 2 define byte
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	2b12      	cmp	r3, #18
 8001030:	d143      	bne.n	80010ba <commandRead+0x132>
                        memcpy(&duty_cmd->v_factor, &message[temp_pointer+=8], 8);
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	f503 70cc 	add.w	r0, r3, #408	; 0x198
 8001038:	6a3b      	ldr	r3, [r7, #32]
 800103a:	3308      	adds	r3, #8
 800103c:	623b      	str	r3, [r7, #32]
 800103e:	6a3b      	ldr	r3, [r7, #32]
 8001040:	68fa      	ldr	r2, [r7, #12]
 8001042:	4413      	add	r3, r2
 8001044:	2208      	movs	r2, #8
 8001046:	4619      	mov	r1, r3
 8001048:	f014 fb32 	bl	80156b0 <memcpy>
						memcpy(&duty_cmd->a_factor, &message[temp_pointer], 8); 
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	f503 70d0 	add.w	r0, r3, #416	; 0x1a0
 8001052:	6a3b      	ldr	r3, [r7, #32]
 8001054:	68fa      	ldr	r2, [r7, #12]
 8001056:	4413      	add	r3, r2
 8001058:	2208      	movs	r2, #8
 800105a:	4619      	mov	r1, r3
 800105c:	f014 fb28 	bl	80156b0 <memcpy>
                    }else{
                        return CMD_ERROR;
                    }
                    duty_cmd->target_point.x = 250;
 8001060:	683a      	ldr	r2, [r7, #0]
 8001062:	f04f 0300 	mov.w	r3, #0
 8001066:	4c85      	ldr	r4, [pc, #532]	; (800127c <commandRead+0x2f4>)
 8001068:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
                    duty_cmd->target_point.y = -200;
 800106c:	683a      	ldr	r2, [r7, #0]
 800106e:	f04f 0300 	mov.w	r3, #0
 8001072:	4c83      	ldr	r4, [pc, #524]	; (8001280 <commandRead+0x2f8>)
 8001074:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
                    duty_cmd->target_point.z = 120;
 8001078:	683a      	ldr	r2, [r7, #0]
 800107a:	f04f 0300 	mov.w	r3, #0
 800107e:	4c81      	ldr	r4, [pc, #516]	; (8001284 <commandRead+0x2fc>)
 8001080:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
                    duty_cmd->target_point.roll = 0;
 8001084:	683a      	ldr	r2, [r7, #0]
 8001086:	f04f 0300 	mov.w	r3, #0
 800108a:	f04f 0400 	mov.w	r4, #0
 800108e:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

                    duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	2200      	movs	r2, #0
 8001096:	745a      	strb	r2, [r3, #17]
                    duty_cmd->space_type = DUTY_SPACE_JOINT;
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	2201      	movs	r2, #1
 800109c:	735a      	strb	r2, [r3, #13]
                    duty_cmd->joint_type = DUTY_JOINT_4DOF;
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	2201      	movs	r2, #1
 80010a2:	73da      	strb	r2, [r3, #15]
                    duty_cmd->robot_mode = SCARA_MODE_DUTY;
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	2202      	movs	r2, #2
 80010a8:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	2201      	movs	r2, #1
 80010ae:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]
                    return CMD_MOVE_HOME;
 80010b6:	2302      	movs	r3, #2
 80010b8:	e0db      	b.n	8001272 <commandRead+0x2ea>
                        return CMD_ERROR;
 80010ba:	2315      	movs	r3, #21
 80010bc:	e0d9      	b.n	8001272 <commandRead+0x2ea>
                break;

                // Move line
                case CMD_MOVE_LINE:
                {
                    if (length == 51){ // 6 double number + 1 byte number + 2 define byte
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	2b33      	cmp	r3, #51	; 0x33
 80010c2:	f040 8083 	bne.w	80011cc <commandRead+0x244>
						scaraSetScanFlag();
 80010c6:	f007 fe6b 	bl	8008da0 <scaraSetScanFlag>
						uint8_t mode_init;
						temp_pointer = -6;
 80010ca:	f06f 0305 	mvn.w	r3, #5
 80010ce:	623b      	str	r3, [r7, #32]
						memcpy(&duty_cmd->target_point.x, &message[temp_pointer+=8], 8);
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	f103 0070 	add.w	r0, r3, #112	; 0x70
 80010d6:	6a3b      	ldr	r3, [r7, #32]
 80010d8:	3308      	adds	r3, #8
 80010da:	623b      	str	r3, [r7, #32]
 80010dc:	6a3b      	ldr	r3, [r7, #32]
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	4413      	add	r3, r2
 80010e2:	2208      	movs	r2, #8
 80010e4:	4619      	mov	r1, r3
 80010e6:	f014 fae3 	bl	80156b0 <memcpy>
						memcpy(&duty_cmd->target_point.y, &message[temp_pointer+=8], 8);
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	f103 0078 	add.w	r0, r3, #120	; 0x78
 80010f0:	6a3b      	ldr	r3, [r7, #32]
 80010f2:	3308      	adds	r3, #8
 80010f4:	623b      	str	r3, [r7, #32]
 80010f6:	6a3b      	ldr	r3, [r7, #32]
 80010f8:	68fa      	ldr	r2, [r7, #12]
 80010fa:	4413      	add	r3, r2
 80010fc:	2208      	movs	r2, #8
 80010fe:	4619      	mov	r1, r3
 8001100:	f014 fad6 	bl	80156b0 <memcpy>
						memcpy(&duty_cmd->target_point.z, &message[temp_pointer+=8], 8);
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800110a:	6a3b      	ldr	r3, [r7, #32]
 800110c:	3308      	adds	r3, #8
 800110e:	623b      	str	r3, [r7, #32]
 8001110:	6a3b      	ldr	r3, [r7, #32]
 8001112:	68fa      	ldr	r2, [r7, #12]
 8001114:	4413      	add	r3, r2
 8001116:	2208      	movs	r2, #8
 8001118:	4619      	mov	r1, r3
 800111a:	f014 fac9 	bl	80156b0 <memcpy>
						memcpy(&duty_cmd->target_point.roll, &message[temp_pointer+=8], 8);
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	f103 0088 	add.w	r0, r3, #136	; 0x88
 8001124:	6a3b      	ldr	r3, [r7, #32]
 8001126:	3308      	adds	r3, #8
 8001128:	623b      	str	r3, [r7, #32]
 800112a:	6a3b      	ldr	r3, [r7, #32]
 800112c:	68fa      	ldr	r2, [r7, #12]
 800112e:	4413      	add	r3, r2
 8001130:	2208      	movs	r2, #8
 8001132:	4619      	mov	r1, r3
 8001134:	f014 fabc 	bl	80156b0 <memcpy>
						memcpy(&duty_cmd->v_factor, &message[temp_pointer+=8], 8);
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	f503 70cc 	add.w	r0, r3, #408	; 0x198
 800113e:	6a3b      	ldr	r3, [r7, #32]
 8001140:	3308      	adds	r3, #8
 8001142:	623b      	str	r3, [r7, #32]
 8001144:	6a3b      	ldr	r3, [r7, #32]
 8001146:	68fa      	ldr	r2, [r7, #12]
 8001148:	4413      	add	r3, r2
 800114a:	2208      	movs	r2, #8
 800114c:	4619      	mov	r1, r3
 800114e:	f014 faaf 	bl	80156b0 <memcpy>
						mode_init = message[temp_pointer+=1];
 8001152:	6a3b      	ldr	r3, [r7, #32]
 8001154:	3301      	adds	r3, #1
 8001156:	623b      	str	r3, [r7, #32]
 8001158:	6a3b      	ldr	r3, [r7, #32]
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	4413      	add	r3, r2
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	75fb      	strb	r3, [r7, #23]

						if(mode_init == DUTY_MODE_INIT_QVA){
 8001162:	7dfb      	ldrb	r3, [r7, #23]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d10d      	bne.n	8001184 <commandRead+0x1fc>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	2200      	movs	r2, #0
 800116c:	745a      	strb	r2, [r3, #17]
							memcpy(&duty_cmd->a_factor, &message[temp_pointer], 8);
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	f503 70d0 	add.w	r0, r3, #416	; 0x1a0
 8001174:	6a3b      	ldr	r3, [r7, #32]
 8001176:	68fa      	ldr	r2, [r7, #12]
 8001178:	4413      	add	r3, r2
 800117a:	2208      	movs	r2, #8
 800117c:	4619      	mov	r1, r3
 800117e:	f014 fa97 	bl	80156b0 <memcpy>
 8001182:	e012      	b.n	80011aa <commandRead+0x222>
						}else if(mode_init == DUTY_MODE_INIT_QVT){
 8001184:	7dfb      	ldrb	r3, [r7, #23]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d10d      	bne.n	80011a6 <commandRead+0x21e>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	2201      	movs	r2, #1
 800118e:	745a      	strb	r2, [r3, #17]
							memcpy(&duty_cmd->time_total, &message[temp_pointer], 8);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	f103 0020 	add.w	r0, r3, #32
 8001196:	6a3b      	ldr	r3, [r7, #32]
 8001198:	68fa      	ldr	r2, [r7, #12]
 800119a:	4413      	add	r3, r2
 800119c:	2208      	movs	r2, #8
 800119e:	4619      	mov	r1, r3
 80011a0:	f014 fa86 	bl	80156b0 <memcpy>
 80011a4:	e001      	b.n	80011aa <commandRead+0x222>
						}else{
							return CMD_ERROR;
 80011a6:	2315      	movs	r3, #21
 80011a8:	e063      	b.n	8001272 <commandRead+0x2ea>
						}
						duty_cmd->path_type = DUTY_PATH_LINE;
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	2200      	movs	r2, #0
 80011ae:	739a      	strb	r2, [r3, #14]
						duty_cmd->space_type = DUTY_SPACE_TASK;
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	2200      	movs	r2, #0
 80011b4:	735a      	strb	r2, [r3, #13]
					}else{
						return CMD_ERROR;
					}
					duty_cmd->robot_mode = SCARA_MODE_DUTY;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	2202      	movs	r2, #2
 80011ba:	709a      	strb	r2, [r3, #2]
					duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	2201      	movs	r2, #1
 80011c0:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	2200      	movs	r2, #0
 80011c6:	701a      	strb	r2, [r3, #0]
					return CMD_MOVE_LINE;
 80011c8:	2303      	movs	r3, #3
 80011ca:	e052      	b.n	8001272 <commandRead+0x2ea>
						return CMD_ERROR;
 80011cc:	2315      	movs	r3, #21
 80011ce:	e050      	b.n	8001272 <commandRead+0x2ea>
				break;

				// Move circle
				case CMD_MOVE_CIRCLE:
				{
					return CMD_MOVE_CIRCLE;
 80011d0:	2304      	movs	r3, #4
 80011d2:	e04e      	b.n	8001272 <commandRead+0x2ea>
				break;

				// Move joint
				case CMD_MOVE_JOINT:
				{
					return CMD_MOVE_JOINT;
 80011d4:	2305      	movs	r3, #5
 80011d6:	e04c      	b.n	8001272 <commandRead+0x2ea>
				break;

				// Rotate Single
				case CMD_ROTATE_SINGLE:
				{
					return CMD_ROTATE_SINGLE;
 80011d8:	2306      	movs	r3, #6
 80011da:	e04a      	b.n	8001272 <commandRead+0x2ea>
				break;

				// Set output
				case CMD_OUTPUT:
				{
					if(length == 3){ // 1 byte output value + 2 byte define
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	2b03      	cmp	r3, #3
 80011e0:	d10a      	bne.n	80011f8 <commandRead+0x270>
						int temp_pointer = 2;
 80011e2:	2302      	movs	r3, #2
 80011e4:	61bb      	str	r3, [r7, #24]
						duty_cmd->sub_para_int = message[temp_pointer];
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	68fa      	ldr	r2, [r7, #12]
 80011ea:	4413      	add	r3, r2
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	461a      	mov	r2, r3
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	615a      	str	r2, [r3, #20]
						return CMD_OUTPUT;
 80011f4:	2307      	movs	r3, #7
 80011f6:	e03c      	b.n	8001272 <commandRead+0x2ea>
					}else{
						return CMD_ERROR;
 80011f8:	2315      	movs	r3, #21
 80011fa:	e03a      	b.n	8001272 <commandRead+0x2ea>
				break;

				// Read position
				case CMD_READ_POSITION:
				{
					return CMD_READ_POSITION;
 80011fc:	2309      	movs	r3, #9
 80011fe:	e038      	b.n	8001272 <commandRead+0x2ea>
				break;			

				// Setting
				case CMD_SETTING:
				{
					if (length == 4){ // 2 byte configure + 2 byte define
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	2b04      	cmp	r3, #4
 8001204:	d12e      	bne.n	8001264 <commandRead+0x2dc>
						uint8_t mode_traject;
						uint8_t mode_coordinate;
						mode_coordinate = message[temp_pointer++];
 8001206:	6a3b      	ldr	r3, [r7, #32]
 8001208:	1c5a      	adds	r2, r3, #1
 800120a:	623a      	str	r2, [r7, #32]
 800120c:	461a      	mov	r2, r3
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	4413      	add	r3, r2
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	77fb      	strb	r3, [r7, #31]
						mode_traject = message[temp_pointer];
 8001216:	6a3b      	ldr	r3, [r7, #32]
 8001218:	68fa      	ldr	r2, [r7, #12]
 800121a:	4413      	add	r3, r2
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	77bb      	strb	r3, [r7, #30]

						if (mode_coordinate == DUTY_COORDINATES_ABS) {
 8001220:	7ffb      	ldrb	r3, [r7, #31]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d103      	bne.n	800122e <commandRead+0x2a6>
							duty_cmd->coordinate_type = DUTY_COORDINATES_ABS;
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	2200      	movs	r2, #0
 800122a:	731a      	strb	r2, [r3, #12]
 800122c:	e008      	b.n	8001240 <commandRead+0x2b8>
						} else if (mode_coordinate == DUTY_COORDINATES_REL) {
 800122e:	7ffb      	ldrb	r3, [r7, #31]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d103      	bne.n	800123c <commandRead+0x2b4>
							duty_cmd->coordinate_type = DUTY_COORDINATES_REL;
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	2201      	movs	r2, #1
 8001238:	731a      	strb	r2, [r3, #12]
 800123a:	e001      	b.n	8001240 <commandRead+0x2b8>
						} else {
							return CMD_ERROR;
 800123c:	2315      	movs	r3, #21
 800123e:	e018      	b.n	8001272 <commandRead+0x2ea>
						}

						if (mode_traject == DUTY_TRAJECTORY_LSPB) {
 8001240:	7fbb      	ldrb	r3, [r7, #30]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d103      	bne.n	800124e <commandRead+0x2c6>
							duty_cmd->trajec_type = DUTY_TRAJECTORY_LSPB;
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	2200      	movs	r2, #0
 800124a:	741a      	strb	r2, [r3, #16]
 800124c:	e008      	b.n	8001260 <commandRead+0x2d8>
						} else if (mode_traject == DUTY_TRAJECTORY_SCURVE) {
 800124e:	7fbb      	ldrb	r3, [r7, #30]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d103      	bne.n	800125c <commandRead+0x2d4>
							duty_cmd->trajec_type = DUTY_TRAJECTORY_SCURVE;
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	2201      	movs	r2, #1
 8001258:	741a      	strb	r2, [r3, #16]
 800125a:	e001      	b.n	8001260 <commandRead+0x2d8>
						} else {
							return CMD_ERROR;
 800125c:	2315      	movs	r3, #21
 800125e:	e008      	b.n	8001272 <commandRead+0x2ea>
						}
						return CMD_SETTING;
 8001260:	230a      	movs	r3, #10
 8001262:	e006      	b.n	8001272 <commandRead+0x2ea>
					}else{
						return CMD_ERROR;
 8001264:	2315      	movs	r3, #21
 8001266:	e004      	b.n	8001272 <commandRead+0x2ea>
				break;
				
				//Unknow command id
				default:
				{
					return CMD_ERROR;
 8001268:	2315      	movs	r3, #21
 800126a:	e002      	b.n	8001272 <commandRead+0x2ea>
        break;

        //unknow protocol id
        default:
        {
            return PROTOCOL_ERROR;
 800126c:	2316      	movs	r3, #22
 800126e:	e000      	b.n	8001272 <commandRead+0x2ea>
        break;
 8001270:	bf00      	nop
        }
    }
}
 8001272:	4618      	mov	r0, r3
 8001274:	372c      	adds	r7, #44	; 0x2c
 8001276:	46bd      	mov	sp, r7
 8001278:	bd90      	pop	{r4, r7, pc}
 800127a:	bf00      	nop
 800127c:	406f4000 	.word	0x406f4000
 8001280:	c0690000 	.word	0xc0690000
 8001284:	405e0000 	.word	0x405e0000

08001288 <commandReply>:

Robot_RespondTypedef	commandReply	(Robot_CommandTypedef cmd_type,
										DUTY_Command_TypeDef duty_cmd,
										uint8_t *detail) {
 8001288:	b082      	sub	sp, #8
 800128a:	b5b0      	push	{r4, r5, r7, lr}
 800128c:	b0de      	sub	sp, #376	; 0x178
 800128e:	af2c      	add	r7, sp, #176	; 0xb0
 8001290:	4601      	mov	r1, r0
 8001292:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 8001296:	e880 000c 	stmia.w	r0, {r2, r3}
 800129a:	460b      	mov	r3, r1
 800129c:	71fb      	strb	r3, [r7, #7]
	Robot_RespondTypedef ret;

	switch(cmd_type) {
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	2b15      	cmp	r3, #21
 80012a2:	f200 811e 	bhi.w	80014e2 <commandReply+0x25a>
 80012a6:	a201      	add	r2, pc, #4	; (adr r2, 80012ac <commandReply+0x24>)
 80012a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ac:	08001305 	.word	0x08001305
 80012b0:	08001305 	.word	0x08001305
 80012b4:	08001305 	.word	0x08001305
 80012b8:	08001305 	.word	0x08001305
 80012bc:	08001305 	.word	0x08001305
 80012c0:	08001305 	.word	0x08001305
 80012c4:	08001305 	.word	0x08001305
 80012c8:	0800130d 	.word	0x0800130d
 80012cc:	08001377 	.word	0x08001377
 80012d0:	080013ab 	.word	0x080013ab
 80012d4:	080013d9 	.word	0x080013d9
 80012d8:	08001493 	.word	0x08001493
 80012dc:	080014ff 	.word	0x080014ff
 80012e0:	080014ff 	.word	0x080014ff
 80012e4:	080014ff 	.word	0x080014ff
 80012e8:	080014ff 	.word	0x080014ff
 80012ec:	080014ff 	.word	0x080014ff
 80012f0:	080014ff 	.word	0x080014ff
 80012f4:	0800149b 	.word	0x0800149b
 80012f8:	080014a3 	.word	0x080014a3
 80012fc:	080014ab 	.word	0x080014ab
 8001300:	080014c3 	.word	0x080014c3
	case CMD_MOVE_HOME:
	case CMD_MOVE_LINE:
	case CMD_MOVE_CIRCLE:
	case CMD_MOVE_JOINT:
	case CMD_ROTATE_SINGLE:
		ret = RPD_DUTY;
 8001304:	2309      	movs	r3, #9
 8001306:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		break;
 800130a:	e0f9      	b.n	8001500 <commandReply+0x278>
	case CMD_OUTPUT:
		{
			if (1 == duty_cmd.sub_para_int) {
 800130c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001310:	2b01      	cmp	r3, #1
 8001312:	d10d      	bne.n	8001330 <commandReply+0xa8>
				scaraSetOutput(1);
 8001314:	2001      	movs	r0, #1
 8001316:	f007 fd4f 	bl	8008db8 <scaraSetOutput>
				strcpy( (char *)detail, "Output ON");
 800131a:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 800131e:	497d      	ldr	r1, [pc, #500]	; (8001514 <commandReply+0x28c>)
 8001320:	461a      	mov	r2, r3
 8001322:	460b      	mov	r3, r1
 8001324:	cb03      	ldmia	r3!, {r0, r1}
 8001326:	6010      	str	r0, [r2, #0]
 8001328:	6051      	str	r1, [r2, #4]
 800132a:	881b      	ldrh	r3, [r3, #0]
 800132c:	8113      	strh	r3, [r2, #8]
 800132e:	e01e      	b.n	800136e <commandReply+0xe6>
			} else if (0 == duty_cmd.sub_para_int) {
 8001330:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001334:	2b00      	cmp	r3, #0
 8001336:	d10f      	bne.n	8001358 <commandReply+0xd0>
				scaraSetOutput(0);
 8001338:	2000      	movs	r0, #0
 800133a:	f007 fd3d 	bl	8008db8 <scaraSetOutput>
				strcpy( (char *)detail, "Output OFF");
 800133e:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8001342:	4975      	ldr	r1, [pc, #468]	; (8001518 <commandReply+0x290>)
 8001344:	461a      	mov	r2, r3
 8001346:	460b      	mov	r3, r1
 8001348:	cb03      	ldmia	r3!, {r0, r1}
 800134a:	6010      	str	r0, [r2, #0]
 800134c:	6051      	str	r1, [r2, #4]
 800134e:	8819      	ldrh	r1, [r3, #0]
 8001350:	789b      	ldrb	r3, [r3, #2]
 8001352:	8111      	strh	r1, [r2, #8]
 8001354:	7293      	strb	r3, [r2, #10]
 8001356:	e00a      	b.n	800136e <commandReply+0xe6>
			} else {
				strcpy( (char *)detail, "Wrong Value");
 8001358:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 800135c:	4a6f      	ldr	r2, [pc, #444]	; (800151c <commandReply+0x294>)
 800135e:	461c      	mov	r4, r3
 8001360:	4613      	mov	r3, r2
 8001362:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001364:	6020      	str	r0, [r4, #0]
 8001366:	6061      	str	r1, [r4, #4]
 8001368:	60a2      	str	r2, [r4, #8]
				return RPD_ERROR;
 800136a:	2307      	movs	r3, #7
 800136c:	e0ca      	b.n	8001504 <commandReply+0x27c>
			}
			ret = RPD_OK;
 800136e:	2308      	movs	r3, #8
 8001370:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		}
		break;
 8001374:	e0c4      	b.n	8001500 <commandReply+0x278>
	case CMD_READ_STATUS:
		{
			SCARA_ModeTypeDef		current_mode;
			SCARA_DutyStateTypeDef 	current_state;
			current_mode	 = scaraGetMode();
 8001376:	f007 fd71 	bl	8008e5c <scaraGetMode>
 800137a:	4603      	mov	r3, r0
 800137c:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6
			current_state	 = scaraGetDutyState();
 8001380:	f007 fd84 	bl	8008e8c <scaraGetDutyState>
 8001384:	4603      	mov	r3, r0
 8001386:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
			if ( SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_state) {
 800138a:	f897 30c6 	ldrb.w	r3, [r7, #198]	; 0xc6
 800138e:	2b02      	cmp	r3, #2
 8001390:	d107      	bne.n	80013a2 <commandReply+0x11a>
 8001392:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 8001396:	2b00      	cmp	r3, #0
 8001398:	d103      	bne.n	80013a2 <commandReply+0x11a>
				ret = RPD_IDLE;
 800139a:	2300      	movs	r3, #0
 800139c:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
			} else {
				ret = RPD_BUSY;
			}
		}
		break;
 80013a0:	e0ae      	b.n	8001500 <commandReply+0x278>
				ret = RPD_BUSY;
 80013a2:	2301      	movs	r3, #1
 80013a4:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		break;
 80013a8:	e0aa      	b.n	8001500 <commandReply+0x278>
	case CMD_READ_POSITION:
		{
			SCARA_PositionTypeDef position;
			scaraGetPosition(&position);
 80013aa:	f107 0308 	add.w	r3, r7, #8
 80013ae:	4618      	mov	r0, r3
 80013b0:	f007 fd44 	bl	8008e3c <scaraGetPosition>
			//scaraPosition2String((char *)detail, position);
			scaraPosition_packaging(detail, position);
 80013b4:	4668      	mov	r0, sp
 80013b6:	f107 0310 	add.w	r3, r7, #16
 80013ba:	22b0      	movs	r2, #176	; 0xb0
 80013bc:	4619      	mov	r1, r3
 80013be:	f014 f977 	bl	80156b0 <memcpy>
 80013c2:	f107 0308 	add.w	r3, r7, #8
 80013c6:	cb0c      	ldmia	r3, {r2, r3}
 80013c8:	f8d7 0280 	ldr.w	r0, [r7, #640]	; 0x280
 80013cc:	f007 feb4 	bl	8009138 <scaraPosition_packaging>
			ret =  RPD_POSITION;
 80013d0:	2302      	movs	r3, #2
 80013d2:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		}
		break;
 80013d6:	e093      	b.n	8001500 <commandReply+0x278>
	case CMD_SETTING:
		if ( DUTY_COORDINATES_ABS == duty_cmd.coordinate_type) {
 80013d8:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d10a      	bne.n	80013f6 <commandReply+0x16e>
			strcpy( (char *)detail, "ABSOLUTE.");
 80013e0:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 80013e4:	494e      	ldr	r1, [pc, #312]	; (8001520 <commandReply+0x298>)
 80013e6:	461a      	mov	r2, r3
 80013e8:	460b      	mov	r3, r1
 80013ea:	cb03      	ldmia	r3!, {r0, r1}
 80013ec:	6010      	str	r0, [r2, #0]
 80013ee:	6051      	str	r1, [r2, #4]
 80013f0:	881b      	ldrh	r3, [r3, #0]
 80013f2:	8113      	strh	r3, [r2, #8]
 80013f4:	e017      	b.n	8001426 <commandReply+0x19e>
		} else if ( DUTY_COORDINATES_REL == duty_cmd.coordinate_type) {
 80013f6:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d10a      	bne.n	8001414 <commandReply+0x18c>
			strcpy( (char *)detail, "RELATIVE.");
 80013fe:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8001402:	4948      	ldr	r1, [pc, #288]	; (8001524 <commandReply+0x29c>)
 8001404:	461a      	mov	r2, r3
 8001406:	460b      	mov	r3, r1
 8001408:	cb03      	ldmia	r3!, {r0, r1}
 800140a:	6010      	str	r0, [r2, #0]
 800140c:	6051      	str	r1, [r2, #4]
 800140e:	881b      	ldrh	r3, [r3, #0]
 8001410:	8113      	strh	r3, [r2, #8]
 8001412:	e008      	b.n	8001426 <commandReply+0x19e>
		} else {
			strcat((char *)detail, DETAIL_STATUS[SCARA_STATUS_ERROR_COORDINATE]);
 8001414:	4b44      	ldr	r3, [pc, #272]	; (8001528 <commandReply+0x2a0>)
 8001416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001418:	4619      	mov	r1, r3
 800141a:	f8d7 0280 	ldr.w	r0, [r7, #640]	; 0x280
 800141e:	f015 f8c3 	bl	80165a8 <strcat>
			return RPD_ERROR;
 8001422:	2307      	movs	r3, #7
 8001424:	e06e      	b.n	8001504 <commandReply+0x27c>
		}

		if ( DUTY_TRAJECTORY_LSPB == duty_cmd.trajec_type) {
 8001426:	f897 30e8 	ldrb.w	r3, [r7, #232]	; 0xe8
 800142a:	2b00      	cmp	r3, #0
 800142c:	d10e      	bne.n	800144c <commandReply+0x1c4>
			strcat((char *)detail, " LSPB");
 800142e:	f8d7 0280 	ldr.w	r0, [r7, #640]	; 0x280
 8001432:	f7fe fecd 	bl	80001d0 <strlen>
 8001436:	4603      	mov	r3, r0
 8001438:	461a      	mov	r2, r3
 800143a:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 800143e:	4413      	add	r3, r2
 8001440:	4a3a      	ldr	r2, [pc, #232]	; (800152c <commandReply+0x2a4>)
 8001442:	6810      	ldr	r0, [r2, #0]
 8001444:	6018      	str	r0, [r3, #0]
 8001446:	8892      	ldrh	r2, [r2, #4]
 8001448:	809a      	strh	r2, [r3, #4]
 800144a:	e01e      	b.n	800148a <commandReply+0x202>
		} else if ( DUTY_TRAJECTORY_SCURVE == duty_cmd.trajec_type) {
 800144c:	f897 30e8 	ldrb.w	r3, [r7, #232]	; 0xe8
 8001450:	2b01      	cmp	r3, #1
 8001452:	d111      	bne.n	8001478 <commandReply+0x1f0>
			strcat((char *)detail, " S-CURVE");
 8001454:	f8d7 0280 	ldr.w	r0, [r7, #640]	; 0x280
 8001458:	f7fe feba 	bl	80001d0 <strlen>
 800145c:	4603      	mov	r3, r0
 800145e:	461a      	mov	r2, r3
 8001460:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8001464:	4413      	add	r3, r2
 8001466:	4932      	ldr	r1, [pc, #200]	; (8001530 <commandReply+0x2a8>)
 8001468:	461a      	mov	r2, r3
 800146a:	460b      	mov	r3, r1
 800146c:	cb03      	ldmia	r3!, {r0, r1}
 800146e:	6010      	str	r0, [r2, #0]
 8001470:	6051      	str	r1, [r2, #4]
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	7213      	strb	r3, [r2, #8]
 8001476:	e008      	b.n	800148a <commandReply+0x202>
		} else {
			strcat((char *)detail, DETAIL_STATUS[SCARA_STATUS_ERROR_TRAJECTORY]);
 8001478:	4b2b      	ldr	r3, [pc, #172]	; (8001528 <commandReply+0x2a0>)
 800147a:	695b      	ldr	r3, [r3, #20]
 800147c:	4619      	mov	r1, r3
 800147e:	f8d7 0280 	ldr.w	r0, [r7, #640]	; 0x280
 8001482:	f015 f891 	bl	80165a8 <strcat>
			return RPD_ERROR;
 8001486:	2307      	movs	r3, #7
 8001488:	e03c      	b.n	8001504 <commandReply+0x27c>
		}
		ret = RPD_OK;
 800148a:	2308      	movs	r3, #8
 800148c:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		break;
 8001490:	e036      	b.n	8001500 <commandReply+0x278>
	case CMD_METHOD_CHANGE:
		ret = RPD_DUTY;
 8001492:	2309      	movs	r3, #9
 8001494:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		break;
 8001498:	e032      	b.n	8001500 <commandReply+0x278>
	case CMD_JOB_PUSH_OUTPUT:
		break;
	case CMD_JOB_TEST:
		break;
	case CMD_JOB_RUN:
		ret = RPD_DUTY;
 800149a:	2309      	movs	r3, #9
 800149c:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		break;
 80014a0:	e02e      	b.n	8001500 <commandReply+0x278>
	case CMD_KEYBOARD:
		ret = RPD_DUTY;
 80014a2:	2309      	movs	r3, #9
 80014a4:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		break;
 80014a8:	e02a      	b.n	8001500 <commandReply+0x278>
	case CMD_KEY_SPEED:
		sprintf((char*) detail, "MANUAL SPEED = %d", duty_cmd.key_speed);
 80014aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80014ae:	461a      	mov	r2, r3
 80014b0:	4920      	ldr	r1, [pc, #128]	; (8001534 <commandReply+0x2ac>)
 80014b2:	f8d7 0280 	ldr.w	r0, [r7, #640]	; 0x280
 80014b6:	f015 f857 	bl	8016568 <siprintf>
		ret = RPD_OK;
 80014ba:	2308      	movs	r3, #8
 80014bc:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		break;
 80014c0:	e01e      	b.n	8001500 <commandReply+0x278>
	case CMD_ERROR:
		strcpy( (char *)detail, "Check parameters");
 80014c2:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 80014c6:	4a1c      	ldr	r2, [pc, #112]	; (8001538 <commandReply+0x2b0>)
 80014c8:	461d      	mov	r5, r3
 80014ca:	4614      	mov	r4, r2
 80014cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014ce:	6028      	str	r0, [r5, #0]
 80014d0:	6069      	str	r1, [r5, #4]
 80014d2:	60aa      	str	r2, [r5, #8]
 80014d4:	60eb      	str	r3, [r5, #12]
 80014d6:	7823      	ldrb	r3, [r4, #0]
 80014d8:	742b      	strb	r3, [r5, #16]
		ret = RPD_ERROR;
 80014da:	2307      	movs	r3, #7
 80014dc:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		break;
 80014e0:	e00e      	b.n	8001500 <commandReply+0x278>
	default:
		strcpy( (char *)detail, "Unknown command");
 80014e2:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 80014e6:	4a15      	ldr	r2, [pc, #84]	; (800153c <commandReply+0x2b4>)
 80014e8:	461c      	mov	r4, r3
 80014ea:	4615      	mov	r5, r2
 80014ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014ee:	6020      	str	r0, [r4, #0]
 80014f0:	6061      	str	r1, [r4, #4]
 80014f2:	60a2      	str	r2, [r4, #8]
 80014f4:	60e3      	str	r3, [r4, #12]
		ret = RPD_ERROR;
 80014f6:	2307      	movs	r3, #7
 80014f8:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 80014fc:	e000      	b.n	8001500 <commandReply+0x278>
		break;
 80014fe:	bf00      	nop
	}
	return ret;
 8001500:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
}
 8001504:	4618      	mov	r0, r3
 8001506:	37c8      	adds	r7, #200	; 0xc8
 8001508:	46bd      	mov	sp, r7
 800150a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800150e:	b002      	add	sp, #8
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	0801ac90 	.word	0x0801ac90
 8001518:	0801ac9c 	.word	0x0801ac9c
 800151c:	0801aca8 	.word	0x0801aca8
 8001520:	0801acb4 	.word	0x0801acb4
 8001524:	0801acc0 	.word	0x0801acc0
 8001528:	20000c58 	.word	0x20000c58
 800152c:	0801accc 	.word	0x0801accc
 8001530:	0801acd4 	.word	0x0801acd4
 8001534:	0801ace0 	.word	0x0801ace0
 8001538:	0801acf4 	.word	0x0801acf4
 800153c:	0801ad08 	.word	0x0801ad08

08001540 <commandRespond>:


int32_t				commandRespond	(Robot_RespondTypedef rpd,
										int32_t id_command,
										char *detail,
										char *respond) {
 8001540:	b580      	push	{r7, lr}
 8001542:	b088      	sub	sp, #32
 8001544:	af02      	add	r7, sp, #8
 8001546:	60b9      	str	r1, [r7, #8]
 8001548:	607a      	str	r2, [r7, #4]
 800154a:	603b      	str	r3, [r7, #0]
 800154c:	4603      	mov	r3, r0
 800154e:	73fb      	strb	r3, [r7, #15]
	int out_lenght;
	switch(rpd) {
 8001550:	7bfb      	ldrb	r3, [r7, #15]
 8001552:	2b08      	cmp	r3, #8
 8001554:	d836      	bhi.n	80015c4 <commandRespond+0x84>
 8001556:	a201      	add	r2, pc, #4	; (adr r2, 800155c <commandRespond+0x1c>)
 8001558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800155c:	08001581 	.word	0x08001581
 8001560:	08001581 	.word	0x08001581
 8001564:	080015a7 	.word	0x080015a7
 8001568:	080015a7 	.word	0x080015a7
 800156c:	080015a7 	.word	0x080015a7
 8001570:	080015a7 	.word	0x080015a7
 8001574:	080015a7 	.word	0x080015a7
 8001578:	080015a7 	.word	0x080015a7
 800157c:	080015a7 	.word	0x080015a7
	case RPD_IDLE:
	case RPD_BUSY:
		{
			uint8_t		isScanLitmit;
			isScanLitmit = scaraIsScanLimit();
 8001580:	f007 fc90 	bl	8008ea4 <scaraIsScanLimit>
 8001584:	4603      	mov	r3, r0
 8001586:	74fb      	strb	r3, [r7, #19]
			out_lenght = snprintf( (char *)respond,
 8001588:	7bfb      	ldrb	r3, [r7, #15]
 800158a:	4a12      	ldr	r2, [pc, #72]	; (80015d4 <commandRespond+0x94>)
 800158c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001590:	7cfa      	ldrb	r2, [r7, #19]
 8001592:	9201      	str	r2, [sp, #4]
 8001594:	9300      	str	r3, [sp, #0]
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	4a0f      	ldr	r2, [pc, #60]	; (80015d8 <commandRespond+0x98>)
 800159a:	2114      	movs	r1, #20
 800159c:	6838      	ldr	r0, [r7, #0]
 800159e:	f014 ffaf 	bl	8016500 <sniprintf>
 80015a2:	6178      	str	r0, [r7, #20]
									"%d %s %d",
									(int)id_command,
									ROBOTRESPOND[rpd],
									(int)isScanLitmit);
		}
		break;
 80015a4:	e010      	b.n	80015c8 <commandRespond+0x88>
	case RPD_STOP:
	case RPD_ERROR:
	case RPD_OK:

		{
			out_lenght = snprintf( (char *)respond,
 80015a6:	7bfb      	ldrb	r3, [r7, #15]
 80015a8:	4a0a      	ldr	r2, [pc, #40]	; (80015d4 <commandRespond+0x94>)
 80015aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	9201      	str	r2, [sp, #4]
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	4a09      	ldr	r2, [pc, #36]	; (80015dc <commandRespond+0x9c>)
 80015b8:	2191      	movs	r1, #145	; 0x91
 80015ba:	6838      	ldr	r0, [r7, #0]
 80015bc:	f014 ffa0 	bl	8016500 <sniprintf>
 80015c0:	6178      	str	r0, [r7, #20]
									"%d %s %s",
									(int)id_command,
									ROBOTRESPOND[rpd],
									(char *)detail);
		}
		break;
 80015c2:	e001      	b.n	80015c8 <commandRespond+0x88>
	default:
		out_lenght = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]
	}

	return (int32_t)out_lenght;
 80015c8:	697b      	ldr	r3, [r7, #20]
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3718      	adds	r7, #24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000000 	.word	0x20000000
 80015d8:	0801ad18 	.word	0x0801ad18
 80015dc:	0801ad24 	.word	0x0801ad24

080015e0 <LOG_REPORT>:
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b096      	sub	sp, #88	; 0x58
 80015e4:	af02      	add	r7, sp, #8
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	460b      	mov	r3, r1
 80015ea:	807b      	strh	r3, [r7, #2]
 80015ec:	887a      	ldrh	r2, [r7, #2]
 80015ee:	f107 0008 	add.w	r0, r7, #8
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	9300      	str	r3, [sp, #0]
 80015f6:	4613      	mov	r3, r2
 80015f8:	4a17      	ldr	r2, [pc, #92]	; (8001658 <LOG_REPORT+0x78>)
 80015fa:	213f      	movs	r1, #63	; 0x3f
 80015fc:	f014 ff80 	bl	8016500 <sniprintf>
 8001600:	64f8      	str	r0, [r7, #76]	; 0x4c
 8001602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001608:	d101      	bne.n	800160e <LOG_REPORT+0x2e>
 800160a:	2300      	movs	r3, #0
 800160c:	e01f      	b.n	800164e <LOG_REPORT+0x6e>
 800160e:	f107 0308 	add.w	r3, r7, #8
 8001612:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001614:	4619      	mov	r1, r3
 8001616:	4811      	ldr	r0, [pc, #68]	; (800165c <LOG_REPORT+0x7c>)
 8001618:	f002 f89d 	bl	8003756 <ringBuff_PushArray>
 800161c:	4810      	ldr	r0, [pc, #64]	; (8001660 <LOG_REPORT+0x80>)
 800161e:	f009 ff89 	bl	800b534 <HAL_DMA_GetState>
 8001622:	4603      	mov	r3, r0
 8001624:	2b02      	cmp	r3, #2
 8001626:	d101      	bne.n	800162c <LOG_REPORT+0x4c>
 8001628:	2301      	movs	r3, #1
 800162a:	e010      	b.n	800164e <LOG_REPORT+0x6e>
 800162c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001630:	490c      	ldr	r1, [pc, #48]	; (8001664 <LOG_REPORT+0x84>)
 8001632:	480a      	ldr	r0, [pc, #40]	; (800165c <LOG_REPORT+0x7c>)
 8001634:	f002 f8b7 	bl	80037a6 <ringBuff_PopArray>
 8001638:	4603      	mov	r3, r0
 800163a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800163e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001642:	461a      	mov	r2, r3
 8001644:	4907      	ldr	r1, [pc, #28]	; (8001664 <LOG_REPORT+0x84>)
 8001646:	4808      	ldr	r0, [pc, #32]	; (8001668 <LOG_REPORT+0x88>)
 8001648:	f00c fb86 	bl	800dd58 <HAL_UART_Transmit_DMA>
 800164c:	2301      	movs	r3, #1
 800164e:	4618      	mov	r0, r3
 8001650:	3750      	adds	r7, #80	; 0x50
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	0801ad30 	.word	0x0801ad30
 800165c:	20000840 	.word	0x20000840
 8001660:	20006120 	.word	0x20006120
 8001664:	200051b4 	.word	0x200051b4
 8001668:	200060e0 	.word	0x200060e0
 800166c:	00000000 	.word	0x00000000

08001670 <double2string>:
 8001670:	b5b0      	push	{r4, r5, r7, lr}
 8001672:	b090      	sub	sp, #64	; 0x40
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	ed87 0b00 	vstr	d0, [r7]
 800167c:	460b      	mov	r3, r1
 800167e:	72fb      	strb	r3, [r7, #11]
 8001680:	7afb      	ldrb	r3, [r7, #11]
 8001682:	2b06      	cmp	r3, #6
 8001684:	d901      	bls.n	800168a <double2string+0x1a>
 8001686:	2306      	movs	r3, #6
 8001688:	72fb      	strb	r3, [r7, #11]
 800168a:	f04f 0200 	mov.w	r2, #0
 800168e:	f04f 0300 	mov.w	r3, #0
 8001692:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001696:	f7ff fa21 	bl	8000adc <__aeabi_dcmplt>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d003      	beq.n	80016a8 <double2string+0x38>
 80016a0:	23ff      	movs	r3, #255	; 0xff
 80016a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80016a6:	e002      	b.n	80016ae <double2string+0x3e>
 80016a8:	2301      	movs	r3, #1
 80016aa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80016ae:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7fe ff36 	bl	8000524 <__aeabi_i2d>
 80016b8:	4603      	mov	r3, r0
 80016ba:	460c      	mov	r4, r1
 80016bc:	461a      	mov	r2, r3
 80016be:	4623      	mov	r3, r4
 80016c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016c4:	f7fe ff98 	bl	80005f8 <__aeabi_dmul>
 80016c8:	4603      	mov	r3, r0
 80016ca:	460c      	mov	r4, r1
 80016cc:	e9c7 3400 	strd	r3, r4, [r7]
 80016d0:	a307      	add	r3, pc, #28	; (adr r3, 80016f0 <double2string+0x80>)
 80016d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016da:	f7ff fa1d 	bl	8000b18 <__aeabi_dcmpgt>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d009      	beq.n	80016f8 <double2string+0x88>
 80016e4:	f04f 33ff 	mov.w	r3, #4294967295
 80016e8:	e265      	b.n	8001bb6 <double2string+0x546>
 80016ea:	bf00      	nop
 80016ec:	f3af 8000 	nop.w
 80016f0:	00000000 	.word	0x00000000
 80016f4:	40c38800 	.word	0x40c38800
 80016f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016fc:	f7ff fa2c 	bl	8000b58 <__aeabi_d2iz>
 8001700:	4603      	mov	r3, r0
 8001702:	4acf      	ldr	r2, [pc, #828]	; (8001a40 <double2string+0x3d0>)
 8001704:	fb82 1203 	smull	r1, r2, r2, r3
 8001708:	1192      	asrs	r2, r2, #6
 800170a:	17db      	asrs	r3, r3, #31
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	b2db      	uxtb	r3, r3
 8001710:	773b      	strb	r3, [r7, #28]
 8001712:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001716:	f7ff fa1f 	bl	8000b58 <__aeabi_d2iz>
 800171a:	4603      	mov	r3, r0
 800171c:	4ac9      	ldr	r2, [pc, #804]	; (8001a44 <double2string+0x3d4>)
 800171e:	fb82 1203 	smull	r1, r2, r2, r3
 8001722:	1152      	asrs	r2, r2, #5
 8001724:	17db      	asrs	r3, r3, #31
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	b2da      	uxtb	r2, r3
 800172a:	7f3b      	ldrb	r3, [r7, #28]
 800172c:	4619      	mov	r1, r3
 800172e:	0149      	lsls	r1, r1, #5
 8001730:	1ac9      	subs	r1, r1, r3
 8001732:	0089      	lsls	r1, r1, #2
 8001734:	1acb      	subs	r3, r1, r3
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	b2db      	uxtb	r3, r3
 800173a:	4413      	add	r3, r2
 800173c:	b2db      	uxtb	r3, r3
 800173e:	777b      	strb	r3, [r7, #29]
 8001740:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001744:	f7ff fa08 	bl	8000b58 <__aeabi_d2iz>
 8001748:	4603      	mov	r3, r0
 800174a:	4abf      	ldr	r2, [pc, #764]	; (8001a48 <double2string+0x3d8>)
 800174c:	fb82 1203 	smull	r1, r2, r2, r3
 8001750:	1092      	asrs	r2, r2, #2
 8001752:	17db      	asrs	r3, r3, #31
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	b2da      	uxtb	r2, r3
 8001758:	7f7b      	ldrb	r3, [r7, #29]
 800175a:	4619      	mov	r1, r3
 800175c:	0149      	lsls	r1, r1, #5
 800175e:	1ac9      	subs	r1, r1, r3
 8001760:	0089      	lsls	r1, r1, #2
 8001762:	1acb      	subs	r3, r1, r3
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	b2d9      	uxtb	r1, r3
 8001768:	7f3b      	ldrb	r3, [r7, #28]
 800176a:	4618      	mov	r0, r3
 800176c:	0080      	lsls	r0, r0, #2
 800176e:	4418      	add	r0, r3
 8001770:	00c0      	lsls	r0, r0, #3
 8001772:	1ac3      	subs	r3, r0, r3
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	b2db      	uxtb	r3, r3
 8001778:	440b      	add	r3, r1
 800177a:	b2db      	uxtb	r3, r3
 800177c:	4413      	add	r3, r2
 800177e:	b2db      	uxtb	r3, r3
 8001780:	77bb      	strb	r3, [r7, #30]
 8001782:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001786:	f7ff f9e7 	bl	8000b58 <__aeabi_d2iz>
 800178a:	4603      	mov	r3, r0
 800178c:	b2da      	uxtb	r2, r3
 800178e:	7f7b      	ldrb	r3, [r7, #29]
 8001790:	4619      	mov	r1, r3
 8001792:	0089      	lsls	r1, r1, #2
 8001794:	4419      	add	r1, r3
 8001796:	00c9      	lsls	r1, r1, #3
 8001798:	1acb      	subs	r3, r1, r3
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	b2d9      	uxtb	r1, r3
 800179e:	7f3b      	ldrb	r3, [r7, #28]
 80017a0:	4618      	mov	r0, r3
 80017a2:	0040      	lsls	r0, r0, #1
 80017a4:	4403      	add	r3, r0
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	440b      	add	r3, r1
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	4413      	add	r3, r2
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	7fbb      	ldrb	r3, [r7, #30]
 80017b4:	4619      	mov	r1, r3
 80017b6:	0149      	lsls	r1, r1, #5
 80017b8:	1ac9      	subs	r1, r1, r3
 80017ba:	0089      	lsls	r1, r1, #2
 80017bc:	1acb      	subs	r3, r1, r3
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	4413      	add	r3, r2
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	77fb      	strb	r3, [r7, #31]
 80017c8:	7f3b      	ldrb	r3, [r7, #28]
 80017ca:	461a      	mov	r2, r3
 80017cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017d0:	fb03 f302 	mul.w	r3, r3, r2
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7fe fea5 	bl	8000524 <__aeabi_i2d>
 80017da:	4603      	mov	r3, r0
 80017dc:	460c      	mov	r4, r1
 80017de:	461a      	mov	r2, r3
 80017e0:	4623      	mov	r3, r4
 80017e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017e6:	f7fe fd4f 	bl	8000288 <__aeabi_dsub>
 80017ea:	4603      	mov	r3, r0
 80017ec:	460c      	mov	r4, r1
 80017ee:	4625      	mov	r5, r4
 80017f0:	461c      	mov	r4, r3
 80017f2:	7f7b      	ldrb	r3, [r7, #29]
 80017f4:	461a      	mov	r2, r3
 80017f6:	2364      	movs	r3, #100	; 0x64
 80017f8:	fb03 f302 	mul.w	r3, r3, r2
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7fe fe91 	bl	8000524 <__aeabi_i2d>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	4620      	mov	r0, r4
 8001808:	4629      	mov	r1, r5
 800180a:	f7fe fd3d 	bl	8000288 <__aeabi_dsub>
 800180e:	4603      	mov	r3, r0
 8001810:	460c      	mov	r4, r1
 8001812:	4625      	mov	r5, r4
 8001814:	461c      	mov	r4, r3
 8001816:	7fbb      	ldrb	r3, [r7, #30]
 8001818:	461a      	mov	r2, r3
 800181a:	4613      	mov	r3, r2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	4413      	add	r3, r2
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	4618      	mov	r0, r3
 8001824:	f7fe fe7e 	bl	8000524 <__aeabi_i2d>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	4620      	mov	r0, r4
 800182e:	4629      	mov	r1, r5
 8001830:	f7fe fd2a 	bl	8000288 <__aeabi_dsub>
 8001834:	4603      	mov	r3, r0
 8001836:	460c      	mov	r4, r1
 8001838:	4625      	mov	r5, r4
 800183a:	461c      	mov	r4, r3
 800183c:	7ffb      	ldrb	r3, [r7, #31]
 800183e:	4618      	mov	r0, r3
 8001840:	f7fe fe70 	bl	8000524 <__aeabi_i2d>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	4620      	mov	r0, r4
 800184a:	4629      	mov	r1, r5
 800184c:	f7fe fd1c 	bl	8000288 <__aeabi_dsub>
 8001850:	4603      	mov	r3, r0
 8001852:	460c      	mov	r4, r1
 8001854:	4618      	mov	r0, r3
 8001856:	4621      	mov	r1, r4
 8001858:	f04f 0200 	mov.w	r2, #0
 800185c:	4b7b      	ldr	r3, [pc, #492]	; (8001a4c <double2string+0x3dc>)
 800185e:	f7fe fecb 	bl	80005f8 <__aeabi_dmul>
 8001862:	4603      	mov	r3, r0
 8001864:	460c      	mov	r4, r1
 8001866:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 800186a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800186e:	f7ff f973 	bl	8000b58 <__aeabi_d2iz>
 8001872:	4603      	mov	r3, r0
 8001874:	4a73      	ldr	r2, [pc, #460]	; (8001a44 <double2string+0x3d4>)
 8001876:	fb82 1203 	smull	r1, r2, r2, r3
 800187a:	1152      	asrs	r2, r2, #5
 800187c:	17db      	asrs	r3, r3, #31
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	b2db      	uxtb	r3, r3
 8001882:	753b      	strb	r3, [r7, #20]
 8001884:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001888:	f7ff f966 	bl	8000b58 <__aeabi_d2iz>
 800188c:	4603      	mov	r3, r0
 800188e:	4a6e      	ldr	r2, [pc, #440]	; (8001a48 <double2string+0x3d8>)
 8001890:	fb82 1203 	smull	r1, r2, r2, r3
 8001894:	1092      	asrs	r2, r2, #2
 8001896:	17db      	asrs	r3, r3, #31
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	b2da      	uxtb	r2, r3
 800189c:	7d3b      	ldrb	r3, [r7, #20]
 800189e:	4619      	mov	r1, r3
 80018a0:	0149      	lsls	r1, r1, #5
 80018a2:	1ac9      	subs	r1, r1, r3
 80018a4:	0089      	lsls	r1, r1, #2
 80018a6:	1acb      	subs	r3, r1, r3
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	4413      	add	r3, r2
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	757b      	strb	r3, [r7, #21]
 80018b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80018b6:	f7ff f94f 	bl	8000b58 <__aeabi_d2iz>
 80018ba:	4603      	mov	r3, r0
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	7d7b      	ldrb	r3, [r7, #21]
 80018c0:	4619      	mov	r1, r3
 80018c2:	0149      	lsls	r1, r1, #5
 80018c4:	1ac9      	subs	r1, r1, r3
 80018c6:	0089      	lsls	r1, r1, #2
 80018c8:	1acb      	subs	r3, r1, r3
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	b2d9      	uxtb	r1, r3
 80018ce:	7d3b      	ldrb	r3, [r7, #20]
 80018d0:	4618      	mov	r0, r3
 80018d2:	0080      	lsls	r0, r0, #2
 80018d4:	4418      	add	r0, r3
 80018d6:	00c0      	lsls	r0, r0, #3
 80018d8:	1ac3      	subs	r3, r0, r3
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	440b      	add	r3, r1
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	4413      	add	r3, r2
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	75bb      	strb	r3, [r7, #22]
 80018e8:	7d3b      	ldrb	r3, [r7, #20]
 80018ea:	461a      	mov	r2, r3
 80018ec:	2364      	movs	r3, #100	; 0x64
 80018ee:	fb03 f302 	mul.w	r3, r3, r2
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7fe fe16 	bl	8000524 <__aeabi_i2d>
 80018f8:	4603      	mov	r3, r0
 80018fa:	460c      	mov	r4, r1
 80018fc:	461a      	mov	r2, r3
 80018fe:	4623      	mov	r3, r4
 8001900:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001904:	f7fe fcc0 	bl	8000288 <__aeabi_dsub>
 8001908:	4603      	mov	r3, r0
 800190a:	460c      	mov	r4, r1
 800190c:	4625      	mov	r5, r4
 800190e:	461c      	mov	r4, r3
 8001910:	7d7b      	ldrb	r3, [r7, #21]
 8001912:	461a      	mov	r2, r3
 8001914:	4613      	mov	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	4618      	mov	r0, r3
 800191e:	f7fe fe01 	bl	8000524 <__aeabi_i2d>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	4620      	mov	r0, r4
 8001928:	4629      	mov	r1, r5
 800192a:	f7fe fcad 	bl	8000288 <__aeabi_dsub>
 800192e:	4603      	mov	r3, r0
 8001930:	460c      	mov	r4, r1
 8001932:	4625      	mov	r5, r4
 8001934:	461c      	mov	r4, r3
 8001936:	7dbb      	ldrb	r3, [r7, #22]
 8001938:	4618      	mov	r0, r3
 800193a:	f7fe fdf3 	bl	8000524 <__aeabi_i2d>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	4620      	mov	r0, r4
 8001944:	4629      	mov	r1, r5
 8001946:	f7fe fc9f 	bl	8000288 <__aeabi_dsub>
 800194a:	4603      	mov	r3, r0
 800194c:	460c      	mov	r4, r1
 800194e:	4618      	mov	r0, r3
 8001950:	4621      	mov	r1, r4
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	4b3d      	ldr	r3, [pc, #244]	; (8001a4c <double2string+0x3dc>)
 8001958:	f7fe fe4e 	bl	80005f8 <__aeabi_dmul>
 800195c:	4603      	mov	r3, r0
 800195e:	460c      	mov	r4, r1
 8001960:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8001964:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001968:	f7ff f8f6 	bl	8000b58 <__aeabi_d2iz>
 800196c:	4603      	mov	r3, r0
 800196e:	4a35      	ldr	r2, [pc, #212]	; (8001a44 <double2string+0x3d4>)
 8001970:	fb82 1203 	smull	r1, r2, r2, r3
 8001974:	1152      	asrs	r2, r2, #5
 8001976:	17db      	asrs	r3, r3, #31
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	b2db      	uxtb	r3, r3
 800197c:	75fb      	strb	r3, [r7, #23]
 800197e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001982:	f7ff f8e9 	bl	8000b58 <__aeabi_d2iz>
 8001986:	4603      	mov	r3, r0
 8001988:	4a2f      	ldr	r2, [pc, #188]	; (8001a48 <double2string+0x3d8>)
 800198a:	fb82 1203 	smull	r1, r2, r2, r3
 800198e:	1092      	asrs	r2, r2, #2
 8001990:	17db      	asrs	r3, r3, #31
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	b2da      	uxtb	r2, r3
 8001996:	7dfb      	ldrb	r3, [r7, #23]
 8001998:	4619      	mov	r1, r3
 800199a:	0149      	lsls	r1, r1, #5
 800199c:	1ac9      	subs	r1, r1, r3
 800199e:	0089      	lsls	r1, r1, #2
 80019a0:	1acb      	subs	r3, r1, r3
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	4413      	add	r3, r2
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	763b      	strb	r3, [r7, #24]
 80019ac:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80019b0:	f7ff f8d2 	bl	8000b58 <__aeabi_d2iz>
 80019b4:	4603      	mov	r3, r0
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	7e3b      	ldrb	r3, [r7, #24]
 80019ba:	4619      	mov	r1, r3
 80019bc:	0149      	lsls	r1, r1, #5
 80019be:	1ac9      	subs	r1, r1, r3
 80019c0:	0089      	lsls	r1, r1, #2
 80019c2:	1acb      	subs	r3, r1, r3
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	b2d9      	uxtb	r1, r3
 80019c8:	7dfb      	ldrb	r3, [r7, #23]
 80019ca:	4618      	mov	r0, r3
 80019cc:	0080      	lsls	r0, r0, #2
 80019ce:	4418      	add	r0, r3
 80019d0:	00c0      	lsls	r0, r0, #3
 80019d2:	1ac3      	subs	r3, r0, r3
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	440b      	add	r3, r1
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	4413      	add	r3, r2
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	767b      	strb	r3, [r7, #25]
 80019e2:	7dfb      	ldrb	r3, [r7, #23]
 80019e4:	461a      	mov	r2, r3
 80019e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ea:	fb03 f302 	mul.w	r3, r3, r2
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7fe fd98 	bl	8000524 <__aeabi_i2d>
 80019f4:	4603      	mov	r3, r0
 80019f6:	460c      	mov	r4, r1
 80019f8:	461a      	mov	r2, r3
 80019fa:	4623      	mov	r3, r4
 80019fc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a00:	f7fe fc42 	bl	8000288 <__aeabi_dsub>
 8001a04:	4603      	mov	r3, r0
 8001a06:	460c      	mov	r4, r1
 8001a08:	4625      	mov	r5, r4
 8001a0a:	461c      	mov	r4, r3
 8001a0c:	7e3b      	ldrb	r3, [r7, #24]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	2364      	movs	r3, #100	; 0x64
 8001a12:	fb03 f302 	mul.w	r3, r3, r2
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7fe fd84 	bl	8000524 <__aeabi_i2d>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	460b      	mov	r3, r1
 8001a20:	4620      	mov	r0, r4
 8001a22:	4629      	mov	r1, r5
 8001a24:	f7fe fc30 	bl	8000288 <__aeabi_dsub>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	460c      	mov	r4, r1
 8001a2c:	4625      	mov	r5, r4
 8001a2e:	461c      	mov	r4, r3
 8001a30:	7e7b      	ldrb	r3, [r7, #25]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7fe fd76 	bl	8000524 <__aeabi_i2d>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	e008      	b.n	8001a50 <double2string+0x3e0>
 8001a3e:	bf00      	nop
 8001a40:	10624dd3 	.word	0x10624dd3
 8001a44:	51eb851f 	.word	0x51eb851f
 8001a48:	66666667 	.word	0x66666667
 8001a4c:	408f4000 	.word	0x408f4000
 8001a50:	4620      	mov	r0, r4
 8001a52:	4629      	mov	r1, r5
 8001a54:	f7fe fc18 	bl	8000288 <__aeabi_dsub>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	460c      	mov	r4, r1
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	4621      	mov	r1, r4
 8001a60:	f04f 0200 	mov.w	r2, #0
 8001a64:	4b56      	ldr	r3, [pc, #344]	; (8001bc0 <double2string+0x550>)
 8001a66:	f7ff f84d 	bl	8000b04 <__aeabi_dcmpge>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d003      	beq.n	8001a78 <double2string+0x408>
 8001a70:	7e7b      	ldrb	r3, [r7, #25]
 8001a72:	3301      	adds	r3, #1
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	767b      	strb	r3, [r7, #25]
 8001a78:	2300      	movs	r3, #0
 8001a7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a7c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a84:	d107      	bne.n	8001a96 <double2string+0x426>
 8001a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a88:	1c5a      	adds	r2, r3, #1
 8001a8a:	63ba      	str	r2, [r7, #56]	; 0x38
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	4413      	add	r3, r2
 8001a92:	222d      	movs	r2, #45	; 0x2d
 8001a94:	701a      	strb	r2, [r3, #0]
 8001a96:	f04f 0200 	mov.w	r2, #0
 8001a9a:	4b4a      	ldr	r3, [pc, #296]	; (8001bc4 <double2string+0x554>)
 8001a9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001aa0:	f7ff f81c 	bl	8000adc <__aeabi_dcmplt>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d008      	beq.n	8001abc <double2string+0x44c>
 8001aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aac:	1c5a      	adds	r2, r3, #1
 8001aae:	63ba      	str	r2, [r7, #56]	; 0x38
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	2230      	movs	r2, #48	; 0x30
 8001ab8:	701a      	strb	r2, [r3, #0]
 8001aba:	e04b      	b.n	8001b54 <double2string+0x4e4>
 8001abc:	2300      	movs	r3, #0
 8001abe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001ac2:	e027      	b.n	8001b14 <double2string+0x4a4>
 8001ac4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001ac8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001acc:	4413      	add	r3, r2
 8001ace:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d017      	beq.n	8001b06 <double2string+0x496>
 8001ad6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001ada:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001ade:	4413      	add	r3, r2
 8001ae0:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 8001ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ae6:	1c59      	adds	r1, r3, #1
 8001ae8:	63b9      	str	r1, [r7, #56]	; 0x38
 8001aea:	4619      	mov	r1, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	440b      	add	r3, r1
 8001af0:	3230      	adds	r2, #48	; 0x30
 8001af2:	b2d2      	uxtb	r2, r2
 8001af4:	701a      	strb	r2, [r3, #0]
 8001af6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	3301      	adds	r3, #1
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001b04:	e00a      	b.n	8001b1c <double2string+0x4ac>
 8001b06:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001b14:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b18:	2b03      	cmp	r3, #3
 8001b1a:	ddd3      	ble.n	8001ac4 <double2string+0x454>
 8001b1c:	e016      	b.n	8001b4c <double2string+0x4dc>
 8001b1e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b22:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001b26:	4413      	add	r3, r2
 8001b28:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 8001b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b2e:	1c59      	adds	r1, r3, #1
 8001b30:	63b9      	str	r1, [r7, #56]	; 0x38
 8001b32:	4619      	mov	r1, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	440b      	add	r3, r1
 8001b38:	3230      	adds	r2, #48	; 0x30
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	701a      	strb	r2, [r3, #0]
 8001b3e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	3301      	adds	r3, #1
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001b4c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001b50:	2b03      	cmp	r3, #3
 8001b52:	dde4      	ble.n	8001b1e <double2string+0x4ae>
 8001b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b56:	1c5a      	adds	r2, r3, #1
 8001b58:	63ba      	str	r2, [r7, #56]	; 0x38
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	4413      	add	r3, r2
 8001b60:	222e      	movs	r2, #46	; 0x2e
 8001b62:	701a      	strb	r2, [r3, #0]
 8001b64:	2300      	movs	r3, #0
 8001b66:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001b6a:	e016      	b.n	8001b9a <double2string+0x52a>
 8001b6c:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001b70:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001b74:	4413      	add	r3, r2
 8001b76:	f813 2c2c 	ldrb.w	r2, [r3, #-44]
 8001b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b7c:	1c59      	adds	r1, r3, #1
 8001b7e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001b80:	4619      	mov	r1, r3
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	440b      	add	r3, r1
 8001b86:	3230      	adds	r2, #48	; 0x30
 8001b88:	b2d2      	uxtb	r2, r2
 8001b8a:	701a      	strb	r2, [r3, #0]
 8001b8c:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	3301      	adds	r3, #1
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001b9a:	f997 2036 	ldrsb.w	r2, [r7, #54]	; 0x36
 8001b9e:	7afb      	ldrb	r3, [r7, #11]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	dbe3      	blt.n	8001b6c <double2string+0x4fc>
 8001ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ba6:	1c5a      	adds	r2, r3, #1
 8001ba8:	63ba      	str	r2, [r7, #56]	; 0x38
 8001baa:	461a      	mov	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4413      	add	r3, r2
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	701a      	strb	r2, [r3, #0]
 8001bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3740      	adds	r7, #64	; 0x40
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bdb0      	pop	{r4, r5, r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	3fe00000 	.word	0x3fe00000
 8001bc4:	3ff00000 	.word	0x3ff00000

08001bc8 <packPayload>:
 *  in_lenght		: lenght of input_buff
 *
 *  returns:		: lenght of output_buff
 *  				  -1 if error
 */
int32_t	packPayload		(uint8_t *input_buff, uint8_t *output_buff, int32_t in_lenght) {
 8001bc8:	b5b0      	push	{r4, r5, r7, lr}
 8001bca:	b088      	sub	sp, #32
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
 8001bd4:	466b      	mov	r3, sp
 8001bd6:	461d      	mov	r5, r3
	if (NULL == input_buff) {
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d102      	bne.n	8001be4 <packPayload+0x1c>
		return -1;
 8001bde:	f04f 33ff 	mov.w	r3, #4294967295
 8001be2:	e056      	b.n	8001c92 <packPayload+0xca>
	}

	if (NULL == output_buff) {
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d102      	bne.n	8001bf0 <packPayload+0x28>
		return -1;
 8001bea:	f04f 33ff 	mov.w	r3, #4294967295
 8001bee:	e050      	b.n	8001c92 <packPayload+0xca>
	}

	int32_t out_lenght = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	61bb      	str	r3, [r7, #24]

	out_lenght = in_lenght + 2;//lenght of start char and end char
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3302      	adds	r3, #2
 8001bf8:	61bb      	str	r3, [r7, #24]
//		if ( (START_CHAR == input_buff[i]) ||	(END_CHAR == input_buff[i])	|| (ADD_CHAR == input_buff[i]) ) {
//			out_lenght++;
//		}
//	}// compute output buffer lenght

	uint8_t temp_buff[out_lenght];
 8001bfa:	69b8      	ldr	r0, [r7, #24]
 8001bfc:	1e43      	subs	r3, r0, #1
 8001bfe:	617b      	str	r3, [r7, #20]
 8001c00:	4603      	mov	r3, r0
 8001c02:	4619      	mov	r1, r3
 8001c04:	f04f 0200 	mov.w	r2, #0
 8001c08:	f04f 0300 	mov.w	r3, #0
 8001c0c:	f04f 0400 	mov.w	r4, #0
 8001c10:	00d4      	lsls	r4, r2, #3
 8001c12:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001c16:	00cb      	lsls	r3, r1, #3
 8001c18:	4603      	mov	r3, r0
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	f04f 0200 	mov.w	r2, #0
 8001c20:	f04f 0300 	mov.w	r3, #0
 8001c24:	f04f 0400 	mov.w	r4, #0
 8001c28:	00d4      	lsls	r4, r2, #3
 8001c2a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001c2e:	00cb      	lsls	r3, r1, #3
 8001c30:	4603      	mov	r3, r0
 8001c32:	3307      	adds	r3, #7
 8001c34:	08db      	lsrs	r3, r3, #3
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	ebad 0d03 	sub.w	sp, sp, r3
 8001c3c:	466b      	mov	r3, sp
 8001c3e:	3300      	adds	r3, #0
 8001c40:	613b      	str	r3, [r7, #16]

	out_lenght = 0;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61bb      	str	r3, [r7, #24]
	temp_buff[out_lenght++] = START_CHAR;
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	1c5a      	adds	r2, r3, #1
 8001c4a:	61ba      	str	r2, [r7, #24]
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	2128      	movs	r1, #40	; 0x28
 8001c50:	54d1      	strb	r1, [r2, r3]
	for (int32_t i = 0; i < in_lenght; i++) {
 8001c52:	2300      	movs	r3, #0
 8001c54:	61fb      	str	r3, [r7, #28]
 8001c56:	e00b      	b.n	8001c70 <packPayload+0xa8>
//			temp_buff[out_lenght++] = ADD_CHAR;
//			temp_buff[out_lenght++] = input_buff[i] ^ XOR_CHAR;
//		} else {
//			temp_buff[out_lenght++] = input_buff[i];
//		}
		temp_buff[out_lenght++] = input_buff[i];
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	441a      	add	r2, r3
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	1c59      	adds	r1, r3, #1
 8001c62:	61b9      	str	r1, [r7, #24]
 8001c64:	7811      	ldrb	r1, [r2, #0]
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	54d1      	strb	r1, [r2, r3]
	for (int32_t i = 0; i < in_lenght; i++) {
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	61fb      	str	r3, [r7, #28]
 8001c70:	69fa      	ldr	r2, [r7, #28]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	dbef      	blt.n	8001c58 <packPayload+0x90>
	}
	temp_buff[out_lenght++] = END_CHAR;
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	1c5a      	adds	r2, r3, #1
 8001c7c:	61ba      	str	r2, [r7, #24]
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	2129      	movs	r1, #41	; 0x29
 8001c82:	54d1      	strb	r1, [r2, r3]

	memmove(output_buff, temp_buff, out_lenght);
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4619      	mov	r1, r3
 8001c8a:	68b8      	ldr	r0, [r7, #8]
 8001c8c:	f013 fd1b 	bl	80156c6 <memmove>

	return out_lenght;
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	46ad      	mov	sp, r5
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3720      	adds	r7, #32
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bdb0      	pop	{r4, r5, r7, pc}

08001c9c <unPackPayload>:
 *  in_lenght		: lenght of input_buff
 *
 *  returns:		: lenght of output_buff
 *  				  -1 if error
 */
int32_t	unPackPayload	(uint8_t *message_buff, int32_t in_lenght) {
 8001c9c:	b5b0      	push	{r4, r5, r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
 8001ca6:	466b      	mov	r3, sp
 8001ca8:	461d      	mov	r5, r3
	// if (in_lenght < MIN_MESSAGE_LENGHT) {
	// 	return -1;
	// }// check minimum lenght

	if ( (START_CHAR != message_buff[0]) || (END_CHAR != message_buff[in_lenght - 1]) ) {
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	2b28      	cmp	r3, #40	; 0x28
 8001cb0:	d106      	bne.n	8001cc0 <unPackPayload+0x24>
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	4413      	add	r3, r2
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b29      	cmp	r3, #41	; 0x29
 8001cbe:	d002      	beq.n	8001cc6 <unPackPayload+0x2a>
		return -1;
 8001cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc4:	e055      	b.n	8001d72 <unPackPayload+0xd6>
	}// check start char and end char

	int32_t out_lenght = in_lenght - 2;
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	3b02      	subs	r3, #2
 8001cca:	613b      	str	r3, [r7, #16]
//		if ( (START_CHAR == message_buff[i]) || (END_CHAR == message_buff[i]) || (ADD_CHAR == message_buff[i]) ) {
//			out_lenght--;
//		}
//	}// compute output buffer lenght

	uint8_t temp_buff[out_lenght];
 8001ccc:	6938      	ldr	r0, [r7, #16]
 8001cce:	1e43      	subs	r3, r0, #1
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	f04f 0200 	mov.w	r2, #0
 8001cda:	f04f 0300 	mov.w	r3, #0
 8001cde:	f04f 0400 	mov.w	r4, #0
 8001ce2:	00d4      	lsls	r4, r2, #3
 8001ce4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001ce8:	00cb      	lsls	r3, r1, #3
 8001cea:	4603      	mov	r3, r0
 8001cec:	4619      	mov	r1, r3
 8001cee:	f04f 0200 	mov.w	r2, #0
 8001cf2:	f04f 0300 	mov.w	r3, #0
 8001cf6:	f04f 0400 	mov.w	r4, #0
 8001cfa:	00d4      	lsls	r4, r2, #3
 8001cfc:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001d00:	00cb      	lsls	r3, r1, #3
 8001d02:	4603      	mov	r3, r0
 8001d04:	3307      	adds	r3, #7
 8001d06:	08db      	lsrs	r3, r3, #3
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	ebad 0d03 	sub.w	sp, sp, r3
 8001d0e:	466b      	mov	r3, sp
 8001d10:	3300      	adds	r3, #0
 8001d12:	60bb      	str	r3, [r7, #8]

	out_lenght = 0;
 8001d14:	2300      	movs	r3, #0
 8001d16:	613b      	str	r3, [r7, #16]
	for (int32_t i = 0; i < (in_lenght - 1); i++) {
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]
 8001d1c:	e017      	b.n	8001d4e <unPackPayload+0xb2>
		if ( (START_CHAR == message_buff[i]) ||	(END_CHAR == message_buff[i]) ) {
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	4413      	add	r3, r2
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2b28      	cmp	r3, #40	; 0x28
 8001d28:	d00e      	beq.n	8001d48 <unPackPayload+0xac>
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	4413      	add	r3, r2
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b29      	cmp	r3, #41	; 0x29
 8001d34:	d008      	beq.n	8001d48 <unPackPayload+0xac>
			;
//		} else if ( (ADD_CHAR == message_buff[i]) ) {
//			temp_buff[out_lenght++] = message_buff[++i] ^ XOR_CHAR;
		}
		else {
			temp_buff[out_lenght++] = message_buff[i];
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	441a      	add	r2, r3
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	1c59      	adds	r1, r3, #1
 8001d40:	6139      	str	r1, [r7, #16]
 8001d42:	7811      	ldrb	r1, [r2, #0]
 8001d44:	68ba      	ldr	r2, [r7, #8]
 8001d46:	54d1      	strb	r1, [r2, r3]
	for (int32_t i = 0; i < (in_lenght - 1); i++) {
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	617b      	str	r3, [r7, #20]
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	3b01      	subs	r3, #1
 8001d52:	697a      	ldr	r2, [r7, #20]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	dbe2      	blt.n	8001d1e <unPackPayload+0x82>
		}
	}
	memset((uint8_t*)message_buff, 0, in_lenght);
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f013 fcca 	bl	80156f8 <memset>
	memmove(message_buff, temp_buff, out_lenght);
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	4619      	mov	r1, r3
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f013 fcab 	bl	80156c6 <memmove>

	return out_lenght;
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	46ad      	mov	sp, r5
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3718      	adds	r7, #24
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bdb0      	pop	{r4, r5, r7, pc}

08001d7c <MX_DMA_Init>:
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	2300      	movs	r3, #0
 8001d84:	607b      	str	r3, [r7, #4]
 8001d86:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <MX_DMA_Init+0x3c>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	4a0b      	ldr	r2, [pc, #44]	; (8001db8 <MX_DMA_Init+0x3c>)
 8001d8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d90:	6313      	str	r3, [r2, #48]	; 0x30
 8001d92:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <MX_DMA_Init+0x3c>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d9a:	607b      	str	r3, [r7, #4]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2105      	movs	r1, #5
 8001da2:	200f      	movs	r0, #15
 8001da4:	f009 f8ea 	bl	800af7c <HAL_NVIC_SetPriority>
 8001da8:	200f      	movs	r0, #15
 8001daa:	f009 f903 	bl	800afb4 <HAL_NVIC_EnableIRQ>
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40023800 	.word	0x40023800

08001dbc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	4a07      	ldr	r2, [pc, #28]	; (8001de8 <vApplicationGetIdleTaskMemory+0x2c>)
 8001dcc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	4a06      	ldr	r2, [pc, #24]	; (8001dec <vApplicationGetIdleTaskMemory+0x30>)
 8001dd2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dda:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8001ddc:	bf00      	nop
 8001dde:	3714      	adds	r7, #20
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	20000ffc 	.word	0x20000ffc
 8001dec:	20001050 	.word	0x20001050

08001df0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001df0:	b5b0      	push	{r4, r5, r7, lr}
 8001df2:	b094      	sub	sp, #80	; 0x50
 8001df4:	af00      	add	r7, sp, #0
       
  /* USER CODE END Init */

  /* Create the mutex(es) */
  /* definition and creation of usbTxMutex */
  osMutexDef(usbTxMutex);
 8001df6:	2300      	movs	r3, #0
 8001df8:	64bb      	str	r3, [r7, #72]	; 0x48
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	64fb      	str	r3, [r7, #76]	; 0x4c
  usbTxMutexHandle = osMutexCreate(osMutex(usbTxMutex));
 8001dfe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e02:	4618      	mov	r0, r3
 8001e04:	f00f fe60 	bl	8011ac8 <osMutexCreate>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	4b1d      	ldr	r3, [pc, #116]	; (8001e80 <MX_FREERTOS_Init+0x90>)
 8001e0c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	  /* Create the queue(s) */
	  /* definition and creation of commandMail */
	  osMailQDef(commandMail, 1, DUTY_Command_TypeDef);
 8001e0e:	2301      	movs	r3, #1
 8001e10:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e12:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
 8001e16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e18:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e1c:	643b      	str	r3, [r7, #64]	; 0x40
	  commandMailHandle = osMailCreate(osMailQ(commandMail), NULL);
 8001e1e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e22:	2100      	movs	r1, #0
 8001e24:	4618      	mov	r0, r3
 8001e26:	f00f ffeb 	bl	8011e00 <osMailCreate>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	4b15      	ldr	r3, [pc, #84]	; (8001e84 <MX_FREERTOS_Init+0x94>)
 8001e2e:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityHigh, 0, 2048);
 8001e30:	4b15      	ldr	r3, [pc, #84]	; (8001e88 <MX_FREERTOS_Init+0x98>)
 8001e32:	f107 041c 	add.w	r4, r7, #28
 8001e36:	461d      	mov	r5, r3
 8001e38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e3c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001e40:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001e44:	f107 031c 	add.w	r3, r7, #28
 8001e48:	2100      	movs	r1, #0
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f00f fd4f 	bl	80118ee <osThreadCreate>
 8001e50:	4602      	mov	r2, r0
 8001e52:	4b0e      	ldr	r3, [pc, #56]	; (8001e8c <MX_FREERTOS_Init+0x9c>)
 8001e54:	601a      	str	r2, [r3, #0]

  /* definition and creation of USB_RX_Check_ */
  osThreadDef(USB_RX_Check_, Start_USB_RX_Task, osPriorityNormal, 0, 1024);
 8001e56:	4b0e      	ldr	r3, [pc, #56]	; (8001e90 <MX_FREERTOS_Init+0xa0>)
 8001e58:	463c      	mov	r4, r7
 8001e5a:	461d      	mov	r5, r3
 8001e5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e60:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001e64:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  USB_RX_Check_Handle = osThreadCreate(osThread(USB_RX_Check_), NULL);
 8001e68:	463b      	mov	r3, r7
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f00f fd3e 	bl	80118ee <osThreadCreate>
 8001e72:	4602      	mov	r2, r0
 8001e74:	4b07      	ldr	r3, [pc, #28]	; (8001e94 <MX_FREERTOS_Init+0xa4>)
 8001e76:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001e78:	bf00      	nop
 8001e7a:	3750      	adds	r7, #80	; 0x50
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bdb0      	pop	{r4, r5, r7, pc}
 8001e80:	200052b8 	.word	0x200052b8
 8001e84:	200052bc 	.word	0x200052bc
 8001e88:	0801ad48 	.word	0x0801ad48
 8001e8c:	200052b4 	.word	0x200052b4
 8001e90:	0801ad74 	.word	0x0801ad74
 8001e94:	200052c0 	.word	0x200052c0

08001e98 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001e98:	b5b0      	push	{r4, r5, r7, lr}
 8001e9a:	ed2d 8b02 	vpush	{d8}
 8001e9e:	f5ad 6df5 	sub.w	sp, sp, #1960	; 0x7a8
 8001ea2:	af66      	add	r7, sp, #408	; 0x198
 8001ea4:	f107 0314 	add.w	r3, r7, #20
 8001ea8:	6018      	str	r0, [r3, #0]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001eaa:	f012 fe87 	bl	8014bbc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  HAL_GPIO_WritePin(USB_SIGN_GPIO_Port, USB_SIGN_Pin, GPIO_PIN_SET); // Pull-up Resistor
 8001eae:	2201      	movs	r2, #1
 8001eb0:	2110      	movs	r1, #16
 8001eb2:	48c5      	ldr	r0, [pc, #788]	; (80021c8 <StartDefaultTask+0x330>)
 8001eb4:	f009 fdc4 	bl	800ba40 <HAL_GPIO_WritePin>

  osEvent 				ret_mail;
  DUTY_Command_TypeDef 	duty_cmd;
  DUTY_Command_TypeDef 	*dataMail;
  uint8_t 				isNewDuty = FALSE;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	f887 360f 	strb.w	r3, [r7, #1551]	; 0x60f
  SCARA_KeyStateTypeDef		current_key_state;
  SCARA_KeyTypeDef			current_key;
  int32_t					current_key_speed;
  double						run_time;

  LOG_REPORT("free_rtos.c: PROGRAM START...", __LINE__);
 8001ebe:	21cd      	movs	r1, #205	; 0xcd
 8001ec0:	48c2      	ldr	r0, [pc, #776]	; (80021cc <StartDefaultTask+0x334>)
 8001ec2:	f7ff fb8d 	bl	80015e0 <LOG_REPORT>

  // Init value
  current_method = scaraGetMethod();
 8001ec6:	f006 ffd5 	bl	8008e74 <scaraGetMethod>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	f887 35fb 	strb.w	r3, [r7, #1531]	; 0x5fb
  current_mode	 = scaraGetMode();
 8001ed0:	f006 ffc4 	bl	8008e5c <scaraGetMode>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	f887 35fa 	strb.w	r3, [r7, #1530]	; 0x5fa
  current_duty_state	 = scaraGetDutyState();
 8001eda:	f006 ffd7 	bl	8008e8c <scaraGetDutyState>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	f887 35f9 	strb.w	r3, [r7, #1529]	; 0x5f9

  // Start up robot
  scaraStartup();
 8001ee4:	f002 fc12 	bl	800470c <scaraStartup>
  osDelay(10);
 8001ee8:	200a      	movs	r0, #10
 8001eea:	f00f fd4c 	bl	8011986 <osDelay>

  positionNext.Theta1 = -PI/3;
 8001eee:	4ab8      	ldr	r2, [pc, #736]	; (80021d0 <StartDefaultTask+0x338>)
 8001ef0:	a4b1      	add	r4, pc, #708	; (adr r4, 80021b8 <StartDefaultTask+0x320>)
 8001ef2:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001ef6:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
  positionNext.Theta2 = PI/3;
 8001efa:	4ab5      	ldr	r2, [pc, #724]	; (80021d0 <StartDefaultTask+0x338>)
 8001efc:	a4b0      	add	r4, pc, #704	; (adr r4, 80021c0 <StartDefaultTask+0x328>)
 8001efe:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001f02:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
  positionNext.D3 = 10;
 8001f06:	4ab2      	ldr	r2, [pc, #712]	; (80021d0 <StartDefaultTask+0x338>)
 8001f08:	f04f 0300 	mov.w	r3, #0
 8001f0c:	4cb1      	ldr	r4, [pc, #708]	; (80021d4 <StartDefaultTask+0x33c>)
 8001f0e:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
  positionNext.Theta4 = 0;
 8001f12:	4aaf      	ldr	r2, [pc, #700]	; (80021d0 <StartDefaultTask+0x338>)
 8001f14:	f04f 0300 	mov.w	r3, #0
 8001f18:	f04f 0400 	mov.w	r4, #0
 8001f1c:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
  positionNext.t = 0;
 8001f20:	4aab      	ldr	r2, [pc, #684]	; (80021d0 <StartDefaultTask+0x338>)
 8001f22:	f04f 0300 	mov.w	r3, #0
 8001f26:	f04f 0400 	mov.w	r4, #0
 8001f2a:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
  kinematicForward(&positionNext);
 8001f2e:	48a8      	ldr	r0, [pc, #672]	; (80021d0 <StartDefaultTask+0x338>)
 8001f30:	f000 ffce 	bl	8002ed0 <kinematicForward>
  /* Infinite loop */
//Start Timer 7
	  HAL_TIM_Base_Start_IT(&htim7);
 8001f34:	48a8      	ldr	r0, [pc, #672]	; (80021d8 <StartDefaultTask+0x340>)
 8001f36:	f00b fc3c 	bl	800d7b2 <HAL_TIM_Base_Start_IT>
  for(;;)
  {
	  /*---------Wait for Timer Trigger-----------*/
	  osSignalWait(0x01, osWaitForever); // Very Important
 8001f3a:	463b      	mov	r3, r7
 8001f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f40:	2101      	movs	r1, #1
 8001f42:	4618      	mov	r0, r3
 8001f44:	f00f fd74 	bl	8011a30 <osSignalWait>
	  /* 1--- Reset Value ---*/
	  respond_lenght		= 0;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	f8c7 3608 	str.w	r3, [r7, #1544]	; 0x608
	  respond_packed_lenght = 0;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	f8c7 3600 	str.w	r3, [r7, #1536]	; 0x600
	  infor_lenght			= 0;
 8001f54:	2300      	movs	r3, #0
 8001f56:	f8c7 3604 	str.w	r3, [r7, #1540]	; 0x604
	  infor_packed_lenght	= 0;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
	  task_usb_lenght		= 0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
	  usb_lenght			= 0;
 8001f66:	2300      	movs	r3, #0
 8001f68:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8
	  // Update new position
	  memcpy(&positionPrevios, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 8001f6c:	4a9b      	ldr	r2, [pc, #620]	; (80021dc <StartDefaultTask+0x344>)
 8001f6e:	4b9c      	ldr	r3, [pc, #624]	; (80021e0 <StartDefaultTask+0x348>)
 8001f70:	4610      	mov	r0, r2
 8001f72:	4619      	mov	r1, r3
 8001f74:	23b8      	movs	r3, #184	; 0xb8
 8001f76:	461a      	mov	r2, r3
 8001f78:	f013 fb9a 	bl	80156b0 <memcpy>
	  memcpy(&positionCurrent, &positionNext, sizeof(SCARA_PositionTypeDef));
 8001f7c:	4a98      	ldr	r2, [pc, #608]	; (80021e0 <StartDefaultTask+0x348>)
 8001f7e:	4b94      	ldr	r3, [pc, #592]	; (80021d0 <StartDefaultTask+0x338>)
 8001f80:	4610      	mov	r0, r2
 8001f82:	4619      	mov	r1, r3
 8001f84:	23b8      	movs	r3, #184	; 0xb8
 8001f86:	461a      	mov	r2, r3
 8001f88:	f013 fb92 	bl	80156b0 <memcpy>
#ifndef SIMULATION
	  if(scaraIsScanLimit()) {
 8001f8c:	f006 ff8a 	bl	8008ea4 <scaraIsScanLimit>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d017      	beq.n	8001fc6 <StartDefaultTask+0x12e>
		  lowlayer_readTruePosition(&positionTrue);
 8001f96:	4893      	ldr	r0, [pc, #588]	; (80021e4 <StartDefaultTask+0x34c>)
 8001f98:	f001 fe8e 	bl	8003cb8 <lowlayer_readTruePosition>
		  kinematicForward(&positionTrue);
 8001f9c:	4891      	ldr	r0, [pc, #580]	; (80021e4 <StartDefaultTask+0x34c>)
 8001f9e:	f000 ff97 	bl	8002ed0 <kinematicForward>
		  positionTrue.t = positionCurrent.t;
 8001fa2:	4b8f      	ldr	r3, [pc, #572]	; (80021e0 <StartDefaultTask+0x348>)
 8001fa4:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8001fa8:	4a8e      	ldr	r2, [pc, #568]	; (80021e4 <StartDefaultTask+0x34c>)
 8001faa:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		  positionTrue.total_time = positionCurrent.total_time;
 8001fae:	4b8c      	ldr	r3, [pc, #560]	; (80021e0 <StartDefaultTask+0x348>)
 8001fb0:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
 8001fb4:	4a8b      	ldr	r2, [pc, #556]	; (80021e4 <StartDefaultTask+0x34c>)
 8001fb6:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
		  positionTrue.q = positionCurrent.q;
 8001fba:	4b89      	ldr	r3, [pc, #548]	; (80021e0 <StartDefaultTask+0x348>)
 8001fbc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001fc0:	4a88      	ldr	r2, [pc, #544]	; (80021e4 <StartDefaultTask+0x34c>)
 8001fc2:	e9c2 3400 	strd	r3, r4, [r2]
	  }
#endif
	  /* 2--- Check New Duty Phase ---*/
	  // Check mail
	  ret_mail = osMailGet(commandMailHandle, 0);
 8001fc6:	4b88      	ldr	r3, [pc, #544]	; (80021e8 <StartDefaultTask+0x350>)
 8001fc8:	6819      	ldr	r1, [r3, #0]
 8001fca:	f207 53d4 	addw	r3, r7, #1492	; 0x5d4
 8001fce:	2200      	movs	r2, #0
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f00f ffc1 	bl	8011f58 <osMailGet>
	  if ( ret_mail.status == osEventMail) {
 8001fd6:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 8001fda:	2b20      	cmp	r3, #32
 8001fdc:	d116      	bne.n	800200c <StartDefaultTask+0x174>
		   dataMail = ret_mail.value.p;
 8001fde:	f8d7 35d8 	ldr.w	r3, [r7, #1496]	; 0x5d8
 8001fe2:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
		   memcpy( &duty_cmd, dataMail, sizeof(DUTY_Command_TypeDef));
 8001fe6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001fea:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
 8001fee:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f013 fb5c 	bl	80156b0 <memcpy>
		   isNewDuty = TRUE;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	f887 360f 	strb.w	r3, [r7, #1551]	; 0x60f
		   osMailFree(commandMailHandle, dataMail);/* free memory allocated for mail */
 8001ffe:	4b7a      	ldr	r3, [pc, #488]	; (80021e8 <StartDefaultTask+0x350>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 8002006:	4618      	mov	r0, r3
 8002008:	f010 f81a 	bl	8012040 <osMailFree>
	  }
	  if(isNewDuty) {
 800200c:	f897 360f 	ldrb.w	r3, [r7, #1551]	; 0x60f
 8002010:	2b00      	cmp	r3, #0
 8002012:	f000 8151 	beq.w	80022b8 <StartDefaultTask+0x420>
		  memset(respond, 0, 40);
 8002016:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800201a:	2228      	movs	r2, #40	; 0x28
 800201c:	2100      	movs	r1, #0
 800201e:	4618      	mov	r0, r3
 8002020:	f013 fb6a 	bl	80156f8 <memset>
		  // Check change method
		  if (duty_cmd.change_method == TRUE) {
 8002024:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d13c      	bne.n	80020a8 <StartDefaultTask+0x210>
			  if (SCARA_METHOD_MANUAL == duty_cmd.robot_method) {
 800202e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002032:	785b      	ldrb	r3, [r3, #1]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d10e      	bne.n	8002056 <StartDefaultTask+0x1be>
				  // Need add check condition idle in each method
				  current_method = SCARA_METHOD_MANUAL;
 8002038:	2300      	movs	r3, #0
 800203a:	f887 35fb 	strb.w	r3, [r7, #1531]	; 0x5fb
				  respond_lenght = commandRespond(RPD_OK,
 800203e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002042:	6899      	ldr	r1, [r3, #8]
 8002044:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002048:	4a68      	ldr	r2, [pc, #416]	; (80021ec <StartDefaultTask+0x354>)
 800204a:	2008      	movs	r0, #8
 800204c:	f7ff fa78 	bl	8001540 <commandRespond>
 8002050:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
 8002054:	e12d      	b.n	80022b2 <StartDefaultTask+0x41a>
												duty_cmd.id_command,
												"Changed MANUAL Method",
												(char *)respond);
			  } else if (SCARA_METHOD_SEMI_AUTO == duty_cmd.robot_method) {
 8002056:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800205a:	785b      	ldrb	r3, [r3, #1]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d10e      	bne.n	800207e <StartDefaultTask+0x1e6>
				  current_method = SCARA_METHOD_SEMI_AUTO;
 8002060:	2301      	movs	r3, #1
 8002062:	f887 35fb 	strb.w	r3, [r7, #1531]	; 0x5fb
				  respond_lenght = commandRespond(RPD_OK,
 8002066:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800206a:	6899      	ldr	r1, [r3, #8]
 800206c:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002070:	4a5f      	ldr	r2, [pc, #380]	; (80021f0 <StartDefaultTask+0x358>)
 8002072:	2008      	movs	r0, #8
 8002074:	f7ff fa64 	bl	8001540 <commandRespond>
 8002078:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
 800207c:	e119      	b.n	80022b2 <StartDefaultTask+0x41a>
												duty_cmd.id_command,
												"Changed SEMI AUTO Method",
												(char *)respond);
			  } else if (SCARA_METHOD_AUTO == duty_cmd.robot_method) {
 800207e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002082:	785b      	ldrb	r3, [r3, #1]
 8002084:	2b02      	cmp	r3, #2
 8002086:	f040 8114 	bne.w	80022b2 <StartDefaultTask+0x41a>
				  current_method = SCARA_METHOD_AUTO;
 800208a:	2302      	movs	r3, #2
 800208c:	f887 35fb 	strb.w	r3, [r7, #1531]	; 0x5fb
				  respond_lenght = commandRespond(RPD_OK,
 8002090:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002094:	6899      	ldr	r1, [r3, #8]
 8002096:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800209a:	4a56      	ldr	r2, [pc, #344]	; (80021f4 <StartDefaultTask+0x35c>)
 800209c:	2008      	movs	r0, #8
 800209e:	f7ff fa4f 	bl	8001540 <commandRespond>
 80020a2:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
 80020a6:	e104      	b.n	80022b2 <StartDefaultTask+0x41a>
												"Changed AUTO Method",
												(char *)respond);
			  }
		  } else {
			  	  // Check current method & cmd method
			  	  if (current_method == duty_cmd.robot_method) {
 80020a8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80020ac:	785b      	ldrb	r3, [r3, #1]
 80020ae:	f897 25fb 	ldrb.w	r2, [r7, #1531]	; 0x5fb
 80020b2:	429a      	cmp	r2, r3
 80020b4:	f040 80ee 	bne.w	8002294 <StartDefaultTask+0x3fc>
				  	  switch( duty_cmd.robot_method) {
 80020b8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80020bc:	785b      	ldrb	r3, [r3, #1]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d030      	beq.n	8002124 <StartDefaultTask+0x28c>
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	f000 80f2 	beq.w	80022ac <StartDefaultTask+0x414>
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f040 80dd 	bne.w	8002288 <StartDefaultTask+0x3f0>
				  	  case SCARA_METHOD_MANUAL:
				  	  {
				  		  if (current_key_state == SCARA_KEY_STATE_READY) {
 80020ce:	f897 35f7 	ldrb.w	r3, [r7, #1527]	; 0x5f7
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d10d      	bne.n	80020f2 <StartDefaultTask+0x25a>
				  			  current_key = duty_cmd.keyboard;
 80020d6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80020da:	78db      	ldrb	r3, [r3, #3]
 80020dc:	f887 35f6 	strb.w	r3, [r7, #1526]	; 0x5f6
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Init new path
 80020e0:	2301      	movs	r3, #1
 80020e2:	f887 35f7 	strb.w	r3, [r7, #1527]	; 0x5f7
				  			  current_key_speed = duty_cmd.key_speed;
 80020e6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f8c7 35f0 	str.w	r3, [r7, #1520]	; 0x5f0
				  				  	  && current_key_state == SCARA_KEY_STATE_FLOW
									  && current_key_speed == duty_cmd.key_speed) {
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Continue old path
				  		  }
				  	  }
				  	  break;
 80020f0:	e0de      	b.n	80022b0 <StartDefaultTask+0x418>
				  		  } else if (current_key == duty_cmd.keyboard
 80020f2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80020f6:	78db      	ldrb	r3, [r3, #3]
 80020f8:	f897 25f6 	ldrb.w	r2, [r7, #1526]	; 0x5f6
 80020fc:	429a      	cmp	r2, r3
 80020fe:	f040 80d7 	bne.w	80022b0 <StartDefaultTask+0x418>
				  				  	  && current_key_state == SCARA_KEY_STATE_FLOW
 8002102:	f897 35f7 	ldrb.w	r3, [r7, #1527]	; 0x5f7
 8002106:	2b02      	cmp	r3, #2
 8002108:	f040 80d2 	bne.w	80022b0 <StartDefaultTask+0x418>
									  && current_key_speed == duty_cmd.key_speed) {
 800210c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f8d7 25f0 	ldr.w	r2, [r7, #1520]	; 0x5f0
 8002116:	429a      	cmp	r2, r3
 8002118:	f040 80ca 	bne.w	80022b0 <StartDefaultTask+0x418>
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Continue old path
 800211c:	2301      	movs	r3, #1
 800211e:	f887 35f7 	strb.w	r3, [r7, #1527]	; 0x5f7
				  	  break;
 8002122:	e0c5      	b.n	80022b0 <StartDefaultTask+0x418>
				  	  case SCARA_METHOD_SEMI_AUTO:
				  	  {
						  switch( duty_cmd.robot_mode) {
 8002124:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002128:	789b      	ldrb	r3, [r3, #2]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d018      	beq.n	8002160 <StartDefaultTask+0x2c8>
 800212e:	2b02      	cmp	r3, #2
 8002130:	d06c      	beq.n	800220c <StartDefaultTask+0x374>
 8002132:	2b00      	cmp	r3, #0
 8002134:	f040 80a1 	bne.w	800227a <StartDefaultTask+0x3e2>
						  case SCARA_MODE_STOP:
							  {
								  current_mode	 = SCARA_MODE_STOP;
 8002138:	2300      	movs	r3, #0
 800213a:	f887 35fa 	strb.w	r3, [r7, #1530]	; 0x5fa
								  respond_lenght = commandRespond(RPD_OK,
 800213e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002142:	6899      	ldr	r1, [r3, #8]
 8002144:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002148:	4a2b      	ldr	r2, [pc, #172]	; (80021f8 <StartDefaultTask+0x360>)
 800214a:	2008      	movs	r0, #8
 800214c:	f7ff f9f8 	bl	8001540 <commandRespond>
 8002150:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
																  duty_cmd.id_command,
																  "Stop Now",
																  (char *)respond);
								  LOG_REPORT("ROBOT STOP !!!", __LINE__);
 8002154:	f44f 719a 	mov.w	r1, #308	; 0x134
 8002158:	4828      	ldr	r0, [pc, #160]	; (80021fc <StartDefaultTask+0x364>)
 800215a:	f7ff fa41 	bl	80015e0 <LOG_REPORT>
							  }
							  break;
 800215e:	e092      	b.n	8002286 <StartDefaultTask+0x3ee>

						  case SCARA_MODE_SCAN:
							  {
								  if (SCARA_MODE_DUTY == current_mode
 8002160:	f897 35fa 	ldrb.w	r3, [r7, #1530]	; 0x5fa
 8002164:	2b02      	cmp	r3, #2
 8002166:	d115      	bne.n	8002194 <StartDefaultTask+0x2fc>
									  && SCARA_DUTY_STATE_READY == current_duty_state) {
 8002168:	f897 35f9 	ldrb.w	r3, [r7, #1529]	; 0x5f9
 800216c:	2b00      	cmp	r3, #0
 800216e:	d111      	bne.n	8002194 <StartDefaultTask+0x2fc>
									  current_mode = SCARA_MODE_SCAN;
 8002170:	2301      	movs	r3, #1
 8002172:	f887 35fa 	strb.w	r3, [r7, #1530]	; 0x5fa
									  current_scan_state = SCARA_SCAN_STATE_INIT;
 8002176:	2300      	movs	r3, #0
 8002178:	f887 35f8 	strb.w	r3, [r7, #1528]	; 0x5f8
									  respond_lenght = commandRespond(RPD_OK,
 800217c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002180:	6899      	ldr	r1, [r3, #8]
 8002182:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002186:	4a1e      	ldr	r2, [pc, #120]	; (8002200 <StartDefaultTask+0x368>)
 8002188:	2008      	movs	r0, #8
 800218a:	f7ff f9d9 	bl	8001540 <commandRespond>
 800218e:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
																	  "Busy",
																	  (char *)respond);
									  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
								  }
							  }
							  break;
 8002192:	e078      	b.n	8002286 <StartDefaultTask+0x3ee>
									  respond_lenght = commandRespond(RPD_ERROR,
 8002194:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002198:	6899      	ldr	r1, [r3, #8]
 800219a:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800219e:	4a19      	ldr	r2, [pc, #100]	; (8002204 <StartDefaultTask+0x36c>)
 80021a0:	2007      	movs	r0, #7
 80021a2:	f7ff f9cd 	bl	8001540 <commandRespond>
 80021a6:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
									  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
 80021aa:	f240 1147 	movw	r1, #327	; 0x147
 80021ae:	4816      	ldr	r0, [pc, #88]	; (8002208 <StartDefaultTask+0x370>)
 80021b0:	f7ff fa16 	bl	80015e0 <LOG_REPORT>
							  break;
 80021b4:	e067      	b.n	8002286 <StartDefaultTask+0x3ee>
 80021b6:	bf00      	nop
 80021b8:	40000000 	.word	0x40000000
 80021bc:	bff0c152 	.word	0xbff0c152
 80021c0:	40000000 	.word	0x40000000
 80021c4:	3ff0c152 	.word	0x3ff0c152
 80021c8:	40020400 	.word	0x40020400
 80021cc:	0801ad90 	.word	0x0801ad90
 80021d0:	20005fa8 	.word	0x20005fa8
 80021d4:	40240000 	.word	0x40240000
 80021d8:	200060a0 	.word	0x200060a0
 80021dc:	20005cc8 	.word	0x20005cc8
 80021e0:	20005e38 	.word	0x20005e38
 80021e4:	20005ef0 	.word	0x20005ef0
 80021e8:	200052bc 	.word	0x200052bc
 80021ec:	0801adb0 	.word	0x0801adb0
 80021f0:	0801adc8 	.word	0x0801adc8
 80021f4:	0801ade4 	.word	0x0801ade4
 80021f8:	0801adf8 	.word	0x0801adf8
 80021fc:	0801ae04 	.word	0x0801ae04
 8002200:	0801ae14 	.word	0x0801ae14
 8002204:	0801ae20 	.word	0x0801ae20
 8002208:	0801ae28 	.word	0x0801ae28

						  case SCARA_MODE_DUTY:
							  {
								  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_duty_state) {
 800220c:	f897 35fa 	ldrb.w	r3, [r7, #1530]	; 0x5fa
 8002210:	2b02      	cmp	r3, #2
 8002212:	d120      	bne.n	8002256 <StartDefaultTask+0x3be>
 8002214:	f897 35f9 	ldrb.w	r3, [r7, #1529]	; 0x5f9
 8002218:	2b00      	cmp	r3, #0
 800221a:	d11c      	bne.n	8002256 <StartDefaultTask+0x3be>
									  if (scaraIsScanLimit()) {
 800221c:	f006 fe42 	bl	8008ea4 <scaraIsScanLimit>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d006      	beq.n	8002234 <StartDefaultTask+0x39c>
										  current_mode	 = SCARA_MODE_DUTY;
 8002226:	2302      	movs	r3, #2
 8002228:	f887 35fa 	strb.w	r3, [r7, #1530]	; 0x5fa
										  current_duty_state	 = SCARA_DUTY_STATE_INIT;
 800222c:	2301      	movs	r3, #1
 800222e:	f887 35f9 	strb.w	r3, [r7, #1529]	; 0x5f9
									  if (scaraIsScanLimit()) {
 8002232:	e021      	b.n	8002278 <StartDefaultTask+0x3e0>
									  } else {
										  respond_lenght = commandRespond(RPD_ERROR,
 8002234:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002238:	6899      	ldr	r1, [r3, #8]
 800223a:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800223e:	4ad0      	ldr	r2, [pc, #832]	; (8002580 <StartDefaultTask+0x6e8>)
 8002240:	2007      	movs	r0, #7
 8002242:	f7ff f97d 	bl	8001540 <commandRespond>
 8002246:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
																		  duty_cmd.id_command,
																		  "Has Not Scan Yet.",
																		  (char *)respond);
										  LOG_REPORT("MOVE FAIL:NOT SCAN", __LINE__);
 800224a:	f240 1157 	movw	r1, #343	; 0x157
 800224e:	48cd      	ldr	r0, [pc, #820]	; (8002584 <StartDefaultTask+0x6ec>)
 8002250:	f7ff f9c6 	bl	80015e0 <LOG_REPORT>
									  if (scaraIsScanLimit()) {
 8002254:	e010      	b.n	8002278 <StartDefaultTask+0x3e0>
									  }
								  } else {
									  respond_lenght	= commandRespond(RPD_ERROR,
 8002256:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800225a:	6899      	ldr	r1, [r3, #8]
 800225c:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002260:	4ac9      	ldr	r2, [pc, #804]	; (8002588 <StartDefaultTask+0x6f0>)
 8002262:	2007      	movs	r0, #7
 8002264:	f7ff f96c 	bl	8001540 <commandRespond>
 8002268:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
																		  duty_cmd.id_command,
																		  "Busy.",
																		  (char *)respond);
									  LOG_REPORT("MOVE FAIL:BUSY", __LINE__);
 800226c:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8002270:	48c6      	ldr	r0, [pc, #792]	; (800258c <StartDefaultTask+0x6f4>)
 8002272:	f7ff f9b5 	bl	80015e0 <LOG_REPORT>
								  }
							  }
							  break;
 8002276:	e006      	b.n	8002286 <StartDefaultTask+0x3ee>
 8002278:	e005      	b.n	8002286 <StartDefaultTask+0x3ee>
						  default:
							  {
								  LOG_REPORT("CMD Error Mode !!!", __LINE__);
 800227a:	f44f 71b2 	mov.w	r1, #356	; 0x164
 800227e:	48c4      	ldr	r0, [pc, #784]	; (8002590 <StartDefaultTask+0x6f8>)
 8002280:	f7ff f9ae 	bl	80015e0 <LOG_REPORT>
							  }
						  }
					  }
					  break;
 8002284:	e015      	b.n	80022b2 <StartDefaultTask+0x41a>
 8002286:	e014      	b.n	80022b2 <StartDefaultTask+0x41a>

				  	  }
				  	  break;
				  	  default:
				  	  {
				  		  LOG_REPORT("CMD Error Method !!!", __LINE__);
 8002288:	f44f 71b8 	mov.w	r1, #368	; 0x170
 800228c:	48c1      	ldr	r0, [pc, #772]	; (8002594 <StartDefaultTask+0x6fc>)
 800228e:	f7ff f9a7 	bl	80015e0 <LOG_REPORT>
 8002292:	e00e      	b.n	80022b2 <StartDefaultTask+0x41a>
				  	  }
				  	  }
			  	  } else {
					  respond_lenght = commandRespond(RPD_ERROR,
 8002294:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002298:	6899      	ldr	r1, [r3, #8]
 800229a:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800229e:	4abe      	ldr	r2, [pc, #760]	; (8002598 <StartDefaultTask+0x700>)
 80022a0:	2007      	movs	r0, #7
 80022a2:	f7ff f94d 	bl	8001540 <commandRespond>
 80022a6:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
 80022aa:	e002      	b.n	80022b2 <StartDefaultTask+0x41a>
				  	  break;
 80022ac:	bf00      	nop
 80022ae:	e000      	b.n	80022b2 <StartDefaultTask+0x41a>
				  	  break;
 80022b0:	bf00      	nop
													"METHOD isn't correct",
													(char *)respond);
			  	  }

			  }
		  isNewDuty = FALSE;
 80022b2:	2300      	movs	r3, #0
 80022b4:	f887 360f 	strb.w	r3, [r7, #1551]	; 0x60f
	  }

	  /* 3--- Execute Phase ---*/
	  switch(current_method) {
 80022b8:	f897 35fb 	ldrb.w	r3, [r7, #1531]	; 0x5fb
 80022bc:	2b01      	cmp	r3, #1
 80022be:	f000 80de 	beq.w	800247e <StartDefaultTask+0x5e6>
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	f000 82b7 	beq.w	8002836 <StartDefaultTask+0x99e>
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f040 82b7 	bne.w	800283c <StartDefaultTask+0x9a4>
	  case SCARA_METHOD_MANUAL:
	  {
		  switch( current_key_state) {
 80022ce:	f897 35f7 	ldrb.w	r3, [r7, #1527]	; 0x5f7
 80022d2:	2b03      	cmp	r3, #3
 80022d4:	f200 82b1 	bhi.w	800283a <StartDefaultTask+0x9a2>
 80022d8:	a201      	add	r2, pc, #4	; (adr r2, 80022e0 <StartDefaultTask+0x448>)
 80022da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022de:	bf00      	nop
 80022e0:	0800247b 	.word	0x0800247b
 80022e4:	080022f1 	.word	0x080022f1
 80022e8:	0800234b 	.word	0x0800234b
 80022ec:	08002449 	.word	0x08002449
		  case SCARA_KEY_STATE_READY:
			  /* Wait for application keyboard , do nothing*/
		  break;
		  case SCARA_KEY_STATE_INIT:
		  {
			  if (scaraKeyInit(current_key, current_key_speed, &run_time) == SCARA_STATUS_OK) {
 80022f0:	f107 0218 	add.w	r2, r7, #24
 80022f4:	f897 35f6 	ldrb.w	r3, [r7, #1526]	; 0x5f6
 80022f8:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 80022fc:	4618      	mov	r0, r3
 80022fe:	f006 ff47 	bl	8009190 <scaraKeyInit>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d11c      	bne.n	8002342 <StartDefaultTask+0x4aa>
				  current_key_state = SCARA_KEY_STATE_FLOW;
 8002308:	2302      	movs	r3, #2
 800230a:	f887 35f7 	strb.w	r3, [r7, #1527]	; 0x5f7
#ifdef SIMULATION
				  scaraPosition2String((char *)position, positionCurrent);
#else
				  scaraPosition2String((char *)position, positionTrue);
 800230e:	4ca3      	ldr	r4, [pc, #652]	; (800259c <StartDefaultTask+0x704>)
 8002310:	f507 755e 	add.w	r5, r7, #888	; 0x378
 8002314:	4668      	mov	r0, sp
 8002316:	f104 0308 	add.w	r3, r4, #8
 800231a:	22b0      	movs	r2, #176	; 0xb0
 800231c:	4619      	mov	r1, r3
 800231e:	f013 f9c7 	bl	80156b0 <memcpy>
 8002322:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002326:	4628      	mov	r0, r5
 8002328:	f006 fdf6 	bl	8008f18 <scaraPosition2String>
#endif
				  infor_lenght 		= commandRespond(RPD_START,
 800232c:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8002330:	f507 725e 	add.w	r2, r7, #888	; 0x378
 8002334:	2100      	movs	r1, #0
 8002336:	2003      	movs	r0, #3
 8002338:	f7ff f902 	bl	8001540 <commandRespond>
 800233c:	f8c7 0604 	str.w	r0, [r7, #1540]	; 0x604
													  (char *)infor);
			  } else {
				  current_key_state = SCARA_KEY_STATE_READY;
			  }
		  }
		  break;
 8002340:	e09c      	b.n	800247c <StartDefaultTask+0x5e4>
				  current_key_state = SCARA_KEY_STATE_READY;
 8002342:	2300      	movs	r3, #0
 8002344:	f887 35f7 	strb.w	r3, [r7, #1527]	; 0x5f7
		  break;
 8002348:	e098      	b.n	800247c <StartDefaultTask+0x5e4>
		  case SCARA_KEY_STATE_FLOW:
		  {
			  SCARA_StatusTypeDef status;
			  // Increase run time
			  run_time += T_SAMPLING;
 800234a:	f107 0318 	add.w	r3, r7, #24
 800234e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002352:	a389      	add	r3, pc, #548	; (adr r3, 8002578 <StartDefaultTask+0x6e0>)
 8002354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002358:	f7fd ff98 	bl	800028c <__adddf3>
 800235c:	4603      	mov	r3, r0
 800235e:	460c      	mov	r4, r1
 8002360:	f107 0218 	add.w	r2, r7, #24
 8002364:	e9c2 3400 	strd	r3, r4, [r2]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 8002368:	f107 0318 	add.w	r3, r7, #24
 800236c:	ed93 7b00 	vldr	d7, [r3]
 8002370:	eeb0 0a47 	vmov.f32	s0, s14
 8002374:	eef0 0a67 	vmov.f32	s1, s15
 8002378:	f006 fda2 	bl	8008ec0 <scaraIsFinish>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d003      	beq.n	800238a <StartDefaultTask+0x4f2>
				  current_key_state = SCARA_KEY_STATE_FINISH;// Key Done
 8002382:	2303      	movs	r3, #3
 8002384:	f887 35f7 	strb.w	r3, [r7, #1527]	; 0x5f7
													(char *)infor);
					  LOG_REPORT("STOP KEY", __LINE__);
				  }
			  }
		  }
		  break;
 8002388:	e078      	b.n	800247c <StartDefaultTask+0x5e4>
				  status = scaraKeyFlow(run_time, &positionNext, positionCurrent);
 800238a:	f107 0318 	add.w	r3, r7, #24
 800238e:	ed93 8b00 	vldr	d8, [r3]
 8002392:	4c83      	ldr	r4, [pc, #524]	; (80025a0 <StartDefaultTask+0x708>)
 8002394:	4668      	mov	r0, sp
 8002396:	f104 0308 	add.w	r3, r4, #8
 800239a:	22b0      	movs	r2, #176	; 0xb0
 800239c:	4619      	mov	r1, r3
 800239e:	f013 f987 	bl	80156b0 <memcpy>
 80023a2:	e894 000c 	ldmia.w	r4, {r2, r3}
 80023a6:	487f      	ldr	r0, [pc, #508]	; (80025a4 <StartDefaultTask+0x70c>)
 80023a8:	eeb0 0a48 	vmov.f32	s0, s16
 80023ac:	eef0 0a68 	vmov.f32	s1, s17
 80023b0:	f007 ff6c 	bl	800a28c <scaraKeyFlow>
 80023b4:	4603      	mov	r3, r0
 80023b6:	f887 35e0 	strb.w	r3, [r7, #1504]	; 0x5e0
				  if ( SCARA_STATUS_OK == status) {
 80023ba:	f897 35e0 	ldrb.w	r3, [r7, #1504]	; 0x5e0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d12c      	bne.n	800241c <StartDefaultTask+0x584>
					  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 80023c2:	4c77      	ldr	r4, [pc, #476]	; (80025a0 <StartDefaultTask+0x708>)
 80023c4:	4a77      	ldr	r2, [pc, #476]	; (80025a4 <StartDefaultTask+0x70c>)
 80023c6:	ab2a      	add	r3, sp, #168	; 0xa8
 80023c8:	4611      	mov	r1, r2
 80023ca:	22b8      	movs	r2, #184	; 0xb8
 80023cc:	4618      	mov	r0, r3
 80023ce:	f013 f96f 	bl	80156b0 <memcpy>
 80023d2:	4668      	mov	r0, sp
 80023d4:	f104 0310 	add.w	r3, r4, #16
 80023d8:	22a8      	movs	r2, #168	; 0xa8
 80023da:	4619      	mov	r1, r3
 80023dc:	f013 f968 	bl	80156b0 <memcpy>
 80023e0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80023e4:	f001 fdf8 	bl	8003fd8 <lowlayer_computeAndWritePulse>
					  scaraPosition2String((char *)position, positionTrue);
 80023e8:	4c6c      	ldr	r4, [pc, #432]	; (800259c <StartDefaultTask+0x704>)
 80023ea:	f507 755e 	add.w	r5, r7, #888	; 0x378
 80023ee:	4668      	mov	r0, sp
 80023f0:	f104 0308 	add.w	r3, r4, #8
 80023f4:	22b0      	movs	r2, #176	; 0xb0
 80023f6:	4619      	mov	r1, r3
 80023f8:	f013 f95a 	bl	80156b0 <memcpy>
 80023fc:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002400:	4628      	mov	r0, r5
 8002402:	f006 fd89 	bl	8008f18 <scaraPosition2String>
					  infor_lenght = commandRespond(RPD_RUNNING,
 8002406:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 800240a:	f507 725e 	add.w	r2, r7, #888	; 0x378
 800240e:	2100      	movs	r1, #0
 8002410:	2004      	movs	r0, #4
 8002412:	f7ff f895 	bl	8001540 <commandRespond>
 8002416:	f8c7 0604 	str.w	r0, [r7, #1540]	; 0x604
		  break;
 800241a:	e02f      	b.n	800247c <StartDefaultTask+0x5e4>
					  current_key_state = SCARA_KEY_STATE_FINISH;
 800241c:	2303      	movs	r3, #3
 800241e:	f887 35f7 	strb.w	r3, [r7, #1527]	; 0x5f7
					  infor_lenght = commandRespond(RPD_STOP,
 8002422:	f897 35e0 	ldrb.w	r3, [r7, #1504]	; 0x5e0
													(char *)DETAIL_STATUS[status],
 8002426:	4a60      	ldr	r2, [pc, #384]	; (80025a8 <StartDefaultTask+0x710>)
 8002428:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
					  infor_lenght = commandRespond(RPD_STOP,
 800242c:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8002430:	2100      	movs	r1, #0
 8002432:	2006      	movs	r0, #6
 8002434:	f7ff f884 	bl	8001540 <commandRespond>
 8002438:	f8c7 0604 	str.w	r0, [r7, #1540]	; 0x604
					  LOG_REPORT("STOP KEY", __LINE__);
 800243c:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8002440:	485a      	ldr	r0, [pc, #360]	; (80025ac <StartDefaultTask+0x714>)
 8002442:	f7ff f8cd 	bl	80015e0 <LOG_REPORT>
		  break;
 8002446:	e019      	b.n	800247c <StartDefaultTask+0x5e4>
		  case SCARA_KEY_STATE_FINISH:
		  {
			  current_key_state = SCARA_KEY_STATE_READY;
 8002448:	2300      	movs	r3, #0
 800244a:	f887 35f7 	strb.w	r3, [r7, #1527]	; 0x5f7
			  positionNext.t = 0;
 800244e:	4a55      	ldr	r2, [pc, #340]	; (80025a4 <StartDefaultTask+0x70c>)
 8002450:	f04f 0300 	mov.w	r3, #0
 8002454:	f04f 0400 	mov.w	r4, #0
 8002458:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
			  positionNext.total_time = 0;
 800245c:	4a51      	ldr	r2, [pc, #324]	; (80025a4 <StartDefaultTask+0x70c>)
 800245e:	f04f 0300 	mov.w	r3, #0
 8002462:	f04f 0400 	mov.w	r4, #0
 8002466:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
			  positionNext.q = 0;
 800246a:	4a4e      	ldr	r2, [pc, #312]	; (80025a4 <StartDefaultTask+0x70c>)
 800246c:	f04f 0300 	mov.w	r3, #0
 8002470:	f04f 0400 	mov.w	r4, #0
 8002474:	e9c2 3400 	strd	r3, r4, [r2]
		  }
		  break;
 8002478:	e000      	b.n	800247c <StartDefaultTask+0x5e4>
		  break;
 800247a:	bf00      	nop
		  }
	  }
	  break;
 800247c:	e1dd      	b.n	800283a <StartDefaultTask+0x9a2>

	  case SCARA_METHOD_SEMI_AUTO:
	  {
		  switch( current_mode) {
 800247e:	f897 35fa 	ldrb.w	r3, [r7, #1530]	; 0x5fa
 8002482:	2b01      	cmp	r3, #1
 8002484:	d00b      	beq.n	800249e <StartDefaultTask+0x606>
 8002486:	2b02      	cmp	r3, #2
 8002488:	d063      	beq.n	8002552 <StartDefaultTask+0x6ba>
 800248a:	2b00      	cmp	r3, #0
 800248c:	f040 81cc 	bne.w	8002828 <StartDefaultTask+0x990>
		  case SCARA_MODE_STOP:
			  {
				  current_mode 	= SCARA_MODE_DUTY;
 8002490:	2302      	movs	r3, #2
 8002492:	f887 35fa 	strb.w	r3, [r7, #1530]	; 0x5fa
				  current_duty_state = SCARA_DUTY_STATE_READY;
 8002496:	2300      	movs	r3, #0
 8002498:	f887 35f9 	strb.w	r3, [r7, #1529]	; 0x5f9
			  }
			  break;
 800249c:	e1ca      	b.n	8002834 <StartDefaultTask+0x99c>

		  case SCARA_MODE_SCAN:
			  {
				  switch (current_scan_state) {
 800249e:	f897 35f8 	ldrb.w	r3, [r7, #1528]	; 0x5f8
 80024a2:	2b03      	cmp	r3, #3
 80024a4:	d84b      	bhi.n	800253e <StartDefaultTask+0x6a6>
 80024a6:	a201      	add	r2, pc, #4	; (adr r2, 80024ac <StartDefaultTask+0x614>)
 80024a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ac:	080024bd 	.word	0x080024bd
 80024b0:	080024c9 	.word	0x080024c9
 80024b4:	080024db 	.word	0x080024db
 80024b8:	080024ef 	.word	0x080024ef
				  case SCARA_SCAN_STATE_INIT:
					  {
						  lowlayer_scanReset();
 80024bc:	f001 f9f0 	bl	80038a0 <lowlayer_scanReset>
						  current_scan_state = SCARA_SCAN_STATE_HARD;
 80024c0:	2301      	movs	r3, #1
 80024c2:	f887 35f8 	strb.w	r3, [r7, #1528]	; 0x5f8
					  }
					  break;
 80024c6:	e043      	b.n	8002550 <StartDefaultTask+0x6b8>
				  case SCARA_SCAN_STATE_HARD:
					  {
						  if(lowlayer_scanFlow()) {
 80024c8:	f001 fa1a 	bl	8003900 <lowlayer_scanFlow>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d03b      	beq.n	800254a <StartDefaultTask+0x6b2>
							  current_scan_state = SCARA_SCAN_STATE_SOFT;
 80024d2:	2302      	movs	r3, #2
 80024d4:	f887 35f8 	strb.w	r3, [r7, #1528]	; 0x5f8
						  }
					  }
					  break;
 80024d8:	e037      	b.n	800254a <StartDefaultTask+0x6b2>
				  case SCARA_SCAN_STATE_SOFT:
					  {
						  if(lowlayer_goToSoftLimit(&positionNext)) {
 80024da:	4832      	ldr	r0, [pc, #200]	; (80025a4 <StartDefaultTask+0x70c>)
 80024dc:	f001 fb6c 	bl	8003bb8 <lowlayer_goToSoftLimit>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d033      	beq.n	800254e <StartDefaultTask+0x6b6>
							  current_scan_state = SCARA_SCAN_STATE_FINISH;
 80024e6:	2303      	movs	r3, #3
 80024e8:	f887 35f8 	strb.w	r3, [r7, #1528]	; 0x5f8
							}
					  }
					  break;
 80024ec:	e02f      	b.n	800254e <StartDefaultTask+0x6b6>
				  case SCARA_SCAN_STATE_FINISH:
					  {
						  lowlayer_readSetPosition(&positionNext);
 80024ee:	482d      	ldr	r0, [pc, #180]	; (80025a4 <StartDefaultTask+0x70c>)
 80024f0:	f001 fcbe 	bl	8003e70 <lowlayer_readSetPosition>
						  current_mode 	= SCARA_MODE_DUTY;
 80024f4:	2302      	movs	r3, #2
 80024f6:	f887 35fa 	strb.w	r3, [r7, #1530]	; 0x5fa
						  current_duty_state = SCARA_DUTY_STATE_READY;
 80024fa:	2300      	movs	r3, #0
 80024fc:	f887 35f9 	strb.w	r3, [r7, #1529]	; 0x5f9
						  kinematicForward(&positionNext);
 8002500:	4828      	ldr	r0, [pc, #160]	; (80025a4 <StartDefaultTask+0x70c>)
 8002502:	f000 fce5 	bl	8002ed0 <kinematicForward>
						  scaraSetScanFlag();
 8002506:	f006 fc4b 	bl	8008da0 <scaraSetScanFlag>
						  //Done Inform
						  scaraPosition2String((char *)position, positionNext);
 800250a:	4c26      	ldr	r4, [pc, #152]	; (80025a4 <StartDefaultTask+0x70c>)
 800250c:	f507 755e 	add.w	r5, r7, #888	; 0x378
 8002510:	4668      	mov	r0, sp
 8002512:	f104 0308 	add.w	r3, r4, #8
 8002516:	22b0      	movs	r2, #176	; 0xb0
 8002518:	4619      	mov	r1, r3
 800251a:	f013 f8c9 	bl	80156b0 <memcpy>
 800251e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002522:	4628      	mov	r0, r5
 8002524:	f006 fcf8 	bl	8008f18 <scaraPosition2String>
						  infor_lenght 		= commandRespond(RPD_DONE,
 8002528:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 800252c:	f507 725e 	add.w	r2, r7, #888	; 0x378
 8002530:	2100      	movs	r1, #0
 8002532:	2005      	movs	r0, #5
 8002534:	f7ff f804 	bl	8001540 <commandRespond>
 8002538:	f8c7 0604 	str.w	r0, [r7, #1540]	; 0x604
															 0,
															(char *)position,
															(char *)infor);
					  }
					  break;
 800253c:	e008      	b.n	8002550 <StartDefaultTask+0x6b8>
				  default:
					  {
						  LOG_REPORT("ERROR STATE !!!", __LINE__);
 800253e:	f240 11f9 	movw	r1, #505	; 0x1f9
 8002542:	481b      	ldr	r0, [pc, #108]	; (80025b0 <StartDefaultTask+0x718>)
 8002544:	f7ff f84c 	bl	80015e0 <LOG_REPORT>
						  while(1);
 8002548:	e7fe      	b.n	8002548 <StartDefaultTask+0x6b0>
					  break;
 800254a:	bf00      	nop
 800254c:	e172      	b.n	8002834 <StartDefaultTask+0x99c>
					  break;
 800254e:	bf00      	nop
					  }
				  }

			  }
			  break;
 8002550:	e170      	b.n	8002834 <StartDefaultTask+0x99c>

		  case SCARA_MODE_DUTY:
			  {
				  switch (current_duty_state) {
 8002552:	f897 35f9 	ldrb.w	r3, [r7, #1529]	; 0x5f9
 8002556:	2b03      	cmp	r3, #3
 8002558:	f200 815f 	bhi.w	800281a <StartDefaultTask+0x982>
 800255c:	a201      	add	r2, pc, #4	; (adr r2, 8002564 <StartDefaultTask+0x6cc>)
 800255e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002562:	bf00      	nop
 8002564:	08002575 	.word	0x08002575
 8002568:	080025b5 	.word	0x080025b5
 800256c:	080026b9 	.word	0x080026b9
 8002570:	080027b7 	.word	0x080027b7
				  case SCARA_DUTY_STATE_READY:
					  {
						  // Do nothing();
						  __NOP();
 8002574:	bf00      	nop
					  }
				  break;
 8002576:	e156      	b.n	8002826 <StartDefaultTask+0x98e>
 8002578:	40000000 	.word	0x40000000
 800257c:	3f847ae1 	.word	0x3f847ae1
 8002580:	0801ae38 	.word	0x0801ae38
 8002584:	0801ae4c 	.word	0x0801ae4c
 8002588:	0801ae60 	.word	0x0801ae60
 800258c:	0801ae68 	.word	0x0801ae68
 8002590:	0801ae78 	.word	0x0801ae78
 8002594:	0801ae8c 	.word	0x0801ae8c
 8002598:	0801aea4 	.word	0x0801aea4
 800259c:	20005ef0 	.word	0x20005ef0
 80025a0:	20005e38 	.word	0x20005e38
 80025a4:	20005fa8 	.word	0x20005fa8
 80025a8:	20000c58 	.word	0x20000c58
 80025ac:	0801aebc 	.word	0x0801aebc
 80025b0:	0801aec8 	.word	0x0801aec8

				  case SCARA_DUTY_STATE_INIT:
					  {
						  SCARA_StatusTypeDef status1, status2;
						  status1 = scaraInitDuty(duty_cmd);
 80025b4:	f507 6485 	add.w	r4, r7, #1064	; 0x428
 80025b8:	4668      	mov	r0, sp
 80025ba:	f104 0310 	add.w	r3, r4, #16
 80025be:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80025c2:	4619      	mov	r1, r3
 80025c4:	f013 f874 	bl	80156b0 <memcpy>
 80025c8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80025cc:	f002 f8b0 	bl	8004730 <scaraInitDuty>
 80025d0:	4603      	mov	r3, r0
 80025d2:	f887 35e2 	strb.w	r3, [r7, #1506]	; 0x5e2
						  if ( SCARA_STATUS_OK == status1) {
 80025d6:	f897 35e2 	ldrb.w	r3, [r7, #1506]	; 0x5e2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d154      	bne.n	8002688 <StartDefaultTask+0x7f0>
							  status2 = scaraTestDuty();
 80025de:	f006 fb63 	bl	8008ca8 <scaraTestDuty>
 80025e2:	4603      	mov	r3, r0
 80025e4:	f887 35e1 	strb.w	r3, [r7, #1505]	; 0x5e1
							  if (SCARA_STATUS_OK == status2) {
 80025e8:	f897 35e1 	ldrb.w	r3, [r7, #1505]	; 0x5e1
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d133      	bne.n	8002658 <StartDefaultTask+0x7c0>
							  //current_duty_state		= SCARA_DUTY_STATE_FLOW;
							  current_duty_state = SCARA_DUTY_STATE_FINISH;
 80025f0:	2303      	movs	r3, #3
 80025f2:	f887 35f9 	strb.w	r3, [r7, #1529]	; 0x5f9
							  run_time			= 0;
 80025f6:	f107 0218 	add.w	r2, r7, #24
 80025fa:	f04f 0300 	mov.w	r3, #0
 80025fe:	f04f 0400 	mov.w	r4, #0
 8002602:	e9c2 3400 	strd	r3, r4, [r2]
							  // Respond
							  respond_lenght 	= commandRespond(RPD_OK,
 8002606:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800260a:	6899      	ldr	r1, [r3, #8]
 800260c:	f897 35e2 	ldrb.w	r3, [r7, #1506]	; 0x5e2
																  duty_cmd.id_command,
																  (char *)DETAIL_STATUS[status1],
 8002610:	4ad1      	ldr	r2, [pc, #836]	; (8002958 <StartDefaultTask+0xac0>)
 8002612:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
							  respond_lenght 	= commandRespond(RPD_OK,
 8002616:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800261a:	2008      	movs	r0, #8
 800261c:	f7fe ff90 	bl	8001540 <commandRespond>
 8002620:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
																  (char *)respond);
#ifdef SIMULATION
							  scaraPosition2String((char *)position, positionCurrent);
#else
							  scaraPosition2String((char *)position, positionTrue);
 8002624:	4ccd      	ldr	r4, [pc, #820]	; (800295c <StartDefaultTask+0xac4>)
 8002626:	f507 755e 	add.w	r5, r7, #888	; 0x378
 800262a:	4668      	mov	r0, sp
 800262c:	f104 0308 	add.w	r3, r4, #8
 8002630:	22b0      	movs	r2, #176	; 0xb0
 8002632:	4619      	mov	r1, r3
 8002634:	f013 f83c 	bl	80156b0 <memcpy>
 8002638:	e894 000c 	ldmia.w	r4, {r2, r3}
 800263c:	4628      	mov	r0, r5
 800263e:	f006 fc6b 	bl	8008f18 <scaraPosition2String>
#endif
							  // Start Inform
							  infor_lenght 		= commandRespond(RPD_START,
 8002642:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8002646:	f507 725e 	add.w	r2, r7, #888	; 0x378
 800264a:	2100      	movs	r1, #0
 800264c:	2003      	movs	r0, #3
 800264e:	f7fe ff77 	bl	8001540 <commandRespond>
 8002652:	f8c7 0604 	str.w	r0, [r7, #1540]	; 0x604
																  (char *)DETAIL_STATUS[status1],
																  (char *)respond);
							  LOG_REPORT("INIT FAIL", __LINE__);
						  }
					  }
				  break;
 8002656:	e0e6      	b.n	8002826 <StartDefaultTask+0x98e>
								  current_duty_state 	= SCARA_DUTY_STATE_READY;
 8002658:	2300      	movs	r3, #0
 800265a:	f887 35f9 	strb.w	r3, [r7, #1529]	; 0x5f9
								  respond_lenght	= commandRespond(RPD_ERROR,
 800265e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002662:	6899      	ldr	r1, [r3, #8]
 8002664:	f897 35e1 	ldrb.w	r3, [r7, #1505]	; 0x5e1
																	  (char *)DETAIL_STATUS[status2],
 8002668:	4abb      	ldr	r2, [pc, #748]	; (8002958 <StartDefaultTask+0xac0>)
 800266a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
								  respond_lenght	= commandRespond(RPD_ERROR,
 800266e:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002672:	2007      	movs	r0, #7
 8002674:	f7fe ff64 	bl	8001540 <commandRespond>
 8002678:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
								  LOG_REPORT("TEST FAIL", __LINE__);
 800267c:	f240 212a 	movw	r1, #554	; 0x22a
 8002680:	48b7      	ldr	r0, [pc, #732]	; (8002960 <StartDefaultTask+0xac8>)
 8002682:	f7fe ffad 	bl	80015e0 <LOG_REPORT>
				  break;
 8002686:	e0ce      	b.n	8002826 <StartDefaultTask+0x98e>
							  current_duty_state 	= SCARA_DUTY_STATE_READY;
 8002688:	2300      	movs	r3, #0
 800268a:	f887 35f9 	strb.w	r3, [r7, #1529]	; 0x5f9
							  respond_lenght	= commandRespond(RPD_ERROR,
 800268e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002692:	6899      	ldr	r1, [r3, #8]
 8002694:	f897 35e2 	ldrb.w	r3, [r7, #1506]	; 0x5e2
																  (char *)DETAIL_STATUS[status1],
 8002698:	4aaf      	ldr	r2, [pc, #700]	; (8002958 <StartDefaultTask+0xac0>)
 800269a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
							  respond_lenght	= commandRespond(RPD_ERROR,
 800269e:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80026a2:	2007      	movs	r0, #7
 80026a4:	f7fe ff4c 	bl	8001540 <commandRespond>
 80026a8:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
							  LOG_REPORT("INIT FAIL", __LINE__);
 80026ac:	f240 2132 	movw	r1, #562	; 0x232
 80026b0:	48ac      	ldr	r0, [pc, #688]	; (8002964 <StartDefaultTask+0xacc>)
 80026b2:	f7fe ff95 	bl	80015e0 <LOG_REPORT>
				  break;
 80026b6:	e0b6      	b.n	8002826 <StartDefaultTask+0x98e>

				  case SCARA_DUTY_STATE_FLOW:
					  {
						  SCARA_StatusTypeDef status;
						  // Increase run time
						  run_time += T_SAMPLING;
 80026b8:	f107 0318 	add.w	r3, r7, #24
 80026bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026c0:	a3a3      	add	r3, pc, #652	; (adr r3, 8002950 <StartDefaultTask+0xab8>)
 80026c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c6:	f7fd fde1 	bl	800028c <__adddf3>
 80026ca:	4603      	mov	r3, r0
 80026cc:	460c      	mov	r4, r1
 80026ce:	f107 0218 	add.w	r2, r7, #24
 80026d2:	e9c2 3400 	strd	r3, r4, [r2]
						  // Check Time Out
						  if (scaraIsFinish(run_time)) {
 80026d6:	f107 0318 	add.w	r3, r7, #24
 80026da:	ed93 7b00 	vldr	d7, [r3]
 80026de:	eeb0 0a47 	vmov.f32	s0, s14
 80026e2:	eef0 0a67 	vmov.f32	s1, s15
 80026e6:	f006 fbeb 	bl	8008ec0 <scaraIsFinish>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d003      	beq.n	80026f8 <StartDefaultTask+0x860>
							  current_duty_state = SCARA_DUTY_STATE_FINISH;// Work Done
 80026f0:	2303      	movs	r3, #3
 80026f2:	f887 35f9 	strb.w	r3, [r7, #1529]	; 0x5f9
																(char *)infor);
								  LOG_REPORT("STOP DUTY", __LINE__);
							  }
						  }
					  }
				  break;
 80026f6:	e096      	b.n	8002826 <StartDefaultTask+0x98e>
							  status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 80026f8:	f107 0318 	add.w	r3, r7, #24
 80026fc:	ed93 8b00 	vldr	d8, [r3]
 8002700:	4c99      	ldr	r4, [pc, #612]	; (8002968 <StartDefaultTask+0xad0>)
 8002702:	4668      	mov	r0, sp
 8002704:	f104 0308 	add.w	r3, r4, #8
 8002708:	22b0      	movs	r2, #176	; 0xb0
 800270a:	4619      	mov	r1, r3
 800270c:	f012 ffd0 	bl	80156b0 <memcpy>
 8002710:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002714:	4895      	ldr	r0, [pc, #596]	; (800296c <StartDefaultTask+0xad4>)
 8002716:	eeb0 0a48 	vmov.f32	s0, s16
 800271a:	eef0 0a68 	vmov.f32	s1, s17
 800271e:	f004 fcad 	bl	800707c <scaraFlowDuty>
 8002722:	4603      	mov	r3, r0
 8002724:	f887 35e3 	strb.w	r3, [r7, #1507]	; 0x5e3
							  if ( SCARA_STATUS_OK == status) {
 8002728:	f897 35e3 	ldrb.w	r3, [r7, #1507]	; 0x5e3
 800272c:	2b00      	cmp	r3, #0
 800272e:	d12c      	bne.n	800278a <StartDefaultTask+0x8f2>
								  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8002730:	4c8d      	ldr	r4, [pc, #564]	; (8002968 <StartDefaultTask+0xad0>)
 8002732:	4a8e      	ldr	r2, [pc, #568]	; (800296c <StartDefaultTask+0xad4>)
 8002734:	ab2a      	add	r3, sp, #168	; 0xa8
 8002736:	4611      	mov	r1, r2
 8002738:	22b8      	movs	r2, #184	; 0xb8
 800273a:	4618      	mov	r0, r3
 800273c:	f012 ffb8 	bl	80156b0 <memcpy>
 8002740:	4668      	mov	r0, sp
 8002742:	f104 0310 	add.w	r3, r4, #16
 8002746:	22a8      	movs	r2, #168	; 0xa8
 8002748:	4619      	mov	r1, r3
 800274a:	f012 ffb1 	bl	80156b0 <memcpy>
 800274e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002752:	f001 fc41 	bl	8003fd8 <lowlayer_computeAndWritePulse>
								  scaraPosition2String((char *)position, positionTrue);
 8002756:	4c81      	ldr	r4, [pc, #516]	; (800295c <StartDefaultTask+0xac4>)
 8002758:	f507 755e 	add.w	r5, r7, #888	; 0x378
 800275c:	4668      	mov	r0, sp
 800275e:	f104 0308 	add.w	r3, r4, #8
 8002762:	22b0      	movs	r2, #176	; 0xb0
 8002764:	4619      	mov	r1, r3
 8002766:	f012 ffa3 	bl	80156b0 <memcpy>
 800276a:	e894 000c 	ldmia.w	r4, {r2, r3}
 800276e:	4628      	mov	r0, r5
 8002770:	f006 fbd2 	bl	8008f18 <scaraPosition2String>
								  infor_lenght = commandRespond(RPD_RUNNING,
 8002774:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8002778:	f507 725e 	add.w	r2, r7, #888	; 0x378
 800277c:	2100      	movs	r1, #0
 800277e:	2004      	movs	r0, #4
 8002780:	f7fe fede 	bl	8001540 <commandRespond>
 8002784:	f8c7 0604 	str.w	r0, [r7, #1540]	; 0x604
				  break;
 8002788:	e04d      	b.n	8002826 <StartDefaultTask+0x98e>
								  current_duty_state = SCARA_DUTY_STATE_FINISH;
 800278a:	2303      	movs	r3, #3
 800278c:	f887 35f9 	strb.w	r3, [r7, #1529]	; 0x5f9
								  infor_lenght = commandRespond(RPD_STOP,
 8002790:	f897 35e3 	ldrb.w	r3, [r7, #1507]	; 0x5e3
																(char *)DETAIL_STATUS[status],
 8002794:	4a70      	ldr	r2, [pc, #448]	; (8002958 <StartDefaultTask+0xac0>)
 8002796:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
								  infor_lenght = commandRespond(RPD_STOP,
 800279a:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 800279e:	2100      	movs	r1, #0
 80027a0:	2006      	movs	r0, #6
 80027a2:	f7fe fecd 	bl	8001540 <commandRespond>
 80027a6:	f8c7 0604 	str.w	r0, [r7, #1540]	; 0x604
								  LOG_REPORT("STOP DUTY", __LINE__);
 80027aa:	f240 2155 	movw	r1, #597	; 0x255
 80027ae:	4870      	ldr	r0, [pc, #448]	; (8002970 <StartDefaultTask+0xad8>)
 80027b0:	f7fe ff16 	bl	80015e0 <LOG_REPORT>
				  break;
 80027b4:	e037      	b.n	8002826 <StartDefaultTask+0x98e>

				  case SCARA_DUTY_STATE_FINISH:
					  {
						  current_duty_state = SCARA_DUTY_STATE_READY;
 80027b6:	2300      	movs	r3, #0
 80027b8:	f887 35f9 	strb.w	r3, [r7, #1529]	; 0x5f9
						  positionNext.t = 0;
 80027bc:	4a6b      	ldr	r2, [pc, #428]	; (800296c <StartDefaultTask+0xad4>)
 80027be:	f04f 0300 	mov.w	r3, #0
 80027c2:	f04f 0400 	mov.w	r4, #0
 80027c6:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
						  positionNext.total_time = 0;
 80027ca:	4a68      	ldr	r2, [pc, #416]	; (800296c <StartDefaultTask+0xad4>)
 80027cc:	f04f 0300 	mov.w	r3, #0
 80027d0:	f04f 0400 	mov.w	r4, #0
 80027d4:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
						  positionNext.q = 0;
 80027d8:	4a64      	ldr	r2, [pc, #400]	; (800296c <StartDefaultTask+0xad4>)
 80027da:	f04f 0300 	mov.w	r3, #0
 80027de:	f04f 0400 	mov.w	r4, #0
 80027e2:	e9c2 3400 	strd	r3, r4, [r2]
						  // Done Inform
#ifdef SIMULATION
						  scaraPosition2String((char *)position, positionCurrent);
#else
						  scaraPosition2String((char *)position, positionTrue);
 80027e6:	4c5d      	ldr	r4, [pc, #372]	; (800295c <StartDefaultTask+0xac4>)
 80027e8:	f507 755e 	add.w	r5, r7, #888	; 0x378
 80027ec:	4668      	mov	r0, sp
 80027ee:	f104 0308 	add.w	r3, r4, #8
 80027f2:	22b0      	movs	r2, #176	; 0xb0
 80027f4:	4619      	mov	r1, r3
 80027f6:	f012 ff5b 	bl	80156b0 <memcpy>
 80027fa:	e894 000c 	ldmia.w	r4, {r2, r3}
 80027fe:	4628      	mov	r0, r5
 8002800:	f006 fb8a 	bl	8008f18 <scaraPosition2String>
#endif
						  infor_lenght 		= commandRespond(RPD_DONE,
 8002804:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8002808:	f507 725e 	add.w	r2, r7, #888	; 0x378
 800280c:	2100      	movs	r1, #0
 800280e:	2005      	movs	r0, #5
 8002810:	f7fe fe96 	bl	8001540 <commandRespond>
 8002814:	f8c7 0604 	str.w	r0, [r7, #1540]	; 0x604
															 0,
															 (char *)position,
															 (char *)infor);
					  }
				  break;
 8002818:	e005      	b.n	8002826 <StartDefaultTask+0x98e>

				  default:
					  {
						  LOG_REPORT("ERROR STATE !!!", __LINE__);
 800281a:	f44f 711c 	mov.w	r1, #624	; 0x270
 800281e:	4855      	ldr	r0, [pc, #340]	; (8002974 <StartDefaultTask+0xadc>)
 8002820:	f7fe fede 	bl	80015e0 <LOG_REPORT>
						  while(1);
 8002824:	e7fe      	b.n	8002824 <StartDefaultTask+0x98c>
					  }
				  }

			  }
			  break;
 8002826:	e005      	b.n	8002834 <StartDefaultTask+0x99c>

		  default:
			  {
				  LOG_REPORT("ERROR MODE !!!", __LINE__);
 8002828:	f240 217a 	movw	r1, #634	; 0x27a
 800282c:	4852      	ldr	r0, [pc, #328]	; (8002978 <StartDefaultTask+0xae0>)
 800282e:	f7fe fed7 	bl	80015e0 <LOG_REPORT>
				  while(1);
 8002832:	e7fe      	b.n	8002832 <StartDefaultTask+0x99a>
			  }
		  }
	  }
	  break;
 8002834:	e002      	b.n	800283c <StartDefaultTask+0x9a4>
	  case SCARA_METHOD_AUTO:
	  {

	  }

	  break;
 8002836:	bf00      	nop
 8002838:	e000      	b.n	800283c <StartDefaultTask+0x9a4>
	  break;
 800283a:	bf00      	nop
	  }
	  }

	  /* 4--- Send to PC Phase ---*/
	  // Check buffer from USB task
	  osMutexWait(usbTxMutexHandle, osWaitForever);
 800283c:	4b4f      	ldr	r3, [pc, #316]	; (800297c <StartDefaultTask+0xae4>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f04f 31ff 	mov.w	r1, #4294967295
 8002844:	4618      	mov	r0, r3
 8002846:	f00f f957 	bl	8011af8 <osMutexWait>
	  task_usb_lenght = ringBuff_PopArray(&cmd_tx_ringbuff, task_usb, RINGBUFFER_SIZE);
 800284a:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 800284e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002852:	4619      	mov	r1, r3
 8002854:	484a      	ldr	r0, [pc, #296]	; (8002980 <StartDefaultTask+0xae8>)
 8002856:	f000 ffa6 	bl	80037a6 <ringBuff_PopArray>
 800285a:	f8c7 05ec 	str.w	r0, [r7, #1516]	; 0x5ec
	  osMutexRelease(usbTxMutexHandle);
 800285e:	4b47      	ldr	r3, [pc, #284]	; (800297c <StartDefaultTask+0xae4>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f00f f996 	bl	8011b94 <osMutexRelease>
	  // Intergrate to 1 buffer
	  if (respond_lenght > 0) {
 8002868:	f8d7 3608 	ldr.w	r3, [r7, #1544]	; 0x608
 800286c:	2b00      	cmp	r3, #0
 800286e:	dd13      	ble.n	8002898 <StartDefaultTask+0xa00>
		  respond_packed_lenght = packPayload(respond, respond_packed, respond_lenght);
 8002870:	f507 7106 	add.w	r1, r7, #536	; 0x218
 8002874:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002878:	f8d7 2608 	ldr.w	r2, [r7, #1544]	; 0x608
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff f9a3 	bl	8001bc8 <packPayload>
 8002882:	f8c7 0600 	str.w	r0, [r7, #1536]	; 0x600
		  memcpy(usb_buff, respond_packed, respond_packed_lenght);
 8002886:	f8d7 2600 	ldr.w	r2, [r7, #1536]	; 0x600
 800288a:	f507 7106 	add.w	r1, r7, #536	; 0x218
 800288e:	f107 0320 	add.w	r3, r7, #32
 8002892:	4618      	mov	r0, r3
 8002894:	f012 ff0c 	bl	80156b0 <memcpy>
	  }
	  if (task_usb_lenght > 0) {
 8002898:	f8d7 35ec 	ldr.w	r3, [r7, #1516]	; 0x5ec
 800289c:	2b00      	cmp	r3, #0
 800289e:	dd0b      	ble.n	80028b8 <StartDefaultTask+0xa20>
		  memcpy(usb_buff + respond_packed_lenght, task_usb, task_usb_lenght);
 80028a0:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 80028a4:	f107 0220 	add.w	r2, r7, #32
 80028a8:	4413      	add	r3, r2
 80028aa:	f8d7 25ec 	ldr.w	r2, [r7, #1516]	; 0x5ec
 80028ae:	f507 7113 	add.w	r1, r7, #588	; 0x24c
 80028b2:	4618      	mov	r0, r3
 80028b4:	f012 fefc 	bl	80156b0 <memcpy>
	  }
	  if (infor_lenght > 0) {
 80028b8:	f8d7 3604 	ldr.w	r3, [r7, #1540]	; 0x604
 80028bc:	2b00      	cmp	r3, #0
 80028be:	dd19      	ble.n	80028f4 <StartDefaultTask+0xa5c>
		  infor_packed_lenght 	= packPayload(infor, infor_packed, infor_lenght);
 80028c0:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 80028c4:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 80028c8:	f8d7 2604 	ldr.w	r2, [r7, #1540]	; 0x604
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff f97b 	bl	8001bc8 <packPayload>
 80028d2:	f8c7 05fc 	str.w	r0, [r7, #1532]	; 0x5fc
		  memcpy(usb_buff + respond_packed_lenght + task_usb_lenght, infor_packed, infor_packed_lenght);
 80028d6:	f8d7 2600 	ldr.w	r2, [r7, #1536]	; 0x600
 80028da:	f8d7 35ec 	ldr.w	r3, [r7, #1516]	; 0x5ec
 80028de:	4413      	add	r3, r2
 80028e0:	f107 0220 	add.w	r2, r7, #32
 80028e4:	4413      	add	r3, r2
 80028e6:	f8d7 25fc 	ldr.w	r2, [r7, #1532]	; 0x5fc
 80028ea:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 80028ee:	4618      	mov	r0, r3
 80028f0:	f012 fede 	bl	80156b0 <memcpy>
	  }
	  usb_lenght = respond_packed_lenght + task_usb_lenght + infor_packed_lenght;
 80028f4:	f8d7 2600 	ldr.w	r2, [r7, #1536]	; 0x600
 80028f8:	f8d7 35ec 	ldr.w	r3, [r7, #1516]	; 0x5ec
 80028fc:	4413      	add	r3, r2
 80028fe:	f8d7 25fc 	ldr.w	r2, [r7, #1532]	; 0x5fc
 8002902:	4413      	add	r3, r2
 8002904:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8
	  // Send through USB
	  if (usb_lenght > 0) {
 8002908:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 800290c:	2b00      	cmp	r3, #0
 800290e:	dd08      	ble.n	8002922 <StartDefaultTask+0xa8a>
		  CDC_Transmit_FS(usb_buff, (uint16_t)usb_lenght);
 8002910:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 8002914:	b29a      	uxth	r2, r3
 8002916:	f107 0320 	add.w	r3, r7, #32
 800291a:	4611      	mov	r1, r2
 800291c:	4618      	mov	r0, r3
 800291e:	f012 fa59 	bl	8014dd4 <CDC_Transmit_FS>
	  }

	  /* 5--- Update ---*/
	  scaraSetMethod(current_method);
 8002922:	f897 35fb 	ldrb.w	r3, [r7, #1531]	; 0x5fb
 8002926:	4618      	mov	r0, r3
 8002928:	f006 fa78 	bl	8008e1c <scaraSetMethod>
	  scaraSetMode(current_mode);
 800292c:	f897 35fa 	ldrb.w	r3, [r7, #1530]	; 0x5fa
 8002930:	4618      	mov	r0, r3
 8002932:	f006 fa63 	bl	8008dfc <scaraSetMode>
	  scaraSetDutyState(current_duty_state);
 8002936:	f897 35f9 	ldrb.w	r3, [r7, #1529]	; 0x5f9
 800293a:	4618      	mov	r0, r3
 800293c:	f006 fa4e 	bl	8008ddc <scaraSetDutyState>

    osDelay(1);
 8002940:	2001      	movs	r0, #1
 8002942:	f00f f820 	bl	8011986 <osDelay>
	  osSignalWait(0x01, osWaitForever); // Very Important
 8002946:	f7ff baf8 	b.w	8001f3a <StartDefaultTask+0xa2>
 800294a:	bf00      	nop
 800294c:	f3af 8000 	nop.w
 8002950:	40000000 	.word	0x40000000
 8002954:	3f847ae1 	.word	0x3f847ae1
 8002958:	20000c58 	.word	0x20000c58
 800295c:	20005ef0 	.word	0x20005ef0
 8002960:	0801aed8 	.word	0x0801aed8
 8002964:	0801aee4 	.word	0x0801aee4
 8002968:	20005e38 	.word	0x20005e38
 800296c:	20005fa8 	.word	0x20005fa8
 8002970:	0801aef0 	.word	0x0801aef0
 8002974:	0801aec8 	.word	0x0801aec8
 8002978:	0801aefc 	.word	0x0801aefc
 800297c:	200052b8 	.word	0x200052b8
 8002980:	20000434 	.word	0x20000434

08002984 <Start_USB_RX_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_USB_RX_Task */
void Start_USB_RX_Task(void const * argument)
{
 8002984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002986:	f2ad 5d3c 	subw	sp, sp, #1340	; 0x53c
 800298a:	af6a      	add	r7, sp, #424	; 0x1a8
 800298c:	1d3b      	adds	r3, r7, #4
 800298e:	6018      	str	r0, [r3, #0]
	uint8_t				message[150];
	int32_t				respond_lenght;
	int32_t				message_lenght;

	// Default value
	duty_cmd.key_speed = 1;
 8002990:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002994:	2201      	movs	r2, #1
 8002996:	605a      	str	r2, [r3, #4]

  /* Infinite loop */
  for(;;)
  {
	  for(;;) {
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, END_CHAR);
 8002998:	2129      	movs	r1, #41	; 0x29
 800299a:	4879      	ldr	r0, [pc, #484]	; (8002b80 <Start_USB_RX_Task+0x1fc>)
 800299c:	f000 ff24 	bl	80037e8 <ringBuff_DistanceOf>
 80029a0:	f8c7 0388 	str.w	r0, [r7, #904]	; 0x388
		  if ( -1 != distance ) {
 80029a4:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 80029a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ac:	d0f4      	beq.n	8002998 <Start_USB_RX_Task+0x14>
 80029ae:	466b      	mov	r3, sp
 80029b0:	461e      	mov	r6, r3
			  uint8_t temp[distance+1];
 80029b2:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 80029b6:	1c58      	adds	r0, r3, #1
 80029b8:	1e43      	subs	r3, r0, #1
 80029ba:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
 80029be:	4603      	mov	r3, r0
 80029c0:	4619      	mov	r1, r3
 80029c2:	f04f 0200 	mov.w	r2, #0
 80029c6:	f04f 0300 	mov.w	r3, #0
 80029ca:	f04f 0400 	mov.w	r4, #0
 80029ce:	00d4      	lsls	r4, r2, #3
 80029d0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80029d4:	00cb      	lsls	r3, r1, #3
 80029d6:	4603      	mov	r3, r0
 80029d8:	4619      	mov	r1, r3
 80029da:	f04f 0200 	mov.w	r2, #0
 80029de:	f04f 0300 	mov.w	r3, #0
 80029e2:	f04f 0400 	mov.w	r4, #0
 80029e6:	00d4      	lsls	r4, r2, #3
 80029e8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80029ec:	00cb      	lsls	r3, r1, #3
 80029ee:	4603      	mov	r3, r0
 80029f0:	3307      	adds	r3, #7
 80029f2:	08db      	lsrs	r3, r3, #3
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	ebad 0d03 	sub.w	sp, sp, r3
 80029fa:	ab6a      	add	r3, sp, #424	; 0x1a8
 80029fc:	3300      	adds	r3, #0
 80029fe:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
			  int32_t ret;
			  ringBuff_PopArray(&usb_rx_ringbuff, temp, distance + 1);
 8002a02:	f8d7 1380 	ldr.w	r1, [r7, #896]	; 0x380
 8002a06:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	485c      	ldr	r0, [pc, #368]	; (8002b80 <Start_USB_RX_Task+0x1fc>)
 8002a10:	f000 fec9 	bl	80037a6 <ringBuff_PopArray>
			  ret = unPackPayload(temp, distance + 1);
 8002a14:	f8d7 2380 	ldr.w	r2, [r7, #896]	; 0x380
 8002a18:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4610      	mov	r0, r2
 8002a22:	f7ff f93b 	bl	8001c9c <unPackPayload>
 8002a26:	f8c7 037c 	str.w	r0, [r7, #892]	; 0x37c
			  if( -1 == ret) {
 8002a2a:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8002a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a32:	d105      	bne.n	8002a40 <Start_USB_RX_Task+0xbc>
				  LOG_REPORT("UNPACK FAIL", __LINE__);
 8002a34:	f240 21d1 	movw	r1, #721	; 0x2d1
 8002a38:	4852      	ldr	r0, [pc, #328]	; (8002b84 <Start_USB_RX_Task+0x200>)
 8002a3a:	f7fe fdd1 	bl	80015e0 <LOG_REPORT>
 8002a3e:	e09d      	b.n	8002b7c <Start_USB_RX_Task+0x1f8>
			  } else {
				  LOG_REPORT((char*) temp, __LINE__);
 8002a40:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 8002a44:	f240 21d3 	movw	r1, #723	; 0x2d3
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7fe fdc9 	bl	80015e0 <LOG_REPORT>
				  cmd_type = commandRead(temp, ret, &id_command, &duty_cmd);
 8002a4e:	f8d7 0380 	ldr.w	r0, [r7, #896]	; 0x380
 8002a52:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002a56:	f507 725a 	add.w	r2, r7, #872	; 0x368
 8002a5a:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 8002a5e:	f7fe fa93 	bl	8000f88 <commandRead>
 8002a62:	4603      	mov	r3, r0
 8002a64:	f887 337b 	strb.w	r3, [r7, #891]	; 0x37b
				  memset(detail, 0, sizeof(detail));
 8002a68:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002a6c:	2287      	movs	r2, #135	; 0x87
 8002a6e:	2100      	movs	r1, #0
 8002a70:	4618      	mov	r0, r3
 8002a72:	f012 fe41 	bl	80156f8 <memset>
				  rpd_type = commandReply(cmd_type, duty_cmd, detail);
 8002a76:	f507 74e0 	add.w	r4, r7, #448	; 0x1c0
 8002a7a:	f897 537b 	ldrb.w	r5, [r7, #891]	; 0x37b
 8002a7e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002a82:	9368      	str	r3, [sp, #416]	; 0x1a0
 8002a84:	4668      	mov	r0, sp
 8002a86:	f104 0308 	add.w	r3, r4, #8
 8002a8a:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8002a8e:	4619      	mov	r1, r3
 8002a90:	f012 fe0e 	bl	80156b0 <memcpy>
 8002a94:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002a98:	4628      	mov	r0, r5
 8002a9a:	f7fe fbf5 	bl	8001288 <commandReply>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	f887 337a 	strb.w	r3, [r7, #890]	; 0x37a

				  if ( RPD_DUTY == rpd_type) {
 8002aa4:	f897 337a 	ldrb.w	r3, [r7, #890]	; 0x37a
 8002aa8:	2b09      	cmp	r3, #9
 8002aaa:	d123      	bne.n	8002af4 <Start_USB_RX_Task+0x170>
					  DUTY_Command_TypeDef *dataMail;
					  dataMail = NULL;
 8002aac:	2300      	movs	r3, #0
 8002aae:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
					  // Wait allocate
					  while (dataMail == NULL) {
 8002ab2:	e008      	b.n	8002ac6 <Start_USB_RX_Task+0x142>
						  dataMail = osMailAlloc(commandMailHandle, osWaitForever);
 8002ab4:	4b34      	ldr	r3, [pc, #208]	; (8002b88 <Start_USB_RX_Task+0x204>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8002abc:	4618      	mov	r0, r3
 8002abe:	f00f f9f7 	bl	8011eb0 <osMailAlloc>
 8002ac2:	f8c7 038c 	str.w	r0, [r7, #908]	; 0x38c
					  while (dataMail == NULL) {
 8002ac6:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0f2      	beq.n	8002ab4 <Start_USB_RX_Task+0x130>
					  }
					  memcpy( dataMail, &duty_cmd, sizeof(DUTY_Command_TypeDef));
 8002ace:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002ad2:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	f8d7 038c 	ldr.w	r0, [r7, #908]	; 0x38c
 8002adc:	f012 fde8 	bl	80156b0 <memcpy>
					  osStatus result;
					  result = osMailPut(commandMailHandle, dataMail);
 8002ae0:	4b29      	ldr	r3, [pc, #164]	; (8002b88 <Start_USB_RX_Task+0x204>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f8d7 138c 	ldr.w	r1, [r7, #908]	; 0x38c
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f00f f9f7 	bl	8011edc <osMailPut>
 8002aee:	f8c7 036c 	str.w	r0, [r7, #876]	; 0x36c
 8002af2:	e043      	b.n	8002b7c <Start_USB_RX_Task+0x1f8>
					  if (osOK == result) {
						  //LOG_REPORT("DUTY SEND", __LINE__);
					  }

				  }else if( RPD_POSITION == rpd_type) { 
 8002af4:	f897 337a 	ldrb.w	r3, [r7, #890]	; 0x37a
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d106      	bne.n	8002b0a <Start_USB_RX_Task+0x186>
					  CDC_Transmit_FS(detail, 84);
 8002afc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002b00:	2154      	movs	r1, #84	; 0x54
 8002b02:	4618      	mov	r0, r3
 8002b04:	f012 f966 	bl	8014dd4 <CDC_Transmit_FS>
 8002b08:	e038      	b.n	8002b7c <Start_USB_RX_Task+0x1f8>
				  }else {
					  memset(respond, 0, sizeof(respond));
 8002b0a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002b0e:	2291      	movs	r2, #145	; 0x91
 8002b10:	2100      	movs	r1, #0
 8002b12:	4618      	mov	r0, r3
 8002b14:	f012 fdf0 	bl	80156f8 <memset>
					  memset(message, 0, sizeof(message));
 8002b18:	f107 030c 	add.w	r3, r7, #12
 8002b1c:	2296      	movs	r2, #150	; 0x96
 8002b1e:	2100      	movs	r1, #0
 8002b20:	4618      	mov	r0, r3
 8002b22:	f012 fde9 	bl	80156f8 <memset>
					  respond_lenght	= commandRespond(rpd_type, id_command,
 8002b26:	f8d7 1368 	ldr.w	r1, [r7, #872]	; 0x368
 8002b2a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002b2e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8002b32:	f897 037a 	ldrb.w	r0, [r7, #890]	; 0x37a
 8002b36:	f7fe fd03 	bl	8001540 <commandRespond>
 8002b3a:	f8c7 0374 	str.w	r0, [r7, #884]	; 0x374
							  	  	  	  (char *)detail,
										  (char *)respond);
					  message_lenght	= packPayload(respond, message, respond_lenght);
 8002b3e:	f107 010c 	add.w	r1, r7, #12
 8002b42:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002b46:	f8d7 2374 	ldr.w	r2, [r7, #884]	; 0x374
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff f83c 	bl	8001bc8 <packPayload>
 8002b50:	f8c7 0370 	str.w	r0, [r7, #880]	; 0x370
					  // Mutex
					  osMutexWait(usbTxMutexHandle, osWaitForever);
 8002b54:	4b0d      	ldr	r3, [pc, #52]	; (8002b8c <Start_USB_RX_Task+0x208>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f04f 31ff 	mov.w	r1, #4294967295
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f00e ffcb 	bl	8011af8 <osMutexWait>
					  ringBuff_PushArray(&cmd_tx_ringbuff, message, message_lenght);
 8002b62:	f107 030c 	add.w	r3, r7, #12
 8002b66:	f8d7 2370 	ldr.w	r2, [r7, #880]	; 0x370
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4808      	ldr	r0, [pc, #32]	; (8002b90 <Start_USB_RX_Task+0x20c>)
 8002b6e:	f000 fdf2 	bl	8003756 <ringBuff_PushArray>
					  osMutexRelease(usbTxMutexHandle);
 8002b72:	4b06      	ldr	r3, [pc, #24]	; (8002b8c <Start_USB_RX_Task+0x208>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f00f f80c 	bl	8011b94 <osMutexRelease>
 8002b7c:	46b5      	mov	sp, r6
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, END_CHAR);
 8002b7e:	e70b      	b.n	8002998 <Start_USB_RX_Task+0x14>
 8002b80:	20000028 	.word	0x20000028
 8002b84:	0801af0c 	.word	0x0801af0c
 8002b88:	200052bc 	.word	0x200052bc
 8002b8c:	200052b8 	.word	0x200052b8
 8002b90:	20000434 	.word	0x20000434

08002b94 <FSMC_Write>:
/* Includes ------------------------------------------------------------------*/
#include "fsmc.h"

/* USER CODE BEGIN 0 */
void FSMC_Write(uint32_t ui_address, uint32_t ui_data)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
	*(volatile uint16_t *)ui_address = ui_data;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	b292      	uxth	r2, r2
 8002ba4:	801a      	strh	r2, [r3, #0]
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr

08002bb2 <FSMC_Read>:

uint16_t FSMC_Read(uint32_t ui_address) {
 8002bb2:	b480      	push	{r7}
 8002bb4:	b083      	sub	sp, #12
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
	return *(volatile uint16_t *)ui_address;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	881b      	ldrh	r3, [r3, #0]
 8002bbe:	b29b      	uxth	r3, r3
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <MX_FSMC_Init>:

NOR_HandleTypeDef hnor1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b088      	sub	sp, #32
 8002bd0:	af00      	add	r7, sp, #0
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8002bd2:	1d3b      	adds	r3, r7, #4
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	609a      	str	r2, [r3, #8]
 8002bdc:	60da      	str	r2, [r3, #12]
 8002bde:	611a      	str	r2, [r3, #16]
 8002be0:	615a      	str	r2, [r3, #20]
 8002be2:	619a      	str	r2, [r3, #24]

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FSMC_NORSRAM_DEVICE;
 8002be4:	4b27      	ldr	r3, [pc, #156]	; (8002c84 <MX_FSMC_Init+0xb8>)
 8002be6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8002bea:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002bec:	4b25      	ldr	r3, [pc, #148]	; (8002c84 <MX_FSMC_Init+0xb8>)
 8002bee:	4a26      	ldr	r2, [pc, #152]	; (8002c88 <MX_FSMC_Init+0xbc>)
 8002bf0:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8002bf2:	4b24      	ldr	r3, [pc, #144]	; (8002c84 <MX_FSMC_Init+0xb8>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_ENABLE;
 8002bf8:	4b22      	ldr	r3, [pc, #136]	; (8002c84 <MX_FSMC_Init+0xb8>)
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FSMC_MEMORY_TYPE_NOR;
 8002bfe:	4b21      	ldr	r3, [pc, #132]	; (8002c84 <MX_FSMC_Init+0xb8>)
 8002c00:	2208      	movs	r2, #8
 8002c02:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002c04:	4b1f      	ldr	r3, [pc, #124]	; (8002c84 <MX_FSMC_Init+0xb8>)
 8002c06:	2210      	movs	r2, #16
 8002c08:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8002c0a:	4b1e      	ldr	r3, [pc, #120]	; (8002c84 <MX_FSMC_Init+0xb8>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002c10:	4b1c      	ldr	r3, [pc, #112]	; (8002c84 <MX_FSMC_Init+0xb8>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	61da      	str	r2, [r3, #28]
  hnor1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8002c16:	4b1b      	ldr	r3, [pc, #108]	; (8002c84 <MX_FSMC_Init+0xb8>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	621a      	str	r2, [r3, #32]
  hnor1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8002c1c:	4b19      	ldr	r3, [pc, #100]	; (8002c84 <MX_FSMC_Init+0xb8>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8002c22:	4b18      	ldr	r3, [pc, #96]	; (8002c84 <MX_FSMC_Init+0xb8>)
 8002c24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c28:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8002c2a:	4b16      	ldr	r3, [pc, #88]	; (8002c84 <MX_FSMC_Init+0xb8>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8002c30:	4b14      	ldr	r3, [pc, #80]	; (8002c84 <MX_FSMC_Init+0xb8>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002c36:	4b13      	ldr	r3, [pc, #76]	; (8002c84 <MX_FSMC_Init+0xb8>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8002c3c:	4b11      	ldr	r3, [pc, #68]	; (8002c84 <MX_FSMC_Init+0xb8>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8002c42:	4b10      	ldr	r3, [pc, #64]	; (8002c84 <MX_FSMC_Init+0xb8>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8002c48:	230f      	movs	r3, #15
 8002c4a:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8002c4c:	230f      	movs	r3, #15
 8002c4e:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8002c50:	23ff      	movs	r3, #255	; 0xff
 8002c52:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8002c54:	230f      	movs	r3, #15
 8002c56:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8002c58:	2310      	movs	r3, #16
 8002c5a:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8002c5c:	2311      	movs	r3, #17
 8002c5e:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8002c60:	2300      	movs	r3, #0
 8002c62:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 8002c64:	1d3b      	adds	r3, r7, #4
 8002c66:	2200      	movs	r2, #0
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4806      	ldr	r0, [pc, #24]	; (8002c84 <MX_FSMC_Init+0xb8>)
 8002c6c:	f008 ff02 	bl	800ba74 <HAL_NOR_Init>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8002c76:	f000 fcf7 	bl	8003668 <Error_Handler>
  }

}
 8002c7a:	bf00      	nop
 8002c7c:	3720      	adds	r7, #32
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	200052c4 	.word	0x200052c4
 8002c88:	a0000104 	.word	0xa0000104

08002c8c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c92:	1d3b      	adds	r3, r7, #4
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	605a      	str	r2, [r3, #4]
 8002c9a:	609a      	str	r2, [r3, #8]
 8002c9c:	60da      	str	r2, [r3, #12]
 8002c9e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8002ca0:	4b24      	ldr	r3, [pc, #144]	; (8002d34 <HAL_FSMC_MspInit+0xa8>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d140      	bne.n	8002d2a <HAL_FSMC_MspInit+0x9e>
    return;
  }
  FSMC_Initialized = 1;
 8002ca8:	4b22      	ldr	r3, [pc, #136]	; (8002d34 <HAL_FSMC_MspInit+0xa8>)
 8002caa:	2201      	movs	r2, #1
 8002cac:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002cae:	2300      	movs	r3, #0
 8002cb0:	603b      	str	r3, [r7, #0]
 8002cb2:	4b21      	ldr	r3, [pc, #132]	; (8002d38 <HAL_FSMC_MspInit+0xac>)
 8002cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb6:	4a20      	ldr	r2, [pc, #128]	; (8002d38 <HAL_FSMC_MspInit+0xac>)
 8002cb8:	f043 0301 	orr.w	r3, r3, #1
 8002cbc:	6393      	str	r3, [r2, #56]	; 0x38
 8002cbe:	4b1e      	ldr	r3, [pc, #120]	; (8002d38 <HAL_FSMC_MspInit+0xac>)
 8002cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	603b      	str	r3, [r7, #0]
 8002cc8:	683b      	ldr	r3, [r7, #0]
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  PB7   ------> FSMC_NL
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8002cca:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002cce:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002cdc:	230c      	movs	r3, #12
 8002cde:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ce0:	1d3b      	adds	r3, r7, #4
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	4815      	ldr	r0, [pc, #84]	; (8002d3c <HAL_FSMC_MspInit+0xb0>)
 8002ce6:	f008 fd11 	bl	800b70c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 8002cea:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8002cee:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002cfc:	230c      	movs	r3, #12
 8002cfe:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d00:	1d3b      	adds	r3, r7, #4
 8002d02:	4619      	mov	r1, r3
 8002d04:	480e      	ldr	r0, [pc, #56]	; (8002d40 <HAL_FSMC_MspInit+0xb4>)
 8002d06:	f008 fd01 	bl	800b70c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002d0a:	2380      	movs	r3, #128	; 0x80
 8002d0c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d0e:	2302      	movs	r3, #2
 8002d10:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d12:	2300      	movs	r3, #0
 8002d14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d16:	2303      	movs	r3, #3
 8002d18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002d1a:	230c      	movs	r3, #12
 8002d1c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d1e:	1d3b      	adds	r3, r7, #4
 8002d20:	4619      	mov	r1, r3
 8002d22:	4808      	ldr	r0, [pc, #32]	; (8002d44 <HAL_FSMC_MspInit+0xb8>)
 8002d24:	f008 fcf2 	bl	800b70c <HAL_GPIO_Init>
 8002d28:	e000      	b.n	8002d2c <HAL_FSMC_MspInit+0xa0>
    return;
 8002d2a:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8002d2c:	3718      	adds	r7, #24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	20001450 	.word	0x20001450
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	40020c00 	.word	0x40020c00
 8002d44:	40020400 	.word	0x40020400

08002d48 <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* norHandle){
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FSMC_MspInit();
 8002d50:	f7ff ff9c 	bl	8002c8c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 8002d54:	bf00      	nop
 8002d56:	3708      	adds	r7, #8
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <MX_GPIO_Init>:
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b08a      	sub	sp, #40	; 0x28
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	f107 0314 	add.w	r3, r7, #20
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	605a      	str	r2, [r3, #4]
 8002d6c:	609a      	str	r2, [r3, #8]
 8002d6e:	60da      	str	r2, [r3, #12]
 8002d70:	611a      	str	r2, [r3, #16]
 8002d72:	2300      	movs	r3, #0
 8002d74:	613b      	str	r3, [r7, #16]
 8002d76:	4b51      	ldr	r3, [pc, #324]	; (8002ebc <MX_GPIO_Init+0x160>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	4a50      	ldr	r2, [pc, #320]	; (8002ebc <MX_GPIO_Init+0x160>)
 8002d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d80:	6313      	str	r3, [r2, #48]	; 0x30
 8002d82:	4b4e      	ldr	r3, [pc, #312]	; (8002ebc <MX_GPIO_Init+0x160>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d8a:	613b      	str	r3, [r7, #16]
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	2300      	movs	r3, #0
 8002d90:	60fb      	str	r3, [r7, #12]
 8002d92:	4b4a      	ldr	r3, [pc, #296]	; (8002ebc <MX_GPIO_Init+0x160>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	4a49      	ldr	r2, [pc, #292]	; (8002ebc <MX_GPIO_Init+0x160>)
 8002d98:	f043 0301 	orr.w	r3, r3, #1
 8002d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d9e:	4b47      	ldr	r3, [pc, #284]	; (8002ebc <MX_GPIO_Init+0x160>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	60fb      	str	r3, [r7, #12]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2300      	movs	r3, #0
 8002dac:	60bb      	str	r3, [r7, #8]
 8002dae:	4b43      	ldr	r3, [pc, #268]	; (8002ebc <MX_GPIO_Init+0x160>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	4a42      	ldr	r2, [pc, #264]	; (8002ebc <MX_GPIO_Init+0x160>)
 8002db4:	f043 0310 	orr.w	r3, r3, #16
 8002db8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dba:	4b40      	ldr	r3, [pc, #256]	; (8002ebc <MX_GPIO_Init+0x160>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	f003 0310 	and.w	r3, r3, #16
 8002dc2:	60bb      	str	r3, [r7, #8]
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	607b      	str	r3, [r7, #4]
 8002dca:	4b3c      	ldr	r3, [pc, #240]	; (8002ebc <MX_GPIO_Init+0x160>)
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dce:	4a3b      	ldr	r2, [pc, #236]	; (8002ebc <MX_GPIO_Init+0x160>)
 8002dd0:	f043 0302 	orr.w	r3, r3, #2
 8002dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002dd6:	4b39      	ldr	r3, [pc, #228]	; (8002ebc <MX_GPIO_Init+0x160>)
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	607b      	str	r3, [r7, #4]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2300      	movs	r3, #0
 8002de4:	603b      	str	r3, [r7, #0]
 8002de6:	4b35      	ldr	r3, [pc, #212]	; (8002ebc <MX_GPIO_Init+0x160>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dea:	4a34      	ldr	r2, [pc, #208]	; (8002ebc <MX_GPIO_Init+0x160>)
 8002dec:	f043 0308 	orr.w	r3, r3, #8
 8002df0:	6313      	str	r3, [r2, #48]	; 0x30
 8002df2:	4b32      	ldr	r3, [pc, #200]	; (8002ebc <MX_GPIO_Init+0x160>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	f003 0308 	and.w	r3, r3, #8
 8002dfa:	603b      	str	r3, [r7, #0]
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f44f 6141 	mov.w	r1, #3088	; 0xc10
 8002e04:	482e      	ldr	r0, [pc, #184]	; (8002ec0 <MX_GPIO_Init+0x164>)
 8002e06:	f008 fe1b 	bl	800ba40 <HAL_GPIO_WritePin>
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f641 0148 	movw	r1, #6216	; 0x1848
 8002e10:	482c      	ldr	r0, [pc, #176]	; (8002ec4 <MX_GPIO_Init+0x168>)
 8002e12:	f008 fe15 	bl	800ba40 <HAL_GPIO_WritePin>
 8002e16:	2200      	movs	r2, #0
 8002e18:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8002e1c:	482a      	ldr	r0, [pc, #168]	; (8002ec8 <MX_GPIO_Init+0x16c>)
 8002e1e:	f008 fe0f 	bl	800ba40 <HAL_GPIO_WritePin>
 8002e22:	f44f 6341 	mov.w	r3, #3088	; 0xc10
 8002e26:	617b      	str	r3, [r7, #20]
 8002e28:	2301      	movs	r3, #1
 8002e2a:	61bb      	str	r3, [r7, #24]
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	61fb      	str	r3, [r7, #28]
 8002e30:	2300      	movs	r3, #0
 8002e32:	623b      	str	r3, [r7, #32]
 8002e34:	f107 0314 	add.w	r3, r7, #20
 8002e38:	4619      	mov	r1, r3
 8002e3a:	4821      	ldr	r0, [pc, #132]	; (8002ec0 <MX_GPIO_Init+0x164>)
 8002e3c:	f008 fc66 	bl	800b70c <HAL_GPIO_Init>
 8002e40:	f640 0348 	movw	r3, #2120	; 0x848
 8002e44:	617b      	str	r3, [r7, #20]
 8002e46:	2301      	movs	r3, #1
 8002e48:	61bb      	str	r3, [r7, #24]
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	61fb      	str	r3, [r7, #28]
 8002e4e:	2300      	movs	r3, #0
 8002e50:	623b      	str	r3, [r7, #32]
 8002e52:	f107 0314 	add.w	r3, r7, #20
 8002e56:	4619      	mov	r1, r3
 8002e58:	481a      	ldr	r0, [pc, #104]	; (8002ec4 <MX_GPIO_Init+0x168>)
 8002e5a:	f008 fc57 	bl	800b70c <HAL_GPIO_Init>
 8002e5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e62:	617b      	str	r3, [r7, #20]
 8002e64:	2301      	movs	r3, #1
 8002e66:	61bb      	str	r3, [r7, #24]
 8002e68:	2300      	movs	r3, #0
 8002e6a:	61fb      	str	r3, [r7, #28]
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	623b      	str	r3, [r7, #32]
 8002e70:	f107 0314 	add.w	r3, r7, #20
 8002e74:	4619      	mov	r1, r3
 8002e76:	4813      	ldr	r0, [pc, #76]	; (8002ec4 <MX_GPIO_Init+0x168>)
 8002e78:	f008 fc48 	bl	800b70c <HAL_GPIO_Init>
 8002e7c:	f242 0304 	movw	r3, #8196	; 0x2004
 8002e80:	617b      	str	r3, [r7, #20]
 8002e82:	2300      	movs	r3, #0
 8002e84:	61bb      	str	r3, [r7, #24]
 8002e86:	2301      	movs	r3, #1
 8002e88:	61fb      	str	r3, [r7, #28]
 8002e8a:	f107 0314 	add.w	r3, r7, #20
 8002e8e:	4619      	mov	r1, r3
 8002e90:	480c      	ldr	r0, [pc, #48]	; (8002ec4 <MX_GPIO_Init+0x168>)
 8002e92:	f008 fc3b 	bl	800b70c <HAL_GPIO_Init>
 8002e96:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002e9a:	617b      	str	r3, [r7, #20]
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	61bb      	str	r3, [r7, #24]
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	61fb      	str	r3, [r7, #28]
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	623b      	str	r3, [r7, #32]
 8002ea8:	f107 0314 	add.w	r3, r7, #20
 8002eac:	4619      	mov	r1, r3
 8002eae:	4806      	ldr	r0, [pc, #24]	; (8002ec8 <MX_GPIO_Init+0x16c>)
 8002eb0:	f008 fc2c 	bl	800b70c <HAL_GPIO_Init>
 8002eb4:	bf00      	nop
 8002eb6:	3728      	adds	r7, #40	; 0x28
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	40023800 	.word	0x40023800
 8002ec0:	40020400 	.word	0x40020400
 8002ec4:	40020c00 	.word	0x40020c00
 8002ec8:	40020000 	.word	0x40020000
 8002ecc:	00000000 	.word	0x00000000

08002ed0 <kinematicForward>:
#include "kinematic.h"
#include "common_def.h"
#include "math.h"
#include "system_params.h"

uint8_t		kinematicForward(SCARA_PositionTypeDef *pnt) {
 8002ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ed2:	b08b      	sub	sp, #44	; 0x2c
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
	double x, y, z, roll;

	x =   a1*cos(pnt->Theta1)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8002ede:	eeb0 0a47 	vmov.f32	s0, s14
 8002ee2:	eef0 0a67 	vmov.f32	s1, s15
 8002ee6:	f016 f9df 	bl	80192a8 <cos>
 8002eea:	ec51 0b10 	vmov	r0, r1, d0
 8002eee:	a38e      	add	r3, pc, #568	; (adr r3, 8003128 <kinematicForward+0x258>)
 8002ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef4:	f7fd fb80 	bl	80005f8 <__aeabi_dmul>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	460c      	mov	r4, r1
 8002efc:	461d      	mov	r5, r3
 8002efe:	4626      	mov	r6, r4
		+ a2*cos(pnt->Theta1 + pnt->Theta2)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	4623      	mov	r3, r4
 8002f10:	f7fd f9bc 	bl	800028c <__adddf3>
 8002f14:	4603      	mov	r3, r0
 8002f16:	460c      	mov	r4, r1
 8002f18:	ec44 3b17 	vmov	d7, r3, r4
 8002f1c:	eeb0 0a47 	vmov.f32	s0, s14
 8002f20:	eef0 0a67 	vmov.f32	s1, s15
 8002f24:	f016 f9c0 	bl	80192a8 <cos>
 8002f28:	ec51 0b10 	vmov	r0, r1, d0
 8002f2c:	f04f 0200 	mov.w	r2, #0
 8002f30:	4b83      	ldr	r3, [pc, #524]	; (8003140 <kinematicForward+0x270>)
 8002f32:	f7fd fb61 	bl	80005f8 <__aeabi_dmul>
 8002f36:	4603      	mov	r3, r0
 8002f38:	460c      	mov	r4, r1
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	4623      	mov	r3, r4
 8002f3e:	4628      	mov	r0, r5
 8002f40:	4631      	mov	r1, r6
 8002f42:	f7fd f9a3 	bl	800028c <__adddf3>
 8002f46:	4603      	mov	r3, r0
 8002f48:	460c      	mov	r4, r1
 8002f4a:	461d      	mov	r5, r3
 8002f4c:	4626      	mov	r6, r4
		+ a4*cos(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	4623      	mov	r3, r4
 8002f5e:	f7fd f995 	bl	800028c <__adddf3>
 8002f62:	4603      	mov	r3, r0
 8002f64:	460c      	mov	r4, r1
 8002f66:	4618      	mov	r0, r3
 8002f68:	4621      	mov	r1, r4
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 8002f70:	461a      	mov	r2, r3
 8002f72:	4623      	mov	r3, r4
 8002f74:	f7fd f988 	bl	8000288 <__aeabi_dsub>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	460c      	mov	r4, r1
 8002f7c:	ec44 3b17 	vmov	d7, r3, r4
 8002f80:	eeb0 0a47 	vmov.f32	s0, s14
 8002f84:	eef0 0a67 	vmov.f32	s1, s15
 8002f88:	f016 f98e 	bl	80192a8 <cos>
 8002f8c:	ec51 0b10 	vmov	r0, r1, d0
 8002f90:	a363      	add	r3, pc, #396	; (adr r3, 8003120 <kinematicForward+0x250>)
 8002f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f96:	f7fd fb2f 	bl	80005f8 <__aeabi_dmul>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	460c      	mov	r4, r1
	x =   a1*cos(pnt->Theta1)
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	4623      	mov	r3, r4
 8002fa2:	4628      	mov	r0, r5
 8002fa4:	4631      	mov	r1, r6
 8002fa6:	f7fd f971 	bl	800028c <__adddf3>
 8002faa:	4603      	mov	r3, r0
 8002fac:	460c      	mov	r4, r1
 8002fae:	e9c7 3408 	strd	r3, r4, [r7, #32]
	y =   a1*sin(pnt->Theta1)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8002fb8:	eeb0 0a47 	vmov.f32	s0, s14
 8002fbc:	eef0 0a67 	vmov.f32	s1, s15
 8002fc0:	f016 fa02 	bl	80193c8 <sin>
 8002fc4:	ec51 0b10 	vmov	r0, r1, d0
 8002fc8:	a357      	add	r3, pc, #348	; (adr r3, 8003128 <kinematicForward+0x258>)
 8002fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fce:	f7fd fb13 	bl	80005f8 <__aeabi_dmul>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	460c      	mov	r4, r1
 8002fd6:	461d      	mov	r5, r3
 8002fd8:	4626      	mov	r6, r4
		+ a2*sin(pnt->Theta1 + pnt->Theta2)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	4623      	mov	r3, r4
 8002fea:	f7fd f94f 	bl	800028c <__adddf3>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	460c      	mov	r4, r1
 8002ff2:	ec44 3b17 	vmov	d7, r3, r4
 8002ff6:	eeb0 0a47 	vmov.f32	s0, s14
 8002ffa:	eef0 0a67 	vmov.f32	s1, s15
 8002ffe:	f016 f9e3 	bl	80193c8 <sin>
 8003002:	ec51 0b10 	vmov	r0, r1, d0
 8003006:	f04f 0200 	mov.w	r2, #0
 800300a:	4b4d      	ldr	r3, [pc, #308]	; (8003140 <kinematicForward+0x270>)
 800300c:	f7fd faf4 	bl	80005f8 <__aeabi_dmul>
 8003010:	4603      	mov	r3, r0
 8003012:	460c      	mov	r4, r1
 8003014:	461a      	mov	r2, r3
 8003016:	4623      	mov	r3, r4
 8003018:	4628      	mov	r0, r5
 800301a:	4631      	mov	r1, r6
 800301c:	f7fd f936 	bl	800028c <__adddf3>
 8003020:	4603      	mov	r3, r0
 8003022:	460c      	mov	r4, r1
 8003024:	461d      	mov	r5, r3
 8003026:	4626      	mov	r6, r4
		+ a4*sin(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8003034:	461a      	mov	r2, r3
 8003036:	4623      	mov	r3, r4
 8003038:	f7fd f928 	bl	800028c <__adddf3>
 800303c:	4603      	mov	r3, r0
 800303e:	460c      	mov	r4, r1
 8003040:	4618      	mov	r0, r3
 8003042:	4621      	mov	r1, r4
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 800304a:	461a      	mov	r2, r3
 800304c:	4623      	mov	r3, r4
 800304e:	f7fd f91b 	bl	8000288 <__aeabi_dsub>
 8003052:	4603      	mov	r3, r0
 8003054:	460c      	mov	r4, r1
 8003056:	ec44 3b17 	vmov	d7, r3, r4
 800305a:	eeb0 0a47 	vmov.f32	s0, s14
 800305e:	eef0 0a67 	vmov.f32	s1, s15
 8003062:	f016 f9b1 	bl	80193c8 <sin>
 8003066:	ec51 0b10 	vmov	r0, r1, d0
 800306a:	a32d      	add	r3, pc, #180	; (adr r3, 8003120 <kinematicForward+0x250>)
 800306c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003070:	f7fd fac2 	bl	80005f8 <__aeabi_dmul>
 8003074:	4603      	mov	r3, r0
 8003076:	460c      	mov	r4, r1
	y =   a1*sin(pnt->Theta1)
 8003078:	461a      	mov	r2, r3
 800307a:	4623      	mov	r3, r4
 800307c:	4628      	mov	r0, r5
 800307e:	4631      	mov	r1, r6
 8003080:	f7fd f904 	bl	800028c <__adddf3>
 8003084:	4603      	mov	r3, r0
 8003086:	460c      	mov	r4, r1
 8003088:	e9c7 3406 	strd	r3, r4, [r7, #24]
	z =   d1 - pnt->D3 - d4;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8003092:	461a      	mov	r2, r3
 8003094:	4623      	mov	r3, r4
 8003096:	a126      	add	r1, pc, #152	; (adr r1, 8003130 <kinematicForward+0x260>)
 8003098:	e9d1 0100 	ldrd	r0, r1, [r1]
 800309c:	f7fd f8f4 	bl	8000288 <__aeabi_dsub>
 80030a0:	4603      	mov	r3, r0
 80030a2:	460c      	mov	r4, r1
 80030a4:	4618      	mov	r0, r3
 80030a6:	4621      	mov	r1, r4
 80030a8:	a323      	add	r3, pc, #140	; (adr r3, 8003138 <kinematicForward+0x268>)
 80030aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ae:	f7fd f8eb 	bl	8000288 <__aeabi_dsub>
 80030b2:	4603      	mov	r3, r0
 80030b4:	460c      	mov	r4, r1
 80030b6:	e9c7 3404 	strd	r3, r4, [r7, #16]
	roll = pnt->Theta1 + pnt->Theta2 - pnt->Theta4;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 80030c6:	461a      	mov	r2, r3
 80030c8:	4623      	mov	r3, r4
 80030ca:	f7fd f8df 	bl	800028c <__adddf3>
 80030ce:	4603      	mov	r3, r0
 80030d0:	460c      	mov	r4, r1
 80030d2:	4618      	mov	r0, r3
 80030d4:	4621      	mov	r1, r4
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 80030dc:	461a      	mov	r2, r3
 80030de:	4623      	mov	r3, r4
 80030e0:	f7fd f8d2 	bl	8000288 <__aeabi_dsub>
 80030e4:	4603      	mov	r3, r0
 80030e6:	460c      	mov	r4, r1
 80030e8:	e9c7 3402 	strd	r3, r4, [r7, #8]

	pnt->x = x;
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80030f2:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	pnt->y = y;
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80030fc:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	pnt->z = z;
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003106:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	pnt->roll = roll;
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003110:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

	return TRUE;
 8003114:	2301      	movs	r3, #1
}
 8003116:	4618      	mov	r0, r3
 8003118:	372c      	adds	r7, #44	; 0x2c
 800311a:	46bd      	mov	sp, r7
 800311c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800311e:	bf00      	nop
 8003120:	80000000 	.word	0x80000000
 8003124:	40402e14 	.word	0x40402e14
 8003128:	00000000 	.word	0x00000000
 800312c:	4068a000 	.word	0x4068a000
 8003130:	00000000 	.word	0x00000000
 8003134:	406a6000 	.word	0x406a6000
 8003138:	e0000000 	.word	0xe0000000
 800313c:	40536b22 	.word	0x40536b22
 8003140:	40640000 	.word	0x40640000
 8003144:	00000000 	.word	0x00000000

08003148 <kinematicInverse>:

uint8_t		kinematicInverse(SCARA_PositionTypeDef *pnt, SCARA_PositionTypeDef current) {
 8003148:	b082      	sub	sp, #8
 800314a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800314e:	b0a0      	sub	sp, #128	; 0x80
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8003158:	e881 000c 	stmia.w	r1, {r2, r3}
	double theta1, theta2, theta2_positive, theta2_negative, d3, theta4 , pWx, pWy;
	double s1, c1, s2, s2_positive, s2_negative, c2 , temp;

	d3  = d1 - d4 - pnt->z;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8003162:	a1f2      	add	r1, pc, #968	; (adr r1, 800352c <kinematicInverse+0x3e4>)
 8003164:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003168:	f7fd f88e 	bl	8000288 <__aeabi_dsub>
 800316c:	4602      	mov	r2, r0
 800316e:	460b      	mov	r3, r1
 8003170:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	pWx = pnt->x - a4*cos(pnt->roll);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	e9d3 ab12 	ldrd	sl, fp, [r3, #72]	; 0x48
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8003180:	eeb0 0a47 	vmov.f32	s0, s14
 8003184:	eef0 0a67 	vmov.f32	s1, s15
 8003188:	f016 f88e 	bl	80192a8 <cos>
 800318c:	ec51 0b10 	vmov	r0, r1, d0
 8003190:	a3e8      	add	r3, pc, #928	; (adr r3, 8003534 <kinematicInverse+0x3ec>)
 8003192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003196:	f7fd fa2f 	bl	80005f8 <__aeabi_dmul>
 800319a:	4602      	mov	r2, r0
 800319c:	460b      	mov	r3, r1
 800319e:	4650      	mov	r0, sl
 80031a0:	4659      	mov	r1, fp
 80031a2:	f7fd f871 	bl	8000288 <__aeabi_dsub>
 80031a6:	4602      	mov	r2, r0
 80031a8:	460b      	mov	r3, r1
 80031aa:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	pWy = pnt->y - a4*sin(pnt->roll);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	e9d3 ab14 	ldrd	sl, fp, [r3, #80]	; 0x50
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 80031ba:	eeb0 0a47 	vmov.f32	s0, s14
 80031be:	eef0 0a67 	vmov.f32	s1, s15
 80031c2:	f016 f901 	bl	80193c8 <sin>
 80031c6:	ec51 0b10 	vmov	r0, r1, d0
 80031ca:	a3da      	add	r3, pc, #872	; (adr r3, 8003534 <kinematicInverse+0x3ec>)
 80031cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d0:	f7fd fa12 	bl	80005f8 <__aeabi_dmul>
 80031d4:	4602      	mov	r2, r0
 80031d6:	460b      	mov	r3, r1
 80031d8:	4650      	mov	r0, sl
 80031da:	4659      	mov	r1, fp
 80031dc:	f7fd f854 	bl	8000288 <__aeabi_dsub>
 80031e0:	4602      	mov	r2, r0
 80031e2:	460b      	mov	r3, r1
 80031e4:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	c2  = (pWx*pWx + pWy*pWy - a1*a1 - a2*a2) / (2*a1*a2);
 80031e8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80031ec:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80031f0:	f7fd fa02 	bl	80005f8 <__aeabi_dmul>
 80031f4:	4602      	mov	r2, r0
 80031f6:	460b      	mov	r3, r1
 80031f8:	4692      	mov	sl, r2
 80031fa:	469b      	mov	fp, r3
 80031fc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003200:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003204:	f7fd f9f8 	bl	80005f8 <__aeabi_dmul>
 8003208:	4602      	mov	r2, r0
 800320a:	460b      	mov	r3, r1
 800320c:	4650      	mov	r0, sl
 800320e:	4659      	mov	r1, fp
 8003210:	f7fd f83c 	bl	800028c <__adddf3>
 8003214:	4602      	mov	r2, r0
 8003216:	460b      	mov	r3, r1
 8003218:	4610      	mov	r0, r2
 800321a:	4619      	mov	r1, r3
 800321c:	a3c7      	add	r3, pc, #796	; (adr r3, 800353c <kinematicInverse+0x3f4>)
 800321e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003222:	f7fd f831 	bl	8000288 <__aeabi_dsub>
 8003226:	4602      	mov	r2, r0
 8003228:	460b      	mov	r3, r1
 800322a:	4610      	mov	r0, r2
 800322c:	4619      	mov	r1, r3
 800322e:	f04f 0200 	mov.w	r2, #0
 8003232:	4bbb      	ldr	r3, [pc, #748]	; (8003520 <kinematicInverse+0x3d8>)
 8003234:	f7fd f828 	bl	8000288 <__aeabi_dsub>
 8003238:	4602      	mov	r2, r0
 800323a:	460b      	mov	r3, r1
 800323c:	4610      	mov	r0, r2
 800323e:	4619      	mov	r1, r3
 8003240:	a3b3      	add	r3, pc, #716	; (adr r3, 8003510 <kinematicInverse+0x3c8>)
 8003242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003246:	f7fd fb01 	bl	800084c <__aeabi_ddiv>
 800324a:	4602      	mov	r2, r0
 800324c:	460b      	mov	r3, r1
 800324e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp = 1 - c2*c2;
 8003252:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003256:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800325a:	f7fd f9cd 	bl	80005f8 <__aeabi_dmul>
 800325e:	4602      	mov	r2, r0
 8003260:	460b      	mov	r3, r1
 8003262:	f04f 0000 	mov.w	r0, #0
 8003266:	49af      	ldr	r1, [pc, #700]	; (8003524 <kinematicInverse+0x3dc>)
 8003268:	f7fd f80e 	bl	8000288 <__aeabi_dsub>
 800326c:	4602      	mov	r2, r0
 800326e:	460b      	mov	r3, r1
 8003270:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	if ( temp < 0 ) {
 8003274:	f04f 0200 	mov.w	r2, #0
 8003278:	f04f 0300 	mov.w	r3, #0
 800327c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003280:	f7fd fc2c 	bl	8000adc <__aeabi_dcmplt>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <kinematicInverse+0x146>
		return FALSE;
 800328a:	2300      	movs	r3, #0
 800328c:	e136      	b.n	80034fc <kinematicInverse+0x3b4>
	}
	s2_positive  = sqrt(temp); // Note that there are 2 solution: elbow up & elbow down
 800328e:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8003292:	f016 f923 	bl	80194dc <sqrt>
 8003296:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
	s2_negative	 = -s2_positive;
 800329a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800329c:	63bb      	str	r3, [r7, #56]	; 0x38
 800329e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032a0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80032a4:	63fb      	str	r3, [r7, #60]	; 0x3c

	theta2_positive = atan2(s2_positive,c2);
 80032a6:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 80032aa:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 80032ae:	f016 f913 	bl	80194d8 <atan2>
 80032b2:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
	theta2_negative = atan2(s2_negative,c2);
 80032b6:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 80032ba:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80032be:	f016 f90b 	bl	80194d8 <atan2>
 80032c2:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	// Choose relevant situation : nearest
	if ( fabs( theta2_positive - current.Theta2) <= fabs( theta2_negative - current.Theta2)) {
 80032c6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80032ca:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80032ce:	f7fc ffdb 	bl	8000288 <__aeabi_dsub>
 80032d2:	4602      	mov	r2, r0
 80032d4:	460b      	mov	r3, r1
 80032d6:	4614      	mov	r4, r2
 80032d8:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80032dc:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80032e0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80032e4:	f7fc ffd0 	bl	8000288 <__aeabi_dsub>
 80032e8:	4602      	mov	r2, r0
 80032ea:	460b      	mov	r3, r1
 80032ec:	4690      	mov	r8, r2
 80032ee:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80032f2:	4642      	mov	r2, r8
 80032f4:	464b      	mov	r3, r9
 80032f6:	4620      	mov	r0, r4
 80032f8:	4629      	mov	r1, r5
 80032fa:	f7fd fbf9 	bl	8000af0 <__aeabi_dcmple>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d008      	beq.n	8003316 <kinematicInverse+0x1ce>
		s2 		= s2_positive;
 8003304:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003308:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		theta2 	= theta2_positive;
 800330c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003310:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 8003314:	e007      	b.n	8003326 <kinematicInverse+0x1de>
	} else {
		s2 		= s2_negative;
 8003316:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800331a:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		theta2 	= theta2_negative;
 800331e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8003322:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	}

	s1 = ((a1 + a2*c2)*pWy - a2*s2*pWx) / (pWx*pWx + pWy*pWy);
 8003326:	f04f 0200 	mov.w	r2, #0
 800332a:	4b7f      	ldr	r3, [pc, #508]	; (8003528 <kinematicInverse+0x3e0>)
 800332c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003330:	f7fd f962 	bl	80005f8 <__aeabi_dmul>
 8003334:	4603      	mov	r3, r0
 8003336:	460c      	mov	r4, r1
 8003338:	4618      	mov	r0, r3
 800333a:	4621      	mov	r1, r4
 800333c:	a376      	add	r3, pc, #472	; (adr r3, 8003518 <kinematicInverse+0x3d0>)
 800333e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003342:	f7fc ffa3 	bl	800028c <__adddf3>
 8003346:	4603      	mov	r3, r0
 8003348:	460c      	mov	r4, r1
 800334a:	4618      	mov	r0, r3
 800334c:	4621      	mov	r1, r4
 800334e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003352:	f7fd f951 	bl	80005f8 <__aeabi_dmul>
 8003356:	4603      	mov	r3, r0
 8003358:	460c      	mov	r4, r1
 800335a:	4625      	mov	r5, r4
 800335c:	461c      	mov	r4, r3
 800335e:	f04f 0200 	mov.w	r2, #0
 8003362:	4b71      	ldr	r3, [pc, #452]	; (8003528 <kinematicInverse+0x3e0>)
 8003364:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003368:	f7fd f946 	bl	80005f8 <__aeabi_dmul>
 800336c:	4602      	mov	r2, r0
 800336e:	460b      	mov	r3, r1
 8003370:	4610      	mov	r0, r2
 8003372:	4619      	mov	r1, r3
 8003374:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003378:	f7fd f93e 	bl	80005f8 <__aeabi_dmul>
 800337c:	4602      	mov	r2, r0
 800337e:	460b      	mov	r3, r1
 8003380:	4620      	mov	r0, r4
 8003382:	4629      	mov	r1, r5
 8003384:	f7fc ff80 	bl	8000288 <__aeabi_dsub>
 8003388:	4603      	mov	r3, r0
 800338a:	460c      	mov	r4, r1
 800338c:	4625      	mov	r5, r4
 800338e:	461c      	mov	r4, r3
 8003390:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003394:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003398:	f7fd f92e 	bl	80005f8 <__aeabi_dmul>
 800339c:	4602      	mov	r2, r0
 800339e:	460b      	mov	r3, r1
 80033a0:	4690      	mov	r8, r2
 80033a2:	4699      	mov	r9, r3
 80033a4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80033a8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80033ac:	f7fd f924 	bl	80005f8 <__aeabi_dmul>
 80033b0:	4602      	mov	r2, r0
 80033b2:	460b      	mov	r3, r1
 80033b4:	4640      	mov	r0, r8
 80033b6:	4649      	mov	r1, r9
 80033b8:	f7fc ff68 	bl	800028c <__adddf3>
 80033bc:	4602      	mov	r2, r0
 80033be:	460b      	mov	r3, r1
 80033c0:	4620      	mov	r0, r4
 80033c2:	4629      	mov	r1, r5
 80033c4:	f7fd fa42 	bl	800084c <__aeabi_ddiv>
 80033c8:	4603      	mov	r3, r0
 80033ca:	460c      	mov	r4, r1
 80033cc:	e9c7 3408 	strd	r3, r4, [r7, #32]
	c1 = ((a1 + a2*c2)*pWx + a2*s2*pWy) / (pWx*pWx + pWy*pWy);
 80033d0:	f04f 0200 	mov.w	r2, #0
 80033d4:	4b54      	ldr	r3, [pc, #336]	; (8003528 <kinematicInverse+0x3e0>)
 80033d6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80033da:	f7fd f90d 	bl	80005f8 <__aeabi_dmul>
 80033de:	4603      	mov	r3, r0
 80033e0:	460c      	mov	r4, r1
 80033e2:	4618      	mov	r0, r3
 80033e4:	4621      	mov	r1, r4
 80033e6:	a34c      	add	r3, pc, #304	; (adr r3, 8003518 <kinematicInverse+0x3d0>)
 80033e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ec:	f7fc ff4e 	bl	800028c <__adddf3>
 80033f0:	4603      	mov	r3, r0
 80033f2:	460c      	mov	r4, r1
 80033f4:	4618      	mov	r0, r3
 80033f6:	4621      	mov	r1, r4
 80033f8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80033fc:	f7fd f8fc 	bl	80005f8 <__aeabi_dmul>
 8003400:	4603      	mov	r3, r0
 8003402:	460c      	mov	r4, r1
 8003404:	4625      	mov	r5, r4
 8003406:	461c      	mov	r4, r3
 8003408:	f04f 0200 	mov.w	r2, #0
 800340c:	4b46      	ldr	r3, [pc, #280]	; (8003528 <kinematicInverse+0x3e0>)
 800340e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003412:	f7fd f8f1 	bl	80005f8 <__aeabi_dmul>
 8003416:	4602      	mov	r2, r0
 8003418:	460b      	mov	r3, r1
 800341a:	4610      	mov	r0, r2
 800341c:	4619      	mov	r1, r3
 800341e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003422:	f7fd f8e9 	bl	80005f8 <__aeabi_dmul>
 8003426:	4602      	mov	r2, r0
 8003428:	460b      	mov	r3, r1
 800342a:	4620      	mov	r0, r4
 800342c:	4629      	mov	r1, r5
 800342e:	f7fc ff2d 	bl	800028c <__adddf3>
 8003432:	4603      	mov	r3, r0
 8003434:	460c      	mov	r4, r1
 8003436:	4625      	mov	r5, r4
 8003438:	461c      	mov	r4, r3
 800343a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800343e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003442:	f7fd f8d9 	bl	80005f8 <__aeabi_dmul>
 8003446:	4602      	mov	r2, r0
 8003448:	460b      	mov	r3, r1
 800344a:	4690      	mov	r8, r2
 800344c:	4699      	mov	r9, r3
 800344e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003452:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003456:	f7fd f8cf 	bl	80005f8 <__aeabi_dmul>
 800345a:	4602      	mov	r2, r0
 800345c:	460b      	mov	r3, r1
 800345e:	4640      	mov	r0, r8
 8003460:	4649      	mov	r1, r9
 8003462:	f7fc ff13 	bl	800028c <__adddf3>
 8003466:	4602      	mov	r2, r0
 8003468:	460b      	mov	r3, r1
 800346a:	4620      	mov	r0, r4
 800346c:	4629      	mov	r1, r5
 800346e:	f7fd f9ed 	bl	800084c <__aeabi_ddiv>
 8003472:	4603      	mov	r3, r0
 8003474:	460c      	mov	r4, r1
 8003476:	e9c7 3406 	strd	r3, r4, [r7, #24]
	theta1 = atan2(s1,c1);
 800347a:	ed97 1b06 	vldr	d1, [r7, #24]
 800347e:	ed97 0b08 	vldr	d0, [r7, #32]
 8003482:	f016 f829 	bl	80194d8 <atan2>
 8003486:	ed87 0b04 	vstr	d0, [r7, #16]
 	theta4 = theta1 + theta2 - pnt->roll;
 800348a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800348e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003492:	f7fc fefb 	bl	800028c <__adddf3>
 8003496:	4603      	mov	r3, r0
 8003498:	460c      	mov	r4, r1
 800349a:	4618      	mov	r0, r3
 800349c:	4621      	mov	r1, r4
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 80034a4:	461a      	mov	r2, r3
 80034a6:	4623      	mov	r3, r4
 80034a8:	f7fc feee 	bl	8000288 <__aeabi_dsub>
 80034ac:	4603      	mov	r3, r0
 80034ae:	460c      	mov	r4, r1
 80034b0:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if ( SCARA_STATUS_OK != scaraCheckWorkSpace4(theta1, theta2, d3, theta4)) {
 80034b4:	ed97 3b02 	vldr	d3, [r7, #8]
 80034b8:	ed97 2b1a 	vldr	d2, [r7, #104]	; 0x68
 80034bc:	ed97 1b1e 	vldr	d1, [r7, #120]	; 0x78
 80034c0:	ed97 0b04 	vldr	d0, [r7, #16]
 80034c4:	f005 fad8 	bl	8008a78 <scaraCheckWorkSpace4>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <kinematicInverse+0x38a>
		return FALSE; // Over workspace !!!
 80034ce:	2300      	movs	r3, #0
 80034d0:	e014      	b.n	80034fc <kinematicInverse+0x3b4>
	}
	pnt->Theta1 = theta1;
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80034d8:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	pnt->Theta2 = theta2;
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80034e2:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	pnt->D3		= d3;
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80034ec:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	pnt->Theta4 = theta4;
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80034f6:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

	return TRUE; // All is well
 80034fa:	2301      	movs	r3, #1
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3780      	adds	r7, #128	; 0x80
 8003500:	46bd      	mov	sp, r7
 8003502:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003506:	b002      	add	sp, #8
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	f3af 8000 	nop.w
 8003510:	00000000 	.word	0x00000000
 8003514:	40eec800 	.word	0x40eec800
 8003518:	00000000 	.word	0x00000000
 800351c:	4068a000 	.word	0x4068a000
 8003520:	40d90000 	.word	0x40d90000
 8003524:	3ff00000 	.word	0x3ff00000
 8003528:	40640000 	.word	0x40640000
 800352c:	80000000 	.word	0x80000000
 8003530:	4060aa6e 	.word	0x4060aa6e
 8003534:	80000000 	.word	0x80000000
 8003538:	40402e14 	.word	0x40402e14
 800353c:	00000000 	.word	0x00000000
 8003540:	40e2f320 	.word	0x40e2f320

08003544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003548:	f007 fbfc 	bl	800ad44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800354c:	f000 f810 	bl	8003570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003550:	f7ff fc04 	bl	8002d5c <MX_GPIO_Init>
  MX_DMA_Init();
 8003554:	f7fe fc12 	bl	8001d7c <MX_DMA_Init>
  MX_UART4_Init();
 8003558:	f007 faf6 	bl	800ab48 <MX_UART4_Init>
  MX_FSMC_Init();
 800355c:	f7ff fb36 	bl	8002bcc <MX_FSMC_Init>
  MX_TIM7_Init();
 8003560:	f007 fa94 	bl	800aa8c <MX_TIM7_Init>
  //lowlayer_writePulse(0, 0, 0, 0);
  //HAL_Delay(10);
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8003564:	f7fe fc44 	bl	8001df0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003568:	f00e f9ba 	bl	80118e0 <osKernelStart>
//  		  HAL_Delay(10);
//  	  }
//  lowlayer_writePulse(0, 0, 0, 0);
//  __NOP();

  while (1)
 800356c:	e7fe      	b.n	800356c <main+0x28>
	...

08003570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b094      	sub	sp, #80	; 0x50
 8003574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003576:	f107 0320 	add.w	r3, r7, #32
 800357a:	2230      	movs	r2, #48	; 0x30
 800357c:	2100      	movs	r1, #0
 800357e:	4618      	mov	r0, r3
 8003580:	f012 f8ba 	bl	80156f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003584:	f107 030c 	add.w	r3, r7, #12
 8003588:	2200      	movs	r2, #0
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	605a      	str	r2, [r3, #4]
 800358e:	609a      	str	r2, [r3, #8]
 8003590:	60da      	str	r2, [r3, #12]
 8003592:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003594:	2300      	movs	r3, #0
 8003596:	60bb      	str	r3, [r7, #8]
 8003598:	4b28      	ldr	r3, [pc, #160]	; (800363c <SystemClock_Config+0xcc>)
 800359a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359c:	4a27      	ldr	r2, [pc, #156]	; (800363c <SystemClock_Config+0xcc>)
 800359e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035a2:	6413      	str	r3, [r2, #64]	; 0x40
 80035a4:	4b25      	ldr	r3, [pc, #148]	; (800363c <SystemClock_Config+0xcc>)
 80035a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ac:	60bb      	str	r3, [r7, #8]
 80035ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80035b0:	2300      	movs	r3, #0
 80035b2:	607b      	str	r3, [r7, #4]
 80035b4:	4b22      	ldr	r3, [pc, #136]	; (8003640 <SystemClock_Config+0xd0>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a21      	ldr	r2, [pc, #132]	; (8003640 <SystemClock_Config+0xd0>)
 80035ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035be:	6013      	str	r3, [r2, #0]
 80035c0:	4b1f      	ldr	r3, [pc, #124]	; (8003640 <SystemClock_Config+0xd0>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035c8:	607b      	str	r3, [r7, #4]
 80035ca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80035cc:	2301      	movs	r3, #1
 80035ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80035d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80035d6:	2302      	movs	r3, #2
 80035d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80035da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80035de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80035e0:	2308      	movs	r3, #8
 80035e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80035e4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80035e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80035ea:	2302      	movs	r3, #2
 80035ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80035ee:	2307      	movs	r3, #7
 80035f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035f2:	f107 0320 	add.w	r3, r7, #32
 80035f6:	4618      	mov	r0, r3
 80035f8:	f009 fc1c 	bl	800ce34 <HAL_RCC_OscConfig>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8003602:	f000 f831 	bl	8003668 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003606:	230f      	movs	r3, #15
 8003608:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800360a:	2302      	movs	r3, #2
 800360c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800360e:	2300      	movs	r3, #0
 8003610:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003612:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003616:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003618:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800361c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800361e:	f107 030c 	add.w	r3, r7, #12
 8003622:	2105      	movs	r1, #5
 8003624:	4618      	mov	r0, r3
 8003626:	f009 fe75 	bl	800d314 <HAL_RCC_ClockConfig>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d001      	beq.n	8003634 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003630:	f000 f81a 	bl	8003668 <Error_Handler>
  }
}
 8003634:	bf00      	nop
 8003636:	3750      	adds	r7, #80	; 0x50
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	40023800 	.word	0x40023800
 8003640:	40007000 	.word	0x40007000

08003644 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a04      	ldr	r2, [pc, #16]	; (8003664 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d101      	bne.n	800365a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003656:	f007 fb97 	bl	800ad88 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800365a:	bf00      	nop
 800365c:	3708      	adds	r7, #8
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	40001000 	.word	0x40001000

08003668 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003668:	b480      	push	{r7}
 800366a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800366c:	bf00      	nop
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr

08003676 <ringBuff_PushChar>:
 8003676:	b480      	push	{r7}
 8003678:	b083      	sub	sp, #12
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
 800367e:	460b      	mov	r3, r1
 8003680:	70fb      	strb	r3, [r7, #3]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <ringBuff_PushChar+0x1a>
 800368c:	2300      	movs	r3, #0
 800368e:	e024      	b.n	80036da <ringBuff_PushChar+0x64>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	78f9      	ldrb	r1, [r7, #3]
 800369a:	54d1      	strb	r1, [r2, r3]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80036a2:	3301      	adds	r3, #1
 80036a4:	425a      	negs	r2, r3
 80036a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036aa:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80036ae:	bf58      	it	pl
 80036b0:	4253      	negpl	r3, r2
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d103      	bne.n	80036d0 <ringBuff_PushChar+0x5a>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
 80036d8:	2301      	movs	r3, #1
 80036da:	4618      	mov	r0, r3
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr

080036e6 <ringBuff_PopChar>:
 80036e6:	b480      	push	{r7}
 80036e8:	b083      	sub	sp, #12
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
 80036ee:	6039      	str	r1, [r7, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 3409 	ldrb.w	r3, [r3, #1033]	; 0x409
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <ringBuff_PopChar+0x18>
 80036fa:	2300      	movs	r3, #0
 80036fc:	e025      	b.n	800374a <ringBuff_PopChar+0x64>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	5cd2      	ldrb	r2, [r2, r3]
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	701a      	strb	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003712:	3301      	adds	r3, #1
 8003714:	425a      	negs	r2, r3
 8003716:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800371a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800371e:	bf58      	it	pl
 8003720:	4253      	negpl	r3, r2
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003734:	429a      	cmp	r2, r3
 8003736:	d103      	bne.n	8003740 <ringBuff_PopChar+0x5a>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
 8003748:	2301      	movs	r3, #1
 800374a:	4618      	mov	r0, r3
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr

08003756 <ringBuff_PushArray>:
 8003756:	b580      	push	{r7, lr}
 8003758:	b086      	sub	sp, #24
 800375a:	af00      	add	r7, sp, #0
 800375c:	60f8      	str	r0, [r7, #12]
 800375e:	60b9      	str	r1, [r7, #8]
 8003760:	607a      	str	r2, [r7, #4]
 8003762:	2300      	movs	r3, #0
 8003764:	82fb      	strh	r3, [r7, #22]
 8003766:	e011      	b.n	800378c <ringBuff_PushArray+0x36>
 8003768:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800376c:	68ba      	ldr	r2, [r7, #8]
 800376e:	4413      	add	r3, r2
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	4619      	mov	r1, r3
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f7ff ff7e 	bl	8003676 <ringBuff_PushChar>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00b      	beq.n	8003798 <ringBuff_PushArray+0x42>
 8003780:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003784:	b29b      	uxth	r3, r3
 8003786:	3301      	adds	r3, #1
 8003788:	b29b      	uxth	r3, r3
 800378a:	82fb      	strh	r3, [r7, #22]
 800378c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	429a      	cmp	r2, r3
 8003794:	dce8      	bgt.n	8003768 <ringBuff_PushArray+0x12>
 8003796:	e000      	b.n	800379a <ringBuff_PushArray+0x44>
 8003798:	bf00      	nop
 800379a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800379e:	4618      	mov	r0, r3
 80037a0:	3718      	adds	r7, #24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <ringBuff_PopArray>:
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b086      	sub	sp, #24
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	60f8      	str	r0, [r7, #12]
 80037ae:	60b9      	str	r1, [r7, #8]
 80037b0:	607a      	str	r2, [r7, #4]
 80037b2:	2300      	movs	r3, #0
 80037b4:	617b      	str	r3, [r7, #20]
 80037b6:	e00c      	b.n	80037d2 <ringBuff_PopArray+0x2c>
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	68ba      	ldr	r2, [r7, #8]
 80037bc:	4413      	add	r3, r2
 80037be:	4619      	mov	r1, r3
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f7ff ff90 	bl	80036e6 <ringBuff_PopChar>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d007      	beq.n	80037dc <ringBuff_PopArray+0x36>
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	3301      	adds	r3, #1
 80037d0:	617b      	str	r3, [r7, #20]
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	dbee      	blt.n	80037b8 <ringBuff_PopArray+0x12>
 80037da:	e000      	b.n	80037de <ringBuff_PopArray+0x38>
 80037dc:	bf00      	nop
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	4618      	mov	r0, r3
 80037e2:	3718      	adds	r7, #24
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <ringBuff_DistanceOf>:
 80037e8:	b480      	push	{r7}
 80037ea:	b087      	sub	sp, #28
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	460b      	mov	r3, r1
 80037f2:	70fb      	strb	r3, [r7, #3]
 80037f4:	2300      	movs	r3, #0
 80037f6:	613b      	str	r3, [r7, #16]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80037fe:	617b      	str	r3, [r7, #20]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 8003806:	2b00      	cmp	r3, #0
 8003808:	d036      	beq.n	8003878 <ringBuff_DistanceOf+0x90>
 800380a:	2300      	movs	r3, #0
 800380c:	60fb      	str	r3, [r7, #12]
 800380e:	e018      	b.n	8003842 <ringBuff_DistanceOf+0x5a>
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	4413      	add	r3, r2
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	78fa      	ldrb	r2, [r7, #3]
 800381a:	429a      	cmp	r2, r3
 800381c:	d101      	bne.n	8003822 <ringBuff_DistanceOf+0x3a>
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	e037      	b.n	8003892 <ringBuff_DistanceOf+0xaa>
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	3301      	adds	r3, #1
 8003826:	613b      	str	r3, [r7, #16]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	3301      	adds	r3, #1
 800382c:	60fb      	str	r3, [r7, #12]
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	3301      	adds	r3, #1
 8003832:	425a      	negs	r2, r3
 8003834:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003838:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800383c:	bf58      	it	pl
 800383e:	4253      	negpl	r3, r2
 8003840:	617b      	str	r3, [r7, #20]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003848:	dbe2      	blt.n	8003810 <ringBuff_DistanceOf+0x28>
 800384a:	e020      	b.n	800388e <ringBuff_DistanceOf+0xa6>
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	4413      	add	r3, r2
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	78fa      	ldrb	r2, [r7, #3]
 8003856:	429a      	cmp	r2, r3
 8003858:	d101      	bne.n	800385e <ringBuff_DistanceOf+0x76>
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	e019      	b.n	8003892 <ringBuff_DistanceOf+0xaa>
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	3301      	adds	r3, #1
 8003862:	613b      	str	r3, [r7, #16]
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	3301      	adds	r3, #1
 8003868:	425a      	negs	r2, r3
 800386a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800386e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003872:	bf58      	it	pl
 8003874:	4253      	negpl	r3, r2
 8003876:	617b      	str	r3, [r7, #20]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	429a      	cmp	r2, r3
 8003882:	d1e3      	bne.n	800384c <ringBuff_DistanceOf+0x64>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f893 3409 	ldrb.w	r3, [r3, #1033]	; 0x409
 800388a:	2b00      	cmp	r3, #0
 800388c:	d0de      	beq.n	800384c <ringBuff_DistanceOf+0x64>
 800388e:	f04f 33ff 	mov.w	r3, #4294967295
 8003892:	4618      	mov	r0, r3
 8003894:	371c      	adds	r7, #28
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
	...

080038a0 <lowlayer_scanReset>:
uint8_t state_scan;
uint8_t scan_flag;

const int8_t	pulse_scan[4] = {3, 5, 5, 10};

void	lowlayer_scanReset(void) {
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
	pulse_accumulate[0] = 0;
 80038a4:	4b10      	ldr	r3, [pc, #64]	; (80038e8 <lowlayer_scanReset+0x48>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	601a      	str	r2, [r3, #0]
	pulse_accumulate[1] = 0;
 80038aa:	4b0f      	ldr	r3, [pc, #60]	; (80038e8 <lowlayer_scanReset+0x48>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	605a      	str	r2, [r3, #4]
	pulse_accumulate[2] = 0;
 80038b0:	4b0d      	ldr	r3, [pc, #52]	; (80038e8 <lowlayer_scanReset+0x48>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	609a      	str	r2, [r3, #8]
	pulse_accumulate[3] = 0;
 80038b6:	4b0c      	ldr	r3, [pc, #48]	; (80038e8 <lowlayer_scanReset+0x48>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	60da      	str	r2, [r3, #12]

	position_encoder[0] = 0;
 80038bc:	4b0b      	ldr	r3, [pc, #44]	; (80038ec <lowlayer_scanReset+0x4c>)
 80038be:	2200      	movs	r2, #0
 80038c0:	601a      	str	r2, [r3, #0]
	position_encoder[1] = 0;
 80038c2:	4b0a      	ldr	r3, [pc, #40]	; (80038ec <lowlayer_scanReset+0x4c>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	605a      	str	r2, [r3, #4]
	position_encoder[2] = 0;
 80038c8:	4b08      	ldr	r3, [pc, #32]	; (80038ec <lowlayer_scanReset+0x4c>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	609a      	str	r2, [r3, #8]

	scan_flag = 0;
 80038ce:	4b08      	ldr	r3, [pc, #32]	; (80038f0 <lowlayer_scanReset+0x50>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	701a      	strb	r2, [r3, #0]
	state_scan = 0;
 80038d4:	4b07      	ldr	r3, [pc, #28]	; (80038f4 <lowlayer_scanReset+0x54>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_RESET);
 80038da:	2200      	movs	r2, #0
 80038dc:	2108      	movs	r1, #8
 80038de:	4806      	ldr	r0, [pc, #24]	; (80038f8 <lowlayer_scanReset+0x58>)
 80038e0:	f008 f8ae 	bl	800ba40 <HAL_GPIO_WritePin>
}
 80038e4:	bf00      	nop
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	20005310 	.word	0x20005310
 80038ec:	20005324 	.word	0x20005324
 80038f0:	20005320 	.word	0x20005320
 80038f4:	20005340 	.word	0x20005340
 80038f8:	40020c00 	.word	0x40020c00
 80038fc:	00000000 	.word	0x00000000

08003900 <lowlayer_scanFlow>:

uint8_t	lowlayer_scanFlow(void) {
 8003900:	b590      	push	{r4, r7, lr}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
	// Scan limit switch from 3 to 0
	int8_t pulse[4] = {0, 0, 0 ,0};
 8003906:	2300      	movs	r3, #0
 8003908:	607b      	str	r3, [r7, #4]
	lowlayer_updateLimit();
 800390a:	f000 fe9d 	bl	8004648 <lowlayer_updateLimit>
	if (state_scan < 4) {
 800390e:	4b98      	ldr	r3, [pc, #608]	; (8003b70 <lowlayer_scanFlow+0x270>)
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	2b03      	cmp	r3, #3
 8003914:	d837      	bhi.n	8003986 <lowlayer_scanFlow+0x86>
		if (limit_switch[3 - state_scan] == 0) {
 8003916:	4b96      	ldr	r3, [pc, #600]	; (8003b70 <lowlayer_scanFlow+0x270>)
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	f1c3 0303 	rsb	r3, r3, #3
 800391e:	4a95      	ldr	r2, [pc, #596]	; (8003b74 <lowlayer_scanFlow+0x274>)
 8003920:	5cd3      	ldrb	r3, [r2, r3]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d121      	bne.n	800396a <lowlayer_scanFlow+0x6a>
			pulse[3 - state_scan] = pulse_scan[3 - state_scan];
 8003926:	4b92      	ldr	r3, [pc, #584]	; (8003b70 <lowlayer_scanFlow+0x270>)
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	f1c3 0203 	rsb	r2, r3, #3
 800392e:	4b90      	ldr	r3, [pc, #576]	; (8003b70 <lowlayer_scanFlow+0x270>)
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	f1c3 0303 	rsb	r3, r3, #3
 8003936:	4990      	ldr	r1, [pc, #576]	; (8003b78 <lowlayer_scanFlow+0x278>)
 8003938:	568a      	ldrsb	r2, [r1, r2]
 800393a:	f107 0108 	add.w	r1, r7, #8
 800393e:	440b      	add	r3, r1
 8003940:	f803 2c04 	strb.w	r2, [r3, #-4]
			lowlayer_writePulse(-pulse[0], pulse[1], -pulse[2], pulse[3]);
 8003944:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003948:	b2db      	uxtb	r3, r3
 800394a:	425b      	negs	r3, r3
 800394c:	b2db      	uxtb	r3, r3
 800394e:	b258      	sxtb	r0, r3
 8003950:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8003954:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003958:	b2db      	uxtb	r3, r3
 800395a:	425b      	negs	r3, r3
 800395c:	b2db      	uxtb	r3, r3
 800395e:	b25a      	sxtb	r2, r3
 8003960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003964:	f000 fcee 	bl	8004344 <lowlayer_writePulse>
 8003968:	e00b      	b.n	8003982 <lowlayer_scanFlow+0x82>
		} else {
			state_scan++;
 800396a:	4b81      	ldr	r3, [pc, #516]	; (8003b70 <lowlayer_scanFlow+0x270>)
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	3301      	adds	r3, #1
 8003970:	b2da      	uxtb	r2, r3
 8003972:	4b7f      	ldr	r3, [pc, #508]	; (8003b70 <lowlayer_scanFlow+0x270>)
 8003974:	701a      	strb	r2, [r3, #0]
			lowlayer_writePulse(0, 0, 0, 0);
 8003976:	2300      	movs	r3, #0
 8003978:	2200      	movs	r2, #0
 800397a:	2100      	movs	r1, #0
 800397c:	2000      	movs	r0, #0
 800397e:	f000 fce1 	bl	8004344 <lowlayer_writePulse>
		}

		return FALSE;
 8003982:	2300      	movs	r3, #0
 8003984:	e0d8      	b.n	8003b38 <lowlayer_scanFlow+0x238>
	} else {
		HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_SET);
 8003986:	2201      	movs	r2, #1
 8003988:	2108      	movs	r1, #8
 800398a:	487c      	ldr	r0, [pc, #496]	; (8003b7c <lowlayer_scanFlow+0x27c>)
 800398c:	f008 f858 	bl	800ba40 <HAL_GPIO_WritePin>
		lowlayer_updateCapture();
 8003990:	f000 fe3e 	bl	8004610 <lowlayer_updateCapture>
		lowlayer_writePulse(0, 0, 0, 0);
 8003994:	2300      	movs	r3, #0
 8003996:	2200      	movs	r2, #0
 8003998:	2100      	movs	r1, #0
 800399a:	2000      	movs	r0, #0
 800399c:	f000 fcd2 	bl	8004344 <lowlayer_writePulse>
		scan_flag = 1;
 80039a0:	4b77      	ldr	r3, [pc, #476]	; (8003b80 <lowlayer_scanFlow+0x280>)
 80039a2:	2201      	movs	r2, #1
 80039a4:	701a      	strb	r2, [r3, #0]
		// Update offset
		offset_encoder[0] 	= position_capture[0];
 80039a6:	4b77      	ldr	r3, [pc, #476]	; (8003b84 <lowlayer_scanFlow+0x284>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a77      	ldr	r2, [pc, #476]	; (8003b88 <lowlayer_scanFlow+0x288>)
 80039ac:	6013      	str	r3, [r2, #0]
		offset_encoder[1] 	= position_capture[1];
 80039ae:	4b75      	ldr	r3, [pc, #468]	; (8003b84 <lowlayer_scanFlow+0x284>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	4a75      	ldr	r2, [pc, #468]	; (8003b88 <lowlayer_scanFlow+0x288>)
 80039b4:	6053      	str	r3, [r2, #4]
		offset_encoder[2] 	= position_capture[2];
 80039b6:	4b73      	ldr	r3, [pc, #460]	; (8003b84 <lowlayer_scanFlow+0x284>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	4a73      	ldr	r2, [pc, #460]	; (8003b88 <lowlayer_scanFlow+0x288>)
 80039bc:	6093      	str	r3, [r2, #8]
		offset_stepper		= pulse_accumulate[3];
 80039be:	4b73      	ldr	r3, [pc, #460]	; (8003b8c <lowlayer_scanFlow+0x28c>)
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	4a73      	ldr	r2, [pc, #460]	; (8003b90 <lowlayer_scanFlow+0x290>)
 80039c4:	6013      	str	r3, [r2, #0]
		// LOG offset
		LOG_REPORT("offset encoder 0", offset_encoder[0]);
 80039c6:	4b70      	ldr	r3, [pc, #448]	; (8003b88 <lowlayer_scanFlow+0x288>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	4619      	mov	r1, r3
 80039ce:	4871      	ldr	r0, [pc, #452]	; (8003b94 <lowlayer_scanFlow+0x294>)
 80039d0:	f7fd fe06 	bl	80015e0 <LOG_REPORT>
		LOG_REPORT("offset encoder 1", offset_encoder[1]);
 80039d4:	4b6c      	ldr	r3, [pc, #432]	; (8003b88 <lowlayer_scanFlow+0x288>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	b29b      	uxth	r3, r3
 80039da:	4619      	mov	r1, r3
 80039dc:	486e      	ldr	r0, [pc, #440]	; (8003b98 <lowlayer_scanFlow+0x298>)
 80039de:	f7fd fdff 	bl	80015e0 <LOG_REPORT>
		LOG_REPORT("offset encoder 2", offset_encoder[2]);
 80039e2:	4b69      	ldr	r3, [pc, #420]	; (8003b88 <lowlayer_scanFlow+0x288>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	4619      	mov	r1, r3
 80039ea:	486c      	ldr	r0, [pc, #432]	; (8003b9c <lowlayer_scanFlow+0x29c>)
 80039ec:	f7fd fdf8 	bl	80015e0 <LOG_REPORT>
		LOG_REPORT("offset stepper", offset_stepper);
 80039f0:	4b67      	ldr	r3, [pc, #412]	; (8003b90 <lowlayer_scanFlow+0x290>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	4619      	mov	r1, r3
 80039f8:	4869      	ldr	r0, [pc, #420]	; (8003ba0 <lowlayer_scanFlow+0x2a0>)
 80039fa:	f7fd fdf1 	bl	80015e0 <LOG_REPORT>

		offset_setpoint[0]	= HARD_LIM0_NEG
				- DIR_ENCODER_0*offset_encoder[0]*2.0*PI/ENCODER_J0;
 80039fe:	4b62      	ldr	r3, [pc, #392]	; (8003b88 <lowlayer_scanFlow+0x288>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	ee07 3a90 	vmov	s15, r3
 8003a06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a0a:	ee17 0a90 	vmov	r0, s15
 8003a0e:	f7fc fd9b 	bl	8000548 <__aeabi_f2d>
 8003a12:	4602      	mov	r2, r0
 8003a14:	460b      	mov	r3, r1
 8003a16:	f7fc fc39 	bl	800028c <__adddf3>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	460c      	mov	r4, r1
 8003a1e:	4618      	mov	r0, r3
 8003a20:	4621      	mov	r1, r4
 8003a22:	a347      	add	r3, pc, #284	; (adr r3, 8003b40 <lowlayer_scanFlow+0x240>)
 8003a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a28:	f7fc fde6 	bl	80005f8 <__aeabi_dmul>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	460c      	mov	r4, r1
 8003a30:	4618      	mov	r0, r3
 8003a32:	4621      	mov	r1, r4
 8003a34:	a344      	add	r3, pc, #272	; (adr r3, 8003b48 <lowlayer_scanFlow+0x248>)
 8003a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a3a:	f7fc ff07 	bl	800084c <__aeabi_ddiv>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	460c      	mov	r4, r1
 8003a42:	461a      	mov	r2, r3
 8003a44:	4623      	mov	r3, r4
 8003a46:	a142      	add	r1, pc, #264	; (adr r1, 8003b50 <lowlayer_scanFlow+0x250>)
 8003a48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a4c:	f7fc fc1c 	bl	8000288 <__aeabi_dsub>
 8003a50:	4603      	mov	r3, r0
 8003a52:	460c      	mov	r4, r1
		offset_setpoint[0]	= HARD_LIM0_NEG
 8003a54:	4a53      	ldr	r2, [pc, #332]	; (8003ba4 <lowlayer_scanFlow+0x2a4>)
 8003a56:	e9c2 3400 	strd	r3, r4, [r2]
		offset_setpoint[1]	= HARD_LIM1_POS
				- DIR_ENCODER_1*offset_encoder[1]*2.0*PI/ENCODER_J1;
 8003a5a:	4b4b      	ldr	r3, [pc, #300]	; (8003b88 <lowlayer_scanFlow+0x288>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	ee07 3a90 	vmov	s15, r3
 8003a62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a66:	ee17 0a90 	vmov	r0, s15
 8003a6a:	f7fc fd6d 	bl	8000548 <__aeabi_f2d>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	460b      	mov	r3, r1
 8003a72:	f7fc fc0b 	bl	800028c <__adddf3>
 8003a76:	4603      	mov	r3, r0
 8003a78:	460c      	mov	r4, r1
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	4621      	mov	r1, r4
 8003a7e:	a330      	add	r3, pc, #192	; (adr r3, 8003b40 <lowlayer_scanFlow+0x240>)
 8003a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a84:	f7fc fdb8 	bl	80005f8 <__aeabi_dmul>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	460c      	mov	r4, r1
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	4621      	mov	r1, r4
 8003a90:	f04f 0200 	mov.w	r2, #0
 8003a94:	4b44      	ldr	r3, [pc, #272]	; (8003ba8 <lowlayer_scanFlow+0x2a8>)
 8003a96:	f7fc fed9 	bl	800084c <__aeabi_ddiv>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	460c      	mov	r4, r1
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	4623      	mov	r3, r4
 8003aa2:	a12d      	add	r1, pc, #180	; (adr r1, 8003b58 <lowlayer_scanFlow+0x258>)
 8003aa4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003aa8:	f7fc fbee 	bl	8000288 <__aeabi_dsub>
 8003aac:	4603      	mov	r3, r0
 8003aae:	460c      	mov	r4, r1
		offset_setpoint[1]	= HARD_LIM1_POS
 8003ab0:	4a3c      	ldr	r2, [pc, #240]	; (8003ba4 <lowlayer_scanFlow+0x2a4>)
 8003ab2:	e9c2 3402 	strd	r3, r4, [r2, #8]
		offset_setpoint[2]	= HARD_LIM2_NEG
				- DIR_ENCODER_2*offset_encoder[2]/ENCODER_J2;
 8003ab6:	4b34      	ldr	r3, [pc, #208]	; (8003b88 <lowlayer_scanFlow+0x288>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	ee07 3a90 	vmov	s15, r3
 8003abe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ac2:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8003bac <lowlayer_scanFlow+0x2ac>
 8003ac6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003aca:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8003bb0 <lowlayer_scanFlow+0x2b0>
 8003ace:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003ad2:	ee17 0a90 	vmov	r0, s15
 8003ad6:	f7fc fd37 	bl	8000548 <__aeabi_f2d>
 8003ada:	4603      	mov	r3, r0
 8003adc:	460c      	mov	r4, r1
		offset_setpoint[2]	= HARD_LIM2_NEG
 8003ade:	4a31      	ldr	r2, [pc, #196]	; (8003ba4 <lowlayer_scanFlow+0x2a4>)
 8003ae0:	e9c2 3404 	strd	r3, r4, [r2, #16]
		offset_setpoint[3]  = HARD_LIM3_POS
				- offset_stepper*2.0*PI/GEAR_J3;
 8003ae4:	4b2a      	ldr	r3, [pc, #168]	; (8003b90 <lowlayer_scanFlow+0x290>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7fc fd1b 	bl	8000524 <__aeabi_i2d>
 8003aee:	4602      	mov	r2, r0
 8003af0:	460b      	mov	r3, r1
 8003af2:	f7fc fbcb 	bl	800028c <__adddf3>
 8003af6:	4603      	mov	r3, r0
 8003af8:	460c      	mov	r4, r1
 8003afa:	4618      	mov	r0, r3
 8003afc:	4621      	mov	r1, r4
 8003afe:	a310      	add	r3, pc, #64	; (adr r3, 8003b40 <lowlayer_scanFlow+0x240>)
 8003b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b04:	f7fc fd78 	bl	80005f8 <__aeabi_dmul>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	460c      	mov	r4, r1
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	4621      	mov	r1, r4
 8003b10:	a313      	add	r3, pc, #76	; (adr r3, 8003b60 <lowlayer_scanFlow+0x260>)
 8003b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b16:	f7fc fe99 	bl	800084c <__aeabi_ddiv>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	460c      	mov	r4, r1
 8003b1e:	461a      	mov	r2, r3
 8003b20:	4623      	mov	r3, r4
 8003b22:	a111      	add	r1, pc, #68	; (adr r1, 8003b68 <lowlayer_scanFlow+0x268>)
 8003b24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b28:	f7fc fbae 	bl	8000288 <__aeabi_dsub>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	460c      	mov	r4, r1
		offset_setpoint[3]  = HARD_LIM3_POS
 8003b30:	4a1c      	ldr	r2, [pc, #112]	; (8003ba4 <lowlayer_scanFlow+0x2a4>)
 8003b32:	e9c2 3406 	strd	r3, r4, [r2, #24]

		return TRUE;
 8003b36:	2301      	movs	r3, #1
	}
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd90      	pop	{r4, r7, pc}
 8003b40:	60000000 	.word	0x60000000
 8003b44:	400921fb 	.word	0x400921fb
 8003b48:	00000000 	.word	0x00000000
 8003b4c:	40f38800 	.word	0x40f38800
 8003b50:	40000000 	.word	0x40000000
 8003b54:	bff9f17a 	.word	0xbff9f17a
 8003b58:	80000000 	.word	0x80000000
 8003b5c:	40039716 	.word	0x40039716
 8003b60:	a0000000 	.word	0xa0000000
 8003b64:	40d3bca1 	.word	0x40d3bca1
 8003b68:	a0000000 	.word	0xa0000000
 8003b6c:	4008330d 	.word	0x4008330d
 8003b70:	20005340 	.word	0x20005340
 8003b74:	20005330 	.word	0x20005330
 8003b78:	0801b0f8 	.word	0x0801b0f8
 8003b7c:	40020c00 	.word	0x40020c00
 8003b80:	20005320 	.word	0x20005320
 8003b84:	20005334 	.word	0x20005334
 8003b88:	20005368 	.word	0x20005368
 8003b8c:	20005310 	.word	0x20005310
 8003b90:	20005344 	.word	0x20005344
 8003b94:	0801af18 	.word	0x0801af18
 8003b98:	0801af2c 	.word	0x0801af2c
 8003b9c:	0801af40 	.word	0x0801af40
 8003ba0:	0801af54 	.word	0x0801af54
 8003ba4:	20005348 	.word	0x20005348
 8003ba8:	40ff4000 	.word	0x40ff4000
 8003bac:	4426aaab 	.word	0x4426aaab
 8003bb0:	400f1aa0 	.word	0x400f1aa0
 8003bb4:	00000000 	.word	0x00000000

08003bb8 <lowlayer_goToSoftLimit>:

uint8_t	lowlayer_goToSoftLimit(SCARA_PositionTypeDef *setpoint) {
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
	int8_t pulse[4] = {0, 0, 0 ,0};
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	60bb      	str	r3, [r7, #8]
	uint8_t check = 0;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	73fb      	strb	r3, [r7, #15]
	lowlayer_readSetPosition(setpoint);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f951 	bl	8003e70 <lowlayer_readSetPosition>
	if (setpoint->Theta1 < LIM_MIN_J0) {
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003bd4:	a333      	add	r3, pc, #204	; (adr r3, 8003ca4 <lowlayer_goToSoftLimit+0xec>)
 8003bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bda:	f7fc ff7f 	bl	8000adc <__aeabi_dcmplt>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d004      	beq.n	8003bee <lowlayer_goToSoftLimit+0x36>
		pulse[0] = pulse_scan[0];
 8003be4:	2303      	movs	r3, #3
 8003be6:	723b      	strb	r3, [r7, #8]
		check++;
 8003be8:	7bfb      	ldrb	r3, [r7, #15]
 8003bea:	3301      	adds	r3, #1
 8003bec:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta2 > LIM_MAX_J1) {
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8003bf4:	a32d      	add	r3, pc, #180	; (adr r3, 8003cac <lowlayer_goToSoftLimit+0xf4>)
 8003bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bfa:	f7fc ff8d 	bl	8000b18 <__aeabi_dcmpgt>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d004      	beq.n	8003c0e <lowlayer_goToSoftLimit+0x56>
		pulse[1] = pulse_scan[1];
 8003c04:	2305      	movs	r3, #5
 8003c06:	727b      	strb	r3, [r7, #9]
		check++;
 8003c08:	7bfb      	ldrb	r3, [r7, #15]
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->D3 < LIM_MIN_J2) {
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8003c14:	f04f 0200 	mov.w	r2, #0
 8003c18:	4b21      	ldr	r3, [pc, #132]	; (8003ca0 <lowlayer_goToSoftLimit+0xe8>)
 8003c1a:	f7fc ff5f 	bl	8000adc <__aeabi_dcmplt>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d004      	beq.n	8003c2e <lowlayer_goToSoftLimit+0x76>
		pulse[2] = pulse_scan[2];
 8003c24:	2305      	movs	r3, #5
 8003c26:	72bb      	strb	r3, [r7, #10]
		check++;
 8003c28:	7bfb      	ldrb	r3, [r7, #15]
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta4 > LIM_MAX_J3) {
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8003c34:	a318      	add	r3, pc, #96	; (adr r3, 8003c98 <lowlayer_goToSoftLimit+0xe0>)
 8003c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c3a:	f7fc ff6d 	bl	8000b18 <__aeabi_dcmpgt>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d004      	beq.n	8003c4e <lowlayer_goToSoftLimit+0x96>
		pulse[3] = pulse_scan[3];
 8003c44:	230a      	movs	r3, #10
 8003c46:	72fb      	strb	r3, [r7, #11]
		check++;
 8003c48:	7bfb      	ldrb	r3, [r7, #15]
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	73fb      	strb	r3, [r7, #15]
	}

	if (check > 0) {
 8003c4e:	7bfb      	ldrb	r3, [r7, #15]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d013      	beq.n	8003c7c <lowlayer_goToSoftLimit+0xc4>
		lowlayer_writePulse(pulse[0], -pulse[1], pulse[2], -pulse[3]);
 8003c54:	f997 0008 	ldrsb.w	r0, [r7, #8]
 8003c58:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	425b      	negs	r3, r3
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	b259      	sxtb	r1, r3
 8003c64:	f997 200a 	ldrsb.w	r2, [r7, #10]
 8003c68:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	425b      	negs	r3, r3
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	b25b      	sxtb	r3, r3
 8003c74:	f000 fb66 	bl	8004344 <lowlayer_writePulse>
		return FALSE;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	e006      	b.n	8003c8a <lowlayer_goToSoftLimit+0xd2>
	} else {
		lowlayer_writePulse(0, 0, 0, 0);
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	2200      	movs	r2, #0
 8003c80:	2100      	movs	r1, #0
 8003c82:	2000      	movs	r0, #0
 8003c84:	f000 fb5e 	bl	8004344 <lowlayer_writePulse>
		return TRUE;
 8003c88:	2301      	movs	r3, #1
	}
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3710      	adds	r7, #16
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	f3af 8000 	nop.w
 8003c98:	daaaaaab 	.word	0xdaaaaaab
 8003c9c:	4007bc89 	.word	0x4007bc89
 8003ca0:	3ff00000 	.word	0x3ff00000
 8003ca4:	daaaaaab 	.word	0xdaaaaaab
 8003ca8:	bff7bc89 	.word	0xbff7bc89
 8003cac:	88000000 	.word	0x88000000
 8003cb0:	4002d97c 	.word	0x4002d97c
 8003cb4:	00000000 	.word	0x00000000

08003cb8 <lowlayer_readTruePosition>:

void	lowlayer_readTruePosition(SCARA_PositionTypeDef *true) {
 8003cb8:	b590      	push	{r4, r7, lr}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
	lowlayer_updateEncoder();
 8003cc0:	f000 fc8a 	bl	80045d8 <lowlayer_updateEncoder>
	true->Theta1 = HARD_LIM0_NEG
			+ DIR_ENCODER_0*(position_encoder[0] - offset_encoder[0])*2.0*PI/ENCODER_J0; // Servo Motor
 8003cc4:	4b62      	ldr	r3, [pc, #392]	; (8003e50 <lowlayer_readTruePosition+0x198>)
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	4b62      	ldr	r3, [pc, #392]	; (8003e54 <lowlayer_readTruePosition+0x19c>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	ee07 3a90 	vmov	s15, r3
 8003cd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cd6:	ee17 0a90 	vmov	r0, s15
 8003cda:	f7fc fc35 	bl	8000548 <__aeabi_f2d>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	f7fc fad3 	bl	800028c <__adddf3>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	460c      	mov	r4, r1
 8003cea:	4618      	mov	r0, r3
 8003cec:	4621      	mov	r1, r4
 8003cee:	a34c      	add	r3, pc, #304	; (adr r3, 8003e20 <lowlayer_readTruePosition+0x168>)
 8003cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf4:	f7fc fc80 	bl	80005f8 <__aeabi_dmul>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	460c      	mov	r4, r1
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	4621      	mov	r1, r4
 8003d00:	a349      	add	r3, pc, #292	; (adr r3, 8003e28 <lowlayer_readTruePosition+0x170>)
 8003d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d06:	f7fc fda1 	bl	800084c <__aeabi_ddiv>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	460c      	mov	r4, r1
 8003d0e:	4618      	mov	r0, r3
 8003d10:	4621      	mov	r1, r4
 8003d12:	a347      	add	r3, pc, #284	; (adr r3, 8003e30 <lowlayer_readTruePosition+0x178>)
 8003d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d18:	f7fc fab6 	bl	8000288 <__aeabi_dsub>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	460c      	mov	r4, r1
	true->Theta1 = HARD_LIM0_NEG
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	true->Theta2 = HARD_LIM1_POS
			+ DIR_ENCODER_1*(position_encoder[1] - offset_encoder[1])*2.0*PI/ENCODER_J1; // Servo Motor
 8003d26:	4b4a      	ldr	r3, [pc, #296]	; (8003e50 <lowlayer_readTruePosition+0x198>)
 8003d28:	685a      	ldr	r2, [r3, #4]
 8003d2a:	4b4a      	ldr	r3, [pc, #296]	; (8003e54 <lowlayer_readTruePosition+0x19c>)
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	ee07 3a90 	vmov	s15, r3
 8003d34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d38:	ee17 0a90 	vmov	r0, s15
 8003d3c:	f7fc fc04 	bl	8000548 <__aeabi_f2d>
 8003d40:	4602      	mov	r2, r0
 8003d42:	460b      	mov	r3, r1
 8003d44:	f7fc faa2 	bl	800028c <__adddf3>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	460c      	mov	r4, r1
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	4621      	mov	r1, r4
 8003d50:	a333      	add	r3, pc, #204	; (adr r3, 8003e20 <lowlayer_readTruePosition+0x168>)
 8003d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d56:	f7fc fc4f 	bl	80005f8 <__aeabi_dmul>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	460c      	mov	r4, r1
 8003d5e:	4618      	mov	r0, r3
 8003d60:	4621      	mov	r1, r4
 8003d62:	f04f 0200 	mov.w	r2, #0
 8003d66:	4b3c      	ldr	r3, [pc, #240]	; (8003e58 <lowlayer_readTruePosition+0x1a0>)
 8003d68:	f7fc fd70 	bl	800084c <__aeabi_ddiv>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	460c      	mov	r4, r1
 8003d70:	4618      	mov	r0, r3
 8003d72:	4621      	mov	r1, r4
 8003d74:	a330      	add	r3, pc, #192	; (adr r3, 8003e38 <lowlayer_readTruePosition+0x180>)
 8003d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7a:	f7fc fa87 	bl	800028c <__adddf3>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	460c      	mov	r4, r1
	true->Theta2 = HARD_LIM1_POS
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70

	true->D3	 = HARD_LIM2_NEG
			+ DIR_ENCODER_2*(position_encoder[2] - offset_encoder[2])/ENCODER_J2; // Servo Motor
 8003d88:	4b31      	ldr	r3, [pc, #196]	; (8003e50 <lowlayer_readTruePosition+0x198>)
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	4b31      	ldr	r3, [pc, #196]	; (8003e54 <lowlayer_readTruePosition+0x19c>)
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	ee07 3a90 	vmov	s15, r3
 8003d96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d9a:	eeb1 7a67 	vneg.f32	s14, s15
 8003d9e:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8003e5c <lowlayer_readTruePosition+0x1a4>
 8003da2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003da6:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8003e60 <lowlayer_readTruePosition+0x1a8>
 8003daa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003dae:	ee17 0a90 	vmov	r0, s15
 8003db2:	f7fc fbc9 	bl	8000548 <__aeabi_f2d>
 8003db6:	4603      	mov	r3, r0
 8003db8:	460c      	mov	r4, r1
	true->D3	 = HARD_LIM2_NEG
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78

	true->Theta4 = HARD_LIM3_POS
			+ (pulse_accumulate[3] - offset_stepper)*2.0*PI/GEAR_J3; // Stepper Motor
 8003dc0:	4b28      	ldr	r3, [pc, #160]	; (8003e64 <lowlayer_readTruePosition+0x1ac>)
 8003dc2:	68da      	ldr	r2, [r3, #12]
 8003dc4:	4b28      	ldr	r3, [pc, #160]	; (8003e68 <lowlayer_readTruePosition+0x1b0>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7fc fbaa 	bl	8000524 <__aeabi_i2d>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	f7fc fa5a 	bl	800028c <__adddf3>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	460c      	mov	r4, r1
 8003ddc:	4618      	mov	r0, r3
 8003dde:	4621      	mov	r1, r4
 8003de0:	a30f      	add	r3, pc, #60	; (adr r3, 8003e20 <lowlayer_readTruePosition+0x168>)
 8003de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de6:	f7fc fc07 	bl	80005f8 <__aeabi_dmul>
 8003dea:	4603      	mov	r3, r0
 8003dec:	460c      	mov	r4, r1
 8003dee:	4618      	mov	r0, r3
 8003df0:	4621      	mov	r1, r4
 8003df2:	a313      	add	r3, pc, #76	; (adr r3, 8003e40 <lowlayer_readTruePosition+0x188>)
 8003df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df8:	f7fc fd28 	bl	800084c <__aeabi_ddiv>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	460c      	mov	r4, r1
 8003e00:	4618      	mov	r0, r3
 8003e02:	4621      	mov	r1, r4
 8003e04:	a310      	add	r3, pc, #64	; (adr r3, 8003e48 <lowlayer_readTruePosition+0x190>)
 8003e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e0a:	f7fc fa3f 	bl	800028c <__adddf3>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	460c      	mov	r4, r1
	true->Theta4 = HARD_LIM3_POS
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd90      	pop	{r4, r7, pc}
 8003e20:	60000000 	.word	0x60000000
 8003e24:	400921fb 	.word	0x400921fb
 8003e28:	00000000 	.word	0x00000000
 8003e2c:	40f38800 	.word	0x40f38800
 8003e30:	40000000 	.word	0x40000000
 8003e34:	3ff9f17a 	.word	0x3ff9f17a
 8003e38:	80000000 	.word	0x80000000
 8003e3c:	40039716 	.word	0x40039716
 8003e40:	a0000000 	.word	0xa0000000
 8003e44:	40d3bca1 	.word	0x40d3bca1
 8003e48:	a0000000 	.word	0xa0000000
 8003e4c:	4008330d 	.word	0x4008330d
 8003e50:	20005324 	.word	0x20005324
 8003e54:	20005368 	.word	0x20005368
 8003e58:	40ff4000 	.word	0x40ff4000
 8003e5c:	4426aaab 	.word	0x4426aaab
 8003e60:	400f1aa0 	.word	0x400f1aa0
 8003e64:	20005310 	.word	0x20005310
 8003e68:	20005344 	.word	0x20005344
 8003e6c:	00000000 	.word	0x00000000

08003e70 <lowlayer_readSetPosition>:

void	lowlayer_readSetPosition(SCARA_PositionTypeDef *setpoint) {
 8003e70:	b5b0      	push	{r4, r5, r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
	setpoint->Theta1 = offset_setpoint[0] + pulse_accumulate[0]*2.0*PI/GEAR_J0;
 8003e78:	4b53      	ldr	r3, [pc, #332]	; (8003fc8 <lowlayer_readSetPosition+0x158>)
 8003e7a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003e7e:	4b53      	ldr	r3, [pc, #332]	; (8003fcc <lowlayer_readSetPosition+0x15c>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7fc fb4e 	bl	8000524 <__aeabi_i2d>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	f7fc f9fe 	bl	800028c <__adddf3>
 8003e90:	4602      	mov	r2, r0
 8003e92:	460b      	mov	r3, r1
 8003e94:	4610      	mov	r0, r2
 8003e96:	4619      	mov	r1, r3
 8003e98:	a345      	add	r3, pc, #276	; (adr r3, 8003fb0 <lowlayer_readSetPosition+0x140>)
 8003e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9e:	f7fc fbab 	bl	80005f8 <__aeabi_dmul>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	4610      	mov	r0, r2
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	a343      	add	r3, pc, #268	; (adr r3, 8003fb8 <lowlayer_readSetPosition+0x148>)
 8003eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb0:	f7fc fccc 	bl	800084c <__aeabi_ddiv>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	460b      	mov	r3, r1
 8003eb8:	4620      	mov	r0, r4
 8003eba:	4629      	mov	r1, r5
 8003ebc:	f7fc f9e6 	bl	800028c <__adddf3>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	460c      	mov	r4, r1
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	setpoint->Theta2 = offset_setpoint[1] + pulse_accumulate[1]*2.0*PI/GEAR_J1;
 8003eca:	4b3f      	ldr	r3, [pc, #252]	; (8003fc8 <lowlayer_readSetPosition+0x158>)
 8003ecc:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8003ed0:	4b3e      	ldr	r3, [pc, #248]	; (8003fcc <lowlayer_readSetPosition+0x15c>)
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7fc fb25 	bl	8000524 <__aeabi_i2d>
 8003eda:	4602      	mov	r2, r0
 8003edc:	460b      	mov	r3, r1
 8003ede:	f7fc f9d5 	bl	800028c <__adddf3>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	4610      	mov	r0, r2
 8003ee8:	4619      	mov	r1, r3
 8003eea:	a331      	add	r3, pc, #196	; (adr r3, 8003fb0 <lowlayer_readSetPosition+0x140>)
 8003eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef0:	f7fc fb82 	bl	80005f8 <__aeabi_dmul>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	4610      	mov	r0, r2
 8003efa:	4619      	mov	r1, r3
 8003efc:	f04f 0200 	mov.w	r2, #0
 8003f00:	4b33      	ldr	r3, [pc, #204]	; (8003fd0 <lowlayer_readSetPosition+0x160>)
 8003f02:	f7fc fca3 	bl	800084c <__aeabi_ddiv>
 8003f06:	4602      	mov	r2, r0
 8003f08:	460b      	mov	r3, r1
 8003f0a:	4620      	mov	r0, r4
 8003f0c:	4629      	mov	r1, r5
 8003f0e:	f7fc f9bd 	bl	800028c <__adddf3>
 8003f12:	4603      	mov	r3, r0
 8003f14:	460c      	mov	r4, r1
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70

	setpoint->D3	 = offset_setpoint[2] + pulse_accumulate[2]/GEAR_J2;
 8003f1c:	4b2a      	ldr	r3, [pc, #168]	; (8003fc8 <lowlayer_readSetPosition+0x158>)
 8003f1e:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8003f22:	4b2a      	ldr	r3, [pc, #168]	; (8003fcc <lowlayer_readSetPosition+0x15c>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	ee07 3a90 	vmov	s15, r3
 8003f2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f2e:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8003fd4 <lowlayer_readSetPosition+0x164>
 8003f32:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003f36:	ee16 0a90 	vmov	r0, s13
 8003f3a:	f7fc fb05 	bl	8000548 <__aeabi_f2d>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	460b      	mov	r3, r1
 8003f42:	4620      	mov	r0, r4
 8003f44:	4629      	mov	r1, r5
 8003f46:	f7fc f9a1 	bl	800028c <__adddf3>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	460c      	mov	r4, r1
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78

	setpoint->Theta4 = offset_setpoint[3] + pulse_accumulate[3]*2.0*PI/GEAR_J3;
 8003f54:	4b1c      	ldr	r3, [pc, #112]	; (8003fc8 <lowlayer_readSetPosition+0x158>)
 8003f56:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003f5a:	4b1c      	ldr	r3, [pc, #112]	; (8003fcc <lowlayer_readSetPosition+0x15c>)
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7fc fae0 	bl	8000524 <__aeabi_i2d>
 8003f64:	4602      	mov	r2, r0
 8003f66:	460b      	mov	r3, r1
 8003f68:	f7fc f990 	bl	800028c <__adddf3>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	460b      	mov	r3, r1
 8003f70:	4610      	mov	r0, r2
 8003f72:	4619      	mov	r1, r3
 8003f74:	a30e      	add	r3, pc, #56	; (adr r3, 8003fb0 <lowlayer_readSetPosition+0x140>)
 8003f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7a:	f7fc fb3d 	bl	80005f8 <__aeabi_dmul>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	460b      	mov	r3, r1
 8003f82:	4610      	mov	r0, r2
 8003f84:	4619      	mov	r1, r3
 8003f86:	a30e      	add	r3, pc, #56	; (adr r3, 8003fc0 <lowlayer_readSetPosition+0x150>)
 8003f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8c:	f7fc fc5e 	bl	800084c <__aeabi_ddiv>
 8003f90:	4602      	mov	r2, r0
 8003f92:	460b      	mov	r3, r1
 8003f94:	4620      	mov	r0, r4
 8003f96:	4629      	mov	r1, r5
 8003f98:	f7fc f978 	bl	800028c <__adddf3>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	460c      	mov	r4, r1
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
}
 8003fa6:	bf00      	nop
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bdb0      	pop	{r4, r5, r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	60000000 	.word	0x60000000
 8003fb4:	400921fb 	.word	0x400921fb
 8003fb8:	00000000 	.word	0x00000000
 8003fbc:	40d38800 	.word	0x40d38800
 8003fc0:	a0000000 	.word	0xa0000000
 8003fc4:	40d3bca1 	.word	0x40d3bca1
 8003fc8:	20005348 	.word	0x20005348
 8003fcc:	20005310 	.word	0x20005310
 8003fd0:	40df4000 	.word	0x40df4000
 8003fd4:	42c80000 	.word	0x42c80000

08003fd8 <lowlayer_computeAndWritePulse>:

uint8_t	lowlayer_computeAndWritePulse(SCARA_PositionTypeDef current, SCARA_PositionTypeDef next) {
 8003fd8:	b084      	sub	sp, #16
 8003fda:	b590      	push	{r4, r7, lr}
 8003fdc:	b093      	sub	sp, #76	; 0x4c
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8003fe4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t	current_var0, current_var1, current_var2, current_var3;
	uint32_t	next_var0, next_var1, next_var2, next_var3;
	int64_t		delta_var0, delta_var1, delta_var2, delta_var3;
	uint8_t 	result;

	current_var0	= round((current.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 8003fe8:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8003fec:	a3cc      	add	r3, pc, #816	; (adr r3, 8004320 <lowlayer_computeAndWritePulse+0x348>)
 8003fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff2:	f7fc f94b 	bl	800028c <__adddf3>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	460c      	mov	r4, r1
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	4621      	mov	r1, r4
 8003ffe:	a3ca      	add	r3, pc, #808	; (adr r3, 8004328 <lowlayer_computeAndWritePulse+0x350>)
 8004000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004004:	f7fc faf8 	bl	80005f8 <__aeabi_dmul>
 8004008:	4603      	mov	r3, r0
 800400a:	460c      	mov	r4, r1
 800400c:	4618      	mov	r0, r3
 800400e:	4621      	mov	r1, r4
 8004010:	a3bd      	add	r3, pc, #756	; (adr r3, 8004308 <lowlayer_computeAndWritePulse+0x330>)
 8004012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004016:	f7fc fc19 	bl	800084c <__aeabi_ddiv>
 800401a:	4603      	mov	r3, r0
 800401c:	460c      	mov	r4, r1
 800401e:	ec44 3b17 	vmov	d7, r3, r4
 8004022:	eeb0 0a47 	vmov.f32	s0, s14
 8004026:	eef0 0a67 	vmov.f32	s1, s15
 800402a:	f015 f981 	bl	8019330 <round>
 800402e:	ec54 3b10 	vmov	r3, r4, d0
 8004032:	4618      	mov	r0, r3
 8004034:	4621      	mov	r1, r4
 8004036:	f7fc fdb7 	bl	8000ba8 <__aeabi_d2uiz>
 800403a:	4603      	mov	r3, r0
 800403c:	647b      	str	r3, [r7, #68]	; 0x44
	current_var1 	= round((current.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 800403e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004042:	a3bb      	add	r3, pc, #748	; (adr r3, 8004330 <lowlayer_computeAndWritePulse+0x358>)
 8004044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004048:	f7fc f920 	bl	800028c <__adddf3>
 800404c:	4603      	mov	r3, r0
 800404e:	460c      	mov	r4, r1
 8004050:	4618      	mov	r0, r3
 8004052:	4621      	mov	r1, r4
 8004054:	f04f 0200 	mov.w	r2, #0
 8004058:	4bb7      	ldr	r3, [pc, #732]	; (8004338 <lowlayer_computeAndWritePulse+0x360>)
 800405a:	f7fc facd 	bl	80005f8 <__aeabi_dmul>
 800405e:	4603      	mov	r3, r0
 8004060:	460c      	mov	r4, r1
 8004062:	4618      	mov	r0, r3
 8004064:	4621      	mov	r1, r4
 8004066:	a3a8      	add	r3, pc, #672	; (adr r3, 8004308 <lowlayer_computeAndWritePulse+0x330>)
 8004068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800406c:	f7fc fbee 	bl	800084c <__aeabi_ddiv>
 8004070:	4603      	mov	r3, r0
 8004072:	460c      	mov	r4, r1
 8004074:	ec44 3b17 	vmov	d7, r3, r4
 8004078:	eeb0 0a47 	vmov.f32	s0, s14
 800407c:	eef0 0a67 	vmov.f32	s1, s15
 8004080:	f015 f956 	bl	8019330 <round>
 8004084:	ec54 3b10 	vmov	r3, r4, d0
 8004088:	4618      	mov	r0, r3
 800408a:	4621      	mov	r1, r4
 800408c:	f7fc fd8c 	bl	8000ba8 <__aeabi_d2uiz>
 8004090:	4603      	mov	r3, r0
 8004092:	643b      	str	r3, [r7, #64]	; 0x40
	current_var2 	= round((current.D3 - LIM_MIN_J2) * GEAR_J2);
 8004094:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004098:	f04f 0200 	mov.w	r2, #0
 800409c:	4ba7      	ldr	r3, [pc, #668]	; (800433c <lowlayer_computeAndWritePulse+0x364>)
 800409e:	f7fc f8f3 	bl	8000288 <__aeabi_dsub>
 80040a2:	4603      	mov	r3, r0
 80040a4:	460c      	mov	r4, r1
 80040a6:	4618      	mov	r0, r3
 80040a8:	4621      	mov	r1, r4
 80040aa:	f04f 0200 	mov.w	r2, #0
 80040ae:	4ba4      	ldr	r3, [pc, #656]	; (8004340 <lowlayer_computeAndWritePulse+0x368>)
 80040b0:	f7fc faa2 	bl	80005f8 <__aeabi_dmul>
 80040b4:	4603      	mov	r3, r0
 80040b6:	460c      	mov	r4, r1
 80040b8:	ec44 3b17 	vmov	d7, r3, r4
 80040bc:	eeb0 0a47 	vmov.f32	s0, s14
 80040c0:	eef0 0a67 	vmov.f32	s1, s15
 80040c4:	f015 f934 	bl	8019330 <round>
 80040c8:	ec54 3b10 	vmov	r3, r4, d0
 80040cc:	4618      	mov	r0, r3
 80040ce:	4621      	mov	r1, r4
 80040d0:	f7fc fd6a 	bl	8000ba8 <__aeabi_d2uiz>
 80040d4:	4603      	mov	r3, r0
 80040d6:	63fb      	str	r3, [r7, #60]	; 0x3c
	current_var3 	= round((current.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 80040d8:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80040dc:	a38c      	add	r3, pc, #560	; (adr r3, 8004310 <lowlayer_computeAndWritePulse+0x338>)
 80040de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e2:	f7fc f8d3 	bl	800028c <__adddf3>
 80040e6:	4603      	mov	r3, r0
 80040e8:	460c      	mov	r4, r1
 80040ea:	4618      	mov	r0, r3
 80040ec:	4621      	mov	r1, r4
 80040ee:	a38a      	add	r3, pc, #552	; (adr r3, 8004318 <lowlayer_computeAndWritePulse+0x340>)
 80040f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f4:	f7fc fa80 	bl	80005f8 <__aeabi_dmul>
 80040f8:	4603      	mov	r3, r0
 80040fa:	460c      	mov	r4, r1
 80040fc:	4618      	mov	r0, r3
 80040fe:	4621      	mov	r1, r4
 8004100:	a381      	add	r3, pc, #516	; (adr r3, 8004308 <lowlayer_computeAndWritePulse+0x330>)
 8004102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004106:	f7fc fba1 	bl	800084c <__aeabi_ddiv>
 800410a:	4603      	mov	r3, r0
 800410c:	460c      	mov	r4, r1
 800410e:	ec44 3b17 	vmov	d7, r3, r4
 8004112:	eeb0 0a47 	vmov.f32	s0, s14
 8004116:	eef0 0a67 	vmov.f32	s1, s15
 800411a:	f015 f909 	bl	8019330 <round>
 800411e:	ec54 3b10 	vmov	r3, r4, d0
 8004122:	4618      	mov	r0, r3
 8004124:	4621      	mov	r1, r4
 8004126:	f7fc fd3f 	bl	8000ba8 <__aeabi_d2uiz>
 800412a:	4603      	mov	r3, r0
 800412c:	63bb      	str	r3, [r7, #56]	; 0x38
	next_var0 		= round((next.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 800412e:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8004132:	a37b      	add	r3, pc, #492	; (adr r3, 8004320 <lowlayer_computeAndWritePulse+0x348>)
 8004134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004138:	f7fc f8a8 	bl	800028c <__adddf3>
 800413c:	4603      	mov	r3, r0
 800413e:	460c      	mov	r4, r1
 8004140:	4618      	mov	r0, r3
 8004142:	4621      	mov	r1, r4
 8004144:	a378      	add	r3, pc, #480	; (adr r3, 8004328 <lowlayer_computeAndWritePulse+0x350>)
 8004146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414a:	f7fc fa55 	bl	80005f8 <__aeabi_dmul>
 800414e:	4603      	mov	r3, r0
 8004150:	460c      	mov	r4, r1
 8004152:	4618      	mov	r0, r3
 8004154:	4621      	mov	r1, r4
 8004156:	a36c      	add	r3, pc, #432	; (adr r3, 8004308 <lowlayer_computeAndWritePulse+0x330>)
 8004158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800415c:	f7fc fb76 	bl	800084c <__aeabi_ddiv>
 8004160:	4603      	mov	r3, r0
 8004162:	460c      	mov	r4, r1
 8004164:	ec44 3b17 	vmov	d7, r3, r4
 8004168:	eeb0 0a47 	vmov.f32	s0, s14
 800416c:	eef0 0a67 	vmov.f32	s1, s15
 8004170:	f015 f8de 	bl	8019330 <round>
 8004174:	ec54 3b10 	vmov	r3, r4, d0
 8004178:	4618      	mov	r0, r3
 800417a:	4621      	mov	r1, r4
 800417c:	f7fc fd14 	bl	8000ba8 <__aeabi_d2uiz>
 8004180:	4603      	mov	r3, r0
 8004182:	637b      	str	r3, [r7, #52]	; 0x34
	next_var1 		= round((next.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 8004184:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8004188:	a369      	add	r3, pc, #420	; (adr r3, 8004330 <lowlayer_computeAndWritePulse+0x358>)
 800418a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418e:	f7fc f87d 	bl	800028c <__adddf3>
 8004192:	4603      	mov	r3, r0
 8004194:	460c      	mov	r4, r1
 8004196:	4618      	mov	r0, r3
 8004198:	4621      	mov	r1, r4
 800419a:	f04f 0200 	mov.w	r2, #0
 800419e:	4b66      	ldr	r3, [pc, #408]	; (8004338 <lowlayer_computeAndWritePulse+0x360>)
 80041a0:	f7fc fa2a 	bl	80005f8 <__aeabi_dmul>
 80041a4:	4603      	mov	r3, r0
 80041a6:	460c      	mov	r4, r1
 80041a8:	4618      	mov	r0, r3
 80041aa:	4621      	mov	r1, r4
 80041ac:	a356      	add	r3, pc, #344	; (adr r3, 8004308 <lowlayer_computeAndWritePulse+0x330>)
 80041ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b2:	f7fc fb4b 	bl	800084c <__aeabi_ddiv>
 80041b6:	4603      	mov	r3, r0
 80041b8:	460c      	mov	r4, r1
 80041ba:	ec44 3b17 	vmov	d7, r3, r4
 80041be:	eeb0 0a47 	vmov.f32	s0, s14
 80041c2:	eef0 0a67 	vmov.f32	s1, s15
 80041c6:	f015 f8b3 	bl	8019330 <round>
 80041ca:	ec54 3b10 	vmov	r3, r4, d0
 80041ce:	4618      	mov	r0, r3
 80041d0:	4621      	mov	r1, r4
 80041d2:	f7fc fce9 	bl	8000ba8 <__aeabi_d2uiz>
 80041d6:	4603      	mov	r3, r0
 80041d8:	633b      	str	r3, [r7, #48]	; 0x30
	next_var2 		= round((next.D3 - LIM_MIN_J2) * GEAR_J2);
 80041da:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80041de:	f04f 0200 	mov.w	r2, #0
 80041e2:	4b56      	ldr	r3, [pc, #344]	; (800433c <lowlayer_computeAndWritePulse+0x364>)
 80041e4:	f7fc f850 	bl	8000288 <__aeabi_dsub>
 80041e8:	4603      	mov	r3, r0
 80041ea:	460c      	mov	r4, r1
 80041ec:	4618      	mov	r0, r3
 80041ee:	4621      	mov	r1, r4
 80041f0:	f04f 0200 	mov.w	r2, #0
 80041f4:	4b52      	ldr	r3, [pc, #328]	; (8004340 <lowlayer_computeAndWritePulse+0x368>)
 80041f6:	f7fc f9ff 	bl	80005f8 <__aeabi_dmul>
 80041fa:	4603      	mov	r3, r0
 80041fc:	460c      	mov	r4, r1
 80041fe:	ec44 3b17 	vmov	d7, r3, r4
 8004202:	eeb0 0a47 	vmov.f32	s0, s14
 8004206:	eef0 0a67 	vmov.f32	s1, s15
 800420a:	f015 f891 	bl	8019330 <round>
 800420e:	ec54 3b10 	vmov	r3, r4, d0
 8004212:	4618      	mov	r0, r3
 8004214:	4621      	mov	r1, r4
 8004216:	f7fc fcc7 	bl	8000ba8 <__aeabi_d2uiz>
 800421a:	4603      	mov	r3, r0
 800421c:	62fb      	str	r3, [r7, #44]	; 0x2c
	next_var3 		= round((next.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 800421e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8004222:	a33b      	add	r3, pc, #236	; (adr r3, 8004310 <lowlayer_computeAndWritePulse+0x338>)
 8004224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004228:	f7fc f830 	bl	800028c <__adddf3>
 800422c:	4603      	mov	r3, r0
 800422e:	460c      	mov	r4, r1
 8004230:	4618      	mov	r0, r3
 8004232:	4621      	mov	r1, r4
 8004234:	a338      	add	r3, pc, #224	; (adr r3, 8004318 <lowlayer_computeAndWritePulse+0x340>)
 8004236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423a:	f7fc f9dd 	bl	80005f8 <__aeabi_dmul>
 800423e:	4603      	mov	r3, r0
 8004240:	460c      	mov	r4, r1
 8004242:	4618      	mov	r0, r3
 8004244:	4621      	mov	r1, r4
 8004246:	a330      	add	r3, pc, #192	; (adr r3, 8004308 <lowlayer_computeAndWritePulse+0x330>)
 8004248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424c:	f7fc fafe 	bl	800084c <__aeabi_ddiv>
 8004250:	4603      	mov	r3, r0
 8004252:	460c      	mov	r4, r1
 8004254:	ec44 3b17 	vmov	d7, r3, r4
 8004258:	eeb0 0a47 	vmov.f32	s0, s14
 800425c:	eef0 0a67 	vmov.f32	s1, s15
 8004260:	f015 f866 	bl	8019330 <round>
 8004264:	ec54 3b10 	vmov	r3, r4, d0
 8004268:	4618      	mov	r0, r3
 800426a:	4621      	mov	r1, r4
 800426c:	f7fc fc9c 	bl	8000ba8 <__aeabi_d2uiz>
 8004270:	4603      	mov	r3, r0
 8004272:	62bb      	str	r3, [r7, #40]	; 0x28

	delta_var0 = next_var0 - current_var0;
 8004274:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004276:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	f04f 0400 	mov.w	r4, #0
 800427e:	e9c7 3408 	strd	r3, r4, [r7, #32]
	delta_var1 = next_var1 - current_var1;
 8004282:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004284:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	f04f 0400 	mov.w	r4, #0
 800428c:	e9c7 3406 	strd	r3, r4, [r7, #24]
	delta_var2 = next_var2 - current_var2;
 8004290:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	f04f 0400 	mov.w	r4, #0
 800429a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	delta_var3 = next_var3 - current_var3;
 800429e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	f04f 0400 	mov.w	r4, #0
 80042a8:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if (abs(delta_var0) > 127
 80042ac:	6a3b      	ldr	r3, [r7, #32]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	bfb8      	it	lt
 80042b2:	425b      	neglt	r3, r3
 80042b4:	2b7f      	cmp	r3, #127	; 0x7f
 80042b6:	dc11      	bgt.n	80042dc <lowlayer_computeAndWritePulse+0x304>
		|| abs(delta_var1) > 127
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	bfb8      	it	lt
 80042be:	425b      	neglt	r3, r3
 80042c0:	2b7f      	cmp	r3, #127	; 0x7f
 80042c2:	dc0b      	bgt.n	80042dc <lowlayer_computeAndWritePulse+0x304>
		|| abs(delta_var2) > 127
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	bfb8      	it	lt
 80042ca:	425b      	neglt	r3, r3
 80042cc:	2b7f      	cmp	r3, #127	; 0x7f
 80042ce:	dc05      	bgt.n	80042dc <lowlayer_computeAndWritePulse+0x304>
		|| abs(delta_var3) > 127) {
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	bfb8      	it	lt
 80042d6:	425b      	neglt	r3, r3
 80042d8:	2b7f      	cmp	r3, #127	; 0x7f
 80042da:	dd01      	ble.n	80042e0 <lowlayer_computeAndWritePulse+0x308>
		return FALSE;
 80042dc:	2300      	movs	r3, #0
 80042de:	e00c      	b.n	80042fa <lowlayer_computeAndWritePulse+0x322>
	} // Can't convert to int8_t , over range

	result = lowlayer_writePulse((int8_t)delta_var0,
 80042e0:	f997 0020 	ldrsb.w	r0, [r7, #32]
 80042e4:	f997 1018 	ldrsb.w	r1, [r7, #24]
 80042e8:	f997 2010 	ldrsb.w	r2, [r7, #16]
 80042ec:	f997 3008 	ldrsb.w	r3, [r7, #8]
 80042f0:	f000 f828 	bl	8004344 <lowlayer_writePulse>
 80042f4:	4603      	mov	r3, r0
 80042f6:	71fb      	strb	r3, [r7, #7]
								 (int8_t)delta_var1,
								 (int8_t)delta_var2,
								 (int8_t)delta_var3);

	return result;
 80042f8:	79fb      	ldrb	r3, [r7, #7]
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	374c      	adds	r7, #76	; 0x4c
 80042fe:	46bd      	mov	sp, r7
 8004300:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004304:	b004      	add	sp, #16
 8004306:	4770      	bx	lr
 8004308:	60000000 	.word	0x60000000
 800430c:	401921fb 	.word	0x401921fb
 8004310:	daaaaaab 	.word	0xdaaaaaab
 8004314:	4007bc89 	.word	0x4007bc89
 8004318:	a0000000 	.word	0xa0000000
 800431c:	40d3bca1 	.word	0x40d3bca1
 8004320:	daaaaaab 	.word	0xdaaaaaab
 8004324:	3ff7bc89 	.word	0x3ff7bc89
 8004328:	00000000 	.word	0x00000000
 800432c:	40d38800 	.word	0x40d38800
 8004330:	88000000 	.word	0x88000000
 8004334:	4002d97c 	.word	0x4002d97c
 8004338:	40df4000 	.word	0x40df4000
 800433c:	3ff00000 	.word	0x3ff00000
 8004340:	40590000 	.word	0x40590000

08004344 <lowlayer_writePulse>:


uint8_t	lowlayer_writePulse(int8_t pulse0, int8_t pulse1, int8_t pulse2, int8_t pulse3) {
 8004344:	b590      	push	{r4, r7, lr}
 8004346:	b087      	sub	sp, #28
 8004348:	af00      	add	r7, sp, #0
 800434a:	4604      	mov	r4, r0
 800434c:	4608      	mov	r0, r1
 800434e:	4611      	mov	r1, r2
 8004350:	461a      	mov	r2, r3
 8004352:	4623      	mov	r3, r4
 8004354:	71fb      	strb	r3, [r7, #7]
 8004356:	4603      	mov	r3, r0
 8004358:	71bb      	strb	r3, [r7, #6]
 800435a:	460b      	mov	r3, r1
 800435c:	717b      	strb	r3, [r7, #5]
 800435e:	4613      	mov	r3, r2
 8004360:	713b      	strb	r3, [r7, #4]
	uint8_t pulse0_combine, pulse1_combine, pulse2_combine, pulse3_combine;
	uint8_t pulse0_abs, pulse1_abs, pulse2_abs, pulse3_abs;

	// Var 0
	if (pulse0 < 0) {
 8004362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004366:	2b00      	cmp	r3, #0
 8004368:	da06      	bge.n	8004378 <lowlayer_writePulse+0x34>
		pulse0_abs = -pulse0;
 800436a:	79fb      	ldrb	r3, [r7, #7]
 800436c:	425b      	negs	r3, r3
 800436e:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = -pulse0 | ((!DIR_J0) << 7); // Negative : Clockwise
 8004370:	79fb      	ldrb	r3, [r7, #7]
 8004372:	425b      	negs	r3, r3
 8004374:	75fb      	strb	r3, [r7, #23]
 8004376:	e006      	b.n	8004386 <lowlayer_writePulse+0x42>
	} else {
		pulse0_abs = pulse0;
 8004378:	79fb      	ldrb	r3, [r7, #7]
 800437a:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = pulse0 | (DIR_J0 << 7); // Positive : Anti-Clockwise
 800437c:	79fb      	ldrb	r3, [r7, #7]
 800437e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004382:	b25b      	sxtb	r3, r3
 8004384:	75fb      	strb	r3, [r7, #23]
	}
	// Var 1
	if (pulse1 < 0) {
 8004386:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800438a:	2b00      	cmp	r3, #0
 800438c:	da06      	bge.n	800439c <lowlayer_writePulse+0x58>
		pulse1_abs = -pulse1;
 800438e:	79bb      	ldrb	r3, [r7, #6]
 8004390:	425b      	negs	r3, r3
 8004392:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = -pulse1 | ((!DIR_J1) << 7);
 8004394:	79bb      	ldrb	r3, [r7, #6]
 8004396:	425b      	negs	r3, r3
 8004398:	75bb      	strb	r3, [r7, #22]
 800439a:	e006      	b.n	80043aa <lowlayer_writePulse+0x66>
	} else {
		pulse1_abs = pulse1;
 800439c:	79bb      	ldrb	r3, [r7, #6]
 800439e:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = pulse1 | (DIR_J1 << 7);
 80043a0:	79bb      	ldrb	r3, [r7, #6]
 80043a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80043a6:	b25b      	sxtb	r3, r3
 80043a8:	75bb      	strb	r3, [r7, #22]
	}
	// Var 2
	if (pulse2 < 0) {
 80043aa:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	da0b      	bge.n	80043ca <lowlayer_writePulse+0x86>
		pulse2_abs = -pulse2;
 80043b2:	797b      	ldrb	r3, [r7, #5]
 80043b4:	425b      	negs	r3, r3
 80043b6:	747b      	strb	r3, [r7, #17]
		pulse2_combine = -pulse2 | ((!DIR_J2) << 7);
 80043b8:	797b      	ldrb	r3, [r7, #5]
 80043ba:	425b      	negs	r3, r3
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	b25b      	sxtb	r3, r3
 80043c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80043c4:	b25b      	sxtb	r3, r3
 80043c6:	757b      	strb	r3, [r7, #21]
 80043c8:	e003      	b.n	80043d2 <lowlayer_writePulse+0x8e>
	} else {
		pulse2_abs = pulse2;
 80043ca:	797b      	ldrb	r3, [r7, #5]
 80043cc:	747b      	strb	r3, [r7, #17]
		pulse2_combine = pulse2 | (DIR_J2 << 7);
 80043ce:	797b      	ldrb	r3, [r7, #5]
 80043d0:	757b      	strb	r3, [r7, #21]
	}
	// Var 3
	if (pulse3 < 0) {
 80043d2:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	da06      	bge.n	80043e8 <lowlayer_writePulse+0xa4>
		pulse3_abs = -pulse3;
 80043da:	793b      	ldrb	r3, [r7, #4]
 80043dc:	425b      	negs	r3, r3
 80043de:	743b      	strb	r3, [r7, #16]
		pulse3_combine = -pulse3 | ((!DIR_J3) << 7);
 80043e0:	793b      	ldrb	r3, [r7, #4]
 80043e2:	425b      	negs	r3, r3
 80043e4:	753b      	strb	r3, [r7, #20]
 80043e6:	e006      	b.n	80043f6 <lowlayer_writePulse+0xb2>
	} else {
		pulse3_abs = pulse3;
 80043e8:	793b      	ldrb	r3, [r7, #4]
 80043ea:	743b      	strb	r3, [r7, #16]
		pulse3_combine = pulse3 | (DIR_J3 << 7);
 80043ec:	793b      	ldrb	r3, [r7, #4]
 80043ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80043f2:	b25b      	sxtb	r3, r3
 80043f4:	753b      	strb	r3, [r7, #20]
	}

	// Check limit
	if (pulse0_abs > LIM_PULSE_J0
 80043f6:	7cfb      	ldrb	r3, [r7, #19]
 80043f8:	2b4b      	cmp	r3, #75	; 0x4b
 80043fa:	d808      	bhi.n	800440e <lowlayer_writePulse+0xca>
		|| pulse1_abs > LIM_PULSE_J1
 80043fc:	7cbb      	ldrb	r3, [r7, #18]
 80043fe:	2b78      	cmp	r3, #120	; 0x78
 8004400:	d805      	bhi.n	800440e <lowlayer_writePulse+0xca>
		|| pulse2_abs > LIM_PULSE_J2
 8004402:	7c7b      	ldrb	r3, [r7, #17]
 8004404:	2b7d      	cmp	r3, #125	; 0x7d
 8004406:	d802      	bhi.n	800440e <lowlayer_writePulse+0xca>
		|| pulse3_abs > LIM_PULSE_J3) {
 8004408:	7c3b      	ldrb	r3, [r7, #16]
 800440a:	2b65      	cmp	r3, #101	; 0x65
 800440c:	d901      	bls.n	8004412 <lowlayer_writePulse+0xce>
		return FALSE;
 800440e:	2300      	movs	r3, #0
 8004410:	e04b      	b.n	80044aa <lowlayer_writePulse+0x166>
//	if (pulse3_abs == 0) {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // Disable
//	} else {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
//	}
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
 8004412:	2200      	movs	r2, #0
 8004414:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004418:	4826      	ldr	r0, [pc, #152]	; (80044b4 <lowlayer_writePulse+0x170>)
 800441a:	f007 fb11 	bl	800ba40 <HAL_GPIO_WritePin>

	// Write to Module DDA
	FSMC_Write(ADDRESS_DDA_0, (uint32_t)pulse0_combine);
 800441e:	7dfb      	ldrb	r3, [r7, #23]
 8004420:	4619      	mov	r1, r3
 8004422:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 8004426:	f7fe fbb5 	bl	8002b94 <FSMC_Write>
	FSMC_Write(ADDRESS_DDA_1, (uint32_t)pulse1_combine);
 800442a:	7dbb      	ldrb	r3, [r7, #22]
 800442c:	4619      	mov	r1, r3
 800442e:	4822      	ldr	r0, [pc, #136]	; (80044b8 <lowlayer_writePulse+0x174>)
 8004430:	f7fe fbb0 	bl	8002b94 <FSMC_Write>
	FSMC_Write(ADDRESS_DDA_2, (uint32_t)pulse2_combine);
 8004434:	7d7b      	ldrb	r3, [r7, #21]
 8004436:	4619      	mov	r1, r3
 8004438:	4820      	ldr	r0, [pc, #128]	; (80044bc <lowlayer_writePulse+0x178>)
 800443a:	f7fe fbab 	bl	8002b94 <FSMC_Write>
	FSMC_Write(ADDRESS_DDA_3, (uint32_t)pulse3_combine);
 800443e:	7d3b      	ldrb	r3, [r7, #20]
 8004440:	4619      	mov	r1, r3
 8004442:	481f      	ldr	r0, [pc, #124]	; (80044c0 <lowlayer_writePulse+0x17c>)
 8004444:	f7fe fba6 	bl	8002b94 <FSMC_Write>

	// Trigger
	uint8_t delay = 100;
 8004448:	2364      	movs	r3, #100	; 0x64
 800444a:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_RESET);
 800444c:	2200      	movs	r2, #0
 800444e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004452:	481c      	ldr	r0, [pc, #112]	; (80044c4 <lowlayer_writePulse+0x180>)
 8004454:	f007 faf4 	bl	800ba40 <HAL_GPIO_WritePin>
	while (delay--);
 8004458:	bf00      	nop
 800445a:	7bfb      	ldrb	r3, [r7, #15]
 800445c:	1e5a      	subs	r2, r3, #1
 800445e:	73fa      	strb	r2, [r7, #15]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1fa      	bne.n	800445a <lowlayer_writePulse+0x116>
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_SET);
 8004464:	2201      	movs	r2, #1
 8004466:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800446a:	4816      	ldr	r0, [pc, #88]	; (80044c4 <lowlayer_writePulse+0x180>)
 800446c:	f007 fae8 	bl	800ba40 <HAL_GPIO_WritePin>

	// Accumulate
	pulse_accumulate[0] += pulse0;
 8004470:	4b15      	ldr	r3, [pc, #84]	; (80044c8 <lowlayer_writePulse+0x184>)
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004478:	4413      	add	r3, r2
 800447a:	4a13      	ldr	r2, [pc, #76]	; (80044c8 <lowlayer_writePulse+0x184>)
 800447c:	6013      	str	r3, [r2, #0]
	pulse_accumulate[1] += pulse1;
 800447e:	4b12      	ldr	r3, [pc, #72]	; (80044c8 <lowlayer_writePulse+0x184>)
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004486:	4413      	add	r3, r2
 8004488:	4a0f      	ldr	r2, [pc, #60]	; (80044c8 <lowlayer_writePulse+0x184>)
 800448a:	6053      	str	r3, [r2, #4]
	pulse_accumulate[2] += pulse2;
 800448c:	4b0e      	ldr	r3, [pc, #56]	; (80044c8 <lowlayer_writePulse+0x184>)
 800448e:	689a      	ldr	r2, [r3, #8]
 8004490:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004494:	4413      	add	r3, r2
 8004496:	4a0c      	ldr	r2, [pc, #48]	; (80044c8 <lowlayer_writePulse+0x184>)
 8004498:	6093      	str	r3, [r2, #8]
	pulse_accumulate[3] += pulse3;
 800449a:	4b0b      	ldr	r3, [pc, #44]	; (80044c8 <lowlayer_writePulse+0x184>)
 800449c:	68da      	ldr	r2, [r3, #12]
 800449e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80044a2:	4413      	add	r3, r2
 80044a4:	4a08      	ldr	r2, [pc, #32]	; (80044c8 <lowlayer_writePulse+0x184>)
 80044a6:	60d3      	str	r3, [r2, #12]

	return TRUE;
 80044a8:	2301      	movs	r3, #1
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	371c      	adds	r7, #28
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd90      	pop	{r4, r7, pc}
 80044b2:	bf00      	nop
 80044b4:	40020000 	.word	0x40020000
 80044b8:	60000002 	.word	0x60000002
 80044bc:	60000004 	.word	0x60000004
 80044c0:	60000006 	.word	0x60000006
 80044c4:	40020c00 	.word	0x40020c00
 80044c8:	20005310 	.word	0x20005310

080044cc <lowlayer_resetEncoder>:

void	lowlayer_resetEncoder(void) {
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
	// Trigger
	uint8_t delay = 100;
 80044d2:	2364      	movs	r3, #100	; 0x64
 80044d4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_SET);
 80044d6:	2201      	movs	r2, #1
 80044d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80044dc:	4809      	ldr	r0, [pc, #36]	; (8004504 <lowlayer_resetEncoder+0x38>)
 80044de:	f007 faaf 	bl	800ba40 <HAL_GPIO_WritePin>
	while (delay--);
 80044e2:	bf00      	nop
 80044e4:	79fb      	ldrb	r3, [r7, #7]
 80044e6:	1e5a      	subs	r2, r3, #1
 80044e8:	71fa      	strb	r2, [r7, #7]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1fa      	bne.n	80044e4 <lowlayer_resetEncoder+0x18>
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_RESET);
 80044ee:	2200      	movs	r2, #0
 80044f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80044f4:	4803      	ldr	r0, [pc, #12]	; (8004504 <lowlayer_resetEncoder+0x38>)
 80044f6:	f007 faa3 	bl	800ba40 <HAL_GPIO_WritePin>
}
 80044fa:	bf00      	nop
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	40020c00 	.word	0x40020c00

08004508 <lowlayer_readLimitSwitch>:

uint8_t lowlayer_readLimitSwitch(void) {
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
	uint16_t read_data = FSMC_Read(ADDRESS_LIMIT);
 800450e:	4805      	ldr	r0, [pc, #20]	; (8004524 <lowlayer_readLimitSwitch+0x1c>)
 8004510:	f7fe fb4f 	bl	8002bb2 <FSMC_Read>
 8004514:	4603      	mov	r3, r0
 8004516:	80fb      	strh	r3, [r7, #6]

	return (uint8_t)read_data;
 8004518:	88fb      	ldrh	r3, [r7, #6]
 800451a:	b2db      	uxtb	r3, r3
}
 800451c:	4618      	mov	r0, r3
 800451e:	3708      	adds	r7, #8
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	60000020 	.word	0x60000020

08004528 <lowlayer_readEncoder>:

int32_t lowlayer_readEncoder(uint8_t encoder_num) {
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	4603      	mov	r3, r0
 8004530:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (encoder_num <= 2) {
 8004532:	79fb      	ldrb	r3, [r7, #7]
 8004534:	2b02      	cmp	r3, #2
 8004536:	d81c      	bhi.n	8004572 <lowlayer_readEncoder+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_ENC0_LOW + encoder_num*4);
 8004538:	79fb      	ldrb	r3, [r7, #7]
 800453a:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 800453e:	3310      	adds	r3, #16
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	4618      	mov	r0, r3
 8004544:	f7fe fb35 	bl	8002bb2 <FSMC_Read>
 8004548:	4603      	mov	r3, r0
 800454a:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_ENC0_LOW + encoder_num*4 + 2);
 800454c:	79fb      	ldrb	r3, [r7, #7]
 800454e:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8004552:	3310      	adds	r3, #16
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	3302      	adds	r3, #2
 8004558:	4618      	mov	r0, r3
 800455a:	f7fe fb2a 	bl	8002bb2 <FSMC_Read>
 800455e:	4603      	mov	r3, r0
 8004560:	813b      	strh	r3, [r7, #8]
		data = high_word;
 8004562:	893b      	ldrh	r3, [r7, #8]
 8004564:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	041a      	lsls	r2, r3, #16
 800456a:	897b      	ldrh	r3, [r7, #10]
 800456c:	4313      	orrs	r3, r2
 800456e:	60fb      	str	r3, [r7, #12]
 8004570:	e001      	b.n	8004576 <lowlayer_readEncoder+0x4e>
	} else {
		data = 0;
 8004572:	2300      	movs	r3, #0
 8004574:	60fb      	str	r3, [r7, #12]
	}
	return data;
 8004576:	68fb      	ldr	r3, [r7, #12]
}
 8004578:	4618      	mov	r0, r3
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <lowlayer_readCapture>:

int32_t lowlayer_readCapture(uint8_t capture_num) {
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	4603      	mov	r3, r0
 8004588:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (capture_num <= 2) {
 800458a:	79fb      	ldrb	r3, [r7, #7]
 800458c:	2b02      	cmp	r3, #2
 800458e:	d81c      	bhi.n	80045ca <lowlayer_readCapture+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4);
 8004590:	79fb      	ldrb	r3, [r7, #7]
 8004592:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8004596:	3318      	adds	r3, #24
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	4618      	mov	r0, r3
 800459c:	f7fe fb09 	bl	8002bb2 <FSMC_Read>
 80045a0:	4603      	mov	r3, r0
 80045a2:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4 + 2);
 80045a4:	79fb      	ldrb	r3, [r7, #7]
 80045a6:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 80045aa:	3318      	adds	r3, #24
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	3302      	adds	r3, #2
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7fe fafe 	bl	8002bb2 <FSMC_Read>
 80045b6:	4603      	mov	r3, r0
 80045b8:	813b      	strh	r3, [r7, #8]
		data = high_word;
 80045ba:	893b      	ldrh	r3, [r7, #8]
 80045bc:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	041a      	lsls	r2, r3, #16
 80045c2:	897b      	ldrh	r3, [r7, #10]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	60fb      	str	r3, [r7, #12]
 80045c8:	e001      	b.n	80045ce <lowlayer_readCapture+0x4e>
	} else {
		data = 0;
 80045ca:	2300      	movs	r3, #0
 80045cc:	60fb      	str	r3, [r7, #12]
	}
	return data;
 80045ce:	68fb      	ldr	r3, [r7, #12]
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3710      	adds	r7, #16
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <lowlayer_updateEncoder>:

void	lowlayer_updateEncoder(void) {
 80045d8:	b590      	push	{r4, r7, lr}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 80045de:	2300      	movs	r3, #0
 80045e0:	71fb      	strb	r3, [r7, #7]
 80045e2:	e00b      	b.n	80045fc <lowlayer_updateEncoder+0x24>
		position_encoder[i] = lowlayer_readEncoder(i);
 80045e4:	79fc      	ldrb	r4, [r7, #7]
 80045e6:	79fb      	ldrb	r3, [r7, #7]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7ff ff9d 	bl	8004528 <lowlayer_readEncoder>
 80045ee:	4602      	mov	r2, r0
 80045f0:	4b06      	ldr	r3, [pc, #24]	; (800460c <lowlayer_updateEncoder+0x34>)
 80045f2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 80045f6:	79fb      	ldrb	r3, [r7, #7]
 80045f8:	3301      	adds	r3, #1
 80045fa:	71fb      	strb	r3, [r7, #7]
 80045fc:	79fb      	ldrb	r3, [r7, #7]
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d9f0      	bls.n	80045e4 <lowlayer_updateEncoder+0xc>
	}
}
 8004602:	bf00      	nop
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	bd90      	pop	{r4, r7, pc}
 800460a:	bf00      	nop
 800460c:	20005324 	.word	0x20005324

08004610 <lowlayer_updateCapture>:

void	lowlayer_updateCapture(void) {
 8004610:	b590      	push	{r4, r7, lr}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 8004616:	2300      	movs	r3, #0
 8004618:	71fb      	strb	r3, [r7, #7]
 800461a:	e00b      	b.n	8004634 <lowlayer_updateCapture+0x24>
			position_capture[i] = lowlayer_readCapture(i);
 800461c:	79fc      	ldrb	r4, [r7, #7]
 800461e:	79fb      	ldrb	r3, [r7, #7]
 8004620:	4618      	mov	r0, r3
 8004622:	f7ff ffad 	bl	8004580 <lowlayer_readCapture>
 8004626:	4602      	mov	r2, r0
 8004628:	4b06      	ldr	r3, [pc, #24]	; (8004644 <lowlayer_updateCapture+0x34>)
 800462a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 800462e:	79fb      	ldrb	r3, [r7, #7]
 8004630:	3301      	adds	r3, #1
 8004632:	71fb      	strb	r3, [r7, #7]
 8004634:	79fb      	ldrb	r3, [r7, #7]
 8004636:	2b02      	cmp	r3, #2
 8004638:	d9f0      	bls.n	800461c <lowlayer_updateCapture+0xc>
	}
}
 800463a:	bf00      	nop
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	bd90      	pop	{r4, r7, pc}
 8004642:	bf00      	nop
 8004644:	20005334 	.word	0x20005334

08004648 <lowlayer_updateLimit>:

void	lowlayer_updateLimit(void) {
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
	uint8_t limit_data = lowlayer_readLimitSwitch();
 800464e:	f7ff ff5b 	bl	8004508 <lowlayer_readLimitSwitch>
 8004652:	4603      	mov	r3, r0
 8004654:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < 4; i++) {
 8004656:	2300      	movs	r3, #0
 8004658:	71fb      	strb	r3, [r7, #7]
 800465a:	e00d      	b.n	8004678 <lowlayer_updateLimit+0x30>
			limit_switch[i] = (limit_data & (0x01 << i)) ? 1 : 0;
 800465c:	79ba      	ldrb	r2, [r7, #6]
 800465e:	79fb      	ldrb	r3, [r7, #7]
 8004660:	fa42 f303 	asr.w	r3, r2, r3
 8004664:	b2da      	uxtb	r2, r3
 8004666:	79fb      	ldrb	r3, [r7, #7]
 8004668:	f002 0201 	and.w	r2, r2, #1
 800466c:	b2d1      	uxtb	r1, r2
 800466e:	4a06      	ldr	r2, [pc, #24]	; (8004688 <lowlayer_updateLimit+0x40>)
 8004670:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 4; i++) {
 8004672:	79fb      	ldrb	r3, [r7, #7]
 8004674:	3301      	adds	r3, #1
 8004676:	71fb      	strb	r3, [r7, #7]
 8004678:	79fb      	ldrb	r3, [r7, #7]
 800467a:	2b03      	cmp	r3, #3
 800467c:	d9ee      	bls.n	800465c <lowlayer_updateLimit+0x14>
	}
}
 800467e:	bf00      	nop
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	20005330 	.word	0x20005330

0800468c <lowlayer_setOutput>:

void	lowlayer_setOutput(uint8_t value) {
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	4603      	mov	r3, r0
 8004694:	71fb      	strb	r3, [r7, #7]
	if (value > 0) {
 8004696:	79fb      	ldrb	r3, [r7, #7]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d006      	beq.n	80046aa <lowlayer_setOutput+0x1e>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_SET);
 800469c:	2201      	movs	r2, #1
 800469e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80046a2:	4807      	ldr	r0, [pc, #28]	; (80046c0 <lowlayer_setOutput+0x34>)
 80046a4:	f007 f9cc 	bl	800ba40 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
	}
}
 80046a8:	e005      	b.n	80046b6 <lowlayer_setOutput+0x2a>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
 80046aa:	2200      	movs	r2, #0
 80046ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80046b0:	4803      	ldr	r0, [pc, #12]	; (80046c0 <lowlayer_setOutput+0x34>)
 80046b2:	f007 f9c5 	bl	800ba40 <HAL_GPIO_WritePin>
}
 80046b6:	bf00      	nop
 80046b8:	3708      	adds	r7, #8
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	40020400 	.word	0x40020400

080046c4 <lowlayer_CPLD_Init>:

void	lowlayer_CPLD_Init(void) {
 80046c4:	b580      	push	{r7, lr}
 80046c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STOP_GPIO_Port, STOP_Pin, GPIO_PIN_SET); // STOP low active
 80046c8:	2201      	movs	r2, #1
 80046ca:	2140      	movs	r1, #64	; 0x40
 80046cc:	4802      	ldr	r0, [pc, #8]	; (80046d8 <lowlayer_CPLD_Init+0x14>)
 80046ce:	f007 f9b7 	bl	800ba40 <HAL_GPIO_WritePin>
}
 80046d2:	bf00      	nop
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	40020c00 	.word	0x40020c00

080046dc <lowlayer_stepMotorInit>:

void	lowlayer_stepMotorInit(void) {
 80046dc:	b580      	push	{r7, lr}
 80046de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // ENABLE low active
 80046e0:	2201      	movs	r2, #1
 80046e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80046e6:	4808      	ldr	r0, [pc, #32]	; (8004708 <lowlayer_stepMotorInit+0x2c>)
 80046e8:	f007 f9aa 	bl	800ba40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_RESET_GPIO_Port, STEP_RESET_Pin, GPIO_PIN_SET); // RESET low active
 80046ec:	2201      	movs	r2, #1
 80046ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80046f2:	4805      	ldr	r0, [pc, #20]	; (8004708 <lowlayer_stepMotorInit+0x2c>)
 80046f4:	f007 f9a4 	bl	800ba40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_SLEEP_GPIO_Port, STEP_SLEEP_Pin, GPIO_PIN_SET); // SLEEP low active
 80046f8:	2201      	movs	r2, #1
 80046fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80046fe:	4802      	ldr	r0, [pc, #8]	; (8004708 <lowlayer_stepMotorInit+0x2c>)
 8004700:	f007 f99e 	bl	800ba40 <HAL_GPIO_WritePin>
}
 8004704:	bf00      	nop
 8004706:	bd80      	pop	{r7, pc}
 8004708:	40020000 	.word	0x40020000

0800470c <scaraStartup>:
											 "Over Accelerate",
											 "Wrong Joint Num",
											 "Wrong Coordinate"
											};

void				scaraStartup(void) {
 800470c:	b580      	push	{r7, lr}
 800470e:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	scaraSetScanFlag();
#endif
	lowlayer_CPLD_Init();
 8004710:	f7ff ffd8 	bl	80046c4 <lowlayer_CPLD_Init>
	lowlayer_stepMotorInit();
 8004714:	f7ff ffe2 	bl	80046dc <lowlayer_stepMotorInit>
	lowlayer_resetEncoder();
 8004718:	f7ff fed8 	bl	80044cc <lowlayer_resetEncoder>
	lowlayer_writePulse(0, 0, 0, 0);
 800471c:	2300      	movs	r3, #0
 800471e:	2200      	movs	r2, #0
 8004720:	2100      	movs	r1, #0
 8004722:	2000      	movs	r0, #0
 8004724:	f7ff fe0e 	bl	8004344 <lowlayer_writePulse>
}
 8004728:	bf00      	nop
 800472a:	bd80      	pop	{r7, pc}
 800472c:	0000      	movs	r0, r0
	...

08004730 <scaraInitDuty>:

/* Compute duty corresponding to new command */
SCARA_StatusTypeDef	scaraInitDuty		(DUTY_Command_TypeDef command) {
 8004730:	b084      	sub	sp, #16
 8004732:	b5b0      	push	{r4, r5, r7, lr}
 8004734:	f5ad 7d76 	sub.w	sp, sp, #984	; 0x3d8
 8004738:	af8a      	add	r7, sp, #552	; 0x228
 800473a:	f507 7ce0 	add.w	ip, r7, #448	; 0x1c0
 800473e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	SCARA_StatusTypeDef status, status1, status2;

	/*----------- Space Task ------------*/
	if 			(DUTY_SPACE_TASK == command.space_type) {
 8004742:	f897 31cd 	ldrb.w	r3, [r7, #461]	; 0x1cd
 8004746:	2b00      	cmp	r3, #0
 8004748:	f040 834c 	bne.w	8004de4 <scaraInitDuty+0x6b4>
		double total_s, angle_s;
		int8_t dir_angle;
		SCARA_PositionTypeDef	target_point;
		// Change Degree --> Radian
		command.target_point.roll = command.target_point.roll*PI/180.0;
 800474c:	e9d7 0192 	ldrd	r0, r1, [r7, #584]	; 0x248
 8004750:	a3ab      	add	r3, pc, #684	; (adr r3, 8004a00 <scaraInitDuty+0x2d0>)
 8004752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004756:	f7fb ff4f 	bl	80005f8 <__aeabi_dmul>
 800475a:	4602      	mov	r2, r0
 800475c:	460b      	mov	r3, r1
 800475e:	4610      	mov	r0, r2
 8004760:	4619      	mov	r1, r3
 8004762:	f04f 0200 	mov.w	r2, #0
 8004766:	4ba8      	ldr	r3, [pc, #672]	; (8004a08 <scaraInitDuty+0x2d8>)
 8004768:	f7fc f870 	bl	800084c <__aeabi_ddiv>
 800476c:	4602      	mov	r2, r0
 800476e:	460b      	mov	r3, r1
 8004770:	e9c7 2392 	strd	r2, r3, [r7, #584]	; 0x248
		// Coordinate
		if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8004774:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 8004778:	2b01      	cmp	r3, #1
 800477a:	d130      	bne.n	80047de <scaraInitDuty+0xae>
			target_point.x 		= positionCurrent.x + command.target_point.x;
 800477c:	4ba3      	ldr	r3, [pc, #652]	; (8004a0c <scaraInitDuty+0x2dc>)
 800477e:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8004782:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 8004786:	f7fb fd81 	bl	800028c <__adddf3>
 800478a:	4602      	mov	r2, r0
 800478c:	460b      	mov	r3, r1
 800478e:	4639      	mov	r1, r7
 8004790:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			target_point.y 		= positionCurrent.y + command.target_point.y;
 8004794:	4b9d      	ldr	r3, [pc, #628]	; (8004a0c <scaraInitDuty+0x2dc>)
 8004796:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800479a:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 800479e:	f7fb fd75 	bl	800028c <__adddf3>
 80047a2:	4602      	mov	r2, r0
 80047a4:	460b      	mov	r3, r1
 80047a6:	4639      	mov	r1, r7
 80047a8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			target_point.z 		= positionCurrent.z + command.target_point.z;
 80047ac:	4b97      	ldr	r3, [pc, #604]	; (8004a0c <scaraInitDuty+0x2dc>)
 80047ae:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80047b2:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 80047b6:	f7fb fd69 	bl	800028c <__adddf3>
 80047ba:	4602      	mov	r2, r0
 80047bc:	460b      	mov	r3, r1
 80047be:	4639      	mov	r1, r7
 80047c0:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			target_point.roll	= positionCurrent.roll + command.target_point.roll;
 80047c4:	4b91      	ldr	r3, [pc, #580]	; (8004a0c <scaraInitDuty+0x2dc>)
 80047c6:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80047ca:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 80047ce:	f7fb fd5d 	bl	800028c <__adddf3>
 80047d2:	4602      	mov	r2, r0
 80047d4:	460b      	mov	r3, r1
 80047d6:	4639      	mov	r1, r7
 80047d8:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 80047dc:	e01b      	b.n	8004816 <scaraInitDuty+0xe6>
		} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 80047de:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d114      	bne.n	8004810 <scaraInitDuty+0xe0>
			target_point.x 		= command.target_point.x;
 80047e6:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 80047ea:	4639      	mov	r1, r7
 80047ec:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			target_point.y 		= command.target_point.y;
 80047f0:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 80047f4:	4639      	mov	r1, r7
 80047f6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			target_point.z 		= command.target_point.z;
 80047fa:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 80047fe:	4639      	mov	r1, r7
 8004800:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			target_point.roll	= command.target_point.roll;
 8004804:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8004808:	4639      	mov	r1, r7
 800480a:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 800480e:	e002      	b.n	8004816 <scaraInitDuty+0xe6>
		} else {
			return SCARA_STATUS_ERROR_COORDINATE;
 8004810:	230c      	movs	r3, #12
 8004812:	f001 ba71 	b.w	8005cf8 <scaraInitDuty+0x15c8>
		}

		angle_s = target_point.roll - positionCurrent.roll;
 8004816:	463b      	mov	r3, r7
 8004818:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 800481c:	4b7b      	ldr	r3, [pc, #492]	; (8004a0c <scaraInitDuty+0x2dc>)
 800481e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8004822:	f7fb fd31 	bl	8000288 <__aeabi_dsub>
 8004826:	4602      	mov	r2, r0
 8004828:	460b      	mov	r3, r1
 800482a:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
		dir_angle = 1;
 800482e:	2301      	movs	r3, #1
 8004830:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
		if ( angle_s < 0) {
 8004834:	f04f 0200 	mov.w	r2, #0
 8004838:	f04f 0300 	mov.w	r3, #0
 800483c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8004840:	f7fc f94c 	bl	8000adc <__aeabi_dcmplt>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d002      	beq.n	8004850 <scaraInitDuty+0x120>
			dir_angle = -1;
 800484a:	23ff      	movs	r3, #255	; 0xff
 800484c:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
		}
		if ( fabs(angle_s) > PI) {
 8004850:	f8d7 4198 	ldr.w	r4, [r7, #408]	; 0x198
 8004854:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8004858:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800485c:	a368      	add	r3, pc, #416	; (adr r3, 8004a00 <scaraInitDuty+0x2d0>)
 800485e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004862:	4620      	mov	r0, r4
 8004864:	4629      	mov	r1, r5
 8004866:	f7fc f957 	bl	8000b18 <__aeabi_dcmpgt>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d021      	beq.n	80048b4 <scaraInitDuty+0x184>
			dir_angle = -dir_angle;
 8004870:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8004874:	425b      	negs	r3, r3
 8004876:	b2db      	uxtb	r3, r3
 8004878:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
			angle_s = (2*PI - fabsf(angle_s))*dir_angle;
 800487c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8004880:	f7fc f9b2 	bl	8000be8 <__aeabi_d2f>
 8004884:	ee07 0a90 	vmov	s15, r0
 8004888:	eef0 7ae7 	vabs.f32	s15, s15
 800488c:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8004a10 <scaraInitDuty+0x2e0>
 8004890:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004894:	f997 3197 	ldrsb.w	r3, [r7, #407]	; 0x197
 8004898:	ee07 3a90 	vmov	s15, r3
 800489c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048a4:	ee17 0a90 	vmov	r0, s15
 80048a8:	f7fb fe4e 	bl	8000548 <__aeabi_f2d>
 80048ac:	4603      	mov	r3, r0
 80048ae:	460c      	mov	r4, r1
 80048b0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
		}


		myDUTY.space_type = DUTY_SPACE_TASK;// Change type
 80048b4:	4b57      	ldr	r3, [pc, #348]	; (8004a14 <scaraInitDuty+0x2e4>)
 80048b6:	2200      	movs	r2, #0
 80048b8:	701a      	strb	r2, [r3, #0]
		myDUTY.task.roll_start = positionCurrent.roll;
 80048ba:	4b54      	ldr	r3, [pc, #336]	; (8004a0c <scaraInitDuty+0x2dc>)
 80048bc:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 80048c0:	4a54      	ldr	r2, [pc, #336]	; (8004a14 <scaraInitDuty+0x2e4>)
 80048c2:	e9c2 34f0 	strd	r3, r4, [r2, #960]	; 0x3c0
		// 1-Path Planning
			// Straight Line
		if ( DUTY_PATH_LINE == command.path_type ) {
 80048c6:	f897 31ce 	ldrb.w	r3, [r7, #462]	; 0x1ce
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d11f      	bne.n	800490e <scaraInitDuty+0x1de>
			myDUTY.task.path.path_type = DUTY_PATH_LINE;
 80048ce:	4b51      	ldr	r3, [pc, #324]	; (8004a14 <scaraInitDuty+0x2e4>)
 80048d0:	2200      	movs	r2, #0
 80048d2:	721a      	strb	r2, [r3, #8]
			status = scaraInitLine(&(myDUTY.task.path.line), positionCurrent, target_point);
 80048d4:	4c4d      	ldr	r4, [pc, #308]	; (8004a0c <scaraInitDuty+0x2dc>)
 80048d6:	463b      	mov	r3, r7
 80048d8:	a82c      	add	r0, sp, #176	; 0xb0
 80048da:	4619      	mov	r1, r3
 80048dc:	23b8      	movs	r3, #184	; 0xb8
 80048de:	461a      	mov	r2, r3
 80048e0:	f010 fee6 	bl	80156b0 <memcpy>
 80048e4:	4668      	mov	r0, sp
 80048e6:	f104 0308 	add.w	r3, r4, #8
 80048ea:	22b0      	movs	r2, #176	; 0xb0
 80048ec:	4619      	mov	r1, r3
 80048ee:	f010 fedf 	bl	80156b0 <memcpy>
 80048f2:	e894 000c 	ldmia.w	r4, {r2, r3}
 80048f6:	4848      	ldr	r0, [pc, #288]	; (8004a18 <scaraInitDuty+0x2e8>)
 80048f8:	f001 fa10 	bl	8005d1c <scaraInitLine>
 80048fc:	4603      	mov	r3, r0
 80048fe:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
			total_s = myDUTY.task.path.line.total_s;
 8004902:	4b44      	ldr	r3, [pc, #272]	; (8004a14 <scaraInitDuty+0x2e4>)
 8004904:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8004908:	e9c7 3468 	strd	r3, r4, [r7, #416]	; 0x1a0
 800490c:	e070      	b.n	80049f0 <scaraInitDuty+0x2c0>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == command.path_type ) {
 800490e:	f897 31ce 	ldrb.w	r3, [r7, #462]	; 0x1ce
 8004912:	2b01      	cmp	r3, #1
 8004914:	d169      	bne.n	80049ea <scaraInitDuty+0x2ba>
			SCARA_PositionTypeDef	center_point;
			if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8004916:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 800491a:	2b01      	cmp	r3, #1
 800491c:	d127      	bne.n	800496e <scaraInitDuty+0x23e>
				center_point.x 		= positionCurrent.x + command.sub_point.x;
 800491e:	4b3b      	ldr	r3, [pc, #236]	; (8004a0c <scaraInitDuty+0x2dc>)
 8004920:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8004924:	e9d7 34ba 	ldrd	r3, r4, [r7, #744]	; 0x2e8
 8004928:	461a      	mov	r2, r3
 800492a:	4623      	mov	r3, r4
 800492c:	f7fb fcae 	bl	800028c <__adddf3>
 8004930:	4603      	mov	r3, r0
 8004932:	460c      	mov	r4, r1
 8004934:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
				center_point.y 		= positionCurrent.y + command.sub_point.y;
 8004938:	4b34      	ldr	r3, [pc, #208]	; (8004a0c <scaraInitDuty+0x2dc>)
 800493a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800493e:	e9d7 34bc 	ldrd	r3, r4, [r7, #752]	; 0x2f0
 8004942:	461a      	mov	r2, r3
 8004944:	4623      	mov	r3, r4
 8004946:	f7fb fca1 	bl	800028c <__adddf3>
 800494a:	4603      	mov	r3, r0
 800494c:	460c      	mov	r4, r1
 800494e:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
				center_point.z 		= positionCurrent.z + command.sub_point.z;
 8004952:	4b2e      	ldr	r3, [pc, #184]	; (8004a0c <scaraInitDuty+0x2dc>)
 8004954:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8004958:	e9d7 34be 	ldrd	r3, r4, [r7, #760]	; 0x2f8
 800495c:	461a      	mov	r2, r3
 800495e:	4623      	mov	r3, r4
 8004960:	f7fb fc94 	bl	800028c <__adddf3>
 8004964:	4603      	mov	r3, r0
 8004966:	460c      	mov	r4, r1
 8004968:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
 800496c:	e013      	b.n	8004996 <scaraInitDuty+0x266>
			} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 800496e:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10c      	bne.n	8004990 <scaraInitDuty+0x260>
				center_point.x 		= command.target_point.x;
 8004976:	e9d7 348c 	ldrd	r3, r4, [r7, #560]	; 0x230
 800497a:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
				center_point.y 		= command.target_point.y;
 800497e:	e9d7 348e 	ldrd	r3, r4, [r7, #568]	; 0x238
 8004982:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
				center_point.z 		= command.target_point.z;
 8004986:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 800498a:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
 800498e:	e002      	b.n	8004996 <scaraInitDuty+0x266>
			} else {
				return SCARA_STATUS_ERROR_COORDINATE;
 8004990:	230c      	movs	r3, #12
			return SCARA_STATUS_ERROR_COORDINATE;
 8004992:	f001 b9b1 	b.w	8005cf8 <scaraInitDuty+0x15c8>
			}

			myDUTY.task.path.path_type = DUTY_PATH_CIRCLE;
 8004996:	4b1f      	ldr	r3, [pc, #124]	; (8004a14 <scaraInitDuty+0x2e4>)
 8004998:	2201      	movs	r2, #1
 800499a:	721a      	strb	r2, [r3, #8]
			status = scaraInitCircle(&(myDUTY.task.path.circle),
 800499c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80049a0:	4c1a      	ldr	r4, [pc, #104]	; (8004a0c <scaraInitDuty+0x2dc>)
 80049a2:	9388      	str	r3, [sp, #544]	; 0x220
 80049a4:	a85a      	add	r0, sp, #360	; 0x168
 80049a6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80049aa:	22b8      	movs	r2, #184	; 0xb8
 80049ac:	4619      	mov	r1, r3
 80049ae:	f010 fe7f 	bl	80156b0 <memcpy>
 80049b2:	463b      	mov	r3, r7
 80049b4:	a82c      	add	r0, sp, #176	; 0xb0
 80049b6:	4619      	mov	r1, r3
 80049b8:	23b8      	movs	r3, #184	; 0xb8
 80049ba:	461a      	mov	r2, r3
 80049bc:	f010 fe78 	bl	80156b0 <memcpy>
 80049c0:	4668      	mov	r0, sp
 80049c2:	f104 0308 	add.w	r3, r4, #8
 80049c6:	22b0      	movs	r2, #176	; 0xb0
 80049c8:	4619      	mov	r1, r3
 80049ca:	f010 fe71 	bl	80156b0 <memcpy>
 80049ce:	e894 000c 	ldmia.w	r4, {r2, r3}
 80049d2:	4812      	ldr	r0, [pc, #72]	; (8004a1c <scaraInitDuty+0x2ec>)
 80049d4:	f001 fa68 	bl	8005ea8 <scaraInitCircle>
 80049d8:	4603      	mov	r3, r0
 80049da:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
										positionCurrent,
										target_point,
										center_point,
										command.sub_para_int );
			total_s = myDUTY.task.path.circle.total_s;
 80049de:	4b0d      	ldr	r3, [pc, #52]	; (8004a14 <scaraInitDuty+0x2e4>)
 80049e0:	e9d3 343a 	ldrd	r3, r4, [r3, #232]	; 0xe8
 80049e4:	e9c7 3468 	strd	r3, r4, [r7, #416]	; 0x1a0
 80049e8:	e002      	b.n	80049f0 <scaraInitDuty+0x2c0>

		} else {
			return SCARA_STATUS_ERROR_TASK;
 80049ea:	2303      	movs	r3, #3
 80049ec:	f001 b984 	b.w	8005cf8 <scaraInitDuty+0x15c8>
		}

		if ( SCARA_STATUS_OK != status) {
 80049f0:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d013      	beq.n	8004a20 <scaraInitDuty+0x2f0>
			return status;
 80049f8:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 80049fc:	f001 b97c 	b.w	8005cf8 <scaraInitDuty+0x15c8>
 8004a00:	60000000 	.word	0x60000000
 8004a04:	400921fb 	.word	0x400921fb
 8004a08:	40668000 	.word	0x40668000
 8004a0c:	20005e38 	.word	0x20005e38
 8004a10:	40c90fdb 	.word	0x40c90fdb
 8004a14:	20005378 	.word	0x20005378
 8004a18:	20005388 	.word	0x20005388
 8004a1c:	200053f8 	.word	0x200053f8
		}

		// 2-Trajectory Planning
			// LSPB
		if ( DUTY_TRAJECTORY_LSPB == command.trajec_type ) {
 8004a20:	f897 31d0 	ldrb.w	r3, [r7, #464]	; 0x1d0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f040 80dd 	bne.w	8004be4 <scaraInitDuty+0x4b4>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8004a2a:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d145      	bne.n	8004abe <scaraInitDuty+0x38e>
				myDUTY.task.trajectory_3d.lspb.Tf = command.time_total;
 8004a32:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8004a36:	4ac8      	ldr	r2, [pc, #800]	; (8004d58 <scaraInitDuty+0x628>)
 8004a38:	e9c2 345a 	strd	r3, r4, [r2, #360]	; 0x168
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8004a3c:	4bc6      	ldr	r3, [pc, #792]	; (8004d58 <scaraInitDuty+0x628>)
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8004a44:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004a48:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004a4c:	eeb0 2a46 	vmov.f32	s4, s12
 8004a50:	eef0 2a66 	vmov.f32	s5, s13
 8004a54:	eeb0 1a47 	vmov.f32	s2, s14
 8004a58:	eef0 1a67 	vmov.f32	s3, s15
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8004a62:	2104      	movs	r1, #4
 8004a64:	48bd      	ldr	r0, [pc, #756]	; (8004d5c <scaraInitDuty+0x62c>)
 8004a66:	f001 fb97 	bl	8006198 <scaraInitLSPB>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
						 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

				myDUTY.task.trajectory_roll.lspb.Tf = command.time_total;
 8004a70:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8004a74:	4ab8      	ldr	r2, [pc, #736]	; (8004d58 <scaraInitDuty+0x628>)
 8004a76:	e9c2 34b0 	strd	r3, r4, [r2, #704]	; 0x2c0
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8004a7a:	4bb7      	ldr	r3, [pc, #732]	; (8004d58 <scaraInitDuty+0x628>)
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
				status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 8004a82:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004a86:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004a8a:	eeb0 2a46 	vmov.f32	s4, s12
 8004a8e:	eef0 2a66 	vmov.f32	s5, s13
 8004a92:	eeb0 1a47 	vmov.f32	s2, s14
 8004a96:	eef0 1a67 	vmov.f32	s3, s15
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8004aa0:	2105      	movs	r1, #5
 8004aa2:	48af      	ldr	r0, [pc, #700]	; (8004d60 <scaraInitDuty+0x630>)
 8004aa4:	f001 fb78 	bl	8006198 <scaraInitLSPB>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
						 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
				myDUTY.time_total = command.time_total;
 8004aae:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8004ab2:	4aa9      	ldr	r2, [pc, #676]	; (8004d58 <scaraInitDuty+0x628>)
 8004ab4:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8004ab8:	e9c2 3400 	strd	r3, r4, [r2]
 8004abc:	e181      	b.n	8004dc2 <scaraInitDuty+0x692>

			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8004abe:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f040 808b 	bne.w	8004bde <scaraInitDuty+0x4ae>
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8004ac8:	4ba3      	ldr	r3, [pc, #652]	; (8004d58 <scaraInitDuty+0x628>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8004ad0:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004ad4:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004ad8:	eeb0 2a46 	vmov.f32	s4, s12
 8004adc:	eef0 2a66 	vmov.f32	s5, s13
 8004ae0:	eeb0 1a47 	vmov.f32	s2, s14
 8004ae4:	eef0 1a67 	vmov.f32	s3, s15
 8004ae8:	2200      	movs	r2, #0
 8004aea:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8004aee:	2104      	movs	r1, #4
 8004af0:	489a      	ldr	r0, [pc, #616]	; (8004d5c <scaraInitDuty+0x62c>)
 8004af2:	f001 fb51 	bl	8006198 <scaraInitLSPB>
 8004af6:	4603      	mov	r3, r0
 8004af8:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
						 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8004afc:	4b96      	ldr	r3, [pc, #600]	; (8004d58 <scaraInitDuty+0x628>)
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
				status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 8004b04:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004b08:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004b0c:	eeb0 2a46 	vmov.f32	s4, s12
 8004b10:	eef0 2a66 	vmov.f32	s5, s13
 8004b14:	eeb0 1a47 	vmov.f32	s2, s14
 8004b18:	eef0 1a67 	vmov.f32	s3, s15
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8004b22:	2105      	movs	r1, #5
 8004b24:	488e      	ldr	r0, [pc, #568]	; (8004d60 <scaraInitDuty+0x630>)
 8004b26:	f001 fb37 	bl	8006198 <scaraInitLSPB>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
						 angle_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				// Synchronous time end
				if(myDUTY.task.trajectory_3d.lspb.Tf > myDUTY.task.trajectory_roll.lspb.Tf) {
 8004b30:	4b89      	ldr	r3, [pc, #548]	; (8004d58 <scaraInitDuty+0x628>)
 8004b32:	e9d3 015a 	ldrd	r0, r1, [r3, #360]	; 0x168
 8004b36:	4b88      	ldr	r3, [pc, #544]	; (8004d58 <scaraInitDuty+0x628>)
 8004b38:	e9d3 34b0 	ldrd	r3, r4, [r3, #704]	; 0x2c0
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	4623      	mov	r3, r4
 8004b40:	f7fb ffea 	bl	8000b18 <__aeabi_dcmpgt>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d024      	beq.n	8004b94 <scaraInitDuty+0x464>
					myDUTY.task.trajectory_roll.lspb.Tf = myDUTY.task.trajectory_3d.lspb.Tf;
 8004b4a:	4b83      	ldr	r3, [pc, #524]	; (8004d58 <scaraInitDuty+0x628>)
 8004b4c:	e9d3 345a 	ldrd	r3, r4, [r3, #360]	; 0x168
 8004b50:	4a81      	ldr	r2, [pc, #516]	; (8004d58 <scaraInitDuty+0x628>)
 8004b52:	e9c2 34b0 	strd	r3, r4, [r2, #704]	; 0x2c0
					status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 8004b56:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004b5a:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004b5e:	eeb0 2a46 	vmov.f32	s4, s12
 8004b62:	eef0 2a66 	vmov.f32	s5, s13
 8004b66:	eeb0 1a47 	vmov.f32	s2, s14
 8004b6a:	eef0 1a67 	vmov.f32	s3, s15
 8004b6e:	2201      	movs	r2, #1
 8004b70:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8004b74:	2105      	movs	r1, #5
 8004b76:	487a      	ldr	r0, [pc, #488]	; (8004d60 <scaraInitDuty+0x630>)
 8004b78:	f001 fb0e 	bl	8006198 <scaraInitLSPB>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
							 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_3d.lspb.Tf;
 8004b82:	4b75      	ldr	r3, [pc, #468]	; (8004d58 <scaraInitDuty+0x628>)
 8004b84:	e9d3 345a 	ldrd	r3, r4, [r3, #360]	; 0x168
 8004b88:	4a73      	ldr	r2, [pc, #460]	; (8004d58 <scaraInitDuty+0x628>)
 8004b8a:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8004b8e:	e9c2 3400 	strd	r3, r4, [r2]
 8004b92:	e116      	b.n	8004dc2 <scaraInitDuty+0x692>
				} else {
					myDUTY.task.trajectory_3d.lspb.Tf = myDUTY.task.trajectory_roll.lspb.Tf;
 8004b94:	4b70      	ldr	r3, [pc, #448]	; (8004d58 <scaraInitDuty+0x628>)
 8004b96:	e9d3 34b0 	ldrd	r3, r4, [r3, #704]	; 0x2c0
 8004b9a:	4a6f      	ldr	r2, [pc, #444]	; (8004d58 <scaraInitDuty+0x628>)
 8004b9c:	e9c2 345a 	strd	r3, r4, [r2, #360]	; 0x168
					status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8004ba0:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004ba4:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004ba8:	eeb0 2a46 	vmov.f32	s4, s12
 8004bac:	eef0 2a66 	vmov.f32	s5, s13
 8004bb0:	eeb0 1a47 	vmov.f32	s2, s14
 8004bb4:	eef0 1a67 	vmov.f32	s3, s15
 8004bb8:	2201      	movs	r2, #1
 8004bba:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8004bbe:	2104      	movs	r1, #4
 8004bc0:	4866      	ldr	r0, [pc, #408]	; (8004d5c <scaraInitDuty+0x62c>)
 8004bc2:	f001 fae9 	bl	8006198 <scaraInitLSPB>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
							 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_roll.lspb.Tf;
 8004bcc:	4b62      	ldr	r3, [pc, #392]	; (8004d58 <scaraInitDuty+0x628>)
 8004bce:	e9d3 34b0 	ldrd	r3, r4, [r3, #704]	; 0x2c0
 8004bd2:	4a61      	ldr	r2, [pc, #388]	; (8004d58 <scaraInitDuty+0x628>)
 8004bd4:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8004bd8:	e9c2 3400 	strd	r3, r4, [r2]
 8004bdc:	e0f1      	b.n	8004dc2 <scaraInitDuty+0x692>
				}
			} else {
				return SCARA_STATUS_ERROR_MODE_INIT ;
 8004bde:	2308      	movs	r3, #8
 8004be0:	f001 b88a 	b.w	8005cf8 <scaraInitDuty+0x15c8>
			}
			// SCURVE
		} else if 	( DUTY_TRAJECTORY_SCURVE == command.trajec_type ){
 8004be4:	f897 31d0 	ldrb.w	r3, [r7, #464]	; 0x1d0
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	f040 80e7 	bne.w	8004dbc <scaraInitDuty+0x68c>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8004bee:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d145      	bne.n	8004c82 <scaraInitDuty+0x552>
				myDUTY.task.trajectory_3d.scurve.Tf = command.time_total;
 8004bf6:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8004bfa:	4a57      	ldr	r2, [pc, #348]	; (8004d58 <scaraInitDuty+0x628>)
 8004bfc:	e9c2 347e 	strd	r3, r4, [r2, #504]	; 0x1f8
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8004c00:	4b55      	ldr	r3, [pc, #340]	; (8004d58 <scaraInitDuty+0x628>)
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8004c08:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004c0c:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004c10:	eeb0 2a46 	vmov.f32	s4, s12
 8004c14:	eef0 2a66 	vmov.f32	s5, s13
 8004c18:	eeb0 1a47 	vmov.f32	s2, s14
 8004c1c:	eef0 1a67 	vmov.f32	s3, s15
 8004c20:	2201      	movs	r2, #1
 8004c22:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8004c26:	2104      	movs	r1, #4
 8004c28:	484e      	ldr	r0, [pc, #312]	; (8004d64 <scaraInitDuty+0x634>)
 8004c2a:	f001 fea1 	bl	8006970 <scaraInitScurve>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
						 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

				myDUTY.task.trajectory_roll.scurve.Tf = command.time_total;
 8004c34:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8004c38:	4a47      	ldr	r2, [pc, #284]	; (8004d58 <scaraInitDuty+0x628>)
 8004c3a:	e9c2 34d4 	strd	r3, r4, [r2, #848]	; 0x350
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8004c3e:	4b46      	ldr	r3, [pc, #280]	; (8004d58 <scaraInitDuty+0x628>)
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
				status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 8004c46:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004c4a:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004c4e:	eeb0 2a46 	vmov.f32	s4, s12
 8004c52:	eef0 2a66 	vmov.f32	s5, s13
 8004c56:	eeb0 1a47 	vmov.f32	s2, s14
 8004c5a:	eef0 1a67 	vmov.f32	s3, s15
 8004c5e:	2201      	movs	r2, #1
 8004c60:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8004c64:	2105      	movs	r1, #5
 8004c66:	4840      	ldr	r0, [pc, #256]	; (8004d68 <scaraInitDuty+0x638>)
 8004c68:	f001 fe82 	bl	8006970 <scaraInitScurve>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
						 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
				myDUTY.time_total = command.time_total;
 8004c72:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8004c76:	4a38      	ldr	r2, [pc, #224]	; (8004d58 <scaraInitDuty+0x628>)
 8004c78:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8004c7c:	e9c2 3400 	strd	r3, r4, [r2]
 8004c80:	e09f      	b.n	8004dc2 <scaraInitDuty+0x692>

			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8004c82:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f040 8095 	bne.w	8004db6 <scaraInitDuty+0x686>
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8004c8c:	4b32      	ldr	r3, [pc, #200]	; (8004d58 <scaraInitDuty+0x628>)
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8004c94:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004c98:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004c9c:	eeb0 2a46 	vmov.f32	s4, s12
 8004ca0:	eef0 2a66 	vmov.f32	s5, s13
 8004ca4:	eeb0 1a47 	vmov.f32	s2, s14
 8004ca8:	eef0 1a67 	vmov.f32	s3, s15
 8004cac:	2200      	movs	r2, #0
 8004cae:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8004cb2:	2104      	movs	r1, #4
 8004cb4:	482b      	ldr	r0, [pc, #172]	; (8004d64 <scaraInitDuty+0x634>)
 8004cb6:	f001 fe5b 	bl	8006970 <scaraInitScurve>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
						 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8004cc0:	4b25      	ldr	r3, [pc, #148]	; (8004d58 <scaraInitDuty+0x628>)
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
				status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 8004cc8:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004ccc:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004cd0:	eeb0 2a46 	vmov.f32	s4, s12
 8004cd4:	eef0 2a66 	vmov.f32	s5, s13
 8004cd8:	eeb0 1a47 	vmov.f32	s2, s14
 8004cdc:	eef0 1a67 	vmov.f32	s3, s15
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8004ce6:	2105      	movs	r1, #5
 8004ce8:	481f      	ldr	r0, [pc, #124]	; (8004d68 <scaraInitDuty+0x638>)
 8004cea:	f001 fe41 	bl	8006970 <scaraInitScurve>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
						 angle_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				// synchronous time end
				if(myDUTY.task.trajectory_3d.scurve.Tf > myDUTY.task.trajectory_roll.scurve.Tf) {
 8004cf4:	4b18      	ldr	r3, [pc, #96]	; (8004d58 <scaraInitDuty+0x628>)
 8004cf6:	e9d3 017e 	ldrd	r0, r1, [r3, #504]	; 0x1f8
 8004cfa:	4b17      	ldr	r3, [pc, #92]	; (8004d58 <scaraInitDuty+0x628>)
 8004cfc:	e9d3 34d4 	ldrd	r3, r4, [r3, #848]	; 0x350
 8004d00:	461a      	mov	r2, r3
 8004d02:	4623      	mov	r3, r4
 8004d04:	f7fb ff08 	bl	8000b18 <__aeabi_dcmpgt>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d02e      	beq.n	8004d6c <scaraInitDuty+0x63c>
					myDUTY.task.trajectory_roll.scurve.Tf = myDUTY.task.trajectory_3d.scurve.Tf;
 8004d0e:	4b12      	ldr	r3, [pc, #72]	; (8004d58 <scaraInitDuty+0x628>)
 8004d10:	e9d3 347e 	ldrd	r3, r4, [r3, #504]	; 0x1f8
 8004d14:	4a10      	ldr	r2, [pc, #64]	; (8004d58 <scaraInitDuty+0x628>)
 8004d16:	e9c2 34d4 	strd	r3, r4, [r2, #848]	; 0x350
					status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 8004d1a:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004d1e:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004d22:	eeb0 2a46 	vmov.f32	s4, s12
 8004d26:	eef0 2a66 	vmov.f32	s5, s13
 8004d2a:	eeb0 1a47 	vmov.f32	s2, s14
 8004d2e:	eef0 1a67 	vmov.f32	s3, s15
 8004d32:	2201      	movs	r2, #1
 8004d34:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8004d38:	2105      	movs	r1, #5
 8004d3a:	480b      	ldr	r0, [pc, #44]	; (8004d68 <scaraInitDuty+0x638>)
 8004d3c:	f001 fe18 	bl	8006970 <scaraInitScurve>
 8004d40:	4603      	mov	r3, r0
 8004d42:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
							 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_3d.scurve.Tf;
 8004d46:	4b04      	ldr	r3, [pc, #16]	; (8004d58 <scaraInitDuty+0x628>)
 8004d48:	e9d3 347e 	ldrd	r3, r4, [r3, #504]	; 0x1f8
 8004d4c:	4a02      	ldr	r2, [pc, #8]	; (8004d58 <scaraInitDuty+0x628>)
 8004d4e:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8004d52:	e9c2 3400 	strd	r3, r4, [r2]
 8004d56:	e034      	b.n	8004dc2 <scaraInitDuty+0x692>
 8004d58:	20005378 	.word	0x20005378
 8004d5c:	20005490 	.word	0x20005490
 8004d60:	200055e8 	.word	0x200055e8
 8004d64:	20005510 	.word	0x20005510
 8004d68:	20005668 	.word	0x20005668
				} else {
					myDUTY.task.trajectory_3d.scurve.Tf = myDUTY.task.trajectory_roll.scurve.Tf;
 8004d6c:	4bb0      	ldr	r3, [pc, #704]	; (8005030 <scaraInitDuty+0x900>)
 8004d6e:	e9d3 34d4 	ldrd	r3, r4, [r3, #848]	; 0x350
 8004d72:	4aaf      	ldr	r2, [pc, #700]	; (8005030 <scaraInitDuty+0x900>)
 8004d74:	e9c2 347e 	strd	r3, r4, [r2, #504]	; 0x1f8
					status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8004d78:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004d7c:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004d80:	eeb0 2a46 	vmov.f32	s4, s12
 8004d84:	eef0 2a66 	vmov.f32	s5, s13
 8004d88:	eeb0 1a47 	vmov.f32	s2, s14
 8004d8c:	eef0 1a67 	vmov.f32	s3, s15
 8004d90:	2201      	movs	r2, #1
 8004d92:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8004d96:	2104      	movs	r1, #4
 8004d98:	48a6      	ldr	r0, [pc, #664]	; (8005034 <scaraInitDuty+0x904>)
 8004d9a:	f001 fde9 	bl	8006970 <scaraInitScurve>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
							 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_roll.scurve.Tf;
 8004da4:	4ba2      	ldr	r3, [pc, #648]	; (8005030 <scaraInitDuty+0x900>)
 8004da6:	e9d3 34d4 	ldrd	r3, r4, [r3, #848]	; 0x350
 8004daa:	4aa1      	ldr	r2, [pc, #644]	; (8005030 <scaraInitDuty+0x900>)
 8004dac:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8004db0:	e9c2 3400 	strd	r3, r4, [r2]
 8004db4:	e005      	b.n	8004dc2 <scaraInitDuty+0x692>
				}
			} else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 8004db6:	2308      	movs	r3, #8
 8004db8:	f000 bf9e 	b.w	8005cf8 <scaraInitDuty+0x15c8>
			}
		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8004dbc:	2305      	movs	r3, #5
 8004dbe:	f000 bf9b 	b.w	8005cf8 <scaraInitDuty+0x15c8>
		}
		// Check Init Status
		if ( SCARA_STATUS_OK != status1) {
 8004dc2:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d003      	beq.n	8004dd2 <scaraInitDuty+0x6a2>
			return status1;
 8004dca:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8004dce:	f000 bf93 	b.w	8005cf8 <scaraInitDuty+0x15c8>
		}
		if ( SCARA_STATUS_OK != status2) {
 8004dd2:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	f000 8760 	beq.w	8005c9c <scaraInitDuty+0x156c>
			return status2;
 8004ddc:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 8004de0:	f000 bf8a 	b.w	8005cf8 <scaraInitDuty+0x15c8>
		}


	/*----------- Space Joint ------------*/
	} else if (DUTY_SPACE_JOINT == command.space_type) {
 8004de4:	f897 31cd 	ldrb.w	r3, [r7, #461]	; 0x1cd
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	f040 8755 	bne.w	8005c98 <scaraInitDuty+0x1568>

		myDUTY.space_type = DUTY_SPACE_JOINT;// Change type
 8004dee:	4b90      	ldr	r3, [pc, #576]	; (8005030 <scaraInitDuty+0x900>)
 8004df0:	2201      	movs	r2, #1
 8004df2:	701a      	strb	r2, [r3, #0]
		myDUTY.joint.theta1_start	 = positionCurrent.Theta1;
 8004df4:	4b90      	ldr	r3, [pc, #576]	; (8005038 <scaraInitDuty+0x908>)
 8004df6:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 8004dfa:	4a8d      	ldr	r2, [pc, #564]	; (8005030 <scaraInitDuty+0x900>)
 8004dfc:	f602 1228 	addw	r2, r2, #2344	; 0x928
 8004e00:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.theta2_start	 = positionCurrent.Theta2;
 8004e04:	4b8c      	ldr	r3, [pc, #560]	; (8005038 <scaraInitDuty+0x908>)
 8004e06:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8004e0a:	4a89      	ldr	r2, [pc, #548]	; (8005030 <scaraInitDuty+0x900>)
 8004e0c:	f502 6213 	add.w	r2, r2, #2352	; 0x930
 8004e10:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.d3_start		 = positionCurrent.D3;
 8004e14:	4b88      	ldr	r3, [pc, #544]	; (8005038 <scaraInitDuty+0x908>)
 8004e16:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8004e1a:	4a85      	ldr	r2, [pc, #532]	; (8005030 <scaraInitDuty+0x900>)
 8004e1c:	f602 1238 	addw	r2, r2, #2360	; 0x938
 8004e20:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.theta4_start 	 = positionCurrent.Theta4;
 8004e24:	4b84      	ldr	r3, [pc, #528]	; (8005038 <scaraInitDuty+0x908>)
 8004e26:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 8004e2a:	4a81      	ldr	r2, [pc, #516]	; (8005030 <scaraInitDuty+0x900>)
 8004e2c:	f502 6214 	add.w	r2, r2, #2368	; 0x940
 8004e30:	e9c2 3400 	strd	r3, r4, [r2]

		//-----Joint Single
		if ( DUTY_JOINT_SINGLE == command.joint_type) {
 8004e34:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f040 83d6 	bne.w	80055ea <scaraInitDuty+0xeba>
			// Trajectory 1 profile
			double s, abs_position;
			switch(command.sub_para_int) {
 8004e3e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8004e42:	2b03      	cmp	r3, #3
 8004e44:	f200 814e 	bhi.w	80050e4 <scaraInitDuty+0x9b4>
 8004e48:	a201      	add	r2, pc, #4	; (adr r2, 8004e50 <scaraInitDuty+0x720>)
 8004e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e4e:	bf00      	nop
 8004e50:	08004e61 	.word	0x08004e61
 8004e54:	08004f07 	.word	0x08004f07
 8004e58:	08004fad 	.word	0x08004fad
 8004e5c:	08005041 	.word	0x08005041
			case 0:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 8004e60:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 8004e64:	a370      	add	r3, pc, #448	; (adr r3, 8005028 <scaraInitDuty+0x8f8>)
 8004e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6a:	f7fb fbc5 	bl	80005f8 <__aeabi_dmul>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	460c      	mov	r4, r1
 8004e72:	4618      	mov	r0, r3
 8004e74:	4621      	mov	r1, r4
 8004e76:	f04f 0200 	mov.w	r2, #0
 8004e7a:	4b70      	ldr	r3, [pc, #448]	; (800503c <scaraInitDuty+0x90c>)
 8004e7c:	f7fb fce6 	bl	800084c <__aeabi_ddiv>
 8004e80:	4603      	mov	r3, r0
 8004e82:	460c      	mov	r4, r1
 8004e84:	e9c7 3476 	strd	r3, r4, [r7, #472]	; 0x1d8
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8004e88:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d113      	bne.n	8004eb8 <scaraInitDuty+0x788>
					abs_position = myDUTY.joint.theta1_start + command.sub_para_double;
 8004e90:	4b67      	ldr	r3, [pc, #412]	; (8005030 <scaraInitDuty+0x900>)
 8004e92:	f603 1328 	addw	r3, r3, #2344	; 0x928
 8004e96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e9a:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	4623      	mov	r3, r4
 8004ea2:	f7fb f9f3 	bl	800028c <__adddf3>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	460c      	mov	r4, r1
 8004eaa:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
					s			 = command.sub_para_double;
 8004eae:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8004eb2:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 8004eb6:	e01a      	b.n	8004eee <scaraInitDuty+0x7be>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8004eb8:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d113      	bne.n	8004ee8 <scaraInitDuty+0x7b8>
					abs_position = command.sub_para_double;
 8004ec0:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8004ec4:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
					s			 = command.sub_para_double - myDUTY.joint.theta1_start;
 8004ec8:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 8004ecc:	4b58      	ldr	r3, [pc, #352]	; (8005030 <scaraInitDuty+0x900>)
 8004ece:	f603 1328 	addw	r3, r3, #2344	; 0x928
 8004ed2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	4623      	mov	r3, r4
 8004eda:	f7fb f9d5 	bl	8000288 <__aeabi_dsub>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	460c      	mov	r4, r1
 8004ee2:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 8004ee6:	e002      	b.n	8004eee <scaraInitDuty+0x7be>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8004ee8:	230c      	movs	r3, #12
 8004eea:	f000 bf05 	b.w	8005cf8 <scaraInitDuty+0x15c8>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J0, abs_position)) {
 8004eee:	ed97 0b60 	vldr	d0, [r7, #384]	; 0x180
 8004ef2:	2000      	movs	r0, #0
 8004ef4:	f003 fe44 	bl	8008b80 <scaraCheckWorkSpace1>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f000 80f5 	beq.w	80050ea <scaraInitDuty+0x9ba>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8004f00:	2307      	movs	r3, #7
 8004f02:	f000 bef9 	b.w	8005cf8 <scaraInitDuty+0x15c8>
				}
				break;
			case 1:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 8004f06:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 8004f0a:	a347      	add	r3, pc, #284	; (adr r3, 8005028 <scaraInitDuty+0x8f8>)
 8004f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f10:	f7fb fb72 	bl	80005f8 <__aeabi_dmul>
 8004f14:	4603      	mov	r3, r0
 8004f16:	460c      	mov	r4, r1
 8004f18:	4618      	mov	r0, r3
 8004f1a:	4621      	mov	r1, r4
 8004f1c:	f04f 0200 	mov.w	r2, #0
 8004f20:	4b46      	ldr	r3, [pc, #280]	; (800503c <scaraInitDuty+0x90c>)
 8004f22:	f7fb fc93 	bl	800084c <__aeabi_ddiv>
 8004f26:	4603      	mov	r3, r0
 8004f28:	460c      	mov	r4, r1
 8004f2a:	e9c7 3476 	strd	r3, r4, [r7, #472]	; 0x1d8
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8004f2e:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d113      	bne.n	8004f5e <scaraInitDuty+0x82e>
					abs_position = myDUTY.joint.theta2_start + command.sub_para_double;
 8004f36:	4b3e      	ldr	r3, [pc, #248]	; (8005030 <scaraInitDuty+0x900>)
 8004f38:	f503 6313 	add.w	r3, r3, #2352	; 0x930
 8004f3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f40:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8004f44:	461a      	mov	r2, r3
 8004f46:	4623      	mov	r3, r4
 8004f48:	f7fb f9a0 	bl	800028c <__adddf3>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	460c      	mov	r4, r1
 8004f50:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
					s			 = command.sub_para_double;
 8004f54:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8004f58:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 8004f5c:	e01a      	b.n	8004f94 <scaraInitDuty+0x864>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8004f5e:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d113      	bne.n	8004f8e <scaraInitDuty+0x85e>
					abs_position = command.sub_para_double;
 8004f66:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8004f6a:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
					s			 = command.sub_para_double - myDUTY.joint.theta2_start;
 8004f6e:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 8004f72:	4b2f      	ldr	r3, [pc, #188]	; (8005030 <scaraInitDuty+0x900>)
 8004f74:	f503 6313 	add.w	r3, r3, #2352	; 0x930
 8004f78:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	4623      	mov	r3, r4
 8004f80:	f7fb f982 	bl	8000288 <__aeabi_dsub>
 8004f84:	4603      	mov	r3, r0
 8004f86:	460c      	mov	r4, r1
 8004f88:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 8004f8c:	e002      	b.n	8004f94 <scaraInitDuty+0x864>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8004f8e:	230c      	movs	r3, #12
 8004f90:	f000 beb2 	b.w	8005cf8 <scaraInitDuty+0x15c8>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J1, abs_position)) {
 8004f94:	ed97 0b60 	vldr	d0, [r7, #384]	; 0x180
 8004f98:	2001      	movs	r0, #1
 8004f9a:	f003 fdf1 	bl	8008b80 <scaraCheckWorkSpace1>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f000 80a4 	beq.w	80050ee <scaraInitDuty+0x9be>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8004fa6:	2307      	movs	r3, #7
 8004fa8:	f000 bea6 	b.w	8005cf8 <scaraInitDuty+0x15c8>
				}
				break;
			case 2:
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8004fac:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d113      	bne.n	8004fdc <scaraInitDuty+0x8ac>
					abs_position = myDUTY.joint.d3_start + command.sub_para_double;
 8004fb4:	4b1e      	ldr	r3, [pc, #120]	; (8005030 <scaraInitDuty+0x900>)
 8004fb6:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8004fba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004fbe:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	4623      	mov	r3, r4
 8004fc6:	f7fb f961 	bl	800028c <__adddf3>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	460c      	mov	r4, r1
 8004fce:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
					s			 = command.sub_para_double;
 8004fd2:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8004fd6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 8004fda:	e01a      	b.n	8005012 <scaraInitDuty+0x8e2>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8004fdc:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d113      	bne.n	800500c <scaraInitDuty+0x8dc>
					abs_position = command.sub_para_double;
 8004fe4:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8004fe8:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
					s			 = command.sub_para_double - myDUTY.joint.d3_start;
 8004fec:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 8004ff0:	4b0f      	ldr	r3, [pc, #60]	; (8005030 <scaraInitDuty+0x900>)
 8004ff2:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8004ff6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	4623      	mov	r3, r4
 8004ffe:	f7fb f943 	bl	8000288 <__aeabi_dsub>
 8005002:	4603      	mov	r3, r0
 8005004:	460c      	mov	r4, r1
 8005006:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 800500a:	e002      	b.n	8005012 <scaraInitDuty+0x8e2>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 800500c:	230c      	movs	r3, #12
 800500e:	f000 be73 	b.w	8005cf8 <scaraInitDuty+0x15c8>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J2, abs_position)) {
 8005012:	ed97 0b60 	vldr	d0, [r7, #384]	; 0x180
 8005016:	2002      	movs	r0, #2
 8005018:	f003 fdb2 	bl	8008b80 <scaraCheckWorkSpace1>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d067      	beq.n	80050f2 <scaraInitDuty+0x9c2>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005022:	2307      	movs	r3, #7
 8005024:	f000 be68 	b.w	8005cf8 <scaraInitDuty+0x15c8>
 8005028:	60000000 	.word	0x60000000
 800502c:	400921fb 	.word	0x400921fb
 8005030:	20005378 	.word	0x20005378
 8005034:	20005510 	.word	0x20005510
 8005038:	20005e38 	.word	0x20005e38
 800503c:	40668000 	.word	0x40668000
				}
				break;
			case 3:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 8005040:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 8005044:	a3cf      	add	r3, pc, #828	; (adr r3, 8005384 <scaraInitDuty+0xc54>)
 8005046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800504a:	f7fb fad5 	bl	80005f8 <__aeabi_dmul>
 800504e:	4603      	mov	r3, r0
 8005050:	460c      	mov	r4, r1
 8005052:	4618      	mov	r0, r3
 8005054:	4621      	mov	r1, r4
 8005056:	f04f 0200 	mov.w	r2, #0
 800505a:	4bc7      	ldr	r3, [pc, #796]	; (8005378 <scaraInitDuty+0xc48>)
 800505c:	f7fb fbf6 	bl	800084c <__aeabi_ddiv>
 8005060:	4603      	mov	r3, r0
 8005062:	460c      	mov	r4, r1
 8005064:	e9c7 3476 	strd	r3, r4, [r7, #472]	; 0x1d8
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8005068:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 800506c:	2b01      	cmp	r3, #1
 800506e:	d113      	bne.n	8005098 <scaraInitDuty+0x968>
					abs_position = myDUTY.joint.theta4_start + command.sub_para_double;
 8005070:	4bc2      	ldr	r3, [pc, #776]	; (800537c <scaraInitDuty+0xc4c>)
 8005072:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 8005076:	e9d3 0100 	ldrd	r0, r1, [r3]
 800507a:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 800507e:	461a      	mov	r2, r3
 8005080:	4623      	mov	r3, r4
 8005082:	f7fb f903 	bl	800028c <__adddf3>
 8005086:	4603      	mov	r3, r0
 8005088:	460c      	mov	r4, r1
 800508a:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
					s			 = command.sub_para_double;
 800508e:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8005092:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 8005096:	e01a      	b.n	80050ce <scaraInitDuty+0x99e>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8005098:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 800509c:	2b00      	cmp	r3, #0
 800509e:	d113      	bne.n	80050c8 <scaraInitDuty+0x998>
					abs_position = command.sub_para_double;
 80050a0:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 80050a4:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
					s			 = command.sub_para_double - myDUTY.joint.theta4_start;
 80050a8:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 80050ac:	4bb3      	ldr	r3, [pc, #716]	; (800537c <scaraInitDuty+0xc4c>)
 80050ae:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 80050b2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80050b6:	461a      	mov	r2, r3
 80050b8:	4623      	mov	r3, r4
 80050ba:	f7fb f8e5 	bl	8000288 <__aeabi_dsub>
 80050be:	4603      	mov	r3, r0
 80050c0:	460c      	mov	r4, r1
 80050c2:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 80050c6:	e002      	b.n	80050ce <scaraInitDuty+0x99e>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 80050c8:	230c      	movs	r3, #12
 80050ca:	f000 be15 	b.w	8005cf8 <scaraInitDuty+0x15c8>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J3, abs_position)) {
 80050ce:	ed97 0b60 	vldr	d0, [r7, #384]	; 0x180
 80050d2:	2003      	movs	r0, #3
 80050d4:	f003 fd54 	bl	8008b80 <scaraCheckWorkSpace1>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00b      	beq.n	80050f6 <scaraInitDuty+0x9c6>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80050de:	2307      	movs	r3, #7
 80050e0:	f000 be0a 	b.w	8005cf8 <scaraInitDuty+0x15c8>
				}
				break;
			default:
				return SCARA_STATUS_ERROR_JOINT_NUM;
 80050e4:	230b      	movs	r3, #11
 80050e6:	f000 be07 	b.w	8005cf8 <scaraInitDuty+0x15c8>
				break;
 80050ea:	bf00      	nop
 80050ec:	e004      	b.n	80050f8 <scaraInitDuty+0x9c8>
				break;
 80050ee:	bf00      	nop
 80050f0:	e002      	b.n	80050f8 <scaraInitDuty+0x9c8>
				break;
 80050f2:	bf00      	nop
 80050f4:	e000      	b.n	80050f8 <scaraInitDuty+0x9c8>
				break;
 80050f6:	bf00      	nop
			}

			// LSPB
			if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 80050f8:	f897 31d0 	ldrb.w	r3, [r7, #464]	; 0x1d0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f040 8128 	bne.w	8005352 <scaraInitDuty+0xc22>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8005102:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 8005106:	2b01      	cmp	r3, #1
 8005108:	f040 8097 	bne.w	800523a <scaraInitDuty+0xb0a>
					for ( uint8_t i = 0; i < 4; i++) {
 800510c:	2300      	movs	r3, #0
 800510e:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 8005112:	e08c      	b.n	800522e <scaraInitDuty+0xafe>
						if ( i == command.sub_para_int) {
 8005114:	f897 217f 	ldrb.w	r2, [r7, #383]	; 0x17f
 8005118:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800511c:	429a      	cmp	r2, r3
 800511e:	d13d      	bne.n	800519c <scaraInitDuty+0xa6c>
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005120:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 8005124:	4a95      	ldr	r2, [pc, #596]	; (800537c <scaraInitDuty+0xc4c>)
 8005126:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800512a:	fb01 f303 	mul.w	r3, r1, r3
 800512e:	4413      	add	r3, r2
 8005130:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005134:	2200      	movs	r2, #0
 8005136:	701a      	strb	r2, [r3, #0]
							myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 8005138:	f897 217f 	ldrb.w	r2, [r7, #383]	; 0x17f
 800513c:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8005140:	498e      	ldr	r1, [pc, #568]	; (800537c <scaraInitDuty+0xc4c>)
 8005142:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8005146:	fb00 f202 	mul.w	r2, r0, r2
 800514a:	440a      	add	r2, r1
 800514c:	f502 6284 	add.w	r2, r2, #1056	; 0x420
 8005150:	e9c2 3400 	strd	r3, r4, [r2]
							status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8005154:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 8005158:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800515c:	fb02 f303 	mul.w	r3, r2, r3
 8005160:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8005164:	4a85      	ldr	r2, [pc, #532]	; (800537c <scaraInitDuty+0xc4c>)
 8005166:	1898      	adds	r0, r3, r2
 8005168:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 800516c:	4a84      	ldr	r2, [pc, #528]	; (8005380 <scaraInitDuty+0xc50>)
 800516e:	5cd3      	ldrb	r3, [r2, r3]
 8005170:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8005174:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8005178:	eeb0 2a46 	vmov.f32	s4, s12
 800517c:	eef0 2a66 	vmov.f32	s5, s13
 8005180:	eeb0 1a47 	vmov.f32	s2, s14
 8005184:	eef0 1a67 	vmov.f32	s3, s15
 8005188:	2201      	movs	r2, #1
 800518a:	ed97 0b62 	vldr	d0, [r7, #392]	; 0x188
 800518e:	4619      	mov	r1, r3
 8005190:	f001 f802 	bl	8006198 <scaraInitLSPB>
 8005194:	4603      	mov	r3, r0
 8005196:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
 800519a:	e03c      	b.n	8005216 <scaraInitDuty+0xae6>
											s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
						} else {
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 800519c:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 80051a0:	4a76      	ldr	r2, [pc, #472]	; (800537c <scaraInitDuty+0xc4c>)
 80051a2:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80051a6:	fb01 f303 	mul.w	r3, r1, r3
 80051aa:	4413      	add	r3, r2
 80051ac:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 80051b0:	2200      	movs	r2, #0
 80051b2:	701a      	strb	r2, [r3, #0]
							myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 80051b4:	f897 217f 	ldrb.w	r2, [r7, #383]	; 0x17f
 80051b8:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 80051bc:	496f      	ldr	r1, [pc, #444]	; (800537c <scaraInitDuty+0xc4c>)
 80051be:	f44f 70ac 	mov.w	r0, #344	; 0x158
 80051c2:	fb00 f202 	mul.w	r2, r0, r2
 80051c6:	440a      	add	r2, r1
 80051c8:	f502 6284 	add.w	r2, r2, #1056	; 0x420
 80051cc:	e9c2 3400 	strd	r3, r4, [r2]
							status2 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 80051d0:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 80051d4:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80051d8:	fb02 f303 	mul.w	r3, r2, r3
 80051dc:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 80051e0:	4a66      	ldr	r2, [pc, #408]	; (800537c <scaraInitDuty+0xc4c>)
 80051e2:	1898      	adds	r0, r3, r2
 80051e4:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 80051e8:	4a65      	ldr	r2, [pc, #404]	; (8005380 <scaraInitDuty+0xc50>)
 80051ea:	5cd3      	ldrb	r3, [r2, r3]
 80051ec:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 80051f0:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 80051f4:	eeb0 2a46 	vmov.f32	s4, s12
 80051f8:	eef0 2a66 	vmov.f32	s5, s13
 80051fc:	eeb0 1a47 	vmov.f32	s2, s14
 8005200:	eef0 1a67 	vmov.f32	s3, s15
 8005204:	2201      	movs	r2, #1
 8005206:	ed9f 0b5a 	vldr	d0, [pc, #360]	; 8005370 <scaraInitDuty+0xc40>
 800520a:	4619      	mov	r1, r3
 800520c:	f000 ffc4 	bl	8006198 <scaraInitLSPB>
 8005210:	4603      	mov	r3, r0
 8005212:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
											0, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
						}
						myDUTY.time_total = command.time_total;
 8005216:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 800521a:	4a58      	ldr	r2, [pc, #352]	; (800537c <scaraInitDuty+0xc4c>)
 800521c:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8005220:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 8005224:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 8005228:	3301      	adds	r3, #1
 800522a:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 800522e:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 8005232:	2b03      	cmp	r3, #3
 8005234:	f67f af6e 	bls.w	8005114 <scaraInitDuty+0x9e4>
 8005238:	e1c8      	b.n	80055cc <scaraInitDuty+0xe9c>
					}
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 800523a:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 800523e:	2b00      	cmp	r3, #0
 8005240:	f040 8084 	bne.w	800534c <scaraInitDuty+0xc1c>
					for ( uint8_t i = 0; i < 4; i++) {
 8005244:	2300      	movs	r3, #0
 8005246:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 800524a:	e07a      	b.n	8005342 <scaraInitDuty+0xc12>
						if ( i == command.sub_para_int) {
 800524c:	f897 217e 	ldrb.w	r2, [r7, #382]	; 0x17e
 8005250:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8005254:	429a      	cmp	r2, r3
 8005256:	d140      	bne.n	80052da <scaraInitDuty+0xbaa>
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005258:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 800525c:	4a47      	ldr	r2, [pc, #284]	; (800537c <scaraInitDuty+0xc4c>)
 800525e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005262:	fb01 f303 	mul.w	r3, r1, r3
 8005266:	4413      	add	r3, r2
 8005268:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 800526c:	2200      	movs	r2, #0
 800526e:	701a      	strb	r2, [r3, #0]
							status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8005270:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 8005274:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005278:	fb02 f303 	mul.w	r3, r2, r3
 800527c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8005280:	4a3e      	ldr	r2, [pc, #248]	; (800537c <scaraInitDuty+0xc4c>)
 8005282:	1898      	adds	r0, r3, r2
 8005284:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 8005288:	4a3d      	ldr	r2, [pc, #244]	; (8005380 <scaraInitDuty+0xc50>)
 800528a:	5cd3      	ldrb	r3, [r2, r3]
 800528c:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8005290:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8005294:	eeb0 2a46 	vmov.f32	s4, s12
 8005298:	eef0 2a66 	vmov.f32	s5, s13
 800529c:	eeb0 1a47 	vmov.f32	s2, s14
 80052a0:	eef0 1a67 	vmov.f32	s3, s15
 80052a4:	2200      	movs	r2, #0
 80052a6:	ed97 0b62 	vldr	d0, [r7, #392]	; 0x188
 80052aa:	4619      	mov	r1, r3
 80052ac:	f000 ff74 	bl	8006198 <scaraInitLSPB>
 80052b0:	4603      	mov	r3, r0
 80052b2:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
											s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
							myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 80052b6:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 80052ba:	4a30      	ldr	r2, [pc, #192]	; (800537c <scaraInitDuty+0xc4c>)
 80052bc:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80052c0:	fb01 f303 	mul.w	r3, r1, r3
 80052c4:	4413      	add	r3, r2
 80052c6:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80052ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 80052ce:	4a2b      	ldr	r2, [pc, #172]	; (800537c <scaraInitDuty+0xc4c>)
 80052d0:	f602 1248 	addw	r2, r2, #2376	; 0x948
 80052d4:	e9c2 3400 	strd	r3, r4, [r2]
 80052d8:	e02e      	b.n	8005338 <scaraInitDuty+0xc08>
						} else {
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 80052da:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 80052de:	4a27      	ldr	r2, [pc, #156]	; (800537c <scaraInitDuty+0xc4c>)
 80052e0:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80052e4:	fb01 f303 	mul.w	r3, r1, r3
 80052e8:	4413      	add	r3, r2
 80052ea:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 80052ee:	2200      	movs	r2, #0
 80052f0:	701a      	strb	r2, [r3, #0]
							status2 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 80052f2:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 80052f6:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80052fa:	fb02 f303 	mul.w	r3, r2, r3
 80052fe:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8005302:	4a1e      	ldr	r2, [pc, #120]	; (800537c <scaraInitDuty+0xc4c>)
 8005304:	1898      	adds	r0, r3, r2
 8005306:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 800530a:	4a1d      	ldr	r2, [pc, #116]	; (8005380 <scaraInitDuty+0xc50>)
 800530c:	5cd3      	ldrb	r3, [r2, r3]
 800530e:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8005312:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8005316:	eeb0 2a46 	vmov.f32	s4, s12
 800531a:	eef0 2a66 	vmov.f32	s5, s13
 800531e:	eeb0 1a47 	vmov.f32	s2, s14
 8005322:	eef0 1a67 	vmov.f32	s3, s15
 8005326:	2200      	movs	r2, #0
 8005328:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8005370 <scaraInitDuty+0xc40>
 800532c:	4619      	mov	r1, r3
 800532e:	f000 ff33 	bl	8006198 <scaraInitLSPB>
 8005332:	4603      	mov	r3, r0
 8005334:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
					for ( uint8_t i = 0; i < 4; i++) {
 8005338:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 800533c:	3301      	adds	r3, #1
 800533e:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 8005342:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 8005346:	2b03      	cmp	r3, #3
 8005348:	d980      	bls.n	800524c <scaraInitDuty+0xb1c>
 800534a:	e13f      	b.n	80055cc <scaraInitDuty+0xe9c>
											0, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
						}
					}
				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 800534c:	2308      	movs	r3, #8
 800534e:	f000 bcd3 	b.w	8005cf8 <scaraInitDuty+0x15c8>
				}
			// SCURVE
			} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 8005352:	f897 31d0 	ldrb.w	r3, [r7, #464]	; 0x1d0
 8005356:	2b01      	cmp	r3, #1
 8005358:	f040 8136 	bne.w	80055c8 <scaraInitDuty+0xe98>
					// Mode Init Time
					if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 800535c:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 8005360:	2b01      	cmp	r3, #1
 8005362:	f040 80a6 	bne.w	80054b2 <scaraInitDuty+0xd82>
						for ( uint8_t i = 0; i < 4; i++) {
 8005366:	2300      	movs	r3, #0
 8005368:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 800536c:	e09b      	b.n	80054a6 <scaraInitDuty+0xd76>
 800536e:	bf00      	nop
	...
 8005378:	40668000 	.word	0x40668000
 800537c:	20005378 	.word	0x20005378
 8005380:	20000c54 	.word	0x20000c54
 8005384:	60000000 	.word	0x60000000
 8005388:	400921fb 	.word	0x400921fb
							if ( i == command.sub_para_int) {
 800538c:	f897 217d 	ldrb.w	r2, [r7, #381]	; 0x17d
 8005390:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8005394:	429a      	cmp	r2, r3
 8005396:	d13d      	bne.n	8005414 <scaraInitDuty+0xce4>
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005398:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 800539c:	4ac0      	ldr	r2, [pc, #768]	; (80056a0 <scaraInitDuty+0xf70>)
 800539e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80053a2:	fb01 f303 	mul.w	r3, r1, r3
 80053a6:	4413      	add	r3, r2
 80053a8:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 80053ac:	2201      	movs	r2, #1
 80053ae:	701a      	strb	r2, [r3, #0]
								myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 80053b0:	f897 217d 	ldrb.w	r2, [r7, #381]	; 0x17d
 80053b4:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 80053b8:	49b9      	ldr	r1, [pc, #740]	; (80056a0 <scaraInitDuty+0xf70>)
 80053ba:	f44f 70ac 	mov.w	r0, #344	; 0x158
 80053be:	fb00 f202 	mul.w	r2, r0, r2
 80053c2:	440a      	add	r2, r1
 80053c4:	f502 6296 	add.w	r2, r2, #1200	; 0x4b0
 80053c8:	e9c2 3400 	strd	r3, r4, [r2]
								status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 80053cc:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 80053d0:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80053d4:	fb02 f303 	mul.w	r3, r2, r3
 80053d8:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 80053dc:	4ab0      	ldr	r2, [pc, #704]	; (80056a0 <scaraInitDuty+0xf70>)
 80053de:	1898      	adds	r0, r3, r2
 80053e0:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 80053e4:	4aaf      	ldr	r2, [pc, #700]	; (80056a4 <scaraInitDuty+0xf74>)
 80053e6:	5cd3      	ldrb	r3, [r2, r3]
 80053e8:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 80053ec:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 80053f0:	eeb0 2a46 	vmov.f32	s4, s12
 80053f4:	eef0 2a66 	vmov.f32	s5, s13
 80053f8:	eeb0 1a47 	vmov.f32	s2, s14
 80053fc:	eef0 1a67 	vmov.f32	s3, s15
 8005400:	2201      	movs	r2, #1
 8005402:	ed97 0b62 	vldr	d0, [r7, #392]	; 0x188
 8005406:	4619      	mov	r1, r3
 8005408:	f001 fab2 	bl	8006970 <scaraInitScurve>
 800540c:	4603      	mov	r3, r0
 800540e:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
 8005412:	e03c      	b.n	800548e <scaraInitDuty+0xd5e>
											joint_taget[i],
											s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
							} else {
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005414:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 8005418:	4aa1      	ldr	r2, [pc, #644]	; (80056a0 <scaraInitDuty+0xf70>)
 800541a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800541e:	fb01 f303 	mul.w	r3, r1, r3
 8005422:	4413      	add	r3, r2
 8005424:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005428:	2201      	movs	r2, #1
 800542a:	701a      	strb	r2, [r3, #0]
								myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 800542c:	f897 217d 	ldrb.w	r2, [r7, #381]	; 0x17d
 8005430:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8005434:	499a      	ldr	r1, [pc, #616]	; (80056a0 <scaraInitDuty+0xf70>)
 8005436:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800543a:	fb00 f202 	mul.w	r2, r0, r2
 800543e:	440a      	add	r2, r1
 8005440:	f502 6296 	add.w	r2, r2, #1200	; 0x4b0
 8005444:	e9c2 3400 	strd	r3, r4, [r2]
								status2 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 8005448:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 800544c:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005450:	fb02 f303 	mul.w	r3, r2, r3
 8005454:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8005458:	4a91      	ldr	r2, [pc, #580]	; (80056a0 <scaraInitDuty+0xf70>)
 800545a:	1898      	adds	r0, r3, r2
 800545c:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 8005460:	4a90      	ldr	r2, [pc, #576]	; (80056a4 <scaraInitDuty+0xf74>)
 8005462:	5cd3      	ldrb	r3, [r2, r3]
 8005464:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8005468:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 800546c:	eeb0 2a46 	vmov.f32	s4, s12
 8005470:	eef0 2a66 	vmov.f32	s5, s13
 8005474:	eeb0 1a47 	vmov.f32	s2, s14
 8005478:	eef0 1a67 	vmov.f32	s3, s15
 800547c:	2201      	movs	r2, #1
 800547e:	ed9f 0b84 	vldr	d0, [pc, #528]	; 8005690 <scaraInitDuty+0xf60>
 8005482:	4619      	mov	r1, r3
 8005484:	f001 fa74 	bl	8006970 <scaraInitScurve>
 8005488:	4603      	mov	r3, r0
 800548a:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
											joint_taget[i],
											0, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
							}
							myDUTY.time_total = command.time_total;
 800548e:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8005492:	4a83      	ldr	r2, [pc, #524]	; (80056a0 <scaraInitDuty+0xf70>)
 8005494:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8005498:	e9c2 3400 	strd	r3, r4, [r2]
						for ( uint8_t i = 0; i < 4; i++) {
 800549c:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 80054a0:	3301      	adds	r3, #1
 80054a2:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 80054a6:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 80054aa:	2b03      	cmp	r3, #3
 80054ac:	f67f af6e 	bls.w	800538c <scaraInitDuty+0xc5c>
 80054b0:	e08c      	b.n	80055cc <scaraInitDuty+0xe9c>
						}
					// Mode Init Acc
					} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 80054b2:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f040 8084 	bne.w	80055c4 <scaraInitDuty+0xe94>
						for ( uint8_t i = 0; i < 4; i++) {
 80054bc:	2300      	movs	r3, #0
 80054be:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 80054c2:	e07a      	b.n	80055ba <scaraInitDuty+0xe8a>
							if ( i == command.sub_para_int) {
 80054c4:	f897 217c 	ldrb.w	r2, [r7, #380]	; 0x17c
 80054c8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d140      	bne.n	8005552 <scaraInitDuty+0xe22>
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80054d0:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 80054d4:	4a72      	ldr	r2, [pc, #456]	; (80056a0 <scaraInitDuty+0xf70>)
 80054d6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80054da:	fb01 f303 	mul.w	r3, r1, r3
 80054de:	4413      	add	r3, r2
 80054e0:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 80054e4:	2201      	movs	r2, #1
 80054e6:	701a      	strb	r2, [r3, #0]
								status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 80054e8:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 80054ec:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80054f0:	fb02 f303 	mul.w	r3, r2, r3
 80054f4:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 80054f8:	4a69      	ldr	r2, [pc, #420]	; (80056a0 <scaraInitDuty+0xf70>)
 80054fa:	1898      	adds	r0, r3, r2
 80054fc:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 8005500:	4a68      	ldr	r2, [pc, #416]	; (80056a4 <scaraInitDuty+0xf74>)
 8005502:	5cd3      	ldrb	r3, [r2, r3]
 8005504:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8005508:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 800550c:	eeb0 2a46 	vmov.f32	s4, s12
 8005510:	eef0 2a66 	vmov.f32	s5, s13
 8005514:	eeb0 1a47 	vmov.f32	s2, s14
 8005518:	eef0 1a67 	vmov.f32	s3, s15
 800551c:	2200      	movs	r2, #0
 800551e:	ed97 0b62 	vldr	d0, [r7, #392]	; 0x188
 8005522:	4619      	mov	r1, r3
 8005524:	f001 fa24 	bl	8006970 <scaraInitScurve>
 8005528:	4603      	mov	r3, r0
 800552a:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
											joint_taget[i],
											s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
								myDUTY.time_total = myDUTY.joint.trajectory[i].scurve.Tf;
 800552e:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 8005532:	4a5b      	ldr	r2, [pc, #364]	; (80056a0 <scaraInitDuty+0xf70>)
 8005534:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005538:	fb01 f303 	mul.w	r3, r1, r3
 800553c:	4413      	add	r3, r2
 800553e:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8005542:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005546:	4a56      	ldr	r2, [pc, #344]	; (80056a0 <scaraInitDuty+0xf70>)
 8005548:	f602 1248 	addw	r2, r2, #2376	; 0x948
 800554c:	e9c2 3400 	strd	r3, r4, [r2]
 8005550:	e02e      	b.n	80055b0 <scaraInitDuty+0xe80>
							} else {
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005552:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 8005556:	4a52      	ldr	r2, [pc, #328]	; (80056a0 <scaraInitDuty+0xf70>)
 8005558:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800555c:	fb01 f303 	mul.w	r3, r1, r3
 8005560:	4413      	add	r3, r2
 8005562:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005566:	2201      	movs	r2, #1
 8005568:	701a      	strb	r2, [r3, #0]
								status2 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 800556a:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 800556e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005572:	fb02 f303 	mul.w	r3, r2, r3
 8005576:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 800557a:	4a49      	ldr	r2, [pc, #292]	; (80056a0 <scaraInitDuty+0xf70>)
 800557c:	1898      	adds	r0, r3, r2
 800557e:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 8005582:	4a48      	ldr	r2, [pc, #288]	; (80056a4 <scaraInitDuty+0xf74>)
 8005584:	5cd3      	ldrb	r3, [r2, r3]
 8005586:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 800558a:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 800558e:	eeb0 2a46 	vmov.f32	s4, s12
 8005592:	eef0 2a66 	vmov.f32	s5, s13
 8005596:	eeb0 1a47 	vmov.f32	s2, s14
 800559a:	eef0 1a67 	vmov.f32	s3, s15
 800559e:	2200      	movs	r2, #0
 80055a0:	ed9f 0b3b 	vldr	d0, [pc, #236]	; 8005690 <scaraInitDuty+0xf60>
 80055a4:	4619      	mov	r1, r3
 80055a6:	f001 f9e3 	bl	8006970 <scaraInitScurve>
 80055aa:	4603      	mov	r3, r0
 80055ac:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
						for ( uint8_t i = 0; i < 4; i++) {
 80055b0:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 80055b4:	3301      	adds	r3, #1
 80055b6:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 80055ba:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 80055be:	2b03      	cmp	r3, #3
 80055c0:	d980      	bls.n	80054c4 <scaraInitDuty+0xd94>
 80055c2:	e003      	b.n	80055cc <scaraInitDuty+0xe9c>
											0, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
							}
						}

					} else {
						return SCARA_STATUS_ERROR_MODE_INIT;
 80055c4:	2308      	movs	r3, #8
 80055c6:	e397      	b.n	8005cf8 <scaraInitDuty+0x15c8>
					}

			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 80055c8:	2305      	movs	r3, #5
 80055ca:	e395      	b.n	8005cf8 <scaraInitDuty+0x15c8>
			}
		// Check Init Status
			if ( SCARA_STATUS_OK != status1) {
 80055cc:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d002      	beq.n	80055da <scaraInitDuty+0xeaa>
				return status1;
 80055d4:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 80055d8:	e38e      	b.n	8005cf8 <scaraInitDuty+0x15c8>
			}
			if ( SCARA_STATUS_OK != status2) {
 80055da:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 80055de:	2b00      	cmp	r3, #0
 80055e0:	f000 835c 	beq.w	8005c9c <scaraInitDuty+0x156c>
				return status2;
 80055e4:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 80055e8:	e386      	b.n	8005cf8 <scaraInitDuty+0x15c8>
			}

		//----Joint Quadra
		} else if 	( DUTY_JOINT_4DOF == command.joint_type) {
 80055ea:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	f040 8350 	bne.w	8005c94 <scaraInitDuty+0x1564>
			SCARA_PositionTypeDef	target_point;
			// Change Degree --> Radian
			command.target_point.roll = command.target_point.roll*PI/180.0;
 80055f4:	e9d7 0192 	ldrd	r0, r1, [r7, #584]	; 0x248
 80055f8:	a327      	add	r3, pc, #156	; (adr r3, 8005698 <scaraInitDuty+0xf68>)
 80055fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fe:	f7fa fffb 	bl	80005f8 <__aeabi_dmul>
 8005602:	4603      	mov	r3, r0
 8005604:	460c      	mov	r4, r1
 8005606:	4618      	mov	r0, r3
 8005608:	4621      	mov	r1, r4
 800560a:	f04f 0200 	mov.w	r2, #0
 800560e:	4b26      	ldr	r3, [pc, #152]	; (80056a8 <scaraInitDuty+0xf78>)
 8005610:	f7fb f91c 	bl	800084c <__aeabi_ddiv>
 8005614:	4603      	mov	r3, r0
 8005616:	460c      	mov	r4, r1
 8005618:	e9c7 3492 	strd	r3, r4, [r7, #584]	; 0x248
			// Coordinate
			if( DUTY_COORDINATES_REL == command.coordinate_type) {
 800561c:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 8005620:	2b01      	cmp	r3, #1
 8005622:	d145      	bne.n	80056b0 <scaraInitDuty+0xf80>
				target_point.x 		= positionCurrent.x + command.target_point.x;
 8005624:	4b21      	ldr	r3, [pc, #132]	; (80056ac <scaraInitDuty+0xf7c>)
 8005626:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800562a:	e9d7 348c 	ldrd	r3, r4, [r7, #560]	; 0x230
 800562e:	461a      	mov	r2, r3
 8005630:	4623      	mov	r3, r4
 8005632:	f7fa fe2b 	bl	800028c <__adddf3>
 8005636:	4603      	mov	r3, r0
 8005638:	460c      	mov	r4, r1
 800563a:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
				target_point.y 		= positionCurrent.y + command.target_point.y;
 800563e:	4b1b      	ldr	r3, [pc, #108]	; (80056ac <scaraInitDuty+0xf7c>)
 8005640:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8005644:	e9d7 348e 	ldrd	r3, r4, [r7, #568]	; 0x238
 8005648:	461a      	mov	r2, r3
 800564a:	4623      	mov	r3, r4
 800564c:	f7fa fe1e 	bl	800028c <__adddf3>
 8005650:	4603      	mov	r3, r0
 8005652:	460c      	mov	r4, r1
 8005654:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
				target_point.z 		= positionCurrent.z + command.target_point.z;
 8005658:	4b14      	ldr	r3, [pc, #80]	; (80056ac <scaraInitDuty+0xf7c>)
 800565a:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800565e:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 8005662:	461a      	mov	r2, r3
 8005664:	4623      	mov	r3, r4
 8005666:	f7fa fe11 	bl	800028c <__adddf3>
 800566a:	4603      	mov	r3, r0
 800566c:	460c      	mov	r4, r1
 800566e:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
				target_point.roll	= positionCurrent.roll + command.target_point.roll;
 8005672:	4b0e      	ldr	r3, [pc, #56]	; (80056ac <scaraInitDuty+0xf7c>)
 8005674:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8005678:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 800567c:	461a      	mov	r2, r3
 800567e:	4623      	mov	r3, r4
 8005680:	f7fa fe04 	bl	800028c <__adddf3>
 8005684:	4603      	mov	r3, r0
 8005686:	460c      	mov	r4, r1
 8005688:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800568c:	e027      	b.n	80056de <scaraInitDuty+0xfae>
 800568e:	bf00      	nop
	...
 8005698:	60000000 	.word	0x60000000
 800569c:	400921fb 	.word	0x400921fb
 80056a0:	20005378 	.word	0x20005378
 80056a4:	20000c54 	.word	0x20000c54
 80056a8:	40668000 	.word	0x40668000
 80056ac:	20005e38 	.word	0x20005e38
			} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 80056b0:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d110      	bne.n	80056da <scaraInitDuty+0xfaa>
				target_point.x 		= command.target_point.x;
 80056b8:	e9d7 348c 	ldrd	r3, r4, [r7, #560]	; 0x230
 80056bc:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
				target_point.y 		= command.target_point.y;
 80056c0:	e9d7 348e 	ldrd	r3, r4, [r7, #568]	; 0x238
 80056c4:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
				target_point.z 		= command.target_point.z;
 80056c8:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 80056cc:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
				target_point.roll	= command.target_point.roll;
 80056d0:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 80056d4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 80056d8:	e001      	b.n	80056de <scaraInitDuty+0xfae>
			} else {
				return SCARA_STATUS_ERROR_COORDINATE;
 80056da:	230c      	movs	r3, #12
 80056dc:	e30c      	b.n	8005cf8 <scaraInitDuty+0x15c8>
			}

			if( FALSE == kinematicInverse(&target_point, positionCurrent)) {
 80056de:	4cce      	ldr	r4, [pc, #824]	; (8005a18 <scaraInitDuty+0x12e8>)
 80056e0:	f107 05b8 	add.w	r5, r7, #184	; 0xb8
 80056e4:	4668      	mov	r0, sp
 80056e6:	f104 0308 	add.w	r3, r4, #8
 80056ea:	22b0      	movs	r2, #176	; 0xb0
 80056ec:	4619      	mov	r1, r3
 80056ee:	f00f ffdf 	bl	80156b0 <memcpy>
 80056f2:	e894 000c 	ldmia.w	r4, {r2, r3}
 80056f6:	4628      	mov	r0, r5
 80056f8:	f7fd fd26 	bl	8003148 <kinematicInverse>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d101      	bne.n	8005706 <scaraInitDuty+0xfd6>
				return SCARA_STATUS_ERROR_OVER_WORKSPACE;// Exit with error
 8005702:	2307      	movs	r3, #7
 8005704:	e2f8      	b.n	8005cf8 <scaraInitDuty+0x15c8>
			}
			// Trajectory 4 profile
			double q[4];
			q[0] = target_point.Theta1 - positionCurrent.Theta1;
 8005706:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800570a:	4bc3      	ldr	r3, [pc, #780]	; (8005a18 <scaraInitDuty+0x12e8>)
 800570c:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 8005710:	461a      	mov	r2, r3
 8005712:	4623      	mov	r3, r4
 8005714:	f7fa fdb8 	bl	8000288 <__aeabi_dsub>
 8005718:	4603      	mov	r3, r0
 800571a:	460c      	mov	r4, r1
 800571c:	463a      	mov	r2, r7
 800571e:	e9c2 3400 	strd	r3, r4, [r2]
			q[1] = target_point.Theta2 - positionCurrent.Theta2;
 8005722:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8005726:	4bbc      	ldr	r3, [pc, #752]	; (8005a18 <scaraInitDuty+0x12e8>)
 8005728:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 800572c:	461a      	mov	r2, r3
 800572e:	4623      	mov	r3, r4
 8005730:	f7fa fdaa 	bl	8000288 <__aeabi_dsub>
 8005734:	4603      	mov	r3, r0
 8005736:	460c      	mov	r4, r1
 8005738:	463a      	mov	r2, r7
 800573a:	e9c2 3402 	strd	r3, r4, [r2, #8]
			q[2] = target_point.D3 	   - positionCurrent.D3;
 800573e:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8005742:	4bb5      	ldr	r3, [pc, #724]	; (8005a18 <scaraInitDuty+0x12e8>)
 8005744:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8005748:	461a      	mov	r2, r3
 800574a:	4623      	mov	r3, r4
 800574c:	f7fa fd9c 	bl	8000288 <__aeabi_dsub>
 8005750:	4603      	mov	r3, r0
 8005752:	460c      	mov	r4, r1
 8005754:	463a      	mov	r2, r7
 8005756:	e9c2 3404 	strd	r3, r4, [r2, #16]
			q[3] = target_point.Theta4 - positionCurrent.Theta4;
 800575a:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800575e:	4bae      	ldr	r3, [pc, #696]	; (8005a18 <scaraInitDuty+0x12e8>)
 8005760:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 8005764:	461a      	mov	r2, r3
 8005766:	4623      	mov	r3, r4
 8005768:	f7fa fd8e 	bl	8000288 <__aeabi_dsub>
 800576c:	4603      	mov	r3, r0
 800576e:	460c      	mov	r4, r1
 8005770:	463a      	mov	r2, r7
 8005772:	e9c2 3406 	strd	r3, r4, [r2, #24]

			// LSPB
			if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 8005776:	f897 31d0 	ldrb.w	r3, [r7, #464]	; 0x1d0
 800577a:	2b00      	cmp	r3, #0
 800577c:	f040 813e 	bne.w	80059fc <scaraInitDuty+0x12cc>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8005780:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 8005784:	2b01      	cmp	r3, #1
 8005786:	d159      	bne.n	800583c <scaraInitDuty+0x110c>
					for ( uint8_t i = 0; i < 4; i++) {
 8005788:	2300      	movs	r3, #0
 800578a:	f887 317b 	strb.w	r3, [r7, #379]	; 0x17b
 800578e:	e049      	b.n	8005824 <scaraInitDuty+0x10f4>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005790:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 8005794:	4aa1      	ldr	r2, [pc, #644]	; (8005a1c <scaraInitDuty+0x12ec>)
 8005796:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800579a:	fb01 f303 	mul.w	r3, r1, r3
 800579e:	4413      	add	r3, r2
 80057a0:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 80057a4:	2200      	movs	r2, #0
 80057a6:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 80057a8:	f897 217b 	ldrb.w	r2, [r7, #379]	; 0x17b
 80057ac:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 80057b0:	499a      	ldr	r1, [pc, #616]	; (8005a1c <scaraInitDuty+0x12ec>)
 80057b2:	f44f 70ac 	mov.w	r0, #344	; 0x158
 80057b6:	fb00 f202 	mul.w	r2, r0, r2
 80057ba:	440a      	add	r2, r1
 80057bc:	f502 6284 	add.w	r2, r2, #1056	; 0x420
 80057c0:	e9c2 3400 	strd	r3, r4, [r2]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 80057c4:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 80057c8:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80057cc:	fb02 f303 	mul.w	r3, r2, r3
 80057d0:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 80057d4:	4a91      	ldr	r2, [pc, #580]	; (8005a1c <scaraInitDuty+0x12ec>)
 80057d6:	1898      	adds	r0, r3, r2
 80057d8:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 80057dc:	4a90      	ldr	r2, [pc, #576]	; (8005a20 <scaraInitDuty+0x12f0>)
 80057de:	5cd1      	ldrb	r1, [r2, r3]
 80057e0:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 80057e4:	463a      	mov	r2, r7
 80057e6:	00db      	lsls	r3, r3, #3
 80057e8:	4413      	add	r3, r2
 80057ea:	ed93 7b00 	vldr	d7, [r3]
 80057ee:	ed97 6bd6 	vldr	d6, [r7, #856]	; 0x358
 80057f2:	ed97 5bd8 	vldr	d5, [r7, #864]	; 0x360
 80057f6:	eeb0 2a45 	vmov.f32	s4, s10
 80057fa:	eef0 2a65 	vmov.f32	s5, s11
 80057fe:	eeb0 1a46 	vmov.f32	s2, s12
 8005802:	eef0 1a66 	vmov.f32	s3, s13
 8005806:	2201      	movs	r2, #1
 8005808:	eeb0 0a47 	vmov.f32	s0, s14
 800580c:	eef0 0a67 	vmov.f32	s1, s15
 8005810:	f000 fcc2 	bl	8006198 <scaraInitLSPB>
 8005814:	4603      	mov	r3, r0
 8005816:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
					for ( uint8_t i = 0; i < 4; i++) {
 800581a:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 800581e:	3301      	adds	r3, #1
 8005820:	f887 317b 	strb.w	r3, [r7, #379]	; 0x17b
 8005824:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 8005828:	2b03      	cmp	r3, #3
 800582a:	d9b1      	bls.n	8005790 <scaraInitDuty+0x1060>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

					}
					myDUTY.time_total = command.time_total;
 800582c:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8005830:	4a7a      	ldr	r2, [pc, #488]	; (8005a1c <scaraInitDuty+0x12ec>)
 8005832:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8005836:	e9c2 3400 	strd	r3, r4, [r2]
 800583a:	e22f      	b.n	8005c9c <scaraInitDuty+0x156c>
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 800583c:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 8005840:	2b00      	cmp	r3, #0
 8005842:	f040 80d9 	bne.w	80059f8 <scaraInitDuty+0x12c8>
					for ( uint8_t i = 0; i < 4; i++) {
 8005846:	2300      	movs	r3, #0
 8005848:	f887 317a 	strb.w	r3, [r7, #378]	; 0x17a
 800584c:	e03b      	b.n	80058c6 <scaraInitDuty+0x1196>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 800584e:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 8005852:	4a72      	ldr	r2, [pc, #456]	; (8005a1c <scaraInitDuty+0x12ec>)
 8005854:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005858:	fb01 f303 	mul.w	r3, r1, r3
 800585c:	4413      	add	r3, r2
 800585e:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005862:	2200      	movs	r2, #0
 8005864:	701a      	strb	r2, [r3, #0]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8005866:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 800586a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800586e:	fb02 f303 	mul.w	r3, r2, r3
 8005872:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8005876:	4a69      	ldr	r2, [pc, #420]	; (8005a1c <scaraInitDuty+0x12ec>)
 8005878:	1898      	adds	r0, r3, r2
 800587a:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 800587e:	4a68      	ldr	r2, [pc, #416]	; (8005a20 <scaraInitDuty+0x12f0>)
 8005880:	5cd1      	ldrb	r1, [r2, r3]
 8005882:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 8005886:	463a      	mov	r2, r7
 8005888:	00db      	lsls	r3, r3, #3
 800588a:	4413      	add	r3, r2
 800588c:	ed93 7b00 	vldr	d7, [r3]
 8005890:	ed97 6bd6 	vldr	d6, [r7, #856]	; 0x358
 8005894:	ed97 5bd8 	vldr	d5, [r7, #864]	; 0x360
 8005898:	eeb0 2a45 	vmov.f32	s4, s10
 800589c:	eef0 2a65 	vmov.f32	s5, s11
 80058a0:	eeb0 1a46 	vmov.f32	s2, s12
 80058a4:	eef0 1a66 	vmov.f32	s3, s13
 80058a8:	2200      	movs	r2, #0
 80058aa:	eeb0 0a47 	vmov.f32	s0, s14
 80058ae:	eef0 0a67 	vmov.f32	s1, s15
 80058b2:	f000 fc71 	bl	8006198 <scaraInitLSPB>
 80058b6:	4603      	mov	r3, r0
 80058b8:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
					for ( uint8_t i = 0; i < 4; i++) {
 80058bc:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 80058c0:	3301      	adds	r3, #1
 80058c2:	f887 317a 	strb.w	r3, [r7, #378]	; 0x17a
 80058c6:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 80058ca:	2b03      	cmp	r3, #3
 80058cc:	d9bf      	bls.n	800584e <scaraInitDuty+0x111e>
											q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
					}
					myDUTY.time_total = 0;
 80058ce:	4b53      	ldr	r3, [pc, #332]	; (8005a1c <scaraInitDuty+0x12ec>)
 80058d0:	f603 1248 	addw	r2, r3, #2376	; 0x948
 80058d4:	f04f 0300 	mov.w	r3, #0
 80058d8:	f04f 0400 	mov.w	r4, #0
 80058dc:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 80058e0:	2300      	movs	r3, #0
 80058e2:	f887 3179 	strb.w	r3, [r7, #377]	; 0x179
 80058e6:	e02d      	b.n	8005944 <scaraInitDuty+0x1214>
						if ( myDUTY.joint.trajectory[i].lspb.Tf > myDUTY.time_total) {
 80058e8:	f897 3179 	ldrb.w	r3, [r7, #377]	; 0x179
 80058ec:	4a4b      	ldr	r2, [pc, #300]	; (8005a1c <scaraInitDuty+0x12ec>)
 80058ee:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80058f2:	fb01 f303 	mul.w	r3, r1, r3
 80058f6:	4413      	add	r3, r2
 80058f8:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80058fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005900:	4b46      	ldr	r3, [pc, #280]	; (8005a1c <scaraInitDuty+0x12ec>)
 8005902:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8005906:	e9d3 3400 	ldrd	r3, r4, [r3]
 800590a:	461a      	mov	r2, r3
 800590c:	4623      	mov	r3, r4
 800590e:	f7fb f903 	bl	8000b18 <__aeabi_dcmpgt>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d010      	beq.n	800593a <scaraInitDuty+0x120a>
							myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 8005918:	f897 3179 	ldrb.w	r3, [r7, #377]	; 0x179
 800591c:	4a3f      	ldr	r2, [pc, #252]	; (8005a1c <scaraInitDuty+0x12ec>)
 800591e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005922:	fb01 f303 	mul.w	r3, r1, r3
 8005926:	4413      	add	r3, r2
 8005928:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 800592c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005930:	4a3a      	ldr	r2, [pc, #232]	; (8005a1c <scaraInitDuty+0x12ec>)
 8005932:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8005936:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 800593a:	f897 3179 	ldrb.w	r3, [r7, #377]	; 0x179
 800593e:	3301      	adds	r3, #1
 8005940:	f887 3179 	strb.w	r3, [r7, #377]	; 0x179
 8005944:	f897 3179 	ldrb.w	r3, [r7, #377]	; 0x179
 8005948:	2b03      	cmp	r3, #3
 800594a:	d9cd      	bls.n	80058e8 <scaraInitDuty+0x11b8>
						}
					}
					for ( uint8_t i = 0; i < 4; i++) {
 800594c:	2300      	movs	r3, #0
 800594e:	f887 3178 	strb.w	r3, [r7, #376]	; 0x178
 8005952:	e04c      	b.n	80059ee <scaraInitDuty+0x12be>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005954:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8005958:	4a30      	ldr	r2, [pc, #192]	; (8005a1c <scaraInitDuty+0x12ec>)
 800595a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800595e:	fb01 f303 	mul.w	r3, r1, r3
 8005962:	4413      	add	r3, r2
 8005964:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005968:	2200      	movs	r2, #0
 800596a:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].lspb.Tf = myDUTY.time_total;
 800596c:	f897 2178 	ldrb.w	r2, [r7, #376]	; 0x178
 8005970:	4b2a      	ldr	r3, [pc, #168]	; (8005a1c <scaraInitDuty+0x12ec>)
 8005972:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8005976:	e9d3 3400 	ldrd	r3, r4, [r3]
 800597a:	4928      	ldr	r1, [pc, #160]	; (8005a1c <scaraInitDuty+0x12ec>)
 800597c:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8005980:	fb00 f202 	mul.w	r2, r0, r2
 8005984:	440a      	add	r2, r1
 8005986:	f502 6284 	add.w	r2, r2, #1056	; 0x420
 800598a:	e9c2 3400 	strd	r3, r4, [r2]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 800598e:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8005992:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005996:	fb02 f303 	mul.w	r3, r2, r3
 800599a:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 800599e:	4a1f      	ldr	r2, [pc, #124]	; (8005a1c <scaraInitDuty+0x12ec>)
 80059a0:	1898      	adds	r0, r3, r2
 80059a2:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 80059a6:	4a1e      	ldr	r2, [pc, #120]	; (8005a20 <scaraInitDuty+0x12f0>)
 80059a8:	5cd1      	ldrb	r1, [r2, r3]
 80059aa:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 80059ae:	463a      	mov	r2, r7
 80059b0:	00db      	lsls	r3, r3, #3
 80059b2:	4413      	add	r3, r2
 80059b4:	ed93 7b00 	vldr	d7, [r3]
 80059b8:	ed97 6bd6 	vldr	d6, [r7, #856]	; 0x358
 80059bc:	ed97 5bd8 	vldr	d5, [r7, #864]	; 0x360
 80059c0:	eeb0 2a45 	vmov.f32	s4, s10
 80059c4:	eef0 2a65 	vmov.f32	s5, s11
 80059c8:	eeb0 1a46 	vmov.f32	s2, s12
 80059cc:	eef0 1a66 	vmov.f32	s3, s13
 80059d0:	2201      	movs	r2, #1
 80059d2:	eeb0 0a47 	vmov.f32	s0, s14
 80059d6:	eef0 0a67 	vmov.f32	s1, s15
 80059da:	f000 fbdd 	bl	8006198 <scaraInitLSPB>
 80059de:	4603      	mov	r3, r0
 80059e0:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
					for ( uint8_t i = 0; i < 4; i++) {
 80059e4:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 80059e8:	3301      	adds	r3, #1
 80059ea:	f887 3178 	strb.w	r3, [r7, #376]	; 0x178
 80059ee:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 80059f2:	2b03      	cmp	r3, #3
 80059f4:	d9ae      	bls.n	8005954 <scaraInitDuty+0x1224>
 80059f6:	e151      	b.n	8005c9c <scaraInitDuty+0x156c>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					}

				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 80059f8:	2308      	movs	r3, #8
 80059fa:	e17d      	b.n	8005cf8 <scaraInitDuty+0x15c8>
				}
				// SCURVE
			} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 80059fc:	f897 31d0 	ldrb.w	r3, [r7, #464]	; 0x1d0
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	f040 8145 	bne.w	8005c90 <scaraInitDuty+0x1560>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8005a06:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d160      	bne.n	8005ad0 <scaraInitDuty+0x13a0>
					for ( uint8_t i = 0; i < 4; i++) {
 8005a0e:	2300      	movs	r3, #0
 8005a10:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
 8005a14:	e050      	b.n	8005ab8 <scaraInitDuty+0x1388>
 8005a16:	bf00      	nop
 8005a18:	20005e38 	.word	0x20005e38
 8005a1c:	20005378 	.word	0x20005378
 8005a20:	20000c54 	.word	0x20000c54
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005a24:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8005a28:	4ab7      	ldr	r2, [pc, #732]	; (8005d08 <scaraInitDuty+0x15d8>)
 8005a2a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005a2e:	fb01 f303 	mul.w	r3, r1, r3
 8005a32:	4413      	add	r3, r2
 8005a34:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005a38:	2201      	movs	r2, #1
 8005a3a:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 8005a3c:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 8005a40:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8005a44:	49b0      	ldr	r1, [pc, #704]	; (8005d08 <scaraInitDuty+0x15d8>)
 8005a46:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8005a4a:	fb00 f202 	mul.w	r2, r0, r2
 8005a4e:	440a      	add	r2, r1
 8005a50:	f502 6296 	add.w	r2, r2, #1200	; 0x4b0
 8005a54:	e9c2 3400 	strd	r3, r4, [r2]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8005a58:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8005a5c:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005a60:	fb02 f303 	mul.w	r3, r2, r3
 8005a64:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8005a68:	4aa7      	ldr	r2, [pc, #668]	; (8005d08 <scaraInitDuty+0x15d8>)
 8005a6a:	1898      	adds	r0, r3, r2
 8005a6c:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8005a70:	4aa6      	ldr	r2, [pc, #664]	; (8005d0c <scaraInitDuty+0x15dc>)
 8005a72:	5cd1      	ldrb	r1, [r2, r3]
 8005a74:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8005a78:	463a      	mov	r2, r7
 8005a7a:	00db      	lsls	r3, r3, #3
 8005a7c:	4413      	add	r3, r2
 8005a7e:	ed93 7b00 	vldr	d7, [r3]
 8005a82:	ed97 6bd6 	vldr	d6, [r7, #856]	; 0x358
 8005a86:	ed97 5bd8 	vldr	d5, [r7, #864]	; 0x360
 8005a8a:	eeb0 2a45 	vmov.f32	s4, s10
 8005a8e:	eef0 2a65 	vmov.f32	s5, s11
 8005a92:	eeb0 1a46 	vmov.f32	s2, s12
 8005a96:	eef0 1a66 	vmov.f32	s3, s13
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	eeb0 0a47 	vmov.f32	s0, s14
 8005aa0:	eef0 0a67 	vmov.f32	s1, s15
 8005aa4:	f000 ff64 	bl	8006970 <scaraInitScurve>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
					for ( uint8_t i = 0; i < 4; i++) {
 8005aae:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
 8005ab8:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8005abc:	2b03      	cmp	r3, #3
 8005abe:	d9b1      	bls.n	8005a24 <scaraInitDuty+0x12f4>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

					}
					myDUTY.time_total = command.time_total;
 8005ac0:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8005ac4:	4a90      	ldr	r2, [pc, #576]	; (8005d08 <scaraInitDuty+0x15d8>)
 8005ac6:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8005aca:	e9c2 3400 	strd	r3, r4, [r2]
 8005ace:	e0e5      	b.n	8005c9c <scaraInitDuty+0x156c>
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8005ad0:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	f040 80d9 	bne.w	8005c8c <scaraInitDuty+0x155c>
					for ( uint8_t i = 0; i < 4; i++) {
 8005ada:	2300      	movs	r3, #0
 8005adc:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
 8005ae0:	e03b      	b.n	8005b5a <scaraInitDuty+0x142a>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005ae2:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8005ae6:	4a88      	ldr	r2, [pc, #544]	; (8005d08 <scaraInitDuty+0x15d8>)
 8005ae8:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005aec:	fb01 f303 	mul.w	r3, r1, r3
 8005af0:	4413      	add	r3, r2
 8005af2:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005af6:	2201      	movs	r2, #1
 8005af8:	701a      	strb	r2, [r3, #0]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8005afa:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8005afe:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005b02:	fb02 f303 	mul.w	r3, r2, r3
 8005b06:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8005b0a:	4a7f      	ldr	r2, [pc, #508]	; (8005d08 <scaraInitDuty+0x15d8>)
 8005b0c:	1898      	adds	r0, r3, r2
 8005b0e:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8005b12:	4a7e      	ldr	r2, [pc, #504]	; (8005d0c <scaraInitDuty+0x15dc>)
 8005b14:	5cd1      	ldrb	r1, [r2, r3]
 8005b16:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8005b1a:	463a      	mov	r2, r7
 8005b1c:	00db      	lsls	r3, r3, #3
 8005b1e:	4413      	add	r3, r2
 8005b20:	ed93 7b00 	vldr	d7, [r3]
 8005b24:	ed97 6bd6 	vldr	d6, [r7, #856]	; 0x358
 8005b28:	ed97 5bd8 	vldr	d5, [r7, #864]	; 0x360
 8005b2c:	eeb0 2a45 	vmov.f32	s4, s10
 8005b30:	eef0 2a65 	vmov.f32	s5, s11
 8005b34:	eeb0 1a46 	vmov.f32	s2, s12
 8005b38:	eef0 1a66 	vmov.f32	s3, s13
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	eeb0 0a47 	vmov.f32	s0, s14
 8005b42:	eef0 0a67 	vmov.f32	s1, s15
 8005b46:	f000 ff13 	bl	8006970 <scaraInitScurve>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
					for ( uint8_t i = 0; i < 4; i++) {
 8005b50:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8005b54:	3301      	adds	r3, #1
 8005b56:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
 8005b5a:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8005b5e:	2b03      	cmp	r3, #3
 8005b60:	d9bf      	bls.n	8005ae2 <scaraInitDuty+0x13b2>
											q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
					}
					myDUTY.time_total = 0;
 8005b62:	4b69      	ldr	r3, [pc, #420]	; (8005d08 <scaraInitDuty+0x15d8>)
 8005b64:	f603 1248 	addw	r2, r3, #2376	; 0x948
 8005b68:	f04f 0300 	mov.w	r3, #0
 8005b6c:	f04f 0400 	mov.w	r4, #0
 8005b70:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 8005b74:	2300      	movs	r3, #0
 8005b76:	f887 3175 	strb.w	r3, [r7, #373]	; 0x175
 8005b7a:	e02d      	b.n	8005bd8 <scaraInitDuty+0x14a8>
						if ( myDUTY.joint.trajectory[i].scurve.Tf > myDUTY.time_total) {
 8005b7c:	f897 3175 	ldrb.w	r3, [r7, #373]	; 0x175
 8005b80:	4a61      	ldr	r2, [pc, #388]	; (8005d08 <scaraInitDuty+0x15d8>)
 8005b82:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005b86:	fb01 f303 	mul.w	r3, r1, r3
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8005b90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005b94:	4b5c      	ldr	r3, [pc, #368]	; (8005d08 <scaraInitDuty+0x15d8>)
 8005b96:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8005b9a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	4623      	mov	r3, r4
 8005ba2:	f7fa ffb9 	bl	8000b18 <__aeabi_dcmpgt>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d010      	beq.n	8005bce <scaraInitDuty+0x149e>
							myDUTY.time_total = myDUTY.joint.trajectory[i].scurve.Tf;
 8005bac:	f897 3175 	ldrb.w	r3, [r7, #373]	; 0x175
 8005bb0:	4a55      	ldr	r2, [pc, #340]	; (8005d08 <scaraInitDuty+0x15d8>)
 8005bb2:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005bb6:	fb01 f303 	mul.w	r3, r1, r3
 8005bba:	4413      	add	r3, r2
 8005bbc:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8005bc0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005bc4:	4a50      	ldr	r2, [pc, #320]	; (8005d08 <scaraInitDuty+0x15d8>)
 8005bc6:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8005bca:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 8005bce:	f897 3175 	ldrb.w	r3, [r7, #373]	; 0x175
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	f887 3175 	strb.w	r3, [r7, #373]	; 0x175
 8005bd8:	f897 3175 	ldrb.w	r3, [r7, #373]	; 0x175
 8005bdc:	2b03      	cmp	r3, #3
 8005bde:	d9cd      	bls.n	8005b7c <scaraInitDuty+0x144c>
						}
					}
					for ( uint8_t i = 0; i < 4; i++) {
 8005be0:	2300      	movs	r3, #0
 8005be2:	f887 3174 	strb.w	r3, [r7, #372]	; 0x174
 8005be6:	e04c      	b.n	8005c82 <scaraInitDuty+0x1552>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005be8:	f897 3174 	ldrb.w	r3, [r7, #372]	; 0x174
 8005bec:	4a46      	ldr	r2, [pc, #280]	; (8005d08 <scaraInitDuty+0x15d8>)
 8005bee:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005bf2:	fb01 f303 	mul.w	r3, r1, r3
 8005bf6:	4413      	add	r3, r2
 8005bf8:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].scurve.Tf = myDUTY.time_total;
 8005c00:	f897 2174 	ldrb.w	r2, [r7, #372]	; 0x174
 8005c04:	4b40      	ldr	r3, [pc, #256]	; (8005d08 <scaraInitDuty+0x15d8>)
 8005c06:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8005c0a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005c0e:	493e      	ldr	r1, [pc, #248]	; (8005d08 <scaraInitDuty+0x15d8>)
 8005c10:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8005c14:	fb00 f202 	mul.w	r2, r0, r2
 8005c18:	440a      	add	r2, r1
 8005c1a:	f502 6296 	add.w	r2, r2, #1200	; 0x4b0
 8005c1e:	e9c2 3400 	strd	r3, r4, [r2]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8005c22:	f897 3174 	ldrb.w	r3, [r7, #372]	; 0x174
 8005c26:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005c2a:	fb02 f303 	mul.w	r3, r2, r3
 8005c2e:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8005c32:	4a35      	ldr	r2, [pc, #212]	; (8005d08 <scaraInitDuty+0x15d8>)
 8005c34:	1898      	adds	r0, r3, r2
 8005c36:	f897 3174 	ldrb.w	r3, [r7, #372]	; 0x174
 8005c3a:	4a34      	ldr	r2, [pc, #208]	; (8005d0c <scaraInitDuty+0x15dc>)
 8005c3c:	5cd1      	ldrb	r1, [r2, r3]
 8005c3e:	f897 3174 	ldrb.w	r3, [r7, #372]	; 0x174
 8005c42:	463a      	mov	r2, r7
 8005c44:	00db      	lsls	r3, r3, #3
 8005c46:	4413      	add	r3, r2
 8005c48:	ed93 7b00 	vldr	d7, [r3]
 8005c4c:	ed97 6bd6 	vldr	d6, [r7, #856]	; 0x358
 8005c50:	ed97 5bd8 	vldr	d5, [r7, #864]	; 0x360
 8005c54:	eeb0 2a45 	vmov.f32	s4, s10
 8005c58:	eef0 2a65 	vmov.f32	s5, s11
 8005c5c:	eeb0 1a46 	vmov.f32	s2, s12
 8005c60:	eef0 1a66 	vmov.f32	s3, s13
 8005c64:	2201      	movs	r2, #1
 8005c66:	eeb0 0a47 	vmov.f32	s0, s14
 8005c6a:	eef0 0a67 	vmov.f32	s1, s15
 8005c6e:	f000 fe7f 	bl	8006970 <scaraInitScurve>
 8005c72:	4603      	mov	r3, r0
 8005c74:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
					for ( uint8_t i = 0; i < 4; i++) {
 8005c78:	f897 3174 	ldrb.w	r3, [r7, #372]	; 0x174
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	f887 3174 	strb.w	r3, [r7, #372]	; 0x174
 8005c82:	f897 3174 	ldrb.w	r3, [r7, #372]	; 0x174
 8005c86:	2b03      	cmp	r3, #3
 8005c88:	d9ae      	bls.n	8005be8 <scaraInitDuty+0x14b8>
 8005c8a:	e007      	b.n	8005c9c <scaraInitDuty+0x156c>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					}

				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 8005c8c:	2308      	movs	r3, #8
 8005c8e:	e033      	b.n	8005cf8 <scaraInitDuty+0x15c8>
				}

			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 8005c90:	2305      	movs	r3, #5
 8005c92:	e031      	b.n	8005cf8 <scaraInitDuty+0x15c8>
			}

		} else {
			return SCARA_STATUS_ERROR_JOINT;
 8005c94:	2304      	movs	r3, #4
 8005c96:	e02f      	b.n	8005cf8 <scaraInitDuty+0x15c8>
		}

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 8005c98:	2302      	movs	r3, #2
 8005c9a:	e02d      	b.n	8005cf8 <scaraInitDuty+0x15c8>
	}

	// Reset time and distance
	positionCurrent.t = 0;
 8005c9c:	4a1c      	ldr	r2, [pc, #112]	; (8005d10 <scaraInitDuty+0x15e0>)
 8005c9e:	f04f 0300 	mov.w	r3, #0
 8005ca2:	f04f 0400 	mov.w	r4, #0
 8005ca6:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	positionCurrent.total_time = myDUTY.time_total;
 8005caa:	4b17      	ldr	r3, [pc, #92]	; (8005d08 <scaraInitDuty+0x15d8>)
 8005cac:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8005cb0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005cb4:	4a16      	ldr	r2, [pc, #88]	; (8005d10 <scaraInitDuty+0x15e0>)
 8005cb6:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	positionNext.t = 0;
 8005cba:	4a16      	ldr	r2, [pc, #88]	; (8005d14 <scaraInitDuty+0x15e4>)
 8005cbc:	f04f 0300 	mov.w	r3, #0
 8005cc0:	f04f 0400 	mov.w	r4, #0
 8005cc4:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	positionNext.total_time = myDUTY.time_total;
 8005cc8:	4b0f      	ldr	r3, [pc, #60]	; (8005d08 <scaraInitDuty+0x15d8>)
 8005cca:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8005cce:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005cd2:	4a10      	ldr	r2, [pc, #64]	; (8005d14 <scaraInitDuty+0x15e4>)
 8005cd4:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	positionTrue.t = 0;
 8005cd8:	4a0f      	ldr	r2, [pc, #60]	; (8005d18 <scaraInitDuty+0x15e8>)
 8005cda:	f04f 0300 	mov.w	r3, #0
 8005cde:	f04f 0400 	mov.w	r4, #0
 8005ce2:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	positionTrue.total_time = myDUTY.time_total;
 8005ce6:	4b08      	ldr	r3, [pc, #32]	; (8005d08 <scaraInitDuty+0x15d8>)
 8005ce8:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8005cec:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005cf0:	4a09      	ldr	r2, [pc, #36]	; (8005d18 <scaraInitDuty+0x15e8>)
 8005cf2:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

	return SCARA_STATUS_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f507 77d8 	add.w	r7, r7, #432	; 0x1b0
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8005d04:	b004      	add	sp, #16
 8005d06:	4770      	bx	lr
 8005d08:	20005378 	.word	0x20005378
 8005d0c:	20000c54 	.word	0x20000c54
 8005d10:	20005e38 	.word	0x20005e38
 8005d14:	20005fa8 	.word	0x20005fa8
 8005d18:	20005ef0 	.word	0x20005ef0

08005d1c <scaraInitLine>:

/* Compute straight line path parameters */
SCARA_StatusTypeDef	scaraInitLine		(Path_Line_TypeDef *line,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end) {
 8005d1c:	b082      	sub	sp, #8
 8005d1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d20:	b0af      	sub	sp, #188	; 0xbc
 8005d22:	af2c      	add	r7, sp, #176	; 0xb0
 8005d24:	6078      	str	r0, [r7, #4]
 8005d26:	f107 0120 	add.w	r1, r7, #32
 8005d2a:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE ==  kinematicInverse(&end, start)) {
 8005d2e:	f107 04d8 	add.w	r4, r7, #216	; 0xd8
 8005d32:	4668      	mov	r0, sp
 8005d34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d38:	22b0      	movs	r2, #176	; 0xb0
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	f00f fcb8 	bl	80156b0 <memcpy>
 8005d40:	f107 0320 	add.w	r3, r7, #32
 8005d44:	cb0c      	ldmia	r3, {r2, r3}
 8005d46:	4620      	mov	r0, r4
 8005d48:	f7fd f9fe 	bl	8003148 <kinematicInverse>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d101      	bne.n	8005d56 <scaraInitLine+0x3a>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005d52:	2307      	movs	r3, #7
 8005d54:	e09e      	b.n	8005e94 <scaraInitLine+0x178>
	}
	// Init line params
	line->x1 = end.x;
 8005d56:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	e9c2 3402 	strd	r3, r4, [r2, #8]
	line->y1 = end.y;
 8005d60:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	e9c2 3406 	strd	r3, r4, [r2, #24]
	line->z1 = end.z;
 8005d6a:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	line->x0 = start.x;
 8005d74:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	e9c2 3400 	strd	r3, r4, [r2]
	line->y0 = start.y;
 8005d7e:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	e9c2 3404 	strd	r3, r4, [r2, #16]
	line->z0 = start.z;
 8005d88:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	e9c2 3408 	strd	r3, r4, [r2, #32]
	line->denta_x = end.x  -  start.x;
 8005d92:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8005d96:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	4623      	mov	r3, r4
 8005d9e:	f7fa fa73 	bl	8000288 <__aeabi_dsub>
 8005da2:	4603      	mov	r3, r0
 8005da4:	460c      	mov	r4, r1
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	line->denta_y = end.y  -  start.y;
 8005dac:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8005db0:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8005db4:	461a      	mov	r2, r3
 8005db6:	4623      	mov	r3, r4
 8005db8:	f7fa fa66 	bl	8000288 <__aeabi_dsub>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	460c      	mov	r4, r1
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	line->denta_z = end.z  -  start.z;
 8005dc6:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8005dca:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8005dce:	461a      	mov	r2, r3
 8005dd0:	4623      	mov	r3, r4
 8005dd2:	f7fa fa59 	bl	8000288 <__aeabi_dsub>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	460c      	mov	r4, r1
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8005dec:	461a      	mov	r2, r3
 8005dee:	4623      	mov	r3, r4
 8005df0:	f7fa fc02 	bl	80005f8 <__aeabi_dmul>
 8005df4:	4603      	mov	r3, r0
 8005df6:	460c      	mov	r4, r1
 8005df8:	461d      	mov	r5, r3
 8005dfa:	4626      	mov	r6, r4
			       +(line->denta_y)*(line->denta_y)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8005e08:	461a      	mov	r2, r3
 8005e0a:	4623      	mov	r3, r4
 8005e0c:	f7fa fbf4 	bl	80005f8 <__aeabi_dmul>
 8005e10:	4603      	mov	r3, r0
 8005e12:	460c      	mov	r4, r1
 8005e14:	461a      	mov	r2, r3
 8005e16:	4623      	mov	r3, r4
 8005e18:	4628      	mov	r0, r5
 8005e1a:	4631      	mov	r1, r6
 8005e1c:	f7fa fa36 	bl	800028c <__adddf3>
 8005e20:	4603      	mov	r3, r0
 8005e22:	460c      	mov	r4, r1
 8005e24:	461d      	mov	r5, r3
 8005e26:	4626      	mov	r6, r4
				   +(line->denta_z)*(line->denta_z));
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
 8005e34:	461a      	mov	r2, r3
 8005e36:	4623      	mov	r3, r4
 8005e38:	f7fa fbde 	bl	80005f8 <__aeabi_dmul>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	460c      	mov	r4, r1
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 8005e40:	461a      	mov	r2, r3
 8005e42:	4623      	mov	r3, r4
 8005e44:	4628      	mov	r0, r5
 8005e46:	4631      	mov	r1, r6
 8005e48:	f7fa fa20 	bl	800028c <__adddf3>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	460c      	mov	r4, r1
 8005e50:	ec44 3b17 	vmov	d7, r3, r4
 8005e54:	eeb0 0a47 	vmov.f32	s0, s14
 8005e58:	eef0 0a67 	vmov.f32	s1, s15
 8005e5c:	f013 fb3e 	bl	80194dc <sqrt>
 8005e60:	eeb0 7a40 	vmov.f32	s14, s0
 8005e64:	eef0 7a60 	vmov.f32	s15, s1
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	line->x_current = line->x0;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	line->y_current = line->y0;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	line->z_current = line->z0;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	return SCARA_STATUS_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8005e9e:	b002      	add	sp, #8
 8005ea0:	4770      	bx	lr
 8005ea2:	0000      	movs	r0, r0
 8005ea4:	0000      	movs	r0, r0
	...

08005ea8 <scaraInitCircle>:
/* Compute circular path parameters */
SCARA_StatusTypeDef	scaraInitCircle		(Path_Circle_TypeDef *circle,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end,
										SCARA_PositionTypeDef center,
										int32_t dir){
 8005ea8:	b082      	sub	sp, #8
 8005eaa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005eae:	b0c1      	sub	sp, #260	; 0x104
 8005eb0:	af2c      	add	r7, sp, #176	; 0xb0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8005eb8:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE == kinematicInverse(&end, start) ) {
 8005ebc:	f507 7694 	add.w	r6, r7, #296	; 0x128
 8005ec0:	4668      	mov	r0, sp
 8005ec2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005ec6:	22b0      	movs	r2, #176	; 0xb0
 8005ec8:	4619      	mov	r1, r3
 8005eca:	f00f fbf1 	bl	80156b0 <memcpy>
 8005ece:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005ed2:	cb0c      	ldmia	r3, {r2, r3}
 8005ed4:	4630      	mov	r0, r6
 8005ed6:	f7fd f937 	bl	8003148 <kinematicInverse>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d101      	bne.n	8005ee4 <scaraInitCircle+0x3c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005ee0:	2307      	movs	r3, #7
 8005ee2:	e146      	b.n	8006172 <scaraInitCircle+0x2ca>
	}

	if( 1 != dir && -1 != dir) {
 8005ee4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d006      	beq.n	8005efa <scaraInitCircle+0x52>
 8005eec:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8005ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ef4:	d001      	beq.n	8005efa <scaraInitCircle+0x52>
		return SCARA_STATUS_ERROR_PARA;// error direction param !!!
 8005ef6:	2306      	movs	r3, #6
 8005ef8:	e13b      	b.n	8006172 <scaraInitCircle+0x2ca>
	}

	double v_x_start, v_y_start, v_x_stop, v_y_stop;
	double r1, r2, angle_start, angle_stop, delta_angle;
	v_x_start = start.x - center.x;
 8005efa:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8005efe:	e9d7 238a 	ldrd	r2, r3, [r7, #552]	; 0x228
 8005f02:	f7fa f9c1 	bl	8000288 <__aeabi_dsub>
 8005f06:	4602      	mov	r2, r0
 8005f08:	460b      	mov	r3, r1
 8005f0a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	v_y_start = start.y - center.y;
 8005f0e:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8005f12:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 8005f16:	f7fa f9b7 	bl	8000288 <__aeabi_dsub>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	v_x_stop  = end.x  - center.x;
 8005f22:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8005f26:	e9d7 238a 	ldrd	r2, r3, [r7, #552]	; 0x228
 8005f2a:	f7fa f9ad 	bl	8000288 <__aeabi_dsub>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	460b      	mov	r3, r1
 8005f32:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	v_y_stop  = end.y  - center.y;
 8005f36:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8005f3a:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 8005f3e:	f7fa f9a3 	bl	8000288 <__aeabi_dsub>
 8005f42:	4602      	mov	r2, r0
 8005f44:	460b      	mov	r3, r1
 8005f46:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	r1 = sqrt(v_x_start*v_x_start + v_y_start*v_y_start);
 8005f4a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005f4e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005f52:	f7fa fb51 	bl	80005f8 <__aeabi_dmul>
 8005f56:	4602      	mov	r2, r0
 8005f58:	460b      	mov	r3, r1
 8005f5a:	4690      	mov	r8, r2
 8005f5c:	4699      	mov	r9, r3
 8005f5e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005f62:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005f66:	f7fa fb47 	bl	80005f8 <__aeabi_dmul>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	4640      	mov	r0, r8
 8005f70:	4649      	mov	r1, r9
 8005f72:	f7fa f98b 	bl	800028c <__adddf3>
 8005f76:	4602      	mov	r2, r0
 8005f78:	460b      	mov	r3, r1
 8005f7a:	ec43 2b17 	vmov	d7, r2, r3
 8005f7e:	eeb0 0a47 	vmov.f32	s0, s14
 8005f82:	eef0 0a67 	vmov.f32	s1, s15
 8005f86:	f013 faa9 	bl	80194dc <sqrt>
 8005f8a:	ed87 0b08 	vstr	d0, [r7, #32]
	r2 = sqrt(v_x_stop*v_x_stop + v_y_stop*v_y_stop);
 8005f8e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005f92:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005f96:	f7fa fb2f 	bl	80005f8 <__aeabi_dmul>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	4690      	mov	r8, r2
 8005fa0:	4699      	mov	r9, r3
 8005fa2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005fa6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005faa:	f7fa fb25 	bl	80005f8 <__aeabi_dmul>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	4640      	mov	r0, r8
 8005fb4:	4649      	mov	r1, r9
 8005fb6:	f7fa f969 	bl	800028c <__adddf3>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	ec43 2b17 	vmov	d7, r2, r3
 8005fc2:	eeb0 0a47 	vmov.f32	s0, s14
 8005fc6:	eef0 0a67 	vmov.f32	s1, s15
 8005fca:	f013 fa87 	bl	80194dc <sqrt>
 8005fce:	ed87 0b06 	vstr	d0, [r7, #24]

	if( 1.0 < fabs(r1 - r2)) {
 8005fd2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fd6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005fda:	f7fa f955 	bl	8000288 <__aeabi_dsub>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	4614      	mov	r4, r2
 8005fe4:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8005fe8:	f04f 0200 	mov.w	r2, #0
 8005fec:	4b68      	ldr	r3, [pc, #416]	; (8006190 <scaraInitCircle+0x2e8>)
 8005fee:	4620      	mov	r0, r4
 8005ff0:	4629      	mov	r1, r5
 8005ff2:	f7fa fd91 	bl	8000b18 <__aeabi_dcmpgt>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d001      	beq.n	8006000 <scaraInitCircle+0x158>
		return SCARA_STATUS_ERROR_PARA; //start & stop are not in a circle together !!
 8005ffc:	2306      	movs	r3, #6
 8005ffe:	e0b8      	b.n	8006172 <scaraInitCircle+0x2ca>
	}

	if (r1 < 0.1 || r2 < 0.1) {
 8006000:	a35f      	add	r3, pc, #380	; (adr r3, 8006180 <scaraInitCircle+0x2d8>)
 8006002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006006:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800600a:	f7fa fd67 	bl	8000adc <__aeabi_dcmplt>
 800600e:	4603      	mov	r3, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d109      	bne.n	8006028 <scaraInitCircle+0x180>
 8006014:	a35a      	add	r3, pc, #360	; (adr r3, 8006180 <scaraInitCircle+0x2d8>)
 8006016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800601a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800601e:	f7fa fd5d 	bl	8000adc <__aeabi_dcmplt>
 8006022:	4603      	mov	r3, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d001      	beq.n	800602c <scaraInitCircle+0x184>
		return SCARA_STATUS_ERROR_PARA; //start and center almost in the same phace, radius = 0 !!
 8006028:	2306      	movs	r3, #6
 800602a:	e0a2      	b.n	8006172 <scaraInitCircle+0x2ca>
	}

	angle_start = atan2(v_y_start, v_x_start);
 800602c:	ed97 1b10 	vldr	d1, [r7, #64]	; 0x40
 8006030:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8006034:	f013 fa50 	bl	80194d8 <atan2>
 8006038:	ed87 0b04 	vstr	d0, [r7, #16]
	angle_stop  = atan2(v_y_stop, v_x_stop);
 800603c:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 8006040:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8006044:	f013 fa48 	bl	80194d8 <atan2>
 8006048:	ed87 0b02 	vstr	d0, [r7, #8]
	delta_angle = angle_stop - angle_start;
 800604c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006050:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006054:	f7fa f918 	bl	8000288 <__aeabi_dsub>
 8006058:	4603      	mov	r3, r0
 800605a:	460c      	mov	r4, r1
 800605c:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

	if ( 0 > delta_angle) {
 8006060:	f04f 0200 	mov.w	r2, #0
 8006064:	f04f 0300 	mov.w	r3, #0
 8006068:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800606c:	f7fa fd36 	bl	8000adc <__aeabi_dcmplt>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00a      	beq.n	800608c <scaraInitCircle+0x1e4>
		delta_angle += 2*PI;
 8006076:	a344      	add	r3, pc, #272	; (adr r3, 8006188 <scaraInitCircle+0x2e0>)
 8006078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006080:	f7fa f904 	bl	800028c <__adddf3>
 8006084:	4603      	mov	r3, r0
 8006086:	460c      	mov	r4, r1
 8006088:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	} // atan2 range : -PI --> PI

	if ( 0 > dir) {
 800608c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006090:	2b00      	cmp	r3, #0
 8006092:	da0a      	bge.n	80060aa <scaraInitCircle+0x202>
		delta_angle = 2*PI - delta_angle;
 8006094:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006098:	a13b      	add	r1, pc, #236	; (adr r1, 8006188 <scaraInitCircle+0x2e0>)
 800609a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800609e:	f7fa f8f3 	bl	8000288 <__aeabi_dsub>
 80060a2:	4603      	mov	r3, r0
 80060a4:	460c      	mov	r4, r1
 80060a6:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	}
	// Init circle params
	circle->dir = dir;
 80060aa:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80060ae:	b25a      	sxtb	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	701a      	strb	r2, [r3, #0]
	circle->radius = r1;
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80060ba:	e9c2 3402 	strd	r3, r4, [r2, #8]
	circle->angle_start = angle_start;
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80060c4:	e9c2 3404 	strd	r3, r4, [r2, #16]
	circle->angle_stop  = angle_stop;
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80060ce:	e9c2 3406 	strd	r3, r4, [r2, #24]
	circle->total_angle = delta_angle;
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80060d8:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	circle->total_s = delta_angle*r1;
 80060dc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80060e0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80060e4:	f7fa fa88 	bl	80005f8 <__aeabi_dmul>
 80060e8:	4603      	mov	r3, r0
 80060ea:	460c      	mov	r4, r1
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	circle->x0 = start.x;
 80060f2:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	e9c2 3408 	strd	r3, r4, [r2, #32]
	circle->y0 = start.y;
 80060fc:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	circle->x1 = end.x;
 8006106:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	circle->y1 = end.y;
 8006110:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	circle->xi = center.x;
 800611a:	e9d7 348a 	ldrd	r3, r4, [r7, #552]	; 0x228
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	circle->yi = center.y;
 8006124:	e9d7 348c 	ldrd	r3, r4, [r7, #560]	; 0x230
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	circle->z0 = start.z;
 800612e:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	circle->z1 = start.z;
 8006138:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	circle->zi = start.z;
 8006142:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	circle->x_current = circle->x0;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	circle->y_current = circle->y0;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	circle->z_current = circle->z0;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

	return SCARA_STATUS_OK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	3754      	adds	r7, #84	; 0x54
 8006176:	46bd      	mov	sp, r7
 8006178:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800617c:	b002      	add	sp, #8
 800617e:	4770      	bx	lr
 8006180:	9999999a 	.word	0x9999999a
 8006184:	3fb99999 	.word	0x3fb99999
 8006188:	60000000 	.word	0x60000000
 800618c:	401921fb 	.word	0x401921fb
 8006190:	3ff00000 	.word	0x3ff00000
 8006194:	00000000 	.word	0x00000000

08006198 <scaraInitLSPB>:
SCARA_StatusTypeDef	scaraInitLSPB		(Trajectory_LSPB_TypeDef *lspb,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double a_factor) {
 8006198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800619c:	b0ad      	sub	sp, #180	; 0xb4
 800619e:	af00      	add	r7, sp, #0
 80061a0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80061a2:	460b      	mov	r3, r1
 80061a4:	ed87 0b08 	vstr	d0, [r7, #32]
 80061a8:	ed87 1b06 	vstr	d1, [r7, #24]
 80061ac:	ed87 2b04 	vstr	d2, [r7, #16]
 80061b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061b4:	4613      	mov	r3, r2
 80061b6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	 double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	 uint32_t	no_sample;
	 int8_t	dir;

	 if ( TRAJECTORY_3D == target) {
 80061ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80061be:	2b04      	cmp	r3, #4
 80061c0:	d118      	bne.n	80061f4 <scaraInitLSPB+0x5c>
		 v_design = V_DESIGN_3D*v_factor;
 80061c2:	f20f 7380 	addw	r3, pc, #1920	; 0x780
 80061c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80061ce:	f7fa fa13 	bl	80005f8 <__aeabi_dmul>
 80061d2:	4603      	mov	r3, r0
 80061d4:	460c      	mov	r4, r1
 80061d6:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_3D*a_factor;
 80061da:	f20f 7368 	addw	r3, pc, #1896	; 0x768
 80061de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80061e6:	f7fa fa07 	bl	80005f8 <__aeabi_dmul>
 80061ea:	4603      	mov	r3, r0
 80061ec:	460c      	mov	r4, r1
 80061ee:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 80061f2:	e092      	b.n	800631a <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_ROLL == target) {
 80061f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80061f8:	2b05      	cmp	r3, #5
 80061fa:	d118      	bne.n	800622e <scaraInitLSPB+0x96>
		 v_design = V_DESIGN_ROLL*v_factor;
 80061fc:	f20f 734c 	addw	r3, pc, #1868	; 0x74c
 8006200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006204:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006208:	f7fa f9f6 	bl	80005f8 <__aeabi_dmul>
 800620c:	4603      	mov	r3, r0
 800620e:	460c      	mov	r4, r1
 8006210:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_ROLL*a_factor;
 8006214:	f20f 7334 	addw	r3, pc, #1844	; 0x734
 8006218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006220:	f7fa f9ea 	bl	80005f8 <__aeabi_dmul>
 8006224:	4603      	mov	r3, r0
 8006226:	460c      	mov	r4, r1
 8006228:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 800622c:	e075      	b.n	800631a <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J0 == target) {
 800622e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006232:	2b00      	cmp	r3, #0
 8006234:	d118      	bne.n	8006268 <scaraInitLSPB+0xd0>
		 v_design = V_DESIGN_J0*v_factor;
 8006236:	f20f 7314 	addw	r3, pc, #1812	; 0x714
 800623a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006242:	f7fa f9d9 	bl	80005f8 <__aeabi_dmul>
 8006246:	4603      	mov	r3, r0
 8006248:	460c      	mov	r4, r1
 800624a:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J0*a_factor;
 800624e:	f20f 63fc 	addw	r3, pc, #1788	; 0x6fc
 8006252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006256:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800625a:	f7fa f9cd 	bl	80005f8 <__aeabi_dmul>
 800625e:	4603      	mov	r3, r0
 8006260:	460c      	mov	r4, r1
 8006262:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8006266:	e058      	b.n	800631a <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J1 == target) {
 8006268:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800626c:	2b01      	cmp	r3, #1
 800626e:	d118      	bne.n	80062a2 <scaraInitLSPB+0x10a>
		 v_design = V_DESIGN_J1*v_factor;
 8006270:	f20f 63d8 	addw	r3, pc, #1752	; 0x6d8
 8006274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006278:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800627c:	f7fa f9bc 	bl	80005f8 <__aeabi_dmul>
 8006280:	4603      	mov	r3, r0
 8006282:	460c      	mov	r4, r1
 8006284:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J1*a_factor;
 8006288:	f20f 63c0 	addw	r3, pc, #1728	; 0x6c0
 800628c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006290:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006294:	f7fa f9b0 	bl	80005f8 <__aeabi_dmul>
 8006298:	4603      	mov	r3, r0
 800629a:	460c      	mov	r4, r1
 800629c:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 80062a0:	e03b      	b.n	800631a <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J2 == target) {
 80062a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d118      	bne.n	80062dc <scaraInitLSPB+0x144>
		 v_design = V_DESIGN_J2*v_factor;
 80062aa:	f20f 6398 	addw	r3, pc, #1688	; 0x698
 80062ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80062b6:	f7fa f99f 	bl	80005f8 <__aeabi_dmul>
 80062ba:	4603      	mov	r3, r0
 80062bc:	460c      	mov	r4, r1
 80062be:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J2*a_factor;
 80062c2:	f20f 6380 	addw	r3, pc, #1664	; 0x680
 80062c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80062ce:	f7fa f993 	bl	80005f8 <__aeabi_dmul>
 80062d2:	4603      	mov	r3, r0
 80062d4:	460c      	mov	r4, r1
 80062d6:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 80062da:	e01e      	b.n	800631a <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J3 == target) {
 80062dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80062e0:	2b03      	cmp	r3, #3
 80062e2:	d118      	bne.n	8006316 <scaraInitLSPB+0x17e>
		 v_design = V_DESIGN_J3*v_factor;
 80062e4:	f20f 636c 	addw	r3, pc, #1644	; 0x66c
 80062e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80062f0:	f7fa f982 	bl	80005f8 <__aeabi_dmul>
 80062f4:	4603      	mov	r3, r0
 80062f6:	460c      	mov	r4, r1
 80062f8:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J3*a_factor;
 80062fc:	f20f 6354 	addw	r3, pc, #1620	; 0x654
 8006300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006304:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006308:	f7fa f976 	bl	80005f8 <__aeabi_dmul>
 800630c:	4603      	mov	r3, r0
 800630e:	460c      	mov	r4, r1
 8006310:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8006314:	e001      	b.n	800631a <scaraInitLSPB+0x182>
	 } else {
		 return SCARA_STATUS_ERROR_PARA;
 8006316:	2306      	movs	r3, #6
 8006318:	e309      	b.n	800692e <scaraInitLSPB+0x796>
	 }

	 q0 = 0;
 800631a:	f04f 0300 	mov.w	r3, #0
 800631e:	f04f 0400 	mov.w	r4, #0
 8006322:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	 q1 = total_s;
 8006326:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800632a:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
	 v0 = 0;
 800632e:	f04f 0300 	mov.w	r3, #0
 8006332:	f04f 0400 	mov.w	r4, #0
 8006336:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	 v1 = 0;
 800633a:	f04f 0300 	mov.w	r3, #0
 800633e:	f04f 0400 	mov.w	r4, #0
 8006342:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50

	 if ( q0 <= q1) {
 8006346:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800634a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800634e:	f7fa fbcf 	bl	8000af0 <__aeabi_dcmple>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d003      	beq.n	8006360 <scaraInitLSPB+0x1c8>
		 dir = 1;
 8006358:	2301      	movs	r3, #1
 800635a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800635e:	e00c      	b.n	800637a <scaraInitLSPB+0x1e2>
	 } else {
		 dir = -1;
 8006360:	23ff      	movs	r3, #255	; 0xff
 8006362:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		 q1 = -q1;
 8006366:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800636a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800636e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006372:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006376:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	 }

	 if (DUTY_MODE_INIT_QVT == modeinit) {
 800637a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800637e:	2b01      	cmp	r3, #1
 8006380:	f040 80ad 	bne.w	80064de <scaraInitLSPB+0x346>
		 double v_lower, v_upper, tc_upper, a_upper;
		 tf = lspb->Tf;
 8006384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006386:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 800638a:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 // Avoid division by 0
		 if (tf > 0.001) {
 800638e:	f20f 53cc 	addw	r3, pc, #1484	; 0x5cc
 8006392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006396:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800639a:	f7fa fbbd 	bl	8000b18 <__aeabi_dcmpgt>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	f000 8090 	beq.w	80064c6 <scaraInitLSPB+0x32e>
			 v_lower 	= (q1 - q0) / tf;
 80063a6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80063aa:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80063ae:	f7f9 ff6b 	bl	8000288 <__aeabi_dsub>
 80063b2:	4603      	mov	r3, r0
 80063b4:	460c      	mov	r4, r1
 80063b6:	4618      	mov	r0, r3
 80063b8:	4621      	mov	r1, r4
 80063ba:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80063be:	f7fa fa45 	bl	800084c <__aeabi_ddiv>
 80063c2:	4603      	mov	r3, r0
 80063c4:	460c      	mov	r4, r1
 80063c6:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			 v_upper 	= 2*(q1 - q0) / tf;
 80063ca:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80063ce:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80063d2:	f7f9 ff59 	bl	8000288 <__aeabi_dsub>
 80063d6:	4603      	mov	r3, r0
 80063d8:	460c      	mov	r4, r1
 80063da:	4618      	mov	r0, r3
 80063dc:	4621      	mov	r1, r4
 80063de:	4602      	mov	r2, r0
 80063e0:	460b      	mov	r3, r1
 80063e2:	f7f9 ff53 	bl	800028c <__adddf3>
 80063e6:	4603      	mov	r3, r0
 80063e8:	460c      	mov	r4, r1
 80063ea:	4618      	mov	r0, r3
 80063ec:	4621      	mov	r1, r4
 80063ee:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80063f2:	f7fa fa2b 	bl	800084c <__aeabi_ddiv>
 80063f6:	4603      	mov	r3, r0
 80063f8:	460c      	mov	r4, r1
 80063fa:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

			 if ( v_design < v_lower) {
 80063fe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006402:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8006406:	f7fa fb69 	bl	8000adc <__aeabi_dcmplt>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d001      	beq.n	8006414 <scaraInitLSPB+0x27c>
				 return SCARA_STATUS_ERROR_OVER_VELOC;
 8006410:	2309      	movs	r3, #9
 8006412:	e28c      	b.n	800692e <scaraInitLSPB+0x796>
			 } else {
				 if ( v_upper <= v_design) {
 8006414:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8006418:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800641c:	f7fa fb68 	bl	8000af0 <__aeabi_dcmple>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d003      	beq.n	800642e <scaraInitLSPB+0x296>
					 v_design = v_upper;
 8006426:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800642a:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
				 }
				 // Avoid division by 0
				 if (v_design > 0.0000001) {
 800642e:	f20f 5334 	addw	r3, pc, #1332	; 0x534
 8006432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006436:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800643a:	f7fa fb6d 	bl	8000b18 <__aeabi_dcmpgt>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d01a      	beq.n	800647a <scaraInitLSPB+0x2e2>
					 tc_upper	= tf - (q1 - q0)/v_design;
 8006444:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8006448:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800644c:	f7f9 ff1c 	bl	8000288 <__aeabi_dsub>
 8006450:	4603      	mov	r3, r0
 8006452:	460c      	mov	r4, r1
 8006454:	4618      	mov	r0, r3
 8006456:	4621      	mov	r1, r4
 8006458:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800645c:	f7fa f9f6 	bl	800084c <__aeabi_ddiv>
 8006460:	4603      	mov	r3, r0
 8006462:	460c      	mov	r4, r1
 8006464:	461a      	mov	r2, r3
 8006466:	4623      	mov	r3, r4
 8006468:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800646c:	f7f9 ff0c 	bl	8000288 <__aeabi_dsub>
 8006470:	4603      	mov	r3, r0
 8006472:	460c      	mov	r4, r1
 8006474:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
 8006478:	e00b      	b.n	8006492 <scaraInitLSPB+0x2fa>
				 } else {
					 tc_upper = tf / 2;
 800647a:	f04f 0200 	mov.w	r2, #0
 800647e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006482:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8006486:	f7fa f9e1 	bl	800084c <__aeabi_ddiv>
 800648a:	4603      	mov	r3, r0
 800648c:	460c      	mov	r4, r1
 800648e:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
				 }
				 a_upper	= v_design/tc_upper;
 8006492:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8006496:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800649a:	f7fa f9d7 	bl	800084c <__aeabi_ddiv>
 800649e:	4603      	mov	r3, r0
 80064a0:	460c      	mov	r4, r1
 80064a2:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
				 if ( a_upper > a_design) {
 80064a6:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80064aa:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80064ae:	f7fa fb33 	bl	8000b18 <__aeabi_dcmpgt>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d001      	beq.n	80064bc <scaraInitLSPB+0x324>
					 return SCARA_STATUS_ERROR_OVER_ACCEL;
 80064b8:	230a      	movs	r3, #10
 80064ba:	e238      	b.n	800692e <scaraInitLSPB+0x796>
				 } else {
					 a_design = a_upper;
 80064bc:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80064c0:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 80064c4:	e00b      	b.n	80064de <scaraInitLSPB+0x346>
				 }
			 }
		 } else {
			 v_design = 0;
 80064c6:	f04f 0300 	mov.w	r3, #0
 80064ca:	f04f 0400 	mov.w	r4, #0
 80064ce:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
			 a_design = 0;
 80064d2:	f04f 0300 	mov.w	r3, #0
 80064d6:	f04f 0400 	mov.w	r4, #0
 80064da:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
		 }
	}

	 // Check condition trapezoidal ---> triangle
	 // Avoid division by 0
	 if (a_design > 0.0000001 && v_design > 0.0000001) {
 80064de:	f20f 4384 	addw	r3, pc, #1156	; 0x484
 80064e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80064ea:	f7fa fb15 	bl	8000b18 <__aeabi_dcmpgt>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f000 819c 	beq.w	800682e <scaraInitLSPB+0x696>
 80064f6:	f20f 436c 	addw	r3, pc, #1132	; 0x46c
 80064fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fe:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8006502:	f7fa fb09 	bl	8000b18 <__aeabi_dcmpgt>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	f000 8190 	beq.w	800682e <scaraInitLSPB+0x696>
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 800650e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8006512:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8006516:	f7f9 feb7 	bl	8000288 <__aeabi_dsub>
 800651a:	4603      	mov	r3, r0
 800651c:	460c      	mov	r4, r1
 800651e:	461d      	mov	r5, r3
 8006520:	f024 4600 	bic.w	r6, r4, #2147483648	; 0x80000000
 8006524:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8006528:	4628      	mov	r0, r5
 800652a:	4631      	mov	r1, r6
 800652c:	f7fa f864 	bl	80005f8 <__aeabi_dmul>
 8006530:	4603      	mov	r3, r0
 8006532:	460c      	mov	r4, r1
 8006534:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8006538:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800653c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8006540:	f7fa f85a 	bl	80005f8 <__aeabi_dmul>
 8006544:	4603      	mov	r3, r0
 8006546:	460c      	mov	r4, r1
 8006548:	e9c7 3400 	strd	r3, r4, [r7]
 800654c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006550:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006554:	f7fa f850 	bl	80005f8 <__aeabi_dmul>
 8006558:	4603      	mov	r3, r0
 800655a:	460c      	mov	r4, r1
 800655c:	461d      	mov	r5, r3
 800655e:	4626      	mov	r6, r4
 8006560:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006564:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006568:	f7fa f846 	bl	80005f8 <__aeabi_dmul>
 800656c:	4603      	mov	r3, r0
 800656e:	460c      	mov	r4, r1
 8006570:	461a      	mov	r2, r3
 8006572:	4623      	mov	r3, r4
 8006574:	4628      	mov	r0, r5
 8006576:	4631      	mov	r1, r6
 8006578:	f7f9 fe88 	bl	800028c <__adddf3>
 800657c:	4603      	mov	r3, r0
 800657e:	460c      	mov	r4, r1
 8006580:	4618      	mov	r0, r3
 8006582:	4621      	mov	r1, r4
 8006584:	f04f 0200 	mov.w	r2, #0
 8006588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800658c:	f7fa f95e 	bl	800084c <__aeabi_ddiv>
 8006590:	4603      	mov	r3, r0
 8006592:	460c      	mov	r4, r1
 8006594:	461a      	mov	r2, r3
 8006596:	4623      	mov	r3, r4
 8006598:	e9d7 0100 	ldrd	r0, r1, [r7]
 800659c:	f7f9 fe74 	bl	8000288 <__aeabi_dsub>
 80065a0:	4603      	mov	r3, r0
 80065a2:	460c      	mov	r4, r1
 80065a4:	461a      	mov	r2, r3
 80065a6:	4623      	mov	r3, r4
 80065a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80065ac:	f7fa faa0 	bl	8000af0 <__aeabi_dcmple>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d075      	beq.n	80066a2 <scaraInitLSPB+0x50a>
			 v_lim 	= sqrt(fabs(q1 - q0)*a_design + (v0*v0 + v1*v1)/2);
 80065b6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80065ba:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80065be:	f7f9 fe63 	bl	8000288 <__aeabi_dsub>
 80065c2:	4603      	mov	r3, r0
 80065c4:	460c      	mov	r4, r1
 80065c6:	469a      	mov	sl, r3
 80065c8:	f024 4b00 	bic.w	fp, r4, #2147483648	; 0x80000000
 80065cc:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80065d0:	4650      	mov	r0, sl
 80065d2:	4659      	mov	r1, fp
 80065d4:	f7fa f810 	bl	80005f8 <__aeabi_dmul>
 80065d8:	4603      	mov	r3, r0
 80065da:	460c      	mov	r4, r1
 80065dc:	4625      	mov	r5, r4
 80065de:	461c      	mov	r4, r3
 80065e0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80065e4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80065e8:	f7fa f806 	bl	80005f8 <__aeabi_dmul>
 80065ec:	4602      	mov	r2, r0
 80065ee:	460b      	mov	r3, r1
 80065f0:	4690      	mov	r8, r2
 80065f2:	4699      	mov	r9, r3
 80065f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80065f8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80065fc:	f7f9 fffc 	bl	80005f8 <__aeabi_dmul>
 8006600:	4602      	mov	r2, r0
 8006602:	460b      	mov	r3, r1
 8006604:	4640      	mov	r0, r8
 8006606:	4649      	mov	r1, r9
 8006608:	f7f9 fe40 	bl	800028c <__adddf3>
 800660c:	4602      	mov	r2, r0
 800660e:	460b      	mov	r3, r1
 8006610:	4610      	mov	r0, r2
 8006612:	4619      	mov	r1, r3
 8006614:	f04f 0200 	mov.w	r2, #0
 8006618:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800661c:	f7fa f916 	bl	800084c <__aeabi_ddiv>
 8006620:	4602      	mov	r2, r0
 8006622:	460b      	mov	r3, r1
 8006624:	4620      	mov	r0, r4
 8006626:	4629      	mov	r1, r5
 8006628:	f7f9 fe30 	bl	800028c <__adddf3>
 800662c:	4603      	mov	r3, r0
 800662e:	460c      	mov	r4, r1
 8006630:	ec44 3b17 	vmov	d7, r3, r4
 8006634:	eeb0 0a47 	vmov.f32	s0, s14
 8006638:	eef0 0a67 	vmov.f32	s1, s15
 800663c:	f012 ff4e 	bl	80194dc <sqrt>
 8006640:	ed87 0b26 	vstr	d0, [r7, #152]	; 0x98
			 ta		= (v_lim - v0)/a_design;
 8006644:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006648:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800664c:	f7f9 fe1c 	bl	8000288 <__aeabi_dsub>
 8006650:	4603      	mov	r3, r0
 8006652:	460c      	mov	r4, r1
 8006654:	4618      	mov	r0, r3
 8006656:	4621      	mov	r1, r4
 8006658:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800665c:	f7fa f8f6 	bl	800084c <__aeabi_ddiv>
 8006660:	4603      	mov	r3, r0
 8006662:	460c      	mov	r4, r1
 8006664:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			 td		= (v_lim - v1)/a_design;
 8006668:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800666c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006670:	f7f9 fe0a 	bl	8000288 <__aeabi_dsub>
 8006674:	4603      	mov	r3, r0
 8006676:	460c      	mov	r4, r1
 8006678:	4618      	mov	r0, r3
 800667a:	4621      	mov	r1, r4
 800667c:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8006680:	f7fa f8e4 	bl	800084c <__aeabi_ddiv>
 8006684:	4603      	mov	r3, r0
 8006686:	460c      	mov	r4, r1
 8006688:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
			 tf		= ta + td;
 800668c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8006690:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8006694:	f7f9 fdfa 	bl	800028c <__adddf3>
 8006698:	4603      	mov	r3, r0
 800669a:	460c      	mov	r4, r1
 800669c:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 80066a0:	e0e3      	b.n	800686a <scaraInitLSPB+0x6d2>
		 } else {
			 v_lim	= v_design;
 80066a2:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80066a6:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
			 ta		= (v_lim - v0)/a_design;
 80066aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80066ae:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80066b2:	f7f9 fde9 	bl	8000288 <__aeabi_dsub>
 80066b6:	4603      	mov	r3, r0
 80066b8:	460c      	mov	r4, r1
 80066ba:	4618      	mov	r0, r3
 80066bc:	4621      	mov	r1, r4
 80066be:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80066c2:	f7fa f8c3 	bl	800084c <__aeabi_ddiv>
 80066c6:	4603      	mov	r3, r0
 80066c8:	460c      	mov	r4, r1
 80066ca:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			 td		= (v_lim - v1)/a_design;
 80066ce:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80066d2:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80066d6:	f7f9 fdd7 	bl	8000288 <__aeabi_dsub>
 80066da:	4603      	mov	r3, r0
 80066dc:	460c      	mov	r4, r1
 80066de:	4618      	mov	r0, r3
 80066e0:	4621      	mov	r1, r4
 80066e2:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80066e6:	f7fa f8b1 	bl	800084c <__aeabi_ddiv>
 80066ea:	4603      	mov	r3, r0
 80066ec:	460c      	mov	r4, r1
 80066ee:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 80066f2:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80066f6:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80066fa:	f7f9 fdc5 	bl	8000288 <__aeabi_dsub>
 80066fe:	4603      	mov	r3, r0
 8006700:	460c      	mov	r4, r1
 8006702:	4698      	mov	r8, r3
 8006704:	f024 4900 	bic.w	r9, r4, #2147483648	; 0x80000000
 8006708:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800670c:	4640      	mov	r0, r8
 800670e:	4649      	mov	r1, r9
 8006710:	f7fa f89c 	bl	800084c <__aeabi_ddiv>
 8006714:	4603      	mov	r3, r0
 8006716:	460c      	mov	r4, r1
 8006718:	4625      	mov	r5, r4
 800671a:	461c      	mov	r4, r3
 800671c:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8006720:	4602      	mov	r2, r0
 8006722:	460b      	mov	r3, r1
 8006724:	f7f9 fdb2 	bl	800028c <__adddf3>
 8006728:	4602      	mov	r2, r0
 800672a:	460b      	mov	r3, r1
 800672c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006730:	f7fa f88c 	bl	800084c <__aeabi_ddiv>
 8006734:	4602      	mov	r2, r0
 8006736:	460b      	mov	r3, r1
 8006738:	4690      	mov	r8, r2
 800673a:	4699      	mov	r9, r3
 800673c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8006740:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006744:	f7fa f882 	bl	800084c <__aeabi_ddiv>
 8006748:	4602      	mov	r2, r0
 800674a:	460b      	mov	r3, r1
 800674c:	f04f 0000 	mov.w	r0, #0
 8006750:	497b      	ldr	r1, [pc, #492]	; (8006940 <scaraInitLSPB+0x7a8>)
 8006752:	f7f9 fd99 	bl	8000288 <__aeabi_dsub>
 8006756:	4602      	mov	r2, r0
 8006758:	460b      	mov	r3, r1
 800675a:	4640      	mov	r0, r8
 800675c:	4649      	mov	r1, r9
 800675e:	f7f9 ff4b 	bl	80005f8 <__aeabi_dmul>
 8006762:	4602      	mov	r2, r0
 8006764:	460b      	mov	r3, r1
 8006766:	4690      	mov	r8, r2
 8006768:	4699      	mov	r9, r3
 800676a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800676e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006772:	f7fa f86b 	bl	800084c <__aeabi_ddiv>
 8006776:	4602      	mov	r2, r0
 8006778:	460b      	mov	r3, r1
 800677a:	f04f 0000 	mov.w	r0, #0
 800677e:	4970      	ldr	r1, [pc, #448]	; (8006940 <scaraInitLSPB+0x7a8>)
 8006780:	f7f9 fd82 	bl	8000288 <__aeabi_dsub>
 8006784:	4602      	mov	r2, r0
 8006786:	460b      	mov	r3, r1
 8006788:	4640      	mov	r0, r8
 800678a:	4649      	mov	r1, r9
 800678c:	f7f9 ff34 	bl	80005f8 <__aeabi_dmul>
 8006790:	4602      	mov	r2, r0
 8006792:	460b      	mov	r3, r1
 8006794:	4620      	mov	r0, r4
 8006796:	4629      	mov	r1, r5
 8006798:	f7f9 fd78 	bl	800028c <__adddf3>
 800679c:	4603      	mov	r3, r0
 800679e:	460c      	mov	r4, r1
 80067a0:	4625      	mov	r5, r4
 80067a2:	461c      	mov	r4, r3
							+ v_lim/(2*a_design)*(1 - v1/v_lim)*(1 - v1/v_lim);
 80067a4:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80067a8:	4602      	mov	r2, r0
 80067aa:	460b      	mov	r3, r1
 80067ac:	f7f9 fd6e 	bl	800028c <__adddf3>
 80067b0:	4602      	mov	r2, r0
 80067b2:	460b      	mov	r3, r1
 80067b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80067b8:	f7fa f848 	bl	800084c <__aeabi_ddiv>
 80067bc:	4602      	mov	r2, r0
 80067be:	460b      	mov	r3, r1
 80067c0:	4690      	mov	r8, r2
 80067c2:	4699      	mov	r9, r3
 80067c4:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80067c8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80067cc:	f7fa f83e 	bl	800084c <__aeabi_ddiv>
 80067d0:	4602      	mov	r2, r0
 80067d2:	460b      	mov	r3, r1
 80067d4:	f04f 0000 	mov.w	r0, #0
 80067d8:	4959      	ldr	r1, [pc, #356]	; (8006940 <scaraInitLSPB+0x7a8>)
 80067da:	f7f9 fd55 	bl	8000288 <__aeabi_dsub>
 80067de:	4602      	mov	r2, r0
 80067e0:	460b      	mov	r3, r1
 80067e2:	4640      	mov	r0, r8
 80067e4:	4649      	mov	r1, r9
 80067e6:	f7f9 ff07 	bl	80005f8 <__aeabi_dmul>
 80067ea:	4602      	mov	r2, r0
 80067ec:	460b      	mov	r3, r1
 80067ee:	4690      	mov	r8, r2
 80067f0:	4699      	mov	r9, r3
 80067f2:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80067f6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80067fa:	f7fa f827 	bl	800084c <__aeabi_ddiv>
 80067fe:	4602      	mov	r2, r0
 8006800:	460b      	mov	r3, r1
 8006802:	f04f 0000 	mov.w	r0, #0
 8006806:	494e      	ldr	r1, [pc, #312]	; (8006940 <scaraInitLSPB+0x7a8>)
 8006808:	f7f9 fd3e 	bl	8000288 <__aeabi_dsub>
 800680c:	4602      	mov	r2, r0
 800680e:	460b      	mov	r3, r1
 8006810:	4640      	mov	r0, r8
 8006812:	4649      	mov	r1, r9
 8006814:	f7f9 fef0 	bl	80005f8 <__aeabi_dmul>
 8006818:	4602      	mov	r2, r0
 800681a:	460b      	mov	r3, r1
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 800681c:	4620      	mov	r0, r4
 800681e:	4629      	mov	r1, r5
 8006820:	f7f9 fd34 	bl	800028c <__adddf3>
 8006824:	4603      	mov	r3, r0
 8006826:	460c      	mov	r4, r1
 8006828:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 800682c:	e01d      	b.n	800686a <scaraInitLSPB+0x6d2>
		 }
	 } else {
		 v_lim	= 0;
 800682e:	f04f 0300 	mov.w	r3, #0
 8006832:	f04f 0400 	mov.w	r4, #0
 8006836:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		 ta = tf/2;
 800683a:	f04f 0200 	mov.w	r2, #0
 800683e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006842:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8006846:	f7fa f801 	bl	800084c <__aeabi_ddiv>
 800684a:	4603      	mov	r3, r0
 800684c:	460c      	mov	r4, r1
 800684e:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
		 td = tf/2;
 8006852:	f04f 0200 	mov.w	r2, #0
 8006856:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800685a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800685e:	f7f9 fff5 	bl	800084c <__aeabi_ddiv>
 8006862:	4603      	mov	r3, r0
 8006864:	460c      	mov	r4, r1
 8006866:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	 }

	 no_sample = ceilf(tf / T_SAMPLING); // ceiling
 800686a:	a333      	add	r3, pc, #204	; (adr r3, 8006938 <scaraInitLSPB+0x7a0>)
 800686c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006870:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8006874:	f7f9 ffea 	bl	800084c <__aeabi_ddiv>
 8006878:	4603      	mov	r3, r0
 800687a:	460c      	mov	r4, r1
 800687c:	4618      	mov	r0, r3
 800687e:	4621      	mov	r1, r4
 8006880:	f7fa f9b2 	bl	8000be8 <__aeabi_d2f>
 8006884:	4603      	mov	r3, r0
 8006886:	ee00 3a10 	vmov	s0, r3
 800688a:	f012 fde5 	bl	8019458 <ceilf>
 800688e:	eef0 7a40 	vmov.f32	s15, s0
 8006892:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006896:	ee17 3a90 	vmov	r3, s15
 800689a:	637b      	str	r3, [r7, #52]	; 0x34
	 // Init lspb params
	 lspb->dir= dir;
 800689c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800689e:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 80068a2:	701a      	strb	r2, [r3, #0]
	 lspb->s0 = q0;
 80068a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068a6:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80068aa:	e9c2 3402 	strd	r3, r4, [r2, #8]
	 lspb->s1 = q1;
 80068ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068b0:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 80068b4:	e9c2 3404 	strd	r3, r4, [r2, #16]
	 lspb->Ta = ta;
 80068b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068ba:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 80068be:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	 lspb->Td = td;
 80068c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068c4:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 80068c8:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	 lspb->Tf = tf;
 80068cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068ce:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80068d2:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	 lspb->a_design = a_design;
 80068d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068d8:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 80068dc:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	 lspb->v_design = v_design;
 80068e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068e2:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80068e6:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	 lspb->v_lim = v_lim;
 80068ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068ec:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 80068f0:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	 lspb->v0 = v0;
 80068f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068f6:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80068fa:	e9c2 3406 	strd	r3, r4, [r2, #24]
	 lspb->v1 = v1;
 80068fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006900:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8006904:	e9c2 3408 	strd	r3, r4, [r2, #32]
	 lspb->num_of_sampling = no_sample;
 8006908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800690a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800690c:	659a      	str	r2, [r3, #88]	; 0x58
	 lspb->total_s = lspb->s1 - lspb->s0;
 800690e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006910:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8006914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006916:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800691a:	461a      	mov	r2, r3
 800691c:	4623      	mov	r3, r4
 800691e:	f7f9 fcb3 	bl	8000288 <__aeabi_dsub>
 8006922:	4603      	mov	r3, r0
 8006924:	460c      	mov	r4, r1
 8006926:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006928:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

	 return SCARA_STATUS_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	37b4      	adds	r7, #180	; 0xb4
 8006932:	46bd      	mov	sp, r7
 8006934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006938:	40000000 	.word	0x40000000
 800693c:	3f847ae1 	.word	0x3f847ae1
 8006940:	3ff00000 	.word	0x3ff00000
 8006944:	00000000 	.word	0x00000000
 8006948:	405c2000 	.word	0x405c2000
 800694c:	14000000 	.word	0x14000000
 8006950:	4000f6f0 	.word	0x4000f6f0
 8006954:	6b259425 	.word	0x6b259425
 8006958:	40069b91 	.word	0x40069b91
 800695c:	d2f1a9fc 	.word	0xd2f1a9fc
 8006960:	3f50624d 	.word	0x3f50624d
 8006964:	9abcaf48 	.word	0x9abcaf48
 8006968:	3e7ad7f2 	.word	0x3e7ad7f2
 800696c:	00000000 	.word	0x00000000

08006970 <scaraInitScurve>:
SCARA_StatusTypeDef	scaraInitScurve		(Trajectory_Scurve_TypeDef *scurve,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double a_factor) {
 8006970:	b5b0      	push	{r4, r5, r7, lr}
 8006972:	b0ba      	sub	sp, #232	; 0xe8
 8006974:	af00      	add	r7, sp, #0
 8006976:	61f8      	str	r0, [r7, #28]
 8006978:	460b      	mov	r3, r1
 800697a:	ed87 0b04 	vstr	d0, [r7, #16]
 800697e:	ed87 1b02 	vstr	d1, [r7, #8]
 8006982:	ed87 2b00 	vstr	d2, [r7]
 8006986:	76fb      	strb	r3, [r7, #27]
 8006988:	4613      	mov	r3, r2
 800698a:	76bb      	strb	r3, [r7, #26]
	 double v_design, a_design, q0, q1, v0, v1, v_lim, j_max, tm, tc, tf, dir;
	 double v_1, s_1, v_2, s_2, v_3, s_3, v_4, s_4;
	 uint32_t	 no_sample;
	 uint8_t	 no_phases;

	 if ( TRAJECTORY_3D == target) {
 800698c:	7efb      	ldrb	r3, [r7, #27]
 800698e:	2b04      	cmp	r3, #4
 8006990:	d118      	bne.n	80069c4 <scaraInitScurve+0x54>
		 v_design = V_DESIGN_3D*v_factor;
 8006992:	f20f 4320 	addw	r3, pc, #1056	; 0x420
 8006996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800699a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800699e:	f7f9 fe2b 	bl	80005f8 <__aeabi_dmul>
 80069a2:	4603      	mov	r3, r0
 80069a4:	460c      	mov	r4, r1
 80069a6:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_3D*a_factor;
 80069aa:	f20f 4308 	addw	r3, pc, #1032	; 0x408
 80069ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069b6:	f7f9 fe1f 	bl	80005f8 <__aeabi_dmul>
 80069ba:	4603      	mov	r3, r0
 80069bc:	460c      	mov	r4, r1
 80069be:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 80069c2:	e083      	b.n	8006acc <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_ROLL == target) {
 80069c4:	7efb      	ldrb	r3, [r7, #27]
 80069c6:	2b05      	cmp	r3, #5
 80069c8:	d116      	bne.n	80069f8 <scaraInitScurve+0x88>
		 v_design = V_DESIGN_ROLL*v_factor;
 80069ca:	a3fc      	add	r3, pc, #1008	; (adr r3, 8006dbc <scaraInitScurve+0x44c>)
 80069cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80069d4:	f7f9 fe10 	bl	80005f8 <__aeabi_dmul>
 80069d8:	4603      	mov	r3, r0
 80069da:	460c      	mov	r4, r1
 80069dc:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_ROLL*a_factor;
 80069e0:	a3f6      	add	r3, pc, #984	; (adr r3, 8006dbc <scaraInitScurve+0x44c>)
 80069e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069ea:	f7f9 fe05 	bl	80005f8 <__aeabi_dmul>
 80069ee:	4603      	mov	r3, r0
 80069f0:	460c      	mov	r4, r1
 80069f2:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 80069f6:	e069      	b.n	8006acc <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J0 == target) {
 80069f8:	7efb      	ldrb	r3, [r7, #27]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d116      	bne.n	8006a2c <scaraInitScurve+0xbc>
		 v_design = V_DESIGN_J0*v_factor;
 80069fe:	a3ef      	add	r3, pc, #956	; (adr r3, 8006dbc <scaraInitScurve+0x44c>)
 8006a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a04:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006a08:	f7f9 fdf6 	bl	80005f8 <__aeabi_dmul>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	460c      	mov	r4, r1
 8006a10:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J0*a_factor;
 8006a14:	a3e9      	add	r3, pc, #932	; (adr r3, 8006dbc <scaraInitScurve+0x44c>)
 8006a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a1e:	f7f9 fdeb 	bl	80005f8 <__aeabi_dmul>
 8006a22:	4603      	mov	r3, r0
 8006a24:	460c      	mov	r4, r1
 8006a26:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8006a2a:	e04f      	b.n	8006acc <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J1 == target) {
 8006a2c:	7efb      	ldrb	r3, [r7, #27]
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d116      	bne.n	8006a60 <scaraInitScurve+0xf0>
		 v_design = V_DESIGN_J1*v_factor;
 8006a32:	a3e2      	add	r3, pc, #904	; (adr r3, 8006dbc <scaraInitScurve+0x44c>)
 8006a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a38:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006a3c:	f7f9 fddc 	bl	80005f8 <__aeabi_dmul>
 8006a40:	4603      	mov	r3, r0
 8006a42:	460c      	mov	r4, r1
 8006a44:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J1*a_factor;
 8006a48:	a3dc      	add	r3, pc, #880	; (adr r3, 8006dbc <scaraInitScurve+0x44c>)
 8006a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a52:	f7f9 fdd1 	bl	80005f8 <__aeabi_dmul>
 8006a56:	4603      	mov	r3, r0
 8006a58:	460c      	mov	r4, r1
 8006a5a:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8006a5e:	e035      	b.n	8006acc <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J2 == target) {
 8006a60:	7efb      	ldrb	r3, [r7, #27]
 8006a62:	2b02      	cmp	r3, #2
 8006a64:	d116      	bne.n	8006a94 <scaraInitScurve+0x124>
		 v_design = V_DESIGN_J2*v_factor;
 8006a66:	a3d3      	add	r3, pc, #844	; (adr r3, 8006db4 <scaraInitScurve+0x444>)
 8006a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a6c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006a70:	f7f9 fdc2 	bl	80005f8 <__aeabi_dmul>
 8006a74:	4603      	mov	r3, r0
 8006a76:	460c      	mov	r4, r1
 8006a78:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J2*a_factor;
 8006a7c:	a3cd      	add	r3, pc, #820	; (adr r3, 8006db4 <scaraInitScurve+0x444>)
 8006a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a82:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a86:	f7f9 fdb7 	bl	80005f8 <__aeabi_dmul>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	460c      	mov	r4, r1
 8006a8e:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8006a92:	e01b      	b.n	8006acc <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J3 == target) {
 8006a94:	7efb      	ldrb	r3, [r7, #27]
 8006a96:	2b03      	cmp	r3, #3
 8006a98:	d116      	bne.n	8006ac8 <scaraInitScurve+0x158>
		 v_design = V_DESIGN_J3*v_factor;
 8006a9a:	a3ca      	add	r3, pc, #808	; (adr r3, 8006dc4 <scaraInitScurve+0x454>)
 8006a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006aa4:	f7f9 fda8 	bl	80005f8 <__aeabi_dmul>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	460c      	mov	r4, r1
 8006aac:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J3*a_factor;
 8006ab0:	a3c4      	add	r3, pc, #784	; (adr r3, 8006dc4 <scaraInitScurve+0x454>)
 8006ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006aba:	f7f9 fd9d 	bl	80005f8 <__aeabi_dmul>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	460c      	mov	r4, r1
 8006ac2:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8006ac6:	e001      	b.n	8006acc <scaraInitScurve+0x15c>
	 } else {
		 return SCARA_STATUS_ERROR_PARA;
 8006ac8:	2306      	movs	r3, #6
 8006aca:	e2c8      	b.n	800705e <scaraInitScurve+0x6ee>
	 }

	 v0 = 0;
 8006acc:	f04f 0300 	mov.w	r3, #0
 8006ad0:	f04f 0400 	mov.w	r4, #0
 8006ad4:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
	 v1 = 0;
 8006ad8:	f04f 0300 	mov.w	r3, #0
 8006adc:	f04f 0400 	mov.w	r4, #0
 8006ae0:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	 q0 = 0;
 8006ae4:	f04f 0300 	mov.w	r3, #0
 8006ae8:	f04f 0400 	mov.w	r4, #0
 8006aec:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	 q1 = total_s;
 8006af0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006af4:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0

	 if ( total_s < 0) {
 8006af8:	f04f 0200 	mov.w	r2, #0
 8006afc:	f04f 0300 	mov.w	r3, #0
 8006b00:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006b04:	f7f9 ffea 	bl	8000adc <__aeabi_dcmplt>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d015      	beq.n	8006b3a <scaraInitScurve+0x1ca>
		 dir = -1;
 8006b0e:	f04f 0300 	mov.w	r3, #0
 8006b12:	4ca5      	ldr	r4, [pc, #660]	; (8006da8 <scaraInitScurve+0x438>)
 8006b14:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
		 q1 = -q1;
 8006b18:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006b1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b24:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006b28:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		 total_s = -total_s;
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	613b      	str	r3, [r7, #16]
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006b36:	617b      	str	r3, [r7, #20]
 8006b38:	e004      	b.n	8006b44 <scaraInitScurve+0x1d4>
	 } else {
		 dir = 1;
 8006b3a:	f04f 0300 	mov.w	r3, #0
 8006b3e:	4c9b      	ldr	r4, [pc, #620]	; (8006dac <scaraInitScurve+0x43c>)
 8006b40:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
	 }


	 if (DUTY_MODE_INIT_QVT == modeinit) {
 8006b44:	7ebb      	ldrb	r3, [r7, #26]
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	f040 8082 	bne.w	8006c50 <scaraInitScurve+0x2e0>
		 double t_upper, v_upper, a_upper;
		 tf = scurve->Tf;
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8006b52:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 // Avoid division by 0
		 if (tf > 0.001) {
 8006b56:	a390      	add	r3, pc, #576	; (adr r3, 8006d98 <scaraInitScurve+0x428>)
 8006b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8006b60:	f7f9 ffda 	bl	8000b18 <__aeabi_dcmpgt>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d066      	beq.n	8006c38 <scaraInitScurve+0x2c8>
			 // Assume 4 phase
			 t_upper = tf / 4;
 8006b6a:	f04f 0200 	mov.w	r2, #0
 8006b6e:	4b90      	ldr	r3, [pc, #576]	; (8006db0 <scaraInitScurve+0x440>)
 8006b70:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8006b74:	f7f9 fe6a 	bl	800084c <__aeabi_ddiv>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	460c      	mov	r4, r1
 8006b7c:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
			 v_upper = total_s / (2*t_upper);
 8006b80:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8006b84:	4602      	mov	r2, r0
 8006b86:	460b      	mov	r3, r1
 8006b88:	f7f9 fb80 	bl	800028c <__adddf3>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	460c      	mov	r4, r1
 8006b90:	461a      	mov	r2, r3
 8006b92:	4623      	mov	r3, r4
 8006b94:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006b98:	f7f9 fe58 	bl	800084c <__aeabi_ddiv>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	460c      	mov	r4, r1
 8006ba0:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
			 // Check 4 phase --> 5 phase
			 if ( v_upper > v_design) {
 8006ba4:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8006ba8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8006bac:	f7f9 ffb4 	bl	8000b18 <__aeabi_dcmpgt>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d022      	beq.n	8006bfc <scaraInitScurve+0x28c>
				 t_upper = tf/2 - total_s/(2*v_design);
 8006bb6:	f04f 0200 	mov.w	r2, #0
 8006bba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006bbe:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8006bc2:	f7f9 fe43 	bl	800084c <__aeabi_ddiv>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	460c      	mov	r4, r1
 8006bca:	4625      	mov	r5, r4
 8006bcc:	461c      	mov	r4, r3
 8006bce:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	f7f9 fb59 	bl	800028c <__adddf3>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	460b      	mov	r3, r1
 8006bde:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006be2:	f7f9 fe33 	bl	800084c <__aeabi_ddiv>
 8006be6:	4602      	mov	r2, r0
 8006be8:	460b      	mov	r3, r1
 8006bea:	4620      	mov	r0, r4
 8006bec:	4629      	mov	r1, r5
 8006bee:	f7f9 fb4b 	bl	8000288 <__aeabi_dsub>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	460c      	mov	r4, r1
 8006bf6:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
 8006bfa:	e003      	b.n	8006c04 <scaraInitScurve+0x294>
			 } else {
				 v_design = v_upper;
 8006bfc:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8006c00:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			 }
			 a_upper  = v_design / t_upper;
 8006c04:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8006c08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006c0c:	f7f9 fe1e 	bl	800084c <__aeabi_ddiv>
 8006c10:	4603      	mov	r3, r0
 8006c12:	460c      	mov	r4, r1
 8006c14:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
			 if ( a_upper > a_design) {
 8006c18:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8006c1c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006c20:	f7f9 ff7a 	bl	8000b18 <__aeabi_dcmpgt>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d001      	beq.n	8006c2e <scaraInitScurve+0x2be>
				 return SCARA_STATUS_ERROR_OVER_ACCEL;
 8006c2a:	230a      	movs	r3, #10
 8006c2c:	e217      	b.n	800705e <scaraInitScurve+0x6ee>
			 } else {
				 a_design = a_upper;
 8006c2e:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8006c32:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8006c36:	e00b      	b.n	8006c50 <scaraInitScurve+0x2e0>
			 }
		 } else {
			 v_design = 0;
 8006c38:	f04f 0300 	mov.w	r3, #0
 8006c3c:	f04f 0400 	mov.w	r4, #0
 8006c40:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			 a_design = 0;
 8006c44:	f04f 0300 	mov.w	r3, #0
 8006c48:	f04f 0400 	mov.w	r4, #0
 8006c4c:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
		 }
	 }
	 // Avoid division by 0
	 if (a_design > 0.0000001 && v_design > 0.0000001) {
 8006c50:	a353      	add	r3, pc, #332	; (adr r3, 8006da0 <scaraInitScurve+0x430>)
 8006c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c56:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8006c5a:	f7f9 ff5d 	bl	8000b18 <__aeabi_dcmpgt>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	f000 80b3 	beq.w	8006dcc <scaraInitScurve+0x45c>
 8006c66:	a34e      	add	r3, pc, #312	; (adr r3, 8006da0 <scaraInitScurve+0x430>)
 8006c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006c70:	f7f9 ff52 	bl	8000b18 <__aeabi_dcmpgt>
 8006c74:	4603      	mov	r3, r0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	f000 80a8 	beq.w	8006dcc <scaraInitScurve+0x45c>
		 no_phases = 5;
 8006c7c:	2305      	movs	r3, #5
 8006c7e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		 tm = v_design/a_design;
 8006c82:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8006c86:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006c8a:	f7f9 fddf 	bl	800084c <__aeabi_ddiv>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	460c      	mov	r4, r1
 8006c92:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		 tc = total_s/v_design - 2*tm;
 8006c96:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8006c9a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006c9e:	f7f9 fdd5 	bl	800084c <__aeabi_ddiv>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	460c      	mov	r4, r1
 8006ca6:	4625      	mov	r5, r4
 8006ca8:	461c      	mov	r4, r3
 8006caa:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8006cae:	4602      	mov	r2, r0
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	f7f9 faeb 	bl	800028c <__adddf3>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	460b      	mov	r3, r1
 8006cba:	4620      	mov	r0, r4
 8006cbc:	4629      	mov	r1, r5
 8006cbe:	f7f9 fae3 	bl	8000288 <__aeabi_dsub>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	460c      	mov	r4, r1
 8006cc6:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
		 // Check condition 5 phase ---> 4 phase
		 if (tc < 0.0) {
 8006cca:	f04f 0200 	mov.w	r2, #0
 8006cce:	f04f 0300 	mov.w	r3, #0
 8006cd2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006cd6:	f7f9 ff01 	bl	8000adc <__aeabi_dcmplt>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d022      	beq.n	8006d26 <scaraInitScurve+0x3b6>
			 tc = 0;
 8006ce0:	f04f 0300 	mov.w	r3, #0
 8006ce4:	f04f 0400 	mov.w	r4, #0
 8006ce8:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
			 no_phases = 4;
 8006cec:	2304      	movs	r3, #4
 8006cee:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			 tm = sqrt(total_s/(2*a_design));
 8006cf2:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	f7f9 fac7 	bl	800028c <__adddf3>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	460c      	mov	r4, r1
 8006d02:	461a      	mov	r2, r3
 8006d04:	4623      	mov	r3, r4
 8006d06:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006d0a:	f7f9 fd9f 	bl	800084c <__aeabi_ddiv>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	460c      	mov	r4, r1
 8006d12:	ec44 3b17 	vmov	d7, r3, r4
 8006d16:	eeb0 0a47 	vmov.f32	s0, s14
 8006d1a:	eef0 0a67 	vmov.f32	s1, s15
 8006d1e:	f012 fbdd 	bl	80194dc <sqrt>
 8006d22:	ed87 0b2e 	vstr	d0, [r7, #184]	; 0xb8
		 }
		 if (tm < 0.001) {
 8006d26:	a31c      	add	r3, pc, #112	; (adr r3, 8006d98 <scaraInitScurve+0x428>)
 8006d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8006d30:	f7f9 fed4 	bl	8000adc <__aeabi_dcmplt>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d006      	beq.n	8006d48 <scaraInitScurve+0x3d8>
			 j_max = 0;
 8006d3a:	f04f 0300 	mov.w	r3, #0
 8006d3e:	f04f 0400 	mov.w	r4, #0
 8006d42:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
 8006d46:	e009      	b.n	8006d5c <scaraInitScurve+0x3ec>
		 } else {
			 j_max = a_design/tm;
 8006d48:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006d4c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8006d50:	f7f9 fd7c 	bl	800084c <__aeabi_ddiv>
 8006d54:	4603      	mov	r3, r0
 8006d56:	460c      	mov	r4, r1
 8006d58:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
		 }
		 v_lim = a_design*tm;
 8006d5c:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006d60:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8006d64:	f7f9 fc48 	bl	80005f8 <__aeabi_dmul>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	460c      	mov	r4, r1
 8006d6c:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
		 tf    = 4*tm + tc;
 8006d70:	f04f 0200 	mov.w	r2, #0
 8006d74:	4b0e      	ldr	r3, [pc, #56]	; (8006db0 <scaraInitScurve+0x440>)
 8006d76:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8006d7a:	f7f9 fc3d 	bl	80005f8 <__aeabi_dmul>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	460c      	mov	r4, r1
 8006d82:	461a      	mov	r2, r3
 8006d84:	4623      	mov	r3, r4
 8006d86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006d8a:	f7f9 fa7f 	bl	800028c <__adddf3>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	460c      	mov	r4, r1
 8006d92:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
 8006d96:	e039      	b.n	8006e0c <scaraInitScurve+0x49c>
 8006d98:	d2f1a9fc 	.word	0xd2f1a9fc
 8006d9c:	3f50624d 	.word	0x3f50624d
 8006da0:	9abcaf48 	.word	0x9abcaf48
 8006da4:	3e7ad7f2 	.word	0x3e7ad7f2
 8006da8:	bff00000 	.word	0xbff00000
 8006dac:	3ff00000 	.word	0x3ff00000
 8006db0:	40100000 	.word	0x40100000
 8006db4:	00000000 	.word	0x00000000
 8006db8:	405c2000 	.word	0x405c2000
 8006dbc:	14000000 	.word	0x14000000
 8006dc0:	4000f6f0 	.word	0x4000f6f0
 8006dc4:	6b259425 	.word	0x6b259425
 8006dc8:	40069b91 	.word	0x40069b91
	 } else {
		 j_max = 0;
 8006dcc:	f04f 0300 	mov.w	r3, #0
 8006dd0:	f04f 0400 	mov.w	r4, #0
 8006dd4:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
		 tc = 0;
 8006dd8:	f04f 0300 	mov.w	r3, #0
 8006ddc:	f04f 0400 	mov.w	r4, #0
 8006de0:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
		 no_phases = 4;
 8006de4:	2304      	movs	r3, #4
 8006de6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		 tm = tf / 4;
 8006dea:	f04f 0200 	mov.w	r2, #0
 8006dee:	4ba0      	ldr	r3, [pc, #640]	; (8007070 <scaraInitScurve+0x700>)
 8006df0:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8006df4:	f7f9 fd2a 	bl	800084c <__aeabi_ddiv>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	460c      	mov	r4, r1
 8006dfc:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		 v_lim = 0;
 8006e00:	f04f 0300 	mov.w	r3, #0
 8006e04:	f04f 0400 	mov.w	r4, #0
 8006e08:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
	 }

	 no_sample = ceil(tf / T_SAMPLING);
 8006e0c:	a396      	add	r3, pc, #600	; (adr r3, 8007068 <scaraInitScurve+0x6f8>)
 8006e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e12:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8006e16:	f7f9 fd19 	bl	800084c <__aeabi_ddiv>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	460c      	mov	r4, r1
 8006e1e:	ec44 3b17 	vmov	d7, r3, r4
 8006e22:	eeb0 0a47 	vmov.f32	s0, s14
 8006e26:	eef0 0a67 	vmov.f32	s1, s15
 8006e2a:	f012 f9bd 	bl	80191a8 <ceil>
 8006e2e:	ec54 3b10 	vmov	r3, r4, d0
 8006e32:	4618      	mov	r0, r3
 8006e34:	4621      	mov	r1, r4
 8006e36:	f7f9 feb7 	bl	8000ba8 <__aeabi_d2uiz>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	667b      	str	r3, [r7, #100]	; 0x64
	 v_1 = 0.5*j_max*tm*tm;
 8006e3e:	f04f 0200 	mov.w	r2, #0
 8006e42:	4b8c      	ldr	r3, [pc, #560]	; (8007074 <scaraInitScurve+0x704>)
 8006e44:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8006e48:	f7f9 fbd6 	bl	80005f8 <__aeabi_dmul>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	460c      	mov	r4, r1
 8006e50:	4618      	mov	r0, r3
 8006e52:	4621      	mov	r1, r4
 8006e54:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006e58:	f7f9 fbce 	bl	80005f8 <__aeabi_dmul>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	460c      	mov	r4, r1
 8006e60:	461a      	mov	r2, r3
 8006e62:	4623      	mov	r3, r4
 8006e64:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8006e68:	f7f9 fbc6 	bl	80005f8 <__aeabi_dmul>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	460c      	mov	r4, r1
 8006e70:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	 s_1 = j_max*tm*tm*tm/6;
 8006e74:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006e78:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8006e7c:	f7f9 fbbc 	bl	80005f8 <__aeabi_dmul>
 8006e80:	4603      	mov	r3, r0
 8006e82:	460c      	mov	r4, r1
 8006e84:	4618      	mov	r0, r3
 8006e86:	4621      	mov	r1, r4
 8006e88:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006e8c:	f7f9 fbb4 	bl	80005f8 <__aeabi_dmul>
 8006e90:	4603      	mov	r3, r0
 8006e92:	460c      	mov	r4, r1
 8006e94:	4618      	mov	r0, r3
 8006e96:	4621      	mov	r1, r4
 8006e98:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006e9c:	f7f9 fbac 	bl	80005f8 <__aeabi_dmul>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	460c      	mov	r4, r1
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	4621      	mov	r1, r4
 8006ea8:	f04f 0200 	mov.w	r2, #0
 8006eac:	4b72      	ldr	r3, [pc, #456]	; (8007078 <scaraInitScurve+0x708>)
 8006eae:	f7f9 fccd 	bl	800084c <__aeabi_ddiv>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	460c      	mov	r4, r1
 8006eb6:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	 v_2 = j_max*tm*tm;
 8006eba:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006ebe:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8006ec2:	f7f9 fb99 	bl	80005f8 <__aeabi_dmul>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	460c      	mov	r4, r1
 8006eca:	461a      	mov	r2, r3
 8006ecc:	4623      	mov	r3, r4
 8006ece:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8006ed2:	f7f9 fb91 	bl	80005f8 <__aeabi_dmul>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	460c      	mov	r4, r1
 8006eda:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	 s_2 = v_2*tm;
 8006ede:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006ee2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006ee6:	f7f9 fb87 	bl	80005f8 <__aeabi_dmul>
 8006eea:	4603      	mov	r3, r0
 8006eec:	460c      	mov	r4, r1
 8006eee:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
	 v_3 = v_2;
 8006ef2:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8006ef6:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	 s_3 = s_2 + v_2*tc;
 8006efa:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8006efe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006f02:	f7f9 fb79 	bl	80005f8 <__aeabi_dmul>
 8006f06:	4603      	mov	r3, r0
 8006f08:	460c      	mov	r4, r1
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	4623      	mov	r3, r4
 8006f0e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006f12:	f7f9 f9bb 	bl	800028c <__adddf3>
 8006f16:	4603      	mov	r3, r0
 8006f18:	460c      	mov	r4, r1
 8006f1a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	 v_4 = v_1;
 8006f1e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8006f22:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	 s_4 = s_3 + s_2 - s_1;
 8006f26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006f2a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006f2e:	f7f9 f9ad 	bl	800028c <__adddf3>
 8006f32:	4603      	mov	r3, r0
 8006f34:	460c      	mov	r4, r1
 8006f36:	4618      	mov	r0, r3
 8006f38:	4621      	mov	r1, r4
 8006f3a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006f3e:	f7f9 f9a3 	bl	8000288 <__aeabi_dsub>
 8006f42:	4603      	mov	r3, r0
 8006f44:	460c      	mov	r4, r1
 8006f46:	e9c7 3408 	strd	r3, r4, [r7, #32]

	 scurve->Tc = tc;
 8006f4a:	69fa      	ldr	r2, [r7, #28]
 8006f4c:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8006f50:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	 scurve->Tf = tf;
 8006f54:	69fa      	ldr	r2, [r7, #28]
 8006f56:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8006f5a:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	 scurve->Tm = tm;
 8006f5e:	69fa      	ldr	r2, [r7, #28]
 8006f60:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8006f64:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	 scurve->a_design = a_design;
 8006f68:	69fa      	ldr	r2, [r7, #28]
 8006f6a:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 8006f6e:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	 scurve->v_design = v_design;
 8006f72:	69fa      	ldr	r2, [r7, #28]
 8006f74:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8006f78:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	 scurve->v_lim = v_lim;
 8006f7c:	69fa      	ldr	r2, [r7, #28]
 8006f7e:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8006f82:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	 scurve->v0 = v0;
 8006f86:	69fa      	ldr	r2, [r7, #28]
 8006f88:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8006f8c:	e9c2 3406 	strd	r3, r4, [r2, #24]
	 scurve->v1 = v1;
 8006f90:	69fa      	ldr	r2, [r7, #28]
 8006f92:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8006f96:	e9c2 3408 	strd	r3, r4, [r2, #32]
	 scurve->j_max = j_max;
 8006f9a:	69fa      	ldr	r2, [r7, #28]
 8006f9c:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8006fa0:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	 scurve->s0   = q0;
 8006fa4:	69fa      	ldr	r2, [r7, #28]
 8006fa6:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8006faa:	e9c2 3402 	strd	r3, r4, [r2, #8]
	 scurve->s1   = q1;
 8006fae:	69fa      	ldr	r2, [r7, #28]
 8006fb0:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8006fb4:	e9c2 3404 	strd	r3, r4, [r2, #16]
	 scurve->num_of_phase = no_phases;
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 8006fbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	 scurve->num_of_sampling = no_sample;
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006fc6:	669a      	str	r2, [r3, #104]	; 0x68
	 scurve->total_s = total_s;
 8006fc8:	69fa      	ldr	r2, [r7, #28]
 8006fca:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006fce:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	 scurve->dir = dir;
 8006fd2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8006fd6:	f7f9 fdbf 	bl	8000b58 <__aeabi_d2iz>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	b25a      	sxtb	r2, r3
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	701a      	strb	r2, [r3, #0]

	 scurve->a_current = 0;
 8006fe2:	69fa      	ldr	r2, [r7, #28]
 8006fe4:	f04f 0300 	mov.w	r3, #0
 8006fe8:	f04f 0400 	mov.w	r4, #0
 8006fec:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
	 scurve->v_current = 0;
 8006ff0:	69fa      	ldr	r2, [r7, #28]
 8006ff2:	f04f 0300 	mov.w	r3, #0
 8006ff6:	f04f 0400 	mov.w	r4, #0
 8006ffa:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
	 scurve->s_current = 0;
 8006ffe:	69fa      	ldr	r2, [r7, #28]
 8007000:	f04f 0300 	mov.w	r3, #0
 8007004:	f04f 0400 	mov.w	r4, #0
 8007008:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
	 scurve->v_1 = v_1;
 800700c:	69fa      	ldr	r2, [r7, #28]
 800700e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8007012:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	 scurve->v_2 = v_2;
 8007016:	69fa      	ldr	r2, [r7, #28]
 8007018:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800701c:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
	 scurve->v_3 = v_3;
 8007020:	69fa      	ldr	r2, [r7, #28]
 8007022:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8007026:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
	 scurve->v_4 = v_4;
 800702a:	69fa      	ldr	r2, [r7, #28]
 800702c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8007030:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
	 scurve->s_1 = s_1;
 8007034:	69fa      	ldr	r2, [r7, #28]
 8007036:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800703a:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	 scurve->s_2 = s_2;
 800703e:	69fa      	ldr	r2, [r7, #28]
 8007040:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8007044:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
	 scurve->s_3 = s_3;
 8007048:	69fa      	ldr	r2, [r7, #28]
 800704a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800704e:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0
	 scurve->s_4 = s_4;
 8007052:	69fa      	ldr	r2, [r7, #28]
 8007054:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8007058:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0

	 return SCARA_STATUS_OK;
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	37e8      	adds	r7, #232	; 0xe8
 8007062:	46bd      	mov	sp, r7
 8007064:	bdb0      	pop	{r4, r5, r7, pc}
 8007066:	bf00      	nop
 8007068:	40000000 	.word	0x40000000
 800706c:	3f847ae1 	.word	0x3f847ae1
 8007070:	40100000 	.word	0x40100000
 8007074:	3fe00000 	.word	0x3fe00000
 8007078:	40180000 	.word	0x40180000

0800707c <scaraFlowDuty>:

/* Compute new x, y , z, theta1, theta2 , d3, theta4 corresponding to time */
SCARA_StatusTypeDef	scaraFlowDuty		(double time,
										SCARA_PositionTypeDef *pos_Next ,
										SCARA_PositionTypeDef pos_Current) {
 800707c:	b082      	sub	sp, #8
 800707e:	b5b0      	push	{r4, r5, r7, lr}
 8007080:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8007084:	af2c      	add	r7, sp, #176	; 0xb0
 8007086:	f107 0108 	add.w	r1, r7, #8
 800708a:	ed81 0b00 	vstr	d0, [r1]
 800708e:	1d39      	adds	r1, r7, #4
 8007090:	6008      	str	r0, [r1, #0]
 8007092:	f507 71b4 	add.w	r1, r7, #360	; 0x168
 8007096:	e881 000c 	stmia.w	r1, {r2, r3}
	SCARA_StatusTypeDef status1, status2, status3, status4;
	SCARA_PositionTypeDef	positionCompute;
	// Update time
	positionCompute.t = time;
 800709a:	f107 0210 	add.w	r2, r7, #16
 800709e:	f107 0308 	add.w	r3, r7, #8
 80070a2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80070a6:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	/*---- Task space ----*/
	if ( DUTY_SPACE_TASK == myDUTY.space_type) {
 80070aa:	4b92      	ldr	r3, [pc, #584]	; (80072f4 <scaraFlowDuty+0x278>)
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	f040 812e 	bne.w	8007310 <scaraFlowDuty+0x294>
		double s, angle, x, y, z, v, v_angle;
		int8_t	dir_roll;
		//---Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.task.trajectory_3d.trajectory_type) {
 80070b4:	4b8f      	ldr	r3, [pc, #572]	; (80072f4 <scaraFlowDuty+0x278>)
 80070b6:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d12d      	bne.n	800711a <scaraFlowDuty+0x9e>
			status1 = scaraFlowLSPB(&(myDUTY.task.trajectory_3d.lspb), time);
 80070be:	f107 0308 	add.w	r3, r7, #8
 80070c2:	ed93 0b00 	vldr	d0, [r3]
 80070c6:	488c      	ldr	r0, [pc, #560]	; (80072f8 <scaraFlowDuty+0x27c>)
 80070c8:	f000 fc46 	bl	8007958 <scaraFlowLSPB>
 80070cc:	4603      	mov	r3, r0
 80070ce:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
			status2 = scaraFlowLSPB(&(myDUTY.task.trajectory_roll.lspb), time);
 80070d2:	f107 0308 	add.w	r3, r7, #8
 80070d6:	ed93 0b00 	vldr	d0, [r3]
 80070da:	4888      	ldr	r0, [pc, #544]	; (80072fc <scaraFlowDuty+0x280>)
 80070dc:	f000 fc3c 	bl	8007958 <scaraFlowLSPB>
 80070e0:	4603      	mov	r3, r0
 80070e2:	f887 3156 	strb.w	r3, [r7, #342]	; 0x156
			s = myDUTY.task.trajectory_3d.lspb.s_current;
 80070e6:	4b83      	ldr	r3, [pc, #524]	; (80072f4 <scaraFlowDuty+0x278>)
 80070e8:	e9d3 3464 	ldrd	r3, r4, [r3, #400]	; 0x190
 80070ec:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			v = myDUTY.task.trajectory_3d.lspb.v_current;
 80070f0:	4b80      	ldr	r3, [pc, #512]	; (80072f4 <scaraFlowDuty+0x278>)
 80070f2:	e9d3 3462 	ldrd	r3, r4, [r3, #392]	; 0x188
 80070f6:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
			angle = myDUTY.task.trajectory_roll.lspb.s_current;
 80070fa:	4b7e      	ldr	r3, [pc, #504]	; (80072f4 <scaraFlowDuty+0x278>)
 80070fc:	e9d3 34ba 	ldrd	r3, r4, [r3, #744]	; 0x2e8
 8007100:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			v_angle = myDUTY.task.trajectory_roll.lspb.v_current;
 8007104:	4b7b      	ldr	r3, [pc, #492]	; (80072f4 <scaraFlowDuty+0x278>)
 8007106:	e9d3 34b8 	ldrd	r3, r4, [r3, #736]	; 0x2e0
 800710a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
			dir_roll = myDUTY.task.trajectory_roll.lspb.dir;
 800710e:	4b79      	ldr	r3, [pc, #484]	; (80072f4 <scaraFlowDuty+0x278>)
 8007110:	f893 3270 	ldrb.w	r3, [r3, #624]	; 0x270
 8007114:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8007118:	e034      	b.n	8007184 <scaraFlowDuty+0x108>
			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.task.trajectory_3d.trajectory_type) {
 800711a:	4b76      	ldr	r3, [pc, #472]	; (80072f4 <scaraFlowDuty+0x278>)
 800711c:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8007120:	2b01      	cmp	r3, #1
 8007122:	d12d      	bne.n	8007180 <scaraFlowDuty+0x104>
			status1 = scaraFLowScurve(&(myDUTY.task.trajectory_3d.scurve), time);
 8007124:	f107 0308 	add.w	r3, r7, #8
 8007128:	ed93 0b00 	vldr	d0, [r3]
 800712c:	4874      	ldr	r0, [pc, #464]	; (8007300 <scaraFlowDuty+0x284>)
 800712e:	f000 fdbf 	bl	8007cb0 <scaraFLowScurve>
 8007132:	4603      	mov	r3, r0
 8007134:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
			status2 = scaraFLowScurve(&(myDUTY.task.trajectory_roll.scurve), time);
 8007138:	f107 0308 	add.w	r3, r7, #8
 800713c:	ed93 0b00 	vldr	d0, [r3]
 8007140:	4870      	ldr	r0, [pc, #448]	; (8007304 <scaraFlowDuty+0x288>)
 8007142:	f000 fdb5 	bl	8007cb0 <scaraFLowScurve>
 8007146:	4603      	mov	r3, r0
 8007148:	f887 3156 	strb.w	r3, [r7, #342]	; 0x156
			s = myDUTY.task.trajectory_3d.scurve.s_current;
 800714c:	4b69      	ldr	r3, [pc, #420]	; (80072f4 <scaraFlowDuty+0x278>)
 800714e:	e9d3 3498 	ldrd	r3, r4, [r3, #608]	; 0x260
 8007152:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			v = myDUTY.task.trajectory_3d.scurve.v_current;
 8007156:	4b67      	ldr	r3, [pc, #412]	; (80072f4 <scaraFlowDuty+0x278>)
 8007158:	e9d3 3496 	ldrd	r3, r4, [r3, #600]	; 0x258
 800715c:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
			angle = myDUTY.task.trajectory_roll.scurve.s_current;
 8007160:	4b64      	ldr	r3, [pc, #400]	; (80072f4 <scaraFlowDuty+0x278>)
 8007162:	e9d3 34ee 	ldrd	r3, r4, [r3, #952]	; 0x3b8
 8007166:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			v_angle = myDUTY.task.trajectory_roll.scurve.v_current;
 800716a:	4b62      	ldr	r3, [pc, #392]	; (80072f4 <scaraFlowDuty+0x278>)
 800716c:	e9d3 34ec 	ldrd	r3, r4, [r3, #944]	; 0x3b0
 8007170:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
			dir_roll = myDUTY.task.trajectory_roll.scurve.dir;
 8007174:	4b5f      	ldr	r3, [pc, #380]	; (80072f4 <scaraFlowDuty+0x278>)
 8007176:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 800717a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 800717e:	e001      	b.n	8007184 <scaraFlowDuty+0x108>
		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8007180:	2305      	movs	r3, #5
 8007182:	e2ce      	b.n	8007722 <scaraFlowDuty+0x6a6>
		}

		if ( SCARA_STATUS_OK != status1) {
 8007184:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8007188:	2b00      	cmp	r3, #0
 800718a:	d002      	beq.n	8007192 <scaraFlowDuty+0x116>
			return status1;
 800718c:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8007190:	e2c7      	b.n	8007722 <scaraFlowDuty+0x6a6>
		}
		if ( SCARA_STATUS_OK != status2) {
 8007192:	f897 3156 	ldrb.w	r3, [r7, #342]	; 0x156
 8007196:	2b00      	cmp	r3, #0
 8007198:	d002      	beq.n	80071a0 <scaraFlowDuty+0x124>
			return status2;
 800719a:	f897 3156 	ldrb.w	r3, [r7, #342]	; 0x156
 800719e:	e2c0      	b.n	8007722 <scaraFlowDuty+0x6a6>
		}

		//---Path flowing
			// Straight line
		if( DUTY_PATH_LINE == myDUTY.task.path.path_type) {
 80071a0:	4b54      	ldr	r3, [pc, #336]	; (80072f4 <scaraFlowDuty+0x278>)
 80071a2:	7a1b      	ldrb	r3, [r3, #8]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d117      	bne.n	80071d8 <scaraFlowDuty+0x15c>
			status1 = scaraFlowLine(&(myDUTY.task.path.line), s);
 80071a8:	ed97 0b52 	vldr	d0, [r7, #328]	; 0x148
 80071ac:	4856      	ldr	r0, [pc, #344]	; (8007308 <scaraFlowDuty+0x28c>)
 80071ae:	f000 fac3 	bl	8007738 <scaraFlowLine>
 80071b2:	4603      	mov	r3, r0
 80071b4:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
			x = myDUTY.task.path.line.x_current;
 80071b8:	4b4e      	ldr	r3, [pc, #312]	; (80072f4 <scaraFlowDuty+0x278>)
 80071ba:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 80071be:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
			y = myDUTY.task.path.line.y_current;
 80071c2:	4b4c      	ldr	r3, [pc, #304]	; (80072f4 <scaraFlowDuty+0x278>)
 80071c4:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 80071c8:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
			z = myDUTY.task.path.line.z_current;
 80071cc:	4b49      	ldr	r3, [pc, #292]	; (80072f4 <scaraFlowDuty+0x278>)
 80071ce:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 80071d2:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
 80071d6:	e01d      	b.n	8007214 <scaraFlowDuty+0x198>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == myDUTY.task.path.path_type) {
 80071d8:	4b46      	ldr	r3, [pc, #280]	; (80072f4 <scaraFlowDuty+0x278>)
 80071da:	7a1b      	ldrb	r3, [r3, #8]
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d117      	bne.n	8007210 <scaraFlowDuty+0x194>
			status1 = scaraFlowCircle(&(myDUTY.task.path.circle), s);
 80071e0:	ed97 0b52 	vldr	d0, [r7, #328]	; 0x148
 80071e4:	4849      	ldr	r0, [pc, #292]	; (800730c <scaraFlowDuty+0x290>)
 80071e6:	f000 fb2f 	bl	8007848 <scaraFlowCircle>
 80071ea:	4603      	mov	r3, r0
 80071ec:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
			x = myDUTY.task.path.circle.x_current;
 80071f0:	4b40      	ldr	r3, [pc, #256]	; (80072f4 <scaraFlowDuty+0x278>)
 80071f2:	e9d3 343e 	ldrd	r3, r4, [r3, #248]	; 0xf8
 80071f6:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
			y = myDUTY.task.path.circle.y_current;
 80071fa:	4b3e      	ldr	r3, [pc, #248]	; (80072f4 <scaraFlowDuty+0x278>)
 80071fc:	e9d3 3440 	ldrd	r3, r4, [r3, #256]	; 0x100
 8007200:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
			z = myDUTY.task.path.circle.z_current;
 8007204:	4b3b      	ldr	r3, [pc, #236]	; (80072f4 <scaraFlowDuty+0x278>)
 8007206:	e9d3 3442 	ldrd	r3, r4, [r3, #264]	; 0x108
 800720a:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
 800720e:	e001      	b.n	8007214 <scaraFlowDuty+0x198>
		} else {
			return SCARA_STATUS_ERROR_TASK;
 8007210:	2303      	movs	r3, #3
 8007212:	e286      	b.n	8007722 <scaraFlowDuty+0x6a6>
		}

		positionCompute.x 		= x;
 8007214:	f107 0210 	add.w	r2, r7, #16
 8007218:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 800721c:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
		positionCompute.y		= y;
 8007220:	f107 0210 	add.w	r2, r7, #16
 8007224:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8007228:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
		positionCompute.z 		= z;
 800722c:	f107 0210 	add.w	r2, r7, #16
 8007230:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 8007234:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		positionCompute.roll 	= myDUTY.task.roll_start + angle*dir_roll;
 8007238:	4b2e      	ldr	r3, [pc, #184]	; (80072f4 <scaraFlowDuty+0x278>)
 800723a:	e9d3 45f0 	ldrd	r4, r5, [r3, #960]	; 0x3c0
 800723e:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8007242:	4618      	mov	r0, r3
 8007244:	f7f9 f96e 	bl	8000524 <__aeabi_i2d>
 8007248:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 800724c:	f7f9 f9d4 	bl	80005f8 <__aeabi_dmul>
 8007250:	4602      	mov	r2, r0
 8007252:	460b      	mov	r3, r1
 8007254:	4620      	mov	r0, r4
 8007256:	4629      	mov	r1, r5
 8007258:	f7f9 f818 	bl	800028c <__adddf3>
 800725c:	4603      	mov	r3, r0
 800725e:	460c      	mov	r4, r1
 8007260:	f107 0210 	add.w	r2, r7, #16
 8007264:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

		positionCompute.q		= s;
 8007268:	f107 0210 	add.w	r2, r7, #16
 800726c:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 8007270:	e9c2 3400 	strd	r3, r4, [r2]
		positionCompute.q_roll  = angle;
 8007274:	f107 0210 	add.w	r2, r7, #16
 8007278:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 800727c:	e9c2 3402 	strd	r3, r4, [r2, #8]

		positionCompute.v_3d    = v;
 8007280:	f107 0210 	add.w	r2, r7, #16
 8007284:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8007288:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
		positionCompute.v_roll  = v_angle;
 800728c:	f107 0210 	add.w	r2, r7, #16
 8007290:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 8007294:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0

		positionCompute.total_time = myDUTY.time_total;
 8007298:	4b16      	ldr	r3, [pc, #88]	; (80072f4 <scaraFlowDuty+0x278>)
 800729a:	f603 1348 	addw	r3, r3, #2376	; 0x948
 800729e:	e9d3 3400 	ldrd	r3, r4, [r3]
 80072a2:	f107 0210 	add.w	r2, r7, #16
 80072a6:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
		positionCompute.t		= time;
 80072aa:	f107 0210 	add.w	r2, r7, #16
 80072ae:	f107 0308 	add.w	r3, r7, #8
 80072b2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80072b6:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		if ( FALSE == kinematicInverse(&positionCompute, pos_Current)) {
 80072ba:	f107 0410 	add.w	r4, r7, #16
 80072be:	4668      	mov	r0, sp
 80072c0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80072c4:	22b0      	movs	r2, #176	; 0xb0
 80072c6:	4619      	mov	r1, r3
 80072c8:	f00e f9f2 	bl	80156b0 <memcpy>
 80072cc:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80072d0:	cb0c      	ldmia	r3, {r2, r3}
 80072d2:	4620      	mov	r0, r4
 80072d4:	f7fb ff38 	bl	8003148 <kinematicInverse>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d101      	bne.n	80072e2 <scaraFlowDuty+0x266>
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80072de:	2307      	movs	r3, #7
 80072e0:	e21f      	b.n	8007722 <scaraFlowDuty+0x6a6>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 80072e2:	f107 0110 	add.w	r1, r7, #16
 80072e6:	1d3b      	adds	r3, r7, #4
 80072e8:	22b8      	movs	r2, #184	; 0xb8
 80072ea:	6818      	ldr	r0, [r3, #0]
 80072ec:	f00e f9e0 	bl	80156b0 <memcpy>
 80072f0:	e216      	b.n	8007720 <scaraFlowDuty+0x6a4>
 80072f2:	bf00      	nop
 80072f4:	20005378 	.word	0x20005378
 80072f8:	20005490 	.word	0x20005490
 80072fc:	200055e8 	.word	0x200055e8
 8007300:	20005510 	.word	0x20005510
 8007304:	20005668 	.word	0x20005668
 8007308:	20005388 	.word	0x20005388
 800730c:	200053f8 	.word	0x200053f8
		}

	/*---- Joint space -----*/
	} else if (DUTY_SPACE_JOINT == myDUTY.space_type) {
 8007310:	4b8b      	ldr	r3, [pc, #556]	; (8007540 <scaraFlowDuty+0x4c4>)
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	2b01      	cmp	r3, #1
 8007316:	f040 8201 	bne.w	800771c <scaraFlowDuty+0x6a0>
		double s0, s1, s2, s3;
		double v0, v1, v2, v3;
		int8_t dir0, dir1, dir2, dir3;
		// Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.joint.trajectory[0].trajectory_type) {
 800731a:	4b89      	ldr	r3, [pc, #548]	; (8007540 <scaraFlowDuty+0x4c4>)
 800731c:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 8007320:	2b00      	cmp	r3, #0
 8007322:	d174      	bne.n	800740e <scaraFlowDuty+0x392>
			status1 = scaraFlowLSPB(&(myDUTY.joint.trajectory[0].lspb), time);
 8007324:	f107 0308 	add.w	r3, r7, #8
 8007328:	ed93 0b00 	vldr	d0, [r3]
 800732c:	4885      	ldr	r0, [pc, #532]	; (8007544 <scaraFlowDuty+0x4c8>)
 800732e:	f000 fb13 	bl	8007958 <scaraFlowLSPB>
 8007332:	4603      	mov	r3, r0
 8007334:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
			status2 = scaraFlowLSPB(&(myDUTY.joint.trajectory[1].lspb), time);
 8007338:	f107 0308 	add.w	r3, r7, #8
 800733c:	ed93 0b00 	vldr	d0, [r3]
 8007340:	4881      	ldr	r0, [pc, #516]	; (8007548 <scaraFlowDuty+0x4cc>)
 8007342:	f000 fb09 	bl	8007958 <scaraFlowLSPB>
 8007346:	4603      	mov	r3, r0
 8007348:	f887 3156 	strb.w	r3, [r7, #342]	; 0x156
			status3 = scaraFlowLSPB(&(myDUTY.joint.trajectory[2].lspb), time);
 800734c:	f107 0308 	add.w	r3, r7, #8
 8007350:	ed93 0b00 	vldr	d0, [r3]
 8007354:	487d      	ldr	r0, [pc, #500]	; (800754c <scaraFlowDuty+0x4d0>)
 8007356:	f000 faff 	bl	8007958 <scaraFlowLSPB>
 800735a:	4603      	mov	r3, r0
 800735c:	f887 3155 	strb.w	r3, [r7, #341]	; 0x155
			status4 = scaraFlowLSPB(&(myDUTY.joint.trajectory[3].lspb), time);
 8007360:	f107 0308 	add.w	r3, r7, #8
 8007364:	ed93 0b00 	vldr	d0, [r3]
 8007368:	4879      	ldr	r0, [pc, #484]	; (8007550 <scaraFlowDuty+0x4d4>)
 800736a:	f000 faf5 	bl	8007958 <scaraFlowLSPB>
 800736e:	4603      	mov	r3, r0
 8007370:	f887 3154 	strb.w	r3, [r7, #340]	; 0x154

			dir0 = myDUTY.joint.trajectory[0].lspb.dir;
 8007374:	4b72      	ldr	r3, [pc, #456]	; (8007540 <scaraFlowDuty+0x4c4>)
 8007376:	f893 33d0 	ldrb.w	r3, [r3, #976]	; 0x3d0
 800737a:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			dir1 = myDUTY.joint.trajectory[1].lspb.dir;
 800737e:	4b70      	ldr	r3, [pc, #448]	; (8007540 <scaraFlowDuty+0x4c4>)
 8007380:	f893 3528 	ldrb.w	r3, [r3, #1320]	; 0x528
 8007384:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
			dir2 = myDUTY.joint.trajectory[2].lspb.dir;
 8007388:	4b6d      	ldr	r3, [pc, #436]	; (8007540 <scaraFlowDuty+0x4c4>)
 800738a:	f893 3680 	ldrb.w	r3, [r3, #1664]	; 0x680
 800738e:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
			dir3 = myDUTY.joint.trajectory[3].lspb.dir;
 8007392:	4b6b      	ldr	r3, [pc, #428]	; (8007540 <scaraFlowDuty+0x4c4>)
 8007394:	f893 37d8 	ldrb.w	r3, [r3, #2008]	; 0x7d8
 8007398:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc

			s0 = myDUTY.joint.trajectory[0].lspb.s_current;
 800739c:	4b68      	ldr	r3, [pc, #416]	; (8007540 <scaraFlowDuty+0x4c4>)
 800739e:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 80073a2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80073a6:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
			s1 = myDUTY.joint.trajectory[1].lspb.s_current;
 80073aa:	4b65      	ldr	r3, [pc, #404]	; (8007540 <scaraFlowDuty+0x4c4>)
 80073ac:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 80073b0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80073b4:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
			s2 = myDUTY.joint.trajectory[2].lspb.s_current;
 80073b8:	4b61      	ldr	r3, [pc, #388]	; (8007540 <scaraFlowDuty+0x4c4>)
 80073ba:	f503 63df 	add.w	r3, r3, #1784	; 0x6f8
 80073be:	e9d3 3400 	ldrd	r3, r4, [r3]
 80073c2:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8
			s3 = myDUTY.joint.trajectory[3].lspb.s_current;
 80073c6:	4b5e      	ldr	r3, [pc, #376]	; (8007540 <scaraFlowDuty+0x4c4>)
 80073c8:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 80073cc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80073d0:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0

			v0 = myDUTY.joint.trajectory[0].lspb.v_current;
 80073d4:	4b5a      	ldr	r3, [pc, #360]	; (8007540 <scaraFlowDuty+0x4c4>)
 80073d6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80073da:	e9d3 3400 	ldrd	r3, r4, [r3]
 80073de:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
			v1 = myDUTY.joint.trajectory[1].lspb.v_current;
 80073e2:	4b57      	ldr	r3, [pc, #348]	; (8007540 <scaraFlowDuty+0x4c4>)
 80073e4:	f503 63b3 	add.w	r3, r3, #1432	; 0x598
 80073e8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80073ec:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			v2 = myDUTY.joint.trajectory[2].lspb.v_current;
 80073f0:	4b53      	ldr	r3, [pc, #332]	; (8007540 <scaraFlowDuty+0x4c4>)
 80073f2:	f503 63de 	add.w	r3, r3, #1776	; 0x6f0
 80073f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80073fa:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
			v3 = myDUTY.joint.trajectory[3].lspb.v_current;
 80073fe:	4b50      	ldr	r3, [pc, #320]	; (8007540 <scaraFlowDuty+0x4c4>)
 8007400:	f603 0348 	addw	r3, r3, #2120	; 0x848
 8007404:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007408:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
 800740c:	e07b      	b.n	8007506 <scaraFlowDuty+0x48a>

			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.joint.trajectory[0].trajectory_type) {
 800740e:	4b4c      	ldr	r3, [pc, #304]	; (8007540 <scaraFlowDuty+0x4c4>)
 8007410:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 8007414:	2b01      	cmp	r3, #1
 8007416:	d174      	bne.n	8007502 <scaraFlowDuty+0x486>
			status1 = scaraFLowScurve(&(myDUTY.joint.trajectory[0].scurve), time);
 8007418:	f107 0308 	add.w	r3, r7, #8
 800741c:	ed93 0b00 	vldr	d0, [r3]
 8007420:	484c      	ldr	r0, [pc, #304]	; (8007554 <scaraFlowDuty+0x4d8>)
 8007422:	f000 fc45 	bl	8007cb0 <scaraFLowScurve>
 8007426:	4603      	mov	r3, r0
 8007428:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
			status2 = scaraFLowScurve(&(myDUTY.joint.trajectory[1].scurve), time);
 800742c:	f107 0308 	add.w	r3, r7, #8
 8007430:	ed93 0b00 	vldr	d0, [r3]
 8007434:	4848      	ldr	r0, [pc, #288]	; (8007558 <scaraFlowDuty+0x4dc>)
 8007436:	f000 fc3b 	bl	8007cb0 <scaraFLowScurve>
 800743a:	4603      	mov	r3, r0
 800743c:	f887 3156 	strb.w	r3, [r7, #342]	; 0x156
			status3 = scaraFLowScurve(&(myDUTY.joint.trajectory[2].scurve), time);
 8007440:	f107 0308 	add.w	r3, r7, #8
 8007444:	ed93 0b00 	vldr	d0, [r3]
 8007448:	4844      	ldr	r0, [pc, #272]	; (800755c <scaraFlowDuty+0x4e0>)
 800744a:	f000 fc31 	bl	8007cb0 <scaraFLowScurve>
 800744e:	4603      	mov	r3, r0
 8007450:	f887 3155 	strb.w	r3, [r7, #341]	; 0x155
			status4 = scaraFLowScurve(&(myDUTY.joint.trajectory[3].scurve), time);
 8007454:	f107 0308 	add.w	r3, r7, #8
 8007458:	ed93 0b00 	vldr	d0, [r3]
 800745c:	4840      	ldr	r0, [pc, #256]	; (8007560 <scaraFlowDuty+0x4e4>)
 800745e:	f000 fc27 	bl	8007cb0 <scaraFLowScurve>
 8007462:	4603      	mov	r3, r0
 8007464:	f887 3154 	strb.w	r3, [r7, #340]	; 0x154
			dir0 = myDUTY.joint.trajectory[0].scurve.dir;
 8007468:	4b35      	ldr	r3, [pc, #212]	; (8007540 <scaraFlowDuty+0x4c4>)
 800746a:	f893 3450 	ldrb.w	r3, [r3, #1104]	; 0x450
 800746e:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			dir1 = myDUTY.joint.trajectory[1].scurve.dir;
 8007472:	4b33      	ldr	r3, [pc, #204]	; (8007540 <scaraFlowDuty+0x4c4>)
 8007474:	f893 35a8 	ldrb.w	r3, [r3, #1448]	; 0x5a8
 8007478:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
			dir2 = myDUTY.joint.trajectory[2].scurve.dir;
 800747c:	4b30      	ldr	r3, [pc, #192]	; (8007540 <scaraFlowDuty+0x4c4>)
 800747e:	f893 3700 	ldrb.w	r3, [r3, #1792]	; 0x700
 8007482:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
			dir3 = myDUTY.joint.trajectory[3].scurve.dir;
 8007486:	4b2e      	ldr	r3, [pc, #184]	; (8007540 <scaraFlowDuty+0x4c4>)
 8007488:	f893 3858 	ldrb.w	r3, [r3, #2136]	; 0x858
 800748c:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
			s0 = myDUTY.joint.trajectory[0].scurve.s_current;
 8007490:	4b2b      	ldr	r3, [pc, #172]	; (8007540 <scaraFlowDuty+0x4c4>)
 8007492:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 8007496:	e9d3 3400 	ldrd	r3, r4, [r3]
 800749a:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
			s1 = myDUTY.joint.trajectory[1].scurve.s_current;
 800749e:	4b28      	ldr	r3, [pc, #160]	; (8007540 <scaraFlowDuty+0x4c4>)
 80074a0:	f503 63ce 	add.w	r3, r3, #1648	; 0x670
 80074a4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80074a8:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
			s2 = myDUTY.joint.trajectory[2].scurve.s_current;
 80074ac:	4b24      	ldr	r3, [pc, #144]	; (8007540 <scaraFlowDuty+0x4c4>)
 80074ae:	f503 63f9 	add.w	r3, r3, #1992	; 0x7c8
 80074b2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80074b6:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8
			s3 = myDUTY.joint.trajectory[3].scurve.s_current;
 80074ba:	4b21      	ldr	r3, [pc, #132]	; (8007540 <scaraFlowDuty+0x4c4>)
 80074bc:	f503 6312 	add.w	r3, r3, #2336	; 0x920
 80074c0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80074c4:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0

			v0 = myDUTY.joint.trajectory[0].scurve.v_current;
 80074c8:	4b1d      	ldr	r3, [pc, #116]	; (8007540 <scaraFlowDuty+0x4c4>)
 80074ca:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80074ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 80074d2:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
			v1 = myDUTY.joint.trajectory[1].scurve.v_current;
 80074d6:	4b1a      	ldr	r3, [pc, #104]	; (8007540 <scaraFlowDuty+0x4c4>)
 80074d8:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 80074dc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80074e0:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			v2 = myDUTY.joint.trajectory[2].scurve.v_current;
 80074e4:	4b16      	ldr	r3, [pc, #88]	; (8007540 <scaraFlowDuty+0x4c4>)
 80074e6:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 80074ea:	e9d3 3400 	ldrd	r3, r4, [r3]
 80074ee:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
			v3 = myDUTY.joint.trajectory[3].scurve.v_current;
 80074f2:	4b13      	ldr	r3, [pc, #76]	; (8007540 <scaraFlowDuty+0x4c4>)
 80074f4:	f603 1318 	addw	r3, r3, #2328	; 0x918
 80074f8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80074fc:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
 8007500:	e001      	b.n	8007506 <scaraFlowDuty+0x48a>

		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8007502:	2305      	movs	r3, #5
 8007504:	e10d      	b.n	8007722 <scaraFlowDuty+0x6a6>
		}
		// Check init status
		if ( SCARA_STATUS_OK != status1) {
 8007506:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 800750a:	2b00      	cmp	r3, #0
 800750c:	d002      	beq.n	8007514 <scaraFlowDuty+0x498>
			return status1;
 800750e:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8007512:	e106      	b.n	8007722 <scaraFlowDuty+0x6a6>
		}
		if ( SCARA_STATUS_OK != status2) {
 8007514:	f897 3156 	ldrb.w	r3, [r7, #342]	; 0x156
 8007518:	2b00      	cmp	r3, #0
 800751a:	d002      	beq.n	8007522 <scaraFlowDuty+0x4a6>
			return status2;
 800751c:	f897 3156 	ldrb.w	r3, [r7, #342]	; 0x156
 8007520:	e0ff      	b.n	8007722 <scaraFlowDuty+0x6a6>
		}
		if ( SCARA_STATUS_OK != status3) {
 8007522:	f897 3155 	ldrb.w	r3, [r7, #341]	; 0x155
 8007526:	2b00      	cmp	r3, #0
 8007528:	d002      	beq.n	8007530 <scaraFlowDuty+0x4b4>
			return status3;
 800752a:	f897 3155 	ldrb.w	r3, [r7, #341]	; 0x155
 800752e:	e0f8      	b.n	8007722 <scaraFlowDuty+0x6a6>
		}
		if ( SCARA_STATUS_OK != status4) {
 8007530:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8007534:	2b00      	cmp	r3, #0
 8007536:	d015      	beq.n	8007564 <scaraFlowDuty+0x4e8>
			return status4;
 8007538:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800753c:	e0f1      	b.n	8007722 <scaraFlowDuty+0x6a6>
 800753e:	bf00      	nop
 8007540:	20005378 	.word	0x20005378
 8007544:	20005748 	.word	0x20005748
 8007548:	200058a0 	.word	0x200058a0
 800754c:	200059f8 	.word	0x200059f8
 8007550:	20005b50 	.word	0x20005b50
 8007554:	200057c8 	.word	0x200057c8
 8007558:	20005920 	.word	0x20005920
 800755c:	20005a78 	.word	0x20005a78
 8007560:	20005bd0 	.word	0x20005bd0
		}

		positionCompute.Theta1 	= myDUTY.joint.theta1_start + s0*dir0;
 8007564:	4b73      	ldr	r3, [pc, #460]	; (8007734 <scaraFlowDuty+0x6b8>)
 8007566:	f603 1328 	addw	r3, r3, #2344	; 0x928
 800756a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800756e:	f997 30cf 	ldrsb.w	r3, [r7, #207]	; 0xcf
 8007572:	4618      	mov	r0, r3
 8007574:	f7f8 ffd6 	bl	8000524 <__aeabi_i2d>
 8007578:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800757c:	f7f9 f83c 	bl	80005f8 <__aeabi_dmul>
 8007580:	4602      	mov	r2, r0
 8007582:	460b      	mov	r3, r1
 8007584:	4620      	mov	r0, r4
 8007586:	4629      	mov	r1, r5
 8007588:	f7f8 fe80 	bl	800028c <__adddf3>
 800758c:	4603      	mov	r3, r0
 800758e:	460c      	mov	r4, r1
 8007590:	f107 0210 	add.w	r2, r7, #16
 8007594:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		positionCompute.Theta2 	= myDUTY.joint.theta2_start + s1*dir1;
 8007598:	4b66      	ldr	r3, [pc, #408]	; (8007734 <scaraFlowDuty+0x6b8>)
 800759a:	f503 6313 	add.w	r3, r3, #2352	; 0x930
 800759e:	e9d3 4500 	ldrd	r4, r5, [r3]
 80075a2:	f997 30ce 	ldrsb.w	r3, [r7, #206]	; 0xce
 80075a6:	4618      	mov	r0, r3
 80075a8:	f7f8 ffbc 	bl	8000524 <__aeabi_i2d>
 80075ac:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 80075b0:	f7f9 f822 	bl	80005f8 <__aeabi_dmul>
 80075b4:	4602      	mov	r2, r0
 80075b6:	460b      	mov	r3, r1
 80075b8:	4620      	mov	r0, r4
 80075ba:	4629      	mov	r1, r5
 80075bc:	f7f8 fe66 	bl	800028c <__adddf3>
 80075c0:	4603      	mov	r3, r0
 80075c2:	460c      	mov	r4, r1
 80075c4:	f107 0210 	add.w	r2, r7, #16
 80075c8:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		positionCompute.D3 		= myDUTY.joint.d3_start 	+ s2*dir2;
 80075cc:	4b59      	ldr	r3, [pc, #356]	; (8007734 <scaraFlowDuty+0x6b8>)
 80075ce:	f603 1338 	addw	r3, r3, #2360	; 0x938
 80075d2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80075d6:	f997 30cd 	ldrsb.w	r3, [r7, #205]	; 0xcd
 80075da:	4618      	mov	r0, r3
 80075dc:	f7f8 ffa2 	bl	8000524 <__aeabi_i2d>
 80075e0:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 80075e4:	f7f9 f808 	bl	80005f8 <__aeabi_dmul>
 80075e8:	4602      	mov	r2, r0
 80075ea:	460b      	mov	r3, r1
 80075ec:	4620      	mov	r0, r4
 80075ee:	4629      	mov	r1, r5
 80075f0:	f7f8 fe4c 	bl	800028c <__adddf3>
 80075f4:	4603      	mov	r3, r0
 80075f6:	460c      	mov	r4, r1
 80075f8:	f107 0210 	add.w	r2, r7, #16
 80075fc:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		positionCompute.Theta4 	= myDUTY.joint.theta4_start + s3*dir3;
 8007600:	4b4c      	ldr	r3, [pc, #304]	; (8007734 <scaraFlowDuty+0x6b8>)
 8007602:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 8007606:	e9d3 4500 	ldrd	r4, r5, [r3]
 800760a:	f997 30cc 	ldrsb.w	r3, [r7, #204]	; 0xcc
 800760e:	4618      	mov	r0, r3
 8007610:	f7f8 ff88 	bl	8000524 <__aeabi_i2d>
 8007614:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8007618:	f7f8 ffee 	bl	80005f8 <__aeabi_dmul>
 800761c:	4602      	mov	r2, r0
 800761e:	460b      	mov	r3, r1
 8007620:	4620      	mov	r0, r4
 8007622:	4629      	mov	r1, r5
 8007624:	f7f8 fe32 	bl	800028c <__adddf3>
 8007628:	4603      	mov	r3, r0
 800762a:	460c      	mov	r4, r1
 800762c:	f107 0210 	add.w	r2, r7, #16
 8007630:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

		positionCompute.v_theta1 	= v0;
 8007634:	f107 0210 	add.w	r2, r7, #16
 8007638:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 800763c:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		positionCompute.v_theta2 	= v1;
 8007640:	f107 0210 	add.w	r2, r7, #16
 8007644:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8007648:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
		positionCompute.v_d3 		= v2;
 800764c:	f107 0210 	add.w	r2, r7, #16
 8007650:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 8007654:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
		positionCompute.v_theta4 	= v3;
 8007658:	f107 0210 	add.w	r2, r7, #16
 800765c:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8007660:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0

		positionCompute.q_theta1 = s0;
 8007664:	f107 0210 	add.w	r2, r7, #16
 8007668:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 800766c:	e9c2 3404 	strd	r3, r4, [r2, #16]
		positionCompute.q_theta2 = s1;
 8007670:	f107 0210 	add.w	r2, r7, #16
 8007674:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8007678:	e9c2 3406 	strd	r3, r4, [r2, #24]
		positionCompute.q_d3	 = s2;
 800767c:	f107 0210 	add.w	r2, r7, #16
 8007680:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 8007684:	e9c2 3408 	strd	r3, r4, [r2, #32]
		positionCompute.q_theta4 = s3;
 8007688:	f107 0210 	add.w	r2, r7, #16
 800768c:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8007690:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

		positionCompute.total_time = myDUTY.time_total;
 8007694:	4b27      	ldr	r3, [pc, #156]	; (8007734 <scaraFlowDuty+0x6b8>)
 8007696:	f603 1348 	addw	r3, r3, #2376	; 0x948
 800769a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800769e:	f107 0210 	add.w	r2, r7, #16
 80076a2:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
		positionCompute.t		= time;
 80076a6:	f107 0210 	add.w	r2, r7, #16
 80076aa:	f107 0308 	add.w	r3, r7, #8
 80076ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80076b2:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		// Check workspace
		if( SCARA_STATUS_OK != scaraCheckWorkSpace4(positionCompute.Theta1,
 80076b6:	f107 0310 	add.w	r3, r7, #16
 80076ba:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80076be:	f107 0310 	add.w	r3, r7, #16
 80076c2:	ed93 6b1c 	vldr	d6, [r3, #112]	; 0x70
 80076c6:	f107 0310 	add.w	r3, r7, #16
 80076ca:	ed93 5b1e 	vldr	d5, [r3, #120]	; 0x78
 80076ce:	f107 0310 	add.w	r3, r7, #16
 80076d2:	ed93 4b20 	vldr	d4, [r3, #128]	; 0x80
 80076d6:	eeb0 3a44 	vmov.f32	s6, s8
 80076da:	eef0 3a64 	vmov.f32	s7, s9
 80076de:	eeb0 2a45 	vmov.f32	s4, s10
 80076e2:	eef0 2a65 	vmov.f32	s5, s11
 80076e6:	eeb0 1a46 	vmov.f32	s2, s12
 80076ea:	eef0 1a66 	vmov.f32	s3, s13
 80076ee:	eeb0 0a47 	vmov.f32	s0, s14
 80076f2:	eef0 0a67 	vmov.f32	s1, s15
 80076f6:	f001 f9bf 	bl	8008a78 <scaraCheckWorkSpace4>
 80076fa:	4603      	mov	r3, r0
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d001      	beq.n	8007704 <scaraFlowDuty+0x688>
							 	 	 	  positionCompute.Theta2,
										  positionCompute.D3,
										  positionCompute.Theta4)) {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8007700:	2307      	movs	r3, #7
 8007702:	e00e      	b.n	8007722 <scaraFlowDuty+0x6a6>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 8007704:	f107 0110 	add.w	r1, r7, #16
 8007708:	1d3b      	adds	r3, r7, #4
 800770a:	22b8      	movs	r2, #184	; 0xb8
 800770c:	6818      	ldr	r0, [r3, #0]
 800770e:	f00d ffcf 	bl	80156b0 <memcpy>
		}
		kinematicForward(pos_Next);
 8007712:	1d3b      	adds	r3, r7, #4
 8007714:	6818      	ldr	r0, [r3, #0]
 8007716:	f7fb fbdb 	bl	8002ed0 <kinematicForward>
 800771a:	e001      	b.n	8007720 <scaraFlowDuty+0x6a4>

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 800771c:	2302      	movs	r3, #2
 800771e:	e000      	b.n	8007722 <scaraFlowDuty+0x6a6>
	}

	return SCARA_STATUS_OK;
 8007720:	2300      	movs	r3, #0
}
 8007722:	4618      	mov	r0, r3
 8007724:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8007728:	46bd      	mov	sp, r7
 800772a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800772e:	b002      	add	sp, #8
 8007730:	4770      	bx	lr
 8007732:	bf00      	nop
 8007734:	20005378 	.word	0x20005378

08007738 <scaraFlowLine>:

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowLine		(Path_Line_TypeDef *line, double s) {
 8007738:	b5b0      	push	{r4, r5, r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	ed87 0b00 	vstr	d0, [r7]
	// Avoid div with 0
	if ( line->total_s > 0.01) {
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800774a:	a33d      	add	r3, pc, #244	; (adr r3, 8007840 <scaraFlowLine+0x108>)
 800774c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007750:	f7f9 f9e2 	bl	8000b18 <__aeabi_dcmpgt>
 8007754:	4603      	mov	r3, r0
 8007756:	2b00      	cmp	r3, #0
 8007758:	d05a      	beq.n	8007810 <scaraFlowLine+0xd8>
		line->x_current	 = line->x0 + line->denta_x*s/line->total_s;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8007766:	e9d7 2300 	ldrd	r2, r3, [r7]
 800776a:	f7f8 ff45 	bl	80005f8 <__aeabi_dmul>
 800776e:	4602      	mov	r2, r0
 8007770:	460b      	mov	r3, r1
 8007772:	4610      	mov	r0, r2
 8007774:	4619      	mov	r1, r3
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800777c:	f7f9 f866 	bl	800084c <__aeabi_ddiv>
 8007780:	4602      	mov	r2, r0
 8007782:	460b      	mov	r3, r1
 8007784:	4620      	mov	r0, r4
 8007786:	4629      	mov	r1, r5
 8007788:	f7f8 fd80 	bl	800028c <__adddf3>
 800778c:	4603      	mov	r3, r0
 800778e:	460c      	mov	r4, r1
 8007790:	68fa      	ldr	r2, [r7, #12]
 8007792:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		line->y_current	 = line->y0 + line->denta_y*s/line->total_s;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80077a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077a6:	f7f8 ff27 	bl	80005f8 <__aeabi_dmul>
 80077aa:	4602      	mov	r2, r0
 80077ac:	460b      	mov	r3, r1
 80077ae:	4610      	mov	r0, r2
 80077b0:	4619      	mov	r1, r3
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80077b8:	f7f9 f848 	bl	800084c <__aeabi_ddiv>
 80077bc:	4602      	mov	r2, r0
 80077be:	460b      	mov	r3, r1
 80077c0:	4620      	mov	r0, r4
 80077c2:	4629      	mov	r1, r5
 80077c4:	f7f8 fd62 	bl	800028c <__adddf3>
 80077c8:	4603      	mov	r3, r0
 80077ca:	460c      	mov	r4, r1
 80077cc:	68fa      	ldr	r2, [r7, #12]
 80077ce:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
		line->z_current	 = line->z0 + line->denta_z*s/line->total_s;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80077de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077e2:	f7f8 ff09 	bl	80005f8 <__aeabi_dmul>
 80077e6:	4602      	mov	r2, r0
 80077e8:	460b      	mov	r3, r1
 80077ea:	4610      	mov	r0, r2
 80077ec:	4619      	mov	r1, r3
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80077f4:	f7f9 f82a 	bl	800084c <__aeabi_ddiv>
 80077f8:	4602      	mov	r2, r0
 80077fa:	460b      	mov	r3, r1
 80077fc:	4620      	mov	r0, r4
 80077fe:	4629      	mov	r1, r5
 8007800:	f7f8 fd44 	bl	800028c <__adddf3>
 8007804:	4603      	mov	r3, r0
 8007806:	460c      	mov	r4, r1
 8007808:	68fa      	ldr	r2, [r7, #12]
 800780a:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
 800780e:	e011      	b.n	8007834 <scaraFlowLine+0xfc>
	} else {
		line->x_current = line->x1;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8007816:	68fa      	ldr	r2, [r7, #12]
 8007818:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		line->y_current = line->y1;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8007822:	68fa      	ldr	r2, [r7, #12]
 8007824:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
		line->z_current = line->z1;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 800782e:	68fa      	ldr	r2, [r7, #12]
 8007830:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	}

	return SCARA_STATUS_OK;
 8007834:	2300      	movs	r3, #0
}
 8007836:	4618      	mov	r0, r3
 8007838:	3710      	adds	r7, #16
 800783a:	46bd      	mov	sp, r7
 800783c:	bdb0      	pop	{r4, r5, r7, pc}
 800783e:	bf00      	nop
 8007840:	47ae147b 	.word	0x47ae147b
 8007844:	3f847ae1 	.word	0x3f847ae1

08007848 <scaraFlowCircle>:

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowCircle		(Path_Circle_TypeDef *circle, double s) {
 8007848:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800784c:	b086      	sub	sp, #24
 800784e:	af00      	add	r7, sp, #0
 8007850:	60f8      	str	r0, [r7, #12]
 8007852:	ed87 0b00 	vstr	d0, [r7]
	double angle;
	angle = s/(circle->radius);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800785c:	461a      	mov	r2, r3
 800785e:	4623      	mov	r3, r4
 8007860:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007864:	f7f8 fff2 	bl	800084c <__aeabi_ddiv>
 8007868:	4603      	mov	r3, r0
 800786a:	460c      	mov	r4, r1
 800786c:	e9c7 3404 	strd	r3, r4, [r7, #16]
	circle->x_current = circle->xi + circle->radius*cos(circle->angle_start + circle->dir*angle);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f993 3000 	ldrsb.w	r3, [r3]
 8007888:	4618      	mov	r0, r3
 800788a:	f7f8 fe4b 	bl	8000524 <__aeabi_i2d>
 800788e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007892:	f7f8 feb1 	bl	80005f8 <__aeabi_dmul>
 8007896:	4602      	mov	r2, r0
 8007898:	460b      	mov	r3, r1
 800789a:	4650      	mov	r0, sl
 800789c:	4659      	mov	r1, fp
 800789e:	f7f8 fcf5 	bl	800028c <__adddf3>
 80078a2:	4602      	mov	r2, r0
 80078a4:	460b      	mov	r3, r1
 80078a6:	ec43 2b17 	vmov	d7, r2, r3
 80078aa:	eeb0 0a47 	vmov.f32	s0, s14
 80078ae:	eef0 0a67 	vmov.f32	s1, s15
 80078b2:	f011 fcf9 	bl	80192a8 <cos>
 80078b6:	ec53 2b10 	vmov	r2, r3, d0
 80078ba:	4640      	mov	r0, r8
 80078bc:	4649      	mov	r1, r9
 80078be:	f7f8 fe9b 	bl	80005f8 <__aeabi_dmul>
 80078c2:	4602      	mov	r2, r0
 80078c4:	460b      	mov	r3, r1
 80078c6:	4620      	mov	r0, r4
 80078c8:	4629      	mov	r1, r5
 80078ca:	f7f8 fcdf 	bl	800028c <__adddf3>
 80078ce:	4603      	mov	r3, r0
 80078d0:	460c      	mov	r4, r1
 80078d2:	68fa      	ldr	r2, [r7, #12]
 80078d4:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	circle->y_current = circle->yi + circle->radius*sin(circle->angle_start + circle->dir*angle);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f993 3000 	ldrsb.w	r3, [r3]
 80078f0:	4618      	mov	r0, r3
 80078f2:	f7f8 fe17 	bl	8000524 <__aeabi_i2d>
 80078f6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80078fa:	f7f8 fe7d 	bl	80005f8 <__aeabi_dmul>
 80078fe:	4602      	mov	r2, r0
 8007900:	460b      	mov	r3, r1
 8007902:	4650      	mov	r0, sl
 8007904:	4659      	mov	r1, fp
 8007906:	f7f8 fcc1 	bl	800028c <__adddf3>
 800790a:	4602      	mov	r2, r0
 800790c:	460b      	mov	r3, r1
 800790e:	ec43 2b17 	vmov	d7, r2, r3
 8007912:	eeb0 0a47 	vmov.f32	s0, s14
 8007916:	eef0 0a67 	vmov.f32	s1, s15
 800791a:	f011 fd55 	bl	80193c8 <sin>
 800791e:	ec53 2b10 	vmov	r2, r3, d0
 8007922:	4640      	mov	r0, r8
 8007924:	4649      	mov	r1, r9
 8007926:	f7f8 fe67 	bl	80005f8 <__aeabi_dmul>
 800792a:	4602      	mov	r2, r0
 800792c:	460b      	mov	r3, r1
 800792e:	4620      	mov	r0, r4
 8007930:	4629      	mov	r1, r5
 8007932:	f7f8 fcab 	bl	800028c <__adddf3>
 8007936:	4603      	mov	r3, r0
 8007938:	460c      	mov	r4, r1
 800793a:	68fa      	ldr	r2, [r7, #12]
 800793c:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	circle->z_current = circle->zi; // XY plane
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8007946:	68fa      	ldr	r2, [r7, #12]
 8007948:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

	return SCARA_STATUS_OK;
 800794c:	2300      	movs	r3, #0
}
 800794e:	4618      	mov	r0, r3
 8007950:	3718      	adds	r7, #24
 8007952:	46bd      	mov	sp, r7
 8007954:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007958 <scaraFlowLSPB>:

/* Compute new s corresponding to time */
SCARA_StatusTypeDef	scaraFlowLSPB		(Trajectory_LSPB_TypeDef *lspb, double time) {
 8007958:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800795c:	b08b      	sub	sp, #44	; 0x2c
 800795e:	af00      	add	r7, sp, #0
 8007960:	60f8      	str	r0, [r7, #12]
 8007962:	ed87 0b00 	vstr	d0, [r7]
	double tf, td, ta;

	tf = lspb->Tf;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800796c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	td = lspb->Td;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8007976:	e9c7 2306 	strd	r2, r3, [r7, #24]
	ta = lspb->Ta;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8007980:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Accelerate
	if ( 0.0f <= time && time <= ta) {
 8007984:	f04f 0200 	mov.w	r2, #0
 8007988:	f04f 0300 	mov.w	r3, #0
 800798c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007990:	f7f9 f8b8 	bl	8000b04 <__aeabi_dcmpge>
 8007994:	4603      	mov	r3, r0
 8007996:	2b00      	cmp	r3, #0
 8007998:	d05b      	beq.n	8007a52 <scaraFlowLSPB+0xfa>
 800799a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800799e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079a2:	f7f9 f8a5 	bl	8000af0 <__aeabi_dcmple>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d052      	beq.n	8007a52 <scaraFlowLSPB+0xfa>
		lspb->a_current		=	lspb->a_design;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 80079b2:	68fa      	ldr	r2, [r7, #12]
 80079b4:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	lspb->v0 + lspb->a_design*time;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80079c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079c8:	f7f8 fe16 	bl	80005f8 <__aeabi_dmul>
 80079cc:	4602      	mov	r2, r0
 80079ce:	460b      	mov	r3, r1
 80079d0:	4620      	mov	r0, r4
 80079d2:	4629      	mov	r1, r5
 80079d4:	f7f8 fc5a 	bl	800028c <__adddf3>
 80079d8:	4603      	mov	r3, r0
 80079da:	460c      	mov	r4, r1
 80079dc:	68fa      	ldr	r2, [r7, #12]
 80079de:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*time + 0.5*lspb->a_design*time*time;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80079ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079f2:	f7f8 fe01 	bl	80005f8 <__aeabi_dmul>
 80079f6:	4602      	mov	r2, r0
 80079f8:	460b      	mov	r3, r1
 80079fa:	4620      	mov	r0, r4
 80079fc:	4629      	mov	r1, r5
 80079fe:	f7f8 fc45 	bl	800028c <__adddf3>
 8007a02:	4603      	mov	r3, r0
 8007a04:	460c      	mov	r4, r1
 8007a06:	4625      	mov	r5, r4
 8007a08:	461c      	mov	r4, r3
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8007a10:	f04f 0200 	mov.w	r2, #0
 8007a14:	4ba5      	ldr	r3, [pc, #660]	; (8007cac <scaraFlowLSPB+0x354>)
 8007a16:	f7f8 fdef 	bl	80005f8 <__aeabi_dmul>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	4610      	mov	r0, r2
 8007a20:	4619      	mov	r1, r3
 8007a22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a26:	f7f8 fde7 	bl	80005f8 <__aeabi_dmul>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	4610      	mov	r0, r2
 8007a30:	4619      	mov	r1, r3
 8007a32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a36:	f7f8 fddf 	bl	80005f8 <__aeabi_dmul>
 8007a3a:	4602      	mov	r2, r0
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	4620      	mov	r0, r4
 8007a40:	4629      	mov	r1, r5
 8007a42:	f7f8 fc23 	bl	800028c <__adddf3>
 8007a46:	4603      	mov	r3, r0
 8007a48:	460c      	mov	r4, r1
 8007a4a:	68fa      	ldr	r2, [r7, #12]
 8007a4c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8007a50:	e125      	b.n	8007c9e <scaraFlowLSPB+0x346>
	// Constant velocity
	} else if (ta <= time && time <= (tf - td)) {
 8007a52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a56:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007a5a:	f7f9 f849 	bl	8000af0 <__aeabi_dcmple>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d05e      	beq.n	8007b22 <scaraFlowLSPB+0x1ca>
 8007a64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a68:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007a6c:	f7f8 fc0c 	bl	8000288 <__aeabi_dsub>
 8007a70:	4602      	mov	r2, r0
 8007a72:	460b      	mov	r3, r1
 8007a74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a78:	f7f9 f83a 	bl	8000af0 <__aeabi_dcmple>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d04f      	beq.n	8007b22 <scaraFlowLSPB+0x1ca>
		lspb->a_current		=	0;
 8007a82:	68fa      	ldr	r2, [r7, #12]
 8007a84:	f04f 0300 	mov.w	r3, #0
 8007a88:	f04f 0400 	mov.w	r4, #0
 8007a8c:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	lspb->v_lim;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8007a96:	68fa      	ldr	r2, [r7, #12]
 8007a98:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*ta/2 + lspb->v_lim*(time - ta/2);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007aa8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007aac:	f7f8 fda4 	bl	80005f8 <__aeabi_dmul>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	4610      	mov	r0, r2
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	f04f 0200 	mov.w	r2, #0
 8007abc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007ac0:	f7f8 fec4 	bl	800084c <__aeabi_ddiv>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	460b      	mov	r3, r1
 8007ac8:	4620      	mov	r0, r4
 8007aca:	4629      	mov	r1, r5
 8007acc:	f7f8 fbde 	bl	800028c <__adddf3>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	460c      	mov	r4, r1
 8007ad4:	4698      	mov	r8, r3
 8007ad6:	46a1      	mov	r9, r4
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8007ade:	f04f 0200 	mov.w	r2, #0
 8007ae2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007ae6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007aea:	f7f8 feaf 	bl	800084c <__aeabi_ddiv>
 8007aee:	4602      	mov	r2, r0
 8007af0:	460b      	mov	r3, r1
 8007af2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007af6:	f7f8 fbc7 	bl	8000288 <__aeabi_dsub>
 8007afa:	4602      	mov	r2, r0
 8007afc:	460b      	mov	r3, r1
 8007afe:	4620      	mov	r0, r4
 8007b00:	4629      	mov	r1, r5
 8007b02:	f7f8 fd79 	bl	80005f8 <__aeabi_dmul>
 8007b06:	4603      	mov	r3, r0
 8007b08:	460c      	mov	r4, r1
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	4623      	mov	r3, r4
 8007b0e:	4640      	mov	r0, r8
 8007b10:	4649      	mov	r1, r9
 8007b12:	f7f8 fbbb 	bl	800028c <__adddf3>
 8007b16:	4603      	mov	r3, r0
 8007b18:	460c      	mov	r4, r1
 8007b1a:	68fa      	ldr	r2, [r7, #12]
 8007b1c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8007b20:	e0bd      	b.n	8007c9e <scaraFlowLSPB+0x346>
	// Decelerate
	} else if ((tf - td) <= time && time <= tf) {
 8007b22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b26:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007b2a:	f7f8 fbad 	bl	8000288 <__aeabi_dsub>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	460b      	mov	r3, r1
 8007b32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b36:	f7f8 ffe5 	bl	8000b04 <__aeabi_dcmpge>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	f000 809a 	beq.w	8007c76 <scaraFlowLSPB+0x31e>
 8007b42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007b46:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b4a:	f7f8 ffd1 	bl	8000af0 <__aeabi_dcmple>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	f000 8090 	beq.w	8007c76 <scaraFlowLSPB+0x31e>
		lspb->a_current		=	-lspb->a_design;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8007b5c:	4614      	mov	r4, r2
 8007b5e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	e9c3 451a 	strd	r4, r5, [r3, #104]	; 0x68
		lspb->v_current		=	lspb->v1 + lspb->a_design*(tf - time);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	e9d3 890c 	ldrd	r8, r9, [r3, #48]	; 0x30
 8007b74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b78:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007b7c:	f7f8 fb84 	bl	8000288 <__aeabi_dsub>
 8007b80:	4602      	mov	r2, r0
 8007b82:	460b      	mov	r3, r1
 8007b84:	4640      	mov	r0, r8
 8007b86:	4649      	mov	r1, r9
 8007b88:	f7f8 fd36 	bl	80005f8 <__aeabi_dmul>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	460b      	mov	r3, r1
 8007b90:	4620      	mov	r0, r4
 8007b92:	4629      	mov	r1, r5
 8007b94:	f7f8 fb7a 	bl	800028c <__adddf3>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	460c      	mov	r4, r1
 8007b9c:	68fa      	ldr	r2, [r7, #12]
 8007b9e:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s1 - lspb->v1*(tf - time)
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8007bae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bb2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007bb6:	f7f8 fb67 	bl	8000288 <__aeabi_dsub>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	4640      	mov	r0, r8
 8007bc0:	4649      	mov	r1, r9
 8007bc2:	f7f8 fd19 	bl	80005f8 <__aeabi_dmul>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	460b      	mov	r3, r1
 8007bca:	4620      	mov	r0, r4
 8007bcc:	4629      	mov	r1, r5
 8007bce:	f7f8 fb5b 	bl	8000288 <__aeabi_dsub>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	460c      	mov	r4, r1
 8007bd6:	461d      	mov	r5, r3
 8007bd8:	4626      	mov	r6, r4
								- (lspb->v_lim - lspb->v1)*(tf - time)*(tf - time)/(2*td);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8007be6:	461a      	mov	r2, r3
 8007be8:	4623      	mov	r3, r4
 8007bea:	f7f8 fb4d 	bl	8000288 <__aeabi_dsub>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	460c      	mov	r4, r1
 8007bf2:	4698      	mov	r8, r3
 8007bf4:	46a1      	mov	r9, r4
 8007bf6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bfa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007bfe:	f7f8 fb43 	bl	8000288 <__aeabi_dsub>
 8007c02:	4603      	mov	r3, r0
 8007c04:	460c      	mov	r4, r1
 8007c06:	461a      	mov	r2, r3
 8007c08:	4623      	mov	r3, r4
 8007c0a:	4640      	mov	r0, r8
 8007c0c:	4649      	mov	r1, r9
 8007c0e:	f7f8 fcf3 	bl	80005f8 <__aeabi_dmul>
 8007c12:	4603      	mov	r3, r0
 8007c14:	460c      	mov	r4, r1
 8007c16:	4698      	mov	r8, r3
 8007c18:	46a1      	mov	r9, r4
 8007c1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c1e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007c22:	f7f8 fb31 	bl	8000288 <__aeabi_dsub>
 8007c26:	4603      	mov	r3, r0
 8007c28:	460c      	mov	r4, r1
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	4623      	mov	r3, r4
 8007c2e:	4640      	mov	r0, r8
 8007c30:	4649      	mov	r1, r9
 8007c32:	f7f8 fce1 	bl	80005f8 <__aeabi_dmul>
 8007c36:	4603      	mov	r3, r0
 8007c38:	460c      	mov	r4, r1
 8007c3a:	4698      	mov	r8, r3
 8007c3c:	46a1      	mov	r9, r4
 8007c3e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007c42:	4602      	mov	r2, r0
 8007c44:	460b      	mov	r3, r1
 8007c46:	f7f8 fb21 	bl	800028c <__adddf3>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	460c      	mov	r4, r1
 8007c4e:	461a      	mov	r2, r3
 8007c50:	4623      	mov	r3, r4
 8007c52:	4640      	mov	r0, r8
 8007c54:	4649      	mov	r1, r9
 8007c56:	f7f8 fdf9 	bl	800084c <__aeabi_ddiv>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	460c      	mov	r4, r1
 8007c5e:	461a      	mov	r2, r3
 8007c60:	4623      	mov	r3, r4
 8007c62:	4628      	mov	r0, r5
 8007c64:	4631      	mov	r1, r6
 8007c66:	f7f8 fb0f 	bl	8000288 <__aeabi_dsub>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	460c      	mov	r4, r1
		lspb->s_current		=	lspb->s1 - lspb->v1*(tf - time)
 8007c6e:	68fa      	ldr	r2, [r7, #12]
 8007c70:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8007c74:	e013      	b.n	8007c9e <scaraFlowLSPB+0x346>
	} else {
		lspb->a_current 	=	0;
 8007c76:	68fa      	ldr	r2, [r7, #12]
 8007c78:	f04f 0300 	mov.w	r3, #0
 8007c7c:	f04f 0400 	mov.w	r4, #0
 8007c80:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	0;
 8007c84:	68fa      	ldr	r2, [r7, #12]
 8007c86:	f04f 0300 	mov.w	r3, #0
 8007c8a:	f04f 0400 	mov.w	r4, #0
 8007c8e:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->total_s;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8007c98:	68fa      	ldr	r2, [r7, #12]
 8007c9a:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	}

	return SCARA_STATUS_OK;
 8007c9e:	2300      	movs	r3, #0
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	372c      	adds	r7, #44	; 0x2c
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007caa:	bf00      	nop
 8007cac:	3fe00000 	.word	0x3fe00000

08007cb0 <scaraFLowScurve>:

/* Compute new s corresponding to time */
SCARA_StatusTypeDef	scaraFLowScurve		(Trajectory_Scurve_TypeDef *scurve, double time) {
 8007cb0:	b5b0      	push	{r4, r5, r7, lr}
 8007cb2:	b092      	sub	sp, #72	; 0x48
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6278      	str	r0, [r7, #36]	; 0x24
 8007cb8:	ed87 0b06 	vstr	d0, [r7, #24]
	double j_max, tm, tc, t;

	j_max = scurve->j_max;
 8007cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cbe:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8007cc2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	tm	  = scurve->Tm;
 8007cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc8:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8007ccc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	tc	  = scurve->Tc;
 8007cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd2:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8007cd6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	 // SCURVE 4 PHASE: tc = 0;
	 if ( 4 == scurve->num_of_phase) {
 8007cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cdc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ce0:	2b04      	cmp	r3, #4
 8007ce2:	f040 8321 	bne.w	8008328 <scaraFLowScurve+0x678>
		 // Phase 1
		 if ( (0.0f <= time) && ( time < tm)) {
 8007ce6:	f04f 0200 	mov.w	r2, #0
 8007cea:	f04f 0300 	mov.w	r3, #0
 8007cee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007cf2:	f7f8 ff07 	bl	8000b04 <__aeabi_dcmpge>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d059      	beq.n	8007db0 <scaraFLowScurve+0x100>
 8007cfc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007d00:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007d04:	f7f8 feea 	bl	8000adc <__aeabi_dcmplt>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d050      	beq.n	8007db0 <scaraFLowScurve+0x100>
			 t = time;
 8007d0e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8007d12:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*t;
 8007d16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007d1a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007d1e:	f7f8 fc6b 	bl	80005f8 <__aeabi_dmul>
 8007d22:	4603      	mov	r3, r0
 8007d24:	460c      	mov	r4, r1
 8007d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d28:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	= 	0.5*j_max*t*t;
 8007d2c:	f04f 0200 	mov.w	r2, #0
 8007d30:	4b93      	ldr	r3, [pc, #588]	; (8007f80 <scaraFLowScurve+0x2d0>)
 8007d32:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007d36:	f7f8 fc5f 	bl	80005f8 <__aeabi_dmul>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	460c      	mov	r4, r1
 8007d3e:	4618      	mov	r0, r3
 8007d40:	4621      	mov	r1, r4
 8007d42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007d46:	f7f8 fc57 	bl	80005f8 <__aeabi_dmul>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	460c      	mov	r4, r1
 8007d4e:	4618      	mov	r0, r3
 8007d50:	4621      	mov	r1, r4
 8007d52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007d56:	f7f8 fc4f 	bl	80005f8 <__aeabi_dmul>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	460c      	mov	r4, r1
 8007d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d60:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	= 	j_max*t*t*t/6;
 8007d64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007d68:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007d6c:	f7f8 fc44 	bl	80005f8 <__aeabi_dmul>
 8007d70:	4603      	mov	r3, r0
 8007d72:	460c      	mov	r4, r1
 8007d74:	4618      	mov	r0, r3
 8007d76:	4621      	mov	r1, r4
 8007d78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007d7c:	f7f8 fc3c 	bl	80005f8 <__aeabi_dmul>
 8007d80:	4603      	mov	r3, r0
 8007d82:	460c      	mov	r4, r1
 8007d84:	4618      	mov	r0, r3
 8007d86:	4621      	mov	r1, r4
 8007d88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007d8c:	f7f8 fc34 	bl	80005f8 <__aeabi_dmul>
 8007d90:	4603      	mov	r3, r0
 8007d92:	460c      	mov	r4, r1
 8007d94:	4618      	mov	r0, r3
 8007d96:	4621      	mov	r1, r4
 8007d98:	f04f 0200 	mov.w	r2, #0
 8007d9c:	4b79      	ldr	r3, [pc, #484]	; (8007f84 <scaraFLowScurve+0x2d4>)
 8007d9e:	f7f8 fd55 	bl	800084c <__aeabi_ddiv>
 8007da2:	4603      	mov	r3, r0
 8007da4:	460c      	mov	r4, r1
 8007da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007da8:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8007dac:	f000 be56 	b.w	8008a5c <scaraFLowScurve+0xdac>
		 // Phase 2
		 } else if ( (tm <= time) && ( time < (2*tm) ) ) {
 8007db0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007db4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007db8:	f7f8 fe9a 	bl	8000af0 <__aeabi_dcmple>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	f000 80e2 	beq.w	8007f88 <scaraFLowScurve+0x2d8>
 8007dc4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007dc8:	4602      	mov	r2, r0
 8007dca:	460b      	mov	r3, r1
 8007dcc:	f7f8 fa5e 	bl	800028c <__adddf3>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	460c      	mov	r4, r1
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	4623      	mov	r3, r4
 8007dd8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007ddc:	f7f8 fe7e 	bl	8000adc <__aeabi_dcmplt>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	f000 80d0 	beq.w	8007f88 <scaraFLowScurve+0x2d8>
			 t = time - tm;
 8007de8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007dec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007df0:	f7f8 fa4a 	bl	8000288 <__aeabi_dsub>
 8007df4:	4603      	mov	r3, r0
 8007df6:	460c      	mov	r4, r1
 8007df8:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*tm - j_max*t;
 8007dfc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007e00:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007e04:	f7f8 fbf8 	bl	80005f8 <__aeabi_dmul>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	460c      	mov	r4, r1
 8007e0c:	4625      	mov	r5, r4
 8007e0e:	461c      	mov	r4, r3
 8007e10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007e14:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007e18:	f7f8 fbee 	bl	80005f8 <__aeabi_dmul>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	460b      	mov	r3, r1
 8007e20:	4620      	mov	r0, r4
 8007e22:	4629      	mov	r1, r5
 8007e24:	f7f8 fa30 	bl	8000288 <__aeabi_dsub>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	460c      	mov	r4, r1
 8007e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e2e:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current 	= 	scurve->v_1 + j_max*tm*t - 0.5*j_max*t*t;
 8007e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e34:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	; 0x78
 8007e38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007e3c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007e40:	f7f8 fbda 	bl	80005f8 <__aeabi_dmul>
 8007e44:	4602      	mov	r2, r0
 8007e46:	460b      	mov	r3, r1
 8007e48:	4610      	mov	r0, r2
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007e50:	f7f8 fbd2 	bl	80005f8 <__aeabi_dmul>
 8007e54:	4602      	mov	r2, r0
 8007e56:	460b      	mov	r3, r1
 8007e58:	4620      	mov	r0, r4
 8007e5a:	4629      	mov	r1, r5
 8007e5c:	f7f8 fa16 	bl	800028c <__adddf3>
 8007e60:	4603      	mov	r3, r0
 8007e62:	460c      	mov	r4, r1
 8007e64:	4625      	mov	r5, r4
 8007e66:	461c      	mov	r4, r3
 8007e68:	f04f 0200 	mov.w	r2, #0
 8007e6c:	4b44      	ldr	r3, [pc, #272]	; (8007f80 <scaraFLowScurve+0x2d0>)
 8007e6e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007e72:	f7f8 fbc1 	bl	80005f8 <__aeabi_dmul>
 8007e76:	4602      	mov	r2, r0
 8007e78:	460b      	mov	r3, r1
 8007e7a:	4610      	mov	r0, r2
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007e82:	f7f8 fbb9 	bl	80005f8 <__aeabi_dmul>
 8007e86:	4602      	mov	r2, r0
 8007e88:	460b      	mov	r3, r1
 8007e8a:	4610      	mov	r0, r2
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007e92:	f7f8 fbb1 	bl	80005f8 <__aeabi_dmul>
 8007e96:	4602      	mov	r2, r0
 8007e98:	460b      	mov	r3, r1
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	4629      	mov	r1, r5
 8007e9e:	f7f8 f9f3 	bl	8000288 <__aeabi_dsub>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	460c      	mov	r4, r1
 8007ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ea8:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	=	scurve->s_1 + scurve->v_1*t + 0.5*j_max*tm*t*t - j_max*t*t*t/6;
 8007eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eae:	e9d3 4520 	ldrd	r4, r5, [r3, #128]	; 0x80
 8007eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb4:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8007eb8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007ebc:	f7f8 fb9c 	bl	80005f8 <__aeabi_dmul>
 8007ec0:	4602      	mov	r2, r0
 8007ec2:	460b      	mov	r3, r1
 8007ec4:	4620      	mov	r0, r4
 8007ec6:	4629      	mov	r1, r5
 8007ec8:	f7f8 f9e0 	bl	800028c <__adddf3>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	460c      	mov	r4, r1
 8007ed0:	4625      	mov	r5, r4
 8007ed2:	461c      	mov	r4, r3
 8007ed4:	f04f 0200 	mov.w	r2, #0
 8007ed8:	4b29      	ldr	r3, [pc, #164]	; (8007f80 <scaraFLowScurve+0x2d0>)
 8007eda:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007ede:	f7f8 fb8b 	bl	80005f8 <__aeabi_dmul>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	4610      	mov	r0, r2
 8007ee8:	4619      	mov	r1, r3
 8007eea:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007eee:	f7f8 fb83 	bl	80005f8 <__aeabi_dmul>
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	4610      	mov	r0, r2
 8007ef8:	4619      	mov	r1, r3
 8007efa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007efe:	f7f8 fb7b 	bl	80005f8 <__aeabi_dmul>
 8007f02:	4602      	mov	r2, r0
 8007f04:	460b      	mov	r3, r1
 8007f06:	4610      	mov	r0, r2
 8007f08:	4619      	mov	r1, r3
 8007f0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f0e:	f7f8 fb73 	bl	80005f8 <__aeabi_dmul>
 8007f12:	4602      	mov	r2, r0
 8007f14:	460b      	mov	r3, r1
 8007f16:	4620      	mov	r0, r4
 8007f18:	4629      	mov	r1, r5
 8007f1a:	f7f8 f9b7 	bl	800028c <__adddf3>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	460c      	mov	r4, r1
 8007f22:	4625      	mov	r5, r4
 8007f24:	461c      	mov	r4, r3
 8007f26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f2a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007f2e:	f7f8 fb63 	bl	80005f8 <__aeabi_dmul>
 8007f32:	4602      	mov	r2, r0
 8007f34:	460b      	mov	r3, r1
 8007f36:	4610      	mov	r0, r2
 8007f38:	4619      	mov	r1, r3
 8007f3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f3e:	f7f8 fb5b 	bl	80005f8 <__aeabi_dmul>
 8007f42:	4602      	mov	r2, r0
 8007f44:	460b      	mov	r3, r1
 8007f46:	4610      	mov	r0, r2
 8007f48:	4619      	mov	r1, r3
 8007f4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f4e:	f7f8 fb53 	bl	80005f8 <__aeabi_dmul>
 8007f52:	4602      	mov	r2, r0
 8007f54:	460b      	mov	r3, r1
 8007f56:	4610      	mov	r0, r2
 8007f58:	4619      	mov	r1, r3
 8007f5a:	f04f 0200 	mov.w	r2, #0
 8007f5e:	4b09      	ldr	r3, [pc, #36]	; (8007f84 <scaraFLowScurve+0x2d4>)
 8007f60:	f7f8 fc74 	bl	800084c <__aeabi_ddiv>
 8007f64:	4602      	mov	r2, r0
 8007f66:	460b      	mov	r3, r1
 8007f68:	4620      	mov	r0, r4
 8007f6a:	4629      	mov	r1, r5
 8007f6c:	f7f8 f98c 	bl	8000288 <__aeabi_dsub>
 8007f70:	4603      	mov	r3, r0
 8007f72:	460c      	mov	r4, r1
 8007f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f76:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8007f7a:	f000 bd6f 	b.w	8008a5c <scaraFLowScurve+0xdac>
 8007f7e:	bf00      	nop
 8007f80:	3fe00000 	.word	0x3fe00000
 8007f84:	40180000 	.word	0x40180000
		 // Phase 3: does not exist
		 // Phase 4
		 } else if ( ((2*tm) <= time) && ( time < (3*tm)) ) {
 8007f88:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	460b      	mov	r3, r1
 8007f90:	f7f8 f97c 	bl	800028c <__adddf3>
 8007f94:	4603      	mov	r3, r0
 8007f96:	460c      	mov	r4, r1
 8007f98:	461a      	mov	r2, r3
 8007f9a:	4623      	mov	r3, r4
 8007f9c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007fa0:	f7f8 fdb0 	bl	8000b04 <__aeabi_dcmpge>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	f000 80a2 	beq.w	80080f0 <scaraFLowScurve+0x440>
 8007fac:	f04f 0200 	mov.w	r2, #0
 8007fb0:	4b4c      	ldr	r3, [pc, #304]	; (80080e4 <scaraFLowScurve+0x434>)
 8007fb2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007fb6:	f7f8 fb1f 	bl	80005f8 <__aeabi_dmul>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	460c      	mov	r4, r1
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	4623      	mov	r3, r4
 8007fc2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007fc6:	f7f8 fd89 	bl	8000adc <__aeabi_dcmplt>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	f000 808f 	beq.w	80080f0 <scaraFLowScurve+0x440>
			 t = time - 2*tm;
 8007fd2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	460b      	mov	r3, r1
 8007fda:	f7f8 f957 	bl	800028c <__adddf3>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	460c      	mov	r4, r1
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	4623      	mov	r3, r4
 8007fe6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007fea:	f7f8 f94d 	bl	8000288 <__aeabi_dsub>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	460c      	mov	r4, r1
 8007ff2:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	=	-j_max*t;
 8007ff6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ff8:	613b      	str	r3, [r7, #16]
 8007ffa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ffc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008000:	617b      	str	r3, [r7, #20]
 8008002:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008006:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800800a:	f7f8 faf5 	bl	80005f8 <__aeabi_dmul>
 800800e:	4603      	mov	r3, r0
 8008010:	460c      	mov	r4, r1
 8008012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008014:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_2 - 0.5*j_max*t*t;
 8008018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801a:	e9d3 4522 	ldrd	r4, r5, [r3, #136]	; 0x88
 800801e:	f04f 0200 	mov.w	r2, #0
 8008022:	4b31      	ldr	r3, [pc, #196]	; (80080e8 <scaraFLowScurve+0x438>)
 8008024:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008028:	f7f8 fae6 	bl	80005f8 <__aeabi_dmul>
 800802c:	4602      	mov	r2, r0
 800802e:	460b      	mov	r3, r1
 8008030:	4610      	mov	r0, r2
 8008032:	4619      	mov	r1, r3
 8008034:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008038:	f7f8 fade 	bl	80005f8 <__aeabi_dmul>
 800803c:	4602      	mov	r2, r0
 800803e:	460b      	mov	r3, r1
 8008040:	4610      	mov	r0, r2
 8008042:	4619      	mov	r1, r3
 8008044:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008048:	f7f8 fad6 	bl	80005f8 <__aeabi_dmul>
 800804c:	4602      	mov	r2, r0
 800804e:	460b      	mov	r3, r1
 8008050:	4620      	mov	r0, r4
 8008052:	4629      	mov	r1, r5
 8008054:	f7f8 f918 	bl	8000288 <__aeabi_dsub>
 8008058:	4603      	mov	r3, r0
 800805a:	460c      	mov	r4, r1
 800805c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800805e:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_2 + scurve->v_2*t - j_max*t*t*t/6;
 8008062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008064:	e9d3 4524 	ldrd	r4, r5, [r3, #144]	; 0x90
 8008068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806a:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 800806e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008072:	f7f8 fac1 	bl	80005f8 <__aeabi_dmul>
 8008076:	4602      	mov	r2, r0
 8008078:	460b      	mov	r3, r1
 800807a:	4620      	mov	r0, r4
 800807c:	4629      	mov	r1, r5
 800807e:	f7f8 f905 	bl	800028c <__adddf3>
 8008082:	4603      	mov	r3, r0
 8008084:	460c      	mov	r4, r1
 8008086:	4625      	mov	r5, r4
 8008088:	461c      	mov	r4, r3
 800808a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800808e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008092:	f7f8 fab1 	bl	80005f8 <__aeabi_dmul>
 8008096:	4602      	mov	r2, r0
 8008098:	460b      	mov	r3, r1
 800809a:	4610      	mov	r0, r2
 800809c:	4619      	mov	r1, r3
 800809e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80080a2:	f7f8 faa9 	bl	80005f8 <__aeabi_dmul>
 80080a6:	4602      	mov	r2, r0
 80080a8:	460b      	mov	r3, r1
 80080aa:	4610      	mov	r0, r2
 80080ac:	4619      	mov	r1, r3
 80080ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80080b2:	f7f8 faa1 	bl	80005f8 <__aeabi_dmul>
 80080b6:	4602      	mov	r2, r0
 80080b8:	460b      	mov	r3, r1
 80080ba:	4610      	mov	r0, r2
 80080bc:	4619      	mov	r1, r3
 80080be:	f04f 0200 	mov.w	r2, #0
 80080c2:	4b0a      	ldr	r3, [pc, #40]	; (80080ec <scaraFLowScurve+0x43c>)
 80080c4:	f7f8 fbc2 	bl	800084c <__aeabi_ddiv>
 80080c8:	4602      	mov	r2, r0
 80080ca:	460b      	mov	r3, r1
 80080cc:	4620      	mov	r0, r4
 80080ce:	4629      	mov	r1, r5
 80080d0:	f7f8 f8da 	bl	8000288 <__aeabi_dsub>
 80080d4:	4603      	mov	r3, r0
 80080d6:	460c      	mov	r4, r1
 80080d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080da:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 80080de:	f000 bcbd 	b.w	8008a5c <scaraFLowScurve+0xdac>
 80080e2:	bf00      	nop
 80080e4:	40080000 	.word	0x40080000
 80080e8:	3fe00000 	.word	0x3fe00000
 80080ec:	40180000 	.word	0x40180000
		 // Phase 5
		 } else if ( ((3*tm) <= time) && ( time < (4*tm)) ) {
 80080f0:	f04f 0200 	mov.w	r2, #0
 80080f4:	4b88      	ldr	r3, [pc, #544]	; (8008318 <scaraFLowScurve+0x668>)
 80080f6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80080fa:	f7f8 fa7d 	bl	80005f8 <__aeabi_dmul>
 80080fe:	4603      	mov	r3, r0
 8008100:	460c      	mov	r4, r1
 8008102:	461a      	mov	r2, r3
 8008104:	4623      	mov	r3, r4
 8008106:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800810a:	f7f8 fcfb 	bl	8000b04 <__aeabi_dcmpge>
 800810e:	4603      	mov	r3, r0
 8008110:	2b00      	cmp	r3, #0
 8008112:	f000 80ec 	beq.w	80082ee <scaraFLowScurve+0x63e>
 8008116:	f04f 0200 	mov.w	r2, #0
 800811a:	4b80      	ldr	r3, [pc, #512]	; (800831c <scaraFLowScurve+0x66c>)
 800811c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008120:	f7f8 fa6a 	bl	80005f8 <__aeabi_dmul>
 8008124:	4603      	mov	r3, r0
 8008126:	460c      	mov	r4, r1
 8008128:	461a      	mov	r2, r3
 800812a:	4623      	mov	r3, r4
 800812c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008130:	f7f8 fcd4 	bl	8000adc <__aeabi_dcmplt>
 8008134:	4603      	mov	r3, r0
 8008136:	2b00      	cmp	r3, #0
 8008138:	f000 80d9 	beq.w	80082ee <scaraFLowScurve+0x63e>
			 t = time - 3*tm;
 800813c:	f04f 0200 	mov.w	r2, #0
 8008140:	4b75      	ldr	r3, [pc, #468]	; (8008318 <scaraFLowScurve+0x668>)
 8008142:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008146:	f7f8 fa57 	bl	80005f8 <__aeabi_dmul>
 800814a:	4603      	mov	r3, r0
 800814c:	460c      	mov	r4, r1
 800814e:	461a      	mov	r2, r3
 8008150:	4623      	mov	r3, r4
 8008152:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008156:	f7f8 f897 	bl	8000288 <__aeabi_dsub>
 800815a:	4603      	mov	r3, r0
 800815c:	460c      	mov	r4, r1
 800815e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current	=	-j_max*tm + j_max*t;
 8008162:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008164:	60bb      	str	r3, [r7, #8]
 8008166:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800816c:	60fb      	str	r3, [r7, #12]
 800816e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008172:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008176:	f7f8 fa3f 	bl	80005f8 <__aeabi_dmul>
 800817a:	4603      	mov	r3, r0
 800817c:	460c      	mov	r4, r1
 800817e:	4625      	mov	r5, r4
 8008180:	461c      	mov	r4, r3
 8008182:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008186:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800818a:	f7f8 fa35 	bl	80005f8 <__aeabi_dmul>
 800818e:	4602      	mov	r2, r0
 8008190:	460b      	mov	r3, r1
 8008192:	4620      	mov	r0, r4
 8008194:	4629      	mov	r1, r5
 8008196:	f7f8 f879 	bl	800028c <__adddf3>
 800819a:	4603      	mov	r3, r0
 800819c:	460c      	mov	r4, r1
 800819e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081a0:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_4 - j_max*tm*t + 0.5*j_max*t*t;
 80081a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a6:	e9d3 452a 	ldrd	r4, r5, [r3, #168]	; 0xa8
 80081aa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80081ae:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80081b2:	f7f8 fa21 	bl	80005f8 <__aeabi_dmul>
 80081b6:	4602      	mov	r2, r0
 80081b8:	460b      	mov	r3, r1
 80081ba:	4610      	mov	r0, r2
 80081bc:	4619      	mov	r1, r3
 80081be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80081c2:	f7f8 fa19 	bl	80005f8 <__aeabi_dmul>
 80081c6:	4602      	mov	r2, r0
 80081c8:	460b      	mov	r3, r1
 80081ca:	4620      	mov	r0, r4
 80081cc:	4629      	mov	r1, r5
 80081ce:	f7f8 f85b 	bl	8000288 <__aeabi_dsub>
 80081d2:	4603      	mov	r3, r0
 80081d4:	460c      	mov	r4, r1
 80081d6:	4625      	mov	r5, r4
 80081d8:	461c      	mov	r4, r3
 80081da:	f04f 0200 	mov.w	r2, #0
 80081de:	4b50      	ldr	r3, [pc, #320]	; (8008320 <scaraFLowScurve+0x670>)
 80081e0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80081e4:	f7f8 fa08 	bl	80005f8 <__aeabi_dmul>
 80081e8:	4602      	mov	r2, r0
 80081ea:	460b      	mov	r3, r1
 80081ec:	4610      	mov	r0, r2
 80081ee:	4619      	mov	r1, r3
 80081f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80081f4:	f7f8 fa00 	bl	80005f8 <__aeabi_dmul>
 80081f8:	4602      	mov	r2, r0
 80081fa:	460b      	mov	r3, r1
 80081fc:	4610      	mov	r0, r2
 80081fe:	4619      	mov	r1, r3
 8008200:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008204:	f7f8 f9f8 	bl	80005f8 <__aeabi_dmul>
 8008208:	4602      	mov	r2, r0
 800820a:	460b      	mov	r3, r1
 800820c:	4620      	mov	r0, r4
 800820e:	4629      	mov	r1, r5
 8008210:	f7f8 f83c 	bl	800028c <__adddf3>
 8008214:	4603      	mov	r3, r0
 8008216:	460c      	mov	r4, r1
 8008218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800821a:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t
 800821e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008220:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 8008224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008226:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 800822a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800822e:	f7f8 f9e3 	bl	80005f8 <__aeabi_dmul>
 8008232:	4602      	mov	r2, r0
 8008234:	460b      	mov	r3, r1
 8008236:	4620      	mov	r0, r4
 8008238:	4629      	mov	r1, r5
 800823a:	f7f8 f827 	bl	800028c <__adddf3>
 800823e:	4603      	mov	r3, r0
 8008240:	460c      	mov	r4, r1
 8008242:	4625      	mov	r5, r4
 8008244:	461c      	mov	r4, r3
									- 0.5*j_max*tm*t*t
 8008246:	f04f 0200 	mov.w	r2, #0
 800824a:	4b35      	ldr	r3, [pc, #212]	; (8008320 <scaraFLowScurve+0x670>)
 800824c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008250:	f7f8 f9d2 	bl	80005f8 <__aeabi_dmul>
 8008254:	4602      	mov	r2, r0
 8008256:	460b      	mov	r3, r1
 8008258:	4610      	mov	r0, r2
 800825a:	4619      	mov	r1, r3
 800825c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008260:	f7f8 f9ca 	bl	80005f8 <__aeabi_dmul>
 8008264:	4602      	mov	r2, r0
 8008266:	460b      	mov	r3, r1
 8008268:	4610      	mov	r0, r2
 800826a:	4619      	mov	r1, r3
 800826c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008270:	f7f8 f9c2 	bl	80005f8 <__aeabi_dmul>
 8008274:	4602      	mov	r2, r0
 8008276:	460b      	mov	r3, r1
 8008278:	4610      	mov	r0, r2
 800827a:	4619      	mov	r1, r3
 800827c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008280:	f7f8 f9ba 	bl	80005f8 <__aeabi_dmul>
 8008284:	4602      	mov	r2, r0
 8008286:	460b      	mov	r3, r1
 8008288:	4620      	mov	r0, r4
 800828a:	4629      	mov	r1, r5
 800828c:	f7f7 fffc 	bl	8000288 <__aeabi_dsub>
 8008290:	4603      	mov	r3, r0
 8008292:	460c      	mov	r4, r1
 8008294:	4625      	mov	r5, r4
 8008296:	461c      	mov	r4, r3
									+ j_max*t*t*t/6;
 8008298:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800829c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80082a0:	f7f8 f9aa 	bl	80005f8 <__aeabi_dmul>
 80082a4:	4602      	mov	r2, r0
 80082a6:	460b      	mov	r3, r1
 80082a8:	4610      	mov	r0, r2
 80082aa:	4619      	mov	r1, r3
 80082ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80082b0:	f7f8 f9a2 	bl	80005f8 <__aeabi_dmul>
 80082b4:	4602      	mov	r2, r0
 80082b6:	460b      	mov	r3, r1
 80082b8:	4610      	mov	r0, r2
 80082ba:	4619      	mov	r1, r3
 80082bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80082c0:	f7f8 f99a 	bl	80005f8 <__aeabi_dmul>
 80082c4:	4602      	mov	r2, r0
 80082c6:	460b      	mov	r3, r1
 80082c8:	4610      	mov	r0, r2
 80082ca:	4619      	mov	r1, r3
 80082cc:	f04f 0200 	mov.w	r2, #0
 80082d0:	4b14      	ldr	r3, [pc, #80]	; (8008324 <scaraFLowScurve+0x674>)
 80082d2:	f7f8 fabb 	bl	800084c <__aeabi_ddiv>
 80082d6:	4602      	mov	r2, r0
 80082d8:	460b      	mov	r3, r1
 80082da:	4620      	mov	r0, r4
 80082dc:	4629      	mov	r1, r5
 80082de:	f7f7 ffd5 	bl	800028c <__adddf3>
 80082e2:	4603      	mov	r3, r0
 80082e4:	460c      	mov	r4, r1
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t
 80082e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082e8:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 80082ec:	e3b6      	b.n	8008a5c <scaraFLowScurve+0xdac>
		 } else {
			 scurve->a_current = 0;
 80082ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082f0:	f04f 0300 	mov.w	r3, #0
 80082f4:	f04f 0400 	mov.w	r4, #0
 80082f8:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current = 0;
 80082fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082fe:	f04f 0300 	mov.w	r3, #0
 8008302:	f04f 0400 	mov.w	r4, #0
 8008306:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current = scurve->total_s;
 800830a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830c:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8008310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008312:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8008316:	e3a1      	b.n	8008a5c <scaraFLowScurve+0xdac>
 8008318:	40080000 	.word	0x40080000
 800831c:	40100000 	.word	0x40100000
 8008320:	3fe00000 	.word	0x3fe00000
 8008324:	40180000 	.word	0x40180000
		 }

	 // SCURVE 5 PHASE: tc > 0
	 } else if ( 5 == scurve->num_of_phase) {
 8008328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800832e:	2b05      	cmp	r3, #5
 8008330:	f040 8392 	bne.w	8008a58 <scaraFLowScurve+0xda8>
		 // Phase 1
		 if ( (0 <= time) && ( time < tm)) {
 8008334:	f04f 0200 	mov.w	r2, #0
 8008338:	f04f 0300 	mov.w	r3, #0
 800833c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008340:	f7f8 fbe0 	bl	8000b04 <__aeabi_dcmpge>
 8008344:	4603      	mov	r3, r0
 8008346:	2b00      	cmp	r3, #0
 8008348:	d058      	beq.n	80083fc <scaraFLowScurve+0x74c>
 800834a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800834e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008352:	f7f8 fbc3 	bl	8000adc <__aeabi_dcmplt>
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d04f      	beq.n	80083fc <scaraFLowScurve+0x74c>
			 t = time;
 800835c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8008360:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*t;
 8008364:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008368:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800836c:	f7f8 f944 	bl	80005f8 <__aeabi_dmul>
 8008370:	4603      	mov	r3, r0
 8008372:	460c      	mov	r4, r1
 8008374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008376:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	= 	0.5*j_max*t*t;
 800837a:	f04f 0200 	mov.w	r2, #0
 800837e:	4b91      	ldr	r3, [pc, #580]	; (80085c4 <scaraFLowScurve+0x914>)
 8008380:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008384:	f7f8 f938 	bl	80005f8 <__aeabi_dmul>
 8008388:	4603      	mov	r3, r0
 800838a:	460c      	mov	r4, r1
 800838c:	4618      	mov	r0, r3
 800838e:	4621      	mov	r1, r4
 8008390:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008394:	f7f8 f930 	bl	80005f8 <__aeabi_dmul>
 8008398:	4603      	mov	r3, r0
 800839a:	460c      	mov	r4, r1
 800839c:	4618      	mov	r0, r3
 800839e:	4621      	mov	r1, r4
 80083a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80083a4:	f7f8 f928 	bl	80005f8 <__aeabi_dmul>
 80083a8:	4603      	mov	r3, r0
 80083aa:	460c      	mov	r4, r1
 80083ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083ae:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	= 	j_max*t*t*t/6;
 80083b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80083b6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80083ba:	f7f8 f91d 	bl	80005f8 <__aeabi_dmul>
 80083be:	4603      	mov	r3, r0
 80083c0:	460c      	mov	r4, r1
 80083c2:	4618      	mov	r0, r3
 80083c4:	4621      	mov	r1, r4
 80083c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80083ca:	f7f8 f915 	bl	80005f8 <__aeabi_dmul>
 80083ce:	4603      	mov	r3, r0
 80083d0:	460c      	mov	r4, r1
 80083d2:	4618      	mov	r0, r3
 80083d4:	4621      	mov	r1, r4
 80083d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80083da:	f7f8 f90d 	bl	80005f8 <__aeabi_dmul>
 80083de:	4603      	mov	r3, r0
 80083e0:	460c      	mov	r4, r1
 80083e2:	4618      	mov	r0, r3
 80083e4:	4621      	mov	r1, r4
 80083e6:	f04f 0200 	mov.w	r2, #0
 80083ea:	4b77      	ldr	r3, [pc, #476]	; (80085c8 <scaraFLowScurve+0x918>)
 80083ec:	f7f8 fa2e 	bl	800084c <__aeabi_ddiv>
 80083f0:	4603      	mov	r3, r0
 80083f2:	460c      	mov	r4, r1
 80083f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083f6:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 80083fa:	e32f      	b.n	8008a5c <scaraFLowScurve+0xdac>
		 // Phase 2
		 } else if ( (tm <= time) && ( time < (2*tm) ) ) {
 80083fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008400:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008404:	f7f8 fb74 	bl	8000af0 <__aeabi_dcmple>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	f000 80de 	beq.w	80085cc <scaraFLowScurve+0x91c>
 8008410:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008414:	4602      	mov	r2, r0
 8008416:	460b      	mov	r3, r1
 8008418:	f7f7 ff38 	bl	800028c <__adddf3>
 800841c:	4602      	mov	r2, r0
 800841e:	460b      	mov	r3, r1
 8008420:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008424:	f7f8 fb5a 	bl	8000adc <__aeabi_dcmplt>
 8008428:	4603      	mov	r3, r0
 800842a:	2b00      	cmp	r3, #0
 800842c:	f000 80ce 	beq.w	80085cc <scaraFLowScurve+0x91c>
			 t = time - tm;
 8008430:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008434:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008438:	f7f7 ff26 	bl	8000288 <__aeabi_dsub>
 800843c:	4603      	mov	r3, r0
 800843e:	460c      	mov	r4, r1
 8008440:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*tm - j_max*t;
 8008444:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008448:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800844c:	f7f8 f8d4 	bl	80005f8 <__aeabi_dmul>
 8008450:	4603      	mov	r3, r0
 8008452:	460c      	mov	r4, r1
 8008454:	4625      	mov	r5, r4
 8008456:	461c      	mov	r4, r3
 8008458:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800845c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008460:	f7f8 f8ca 	bl	80005f8 <__aeabi_dmul>
 8008464:	4602      	mov	r2, r0
 8008466:	460b      	mov	r3, r1
 8008468:	4620      	mov	r0, r4
 800846a:	4629      	mov	r1, r5
 800846c:	f7f7 ff0c 	bl	8000288 <__aeabi_dsub>
 8008470:	4603      	mov	r3, r0
 8008472:	460c      	mov	r4, r1
 8008474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008476:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current 	= 	scurve->v_1 + j_max*tm*t - 0.5*j_max*t*t;
 800847a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847c:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	; 0x78
 8008480:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008484:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008488:	f7f8 f8b6 	bl	80005f8 <__aeabi_dmul>
 800848c:	4602      	mov	r2, r0
 800848e:	460b      	mov	r3, r1
 8008490:	4610      	mov	r0, r2
 8008492:	4619      	mov	r1, r3
 8008494:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008498:	f7f8 f8ae 	bl	80005f8 <__aeabi_dmul>
 800849c:	4602      	mov	r2, r0
 800849e:	460b      	mov	r3, r1
 80084a0:	4620      	mov	r0, r4
 80084a2:	4629      	mov	r1, r5
 80084a4:	f7f7 fef2 	bl	800028c <__adddf3>
 80084a8:	4603      	mov	r3, r0
 80084aa:	460c      	mov	r4, r1
 80084ac:	4625      	mov	r5, r4
 80084ae:	461c      	mov	r4, r3
 80084b0:	f04f 0200 	mov.w	r2, #0
 80084b4:	4b43      	ldr	r3, [pc, #268]	; (80085c4 <scaraFLowScurve+0x914>)
 80084b6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80084ba:	f7f8 f89d 	bl	80005f8 <__aeabi_dmul>
 80084be:	4602      	mov	r2, r0
 80084c0:	460b      	mov	r3, r1
 80084c2:	4610      	mov	r0, r2
 80084c4:	4619      	mov	r1, r3
 80084c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80084ca:	f7f8 f895 	bl	80005f8 <__aeabi_dmul>
 80084ce:	4602      	mov	r2, r0
 80084d0:	460b      	mov	r3, r1
 80084d2:	4610      	mov	r0, r2
 80084d4:	4619      	mov	r1, r3
 80084d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80084da:	f7f8 f88d 	bl	80005f8 <__aeabi_dmul>
 80084de:	4602      	mov	r2, r0
 80084e0:	460b      	mov	r3, r1
 80084e2:	4620      	mov	r0, r4
 80084e4:	4629      	mov	r1, r5
 80084e6:	f7f7 fecf 	bl	8000288 <__aeabi_dsub>
 80084ea:	4603      	mov	r3, r0
 80084ec:	460c      	mov	r4, r1
 80084ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084f0:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	=	scurve->s_1 + scurve->v_1*t + 0.5*j_max*tm*t*t - j_max*t*t*t/6;
 80084f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f6:	e9d3 4520 	ldrd	r4, r5, [r3, #128]	; 0x80
 80084fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fc:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8008500:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008504:	f7f8 f878 	bl	80005f8 <__aeabi_dmul>
 8008508:	4602      	mov	r2, r0
 800850a:	460b      	mov	r3, r1
 800850c:	4620      	mov	r0, r4
 800850e:	4629      	mov	r1, r5
 8008510:	f7f7 febc 	bl	800028c <__adddf3>
 8008514:	4603      	mov	r3, r0
 8008516:	460c      	mov	r4, r1
 8008518:	4625      	mov	r5, r4
 800851a:	461c      	mov	r4, r3
 800851c:	f04f 0200 	mov.w	r2, #0
 8008520:	4b28      	ldr	r3, [pc, #160]	; (80085c4 <scaraFLowScurve+0x914>)
 8008522:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008526:	f7f8 f867 	bl	80005f8 <__aeabi_dmul>
 800852a:	4602      	mov	r2, r0
 800852c:	460b      	mov	r3, r1
 800852e:	4610      	mov	r0, r2
 8008530:	4619      	mov	r1, r3
 8008532:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008536:	f7f8 f85f 	bl	80005f8 <__aeabi_dmul>
 800853a:	4602      	mov	r2, r0
 800853c:	460b      	mov	r3, r1
 800853e:	4610      	mov	r0, r2
 8008540:	4619      	mov	r1, r3
 8008542:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008546:	f7f8 f857 	bl	80005f8 <__aeabi_dmul>
 800854a:	4602      	mov	r2, r0
 800854c:	460b      	mov	r3, r1
 800854e:	4610      	mov	r0, r2
 8008550:	4619      	mov	r1, r3
 8008552:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008556:	f7f8 f84f 	bl	80005f8 <__aeabi_dmul>
 800855a:	4602      	mov	r2, r0
 800855c:	460b      	mov	r3, r1
 800855e:	4620      	mov	r0, r4
 8008560:	4629      	mov	r1, r5
 8008562:	f7f7 fe93 	bl	800028c <__adddf3>
 8008566:	4603      	mov	r3, r0
 8008568:	460c      	mov	r4, r1
 800856a:	4625      	mov	r5, r4
 800856c:	461c      	mov	r4, r3
 800856e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008572:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008576:	f7f8 f83f 	bl	80005f8 <__aeabi_dmul>
 800857a:	4602      	mov	r2, r0
 800857c:	460b      	mov	r3, r1
 800857e:	4610      	mov	r0, r2
 8008580:	4619      	mov	r1, r3
 8008582:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008586:	f7f8 f837 	bl	80005f8 <__aeabi_dmul>
 800858a:	4602      	mov	r2, r0
 800858c:	460b      	mov	r3, r1
 800858e:	4610      	mov	r0, r2
 8008590:	4619      	mov	r1, r3
 8008592:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008596:	f7f8 f82f 	bl	80005f8 <__aeabi_dmul>
 800859a:	4602      	mov	r2, r0
 800859c:	460b      	mov	r3, r1
 800859e:	4610      	mov	r0, r2
 80085a0:	4619      	mov	r1, r3
 80085a2:	f04f 0200 	mov.w	r2, #0
 80085a6:	4b08      	ldr	r3, [pc, #32]	; (80085c8 <scaraFLowScurve+0x918>)
 80085a8:	f7f8 f950 	bl	800084c <__aeabi_ddiv>
 80085ac:	4602      	mov	r2, r0
 80085ae:	460b      	mov	r3, r1
 80085b0:	4620      	mov	r0, r4
 80085b2:	4629      	mov	r1, r5
 80085b4:	f7f7 fe68 	bl	8000288 <__aeabi_dsub>
 80085b8:	4603      	mov	r3, r0
 80085ba:	460c      	mov	r4, r1
 80085bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085be:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 80085c2:	e24b      	b.n	8008a5c <scaraFLowScurve+0xdac>
 80085c4:	3fe00000 	.word	0x3fe00000
 80085c8:	40180000 	.word	0x40180000
		 // Phase 3
		 } else if ( ((2*tm) <= time) && ( time < (2*tm + tc)) ) {
 80085cc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80085d0:	4602      	mov	r2, r0
 80085d2:	460b      	mov	r3, r1
 80085d4:	f7f7 fe5a 	bl	800028c <__adddf3>
 80085d8:	4602      	mov	r2, r0
 80085da:	460b      	mov	r3, r1
 80085dc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80085e0:	f7f8 fa90 	bl	8000b04 <__aeabi_dcmpge>
 80085e4:	4603      	mov	r3, r0
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d04b      	beq.n	8008682 <scaraFLowScurve+0x9d2>
 80085ea:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80085ee:	4602      	mov	r2, r0
 80085f0:	460b      	mov	r3, r1
 80085f2:	f7f7 fe4b 	bl	800028c <__adddf3>
 80085f6:	4602      	mov	r2, r0
 80085f8:	460b      	mov	r3, r1
 80085fa:	4610      	mov	r0, r2
 80085fc:	4619      	mov	r1, r3
 80085fe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008602:	f7f7 fe43 	bl	800028c <__adddf3>
 8008606:	4602      	mov	r2, r0
 8008608:	460b      	mov	r3, r1
 800860a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800860e:	f7f8 fa65 	bl	8000adc <__aeabi_dcmplt>
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d034      	beq.n	8008682 <scaraFLowScurve+0x9d2>
			 t = time - 2*tm;
 8008618:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800861c:	4602      	mov	r2, r0
 800861e:	460b      	mov	r3, r1
 8008620:	f7f7 fe34 	bl	800028c <__adddf3>
 8008624:	4603      	mov	r3, r0
 8008626:	460c      	mov	r4, r1
 8008628:	461a      	mov	r2, r3
 800862a:	4623      	mov	r3, r4
 800862c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008630:	f7f7 fe2a 	bl	8000288 <__aeabi_dsub>
 8008634:	4603      	mov	r3, r0
 8008636:	460c      	mov	r4, r1
 8008638:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	=	0;
 800863c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800863e:	f04f 0300 	mov.w	r3, #0
 8008642:	f04f 0400 	mov.w	r4, #0
 8008646:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_2;
 800864a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864c:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 8008650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008652:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_2 + scurve->v_2*t;
 8008656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008658:	e9d3 4524 	ldrd	r4, r5, [r3, #144]	; 0x90
 800865c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865e:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 8008662:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008666:	f7f7 ffc7 	bl	80005f8 <__aeabi_dmul>
 800866a:	4602      	mov	r2, r0
 800866c:	460b      	mov	r3, r1
 800866e:	4620      	mov	r0, r4
 8008670:	4629      	mov	r1, r5
 8008672:	f7f7 fe0b 	bl	800028c <__adddf3>
 8008676:	4603      	mov	r3, r0
 8008678:	460c      	mov	r4, r1
 800867a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800867c:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8008680:	e1ec      	b.n	8008a5c <scaraFLowScurve+0xdac>
		 // Phase 4
		 } else if ( ((2*tm + tc) <= time) && ( time < (3*tm + tc)) ) {
 8008682:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008686:	4602      	mov	r2, r0
 8008688:	460b      	mov	r3, r1
 800868a:	f7f7 fdff 	bl	800028c <__adddf3>
 800868e:	4602      	mov	r2, r0
 8008690:	460b      	mov	r3, r1
 8008692:	4610      	mov	r0, r2
 8008694:	4619      	mov	r1, r3
 8008696:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800869a:	f7f7 fdf7 	bl	800028c <__adddf3>
 800869e:	4602      	mov	r2, r0
 80086a0:	460b      	mov	r3, r1
 80086a2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80086a6:	f7f8 fa2d 	bl	8000b04 <__aeabi_dcmpge>
 80086aa:	4603      	mov	r3, r0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	f000 80af 	beq.w	8008810 <scaraFLowScurve+0xb60>
 80086b2:	f04f 0200 	mov.w	r2, #0
 80086b6:	4b53      	ldr	r3, [pc, #332]	; (8008804 <scaraFLowScurve+0xb54>)
 80086b8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80086bc:	f7f7 ff9c 	bl	80005f8 <__aeabi_dmul>
 80086c0:	4602      	mov	r2, r0
 80086c2:	460b      	mov	r3, r1
 80086c4:	4610      	mov	r0, r2
 80086c6:	4619      	mov	r1, r3
 80086c8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80086cc:	f7f7 fdde 	bl	800028c <__adddf3>
 80086d0:	4602      	mov	r2, r0
 80086d2:	460b      	mov	r3, r1
 80086d4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80086d8:	f7f8 fa00 	bl	8000adc <__aeabi_dcmplt>
 80086dc:	4603      	mov	r3, r0
 80086de:	2b00      	cmp	r3, #0
 80086e0:	f000 8096 	beq.w	8008810 <scaraFLowScurve+0xb60>
			 t = time - (2*tm + tc);
 80086e4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80086e8:	4602      	mov	r2, r0
 80086ea:	460b      	mov	r3, r1
 80086ec:	f7f7 fdce 	bl	800028c <__adddf3>
 80086f0:	4603      	mov	r3, r0
 80086f2:	460c      	mov	r4, r1
 80086f4:	4618      	mov	r0, r3
 80086f6:	4621      	mov	r1, r4
 80086f8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80086fc:	f7f7 fdc6 	bl	800028c <__adddf3>
 8008700:	4603      	mov	r3, r0
 8008702:	460c      	mov	r4, r1
 8008704:	461a      	mov	r2, r3
 8008706:	4623      	mov	r3, r4
 8008708:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800870c:	f7f7 fdbc 	bl	8000288 <__aeabi_dsub>
 8008710:	4603      	mov	r3, r0
 8008712:	460c      	mov	r4, r1
 8008714:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	=	-j_max*t;
 8008718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800871a:	603b      	str	r3, [r7, #0]
 800871c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800871e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008722:	607b      	str	r3, [r7, #4]
 8008724:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008728:	e9d7 0100 	ldrd	r0, r1, [r7]
 800872c:	f7f7 ff64 	bl	80005f8 <__aeabi_dmul>
 8008730:	4603      	mov	r3, r0
 8008732:	460c      	mov	r4, r1
 8008734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008736:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_3 - 0.5*j_max*t*t;
 800873a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873c:	e9d3 4526 	ldrd	r4, r5, [r3, #152]	; 0x98
 8008740:	f04f 0200 	mov.w	r2, #0
 8008744:	4b30      	ldr	r3, [pc, #192]	; (8008808 <scaraFLowScurve+0xb58>)
 8008746:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800874a:	f7f7 ff55 	bl	80005f8 <__aeabi_dmul>
 800874e:	4602      	mov	r2, r0
 8008750:	460b      	mov	r3, r1
 8008752:	4610      	mov	r0, r2
 8008754:	4619      	mov	r1, r3
 8008756:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800875a:	f7f7 ff4d 	bl	80005f8 <__aeabi_dmul>
 800875e:	4602      	mov	r2, r0
 8008760:	460b      	mov	r3, r1
 8008762:	4610      	mov	r0, r2
 8008764:	4619      	mov	r1, r3
 8008766:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800876a:	f7f7 ff45 	bl	80005f8 <__aeabi_dmul>
 800876e:	4602      	mov	r2, r0
 8008770:	460b      	mov	r3, r1
 8008772:	4620      	mov	r0, r4
 8008774:	4629      	mov	r1, r5
 8008776:	f7f7 fd87 	bl	8000288 <__aeabi_dsub>
 800877a:	4603      	mov	r3, r0
 800877c:	460c      	mov	r4, r1
 800877e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008780:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_3 + scurve->v_3*t - j_max*t*t*t/6;
 8008784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008786:	e9d3 4528 	ldrd	r4, r5, [r3, #160]	; 0xa0
 800878a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878c:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 8008790:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008794:	f7f7 ff30 	bl	80005f8 <__aeabi_dmul>
 8008798:	4602      	mov	r2, r0
 800879a:	460b      	mov	r3, r1
 800879c:	4620      	mov	r0, r4
 800879e:	4629      	mov	r1, r5
 80087a0:	f7f7 fd74 	bl	800028c <__adddf3>
 80087a4:	4603      	mov	r3, r0
 80087a6:	460c      	mov	r4, r1
 80087a8:	4625      	mov	r5, r4
 80087aa:	461c      	mov	r4, r3
 80087ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80087b0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80087b4:	f7f7 ff20 	bl	80005f8 <__aeabi_dmul>
 80087b8:	4602      	mov	r2, r0
 80087ba:	460b      	mov	r3, r1
 80087bc:	4610      	mov	r0, r2
 80087be:	4619      	mov	r1, r3
 80087c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80087c4:	f7f7 ff18 	bl	80005f8 <__aeabi_dmul>
 80087c8:	4602      	mov	r2, r0
 80087ca:	460b      	mov	r3, r1
 80087cc:	4610      	mov	r0, r2
 80087ce:	4619      	mov	r1, r3
 80087d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80087d4:	f7f7 ff10 	bl	80005f8 <__aeabi_dmul>
 80087d8:	4602      	mov	r2, r0
 80087da:	460b      	mov	r3, r1
 80087dc:	4610      	mov	r0, r2
 80087de:	4619      	mov	r1, r3
 80087e0:	f04f 0200 	mov.w	r2, #0
 80087e4:	4b09      	ldr	r3, [pc, #36]	; (800880c <scaraFLowScurve+0xb5c>)
 80087e6:	f7f8 f831 	bl	800084c <__aeabi_ddiv>
 80087ea:	4602      	mov	r2, r0
 80087ec:	460b      	mov	r3, r1
 80087ee:	4620      	mov	r0, r4
 80087f0:	4629      	mov	r1, r5
 80087f2:	f7f7 fd49 	bl	8000288 <__aeabi_dsub>
 80087f6:	4603      	mov	r3, r0
 80087f8:	460c      	mov	r4, r1
 80087fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087fc:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8008800:	e12c      	b.n	8008a5c <scaraFLowScurve+0xdac>
 8008802:	bf00      	nop
 8008804:	40080000 	.word	0x40080000
 8008808:	3fe00000 	.word	0x3fe00000
 800880c:	40180000 	.word	0x40180000
		 // Phase 5
		 } else if ( ((3*tm + tc) <= time) && ( time < (4*tm + tc)) ) {
 8008810:	f04f 0200 	mov.w	r2, #0
 8008814:	4b94      	ldr	r3, [pc, #592]	; (8008a68 <scaraFLowScurve+0xdb8>)
 8008816:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800881a:	f7f7 feed 	bl	80005f8 <__aeabi_dmul>
 800881e:	4602      	mov	r2, r0
 8008820:	460b      	mov	r3, r1
 8008822:	4610      	mov	r0, r2
 8008824:	4619      	mov	r1, r3
 8008826:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800882a:	f7f7 fd2f 	bl	800028c <__adddf3>
 800882e:	4602      	mov	r2, r0
 8008830:	460b      	mov	r3, r1
 8008832:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008836:	f7f8 f965 	bl	8000b04 <__aeabi_dcmpge>
 800883a:	4603      	mov	r3, r0
 800883c:	2b00      	cmp	r3, #0
 800883e:	f000 80f6 	beq.w	8008a2e <scaraFLowScurve+0xd7e>
 8008842:	f04f 0200 	mov.w	r2, #0
 8008846:	4b89      	ldr	r3, [pc, #548]	; (8008a6c <scaraFLowScurve+0xdbc>)
 8008848:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800884c:	f7f7 fed4 	bl	80005f8 <__aeabi_dmul>
 8008850:	4602      	mov	r2, r0
 8008852:	460b      	mov	r3, r1
 8008854:	4610      	mov	r0, r2
 8008856:	4619      	mov	r1, r3
 8008858:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800885c:	f7f7 fd16 	bl	800028c <__adddf3>
 8008860:	4602      	mov	r2, r0
 8008862:	460b      	mov	r3, r1
 8008864:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008868:	f7f8 f938 	bl	8000adc <__aeabi_dcmplt>
 800886c:	4603      	mov	r3, r0
 800886e:	2b00      	cmp	r3, #0
 8008870:	f000 80dd 	beq.w	8008a2e <scaraFLowScurve+0xd7e>
			 t = time - (3*tm + tc);
 8008874:	f04f 0200 	mov.w	r2, #0
 8008878:	4b7b      	ldr	r3, [pc, #492]	; (8008a68 <scaraFLowScurve+0xdb8>)
 800887a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800887e:	f7f7 febb 	bl	80005f8 <__aeabi_dmul>
 8008882:	4602      	mov	r2, r0
 8008884:	460b      	mov	r3, r1
 8008886:	4610      	mov	r0, r2
 8008888:	4619      	mov	r1, r3
 800888a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800888e:	f7f7 fcfd 	bl	800028c <__adddf3>
 8008892:	4602      	mov	r2, r0
 8008894:	460b      	mov	r3, r1
 8008896:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800889a:	f7f7 fcf5 	bl	8000288 <__aeabi_dsub>
 800889e:	4602      	mov	r2, r0
 80088a0:	460b      	mov	r3, r1
 80088a2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			 scurve->a_current	=	-j_max*tm + j_max*t;
 80088a6:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 80088a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088aa:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80088ae:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80088b2:	4620      	mov	r0, r4
 80088b4:	4629      	mov	r1, r5
 80088b6:	f7f7 fe9f 	bl	80005f8 <__aeabi_dmul>
 80088ba:	4603      	mov	r3, r0
 80088bc:	460c      	mov	r4, r1
 80088be:	4625      	mov	r5, r4
 80088c0:	461c      	mov	r4, r3
 80088c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80088c6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80088ca:	f7f7 fe95 	bl	80005f8 <__aeabi_dmul>
 80088ce:	4602      	mov	r2, r0
 80088d0:	460b      	mov	r3, r1
 80088d2:	4620      	mov	r0, r4
 80088d4:	4629      	mov	r1, r5
 80088d6:	f7f7 fcd9 	bl	800028c <__adddf3>
 80088da:	4603      	mov	r3, r0
 80088dc:	460c      	mov	r4, r1
 80088de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088e0:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_4 - j_max*tm*t + 0.5*j_max*t*t;
 80088e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e6:	e9d3 452a 	ldrd	r4, r5, [r3, #168]	; 0xa8
 80088ea:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80088ee:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80088f2:	f7f7 fe81 	bl	80005f8 <__aeabi_dmul>
 80088f6:	4602      	mov	r2, r0
 80088f8:	460b      	mov	r3, r1
 80088fa:	4610      	mov	r0, r2
 80088fc:	4619      	mov	r1, r3
 80088fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008902:	f7f7 fe79 	bl	80005f8 <__aeabi_dmul>
 8008906:	4602      	mov	r2, r0
 8008908:	460b      	mov	r3, r1
 800890a:	4620      	mov	r0, r4
 800890c:	4629      	mov	r1, r5
 800890e:	f7f7 fcbb 	bl	8000288 <__aeabi_dsub>
 8008912:	4603      	mov	r3, r0
 8008914:	460c      	mov	r4, r1
 8008916:	4625      	mov	r5, r4
 8008918:	461c      	mov	r4, r3
 800891a:	f04f 0200 	mov.w	r2, #0
 800891e:	4b54      	ldr	r3, [pc, #336]	; (8008a70 <scaraFLowScurve+0xdc0>)
 8008920:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008924:	f7f7 fe68 	bl	80005f8 <__aeabi_dmul>
 8008928:	4602      	mov	r2, r0
 800892a:	460b      	mov	r3, r1
 800892c:	4610      	mov	r0, r2
 800892e:	4619      	mov	r1, r3
 8008930:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008934:	f7f7 fe60 	bl	80005f8 <__aeabi_dmul>
 8008938:	4602      	mov	r2, r0
 800893a:	460b      	mov	r3, r1
 800893c:	4610      	mov	r0, r2
 800893e:	4619      	mov	r1, r3
 8008940:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008944:	f7f7 fe58 	bl	80005f8 <__aeabi_dmul>
 8008948:	4602      	mov	r2, r0
 800894a:	460b      	mov	r3, r1
 800894c:	4620      	mov	r0, r4
 800894e:	4629      	mov	r1, r5
 8008950:	f7f7 fc9c 	bl	800028c <__adddf3>
 8008954:	4603      	mov	r3, r0
 8008956:	460c      	mov	r4, r1
 8008958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800895a:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t - 0.5*j_max*tm*t*t + j_max*t*t*t/6;
 800895e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008960:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 8008964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008966:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 800896a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800896e:	f7f7 fe43 	bl	80005f8 <__aeabi_dmul>
 8008972:	4602      	mov	r2, r0
 8008974:	460b      	mov	r3, r1
 8008976:	4620      	mov	r0, r4
 8008978:	4629      	mov	r1, r5
 800897a:	f7f7 fc87 	bl	800028c <__adddf3>
 800897e:	4603      	mov	r3, r0
 8008980:	460c      	mov	r4, r1
 8008982:	4625      	mov	r5, r4
 8008984:	461c      	mov	r4, r3
 8008986:	f04f 0200 	mov.w	r2, #0
 800898a:	4b39      	ldr	r3, [pc, #228]	; (8008a70 <scaraFLowScurve+0xdc0>)
 800898c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008990:	f7f7 fe32 	bl	80005f8 <__aeabi_dmul>
 8008994:	4602      	mov	r2, r0
 8008996:	460b      	mov	r3, r1
 8008998:	4610      	mov	r0, r2
 800899a:	4619      	mov	r1, r3
 800899c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80089a0:	f7f7 fe2a 	bl	80005f8 <__aeabi_dmul>
 80089a4:	4602      	mov	r2, r0
 80089a6:	460b      	mov	r3, r1
 80089a8:	4610      	mov	r0, r2
 80089aa:	4619      	mov	r1, r3
 80089ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80089b0:	f7f7 fe22 	bl	80005f8 <__aeabi_dmul>
 80089b4:	4602      	mov	r2, r0
 80089b6:	460b      	mov	r3, r1
 80089b8:	4610      	mov	r0, r2
 80089ba:	4619      	mov	r1, r3
 80089bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80089c0:	f7f7 fe1a 	bl	80005f8 <__aeabi_dmul>
 80089c4:	4602      	mov	r2, r0
 80089c6:	460b      	mov	r3, r1
 80089c8:	4620      	mov	r0, r4
 80089ca:	4629      	mov	r1, r5
 80089cc:	f7f7 fc5c 	bl	8000288 <__aeabi_dsub>
 80089d0:	4603      	mov	r3, r0
 80089d2:	460c      	mov	r4, r1
 80089d4:	4625      	mov	r5, r4
 80089d6:	461c      	mov	r4, r3
 80089d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80089dc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80089e0:	f7f7 fe0a 	bl	80005f8 <__aeabi_dmul>
 80089e4:	4602      	mov	r2, r0
 80089e6:	460b      	mov	r3, r1
 80089e8:	4610      	mov	r0, r2
 80089ea:	4619      	mov	r1, r3
 80089ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80089f0:	f7f7 fe02 	bl	80005f8 <__aeabi_dmul>
 80089f4:	4602      	mov	r2, r0
 80089f6:	460b      	mov	r3, r1
 80089f8:	4610      	mov	r0, r2
 80089fa:	4619      	mov	r1, r3
 80089fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008a00:	f7f7 fdfa 	bl	80005f8 <__aeabi_dmul>
 8008a04:	4602      	mov	r2, r0
 8008a06:	460b      	mov	r3, r1
 8008a08:	4610      	mov	r0, r2
 8008a0a:	4619      	mov	r1, r3
 8008a0c:	f04f 0200 	mov.w	r2, #0
 8008a10:	4b18      	ldr	r3, [pc, #96]	; (8008a74 <scaraFLowScurve+0xdc4>)
 8008a12:	f7f7 ff1b 	bl	800084c <__aeabi_ddiv>
 8008a16:	4602      	mov	r2, r0
 8008a18:	460b      	mov	r3, r1
 8008a1a:	4620      	mov	r0, r4
 8008a1c:	4629      	mov	r1, r5
 8008a1e:	f7f7 fc35 	bl	800028c <__adddf3>
 8008a22:	4603      	mov	r3, r0
 8008a24:	460c      	mov	r4, r1
 8008a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a28:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8008a2c:	e016      	b.n	8008a5c <scaraFLowScurve+0xdac>
		 } else {
			 scurve->a_current = 0;
 8008a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a30:	f04f 0300 	mov.w	r3, #0
 8008a34:	f04f 0400 	mov.w	r4, #0
 8008a38:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current = 0;
 8008a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a3e:	f04f 0300 	mov.w	r3, #0
 8008a42:	f04f 0400 	mov.w	r4, #0
 8008a46:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current = scurve->total_s;
 8008a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4c:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8008a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a52:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8008a56:	e001      	b.n	8008a5c <scaraFLowScurve+0xdac>
		 }

	 } else {
		 return SCARA_STATUS_ERROR;
 8008a58:	2301      	movs	r3, #1
 8008a5a:	e000      	b.n	8008a5e <scaraFLowScurve+0xdae>
	 }

	 return SCARA_STATUS_OK;
 8008a5c:	2300      	movs	r3, #0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3748      	adds	r7, #72	; 0x48
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bdb0      	pop	{r4, r5, r7, pc}
 8008a66:	bf00      	nop
 8008a68:	40080000 	.word	0x40080000
 8008a6c:	40100000 	.word	0x40100000
 8008a70:	3fe00000 	.word	0x3fe00000
 8008a74:	40180000 	.word	0x40180000

08008a78 <scaraCheckWorkSpace4>:

/* Check limit 4 joint variable */
SCARA_StatusTypeDef	scaraCheckWorkSpace4 (double theta1, double theta2, double d3, double theta4) {
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b088      	sub	sp, #32
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	ed87 0b06 	vstr	d0, [r7, #24]
 8008a82:	ed87 1b04 	vstr	d1, [r7, #16]
 8008a86:	ed87 2b02 	vstr	d2, [r7, #8]
 8008a8a:	ed87 3b00 	vstr	d3, [r7]
	// check theta 1
	if ( theta1 < LIM_MIN_J0 || theta1 > LIM_MAX_J0) {
 8008a8e:	a334      	add	r3, pc, #208	; (adr r3, 8008b60 <scaraCheckWorkSpace4+0xe8>)
 8008a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a94:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008a98:	f7f8 f820 	bl	8000adc <__aeabi_dcmplt>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d109      	bne.n	8008ab6 <scaraCheckWorkSpace4+0x3e>
 8008aa2:	a331      	add	r3, pc, #196	; (adr r3, 8008b68 <scaraCheckWorkSpace4+0xf0>)
 8008aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008aac:	f7f8 f834 	bl	8000b18 <__aeabi_dcmpgt>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d001      	beq.n	8008aba <scaraCheckWorkSpace4+0x42>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008ab6:	2307      	movs	r3, #7
 8008ab8:	e042      	b.n	8008b40 <scaraCheckWorkSpace4+0xc8>
	}
	// check theta 2
	if ( theta2 < LIM_MIN_J1 || theta2 > LIM_MAX_J1) {
 8008aba:	a32d      	add	r3, pc, #180	; (adr r3, 8008b70 <scaraCheckWorkSpace4+0xf8>)
 8008abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008ac4:	f7f8 f80a 	bl	8000adc <__aeabi_dcmplt>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d109      	bne.n	8008ae2 <scaraCheckWorkSpace4+0x6a>
 8008ace:	a32a      	add	r3, pc, #168	; (adr r3, 8008b78 <scaraCheckWorkSpace4+0x100>)
 8008ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008ad8:	f7f8 f81e 	bl	8000b18 <__aeabi_dcmpgt>
 8008adc:	4603      	mov	r3, r0
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d001      	beq.n	8008ae6 <scaraCheckWorkSpace4+0x6e>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008ae2:	2307      	movs	r3, #7
 8008ae4:	e02c      	b.n	8008b40 <scaraCheckWorkSpace4+0xc8>
	}
	// check d 3
	if ( d3 < LIM_MIN_J2 || d3 > LIM_MAX_J2) {
 8008ae6:	f04f 0200 	mov.w	r2, #0
 8008aea:	4b1b      	ldr	r3, [pc, #108]	; (8008b58 <scaraCheckWorkSpace4+0xe0>)
 8008aec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008af0:	f7f7 fff4 	bl	8000adc <__aeabi_dcmplt>
 8008af4:	4603      	mov	r3, r0
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d109      	bne.n	8008b0e <scaraCheckWorkSpace4+0x96>
 8008afa:	f04f 0200 	mov.w	r2, #0
 8008afe:	4b17      	ldr	r3, [pc, #92]	; (8008b5c <scaraCheckWorkSpace4+0xe4>)
 8008b00:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008b04:	f7f8 f808 	bl	8000b18 <__aeabi_dcmpgt>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d001      	beq.n	8008b12 <scaraCheckWorkSpace4+0x9a>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008b0e:	2307      	movs	r3, #7
 8008b10:	e016      	b.n	8008b40 <scaraCheckWorkSpace4+0xc8>
	}
	// check theta 4
	if ( theta4 < LIM_MIN_J3 || theta4 > LIM_MAX_J3) {
 8008b12:	a30d      	add	r3, pc, #52	; (adr r3, 8008b48 <scaraCheckWorkSpace4+0xd0>)
 8008b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b1c:	f7f7 ffde 	bl	8000adc <__aeabi_dcmplt>
 8008b20:	4603      	mov	r3, r0
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d109      	bne.n	8008b3a <scaraCheckWorkSpace4+0xc2>
 8008b26:	a30a      	add	r3, pc, #40	; (adr r3, 8008b50 <scaraCheckWorkSpace4+0xd8>)
 8008b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b30:	f7f7 fff2 	bl	8000b18 <__aeabi_dcmpgt>
 8008b34:	4603      	mov	r3, r0
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d001      	beq.n	8008b3e <scaraCheckWorkSpace4+0xc6>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008b3a:	2307      	movs	r3, #7
 8008b3c:	e000      	b.n	8008b40 <scaraCheckWorkSpace4+0xc8>
	}
	return SCARA_STATUS_OK;
 8008b3e:	2300      	movs	r3, #0
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3720      	adds	r7, #32
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}
 8008b48:	daaaaaab 	.word	0xdaaaaaab
 8008b4c:	c007bc89 	.word	0xc007bc89
 8008b50:	daaaaaab 	.word	0xdaaaaaab
 8008b54:	4007bc89 	.word	0x4007bc89
 8008b58:	3ff00000 	.word	0x3ff00000
 8008b5c:	40590000 	.word	0x40590000
 8008b60:	daaaaaab 	.word	0xdaaaaaab
 8008b64:	bff7bc89 	.word	0xbff7bc89
 8008b68:	daaaaaab 	.word	0xdaaaaaab
 8008b6c:	3ff7bc89 	.word	0x3ff7bc89
 8008b70:	88000000 	.word	0x88000000
 8008b74:	c002d97c 	.word	0xc002d97c
 8008b78:	88000000 	.word	0x88000000
 8008b7c:	4002d97c 	.word	0x4002d97c

08008b80 <scaraCheckWorkSpace1>:

/* Check limit 1 joint variable */
SCARA_StatusTypeDef	scaraCheckWorkSpace1 (Trajectory_TargetTypeDef target, double value) {
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b084      	sub	sp, #16
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	4603      	mov	r3, r0
 8008b88:	ed87 0b00 	vstr	d0, [r7]
 8008b8c:	73fb      	strb	r3, [r7, #15]
	if ( TRAJECTORY_J0 == target) {
 8008b8e:	7bfb      	ldrb	r3, [r7, #15]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d117      	bne.n	8008bc4 <scaraCheckWorkSpace1+0x44>
		if ( (LIM_MIN_J0 <= value) && ( value <= LIM_MAX_J0)) {
 8008b94:	a33c      	add	r3, pc, #240	; (adr r3, 8008c88 <scaraCheckWorkSpace1+0x108>)
 8008b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b9e:	f7f7 ffb1 	bl	8000b04 <__aeabi_dcmpge>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d00b      	beq.n	8008bc0 <scaraCheckWorkSpace1+0x40>
 8008ba8:	a339      	add	r3, pc, #228	; (adr r3, 8008c90 <scaraCheckWorkSpace1+0x110>)
 8008baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bae:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008bb2:	f7f7 ff9d 	bl	8000af0 <__aeabi_dcmple>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d001      	beq.n	8008bc0 <scaraCheckWorkSpace1+0x40>
			return SCARA_STATUS_OK;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	e053      	b.n	8008c68 <scaraCheckWorkSpace1+0xe8>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008bc0:	2307      	movs	r3, #7
 8008bc2:	e051      	b.n	8008c68 <scaraCheckWorkSpace1+0xe8>
		}
	} else if (TRAJECTORY_J1 == target) {
 8008bc4:	7bfb      	ldrb	r3, [r7, #15]
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	d117      	bne.n	8008bfa <scaraCheckWorkSpace1+0x7a>
		if ( (LIM_MIN_J1 <= value) && ( value <= LIM_MAX_J1)) {
 8008bca:	a333      	add	r3, pc, #204	; (adr r3, 8008c98 <scaraCheckWorkSpace1+0x118>)
 8008bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008bd4:	f7f7 ff96 	bl	8000b04 <__aeabi_dcmpge>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d00b      	beq.n	8008bf6 <scaraCheckWorkSpace1+0x76>
 8008bde:	a330      	add	r3, pc, #192	; (adr r3, 8008ca0 <scaraCheckWorkSpace1+0x120>)
 8008be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008be8:	f7f7 ff82 	bl	8000af0 <__aeabi_dcmple>
 8008bec:	4603      	mov	r3, r0
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d001      	beq.n	8008bf6 <scaraCheckWorkSpace1+0x76>
			return SCARA_STATUS_OK;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	e038      	b.n	8008c68 <scaraCheckWorkSpace1+0xe8>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008bf6:	2307      	movs	r3, #7
 8008bf8:	e036      	b.n	8008c68 <scaraCheckWorkSpace1+0xe8>
		}
	} else if (TRAJECTORY_J2 == target) {
 8008bfa:	7bfb      	ldrb	r3, [r7, #15]
 8008bfc:	2b02      	cmp	r3, #2
 8008bfe:	d117      	bne.n	8008c30 <scaraCheckWorkSpace1+0xb0>
		if ( (LIM_MIN_J2 <= value) && ( value <= LIM_MAX_J2)) {
 8008c00:	f04f 0200 	mov.w	r2, #0
 8008c04:	4b1e      	ldr	r3, [pc, #120]	; (8008c80 <scaraCheckWorkSpace1+0x100>)
 8008c06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c0a:	f7f7 ff7b 	bl	8000b04 <__aeabi_dcmpge>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d00b      	beq.n	8008c2c <scaraCheckWorkSpace1+0xac>
 8008c14:	f04f 0200 	mov.w	r2, #0
 8008c18:	4b1a      	ldr	r3, [pc, #104]	; (8008c84 <scaraCheckWorkSpace1+0x104>)
 8008c1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c1e:	f7f7 ff67 	bl	8000af0 <__aeabi_dcmple>
 8008c22:	4603      	mov	r3, r0
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d001      	beq.n	8008c2c <scaraCheckWorkSpace1+0xac>
			return SCARA_STATUS_OK;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	e01d      	b.n	8008c68 <scaraCheckWorkSpace1+0xe8>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008c2c:	2307      	movs	r3, #7
 8008c2e:	e01b      	b.n	8008c68 <scaraCheckWorkSpace1+0xe8>
		}
	} else if (TRAJECTORY_J3 == target) {
 8008c30:	7bfb      	ldrb	r3, [r7, #15]
 8008c32:	2b03      	cmp	r3, #3
 8008c34:	d117      	bne.n	8008c66 <scaraCheckWorkSpace1+0xe6>
		if ( (LIM_MIN_J3 <= value) && ( value <= LIM_MAX_J3)) {
 8008c36:	a30e      	add	r3, pc, #56	; (adr r3, 8008c70 <scaraCheckWorkSpace1+0xf0>)
 8008c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c40:	f7f7 ff60 	bl	8000b04 <__aeabi_dcmpge>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d00b      	beq.n	8008c62 <scaraCheckWorkSpace1+0xe2>
 8008c4a:	a30b      	add	r3, pc, #44	; (adr r3, 8008c78 <scaraCheckWorkSpace1+0xf8>)
 8008c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c54:	f7f7 ff4c 	bl	8000af0 <__aeabi_dcmple>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d001      	beq.n	8008c62 <scaraCheckWorkSpace1+0xe2>
			return SCARA_STATUS_OK;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	e002      	b.n	8008c68 <scaraCheckWorkSpace1+0xe8>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008c62:	2307      	movs	r3, #7
 8008c64:	e000      	b.n	8008c68 <scaraCheckWorkSpace1+0xe8>
		}
	} else {
		return SCARA_STATUS_ERROR;
 8008c66:	2301      	movs	r3, #1
	}
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3710      	adds	r7, #16
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}
 8008c70:	daaaaaab 	.word	0xdaaaaaab
 8008c74:	c007bc89 	.word	0xc007bc89
 8008c78:	daaaaaab 	.word	0xdaaaaaab
 8008c7c:	4007bc89 	.word	0x4007bc89
 8008c80:	3ff00000 	.word	0x3ff00000
 8008c84:	40590000 	.word	0x40590000
 8008c88:	daaaaaab 	.word	0xdaaaaaab
 8008c8c:	bff7bc89 	.word	0xbff7bc89
 8008c90:	daaaaaab 	.word	0xdaaaaaab
 8008c94:	3ff7bc89 	.word	0x3ff7bc89
 8008c98:	88000000 	.word	0x88000000
 8008c9c:	c002d97c 	.word	0xc002d97c
 8008ca0:	88000000 	.word	0x88000000
 8008ca4:	4002d97c 	.word	0x4002d97c

08008ca8 <scaraTestDuty>:

/* Check all of point in travel */
SCARA_StatusTypeDef	scaraTestDuty(void) {
 8008ca8:	b5b0      	push	{r4, r5, r7, lr}
 8008caa:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8008cae:	af2c      	add	r7, sp, #176	; 0xb0
	int32_t sample_count;
	double run_time = 0;
 8008cb0:	f04f 0300 	mov.w	r3, #0
 8008cb4:	f04f 0400 	mov.w	r4, #0
 8008cb8:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
	SCARA_PositionTypeDef test_Next, test_Current;
	SCARA_StatusTypeDef status;
	memcpy(&test_Current, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 8008cbc:	463b      	mov	r3, r7
 8008cbe:	4a36      	ldr	r2, [pc, #216]	; (8008d98 <scaraTestDuty+0xf0>)
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	4611      	mov	r1, r2
 8008cc4:	23b8      	movs	r3, #184	; 0xb8
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	f00c fcf2 	bl	80156b0 <memcpy>
	sample_count = ceil(myDUTY.time_total/T_SAMPLING);
 8008ccc:	4b33      	ldr	r3, [pc, #204]	; (8008d9c <scaraTestDuty+0xf4>)
 8008cce:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8008cd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008cd6:	a32e      	add	r3, pc, #184	; (adr r3, 8008d90 <scaraTestDuty+0xe8>)
 8008cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cdc:	f7f7 fdb6 	bl	800084c <__aeabi_ddiv>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	460c      	mov	r4, r1
 8008ce4:	ec44 3b17 	vmov	d7, r3, r4
 8008ce8:	eeb0 0a47 	vmov.f32	s0, s14
 8008cec:	eef0 0a67 	vmov.f32	s1, s15
 8008cf0:	f010 fa5a 	bl	80191a8 <ceil>
 8008cf4:	ec54 3b10 	vmov	r3, r4, d0
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	4621      	mov	r1, r4
 8008cfc:	f7f7 ff2c 	bl	8000b58 <__aeabi_d2iz>
 8008d00:	4603      	mov	r3, r0
 8008d02:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
	for (int32_t i = 1; i < sample_count; i++) {
 8008d06:	2301      	movs	r3, #1
 8008d08:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8008d0c:	e032      	b.n	8008d74 <scaraTestDuty+0xcc>
		run_time += T_SAMPLING;
 8008d0e:	a320      	add	r3, pc, #128	; (adr r3, 8008d90 <scaraTestDuty+0xe8>)
 8008d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d14:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8008d18:	f7f7 fab8 	bl	800028c <__adddf3>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	460c      	mov	r4, r1
 8008d20:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
		status = scaraFlowDuty(run_time, &test_Next, test_Current);
 8008d24:	463c      	mov	r4, r7
 8008d26:	f107 05b8 	add.w	r5, r7, #184	; 0xb8
 8008d2a:	4668      	mov	r0, sp
 8008d2c:	f104 0308 	add.w	r3, r4, #8
 8008d30:	22b0      	movs	r2, #176	; 0xb0
 8008d32:	4619      	mov	r1, r3
 8008d34:	f00c fcbc 	bl	80156b0 <memcpy>
 8008d38:	e894 000c 	ldmia.w	r4, {r2, r3}
 8008d3c:	4628      	mov	r0, r5
 8008d3e:	ed97 0b60 	vldr	d0, [r7, #384]	; 0x180
 8008d42:	f7fe f99b 	bl	800707c <scaraFlowDuty>
 8008d46:	4603      	mov	r3, r0
 8008d48:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
		if (status != SCARA_STATUS_OK) {
 8008d4c:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d002      	beq.n	8008d5a <scaraTestDuty+0xb2>
			return status;
 8008d54:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8008d58:	e013      	b.n	8008d82 <scaraTestDuty+0xda>
		}
		memcpy(&test_Next, &test_Current, sizeof(SCARA_PositionTypeDef));
 8008d5a:	463a      	mov	r2, r7
 8008d5c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8008d60:	4611      	mov	r1, r2
 8008d62:	22b8      	movs	r2, #184	; 0xb8
 8008d64:	4618      	mov	r0, r3
 8008d66:	f00c fca3 	bl	80156b0 <memcpy>
	for (int32_t i = 1; i < sample_count; i++) {
 8008d6a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8008d6e:	3301      	adds	r3, #1
 8008d70:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8008d74:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8008d78:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	dbc6      	blt.n	8008d0e <scaraTestDuty+0x66>
	}
	return SCARA_STATUS_OK;
 8008d80:	2300      	movs	r3, #0
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bdb0      	pop	{r4, r5, r7, pc}
 8008d8c:	f3af 8000 	nop.w
 8008d90:	40000000 	.word	0x40000000
 8008d94:	3f847ae1 	.word	0x3f847ae1
 8008d98:	20005e38 	.word	0x20005e38
 8008d9c:	20005378 	.word	0x20005378

08008da0 <scaraSetScanFlag>:

void				scaraSetScanFlag(void) {
 8008da0:	b480      	push	{r7}
 8008da2:	af00      	add	r7, sp, #0
	mySCARA.isScanLitmit = TRUE;
 8008da4:	4b03      	ldr	r3, [pc, #12]	; (8008db4 <scaraSetScanFlag+0x14>)
 8008da6:	2201      	movs	r2, #1
 8008da8:	70da      	strb	r2, [r3, #3]
}
 8008daa:	bf00      	nop
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr
 8008db4:	20000c4c 	.word	0x20000c4c

08008db8 <scaraSetOutput>:

void				scaraSetOutput		(uint8_t level) {
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b082      	sub	sp, #8
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	71fb      	strb	r3, [r7, #7]
	mySCARA.outputSet	 = level;
 8008dc2:	4a05      	ldr	r2, [pc, #20]	; (8008dd8 <scaraSetOutput+0x20>)
 8008dc4:	79fb      	ldrb	r3, [r7, #7]
 8008dc6:	7113      	strb	r3, [r2, #4]
	lowlayer_setOutput(level);
 8008dc8:	79fb      	ldrb	r3, [r7, #7]
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f7fb fc5e 	bl	800468c <lowlayer_setOutput>
}
 8008dd0:	bf00      	nop
 8008dd2:	3708      	adds	r7, #8
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}
 8008dd8:	20000c4c 	.word	0x20000c4c

08008ddc <scaraSetDutyState>:

void				scaraSetDutyState(SCARA_DutyStateTypeDef state) {
 8008ddc:	b480      	push	{r7}
 8008dde:	b083      	sub	sp, #12
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	4603      	mov	r3, r0
 8008de4:	71fb      	strb	r3, [r7, #7]
	mySCARA.duty_State = state;
 8008de6:	4a04      	ldr	r2, [pc, #16]	; (8008df8 <scaraSetDutyState+0x1c>)
 8008de8:	79fb      	ldrb	r3, [r7, #7]
 8008dea:	7093      	strb	r3, [r2, #2]
}
 8008dec:	bf00      	nop
 8008dee:	370c      	adds	r7, #12
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr
 8008df8:	20000c4c 	.word	0x20000c4c

08008dfc <scaraSetMode>:

void				scaraSetMode(SCARA_ModeTypeDef mode) {
 8008dfc:	b480      	push	{r7}
 8008dfe:	b083      	sub	sp, #12
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	4603      	mov	r3, r0
 8008e04:	71fb      	strb	r3, [r7, #7]
	mySCARA.mode = mode;
 8008e06:	4a04      	ldr	r2, [pc, #16]	; (8008e18 <scaraSetMode+0x1c>)
 8008e08:	79fb      	ldrb	r3, [r7, #7]
 8008e0a:	7053      	strb	r3, [r2, #1]
}
 8008e0c:	bf00      	nop
 8008e0e:	370c      	adds	r7, #12
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr
 8008e18:	20000c4c 	.word	0x20000c4c

08008e1c <scaraSetMethod>:

void				scaraSetMethod(SCARA_MethodTypeDef method) {
 8008e1c:	b480      	push	{r7}
 8008e1e:	b083      	sub	sp, #12
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	4603      	mov	r3, r0
 8008e24:	71fb      	strb	r3, [r7, #7]
	mySCARA.method = method;
 8008e26:	4a04      	ldr	r2, [pc, #16]	; (8008e38 <scaraSetMethod+0x1c>)
 8008e28:	79fb      	ldrb	r3, [r7, #7]
 8008e2a:	7013      	strb	r3, [r2, #0]
}
 8008e2c:	bf00      	nop
 8008e2e:	370c      	adds	r7, #12
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr
 8008e38:	20000c4c 	.word	0x20000c4c

08008e3c <scaraGetPosition>:


void				scaraGetPosition	(SCARA_PositionTypeDef *pos) {
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b082      	sub	sp, #8
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
	memcpy(pos, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 8008e44:	22b8      	movs	r2, #184	; 0xb8
 8008e46:	4904      	ldr	r1, [pc, #16]	; (8008e58 <scaraGetPosition+0x1c>)
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f00c fc31 	bl	80156b0 <memcpy>
}
 8008e4e:	bf00      	nop
 8008e50:	3708      	adds	r7, #8
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
 8008e56:	bf00      	nop
 8008e58:	20005e38 	.word	0x20005e38

08008e5c <scaraGetMode>:


SCARA_ModeTypeDef	scaraGetMode(void) {
 8008e5c:	b480      	push	{r7}
 8008e5e:	af00      	add	r7, sp, #0
	return mySCARA.mode;
 8008e60:	4b03      	ldr	r3, [pc, #12]	; (8008e70 <scaraGetMode+0x14>)
 8008e62:	785b      	ldrb	r3, [r3, #1]
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr
 8008e6e:	bf00      	nop
 8008e70:	20000c4c 	.word	0x20000c4c

08008e74 <scaraGetMethod>:

SCARA_MethodTypeDef	scaraGetMethod(void) {
 8008e74:	b480      	push	{r7}
 8008e76:	af00      	add	r7, sp, #0
	return mySCARA.method;
 8008e78:	4b03      	ldr	r3, [pc, #12]	; (8008e88 <scaraGetMethod+0x14>)
 8008e7a:	781b      	ldrb	r3, [r3, #0]
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr
 8008e86:	bf00      	nop
 8008e88:	20000c4c 	.word	0x20000c4c

08008e8c <scaraGetDutyState>:

SCARA_DutyStateTypeDef	scaraGetDutyState(void) {
 8008e8c:	b480      	push	{r7}
 8008e8e:	af00      	add	r7, sp, #0
	return mySCARA.duty_State;
 8008e90:	4b03      	ldr	r3, [pc, #12]	; (8008ea0 <scaraGetDutyState+0x14>)
 8008e92:	789b      	ldrb	r3, [r3, #2]
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	46bd      	mov	sp, r7
 8008e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9c:	4770      	bx	lr
 8008e9e:	bf00      	nop
 8008ea0:	20000c4c 	.word	0x20000c4c

08008ea4 <scaraIsScanLimit>:

uint8_t					scaraIsScanLimit(void) {
 8008ea4:	b480      	push	{r7}
 8008ea6:	af00      	add	r7, sp, #0
	return mySCARA.isScanLitmit;
 8008ea8:	4b03      	ldr	r3, [pc, #12]	; (8008eb8 <scaraIsScanLimit+0x14>)
 8008eaa:	78db      	ldrb	r3, [r3, #3]
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb4:	4770      	bx	lr
 8008eb6:	bf00      	nop
 8008eb8:	20000c4c 	.word	0x20000c4c
 8008ebc:	00000000 	.word	0x00000000

08008ec0 <scaraIsFinish>:

uint8_t					scaraIsFinish		(double run_time) {
 8008ec0:	b590      	push	{r4, r7, lr}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	ed87 0b00 	vstr	d0, [r7]
	if(myDUTY.time_total + 0.03 < run_time) {
 8008eca:	4b11      	ldr	r3, [pc, #68]	; (8008f10 <scaraIsFinish+0x50>)
 8008ecc:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8008ed0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008ed4:	a30c      	add	r3, pc, #48	; (adr r3, 8008f08 <scaraIsFinish+0x48>)
 8008ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eda:	f7f7 f9d7 	bl	800028c <__adddf3>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	460c      	mov	r4, r1
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	4623      	mov	r3, r4
 8008ee6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008eea:	f7f7 fe15 	bl	8000b18 <__aeabi_dcmpgt>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d001      	beq.n	8008ef8 <scaraIsFinish+0x38>
		return TRUE;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	e000      	b.n	8008efa <scaraIsFinish+0x3a>
	} else {
		return FALSE;
 8008ef8:	2300      	movs	r3, #0
	}
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	370c      	adds	r7, #12
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd90      	pop	{r4, r7, pc}
 8008f02:	bf00      	nop
 8008f04:	f3af 8000 	nop.w
 8008f08:	eb851eb8 	.word	0xeb851eb8
 8008f0c:	3f9eb851 	.word	0x3f9eb851
 8008f10:	20005378 	.word	0x20005378
 8008f14:	00000000 	.word	0x00000000

08008f18 <scaraPosition2String>:

/* Convert position to string*/
int32_t					scaraPosition2String(char *result, SCARA_PositionTypeDef position) {
 8008f18:	b082      	sub	sp, #8
 8008f1a:	b590      	push	{r4, r7, lr}
 8008f1c:	b0af      	sub	sp, #188	; 0xbc
 8008f1e:	af0a      	add	r7, sp, #40	; 0x28
 8008f20:	6078      	str	r0, [r7, #4]
 8008f22:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8008f26:	e881 000c 	stmia.w	r1, {r2, r3}
	uint8_t time[12];
	uint8_t total_time[12];

	int32_t lenght_buff;

	double2string(theta1, position.Theta1*180/PI, 6);
 8008f2a:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8008f2e:	f04f 0200 	mov.w	r2, #0
 8008f32:	4b7f      	ldr	r3, [pc, #508]	; (8009130 <scaraPosition2String+0x218>)
 8008f34:	f7f7 fb60 	bl	80005f8 <__aeabi_dmul>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	460c      	mov	r4, r1
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	4621      	mov	r1, r4
 8008f40:	a379      	add	r3, pc, #484	; (adr r3, 8009128 <scaraPosition2String+0x210>)
 8008f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f46:	f7f7 fc81 	bl	800084c <__aeabi_ddiv>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	460c      	mov	r4, r1
 8008f4e:	ec44 3b17 	vmov	d7, r3, r4
 8008f52:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8008f56:	2106      	movs	r1, #6
 8008f58:	eeb0 0a47 	vmov.f32	s0, s14
 8008f5c:	eef0 0a67 	vmov.f32	s1, s15
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7f8 fb85 	bl	8001670 <double2string>
	double2string(theta2, position.Theta2*180/PI, 6);
 8008f66:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8008f6a:	f04f 0200 	mov.w	r2, #0
 8008f6e:	4b70      	ldr	r3, [pc, #448]	; (8009130 <scaraPosition2String+0x218>)
 8008f70:	f7f7 fb42 	bl	80005f8 <__aeabi_dmul>
 8008f74:	4603      	mov	r3, r0
 8008f76:	460c      	mov	r4, r1
 8008f78:	4618      	mov	r0, r3
 8008f7a:	4621      	mov	r1, r4
 8008f7c:	a36a      	add	r3, pc, #424	; (adr r3, 8009128 <scaraPosition2String+0x210>)
 8008f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f82:	f7f7 fc63 	bl	800084c <__aeabi_ddiv>
 8008f86:	4603      	mov	r3, r0
 8008f88:	460c      	mov	r4, r1
 8008f8a:	ec44 3b17 	vmov	d7, r3, r4
 8008f8e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008f92:	2106      	movs	r1, #6
 8008f94:	eeb0 0a47 	vmov.f32	s0, s14
 8008f98:	eef0 0a67 	vmov.f32	s1, s15
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f7f8 fb67 	bl	8001670 <double2string>
	double2string(d3, position.D3, 6);
 8008fa2:	ed97 7b46 	vldr	d7, [r7, #280]	; 0x118
 8008fa6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8008faa:	2106      	movs	r1, #6
 8008fac:	eeb0 0a47 	vmov.f32	s0, s14
 8008fb0:	eef0 0a67 	vmov.f32	s1, s15
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f7f8 fb5b 	bl	8001670 <double2string>
	double2string(theta4, position.Theta4*180/PI, 6);
 8008fba:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8008fbe:	f04f 0200 	mov.w	r2, #0
 8008fc2:	4b5b      	ldr	r3, [pc, #364]	; (8009130 <scaraPosition2String+0x218>)
 8008fc4:	f7f7 fb18 	bl	80005f8 <__aeabi_dmul>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	460c      	mov	r4, r1
 8008fcc:	4618      	mov	r0, r3
 8008fce:	4621      	mov	r1, r4
 8008fd0:	a355      	add	r3, pc, #340	; (adr r3, 8009128 <scaraPosition2String+0x210>)
 8008fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd6:	f7f7 fc39 	bl	800084c <__aeabi_ddiv>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	460c      	mov	r4, r1
 8008fde:	ec44 3b17 	vmov	d7, r3, r4
 8008fe2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8008fe6:	2106      	movs	r1, #6
 8008fe8:	eeb0 0a47 	vmov.f32	s0, s14
 8008fec:	eef0 0a67 	vmov.f32	s1, s15
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f7f8 fb3d 	bl	8001670 <double2string>
	double2string(x, position.x, 6);
 8008ff6:	ed97 7b3a 	vldr	d7, [r7, #232]	; 0xe8
 8008ffa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008ffe:	2106      	movs	r1, #6
 8009000:	eeb0 0a47 	vmov.f32	s0, s14
 8009004:	eef0 0a67 	vmov.f32	s1, s15
 8009008:	4618      	mov	r0, r3
 800900a:	f7f8 fb31 	bl	8001670 <double2string>
	double2string(y, position.y, 6);
 800900e:	ed97 7b3c 	vldr	d7, [r7, #240]	; 0xf0
 8009012:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009016:	2106      	movs	r1, #6
 8009018:	eeb0 0a47 	vmov.f32	s0, s14
 800901c:	eef0 0a67 	vmov.f32	s1, s15
 8009020:	4618      	mov	r0, r3
 8009022:	f7f8 fb25 	bl	8001670 <double2string>
	double2string(z, position.z, 6);
 8009026:	ed97 7b3e 	vldr	d7, [r7, #248]	; 0xf8
 800902a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800902e:	2106      	movs	r1, #6
 8009030:	eeb0 0a47 	vmov.f32	s0, s14
 8009034:	eef0 0a67 	vmov.f32	s1, s15
 8009038:	4618      	mov	r0, r3
 800903a:	f7f8 fb19 	bl	8001670 <double2string>
	double2string(roll, position.roll*180/PI, 6);
 800903e:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8009042:	f04f 0200 	mov.w	r2, #0
 8009046:	4b3a      	ldr	r3, [pc, #232]	; (8009130 <scaraPosition2String+0x218>)
 8009048:	f7f7 fad6 	bl	80005f8 <__aeabi_dmul>
 800904c:	4603      	mov	r3, r0
 800904e:	460c      	mov	r4, r1
 8009050:	4618      	mov	r0, r3
 8009052:	4621      	mov	r1, r4
 8009054:	a334      	add	r3, pc, #208	; (adr r3, 8009128 <scaraPosition2String+0x210>)
 8009056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800905a:	f7f7 fbf7 	bl	800084c <__aeabi_ddiv>
 800905e:	4603      	mov	r3, r0
 8009060:	460c      	mov	r4, r1
 8009062:	ec44 3b17 	vmov	d7, r3, r4
 8009066:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800906a:	2106      	movs	r1, #6
 800906c:	eeb0 0a47 	vmov.f32	s0, s14
 8009070:	eef0 0a67 	vmov.f32	s1, s15
 8009074:	4618      	mov	r0, r3
 8009076:	f7f8 fafb 	bl	8001670 <double2string>
	double2string(lenght, position.q, 6);
 800907a:	ed97 7b28 	vldr	d7, [r7, #160]	; 0xa0
 800907e:	f107 0320 	add.w	r3, r7, #32
 8009082:	2106      	movs	r1, #6
 8009084:	eeb0 0a47 	vmov.f32	s0, s14
 8009088:	eef0 0a67 	vmov.f32	s1, s15
 800908c:	4618      	mov	r0, r3
 800908e:	f7f8 faef 	bl	8001670 <double2string>
	double2string(total_time, position.total_time, 4);
 8009092:	ed97 7b38 	vldr	d7, [r7, #224]	; 0xe0
 8009096:	f107 0308 	add.w	r3, r7, #8
 800909a:	2104      	movs	r1, #4
 800909c:	eeb0 0a47 	vmov.f32	s0, s14
 80090a0:	eef0 0a67 	vmov.f32	s1, s15
 80090a4:	4618      	mov	r0, r3
 80090a6:	f7f8 fae3 	bl	8001670 <double2string>
	double2string(time, position.t, 4);
 80090aa:	ed97 7b36 	vldr	d7, [r7, #216]	; 0xd8
 80090ae:	f107 0314 	add.w	r3, r7, #20
 80090b2:	2104      	movs	r1, #4
 80090b4:	eeb0 0a47 	vmov.f32	s0, s14
 80090b8:	eef0 0a67 	vmov.f32	s1, s15
 80090bc:	4618      	mov	r0, r3
 80090be:	f7f8 fad7 	bl	8001670 <double2string>
	lenght_buff = snprintf( (char *)result, 144,
 80090c2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80090c6:	f107 0314 	add.w	r3, r7, #20
 80090ca:	9309      	str	r3, [sp, #36]	; 0x24
 80090cc:	f107 0308 	add.w	r3, r7, #8
 80090d0:	9308      	str	r3, [sp, #32]
 80090d2:	f107 0320 	add.w	r3, r7, #32
 80090d6:	9307      	str	r3, [sp, #28]
 80090d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80090dc:	9306      	str	r3, [sp, #24]
 80090de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80090e2:	9305      	str	r3, [sp, #20]
 80090e4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80090e8:	9304      	str	r3, [sp, #16]
 80090ea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80090ee:	9303      	str	r3, [sp, #12]
 80090f0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80090f4:	9302      	str	r3, [sp, #8]
 80090f6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80090fa:	9301      	str	r3, [sp, #4]
 80090fc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8009100:	9300      	str	r3, [sp, #0]
 8009102:	4613      	mov	r3, r2
 8009104:	4a0b      	ldr	r2, [pc, #44]	; (8009134 <scaraPosition2String+0x21c>)
 8009106:	2190      	movs	r1, #144	; 0x90
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f00d f9f9 	bl	8016500 <sniprintf>
 800910e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
						z,
						roll,
						lenght,
						total_time,
						time);
	return lenght_buff;
 8009112:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
}
 8009116:	4618      	mov	r0, r3
 8009118:	3794      	adds	r7, #148	; 0x94
 800911a:	46bd      	mov	sp, r7
 800911c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8009120:	b002      	add	sp, #8
 8009122:	4770      	bx	lr
 8009124:	f3af 8000 	nop.w
 8009128:	60000000 	.word	0x60000000
 800912c:	400921fb 	.word	0x400921fb
 8009130:	40668000 	.word	0x40668000
 8009134:	0801b048 	.word	0x0801b048

08009138 <scaraPosition_packaging>:

void scaraPosition_packaging(uint8_t *data_packet, SCARA_PositionTypeDef position)
{
 8009138:	b082      	sub	sp, #8
 800913a:	b590      	push	{r4, r7, lr}
 800913c:	b083      	sub	sp, #12
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
 8009142:	f107 0118 	add.w	r1, r7, #24
 8009146:	e881 000c 	stmia.w	r1, {r2, r3}
	data_packet[0] = 0x28;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2228      	movs	r2, #40	; 0x28
 800914e:	701a      	strb	r2, [r3, #0]
	data_packet[83] = 0x29;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	3353      	adds	r3, #83	; 0x53
 8009154:	2229      	movs	r2, #41	; 0x29
 8009156:	701a      	strb	r2, [r3, #0]
	data_packet[1] = 0x09;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	3301      	adds	r3, #1
 800915c:	2209      	movs	r2, #9
 800915e:	701a      	strb	r2, [r3, #0]
	memcpy(&data_packet[2], &position.t, 80);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	3302      	adds	r3, #2
 8009164:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8009168:	2250      	movs	r2, #80	; 0x50
 800916a:	4618      	mov	r0, r3
 800916c:	f00c faa0 	bl	80156b0 <memcpy>
	data_packet[82] = lowlayer_readLimitSwitch();
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f103 0452 	add.w	r4, r3, #82	; 0x52
 8009176:	f7fb f9c7 	bl	8004508 <lowlayer_readLimitSwitch>
 800917a:	4603      	mov	r3, r0
 800917c:	7023      	strb	r3, [r4, #0]
}
 800917e:	bf00      	nop
 8009180:	370c      	adds	r7, #12
 8009182:	46bd      	mov	sp, r7
 8009184:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8009188:	b002      	add	sp, #8
 800918a:	4770      	bx	lr
 800918c:	0000      	movs	r0, r0
	...

08009190 <scaraKeyInit>:

/* Convert key command to duty */
SCARA_StatusTypeDef		scaraKeyInit(SCARA_KeyTypeDef key,int32_t speed, double *runtime) {
 8009190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009192:	ed2d 8b02 	vpush	{d8}
 8009196:	f5ad 7d6f 	sub.w	sp, sp, #956	; 0x3bc
 800919a:	af66      	add	r7, sp, #408	; 0x198
 800919c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80091a0:	6019      	str	r1, [r3, #0]
 80091a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80091a6:	601a      	str	r2, [r3, #0]
 80091a8:	f107 0247 	add.w	r2, r7, #71	; 0x47
 80091ac:	4603      	mov	r3, r0
 80091ae:	7013      	strb	r3, [r2, #0]
	DUTY_Command_TypeDef cmd;
	SCARA_StatusTypeDef  status;
	double s, v, a;
	cmd.coordinate_type = DUTY_COORDINATES_REL;
 80091b0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80091b4:	2301      	movs	r3, #1
 80091b6:	7313      	strb	r3, [r2, #12]
	cmd.trajec_type = DUTY_TRAJECTORY_LSPB;
 80091b8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80091bc:	2300      	movs	r3, #0
 80091be:	7413      	strb	r3, [r2, #16]
	cmd.modeInit_type = DUTY_MODE_INIT_QVA;
 80091c0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80091c4:	2300      	movs	r3, #0
 80091c6:	7453      	strb	r3, [r2, #17]
	double v_current;
	Trajectory_LSPB_TypeDef *lspb;
	if (speed < SHIFT_SPEED_MIN || speed > SHIFT_SPPED_MAX) {
 80091c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	dd04      	ble.n	80091dc <scaraKeyInit+0x4c>
 80091d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	2b07      	cmp	r3, #7
 80091da:	dd02      	ble.n	80091e2 <scaraKeyInit+0x52>
		return SCARA_STATUS_ERROR_PARA;
 80091dc:	2306      	movs	r3, #6
 80091de:	f001 b832 	b.w	800a246 <scaraKeyInit+0x10b6>
	}
	switch(key) {
 80091e2:	f107 0347 	add.w	r3, r7, #71	; 0x47
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	2b0f      	cmp	r3, #15
 80091ea:	f200 87d3 	bhi.w	800a194 <scaraKeyInit+0x1004>
 80091ee:	a201      	add	r2, pc, #4	; (adr r2, 80091f4 <scaraKeyInit+0x64>)
 80091f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f4:	08009235 	.word	0x08009235
 80091f8:	0800931b 	.word	0x0800931b
 80091fc:	08009411 	.word	0x08009411
 8009200:	080094f7 	.word	0x080094f7
 8009204:	08009611 	.word	0x08009611
 8009208:	080096f7 	.word	0x080096f7
 800920c:	080097ed 	.word	0x080097ed
 8009210:	08009935 	.word	0x08009935
 8009214:	08009a49 	.word	0x08009a49
 8009218:	08009b25 	.word	0x08009b25
 800921c:	08009c45 	.word	0x08009c45
 8009220:	08009d21 	.word	0x08009d21
 8009224:	08009e0d 	.word	0x08009e0d
 8009228:	08009ec9 	.word	0x08009ec9
 800922c:	08009fcd 	.word	0x08009fcd
 8009230:	0800a0a9 	.word	0x0800a0a9
	case SCARA_KEY_X_INC:
	{
		s = SHIFT_3D*speed;
 8009234:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	ee07 3a90 	vmov	s15, r3
 800923e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009242:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8009246:	ee67 7a87 	vmul.f32	s15, s15, s14
 800924a:	ee17 0a90 	vmov	r0, s15
 800924e:	f7f7 f97b 	bl	8000548 <__aeabi_f2d>
 8009252:	4603      	mov	r3, r0
 8009254:	460c      	mov	r4, r1
 8009256:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 800925a:	a3e5      	add	r3, pc, #916	; (adr r3, 80095f0 <scaraKeyInit+0x460>)
 800925c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009260:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009264:	f7f7 faf2 	bl	800084c <__aeabi_ddiv>
 8009268:	4603      	mov	r3, r0
 800926a:	460c      	mov	r4, r1
 800926c:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 8009270:	a3e1      	add	r3, pc, #900	; (adr r3, 80095f8 <scaraKeyInit+0x468>)
 8009272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009276:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 800927a:	f7f7 fae7 	bl	800084c <__aeabi_ddiv>
 800927e:	4603      	mov	r3, r0
 8009280:	460c      	mov	r4, r1
 8009282:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_3D);
 8009286:	a3de      	add	r3, pc, #888	; (adr r3, 8009600 <scaraKeyInit+0x470>)
 8009288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800928c:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009290:	f7f7 fadc 	bl	800084c <__aeabi_ddiv>
 8009294:	4603      	mov	r3, r0
 8009296:	460c      	mov	r4, r1
 8009298:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800929c:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_3D);
 80092a0:	a3d7      	add	r3, pc, #860	; (adr r3, 8009600 <scaraKeyInit+0x470>)
 80092a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a6:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 80092aa:	f7f7 facf 	bl	800084c <__aeabi_ddiv>
 80092ae:	4603      	mov	r3, r0
 80092b0:	460c      	mov	r4, r1
 80092b2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80092b6:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_TASK;
 80092ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80092be:	2200      	movs	r2, #0
 80092c0:	735a      	strb	r2, [r3, #13]
		cmd.path_type = DUTY_PATH_LINE;
 80092c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80092c6:	2200      	movs	r2, #0
 80092c8:	739a      	strb	r2, [r3, #14]
		cmd.target_point.x 		= s;
 80092ca:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80092ce:	e9d7 3482 	ldrd	r3, r4, [r7, #520]	; 0x208
 80092d2:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		cmd.target_point.y 		= 0;
 80092d6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80092da:	f04f 0300 	mov.w	r3, #0
 80092de:	f04f 0400 	mov.w	r4, #0
 80092e2:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		cmd.target_point.z 		= 0;
 80092e6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80092ea:	f04f 0300 	mov.w	r3, #0
 80092ee:	f04f 0400 	mov.w	r4, #0
 80092f2:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
		cmd.target_point.roll 	= 0;
 80092f6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80092fa:	f04f 0300 	mov.w	r3, #0
 80092fe:	f04f 0400 	mov.w	r4, #0
 8009302:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		v_current = positionCurrent.v_3d;
 8009306:	4bc0      	ldr	r3, [pc, #768]	; (8009608 <scaraKeyInit+0x478>)
 8009308:	e9d3 342a 	ldrd	r3, r4, [r3, #168]	; 0xa8
 800930c:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.task.trajectory_3d.lspb);
 8009310:	4bbe      	ldr	r3, [pc, #760]	; (800960c <scaraKeyInit+0x47c>)
 8009312:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
	break;
 8009316:	f000 bf3d 	b.w	800a194 <scaraKeyInit+0x1004>
	case SCARA_KEY_X_DEC:
	{
		s = SHIFT_3D*speed;
 800931a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	ee07 3a90 	vmov	s15, r3
 8009324:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009328:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800932c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009330:	ee17 0a90 	vmov	r0, s15
 8009334:	f7f7 f908 	bl	8000548 <__aeabi_f2d>
 8009338:	4603      	mov	r3, r0
 800933a:	460c      	mov	r4, r1
 800933c:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 8009340:	a3ab      	add	r3, pc, #684	; (adr r3, 80095f0 <scaraKeyInit+0x460>)
 8009342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009346:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 800934a:	f7f7 fa7f 	bl	800084c <__aeabi_ddiv>
 800934e:	4603      	mov	r3, r0
 8009350:	460c      	mov	r4, r1
 8009352:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 8009356:	a3a8      	add	r3, pc, #672	; (adr r3, 80095f8 <scaraKeyInit+0x468>)
 8009358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800935c:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009360:	f7f7 fa74 	bl	800084c <__aeabi_ddiv>
 8009364:	4603      	mov	r3, r0
 8009366:	460c      	mov	r4, r1
 8009368:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_3D);
 800936c:	a3a4      	add	r3, pc, #656	; (adr r3, 8009600 <scaraKeyInit+0x470>)
 800936e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009372:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009376:	f7f7 fa69 	bl	800084c <__aeabi_ddiv>
 800937a:	4603      	mov	r3, r0
 800937c:	460c      	mov	r4, r1
 800937e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009382:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_3D);
 8009386:	a39e      	add	r3, pc, #632	; (adr r3, 8009600 <scaraKeyInit+0x470>)
 8009388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800938c:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 8009390:	f7f7 fa5c 	bl	800084c <__aeabi_ddiv>
 8009394:	4603      	mov	r3, r0
 8009396:	460c      	mov	r4, r1
 8009398:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800939c:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_TASK;
 80093a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80093a4:	2200      	movs	r2, #0
 80093a6:	735a      	strb	r2, [r3, #13]
		cmd.path_type = DUTY_PATH_LINE;
 80093a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80093ac:	2200      	movs	r2, #0
 80093ae:	739a      	strb	r2, [r3, #14]
		cmd.target_point.x 		= -s;
 80093b0:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80093b4:	633b      	str	r3, [r7, #48]	; 0x30
 80093b6:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80093ba:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80093be:	637b      	str	r3, [r7, #52]	; 0x34
 80093c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80093c4:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80093c8:	ed83 7b1c 	vstr	d7, [r3, #112]	; 0x70
		cmd.target_point.y 		= 0;
 80093cc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80093d0:	f04f 0300 	mov.w	r3, #0
 80093d4:	f04f 0400 	mov.w	r4, #0
 80093d8:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		cmd.target_point.z 		= 0;
 80093dc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80093e0:	f04f 0300 	mov.w	r3, #0
 80093e4:	f04f 0400 	mov.w	r4, #0
 80093e8:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
		cmd.target_point.roll 	= 0;
 80093ec:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80093f0:	f04f 0300 	mov.w	r3, #0
 80093f4:	f04f 0400 	mov.w	r4, #0
 80093f8:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		v_current = positionCurrent.v_3d;
 80093fc:	4b82      	ldr	r3, [pc, #520]	; (8009608 <scaraKeyInit+0x478>)
 80093fe:	e9d3 342a 	ldrd	r3, r4, [r3, #168]	; 0xa8
 8009402:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.task.trajectory_3d.lspb);
 8009406:	4b81      	ldr	r3, [pc, #516]	; (800960c <scaraKeyInit+0x47c>)
 8009408:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
	break;
 800940c:	f000 bec2 	b.w	800a194 <scaraKeyInit+0x1004>
	case SCARA_KEY_Y_INC:
	{
		s = SHIFT_3D*speed;
 8009410:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	ee07 3a90 	vmov	s15, r3
 800941a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800941e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8009422:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009426:	ee17 0a90 	vmov	r0, s15
 800942a:	f7f7 f88d 	bl	8000548 <__aeabi_f2d>
 800942e:	4603      	mov	r3, r0
 8009430:	460c      	mov	r4, r1
 8009432:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 8009436:	a36e      	add	r3, pc, #440	; (adr r3, 80095f0 <scaraKeyInit+0x460>)
 8009438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800943c:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009440:	f7f7 fa04 	bl	800084c <__aeabi_ddiv>
 8009444:	4603      	mov	r3, r0
 8009446:	460c      	mov	r4, r1
 8009448:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 800944c:	a36a      	add	r3, pc, #424	; (adr r3, 80095f8 <scaraKeyInit+0x468>)
 800944e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009452:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009456:	f7f7 f9f9 	bl	800084c <__aeabi_ddiv>
 800945a:	4603      	mov	r3, r0
 800945c:	460c      	mov	r4, r1
 800945e:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_3D);
 8009462:	a367      	add	r3, pc, #412	; (adr r3, 8009600 <scaraKeyInit+0x470>)
 8009464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009468:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 800946c:	f7f7 f9ee 	bl	800084c <__aeabi_ddiv>
 8009470:	4603      	mov	r3, r0
 8009472:	460c      	mov	r4, r1
 8009474:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009478:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_3D);
 800947c:	a360      	add	r3, pc, #384	; (adr r3, 8009600 <scaraKeyInit+0x470>)
 800947e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009482:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 8009486:	f7f7 f9e1 	bl	800084c <__aeabi_ddiv>
 800948a:	4603      	mov	r3, r0
 800948c:	460c      	mov	r4, r1
 800948e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009492:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_TASK;
 8009496:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800949a:	2200      	movs	r2, #0
 800949c:	735a      	strb	r2, [r3, #13]
		cmd.path_type = DUTY_PATH_LINE;
 800949e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80094a2:	2200      	movs	r2, #0
 80094a4:	739a      	strb	r2, [r3, #14]
		cmd.target_point.x 		= 0;
 80094a6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80094aa:	f04f 0300 	mov.w	r3, #0
 80094ae:	f04f 0400 	mov.w	r4, #0
 80094b2:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		cmd.target_point.y 		= s;
 80094b6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80094ba:	e9d7 3482 	ldrd	r3, r4, [r7, #520]	; 0x208
 80094be:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		cmd.target_point.z 		= 0;
 80094c2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80094c6:	f04f 0300 	mov.w	r3, #0
 80094ca:	f04f 0400 	mov.w	r4, #0
 80094ce:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
		cmd.target_point.roll	= 0;
 80094d2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80094d6:	f04f 0300 	mov.w	r3, #0
 80094da:	f04f 0400 	mov.w	r4, #0
 80094de:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		v_current = positionCurrent.v_3d;
 80094e2:	4b49      	ldr	r3, [pc, #292]	; (8009608 <scaraKeyInit+0x478>)
 80094e4:	e9d3 342a 	ldrd	r3, r4, [r3, #168]	; 0xa8
 80094e8:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.task.trajectory_3d.lspb);
 80094ec:	4b47      	ldr	r3, [pc, #284]	; (800960c <scaraKeyInit+0x47c>)
 80094ee:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 80094f2:	f000 be4f 	b.w	800a194 <scaraKeyInit+0x1004>
	case SCARA_KEY_Y_DEC:
	{
		s = SHIFT_3D*speed;
 80094f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	ee07 3a90 	vmov	s15, r3
 8009500:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009504:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8009508:	ee67 7a87 	vmul.f32	s15, s15, s14
 800950c:	ee17 0a90 	vmov	r0, s15
 8009510:	f7f7 f81a 	bl	8000548 <__aeabi_f2d>
 8009514:	4603      	mov	r3, r0
 8009516:	460c      	mov	r4, r1
 8009518:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 800951c:	a334      	add	r3, pc, #208	; (adr r3, 80095f0 <scaraKeyInit+0x460>)
 800951e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009522:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009526:	f7f7 f991 	bl	800084c <__aeabi_ddiv>
 800952a:	4603      	mov	r3, r0
 800952c:	460c      	mov	r4, r1
 800952e:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 8009532:	a331      	add	r3, pc, #196	; (adr r3, 80095f8 <scaraKeyInit+0x468>)
 8009534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009538:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 800953c:	f7f7 f986 	bl	800084c <__aeabi_ddiv>
 8009540:	4603      	mov	r3, r0
 8009542:	460c      	mov	r4, r1
 8009544:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_3D);
 8009548:	a32d      	add	r3, pc, #180	; (adr r3, 8009600 <scaraKeyInit+0x470>)
 800954a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800954e:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009552:	f7f7 f97b 	bl	800084c <__aeabi_ddiv>
 8009556:	4603      	mov	r3, r0
 8009558:	460c      	mov	r4, r1
 800955a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800955e:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_3D);
 8009562:	a327      	add	r3, pc, #156	; (adr r3, 8009600 <scaraKeyInit+0x470>)
 8009564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009568:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 800956c:	f7f7 f96e 	bl	800084c <__aeabi_ddiv>
 8009570:	4603      	mov	r3, r0
 8009572:	460c      	mov	r4, r1
 8009574:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009578:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_TASK;
 800957c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009580:	2200      	movs	r2, #0
 8009582:	735a      	strb	r2, [r3, #13]
		cmd.path_type = DUTY_PATH_LINE;
 8009584:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009588:	2200      	movs	r2, #0
 800958a:	739a      	strb	r2, [r3, #14]
		cmd.target_point.x 		= 0;
 800958c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009590:	f04f 0300 	mov.w	r3, #0
 8009594:	f04f 0400 	mov.w	r4, #0
 8009598:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		cmd.target_point.y 		= -s;
 800959c:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80095a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80095a2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80095a6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80095aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80095b0:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80095b4:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
		cmd.target_point.z 		= 0;
 80095b8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80095bc:	f04f 0300 	mov.w	r3, #0
 80095c0:	f04f 0400 	mov.w	r4, #0
 80095c4:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
		cmd.target_point.roll 	= 0;
 80095c8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80095cc:	f04f 0300 	mov.w	r3, #0
 80095d0:	f04f 0400 	mov.w	r4, #0
 80095d4:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		v_current = positionCurrent.v_3d;
 80095d8:	4b0b      	ldr	r3, [pc, #44]	; (8009608 <scaraKeyInit+0x478>)
 80095da:	e9d3 342a 	ldrd	r3, r4, [r3, #168]	; 0xa8
 80095de:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.task.trajectory_3d.lspb);
 80095e2:	4b0a      	ldr	r3, [pc, #40]	; (800960c <scaraKeyInit+0x47c>)
 80095e4:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 80095e8:	f000 bdd4 	b.w	800a194 <scaraKeyInit+0x1004>
 80095ec:	f3af 8000 	nop.w
 80095f0:	60000000 	.word	0x60000000
 80095f4:	3fedf3b6 	.word	0x3fedf3b6
 80095f8:	40000000 	.word	0x40000000
 80095fc:	3fd0e560 	.word	0x3fd0e560
 8009600:	00000000 	.word	0x00000000
 8009604:	405c2000 	.word	0x405c2000
 8009608:	20005e38 	.word	0x20005e38
 800960c:	20005490 	.word	0x20005490
	case SCARA_KEY_Z_INC:
	{
		s = SHIFT_3D*speed;
 8009610:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	ee07 3a90 	vmov	s15, r3
 800961a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800961e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8009622:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009626:	ee17 0a90 	vmov	r0, s15
 800962a:	f7f6 ff8d 	bl	8000548 <__aeabi_f2d>
 800962e:	4603      	mov	r3, r0
 8009630:	460c      	mov	r4, r1
 8009632:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 8009636:	a3b0      	add	r3, pc, #704	; (adr r3, 80098f8 <scaraKeyInit+0x768>)
 8009638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800963c:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009640:	f7f7 f904 	bl	800084c <__aeabi_ddiv>
 8009644:	4603      	mov	r3, r0
 8009646:	460c      	mov	r4, r1
 8009648:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 800964c:	a3ac      	add	r3, pc, #688	; (adr r3, 8009900 <scaraKeyInit+0x770>)
 800964e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009652:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009656:	f7f7 f8f9 	bl	800084c <__aeabi_ddiv>
 800965a:	4603      	mov	r3, r0
 800965c:	460c      	mov	r4, r1
 800965e:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_3D);
 8009662:	a3a9      	add	r3, pc, #676	; (adr r3, 8009908 <scaraKeyInit+0x778>)
 8009664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009668:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 800966c:	f7f7 f8ee 	bl	800084c <__aeabi_ddiv>
 8009670:	4603      	mov	r3, r0
 8009672:	460c      	mov	r4, r1
 8009674:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009678:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_3D);
 800967c:	a3a2      	add	r3, pc, #648	; (adr r3, 8009908 <scaraKeyInit+0x778>)
 800967e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009682:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 8009686:	f7f7 f8e1 	bl	800084c <__aeabi_ddiv>
 800968a:	4603      	mov	r3, r0
 800968c:	460c      	mov	r4, r1
 800968e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009692:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_TASK;
 8009696:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800969a:	2200      	movs	r2, #0
 800969c:	735a      	strb	r2, [r3, #13]
		cmd.path_type = DUTY_PATH_LINE;
 800969e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80096a2:	2200      	movs	r2, #0
 80096a4:	739a      	strb	r2, [r3, #14]
		cmd.target_point.x 		= 0;
 80096a6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80096aa:	f04f 0300 	mov.w	r3, #0
 80096ae:	f04f 0400 	mov.w	r4, #0
 80096b2:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		cmd.target_point.y 		= 0;
 80096b6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80096ba:	f04f 0300 	mov.w	r3, #0
 80096be:	f04f 0400 	mov.w	r4, #0
 80096c2:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		cmd.target_point.z 		= s;
 80096c6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80096ca:	e9d7 3482 	ldrd	r3, r4, [r7, #520]	; 0x208
 80096ce:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
		cmd.target_point.roll 	= 0;
 80096d2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80096d6:	f04f 0300 	mov.w	r3, #0
 80096da:	f04f 0400 	mov.w	r4, #0
 80096de:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		v_current = positionCurrent.v_3d;
 80096e2:	4b8f      	ldr	r3, [pc, #572]	; (8009920 <scaraKeyInit+0x790>)
 80096e4:	e9d3 342a 	ldrd	r3, r4, [r3, #168]	; 0xa8
 80096e8:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.task.trajectory_3d.lspb);
 80096ec:	4b8d      	ldr	r3, [pc, #564]	; (8009924 <scaraKeyInit+0x794>)
 80096ee:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 80096f2:	f000 bd4f 	b.w	800a194 <scaraKeyInit+0x1004>
	case SCARA_KEY_Z_DEC:
	{
		s = SHIFT_3D*speed;
 80096f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	ee07 3a90 	vmov	s15, r3
 8009700:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009704:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8009708:	ee67 7a87 	vmul.f32	s15, s15, s14
 800970c:	ee17 0a90 	vmov	r0, s15
 8009710:	f7f6 ff1a 	bl	8000548 <__aeabi_f2d>
 8009714:	4603      	mov	r3, r0
 8009716:	460c      	mov	r4, r1
 8009718:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 800971c:	a376      	add	r3, pc, #472	; (adr r3, 80098f8 <scaraKeyInit+0x768>)
 800971e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009722:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009726:	f7f7 f891 	bl	800084c <__aeabi_ddiv>
 800972a:	4603      	mov	r3, r0
 800972c:	460c      	mov	r4, r1
 800972e:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 8009732:	a373      	add	r3, pc, #460	; (adr r3, 8009900 <scaraKeyInit+0x770>)
 8009734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009738:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 800973c:	f7f7 f886 	bl	800084c <__aeabi_ddiv>
 8009740:	4603      	mov	r3, r0
 8009742:	460c      	mov	r4, r1
 8009744:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_3D);
 8009748:	a36f      	add	r3, pc, #444	; (adr r3, 8009908 <scaraKeyInit+0x778>)
 800974a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800974e:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009752:	f7f7 f87b 	bl	800084c <__aeabi_ddiv>
 8009756:	4603      	mov	r3, r0
 8009758:	460c      	mov	r4, r1
 800975a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800975e:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_3D);
 8009762:	a369      	add	r3, pc, #420	; (adr r3, 8009908 <scaraKeyInit+0x778>)
 8009764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009768:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 800976c:	f7f7 f86e 	bl	800084c <__aeabi_ddiv>
 8009770:	4603      	mov	r3, r0
 8009772:	460c      	mov	r4, r1
 8009774:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009778:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_TASK;
 800977c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009780:	2200      	movs	r2, #0
 8009782:	735a      	strb	r2, [r3, #13]
		cmd.path_type = DUTY_PATH_LINE;
 8009784:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009788:	2200      	movs	r2, #0
 800978a:	739a      	strb	r2, [r3, #14]
		cmd.target_point.x 		= 0;
 800978c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009790:	f04f 0300 	mov.w	r3, #0
 8009794:	f04f 0400 	mov.w	r4, #0
 8009798:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		cmd.target_point.y 		= 0;
 800979c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80097a0:	f04f 0300 	mov.w	r3, #0
 80097a4:	f04f 0400 	mov.w	r4, #0
 80097a8:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		cmd.target_point.z 		= -s;
 80097ac:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80097b0:	623b      	str	r3, [r7, #32]
 80097b2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80097b6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80097ba:	627b      	str	r3, [r7, #36]	; 0x24
 80097bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80097c0:	ed97 7b08 	vldr	d7, [r7, #32]
 80097c4:	ed83 7b20 	vstr	d7, [r3, #128]	; 0x80
		cmd.target_point.roll 	= 0;
 80097c8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80097cc:	f04f 0300 	mov.w	r3, #0
 80097d0:	f04f 0400 	mov.w	r4, #0
 80097d4:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		v_current = positionCurrent.v_3d;
 80097d8:	4b51      	ldr	r3, [pc, #324]	; (8009920 <scaraKeyInit+0x790>)
 80097da:	e9d3 342a 	ldrd	r3, r4, [r3, #168]	; 0xa8
 80097de:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.task.trajectory_3d.lspb);
 80097e2:	4b50      	ldr	r3, [pc, #320]	; (8009924 <scaraKeyInit+0x794>)
 80097e4:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 80097e8:	f000 bcd4 	b.w	800a194 <scaraKeyInit+0x1004>
	case SCARA_KEY_ROLL_INC:
	{
		s = SHIFT_ROLL*speed;
 80097ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	ee07 3a90 	vmov	s15, r3
 80097f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80097fa:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8009930 <scaraKeyInit+0x7a0>
 80097fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009802:	ee17 0a90 	vmov	r0, s15
 8009806:	f7f6 fe9f 	bl	8000548 <__aeabi_f2d>
 800980a:	4603      	mov	r3, r0
 800980c:	460c      	mov	r4, r1
 800980e:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 8009812:	a339      	add	r3, pc, #228	; (adr r3, 80098f8 <scaraKeyInit+0x768>)
 8009814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009818:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 800981c:	f7f7 f816 	bl	800084c <__aeabi_ddiv>
 8009820:	4603      	mov	r3, r0
 8009822:	460c      	mov	r4, r1
 8009824:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 8009828:	a335      	add	r3, pc, #212	; (adr r3, 8009900 <scaraKeyInit+0x770>)
 800982a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982e:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009832:	f7f7 f80b 	bl	800084c <__aeabi_ddiv>
 8009836:	4603      	mov	r3, r0
 8009838:	460c      	mov	r4, r1
 800983a:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_ROLL);
 800983e:	a334      	add	r3, pc, #208	; (adr r3, 8009910 <scaraKeyInit+0x780>)
 8009840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009844:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009848:	f7f7 f800 	bl	800084c <__aeabi_ddiv>
 800984c:	4603      	mov	r3, r0
 800984e:	460c      	mov	r4, r1
 8009850:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009854:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_ROLL);
 8009858:	a32d      	add	r3, pc, #180	; (adr r3, 8009910 <scaraKeyInit+0x780>)
 800985a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985e:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 8009862:	f7f6 fff3 	bl	800084c <__aeabi_ddiv>
 8009866:	4603      	mov	r3, r0
 8009868:	460c      	mov	r4, r1
 800986a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800986e:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_TASK;
 8009872:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009876:	2200      	movs	r2, #0
 8009878:	735a      	strb	r2, [r3, #13]
		cmd.path_type = DUTY_PATH_LINE;
 800987a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800987e:	2200      	movs	r2, #0
 8009880:	739a      	strb	r2, [r3, #14]
		cmd.target_point.x 		= 0;
 8009882:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009886:	f04f 0300 	mov.w	r3, #0
 800988a:	f04f 0400 	mov.w	r4, #0
 800988e:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		cmd.target_point.y 		= 0;
 8009892:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009896:	f04f 0300 	mov.w	r3, #0
 800989a:	f04f 0400 	mov.w	r4, #0
 800989e:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		cmd.target_point.z 		= 0;
 80098a2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80098a6:	f04f 0300 	mov.w	r3, #0
 80098aa:	f04f 0400 	mov.w	r4, #0
 80098ae:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
		cmd.target_point.roll 	= s*180/PI;
 80098b2:	f04f 0200 	mov.w	r2, #0
 80098b6:	4b1c      	ldr	r3, [pc, #112]	; (8009928 <scaraKeyInit+0x798>)
 80098b8:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 80098bc:	f7f6 fe9c 	bl	80005f8 <__aeabi_dmul>
 80098c0:	4603      	mov	r3, r0
 80098c2:	460c      	mov	r4, r1
 80098c4:	4618      	mov	r0, r3
 80098c6:	4621      	mov	r1, r4
 80098c8:	a313      	add	r3, pc, #76	; (adr r3, 8009918 <scaraKeyInit+0x788>)
 80098ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ce:	f7f6 ffbd 	bl	800084c <__aeabi_ddiv>
 80098d2:	4603      	mov	r3, r0
 80098d4:	460c      	mov	r4, r1
 80098d6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80098da:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		v_current = positionCurrent.v_roll;
 80098de:	4b10      	ldr	r3, [pc, #64]	; (8009920 <scaraKeyInit+0x790>)
 80098e0:	e9d3 342c 	ldrd	r3, r4, [r3, #176]	; 0xb0
 80098e4:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.task.trajectory_roll.lspb);
 80098e8:	4b10      	ldr	r3, [pc, #64]	; (800992c <scaraKeyInit+0x79c>)
 80098ea:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 80098ee:	f000 bc51 	b.w	800a194 <scaraKeyInit+0x1004>
 80098f2:	bf00      	nop
 80098f4:	f3af 8000 	nop.w
 80098f8:	60000000 	.word	0x60000000
 80098fc:	3fedf3b6 	.word	0x3fedf3b6
 8009900:	40000000 	.word	0x40000000
 8009904:	3fd0e560 	.word	0x3fd0e560
 8009908:	00000000 	.word	0x00000000
 800990c:	405c2000 	.word	0x405c2000
 8009910:	14000000 	.word	0x14000000
 8009914:	4000f6f0 	.word	0x4000f6f0
 8009918:	60000000 	.word	0x60000000
 800991c:	400921fb 	.word	0x400921fb
 8009920:	20005e38 	.word	0x20005e38
 8009924:	20005490 	.word	0x20005490
 8009928:	40668000 	.word	0x40668000
 800992c:	200055e8 	.word	0x200055e8
 8009930:	3d567750 	.word	0x3d567750
	case SCARA_KEY_ROLL_DEC:
	{
		s = SHIFT_ROLL*speed;
 8009934:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	ee07 3a90 	vmov	s15, r3
 800993e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009942:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8009930 <scaraKeyInit+0x7a0>
 8009946:	ee67 7a87 	vmul.f32	s15, s15, s14
 800994a:	ee17 0a90 	vmov	r0, s15
 800994e:	f7f6 fdfb 	bl	8000548 <__aeabi_f2d>
 8009952:	4603      	mov	r3, r0
 8009954:	460c      	mov	r4, r1
 8009956:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 800995a:	a3af      	add	r3, pc, #700	; (adr r3, 8009c18 <scaraKeyInit+0xa88>)
 800995c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009960:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009964:	f7f6 ff72 	bl	800084c <__aeabi_ddiv>
 8009968:	4603      	mov	r3, r0
 800996a:	460c      	mov	r4, r1
 800996c:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 8009970:	a3ab      	add	r3, pc, #684	; (adr r3, 8009c20 <scaraKeyInit+0xa90>)
 8009972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009976:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 800997a:	f7f6 ff67 	bl	800084c <__aeabi_ddiv>
 800997e:	4603      	mov	r3, r0
 8009980:	460c      	mov	r4, r1
 8009982:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_ROLL);
 8009986:	a3a8      	add	r3, pc, #672	; (adr r3, 8009c28 <scaraKeyInit+0xa98>)
 8009988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800998c:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009990:	f7f6 ff5c 	bl	800084c <__aeabi_ddiv>
 8009994:	4603      	mov	r3, r0
 8009996:	460c      	mov	r4, r1
 8009998:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800999c:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_ROLL);
 80099a0:	a3a1      	add	r3, pc, #644	; (adr r3, 8009c28 <scaraKeyInit+0xa98>)
 80099a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a6:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 80099aa:	f7f6 ff4f 	bl	800084c <__aeabi_ddiv>
 80099ae:	4603      	mov	r3, r0
 80099b0:	460c      	mov	r4, r1
 80099b2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80099b6:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_TASK;
 80099ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80099be:	2200      	movs	r2, #0
 80099c0:	735a      	strb	r2, [r3, #13]
		cmd.path_type = DUTY_PATH_LINE;
 80099c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80099c6:	2200      	movs	r2, #0
 80099c8:	739a      	strb	r2, [r3, #14]
		cmd.target_point.x 		= 0;
 80099ca:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80099ce:	f04f 0300 	mov.w	r3, #0
 80099d2:	f04f 0400 	mov.w	r4, #0
 80099d6:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		cmd.target_point.y 		= 0;
 80099da:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80099de:	f04f 0300 	mov.w	r3, #0
 80099e2:	f04f 0400 	mov.w	r4, #0
 80099e6:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		cmd.target_point.z 		= 0;
 80099ea:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80099ee:	f04f 0300 	mov.w	r3, #0
 80099f2:	f04f 0400 	mov.w	r4, #0
 80099f6:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
		cmd.target_point.roll 	= -s*180/PI;
 80099fa:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80099fe:	61bb      	str	r3, [r7, #24]
 8009a00:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8009a04:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009a08:	61fb      	str	r3, [r7, #28]
 8009a0a:	f04f 0200 	mov.w	r2, #0
 8009a0e:	4b88      	ldr	r3, [pc, #544]	; (8009c30 <scaraKeyInit+0xaa0>)
 8009a10:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009a14:	f7f6 fdf0 	bl	80005f8 <__aeabi_dmul>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	460c      	mov	r4, r1
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	4621      	mov	r1, r4
 8009a20:	a37b      	add	r3, pc, #492	; (adr r3, 8009c10 <scaraKeyInit+0xa80>)
 8009a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a26:	f7f6 ff11 	bl	800084c <__aeabi_ddiv>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	460c      	mov	r4, r1
 8009a2e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009a32:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		v_current = positionCurrent.v_roll;
 8009a36:	4b7f      	ldr	r3, [pc, #508]	; (8009c34 <scaraKeyInit+0xaa4>)
 8009a38:	e9d3 342c 	ldrd	r3, r4, [r3, #176]	; 0xb0
 8009a3c:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.task.trajectory_roll.lspb);
 8009a40:	4b7d      	ldr	r3, [pc, #500]	; (8009c38 <scaraKeyInit+0xaa8>)
 8009a42:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 8009a46:	e3a5      	b.n	800a194 <scaraKeyInit+0x1004>
	case SCARA_KEY_VAR0_INC:
	{
		s = SHIFT_VAR0*speed;
 8009a48:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	ee07 3a90 	vmov	s15, r3
 8009a52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a56:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8009c40 <scaraKeyInit+0xab0>
 8009a5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009a5e:	ee17 0a90 	vmov	r0, s15
 8009a62:	f7f6 fd71 	bl	8000548 <__aeabi_f2d>
 8009a66:	4603      	mov	r3, r0
 8009a68:	460c      	mov	r4, r1
 8009a6a:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 8009a6e:	a36a      	add	r3, pc, #424	; (adr r3, 8009c18 <scaraKeyInit+0xa88>)
 8009a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a74:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009a78:	f7f6 fee8 	bl	800084c <__aeabi_ddiv>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	460c      	mov	r4, r1
 8009a80:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 8009a84:	a366      	add	r3, pc, #408	; (adr r3, 8009c20 <scaraKeyInit+0xa90>)
 8009a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a8a:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009a8e:	f7f6 fedd 	bl	800084c <__aeabi_ddiv>
 8009a92:	4603      	mov	r3, r0
 8009a94:	460c      	mov	r4, r1
 8009a96:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_J0);
 8009a9a:	a363      	add	r3, pc, #396	; (adr r3, 8009c28 <scaraKeyInit+0xa98>)
 8009a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa0:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009aa4:	f7f6 fed2 	bl	800084c <__aeabi_ddiv>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	460c      	mov	r4, r1
 8009aac:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009ab0:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_J0);
 8009ab4:	a35c      	add	r3, pc, #368	; (adr r3, 8009c28 <scaraKeyInit+0xa98>)
 8009ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aba:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 8009abe:	f7f6 fec5 	bl	800084c <__aeabi_ddiv>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	460c      	mov	r4, r1
 8009ac6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009aca:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_JOINT;
 8009ace:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	735a      	strb	r2, [r3, #13]
		cmd.joint_type = DUTY_JOINT_SINGLE;
 8009ad6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009ada:	2200      	movs	r2, #0
 8009adc:	73da      	strb	r2, [r3, #15]
		cmd.sub_para_int 	= 0;
 8009ade:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	615a      	str	r2, [r3, #20]
		cmd.sub_para_double = s*180/PI;
 8009ae6:	f04f 0200 	mov.w	r2, #0
 8009aea:	4b51      	ldr	r3, [pc, #324]	; (8009c30 <scaraKeyInit+0xaa0>)
 8009aec:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009af0:	f7f6 fd82 	bl	80005f8 <__aeabi_dmul>
 8009af4:	4603      	mov	r3, r0
 8009af6:	460c      	mov	r4, r1
 8009af8:	4618      	mov	r0, r3
 8009afa:	4621      	mov	r1, r4
 8009afc:	a344      	add	r3, pc, #272	; (adr r3, 8009c10 <scaraKeyInit+0xa80>)
 8009afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b02:	f7f6 fea3 	bl	800084c <__aeabi_ddiv>
 8009b06:	4603      	mov	r3, r0
 8009b08:	460c      	mov	r4, r1
 8009b0a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009b0e:	e9c2 3406 	strd	r3, r4, [r2, #24]
		v_current = positionCurrent.v_theta1;
 8009b12:	4b48      	ldr	r3, [pc, #288]	; (8009c34 <scaraKeyInit+0xaa4>)
 8009b14:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 8009b18:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.joint.trajectory[0].lspb);
 8009b1c:	4b47      	ldr	r3, [pc, #284]	; (8009c3c <scaraKeyInit+0xaac>)
 8009b1e:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 8009b22:	e337      	b.n	800a194 <scaraKeyInit+0x1004>
	case SCARA_KEY_VAR0_DEC:
	{
		s = SHIFT_VAR0*speed;
 8009b24:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	ee07 3a90 	vmov	s15, r3
 8009b2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b32:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8009c40 <scaraKeyInit+0xab0>
 8009b36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009b3a:	ee17 0a90 	vmov	r0, s15
 8009b3e:	f7f6 fd03 	bl	8000548 <__aeabi_f2d>
 8009b42:	4603      	mov	r3, r0
 8009b44:	460c      	mov	r4, r1
 8009b46:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 8009b4a:	a333      	add	r3, pc, #204	; (adr r3, 8009c18 <scaraKeyInit+0xa88>)
 8009b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b50:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009b54:	f7f6 fe7a 	bl	800084c <__aeabi_ddiv>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	460c      	mov	r4, r1
 8009b5c:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 8009b60:	a32f      	add	r3, pc, #188	; (adr r3, 8009c20 <scaraKeyInit+0xa90>)
 8009b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b66:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009b6a:	f7f6 fe6f 	bl	800084c <__aeabi_ddiv>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	460c      	mov	r4, r1
 8009b72:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_J0);
 8009b76:	a32c      	add	r3, pc, #176	; (adr r3, 8009c28 <scaraKeyInit+0xa98>)
 8009b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b7c:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009b80:	f7f6 fe64 	bl	800084c <__aeabi_ddiv>
 8009b84:	4603      	mov	r3, r0
 8009b86:	460c      	mov	r4, r1
 8009b88:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009b8c:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_J0);
 8009b90:	a325      	add	r3, pc, #148	; (adr r3, 8009c28 <scaraKeyInit+0xa98>)
 8009b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b96:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 8009b9a:	f7f6 fe57 	bl	800084c <__aeabi_ddiv>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	460c      	mov	r4, r1
 8009ba2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009ba6:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_JOINT;
 8009baa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009bae:	2201      	movs	r2, #1
 8009bb0:	735a      	strb	r2, [r3, #13]
		cmd.joint_type = DUTY_JOINT_SINGLE;
 8009bb2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	73da      	strb	r2, [r3, #15]
		cmd.sub_para_int 	= 0;
 8009bba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	615a      	str	r2, [r3, #20]
		cmd.sub_para_double = -s*180/PI;
 8009bc2:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8009bc6:	613b      	str	r3, [r7, #16]
 8009bc8:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8009bcc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009bd0:	617b      	str	r3, [r7, #20]
 8009bd2:	f04f 0200 	mov.w	r2, #0
 8009bd6:	4b16      	ldr	r3, [pc, #88]	; (8009c30 <scaraKeyInit+0xaa0>)
 8009bd8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009bdc:	f7f6 fd0c 	bl	80005f8 <__aeabi_dmul>
 8009be0:	4603      	mov	r3, r0
 8009be2:	460c      	mov	r4, r1
 8009be4:	4618      	mov	r0, r3
 8009be6:	4621      	mov	r1, r4
 8009be8:	a309      	add	r3, pc, #36	; (adr r3, 8009c10 <scaraKeyInit+0xa80>)
 8009bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bee:	f7f6 fe2d 	bl	800084c <__aeabi_ddiv>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	460c      	mov	r4, r1
 8009bf6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009bfa:	e9c2 3406 	strd	r3, r4, [r2, #24]
		v_current = positionCurrent.v_theta1;
 8009bfe:	4b0d      	ldr	r3, [pc, #52]	; (8009c34 <scaraKeyInit+0xaa4>)
 8009c00:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 8009c04:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.joint.trajectory[0].lspb);
 8009c08:	4b0c      	ldr	r3, [pc, #48]	; (8009c3c <scaraKeyInit+0xaac>)
 8009c0a:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 8009c0e:	e2c1      	b.n	800a194 <scaraKeyInit+0x1004>
 8009c10:	60000000 	.word	0x60000000
 8009c14:	400921fb 	.word	0x400921fb
 8009c18:	60000000 	.word	0x60000000
 8009c1c:	3fedf3b6 	.word	0x3fedf3b6
 8009c20:	40000000 	.word	0x40000000
 8009c24:	3fd0e560 	.word	0x3fd0e560
 8009c28:	14000000 	.word	0x14000000
 8009c2c:	4000f6f0 	.word	0x4000f6f0
 8009c30:	40668000 	.word	0x40668000
 8009c34:	20005e38 	.word	0x20005e38
 8009c38:	200055e8 	.word	0x200055e8
 8009c3c:	20005748 	.word	0x20005748
 8009c40:	3d567750 	.word	0x3d567750
	case SCARA_KEY_VAR1_INC:
	{
		s = SHIFT_VAR1*speed;
 8009c44:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	ee07 3a90 	vmov	s15, r3
 8009c4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c52:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8009c40 <scaraKeyInit+0xab0>
 8009c56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009c5a:	ee17 0a90 	vmov	r0, s15
 8009c5e:	f7f6 fc73 	bl	8000548 <__aeabi_f2d>
 8009c62:	4603      	mov	r3, r0
 8009c64:	460c      	mov	r4, r1
 8009c66:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 8009c6a:	a3cb      	add	r3, pc, #812	; (adr r3, 8009f98 <scaraKeyInit+0xe08>)
 8009c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c70:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009c74:	f7f6 fdea 	bl	800084c <__aeabi_ddiv>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	460c      	mov	r4, r1
 8009c7c:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 8009c80:	a3c7      	add	r3, pc, #796	; (adr r3, 8009fa0 <scaraKeyInit+0xe10>)
 8009c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c86:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009c8a:	f7f6 fddf 	bl	800084c <__aeabi_ddiv>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	460c      	mov	r4, r1
 8009c92:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_J1);
 8009c96:	a3c4      	add	r3, pc, #784	; (adr r3, 8009fa8 <scaraKeyInit+0xe18>)
 8009c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c9c:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009ca0:	f7f6 fdd4 	bl	800084c <__aeabi_ddiv>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	460c      	mov	r4, r1
 8009ca8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009cac:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_J1);
 8009cb0:	a3bd      	add	r3, pc, #756	; (adr r3, 8009fa8 <scaraKeyInit+0xe18>)
 8009cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb6:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 8009cba:	f7f6 fdc7 	bl	800084c <__aeabi_ddiv>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	460c      	mov	r4, r1
 8009cc2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009cc6:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_JOINT;
 8009cca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009cce:	2201      	movs	r2, #1
 8009cd0:	735a      	strb	r2, [r3, #13]
		cmd.joint_type = DUTY_JOINT_SINGLE;
 8009cd2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	73da      	strb	r2, [r3, #15]
		cmd.sub_para_int 	= 1;
 8009cda:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009cde:	2201      	movs	r2, #1
 8009ce0:	615a      	str	r2, [r3, #20]
		cmd.sub_para_double = s*180/PI;
 8009ce2:	f04f 0200 	mov.w	r2, #0
 8009ce6:	4bb4      	ldr	r3, [pc, #720]	; (8009fb8 <scaraKeyInit+0xe28>)
 8009ce8:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009cec:	f7f6 fc84 	bl	80005f8 <__aeabi_dmul>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	460c      	mov	r4, r1
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	4621      	mov	r1, r4
 8009cf8:	a3a5      	add	r3, pc, #660	; (adr r3, 8009f90 <scaraKeyInit+0xe00>)
 8009cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cfe:	f7f6 fda5 	bl	800084c <__aeabi_ddiv>
 8009d02:	4603      	mov	r3, r0
 8009d04:	460c      	mov	r4, r1
 8009d06:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009d0a:	e9c2 3406 	strd	r3, r4, [r2, #24]
		v_current = positionCurrent.v_theta2;
 8009d0e:	4bab      	ldr	r3, [pc, #684]	; (8009fbc <scaraKeyInit+0xe2c>)
 8009d10:	e9d3 3424 	ldrd	r3, r4, [r3, #144]	; 0x90
 8009d14:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.joint.trajectory[1].lspb);
 8009d18:	4ba9      	ldr	r3, [pc, #676]	; (8009fc0 <scaraKeyInit+0xe30>)
 8009d1a:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 8009d1e:	e239      	b.n	800a194 <scaraKeyInit+0x1004>
	case SCARA_KEY_VAR1_DEC:
	{
		s = SHIFT_VAR1*speed;
 8009d20:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	ee07 3a90 	vmov	s15, r3
 8009d2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d2e:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8009fc8 <scaraKeyInit+0xe38>
 8009d32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009d36:	ee17 0a90 	vmov	r0, s15
 8009d3a:	f7f6 fc05 	bl	8000548 <__aeabi_f2d>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	460c      	mov	r4, r1
 8009d42:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 8009d46:	a394      	add	r3, pc, #592	; (adr r3, 8009f98 <scaraKeyInit+0xe08>)
 8009d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d4c:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009d50:	f7f6 fd7c 	bl	800084c <__aeabi_ddiv>
 8009d54:	4603      	mov	r3, r0
 8009d56:	460c      	mov	r4, r1
 8009d58:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 8009d5c:	a390      	add	r3, pc, #576	; (adr r3, 8009fa0 <scaraKeyInit+0xe10>)
 8009d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d62:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009d66:	f7f6 fd71 	bl	800084c <__aeabi_ddiv>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	460c      	mov	r4, r1
 8009d6e:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_J1);
 8009d72:	a38d      	add	r3, pc, #564	; (adr r3, 8009fa8 <scaraKeyInit+0xe18>)
 8009d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d78:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009d7c:	f7f6 fd66 	bl	800084c <__aeabi_ddiv>
 8009d80:	4603      	mov	r3, r0
 8009d82:	460c      	mov	r4, r1
 8009d84:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009d88:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_J1);
 8009d8c:	a386      	add	r3, pc, #536	; (adr r3, 8009fa8 <scaraKeyInit+0xe18>)
 8009d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d92:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 8009d96:	f7f6 fd59 	bl	800084c <__aeabi_ddiv>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	460c      	mov	r4, r1
 8009d9e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009da2:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_JOINT;
 8009da6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009daa:	2201      	movs	r2, #1
 8009dac:	735a      	strb	r2, [r3, #13]
		cmd.joint_type = DUTY_JOINT_SINGLE;
 8009dae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009db2:	2200      	movs	r2, #0
 8009db4:	73da      	strb	r2, [r3, #15]
		cmd.sub_para_int 	= 1;
 8009db6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009dba:	2201      	movs	r2, #1
 8009dbc:	615a      	str	r2, [r3, #20]
		cmd.sub_para_double = -s*180/PI;
 8009dbe:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8009dc2:	60bb      	str	r3, [r7, #8]
 8009dc4:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8009dc8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009dcc:	60fb      	str	r3, [r7, #12]
 8009dce:	f04f 0200 	mov.w	r2, #0
 8009dd2:	4b79      	ldr	r3, [pc, #484]	; (8009fb8 <scaraKeyInit+0xe28>)
 8009dd4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009dd8:	f7f6 fc0e 	bl	80005f8 <__aeabi_dmul>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	460c      	mov	r4, r1
 8009de0:	4618      	mov	r0, r3
 8009de2:	4621      	mov	r1, r4
 8009de4:	a36a      	add	r3, pc, #424	; (adr r3, 8009f90 <scaraKeyInit+0xe00>)
 8009de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dea:	f7f6 fd2f 	bl	800084c <__aeabi_ddiv>
 8009dee:	4603      	mov	r3, r0
 8009df0:	460c      	mov	r4, r1
 8009df2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009df6:	e9c2 3406 	strd	r3, r4, [r2, #24]
		v_current = positionCurrent.v_theta2;
 8009dfa:	4b70      	ldr	r3, [pc, #448]	; (8009fbc <scaraKeyInit+0xe2c>)
 8009dfc:	e9d3 3424 	ldrd	r3, r4, [r3, #144]	; 0x90
 8009e00:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.joint.trajectory[1].lspb);
 8009e04:	4b6e      	ldr	r3, [pc, #440]	; (8009fc0 <scaraKeyInit+0xe30>)
 8009e06:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 8009e0a:	e1c3      	b.n	800a194 <scaraKeyInit+0x1004>
	case SCARA_KEY_VAR2_INC:
	{
		s = SHIFT_VAR2*speed;
 8009e0c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	ee07 3a90 	vmov	s15, r3
 8009e16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e1a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8009e1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009e22:	ee17 0a90 	vmov	r0, s15
 8009e26:	f7f6 fb8f 	bl	8000548 <__aeabi_f2d>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	460c      	mov	r4, r1
 8009e2e:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 8009e32:	a359      	add	r3, pc, #356	; (adr r3, 8009f98 <scaraKeyInit+0xe08>)
 8009e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e38:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009e3c:	f7f6 fd06 	bl	800084c <__aeabi_ddiv>
 8009e40:	4603      	mov	r3, r0
 8009e42:	460c      	mov	r4, r1
 8009e44:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 8009e48:	a355      	add	r3, pc, #340	; (adr r3, 8009fa0 <scaraKeyInit+0xe10>)
 8009e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e4e:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009e52:	f7f6 fcfb 	bl	800084c <__aeabi_ddiv>
 8009e56:	4603      	mov	r3, r0
 8009e58:	460c      	mov	r4, r1
 8009e5a:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_J2);
 8009e5e:	a354      	add	r3, pc, #336	; (adr r3, 8009fb0 <scaraKeyInit+0xe20>)
 8009e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e64:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009e68:	f7f6 fcf0 	bl	800084c <__aeabi_ddiv>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	460c      	mov	r4, r1
 8009e70:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009e74:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_J2);
 8009e78:	a34d      	add	r3, pc, #308	; (adr r3, 8009fb0 <scaraKeyInit+0xe20>)
 8009e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e7e:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 8009e82:	f7f6 fce3 	bl	800084c <__aeabi_ddiv>
 8009e86:	4603      	mov	r3, r0
 8009e88:	460c      	mov	r4, r1
 8009e8a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009e8e:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_JOINT;
 8009e92:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009e96:	2201      	movs	r2, #1
 8009e98:	735a      	strb	r2, [r3, #13]
		cmd.joint_type = DUTY_JOINT_SINGLE;
 8009e9a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	73da      	strb	r2, [r3, #15]
		cmd.sub_para_int 	= 2;
 8009ea2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009ea6:	2202      	movs	r2, #2
 8009ea8:	615a      	str	r2, [r3, #20]
		cmd.sub_para_double = s;
 8009eaa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009eae:	e9d7 3482 	ldrd	r3, r4, [r7, #520]	; 0x208
 8009eb2:	e9c2 3406 	strd	r3, r4, [r2, #24]
		v_current = positionCurrent.v_d3;
 8009eb6:	4b41      	ldr	r3, [pc, #260]	; (8009fbc <scaraKeyInit+0xe2c>)
 8009eb8:	e9d3 3426 	ldrd	r3, r4, [r3, #152]	; 0x98
 8009ebc:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.joint.trajectory[2].lspb);
 8009ec0:	4b40      	ldr	r3, [pc, #256]	; (8009fc4 <scaraKeyInit+0xe34>)
 8009ec2:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 8009ec6:	e165      	b.n	800a194 <scaraKeyInit+0x1004>
	case SCARA_KEY_VAR2_DEC:
	{
		s = SHIFT_VAR2*speed;
 8009ec8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	ee07 3a90 	vmov	s15, r3
 8009ed2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ed6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8009eda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009ede:	ee17 0a90 	vmov	r0, s15
 8009ee2:	f7f6 fb31 	bl	8000548 <__aeabi_f2d>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	460c      	mov	r4, r1
 8009eea:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 8009eee:	a32a      	add	r3, pc, #168	; (adr r3, 8009f98 <scaraKeyInit+0xe08>)
 8009ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef4:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009ef8:	f7f6 fca8 	bl	800084c <__aeabi_ddiv>
 8009efc:	4603      	mov	r3, r0
 8009efe:	460c      	mov	r4, r1
 8009f00:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 8009f04:	a326      	add	r3, pc, #152	; (adr r3, 8009fa0 <scaraKeyInit+0xe10>)
 8009f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f0a:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009f0e:	f7f6 fc9d 	bl	800084c <__aeabi_ddiv>
 8009f12:	4603      	mov	r3, r0
 8009f14:	460c      	mov	r4, r1
 8009f16:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_J2);
 8009f1a:	a325      	add	r3, pc, #148	; (adr r3, 8009fb0 <scaraKeyInit+0xe20>)
 8009f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f20:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009f24:	f7f6 fc92 	bl	800084c <__aeabi_ddiv>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	460c      	mov	r4, r1
 8009f2c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009f30:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_J2);
 8009f34:	a31e      	add	r3, pc, #120	; (adr r3, 8009fb0 <scaraKeyInit+0xe20>)
 8009f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f3a:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 8009f3e:	f7f6 fc85 	bl	800084c <__aeabi_ddiv>
 8009f42:	4603      	mov	r3, r0
 8009f44:	460c      	mov	r4, r1
 8009f46:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009f4a:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_JOINT;
 8009f4e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009f52:	2201      	movs	r2, #1
 8009f54:	735a      	strb	r2, [r3, #13]
		cmd.joint_type = DUTY_JOINT_SINGLE;
 8009f56:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	73da      	strb	r2, [r3, #15]
		cmd.sub_para_int 	= 2;
 8009f5e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009f62:	2202      	movs	r2, #2
 8009f64:	615a      	str	r2, [r3, #20]
		cmd.sub_para_double = -s;
 8009f66:	f8d7 5208 	ldr.w	r5, [r7, #520]	; 0x208
 8009f6a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8009f6e:	f083 4600 	eor.w	r6, r3, #2147483648	; 0x80000000
 8009f72:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009f76:	e9c3 5606 	strd	r5, r6, [r3, #24]
		v_current = positionCurrent.v_d3;
 8009f7a:	4b10      	ldr	r3, [pc, #64]	; (8009fbc <scaraKeyInit+0xe2c>)
 8009f7c:	e9d3 3426 	ldrd	r3, r4, [r3, #152]	; 0x98
 8009f80:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.joint.trajectory[2].lspb);
 8009f84:	4b0f      	ldr	r3, [pc, #60]	; (8009fc4 <scaraKeyInit+0xe34>)
 8009f86:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 8009f8a:	e103      	b.n	800a194 <scaraKeyInit+0x1004>
 8009f8c:	f3af 8000 	nop.w
 8009f90:	60000000 	.word	0x60000000
 8009f94:	400921fb 	.word	0x400921fb
 8009f98:	60000000 	.word	0x60000000
 8009f9c:	3fedf3b6 	.word	0x3fedf3b6
 8009fa0:	40000000 	.word	0x40000000
 8009fa4:	3fd0e560 	.word	0x3fd0e560
 8009fa8:	14000000 	.word	0x14000000
 8009fac:	4000f6f0 	.word	0x4000f6f0
 8009fb0:	00000000 	.word	0x00000000
 8009fb4:	405c2000 	.word	0x405c2000
 8009fb8:	40668000 	.word	0x40668000
 8009fbc:	20005e38 	.word	0x20005e38
 8009fc0:	200058a0 	.word	0x200058a0
 8009fc4:	200059f8 	.word	0x200059f8
 8009fc8:	3d567750 	.word	0x3d567750
	case SCARA_KEY_VAR3_INC:
	{
		s = SHIFT_VAR3*speed;
 8009fcc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	ee07 3a90 	vmov	s15, r3
 8009fd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009fda:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8009fc8 <scaraKeyInit+0xe38>
 8009fde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009fe2:	ee17 0a90 	vmov	r0, s15
 8009fe6:	f7f6 faaf 	bl	8000548 <__aeabi_f2d>
 8009fea:	4603      	mov	r3, r0
 8009fec:	460c      	mov	r4, r1
 8009fee:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 8009ff2:	a39b      	add	r3, pc, #620	; (adr r3, 800a260 <scaraKeyInit+0x10d0>)
 8009ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff8:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009ffc:	f7f6 fc26 	bl	800084c <__aeabi_ddiv>
 800a000:	4603      	mov	r3, r0
 800a002:	460c      	mov	r4, r1
 800a004:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 800a008:	a397      	add	r3, pc, #604	; (adr r3, 800a268 <scaraKeyInit+0x10d8>)
 800a00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a00e:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 800a012:	f7f6 fc1b 	bl	800084c <__aeabi_ddiv>
 800a016:	4603      	mov	r3, r0
 800a018:	460c      	mov	r4, r1
 800a01a:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_J3);
 800a01e:	a394      	add	r3, pc, #592	; (adr r3, 800a270 <scaraKeyInit+0x10e0>)
 800a020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a024:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 800a028:	f7f6 fc10 	bl	800084c <__aeabi_ddiv>
 800a02c:	4603      	mov	r3, r0
 800a02e:	460c      	mov	r4, r1
 800a030:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a034:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_J3);
 800a038:	a38d      	add	r3, pc, #564	; (adr r3, 800a270 <scaraKeyInit+0x10e0>)
 800a03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a03e:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 800a042:	f7f6 fc03 	bl	800084c <__aeabi_ddiv>
 800a046:	4603      	mov	r3, r0
 800a048:	460c      	mov	r4, r1
 800a04a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a04e:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_JOINT;
 800a052:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a056:	2201      	movs	r2, #1
 800a058:	735a      	strb	r2, [r3, #13]
		cmd.joint_type = DUTY_JOINT_SINGLE;
 800a05a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a05e:	2200      	movs	r2, #0
 800a060:	73da      	strb	r2, [r3, #15]
		cmd.sub_para_int 	= 3;
 800a062:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a066:	2203      	movs	r2, #3
 800a068:	615a      	str	r2, [r3, #20]
		cmd.sub_para_double = s*180/PI;
 800a06a:	f04f 0200 	mov.w	r2, #0
 800a06e:	4b82      	ldr	r3, [pc, #520]	; (800a278 <scaraKeyInit+0x10e8>)
 800a070:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 800a074:	f7f6 fac0 	bl	80005f8 <__aeabi_dmul>
 800a078:	4603      	mov	r3, r0
 800a07a:	460c      	mov	r4, r1
 800a07c:	4618      	mov	r0, r3
 800a07e:	4621      	mov	r1, r4
 800a080:	a375      	add	r3, pc, #468	; (adr r3, 800a258 <scaraKeyInit+0x10c8>)
 800a082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a086:	f7f6 fbe1 	bl	800084c <__aeabi_ddiv>
 800a08a:	4603      	mov	r3, r0
 800a08c:	460c      	mov	r4, r1
 800a08e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a092:	e9c2 3406 	strd	r3, r4, [r2, #24]
		v_current = positionCurrent.v_theta4;
 800a096:	4b79      	ldr	r3, [pc, #484]	; (800a27c <scaraKeyInit+0x10ec>)
 800a098:	e9d3 3428 	ldrd	r3, r4, [r3, #160]	; 0xa0
 800a09c:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.joint.trajectory[3].lspb);
 800a0a0:	4b77      	ldr	r3, [pc, #476]	; (800a280 <scaraKeyInit+0x10f0>)
 800a0a2:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 800a0a6:	e075      	b.n	800a194 <scaraKeyInit+0x1004>
	case SCARA_KEY_VAR3_DEC:
	{
		s = SHIFT_VAR3*speed;
 800a0a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	ee07 3a90 	vmov	s15, r3
 800a0b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a0b6:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800a284 <scaraKeyInit+0x10f4>
 800a0ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a0be:	ee17 0a90 	vmov	r0, s15
 800a0c2:	f7f6 fa41 	bl	8000548 <__aeabi_f2d>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	460c      	mov	r4, r1
 800a0ca:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 800a0ce:	a364      	add	r3, pc, #400	; (adr r3, 800a260 <scaraKeyInit+0x10d0>)
 800a0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d4:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 800a0d8:	f7f6 fbb8 	bl	800084c <__aeabi_ddiv>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	460c      	mov	r4, r1
 800a0e0:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 800a0e4:	a360      	add	r3, pc, #384	; (adr r3, 800a268 <scaraKeyInit+0x10d8>)
 800a0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ea:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 800a0ee:	f7f6 fbad 	bl	800084c <__aeabi_ddiv>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	460c      	mov	r4, r1
 800a0f6:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_J3);
 800a0fa:	a35d      	add	r3, pc, #372	; (adr r3, 800a270 <scaraKeyInit+0x10e0>)
 800a0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a100:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 800a104:	f7f6 fba2 	bl	800084c <__aeabi_ddiv>
 800a108:	4603      	mov	r3, r0
 800a10a:	460c      	mov	r4, r1
 800a10c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a110:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_J3);
 800a114:	a356      	add	r3, pc, #344	; (adr r3, 800a270 <scaraKeyInit+0x10e0>)
 800a116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a11a:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 800a11e:	f7f6 fb95 	bl	800084c <__aeabi_ddiv>
 800a122:	4603      	mov	r3, r0
 800a124:	460c      	mov	r4, r1
 800a126:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a12a:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_JOINT;
 800a12e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a132:	2201      	movs	r2, #1
 800a134:	735a      	strb	r2, [r3, #13]
		cmd.joint_type = DUTY_JOINT_SINGLE;
 800a136:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a13a:	2200      	movs	r2, #0
 800a13c:	73da      	strb	r2, [r3, #15]
		cmd.sub_para_int 	= 3;
 800a13e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a142:	2203      	movs	r2, #3
 800a144:	615a      	str	r2, [r3, #20]
		cmd.sub_para_double = -s*180/PI;
 800a146:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800a14a:	603b      	str	r3, [r7, #0]
 800a14c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800a150:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a154:	607b      	str	r3, [r7, #4]
 800a156:	f04f 0200 	mov.w	r2, #0
 800a15a:	4b47      	ldr	r3, [pc, #284]	; (800a278 <scaraKeyInit+0x10e8>)
 800a15c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a160:	f7f6 fa4a 	bl	80005f8 <__aeabi_dmul>
 800a164:	4603      	mov	r3, r0
 800a166:	460c      	mov	r4, r1
 800a168:	4618      	mov	r0, r3
 800a16a:	4621      	mov	r1, r4
 800a16c:	a33a      	add	r3, pc, #232	; (adr r3, 800a258 <scaraKeyInit+0x10c8>)
 800a16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a172:	f7f6 fb6b 	bl	800084c <__aeabi_ddiv>
 800a176:	4603      	mov	r3, r0
 800a178:	460c      	mov	r4, r1
 800a17a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a17e:	e9c2 3406 	strd	r3, r4, [r2, #24]
		v_current = positionCurrent.v_theta4;
 800a182:	4b3e      	ldr	r3, [pc, #248]	; (800a27c <scaraKeyInit+0x10ec>)
 800a184:	e9d3 3428 	ldrd	r3, r4, [r3, #160]	; 0xa0
 800a188:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.joint.trajectory[3].lspb);
 800a18c:	4b3c      	ldr	r3, [pc, #240]	; (800a280 <scaraKeyInit+0x10f0>)
 800a18e:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 800a192:	bf00      	nop
	}
	// Initial
	status = scaraInitDuty(cmd);
 800a194:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800a198:	4668      	mov	r0, sp
 800a19a:	f104 0310 	add.w	r3, r4, #16
 800a19e:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800a1a2:	4619      	mov	r1, r3
 800a1a4:	f00b fa84 	bl	80156b0 <memcpy>
 800a1a8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800a1ac:	f7fa fac0 	bl	8004730 <scaraInitDuty>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
	if (status == SCARA_STATUS_OK) {
 800a1b6:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d141      	bne.n	800a242 <scaraKeyInit+0x10b2>
		status = scaraTestDuty();
 800a1be:	f7fe fd73 	bl	8008ca8 <scaraTestDuty>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
		if (status != SCARA_STATUS_OK) {
 800a1c8:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d002      	beq.n	800a1d6 <scaraKeyInit+0x1046>
			return status;
 800a1d0:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 800a1d4:	e037      	b.n	800a246 <scaraKeyInit+0x10b6>
		}
		// tinh lai run time so vs v hien tai
		*(runtime) = (v_current - lspb->v0)/(lspb->a_design);
 800a1d6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800a1da:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 800a1de:	461a      	mov	r2, r3
 800a1e0:	4623      	mov	r3, r4
 800a1e2:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 800a1e6:	f7f6 f84f 	bl	8000288 <__aeabi_dsub>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	460c      	mov	r4, r1
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	4621      	mov	r1, r4
 800a1f2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800a1f6:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	4623      	mov	r3, r4
 800a1fe:	f7f6 fb25 	bl	800084c <__aeabi_ddiv>
 800a202:	4603      	mov	r3, r0
 800a204:	460c      	mov	r4, r1
 800a206:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800a20a:	6812      	ldr	r2, [r2, #0]
 800a20c:	e9c2 3400 	strd	r3, r4, [r2]
		scaraFlowDuty(*runtime, &positionKeyInit, positionCurrent);
 800a210:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	ed93 8b00 	vldr	d8, [r3]
 800a21a:	4c18      	ldr	r4, [pc, #96]	; (800a27c <scaraKeyInit+0x10ec>)
 800a21c:	4668      	mov	r0, sp
 800a21e:	f104 0308 	add.w	r3, r4, #8
 800a222:	22b0      	movs	r2, #176	; 0xb0
 800a224:	4619      	mov	r1, r3
 800a226:	f00b fa43 	bl	80156b0 <memcpy>
 800a22a:	e894 000c 	ldmia.w	r4, {r2, r3}
 800a22e:	4816      	ldr	r0, [pc, #88]	; (800a288 <scaraKeyInit+0x10f8>)
 800a230:	eeb0 0a48 	vmov.f32	s0, s16
 800a234:	eef0 0a68 	vmov.f32	s1, s17
 800a238:	f7fc ff20 	bl	800707c <scaraFlowDuty>
		return status;
 800a23c:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 800a240:	e001      	b.n	800a246 <scaraKeyInit+0x10b6>
	} else {
		return status;
 800a242:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
	}
}
 800a246:	4618      	mov	r0, r3
 800a248:	f507 7709 	add.w	r7, r7, #548	; 0x224
 800a24c:	46bd      	mov	sp, r7
 800a24e:	ecbd 8b02 	vpop	{d8}
 800a252:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a254:	f3af 8000 	nop.w
 800a258:	60000000 	.word	0x60000000
 800a25c:	400921fb 	.word	0x400921fb
 800a260:	60000000 	.word	0x60000000
 800a264:	3fedf3b6 	.word	0x3fedf3b6
 800a268:	40000000 	.word	0x40000000
 800a26c:	3fd0e560 	.word	0x3fd0e560
 800a270:	6b259425 	.word	0x6b259425
 800a274:	40069b91 	.word	0x40069b91
 800a278:	40668000 	.word	0x40668000
 800a27c:	20005e38 	.word	0x20005e38
 800a280:	20005b50 	.word	0x20005b50
 800a284:	3d567750 	.word	0x3d567750
 800a288:	20005d80 	.word	0x20005d80

0800a28c <scaraKeyFlow>:

SCARA_StatusTypeDef		scaraKeyFlow(double time,
									SCARA_PositionTypeDef *pos_Next,
									SCARA_PositionTypeDef pos_Current) {
 800a28c:	b082      	sub	sp, #8
 800a28e:	b5b0      	push	{r4, r5, r7, lr}
 800a290:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 800a294:	af2c      	add	r7, sp, #176	; 0xb0
 800a296:	f107 0108 	add.w	r1, r7, #8
 800a29a:	ed81 0b00 	vstr	d0, [r1]
 800a29e:	1d39      	adds	r1, r7, #4
 800a2a0:	6008      	str	r0, [r1, #0]
 800a2a2:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 800a2a6:	e881 000c 	stmia.w	r1, {r2, r3}
	SCARA_StatusTypeDef status1, status2, status3, status4;
	SCARA_PositionTypeDef	positionCompute;
	// Update time
	positionCompute.t = time;
 800a2aa:	f107 0210 	add.w	r2, r7, #16
 800a2ae:	f107 0308 	add.w	r3, r7, #8
 800a2b2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a2b6:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	/*---- Task space ----*/
	if ( DUTY_SPACE_TASK == myDUTY.space_type) {
 800a2ba:	4b74      	ldr	r3, [pc, #464]	; (800a48c <scaraKeyFlow+0x200>)
 800a2bc:	781b      	ldrb	r3, [r3, #0]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	f040 80ee 	bne.w	800a4a0 <scaraKeyFlow+0x214>
		double s, angle, x, y, z, v, v_angle;
		double s_shift, angle_shift;
		int8_t	dir_roll;
		//---Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.task.trajectory_3d.trajectory_type) {
 800a2c4:	4b71      	ldr	r3, [pc, #452]	; (800a48c <scaraKeyFlow+0x200>)
 800a2c6:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d12c      	bne.n	800a328 <scaraKeyFlow+0x9c>
			status1 = scaraFlowLSPB(&(myDUTY.task.trajectory_3d.lspb), time);
 800a2ce:	f107 0308 	add.w	r3, r7, #8
 800a2d2:	ed93 0b00 	vldr	d0, [r3]
 800a2d6:	486e      	ldr	r0, [pc, #440]	; (800a490 <scaraKeyFlow+0x204>)
 800a2d8:	f7fd fb3e 	bl	8007958 <scaraFlowLSPB>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
			status2 = scaraFlowLSPB(&(myDUTY.task.trajectory_roll.lspb), time);
 800a2e2:	f107 0308 	add.w	r3, r7, #8
 800a2e6:	ed93 0b00 	vldr	d0, [r3]
 800a2ea:	486a      	ldr	r0, [pc, #424]	; (800a494 <scaraKeyFlow+0x208>)
 800a2ec:	f7fd fb34 	bl	8007958 <scaraFlowLSPB>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
			s = myDUTY.task.trajectory_3d.lspb.s_current;
 800a2f6:	4b65      	ldr	r3, [pc, #404]	; (800a48c <scaraKeyFlow+0x200>)
 800a2f8:	e9d3 3464 	ldrd	r3, r4, [r3, #400]	; 0x190
 800a2fc:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
			v = myDUTY.task.trajectory_3d.lspb.v_current;
 800a300:	4b62      	ldr	r3, [pc, #392]	; (800a48c <scaraKeyFlow+0x200>)
 800a302:	e9d3 3462 	ldrd	r3, r4, [r3, #392]	; 0x188
 800a306:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
			angle = myDUTY.task.trajectory_roll.lspb.s_current;
 800a30a:	4b60      	ldr	r3, [pc, #384]	; (800a48c <scaraKeyFlow+0x200>)
 800a30c:	e9d3 34ba 	ldrd	r3, r4, [r3, #744]	; 0x2e8
 800a310:	e9c7 345c 	strd	r3, r4, [r7, #368]	; 0x170
			v_angle = myDUTY.task.trajectory_roll.lspb.v_current;
 800a314:	4b5d      	ldr	r3, [pc, #372]	; (800a48c <scaraKeyFlow+0x200>)
 800a316:	e9d3 34b8 	ldrd	r3, r4, [r3, #736]	; 0x2e0
 800a31a:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			dir_roll = myDUTY.task.trajectory_roll.lspb.dir;
 800a31e:	4b5b      	ldr	r3, [pc, #364]	; (800a48c <scaraKeyFlow+0x200>)
 800a320:	f893 3270 	ldrb.w	r3, [r3, #624]	; 0x270
 800a324:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
		}

		if ( SCARA_STATUS_OK != status1) {
 800a328:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d002      	beq.n	800a336 <scaraKeyFlow+0xaa>
			return status1;
 800a330:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a334:	e26b      	b.n	800a80e <scaraKeyFlow+0x582>
		}
		if ( SCARA_STATUS_OK != status2) {
 800a336:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d002      	beq.n	800a344 <scaraKeyFlow+0xb8>
			return status2;
 800a33e:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 800a342:	e264      	b.n	800a80e <scaraKeyFlow+0x582>
		}

		// Shift q , q_roll
		s_shift = s - positionKeyInit.q;
 800a344:	4b54      	ldr	r3, [pc, #336]	; (800a498 <scaraKeyFlow+0x20c>)
 800a346:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a34a:	461a      	mov	r2, r3
 800a34c:	4623      	mov	r3, r4
 800a34e:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 800a352:	f7f5 ff99 	bl	8000288 <__aeabi_dsub>
 800a356:	4603      	mov	r3, r0
 800a358:	460c      	mov	r4, r1
 800a35a:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
		angle_shift = angle - positionKeyInit.q_roll;
 800a35e:	4b4e      	ldr	r3, [pc, #312]	; (800a498 <scaraKeyFlow+0x20c>)
 800a360:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800a364:	461a      	mov	r2, r3
 800a366:	4623      	mov	r3, r4
 800a368:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800a36c:	f7f5 ff8c 	bl	8000288 <__aeabi_dsub>
 800a370:	4603      	mov	r3, r0
 800a372:	460c      	mov	r4, r1
 800a374:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8

		//---Path flowing
			// Straight line
		if( DUTY_PATH_LINE == myDUTY.task.path.path_type) {
 800a378:	4b44      	ldr	r3, [pc, #272]	; (800a48c <scaraKeyFlow+0x200>)
 800a37a:	7a1b      	ldrb	r3, [r3, #8]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d116      	bne.n	800a3ae <scaraKeyFlow+0x122>
			status1 = scaraFlowLine(&(myDUTY.task.path.line), s_shift);//shift
 800a380:	ed97 0b34 	vldr	d0, [r7, #208]	; 0xd0
 800a384:	4845      	ldr	r0, [pc, #276]	; (800a49c <scaraKeyFlow+0x210>)
 800a386:	f7fd f9d7 	bl	8007738 <scaraFlowLine>
 800a38a:	4603      	mov	r3, r0
 800a38c:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
			x = myDUTY.task.path.line.x_current;
 800a390:	4b3e      	ldr	r3, [pc, #248]	; (800a48c <scaraKeyFlow+0x200>)
 800a392:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 800a396:	e9c7 345a 	strd	r3, r4, [r7, #360]	; 0x168
			y = myDUTY.task.path.line.y_current;
 800a39a:	4b3c      	ldr	r3, [pc, #240]	; (800a48c <scaraKeyFlow+0x200>)
 800a39c:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 800a3a0:	e9c7 3458 	strd	r3, r4, [r7, #352]	; 0x160
			z = myDUTY.task.path.line.z_current;
 800a3a4:	4b39      	ldr	r3, [pc, #228]	; (800a48c <scaraKeyFlow+0x200>)
 800a3a6:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 800a3aa:	e9c7 3456 	strd	r3, r4, [r7, #344]	; 0x158
		}

		positionCompute.x 		= x;
 800a3ae:	f107 0210 	add.w	r2, r7, #16
 800a3b2:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 800a3b6:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
		positionCompute.y		= y;
 800a3ba:	f107 0210 	add.w	r2, r7, #16
 800a3be:	e9d7 3458 	ldrd	r3, r4, [r7, #352]	; 0x160
 800a3c2:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
		positionCompute.z 		= z;
 800a3c6:	f107 0210 	add.w	r2, r7, #16
 800a3ca:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	; 0x158
 800a3ce:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		positionCompute.roll 	= myDUTY.task.roll_start + angle_shift*dir_roll;// shift
 800a3d2:	4b2e      	ldr	r3, [pc, #184]	; (800a48c <scaraKeyFlow+0x200>)
 800a3d4:	e9d3 45f0 	ldrd	r4, r5, [r3, #960]	; 0x3c0
 800a3d8:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800a3dc:	4618      	mov	r0, r3
 800a3de:	f7f6 f8a1 	bl	8000524 <__aeabi_i2d>
 800a3e2:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800a3e6:	f7f6 f907 	bl	80005f8 <__aeabi_dmul>
 800a3ea:	4602      	mov	r2, r0
 800a3ec:	460b      	mov	r3, r1
 800a3ee:	4620      	mov	r0, r4
 800a3f0:	4629      	mov	r1, r5
 800a3f2:	f7f5 ff4b 	bl	800028c <__adddf3>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	460c      	mov	r4, r1
 800a3fa:	f107 0210 	add.w	r2, r7, #16
 800a3fe:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

		positionCompute.q		= s;
 800a402:	f107 0210 	add.w	r2, r7, #16
 800a406:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 800a40a:	e9c2 3400 	strd	r3, r4, [r2]
		positionCompute.q_roll  = angle;
 800a40e:	f107 0210 	add.w	r2, r7, #16
 800a412:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 800a416:	e9c2 3402 	strd	r3, r4, [r2, #8]

		positionCompute.v_3d    = v;
 800a41a:	f107 0210 	add.w	r2, r7, #16
 800a41e:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 800a422:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
		positionCompute.v_roll  = v_angle;
 800a426:	f107 0210 	add.w	r2, r7, #16
 800a42a:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 800a42e:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0

		positionCompute.total_time = myDUTY.time_total;
 800a432:	4b16      	ldr	r3, [pc, #88]	; (800a48c <scaraKeyFlow+0x200>)
 800a434:	f603 1348 	addw	r3, r3, #2376	; 0x948
 800a438:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a43c:	f107 0210 	add.w	r2, r7, #16
 800a440:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
		positionCompute.t		= time;
 800a444:	f107 0210 	add.w	r2, r7, #16
 800a448:	f107 0308 	add.w	r3, r7, #8
 800a44c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a450:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		if ( FALSE == kinematicInverse(&positionCompute, pos_Current)) {
 800a454:	f107 0410 	add.w	r4, r7, #16
 800a458:	4668      	mov	r0, sp
 800a45a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800a45e:	22b0      	movs	r2, #176	; 0xb0
 800a460:	4619      	mov	r1, r3
 800a462:	f00b f925 	bl	80156b0 <memcpy>
 800a466:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800a46a:	cb0c      	ldmia	r3, {r2, r3}
 800a46c:	4620      	mov	r0, r4
 800a46e:	f7f8 fe6b 	bl	8003148 <kinematicInverse>
 800a472:	4603      	mov	r3, r0
 800a474:	2b00      	cmp	r3, #0
 800a476:	d101      	bne.n	800a47c <scaraKeyFlow+0x1f0>
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a478:	2307      	movs	r3, #7
 800a47a:	e1c8      	b.n	800a80e <scaraKeyFlow+0x582>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 800a47c:	f107 0110 	add.w	r1, r7, #16
 800a480:	1d3b      	adds	r3, r7, #4
 800a482:	22b8      	movs	r2, #184	; 0xb8
 800a484:	6818      	ldr	r0, [r3, #0]
 800a486:	f00b f913 	bl	80156b0 <memcpy>
 800a48a:	e1bf      	b.n	800a80c <scaraKeyFlow+0x580>
 800a48c:	20005378 	.word	0x20005378
 800a490:	20005490 	.word	0x20005490
 800a494:	200055e8 	.word	0x200055e8
 800a498:	20005d80 	.word	0x20005d80
 800a49c:	20005388 	.word	0x20005388
		}

	/*---- Joint space -----*/
	} else if (DUTY_SPACE_JOINT == myDUTY.space_type) {
 800a4a0:	4b4c      	ldr	r3, [pc, #304]	; (800a5d4 <scaraKeyFlow+0x348>)
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	2b01      	cmp	r3, #1
 800a4a6:	f040 81af 	bne.w	800a808 <scaraKeyFlow+0x57c>
		double v0, v1, v2, v3;
		double s0_shift, s1_shift, s2_shift, s3_shift;
		int8_t dir0, dir1, dir2, dir3;
		// Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.joint.trajectory[0].trajectory_type) {
 800a4aa:	4b4a      	ldr	r3, [pc, #296]	; (800a5d4 <scaraKeyFlow+0x348>)
 800a4ac:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d173      	bne.n	800a59c <scaraKeyFlow+0x310>
			status1 = scaraFlowLSPB(&(myDUTY.joint.trajectory[0].lspb), time);
 800a4b4:	f107 0308 	add.w	r3, r7, #8
 800a4b8:	ed93 0b00 	vldr	d0, [r3]
 800a4bc:	4846      	ldr	r0, [pc, #280]	; (800a5d8 <scaraKeyFlow+0x34c>)
 800a4be:	f7fd fa4b 	bl	8007958 <scaraFlowLSPB>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
			status2 = scaraFlowLSPB(&(myDUTY.joint.trajectory[1].lspb), time);
 800a4c8:	f107 0308 	add.w	r3, r7, #8
 800a4cc:	ed93 0b00 	vldr	d0, [r3]
 800a4d0:	4842      	ldr	r0, [pc, #264]	; (800a5dc <scaraKeyFlow+0x350>)
 800a4d2:	f7fd fa41 	bl	8007958 <scaraFlowLSPB>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
			status3 = scaraFlowLSPB(&(myDUTY.joint.trajectory[2].lspb), time);
 800a4dc:	f107 0308 	add.w	r3, r7, #8
 800a4e0:	ed93 0b00 	vldr	d0, [r3]
 800a4e4:	483e      	ldr	r0, [pc, #248]	; (800a5e0 <scaraKeyFlow+0x354>)
 800a4e6:	f7fd fa37 	bl	8007958 <scaraFlowLSPB>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
			status4 = scaraFlowLSPB(&(myDUTY.joint.trajectory[3].lspb), time);
 800a4f0:	f107 0308 	add.w	r3, r7, #8
 800a4f4:	ed93 0b00 	vldr	d0, [r3]
 800a4f8:	483a      	ldr	r0, [pc, #232]	; (800a5e4 <scaraKeyFlow+0x358>)
 800a4fa:	f7fd fa2d 	bl	8007958 <scaraFlowLSPB>
 800a4fe:	4603      	mov	r3, r0
 800a500:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184

			dir0 = myDUTY.joint.trajectory[0].lspb.dir;
 800a504:	4b33      	ldr	r3, [pc, #204]	; (800a5d4 <scaraKeyFlow+0x348>)
 800a506:	f893 33d0 	ldrb.w	r3, [r3, #976]	; 0x3d0
 800a50a:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
			dir1 = myDUTY.joint.trajectory[1].lspb.dir;
 800a50e:	4b31      	ldr	r3, [pc, #196]	; (800a5d4 <scaraKeyFlow+0x348>)
 800a510:	f893 3528 	ldrb.w	r3, [r3, #1320]	; 0x528
 800a514:	f887 30fe 	strb.w	r3, [r7, #254]	; 0xfe
			dir2 = myDUTY.joint.trajectory[2].lspb.dir;
 800a518:	4b2e      	ldr	r3, [pc, #184]	; (800a5d4 <scaraKeyFlow+0x348>)
 800a51a:	f893 3680 	ldrb.w	r3, [r3, #1664]	; 0x680
 800a51e:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
			dir3 = myDUTY.joint.trajectory[3].lspb.dir;
 800a522:	4b2c      	ldr	r3, [pc, #176]	; (800a5d4 <scaraKeyFlow+0x348>)
 800a524:	f893 37d8 	ldrb.w	r3, [r3, #2008]	; 0x7d8
 800a528:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc

			s0 = myDUTY.joint.trajectory[0].lspb.s_current;
 800a52c:	4b29      	ldr	r3, [pc, #164]	; (800a5d4 <scaraKeyFlow+0x348>)
 800a52e:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 800a532:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a536:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
			s1 = myDUTY.joint.trajectory[1].lspb.s_current;
 800a53a:	4b26      	ldr	r3, [pc, #152]	; (800a5d4 <scaraKeyFlow+0x348>)
 800a53c:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 800a540:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a544:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
			s2 = myDUTY.joint.trajectory[2].lspb.s_current;
 800a548:	4b22      	ldr	r3, [pc, #136]	; (800a5d4 <scaraKeyFlow+0x348>)
 800a54a:	f503 63df 	add.w	r3, r3, #1784	; 0x6f8
 800a54e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a552:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
			s3 = myDUTY.joint.trajectory[3].lspb.s_current;
 800a556:	4b1f      	ldr	r3, [pc, #124]	; (800a5d4 <scaraKeyFlow+0x348>)
 800a558:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 800a55c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a560:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120

			v0 = myDUTY.joint.trajectory[0].lspb.v_current;
 800a564:	4b1b      	ldr	r3, [pc, #108]	; (800a5d4 <scaraKeyFlow+0x348>)
 800a566:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a56a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a56e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
			v1 = myDUTY.joint.trajectory[1].lspb.v_current;
 800a572:	4b18      	ldr	r3, [pc, #96]	; (800a5d4 <scaraKeyFlow+0x348>)
 800a574:	f503 63b3 	add.w	r3, r3, #1432	; 0x598
 800a578:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a57c:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
			v2 = myDUTY.joint.trajectory[2].lspb.v_current;
 800a580:	4b14      	ldr	r3, [pc, #80]	; (800a5d4 <scaraKeyFlow+0x348>)
 800a582:	f503 63de 	add.w	r3, r3, #1776	; 0x6f0
 800a586:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a58a:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
			v3 = myDUTY.joint.trajectory[3].lspb.v_current;
 800a58e:	4b11      	ldr	r3, [pc, #68]	; (800a5d4 <scaraKeyFlow+0x348>)
 800a590:	f603 0348 	addw	r3, r3, #2120	; 0x848
 800a594:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a598:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100

		}
		// Check init status
		if ( SCARA_STATUS_OK != status1) {
 800a59c:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d002      	beq.n	800a5aa <scaraKeyFlow+0x31e>
			return status1;
 800a5a4:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a5a8:	e131      	b.n	800a80e <scaraKeyFlow+0x582>
		}
		if ( SCARA_STATUS_OK != status2) {
 800a5aa:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d002      	beq.n	800a5b8 <scaraKeyFlow+0x32c>
			return status2;
 800a5b2:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 800a5b6:	e12a      	b.n	800a80e <scaraKeyFlow+0x582>
		}
		if ( SCARA_STATUS_OK != status3) {
 800a5b8:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d002      	beq.n	800a5c6 <scaraKeyFlow+0x33a>
			return status3;
 800a5c0:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 800a5c4:	e123      	b.n	800a80e <scaraKeyFlow+0x582>
		}
		if ( SCARA_STATUS_OK != status4) {
 800a5c6:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d00c      	beq.n	800a5e8 <scaraKeyFlow+0x35c>
			return status4;
 800a5ce:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 800a5d2:	e11c      	b.n	800a80e <scaraKeyFlow+0x582>
 800a5d4:	20005378 	.word	0x20005378
 800a5d8:	20005748 	.word	0x20005748
 800a5dc:	200058a0 	.word	0x200058a0
 800a5e0:	200059f8 	.word	0x200059f8
 800a5e4:	20005b50 	.word	0x20005b50
		}
		// shift s0, s1, s2, s3
		s0_shift = s0 - positionKeyInit.q_theta1;
 800a5e8:	4b8d      	ldr	r3, [pc, #564]	; (800a820 <scaraKeyFlow+0x594>)
 800a5ea:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	4623      	mov	r3, r4
 800a5f2:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800a5f6:	f7f5 fe47 	bl	8000288 <__aeabi_dsub>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	460c      	mov	r4, r1
 800a5fe:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
		s1_shift = s1 - positionKeyInit.q_theta2;
 800a602:	4b87      	ldr	r3, [pc, #540]	; (800a820 <scaraKeyFlow+0x594>)
 800a604:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 800a608:	461a      	mov	r2, r3
 800a60a:	4623      	mov	r3, r4
 800a60c:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 800a610:	f7f5 fe3a 	bl	8000288 <__aeabi_dsub>
 800a614:	4603      	mov	r3, r0
 800a616:	460c      	mov	r4, r1
 800a618:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
		s2_shift = s2 - positionKeyInit.q_d3;
 800a61c:	4b80      	ldr	r3, [pc, #512]	; (800a820 <scaraKeyFlow+0x594>)
 800a61e:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800a622:	461a      	mov	r2, r3
 800a624:	4623      	mov	r3, r4
 800a626:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800a62a:	f7f5 fe2d 	bl	8000288 <__aeabi_dsub>
 800a62e:	4603      	mov	r3, r0
 800a630:	460c      	mov	r4, r1
 800a632:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		s3_shift = s3 - positionKeyInit.q_theta4;
 800a636:	4b7a      	ldr	r3, [pc, #488]	; (800a820 <scaraKeyFlow+0x594>)
 800a638:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 800a63c:	461a      	mov	r2, r3
 800a63e:	4623      	mov	r3, r4
 800a640:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800a644:	f7f5 fe20 	bl	8000288 <__aeabi_dsub>
 800a648:	4603      	mov	r3, r0
 800a64a:	460c      	mov	r4, r1
 800a64c:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8

		positionCompute.Theta1 	= myDUTY.joint.theta1_start + s0_shift*dir0;
 800a650:	4b74      	ldr	r3, [pc, #464]	; (800a824 <scaraKeyFlow+0x598>)
 800a652:	f603 1328 	addw	r3, r3, #2344	; 0x928
 800a656:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a65a:	f997 30ff 	ldrsb.w	r3, [r7, #255]	; 0xff
 800a65e:	4618      	mov	r0, r3
 800a660:	f7f5 ff60 	bl	8000524 <__aeabi_i2d>
 800a664:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 800a668:	f7f5 ffc6 	bl	80005f8 <__aeabi_dmul>
 800a66c:	4602      	mov	r2, r0
 800a66e:	460b      	mov	r3, r1
 800a670:	4620      	mov	r0, r4
 800a672:	4629      	mov	r1, r5
 800a674:	f7f5 fe0a 	bl	800028c <__adddf3>
 800a678:	4603      	mov	r3, r0
 800a67a:	460c      	mov	r4, r1
 800a67c:	f107 0210 	add.w	r2, r7, #16
 800a680:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		positionCompute.Theta2 	= myDUTY.joint.theta2_start + s1_shift*dir1;
 800a684:	4b67      	ldr	r3, [pc, #412]	; (800a824 <scaraKeyFlow+0x598>)
 800a686:	f503 6313 	add.w	r3, r3, #2352	; 0x930
 800a68a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a68e:	f997 30fe 	ldrsb.w	r3, [r7, #254]	; 0xfe
 800a692:	4618      	mov	r0, r3
 800a694:	f7f5 ff46 	bl	8000524 <__aeabi_i2d>
 800a698:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800a69c:	f7f5 ffac 	bl	80005f8 <__aeabi_dmul>
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	460b      	mov	r3, r1
 800a6a4:	4620      	mov	r0, r4
 800a6a6:	4629      	mov	r1, r5
 800a6a8:	f7f5 fdf0 	bl	800028c <__adddf3>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	460c      	mov	r4, r1
 800a6b0:	f107 0210 	add.w	r2, r7, #16
 800a6b4:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		positionCompute.D3 		= myDUTY.joint.d3_start 	+ s2_shift*dir2;
 800a6b8:	4b5a      	ldr	r3, [pc, #360]	; (800a824 <scaraKeyFlow+0x598>)
 800a6ba:	f603 1338 	addw	r3, r3, #2360	; 0x938
 800a6be:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a6c2:	f997 30fd 	ldrsb.w	r3, [r7, #253]	; 0xfd
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f7f5 ff2c 	bl	8000524 <__aeabi_i2d>
 800a6cc:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800a6d0:	f7f5 ff92 	bl	80005f8 <__aeabi_dmul>
 800a6d4:	4602      	mov	r2, r0
 800a6d6:	460b      	mov	r3, r1
 800a6d8:	4620      	mov	r0, r4
 800a6da:	4629      	mov	r1, r5
 800a6dc:	f7f5 fdd6 	bl	800028c <__adddf3>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	460c      	mov	r4, r1
 800a6e4:	f107 0210 	add.w	r2, r7, #16
 800a6e8:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		positionCompute.Theta4 	= myDUTY.joint.theta4_start + s3_shift*dir3;
 800a6ec:	4b4d      	ldr	r3, [pc, #308]	; (800a824 <scaraKeyFlow+0x598>)
 800a6ee:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 800a6f2:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a6f6:	f997 30fc 	ldrsb.w	r3, [r7, #252]	; 0xfc
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f7f5 ff12 	bl	8000524 <__aeabi_i2d>
 800a700:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800a704:	f7f5 ff78 	bl	80005f8 <__aeabi_dmul>
 800a708:	4602      	mov	r2, r0
 800a70a:	460b      	mov	r3, r1
 800a70c:	4620      	mov	r0, r4
 800a70e:	4629      	mov	r1, r5
 800a710:	f7f5 fdbc 	bl	800028c <__adddf3>
 800a714:	4603      	mov	r3, r0
 800a716:	460c      	mov	r4, r1
 800a718:	f107 0210 	add.w	r2, r7, #16
 800a71c:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

		positionCompute.v_theta1 	= v0;
 800a720:	f107 0210 	add.w	r2, r7, #16
 800a724:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 800a728:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		positionCompute.v_theta2 	= v1;
 800a72c:	f107 0210 	add.w	r2, r7, #16
 800a730:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 800a734:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
		positionCompute.v_d3 		= v2;
 800a738:	f107 0210 	add.w	r2, r7, #16
 800a73c:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 800a740:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
		positionCompute.v_theta4 	= v3;
 800a744:	f107 0210 	add.w	r2, r7, #16
 800a748:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 800a74c:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0

		positionCompute.q_theta1 = s0;
 800a750:	f107 0210 	add.w	r2, r7, #16
 800a754:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 800a758:	e9c2 3404 	strd	r3, r4, [r2, #16]
		positionCompute.q_theta2 = s1;
 800a75c:	f107 0210 	add.w	r2, r7, #16
 800a760:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 800a764:	e9c2 3406 	strd	r3, r4, [r2, #24]
		positionCompute.q_d3	 = s2;
 800a768:	f107 0210 	add.w	r2, r7, #16
 800a76c:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 800a770:	e9c2 3408 	strd	r3, r4, [r2, #32]
		positionCompute.q_theta4 = s3;
 800a774:	f107 0210 	add.w	r2, r7, #16
 800a778:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 800a77c:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

		positionCompute.total_time = myDUTY.time_total;
 800a780:	4b28      	ldr	r3, [pc, #160]	; (800a824 <scaraKeyFlow+0x598>)
 800a782:	f603 1348 	addw	r3, r3, #2376	; 0x948
 800a786:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a78a:	f107 0210 	add.w	r2, r7, #16
 800a78e:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
		positionCompute.t		= time;
 800a792:	f107 0210 	add.w	r2, r7, #16
 800a796:	f107 0308 	add.w	r3, r7, #8
 800a79a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a79e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		// Check workspace
		if( SCARA_STATUS_OK != scaraCheckWorkSpace4(positionCompute.Theta1,
 800a7a2:	f107 0310 	add.w	r3, r7, #16
 800a7a6:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800a7aa:	f107 0310 	add.w	r3, r7, #16
 800a7ae:	ed93 6b1c 	vldr	d6, [r3, #112]	; 0x70
 800a7b2:	f107 0310 	add.w	r3, r7, #16
 800a7b6:	ed93 5b1e 	vldr	d5, [r3, #120]	; 0x78
 800a7ba:	f107 0310 	add.w	r3, r7, #16
 800a7be:	ed93 4b20 	vldr	d4, [r3, #128]	; 0x80
 800a7c2:	eeb0 3a44 	vmov.f32	s6, s8
 800a7c6:	eef0 3a64 	vmov.f32	s7, s9
 800a7ca:	eeb0 2a45 	vmov.f32	s4, s10
 800a7ce:	eef0 2a65 	vmov.f32	s5, s11
 800a7d2:	eeb0 1a46 	vmov.f32	s2, s12
 800a7d6:	eef0 1a66 	vmov.f32	s3, s13
 800a7da:	eeb0 0a47 	vmov.f32	s0, s14
 800a7de:	eef0 0a67 	vmov.f32	s1, s15
 800a7e2:	f7fe f949 	bl	8008a78 <scaraCheckWorkSpace4>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d001      	beq.n	800a7f0 <scaraKeyFlow+0x564>
							 	 	 	  positionCompute.Theta2,
										  positionCompute.D3,
										  positionCompute.Theta4)) {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a7ec:	2307      	movs	r3, #7
 800a7ee:	e00e      	b.n	800a80e <scaraKeyFlow+0x582>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 800a7f0:	f107 0110 	add.w	r1, r7, #16
 800a7f4:	1d3b      	adds	r3, r7, #4
 800a7f6:	22b8      	movs	r2, #184	; 0xb8
 800a7f8:	6818      	ldr	r0, [r3, #0]
 800a7fa:	f00a ff59 	bl	80156b0 <memcpy>
		}
		kinematicForward(pos_Next);
 800a7fe:	1d3b      	adds	r3, r7, #4
 800a800:	6818      	ldr	r0, [r3, #0]
 800a802:	f7f8 fb65 	bl	8002ed0 <kinematicForward>
 800a806:	e001      	b.n	800a80c <scaraKeyFlow+0x580>

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 800a808:	2302      	movs	r3, #2
 800a80a:	e000      	b.n	800a80e <scaraKeyFlow+0x582>
	}

	return SCARA_STATUS_OK;
 800a80c:	2300      	movs	r3, #0
}
 800a80e:	4618      	mov	r0, r3
 800a810:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 800a814:	46bd      	mov	sp, r7
 800a816:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800a81a:	b002      	add	sp, #8
 800a81c:	4770      	bx	lr
 800a81e:	bf00      	nop
 800a820:	20005d80 	.word	0x20005d80
 800a824:	20005378 	.word	0x20005378

0800a828 <HAL_MspInit>:
 800a828:	b580      	push	{r7, lr}
 800a82a:	b082      	sub	sp, #8
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	2300      	movs	r3, #0
 800a830:	607b      	str	r3, [r7, #4]
 800a832:	4b12      	ldr	r3, [pc, #72]	; (800a87c <HAL_MspInit+0x54>)
 800a834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a836:	4a11      	ldr	r2, [pc, #68]	; (800a87c <HAL_MspInit+0x54>)
 800a838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a83c:	6453      	str	r3, [r2, #68]	; 0x44
 800a83e:	4b0f      	ldr	r3, [pc, #60]	; (800a87c <HAL_MspInit+0x54>)
 800a840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a846:	607b      	str	r3, [r7, #4]
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2300      	movs	r3, #0
 800a84c:	603b      	str	r3, [r7, #0]
 800a84e:	4b0b      	ldr	r3, [pc, #44]	; (800a87c <HAL_MspInit+0x54>)
 800a850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a852:	4a0a      	ldr	r2, [pc, #40]	; (800a87c <HAL_MspInit+0x54>)
 800a854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a858:	6413      	str	r3, [r2, #64]	; 0x40
 800a85a:	4b08      	ldr	r3, [pc, #32]	; (800a87c <HAL_MspInit+0x54>)
 800a85c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a85e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a862:	603b      	str	r3, [r7, #0]
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	2200      	movs	r2, #0
 800a868:	210f      	movs	r1, #15
 800a86a:	f06f 0001 	mvn.w	r0, #1
 800a86e:	f000 fb85 	bl	800af7c <HAL_NVIC_SetPriority>
 800a872:	bf00      	nop
 800a874:	3708      	adds	r7, #8
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}
 800a87a:	bf00      	nop
 800a87c:	40023800 	.word	0x40023800

0800a880 <HAL_InitTick>:
 800a880:	b580      	push	{r7, lr}
 800a882:	b08c      	sub	sp, #48	; 0x30
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
 800a888:	2300      	movs	r3, #0
 800a88a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a88c:	2300      	movs	r3, #0
 800a88e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a890:	2200      	movs	r2, #0
 800a892:	6879      	ldr	r1, [r7, #4]
 800a894:	2036      	movs	r0, #54	; 0x36
 800a896:	f000 fb71 	bl	800af7c <HAL_NVIC_SetPriority>
 800a89a:	2036      	movs	r0, #54	; 0x36
 800a89c:	f000 fb8a 	bl	800afb4 <HAL_NVIC_EnableIRQ>
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	60fb      	str	r3, [r7, #12]
 800a8a4:	4b1f      	ldr	r3, [pc, #124]	; (800a924 <HAL_InitTick+0xa4>)
 800a8a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8a8:	4a1e      	ldr	r2, [pc, #120]	; (800a924 <HAL_InitTick+0xa4>)
 800a8aa:	f043 0310 	orr.w	r3, r3, #16
 800a8ae:	6413      	str	r3, [r2, #64]	; 0x40
 800a8b0:	4b1c      	ldr	r3, [pc, #112]	; (800a924 <HAL_InitTick+0xa4>)
 800a8b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8b4:	f003 0310 	and.w	r3, r3, #16
 800a8b8:	60fb      	str	r3, [r7, #12]
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	f107 0210 	add.w	r2, r7, #16
 800a8c0:	f107 0314 	add.w	r3, r7, #20
 800a8c4:	4611      	mov	r1, r2
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f002 ff16 	bl	800d6f8 <HAL_RCC_GetClockConfig>
 800a8cc:	f002 feec 	bl	800d6a8 <HAL_RCC_GetPCLK1Freq>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	005b      	lsls	r3, r3, #1
 800a8d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a8d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8d8:	4a13      	ldr	r2, [pc, #76]	; (800a928 <HAL_InitTick+0xa8>)
 800a8da:	fba2 2303 	umull	r2, r3, r2, r3
 800a8de:	0c9b      	lsrs	r3, r3, #18
 800a8e0:	3b01      	subs	r3, #1
 800a8e2:	62bb      	str	r3, [r7, #40]	; 0x28
 800a8e4:	4b11      	ldr	r3, [pc, #68]	; (800a92c <HAL_InitTick+0xac>)
 800a8e6:	4a12      	ldr	r2, [pc, #72]	; (800a930 <HAL_InitTick+0xb0>)
 800a8e8:	601a      	str	r2, [r3, #0]
 800a8ea:	4b10      	ldr	r3, [pc, #64]	; (800a92c <HAL_InitTick+0xac>)
 800a8ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a8f0:	60da      	str	r2, [r3, #12]
 800a8f2:	4a0e      	ldr	r2, [pc, #56]	; (800a92c <HAL_InitTick+0xac>)
 800a8f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8f6:	6053      	str	r3, [r2, #4]
 800a8f8:	4b0c      	ldr	r3, [pc, #48]	; (800a92c <HAL_InitTick+0xac>)
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	611a      	str	r2, [r3, #16]
 800a8fe:	4b0b      	ldr	r3, [pc, #44]	; (800a92c <HAL_InitTick+0xac>)
 800a900:	2200      	movs	r2, #0
 800a902:	609a      	str	r2, [r3, #8]
 800a904:	4809      	ldr	r0, [pc, #36]	; (800a92c <HAL_InitTick+0xac>)
 800a906:	f002 ff29 	bl	800d75c <HAL_TIM_Base_Init>
 800a90a:	4603      	mov	r3, r0
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d104      	bne.n	800a91a <HAL_InitTick+0x9a>
 800a910:	4806      	ldr	r0, [pc, #24]	; (800a92c <HAL_InitTick+0xac>)
 800a912:	f002 ff4e 	bl	800d7b2 <HAL_TIM_Base_Start_IT>
 800a916:	4603      	mov	r3, r0
 800a918:	e000      	b.n	800a91c <HAL_InitTick+0x9c>
 800a91a:	2301      	movs	r3, #1
 800a91c:	4618      	mov	r0, r3
 800a91e:	3730      	adds	r7, #48	; 0x30
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}
 800a924:	40023800 	.word	0x40023800
 800a928:	431bde83 	.word	0x431bde83
 800a92c:	20006060 	.word	0x20006060
 800a930:	40001000 	.word	0x40001000

0800a934 <NMI_Handler>:
 800a934:	b480      	push	{r7}
 800a936:	af00      	add	r7, sp, #0
 800a938:	bf00      	nop
 800a93a:	46bd      	mov	sp, r7
 800a93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a940:	4770      	bx	lr
	...

0800a944 <HardFault_Handler>:
 800a944:	b580      	push	{r7, lr}
 800a946:	af00      	add	r7, sp, #0
 800a948:	2164      	movs	r1, #100	; 0x64
 800a94a:	4802      	ldr	r0, [pc, #8]	; (800a954 <HardFault_Handler+0x10>)
 800a94c:	f7f6 fe48 	bl	80015e0 <LOG_REPORT>
 800a950:	e7fa      	b.n	800a948 <HardFault_Handler+0x4>
 800a952:	bf00      	nop
 800a954:	0801b06c 	.word	0x0801b06c

0800a958 <MemManage_Handler>:
 800a958:	b580      	push	{r7, lr}
 800a95a:	af00      	add	r7, sp, #0
 800a95c:	2174      	movs	r1, #116	; 0x74
 800a95e:	4802      	ldr	r0, [pc, #8]	; (800a968 <MemManage_Handler+0x10>)
 800a960:	f7f6 fe3e 	bl	80015e0 <LOG_REPORT>
 800a964:	e7fa      	b.n	800a95c <MemManage_Handler+0x4>
 800a966:	bf00      	nop
 800a968:	0801b084 	.word	0x0801b084

0800a96c <BusFault_Handler>:
 800a96c:	b580      	push	{r7, lr}
 800a96e:	af00      	add	r7, sp, #0
 800a970:	2184      	movs	r1, #132	; 0x84
 800a972:	4802      	ldr	r0, [pc, #8]	; (800a97c <BusFault_Handler+0x10>)
 800a974:	f7f6 fe34 	bl	80015e0 <LOG_REPORT>
 800a978:	e7fa      	b.n	800a970 <BusFault_Handler+0x4>
 800a97a:	bf00      	nop
 800a97c:	0801b098 	.word	0x0801b098

0800a980 <UsageFault_Handler>:
 800a980:	b480      	push	{r7}
 800a982:	af00      	add	r7, sp, #0
 800a984:	e7fe      	b.n	800a984 <UsageFault_Handler+0x4>

0800a986 <DebugMon_Handler>:
 800a986:	b480      	push	{r7}
 800a988:	af00      	add	r7, sp, #0
 800a98a:	bf00      	nop
 800a98c:	46bd      	mov	sp, r7
 800a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a992:	4770      	bx	lr

0800a994 <DMA1_Stream4_IRQHandler>:
 800a994:	b580      	push	{r7, lr}
 800a996:	af00      	add	r7, sp, #0
 800a998:	4802      	ldr	r0, [pc, #8]	; (800a9a4 <DMA1_Stream4_IRQHandler+0x10>)
 800a99a:	f000 fc41 	bl	800b220 <HAL_DMA_IRQHandler>
 800a99e:	bf00      	nop
 800a9a0:	bd80      	pop	{r7, pc}
 800a9a2:	bf00      	nop
 800a9a4:	20006120 	.word	0x20006120

0800a9a8 <UART4_IRQHandler>:
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	4802      	ldr	r0, [pc, #8]	; (800a9b8 <UART4_IRQHandler+0x10>)
 800a9ae:	f003 fa3f 	bl	800de30 <HAL_UART_IRQHandler>
 800a9b2:	bf00      	nop
 800a9b4:	bd80      	pop	{r7, pc}
 800a9b6:	bf00      	nop
 800a9b8:	200060e0 	.word	0x200060e0

0800a9bc <TIM6_DAC_IRQHandler>:
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	af00      	add	r7, sp, #0
 800a9c0:	4802      	ldr	r0, [pc, #8]	; (800a9cc <TIM6_DAC_IRQHandler+0x10>)
 800a9c2:	f002 ff1a 	bl	800d7fa <HAL_TIM_IRQHandler>
 800a9c6:	bf00      	nop
 800a9c8:	bd80      	pop	{r7, pc}
 800a9ca:	bf00      	nop
 800a9cc:	20006060 	.word	0x20006060

0800a9d0 <TIM7_IRQHandler>:
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	af00      	add	r7, sp, #0
 800a9d4:	4b05      	ldr	r3, [pc, #20]	; (800a9ec <TIM7_IRQHandler+0x1c>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	2101      	movs	r1, #1
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f006 ffe8 	bl	80119b0 <osSignalSet>
 800a9e0:	4803      	ldr	r0, [pc, #12]	; (800a9f0 <TIM7_IRQHandler+0x20>)
 800a9e2:	f002 ff0a 	bl	800d7fa <HAL_TIM_IRQHandler>
 800a9e6:	bf00      	nop
 800a9e8:	bd80      	pop	{r7, pc}
 800a9ea:	bf00      	nop
 800a9ec:	200052b4 	.word	0x200052b4
 800a9f0:	200060a0 	.word	0x200060a0

0800a9f4 <OTG_FS_IRQHandler>:
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	4802      	ldr	r0, [pc, #8]	; (800aa04 <OTG_FS_IRQHandler+0x10>)
 800a9fa:	f001 f9e1 	bl	800bdc0 <HAL_PCD_IRQHandler>
 800a9fe:	bf00      	nop
 800aa00:	bd80      	pop	{r7, pc}
 800aa02:	bf00      	nop
 800aa04:	20006a28 	.word	0x20006a28

0800aa08 <_sbrk>:
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b084      	sub	sp, #16
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
 800aa10:	4b11      	ldr	r3, [pc, #68]	; (800aa58 <_sbrk+0x50>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d102      	bne.n	800aa1e <_sbrk+0x16>
 800aa18:	4b0f      	ldr	r3, [pc, #60]	; (800aa58 <_sbrk+0x50>)
 800aa1a:	4a10      	ldr	r2, [pc, #64]	; (800aa5c <_sbrk+0x54>)
 800aa1c:	601a      	str	r2, [r3, #0]
 800aa1e:	4b0e      	ldr	r3, [pc, #56]	; (800aa58 <_sbrk+0x50>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	60fb      	str	r3, [r7, #12]
 800aa24:	4b0c      	ldr	r3, [pc, #48]	; (800aa58 <_sbrk+0x50>)
 800aa26:	681a      	ldr	r2, [r3, #0]
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	4413      	add	r3, r2
 800aa2c:	466a      	mov	r2, sp
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d907      	bls.n	800aa42 <_sbrk+0x3a>
 800aa32:	f00a fe03 	bl	801563c <__errno>
 800aa36:	4602      	mov	r2, r0
 800aa38:	230c      	movs	r3, #12
 800aa3a:	6013      	str	r3, [r2, #0]
 800aa3c:	f04f 33ff 	mov.w	r3, #4294967295
 800aa40:	e006      	b.n	800aa50 <_sbrk+0x48>
 800aa42:	4b05      	ldr	r3, [pc, #20]	; (800aa58 <_sbrk+0x50>)
 800aa44:	681a      	ldr	r2, [r3, #0]
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	4413      	add	r3, r2
 800aa4a:	4a03      	ldr	r2, [pc, #12]	; (800aa58 <_sbrk+0x50>)
 800aa4c:	6013      	str	r3, [r2, #0]
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	4618      	mov	r0, r3
 800aa52:	3710      	adds	r7, #16
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}
 800aa58:	20001454 	.word	0x20001454
 800aa5c:	20006e38 	.word	0x20006e38

0800aa60 <SystemInit>:
 800aa60:	b480      	push	{r7}
 800aa62:	af00      	add	r7, sp, #0
 800aa64:	4b08      	ldr	r3, [pc, #32]	; (800aa88 <SystemInit+0x28>)
 800aa66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa6a:	4a07      	ldr	r2, [pc, #28]	; (800aa88 <SystemInit+0x28>)
 800aa6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800aa70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800aa74:	4b04      	ldr	r3, [pc, #16]	; (800aa88 <SystemInit+0x28>)
 800aa76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800aa7a:	609a      	str	r2, [r3, #8]
 800aa7c:	bf00      	nop
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa84:	4770      	bx	lr
 800aa86:	bf00      	nop
 800aa88:	e000ed00 	.word	0xe000ed00

0800aa8c <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b082      	sub	sp, #8
 800aa90:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800aa92:	463b      	mov	r3, r7
 800aa94:	2200      	movs	r2, #0
 800aa96:	601a      	str	r2, [r3, #0]
 800aa98:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 800aa9a:	4b15      	ldr	r3, [pc, #84]	; (800aaf0 <MX_TIM7_Init+0x64>)
 800aa9c:	4a15      	ldr	r2, [pc, #84]	; (800aaf4 <MX_TIM7_Init+0x68>)
 800aa9e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 800aaa0:	4b13      	ldr	r3, [pc, #76]	; (800aaf0 <MX_TIM7_Init+0x64>)
 800aaa2:	2253      	movs	r2, #83	; 0x53
 800aaa4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800aaa6:	4b12      	ldr	r3, [pc, #72]	; (800aaf0 <MX_TIM7_Init+0x64>)
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 800aaac:	4b10      	ldr	r3, [pc, #64]	; (800aaf0 <MX_TIM7_Init+0x64>)
 800aaae:	f242 720f 	movw	r2, #9999	; 0x270f
 800aab2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800aab4:	4b0e      	ldr	r3, [pc, #56]	; (800aaf0 <MX_TIM7_Init+0x64>)
 800aab6:	2200      	movs	r2, #0
 800aab8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800aaba:	480d      	ldr	r0, [pc, #52]	; (800aaf0 <MX_TIM7_Init+0x64>)
 800aabc:	f002 fe4e 	bl	800d75c <HAL_TIM_Base_Init>
 800aac0:	4603      	mov	r3, r0
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d001      	beq.n	800aaca <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800aac6:	f7f8 fdcf 	bl	8003668 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800aaca:	2300      	movs	r3, #0
 800aacc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800aace:	2300      	movs	r3, #0
 800aad0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800aad2:	463b      	mov	r3, r7
 800aad4:	4619      	mov	r1, r3
 800aad6:	4806      	ldr	r0, [pc, #24]	; (800aaf0 <MX_TIM7_Init+0x64>)
 800aad8:	f003 f860 	bl	800db9c <HAL_TIMEx_MasterConfigSynchronization>
 800aadc:	4603      	mov	r3, r0
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d001      	beq.n	800aae6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800aae2:	f7f8 fdc1 	bl	8003668 <Error_Handler>
  }

}
 800aae6:	bf00      	nop
 800aae8:	3708      	adds	r7, #8
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}
 800aaee:	bf00      	nop
 800aaf0:	200060a0 	.word	0x200060a0
 800aaf4:	40001400 	.word	0x40001400

0800aaf8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b084      	sub	sp, #16
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	4a0e      	ldr	r2, [pc, #56]	; (800ab40 <HAL_TIM_Base_MspInit+0x48>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d115      	bne.n	800ab36 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	60fb      	str	r3, [r7, #12]
 800ab0e:	4b0d      	ldr	r3, [pc, #52]	; (800ab44 <HAL_TIM_Base_MspInit+0x4c>)
 800ab10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab12:	4a0c      	ldr	r2, [pc, #48]	; (800ab44 <HAL_TIM_Base_MspInit+0x4c>)
 800ab14:	f043 0320 	orr.w	r3, r3, #32
 800ab18:	6413      	str	r3, [r2, #64]	; 0x40
 800ab1a:	4b0a      	ldr	r3, [pc, #40]	; (800ab44 <HAL_TIM_Base_MspInit+0x4c>)
 800ab1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab1e:	f003 0320 	and.w	r3, r3, #32
 800ab22:	60fb      	str	r3, [r7, #12]
 800ab24:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800ab26:	2200      	movs	r2, #0
 800ab28:	2105      	movs	r1, #5
 800ab2a:	2037      	movs	r0, #55	; 0x37
 800ab2c:	f000 fa26 	bl	800af7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800ab30:	2037      	movs	r0, #55	; 0x37
 800ab32:	f000 fa3f 	bl	800afb4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800ab36:	bf00      	nop
 800ab38:	3710      	adds	r7, #16
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}
 800ab3e:	bf00      	nop
 800ab40:	40001400 	.word	0x40001400
 800ab44:	40023800 	.word	0x40023800

0800ab48 <MX_UART4_Init>:
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	4b11      	ldr	r3, [pc, #68]	; (800ab94 <MX_UART4_Init+0x4c>)
 800ab4e:	4a12      	ldr	r2, [pc, #72]	; (800ab98 <MX_UART4_Init+0x50>)
 800ab50:	601a      	str	r2, [r3, #0]
 800ab52:	4b10      	ldr	r3, [pc, #64]	; (800ab94 <MX_UART4_Init+0x4c>)
 800ab54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800ab58:	605a      	str	r2, [r3, #4]
 800ab5a:	4b0e      	ldr	r3, [pc, #56]	; (800ab94 <MX_UART4_Init+0x4c>)
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	609a      	str	r2, [r3, #8]
 800ab60:	4b0c      	ldr	r3, [pc, #48]	; (800ab94 <MX_UART4_Init+0x4c>)
 800ab62:	2200      	movs	r2, #0
 800ab64:	60da      	str	r2, [r3, #12]
 800ab66:	4b0b      	ldr	r3, [pc, #44]	; (800ab94 <MX_UART4_Init+0x4c>)
 800ab68:	2200      	movs	r2, #0
 800ab6a:	611a      	str	r2, [r3, #16]
 800ab6c:	4b09      	ldr	r3, [pc, #36]	; (800ab94 <MX_UART4_Init+0x4c>)
 800ab6e:	220c      	movs	r2, #12
 800ab70:	615a      	str	r2, [r3, #20]
 800ab72:	4b08      	ldr	r3, [pc, #32]	; (800ab94 <MX_UART4_Init+0x4c>)
 800ab74:	2200      	movs	r2, #0
 800ab76:	619a      	str	r2, [r3, #24]
 800ab78:	4b06      	ldr	r3, [pc, #24]	; (800ab94 <MX_UART4_Init+0x4c>)
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	61da      	str	r2, [r3, #28]
 800ab7e:	4805      	ldr	r0, [pc, #20]	; (800ab94 <MX_UART4_Init+0x4c>)
 800ab80:	f003 f89c 	bl	800dcbc <HAL_UART_Init>
 800ab84:	4603      	mov	r3, r0
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d001      	beq.n	800ab8e <MX_UART4_Init+0x46>
 800ab8a:	f7f8 fd6d 	bl	8003668 <Error_Handler>
 800ab8e:	bf00      	nop
 800ab90:	bd80      	pop	{r7, pc}
 800ab92:	bf00      	nop
 800ab94:	200060e0 	.word	0x200060e0
 800ab98:	40004c00 	.word	0x40004c00

0800ab9c <HAL_UART_MspInit>:
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b08a      	sub	sp, #40	; 0x28
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
 800aba4:	f107 0314 	add.w	r3, r7, #20
 800aba8:	2200      	movs	r2, #0
 800abaa:	601a      	str	r2, [r3, #0]
 800abac:	605a      	str	r2, [r3, #4]
 800abae:	609a      	str	r2, [r3, #8]
 800abb0:	60da      	str	r2, [r3, #12]
 800abb2:	611a      	str	r2, [r3, #16]
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	4a34      	ldr	r2, [pc, #208]	; (800ac8c <HAL_UART_MspInit+0xf0>)
 800abba:	4293      	cmp	r3, r2
 800abbc:	d161      	bne.n	800ac82 <HAL_UART_MspInit+0xe6>
 800abbe:	2300      	movs	r3, #0
 800abc0:	613b      	str	r3, [r7, #16]
 800abc2:	4b33      	ldr	r3, [pc, #204]	; (800ac90 <HAL_UART_MspInit+0xf4>)
 800abc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abc6:	4a32      	ldr	r2, [pc, #200]	; (800ac90 <HAL_UART_MspInit+0xf4>)
 800abc8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800abcc:	6413      	str	r3, [r2, #64]	; 0x40
 800abce:	4b30      	ldr	r3, [pc, #192]	; (800ac90 <HAL_UART_MspInit+0xf4>)
 800abd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800abd6:	613b      	str	r3, [r7, #16]
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	2300      	movs	r3, #0
 800abdc:	60fb      	str	r3, [r7, #12]
 800abde:	4b2c      	ldr	r3, [pc, #176]	; (800ac90 <HAL_UART_MspInit+0xf4>)
 800abe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abe2:	4a2b      	ldr	r2, [pc, #172]	; (800ac90 <HAL_UART_MspInit+0xf4>)
 800abe4:	f043 0301 	orr.w	r3, r3, #1
 800abe8:	6313      	str	r3, [r2, #48]	; 0x30
 800abea:	4b29      	ldr	r3, [pc, #164]	; (800ac90 <HAL_UART_MspInit+0xf4>)
 800abec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abee:	f003 0301 	and.w	r3, r3, #1
 800abf2:	60fb      	str	r3, [r7, #12]
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	2303      	movs	r3, #3
 800abf8:	617b      	str	r3, [r7, #20]
 800abfa:	2302      	movs	r3, #2
 800abfc:	61bb      	str	r3, [r7, #24]
 800abfe:	2301      	movs	r3, #1
 800ac00:	61fb      	str	r3, [r7, #28]
 800ac02:	2303      	movs	r3, #3
 800ac04:	623b      	str	r3, [r7, #32]
 800ac06:	2308      	movs	r3, #8
 800ac08:	627b      	str	r3, [r7, #36]	; 0x24
 800ac0a:	f107 0314 	add.w	r3, r7, #20
 800ac0e:	4619      	mov	r1, r3
 800ac10:	4820      	ldr	r0, [pc, #128]	; (800ac94 <HAL_UART_MspInit+0xf8>)
 800ac12:	f000 fd7b 	bl	800b70c <HAL_GPIO_Init>
 800ac16:	4b20      	ldr	r3, [pc, #128]	; (800ac98 <HAL_UART_MspInit+0xfc>)
 800ac18:	4a20      	ldr	r2, [pc, #128]	; (800ac9c <HAL_UART_MspInit+0x100>)
 800ac1a:	601a      	str	r2, [r3, #0]
 800ac1c:	4b1e      	ldr	r3, [pc, #120]	; (800ac98 <HAL_UART_MspInit+0xfc>)
 800ac1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ac22:	605a      	str	r2, [r3, #4]
 800ac24:	4b1c      	ldr	r3, [pc, #112]	; (800ac98 <HAL_UART_MspInit+0xfc>)
 800ac26:	2240      	movs	r2, #64	; 0x40
 800ac28:	609a      	str	r2, [r3, #8]
 800ac2a:	4b1b      	ldr	r3, [pc, #108]	; (800ac98 <HAL_UART_MspInit+0xfc>)
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	60da      	str	r2, [r3, #12]
 800ac30:	4b19      	ldr	r3, [pc, #100]	; (800ac98 <HAL_UART_MspInit+0xfc>)
 800ac32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ac36:	611a      	str	r2, [r3, #16]
 800ac38:	4b17      	ldr	r3, [pc, #92]	; (800ac98 <HAL_UART_MspInit+0xfc>)
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	615a      	str	r2, [r3, #20]
 800ac3e:	4b16      	ldr	r3, [pc, #88]	; (800ac98 <HAL_UART_MspInit+0xfc>)
 800ac40:	2200      	movs	r2, #0
 800ac42:	619a      	str	r2, [r3, #24]
 800ac44:	4b14      	ldr	r3, [pc, #80]	; (800ac98 <HAL_UART_MspInit+0xfc>)
 800ac46:	2200      	movs	r2, #0
 800ac48:	61da      	str	r2, [r3, #28]
 800ac4a:	4b13      	ldr	r3, [pc, #76]	; (800ac98 <HAL_UART_MspInit+0xfc>)
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	621a      	str	r2, [r3, #32]
 800ac50:	4b11      	ldr	r3, [pc, #68]	; (800ac98 <HAL_UART_MspInit+0xfc>)
 800ac52:	2200      	movs	r2, #0
 800ac54:	625a      	str	r2, [r3, #36]	; 0x24
 800ac56:	4810      	ldr	r0, [pc, #64]	; (800ac98 <HAL_UART_MspInit+0xfc>)
 800ac58:	f000 f9ba 	bl	800afd0 <HAL_DMA_Init>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d001      	beq.n	800ac66 <HAL_UART_MspInit+0xca>
 800ac62:	f7f8 fd01 	bl	8003668 <Error_Handler>
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	4a0b      	ldr	r2, [pc, #44]	; (800ac98 <HAL_UART_MspInit+0xfc>)
 800ac6a:	631a      	str	r2, [r3, #48]	; 0x30
 800ac6c:	4a0a      	ldr	r2, [pc, #40]	; (800ac98 <HAL_UART_MspInit+0xfc>)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6393      	str	r3, [r2, #56]	; 0x38
 800ac72:	2200      	movs	r2, #0
 800ac74:	2105      	movs	r1, #5
 800ac76:	2034      	movs	r0, #52	; 0x34
 800ac78:	f000 f980 	bl	800af7c <HAL_NVIC_SetPriority>
 800ac7c:	2034      	movs	r0, #52	; 0x34
 800ac7e:	f000 f999 	bl	800afb4 <HAL_NVIC_EnableIRQ>
 800ac82:	bf00      	nop
 800ac84:	3728      	adds	r7, #40	; 0x28
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}
 800ac8a:	bf00      	nop
 800ac8c:	40004c00 	.word	0x40004c00
 800ac90:	40023800 	.word	0x40023800
 800ac94:	40020000 	.word	0x40020000
 800ac98:	20006120 	.word	0x20006120
 800ac9c:	40026070 	.word	0x40026070

0800aca0 <HAL_UART_TxCpltCallback>:
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b084      	sub	sp, #16
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	4a0c      	ldr	r2, [pc, #48]	; (800ace0 <HAL_UART_TxCpltCallback+0x40>)
 800acae:	4293      	cmp	r3, r2
 800acb0:	d112      	bne.n	800acd8 <HAL_UART_TxCpltCallback+0x38>
 800acb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800acb6:	490b      	ldr	r1, [pc, #44]	; (800ace4 <HAL_UART_TxCpltCallback+0x44>)
 800acb8:	480b      	ldr	r0, [pc, #44]	; (800ace8 <HAL_UART_TxCpltCallback+0x48>)
 800acba:	f7f8 fd74 	bl	80037a6 <ringBuff_PopArray>
 800acbe:	4603      	mov	r3, r0
 800acc0:	81fb      	strh	r3, [r7, #14]
 800acc2:	89fb      	ldrh	r3, [r7, #14]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d006      	beq.n	800acd6 <HAL_UART_TxCpltCallback+0x36>
 800acc8:	89fb      	ldrh	r3, [r7, #14]
 800acca:	461a      	mov	r2, r3
 800accc:	4905      	ldr	r1, [pc, #20]	; (800ace4 <HAL_UART_TxCpltCallback+0x44>)
 800acce:	4807      	ldr	r0, [pc, #28]	; (800acec <HAL_UART_TxCpltCallback+0x4c>)
 800acd0:	f003 f842 	bl	800dd58 <HAL_UART_Transmit_DMA>
 800acd4:	e000      	b.n	800acd8 <HAL_UART_TxCpltCallback+0x38>
 800acd6:	bf00      	nop
 800acd8:	3710      	adds	r7, #16
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}
 800acde:	bf00      	nop
 800ace0:	40004c00 	.word	0x40004c00
 800ace4:	200051b4 	.word	0x200051b4
 800ace8:	20000840 	.word	0x20000840
 800acec:	200060e0 	.word	0x200060e0

0800acf0 <Reset_Handler>:
 800acf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ad28 <LoopFillZerobss+0x14>
 800acf4:	2100      	movs	r1, #0
 800acf6:	e003      	b.n	800ad00 <LoopCopyDataInit>

0800acf8 <CopyDataInit>:
 800acf8:	4b0c      	ldr	r3, [pc, #48]	; (800ad2c <LoopFillZerobss+0x18>)
 800acfa:	585b      	ldr	r3, [r3, r1]
 800acfc:	5043      	str	r3, [r0, r1]
 800acfe:	3104      	adds	r1, #4

0800ad00 <LoopCopyDataInit>:
 800ad00:	480b      	ldr	r0, [pc, #44]	; (800ad30 <LoopFillZerobss+0x1c>)
 800ad02:	4b0c      	ldr	r3, [pc, #48]	; (800ad34 <LoopFillZerobss+0x20>)
 800ad04:	1842      	adds	r2, r0, r1
 800ad06:	429a      	cmp	r2, r3
 800ad08:	d3f6      	bcc.n	800acf8 <CopyDataInit>
 800ad0a:	4a0b      	ldr	r2, [pc, #44]	; (800ad38 <LoopFillZerobss+0x24>)
 800ad0c:	e002      	b.n	800ad14 <LoopFillZerobss>

0800ad0e <FillZerobss>:
 800ad0e:	2300      	movs	r3, #0
 800ad10:	f842 3b04 	str.w	r3, [r2], #4

0800ad14 <LoopFillZerobss>:
 800ad14:	4b09      	ldr	r3, [pc, #36]	; (800ad3c <LoopFillZerobss+0x28>)
 800ad16:	429a      	cmp	r2, r3
 800ad18:	d3f9      	bcc.n	800ad0e <FillZerobss>
 800ad1a:	f7ff fea1 	bl	800aa60 <SystemInit>
 800ad1e:	f00a fc93 	bl	8015648 <__libc_init_array>
 800ad22:	f7f8 fc0f 	bl	8003544 <main>
 800ad26:	4770      	bx	lr
 800ad28:	20020000 	.word	0x20020000
 800ad2c:	0801b600 	.word	0x0801b600
 800ad30:	20000000 	.word	0x20000000
 800ad34:	20000fe0 	.word	0x20000fe0
 800ad38:	20000fe0 	.word	0x20000fe0
 800ad3c:	20006e34 	.word	0x20006e34

0800ad40 <ADC_IRQHandler>:
 800ad40:	e7fe      	b.n	800ad40 <ADC_IRQHandler>
	...

0800ad44 <HAL_Init>:
 800ad44:	b580      	push	{r7, lr}
 800ad46:	af00      	add	r7, sp, #0
 800ad48:	4b0e      	ldr	r3, [pc, #56]	; (800ad84 <HAL_Init+0x40>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	4a0d      	ldr	r2, [pc, #52]	; (800ad84 <HAL_Init+0x40>)
 800ad4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ad52:	6013      	str	r3, [r2, #0]
 800ad54:	4b0b      	ldr	r3, [pc, #44]	; (800ad84 <HAL_Init+0x40>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	4a0a      	ldr	r2, [pc, #40]	; (800ad84 <HAL_Init+0x40>)
 800ad5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ad5e:	6013      	str	r3, [r2, #0]
 800ad60:	4b08      	ldr	r3, [pc, #32]	; (800ad84 <HAL_Init+0x40>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	4a07      	ldr	r2, [pc, #28]	; (800ad84 <HAL_Init+0x40>)
 800ad66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ad6a:	6013      	str	r3, [r2, #0]
 800ad6c:	2003      	movs	r0, #3
 800ad6e:	f000 f8fa 	bl	800af66 <HAL_NVIC_SetPriorityGrouping>
 800ad72:	2000      	movs	r0, #0
 800ad74:	f7ff fd84 	bl	800a880 <HAL_InitTick>
 800ad78:	f7ff fd56 	bl	800a828 <HAL_MspInit>
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	4618      	mov	r0, r3
 800ad80:	bd80      	pop	{r7, pc}
 800ad82:	bf00      	nop
 800ad84:	40023c00 	.word	0x40023c00

0800ad88 <HAL_IncTick>:
 800ad88:	b480      	push	{r7}
 800ad8a:	af00      	add	r7, sp, #0
 800ad8c:	4b06      	ldr	r3, [pc, #24]	; (800ada8 <HAL_IncTick+0x20>)
 800ad8e:	781b      	ldrb	r3, [r3, #0]
 800ad90:	461a      	mov	r2, r3
 800ad92:	4b06      	ldr	r3, [pc, #24]	; (800adac <HAL_IncTick+0x24>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	4413      	add	r3, r2
 800ad98:	4a04      	ldr	r2, [pc, #16]	; (800adac <HAL_IncTick+0x24>)
 800ad9a:	6013      	str	r3, [r2, #0]
 800ad9c:	bf00      	nop
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada4:	4770      	bx	lr
 800ada6:	bf00      	nop
 800ada8:	20000c94 	.word	0x20000c94
 800adac:	20006180 	.word	0x20006180

0800adb0 <HAL_GetTick>:
 800adb0:	b480      	push	{r7}
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	4b03      	ldr	r3, [pc, #12]	; (800adc4 <HAL_GetTick+0x14>)
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	4618      	mov	r0, r3
 800adba:	46bd      	mov	sp, r7
 800adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc0:	4770      	bx	lr
 800adc2:	bf00      	nop
 800adc4:	20006180 	.word	0x20006180

0800adc8 <HAL_Delay>:
 800adc8:	b580      	push	{r7, lr}
 800adca:	b084      	sub	sp, #16
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	f7ff ffee 	bl	800adb0 <HAL_GetTick>
 800add4:	60b8      	str	r0, [r7, #8]
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	60fb      	str	r3, [r7, #12]
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ade0:	d005      	beq.n	800adee <HAL_Delay+0x26>
 800ade2:	4b09      	ldr	r3, [pc, #36]	; (800ae08 <HAL_Delay+0x40>)
 800ade4:	781b      	ldrb	r3, [r3, #0]
 800ade6:	461a      	mov	r2, r3
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	4413      	add	r3, r2
 800adec:	60fb      	str	r3, [r7, #12]
 800adee:	bf00      	nop
 800adf0:	f7ff ffde 	bl	800adb0 <HAL_GetTick>
 800adf4:	4602      	mov	r2, r0
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	1ad3      	subs	r3, r2, r3
 800adfa:	68fa      	ldr	r2, [r7, #12]
 800adfc:	429a      	cmp	r2, r3
 800adfe:	d8f7      	bhi.n	800adf0 <HAL_Delay+0x28>
 800ae00:	bf00      	nop
 800ae02:	3710      	adds	r7, #16
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}
 800ae08:	20000c94 	.word	0x20000c94

0800ae0c <__NVIC_SetPriorityGrouping>:
 800ae0c:	b480      	push	{r7}
 800ae0e:	b085      	sub	sp, #20
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f003 0307 	and.w	r3, r3, #7
 800ae1a:	60fb      	str	r3, [r7, #12]
 800ae1c:	4b0c      	ldr	r3, [pc, #48]	; (800ae50 <__NVIC_SetPriorityGrouping+0x44>)
 800ae1e:	68db      	ldr	r3, [r3, #12]
 800ae20:	60bb      	str	r3, [r7, #8]
 800ae22:	68ba      	ldr	r2, [r7, #8]
 800ae24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800ae28:	4013      	ands	r3, r2
 800ae2a:	60bb      	str	r3, [r7, #8]
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	021a      	lsls	r2, r3, #8
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	4313      	orrs	r3, r2
 800ae34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800ae38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae3c:	60bb      	str	r3, [r7, #8]
 800ae3e:	4a04      	ldr	r2, [pc, #16]	; (800ae50 <__NVIC_SetPriorityGrouping+0x44>)
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	60d3      	str	r3, [r2, #12]
 800ae44:	bf00      	nop
 800ae46:	3714      	adds	r7, #20
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4e:	4770      	bx	lr
 800ae50:	e000ed00 	.word	0xe000ed00

0800ae54 <__NVIC_GetPriorityGrouping>:
 800ae54:	b480      	push	{r7}
 800ae56:	af00      	add	r7, sp, #0
 800ae58:	4b04      	ldr	r3, [pc, #16]	; (800ae6c <__NVIC_GetPriorityGrouping+0x18>)
 800ae5a:	68db      	ldr	r3, [r3, #12]
 800ae5c:	0a1b      	lsrs	r3, r3, #8
 800ae5e:	f003 0307 	and.w	r3, r3, #7
 800ae62:	4618      	mov	r0, r3
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr
 800ae6c:	e000ed00 	.word	0xe000ed00

0800ae70 <__NVIC_EnableIRQ>:
 800ae70:	b480      	push	{r7}
 800ae72:	b083      	sub	sp, #12
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	4603      	mov	r3, r0
 800ae78:	71fb      	strb	r3, [r7, #7]
 800ae7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	db0b      	blt.n	800ae9a <__NVIC_EnableIRQ+0x2a>
 800ae82:	79fb      	ldrb	r3, [r7, #7]
 800ae84:	f003 021f 	and.w	r2, r3, #31
 800ae88:	4907      	ldr	r1, [pc, #28]	; (800aea8 <__NVIC_EnableIRQ+0x38>)
 800ae8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae8e:	095b      	lsrs	r3, r3, #5
 800ae90:	2001      	movs	r0, #1
 800ae92:	fa00 f202 	lsl.w	r2, r0, r2
 800ae96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ae9a:	bf00      	nop
 800ae9c:	370c      	adds	r7, #12
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea4:	4770      	bx	lr
 800aea6:	bf00      	nop
 800aea8:	e000e100 	.word	0xe000e100

0800aeac <__NVIC_SetPriority>:
 800aeac:	b480      	push	{r7}
 800aeae:	b083      	sub	sp, #12
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	6039      	str	r1, [r7, #0]
 800aeb6:	71fb      	strb	r3, [r7, #7]
 800aeb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	db0a      	blt.n	800aed6 <__NVIC_SetPriority+0x2a>
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	b2da      	uxtb	r2, r3
 800aec4:	490c      	ldr	r1, [pc, #48]	; (800aef8 <__NVIC_SetPriority+0x4c>)
 800aec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aeca:	0112      	lsls	r2, r2, #4
 800aecc:	b2d2      	uxtb	r2, r2
 800aece:	440b      	add	r3, r1
 800aed0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800aed4:	e00a      	b.n	800aeec <__NVIC_SetPriority+0x40>
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	b2da      	uxtb	r2, r3
 800aeda:	4908      	ldr	r1, [pc, #32]	; (800aefc <__NVIC_SetPriority+0x50>)
 800aedc:	79fb      	ldrb	r3, [r7, #7]
 800aede:	f003 030f 	and.w	r3, r3, #15
 800aee2:	3b04      	subs	r3, #4
 800aee4:	0112      	lsls	r2, r2, #4
 800aee6:	b2d2      	uxtb	r2, r2
 800aee8:	440b      	add	r3, r1
 800aeea:	761a      	strb	r2, [r3, #24]
 800aeec:	bf00      	nop
 800aeee:	370c      	adds	r7, #12
 800aef0:	46bd      	mov	sp, r7
 800aef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef6:	4770      	bx	lr
 800aef8:	e000e100 	.word	0xe000e100
 800aefc:	e000ed00 	.word	0xe000ed00

0800af00 <NVIC_EncodePriority>:
 800af00:	b480      	push	{r7}
 800af02:	b089      	sub	sp, #36	; 0x24
 800af04:	af00      	add	r7, sp, #0
 800af06:	60f8      	str	r0, [r7, #12]
 800af08:	60b9      	str	r1, [r7, #8]
 800af0a:	607a      	str	r2, [r7, #4]
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	f003 0307 	and.w	r3, r3, #7
 800af12:	61fb      	str	r3, [r7, #28]
 800af14:	69fb      	ldr	r3, [r7, #28]
 800af16:	f1c3 0307 	rsb	r3, r3, #7
 800af1a:	2b04      	cmp	r3, #4
 800af1c:	bf28      	it	cs
 800af1e:	2304      	movcs	r3, #4
 800af20:	61bb      	str	r3, [r7, #24]
 800af22:	69fb      	ldr	r3, [r7, #28]
 800af24:	3304      	adds	r3, #4
 800af26:	2b06      	cmp	r3, #6
 800af28:	d902      	bls.n	800af30 <NVIC_EncodePriority+0x30>
 800af2a:	69fb      	ldr	r3, [r7, #28]
 800af2c:	3b03      	subs	r3, #3
 800af2e:	e000      	b.n	800af32 <NVIC_EncodePriority+0x32>
 800af30:	2300      	movs	r3, #0
 800af32:	617b      	str	r3, [r7, #20]
 800af34:	f04f 32ff 	mov.w	r2, #4294967295
 800af38:	69bb      	ldr	r3, [r7, #24]
 800af3a:	fa02 f303 	lsl.w	r3, r2, r3
 800af3e:	43da      	mvns	r2, r3
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	401a      	ands	r2, r3
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	409a      	lsls	r2, r3
 800af48:	f04f 31ff 	mov.w	r1, #4294967295
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	fa01 f303 	lsl.w	r3, r1, r3
 800af52:	43d9      	mvns	r1, r3
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	400b      	ands	r3, r1
 800af58:	4313      	orrs	r3, r2
 800af5a:	4618      	mov	r0, r3
 800af5c:	3724      	adds	r7, #36	; 0x24
 800af5e:	46bd      	mov	sp, r7
 800af60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af64:	4770      	bx	lr

0800af66 <HAL_NVIC_SetPriorityGrouping>:
 800af66:	b580      	push	{r7, lr}
 800af68:	b082      	sub	sp, #8
 800af6a:	af00      	add	r7, sp, #0
 800af6c:	6078      	str	r0, [r7, #4]
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f7ff ff4c 	bl	800ae0c <__NVIC_SetPriorityGrouping>
 800af74:	bf00      	nop
 800af76:	3708      	adds	r7, #8
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}

0800af7c <HAL_NVIC_SetPriority>:
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b086      	sub	sp, #24
 800af80:	af00      	add	r7, sp, #0
 800af82:	4603      	mov	r3, r0
 800af84:	60b9      	str	r1, [r7, #8]
 800af86:	607a      	str	r2, [r7, #4]
 800af88:	73fb      	strb	r3, [r7, #15]
 800af8a:	2300      	movs	r3, #0
 800af8c:	617b      	str	r3, [r7, #20]
 800af8e:	f7ff ff61 	bl	800ae54 <__NVIC_GetPriorityGrouping>
 800af92:	6178      	str	r0, [r7, #20]
 800af94:	687a      	ldr	r2, [r7, #4]
 800af96:	68b9      	ldr	r1, [r7, #8]
 800af98:	6978      	ldr	r0, [r7, #20]
 800af9a:	f7ff ffb1 	bl	800af00 <NVIC_EncodePriority>
 800af9e:	4602      	mov	r2, r0
 800afa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800afa4:	4611      	mov	r1, r2
 800afa6:	4618      	mov	r0, r3
 800afa8:	f7ff ff80 	bl	800aeac <__NVIC_SetPriority>
 800afac:	bf00      	nop
 800afae:	3718      	adds	r7, #24
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}

0800afb4 <HAL_NVIC_EnableIRQ>:
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b082      	sub	sp, #8
 800afb8:	af00      	add	r7, sp, #0
 800afba:	4603      	mov	r3, r0
 800afbc:	71fb      	strb	r3, [r7, #7]
 800afbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800afc2:	4618      	mov	r0, r3
 800afc4:	f7ff ff54 	bl	800ae70 <__NVIC_EnableIRQ>
 800afc8:	bf00      	nop
 800afca:	3708      	adds	r7, #8
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}

0800afd0 <HAL_DMA_Init>:
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b086      	sub	sp, #24
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
 800afd8:	2300      	movs	r3, #0
 800afda:	617b      	str	r3, [r7, #20]
 800afdc:	f7ff fee8 	bl	800adb0 <HAL_GetTick>
 800afe0:	6138      	str	r0, [r7, #16]
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d101      	bne.n	800afec <HAL_DMA_Init+0x1c>
 800afe8:	2301      	movs	r3, #1
 800afea:	e099      	b.n	800b120 <HAL_DMA_Init+0x150>
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2200      	movs	r2, #0
 800aff0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2202      	movs	r2, #2
 800aff8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	681a      	ldr	r2, [r3, #0]
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f022 0201 	bic.w	r2, r2, #1
 800b00a:	601a      	str	r2, [r3, #0]
 800b00c:	e00f      	b.n	800b02e <HAL_DMA_Init+0x5e>
 800b00e:	f7ff fecf 	bl	800adb0 <HAL_GetTick>
 800b012:	4602      	mov	r2, r0
 800b014:	693b      	ldr	r3, [r7, #16]
 800b016:	1ad3      	subs	r3, r2, r3
 800b018:	2b05      	cmp	r3, #5
 800b01a:	d908      	bls.n	800b02e <HAL_DMA_Init+0x5e>
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2220      	movs	r2, #32
 800b020:	655a      	str	r2, [r3, #84]	; 0x54
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2203      	movs	r2, #3
 800b026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800b02a:	2303      	movs	r3, #3
 800b02c:	e078      	b.n	800b120 <HAL_DMA_Init+0x150>
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	f003 0301 	and.w	r3, r3, #1
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d1e8      	bne.n	800b00e <HAL_DMA_Init+0x3e>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	617b      	str	r3, [r7, #20]
 800b044:	697a      	ldr	r2, [r7, #20]
 800b046:	4b38      	ldr	r3, [pc, #224]	; (800b128 <HAL_DMA_Init+0x158>)
 800b048:	4013      	ands	r3, r2
 800b04a:	617b      	str	r3, [r7, #20]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	685a      	ldr	r2, [r3, #4]
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	689b      	ldr	r3, [r3, #8]
 800b054:	431a      	orrs	r2, r3
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	68db      	ldr	r3, [r3, #12]
 800b05a:	431a      	orrs	r2, r3
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	691b      	ldr	r3, [r3, #16]
 800b060:	431a      	orrs	r2, r3
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	695b      	ldr	r3, [r3, #20]
 800b066:	431a      	orrs	r2, r3
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	699b      	ldr	r3, [r3, #24]
 800b06c:	431a      	orrs	r2, r3
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	69db      	ldr	r3, [r3, #28]
 800b072:	431a      	orrs	r2, r3
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6a1b      	ldr	r3, [r3, #32]
 800b078:	4313      	orrs	r3, r2
 800b07a:	697a      	ldr	r2, [r7, #20]
 800b07c:	4313      	orrs	r3, r2
 800b07e:	617b      	str	r3, [r7, #20]
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b084:	2b04      	cmp	r3, #4
 800b086:	d107      	bne.n	800b098 <HAL_DMA_Init+0xc8>
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b090:	4313      	orrs	r3, r2
 800b092:	697a      	ldr	r2, [r7, #20]
 800b094:	4313      	orrs	r3, r2
 800b096:	617b      	str	r3, [r7, #20]
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	697a      	ldr	r2, [r7, #20]
 800b09e:	601a      	str	r2, [r3, #0]
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	695b      	ldr	r3, [r3, #20]
 800b0a6:	617b      	str	r3, [r7, #20]
 800b0a8:	697b      	ldr	r3, [r7, #20]
 800b0aa:	f023 0307 	bic.w	r3, r3, #7
 800b0ae:	617b      	str	r3, [r7, #20]
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0b4:	697a      	ldr	r2, [r7, #20]
 800b0b6:	4313      	orrs	r3, r2
 800b0b8:	617b      	str	r3, [r7, #20]
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0be:	2b04      	cmp	r3, #4
 800b0c0:	d117      	bne.n	800b0f2 <HAL_DMA_Init+0x122>
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0c6:	697a      	ldr	r2, [r7, #20]
 800b0c8:	4313      	orrs	r3, r2
 800b0ca:	617b      	str	r3, [r7, #20]
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d00e      	beq.n	800b0f2 <HAL_DMA_Init+0x122>
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f000 fa9f 	bl	800b618 <DMA_CheckFifoParam>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d008      	beq.n	800b0f2 <HAL_DMA_Init+0x122>
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2240      	movs	r2, #64	; 0x40
 800b0e4:	655a      	str	r2, [r3, #84]	; 0x54
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2201      	movs	r2, #1
 800b0ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	e016      	b.n	800b120 <HAL_DMA_Init+0x150>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	697a      	ldr	r2, [r7, #20]
 800b0f8:	615a      	str	r2, [r3, #20]
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f000 fa56 	bl	800b5ac <DMA_CalcBaseAndBitshift>
 800b100:	4603      	mov	r3, r0
 800b102:	60fb      	str	r3, [r7, #12]
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b108:	223f      	movs	r2, #63	; 0x3f
 800b10a:	409a      	lsls	r2, r3
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	609a      	str	r2, [r3, #8]
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2200      	movs	r2, #0
 800b114:	655a      	str	r2, [r3, #84]	; 0x54
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2201      	movs	r2, #1
 800b11a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800b11e:	2300      	movs	r3, #0
 800b120:	4618      	mov	r0, r3
 800b122:	3718      	adds	r7, #24
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}
 800b128:	f010803f 	.word	0xf010803f

0800b12c <HAL_DMA_Start_IT>:
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b086      	sub	sp, #24
 800b130:	af00      	add	r7, sp, #0
 800b132:	60f8      	str	r0, [r7, #12]
 800b134:	60b9      	str	r1, [r7, #8]
 800b136:	607a      	str	r2, [r7, #4]
 800b138:	603b      	str	r3, [r7, #0]
 800b13a:	2300      	movs	r3, #0
 800b13c:	75fb      	strb	r3, [r7, #23]
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b142:	613b      	str	r3, [r7, #16]
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b14a:	2b01      	cmp	r3, #1
 800b14c:	d101      	bne.n	800b152 <HAL_DMA_Start_IT+0x26>
 800b14e:	2302      	movs	r3, #2
 800b150:	e040      	b.n	800b1d4 <HAL_DMA_Start_IT+0xa8>
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	2201      	movs	r2, #1
 800b156:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b160:	b2db      	uxtb	r3, r3
 800b162:	2b01      	cmp	r3, #1
 800b164:	d12f      	bne.n	800b1c6 <HAL_DMA_Start_IT+0x9a>
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	2202      	movs	r2, #2
 800b16a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	2200      	movs	r2, #0
 800b172:	655a      	str	r2, [r3, #84]	; 0x54
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	687a      	ldr	r2, [r7, #4]
 800b178:	68b9      	ldr	r1, [r7, #8]
 800b17a:	68f8      	ldr	r0, [r7, #12]
 800b17c:	f000 f9e8 	bl	800b550 <DMA_SetConfig>
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b184:	223f      	movs	r2, #63	; 0x3f
 800b186:	409a      	lsls	r2, r3
 800b188:	693b      	ldr	r3, [r7, #16]
 800b18a:	609a      	str	r2, [r3, #8]
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	681a      	ldr	r2, [r3, #0]
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f042 0216 	orr.w	r2, r2, #22
 800b19a:	601a      	str	r2, [r3, #0]
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d007      	beq.n	800b1b4 <HAL_DMA_Start_IT+0x88>
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	681a      	ldr	r2, [r3, #0]
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	f042 0208 	orr.w	r2, r2, #8
 800b1b2:	601a      	str	r2, [r3, #0]
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	681a      	ldr	r2, [r3, #0]
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	f042 0201 	orr.w	r2, r2, #1
 800b1c2:	601a      	str	r2, [r3, #0]
 800b1c4:	e005      	b.n	800b1d2 <HAL_DMA_Start_IT+0xa6>
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800b1ce:	2302      	movs	r3, #2
 800b1d0:	75fb      	strb	r3, [r7, #23]
 800b1d2:	7dfb      	ldrb	r3, [r7, #23]
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	3718      	adds	r7, #24
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}

0800b1dc <HAL_DMA_Abort_IT>:
 800b1dc:	b480      	push	{r7}
 800b1de:	b083      	sub	sp, #12
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b1ea:	b2db      	uxtb	r3, r3
 800b1ec:	2b02      	cmp	r3, #2
 800b1ee:	d004      	beq.n	800b1fa <HAL_DMA_Abort_IT+0x1e>
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2280      	movs	r2, #128	; 0x80
 800b1f4:	655a      	str	r2, [r3, #84]	; 0x54
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	e00c      	b.n	800b214 <HAL_DMA_Abort_IT+0x38>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	2205      	movs	r2, #5
 800b1fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	681a      	ldr	r2, [r3, #0]
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	f022 0201 	bic.w	r2, r2, #1
 800b210:	601a      	str	r2, [r3, #0]
 800b212:	2300      	movs	r3, #0
 800b214:	4618      	mov	r0, r3
 800b216:	370c      	adds	r7, #12
 800b218:	46bd      	mov	sp, r7
 800b21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21e:	4770      	bx	lr

0800b220 <HAL_DMA_IRQHandler>:
 800b220:	b580      	push	{r7, lr}
 800b222:	b086      	sub	sp, #24
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
 800b228:	2300      	movs	r3, #0
 800b22a:	60bb      	str	r3, [r7, #8]
 800b22c:	4b92      	ldr	r3, [pc, #584]	; (800b478 <HAL_DMA_IRQHandler+0x258>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	4a92      	ldr	r2, [pc, #584]	; (800b47c <HAL_DMA_IRQHandler+0x25c>)
 800b232:	fba2 2303 	umull	r2, r3, r2, r3
 800b236:	0a9b      	lsrs	r3, r3, #10
 800b238:	617b      	str	r3, [r7, #20]
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b23e:	613b      	str	r3, [r7, #16]
 800b240:	693b      	ldr	r3, [r7, #16]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	60fb      	str	r3, [r7, #12]
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b24a:	2208      	movs	r2, #8
 800b24c:	409a      	lsls	r2, r3
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	4013      	ands	r3, r2
 800b252:	2b00      	cmp	r3, #0
 800b254:	d01a      	beq.n	800b28c <HAL_DMA_IRQHandler+0x6c>
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f003 0304 	and.w	r3, r3, #4
 800b260:	2b00      	cmp	r3, #0
 800b262:	d013      	beq.n	800b28c <HAL_DMA_IRQHandler+0x6c>
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	681a      	ldr	r2, [r3, #0]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f022 0204 	bic.w	r2, r2, #4
 800b272:	601a      	str	r2, [r3, #0]
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b278:	2208      	movs	r2, #8
 800b27a:	409a      	lsls	r2, r3
 800b27c:	693b      	ldr	r3, [r7, #16]
 800b27e:	609a      	str	r2, [r3, #8]
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b284:	f043 0201 	orr.w	r2, r3, #1
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	655a      	str	r2, [r3, #84]	; 0x54
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b290:	2201      	movs	r2, #1
 800b292:	409a      	lsls	r2, r3
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	4013      	ands	r3, r2
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d012      	beq.n	800b2c2 <HAL_DMA_IRQHandler+0xa2>
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	695b      	ldr	r3, [r3, #20]
 800b2a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d00b      	beq.n	800b2c2 <HAL_DMA_IRQHandler+0xa2>
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2ae:	2201      	movs	r2, #1
 800b2b0:	409a      	lsls	r2, r3
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	609a      	str	r2, [r3, #8]
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2ba:	f043 0202 	orr.w	r2, r3, #2
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	655a      	str	r2, [r3, #84]	; 0x54
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2c6:	2204      	movs	r2, #4
 800b2c8:	409a      	lsls	r2, r3
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	4013      	ands	r3, r2
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d012      	beq.n	800b2f8 <HAL_DMA_IRQHandler+0xd8>
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f003 0302 	and.w	r3, r3, #2
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d00b      	beq.n	800b2f8 <HAL_DMA_IRQHandler+0xd8>
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2e4:	2204      	movs	r2, #4
 800b2e6:	409a      	lsls	r2, r3
 800b2e8:	693b      	ldr	r3, [r7, #16]
 800b2ea:	609a      	str	r2, [r3, #8]
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2f0:	f043 0204 	orr.w	r2, r3, #4
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	655a      	str	r2, [r3, #84]	; 0x54
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2fc:	2210      	movs	r2, #16
 800b2fe:	409a      	lsls	r2, r3
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	4013      	ands	r3, r2
 800b304:	2b00      	cmp	r3, #0
 800b306:	d043      	beq.n	800b390 <HAL_DMA_IRQHandler+0x170>
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f003 0308 	and.w	r3, r3, #8
 800b312:	2b00      	cmp	r3, #0
 800b314:	d03c      	beq.n	800b390 <HAL_DMA_IRQHandler+0x170>
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b31a:	2210      	movs	r2, #16
 800b31c:	409a      	lsls	r2, r3
 800b31e:	693b      	ldr	r3, [r7, #16]
 800b320:	609a      	str	r2, [r3, #8]
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d018      	beq.n	800b362 <HAL_DMA_IRQHandler+0x142>
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d108      	bne.n	800b350 <HAL_DMA_IRQHandler+0x130>
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b342:	2b00      	cmp	r3, #0
 800b344:	d024      	beq.n	800b390 <HAL_DMA_IRQHandler+0x170>
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	4798      	blx	r3
 800b34e:	e01f      	b.n	800b390 <HAL_DMA_IRQHandler+0x170>
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b354:	2b00      	cmp	r3, #0
 800b356:	d01b      	beq.n	800b390 <HAL_DMA_IRQHandler+0x170>
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	4798      	blx	r3
 800b360:	e016      	b.n	800b390 <HAL_DMA_IRQHandler+0x170>
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d107      	bne.n	800b380 <HAL_DMA_IRQHandler+0x160>
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	681a      	ldr	r2, [r3, #0]
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	f022 0208 	bic.w	r2, r2, #8
 800b37e:	601a      	str	r2, [r3, #0]
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b384:	2b00      	cmp	r3, #0
 800b386:	d003      	beq.n	800b390 <HAL_DMA_IRQHandler+0x170>
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b38c:	6878      	ldr	r0, [r7, #4]
 800b38e:	4798      	blx	r3
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b394:	2220      	movs	r2, #32
 800b396:	409a      	lsls	r2, r3
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	4013      	ands	r3, r2
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	f000 808e 	beq.w	800b4be <HAL_DMA_IRQHandler+0x29e>
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	f003 0310 	and.w	r3, r3, #16
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	f000 8086 	beq.w	800b4be <HAL_DMA_IRQHandler+0x29e>
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b3b6:	2220      	movs	r2, #32
 800b3b8:	409a      	lsls	r2, r3
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	609a      	str	r2, [r3, #8]
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b3c4:	b2db      	uxtb	r3, r3
 800b3c6:	2b05      	cmp	r3, #5
 800b3c8:	d136      	bne.n	800b438 <HAL_DMA_IRQHandler+0x218>
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	681a      	ldr	r2, [r3, #0]
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	f022 0216 	bic.w	r2, r2, #22
 800b3d8:	601a      	str	r2, [r3, #0]
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	695a      	ldr	r2, [r3, #20]
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b3e8:	615a      	str	r2, [r3, #20]
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d103      	bne.n	800b3fa <HAL_DMA_IRQHandler+0x1da>
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d007      	beq.n	800b40a <HAL_DMA_IRQHandler+0x1ea>
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	681a      	ldr	r2, [r3, #0]
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	f022 0208 	bic.w	r2, r2, #8
 800b408:	601a      	str	r2, [r3, #0]
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b40e:	223f      	movs	r2, #63	; 0x3f
 800b410:	409a      	lsls	r2, r3
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	609a      	str	r2, [r3, #8]
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2200      	movs	r2, #0
 800b41a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2201      	movs	r2, #1
 800b422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d07d      	beq.n	800b52a <HAL_DMA_IRQHandler+0x30a>
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	4798      	blx	r3
 800b436:	e078      	b.n	800b52a <HAL_DMA_IRQHandler+0x30a>
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b442:	2b00      	cmp	r3, #0
 800b444:	d01c      	beq.n	800b480 <HAL_DMA_IRQHandler+0x260>
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b450:	2b00      	cmp	r3, #0
 800b452:	d108      	bne.n	800b466 <HAL_DMA_IRQHandler+0x246>
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d030      	beq.n	800b4be <HAL_DMA_IRQHandler+0x29e>
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	4798      	blx	r3
 800b464:	e02b      	b.n	800b4be <HAL_DMA_IRQHandler+0x29e>
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d027      	beq.n	800b4be <HAL_DMA_IRQHandler+0x29e>
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	4798      	blx	r3
 800b476:	e022      	b.n	800b4be <HAL_DMA_IRQHandler+0x29e>
 800b478:	20000c8c 	.word	0x20000c8c
 800b47c:	1b4e81b5 	.word	0x1b4e81b5
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d10f      	bne.n	800b4ae <HAL_DMA_IRQHandler+0x28e>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	681a      	ldr	r2, [r3, #0]
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	f022 0210 	bic.w	r2, r2, #16
 800b49c:	601a      	str	r2, [r3, #0]
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2201      	movs	r2, #1
 800b4aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d003      	beq.n	800b4be <HAL_DMA_IRQHandler+0x29e>
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	4798      	blx	r3
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d032      	beq.n	800b52c <HAL_DMA_IRQHandler+0x30c>
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4ca:	f003 0301 	and.w	r3, r3, #1
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d022      	beq.n	800b518 <HAL_DMA_IRQHandler+0x2f8>
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2205      	movs	r2, #5
 800b4d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	681a      	ldr	r2, [r3, #0]
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	f022 0201 	bic.w	r2, r2, #1
 800b4e8:	601a      	str	r2, [r3, #0]
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	3301      	adds	r3, #1
 800b4ee:	60bb      	str	r3, [r7, #8]
 800b4f0:	697a      	ldr	r2, [r7, #20]
 800b4f2:	429a      	cmp	r2, r3
 800b4f4:	d307      	bcc.n	800b506 <HAL_DMA_IRQHandler+0x2e6>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	f003 0301 	and.w	r3, r3, #1
 800b500:	2b00      	cmp	r3, #0
 800b502:	d1f2      	bne.n	800b4ea <HAL_DMA_IRQHandler+0x2ca>
 800b504:	e000      	b.n	800b508 <HAL_DMA_IRQHandler+0x2e8>
 800b506:	bf00      	nop
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2200      	movs	r2, #0
 800b50c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2201      	movs	r2, #1
 800b514:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d005      	beq.n	800b52c <HAL_DMA_IRQHandler+0x30c>
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	4798      	blx	r3
 800b528:	e000      	b.n	800b52c <HAL_DMA_IRQHandler+0x30c>
 800b52a:	bf00      	nop
 800b52c:	3718      	adds	r7, #24
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}
 800b532:	bf00      	nop

0800b534 <HAL_DMA_GetState>:
 800b534:	b480      	push	{r7}
 800b536:	b083      	sub	sp, #12
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b542:	b2db      	uxtb	r3, r3
 800b544:	4618      	mov	r0, r3
 800b546:	370c      	adds	r7, #12
 800b548:	46bd      	mov	sp, r7
 800b54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54e:	4770      	bx	lr

0800b550 <DMA_SetConfig>:
 800b550:	b480      	push	{r7}
 800b552:	b085      	sub	sp, #20
 800b554:	af00      	add	r7, sp, #0
 800b556:	60f8      	str	r0, [r7, #12]
 800b558:	60b9      	str	r1, [r7, #8]
 800b55a:	607a      	str	r2, [r7, #4]
 800b55c:	603b      	str	r3, [r7, #0]
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	681a      	ldr	r2, [r3, #0]
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b56c:	601a      	str	r2, [r3, #0]
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	683a      	ldr	r2, [r7, #0]
 800b574:	605a      	str	r2, [r3, #4]
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	689b      	ldr	r3, [r3, #8]
 800b57a:	2b40      	cmp	r3, #64	; 0x40
 800b57c:	d108      	bne.n	800b590 <DMA_SetConfig+0x40>
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	687a      	ldr	r2, [r7, #4]
 800b584:	609a      	str	r2, [r3, #8]
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	68ba      	ldr	r2, [r7, #8]
 800b58c:	60da      	str	r2, [r3, #12]
 800b58e:	e007      	b.n	800b5a0 <DMA_SetConfig+0x50>
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	68ba      	ldr	r2, [r7, #8]
 800b596:	609a      	str	r2, [r3, #8]
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	687a      	ldr	r2, [r7, #4]
 800b59e:	60da      	str	r2, [r3, #12]
 800b5a0:	bf00      	nop
 800b5a2:	3714      	adds	r7, #20
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5aa:	4770      	bx	lr

0800b5ac <DMA_CalcBaseAndBitshift>:
 800b5ac:	b480      	push	{r7}
 800b5ae:	b085      	sub	sp, #20
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	b2db      	uxtb	r3, r3
 800b5ba:	3b10      	subs	r3, #16
 800b5bc:	4a14      	ldr	r2, [pc, #80]	; (800b610 <DMA_CalcBaseAndBitshift+0x64>)
 800b5be:	fba2 2303 	umull	r2, r3, r2, r3
 800b5c2:	091b      	lsrs	r3, r3, #4
 800b5c4:	60fb      	str	r3, [r7, #12]
 800b5c6:	4a13      	ldr	r2, [pc, #76]	; (800b614 <DMA_CalcBaseAndBitshift+0x68>)
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	4413      	add	r3, r2
 800b5cc:	781b      	ldrb	r3, [r3, #0]
 800b5ce:	461a      	mov	r2, r3
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	65da      	str	r2, [r3, #92]	; 0x5c
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	2b03      	cmp	r3, #3
 800b5d8:	d909      	bls.n	800b5ee <DMA_CalcBaseAndBitshift+0x42>
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800b5e2:	f023 0303 	bic.w	r3, r3, #3
 800b5e6:	1d1a      	adds	r2, r3, #4
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	659a      	str	r2, [r3, #88]	; 0x58
 800b5ec:	e007      	b.n	800b5fe <DMA_CalcBaseAndBitshift+0x52>
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800b5f6:	f023 0303 	bic.w	r3, r3, #3
 800b5fa:	687a      	ldr	r2, [r7, #4]
 800b5fc:	6593      	str	r3, [r2, #88]	; 0x58
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b602:	4618      	mov	r0, r3
 800b604:	3714      	adds	r7, #20
 800b606:	46bd      	mov	sp, r7
 800b608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60c:	4770      	bx	lr
 800b60e:	bf00      	nop
 800b610:	aaaaaaab 	.word	0xaaaaaaab
 800b614:	0801b114 	.word	0x0801b114

0800b618 <DMA_CheckFifoParam>:
 800b618:	b480      	push	{r7}
 800b61a:	b085      	sub	sp, #20
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
 800b620:	2300      	movs	r3, #0
 800b622:	73fb      	strb	r3, [r7, #15]
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b628:	60bb      	str	r3, [r7, #8]
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	699b      	ldr	r3, [r3, #24]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d11f      	bne.n	800b672 <DMA_CheckFifoParam+0x5a>
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	2b03      	cmp	r3, #3
 800b636:	d855      	bhi.n	800b6e4 <DMA_CheckFifoParam+0xcc>
 800b638:	a201      	add	r2, pc, #4	; (adr r2, 800b640 <DMA_CheckFifoParam+0x28>)
 800b63a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b63e:	bf00      	nop
 800b640:	0800b651 	.word	0x0800b651
 800b644:	0800b663 	.word	0x0800b663
 800b648:	0800b651 	.word	0x0800b651
 800b64c:	0800b6e5 	.word	0x0800b6e5
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b654:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d045      	beq.n	800b6e8 <DMA_CheckFifoParam+0xd0>
 800b65c:	2301      	movs	r3, #1
 800b65e:	73fb      	strb	r3, [r7, #15]
 800b660:	e042      	b.n	800b6e8 <DMA_CheckFifoParam+0xd0>
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b666:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b66a:	d13f      	bne.n	800b6ec <DMA_CheckFifoParam+0xd4>
 800b66c:	2301      	movs	r3, #1
 800b66e:	73fb      	strb	r3, [r7, #15]
 800b670:	e03c      	b.n	800b6ec <DMA_CheckFifoParam+0xd4>
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	699b      	ldr	r3, [r3, #24]
 800b676:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b67a:	d121      	bne.n	800b6c0 <DMA_CheckFifoParam+0xa8>
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	2b03      	cmp	r3, #3
 800b680:	d836      	bhi.n	800b6f0 <DMA_CheckFifoParam+0xd8>
 800b682:	a201      	add	r2, pc, #4	; (adr r2, 800b688 <DMA_CheckFifoParam+0x70>)
 800b684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b688:	0800b699 	.word	0x0800b699
 800b68c:	0800b69f 	.word	0x0800b69f
 800b690:	0800b699 	.word	0x0800b699
 800b694:	0800b6b1 	.word	0x0800b6b1
 800b698:	2301      	movs	r3, #1
 800b69a:	73fb      	strb	r3, [r7, #15]
 800b69c:	e02f      	b.n	800b6fe <DMA_CheckFifoParam+0xe6>
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d024      	beq.n	800b6f4 <DMA_CheckFifoParam+0xdc>
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	73fb      	strb	r3, [r7, #15]
 800b6ae:	e021      	b.n	800b6f4 <DMA_CheckFifoParam+0xdc>
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b6b8:	d11e      	bne.n	800b6f8 <DMA_CheckFifoParam+0xe0>
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	73fb      	strb	r3, [r7, #15]
 800b6be:	e01b      	b.n	800b6f8 <DMA_CheckFifoParam+0xe0>
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	2b02      	cmp	r3, #2
 800b6c4:	d902      	bls.n	800b6cc <DMA_CheckFifoParam+0xb4>
 800b6c6:	2b03      	cmp	r3, #3
 800b6c8:	d003      	beq.n	800b6d2 <DMA_CheckFifoParam+0xba>
 800b6ca:	e018      	b.n	800b6fe <DMA_CheckFifoParam+0xe6>
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	73fb      	strb	r3, [r7, #15]
 800b6d0:	e015      	b.n	800b6fe <DMA_CheckFifoParam+0xe6>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d00e      	beq.n	800b6fc <DMA_CheckFifoParam+0xe4>
 800b6de:	2301      	movs	r3, #1
 800b6e0:	73fb      	strb	r3, [r7, #15]
 800b6e2:	e00b      	b.n	800b6fc <DMA_CheckFifoParam+0xe4>
 800b6e4:	bf00      	nop
 800b6e6:	e00a      	b.n	800b6fe <DMA_CheckFifoParam+0xe6>
 800b6e8:	bf00      	nop
 800b6ea:	e008      	b.n	800b6fe <DMA_CheckFifoParam+0xe6>
 800b6ec:	bf00      	nop
 800b6ee:	e006      	b.n	800b6fe <DMA_CheckFifoParam+0xe6>
 800b6f0:	bf00      	nop
 800b6f2:	e004      	b.n	800b6fe <DMA_CheckFifoParam+0xe6>
 800b6f4:	bf00      	nop
 800b6f6:	e002      	b.n	800b6fe <DMA_CheckFifoParam+0xe6>
 800b6f8:	bf00      	nop
 800b6fa:	e000      	b.n	800b6fe <DMA_CheckFifoParam+0xe6>
 800b6fc:	bf00      	nop
 800b6fe:	7bfb      	ldrb	r3, [r7, #15]
 800b700:	4618      	mov	r0, r3
 800b702:	3714      	adds	r7, #20
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr

0800b70c <HAL_GPIO_Init>:
 800b70c:	b480      	push	{r7}
 800b70e:	b089      	sub	sp, #36	; 0x24
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
 800b714:	6039      	str	r1, [r7, #0]
 800b716:	2300      	movs	r3, #0
 800b718:	617b      	str	r3, [r7, #20]
 800b71a:	2300      	movs	r3, #0
 800b71c:	613b      	str	r3, [r7, #16]
 800b71e:	2300      	movs	r3, #0
 800b720:	61bb      	str	r3, [r7, #24]
 800b722:	2300      	movs	r3, #0
 800b724:	61fb      	str	r3, [r7, #28]
 800b726:	e16b      	b.n	800ba00 <HAL_GPIO_Init+0x2f4>
 800b728:	2201      	movs	r2, #1
 800b72a:	69fb      	ldr	r3, [r7, #28]
 800b72c:	fa02 f303 	lsl.w	r3, r2, r3
 800b730:	617b      	str	r3, [r7, #20]
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	697a      	ldr	r2, [r7, #20]
 800b738:	4013      	ands	r3, r2
 800b73a:	613b      	str	r3, [r7, #16]
 800b73c:	693a      	ldr	r2, [r7, #16]
 800b73e:	697b      	ldr	r3, [r7, #20]
 800b740:	429a      	cmp	r2, r3
 800b742:	f040 815a 	bne.w	800b9fa <HAL_GPIO_Init+0x2ee>
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	685b      	ldr	r3, [r3, #4]
 800b74a:	2b01      	cmp	r3, #1
 800b74c:	d00b      	beq.n	800b766 <HAL_GPIO_Init+0x5a>
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	685b      	ldr	r3, [r3, #4]
 800b752:	2b02      	cmp	r3, #2
 800b754:	d007      	beq.n	800b766 <HAL_GPIO_Init+0x5a>
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	685b      	ldr	r3, [r3, #4]
 800b75a:	2b11      	cmp	r3, #17
 800b75c:	d003      	beq.n	800b766 <HAL_GPIO_Init+0x5a>
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	685b      	ldr	r3, [r3, #4]
 800b762:	2b12      	cmp	r3, #18
 800b764:	d130      	bne.n	800b7c8 <HAL_GPIO_Init+0xbc>
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	689b      	ldr	r3, [r3, #8]
 800b76a:	61bb      	str	r3, [r7, #24]
 800b76c:	69fb      	ldr	r3, [r7, #28]
 800b76e:	005b      	lsls	r3, r3, #1
 800b770:	2203      	movs	r2, #3
 800b772:	fa02 f303 	lsl.w	r3, r2, r3
 800b776:	43db      	mvns	r3, r3
 800b778:	69ba      	ldr	r2, [r7, #24]
 800b77a:	4013      	ands	r3, r2
 800b77c:	61bb      	str	r3, [r7, #24]
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	68da      	ldr	r2, [r3, #12]
 800b782:	69fb      	ldr	r3, [r7, #28]
 800b784:	005b      	lsls	r3, r3, #1
 800b786:	fa02 f303 	lsl.w	r3, r2, r3
 800b78a:	69ba      	ldr	r2, [r7, #24]
 800b78c:	4313      	orrs	r3, r2
 800b78e:	61bb      	str	r3, [r7, #24]
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	69ba      	ldr	r2, [r7, #24]
 800b794:	609a      	str	r2, [r3, #8]
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	685b      	ldr	r3, [r3, #4]
 800b79a:	61bb      	str	r3, [r7, #24]
 800b79c:	2201      	movs	r2, #1
 800b79e:	69fb      	ldr	r3, [r7, #28]
 800b7a0:	fa02 f303 	lsl.w	r3, r2, r3
 800b7a4:	43db      	mvns	r3, r3
 800b7a6:	69ba      	ldr	r2, [r7, #24]
 800b7a8:	4013      	ands	r3, r2
 800b7aa:	61bb      	str	r3, [r7, #24]
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	685b      	ldr	r3, [r3, #4]
 800b7b0:	091b      	lsrs	r3, r3, #4
 800b7b2:	f003 0201 	and.w	r2, r3, #1
 800b7b6:	69fb      	ldr	r3, [r7, #28]
 800b7b8:	fa02 f303 	lsl.w	r3, r2, r3
 800b7bc:	69ba      	ldr	r2, [r7, #24]
 800b7be:	4313      	orrs	r3, r2
 800b7c0:	61bb      	str	r3, [r7, #24]
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	69ba      	ldr	r2, [r7, #24]
 800b7c6:	605a      	str	r2, [r3, #4]
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	68db      	ldr	r3, [r3, #12]
 800b7cc:	61bb      	str	r3, [r7, #24]
 800b7ce:	69fb      	ldr	r3, [r7, #28]
 800b7d0:	005b      	lsls	r3, r3, #1
 800b7d2:	2203      	movs	r2, #3
 800b7d4:	fa02 f303 	lsl.w	r3, r2, r3
 800b7d8:	43db      	mvns	r3, r3
 800b7da:	69ba      	ldr	r2, [r7, #24]
 800b7dc:	4013      	ands	r3, r2
 800b7de:	61bb      	str	r3, [r7, #24]
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	689a      	ldr	r2, [r3, #8]
 800b7e4:	69fb      	ldr	r3, [r7, #28]
 800b7e6:	005b      	lsls	r3, r3, #1
 800b7e8:	fa02 f303 	lsl.w	r3, r2, r3
 800b7ec:	69ba      	ldr	r2, [r7, #24]
 800b7ee:	4313      	orrs	r3, r2
 800b7f0:	61bb      	str	r3, [r7, #24]
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	69ba      	ldr	r2, [r7, #24]
 800b7f6:	60da      	str	r2, [r3, #12]
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	685b      	ldr	r3, [r3, #4]
 800b7fc:	2b02      	cmp	r3, #2
 800b7fe:	d003      	beq.n	800b808 <HAL_GPIO_Init+0xfc>
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	685b      	ldr	r3, [r3, #4]
 800b804:	2b12      	cmp	r3, #18
 800b806:	d123      	bne.n	800b850 <HAL_GPIO_Init+0x144>
 800b808:	69fb      	ldr	r3, [r7, #28]
 800b80a:	08da      	lsrs	r2, r3, #3
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	3208      	adds	r2, #8
 800b810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b814:	61bb      	str	r3, [r7, #24]
 800b816:	69fb      	ldr	r3, [r7, #28]
 800b818:	f003 0307 	and.w	r3, r3, #7
 800b81c:	009b      	lsls	r3, r3, #2
 800b81e:	220f      	movs	r2, #15
 800b820:	fa02 f303 	lsl.w	r3, r2, r3
 800b824:	43db      	mvns	r3, r3
 800b826:	69ba      	ldr	r2, [r7, #24]
 800b828:	4013      	ands	r3, r2
 800b82a:	61bb      	str	r3, [r7, #24]
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	691a      	ldr	r2, [r3, #16]
 800b830:	69fb      	ldr	r3, [r7, #28]
 800b832:	f003 0307 	and.w	r3, r3, #7
 800b836:	009b      	lsls	r3, r3, #2
 800b838:	fa02 f303 	lsl.w	r3, r2, r3
 800b83c:	69ba      	ldr	r2, [r7, #24]
 800b83e:	4313      	orrs	r3, r2
 800b840:	61bb      	str	r3, [r7, #24]
 800b842:	69fb      	ldr	r3, [r7, #28]
 800b844:	08da      	lsrs	r2, r3, #3
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	3208      	adds	r2, #8
 800b84a:	69b9      	ldr	r1, [r7, #24]
 800b84c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	61bb      	str	r3, [r7, #24]
 800b856:	69fb      	ldr	r3, [r7, #28]
 800b858:	005b      	lsls	r3, r3, #1
 800b85a:	2203      	movs	r2, #3
 800b85c:	fa02 f303 	lsl.w	r3, r2, r3
 800b860:	43db      	mvns	r3, r3
 800b862:	69ba      	ldr	r2, [r7, #24]
 800b864:	4013      	ands	r3, r2
 800b866:	61bb      	str	r3, [r7, #24]
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	685b      	ldr	r3, [r3, #4]
 800b86c:	f003 0203 	and.w	r2, r3, #3
 800b870:	69fb      	ldr	r3, [r7, #28]
 800b872:	005b      	lsls	r3, r3, #1
 800b874:	fa02 f303 	lsl.w	r3, r2, r3
 800b878:	69ba      	ldr	r2, [r7, #24]
 800b87a:	4313      	orrs	r3, r2
 800b87c:	61bb      	str	r3, [r7, #24]
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	69ba      	ldr	r2, [r7, #24]
 800b882:	601a      	str	r2, [r3, #0]
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	685b      	ldr	r3, [r3, #4]
 800b888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	f000 80b4 	beq.w	800b9fa <HAL_GPIO_Init+0x2ee>
 800b892:	2300      	movs	r3, #0
 800b894:	60fb      	str	r3, [r7, #12]
 800b896:	4b5f      	ldr	r3, [pc, #380]	; (800ba14 <HAL_GPIO_Init+0x308>)
 800b898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b89a:	4a5e      	ldr	r2, [pc, #376]	; (800ba14 <HAL_GPIO_Init+0x308>)
 800b89c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b8a0:	6453      	str	r3, [r2, #68]	; 0x44
 800b8a2:	4b5c      	ldr	r3, [pc, #368]	; (800ba14 <HAL_GPIO_Init+0x308>)
 800b8a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b8aa:	60fb      	str	r3, [r7, #12]
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	4a5a      	ldr	r2, [pc, #360]	; (800ba18 <HAL_GPIO_Init+0x30c>)
 800b8b0:	69fb      	ldr	r3, [r7, #28]
 800b8b2:	089b      	lsrs	r3, r3, #2
 800b8b4:	3302      	adds	r3, #2
 800b8b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b8ba:	61bb      	str	r3, [r7, #24]
 800b8bc:	69fb      	ldr	r3, [r7, #28]
 800b8be:	f003 0303 	and.w	r3, r3, #3
 800b8c2:	009b      	lsls	r3, r3, #2
 800b8c4:	220f      	movs	r2, #15
 800b8c6:	fa02 f303 	lsl.w	r3, r2, r3
 800b8ca:	43db      	mvns	r3, r3
 800b8cc:	69ba      	ldr	r2, [r7, #24]
 800b8ce:	4013      	ands	r3, r2
 800b8d0:	61bb      	str	r3, [r7, #24]
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	4a51      	ldr	r2, [pc, #324]	; (800ba1c <HAL_GPIO_Init+0x310>)
 800b8d6:	4293      	cmp	r3, r2
 800b8d8:	d02b      	beq.n	800b932 <HAL_GPIO_Init+0x226>
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	4a50      	ldr	r2, [pc, #320]	; (800ba20 <HAL_GPIO_Init+0x314>)
 800b8de:	4293      	cmp	r3, r2
 800b8e0:	d025      	beq.n	800b92e <HAL_GPIO_Init+0x222>
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	4a4f      	ldr	r2, [pc, #316]	; (800ba24 <HAL_GPIO_Init+0x318>)
 800b8e6:	4293      	cmp	r3, r2
 800b8e8:	d01f      	beq.n	800b92a <HAL_GPIO_Init+0x21e>
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	4a4e      	ldr	r2, [pc, #312]	; (800ba28 <HAL_GPIO_Init+0x31c>)
 800b8ee:	4293      	cmp	r3, r2
 800b8f0:	d019      	beq.n	800b926 <HAL_GPIO_Init+0x21a>
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	4a4d      	ldr	r2, [pc, #308]	; (800ba2c <HAL_GPIO_Init+0x320>)
 800b8f6:	4293      	cmp	r3, r2
 800b8f8:	d013      	beq.n	800b922 <HAL_GPIO_Init+0x216>
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	4a4c      	ldr	r2, [pc, #304]	; (800ba30 <HAL_GPIO_Init+0x324>)
 800b8fe:	4293      	cmp	r3, r2
 800b900:	d00d      	beq.n	800b91e <HAL_GPIO_Init+0x212>
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	4a4b      	ldr	r2, [pc, #300]	; (800ba34 <HAL_GPIO_Init+0x328>)
 800b906:	4293      	cmp	r3, r2
 800b908:	d007      	beq.n	800b91a <HAL_GPIO_Init+0x20e>
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	4a4a      	ldr	r2, [pc, #296]	; (800ba38 <HAL_GPIO_Init+0x32c>)
 800b90e:	4293      	cmp	r3, r2
 800b910:	d101      	bne.n	800b916 <HAL_GPIO_Init+0x20a>
 800b912:	2307      	movs	r3, #7
 800b914:	e00e      	b.n	800b934 <HAL_GPIO_Init+0x228>
 800b916:	2308      	movs	r3, #8
 800b918:	e00c      	b.n	800b934 <HAL_GPIO_Init+0x228>
 800b91a:	2306      	movs	r3, #6
 800b91c:	e00a      	b.n	800b934 <HAL_GPIO_Init+0x228>
 800b91e:	2305      	movs	r3, #5
 800b920:	e008      	b.n	800b934 <HAL_GPIO_Init+0x228>
 800b922:	2304      	movs	r3, #4
 800b924:	e006      	b.n	800b934 <HAL_GPIO_Init+0x228>
 800b926:	2303      	movs	r3, #3
 800b928:	e004      	b.n	800b934 <HAL_GPIO_Init+0x228>
 800b92a:	2302      	movs	r3, #2
 800b92c:	e002      	b.n	800b934 <HAL_GPIO_Init+0x228>
 800b92e:	2301      	movs	r3, #1
 800b930:	e000      	b.n	800b934 <HAL_GPIO_Init+0x228>
 800b932:	2300      	movs	r3, #0
 800b934:	69fa      	ldr	r2, [r7, #28]
 800b936:	f002 0203 	and.w	r2, r2, #3
 800b93a:	0092      	lsls	r2, r2, #2
 800b93c:	4093      	lsls	r3, r2
 800b93e:	69ba      	ldr	r2, [r7, #24]
 800b940:	4313      	orrs	r3, r2
 800b942:	61bb      	str	r3, [r7, #24]
 800b944:	4934      	ldr	r1, [pc, #208]	; (800ba18 <HAL_GPIO_Init+0x30c>)
 800b946:	69fb      	ldr	r3, [r7, #28]
 800b948:	089b      	lsrs	r3, r3, #2
 800b94a:	3302      	adds	r3, #2
 800b94c:	69ba      	ldr	r2, [r7, #24]
 800b94e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b952:	4b3a      	ldr	r3, [pc, #232]	; (800ba3c <HAL_GPIO_Init+0x330>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	61bb      	str	r3, [r7, #24]
 800b958:	693b      	ldr	r3, [r7, #16]
 800b95a:	43db      	mvns	r3, r3
 800b95c:	69ba      	ldr	r2, [r7, #24]
 800b95e:	4013      	ands	r3, r2
 800b960:	61bb      	str	r3, [r7, #24]
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	685b      	ldr	r3, [r3, #4]
 800b966:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d003      	beq.n	800b976 <HAL_GPIO_Init+0x26a>
 800b96e:	69ba      	ldr	r2, [r7, #24]
 800b970:	693b      	ldr	r3, [r7, #16]
 800b972:	4313      	orrs	r3, r2
 800b974:	61bb      	str	r3, [r7, #24]
 800b976:	4a31      	ldr	r2, [pc, #196]	; (800ba3c <HAL_GPIO_Init+0x330>)
 800b978:	69bb      	ldr	r3, [r7, #24]
 800b97a:	6013      	str	r3, [r2, #0]
 800b97c:	4b2f      	ldr	r3, [pc, #188]	; (800ba3c <HAL_GPIO_Init+0x330>)
 800b97e:	685b      	ldr	r3, [r3, #4]
 800b980:	61bb      	str	r3, [r7, #24]
 800b982:	693b      	ldr	r3, [r7, #16]
 800b984:	43db      	mvns	r3, r3
 800b986:	69ba      	ldr	r2, [r7, #24]
 800b988:	4013      	ands	r3, r2
 800b98a:	61bb      	str	r3, [r7, #24]
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	685b      	ldr	r3, [r3, #4]
 800b990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b994:	2b00      	cmp	r3, #0
 800b996:	d003      	beq.n	800b9a0 <HAL_GPIO_Init+0x294>
 800b998:	69ba      	ldr	r2, [r7, #24]
 800b99a:	693b      	ldr	r3, [r7, #16]
 800b99c:	4313      	orrs	r3, r2
 800b99e:	61bb      	str	r3, [r7, #24]
 800b9a0:	4a26      	ldr	r2, [pc, #152]	; (800ba3c <HAL_GPIO_Init+0x330>)
 800b9a2:	69bb      	ldr	r3, [r7, #24]
 800b9a4:	6053      	str	r3, [r2, #4]
 800b9a6:	4b25      	ldr	r3, [pc, #148]	; (800ba3c <HAL_GPIO_Init+0x330>)
 800b9a8:	689b      	ldr	r3, [r3, #8]
 800b9aa:	61bb      	str	r3, [r7, #24]
 800b9ac:	693b      	ldr	r3, [r7, #16]
 800b9ae:	43db      	mvns	r3, r3
 800b9b0:	69ba      	ldr	r2, [r7, #24]
 800b9b2:	4013      	ands	r3, r2
 800b9b4:	61bb      	str	r3, [r7, #24]
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	685b      	ldr	r3, [r3, #4]
 800b9ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d003      	beq.n	800b9ca <HAL_GPIO_Init+0x2be>
 800b9c2:	69ba      	ldr	r2, [r7, #24]
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	4313      	orrs	r3, r2
 800b9c8:	61bb      	str	r3, [r7, #24]
 800b9ca:	4a1c      	ldr	r2, [pc, #112]	; (800ba3c <HAL_GPIO_Init+0x330>)
 800b9cc:	69bb      	ldr	r3, [r7, #24]
 800b9ce:	6093      	str	r3, [r2, #8]
 800b9d0:	4b1a      	ldr	r3, [pc, #104]	; (800ba3c <HAL_GPIO_Init+0x330>)
 800b9d2:	68db      	ldr	r3, [r3, #12]
 800b9d4:	61bb      	str	r3, [r7, #24]
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	43db      	mvns	r3, r3
 800b9da:	69ba      	ldr	r2, [r7, #24]
 800b9dc:	4013      	ands	r3, r2
 800b9de:	61bb      	str	r3, [r7, #24]
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	685b      	ldr	r3, [r3, #4]
 800b9e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d003      	beq.n	800b9f4 <HAL_GPIO_Init+0x2e8>
 800b9ec:	69ba      	ldr	r2, [r7, #24]
 800b9ee:	693b      	ldr	r3, [r7, #16]
 800b9f0:	4313      	orrs	r3, r2
 800b9f2:	61bb      	str	r3, [r7, #24]
 800b9f4:	4a11      	ldr	r2, [pc, #68]	; (800ba3c <HAL_GPIO_Init+0x330>)
 800b9f6:	69bb      	ldr	r3, [r7, #24]
 800b9f8:	60d3      	str	r3, [r2, #12]
 800b9fa:	69fb      	ldr	r3, [r7, #28]
 800b9fc:	3301      	adds	r3, #1
 800b9fe:	61fb      	str	r3, [r7, #28]
 800ba00:	69fb      	ldr	r3, [r7, #28]
 800ba02:	2b0f      	cmp	r3, #15
 800ba04:	f67f ae90 	bls.w	800b728 <HAL_GPIO_Init+0x1c>
 800ba08:	bf00      	nop
 800ba0a:	3724      	adds	r7, #36	; 0x24
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba12:	4770      	bx	lr
 800ba14:	40023800 	.word	0x40023800
 800ba18:	40013800 	.word	0x40013800
 800ba1c:	40020000 	.word	0x40020000
 800ba20:	40020400 	.word	0x40020400
 800ba24:	40020800 	.word	0x40020800
 800ba28:	40020c00 	.word	0x40020c00
 800ba2c:	40021000 	.word	0x40021000
 800ba30:	40021400 	.word	0x40021400
 800ba34:	40021800 	.word	0x40021800
 800ba38:	40021c00 	.word	0x40021c00
 800ba3c:	40013c00 	.word	0x40013c00

0800ba40 <HAL_GPIO_WritePin>:
 800ba40:	b480      	push	{r7}
 800ba42:	b083      	sub	sp, #12
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
 800ba48:	460b      	mov	r3, r1
 800ba4a:	807b      	strh	r3, [r7, #2]
 800ba4c:	4613      	mov	r3, r2
 800ba4e:	707b      	strb	r3, [r7, #1]
 800ba50:	787b      	ldrb	r3, [r7, #1]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d003      	beq.n	800ba5e <HAL_GPIO_WritePin+0x1e>
 800ba56:	887a      	ldrh	r2, [r7, #2]
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	619a      	str	r2, [r3, #24]
 800ba5c:	e003      	b.n	800ba66 <HAL_GPIO_WritePin+0x26>
 800ba5e:	887b      	ldrh	r3, [r7, #2]
 800ba60:	041a      	lsls	r2, r3, #16
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	619a      	str	r2, [r3, #24]
 800ba66:	bf00      	nop
 800ba68:	370c      	adds	r7, #12
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba70:	4770      	bx	lr
	...

0800ba74 <HAL_NOR_Init>:
  * @param  Timing pointer to NOR control timing structure 
  * @param  ExtTiming pointer to NOR extended mode timing structure    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b084      	sub	sp, #16
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	60f8      	str	r0, [r7, #12]
 800ba7c:	60b9      	str	r1, [r7, #8]
 800ba7e:	607a      	str	r2, [r7, #4]
  /* Check the NOR handle parameter */
  if(hnor == NULL)
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d101      	bne.n	800ba8a <HAL_NOR_Init+0x16>
  {
     return HAL_ERROR;
 800ba86:	2301      	movs	r3, #1
 800ba88:	e043      	b.n	800bb12 <HAL_NOR_Init+0x9e>
  }
  
  if(hnor->State == HAL_NOR_STATE_RESET)
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800ba90:	b2db      	uxtb	r3, r3
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d106      	bne.n	800baa4 <HAL_NOR_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	2200      	movs	r2, #0
 800ba9a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 800ba9e:	68f8      	ldr	r0, [r7, #12]
 800baa0:	f7f7 f952 	bl	8002d48 <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }
  
  /* Initialize NOR control Interface */
  FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	681a      	ldr	r2, [r3, #0]
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	3308      	adds	r3, #8
 800baac:	4619      	mov	r1, r3
 800baae:	4610      	mov	r0, r2
 800bab0:	f003 f810 	bl	800ead4 <FSMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank); 
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	6818      	ldr	r0, [r3, #0]
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	689b      	ldr	r3, [r3, #8]
 800babc:	461a      	mov	r2, r3
 800babe:	68b9      	ldr	r1, [r7, #8]
 800bac0:	f003 f85a 	bl	800eb78 <FSMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	6858      	ldr	r0, [r3, #4]
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	689a      	ldr	r2, [r3, #8]
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bad0:	6879      	ldr	r1, [r7, #4]
 800bad2:	f003 f88f 	bl	800ebf4 <FSMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	68fa      	ldr	r2, [r7, #12]
 800badc:	6892      	ldr	r2, [r2, #8]
 800bade:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	68fa      	ldr	r2, [r7, #12]
 800bae8:	6892      	ldr	r2, [r2, #8]
 800baea:	f041 0101 	orr.w	r1, r1, #1
 800baee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	695b      	ldr	r3, [r3, #20]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d103      	bne.n	800bb02 <HAL_NOR_Init+0x8e>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 800bafa:	4b08      	ldr	r3, [pc, #32]	; (800bb1c <HAL_NOR_Init+0xa8>)
 800bafc:	2200      	movs	r2, #0
 800bafe:	601a      	str	r2, [r3, #0]
 800bb00:	e002      	b.n	800bb08 <HAL_NOR_Init+0x94>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 800bb02:	4b06      	ldr	r3, [pc, #24]	; (800bb1c <HAL_NOR_Init+0xa8>)
 800bb04:	2201      	movs	r2, #1
 800bb06:	601a      	str	r2, [r3, #0]
  }

  /* Check the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY; 
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	2201      	movs	r2, #1
 800bb0c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  return HAL_OK;
 800bb10:	2300      	movs	r3, #0
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	3710      	adds	r7, #16
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}
 800bb1a:	bf00      	nop
 800bb1c:	20001458 	.word	0x20001458

0800bb20 <HAL_PCD_Init>:
 800bb20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb22:	b08f      	sub	sp, #60	; 0x3c
 800bb24:	af0a      	add	r7, sp, #40	; 0x28
 800bb26:	6078      	str	r0, [r7, #4]
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d101      	bne.n	800bb32 <HAL_PCD_Init+0x12>
 800bb2e:	2301      	movs	r3, #1
 800bb30:	e10f      	b.n	800bd52 <HAL_PCD_Init+0x232>
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	60bb      	str	r3, [r7, #8]
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800bb3e:	b2db      	uxtb	r3, r3
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d106      	bne.n	800bb52 <HAL_PCD_Init+0x32>
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2200      	movs	r2, #0
 800bb48:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f009 fa75 	bl	801503c <HAL_PCD_MspInit>
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	2203      	movs	r2, #3
 800bb56:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
 800bb5a:	68bb      	ldr	r3, [r7, #8]
 800bb5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d102      	bne.n	800bb6c <HAL_PCD_Init+0x4c>
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2200      	movs	r2, #0
 800bb6a:	611a      	str	r2, [r3, #16]
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	4618      	mov	r0, r3
 800bb72:	f003 f994 	bl	800ee9e <USB_DisableGlobalInt>
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	603b      	str	r3, [r7, #0]
 800bb7c:	687e      	ldr	r6, [r7, #4]
 800bb7e:	466d      	mov	r5, sp
 800bb80:	f106 0410 	add.w	r4, r6, #16
 800bb84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bb86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bb88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bb8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bb8c:	e894 0003 	ldmia.w	r4, {r0, r1}
 800bb90:	e885 0003 	stmia.w	r5, {r0, r1}
 800bb94:	1d33      	adds	r3, r6, #4
 800bb96:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bb98:	6838      	ldr	r0, [r7, #0]
 800bb9a:	f003 f86b 	bl	800ec74 <USB_CoreInit>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d005      	beq.n	800bbb0 <HAL_PCD_Init+0x90>
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2202      	movs	r2, #2
 800bba8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
 800bbac:	2301      	movs	r3, #1
 800bbae:	e0d0      	b.n	800bd52 <HAL_PCD_Init+0x232>
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	2100      	movs	r1, #0
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f003 f982 	bl	800eec0 <USB_SetCurrentMode>
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	73fb      	strb	r3, [r7, #15]
 800bbc0:	e04a      	b.n	800bc58 <HAL_PCD_Init+0x138>
 800bbc2:	7bfa      	ldrb	r2, [r7, #15]
 800bbc4:	6879      	ldr	r1, [r7, #4]
 800bbc6:	4613      	mov	r3, r2
 800bbc8:	00db      	lsls	r3, r3, #3
 800bbca:	1a9b      	subs	r3, r3, r2
 800bbcc:	009b      	lsls	r3, r3, #2
 800bbce:	440b      	add	r3, r1
 800bbd0:	333d      	adds	r3, #61	; 0x3d
 800bbd2:	2201      	movs	r2, #1
 800bbd4:	701a      	strb	r2, [r3, #0]
 800bbd6:	7bfa      	ldrb	r2, [r7, #15]
 800bbd8:	6879      	ldr	r1, [r7, #4]
 800bbda:	4613      	mov	r3, r2
 800bbdc:	00db      	lsls	r3, r3, #3
 800bbde:	1a9b      	subs	r3, r3, r2
 800bbe0:	009b      	lsls	r3, r3, #2
 800bbe2:	440b      	add	r3, r1
 800bbe4:	333c      	adds	r3, #60	; 0x3c
 800bbe6:	7bfa      	ldrb	r2, [r7, #15]
 800bbe8:	701a      	strb	r2, [r3, #0]
 800bbea:	7bfa      	ldrb	r2, [r7, #15]
 800bbec:	7bfb      	ldrb	r3, [r7, #15]
 800bbee:	b298      	uxth	r0, r3
 800bbf0:	6879      	ldr	r1, [r7, #4]
 800bbf2:	4613      	mov	r3, r2
 800bbf4:	00db      	lsls	r3, r3, #3
 800bbf6:	1a9b      	subs	r3, r3, r2
 800bbf8:	009b      	lsls	r3, r3, #2
 800bbfa:	440b      	add	r3, r1
 800bbfc:	3342      	adds	r3, #66	; 0x42
 800bbfe:	4602      	mov	r2, r0
 800bc00:	801a      	strh	r2, [r3, #0]
 800bc02:	7bfa      	ldrb	r2, [r7, #15]
 800bc04:	6879      	ldr	r1, [r7, #4]
 800bc06:	4613      	mov	r3, r2
 800bc08:	00db      	lsls	r3, r3, #3
 800bc0a:	1a9b      	subs	r3, r3, r2
 800bc0c:	009b      	lsls	r3, r3, #2
 800bc0e:	440b      	add	r3, r1
 800bc10:	333f      	adds	r3, #63	; 0x3f
 800bc12:	2200      	movs	r2, #0
 800bc14:	701a      	strb	r2, [r3, #0]
 800bc16:	7bfa      	ldrb	r2, [r7, #15]
 800bc18:	6879      	ldr	r1, [r7, #4]
 800bc1a:	4613      	mov	r3, r2
 800bc1c:	00db      	lsls	r3, r3, #3
 800bc1e:	1a9b      	subs	r3, r3, r2
 800bc20:	009b      	lsls	r3, r3, #2
 800bc22:	440b      	add	r3, r1
 800bc24:	3344      	adds	r3, #68	; 0x44
 800bc26:	2200      	movs	r2, #0
 800bc28:	601a      	str	r2, [r3, #0]
 800bc2a:	7bfa      	ldrb	r2, [r7, #15]
 800bc2c:	6879      	ldr	r1, [r7, #4]
 800bc2e:	4613      	mov	r3, r2
 800bc30:	00db      	lsls	r3, r3, #3
 800bc32:	1a9b      	subs	r3, r3, r2
 800bc34:	009b      	lsls	r3, r3, #2
 800bc36:	440b      	add	r3, r1
 800bc38:	3348      	adds	r3, #72	; 0x48
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	601a      	str	r2, [r3, #0]
 800bc3e:	7bfa      	ldrb	r2, [r7, #15]
 800bc40:	6879      	ldr	r1, [r7, #4]
 800bc42:	4613      	mov	r3, r2
 800bc44:	00db      	lsls	r3, r3, #3
 800bc46:	1a9b      	subs	r3, r3, r2
 800bc48:	009b      	lsls	r3, r3, #2
 800bc4a:	440b      	add	r3, r1
 800bc4c:	3350      	adds	r3, #80	; 0x50
 800bc4e:	2200      	movs	r2, #0
 800bc50:	601a      	str	r2, [r3, #0]
 800bc52:	7bfb      	ldrb	r3, [r7, #15]
 800bc54:	3301      	adds	r3, #1
 800bc56:	73fb      	strb	r3, [r7, #15]
 800bc58:	7bfa      	ldrb	r2, [r7, #15]
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	685b      	ldr	r3, [r3, #4]
 800bc5e:	429a      	cmp	r2, r3
 800bc60:	d3af      	bcc.n	800bbc2 <HAL_PCD_Init+0xa2>
 800bc62:	2300      	movs	r3, #0
 800bc64:	73fb      	strb	r3, [r7, #15]
 800bc66:	e044      	b.n	800bcf2 <HAL_PCD_Init+0x1d2>
 800bc68:	7bfa      	ldrb	r2, [r7, #15]
 800bc6a:	6879      	ldr	r1, [r7, #4]
 800bc6c:	4613      	mov	r3, r2
 800bc6e:	00db      	lsls	r3, r3, #3
 800bc70:	1a9b      	subs	r3, r3, r2
 800bc72:	009b      	lsls	r3, r3, #2
 800bc74:	440b      	add	r3, r1
 800bc76:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	701a      	strb	r2, [r3, #0]
 800bc7e:	7bfa      	ldrb	r2, [r7, #15]
 800bc80:	6879      	ldr	r1, [r7, #4]
 800bc82:	4613      	mov	r3, r2
 800bc84:	00db      	lsls	r3, r3, #3
 800bc86:	1a9b      	subs	r3, r3, r2
 800bc88:	009b      	lsls	r3, r3, #2
 800bc8a:	440b      	add	r3, r1
 800bc8c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800bc90:	7bfa      	ldrb	r2, [r7, #15]
 800bc92:	701a      	strb	r2, [r3, #0]
 800bc94:	7bfa      	ldrb	r2, [r7, #15]
 800bc96:	6879      	ldr	r1, [r7, #4]
 800bc98:	4613      	mov	r3, r2
 800bc9a:	00db      	lsls	r3, r3, #3
 800bc9c:	1a9b      	subs	r3, r3, r2
 800bc9e:	009b      	lsls	r3, r3, #2
 800bca0:	440b      	add	r3, r1
 800bca2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800bca6:	2200      	movs	r2, #0
 800bca8:	701a      	strb	r2, [r3, #0]
 800bcaa:	7bfa      	ldrb	r2, [r7, #15]
 800bcac:	6879      	ldr	r1, [r7, #4]
 800bcae:	4613      	mov	r3, r2
 800bcb0:	00db      	lsls	r3, r3, #3
 800bcb2:	1a9b      	subs	r3, r3, r2
 800bcb4:	009b      	lsls	r3, r3, #2
 800bcb6:	440b      	add	r3, r1
 800bcb8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	601a      	str	r2, [r3, #0]
 800bcc0:	7bfa      	ldrb	r2, [r7, #15]
 800bcc2:	6879      	ldr	r1, [r7, #4]
 800bcc4:	4613      	mov	r3, r2
 800bcc6:	00db      	lsls	r3, r3, #3
 800bcc8:	1a9b      	subs	r3, r3, r2
 800bcca:	009b      	lsls	r3, r3, #2
 800bccc:	440b      	add	r3, r1
 800bcce:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	601a      	str	r2, [r3, #0]
 800bcd6:	7bfa      	ldrb	r2, [r7, #15]
 800bcd8:	6879      	ldr	r1, [r7, #4]
 800bcda:	4613      	mov	r3, r2
 800bcdc:	00db      	lsls	r3, r3, #3
 800bcde:	1a9b      	subs	r3, r3, r2
 800bce0:	009b      	lsls	r3, r3, #2
 800bce2:	440b      	add	r3, r1
 800bce4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800bce8:	2200      	movs	r2, #0
 800bcea:	601a      	str	r2, [r3, #0]
 800bcec:	7bfb      	ldrb	r3, [r7, #15]
 800bcee:	3301      	adds	r3, #1
 800bcf0:	73fb      	strb	r3, [r7, #15]
 800bcf2:	7bfa      	ldrb	r2, [r7, #15]
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	685b      	ldr	r3, [r3, #4]
 800bcf8:	429a      	cmp	r2, r3
 800bcfa:	d3b5      	bcc.n	800bc68 <HAL_PCD_Init+0x148>
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	603b      	str	r3, [r7, #0]
 800bd02:	687e      	ldr	r6, [r7, #4]
 800bd04:	466d      	mov	r5, sp
 800bd06:	f106 0410 	add.w	r4, r6, #16
 800bd0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bd0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bd0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bd10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bd12:	e894 0003 	ldmia.w	r4, {r0, r1}
 800bd16:	e885 0003 	stmia.w	r5, {r0, r1}
 800bd1a:	1d33      	adds	r3, r6, #4
 800bd1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bd1e:	6838      	ldr	r0, [r7, #0]
 800bd20:	f003 f8f8 	bl	800ef14 <USB_DevInit>
 800bd24:	4603      	mov	r3, r0
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d005      	beq.n	800bd36 <HAL_PCD_Init+0x216>
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2202      	movs	r2, #2
 800bd2e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
 800bd32:	2301      	movs	r3, #1
 800bd34:	e00d      	b.n	800bd52 <HAL_PCD_Init+0x232>
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2200      	movs	r2, #0
 800bd3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2201      	movs	r2, #1
 800bd42:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f004 f8ed 	bl	800ff2a <USB_DevDisconnect>
 800bd50:	2300      	movs	r3, #0
 800bd52:	4618      	mov	r0, r3
 800bd54:	3714      	adds	r7, #20
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bd5a <HAL_PCD_Start>:
 800bd5a:	b580      	push	{r7, lr}
 800bd5c:	b084      	sub	sp, #16
 800bd5e:	af00      	add	r7, sp, #0
 800bd60:	6078      	str	r0, [r7, #4]
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	60fb      	str	r3, [r7, #12]
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800bd6e:	2b01      	cmp	r3, #1
 800bd70:	d101      	bne.n	800bd76 <HAL_PCD_Start+0x1c>
 800bd72:	2302      	movs	r3, #2
 800bd74:	e020      	b.n	800bdb8 <HAL_PCD_Start+0x5e>
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2201      	movs	r2, #1
 800bd7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd82:	2b01      	cmp	r3, #1
 800bd84:	d109      	bne.n	800bd9a <HAL_PCD_Start+0x40>
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	699b      	ldr	r3, [r3, #24]
 800bd8a:	2b01      	cmp	r3, #1
 800bd8c:	d005      	beq.n	800bd9a <HAL_PCD_Start+0x40>
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd92:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	639a      	str	r2, [r3, #56]	; 0x38
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f004 f8ab 	bl	800fefa <USB_DevConnect>
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	4618      	mov	r0, r3
 800bdaa:	f003 f867 	bl	800ee7c <USB_EnableGlobalInt>
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3710      	adds	r7, #16
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}

0800bdc0 <HAL_PCD_IRQHandler>:
 800bdc0:	b590      	push	{r4, r7, lr}
 800bdc2:	b08d      	sub	sp, #52	; 0x34
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	623b      	str	r3, [r7, #32]
 800bdce:	6a3b      	ldr	r3, [r7, #32]
 800bdd0:	61fb      	str	r3, [r7, #28]
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f004 f952 	bl	8010080 <USB_GetMode>
 800bddc:	4603      	mov	r3, r0
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	f040 838e 	bne.w	800c500 <HAL_PCD_IRQHandler+0x740>
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	4618      	mov	r0, r3
 800bdea:	f004 f8b6 	bl	800ff5a <USB_ReadInterrupts>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	f000 8384 	beq.w	800c4fe <HAL_PCD_IRQHandler+0x73e>
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	f004 f8ad 	bl	800ff5a <USB_ReadInterrupts>
 800be00:	4603      	mov	r3, r0
 800be02:	f003 0302 	and.w	r3, r3, #2
 800be06:	2b02      	cmp	r3, #2
 800be08:	d107      	bne.n	800be1a <HAL_PCD_IRQHandler+0x5a>
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	695a      	ldr	r2, [r3, #20]
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	f002 0202 	and.w	r2, r2, #2
 800be18:	615a      	str	r2, [r3, #20]
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	4618      	mov	r0, r3
 800be20:	f004 f89b 	bl	800ff5a <USB_ReadInterrupts>
 800be24:	4603      	mov	r3, r0
 800be26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800be2a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800be2e:	d17b      	bne.n	800bf28 <HAL_PCD_IRQHandler+0x168>
 800be30:	2300      	movs	r3, #0
 800be32:	627b      	str	r3, [r7, #36]	; 0x24
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	4618      	mov	r0, r3
 800be3a:	f004 f8a1 	bl	800ff80 <USB_ReadDevAllOutEpInterrupt>
 800be3e:	62b8      	str	r0, [r7, #40]	; 0x28
 800be40:	e06f      	b.n	800bf22 <HAL_PCD_IRQHandler+0x162>
 800be42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be44:	f003 0301 	and.w	r3, r3, #1
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d064      	beq.n	800bf16 <HAL_PCD_IRQHandler+0x156>
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be52:	b2d2      	uxtb	r2, r2
 800be54:	4611      	mov	r1, r2
 800be56:	4618      	mov	r0, r3
 800be58:	f004 f8c6 	bl	800ffe8 <USB_ReadDevOutEPInterrupt>
 800be5c:	61b8      	str	r0, [r7, #24]
 800be5e:	69bb      	ldr	r3, [r7, #24]
 800be60:	f003 0301 	and.w	r3, r3, #1
 800be64:	2b00      	cmp	r3, #0
 800be66:	d00c      	beq.n	800be82 <HAL_PCD_IRQHandler+0xc2>
 800be68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be6a:	015a      	lsls	r2, r3, #5
 800be6c:	69fb      	ldr	r3, [r7, #28]
 800be6e:	4413      	add	r3, r2
 800be70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be74:	461a      	mov	r2, r3
 800be76:	2301      	movs	r3, #1
 800be78:	6093      	str	r3, [r2, #8]
 800be7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	f000 fe0d 	bl	800ca9c <PCD_EP_OutXfrComplete_int>
 800be82:	69bb      	ldr	r3, [r7, #24]
 800be84:	f003 0308 	and.w	r3, r3, #8
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d00c      	beq.n	800bea6 <HAL_PCD_IRQHandler+0xe6>
 800be8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	f000 ff0c 	bl	800ccac <PCD_EP_OutSetupPacket_int>
 800be94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be96:	015a      	lsls	r2, r3, #5
 800be98:	69fb      	ldr	r3, [r7, #28]
 800be9a:	4413      	add	r3, r2
 800be9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bea0:	461a      	mov	r2, r3
 800bea2:	2308      	movs	r3, #8
 800bea4:	6093      	str	r3, [r2, #8]
 800bea6:	69bb      	ldr	r3, [r7, #24]
 800bea8:	f003 0310 	and.w	r3, r3, #16
 800beac:	2b00      	cmp	r3, #0
 800beae:	d008      	beq.n	800bec2 <HAL_PCD_IRQHandler+0x102>
 800beb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beb2:	015a      	lsls	r2, r3, #5
 800beb4:	69fb      	ldr	r3, [r7, #28]
 800beb6:	4413      	add	r3, r2
 800beb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bebc:	461a      	mov	r2, r3
 800bebe:	2310      	movs	r3, #16
 800bec0:	6093      	str	r3, [r2, #8]
 800bec2:	69bb      	ldr	r3, [r7, #24]
 800bec4:	f003 0320 	and.w	r3, r3, #32
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d015      	beq.n	800bef8 <HAL_PCD_IRQHandler+0x138>
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	691b      	ldr	r3, [r3, #16]
 800bed0:	2b01      	cmp	r3, #1
 800bed2:	d108      	bne.n	800bee6 <HAL_PCD_IRQHandler+0x126>
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	6818      	ldr	r0, [r3, #0]
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800bede:	461a      	mov	r2, r3
 800bee0:	2101      	movs	r1, #1
 800bee2:	f004 f911 	bl	8010108 <USB_EP0_OutStart>
 800bee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee8:	015a      	lsls	r2, r3, #5
 800beea:	69fb      	ldr	r3, [r7, #28]
 800beec:	4413      	add	r3, r2
 800beee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bef2:	461a      	mov	r2, r3
 800bef4:	2320      	movs	r3, #32
 800bef6:	6093      	str	r3, [r2, #8]
 800bef8:	69bb      	ldr	r3, [r7, #24]
 800befa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d009      	beq.n	800bf16 <HAL_PCD_IRQHandler+0x156>
 800bf02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf04:	015a      	lsls	r2, r3, #5
 800bf06:	69fb      	ldr	r3, [r7, #28]
 800bf08:	4413      	add	r3, r2
 800bf0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf0e:	461a      	mov	r2, r3
 800bf10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bf14:	6093      	str	r3, [r2, #8]
 800bf16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf18:	3301      	adds	r3, #1
 800bf1a:	627b      	str	r3, [r7, #36]	; 0x24
 800bf1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf1e:	085b      	lsrs	r3, r3, #1
 800bf20:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d18c      	bne.n	800be42 <HAL_PCD_IRQHandler+0x82>
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	f004 f814 	bl	800ff5a <USB_ReadInterrupts>
 800bf32:	4603      	mov	r3, r0
 800bf34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bf38:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bf3c:	f040 80c4 	bne.w	800c0c8 <HAL_PCD_IRQHandler+0x308>
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	4618      	mov	r0, r3
 800bf46:	f004 f835 	bl	800ffb4 <USB_ReadDevAllInEpInterrupt>
 800bf4a:	62b8      	str	r0, [r7, #40]	; 0x28
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	627b      	str	r3, [r7, #36]	; 0x24
 800bf50:	e0b6      	b.n	800c0c0 <HAL_PCD_IRQHandler+0x300>
 800bf52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf54:	f003 0301 	and.w	r3, r3, #1
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	f000 80ab 	beq.w	800c0b4 <HAL_PCD_IRQHandler+0x2f4>
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf64:	b2d2      	uxtb	r2, r2
 800bf66:	4611      	mov	r1, r2
 800bf68:	4618      	mov	r0, r3
 800bf6a:	f004 f85b 	bl	8010024 <USB_ReadDevInEPInterrupt>
 800bf6e:	61b8      	str	r0, [r7, #24]
 800bf70:	69bb      	ldr	r3, [r7, #24]
 800bf72:	f003 0301 	and.w	r3, r3, #1
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d05b      	beq.n	800c032 <HAL_PCD_IRQHandler+0x272>
 800bf7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf7c:	f003 030f 	and.w	r3, r3, #15
 800bf80:	2201      	movs	r2, #1
 800bf82:	fa02 f303 	lsl.w	r3, r2, r3
 800bf86:	617b      	str	r3, [r7, #20]
 800bf88:	69fb      	ldr	r3, [r7, #28]
 800bf8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bf90:	697b      	ldr	r3, [r7, #20]
 800bf92:	43db      	mvns	r3, r3
 800bf94:	69f9      	ldr	r1, [r7, #28]
 800bf96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bf9a:	4013      	ands	r3, r2
 800bf9c:	634b      	str	r3, [r1, #52]	; 0x34
 800bf9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfa0:	015a      	lsls	r2, r3, #5
 800bfa2:	69fb      	ldr	r3, [r7, #28]
 800bfa4:	4413      	add	r3, r2
 800bfa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfaa:	461a      	mov	r2, r3
 800bfac:	2301      	movs	r3, #1
 800bfae:	6093      	str	r3, [r2, #8]
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	691b      	ldr	r3, [r3, #16]
 800bfb4:	2b01      	cmp	r3, #1
 800bfb6:	d11b      	bne.n	800bff0 <HAL_PCD_IRQHandler+0x230>
 800bfb8:	6879      	ldr	r1, [r7, #4]
 800bfba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfbc:	4613      	mov	r3, r2
 800bfbe:	00db      	lsls	r3, r3, #3
 800bfc0:	1a9b      	subs	r3, r3, r2
 800bfc2:	009b      	lsls	r3, r3, #2
 800bfc4:	440b      	add	r3, r1
 800bfc6:	3348      	adds	r3, #72	; 0x48
 800bfc8:	6819      	ldr	r1, [r3, #0]
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfce:	4613      	mov	r3, r2
 800bfd0:	00db      	lsls	r3, r3, #3
 800bfd2:	1a9b      	subs	r3, r3, r2
 800bfd4:	009b      	lsls	r3, r3, #2
 800bfd6:	4403      	add	r3, r0
 800bfd8:	3344      	adds	r3, #68	; 0x44
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	4419      	add	r1, r3
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfe2:	4613      	mov	r3, r2
 800bfe4:	00db      	lsls	r3, r3, #3
 800bfe6:	1a9b      	subs	r3, r3, r2
 800bfe8:	009b      	lsls	r3, r3, #2
 800bfea:	4403      	add	r3, r0
 800bfec:	3348      	adds	r3, #72	; 0x48
 800bfee:	6019      	str	r1, [r3, #0]
 800bff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bff2:	b2db      	uxtb	r3, r3
 800bff4:	4619      	mov	r1, r3
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f009 f8a1 	bl	801513e <HAL_PCD_DataInStageCallback>
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	691b      	ldr	r3, [r3, #16]
 800c000:	2b01      	cmp	r3, #1
 800c002:	d116      	bne.n	800c032 <HAL_PCD_IRQHandler+0x272>
 800c004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c006:	2b00      	cmp	r3, #0
 800c008:	d113      	bne.n	800c032 <HAL_PCD_IRQHandler+0x272>
 800c00a:	6879      	ldr	r1, [r7, #4]
 800c00c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c00e:	4613      	mov	r3, r2
 800c010:	00db      	lsls	r3, r3, #3
 800c012:	1a9b      	subs	r3, r3, r2
 800c014:	009b      	lsls	r3, r3, #2
 800c016:	440b      	add	r3, r1
 800c018:	3350      	adds	r3, #80	; 0x50
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d108      	bne.n	800c032 <HAL_PCD_IRQHandler+0x272>
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	6818      	ldr	r0, [r3, #0]
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c02a:	461a      	mov	r2, r3
 800c02c:	2101      	movs	r1, #1
 800c02e:	f004 f86b 	bl	8010108 <USB_EP0_OutStart>
 800c032:	69bb      	ldr	r3, [r7, #24]
 800c034:	f003 0308 	and.w	r3, r3, #8
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d008      	beq.n	800c04e <HAL_PCD_IRQHandler+0x28e>
 800c03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c03e:	015a      	lsls	r2, r3, #5
 800c040:	69fb      	ldr	r3, [r7, #28]
 800c042:	4413      	add	r3, r2
 800c044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c048:	461a      	mov	r2, r3
 800c04a:	2308      	movs	r3, #8
 800c04c:	6093      	str	r3, [r2, #8]
 800c04e:	69bb      	ldr	r3, [r7, #24]
 800c050:	f003 0310 	and.w	r3, r3, #16
 800c054:	2b00      	cmp	r3, #0
 800c056:	d008      	beq.n	800c06a <HAL_PCD_IRQHandler+0x2aa>
 800c058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c05a:	015a      	lsls	r2, r3, #5
 800c05c:	69fb      	ldr	r3, [r7, #28]
 800c05e:	4413      	add	r3, r2
 800c060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c064:	461a      	mov	r2, r3
 800c066:	2310      	movs	r3, #16
 800c068:	6093      	str	r3, [r2, #8]
 800c06a:	69bb      	ldr	r3, [r7, #24]
 800c06c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c070:	2b00      	cmp	r3, #0
 800c072:	d008      	beq.n	800c086 <HAL_PCD_IRQHandler+0x2c6>
 800c074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c076:	015a      	lsls	r2, r3, #5
 800c078:	69fb      	ldr	r3, [r7, #28]
 800c07a:	4413      	add	r3, r2
 800c07c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c080:	461a      	mov	r2, r3
 800c082:	2340      	movs	r3, #64	; 0x40
 800c084:	6093      	str	r3, [r2, #8]
 800c086:	69bb      	ldr	r3, [r7, #24]
 800c088:	f003 0302 	and.w	r3, r3, #2
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d008      	beq.n	800c0a2 <HAL_PCD_IRQHandler+0x2e2>
 800c090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c092:	015a      	lsls	r2, r3, #5
 800c094:	69fb      	ldr	r3, [r7, #28]
 800c096:	4413      	add	r3, r2
 800c098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c09c:	461a      	mov	r2, r3
 800c09e:	2302      	movs	r3, #2
 800c0a0:	6093      	str	r3, [r2, #8]
 800c0a2:	69bb      	ldr	r3, [r7, #24]
 800c0a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d003      	beq.n	800c0b4 <HAL_PCD_IRQHandler+0x2f4>
 800c0ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c0ae:	6878      	ldr	r0, [r7, #4]
 800c0b0:	f000 fc67 	bl	800c982 <PCD_WriteEmptyTxFifo>
 800c0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0b6:	3301      	adds	r3, #1
 800c0b8:	627b      	str	r3, [r7, #36]	; 0x24
 800c0ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0bc:	085b      	lsrs	r3, r3, #1
 800c0be:	62bb      	str	r3, [r7, #40]	; 0x28
 800c0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	f47f af45 	bne.w	800bf52 <HAL_PCD_IRQHandler+0x192>
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f003 ff44 	bl	800ff5a <USB_ReadInterrupts>
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c0d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c0dc:	d122      	bne.n	800c124 <HAL_PCD_IRQHandler+0x364>
 800c0de:	69fb      	ldr	r3, [r7, #28]
 800c0e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0e4:	685b      	ldr	r3, [r3, #4]
 800c0e6:	69fa      	ldr	r2, [r7, #28]
 800c0e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c0ec:	f023 0301 	bic.w	r3, r3, #1
 800c0f0:	6053      	str	r3, [r2, #4]
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800c0f8:	2b01      	cmp	r3, #1
 800c0fa:	d108      	bne.n	800c10e <HAL_PCD_IRQHandler+0x34e>
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2200      	movs	r2, #0
 800c100:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
 800c104:	2100      	movs	r1, #0
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f000 fe88 	bl	800ce1c <HAL_PCDEx_LPM_Callback>
 800c10c:	e002      	b.n	800c114 <HAL_PCD_IRQHandler+0x354>
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f009 f88c 	bl	801522c <HAL_PCD_ResumeCallback>
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	695a      	ldr	r2, [r3, #20]
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800c122:	615a      	str	r2, [r3, #20]
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	4618      	mov	r0, r3
 800c12a:	f003 ff16 	bl	800ff5a <USB_ReadInterrupts>
 800c12e:	4603      	mov	r3, r0
 800c130:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c134:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c138:	d112      	bne.n	800c160 <HAL_PCD_IRQHandler+0x3a0>
 800c13a:	69fb      	ldr	r3, [r7, #28]
 800c13c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c140:	689b      	ldr	r3, [r3, #8]
 800c142:	f003 0301 	and.w	r3, r3, #1
 800c146:	2b01      	cmp	r3, #1
 800c148:	d102      	bne.n	800c150 <HAL_PCD_IRQHandler+0x390>
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f009 f848 	bl	80151e0 <HAL_PCD_SuspendCallback>
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	695a      	ldr	r2, [r3, #20]
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800c15e:	615a      	str	r2, [r3, #20]
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	4618      	mov	r0, r3
 800c166:	f003 fef8 	bl	800ff5a <USB_ReadInterrupts>
 800c16a:	4603      	mov	r3, r0
 800c16c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c170:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c174:	f040 80a7 	bne.w	800c2c6 <HAL_PCD_IRQHandler+0x506>
 800c178:	69fb      	ldr	r3, [r7, #28]
 800c17a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c17e:	685b      	ldr	r3, [r3, #4]
 800c180:	69fa      	ldr	r2, [r7, #28]
 800c182:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c186:	f023 0301 	bic.w	r3, r3, #1
 800c18a:	6053      	str	r3, [r2, #4]
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	2110      	movs	r1, #16
 800c192:	4618      	mov	r0, r3
 800c194:	f003 f830 	bl	800f1f8 <USB_FlushTxFifo>
 800c198:	2300      	movs	r3, #0
 800c19a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c19c:	e036      	b.n	800c20c <HAL_PCD_IRQHandler+0x44c>
 800c19e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1a0:	015a      	lsls	r2, r3, #5
 800c1a2:	69fb      	ldr	r3, [r7, #28]
 800c1a4:	4413      	add	r3, r2
 800c1a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1aa:	461a      	mov	r2, r3
 800c1ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c1b0:	6093      	str	r3, [r2, #8]
 800c1b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1b4:	015a      	lsls	r2, r3, #5
 800c1b6:	69fb      	ldr	r3, [r7, #28]
 800c1b8:	4413      	add	r3, r2
 800c1ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c1c2:	0151      	lsls	r1, r2, #5
 800c1c4:	69fa      	ldr	r2, [r7, #28]
 800c1c6:	440a      	add	r2, r1
 800c1c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c1d0:	6013      	str	r3, [r2, #0]
 800c1d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1d4:	015a      	lsls	r2, r3, #5
 800c1d6:	69fb      	ldr	r3, [r7, #28]
 800c1d8:	4413      	add	r3, r2
 800c1da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1de:	461a      	mov	r2, r3
 800c1e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c1e4:	6093      	str	r3, [r2, #8]
 800c1e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1e8:	015a      	lsls	r2, r3, #5
 800c1ea:	69fb      	ldr	r3, [r7, #28]
 800c1ec:	4413      	add	r3, r2
 800c1ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c1f6:	0151      	lsls	r1, r2, #5
 800c1f8:	69fa      	ldr	r2, [r7, #28]
 800c1fa:	440a      	add	r2, r1
 800c1fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c200:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c204:	6013      	str	r3, [r2, #0]
 800c206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c208:	3301      	adds	r3, #1
 800c20a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	685b      	ldr	r3, [r3, #4]
 800c210:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c212:	429a      	cmp	r2, r3
 800c214:	d3c3      	bcc.n	800c19e <HAL_PCD_IRQHandler+0x3de>
 800c216:	69fb      	ldr	r3, [r7, #28]
 800c218:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c21c:	69db      	ldr	r3, [r3, #28]
 800c21e:	69fa      	ldr	r2, [r7, #28]
 800c220:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c224:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800c228:	61d3      	str	r3, [r2, #28]
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d016      	beq.n	800c260 <HAL_PCD_IRQHandler+0x4a0>
 800c232:	69fb      	ldr	r3, [r7, #28]
 800c234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c238:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c23c:	69fa      	ldr	r2, [r7, #28]
 800c23e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c242:	f043 030b 	orr.w	r3, r3, #11
 800c246:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 800c24a:	69fb      	ldr	r3, [r7, #28]
 800c24c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c252:	69fa      	ldr	r2, [r7, #28]
 800c254:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c258:	f043 030b 	orr.w	r3, r3, #11
 800c25c:	6453      	str	r3, [r2, #68]	; 0x44
 800c25e:	e015      	b.n	800c28c <HAL_PCD_IRQHandler+0x4cc>
 800c260:	69fb      	ldr	r3, [r7, #28]
 800c262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c266:	695b      	ldr	r3, [r3, #20]
 800c268:	69fa      	ldr	r2, [r7, #28]
 800c26a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c26e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c272:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800c276:	6153      	str	r3, [r2, #20]
 800c278:	69fb      	ldr	r3, [r7, #28]
 800c27a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c27e:	691b      	ldr	r3, [r3, #16]
 800c280:	69fa      	ldr	r2, [r7, #28]
 800c282:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c286:	f043 030b 	orr.w	r3, r3, #11
 800c28a:	6113      	str	r3, [r2, #16]
 800c28c:	69fb      	ldr	r3, [r7, #28]
 800c28e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	69fa      	ldr	r2, [r7, #28]
 800c296:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c29a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c29e:	6013      	str	r3, [r2, #0]
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	6818      	ldr	r0, [r3, #0]
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	691b      	ldr	r3, [r3, #16]
 800c2a8:	b2d9      	uxtb	r1, r3
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c2b0:	461a      	mov	r2, r3
 800c2b2:	f003 ff29 	bl	8010108 <USB_EP0_OutStart>
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	695a      	ldr	r2, [r3, #20]
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800c2c4:	615a      	str	r2, [r3, #20]
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f003 fe45 	bl	800ff5a <USB_ReadInterrupts>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c2d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c2da:	d124      	bne.n	800c326 <HAL_PCD_IRQHandler+0x566>
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	f003 fedb 	bl	801009c <USB_ActivateSetup>
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	f002 ffe5 	bl	800f2ba <USB_GetDevSpeed>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	461a      	mov	r2, r3
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	60da      	str	r2, [r3, #12]
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681c      	ldr	r4, [r3, #0]
 800c2fc:	f001 f9c8 	bl	800d690 <HAL_RCC_GetHCLKFreq>
 800c300:	4601      	mov	r1, r0
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	68db      	ldr	r3, [r3, #12]
 800c306:	b2db      	uxtb	r3, r3
 800c308:	461a      	mov	r2, r3
 800c30a:	4620      	mov	r0, r4
 800c30c:	f002 fd14 	bl	800ed38 <USB_SetTurnaroundTime>
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f008 ff3c 	bl	801518e <HAL_PCD_ResetCallback>
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	695a      	ldr	r2, [r3, #20]
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800c324:	615a      	str	r2, [r3, #20]
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	4618      	mov	r0, r3
 800c32c:	f003 fe15 	bl	800ff5a <USB_ReadInterrupts>
 800c330:	4603      	mov	r3, r0
 800c332:	f003 0310 	and.w	r3, r3, #16
 800c336:	2b10      	cmp	r3, #16
 800c338:	d161      	bne.n	800c3fe <HAL_PCD_IRQHandler+0x63e>
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	699a      	ldr	r2, [r3, #24]
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	f022 0210 	bic.w	r2, r2, #16
 800c348:	619a      	str	r2, [r3, #24]
 800c34a:	6a3b      	ldr	r3, [r7, #32]
 800c34c:	6a1b      	ldr	r3, [r3, #32]
 800c34e:	613b      	str	r3, [r7, #16]
 800c350:	693b      	ldr	r3, [r7, #16]
 800c352:	f003 020f 	and.w	r2, r3, #15
 800c356:	4613      	mov	r3, r2
 800c358:	00db      	lsls	r3, r3, #3
 800c35a:	1a9b      	subs	r3, r3, r2
 800c35c:	009b      	lsls	r3, r3, #2
 800c35e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c362:	687a      	ldr	r2, [r7, #4]
 800c364:	4413      	add	r3, r2
 800c366:	3304      	adds	r3, #4
 800c368:	60fb      	str	r3, [r7, #12]
 800c36a:	693b      	ldr	r3, [r7, #16]
 800c36c:	0c5b      	lsrs	r3, r3, #17
 800c36e:	f003 030f 	and.w	r3, r3, #15
 800c372:	2b02      	cmp	r3, #2
 800c374:	d124      	bne.n	800c3c0 <HAL_PCD_IRQHandler+0x600>
 800c376:	693a      	ldr	r2, [r7, #16]
 800c378:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800c37c:	4013      	ands	r3, r2
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d035      	beq.n	800c3ee <HAL_PCD_IRQHandler+0x62e>
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	68d9      	ldr	r1, [r3, #12]
 800c386:	693b      	ldr	r3, [r7, #16]
 800c388:	091b      	lsrs	r3, r3, #4
 800c38a:	b29b      	uxth	r3, r3
 800c38c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c390:	b29b      	uxth	r3, r3
 800c392:	461a      	mov	r2, r3
 800c394:	6a38      	ldr	r0, [r7, #32]
 800c396:	f003 fc8d 	bl	800fcb4 <USB_ReadPacket>
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	68da      	ldr	r2, [r3, #12]
 800c39e:	693b      	ldr	r3, [r7, #16]
 800c3a0:	091b      	lsrs	r3, r3, #4
 800c3a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c3a6:	441a      	add	r2, r3
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	60da      	str	r2, [r3, #12]
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	699a      	ldr	r2, [r3, #24]
 800c3b0:	693b      	ldr	r3, [r7, #16]
 800c3b2:	091b      	lsrs	r3, r3, #4
 800c3b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c3b8:	441a      	add	r2, r3
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	619a      	str	r2, [r3, #24]
 800c3be:	e016      	b.n	800c3ee <HAL_PCD_IRQHandler+0x62e>
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	0c5b      	lsrs	r3, r3, #17
 800c3c4:	f003 030f 	and.w	r3, r3, #15
 800c3c8:	2b06      	cmp	r3, #6
 800c3ca:	d110      	bne.n	800c3ee <HAL_PCD_IRQHandler+0x62e>
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c3d2:	2208      	movs	r2, #8
 800c3d4:	4619      	mov	r1, r3
 800c3d6:	6a38      	ldr	r0, [r7, #32]
 800c3d8:	f003 fc6c 	bl	800fcb4 <USB_ReadPacket>
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	699a      	ldr	r2, [r3, #24]
 800c3e0:	693b      	ldr	r3, [r7, #16]
 800c3e2:	091b      	lsrs	r3, r3, #4
 800c3e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c3e8:	441a      	add	r2, r3
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	619a      	str	r2, [r3, #24]
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	699a      	ldr	r2, [r3, #24]
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	f042 0210 	orr.w	r2, r2, #16
 800c3fc:	619a      	str	r2, [r3, #24]
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	4618      	mov	r0, r3
 800c404:	f003 fda9 	bl	800ff5a <USB_ReadInterrupts>
 800c408:	4603      	mov	r3, r0
 800c40a:	f003 0308 	and.w	r3, r3, #8
 800c40e:	2b08      	cmp	r3, #8
 800c410:	d10a      	bne.n	800c428 <HAL_PCD_IRQHandler+0x668>
 800c412:	6878      	ldr	r0, [r7, #4]
 800c414:	f008 fead 	bl	8015172 <HAL_PCD_SOFCallback>
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	695a      	ldr	r2, [r3, #20]
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	f002 0208 	and.w	r2, r2, #8
 800c426:	615a      	str	r2, [r3, #20]
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	4618      	mov	r0, r3
 800c42e:	f003 fd94 	bl	800ff5a <USB_ReadInterrupts>
 800c432:	4603      	mov	r3, r0
 800c434:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c438:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c43c:	d10f      	bne.n	800c45e <HAL_PCD_IRQHandler+0x69e>
 800c43e:	2300      	movs	r3, #0
 800c440:	627b      	str	r3, [r7, #36]	; 0x24
 800c442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c444:	b2db      	uxtb	r3, r3
 800c446:	4619      	mov	r1, r3
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	f008 ff0f 	bl	801526c <HAL_PCD_ISOINIncompleteCallback>
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	695a      	ldr	r2, [r3, #20]
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800c45c:	615a      	str	r2, [r3, #20]
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	4618      	mov	r0, r3
 800c464:	f003 fd79 	bl	800ff5a <USB_ReadInterrupts>
 800c468:	4603      	mov	r3, r0
 800c46a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c46e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c472:	d10f      	bne.n	800c494 <HAL_PCD_IRQHandler+0x6d4>
 800c474:	2300      	movs	r3, #0
 800c476:	627b      	str	r3, [r7, #36]	; 0x24
 800c478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c47a:	b2db      	uxtb	r3, r3
 800c47c:	4619      	mov	r1, r3
 800c47e:	6878      	ldr	r0, [r7, #4]
 800c480:	f008 fee2 	bl	8015248 <HAL_PCD_ISOOUTIncompleteCallback>
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	695a      	ldr	r2, [r3, #20]
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800c492:	615a      	str	r2, [r3, #20]
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	4618      	mov	r0, r3
 800c49a:	f003 fd5e 	bl	800ff5a <USB_ReadInterrupts>
 800c49e:	4603      	mov	r3, r0
 800c4a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c4a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4a8:	d10a      	bne.n	800c4c0 <HAL_PCD_IRQHandler+0x700>
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f008 fef0 	bl	8015290 <HAL_PCD_ConnectCallback>
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	695a      	ldr	r2, [r3, #20]
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800c4be:	615a      	str	r2, [r3, #20]
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	f003 fd48 	bl	800ff5a <USB_ReadInterrupts>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	f003 0304 	and.w	r3, r3, #4
 800c4d0:	2b04      	cmp	r3, #4
 800c4d2:	d115      	bne.n	800c500 <HAL_PCD_IRQHandler+0x740>
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	685b      	ldr	r3, [r3, #4]
 800c4da:	613b      	str	r3, [r7, #16]
 800c4dc:	693b      	ldr	r3, [r7, #16]
 800c4de:	f003 0304 	and.w	r3, r3, #4
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d002      	beq.n	800c4ec <HAL_PCD_IRQHandler+0x72c>
 800c4e6:	6878      	ldr	r0, [r7, #4]
 800c4e8:	f008 fee0 	bl	80152ac <HAL_PCD_DisconnectCallback>
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	6859      	ldr	r1, [r3, #4]
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	693a      	ldr	r2, [r7, #16]
 800c4f8:	430a      	orrs	r2, r1
 800c4fa:	605a      	str	r2, [r3, #4]
 800c4fc:	e000      	b.n	800c500 <HAL_PCD_IRQHandler+0x740>
 800c4fe:	bf00      	nop
 800c500:	3734      	adds	r7, #52	; 0x34
 800c502:	46bd      	mov	sp, r7
 800c504:	bd90      	pop	{r4, r7, pc}

0800c506 <HAL_PCD_SetAddress>:
 800c506:	b580      	push	{r7, lr}
 800c508:	b082      	sub	sp, #8
 800c50a:	af00      	add	r7, sp, #0
 800c50c:	6078      	str	r0, [r7, #4]
 800c50e:	460b      	mov	r3, r1
 800c510:	70fb      	strb	r3, [r7, #3]
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c518:	2b01      	cmp	r3, #1
 800c51a:	d101      	bne.n	800c520 <HAL_PCD_SetAddress+0x1a>
 800c51c:	2302      	movs	r3, #2
 800c51e:	e013      	b.n	800c548 <HAL_PCD_SetAddress+0x42>
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2201      	movs	r2, #1
 800c524:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	78fa      	ldrb	r2, [r7, #3]
 800c52c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	78fa      	ldrb	r2, [r7, #3]
 800c536:	4611      	mov	r1, r2
 800c538:	4618      	mov	r0, r3
 800c53a:	f003 fcb8 	bl	800feae <USB_SetDevAddress>
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2200      	movs	r2, #0
 800c542:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
 800c546:	2300      	movs	r3, #0
 800c548:	4618      	mov	r0, r3
 800c54a:	3708      	adds	r7, #8
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd80      	pop	{r7, pc}

0800c550 <HAL_PCD_EP_Open>:
 800c550:	b580      	push	{r7, lr}
 800c552:	b084      	sub	sp, #16
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
 800c558:	4608      	mov	r0, r1
 800c55a:	4611      	mov	r1, r2
 800c55c:	461a      	mov	r2, r3
 800c55e:	4603      	mov	r3, r0
 800c560:	70fb      	strb	r3, [r7, #3]
 800c562:	460b      	mov	r3, r1
 800c564:	803b      	strh	r3, [r7, #0]
 800c566:	4613      	mov	r3, r2
 800c568:	70bb      	strb	r3, [r7, #2]
 800c56a:	2300      	movs	r3, #0
 800c56c:	72fb      	strb	r3, [r7, #11]
 800c56e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c572:	2b00      	cmp	r3, #0
 800c574:	da0f      	bge.n	800c596 <HAL_PCD_EP_Open+0x46>
 800c576:	78fb      	ldrb	r3, [r7, #3]
 800c578:	f003 020f 	and.w	r2, r3, #15
 800c57c:	4613      	mov	r3, r2
 800c57e:	00db      	lsls	r3, r3, #3
 800c580:	1a9b      	subs	r3, r3, r2
 800c582:	009b      	lsls	r3, r3, #2
 800c584:	3338      	adds	r3, #56	; 0x38
 800c586:	687a      	ldr	r2, [r7, #4]
 800c588:	4413      	add	r3, r2
 800c58a:	3304      	adds	r3, #4
 800c58c:	60fb      	str	r3, [r7, #12]
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	2201      	movs	r2, #1
 800c592:	705a      	strb	r2, [r3, #1]
 800c594:	e00f      	b.n	800c5b6 <HAL_PCD_EP_Open+0x66>
 800c596:	78fb      	ldrb	r3, [r7, #3]
 800c598:	f003 020f 	and.w	r2, r3, #15
 800c59c:	4613      	mov	r3, r2
 800c59e:	00db      	lsls	r3, r3, #3
 800c5a0:	1a9b      	subs	r3, r3, r2
 800c5a2:	009b      	lsls	r3, r3, #2
 800c5a4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c5a8:	687a      	ldr	r2, [r7, #4]
 800c5aa:	4413      	add	r3, r2
 800c5ac:	3304      	adds	r3, #4
 800c5ae:	60fb      	str	r3, [r7, #12]
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	705a      	strb	r2, [r3, #1]
 800c5b6:	78fb      	ldrb	r3, [r7, #3]
 800c5b8:	f003 030f 	and.w	r3, r3, #15
 800c5bc:	b2da      	uxtb	r2, r3
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	701a      	strb	r2, [r3, #0]
 800c5c2:	883a      	ldrh	r2, [r7, #0]
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	609a      	str	r2, [r3, #8]
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	78ba      	ldrb	r2, [r7, #2]
 800c5cc:	70da      	strb	r2, [r3, #3]
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	785b      	ldrb	r3, [r3, #1]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d004      	beq.n	800c5e0 <HAL_PCD_EP_Open+0x90>
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	781b      	ldrb	r3, [r3, #0]
 800c5da:	b29a      	uxth	r2, r3
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	80da      	strh	r2, [r3, #6]
 800c5e0:	78bb      	ldrb	r3, [r7, #2]
 800c5e2:	2b02      	cmp	r3, #2
 800c5e4:	d102      	bne.n	800c5ec <HAL_PCD_EP_Open+0x9c>
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	711a      	strb	r2, [r3, #4]
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c5f2:	2b01      	cmp	r3, #1
 800c5f4:	d101      	bne.n	800c5fa <HAL_PCD_EP_Open+0xaa>
 800c5f6:	2302      	movs	r3, #2
 800c5f8:	e00e      	b.n	800c618 <HAL_PCD_EP_Open+0xc8>
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	2201      	movs	r2, #1
 800c5fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	68f9      	ldr	r1, [r7, #12]
 800c608:	4618      	mov	r0, r3
 800c60a:	f002 fe7b 	bl	800f304 <USB_ActivateEndpoint>
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	2200      	movs	r2, #0
 800c612:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
 800c616:	7afb      	ldrb	r3, [r7, #11]
 800c618:	4618      	mov	r0, r3
 800c61a:	3710      	adds	r7, #16
 800c61c:	46bd      	mov	sp, r7
 800c61e:	bd80      	pop	{r7, pc}

0800c620 <HAL_PCD_EP_Close>:
 800c620:	b580      	push	{r7, lr}
 800c622:	b084      	sub	sp, #16
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
 800c628:	460b      	mov	r3, r1
 800c62a:	70fb      	strb	r3, [r7, #3]
 800c62c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c630:	2b00      	cmp	r3, #0
 800c632:	da0f      	bge.n	800c654 <HAL_PCD_EP_Close+0x34>
 800c634:	78fb      	ldrb	r3, [r7, #3]
 800c636:	f003 020f 	and.w	r2, r3, #15
 800c63a:	4613      	mov	r3, r2
 800c63c:	00db      	lsls	r3, r3, #3
 800c63e:	1a9b      	subs	r3, r3, r2
 800c640:	009b      	lsls	r3, r3, #2
 800c642:	3338      	adds	r3, #56	; 0x38
 800c644:	687a      	ldr	r2, [r7, #4]
 800c646:	4413      	add	r3, r2
 800c648:	3304      	adds	r3, #4
 800c64a:	60fb      	str	r3, [r7, #12]
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	2201      	movs	r2, #1
 800c650:	705a      	strb	r2, [r3, #1]
 800c652:	e00f      	b.n	800c674 <HAL_PCD_EP_Close+0x54>
 800c654:	78fb      	ldrb	r3, [r7, #3]
 800c656:	f003 020f 	and.w	r2, r3, #15
 800c65a:	4613      	mov	r3, r2
 800c65c:	00db      	lsls	r3, r3, #3
 800c65e:	1a9b      	subs	r3, r3, r2
 800c660:	009b      	lsls	r3, r3, #2
 800c662:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c666:	687a      	ldr	r2, [r7, #4]
 800c668:	4413      	add	r3, r2
 800c66a:	3304      	adds	r3, #4
 800c66c:	60fb      	str	r3, [r7, #12]
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	2200      	movs	r2, #0
 800c672:	705a      	strb	r2, [r3, #1]
 800c674:	78fb      	ldrb	r3, [r7, #3]
 800c676:	f003 030f 	and.w	r3, r3, #15
 800c67a:	b2da      	uxtb	r2, r3
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	701a      	strb	r2, [r3, #0]
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c686:	2b01      	cmp	r3, #1
 800c688:	d101      	bne.n	800c68e <HAL_PCD_EP_Close+0x6e>
 800c68a:	2302      	movs	r3, #2
 800c68c:	e00e      	b.n	800c6ac <HAL_PCD_EP_Close+0x8c>
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	2201      	movs	r2, #1
 800c692:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	68f9      	ldr	r1, [r7, #12]
 800c69c:	4618      	mov	r0, r3
 800c69e:	f002 feb9 	bl	800f414 <USB_DeactivateEndpoint>
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	3710      	adds	r7, #16
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bd80      	pop	{r7, pc}

0800c6b4 <HAL_PCD_EP_Receive>:
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b086      	sub	sp, #24
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	60f8      	str	r0, [r7, #12]
 800c6bc:	607a      	str	r2, [r7, #4]
 800c6be:	603b      	str	r3, [r7, #0]
 800c6c0:	460b      	mov	r3, r1
 800c6c2:	72fb      	strb	r3, [r7, #11]
 800c6c4:	7afb      	ldrb	r3, [r7, #11]
 800c6c6:	f003 020f 	and.w	r2, r3, #15
 800c6ca:	4613      	mov	r3, r2
 800c6cc:	00db      	lsls	r3, r3, #3
 800c6ce:	1a9b      	subs	r3, r3, r2
 800c6d0:	009b      	lsls	r3, r3, #2
 800c6d2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c6d6:	68fa      	ldr	r2, [r7, #12]
 800c6d8:	4413      	add	r3, r2
 800c6da:	3304      	adds	r3, #4
 800c6dc:	617b      	str	r3, [r7, #20]
 800c6de:	697b      	ldr	r3, [r7, #20]
 800c6e0:	687a      	ldr	r2, [r7, #4]
 800c6e2:	60da      	str	r2, [r3, #12]
 800c6e4:	697b      	ldr	r3, [r7, #20]
 800c6e6:	683a      	ldr	r2, [r7, #0]
 800c6e8:	615a      	str	r2, [r3, #20]
 800c6ea:	697b      	ldr	r3, [r7, #20]
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	619a      	str	r2, [r3, #24]
 800c6f0:	697b      	ldr	r3, [r7, #20]
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	705a      	strb	r2, [r3, #1]
 800c6f6:	7afb      	ldrb	r3, [r7, #11]
 800c6f8:	f003 030f 	and.w	r3, r3, #15
 800c6fc:	b2da      	uxtb	r2, r3
 800c6fe:	697b      	ldr	r3, [r7, #20]
 800c700:	701a      	strb	r2, [r3, #0]
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	691b      	ldr	r3, [r3, #16]
 800c706:	2b01      	cmp	r3, #1
 800c708:	d102      	bne.n	800c710 <HAL_PCD_EP_Receive+0x5c>
 800c70a:	687a      	ldr	r2, [r7, #4]
 800c70c:	697b      	ldr	r3, [r7, #20]
 800c70e:	611a      	str	r2, [r3, #16]
 800c710:	7afb      	ldrb	r3, [r7, #11]
 800c712:	f003 030f 	and.w	r3, r3, #15
 800c716:	2b00      	cmp	r3, #0
 800c718:	d109      	bne.n	800c72e <HAL_PCD_EP_Receive+0x7a>
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	6818      	ldr	r0, [r3, #0]
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	691b      	ldr	r3, [r3, #16]
 800c722:	b2db      	uxtb	r3, r3
 800c724:	461a      	mov	r2, r3
 800c726:	6979      	ldr	r1, [r7, #20]
 800c728:	f003 f93c 	bl	800f9a4 <USB_EP0StartXfer>
 800c72c:	e008      	b.n	800c740 <HAL_PCD_EP_Receive+0x8c>
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	6818      	ldr	r0, [r3, #0]
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	691b      	ldr	r3, [r3, #16]
 800c736:	b2db      	uxtb	r3, r3
 800c738:	461a      	mov	r2, r3
 800c73a:	6979      	ldr	r1, [r7, #20]
 800c73c:	f002 feee 	bl	800f51c <USB_EPStartXfer>
 800c740:	2300      	movs	r3, #0
 800c742:	4618      	mov	r0, r3
 800c744:	3718      	adds	r7, #24
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}

0800c74a <HAL_PCD_EP_GetRxCount>:
 800c74a:	b480      	push	{r7}
 800c74c:	b083      	sub	sp, #12
 800c74e:	af00      	add	r7, sp, #0
 800c750:	6078      	str	r0, [r7, #4]
 800c752:	460b      	mov	r3, r1
 800c754:	70fb      	strb	r3, [r7, #3]
 800c756:	78fb      	ldrb	r3, [r7, #3]
 800c758:	f003 020f 	and.w	r2, r3, #15
 800c75c:	6879      	ldr	r1, [r7, #4]
 800c75e:	4613      	mov	r3, r2
 800c760:	00db      	lsls	r3, r3, #3
 800c762:	1a9b      	subs	r3, r3, r2
 800c764:	009b      	lsls	r3, r3, #2
 800c766:	440b      	add	r3, r1
 800c768:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	4618      	mov	r0, r3
 800c770:	370c      	adds	r7, #12
 800c772:	46bd      	mov	sp, r7
 800c774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c778:	4770      	bx	lr

0800c77a <HAL_PCD_EP_Transmit>:
 800c77a:	b580      	push	{r7, lr}
 800c77c:	b086      	sub	sp, #24
 800c77e:	af00      	add	r7, sp, #0
 800c780:	60f8      	str	r0, [r7, #12]
 800c782:	607a      	str	r2, [r7, #4]
 800c784:	603b      	str	r3, [r7, #0]
 800c786:	460b      	mov	r3, r1
 800c788:	72fb      	strb	r3, [r7, #11]
 800c78a:	7afb      	ldrb	r3, [r7, #11]
 800c78c:	f003 020f 	and.w	r2, r3, #15
 800c790:	4613      	mov	r3, r2
 800c792:	00db      	lsls	r3, r3, #3
 800c794:	1a9b      	subs	r3, r3, r2
 800c796:	009b      	lsls	r3, r3, #2
 800c798:	3338      	adds	r3, #56	; 0x38
 800c79a:	68fa      	ldr	r2, [r7, #12]
 800c79c:	4413      	add	r3, r2
 800c79e:	3304      	adds	r3, #4
 800c7a0:	617b      	str	r3, [r7, #20]
 800c7a2:	697b      	ldr	r3, [r7, #20]
 800c7a4:	687a      	ldr	r2, [r7, #4]
 800c7a6:	60da      	str	r2, [r3, #12]
 800c7a8:	697b      	ldr	r3, [r7, #20]
 800c7aa:	683a      	ldr	r2, [r7, #0]
 800c7ac:	615a      	str	r2, [r3, #20]
 800c7ae:	697b      	ldr	r3, [r7, #20]
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	619a      	str	r2, [r3, #24]
 800c7b4:	697b      	ldr	r3, [r7, #20]
 800c7b6:	2201      	movs	r2, #1
 800c7b8:	705a      	strb	r2, [r3, #1]
 800c7ba:	7afb      	ldrb	r3, [r7, #11]
 800c7bc:	f003 030f 	and.w	r3, r3, #15
 800c7c0:	b2da      	uxtb	r2, r3
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	701a      	strb	r2, [r3, #0]
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	691b      	ldr	r3, [r3, #16]
 800c7ca:	2b01      	cmp	r3, #1
 800c7cc:	d102      	bne.n	800c7d4 <HAL_PCD_EP_Transmit+0x5a>
 800c7ce:	687a      	ldr	r2, [r7, #4]
 800c7d0:	697b      	ldr	r3, [r7, #20]
 800c7d2:	611a      	str	r2, [r3, #16]
 800c7d4:	7afb      	ldrb	r3, [r7, #11]
 800c7d6:	f003 030f 	and.w	r3, r3, #15
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d109      	bne.n	800c7f2 <HAL_PCD_EP_Transmit+0x78>
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	6818      	ldr	r0, [r3, #0]
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	691b      	ldr	r3, [r3, #16]
 800c7e6:	b2db      	uxtb	r3, r3
 800c7e8:	461a      	mov	r2, r3
 800c7ea:	6979      	ldr	r1, [r7, #20]
 800c7ec:	f003 f8da 	bl	800f9a4 <USB_EP0StartXfer>
 800c7f0:	e008      	b.n	800c804 <HAL_PCD_EP_Transmit+0x8a>
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	6818      	ldr	r0, [r3, #0]
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	691b      	ldr	r3, [r3, #16]
 800c7fa:	b2db      	uxtb	r3, r3
 800c7fc:	461a      	mov	r2, r3
 800c7fe:	6979      	ldr	r1, [r7, #20]
 800c800:	f002 fe8c 	bl	800f51c <USB_EPStartXfer>
 800c804:	2300      	movs	r3, #0
 800c806:	4618      	mov	r0, r3
 800c808:	3718      	adds	r7, #24
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}

0800c80e <HAL_PCD_EP_SetStall>:
 800c80e:	b580      	push	{r7, lr}
 800c810:	b084      	sub	sp, #16
 800c812:	af00      	add	r7, sp, #0
 800c814:	6078      	str	r0, [r7, #4]
 800c816:	460b      	mov	r3, r1
 800c818:	70fb      	strb	r3, [r7, #3]
 800c81a:	78fb      	ldrb	r3, [r7, #3]
 800c81c:	f003 020f 	and.w	r2, r3, #15
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	685b      	ldr	r3, [r3, #4]
 800c824:	429a      	cmp	r2, r3
 800c826:	d901      	bls.n	800c82c <HAL_PCD_EP_SetStall+0x1e>
 800c828:	2301      	movs	r3, #1
 800c82a:	e050      	b.n	800c8ce <HAL_PCD_EP_SetStall+0xc0>
 800c82c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c830:	2b00      	cmp	r3, #0
 800c832:	da0f      	bge.n	800c854 <HAL_PCD_EP_SetStall+0x46>
 800c834:	78fb      	ldrb	r3, [r7, #3]
 800c836:	f003 020f 	and.w	r2, r3, #15
 800c83a:	4613      	mov	r3, r2
 800c83c:	00db      	lsls	r3, r3, #3
 800c83e:	1a9b      	subs	r3, r3, r2
 800c840:	009b      	lsls	r3, r3, #2
 800c842:	3338      	adds	r3, #56	; 0x38
 800c844:	687a      	ldr	r2, [r7, #4]
 800c846:	4413      	add	r3, r2
 800c848:	3304      	adds	r3, #4
 800c84a:	60fb      	str	r3, [r7, #12]
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	2201      	movs	r2, #1
 800c850:	705a      	strb	r2, [r3, #1]
 800c852:	e00d      	b.n	800c870 <HAL_PCD_EP_SetStall+0x62>
 800c854:	78fa      	ldrb	r2, [r7, #3]
 800c856:	4613      	mov	r3, r2
 800c858:	00db      	lsls	r3, r3, #3
 800c85a:	1a9b      	subs	r3, r3, r2
 800c85c:	009b      	lsls	r3, r3, #2
 800c85e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c862:	687a      	ldr	r2, [r7, #4]
 800c864:	4413      	add	r3, r2
 800c866:	3304      	adds	r3, #4
 800c868:	60fb      	str	r3, [r7, #12]
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	2200      	movs	r2, #0
 800c86e:	705a      	strb	r2, [r3, #1]
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	2201      	movs	r2, #1
 800c874:	709a      	strb	r2, [r3, #2]
 800c876:	78fb      	ldrb	r3, [r7, #3]
 800c878:	f003 030f 	and.w	r3, r3, #15
 800c87c:	b2da      	uxtb	r2, r3
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	701a      	strb	r2, [r3, #0]
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c888:	2b01      	cmp	r3, #1
 800c88a:	d101      	bne.n	800c890 <HAL_PCD_EP_SetStall+0x82>
 800c88c:	2302      	movs	r3, #2
 800c88e:	e01e      	b.n	800c8ce <HAL_PCD_EP_SetStall+0xc0>
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	2201      	movs	r2, #1
 800c894:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	68f9      	ldr	r1, [r7, #12]
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f003 fa31 	bl	800fd06 <USB_EPSetStall>
 800c8a4:	78fb      	ldrb	r3, [r7, #3]
 800c8a6:	f003 030f 	and.w	r3, r3, #15
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d10a      	bne.n	800c8c4 <HAL_PCD_EP_SetStall+0xb6>
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	6818      	ldr	r0, [r3, #0]
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	691b      	ldr	r3, [r3, #16]
 800c8b6:	b2d9      	uxtb	r1, r3
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c8be:	461a      	mov	r2, r3
 800c8c0:	f003 fc22 	bl	8010108 <USB_EP0_OutStart>
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	3710      	adds	r7, #16
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	bd80      	pop	{r7, pc}

0800c8d6 <HAL_PCD_EP_ClrStall>:
 800c8d6:	b580      	push	{r7, lr}
 800c8d8:	b084      	sub	sp, #16
 800c8da:	af00      	add	r7, sp, #0
 800c8dc:	6078      	str	r0, [r7, #4]
 800c8de:	460b      	mov	r3, r1
 800c8e0:	70fb      	strb	r3, [r7, #3]
 800c8e2:	78fb      	ldrb	r3, [r7, #3]
 800c8e4:	f003 020f 	and.w	r2, r3, #15
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	685b      	ldr	r3, [r3, #4]
 800c8ec:	429a      	cmp	r2, r3
 800c8ee:	d901      	bls.n	800c8f4 <HAL_PCD_EP_ClrStall+0x1e>
 800c8f0:	2301      	movs	r3, #1
 800c8f2:	e042      	b.n	800c97a <HAL_PCD_EP_ClrStall+0xa4>
 800c8f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	da0f      	bge.n	800c91c <HAL_PCD_EP_ClrStall+0x46>
 800c8fc:	78fb      	ldrb	r3, [r7, #3]
 800c8fe:	f003 020f 	and.w	r2, r3, #15
 800c902:	4613      	mov	r3, r2
 800c904:	00db      	lsls	r3, r3, #3
 800c906:	1a9b      	subs	r3, r3, r2
 800c908:	009b      	lsls	r3, r3, #2
 800c90a:	3338      	adds	r3, #56	; 0x38
 800c90c:	687a      	ldr	r2, [r7, #4]
 800c90e:	4413      	add	r3, r2
 800c910:	3304      	adds	r3, #4
 800c912:	60fb      	str	r3, [r7, #12]
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	2201      	movs	r2, #1
 800c918:	705a      	strb	r2, [r3, #1]
 800c91a:	e00f      	b.n	800c93c <HAL_PCD_EP_ClrStall+0x66>
 800c91c:	78fb      	ldrb	r3, [r7, #3]
 800c91e:	f003 020f 	and.w	r2, r3, #15
 800c922:	4613      	mov	r3, r2
 800c924:	00db      	lsls	r3, r3, #3
 800c926:	1a9b      	subs	r3, r3, r2
 800c928:	009b      	lsls	r3, r3, #2
 800c92a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c92e:	687a      	ldr	r2, [r7, #4]
 800c930:	4413      	add	r3, r2
 800c932:	3304      	adds	r3, #4
 800c934:	60fb      	str	r3, [r7, #12]
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	2200      	movs	r2, #0
 800c93a:	705a      	strb	r2, [r3, #1]
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	2200      	movs	r2, #0
 800c940:	709a      	strb	r2, [r3, #2]
 800c942:	78fb      	ldrb	r3, [r7, #3]
 800c944:	f003 030f 	and.w	r3, r3, #15
 800c948:	b2da      	uxtb	r2, r3
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	701a      	strb	r2, [r3, #0]
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c954:	2b01      	cmp	r3, #1
 800c956:	d101      	bne.n	800c95c <HAL_PCD_EP_ClrStall+0x86>
 800c958:	2302      	movs	r3, #2
 800c95a:	e00e      	b.n	800c97a <HAL_PCD_EP_ClrStall+0xa4>
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2201      	movs	r2, #1
 800c960:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	68f9      	ldr	r1, [r7, #12]
 800c96a:	4618      	mov	r0, r3
 800c96c:	f003 fa39 	bl	800fde2 <USB_EPClearStall>
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2200      	movs	r2, #0
 800c974:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
 800c978:	2300      	movs	r3, #0
 800c97a:	4618      	mov	r0, r3
 800c97c:	3710      	adds	r7, #16
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd80      	pop	{r7, pc}

0800c982 <PCD_WriteEmptyTxFifo>:
 800c982:	b580      	push	{r7, lr}
 800c984:	b08a      	sub	sp, #40	; 0x28
 800c986:	af02      	add	r7, sp, #8
 800c988:	6078      	str	r0, [r7, #4]
 800c98a:	6039      	str	r1, [r7, #0]
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	617b      	str	r3, [r7, #20]
 800c992:	697b      	ldr	r3, [r7, #20]
 800c994:	613b      	str	r3, [r7, #16]
 800c996:	683a      	ldr	r2, [r7, #0]
 800c998:	4613      	mov	r3, r2
 800c99a:	00db      	lsls	r3, r3, #3
 800c99c:	1a9b      	subs	r3, r3, r2
 800c99e:	009b      	lsls	r3, r3, #2
 800c9a0:	3338      	adds	r3, #56	; 0x38
 800c9a2:	687a      	ldr	r2, [r7, #4]
 800c9a4:	4413      	add	r3, r2
 800c9a6:	3304      	adds	r3, #4
 800c9a8:	60fb      	str	r3, [r7, #12]
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	699a      	ldr	r2, [r3, #24]
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	695b      	ldr	r3, [r3, #20]
 800c9b2:	429a      	cmp	r2, r3
 800c9b4:	d901      	bls.n	800c9ba <PCD_WriteEmptyTxFifo+0x38>
 800c9b6:	2301      	movs	r3, #1
 800c9b8:	e06c      	b.n	800ca94 <PCD_WriteEmptyTxFifo+0x112>
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	695a      	ldr	r2, [r3, #20]
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	699b      	ldr	r3, [r3, #24]
 800c9c2:	1ad3      	subs	r3, r2, r3
 800c9c4:	61fb      	str	r3, [r7, #28]
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	689b      	ldr	r3, [r3, #8]
 800c9ca:	69fa      	ldr	r2, [r7, #28]
 800c9cc:	429a      	cmp	r2, r3
 800c9ce:	d902      	bls.n	800c9d6 <PCD_WriteEmptyTxFifo+0x54>
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	689b      	ldr	r3, [r3, #8]
 800c9d4:	61fb      	str	r3, [r7, #28]
 800c9d6:	69fb      	ldr	r3, [r7, #28]
 800c9d8:	3303      	adds	r3, #3
 800c9da:	089b      	lsrs	r3, r3, #2
 800c9dc:	61bb      	str	r3, [r7, #24]
 800c9de:	e02b      	b.n	800ca38 <PCD_WriteEmptyTxFifo+0xb6>
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	695a      	ldr	r2, [r3, #20]
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	699b      	ldr	r3, [r3, #24]
 800c9e8:	1ad3      	subs	r3, r2, r3
 800c9ea:	61fb      	str	r3, [r7, #28]
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	689b      	ldr	r3, [r3, #8]
 800c9f0:	69fa      	ldr	r2, [r7, #28]
 800c9f2:	429a      	cmp	r2, r3
 800c9f4:	d902      	bls.n	800c9fc <PCD_WriteEmptyTxFifo+0x7a>
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	689b      	ldr	r3, [r3, #8]
 800c9fa:	61fb      	str	r3, [r7, #28]
 800c9fc:	69fb      	ldr	r3, [r7, #28]
 800c9fe:	3303      	adds	r3, #3
 800ca00:	089b      	lsrs	r3, r3, #2
 800ca02:	61bb      	str	r3, [r7, #24]
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	68d9      	ldr	r1, [r3, #12]
 800ca08:	683b      	ldr	r3, [r7, #0]
 800ca0a:	b2da      	uxtb	r2, r3
 800ca0c:	69fb      	ldr	r3, [r7, #28]
 800ca0e:	b298      	uxth	r0, r3
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	691b      	ldr	r3, [r3, #16]
 800ca14:	b2db      	uxtb	r3, r3
 800ca16:	9300      	str	r3, [sp, #0]
 800ca18:	4603      	mov	r3, r0
 800ca1a:	6978      	ldr	r0, [r7, #20]
 800ca1c:	f003 f915 	bl	800fc4a <USB_WritePacket>
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	68da      	ldr	r2, [r3, #12]
 800ca24:	69fb      	ldr	r3, [r7, #28]
 800ca26:	441a      	add	r2, r3
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	60da      	str	r2, [r3, #12]
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	699a      	ldr	r2, [r3, #24]
 800ca30:	69fb      	ldr	r3, [r7, #28]
 800ca32:	441a      	add	r2, r3
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	619a      	str	r2, [r3, #24]
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	015a      	lsls	r2, r3, #5
 800ca3c:	693b      	ldr	r3, [r7, #16]
 800ca3e:	4413      	add	r3, r2
 800ca40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca44:	699b      	ldr	r3, [r3, #24]
 800ca46:	b29b      	uxth	r3, r3
 800ca48:	69ba      	ldr	r2, [r7, #24]
 800ca4a:	429a      	cmp	r2, r3
 800ca4c:	d809      	bhi.n	800ca62 <PCD_WriteEmptyTxFifo+0xe0>
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	699a      	ldr	r2, [r3, #24]
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	695b      	ldr	r3, [r3, #20]
 800ca56:	429a      	cmp	r2, r3
 800ca58:	d203      	bcs.n	800ca62 <PCD_WriteEmptyTxFifo+0xe0>
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	695b      	ldr	r3, [r3, #20]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d1be      	bne.n	800c9e0 <PCD_WriteEmptyTxFifo+0x5e>
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	695a      	ldr	r2, [r3, #20]
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	699b      	ldr	r3, [r3, #24]
 800ca6a:	429a      	cmp	r2, r3
 800ca6c:	d811      	bhi.n	800ca92 <PCD_WriteEmptyTxFifo+0x110>
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	f003 030f 	and.w	r3, r3, #15
 800ca74:	2201      	movs	r2, #1
 800ca76:	fa02 f303 	lsl.w	r3, r2, r3
 800ca7a:	60bb      	str	r3, [r7, #8]
 800ca7c:	693b      	ldr	r3, [r7, #16]
 800ca7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ca84:	68bb      	ldr	r3, [r7, #8]
 800ca86:	43db      	mvns	r3, r3
 800ca88:	6939      	ldr	r1, [r7, #16]
 800ca8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ca8e:	4013      	ands	r3, r2
 800ca90:	634b      	str	r3, [r1, #52]	; 0x34
 800ca92:	2300      	movs	r3, #0
 800ca94:	4618      	mov	r0, r3
 800ca96:	3720      	adds	r7, #32
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bd80      	pop	{r7, pc}

0800ca9c <PCD_EP_OutXfrComplete_int>:
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b086      	sub	sp, #24
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
 800caa4:	6039      	str	r1, [r7, #0]
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	617b      	str	r3, [r7, #20]
 800caac:	697b      	ldr	r3, [r7, #20]
 800caae:	613b      	str	r3, [r7, #16]
 800cab0:	697b      	ldr	r3, [r7, #20]
 800cab2:	333c      	adds	r3, #60	; 0x3c
 800cab4:	3304      	adds	r3, #4
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	60fb      	str	r3, [r7, #12]
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	015a      	lsls	r2, r3, #5
 800cabe:	693b      	ldr	r3, [r7, #16]
 800cac0:	4413      	add	r3, r2
 800cac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cac6:	689b      	ldr	r3, [r3, #8]
 800cac8:	60bb      	str	r3, [r7, #8]
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	691b      	ldr	r3, [r3, #16]
 800cace:	2b01      	cmp	r3, #1
 800cad0:	f040 80b3 	bne.w	800cc3a <PCD_EP_OutXfrComplete_int+0x19e>
 800cad4:	68bb      	ldr	r3, [r7, #8]
 800cad6:	f003 0308 	and.w	r3, r3, #8
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d028      	beq.n	800cb30 <PCD_EP_OutXfrComplete_int+0x94>
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	4a70      	ldr	r2, [pc, #448]	; (800cca4 <PCD_EP_OutXfrComplete_int+0x208>)
 800cae2:	4293      	cmp	r3, r2
 800cae4:	d90e      	bls.n	800cb04 <PCD_EP_OutXfrComplete_int+0x68>
 800cae6:	68bb      	ldr	r3, [r7, #8]
 800cae8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800caec:	2b00      	cmp	r3, #0
 800caee:	d009      	beq.n	800cb04 <PCD_EP_OutXfrComplete_int+0x68>
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	015a      	lsls	r2, r3, #5
 800caf4:	693b      	ldr	r3, [r7, #16]
 800caf6:	4413      	add	r3, r2
 800caf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cafc:	461a      	mov	r2, r3
 800cafe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cb02:	6093      	str	r3, [r2, #8]
 800cb04:	6878      	ldr	r0, [r7, #4]
 800cb06:	f008 faed 	bl	80150e4 <HAL_PCD_SetupStageCallback>
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6818      	ldr	r0, [r3, #0]
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800cb14:	461a      	mov	r2, r3
 800cb16:	2101      	movs	r1, #1
 800cb18:	f003 faf6 	bl	8010108 <USB_EP0_OutStart>
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	015a      	lsls	r2, r3, #5
 800cb20:	693b      	ldr	r3, [r7, #16]
 800cb22:	4413      	add	r3, r2
 800cb24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb28:	461a      	mov	r2, r3
 800cb2a:	2308      	movs	r3, #8
 800cb2c:	6093      	str	r3, [r2, #8]
 800cb2e:	e0b3      	b.n	800cc98 <PCD_EP_OutXfrComplete_int+0x1fc>
 800cb30:	68bb      	ldr	r3, [r7, #8]
 800cb32:	f003 0320 	and.w	r3, r3, #32
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d009      	beq.n	800cb4e <PCD_EP_OutXfrComplete_int+0xb2>
 800cb3a:	683b      	ldr	r3, [r7, #0]
 800cb3c:	015a      	lsls	r2, r3, #5
 800cb3e:	693b      	ldr	r3, [r7, #16]
 800cb40:	4413      	add	r3, r2
 800cb42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb46:	461a      	mov	r2, r3
 800cb48:	2320      	movs	r3, #32
 800cb4a:	6093      	str	r3, [r2, #8]
 800cb4c:	e0a4      	b.n	800cc98 <PCD_EP_OutXfrComplete_int+0x1fc>
 800cb4e:	68bb      	ldr	r3, [r7, #8]
 800cb50:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	f040 809f 	bne.w	800cc98 <PCD_EP_OutXfrComplete_int+0x1fc>
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	4a51      	ldr	r2, [pc, #324]	; (800cca4 <PCD_EP_OutXfrComplete_int+0x208>)
 800cb5e:	4293      	cmp	r3, r2
 800cb60:	d90f      	bls.n	800cb82 <PCD_EP_OutXfrComplete_int+0xe6>
 800cb62:	68bb      	ldr	r3, [r7, #8]
 800cb64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d00a      	beq.n	800cb82 <PCD_EP_OutXfrComplete_int+0xe6>
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	015a      	lsls	r2, r3, #5
 800cb70:	693b      	ldr	r3, [r7, #16]
 800cb72:	4413      	add	r3, r2
 800cb74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb78:	461a      	mov	r2, r3
 800cb7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cb7e:	6093      	str	r3, [r2, #8]
 800cb80:	e08a      	b.n	800cc98 <PCD_EP_OutXfrComplete_int+0x1fc>
 800cb82:	6879      	ldr	r1, [r7, #4]
 800cb84:	683a      	ldr	r2, [r7, #0]
 800cb86:	4613      	mov	r3, r2
 800cb88:	00db      	lsls	r3, r3, #3
 800cb8a:	1a9b      	subs	r3, r3, r2
 800cb8c:	009b      	lsls	r3, r3, #2
 800cb8e:	440b      	add	r3, r1
 800cb90:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800cb94:	681a      	ldr	r2, [r3, #0]
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	0159      	lsls	r1, r3, #5
 800cb9a:	693b      	ldr	r3, [r7, #16]
 800cb9c:	440b      	add	r3, r1
 800cb9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cba2:	691b      	ldr	r3, [r3, #16]
 800cba4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cba8:	1ad1      	subs	r1, r2, r3
 800cbaa:	6878      	ldr	r0, [r7, #4]
 800cbac:	683a      	ldr	r2, [r7, #0]
 800cbae:	4613      	mov	r3, r2
 800cbb0:	00db      	lsls	r3, r3, #3
 800cbb2:	1a9b      	subs	r3, r3, r2
 800cbb4:	009b      	lsls	r3, r3, #2
 800cbb6:	4403      	add	r3, r0
 800cbb8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800cbbc:	6019      	str	r1, [r3, #0]
 800cbbe:	6879      	ldr	r1, [r7, #4]
 800cbc0:	683a      	ldr	r2, [r7, #0]
 800cbc2:	4613      	mov	r3, r2
 800cbc4:	00db      	lsls	r3, r3, #3
 800cbc6:	1a9b      	subs	r3, r3, r2
 800cbc8:	009b      	lsls	r3, r3, #2
 800cbca:	440b      	add	r3, r1
 800cbcc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800cbd0:	6819      	ldr	r1, [r3, #0]
 800cbd2:	6878      	ldr	r0, [r7, #4]
 800cbd4:	683a      	ldr	r2, [r7, #0]
 800cbd6:	4613      	mov	r3, r2
 800cbd8:	00db      	lsls	r3, r3, #3
 800cbda:	1a9b      	subs	r3, r3, r2
 800cbdc:	009b      	lsls	r3, r3, #2
 800cbde:	4403      	add	r3, r0
 800cbe0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	4419      	add	r1, r3
 800cbe8:	6878      	ldr	r0, [r7, #4]
 800cbea:	683a      	ldr	r2, [r7, #0]
 800cbec:	4613      	mov	r3, r2
 800cbee:	00db      	lsls	r3, r3, #3
 800cbf0:	1a9b      	subs	r3, r3, r2
 800cbf2:	009b      	lsls	r3, r3, #2
 800cbf4:	4403      	add	r3, r0
 800cbf6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800cbfa:	6019      	str	r1, [r3, #0]
 800cbfc:	683b      	ldr	r3, [r7, #0]
 800cbfe:	b2db      	uxtb	r3, r3
 800cc00:	4619      	mov	r1, r3
 800cc02:	6878      	ldr	r0, [r7, #4]
 800cc04:	f008 fa80 	bl	8015108 <HAL_PCD_DataOutStageCallback>
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d144      	bne.n	800cc98 <PCD_EP_OutXfrComplete_int+0x1fc>
 800cc0e:	6879      	ldr	r1, [r7, #4]
 800cc10:	683a      	ldr	r2, [r7, #0]
 800cc12:	4613      	mov	r3, r2
 800cc14:	00db      	lsls	r3, r3, #3
 800cc16:	1a9b      	subs	r3, r3, r2
 800cc18:	009b      	lsls	r3, r3, #2
 800cc1a:	440b      	add	r3, r1
 800cc1c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d138      	bne.n	800cc98 <PCD_EP_OutXfrComplete_int+0x1fc>
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	6818      	ldr	r0, [r3, #0]
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800cc30:	461a      	mov	r2, r3
 800cc32:	2101      	movs	r1, #1
 800cc34:	f003 fa68 	bl	8010108 <USB_EP0_OutStart>
 800cc38:	e02e      	b.n	800cc98 <PCD_EP_OutXfrComplete_int+0x1fc>
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	4a1a      	ldr	r2, [pc, #104]	; (800cca8 <PCD_EP_OutXfrComplete_int+0x20c>)
 800cc3e:	4293      	cmp	r3, r2
 800cc40:	d124      	bne.n	800cc8c <PCD_EP_OutXfrComplete_int+0x1f0>
 800cc42:	68bb      	ldr	r3, [r7, #8]
 800cc44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d00a      	beq.n	800cc62 <PCD_EP_OutXfrComplete_int+0x1c6>
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	015a      	lsls	r2, r3, #5
 800cc50:	693b      	ldr	r3, [r7, #16]
 800cc52:	4413      	add	r3, r2
 800cc54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc58:	461a      	mov	r2, r3
 800cc5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cc5e:	6093      	str	r3, [r2, #8]
 800cc60:	e01a      	b.n	800cc98 <PCD_EP_OutXfrComplete_int+0x1fc>
 800cc62:	68bb      	ldr	r3, [r7, #8]
 800cc64:	f003 0320 	and.w	r3, r3, #32
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d008      	beq.n	800cc7e <PCD_EP_OutXfrComplete_int+0x1e2>
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	015a      	lsls	r2, r3, #5
 800cc70:	693b      	ldr	r3, [r7, #16]
 800cc72:	4413      	add	r3, r2
 800cc74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc78:	461a      	mov	r2, r3
 800cc7a:	2320      	movs	r3, #32
 800cc7c:	6093      	str	r3, [r2, #8]
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	b2db      	uxtb	r3, r3
 800cc82:	4619      	mov	r1, r3
 800cc84:	6878      	ldr	r0, [r7, #4]
 800cc86:	f008 fa3f 	bl	8015108 <HAL_PCD_DataOutStageCallback>
 800cc8a:	e005      	b.n	800cc98 <PCD_EP_OutXfrComplete_int+0x1fc>
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	b2db      	uxtb	r3, r3
 800cc90:	4619      	mov	r1, r3
 800cc92:	6878      	ldr	r0, [r7, #4]
 800cc94:	f008 fa38 	bl	8015108 <HAL_PCD_DataOutStageCallback>
 800cc98:	2300      	movs	r3, #0
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	3718      	adds	r7, #24
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}
 800cca2:	bf00      	nop
 800cca4:	4f54300a 	.word	0x4f54300a
 800cca8:	4f54310a 	.word	0x4f54310a

0800ccac <PCD_EP_OutSetupPacket_int>:
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b086      	sub	sp, #24
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
 800ccb4:	6039      	str	r1, [r7, #0]
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	617b      	str	r3, [r7, #20]
 800ccbc:	697b      	ldr	r3, [r7, #20]
 800ccbe:	613b      	str	r3, [r7, #16]
 800ccc0:	697b      	ldr	r3, [r7, #20]
 800ccc2:	333c      	adds	r3, #60	; 0x3c
 800ccc4:	3304      	adds	r3, #4
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	60fb      	str	r3, [r7, #12]
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	015a      	lsls	r2, r3, #5
 800ccce:	693b      	ldr	r3, [r7, #16]
 800ccd0:	4413      	add	r3, r2
 800ccd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccd6:	689b      	ldr	r3, [r3, #8]
 800ccd8:	60bb      	str	r3, [r7, #8]
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	691b      	ldr	r3, [r3, #16]
 800ccde:	2b01      	cmp	r3, #1
 800cce0:	d113      	bne.n	800cd0a <PCD_EP_OutSetupPacket_int+0x5e>
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	4a1f      	ldr	r2, [pc, #124]	; (800cd64 <PCD_EP_OutSetupPacket_int+0xb8>)
 800cce6:	4293      	cmp	r3, r2
 800cce8:	d922      	bls.n	800cd30 <PCD_EP_OutSetupPacket_int+0x84>
 800ccea:	68bb      	ldr	r3, [r7, #8]
 800ccec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d01d      	beq.n	800cd30 <PCD_EP_OutSetupPacket_int+0x84>
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	015a      	lsls	r2, r3, #5
 800ccf8:	693b      	ldr	r3, [r7, #16]
 800ccfa:	4413      	add	r3, r2
 800ccfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd00:	461a      	mov	r2, r3
 800cd02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cd06:	6093      	str	r3, [r2, #8]
 800cd08:	e012      	b.n	800cd30 <PCD_EP_OutSetupPacket_int+0x84>
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	4a16      	ldr	r2, [pc, #88]	; (800cd68 <PCD_EP_OutSetupPacket_int+0xbc>)
 800cd0e:	4293      	cmp	r3, r2
 800cd10:	d10e      	bne.n	800cd30 <PCD_EP_OutSetupPacket_int+0x84>
 800cd12:	68bb      	ldr	r3, [r7, #8]
 800cd14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d009      	beq.n	800cd30 <PCD_EP_OutSetupPacket_int+0x84>
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	015a      	lsls	r2, r3, #5
 800cd20:	693b      	ldr	r3, [r7, #16]
 800cd22:	4413      	add	r3, r2
 800cd24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd28:	461a      	mov	r2, r3
 800cd2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cd2e:	6093      	str	r3, [r2, #8]
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	f008 f9d7 	bl	80150e4 <HAL_PCD_SetupStageCallback>
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	4a0a      	ldr	r2, [pc, #40]	; (800cd64 <PCD_EP_OutSetupPacket_int+0xb8>)
 800cd3a:	4293      	cmp	r3, r2
 800cd3c:	d90c      	bls.n	800cd58 <PCD_EP_OutSetupPacket_int+0xac>
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	691b      	ldr	r3, [r3, #16]
 800cd42:	2b01      	cmp	r3, #1
 800cd44:	d108      	bne.n	800cd58 <PCD_EP_OutSetupPacket_int+0xac>
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	6818      	ldr	r0, [r3, #0]
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800cd50:	461a      	mov	r2, r3
 800cd52:	2101      	movs	r1, #1
 800cd54:	f003 f9d8 	bl	8010108 <USB_EP0_OutStart>
 800cd58:	2300      	movs	r3, #0
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	3718      	adds	r7, #24
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bd80      	pop	{r7, pc}
 800cd62:	bf00      	nop
 800cd64:	4f54300a 	.word	0x4f54300a
 800cd68:	4f54310a 	.word	0x4f54310a

0800cd6c <HAL_PCDEx_SetTxFiFo>:
 800cd6c:	b480      	push	{r7}
 800cd6e:	b085      	sub	sp, #20
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
 800cd74:	460b      	mov	r3, r1
 800cd76:	70fb      	strb	r3, [r7, #3]
 800cd78:	4613      	mov	r3, r2
 800cd7a:	803b      	strh	r3, [r7, #0]
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd82:	60bb      	str	r3, [r7, #8]
 800cd84:	78fb      	ldrb	r3, [r7, #3]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d107      	bne.n	800cd9a <HAL_PCDEx_SetTxFiFo+0x2e>
 800cd8a:	883b      	ldrh	r3, [r7, #0]
 800cd8c:	0419      	lsls	r1, r3, #16
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	68ba      	ldr	r2, [r7, #8]
 800cd94:	430a      	orrs	r2, r1
 800cd96:	629a      	str	r2, [r3, #40]	; 0x28
 800cd98:	e028      	b.n	800cdec <HAL_PCDEx_SetTxFiFo+0x80>
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cda0:	0c1b      	lsrs	r3, r3, #16
 800cda2:	68ba      	ldr	r2, [r7, #8]
 800cda4:	4413      	add	r3, r2
 800cda6:	60bb      	str	r3, [r7, #8]
 800cda8:	2300      	movs	r3, #0
 800cdaa:	73fb      	strb	r3, [r7, #15]
 800cdac:	e00d      	b.n	800cdca <HAL_PCDEx_SetTxFiFo+0x5e>
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681a      	ldr	r2, [r3, #0]
 800cdb2:	7bfb      	ldrb	r3, [r7, #15]
 800cdb4:	3340      	adds	r3, #64	; 0x40
 800cdb6:	009b      	lsls	r3, r3, #2
 800cdb8:	4413      	add	r3, r2
 800cdba:	685b      	ldr	r3, [r3, #4]
 800cdbc:	0c1b      	lsrs	r3, r3, #16
 800cdbe:	68ba      	ldr	r2, [r7, #8]
 800cdc0:	4413      	add	r3, r2
 800cdc2:	60bb      	str	r3, [r7, #8]
 800cdc4:	7bfb      	ldrb	r3, [r7, #15]
 800cdc6:	3301      	adds	r3, #1
 800cdc8:	73fb      	strb	r3, [r7, #15]
 800cdca:	7bfa      	ldrb	r2, [r7, #15]
 800cdcc:	78fb      	ldrb	r3, [r7, #3]
 800cdce:	3b01      	subs	r3, #1
 800cdd0:	429a      	cmp	r2, r3
 800cdd2:	d3ec      	bcc.n	800cdae <HAL_PCDEx_SetTxFiFo+0x42>
 800cdd4:	883b      	ldrh	r3, [r7, #0]
 800cdd6:	0418      	lsls	r0, r3, #16
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	6819      	ldr	r1, [r3, #0]
 800cddc:	78fb      	ldrb	r3, [r7, #3]
 800cdde:	3b01      	subs	r3, #1
 800cde0:	68ba      	ldr	r2, [r7, #8]
 800cde2:	4302      	orrs	r2, r0
 800cde4:	3340      	adds	r3, #64	; 0x40
 800cde6:	009b      	lsls	r3, r3, #2
 800cde8:	440b      	add	r3, r1
 800cdea:	605a      	str	r2, [r3, #4]
 800cdec:	2300      	movs	r3, #0
 800cdee:	4618      	mov	r0, r3
 800cdf0:	3714      	adds	r7, #20
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf8:	4770      	bx	lr

0800cdfa <HAL_PCDEx_SetRxFiFo>:
 800cdfa:	b480      	push	{r7}
 800cdfc:	b083      	sub	sp, #12
 800cdfe:	af00      	add	r7, sp, #0
 800ce00:	6078      	str	r0, [r7, #4]
 800ce02:	460b      	mov	r3, r1
 800ce04:	807b      	strh	r3, [r7, #2]
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	887a      	ldrh	r2, [r7, #2]
 800ce0c:	625a      	str	r2, [r3, #36]	; 0x24
 800ce0e:	2300      	movs	r3, #0
 800ce10:	4618      	mov	r0, r3
 800ce12:	370c      	adds	r7, #12
 800ce14:	46bd      	mov	sp, r7
 800ce16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1a:	4770      	bx	lr

0800ce1c <HAL_PCDEx_LPM_Callback>:
 800ce1c:	b480      	push	{r7}
 800ce1e:	b083      	sub	sp, #12
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
 800ce24:	460b      	mov	r3, r1
 800ce26:	70fb      	strb	r3, [r7, #3]
 800ce28:	bf00      	nop
 800ce2a:	370c      	adds	r7, #12
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce32:	4770      	bx	lr

0800ce34 <HAL_RCC_OscConfig>:
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b086      	sub	sp, #24
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d101      	bne.n	800ce46 <HAL_RCC_OscConfig+0x12>
 800ce42:	2301      	movs	r3, #1
 800ce44:	e25b      	b.n	800d2fe <HAL_RCC_OscConfig+0x4ca>
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	f003 0301 	and.w	r3, r3, #1
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d075      	beq.n	800cf3e <HAL_RCC_OscConfig+0x10a>
 800ce52:	4ba3      	ldr	r3, [pc, #652]	; (800d0e0 <HAL_RCC_OscConfig+0x2ac>)
 800ce54:	689b      	ldr	r3, [r3, #8]
 800ce56:	f003 030c 	and.w	r3, r3, #12
 800ce5a:	2b04      	cmp	r3, #4
 800ce5c:	d00c      	beq.n	800ce78 <HAL_RCC_OscConfig+0x44>
 800ce5e:	4ba0      	ldr	r3, [pc, #640]	; (800d0e0 <HAL_RCC_OscConfig+0x2ac>)
 800ce60:	689b      	ldr	r3, [r3, #8]
 800ce62:	f003 030c 	and.w	r3, r3, #12
 800ce66:	2b08      	cmp	r3, #8
 800ce68:	d112      	bne.n	800ce90 <HAL_RCC_OscConfig+0x5c>
 800ce6a:	4b9d      	ldr	r3, [pc, #628]	; (800d0e0 <HAL_RCC_OscConfig+0x2ac>)
 800ce6c:	685b      	ldr	r3, [r3, #4]
 800ce6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ce72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ce76:	d10b      	bne.n	800ce90 <HAL_RCC_OscConfig+0x5c>
 800ce78:	4b99      	ldr	r3, [pc, #612]	; (800d0e0 <HAL_RCC_OscConfig+0x2ac>)
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d05b      	beq.n	800cf3c <HAL_RCC_OscConfig+0x108>
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	685b      	ldr	r3, [r3, #4]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d157      	bne.n	800cf3c <HAL_RCC_OscConfig+0x108>
 800ce8c:	2301      	movs	r3, #1
 800ce8e:	e236      	b.n	800d2fe <HAL_RCC_OscConfig+0x4ca>
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	685b      	ldr	r3, [r3, #4]
 800ce94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce98:	d106      	bne.n	800cea8 <HAL_RCC_OscConfig+0x74>
 800ce9a:	4b91      	ldr	r3, [pc, #580]	; (800d0e0 <HAL_RCC_OscConfig+0x2ac>)
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	4a90      	ldr	r2, [pc, #576]	; (800d0e0 <HAL_RCC_OscConfig+0x2ac>)
 800cea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cea4:	6013      	str	r3, [r2, #0]
 800cea6:	e01d      	b.n	800cee4 <HAL_RCC_OscConfig+0xb0>
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	685b      	ldr	r3, [r3, #4]
 800ceac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ceb0:	d10c      	bne.n	800cecc <HAL_RCC_OscConfig+0x98>
 800ceb2:	4b8b      	ldr	r3, [pc, #556]	; (800d0e0 <HAL_RCC_OscConfig+0x2ac>)
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	4a8a      	ldr	r2, [pc, #552]	; (800d0e0 <HAL_RCC_OscConfig+0x2ac>)
 800ceb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cebc:	6013      	str	r3, [r2, #0]
 800cebe:	4b88      	ldr	r3, [pc, #544]	; (800d0e0 <HAL_RCC_OscConfig+0x2ac>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	4a87      	ldr	r2, [pc, #540]	; (800d0e0 <HAL_RCC_OscConfig+0x2ac>)
 800cec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cec8:	6013      	str	r3, [r2, #0]
 800ceca:	e00b      	b.n	800cee4 <HAL_RCC_OscConfig+0xb0>
 800cecc:	4b84      	ldr	r3, [pc, #528]	; (800d0e0 <HAL_RCC_OscConfig+0x2ac>)
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	4a83      	ldr	r2, [pc, #524]	; (800d0e0 <HAL_RCC_OscConfig+0x2ac>)
 800ced2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ced6:	6013      	str	r3, [r2, #0]
 800ced8:	4b81      	ldr	r3, [pc, #516]	; (800d0e0 <HAL_RCC_OscConfig+0x2ac>)
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	4a80      	ldr	r2, [pc, #512]	; (800d0e0 <HAL_RCC_OscConfig+0x2ac>)
 800cede:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cee2:	6013      	str	r3, [r2, #0]
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	685b      	ldr	r3, [r3, #4]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d013      	beq.n	800cf14 <HAL_RCC_OscConfig+0xe0>
 800ceec:	f7fd ff60 	bl	800adb0 <HAL_GetTick>
 800cef0:	6138      	str	r0, [r7, #16]
 800cef2:	e008      	b.n	800cf06 <HAL_RCC_OscConfig+0xd2>
 800cef4:	f7fd ff5c 	bl	800adb0 <HAL_GetTick>
 800cef8:	4602      	mov	r2, r0
 800cefa:	693b      	ldr	r3, [r7, #16]
 800cefc:	1ad3      	subs	r3, r2, r3
 800cefe:	2b64      	cmp	r3, #100	; 0x64
 800cf00:	d901      	bls.n	800cf06 <HAL_RCC_OscConfig+0xd2>
 800cf02:	2303      	movs	r3, #3
 800cf04:	e1fb      	b.n	800d2fe <HAL_RCC_OscConfig+0x4ca>
 800cf06:	4b76      	ldr	r3, [pc, #472]	; (800d0e0 <HAL_RCC_OscConfig+0x2ac>)
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d0f0      	beq.n	800cef4 <HAL_RCC_OscConfig+0xc0>
 800cf12:	e014      	b.n	800cf3e <HAL_RCC_OscConfig+0x10a>
 800cf14:	f7fd ff4c 	bl	800adb0 <HAL_GetTick>
 800cf18:	6138      	str	r0, [r7, #16]
 800cf1a:	e008      	b.n	800cf2e <HAL_RCC_OscConfig+0xfa>
 800cf1c:	f7fd ff48 	bl	800adb0 <HAL_GetTick>
 800cf20:	4602      	mov	r2, r0
 800cf22:	693b      	ldr	r3, [r7, #16]
 800cf24:	1ad3      	subs	r3, r2, r3
 800cf26:	2b64      	cmp	r3, #100	; 0x64
 800cf28:	d901      	bls.n	800cf2e <HAL_RCC_OscConfig+0xfa>
 800cf2a:	2303      	movs	r3, #3
 800cf2c:	e1e7      	b.n	800d2fe <HAL_RCC_OscConfig+0x4ca>
 800cf2e:	4b6c      	ldr	r3, [pc, #432]	; (800d0e0 <HAL_RCC_OscConfig+0x2ac>)
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d1f0      	bne.n	800cf1c <HAL_RCC_OscConfig+0xe8>
 800cf3a:	e000      	b.n	800cf3e <HAL_RCC_OscConfig+0x10a>
 800cf3c:	bf00      	nop
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	f003 0302 	and.w	r3, r3, #2
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d063      	beq.n	800d012 <HAL_RCC_OscConfig+0x1de>
 800cf4a:	4b65      	ldr	r3, [pc, #404]	; (800d0e0 <HAL_RCC_OscConfig+0x2ac>)
 800cf4c:	689b      	ldr	r3, [r3, #8]
 800cf4e:	f003 030c 	and.w	r3, r3, #12
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d00b      	beq.n	800cf6e <HAL_RCC_OscConfig+0x13a>
 800cf56:	4b62      	ldr	r3, [pc, #392]	; (800d0e0 <HAL_RCC_OscConfig+0x2ac>)
 800cf58:	689b      	ldr	r3, [r3, #8]
 800cf5a:	f003 030c 	and.w	r3, r3, #12
 800cf5e:	2b08      	cmp	r3, #8
 800cf60:	d11c      	bne.n	800cf9c <HAL_RCC_OscConfig+0x168>
 800cf62:	4b5f      	ldr	r3, [pc, #380]	; (800d0e0 <HAL_RCC_OscConfig+0x2ac>)
 800cf64:	685b      	ldr	r3, [r3, #4]
 800cf66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d116      	bne.n	800cf9c <HAL_RCC_OscConfig+0x168>
 800cf6e:	4b5c      	ldr	r3, [pc, #368]	; (800d0e0 <HAL_RCC_OscConfig+0x2ac>)
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	f003 0302 	and.w	r3, r3, #2
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d005      	beq.n	800cf86 <HAL_RCC_OscConfig+0x152>
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	68db      	ldr	r3, [r3, #12]
 800cf7e:	2b01      	cmp	r3, #1
 800cf80:	d001      	beq.n	800cf86 <HAL_RCC_OscConfig+0x152>
 800cf82:	2301      	movs	r3, #1
 800cf84:	e1bb      	b.n	800d2fe <HAL_RCC_OscConfig+0x4ca>
 800cf86:	4b56      	ldr	r3, [pc, #344]	; (800d0e0 <HAL_RCC_OscConfig+0x2ac>)
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	691b      	ldr	r3, [r3, #16]
 800cf92:	00db      	lsls	r3, r3, #3
 800cf94:	4952      	ldr	r1, [pc, #328]	; (800d0e0 <HAL_RCC_OscConfig+0x2ac>)
 800cf96:	4313      	orrs	r3, r2
 800cf98:	600b      	str	r3, [r1, #0]
 800cf9a:	e03a      	b.n	800d012 <HAL_RCC_OscConfig+0x1de>
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	68db      	ldr	r3, [r3, #12]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d020      	beq.n	800cfe6 <HAL_RCC_OscConfig+0x1b2>
 800cfa4:	4b4f      	ldr	r3, [pc, #316]	; (800d0e4 <HAL_RCC_OscConfig+0x2b0>)
 800cfa6:	2201      	movs	r2, #1
 800cfa8:	601a      	str	r2, [r3, #0]
 800cfaa:	f7fd ff01 	bl	800adb0 <HAL_GetTick>
 800cfae:	6138      	str	r0, [r7, #16]
 800cfb0:	e008      	b.n	800cfc4 <HAL_RCC_OscConfig+0x190>
 800cfb2:	f7fd fefd 	bl	800adb0 <HAL_GetTick>
 800cfb6:	4602      	mov	r2, r0
 800cfb8:	693b      	ldr	r3, [r7, #16]
 800cfba:	1ad3      	subs	r3, r2, r3
 800cfbc:	2b02      	cmp	r3, #2
 800cfbe:	d901      	bls.n	800cfc4 <HAL_RCC_OscConfig+0x190>
 800cfc0:	2303      	movs	r3, #3
 800cfc2:	e19c      	b.n	800d2fe <HAL_RCC_OscConfig+0x4ca>
 800cfc4:	4b46      	ldr	r3, [pc, #280]	; (800d0e0 <HAL_RCC_OscConfig+0x2ac>)
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	f003 0302 	and.w	r3, r3, #2
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d0f0      	beq.n	800cfb2 <HAL_RCC_OscConfig+0x17e>
 800cfd0:	4b43      	ldr	r3, [pc, #268]	; (800d0e0 <HAL_RCC_OscConfig+0x2ac>)
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	691b      	ldr	r3, [r3, #16]
 800cfdc:	00db      	lsls	r3, r3, #3
 800cfde:	4940      	ldr	r1, [pc, #256]	; (800d0e0 <HAL_RCC_OscConfig+0x2ac>)
 800cfe0:	4313      	orrs	r3, r2
 800cfe2:	600b      	str	r3, [r1, #0]
 800cfe4:	e015      	b.n	800d012 <HAL_RCC_OscConfig+0x1de>
 800cfe6:	4b3f      	ldr	r3, [pc, #252]	; (800d0e4 <HAL_RCC_OscConfig+0x2b0>)
 800cfe8:	2200      	movs	r2, #0
 800cfea:	601a      	str	r2, [r3, #0]
 800cfec:	f7fd fee0 	bl	800adb0 <HAL_GetTick>
 800cff0:	6138      	str	r0, [r7, #16]
 800cff2:	e008      	b.n	800d006 <HAL_RCC_OscConfig+0x1d2>
 800cff4:	f7fd fedc 	bl	800adb0 <HAL_GetTick>
 800cff8:	4602      	mov	r2, r0
 800cffa:	693b      	ldr	r3, [r7, #16]
 800cffc:	1ad3      	subs	r3, r2, r3
 800cffe:	2b02      	cmp	r3, #2
 800d000:	d901      	bls.n	800d006 <HAL_RCC_OscConfig+0x1d2>
 800d002:	2303      	movs	r3, #3
 800d004:	e17b      	b.n	800d2fe <HAL_RCC_OscConfig+0x4ca>
 800d006:	4b36      	ldr	r3, [pc, #216]	; (800d0e0 <HAL_RCC_OscConfig+0x2ac>)
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	f003 0302 	and.w	r3, r3, #2
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d1f0      	bne.n	800cff4 <HAL_RCC_OscConfig+0x1c0>
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	f003 0308 	and.w	r3, r3, #8
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d030      	beq.n	800d080 <HAL_RCC_OscConfig+0x24c>
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	695b      	ldr	r3, [r3, #20]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d016      	beq.n	800d054 <HAL_RCC_OscConfig+0x220>
 800d026:	4b30      	ldr	r3, [pc, #192]	; (800d0e8 <HAL_RCC_OscConfig+0x2b4>)
 800d028:	2201      	movs	r2, #1
 800d02a:	601a      	str	r2, [r3, #0]
 800d02c:	f7fd fec0 	bl	800adb0 <HAL_GetTick>
 800d030:	6138      	str	r0, [r7, #16]
 800d032:	e008      	b.n	800d046 <HAL_RCC_OscConfig+0x212>
 800d034:	f7fd febc 	bl	800adb0 <HAL_GetTick>
 800d038:	4602      	mov	r2, r0
 800d03a:	693b      	ldr	r3, [r7, #16]
 800d03c:	1ad3      	subs	r3, r2, r3
 800d03e:	2b02      	cmp	r3, #2
 800d040:	d901      	bls.n	800d046 <HAL_RCC_OscConfig+0x212>
 800d042:	2303      	movs	r3, #3
 800d044:	e15b      	b.n	800d2fe <HAL_RCC_OscConfig+0x4ca>
 800d046:	4b26      	ldr	r3, [pc, #152]	; (800d0e0 <HAL_RCC_OscConfig+0x2ac>)
 800d048:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d04a:	f003 0302 	and.w	r3, r3, #2
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d0f0      	beq.n	800d034 <HAL_RCC_OscConfig+0x200>
 800d052:	e015      	b.n	800d080 <HAL_RCC_OscConfig+0x24c>
 800d054:	4b24      	ldr	r3, [pc, #144]	; (800d0e8 <HAL_RCC_OscConfig+0x2b4>)
 800d056:	2200      	movs	r2, #0
 800d058:	601a      	str	r2, [r3, #0]
 800d05a:	f7fd fea9 	bl	800adb0 <HAL_GetTick>
 800d05e:	6138      	str	r0, [r7, #16]
 800d060:	e008      	b.n	800d074 <HAL_RCC_OscConfig+0x240>
 800d062:	f7fd fea5 	bl	800adb0 <HAL_GetTick>
 800d066:	4602      	mov	r2, r0
 800d068:	693b      	ldr	r3, [r7, #16]
 800d06a:	1ad3      	subs	r3, r2, r3
 800d06c:	2b02      	cmp	r3, #2
 800d06e:	d901      	bls.n	800d074 <HAL_RCC_OscConfig+0x240>
 800d070:	2303      	movs	r3, #3
 800d072:	e144      	b.n	800d2fe <HAL_RCC_OscConfig+0x4ca>
 800d074:	4b1a      	ldr	r3, [pc, #104]	; (800d0e0 <HAL_RCC_OscConfig+0x2ac>)
 800d076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d078:	f003 0302 	and.w	r3, r3, #2
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d1f0      	bne.n	800d062 <HAL_RCC_OscConfig+0x22e>
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	f003 0304 	and.w	r3, r3, #4
 800d088:	2b00      	cmp	r3, #0
 800d08a:	f000 80a0 	beq.w	800d1ce <HAL_RCC_OscConfig+0x39a>
 800d08e:	2300      	movs	r3, #0
 800d090:	75fb      	strb	r3, [r7, #23]
 800d092:	4b13      	ldr	r3, [pc, #76]	; (800d0e0 <HAL_RCC_OscConfig+0x2ac>)
 800d094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d10f      	bne.n	800d0be <HAL_RCC_OscConfig+0x28a>
 800d09e:	2300      	movs	r3, #0
 800d0a0:	60bb      	str	r3, [r7, #8]
 800d0a2:	4b0f      	ldr	r3, [pc, #60]	; (800d0e0 <HAL_RCC_OscConfig+0x2ac>)
 800d0a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0a6:	4a0e      	ldr	r2, [pc, #56]	; (800d0e0 <HAL_RCC_OscConfig+0x2ac>)
 800d0a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d0ac:	6413      	str	r3, [r2, #64]	; 0x40
 800d0ae:	4b0c      	ldr	r3, [pc, #48]	; (800d0e0 <HAL_RCC_OscConfig+0x2ac>)
 800d0b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d0b6:	60bb      	str	r3, [r7, #8]
 800d0b8:	68bb      	ldr	r3, [r7, #8]
 800d0ba:	2301      	movs	r3, #1
 800d0bc:	75fb      	strb	r3, [r7, #23]
 800d0be:	4b0b      	ldr	r3, [pc, #44]	; (800d0ec <HAL_RCC_OscConfig+0x2b8>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d121      	bne.n	800d10e <HAL_RCC_OscConfig+0x2da>
 800d0ca:	4b08      	ldr	r3, [pc, #32]	; (800d0ec <HAL_RCC_OscConfig+0x2b8>)
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	4a07      	ldr	r2, [pc, #28]	; (800d0ec <HAL_RCC_OscConfig+0x2b8>)
 800d0d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d0d4:	6013      	str	r3, [r2, #0]
 800d0d6:	f7fd fe6b 	bl	800adb0 <HAL_GetTick>
 800d0da:	6138      	str	r0, [r7, #16]
 800d0dc:	e011      	b.n	800d102 <HAL_RCC_OscConfig+0x2ce>
 800d0de:	bf00      	nop
 800d0e0:	40023800 	.word	0x40023800
 800d0e4:	42470000 	.word	0x42470000
 800d0e8:	42470e80 	.word	0x42470e80
 800d0ec:	40007000 	.word	0x40007000
 800d0f0:	f7fd fe5e 	bl	800adb0 <HAL_GetTick>
 800d0f4:	4602      	mov	r2, r0
 800d0f6:	693b      	ldr	r3, [r7, #16]
 800d0f8:	1ad3      	subs	r3, r2, r3
 800d0fa:	2b02      	cmp	r3, #2
 800d0fc:	d901      	bls.n	800d102 <HAL_RCC_OscConfig+0x2ce>
 800d0fe:	2303      	movs	r3, #3
 800d100:	e0fd      	b.n	800d2fe <HAL_RCC_OscConfig+0x4ca>
 800d102:	4b81      	ldr	r3, [pc, #516]	; (800d308 <HAL_RCC_OscConfig+0x4d4>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d0f0      	beq.n	800d0f0 <HAL_RCC_OscConfig+0x2bc>
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	689b      	ldr	r3, [r3, #8]
 800d112:	2b01      	cmp	r3, #1
 800d114:	d106      	bne.n	800d124 <HAL_RCC_OscConfig+0x2f0>
 800d116:	4b7d      	ldr	r3, [pc, #500]	; (800d30c <HAL_RCC_OscConfig+0x4d8>)
 800d118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d11a:	4a7c      	ldr	r2, [pc, #496]	; (800d30c <HAL_RCC_OscConfig+0x4d8>)
 800d11c:	f043 0301 	orr.w	r3, r3, #1
 800d120:	6713      	str	r3, [r2, #112]	; 0x70
 800d122:	e01c      	b.n	800d15e <HAL_RCC_OscConfig+0x32a>
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	689b      	ldr	r3, [r3, #8]
 800d128:	2b05      	cmp	r3, #5
 800d12a:	d10c      	bne.n	800d146 <HAL_RCC_OscConfig+0x312>
 800d12c:	4b77      	ldr	r3, [pc, #476]	; (800d30c <HAL_RCC_OscConfig+0x4d8>)
 800d12e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d130:	4a76      	ldr	r2, [pc, #472]	; (800d30c <HAL_RCC_OscConfig+0x4d8>)
 800d132:	f043 0304 	orr.w	r3, r3, #4
 800d136:	6713      	str	r3, [r2, #112]	; 0x70
 800d138:	4b74      	ldr	r3, [pc, #464]	; (800d30c <HAL_RCC_OscConfig+0x4d8>)
 800d13a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d13c:	4a73      	ldr	r2, [pc, #460]	; (800d30c <HAL_RCC_OscConfig+0x4d8>)
 800d13e:	f043 0301 	orr.w	r3, r3, #1
 800d142:	6713      	str	r3, [r2, #112]	; 0x70
 800d144:	e00b      	b.n	800d15e <HAL_RCC_OscConfig+0x32a>
 800d146:	4b71      	ldr	r3, [pc, #452]	; (800d30c <HAL_RCC_OscConfig+0x4d8>)
 800d148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d14a:	4a70      	ldr	r2, [pc, #448]	; (800d30c <HAL_RCC_OscConfig+0x4d8>)
 800d14c:	f023 0301 	bic.w	r3, r3, #1
 800d150:	6713      	str	r3, [r2, #112]	; 0x70
 800d152:	4b6e      	ldr	r3, [pc, #440]	; (800d30c <HAL_RCC_OscConfig+0x4d8>)
 800d154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d156:	4a6d      	ldr	r2, [pc, #436]	; (800d30c <HAL_RCC_OscConfig+0x4d8>)
 800d158:	f023 0304 	bic.w	r3, r3, #4
 800d15c:	6713      	str	r3, [r2, #112]	; 0x70
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	689b      	ldr	r3, [r3, #8]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d015      	beq.n	800d192 <HAL_RCC_OscConfig+0x35e>
 800d166:	f7fd fe23 	bl	800adb0 <HAL_GetTick>
 800d16a:	6138      	str	r0, [r7, #16]
 800d16c:	e00a      	b.n	800d184 <HAL_RCC_OscConfig+0x350>
 800d16e:	f7fd fe1f 	bl	800adb0 <HAL_GetTick>
 800d172:	4602      	mov	r2, r0
 800d174:	693b      	ldr	r3, [r7, #16]
 800d176:	1ad3      	subs	r3, r2, r3
 800d178:	f241 3288 	movw	r2, #5000	; 0x1388
 800d17c:	4293      	cmp	r3, r2
 800d17e:	d901      	bls.n	800d184 <HAL_RCC_OscConfig+0x350>
 800d180:	2303      	movs	r3, #3
 800d182:	e0bc      	b.n	800d2fe <HAL_RCC_OscConfig+0x4ca>
 800d184:	4b61      	ldr	r3, [pc, #388]	; (800d30c <HAL_RCC_OscConfig+0x4d8>)
 800d186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d188:	f003 0302 	and.w	r3, r3, #2
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d0ee      	beq.n	800d16e <HAL_RCC_OscConfig+0x33a>
 800d190:	e014      	b.n	800d1bc <HAL_RCC_OscConfig+0x388>
 800d192:	f7fd fe0d 	bl	800adb0 <HAL_GetTick>
 800d196:	6138      	str	r0, [r7, #16]
 800d198:	e00a      	b.n	800d1b0 <HAL_RCC_OscConfig+0x37c>
 800d19a:	f7fd fe09 	bl	800adb0 <HAL_GetTick>
 800d19e:	4602      	mov	r2, r0
 800d1a0:	693b      	ldr	r3, [r7, #16]
 800d1a2:	1ad3      	subs	r3, r2, r3
 800d1a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d1a8:	4293      	cmp	r3, r2
 800d1aa:	d901      	bls.n	800d1b0 <HAL_RCC_OscConfig+0x37c>
 800d1ac:	2303      	movs	r3, #3
 800d1ae:	e0a6      	b.n	800d2fe <HAL_RCC_OscConfig+0x4ca>
 800d1b0:	4b56      	ldr	r3, [pc, #344]	; (800d30c <HAL_RCC_OscConfig+0x4d8>)
 800d1b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1b4:	f003 0302 	and.w	r3, r3, #2
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d1ee      	bne.n	800d19a <HAL_RCC_OscConfig+0x366>
 800d1bc:	7dfb      	ldrb	r3, [r7, #23]
 800d1be:	2b01      	cmp	r3, #1
 800d1c0:	d105      	bne.n	800d1ce <HAL_RCC_OscConfig+0x39a>
 800d1c2:	4b52      	ldr	r3, [pc, #328]	; (800d30c <HAL_RCC_OscConfig+0x4d8>)
 800d1c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1c6:	4a51      	ldr	r2, [pc, #324]	; (800d30c <HAL_RCC_OscConfig+0x4d8>)
 800d1c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d1cc:	6413      	str	r3, [r2, #64]	; 0x40
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	699b      	ldr	r3, [r3, #24]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	f000 8092 	beq.w	800d2fc <HAL_RCC_OscConfig+0x4c8>
 800d1d8:	4b4c      	ldr	r3, [pc, #304]	; (800d30c <HAL_RCC_OscConfig+0x4d8>)
 800d1da:	689b      	ldr	r3, [r3, #8]
 800d1dc:	f003 030c 	and.w	r3, r3, #12
 800d1e0:	2b08      	cmp	r3, #8
 800d1e2:	d05c      	beq.n	800d29e <HAL_RCC_OscConfig+0x46a>
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	699b      	ldr	r3, [r3, #24]
 800d1e8:	2b02      	cmp	r3, #2
 800d1ea:	d141      	bne.n	800d270 <HAL_RCC_OscConfig+0x43c>
 800d1ec:	4b48      	ldr	r3, [pc, #288]	; (800d310 <HAL_RCC_OscConfig+0x4dc>)
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	601a      	str	r2, [r3, #0]
 800d1f2:	f7fd fddd 	bl	800adb0 <HAL_GetTick>
 800d1f6:	6138      	str	r0, [r7, #16]
 800d1f8:	e008      	b.n	800d20c <HAL_RCC_OscConfig+0x3d8>
 800d1fa:	f7fd fdd9 	bl	800adb0 <HAL_GetTick>
 800d1fe:	4602      	mov	r2, r0
 800d200:	693b      	ldr	r3, [r7, #16]
 800d202:	1ad3      	subs	r3, r2, r3
 800d204:	2b02      	cmp	r3, #2
 800d206:	d901      	bls.n	800d20c <HAL_RCC_OscConfig+0x3d8>
 800d208:	2303      	movs	r3, #3
 800d20a:	e078      	b.n	800d2fe <HAL_RCC_OscConfig+0x4ca>
 800d20c:	4b3f      	ldr	r3, [pc, #252]	; (800d30c <HAL_RCC_OscConfig+0x4d8>)
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d214:	2b00      	cmp	r3, #0
 800d216:	d1f0      	bne.n	800d1fa <HAL_RCC_OscConfig+0x3c6>
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	69da      	ldr	r2, [r3, #28]
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	6a1b      	ldr	r3, [r3, #32]
 800d220:	431a      	orrs	r2, r3
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d226:	019b      	lsls	r3, r3, #6
 800d228:	431a      	orrs	r2, r3
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d22e:	085b      	lsrs	r3, r3, #1
 800d230:	3b01      	subs	r3, #1
 800d232:	041b      	lsls	r3, r3, #16
 800d234:	431a      	orrs	r2, r3
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d23a:	061b      	lsls	r3, r3, #24
 800d23c:	4933      	ldr	r1, [pc, #204]	; (800d30c <HAL_RCC_OscConfig+0x4d8>)
 800d23e:	4313      	orrs	r3, r2
 800d240:	604b      	str	r3, [r1, #4]
 800d242:	4b33      	ldr	r3, [pc, #204]	; (800d310 <HAL_RCC_OscConfig+0x4dc>)
 800d244:	2201      	movs	r2, #1
 800d246:	601a      	str	r2, [r3, #0]
 800d248:	f7fd fdb2 	bl	800adb0 <HAL_GetTick>
 800d24c:	6138      	str	r0, [r7, #16]
 800d24e:	e008      	b.n	800d262 <HAL_RCC_OscConfig+0x42e>
 800d250:	f7fd fdae 	bl	800adb0 <HAL_GetTick>
 800d254:	4602      	mov	r2, r0
 800d256:	693b      	ldr	r3, [r7, #16]
 800d258:	1ad3      	subs	r3, r2, r3
 800d25a:	2b02      	cmp	r3, #2
 800d25c:	d901      	bls.n	800d262 <HAL_RCC_OscConfig+0x42e>
 800d25e:	2303      	movs	r3, #3
 800d260:	e04d      	b.n	800d2fe <HAL_RCC_OscConfig+0x4ca>
 800d262:	4b2a      	ldr	r3, [pc, #168]	; (800d30c <HAL_RCC_OscConfig+0x4d8>)
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d0f0      	beq.n	800d250 <HAL_RCC_OscConfig+0x41c>
 800d26e:	e045      	b.n	800d2fc <HAL_RCC_OscConfig+0x4c8>
 800d270:	4b27      	ldr	r3, [pc, #156]	; (800d310 <HAL_RCC_OscConfig+0x4dc>)
 800d272:	2200      	movs	r2, #0
 800d274:	601a      	str	r2, [r3, #0]
 800d276:	f7fd fd9b 	bl	800adb0 <HAL_GetTick>
 800d27a:	6138      	str	r0, [r7, #16]
 800d27c:	e008      	b.n	800d290 <HAL_RCC_OscConfig+0x45c>
 800d27e:	f7fd fd97 	bl	800adb0 <HAL_GetTick>
 800d282:	4602      	mov	r2, r0
 800d284:	693b      	ldr	r3, [r7, #16]
 800d286:	1ad3      	subs	r3, r2, r3
 800d288:	2b02      	cmp	r3, #2
 800d28a:	d901      	bls.n	800d290 <HAL_RCC_OscConfig+0x45c>
 800d28c:	2303      	movs	r3, #3
 800d28e:	e036      	b.n	800d2fe <HAL_RCC_OscConfig+0x4ca>
 800d290:	4b1e      	ldr	r3, [pc, #120]	; (800d30c <HAL_RCC_OscConfig+0x4d8>)
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d1f0      	bne.n	800d27e <HAL_RCC_OscConfig+0x44a>
 800d29c:	e02e      	b.n	800d2fc <HAL_RCC_OscConfig+0x4c8>
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	699b      	ldr	r3, [r3, #24]
 800d2a2:	2b01      	cmp	r3, #1
 800d2a4:	d101      	bne.n	800d2aa <HAL_RCC_OscConfig+0x476>
 800d2a6:	2301      	movs	r3, #1
 800d2a8:	e029      	b.n	800d2fe <HAL_RCC_OscConfig+0x4ca>
 800d2aa:	4b18      	ldr	r3, [pc, #96]	; (800d30c <HAL_RCC_OscConfig+0x4d8>)
 800d2ac:	689b      	ldr	r3, [r3, #8]
 800d2ae:	60fb      	str	r3, [r7, #12]
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	69db      	ldr	r3, [r3, #28]
 800d2ba:	429a      	cmp	r2, r3
 800d2bc:	d11c      	bne.n	800d2f8 <HAL_RCC_OscConfig+0x4c4>
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	6a1b      	ldr	r3, [r3, #32]
 800d2c8:	429a      	cmp	r2, r3
 800d2ca:	d115      	bne.n	800d2f8 <HAL_RCC_OscConfig+0x4c4>
 800d2cc:	68fa      	ldr	r2, [r7, #12]
 800d2ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800d2d2:	4013      	ands	r3, r2
 800d2d4:	687a      	ldr	r2, [r7, #4]
 800d2d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d2d8:	4293      	cmp	r3, r2
 800d2da:	d10d      	bne.n	800d2f8 <HAL_RCC_OscConfig+0x4c4>
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2e6:	429a      	cmp	r2, r3
 800d2e8:	d106      	bne.n	800d2f8 <HAL_RCC_OscConfig+0x4c4>
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2f4:	429a      	cmp	r2, r3
 800d2f6:	d001      	beq.n	800d2fc <HAL_RCC_OscConfig+0x4c8>
 800d2f8:	2301      	movs	r3, #1
 800d2fa:	e000      	b.n	800d2fe <HAL_RCC_OscConfig+0x4ca>
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	4618      	mov	r0, r3
 800d300:	3718      	adds	r7, #24
 800d302:	46bd      	mov	sp, r7
 800d304:	bd80      	pop	{r7, pc}
 800d306:	bf00      	nop
 800d308:	40007000 	.word	0x40007000
 800d30c:	40023800 	.word	0x40023800
 800d310:	42470060 	.word	0x42470060

0800d314 <HAL_RCC_ClockConfig>:
 800d314:	b580      	push	{r7, lr}
 800d316:	b084      	sub	sp, #16
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
 800d31c:	6039      	str	r1, [r7, #0]
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d101      	bne.n	800d328 <HAL_RCC_ClockConfig+0x14>
 800d324:	2301      	movs	r3, #1
 800d326:	e0cc      	b.n	800d4c2 <HAL_RCC_ClockConfig+0x1ae>
 800d328:	4b68      	ldr	r3, [pc, #416]	; (800d4cc <HAL_RCC_ClockConfig+0x1b8>)
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	f003 030f 	and.w	r3, r3, #15
 800d330:	683a      	ldr	r2, [r7, #0]
 800d332:	429a      	cmp	r2, r3
 800d334:	d90c      	bls.n	800d350 <HAL_RCC_ClockConfig+0x3c>
 800d336:	4b65      	ldr	r3, [pc, #404]	; (800d4cc <HAL_RCC_ClockConfig+0x1b8>)
 800d338:	683a      	ldr	r2, [r7, #0]
 800d33a:	b2d2      	uxtb	r2, r2
 800d33c:	701a      	strb	r2, [r3, #0]
 800d33e:	4b63      	ldr	r3, [pc, #396]	; (800d4cc <HAL_RCC_ClockConfig+0x1b8>)
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	f003 030f 	and.w	r3, r3, #15
 800d346:	683a      	ldr	r2, [r7, #0]
 800d348:	429a      	cmp	r2, r3
 800d34a:	d001      	beq.n	800d350 <HAL_RCC_ClockConfig+0x3c>
 800d34c:	2301      	movs	r3, #1
 800d34e:	e0b8      	b.n	800d4c2 <HAL_RCC_ClockConfig+0x1ae>
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	f003 0302 	and.w	r3, r3, #2
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d020      	beq.n	800d39e <HAL_RCC_ClockConfig+0x8a>
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	f003 0304 	and.w	r3, r3, #4
 800d364:	2b00      	cmp	r3, #0
 800d366:	d005      	beq.n	800d374 <HAL_RCC_ClockConfig+0x60>
 800d368:	4b59      	ldr	r3, [pc, #356]	; (800d4d0 <HAL_RCC_ClockConfig+0x1bc>)
 800d36a:	689b      	ldr	r3, [r3, #8]
 800d36c:	4a58      	ldr	r2, [pc, #352]	; (800d4d0 <HAL_RCC_ClockConfig+0x1bc>)
 800d36e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800d372:	6093      	str	r3, [r2, #8]
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	f003 0308 	and.w	r3, r3, #8
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d005      	beq.n	800d38c <HAL_RCC_ClockConfig+0x78>
 800d380:	4b53      	ldr	r3, [pc, #332]	; (800d4d0 <HAL_RCC_ClockConfig+0x1bc>)
 800d382:	689b      	ldr	r3, [r3, #8]
 800d384:	4a52      	ldr	r2, [pc, #328]	; (800d4d0 <HAL_RCC_ClockConfig+0x1bc>)
 800d386:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800d38a:	6093      	str	r3, [r2, #8]
 800d38c:	4b50      	ldr	r3, [pc, #320]	; (800d4d0 <HAL_RCC_ClockConfig+0x1bc>)
 800d38e:	689b      	ldr	r3, [r3, #8]
 800d390:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	689b      	ldr	r3, [r3, #8]
 800d398:	494d      	ldr	r1, [pc, #308]	; (800d4d0 <HAL_RCC_ClockConfig+0x1bc>)
 800d39a:	4313      	orrs	r3, r2
 800d39c:	608b      	str	r3, [r1, #8]
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	f003 0301 	and.w	r3, r3, #1
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d044      	beq.n	800d434 <HAL_RCC_ClockConfig+0x120>
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	685b      	ldr	r3, [r3, #4]
 800d3ae:	2b01      	cmp	r3, #1
 800d3b0:	d107      	bne.n	800d3c2 <HAL_RCC_ClockConfig+0xae>
 800d3b2:	4b47      	ldr	r3, [pc, #284]	; (800d4d0 <HAL_RCC_ClockConfig+0x1bc>)
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d119      	bne.n	800d3f2 <HAL_RCC_ClockConfig+0xde>
 800d3be:	2301      	movs	r3, #1
 800d3c0:	e07f      	b.n	800d4c2 <HAL_RCC_ClockConfig+0x1ae>
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	685b      	ldr	r3, [r3, #4]
 800d3c6:	2b02      	cmp	r3, #2
 800d3c8:	d003      	beq.n	800d3d2 <HAL_RCC_ClockConfig+0xbe>
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	685b      	ldr	r3, [r3, #4]
 800d3ce:	2b03      	cmp	r3, #3
 800d3d0:	d107      	bne.n	800d3e2 <HAL_RCC_ClockConfig+0xce>
 800d3d2:	4b3f      	ldr	r3, [pc, #252]	; (800d4d0 <HAL_RCC_ClockConfig+0x1bc>)
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d109      	bne.n	800d3f2 <HAL_RCC_ClockConfig+0xde>
 800d3de:	2301      	movs	r3, #1
 800d3e0:	e06f      	b.n	800d4c2 <HAL_RCC_ClockConfig+0x1ae>
 800d3e2:	4b3b      	ldr	r3, [pc, #236]	; (800d4d0 <HAL_RCC_ClockConfig+0x1bc>)
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	f003 0302 	and.w	r3, r3, #2
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d101      	bne.n	800d3f2 <HAL_RCC_ClockConfig+0xde>
 800d3ee:	2301      	movs	r3, #1
 800d3f0:	e067      	b.n	800d4c2 <HAL_RCC_ClockConfig+0x1ae>
 800d3f2:	4b37      	ldr	r3, [pc, #220]	; (800d4d0 <HAL_RCC_ClockConfig+0x1bc>)
 800d3f4:	689b      	ldr	r3, [r3, #8]
 800d3f6:	f023 0203 	bic.w	r2, r3, #3
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	685b      	ldr	r3, [r3, #4]
 800d3fe:	4934      	ldr	r1, [pc, #208]	; (800d4d0 <HAL_RCC_ClockConfig+0x1bc>)
 800d400:	4313      	orrs	r3, r2
 800d402:	608b      	str	r3, [r1, #8]
 800d404:	f7fd fcd4 	bl	800adb0 <HAL_GetTick>
 800d408:	60f8      	str	r0, [r7, #12]
 800d40a:	e00a      	b.n	800d422 <HAL_RCC_ClockConfig+0x10e>
 800d40c:	f7fd fcd0 	bl	800adb0 <HAL_GetTick>
 800d410:	4602      	mov	r2, r0
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	1ad3      	subs	r3, r2, r3
 800d416:	f241 3288 	movw	r2, #5000	; 0x1388
 800d41a:	4293      	cmp	r3, r2
 800d41c:	d901      	bls.n	800d422 <HAL_RCC_ClockConfig+0x10e>
 800d41e:	2303      	movs	r3, #3
 800d420:	e04f      	b.n	800d4c2 <HAL_RCC_ClockConfig+0x1ae>
 800d422:	4b2b      	ldr	r3, [pc, #172]	; (800d4d0 <HAL_RCC_ClockConfig+0x1bc>)
 800d424:	689b      	ldr	r3, [r3, #8]
 800d426:	f003 020c 	and.w	r2, r3, #12
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	685b      	ldr	r3, [r3, #4]
 800d42e:	009b      	lsls	r3, r3, #2
 800d430:	429a      	cmp	r2, r3
 800d432:	d1eb      	bne.n	800d40c <HAL_RCC_ClockConfig+0xf8>
 800d434:	4b25      	ldr	r3, [pc, #148]	; (800d4cc <HAL_RCC_ClockConfig+0x1b8>)
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	f003 030f 	and.w	r3, r3, #15
 800d43c:	683a      	ldr	r2, [r7, #0]
 800d43e:	429a      	cmp	r2, r3
 800d440:	d20c      	bcs.n	800d45c <HAL_RCC_ClockConfig+0x148>
 800d442:	4b22      	ldr	r3, [pc, #136]	; (800d4cc <HAL_RCC_ClockConfig+0x1b8>)
 800d444:	683a      	ldr	r2, [r7, #0]
 800d446:	b2d2      	uxtb	r2, r2
 800d448:	701a      	strb	r2, [r3, #0]
 800d44a:	4b20      	ldr	r3, [pc, #128]	; (800d4cc <HAL_RCC_ClockConfig+0x1b8>)
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	f003 030f 	and.w	r3, r3, #15
 800d452:	683a      	ldr	r2, [r7, #0]
 800d454:	429a      	cmp	r2, r3
 800d456:	d001      	beq.n	800d45c <HAL_RCC_ClockConfig+0x148>
 800d458:	2301      	movs	r3, #1
 800d45a:	e032      	b.n	800d4c2 <HAL_RCC_ClockConfig+0x1ae>
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	f003 0304 	and.w	r3, r3, #4
 800d464:	2b00      	cmp	r3, #0
 800d466:	d008      	beq.n	800d47a <HAL_RCC_ClockConfig+0x166>
 800d468:	4b19      	ldr	r3, [pc, #100]	; (800d4d0 <HAL_RCC_ClockConfig+0x1bc>)
 800d46a:	689b      	ldr	r3, [r3, #8]
 800d46c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	68db      	ldr	r3, [r3, #12]
 800d474:	4916      	ldr	r1, [pc, #88]	; (800d4d0 <HAL_RCC_ClockConfig+0x1bc>)
 800d476:	4313      	orrs	r3, r2
 800d478:	608b      	str	r3, [r1, #8]
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	f003 0308 	and.w	r3, r3, #8
 800d482:	2b00      	cmp	r3, #0
 800d484:	d009      	beq.n	800d49a <HAL_RCC_ClockConfig+0x186>
 800d486:	4b12      	ldr	r3, [pc, #72]	; (800d4d0 <HAL_RCC_ClockConfig+0x1bc>)
 800d488:	689b      	ldr	r3, [r3, #8]
 800d48a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	691b      	ldr	r3, [r3, #16]
 800d492:	00db      	lsls	r3, r3, #3
 800d494:	490e      	ldr	r1, [pc, #56]	; (800d4d0 <HAL_RCC_ClockConfig+0x1bc>)
 800d496:	4313      	orrs	r3, r2
 800d498:	608b      	str	r3, [r1, #8]
 800d49a:	f000 f821 	bl	800d4e0 <HAL_RCC_GetSysClockFreq>
 800d49e:	4601      	mov	r1, r0
 800d4a0:	4b0b      	ldr	r3, [pc, #44]	; (800d4d0 <HAL_RCC_ClockConfig+0x1bc>)
 800d4a2:	689b      	ldr	r3, [r3, #8]
 800d4a4:	091b      	lsrs	r3, r3, #4
 800d4a6:	f003 030f 	and.w	r3, r3, #15
 800d4aa:	4a0a      	ldr	r2, [pc, #40]	; (800d4d4 <HAL_RCC_ClockConfig+0x1c0>)
 800d4ac:	5cd3      	ldrb	r3, [r2, r3]
 800d4ae:	fa21 f303 	lsr.w	r3, r1, r3
 800d4b2:	4a09      	ldr	r2, [pc, #36]	; (800d4d8 <HAL_RCC_ClockConfig+0x1c4>)
 800d4b4:	6013      	str	r3, [r2, #0]
 800d4b6:	4b09      	ldr	r3, [pc, #36]	; (800d4dc <HAL_RCC_ClockConfig+0x1c8>)
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	f7fd f9e0 	bl	800a880 <HAL_InitTick>
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	3710      	adds	r7, #16
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bd80      	pop	{r7, pc}
 800d4ca:	bf00      	nop
 800d4cc:	40023c00 	.word	0x40023c00
 800d4d0:	40023800 	.word	0x40023800
 800d4d4:	0801b0fc 	.word	0x0801b0fc
 800d4d8:	20000c8c 	.word	0x20000c8c
 800d4dc:	20000c90 	.word	0x20000c90

0800d4e0 <HAL_RCC_GetSysClockFreq>:
 800d4e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4e2:	b085      	sub	sp, #20
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	607b      	str	r3, [r7, #4]
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	60fb      	str	r3, [r7, #12]
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	603b      	str	r3, [r7, #0]
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	60bb      	str	r3, [r7, #8]
 800d4f6:	4b63      	ldr	r3, [pc, #396]	; (800d684 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d4f8:	689b      	ldr	r3, [r3, #8]
 800d4fa:	f003 030c 	and.w	r3, r3, #12
 800d4fe:	2b04      	cmp	r3, #4
 800d500:	d007      	beq.n	800d512 <HAL_RCC_GetSysClockFreq+0x32>
 800d502:	2b08      	cmp	r3, #8
 800d504:	d008      	beq.n	800d518 <HAL_RCC_GetSysClockFreq+0x38>
 800d506:	2b00      	cmp	r3, #0
 800d508:	f040 80b4 	bne.w	800d674 <HAL_RCC_GetSysClockFreq+0x194>
 800d50c:	4b5e      	ldr	r3, [pc, #376]	; (800d688 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800d50e:	60bb      	str	r3, [r7, #8]
 800d510:	e0b3      	b.n	800d67a <HAL_RCC_GetSysClockFreq+0x19a>
 800d512:	4b5e      	ldr	r3, [pc, #376]	; (800d68c <HAL_RCC_GetSysClockFreq+0x1ac>)
 800d514:	60bb      	str	r3, [r7, #8]
 800d516:	e0b0      	b.n	800d67a <HAL_RCC_GetSysClockFreq+0x19a>
 800d518:	4b5a      	ldr	r3, [pc, #360]	; (800d684 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d51a:	685b      	ldr	r3, [r3, #4]
 800d51c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d520:	607b      	str	r3, [r7, #4]
 800d522:	4b58      	ldr	r3, [pc, #352]	; (800d684 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d524:	685b      	ldr	r3, [r3, #4]
 800d526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d04a      	beq.n	800d5c4 <HAL_RCC_GetSysClockFreq+0xe4>
 800d52e:	4b55      	ldr	r3, [pc, #340]	; (800d684 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d530:	685b      	ldr	r3, [r3, #4]
 800d532:	099b      	lsrs	r3, r3, #6
 800d534:	f04f 0400 	mov.w	r4, #0
 800d538:	f240 11ff 	movw	r1, #511	; 0x1ff
 800d53c:	f04f 0200 	mov.w	r2, #0
 800d540:	ea03 0501 	and.w	r5, r3, r1
 800d544:	ea04 0602 	and.w	r6, r4, r2
 800d548:	4629      	mov	r1, r5
 800d54a:	4632      	mov	r2, r6
 800d54c:	f04f 0300 	mov.w	r3, #0
 800d550:	f04f 0400 	mov.w	r4, #0
 800d554:	0154      	lsls	r4, r2, #5
 800d556:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800d55a:	014b      	lsls	r3, r1, #5
 800d55c:	4619      	mov	r1, r3
 800d55e:	4622      	mov	r2, r4
 800d560:	1b49      	subs	r1, r1, r5
 800d562:	eb62 0206 	sbc.w	r2, r2, r6
 800d566:	f04f 0300 	mov.w	r3, #0
 800d56a:	f04f 0400 	mov.w	r4, #0
 800d56e:	0194      	lsls	r4, r2, #6
 800d570:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800d574:	018b      	lsls	r3, r1, #6
 800d576:	1a5b      	subs	r3, r3, r1
 800d578:	eb64 0402 	sbc.w	r4, r4, r2
 800d57c:	f04f 0100 	mov.w	r1, #0
 800d580:	f04f 0200 	mov.w	r2, #0
 800d584:	00e2      	lsls	r2, r4, #3
 800d586:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800d58a:	00d9      	lsls	r1, r3, #3
 800d58c:	460b      	mov	r3, r1
 800d58e:	4614      	mov	r4, r2
 800d590:	195b      	adds	r3, r3, r5
 800d592:	eb44 0406 	adc.w	r4, r4, r6
 800d596:	f04f 0100 	mov.w	r1, #0
 800d59a:	f04f 0200 	mov.w	r2, #0
 800d59e:	0262      	lsls	r2, r4, #9
 800d5a0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800d5a4:	0259      	lsls	r1, r3, #9
 800d5a6:	460b      	mov	r3, r1
 800d5a8:	4614      	mov	r4, r2
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	4621      	mov	r1, r4
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	f04f 0400 	mov.w	r4, #0
 800d5b4:	461a      	mov	r2, r3
 800d5b6:	4623      	mov	r3, r4
 800d5b8:	f7f3 fb66 	bl	8000c88 <__aeabi_uldivmod>
 800d5bc:	4603      	mov	r3, r0
 800d5be:	460c      	mov	r4, r1
 800d5c0:	60fb      	str	r3, [r7, #12]
 800d5c2:	e049      	b.n	800d658 <HAL_RCC_GetSysClockFreq+0x178>
 800d5c4:	4b2f      	ldr	r3, [pc, #188]	; (800d684 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d5c6:	685b      	ldr	r3, [r3, #4]
 800d5c8:	099b      	lsrs	r3, r3, #6
 800d5ca:	f04f 0400 	mov.w	r4, #0
 800d5ce:	f240 11ff 	movw	r1, #511	; 0x1ff
 800d5d2:	f04f 0200 	mov.w	r2, #0
 800d5d6:	ea03 0501 	and.w	r5, r3, r1
 800d5da:	ea04 0602 	and.w	r6, r4, r2
 800d5de:	4629      	mov	r1, r5
 800d5e0:	4632      	mov	r2, r6
 800d5e2:	f04f 0300 	mov.w	r3, #0
 800d5e6:	f04f 0400 	mov.w	r4, #0
 800d5ea:	0154      	lsls	r4, r2, #5
 800d5ec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800d5f0:	014b      	lsls	r3, r1, #5
 800d5f2:	4619      	mov	r1, r3
 800d5f4:	4622      	mov	r2, r4
 800d5f6:	1b49      	subs	r1, r1, r5
 800d5f8:	eb62 0206 	sbc.w	r2, r2, r6
 800d5fc:	f04f 0300 	mov.w	r3, #0
 800d600:	f04f 0400 	mov.w	r4, #0
 800d604:	0194      	lsls	r4, r2, #6
 800d606:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800d60a:	018b      	lsls	r3, r1, #6
 800d60c:	1a5b      	subs	r3, r3, r1
 800d60e:	eb64 0402 	sbc.w	r4, r4, r2
 800d612:	f04f 0100 	mov.w	r1, #0
 800d616:	f04f 0200 	mov.w	r2, #0
 800d61a:	00e2      	lsls	r2, r4, #3
 800d61c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800d620:	00d9      	lsls	r1, r3, #3
 800d622:	460b      	mov	r3, r1
 800d624:	4614      	mov	r4, r2
 800d626:	195b      	adds	r3, r3, r5
 800d628:	eb44 0406 	adc.w	r4, r4, r6
 800d62c:	f04f 0100 	mov.w	r1, #0
 800d630:	f04f 0200 	mov.w	r2, #0
 800d634:	02a2      	lsls	r2, r4, #10
 800d636:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800d63a:	0299      	lsls	r1, r3, #10
 800d63c:	460b      	mov	r3, r1
 800d63e:	4614      	mov	r4, r2
 800d640:	4618      	mov	r0, r3
 800d642:	4621      	mov	r1, r4
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	f04f 0400 	mov.w	r4, #0
 800d64a:	461a      	mov	r2, r3
 800d64c:	4623      	mov	r3, r4
 800d64e:	f7f3 fb1b 	bl	8000c88 <__aeabi_uldivmod>
 800d652:	4603      	mov	r3, r0
 800d654:	460c      	mov	r4, r1
 800d656:	60fb      	str	r3, [r7, #12]
 800d658:	4b0a      	ldr	r3, [pc, #40]	; (800d684 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d65a:	685b      	ldr	r3, [r3, #4]
 800d65c:	0c1b      	lsrs	r3, r3, #16
 800d65e:	f003 0303 	and.w	r3, r3, #3
 800d662:	3301      	adds	r3, #1
 800d664:	005b      	lsls	r3, r3, #1
 800d666:	603b      	str	r3, [r7, #0]
 800d668:	68fa      	ldr	r2, [r7, #12]
 800d66a:	683b      	ldr	r3, [r7, #0]
 800d66c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d670:	60bb      	str	r3, [r7, #8]
 800d672:	e002      	b.n	800d67a <HAL_RCC_GetSysClockFreq+0x19a>
 800d674:	4b04      	ldr	r3, [pc, #16]	; (800d688 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800d676:	60bb      	str	r3, [r7, #8]
 800d678:	bf00      	nop
 800d67a:	68bb      	ldr	r3, [r7, #8]
 800d67c:	4618      	mov	r0, r3
 800d67e:	3714      	adds	r7, #20
 800d680:	46bd      	mov	sp, r7
 800d682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d684:	40023800 	.word	0x40023800
 800d688:	00f42400 	.word	0x00f42400
 800d68c:	007a1200 	.word	0x007a1200

0800d690 <HAL_RCC_GetHCLKFreq>:
 800d690:	b480      	push	{r7}
 800d692:	af00      	add	r7, sp, #0
 800d694:	4b03      	ldr	r3, [pc, #12]	; (800d6a4 <HAL_RCC_GetHCLKFreq+0x14>)
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	4618      	mov	r0, r3
 800d69a:	46bd      	mov	sp, r7
 800d69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a0:	4770      	bx	lr
 800d6a2:	bf00      	nop
 800d6a4:	20000c8c 	.word	0x20000c8c

0800d6a8 <HAL_RCC_GetPCLK1Freq>:
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	af00      	add	r7, sp, #0
 800d6ac:	f7ff fff0 	bl	800d690 <HAL_RCC_GetHCLKFreq>
 800d6b0:	4601      	mov	r1, r0
 800d6b2:	4b05      	ldr	r3, [pc, #20]	; (800d6c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800d6b4:	689b      	ldr	r3, [r3, #8]
 800d6b6:	0a9b      	lsrs	r3, r3, #10
 800d6b8:	f003 0307 	and.w	r3, r3, #7
 800d6bc:	4a03      	ldr	r2, [pc, #12]	; (800d6cc <HAL_RCC_GetPCLK1Freq+0x24>)
 800d6be:	5cd3      	ldrb	r3, [r2, r3]
 800d6c0:	fa21 f303 	lsr.w	r3, r1, r3
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	bd80      	pop	{r7, pc}
 800d6c8:	40023800 	.word	0x40023800
 800d6cc:	0801b10c 	.word	0x0801b10c

0800d6d0 <HAL_RCC_GetPCLK2Freq>:
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	af00      	add	r7, sp, #0
 800d6d4:	f7ff ffdc 	bl	800d690 <HAL_RCC_GetHCLKFreq>
 800d6d8:	4601      	mov	r1, r0
 800d6da:	4b05      	ldr	r3, [pc, #20]	; (800d6f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800d6dc:	689b      	ldr	r3, [r3, #8]
 800d6de:	0b5b      	lsrs	r3, r3, #13
 800d6e0:	f003 0307 	and.w	r3, r3, #7
 800d6e4:	4a03      	ldr	r2, [pc, #12]	; (800d6f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d6e6:	5cd3      	ldrb	r3, [r2, r3]
 800d6e8:	fa21 f303 	lsr.w	r3, r1, r3
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	bd80      	pop	{r7, pc}
 800d6f0:	40023800 	.word	0x40023800
 800d6f4:	0801b10c 	.word	0x0801b10c

0800d6f8 <HAL_RCC_GetClockConfig>:
 800d6f8:	b480      	push	{r7}
 800d6fa:	b083      	sub	sp, #12
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
 800d700:	6039      	str	r1, [r7, #0]
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	220f      	movs	r2, #15
 800d706:	601a      	str	r2, [r3, #0]
 800d708:	4b12      	ldr	r3, [pc, #72]	; (800d754 <HAL_RCC_GetClockConfig+0x5c>)
 800d70a:	689b      	ldr	r3, [r3, #8]
 800d70c:	f003 0203 	and.w	r2, r3, #3
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	605a      	str	r2, [r3, #4]
 800d714:	4b0f      	ldr	r3, [pc, #60]	; (800d754 <HAL_RCC_GetClockConfig+0x5c>)
 800d716:	689b      	ldr	r3, [r3, #8]
 800d718:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	609a      	str	r2, [r3, #8]
 800d720:	4b0c      	ldr	r3, [pc, #48]	; (800d754 <HAL_RCC_GetClockConfig+0x5c>)
 800d722:	689b      	ldr	r3, [r3, #8]
 800d724:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	60da      	str	r2, [r3, #12]
 800d72c:	4b09      	ldr	r3, [pc, #36]	; (800d754 <HAL_RCC_GetClockConfig+0x5c>)
 800d72e:	689b      	ldr	r3, [r3, #8]
 800d730:	08db      	lsrs	r3, r3, #3
 800d732:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	611a      	str	r2, [r3, #16]
 800d73a:	4b07      	ldr	r3, [pc, #28]	; (800d758 <HAL_RCC_GetClockConfig+0x60>)
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	f003 020f 	and.w	r2, r3, #15
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	601a      	str	r2, [r3, #0]
 800d746:	bf00      	nop
 800d748:	370c      	adds	r7, #12
 800d74a:	46bd      	mov	sp, r7
 800d74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d750:	4770      	bx	lr
 800d752:	bf00      	nop
 800d754:	40023800 	.word	0x40023800
 800d758:	40023c00 	.word	0x40023c00

0800d75c <HAL_TIM_Base_Init>:
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b082      	sub	sp, #8
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d101      	bne.n	800d76e <HAL_TIM_Base_Init+0x12>
 800d76a:	2301      	movs	r3, #1
 800d76c:	e01d      	b.n	800d7aa <HAL_TIM_Base_Init+0x4e>
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d774:	b2db      	uxtb	r3, r3
 800d776:	2b00      	cmp	r3, #0
 800d778:	d106      	bne.n	800d788 <HAL_TIM_Base_Init+0x2c>
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	2200      	movs	r2, #0
 800d77e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800d782:	6878      	ldr	r0, [r7, #4]
 800d784:	f7fd f9b8 	bl	800aaf8 <HAL_TIM_Base_MspInit>
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2202      	movs	r2, #2
 800d78c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681a      	ldr	r2, [r3, #0]
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	3304      	adds	r3, #4
 800d798:	4619      	mov	r1, r3
 800d79a:	4610      	mov	r0, r2
 800d79c:	f000 f95e 	bl	800da5c <TIM_Base_SetConfig>
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	2201      	movs	r2, #1
 800d7a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	3708      	adds	r7, #8
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}

0800d7b2 <HAL_TIM_Base_Start_IT>:
 800d7b2:	b480      	push	{r7}
 800d7b4:	b085      	sub	sp, #20
 800d7b6:	af00      	add	r7, sp, #0
 800d7b8:	6078      	str	r0, [r7, #4]
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	68da      	ldr	r2, [r3, #12]
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	f042 0201 	orr.w	r2, r2, #1
 800d7c8:	60da      	str	r2, [r3, #12]
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	689b      	ldr	r3, [r3, #8]
 800d7d0:	f003 0307 	and.w	r3, r3, #7
 800d7d4:	60fb      	str	r3, [r7, #12]
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	2b06      	cmp	r3, #6
 800d7da:	d007      	beq.n	800d7ec <HAL_TIM_Base_Start_IT+0x3a>
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	681a      	ldr	r2, [r3, #0]
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	f042 0201 	orr.w	r2, r2, #1
 800d7ea:	601a      	str	r2, [r3, #0]
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	3714      	adds	r7, #20
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f8:	4770      	bx	lr

0800d7fa <HAL_TIM_IRQHandler>:
 800d7fa:	b580      	push	{r7, lr}
 800d7fc:	b082      	sub	sp, #8
 800d7fe:	af00      	add	r7, sp, #0
 800d800:	6078      	str	r0, [r7, #4]
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	691b      	ldr	r3, [r3, #16]
 800d808:	f003 0302 	and.w	r3, r3, #2
 800d80c:	2b02      	cmp	r3, #2
 800d80e:	d122      	bne.n	800d856 <HAL_TIM_IRQHandler+0x5c>
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	68db      	ldr	r3, [r3, #12]
 800d816:	f003 0302 	and.w	r3, r3, #2
 800d81a:	2b02      	cmp	r3, #2
 800d81c:	d11b      	bne.n	800d856 <HAL_TIM_IRQHandler+0x5c>
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	f06f 0202 	mvn.w	r2, #2
 800d826:	611a      	str	r2, [r3, #16]
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2201      	movs	r2, #1
 800d82c:	771a      	strb	r2, [r3, #28]
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	699b      	ldr	r3, [r3, #24]
 800d834:	f003 0303 	and.w	r3, r3, #3
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d003      	beq.n	800d844 <HAL_TIM_IRQHandler+0x4a>
 800d83c:	6878      	ldr	r0, [r7, #4]
 800d83e:	f000 f8ee 	bl	800da1e <HAL_TIM_IC_CaptureCallback>
 800d842:	e005      	b.n	800d850 <HAL_TIM_IRQHandler+0x56>
 800d844:	6878      	ldr	r0, [r7, #4]
 800d846:	f000 f8e0 	bl	800da0a <HAL_TIM_OC_DelayElapsedCallback>
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	f000 f8f1 	bl	800da32 <HAL_TIM_PWM_PulseFinishedCallback>
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2200      	movs	r2, #0
 800d854:	771a      	strb	r2, [r3, #28]
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	691b      	ldr	r3, [r3, #16]
 800d85c:	f003 0304 	and.w	r3, r3, #4
 800d860:	2b04      	cmp	r3, #4
 800d862:	d122      	bne.n	800d8aa <HAL_TIM_IRQHandler+0xb0>
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	68db      	ldr	r3, [r3, #12]
 800d86a:	f003 0304 	and.w	r3, r3, #4
 800d86e:	2b04      	cmp	r3, #4
 800d870:	d11b      	bne.n	800d8aa <HAL_TIM_IRQHandler+0xb0>
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	f06f 0204 	mvn.w	r2, #4
 800d87a:	611a      	str	r2, [r3, #16]
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2202      	movs	r2, #2
 800d880:	771a      	strb	r2, [r3, #28]
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	699b      	ldr	r3, [r3, #24]
 800d888:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d003      	beq.n	800d898 <HAL_TIM_IRQHandler+0x9e>
 800d890:	6878      	ldr	r0, [r7, #4]
 800d892:	f000 f8c4 	bl	800da1e <HAL_TIM_IC_CaptureCallback>
 800d896:	e005      	b.n	800d8a4 <HAL_TIM_IRQHandler+0xaa>
 800d898:	6878      	ldr	r0, [r7, #4]
 800d89a:	f000 f8b6 	bl	800da0a <HAL_TIM_OC_DelayElapsedCallback>
 800d89e:	6878      	ldr	r0, [r7, #4]
 800d8a0:	f000 f8c7 	bl	800da32 <HAL_TIM_PWM_PulseFinishedCallback>
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	771a      	strb	r2, [r3, #28]
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	691b      	ldr	r3, [r3, #16]
 800d8b0:	f003 0308 	and.w	r3, r3, #8
 800d8b4:	2b08      	cmp	r3, #8
 800d8b6:	d122      	bne.n	800d8fe <HAL_TIM_IRQHandler+0x104>
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	68db      	ldr	r3, [r3, #12]
 800d8be:	f003 0308 	and.w	r3, r3, #8
 800d8c2:	2b08      	cmp	r3, #8
 800d8c4:	d11b      	bne.n	800d8fe <HAL_TIM_IRQHandler+0x104>
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	f06f 0208 	mvn.w	r2, #8
 800d8ce:	611a      	str	r2, [r3, #16]
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2204      	movs	r2, #4
 800d8d4:	771a      	strb	r2, [r3, #28]
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	69db      	ldr	r3, [r3, #28]
 800d8dc:	f003 0303 	and.w	r3, r3, #3
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d003      	beq.n	800d8ec <HAL_TIM_IRQHandler+0xf2>
 800d8e4:	6878      	ldr	r0, [r7, #4]
 800d8e6:	f000 f89a 	bl	800da1e <HAL_TIM_IC_CaptureCallback>
 800d8ea:	e005      	b.n	800d8f8 <HAL_TIM_IRQHandler+0xfe>
 800d8ec:	6878      	ldr	r0, [r7, #4]
 800d8ee:	f000 f88c 	bl	800da0a <HAL_TIM_OC_DelayElapsedCallback>
 800d8f2:	6878      	ldr	r0, [r7, #4]
 800d8f4:	f000 f89d 	bl	800da32 <HAL_TIM_PWM_PulseFinishedCallback>
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	771a      	strb	r2, [r3, #28]
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	691b      	ldr	r3, [r3, #16]
 800d904:	f003 0310 	and.w	r3, r3, #16
 800d908:	2b10      	cmp	r3, #16
 800d90a:	d122      	bne.n	800d952 <HAL_TIM_IRQHandler+0x158>
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	68db      	ldr	r3, [r3, #12]
 800d912:	f003 0310 	and.w	r3, r3, #16
 800d916:	2b10      	cmp	r3, #16
 800d918:	d11b      	bne.n	800d952 <HAL_TIM_IRQHandler+0x158>
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	f06f 0210 	mvn.w	r2, #16
 800d922:	611a      	str	r2, [r3, #16]
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2208      	movs	r2, #8
 800d928:	771a      	strb	r2, [r3, #28]
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	69db      	ldr	r3, [r3, #28]
 800d930:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d934:	2b00      	cmp	r3, #0
 800d936:	d003      	beq.n	800d940 <HAL_TIM_IRQHandler+0x146>
 800d938:	6878      	ldr	r0, [r7, #4]
 800d93a:	f000 f870 	bl	800da1e <HAL_TIM_IC_CaptureCallback>
 800d93e:	e005      	b.n	800d94c <HAL_TIM_IRQHandler+0x152>
 800d940:	6878      	ldr	r0, [r7, #4]
 800d942:	f000 f862 	bl	800da0a <HAL_TIM_OC_DelayElapsedCallback>
 800d946:	6878      	ldr	r0, [r7, #4]
 800d948:	f000 f873 	bl	800da32 <HAL_TIM_PWM_PulseFinishedCallback>
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2200      	movs	r2, #0
 800d950:	771a      	strb	r2, [r3, #28]
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	691b      	ldr	r3, [r3, #16]
 800d958:	f003 0301 	and.w	r3, r3, #1
 800d95c:	2b01      	cmp	r3, #1
 800d95e:	d10e      	bne.n	800d97e <HAL_TIM_IRQHandler+0x184>
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	68db      	ldr	r3, [r3, #12]
 800d966:	f003 0301 	and.w	r3, r3, #1
 800d96a:	2b01      	cmp	r3, #1
 800d96c:	d107      	bne.n	800d97e <HAL_TIM_IRQHandler+0x184>
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	f06f 0201 	mvn.w	r2, #1
 800d976:	611a      	str	r2, [r3, #16]
 800d978:	6878      	ldr	r0, [r7, #4]
 800d97a:	f7f5 fe63 	bl	8003644 <HAL_TIM_PeriodElapsedCallback>
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	691b      	ldr	r3, [r3, #16]
 800d984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d988:	2b80      	cmp	r3, #128	; 0x80
 800d98a:	d10e      	bne.n	800d9aa <HAL_TIM_IRQHandler+0x1b0>
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	68db      	ldr	r3, [r3, #12]
 800d992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d996:	2b80      	cmp	r3, #128	; 0x80
 800d998:	d107      	bne.n	800d9aa <HAL_TIM_IRQHandler+0x1b0>
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d9a2:	611a      	str	r2, [r3, #16]
 800d9a4:	6878      	ldr	r0, [r7, #4]
 800d9a6:	f000 f97f 	bl	800dca8 <HAL_TIMEx_BreakCallback>
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	691b      	ldr	r3, [r3, #16]
 800d9b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9b4:	2b40      	cmp	r3, #64	; 0x40
 800d9b6:	d10e      	bne.n	800d9d6 <HAL_TIM_IRQHandler+0x1dc>
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	68db      	ldr	r3, [r3, #12]
 800d9be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9c2:	2b40      	cmp	r3, #64	; 0x40
 800d9c4:	d107      	bne.n	800d9d6 <HAL_TIM_IRQHandler+0x1dc>
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d9ce:	611a      	str	r2, [r3, #16]
 800d9d0:	6878      	ldr	r0, [r7, #4]
 800d9d2:	f000 f838 	bl	800da46 <HAL_TIM_TriggerCallback>
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	691b      	ldr	r3, [r3, #16]
 800d9dc:	f003 0320 	and.w	r3, r3, #32
 800d9e0:	2b20      	cmp	r3, #32
 800d9e2:	d10e      	bne.n	800da02 <HAL_TIM_IRQHandler+0x208>
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	68db      	ldr	r3, [r3, #12]
 800d9ea:	f003 0320 	and.w	r3, r3, #32
 800d9ee:	2b20      	cmp	r3, #32
 800d9f0:	d107      	bne.n	800da02 <HAL_TIM_IRQHandler+0x208>
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	f06f 0220 	mvn.w	r2, #32
 800d9fa:	611a      	str	r2, [r3, #16]
 800d9fc:	6878      	ldr	r0, [r7, #4]
 800d9fe:	f000 f949 	bl	800dc94 <HAL_TIMEx_CommutCallback>
 800da02:	bf00      	nop
 800da04:	3708      	adds	r7, #8
 800da06:	46bd      	mov	sp, r7
 800da08:	bd80      	pop	{r7, pc}

0800da0a <HAL_TIM_OC_DelayElapsedCallback>:
 800da0a:	b480      	push	{r7}
 800da0c:	b083      	sub	sp, #12
 800da0e:	af00      	add	r7, sp, #0
 800da10:	6078      	str	r0, [r7, #4]
 800da12:	bf00      	nop
 800da14:	370c      	adds	r7, #12
 800da16:	46bd      	mov	sp, r7
 800da18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1c:	4770      	bx	lr

0800da1e <HAL_TIM_IC_CaptureCallback>:
 800da1e:	b480      	push	{r7}
 800da20:	b083      	sub	sp, #12
 800da22:	af00      	add	r7, sp, #0
 800da24:	6078      	str	r0, [r7, #4]
 800da26:	bf00      	nop
 800da28:	370c      	adds	r7, #12
 800da2a:	46bd      	mov	sp, r7
 800da2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da30:	4770      	bx	lr

0800da32 <HAL_TIM_PWM_PulseFinishedCallback>:
 800da32:	b480      	push	{r7}
 800da34:	b083      	sub	sp, #12
 800da36:	af00      	add	r7, sp, #0
 800da38:	6078      	str	r0, [r7, #4]
 800da3a:	bf00      	nop
 800da3c:	370c      	adds	r7, #12
 800da3e:	46bd      	mov	sp, r7
 800da40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da44:	4770      	bx	lr

0800da46 <HAL_TIM_TriggerCallback>:
 800da46:	b480      	push	{r7}
 800da48:	b083      	sub	sp, #12
 800da4a:	af00      	add	r7, sp, #0
 800da4c:	6078      	str	r0, [r7, #4]
 800da4e:	bf00      	nop
 800da50:	370c      	adds	r7, #12
 800da52:	46bd      	mov	sp, r7
 800da54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da58:	4770      	bx	lr
	...

0800da5c <TIM_Base_SetConfig>:
 800da5c:	b480      	push	{r7}
 800da5e:	b085      	sub	sp, #20
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
 800da64:	6039      	str	r1, [r7, #0]
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	60fb      	str	r3, [r7, #12]
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	4a40      	ldr	r2, [pc, #256]	; (800db70 <TIM_Base_SetConfig+0x114>)
 800da70:	4293      	cmp	r3, r2
 800da72:	d013      	beq.n	800da9c <TIM_Base_SetConfig+0x40>
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800da7a:	d00f      	beq.n	800da9c <TIM_Base_SetConfig+0x40>
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	4a3d      	ldr	r2, [pc, #244]	; (800db74 <TIM_Base_SetConfig+0x118>)
 800da80:	4293      	cmp	r3, r2
 800da82:	d00b      	beq.n	800da9c <TIM_Base_SetConfig+0x40>
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	4a3c      	ldr	r2, [pc, #240]	; (800db78 <TIM_Base_SetConfig+0x11c>)
 800da88:	4293      	cmp	r3, r2
 800da8a:	d007      	beq.n	800da9c <TIM_Base_SetConfig+0x40>
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	4a3b      	ldr	r2, [pc, #236]	; (800db7c <TIM_Base_SetConfig+0x120>)
 800da90:	4293      	cmp	r3, r2
 800da92:	d003      	beq.n	800da9c <TIM_Base_SetConfig+0x40>
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	4a3a      	ldr	r2, [pc, #232]	; (800db80 <TIM_Base_SetConfig+0x124>)
 800da98:	4293      	cmp	r3, r2
 800da9a:	d108      	bne.n	800daae <TIM_Base_SetConfig+0x52>
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800daa2:	60fb      	str	r3, [r7, #12]
 800daa4:	683b      	ldr	r3, [r7, #0]
 800daa6:	685b      	ldr	r3, [r3, #4]
 800daa8:	68fa      	ldr	r2, [r7, #12]
 800daaa:	4313      	orrs	r3, r2
 800daac:	60fb      	str	r3, [r7, #12]
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	4a2f      	ldr	r2, [pc, #188]	; (800db70 <TIM_Base_SetConfig+0x114>)
 800dab2:	4293      	cmp	r3, r2
 800dab4:	d02b      	beq.n	800db0e <TIM_Base_SetConfig+0xb2>
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dabc:	d027      	beq.n	800db0e <TIM_Base_SetConfig+0xb2>
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	4a2c      	ldr	r2, [pc, #176]	; (800db74 <TIM_Base_SetConfig+0x118>)
 800dac2:	4293      	cmp	r3, r2
 800dac4:	d023      	beq.n	800db0e <TIM_Base_SetConfig+0xb2>
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	4a2b      	ldr	r2, [pc, #172]	; (800db78 <TIM_Base_SetConfig+0x11c>)
 800daca:	4293      	cmp	r3, r2
 800dacc:	d01f      	beq.n	800db0e <TIM_Base_SetConfig+0xb2>
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	4a2a      	ldr	r2, [pc, #168]	; (800db7c <TIM_Base_SetConfig+0x120>)
 800dad2:	4293      	cmp	r3, r2
 800dad4:	d01b      	beq.n	800db0e <TIM_Base_SetConfig+0xb2>
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	4a29      	ldr	r2, [pc, #164]	; (800db80 <TIM_Base_SetConfig+0x124>)
 800dada:	4293      	cmp	r3, r2
 800dadc:	d017      	beq.n	800db0e <TIM_Base_SetConfig+0xb2>
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	4a28      	ldr	r2, [pc, #160]	; (800db84 <TIM_Base_SetConfig+0x128>)
 800dae2:	4293      	cmp	r3, r2
 800dae4:	d013      	beq.n	800db0e <TIM_Base_SetConfig+0xb2>
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	4a27      	ldr	r2, [pc, #156]	; (800db88 <TIM_Base_SetConfig+0x12c>)
 800daea:	4293      	cmp	r3, r2
 800daec:	d00f      	beq.n	800db0e <TIM_Base_SetConfig+0xb2>
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	4a26      	ldr	r2, [pc, #152]	; (800db8c <TIM_Base_SetConfig+0x130>)
 800daf2:	4293      	cmp	r3, r2
 800daf4:	d00b      	beq.n	800db0e <TIM_Base_SetConfig+0xb2>
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	4a25      	ldr	r2, [pc, #148]	; (800db90 <TIM_Base_SetConfig+0x134>)
 800dafa:	4293      	cmp	r3, r2
 800dafc:	d007      	beq.n	800db0e <TIM_Base_SetConfig+0xb2>
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	4a24      	ldr	r2, [pc, #144]	; (800db94 <TIM_Base_SetConfig+0x138>)
 800db02:	4293      	cmp	r3, r2
 800db04:	d003      	beq.n	800db0e <TIM_Base_SetConfig+0xb2>
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	4a23      	ldr	r2, [pc, #140]	; (800db98 <TIM_Base_SetConfig+0x13c>)
 800db0a:	4293      	cmp	r3, r2
 800db0c:	d108      	bne.n	800db20 <TIM_Base_SetConfig+0xc4>
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800db14:	60fb      	str	r3, [r7, #12]
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	68db      	ldr	r3, [r3, #12]
 800db1a:	68fa      	ldr	r2, [r7, #12]
 800db1c:	4313      	orrs	r3, r2
 800db1e:	60fb      	str	r3, [r7, #12]
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800db26:	683b      	ldr	r3, [r7, #0]
 800db28:	695b      	ldr	r3, [r3, #20]
 800db2a:	4313      	orrs	r3, r2
 800db2c:	60fb      	str	r3, [r7, #12]
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	68fa      	ldr	r2, [r7, #12]
 800db32:	601a      	str	r2, [r3, #0]
 800db34:	683b      	ldr	r3, [r7, #0]
 800db36:	689a      	ldr	r2, [r3, #8]
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	62da      	str	r2, [r3, #44]	; 0x2c
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	681a      	ldr	r2, [r3, #0]
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	629a      	str	r2, [r3, #40]	; 0x28
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	4a0a      	ldr	r2, [pc, #40]	; (800db70 <TIM_Base_SetConfig+0x114>)
 800db48:	4293      	cmp	r3, r2
 800db4a:	d003      	beq.n	800db54 <TIM_Base_SetConfig+0xf8>
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	4a0c      	ldr	r2, [pc, #48]	; (800db80 <TIM_Base_SetConfig+0x124>)
 800db50:	4293      	cmp	r3, r2
 800db52:	d103      	bne.n	800db5c <TIM_Base_SetConfig+0x100>
 800db54:	683b      	ldr	r3, [r7, #0]
 800db56:	691a      	ldr	r2, [r3, #16]
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	631a      	str	r2, [r3, #48]	; 0x30
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	2201      	movs	r2, #1
 800db60:	615a      	str	r2, [r3, #20]
 800db62:	bf00      	nop
 800db64:	3714      	adds	r7, #20
 800db66:	46bd      	mov	sp, r7
 800db68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6c:	4770      	bx	lr
 800db6e:	bf00      	nop
 800db70:	40010000 	.word	0x40010000
 800db74:	40000400 	.word	0x40000400
 800db78:	40000800 	.word	0x40000800
 800db7c:	40000c00 	.word	0x40000c00
 800db80:	40010400 	.word	0x40010400
 800db84:	40014000 	.word	0x40014000
 800db88:	40014400 	.word	0x40014400
 800db8c:	40014800 	.word	0x40014800
 800db90:	40001800 	.word	0x40001800
 800db94:	40001c00 	.word	0x40001c00
 800db98:	40002000 	.word	0x40002000

0800db9c <HAL_TIMEx_MasterConfigSynchronization>:
 800db9c:	b480      	push	{r7}
 800db9e:	b085      	sub	sp, #20
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
 800dba4:	6039      	str	r1, [r7, #0]
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dbac:	2b01      	cmp	r3, #1
 800dbae:	d101      	bne.n	800dbb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dbb0:	2302      	movs	r3, #2
 800dbb2:	e05a      	b.n	800dc6a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	2201      	movs	r2, #1
 800dbb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	2202      	movs	r2, #2
 800dbc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	685b      	ldr	r3, [r3, #4]
 800dbca:	60fb      	str	r3, [r7, #12]
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	689b      	ldr	r3, [r3, #8]
 800dbd2:	60bb      	str	r3, [r7, #8]
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dbda:	60fb      	str	r3, [r7, #12]
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	68fa      	ldr	r2, [r7, #12]
 800dbe2:	4313      	orrs	r3, r2
 800dbe4:	60fb      	str	r3, [r7, #12]
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	68fa      	ldr	r2, [r7, #12]
 800dbec:	605a      	str	r2, [r3, #4]
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	4a21      	ldr	r2, [pc, #132]	; (800dc78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800dbf4:	4293      	cmp	r3, r2
 800dbf6:	d022      	beq.n	800dc3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dc00:	d01d      	beq.n	800dc3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	4a1d      	ldr	r2, [pc, #116]	; (800dc7c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800dc08:	4293      	cmp	r3, r2
 800dc0a:	d018      	beq.n	800dc3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	4a1b      	ldr	r2, [pc, #108]	; (800dc80 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800dc12:	4293      	cmp	r3, r2
 800dc14:	d013      	beq.n	800dc3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	4a1a      	ldr	r2, [pc, #104]	; (800dc84 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800dc1c:	4293      	cmp	r3, r2
 800dc1e:	d00e      	beq.n	800dc3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	4a18      	ldr	r2, [pc, #96]	; (800dc88 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800dc26:	4293      	cmp	r3, r2
 800dc28:	d009      	beq.n	800dc3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	4a17      	ldr	r2, [pc, #92]	; (800dc8c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800dc30:	4293      	cmp	r3, r2
 800dc32:	d004      	beq.n	800dc3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	4a15      	ldr	r2, [pc, #84]	; (800dc90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800dc3a:	4293      	cmp	r3, r2
 800dc3c:	d10c      	bne.n	800dc58 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 800dc3e:	68bb      	ldr	r3, [r7, #8]
 800dc40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dc44:	60bb      	str	r3, [r7, #8]
 800dc46:	683b      	ldr	r3, [r7, #0]
 800dc48:	685b      	ldr	r3, [r3, #4]
 800dc4a:	68ba      	ldr	r2, [r7, #8]
 800dc4c:	4313      	orrs	r3, r2
 800dc4e:	60bb      	str	r3, [r7, #8]
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	68ba      	ldr	r2, [r7, #8]
 800dc56:	609a      	str	r2, [r3, #8]
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	2201      	movs	r2, #1
 800dc5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2200      	movs	r2, #0
 800dc64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800dc68:	2300      	movs	r3, #0
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	3714      	adds	r7, #20
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc74:	4770      	bx	lr
 800dc76:	bf00      	nop
 800dc78:	40010000 	.word	0x40010000
 800dc7c:	40000400 	.word	0x40000400
 800dc80:	40000800 	.word	0x40000800
 800dc84:	40000c00 	.word	0x40000c00
 800dc88:	40010400 	.word	0x40010400
 800dc8c:	40014000 	.word	0x40014000
 800dc90:	40001800 	.word	0x40001800

0800dc94 <HAL_TIMEx_CommutCallback>:
 800dc94:	b480      	push	{r7}
 800dc96:	b083      	sub	sp, #12
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
 800dc9c:	bf00      	nop
 800dc9e:	370c      	adds	r7, #12
 800dca0:	46bd      	mov	sp, r7
 800dca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca6:	4770      	bx	lr

0800dca8 <HAL_TIMEx_BreakCallback>:
 800dca8:	b480      	push	{r7}
 800dcaa:	b083      	sub	sp, #12
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
 800dcb0:	bf00      	nop
 800dcb2:	370c      	adds	r7, #12
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcba:	4770      	bx	lr

0800dcbc <HAL_UART_Init>:
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b082      	sub	sp, #8
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d101      	bne.n	800dcce <HAL_UART_Init+0x12>
 800dcca:	2301      	movs	r3, #1
 800dccc:	e03f      	b.n	800dd4e <HAL_UART_Init+0x92>
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800dcd4:	b2db      	uxtb	r3, r3
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d106      	bne.n	800dce8 <HAL_UART_Init+0x2c>
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	2200      	movs	r2, #0
 800dcde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800dce2:	6878      	ldr	r0, [r7, #4]
 800dce4:	f7fc ff5a 	bl	800ab9c <HAL_UART_MspInit>
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	2224      	movs	r2, #36	; 0x24
 800dcec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	68da      	ldr	r2, [r3, #12]
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800dcfe:	60da      	str	r2, [r3, #12]
 800dd00:	6878      	ldr	r0, [r7, #4]
 800dd02:	f000 fb6b 	bl	800e3dc <UART_SetConfig>
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	691a      	ldr	r2, [r3, #16]
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800dd14:	611a      	str	r2, [r3, #16]
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	695a      	ldr	r2, [r3, #20]
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800dd24:	615a      	str	r2, [r3, #20]
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	68da      	ldr	r2, [r3, #12]
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800dd34:	60da      	str	r2, [r3, #12]
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	2200      	movs	r2, #0
 800dd3a:	63da      	str	r2, [r3, #60]	; 0x3c
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	2220      	movs	r2, #32
 800dd40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	2220      	movs	r2, #32
 800dd48:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	4618      	mov	r0, r3
 800dd50:	3708      	adds	r7, #8
 800dd52:	46bd      	mov	sp, r7
 800dd54:	bd80      	pop	{r7, pc}
	...

0800dd58 <HAL_UART_Transmit_DMA>:
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b086      	sub	sp, #24
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	60f8      	str	r0, [r7, #12]
 800dd60:	60b9      	str	r1, [r7, #8]
 800dd62:	4613      	mov	r3, r2
 800dd64:	80fb      	strh	r3, [r7, #6]
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800dd6c:	b2db      	uxtb	r3, r3
 800dd6e:	2b20      	cmp	r3, #32
 800dd70:	d153      	bne.n	800de1a <HAL_UART_Transmit_DMA+0xc2>
 800dd72:	68bb      	ldr	r3, [r7, #8]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d002      	beq.n	800dd7e <HAL_UART_Transmit_DMA+0x26>
 800dd78:	88fb      	ldrh	r3, [r7, #6]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d101      	bne.n	800dd82 <HAL_UART_Transmit_DMA+0x2a>
 800dd7e:	2301      	movs	r3, #1
 800dd80:	e04c      	b.n	800de1c <HAL_UART_Transmit_DMA+0xc4>
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800dd88:	2b01      	cmp	r3, #1
 800dd8a:	d101      	bne.n	800dd90 <HAL_UART_Transmit_DMA+0x38>
 800dd8c:	2302      	movs	r3, #2
 800dd8e:	e045      	b.n	800de1c <HAL_UART_Transmit_DMA+0xc4>
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	2201      	movs	r2, #1
 800dd94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800dd98:	68ba      	ldr	r2, [r7, #8]
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	621a      	str	r2, [r3, #32]
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	88fa      	ldrh	r2, [r7, #6]
 800dda2:	849a      	strh	r2, [r3, #36]	; 0x24
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	88fa      	ldrh	r2, [r7, #6]
 800dda8:	84da      	strh	r2, [r3, #38]	; 0x26
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	2200      	movs	r2, #0
 800ddae:	63da      	str	r2, [r3, #60]	; 0x3c
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	2221      	movs	r2, #33	; 0x21
 800ddb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddbc:	4a19      	ldr	r2, [pc, #100]	; (800de24 <HAL_UART_Transmit_DMA+0xcc>)
 800ddbe:	63da      	str	r2, [r3, #60]	; 0x3c
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddc4:	4a18      	ldr	r2, [pc, #96]	; (800de28 <HAL_UART_Transmit_DMA+0xd0>)
 800ddc6:	641a      	str	r2, [r3, #64]	; 0x40
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddcc:	4a17      	ldr	r2, [pc, #92]	; (800de2c <HAL_UART_Transmit_DMA+0xd4>)
 800ddce:	64da      	str	r2, [r3, #76]	; 0x4c
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	651a      	str	r2, [r3, #80]	; 0x50
 800ddd8:	f107 0308 	add.w	r3, r7, #8
 800dddc:	617b      	str	r3, [r7, #20]
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800dde2:	697b      	ldr	r3, [r7, #20]
 800dde4:	6819      	ldr	r1, [r3, #0]
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	3304      	adds	r3, #4
 800ddec:	461a      	mov	r2, r3
 800ddee:	88fb      	ldrh	r3, [r7, #6]
 800ddf0:	f7fd f99c 	bl	800b12c <HAL_DMA_Start_IT>
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ddfc:	601a      	str	r2, [r3, #0]
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	2200      	movs	r2, #0
 800de02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	695a      	ldr	r2, [r3, #20]
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800de14:	615a      	str	r2, [r3, #20]
 800de16:	2300      	movs	r3, #0
 800de18:	e000      	b.n	800de1c <HAL_UART_Transmit_DMA+0xc4>
 800de1a:	2302      	movs	r3, #2
 800de1c:	4618      	mov	r0, r3
 800de1e:	3718      	adds	r7, #24
 800de20:	46bd      	mov	sp, r7
 800de22:	bd80      	pop	{r7, pc}
 800de24:	0800e06d 	.word	0x0800e06d
 800de28:	0800e0bf 	.word	0x0800e0bf
 800de2c:	0800e0db 	.word	0x0800e0db

0800de30 <HAL_UART_IRQHandler>:
 800de30:	b580      	push	{r7, lr}
 800de32:	b088      	sub	sp, #32
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	61fb      	str	r3, [r7, #28]
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	68db      	ldr	r3, [r3, #12]
 800de46:	61bb      	str	r3, [r7, #24]
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	695b      	ldr	r3, [r3, #20]
 800de4e:	617b      	str	r3, [r7, #20]
 800de50:	2300      	movs	r3, #0
 800de52:	613b      	str	r3, [r7, #16]
 800de54:	2300      	movs	r3, #0
 800de56:	60fb      	str	r3, [r7, #12]
 800de58:	69fb      	ldr	r3, [r7, #28]
 800de5a:	f003 030f 	and.w	r3, r3, #15
 800de5e:	613b      	str	r3, [r7, #16]
 800de60:	693b      	ldr	r3, [r7, #16]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d10d      	bne.n	800de82 <HAL_UART_IRQHandler+0x52>
 800de66:	69fb      	ldr	r3, [r7, #28]
 800de68:	f003 0320 	and.w	r3, r3, #32
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d008      	beq.n	800de82 <HAL_UART_IRQHandler+0x52>
 800de70:	69bb      	ldr	r3, [r7, #24]
 800de72:	f003 0320 	and.w	r3, r3, #32
 800de76:	2b00      	cmp	r3, #0
 800de78:	d003      	beq.n	800de82 <HAL_UART_IRQHandler+0x52>
 800de7a:	6878      	ldr	r0, [r7, #4]
 800de7c:	f000 fa2d 	bl	800e2da <UART_Receive_IT>
 800de80:	e0d1      	b.n	800e026 <HAL_UART_IRQHandler+0x1f6>
 800de82:	693b      	ldr	r3, [r7, #16]
 800de84:	2b00      	cmp	r3, #0
 800de86:	f000 80b0 	beq.w	800dfea <HAL_UART_IRQHandler+0x1ba>
 800de8a:	697b      	ldr	r3, [r7, #20]
 800de8c:	f003 0301 	and.w	r3, r3, #1
 800de90:	2b00      	cmp	r3, #0
 800de92:	d105      	bne.n	800dea0 <HAL_UART_IRQHandler+0x70>
 800de94:	69bb      	ldr	r3, [r7, #24]
 800de96:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	f000 80a5 	beq.w	800dfea <HAL_UART_IRQHandler+0x1ba>
 800dea0:	69fb      	ldr	r3, [r7, #28]
 800dea2:	f003 0301 	and.w	r3, r3, #1
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d00a      	beq.n	800dec0 <HAL_UART_IRQHandler+0x90>
 800deaa:	69bb      	ldr	r3, [r7, #24]
 800deac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d005      	beq.n	800dec0 <HAL_UART_IRQHandler+0x90>
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800deb8:	f043 0201 	orr.w	r2, r3, #1
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	63da      	str	r2, [r3, #60]	; 0x3c
 800dec0:	69fb      	ldr	r3, [r7, #28]
 800dec2:	f003 0304 	and.w	r3, r3, #4
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d00a      	beq.n	800dee0 <HAL_UART_IRQHandler+0xb0>
 800deca:	697b      	ldr	r3, [r7, #20]
 800decc:	f003 0301 	and.w	r3, r3, #1
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d005      	beq.n	800dee0 <HAL_UART_IRQHandler+0xb0>
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ded8:	f043 0202 	orr.w	r2, r3, #2
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	63da      	str	r2, [r3, #60]	; 0x3c
 800dee0:	69fb      	ldr	r3, [r7, #28]
 800dee2:	f003 0302 	and.w	r3, r3, #2
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d00a      	beq.n	800df00 <HAL_UART_IRQHandler+0xd0>
 800deea:	697b      	ldr	r3, [r7, #20]
 800deec:	f003 0301 	and.w	r3, r3, #1
 800def0:	2b00      	cmp	r3, #0
 800def2:	d005      	beq.n	800df00 <HAL_UART_IRQHandler+0xd0>
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800def8:	f043 0204 	orr.w	r2, r3, #4
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	63da      	str	r2, [r3, #60]	; 0x3c
 800df00:	69fb      	ldr	r3, [r7, #28]
 800df02:	f003 0308 	and.w	r3, r3, #8
 800df06:	2b00      	cmp	r3, #0
 800df08:	d00f      	beq.n	800df2a <HAL_UART_IRQHandler+0xfa>
 800df0a:	69bb      	ldr	r3, [r7, #24]
 800df0c:	f003 0320 	and.w	r3, r3, #32
 800df10:	2b00      	cmp	r3, #0
 800df12:	d104      	bne.n	800df1e <HAL_UART_IRQHandler+0xee>
 800df14:	697b      	ldr	r3, [r7, #20]
 800df16:	f003 0301 	and.w	r3, r3, #1
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d005      	beq.n	800df2a <HAL_UART_IRQHandler+0xfa>
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df22:	f043 0208 	orr.w	r2, r3, #8
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	63da      	str	r2, [r3, #60]	; 0x3c
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d078      	beq.n	800e024 <HAL_UART_IRQHandler+0x1f4>
 800df32:	69fb      	ldr	r3, [r7, #28]
 800df34:	f003 0320 	and.w	r3, r3, #32
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d007      	beq.n	800df4c <HAL_UART_IRQHandler+0x11c>
 800df3c:	69bb      	ldr	r3, [r7, #24]
 800df3e:	f003 0320 	and.w	r3, r3, #32
 800df42:	2b00      	cmp	r3, #0
 800df44:	d002      	beq.n	800df4c <HAL_UART_IRQHandler+0x11c>
 800df46:	6878      	ldr	r0, [r7, #4]
 800df48:	f000 f9c7 	bl	800e2da <UART_Receive_IT>
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	695b      	ldr	r3, [r3, #20]
 800df52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df56:	2b40      	cmp	r3, #64	; 0x40
 800df58:	bf0c      	ite	eq
 800df5a:	2301      	moveq	r3, #1
 800df5c:	2300      	movne	r3, #0
 800df5e:	b2db      	uxtb	r3, r3
 800df60:	60fb      	str	r3, [r7, #12]
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df66:	f003 0308 	and.w	r3, r3, #8
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d102      	bne.n	800df74 <HAL_UART_IRQHandler+0x144>
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d031      	beq.n	800dfd8 <HAL_UART_IRQHandler+0x1a8>
 800df74:	6878      	ldr	r0, [r7, #4]
 800df76:	f000 f910 	bl	800e19a <UART_EndRxTransfer>
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	695b      	ldr	r3, [r3, #20]
 800df80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df84:	2b40      	cmp	r3, #64	; 0x40
 800df86:	d123      	bne.n	800dfd0 <HAL_UART_IRQHandler+0x1a0>
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	695a      	ldr	r2, [r3, #20]
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800df96:	615a      	str	r2, [r3, #20]
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d013      	beq.n	800dfc8 <HAL_UART_IRQHandler+0x198>
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfa4:	4a21      	ldr	r2, [pc, #132]	; (800e02c <HAL_UART_IRQHandler+0x1fc>)
 800dfa6:	651a      	str	r2, [r3, #80]	; 0x50
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfac:	4618      	mov	r0, r3
 800dfae:	f7fd f915 	bl	800b1dc <HAL_DMA_Abort_IT>
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d016      	beq.n	800dfe6 <HAL_UART_IRQHandler+0x1b6>
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dfbe:	687a      	ldr	r2, [r7, #4]
 800dfc0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800dfc2:	4610      	mov	r0, r2
 800dfc4:	4798      	blx	r3
 800dfc6:	e00e      	b.n	800dfe6 <HAL_UART_IRQHandler+0x1b6>
 800dfc8:	6878      	ldr	r0, [r7, #4]
 800dfca:	f000 f845 	bl	800e058 <HAL_UART_ErrorCallback>
 800dfce:	e00a      	b.n	800dfe6 <HAL_UART_IRQHandler+0x1b6>
 800dfd0:	6878      	ldr	r0, [r7, #4]
 800dfd2:	f000 f841 	bl	800e058 <HAL_UART_ErrorCallback>
 800dfd6:	e006      	b.n	800dfe6 <HAL_UART_IRQHandler+0x1b6>
 800dfd8:	6878      	ldr	r0, [r7, #4]
 800dfda:	f000 f83d 	bl	800e058 <HAL_UART_ErrorCallback>
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	2200      	movs	r2, #0
 800dfe2:	63da      	str	r2, [r3, #60]	; 0x3c
 800dfe4:	e01e      	b.n	800e024 <HAL_UART_IRQHandler+0x1f4>
 800dfe6:	bf00      	nop
 800dfe8:	e01c      	b.n	800e024 <HAL_UART_IRQHandler+0x1f4>
 800dfea:	69fb      	ldr	r3, [r7, #28]
 800dfec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d008      	beq.n	800e006 <HAL_UART_IRQHandler+0x1d6>
 800dff4:	69bb      	ldr	r3, [r7, #24]
 800dff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d003      	beq.n	800e006 <HAL_UART_IRQHandler+0x1d6>
 800dffe:	6878      	ldr	r0, [r7, #4]
 800e000:	f000 f8fd 	bl	800e1fe <UART_Transmit_IT>
 800e004:	e00f      	b.n	800e026 <HAL_UART_IRQHandler+0x1f6>
 800e006:	69fb      	ldr	r3, [r7, #28]
 800e008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d00a      	beq.n	800e026 <HAL_UART_IRQHandler+0x1f6>
 800e010:	69bb      	ldr	r3, [r7, #24]
 800e012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e016:	2b00      	cmp	r3, #0
 800e018:	d005      	beq.n	800e026 <HAL_UART_IRQHandler+0x1f6>
 800e01a:	6878      	ldr	r0, [r7, #4]
 800e01c:	f000 f945 	bl	800e2aa <UART_EndTransmit_IT>
 800e020:	bf00      	nop
 800e022:	e000      	b.n	800e026 <HAL_UART_IRQHandler+0x1f6>
 800e024:	bf00      	nop
 800e026:	3720      	adds	r7, #32
 800e028:	46bd      	mov	sp, r7
 800e02a:	bd80      	pop	{r7, pc}
 800e02c:	0800e1d7 	.word	0x0800e1d7

0800e030 <HAL_UART_TxHalfCpltCallback>:
 800e030:	b480      	push	{r7}
 800e032:	b083      	sub	sp, #12
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
 800e038:	bf00      	nop
 800e03a:	370c      	adds	r7, #12
 800e03c:	46bd      	mov	sp, r7
 800e03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e042:	4770      	bx	lr

0800e044 <HAL_UART_RxCpltCallback>:
 800e044:	b480      	push	{r7}
 800e046:	b083      	sub	sp, #12
 800e048:	af00      	add	r7, sp, #0
 800e04a:	6078      	str	r0, [r7, #4]
 800e04c:	bf00      	nop
 800e04e:	370c      	adds	r7, #12
 800e050:	46bd      	mov	sp, r7
 800e052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e056:	4770      	bx	lr

0800e058 <HAL_UART_ErrorCallback>:
 800e058:	b480      	push	{r7}
 800e05a:	b083      	sub	sp, #12
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
 800e060:	bf00      	nop
 800e062:	370c      	adds	r7, #12
 800e064:	46bd      	mov	sp, r7
 800e066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06a:	4770      	bx	lr

0800e06c <UART_DMATransmitCplt>:
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b084      	sub	sp, #16
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e078:	60fb      	str	r3, [r7, #12]
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e084:	2b00      	cmp	r3, #0
 800e086:	d113      	bne.n	800e0b0 <UART_DMATransmitCplt+0x44>
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	2200      	movs	r2, #0
 800e08c:	84da      	strh	r2, [r3, #38]	; 0x26
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	695a      	ldr	r2, [r3, #20]
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e09c:	615a      	str	r2, [r3, #20]
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	68da      	ldr	r2, [r3, #12]
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e0ac:	60da      	str	r2, [r3, #12]
 800e0ae:	e002      	b.n	800e0b6 <UART_DMATransmitCplt+0x4a>
 800e0b0:	68f8      	ldr	r0, [r7, #12]
 800e0b2:	f7fc fdf5 	bl	800aca0 <HAL_UART_TxCpltCallback>
 800e0b6:	bf00      	nop
 800e0b8:	3710      	adds	r7, #16
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	bd80      	pop	{r7, pc}

0800e0be <UART_DMATxHalfCplt>:
 800e0be:	b580      	push	{r7, lr}
 800e0c0:	b084      	sub	sp, #16
 800e0c2:	af00      	add	r7, sp, #0
 800e0c4:	6078      	str	r0, [r7, #4]
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0ca:	60fb      	str	r3, [r7, #12]
 800e0cc:	68f8      	ldr	r0, [r7, #12]
 800e0ce:	f7ff ffaf 	bl	800e030 <HAL_UART_TxHalfCpltCallback>
 800e0d2:	bf00      	nop
 800e0d4:	3710      	adds	r7, #16
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd80      	pop	{r7, pc}

0800e0da <UART_DMAError>:
 800e0da:	b580      	push	{r7, lr}
 800e0dc:	b084      	sub	sp, #16
 800e0de:	af00      	add	r7, sp, #0
 800e0e0:	6078      	str	r0, [r7, #4]
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	60fb      	str	r3, [r7, #12]
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0ea:	60bb      	str	r3, [r7, #8]
 800e0ec:	68bb      	ldr	r3, [r7, #8]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	695b      	ldr	r3, [r3, #20]
 800e0f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e0f6:	2b80      	cmp	r3, #128	; 0x80
 800e0f8:	bf0c      	ite	eq
 800e0fa:	2301      	moveq	r3, #1
 800e0fc:	2300      	movne	r3, #0
 800e0fe:	b2db      	uxtb	r3, r3
 800e100:	60fb      	str	r3, [r7, #12]
 800e102:	68bb      	ldr	r3, [r7, #8]
 800e104:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e108:	b2db      	uxtb	r3, r3
 800e10a:	2b21      	cmp	r3, #33	; 0x21
 800e10c:	d108      	bne.n	800e120 <UART_DMAError+0x46>
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d005      	beq.n	800e120 <UART_DMAError+0x46>
 800e114:	68bb      	ldr	r3, [r7, #8]
 800e116:	2200      	movs	r2, #0
 800e118:	84da      	strh	r2, [r3, #38]	; 0x26
 800e11a:	68b8      	ldr	r0, [r7, #8]
 800e11c:	f000 f827 	bl	800e16e <UART_EndTxTransfer>
 800e120:	68bb      	ldr	r3, [r7, #8]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	695b      	ldr	r3, [r3, #20]
 800e126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e12a:	2b40      	cmp	r3, #64	; 0x40
 800e12c:	bf0c      	ite	eq
 800e12e:	2301      	moveq	r3, #1
 800e130:	2300      	movne	r3, #0
 800e132:	b2db      	uxtb	r3, r3
 800e134:	60fb      	str	r3, [r7, #12]
 800e136:	68bb      	ldr	r3, [r7, #8]
 800e138:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800e13c:	b2db      	uxtb	r3, r3
 800e13e:	2b22      	cmp	r3, #34	; 0x22
 800e140:	d108      	bne.n	800e154 <UART_DMAError+0x7a>
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d005      	beq.n	800e154 <UART_DMAError+0x7a>
 800e148:	68bb      	ldr	r3, [r7, #8]
 800e14a:	2200      	movs	r2, #0
 800e14c:	85da      	strh	r2, [r3, #46]	; 0x2e
 800e14e:	68b8      	ldr	r0, [r7, #8]
 800e150:	f000 f823 	bl	800e19a <UART_EndRxTransfer>
 800e154:	68bb      	ldr	r3, [r7, #8]
 800e156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e158:	f043 0210 	orr.w	r2, r3, #16
 800e15c:	68bb      	ldr	r3, [r7, #8]
 800e15e:	63da      	str	r2, [r3, #60]	; 0x3c
 800e160:	68b8      	ldr	r0, [r7, #8]
 800e162:	f7ff ff79 	bl	800e058 <HAL_UART_ErrorCallback>
 800e166:	bf00      	nop
 800e168:	3710      	adds	r7, #16
 800e16a:	46bd      	mov	sp, r7
 800e16c:	bd80      	pop	{r7, pc}

0800e16e <UART_EndTxTransfer>:
 800e16e:	b480      	push	{r7}
 800e170:	b083      	sub	sp, #12
 800e172:	af00      	add	r7, sp, #0
 800e174:	6078      	str	r0, [r7, #4]
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	68da      	ldr	r2, [r3, #12]
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800e184:	60da      	str	r2, [r3, #12]
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	2220      	movs	r2, #32
 800e18a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800e18e:	bf00      	nop
 800e190:	370c      	adds	r7, #12
 800e192:	46bd      	mov	sp, r7
 800e194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e198:	4770      	bx	lr

0800e19a <UART_EndRxTransfer>:
 800e19a:	b480      	push	{r7}
 800e19c:	b083      	sub	sp, #12
 800e19e:	af00      	add	r7, sp, #0
 800e1a0:	6078      	str	r0, [r7, #4]
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	68da      	ldr	r2, [r3, #12]
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e1b0:	60da      	str	r2, [r3, #12]
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	695a      	ldr	r2, [r3, #20]
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	f022 0201 	bic.w	r2, r2, #1
 800e1c0:	615a      	str	r2, [r3, #20]
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	2220      	movs	r2, #32
 800e1c6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800e1ca:	bf00      	nop
 800e1cc:	370c      	adds	r7, #12
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d4:	4770      	bx	lr

0800e1d6 <UART_DMAAbortOnError>:
 800e1d6:	b580      	push	{r7, lr}
 800e1d8:	b084      	sub	sp, #16
 800e1da:	af00      	add	r7, sp, #0
 800e1dc:	6078      	str	r0, [r7, #4]
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1e2:	60fb      	str	r3, [r7, #12]
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	85da      	strh	r2, [r3, #46]	; 0x2e
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	84da      	strh	r2, [r3, #38]	; 0x26
 800e1f0:	68f8      	ldr	r0, [r7, #12]
 800e1f2:	f7ff ff31 	bl	800e058 <HAL_UART_ErrorCallback>
 800e1f6:	bf00      	nop
 800e1f8:	3710      	adds	r7, #16
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	bd80      	pop	{r7, pc}

0800e1fe <UART_Transmit_IT>:
 800e1fe:	b480      	push	{r7}
 800e200:	b085      	sub	sp, #20
 800e202:	af00      	add	r7, sp, #0
 800e204:	6078      	str	r0, [r7, #4]
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e20c:	b2db      	uxtb	r3, r3
 800e20e:	2b21      	cmp	r3, #33	; 0x21
 800e210:	d144      	bne.n	800e29c <UART_Transmit_IT+0x9e>
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	689b      	ldr	r3, [r3, #8]
 800e216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e21a:	d11a      	bne.n	800e252 <UART_Transmit_IT+0x54>
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	6a1b      	ldr	r3, [r3, #32]
 800e220:	60fb      	str	r3, [r7, #12]
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	881b      	ldrh	r3, [r3, #0]
 800e226:	461a      	mov	r2, r3
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e230:	605a      	str	r2, [r3, #4]
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	691b      	ldr	r3, [r3, #16]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d105      	bne.n	800e246 <UART_Transmit_IT+0x48>
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	6a1b      	ldr	r3, [r3, #32]
 800e23e:	1c9a      	adds	r2, r3, #2
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	621a      	str	r2, [r3, #32]
 800e244:	e00e      	b.n	800e264 <UART_Transmit_IT+0x66>
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	6a1b      	ldr	r3, [r3, #32]
 800e24a:	1c5a      	adds	r2, r3, #1
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	621a      	str	r2, [r3, #32]
 800e250:	e008      	b.n	800e264 <UART_Transmit_IT+0x66>
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	6a1b      	ldr	r3, [r3, #32]
 800e256:	1c59      	adds	r1, r3, #1
 800e258:	687a      	ldr	r2, [r7, #4]
 800e25a:	6211      	str	r1, [r2, #32]
 800e25c:	781a      	ldrb	r2, [r3, #0]
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	605a      	str	r2, [r3, #4]
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e268:	b29b      	uxth	r3, r3
 800e26a:	3b01      	subs	r3, #1
 800e26c:	b29b      	uxth	r3, r3
 800e26e:	687a      	ldr	r2, [r7, #4]
 800e270:	4619      	mov	r1, r3
 800e272:	84d1      	strh	r1, [r2, #38]	; 0x26
 800e274:	2b00      	cmp	r3, #0
 800e276:	d10f      	bne.n	800e298 <UART_Transmit_IT+0x9a>
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	68da      	ldr	r2, [r3, #12]
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e286:	60da      	str	r2, [r3, #12]
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	68da      	ldr	r2, [r3, #12]
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e296:	60da      	str	r2, [r3, #12]
 800e298:	2300      	movs	r3, #0
 800e29a:	e000      	b.n	800e29e <UART_Transmit_IT+0xa0>
 800e29c:	2302      	movs	r3, #2
 800e29e:	4618      	mov	r0, r3
 800e2a0:	3714      	adds	r7, #20
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a8:	4770      	bx	lr

0800e2aa <UART_EndTransmit_IT>:
 800e2aa:	b580      	push	{r7, lr}
 800e2ac:	b082      	sub	sp, #8
 800e2ae:	af00      	add	r7, sp, #0
 800e2b0:	6078      	str	r0, [r7, #4]
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	68da      	ldr	r2, [r3, #12]
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e2c0:	60da      	str	r2, [r3, #12]
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	2220      	movs	r2, #32
 800e2c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800e2ca:	6878      	ldr	r0, [r7, #4]
 800e2cc:	f7fc fce8 	bl	800aca0 <HAL_UART_TxCpltCallback>
 800e2d0:	2300      	movs	r3, #0
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	3708      	adds	r7, #8
 800e2d6:	46bd      	mov	sp, r7
 800e2d8:	bd80      	pop	{r7, pc}

0800e2da <UART_Receive_IT>:
 800e2da:	b580      	push	{r7, lr}
 800e2dc:	b084      	sub	sp, #16
 800e2de:	af00      	add	r7, sp, #0
 800e2e0:	6078      	str	r0, [r7, #4]
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800e2e8:	b2db      	uxtb	r3, r3
 800e2ea:	2b22      	cmp	r3, #34	; 0x22
 800e2ec:	d171      	bne.n	800e3d2 <UART_Receive_IT+0xf8>
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	689b      	ldr	r3, [r3, #8]
 800e2f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e2f6:	d123      	bne.n	800e340 <UART_Receive_IT+0x66>
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2fc:	60fb      	str	r3, [r7, #12]
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	691b      	ldr	r3, [r3, #16]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d10e      	bne.n	800e324 <UART_Receive_IT+0x4a>
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	685b      	ldr	r3, [r3, #4]
 800e30c:	b29b      	uxth	r3, r3
 800e30e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e312:	b29a      	uxth	r2, r3
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	801a      	strh	r2, [r3, #0]
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e31c:	1c9a      	adds	r2, r3, #2
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	629a      	str	r2, [r3, #40]	; 0x28
 800e322:	e029      	b.n	800e378 <UART_Receive_IT+0x9e>
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	685b      	ldr	r3, [r3, #4]
 800e32a:	b29b      	uxth	r3, r3
 800e32c:	b2db      	uxtb	r3, r3
 800e32e:	b29a      	uxth	r2, r3
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	801a      	strh	r2, [r3, #0]
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e338:	1c5a      	adds	r2, r3, #1
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	629a      	str	r2, [r3, #40]	; 0x28
 800e33e:	e01b      	b.n	800e378 <UART_Receive_IT+0x9e>
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	691b      	ldr	r3, [r3, #16]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d10a      	bne.n	800e35e <UART_Receive_IT+0x84>
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	6858      	ldr	r0, [r3, #4]
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e352:	1c59      	adds	r1, r3, #1
 800e354:	687a      	ldr	r2, [r7, #4]
 800e356:	6291      	str	r1, [r2, #40]	; 0x28
 800e358:	b2c2      	uxtb	r2, r0
 800e35a:	701a      	strb	r2, [r3, #0]
 800e35c:	e00c      	b.n	800e378 <UART_Receive_IT+0x9e>
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	685b      	ldr	r3, [r3, #4]
 800e364:	b2da      	uxtb	r2, r3
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e36a:	1c58      	adds	r0, r3, #1
 800e36c:	6879      	ldr	r1, [r7, #4]
 800e36e:	6288      	str	r0, [r1, #40]	; 0x28
 800e370:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e374:	b2d2      	uxtb	r2, r2
 800e376:	701a      	strb	r2, [r3, #0]
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e37c:	b29b      	uxth	r3, r3
 800e37e:	3b01      	subs	r3, #1
 800e380:	b29b      	uxth	r3, r3
 800e382:	687a      	ldr	r2, [r7, #4]
 800e384:	4619      	mov	r1, r3
 800e386:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d120      	bne.n	800e3ce <UART_Receive_IT+0xf4>
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	68da      	ldr	r2, [r3, #12]
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	f022 0220 	bic.w	r2, r2, #32
 800e39a:	60da      	str	r2, [r3, #12]
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	68da      	ldr	r2, [r3, #12]
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e3aa:	60da      	str	r2, [r3, #12]
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	695a      	ldr	r2, [r3, #20]
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	f022 0201 	bic.w	r2, r2, #1
 800e3ba:	615a      	str	r2, [r3, #20]
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	2220      	movs	r2, #32
 800e3c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800e3c4:	6878      	ldr	r0, [r7, #4]
 800e3c6:	f7ff fe3d 	bl	800e044 <HAL_UART_RxCpltCallback>
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	e002      	b.n	800e3d4 <UART_Receive_IT+0xfa>
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	e000      	b.n	800e3d4 <UART_Receive_IT+0xfa>
 800e3d2:	2302      	movs	r3, #2
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	3710      	adds	r7, #16
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	bd80      	pop	{r7, pc}

0800e3dc <UART_SetConfig>:
 800e3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3e0:	b085      	sub	sp, #20
 800e3e2:	af00      	add	r7, sp, #0
 800e3e4:	6078      	str	r0, [r7, #4]
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	691b      	ldr	r3, [r3, #16]
 800e3ec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	68da      	ldr	r2, [r3, #12]
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	430a      	orrs	r2, r1
 800e3fa:	611a      	str	r2, [r3, #16]
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	689a      	ldr	r2, [r3, #8]
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	691b      	ldr	r3, [r3, #16]
 800e404:	431a      	orrs	r2, r3
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	695b      	ldr	r3, [r3, #20]
 800e40a:	431a      	orrs	r2, r3
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	69db      	ldr	r3, [r3, #28]
 800e410:	4313      	orrs	r3, r2
 800e412:	60fb      	str	r3, [r7, #12]
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	68db      	ldr	r3, [r3, #12]
 800e41a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800e41e:	f023 030c 	bic.w	r3, r3, #12
 800e422:	687a      	ldr	r2, [r7, #4]
 800e424:	6812      	ldr	r2, [r2, #0]
 800e426:	68f9      	ldr	r1, [r7, #12]
 800e428:	430b      	orrs	r3, r1
 800e42a:	60d3      	str	r3, [r2, #12]
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	695b      	ldr	r3, [r3, #20]
 800e432:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	699a      	ldr	r2, [r3, #24]
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	430a      	orrs	r2, r1
 800e440:	615a      	str	r2, [r3, #20]
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	69db      	ldr	r3, [r3, #28]
 800e446:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e44a:	f040 818b 	bne.w	800e764 <UART_SetConfig+0x388>
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	4ac1      	ldr	r2, [pc, #772]	; (800e758 <UART_SetConfig+0x37c>)
 800e454:	4293      	cmp	r3, r2
 800e456:	d005      	beq.n	800e464 <UART_SetConfig+0x88>
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	4abf      	ldr	r2, [pc, #764]	; (800e75c <UART_SetConfig+0x380>)
 800e45e:	4293      	cmp	r3, r2
 800e460:	f040 80bd 	bne.w	800e5de <UART_SetConfig+0x202>
 800e464:	f7ff f934 	bl	800d6d0 <HAL_RCC_GetPCLK2Freq>
 800e468:	60b8      	str	r0, [r7, #8]
 800e46a:	68bb      	ldr	r3, [r7, #8]
 800e46c:	461d      	mov	r5, r3
 800e46e:	f04f 0600 	mov.w	r6, #0
 800e472:	46a8      	mov	r8, r5
 800e474:	46b1      	mov	r9, r6
 800e476:	eb18 0308 	adds.w	r3, r8, r8
 800e47a:	eb49 0409 	adc.w	r4, r9, r9
 800e47e:	4698      	mov	r8, r3
 800e480:	46a1      	mov	r9, r4
 800e482:	eb18 0805 	adds.w	r8, r8, r5
 800e486:	eb49 0906 	adc.w	r9, r9, r6
 800e48a:	f04f 0100 	mov.w	r1, #0
 800e48e:	f04f 0200 	mov.w	r2, #0
 800e492:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800e496:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800e49a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800e49e:	4688      	mov	r8, r1
 800e4a0:	4691      	mov	r9, r2
 800e4a2:	eb18 0005 	adds.w	r0, r8, r5
 800e4a6:	eb49 0106 	adc.w	r1, r9, r6
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	685b      	ldr	r3, [r3, #4]
 800e4ae:	461d      	mov	r5, r3
 800e4b0:	f04f 0600 	mov.w	r6, #0
 800e4b4:	196b      	adds	r3, r5, r5
 800e4b6:	eb46 0406 	adc.w	r4, r6, r6
 800e4ba:	461a      	mov	r2, r3
 800e4bc:	4623      	mov	r3, r4
 800e4be:	f7f2 fbe3 	bl	8000c88 <__aeabi_uldivmod>
 800e4c2:	4603      	mov	r3, r0
 800e4c4:	460c      	mov	r4, r1
 800e4c6:	461a      	mov	r2, r3
 800e4c8:	4ba5      	ldr	r3, [pc, #660]	; (800e760 <UART_SetConfig+0x384>)
 800e4ca:	fba3 2302 	umull	r2, r3, r3, r2
 800e4ce:	095b      	lsrs	r3, r3, #5
 800e4d0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800e4d4:	68bb      	ldr	r3, [r7, #8]
 800e4d6:	461d      	mov	r5, r3
 800e4d8:	f04f 0600 	mov.w	r6, #0
 800e4dc:	46a9      	mov	r9, r5
 800e4de:	46b2      	mov	sl, r6
 800e4e0:	eb19 0309 	adds.w	r3, r9, r9
 800e4e4:	eb4a 040a 	adc.w	r4, sl, sl
 800e4e8:	4699      	mov	r9, r3
 800e4ea:	46a2      	mov	sl, r4
 800e4ec:	eb19 0905 	adds.w	r9, r9, r5
 800e4f0:	eb4a 0a06 	adc.w	sl, sl, r6
 800e4f4:	f04f 0100 	mov.w	r1, #0
 800e4f8:	f04f 0200 	mov.w	r2, #0
 800e4fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e500:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e504:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e508:	4689      	mov	r9, r1
 800e50a:	4692      	mov	sl, r2
 800e50c:	eb19 0005 	adds.w	r0, r9, r5
 800e510:	eb4a 0106 	adc.w	r1, sl, r6
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	685b      	ldr	r3, [r3, #4]
 800e518:	461d      	mov	r5, r3
 800e51a:	f04f 0600 	mov.w	r6, #0
 800e51e:	196b      	adds	r3, r5, r5
 800e520:	eb46 0406 	adc.w	r4, r6, r6
 800e524:	461a      	mov	r2, r3
 800e526:	4623      	mov	r3, r4
 800e528:	f7f2 fbae 	bl	8000c88 <__aeabi_uldivmod>
 800e52c:	4603      	mov	r3, r0
 800e52e:	460c      	mov	r4, r1
 800e530:	461a      	mov	r2, r3
 800e532:	4b8b      	ldr	r3, [pc, #556]	; (800e760 <UART_SetConfig+0x384>)
 800e534:	fba3 1302 	umull	r1, r3, r3, r2
 800e538:	095b      	lsrs	r3, r3, #5
 800e53a:	2164      	movs	r1, #100	; 0x64
 800e53c:	fb01 f303 	mul.w	r3, r1, r3
 800e540:	1ad3      	subs	r3, r2, r3
 800e542:	00db      	lsls	r3, r3, #3
 800e544:	3332      	adds	r3, #50	; 0x32
 800e546:	4a86      	ldr	r2, [pc, #536]	; (800e760 <UART_SetConfig+0x384>)
 800e548:	fba2 2303 	umull	r2, r3, r2, r3
 800e54c:	095b      	lsrs	r3, r3, #5
 800e54e:	005b      	lsls	r3, r3, #1
 800e550:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e554:	4498      	add	r8, r3
 800e556:	68bb      	ldr	r3, [r7, #8]
 800e558:	461d      	mov	r5, r3
 800e55a:	f04f 0600 	mov.w	r6, #0
 800e55e:	46a9      	mov	r9, r5
 800e560:	46b2      	mov	sl, r6
 800e562:	eb19 0309 	adds.w	r3, r9, r9
 800e566:	eb4a 040a 	adc.w	r4, sl, sl
 800e56a:	4699      	mov	r9, r3
 800e56c:	46a2      	mov	sl, r4
 800e56e:	eb19 0905 	adds.w	r9, r9, r5
 800e572:	eb4a 0a06 	adc.w	sl, sl, r6
 800e576:	f04f 0100 	mov.w	r1, #0
 800e57a:	f04f 0200 	mov.w	r2, #0
 800e57e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e582:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e586:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e58a:	4689      	mov	r9, r1
 800e58c:	4692      	mov	sl, r2
 800e58e:	eb19 0005 	adds.w	r0, r9, r5
 800e592:	eb4a 0106 	adc.w	r1, sl, r6
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	685b      	ldr	r3, [r3, #4]
 800e59a:	461d      	mov	r5, r3
 800e59c:	f04f 0600 	mov.w	r6, #0
 800e5a0:	196b      	adds	r3, r5, r5
 800e5a2:	eb46 0406 	adc.w	r4, r6, r6
 800e5a6:	461a      	mov	r2, r3
 800e5a8:	4623      	mov	r3, r4
 800e5aa:	f7f2 fb6d 	bl	8000c88 <__aeabi_uldivmod>
 800e5ae:	4603      	mov	r3, r0
 800e5b0:	460c      	mov	r4, r1
 800e5b2:	461a      	mov	r2, r3
 800e5b4:	4b6a      	ldr	r3, [pc, #424]	; (800e760 <UART_SetConfig+0x384>)
 800e5b6:	fba3 1302 	umull	r1, r3, r3, r2
 800e5ba:	095b      	lsrs	r3, r3, #5
 800e5bc:	2164      	movs	r1, #100	; 0x64
 800e5be:	fb01 f303 	mul.w	r3, r1, r3
 800e5c2:	1ad3      	subs	r3, r2, r3
 800e5c4:	00db      	lsls	r3, r3, #3
 800e5c6:	3332      	adds	r3, #50	; 0x32
 800e5c8:	4a65      	ldr	r2, [pc, #404]	; (800e760 <UART_SetConfig+0x384>)
 800e5ca:	fba2 2303 	umull	r2, r3, r2, r3
 800e5ce:	095b      	lsrs	r3, r3, #5
 800e5d0:	f003 0207 	and.w	r2, r3, #7
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	4442      	add	r2, r8
 800e5da:	609a      	str	r2, [r3, #8]
 800e5dc:	e26f      	b.n	800eabe <UART_SetConfig+0x6e2>
 800e5de:	f7ff f863 	bl	800d6a8 <HAL_RCC_GetPCLK1Freq>
 800e5e2:	60b8      	str	r0, [r7, #8]
 800e5e4:	68bb      	ldr	r3, [r7, #8]
 800e5e6:	461d      	mov	r5, r3
 800e5e8:	f04f 0600 	mov.w	r6, #0
 800e5ec:	46a8      	mov	r8, r5
 800e5ee:	46b1      	mov	r9, r6
 800e5f0:	eb18 0308 	adds.w	r3, r8, r8
 800e5f4:	eb49 0409 	adc.w	r4, r9, r9
 800e5f8:	4698      	mov	r8, r3
 800e5fa:	46a1      	mov	r9, r4
 800e5fc:	eb18 0805 	adds.w	r8, r8, r5
 800e600:	eb49 0906 	adc.w	r9, r9, r6
 800e604:	f04f 0100 	mov.w	r1, #0
 800e608:	f04f 0200 	mov.w	r2, #0
 800e60c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800e610:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800e614:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800e618:	4688      	mov	r8, r1
 800e61a:	4691      	mov	r9, r2
 800e61c:	eb18 0005 	adds.w	r0, r8, r5
 800e620:	eb49 0106 	adc.w	r1, r9, r6
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	685b      	ldr	r3, [r3, #4]
 800e628:	461d      	mov	r5, r3
 800e62a:	f04f 0600 	mov.w	r6, #0
 800e62e:	196b      	adds	r3, r5, r5
 800e630:	eb46 0406 	adc.w	r4, r6, r6
 800e634:	461a      	mov	r2, r3
 800e636:	4623      	mov	r3, r4
 800e638:	f7f2 fb26 	bl	8000c88 <__aeabi_uldivmod>
 800e63c:	4603      	mov	r3, r0
 800e63e:	460c      	mov	r4, r1
 800e640:	461a      	mov	r2, r3
 800e642:	4b47      	ldr	r3, [pc, #284]	; (800e760 <UART_SetConfig+0x384>)
 800e644:	fba3 2302 	umull	r2, r3, r3, r2
 800e648:	095b      	lsrs	r3, r3, #5
 800e64a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800e64e:	68bb      	ldr	r3, [r7, #8]
 800e650:	461d      	mov	r5, r3
 800e652:	f04f 0600 	mov.w	r6, #0
 800e656:	46a9      	mov	r9, r5
 800e658:	46b2      	mov	sl, r6
 800e65a:	eb19 0309 	adds.w	r3, r9, r9
 800e65e:	eb4a 040a 	adc.w	r4, sl, sl
 800e662:	4699      	mov	r9, r3
 800e664:	46a2      	mov	sl, r4
 800e666:	eb19 0905 	adds.w	r9, r9, r5
 800e66a:	eb4a 0a06 	adc.w	sl, sl, r6
 800e66e:	f04f 0100 	mov.w	r1, #0
 800e672:	f04f 0200 	mov.w	r2, #0
 800e676:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e67a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e67e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e682:	4689      	mov	r9, r1
 800e684:	4692      	mov	sl, r2
 800e686:	eb19 0005 	adds.w	r0, r9, r5
 800e68a:	eb4a 0106 	adc.w	r1, sl, r6
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	685b      	ldr	r3, [r3, #4]
 800e692:	461d      	mov	r5, r3
 800e694:	f04f 0600 	mov.w	r6, #0
 800e698:	196b      	adds	r3, r5, r5
 800e69a:	eb46 0406 	adc.w	r4, r6, r6
 800e69e:	461a      	mov	r2, r3
 800e6a0:	4623      	mov	r3, r4
 800e6a2:	f7f2 faf1 	bl	8000c88 <__aeabi_uldivmod>
 800e6a6:	4603      	mov	r3, r0
 800e6a8:	460c      	mov	r4, r1
 800e6aa:	461a      	mov	r2, r3
 800e6ac:	4b2c      	ldr	r3, [pc, #176]	; (800e760 <UART_SetConfig+0x384>)
 800e6ae:	fba3 1302 	umull	r1, r3, r3, r2
 800e6b2:	095b      	lsrs	r3, r3, #5
 800e6b4:	2164      	movs	r1, #100	; 0x64
 800e6b6:	fb01 f303 	mul.w	r3, r1, r3
 800e6ba:	1ad3      	subs	r3, r2, r3
 800e6bc:	00db      	lsls	r3, r3, #3
 800e6be:	3332      	adds	r3, #50	; 0x32
 800e6c0:	4a27      	ldr	r2, [pc, #156]	; (800e760 <UART_SetConfig+0x384>)
 800e6c2:	fba2 2303 	umull	r2, r3, r2, r3
 800e6c6:	095b      	lsrs	r3, r3, #5
 800e6c8:	005b      	lsls	r3, r3, #1
 800e6ca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e6ce:	4498      	add	r8, r3
 800e6d0:	68bb      	ldr	r3, [r7, #8]
 800e6d2:	461d      	mov	r5, r3
 800e6d4:	f04f 0600 	mov.w	r6, #0
 800e6d8:	46a9      	mov	r9, r5
 800e6da:	46b2      	mov	sl, r6
 800e6dc:	eb19 0309 	adds.w	r3, r9, r9
 800e6e0:	eb4a 040a 	adc.w	r4, sl, sl
 800e6e4:	4699      	mov	r9, r3
 800e6e6:	46a2      	mov	sl, r4
 800e6e8:	eb19 0905 	adds.w	r9, r9, r5
 800e6ec:	eb4a 0a06 	adc.w	sl, sl, r6
 800e6f0:	f04f 0100 	mov.w	r1, #0
 800e6f4:	f04f 0200 	mov.w	r2, #0
 800e6f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e6fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e700:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e704:	4689      	mov	r9, r1
 800e706:	4692      	mov	sl, r2
 800e708:	eb19 0005 	adds.w	r0, r9, r5
 800e70c:	eb4a 0106 	adc.w	r1, sl, r6
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	685b      	ldr	r3, [r3, #4]
 800e714:	461d      	mov	r5, r3
 800e716:	f04f 0600 	mov.w	r6, #0
 800e71a:	196b      	adds	r3, r5, r5
 800e71c:	eb46 0406 	adc.w	r4, r6, r6
 800e720:	461a      	mov	r2, r3
 800e722:	4623      	mov	r3, r4
 800e724:	f7f2 fab0 	bl	8000c88 <__aeabi_uldivmod>
 800e728:	4603      	mov	r3, r0
 800e72a:	460c      	mov	r4, r1
 800e72c:	461a      	mov	r2, r3
 800e72e:	4b0c      	ldr	r3, [pc, #48]	; (800e760 <UART_SetConfig+0x384>)
 800e730:	fba3 1302 	umull	r1, r3, r3, r2
 800e734:	095b      	lsrs	r3, r3, #5
 800e736:	2164      	movs	r1, #100	; 0x64
 800e738:	fb01 f303 	mul.w	r3, r1, r3
 800e73c:	1ad3      	subs	r3, r2, r3
 800e73e:	00db      	lsls	r3, r3, #3
 800e740:	3332      	adds	r3, #50	; 0x32
 800e742:	4a07      	ldr	r2, [pc, #28]	; (800e760 <UART_SetConfig+0x384>)
 800e744:	fba2 2303 	umull	r2, r3, r2, r3
 800e748:	095b      	lsrs	r3, r3, #5
 800e74a:	f003 0207 	and.w	r2, r3, #7
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	4442      	add	r2, r8
 800e754:	609a      	str	r2, [r3, #8]
 800e756:	e1b2      	b.n	800eabe <UART_SetConfig+0x6e2>
 800e758:	40011000 	.word	0x40011000
 800e75c:	40011400 	.word	0x40011400
 800e760:	51eb851f 	.word	0x51eb851f
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	4ad7      	ldr	r2, [pc, #860]	; (800eac8 <UART_SetConfig+0x6ec>)
 800e76a:	4293      	cmp	r3, r2
 800e76c:	d005      	beq.n	800e77a <UART_SetConfig+0x39e>
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	4ad6      	ldr	r2, [pc, #856]	; (800eacc <UART_SetConfig+0x6f0>)
 800e774:	4293      	cmp	r3, r2
 800e776:	f040 80d1 	bne.w	800e91c <UART_SetConfig+0x540>
 800e77a:	f7fe ffa9 	bl	800d6d0 <HAL_RCC_GetPCLK2Freq>
 800e77e:	60b8      	str	r0, [r7, #8]
 800e780:	68bb      	ldr	r3, [r7, #8]
 800e782:	469a      	mov	sl, r3
 800e784:	f04f 0b00 	mov.w	fp, #0
 800e788:	46d0      	mov	r8, sl
 800e78a:	46d9      	mov	r9, fp
 800e78c:	eb18 0308 	adds.w	r3, r8, r8
 800e790:	eb49 0409 	adc.w	r4, r9, r9
 800e794:	4698      	mov	r8, r3
 800e796:	46a1      	mov	r9, r4
 800e798:	eb18 080a 	adds.w	r8, r8, sl
 800e79c:	eb49 090b 	adc.w	r9, r9, fp
 800e7a0:	f04f 0100 	mov.w	r1, #0
 800e7a4:	f04f 0200 	mov.w	r2, #0
 800e7a8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800e7ac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800e7b0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800e7b4:	4688      	mov	r8, r1
 800e7b6:	4691      	mov	r9, r2
 800e7b8:	eb1a 0508 	adds.w	r5, sl, r8
 800e7bc:	eb4b 0609 	adc.w	r6, fp, r9
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	685b      	ldr	r3, [r3, #4]
 800e7c4:	4619      	mov	r1, r3
 800e7c6:	f04f 0200 	mov.w	r2, #0
 800e7ca:	f04f 0300 	mov.w	r3, #0
 800e7ce:	f04f 0400 	mov.w	r4, #0
 800e7d2:	0094      	lsls	r4, r2, #2
 800e7d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e7d8:	008b      	lsls	r3, r1, #2
 800e7da:	461a      	mov	r2, r3
 800e7dc:	4623      	mov	r3, r4
 800e7de:	4628      	mov	r0, r5
 800e7e0:	4631      	mov	r1, r6
 800e7e2:	f7f2 fa51 	bl	8000c88 <__aeabi_uldivmod>
 800e7e6:	4603      	mov	r3, r0
 800e7e8:	460c      	mov	r4, r1
 800e7ea:	461a      	mov	r2, r3
 800e7ec:	4bb8      	ldr	r3, [pc, #736]	; (800ead0 <UART_SetConfig+0x6f4>)
 800e7ee:	fba3 2302 	umull	r2, r3, r3, r2
 800e7f2:	095b      	lsrs	r3, r3, #5
 800e7f4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800e7f8:	68bb      	ldr	r3, [r7, #8]
 800e7fa:	469b      	mov	fp, r3
 800e7fc:	f04f 0c00 	mov.w	ip, #0
 800e800:	46d9      	mov	r9, fp
 800e802:	46e2      	mov	sl, ip
 800e804:	eb19 0309 	adds.w	r3, r9, r9
 800e808:	eb4a 040a 	adc.w	r4, sl, sl
 800e80c:	4699      	mov	r9, r3
 800e80e:	46a2      	mov	sl, r4
 800e810:	eb19 090b 	adds.w	r9, r9, fp
 800e814:	eb4a 0a0c 	adc.w	sl, sl, ip
 800e818:	f04f 0100 	mov.w	r1, #0
 800e81c:	f04f 0200 	mov.w	r2, #0
 800e820:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e824:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e828:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e82c:	4689      	mov	r9, r1
 800e82e:	4692      	mov	sl, r2
 800e830:	eb1b 0509 	adds.w	r5, fp, r9
 800e834:	eb4c 060a 	adc.w	r6, ip, sl
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	685b      	ldr	r3, [r3, #4]
 800e83c:	4619      	mov	r1, r3
 800e83e:	f04f 0200 	mov.w	r2, #0
 800e842:	f04f 0300 	mov.w	r3, #0
 800e846:	f04f 0400 	mov.w	r4, #0
 800e84a:	0094      	lsls	r4, r2, #2
 800e84c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e850:	008b      	lsls	r3, r1, #2
 800e852:	461a      	mov	r2, r3
 800e854:	4623      	mov	r3, r4
 800e856:	4628      	mov	r0, r5
 800e858:	4631      	mov	r1, r6
 800e85a:	f7f2 fa15 	bl	8000c88 <__aeabi_uldivmod>
 800e85e:	4603      	mov	r3, r0
 800e860:	460c      	mov	r4, r1
 800e862:	461a      	mov	r2, r3
 800e864:	4b9a      	ldr	r3, [pc, #616]	; (800ead0 <UART_SetConfig+0x6f4>)
 800e866:	fba3 1302 	umull	r1, r3, r3, r2
 800e86a:	095b      	lsrs	r3, r3, #5
 800e86c:	2164      	movs	r1, #100	; 0x64
 800e86e:	fb01 f303 	mul.w	r3, r1, r3
 800e872:	1ad3      	subs	r3, r2, r3
 800e874:	011b      	lsls	r3, r3, #4
 800e876:	3332      	adds	r3, #50	; 0x32
 800e878:	4a95      	ldr	r2, [pc, #596]	; (800ead0 <UART_SetConfig+0x6f4>)
 800e87a:	fba2 2303 	umull	r2, r3, r2, r3
 800e87e:	095b      	lsrs	r3, r3, #5
 800e880:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e884:	4498      	add	r8, r3
 800e886:	68bb      	ldr	r3, [r7, #8]
 800e888:	469b      	mov	fp, r3
 800e88a:	f04f 0c00 	mov.w	ip, #0
 800e88e:	46d9      	mov	r9, fp
 800e890:	46e2      	mov	sl, ip
 800e892:	eb19 0309 	adds.w	r3, r9, r9
 800e896:	eb4a 040a 	adc.w	r4, sl, sl
 800e89a:	4699      	mov	r9, r3
 800e89c:	46a2      	mov	sl, r4
 800e89e:	eb19 090b 	adds.w	r9, r9, fp
 800e8a2:	eb4a 0a0c 	adc.w	sl, sl, ip
 800e8a6:	f04f 0100 	mov.w	r1, #0
 800e8aa:	f04f 0200 	mov.w	r2, #0
 800e8ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e8b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e8b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e8ba:	4689      	mov	r9, r1
 800e8bc:	4692      	mov	sl, r2
 800e8be:	eb1b 0509 	adds.w	r5, fp, r9
 800e8c2:	eb4c 060a 	adc.w	r6, ip, sl
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	685b      	ldr	r3, [r3, #4]
 800e8ca:	4619      	mov	r1, r3
 800e8cc:	f04f 0200 	mov.w	r2, #0
 800e8d0:	f04f 0300 	mov.w	r3, #0
 800e8d4:	f04f 0400 	mov.w	r4, #0
 800e8d8:	0094      	lsls	r4, r2, #2
 800e8da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e8de:	008b      	lsls	r3, r1, #2
 800e8e0:	461a      	mov	r2, r3
 800e8e2:	4623      	mov	r3, r4
 800e8e4:	4628      	mov	r0, r5
 800e8e6:	4631      	mov	r1, r6
 800e8e8:	f7f2 f9ce 	bl	8000c88 <__aeabi_uldivmod>
 800e8ec:	4603      	mov	r3, r0
 800e8ee:	460c      	mov	r4, r1
 800e8f0:	461a      	mov	r2, r3
 800e8f2:	4b77      	ldr	r3, [pc, #476]	; (800ead0 <UART_SetConfig+0x6f4>)
 800e8f4:	fba3 1302 	umull	r1, r3, r3, r2
 800e8f8:	095b      	lsrs	r3, r3, #5
 800e8fa:	2164      	movs	r1, #100	; 0x64
 800e8fc:	fb01 f303 	mul.w	r3, r1, r3
 800e900:	1ad3      	subs	r3, r2, r3
 800e902:	011b      	lsls	r3, r3, #4
 800e904:	3332      	adds	r3, #50	; 0x32
 800e906:	4a72      	ldr	r2, [pc, #456]	; (800ead0 <UART_SetConfig+0x6f4>)
 800e908:	fba2 2303 	umull	r2, r3, r2, r3
 800e90c:	095b      	lsrs	r3, r3, #5
 800e90e:	f003 020f 	and.w	r2, r3, #15
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	4442      	add	r2, r8
 800e918:	609a      	str	r2, [r3, #8]
 800e91a:	e0d0      	b.n	800eabe <UART_SetConfig+0x6e2>
 800e91c:	f7fe fec4 	bl	800d6a8 <HAL_RCC_GetPCLK1Freq>
 800e920:	60b8      	str	r0, [r7, #8]
 800e922:	68bb      	ldr	r3, [r7, #8]
 800e924:	469a      	mov	sl, r3
 800e926:	f04f 0b00 	mov.w	fp, #0
 800e92a:	46d0      	mov	r8, sl
 800e92c:	46d9      	mov	r9, fp
 800e92e:	eb18 0308 	adds.w	r3, r8, r8
 800e932:	eb49 0409 	adc.w	r4, r9, r9
 800e936:	4698      	mov	r8, r3
 800e938:	46a1      	mov	r9, r4
 800e93a:	eb18 080a 	adds.w	r8, r8, sl
 800e93e:	eb49 090b 	adc.w	r9, r9, fp
 800e942:	f04f 0100 	mov.w	r1, #0
 800e946:	f04f 0200 	mov.w	r2, #0
 800e94a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800e94e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800e952:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800e956:	4688      	mov	r8, r1
 800e958:	4691      	mov	r9, r2
 800e95a:	eb1a 0508 	adds.w	r5, sl, r8
 800e95e:	eb4b 0609 	adc.w	r6, fp, r9
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	685b      	ldr	r3, [r3, #4]
 800e966:	4619      	mov	r1, r3
 800e968:	f04f 0200 	mov.w	r2, #0
 800e96c:	f04f 0300 	mov.w	r3, #0
 800e970:	f04f 0400 	mov.w	r4, #0
 800e974:	0094      	lsls	r4, r2, #2
 800e976:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e97a:	008b      	lsls	r3, r1, #2
 800e97c:	461a      	mov	r2, r3
 800e97e:	4623      	mov	r3, r4
 800e980:	4628      	mov	r0, r5
 800e982:	4631      	mov	r1, r6
 800e984:	f7f2 f980 	bl	8000c88 <__aeabi_uldivmod>
 800e988:	4603      	mov	r3, r0
 800e98a:	460c      	mov	r4, r1
 800e98c:	461a      	mov	r2, r3
 800e98e:	4b50      	ldr	r3, [pc, #320]	; (800ead0 <UART_SetConfig+0x6f4>)
 800e990:	fba3 2302 	umull	r2, r3, r3, r2
 800e994:	095b      	lsrs	r3, r3, #5
 800e996:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800e99a:	68bb      	ldr	r3, [r7, #8]
 800e99c:	469b      	mov	fp, r3
 800e99e:	f04f 0c00 	mov.w	ip, #0
 800e9a2:	46d9      	mov	r9, fp
 800e9a4:	46e2      	mov	sl, ip
 800e9a6:	eb19 0309 	adds.w	r3, r9, r9
 800e9aa:	eb4a 040a 	adc.w	r4, sl, sl
 800e9ae:	4699      	mov	r9, r3
 800e9b0:	46a2      	mov	sl, r4
 800e9b2:	eb19 090b 	adds.w	r9, r9, fp
 800e9b6:	eb4a 0a0c 	adc.w	sl, sl, ip
 800e9ba:	f04f 0100 	mov.w	r1, #0
 800e9be:	f04f 0200 	mov.w	r2, #0
 800e9c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e9c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e9ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e9ce:	4689      	mov	r9, r1
 800e9d0:	4692      	mov	sl, r2
 800e9d2:	eb1b 0509 	adds.w	r5, fp, r9
 800e9d6:	eb4c 060a 	adc.w	r6, ip, sl
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	685b      	ldr	r3, [r3, #4]
 800e9de:	4619      	mov	r1, r3
 800e9e0:	f04f 0200 	mov.w	r2, #0
 800e9e4:	f04f 0300 	mov.w	r3, #0
 800e9e8:	f04f 0400 	mov.w	r4, #0
 800e9ec:	0094      	lsls	r4, r2, #2
 800e9ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e9f2:	008b      	lsls	r3, r1, #2
 800e9f4:	461a      	mov	r2, r3
 800e9f6:	4623      	mov	r3, r4
 800e9f8:	4628      	mov	r0, r5
 800e9fa:	4631      	mov	r1, r6
 800e9fc:	f7f2 f944 	bl	8000c88 <__aeabi_uldivmod>
 800ea00:	4603      	mov	r3, r0
 800ea02:	460c      	mov	r4, r1
 800ea04:	461a      	mov	r2, r3
 800ea06:	4b32      	ldr	r3, [pc, #200]	; (800ead0 <UART_SetConfig+0x6f4>)
 800ea08:	fba3 1302 	umull	r1, r3, r3, r2
 800ea0c:	095b      	lsrs	r3, r3, #5
 800ea0e:	2164      	movs	r1, #100	; 0x64
 800ea10:	fb01 f303 	mul.w	r3, r1, r3
 800ea14:	1ad3      	subs	r3, r2, r3
 800ea16:	011b      	lsls	r3, r3, #4
 800ea18:	3332      	adds	r3, #50	; 0x32
 800ea1a:	4a2d      	ldr	r2, [pc, #180]	; (800ead0 <UART_SetConfig+0x6f4>)
 800ea1c:	fba2 2303 	umull	r2, r3, r2, r3
 800ea20:	095b      	lsrs	r3, r3, #5
 800ea22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ea26:	4498      	add	r8, r3
 800ea28:	68bb      	ldr	r3, [r7, #8]
 800ea2a:	469b      	mov	fp, r3
 800ea2c:	f04f 0c00 	mov.w	ip, #0
 800ea30:	46d9      	mov	r9, fp
 800ea32:	46e2      	mov	sl, ip
 800ea34:	eb19 0309 	adds.w	r3, r9, r9
 800ea38:	eb4a 040a 	adc.w	r4, sl, sl
 800ea3c:	4699      	mov	r9, r3
 800ea3e:	46a2      	mov	sl, r4
 800ea40:	eb19 090b 	adds.w	r9, r9, fp
 800ea44:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ea48:	f04f 0100 	mov.w	r1, #0
 800ea4c:	f04f 0200 	mov.w	r2, #0
 800ea50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ea54:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ea58:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ea5c:	4689      	mov	r9, r1
 800ea5e:	4692      	mov	sl, r2
 800ea60:	eb1b 0509 	adds.w	r5, fp, r9
 800ea64:	eb4c 060a 	adc.w	r6, ip, sl
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	685b      	ldr	r3, [r3, #4]
 800ea6c:	4619      	mov	r1, r3
 800ea6e:	f04f 0200 	mov.w	r2, #0
 800ea72:	f04f 0300 	mov.w	r3, #0
 800ea76:	f04f 0400 	mov.w	r4, #0
 800ea7a:	0094      	lsls	r4, r2, #2
 800ea7c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ea80:	008b      	lsls	r3, r1, #2
 800ea82:	461a      	mov	r2, r3
 800ea84:	4623      	mov	r3, r4
 800ea86:	4628      	mov	r0, r5
 800ea88:	4631      	mov	r1, r6
 800ea8a:	f7f2 f8fd 	bl	8000c88 <__aeabi_uldivmod>
 800ea8e:	4603      	mov	r3, r0
 800ea90:	460c      	mov	r4, r1
 800ea92:	461a      	mov	r2, r3
 800ea94:	4b0e      	ldr	r3, [pc, #56]	; (800ead0 <UART_SetConfig+0x6f4>)
 800ea96:	fba3 1302 	umull	r1, r3, r3, r2
 800ea9a:	095b      	lsrs	r3, r3, #5
 800ea9c:	2164      	movs	r1, #100	; 0x64
 800ea9e:	fb01 f303 	mul.w	r3, r1, r3
 800eaa2:	1ad3      	subs	r3, r2, r3
 800eaa4:	011b      	lsls	r3, r3, #4
 800eaa6:	3332      	adds	r3, #50	; 0x32
 800eaa8:	4a09      	ldr	r2, [pc, #36]	; (800ead0 <UART_SetConfig+0x6f4>)
 800eaaa:	fba2 2303 	umull	r2, r3, r2, r3
 800eaae:	095b      	lsrs	r3, r3, #5
 800eab0:	f003 020f 	and.w	r2, r3, #15
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	4442      	add	r2, r8
 800eaba:	609a      	str	r2, [r3, #8]
 800eabc:	e7ff      	b.n	800eabe <UART_SetConfig+0x6e2>
 800eabe:	bf00      	nop
 800eac0:	3714      	adds	r7, #20
 800eac2:	46bd      	mov	sp, r7
 800eac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eac8:	40011000 	.word	0x40011000
 800eacc:	40011400 	.word	0x40011400
 800ead0:	51eb851f 	.word	0x51eb851f

0800ead4 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800ead4:	b480      	push	{r7}
 800ead6:	b085      	sub	sp, #20
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
 800eadc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800eade:	2300      	movs	r3, #0
 800eae0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800eae2:	683b      	ldr	r3, [r7, #0]
 800eae4:	681a      	ldr	r2, [r3, #0]
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eaec:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800eaee:	68fa      	ldr	r2, [r7, #12]
 800eaf0:	4b20      	ldr	r3, [pc, #128]	; (800eb74 <FSMC_NORSRAM_Init+0xa0>)
 800eaf2:	4013      	ands	r3, r2
 800eaf4:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800eaf6:	683b      	ldr	r3, [r7, #0]
 800eaf8:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800eafa:	683b      	ldr	r3, [r7, #0]
 800eafc:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800eafe:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800eb00:	683b      	ldr	r3, [r7, #0]
 800eb02:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800eb04:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800eb06:	683b      	ldr	r3, [r7, #0]
 800eb08:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800eb0a:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800eb0c:	683b      	ldr	r3, [r7, #0]
 800eb0e:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800eb10:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800eb12:	683b      	ldr	r3, [r7, #0]
 800eb14:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800eb16:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800eb18:	683b      	ldr	r3, [r7, #0]
 800eb1a:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800eb1c:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800eb1e:	683b      	ldr	r3, [r7, #0]
 800eb20:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800eb22:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800eb24:	683b      	ldr	r3, [r7, #0]
 800eb26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800eb28:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800eb2a:	683b      	ldr	r3, [r7, #0]
 800eb2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800eb2e:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800eb30:	683b      	ldr	r3, [r7, #0]
 800eb32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800eb34:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800eb36:	683b      	ldr	r3, [r7, #0]
 800eb38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800eb3a:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800eb3c:	683b      	ldr	r3, [r7, #0]
 800eb3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800eb40:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800eb42:	68fa      	ldr	r2, [r7, #12]
 800eb44:	4313      	orrs	r3, r2
 800eb46:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800eb48:	683b      	ldr	r3, [r7, #0]
 800eb4a:	689b      	ldr	r3, [r3, #8]
 800eb4c:	2b08      	cmp	r3, #8
 800eb4e:	d103      	bne.n	800eb58 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb56:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800eb58:	683b      	ldr	r3, [r7, #0]
 800eb5a:	681a      	ldr	r2, [r3, #0]
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	68f9      	ldr	r1, [r7, #12]
 800eb60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800eb64:	2300      	movs	r3, #0
}
 800eb66:	4618      	mov	r0, r3
 800eb68:	3714      	adds	r7, #20
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb70:	4770      	bx	lr
 800eb72:	bf00      	nop
 800eb74:	fff00080 	.word	0xfff00080

0800eb78 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800eb78:	b480      	push	{r7}
 800eb7a:	b087      	sub	sp, #28
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	60f8      	str	r0, [r7, #12]
 800eb80:	60b9      	str	r1, [r7, #8]
 800eb82:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800eb84:	2300      	movs	r3, #0
 800eb86:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	1c5a      	adds	r2, r3, #1
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb92:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800eb94:	697b      	ldr	r3, [r7, #20]
 800eb96:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800eb9a:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800eb9c:	68bb      	ldr	r3, [r7, #8]
 800eb9e:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800eba0:	68bb      	ldr	r3, [r7, #8]
 800eba2:	685b      	ldr	r3, [r3, #4]
 800eba4:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800eba6:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800eba8:	68bb      	ldr	r3, [r7, #8]
 800ebaa:	689b      	ldr	r3, [r3, #8]
 800ebac:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800ebae:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800ebb0:	68bb      	ldr	r3, [r7, #8]
 800ebb2:	68db      	ldr	r3, [r3, #12]
 800ebb4:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800ebb6:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800ebb8:	68bb      	ldr	r3, [r7, #8]
 800ebba:	691b      	ldr	r3, [r3, #16]
 800ebbc:	3b01      	subs	r3, #1
 800ebbe:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800ebc0:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800ebc2:	68bb      	ldr	r3, [r7, #8]
 800ebc4:	695b      	ldr	r3, [r3, #20]
 800ebc6:	3b02      	subs	r3, #2
 800ebc8:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800ebca:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800ebcc:	68bb      	ldr	r3, [r7, #8]
 800ebce:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800ebd0:	4313      	orrs	r3, r2
 800ebd2:	697a      	ldr	r2, [r7, #20]
 800ebd4:	4313      	orrs	r3, r2
 800ebd6:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	1c5a      	adds	r2, r3, #1
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	6979      	ldr	r1, [r7, #20]
 800ebe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800ebe4:	2300      	movs	r3, #0
}
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	371c      	adds	r7, #28
 800ebea:	46bd      	mov	sp, r7
 800ebec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf0:	4770      	bx	lr
	...

0800ebf4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800ebf4:	b480      	push	{r7}
 800ebf6:	b087      	sub	sp, #28
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	60f8      	str	r0, [r7, #12]
 800ebfc:	60b9      	str	r1, [r7, #8]
 800ebfe:	607a      	str	r2, [r7, #4]
 800ec00:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800ec02:	2300      	movs	r3, #0
 800ec04:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800ec06:	683b      	ldr	r3, [r7, #0]
 800ec08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ec0c:	d122      	bne.n	800ec54 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	687a      	ldr	r2, [r7, #4]
 800ec12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec16:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800ec18:	697a      	ldr	r2, [r7, #20]
 800ec1a:	4b15      	ldr	r3, [pc, #84]	; (800ec70 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800ec1c:	4013      	ands	r3, r2
 800ec1e:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800ec20:	68bb      	ldr	r3, [r7, #8]
 800ec22:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800ec24:	68bb      	ldr	r3, [r7, #8]
 800ec26:	685b      	ldr	r3, [r3, #4]
 800ec28:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800ec2a:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800ec2c:	68bb      	ldr	r3, [r7, #8]
 800ec2e:	689b      	ldr	r3, [r3, #8]
 800ec30:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800ec32:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800ec34:	68bb      	ldr	r3, [r7, #8]
 800ec36:	68db      	ldr	r3, [r3, #12]
 800ec38:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800ec3a:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800ec3c:	68bb      	ldr	r3, [r7, #8]
 800ec3e:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800ec40:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800ec42:	697a      	ldr	r2, [r7, #20]
 800ec44:	4313      	orrs	r3, r2
 800ec46:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	687a      	ldr	r2, [r7, #4]
 800ec4c:	6979      	ldr	r1, [r7, #20]
 800ec4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800ec52:	e005      	b.n	800ec60 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	687a      	ldr	r2, [r7, #4]
 800ec58:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800ec5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800ec60:	2300      	movs	r3, #0
}
 800ec62:	4618      	mov	r0, r3
 800ec64:	371c      	adds	r7, #28
 800ec66:	46bd      	mov	sp, r7
 800ec68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6c:	4770      	bx	lr
 800ec6e:	bf00      	nop
 800ec70:	cff00000 	.word	0xcff00000

0800ec74 <USB_CoreInit>:
 800ec74:	b084      	sub	sp, #16
 800ec76:	b580      	push	{r7, lr}
 800ec78:	b084      	sub	sp, #16
 800ec7a:	af00      	add	r7, sp, #0
 800ec7c:	6078      	str	r0, [r7, #4]
 800ec7e:	f107 001c 	add.w	r0, r7, #28
 800ec82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800ec86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec88:	2b01      	cmp	r3, #1
 800ec8a:	d122      	bne.n	800ecd2 <USB_CoreInit+0x5e>
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	639a      	str	r2, [r3, #56]	; 0x38
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	68db      	ldr	r3, [r3, #12]
 800ec9c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800eca0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eca4:	687a      	ldr	r2, [r7, #4]
 800eca6:	60d3      	str	r3, [r2, #12]
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	68db      	ldr	r3, [r3, #12]
 800ecac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	60da      	str	r2, [r3, #12]
 800ecb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ecb6:	2b01      	cmp	r3, #1
 800ecb8:	d105      	bne.n	800ecc6 <USB_CoreInit+0x52>
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	68db      	ldr	r3, [r3, #12]
 800ecbe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	60da      	str	r2, [r3, #12]
 800ecc6:	6878      	ldr	r0, [r7, #4]
 800ecc8:	f001 fa7c 	bl	80101c4 <USB_CoreReset>
 800eccc:	4603      	mov	r3, r0
 800ecce:	73fb      	strb	r3, [r7, #15]
 800ecd0:	e01a      	b.n	800ed08 <USB_CoreInit+0x94>
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	68db      	ldr	r3, [r3, #12]
 800ecd6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	60da      	str	r2, [r3, #12]
 800ecde:	6878      	ldr	r0, [r7, #4]
 800ece0:	f001 fa70 	bl	80101c4 <USB_CoreReset>
 800ece4:	4603      	mov	r3, r0
 800ece6:	73fb      	strb	r3, [r7, #15]
 800ece8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d106      	bne.n	800ecfc <USB_CoreInit+0x88>
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecf2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	639a      	str	r2, [r3, #56]	; 0x38
 800ecfa:	e005      	b.n	800ed08 <USB_CoreInit+0x94>
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed00:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	639a      	str	r2, [r3, #56]	; 0x38
 800ed08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed0a:	2b01      	cmp	r3, #1
 800ed0c:	d10b      	bne.n	800ed26 <USB_CoreInit+0xb2>
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	689b      	ldr	r3, [r3, #8]
 800ed12:	f043 0206 	orr.w	r2, r3, #6
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	609a      	str	r2, [r3, #8]
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	689b      	ldr	r3, [r3, #8]
 800ed1e:	f043 0220 	orr.w	r2, r3, #32
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	609a      	str	r2, [r3, #8]
 800ed26:	7bfb      	ldrb	r3, [r7, #15]
 800ed28:	4618      	mov	r0, r3
 800ed2a:	3710      	adds	r7, #16
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ed32:	b004      	add	sp, #16
 800ed34:	4770      	bx	lr
	...

0800ed38 <USB_SetTurnaroundTime>:
 800ed38:	b480      	push	{r7}
 800ed3a:	b087      	sub	sp, #28
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	60f8      	str	r0, [r7, #12]
 800ed40:	60b9      	str	r1, [r7, #8]
 800ed42:	4613      	mov	r3, r2
 800ed44:	71fb      	strb	r3, [r7, #7]
 800ed46:	79fb      	ldrb	r3, [r7, #7]
 800ed48:	2b02      	cmp	r3, #2
 800ed4a:	d165      	bne.n	800ee18 <USB_SetTurnaroundTime+0xe0>
 800ed4c:	68bb      	ldr	r3, [r7, #8]
 800ed4e:	4a41      	ldr	r2, [pc, #260]	; (800ee54 <USB_SetTurnaroundTime+0x11c>)
 800ed50:	4293      	cmp	r3, r2
 800ed52:	d906      	bls.n	800ed62 <USB_SetTurnaroundTime+0x2a>
 800ed54:	68bb      	ldr	r3, [r7, #8]
 800ed56:	4a40      	ldr	r2, [pc, #256]	; (800ee58 <USB_SetTurnaroundTime+0x120>)
 800ed58:	4293      	cmp	r3, r2
 800ed5a:	d802      	bhi.n	800ed62 <USB_SetTurnaroundTime+0x2a>
 800ed5c:	230f      	movs	r3, #15
 800ed5e:	617b      	str	r3, [r7, #20]
 800ed60:	e062      	b.n	800ee28 <USB_SetTurnaroundTime+0xf0>
 800ed62:	68bb      	ldr	r3, [r7, #8]
 800ed64:	4a3c      	ldr	r2, [pc, #240]	; (800ee58 <USB_SetTurnaroundTime+0x120>)
 800ed66:	4293      	cmp	r3, r2
 800ed68:	d906      	bls.n	800ed78 <USB_SetTurnaroundTime+0x40>
 800ed6a:	68bb      	ldr	r3, [r7, #8]
 800ed6c:	4a3b      	ldr	r2, [pc, #236]	; (800ee5c <USB_SetTurnaroundTime+0x124>)
 800ed6e:	4293      	cmp	r3, r2
 800ed70:	d802      	bhi.n	800ed78 <USB_SetTurnaroundTime+0x40>
 800ed72:	230e      	movs	r3, #14
 800ed74:	617b      	str	r3, [r7, #20]
 800ed76:	e057      	b.n	800ee28 <USB_SetTurnaroundTime+0xf0>
 800ed78:	68bb      	ldr	r3, [r7, #8]
 800ed7a:	4a38      	ldr	r2, [pc, #224]	; (800ee5c <USB_SetTurnaroundTime+0x124>)
 800ed7c:	4293      	cmp	r3, r2
 800ed7e:	d906      	bls.n	800ed8e <USB_SetTurnaroundTime+0x56>
 800ed80:	68bb      	ldr	r3, [r7, #8]
 800ed82:	4a37      	ldr	r2, [pc, #220]	; (800ee60 <USB_SetTurnaroundTime+0x128>)
 800ed84:	4293      	cmp	r3, r2
 800ed86:	d802      	bhi.n	800ed8e <USB_SetTurnaroundTime+0x56>
 800ed88:	230d      	movs	r3, #13
 800ed8a:	617b      	str	r3, [r7, #20]
 800ed8c:	e04c      	b.n	800ee28 <USB_SetTurnaroundTime+0xf0>
 800ed8e:	68bb      	ldr	r3, [r7, #8]
 800ed90:	4a33      	ldr	r2, [pc, #204]	; (800ee60 <USB_SetTurnaroundTime+0x128>)
 800ed92:	4293      	cmp	r3, r2
 800ed94:	d906      	bls.n	800eda4 <USB_SetTurnaroundTime+0x6c>
 800ed96:	68bb      	ldr	r3, [r7, #8]
 800ed98:	4a32      	ldr	r2, [pc, #200]	; (800ee64 <USB_SetTurnaroundTime+0x12c>)
 800ed9a:	4293      	cmp	r3, r2
 800ed9c:	d802      	bhi.n	800eda4 <USB_SetTurnaroundTime+0x6c>
 800ed9e:	230c      	movs	r3, #12
 800eda0:	617b      	str	r3, [r7, #20]
 800eda2:	e041      	b.n	800ee28 <USB_SetTurnaroundTime+0xf0>
 800eda4:	68bb      	ldr	r3, [r7, #8]
 800eda6:	4a2f      	ldr	r2, [pc, #188]	; (800ee64 <USB_SetTurnaroundTime+0x12c>)
 800eda8:	4293      	cmp	r3, r2
 800edaa:	d906      	bls.n	800edba <USB_SetTurnaroundTime+0x82>
 800edac:	68bb      	ldr	r3, [r7, #8]
 800edae:	4a2e      	ldr	r2, [pc, #184]	; (800ee68 <USB_SetTurnaroundTime+0x130>)
 800edb0:	4293      	cmp	r3, r2
 800edb2:	d802      	bhi.n	800edba <USB_SetTurnaroundTime+0x82>
 800edb4:	230b      	movs	r3, #11
 800edb6:	617b      	str	r3, [r7, #20]
 800edb8:	e036      	b.n	800ee28 <USB_SetTurnaroundTime+0xf0>
 800edba:	68bb      	ldr	r3, [r7, #8]
 800edbc:	4a2a      	ldr	r2, [pc, #168]	; (800ee68 <USB_SetTurnaroundTime+0x130>)
 800edbe:	4293      	cmp	r3, r2
 800edc0:	d906      	bls.n	800edd0 <USB_SetTurnaroundTime+0x98>
 800edc2:	68bb      	ldr	r3, [r7, #8]
 800edc4:	4a29      	ldr	r2, [pc, #164]	; (800ee6c <USB_SetTurnaroundTime+0x134>)
 800edc6:	4293      	cmp	r3, r2
 800edc8:	d802      	bhi.n	800edd0 <USB_SetTurnaroundTime+0x98>
 800edca:	230a      	movs	r3, #10
 800edcc:	617b      	str	r3, [r7, #20]
 800edce:	e02b      	b.n	800ee28 <USB_SetTurnaroundTime+0xf0>
 800edd0:	68bb      	ldr	r3, [r7, #8]
 800edd2:	4a26      	ldr	r2, [pc, #152]	; (800ee6c <USB_SetTurnaroundTime+0x134>)
 800edd4:	4293      	cmp	r3, r2
 800edd6:	d906      	bls.n	800ede6 <USB_SetTurnaroundTime+0xae>
 800edd8:	68bb      	ldr	r3, [r7, #8]
 800edda:	4a25      	ldr	r2, [pc, #148]	; (800ee70 <USB_SetTurnaroundTime+0x138>)
 800eddc:	4293      	cmp	r3, r2
 800edde:	d802      	bhi.n	800ede6 <USB_SetTurnaroundTime+0xae>
 800ede0:	2309      	movs	r3, #9
 800ede2:	617b      	str	r3, [r7, #20]
 800ede4:	e020      	b.n	800ee28 <USB_SetTurnaroundTime+0xf0>
 800ede6:	68bb      	ldr	r3, [r7, #8]
 800ede8:	4a21      	ldr	r2, [pc, #132]	; (800ee70 <USB_SetTurnaroundTime+0x138>)
 800edea:	4293      	cmp	r3, r2
 800edec:	d906      	bls.n	800edfc <USB_SetTurnaroundTime+0xc4>
 800edee:	68bb      	ldr	r3, [r7, #8]
 800edf0:	4a20      	ldr	r2, [pc, #128]	; (800ee74 <USB_SetTurnaroundTime+0x13c>)
 800edf2:	4293      	cmp	r3, r2
 800edf4:	d802      	bhi.n	800edfc <USB_SetTurnaroundTime+0xc4>
 800edf6:	2308      	movs	r3, #8
 800edf8:	617b      	str	r3, [r7, #20]
 800edfa:	e015      	b.n	800ee28 <USB_SetTurnaroundTime+0xf0>
 800edfc:	68bb      	ldr	r3, [r7, #8]
 800edfe:	4a1d      	ldr	r2, [pc, #116]	; (800ee74 <USB_SetTurnaroundTime+0x13c>)
 800ee00:	4293      	cmp	r3, r2
 800ee02:	d906      	bls.n	800ee12 <USB_SetTurnaroundTime+0xda>
 800ee04:	68bb      	ldr	r3, [r7, #8]
 800ee06:	4a1c      	ldr	r2, [pc, #112]	; (800ee78 <USB_SetTurnaroundTime+0x140>)
 800ee08:	4293      	cmp	r3, r2
 800ee0a:	d802      	bhi.n	800ee12 <USB_SetTurnaroundTime+0xda>
 800ee0c:	2307      	movs	r3, #7
 800ee0e:	617b      	str	r3, [r7, #20]
 800ee10:	e00a      	b.n	800ee28 <USB_SetTurnaroundTime+0xf0>
 800ee12:	2306      	movs	r3, #6
 800ee14:	617b      	str	r3, [r7, #20]
 800ee16:	e007      	b.n	800ee28 <USB_SetTurnaroundTime+0xf0>
 800ee18:	79fb      	ldrb	r3, [r7, #7]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d102      	bne.n	800ee24 <USB_SetTurnaroundTime+0xec>
 800ee1e:	2309      	movs	r3, #9
 800ee20:	617b      	str	r3, [r7, #20]
 800ee22:	e001      	b.n	800ee28 <USB_SetTurnaroundTime+0xf0>
 800ee24:	2309      	movs	r3, #9
 800ee26:	617b      	str	r3, [r7, #20]
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	68db      	ldr	r3, [r3, #12]
 800ee2c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	60da      	str	r2, [r3, #12]
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	68da      	ldr	r2, [r3, #12]
 800ee38:	697b      	ldr	r3, [r7, #20]
 800ee3a:	029b      	lsls	r3, r3, #10
 800ee3c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800ee40:	431a      	orrs	r2, r3
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	60da      	str	r2, [r3, #12]
 800ee46:	2300      	movs	r3, #0
 800ee48:	4618      	mov	r0, r3
 800ee4a:	371c      	adds	r7, #28
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee52:	4770      	bx	lr
 800ee54:	00d8acbf 	.word	0x00d8acbf
 800ee58:	00e4e1bf 	.word	0x00e4e1bf
 800ee5c:	00f423ff 	.word	0x00f423ff
 800ee60:	0106737f 	.word	0x0106737f
 800ee64:	011a499f 	.word	0x011a499f
 800ee68:	01312cff 	.word	0x01312cff
 800ee6c:	014ca43f 	.word	0x014ca43f
 800ee70:	016e35ff 	.word	0x016e35ff
 800ee74:	01a6ab1f 	.word	0x01a6ab1f
 800ee78:	01e847ff 	.word	0x01e847ff

0800ee7c <USB_EnableGlobalInt>:
 800ee7c:	b480      	push	{r7}
 800ee7e:	b083      	sub	sp, #12
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	6078      	str	r0, [r7, #4]
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	689b      	ldr	r3, [r3, #8]
 800ee88:	f043 0201 	orr.w	r2, r3, #1
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	609a      	str	r2, [r3, #8]
 800ee90:	2300      	movs	r3, #0
 800ee92:	4618      	mov	r0, r3
 800ee94:	370c      	adds	r7, #12
 800ee96:	46bd      	mov	sp, r7
 800ee98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee9c:	4770      	bx	lr

0800ee9e <USB_DisableGlobalInt>:
 800ee9e:	b480      	push	{r7}
 800eea0:	b083      	sub	sp, #12
 800eea2:	af00      	add	r7, sp, #0
 800eea4:	6078      	str	r0, [r7, #4]
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	689b      	ldr	r3, [r3, #8]
 800eeaa:	f023 0201 	bic.w	r2, r3, #1
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	609a      	str	r2, [r3, #8]
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	370c      	adds	r7, #12
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eebe:	4770      	bx	lr

0800eec0 <USB_SetCurrentMode>:
 800eec0:	b580      	push	{r7, lr}
 800eec2:	b082      	sub	sp, #8
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	6078      	str	r0, [r7, #4]
 800eec8:	460b      	mov	r3, r1
 800eeca:	70fb      	strb	r3, [r7, #3]
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	68db      	ldr	r3, [r3, #12]
 800eed0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	60da      	str	r2, [r3, #12]
 800eed8:	78fb      	ldrb	r3, [r7, #3]
 800eeda:	2b01      	cmp	r3, #1
 800eedc:	d106      	bne.n	800eeec <USB_SetCurrentMode+0x2c>
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	68db      	ldr	r3, [r3, #12]
 800eee2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	60da      	str	r2, [r3, #12]
 800eeea:	e00b      	b.n	800ef04 <USB_SetCurrentMode+0x44>
 800eeec:	78fb      	ldrb	r3, [r7, #3]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d106      	bne.n	800ef00 <USB_SetCurrentMode+0x40>
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	68db      	ldr	r3, [r3, #12]
 800eef6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	60da      	str	r2, [r3, #12]
 800eefe:	e001      	b.n	800ef04 <USB_SetCurrentMode+0x44>
 800ef00:	2301      	movs	r3, #1
 800ef02:	e003      	b.n	800ef0c <USB_SetCurrentMode+0x4c>
 800ef04:	2032      	movs	r0, #50	; 0x32
 800ef06:	f7fb ff5f 	bl	800adc8 <HAL_Delay>
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	3708      	adds	r7, #8
 800ef10:	46bd      	mov	sp, r7
 800ef12:	bd80      	pop	{r7, pc}

0800ef14 <USB_DevInit>:
 800ef14:	b084      	sub	sp, #16
 800ef16:	b580      	push	{r7, lr}
 800ef18:	b086      	sub	sp, #24
 800ef1a:	af00      	add	r7, sp, #0
 800ef1c:	6078      	str	r0, [r7, #4]
 800ef1e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ef22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800ef26:	2300      	movs	r3, #0
 800ef28:	75fb      	strb	r3, [r7, #23]
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	60fb      	str	r3, [r7, #12]
 800ef2e:	2300      	movs	r3, #0
 800ef30:	613b      	str	r3, [r7, #16]
 800ef32:	e009      	b.n	800ef48 <USB_DevInit+0x34>
 800ef34:	687a      	ldr	r2, [r7, #4]
 800ef36:	693b      	ldr	r3, [r7, #16]
 800ef38:	3340      	adds	r3, #64	; 0x40
 800ef3a:	009b      	lsls	r3, r3, #2
 800ef3c:	4413      	add	r3, r2
 800ef3e:	2200      	movs	r2, #0
 800ef40:	605a      	str	r2, [r3, #4]
 800ef42:	693b      	ldr	r3, [r7, #16]
 800ef44:	3301      	adds	r3, #1
 800ef46:	613b      	str	r3, [r7, #16]
 800ef48:	693b      	ldr	r3, [r7, #16]
 800ef4a:	2b0e      	cmp	r3, #14
 800ef4c:	d9f2      	bls.n	800ef34 <USB_DevInit+0x20>
 800ef4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d112      	bne.n	800ef7a <USB_DevInit+0x66>
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef58:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	639a      	str	r2, [r3, #56]	; 0x38
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef64:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	639a      	str	r2, [r3, #56]	; 0x38
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef70:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	639a      	str	r2, [r3, #56]	; 0x38
 800ef78:	e00b      	b.n	800ef92 <USB_DevInit+0x7e>
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	601a      	str	r2, [r3, #0]
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef8a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	639a      	str	r2, [r3, #56]	; 0x38
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ef98:	461a      	mov	r2, r3
 800ef9a:	2300      	movs	r3, #0
 800ef9c:	6013      	str	r3, [r2, #0]
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800efa4:	4619      	mov	r1, r3
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800efac:	461a      	mov	r2, r3
 800efae:	680b      	ldr	r3, [r1, #0]
 800efb0:	6013      	str	r3, [r2, #0]
 800efb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efb4:	2b01      	cmp	r3, #1
 800efb6:	d10c      	bne.n	800efd2 <USB_DevInit+0xbe>
 800efb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d104      	bne.n	800efc8 <USB_DevInit+0xb4>
 800efbe:	2100      	movs	r1, #0
 800efc0:	6878      	ldr	r0, [r7, #4]
 800efc2:	f000 f961 	bl	800f288 <USB_SetDevSpeed>
 800efc6:	e008      	b.n	800efda <USB_DevInit+0xc6>
 800efc8:	2101      	movs	r1, #1
 800efca:	6878      	ldr	r0, [r7, #4]
 800efcc:	f000 f95c 	bl	800f288 <USB_SetDevSpeed>
 800efd0:	e003      	b.n	800efda <USB_DevInit+0xc6>
 800efd2:	2103      	movs	r1, #3
 800efd4:	6878      	ldr	r0, [r7, #4]
 800efd6:	f000 f957 	bl	800f288 <USB_SetDevSpeed>
 800efda:	2110      	movs	r1, #16
 800efdc:	6878      	ldr	r0, [r7, #4]
 800efde:	f000 f90b 	bl	800f1f8 <USB_FlushTxFifo>
 800efe2:	4603      	mov	r3, r0
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d001      	beq.n	800efec <USB_DevInit+0xd8>
 800efe8:	2301      	movs	r3, #1
 800efea:	75fb      	strb	r3, [r7, #23]
 800efec:	6878      	ldr	r0, [r7, #4]
 800efee:	f000 f929 	bl	800f244 <USB_FlushRxFifo>
 800eff2:	4603      	mov	r3, r0
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d001      	beq.n	800effc <USB_DevInit+0xe8>
 800eff8:	2301      	movs	r3, #1
 800effa:	75fb      	strb	r3, [r7, #23]
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f002:	461a      	mov	r2, r3
 800f004:	2300      	movs	r3, #0
 800f006:	6113      	str	r3, [r2, #16]
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f00e:	461a      	mov	r2, r3
 800f010:	2300      	movs	r3, #0
 800f012:	6153      	str	r3, [r2, #20]
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f01a:	461a      	mov	r2, r3
 800f01c:	2300      	movs	r3, #0
 800f01e:	61d3      	str	r3, [r2, #28]
 800f020:	2300      	movs	r3, #0
 800f022:	613b      	str	r3, [r7, #16]
 800f024:	e043      	b.n	800f0ae <USB_DevInit+0x19a>
 800f026:	693b      	ldr	r3, [r7, #16]
 800f028:	015a      	lsls	r2, r3, #5
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	4413      	add	r3, r2
 800f02e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f038:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f03c:	d118      	bne.n	800f070 <USB_DevInit+0x15c>
 800f03e:	693b      	ldr	r3, [r7, #16]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d10a      	bne.n	800f05a <USB_DevInit+0x146>
 800f044:	693b      	ldr	r3, [r7, #16]
 800f046:	015a      	lsls	r2, r3, #5
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	4413      	add	r3, r2
 800f04c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f050:	461a      	mov	r2, r3
 800f052:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f056:	6013      	str	r3, [r2, #0]
 800f058:	e013      	b.n	800f082 <USB_DevInit+0x16e>
 800f05a:	693b      	ldr	r3, [r7, #16]
 800f05c:	015a      	lsls	r2, r3, #5
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	4413      	add	r3, r2
 800f062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f066:	461a      	mov	r2, r3
 800f068:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f06c:	6013      	str	r3, [r2, #0]
 800f06e:	e008      	b.n	800f082 <USB_DevInit+0x16e>
 800f070:	693b      	ldr	r3, [r7, #16]
 800f072:	015a      	lsls	r2, r3, #5
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	4413      	add	r3, r2
 800f078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f07c:	461a      	mov	r2, r3
 800f07e:	2300      	movs	r3, #0
 800f080:	6013      	str	r3, [r2, #0]
 800f082:	693b      	ldr	r3, [r7, #16]
 800f084:	015a      	lsls	r2, r3, #5
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	4413      	add	r3, r2
 800f08a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f08e:	461a      	mov	r2, r3
 800f090:	2300      	movs	r3, #0
 800f092:	6113      	str	r3, [r2, #16]
 800f094:	693b      	ldr	r3, [r7, #16]
 800f096:	015a      	lsls	r2, r3, #5
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	4413      	add	r3, r2
 800f09c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0a0:	461a      	mov	r2, r3
 800f0a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f0a6:	6093      	str	r3, [r2, #8]
 800f0a8:	693b      	ldr	r3, [r7, #16]
 800f0aa:	3301      	adds	r3, #1
 800f0ac:	613b      	str	r3, [r7, #16]
 800f0ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0b0:	693a      	ldr	r2, [r7, #16]
 800f0b2:	429a      	cmp	r2, r3
 800f0b4:	d3b7      	bcc.n	800f026 <USB_DevInit+0x112>
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	613b      	str	r3, [r7, #16]
 800f0ba:	e043      	b.n	800f144 <USB_DevInit+0x230>
 800f0bc:	693b      	ldr	r3, [r7, #16]
 800f0be:	015a      	lsls	r2, r3, #5
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	4413      	add	r3, r2
 800f0c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f0ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f0d2:	d118      	bne.n	800f106 <USB_DevInit+0x1f2>
 800f0d4:	693b      	ldr	r3, [r7, #16]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d10a      	bne.n	800f0f0 <USB_DevInit+0x1dc>
 800f0da:	693b      	ldr	r3, [r7, #16]
 800f0dc:	015a      	lsls	r2, r3, #5
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	4413      	add	r3, r2
 800f0e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0e6:	461a      	mov	r2, r3
 800f0e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f0ec:	6013      	str	r3, [r2, #0]
 800f0ee:	e013      	b.n	800f118 <USB_DevInit+0x204>
 800f0f0:	693b      	ldr	r3, [r7, #16]
 800f0f2:	015a      	lsls	r2, r3, #5
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	4413      	add	r3, r2
 800f0f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0fc:	461a      	mov	r2, r3
 800f0fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f102:	6013      	str	r3, [r2, #0]
 800f104:	e008      	b.n	800f118 <USB_DevInit+0x204>
 800f106:	693b      	ldr	r3, [r7, #16]
 800f108:	015a      	lsls	r2, r3, #5
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	4413      	add	r3, r2
 800f10e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f112:	461a      	mov	r2, r3
 800f114:	2300      	movs	r3, #0
 800f116:	6013      	str	r3, [r2, #0]
 800f118:	693b      	ldr	r3, [r7, #16]
 800f11a:	015a      	lsls	r2, r3, #5
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	4413      	add	r3, r2
 800f120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f124:	461a      	mov	r2, r3
 800f126:	2300      	movs	r3, #0
 800f128:	6113      	str	r3, [r2, #16]
 800f12a:	693b      	ldr	r3, [r7, #16]
 800f12c:	015a      	lsls	r2, r3, #5
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	4413      	add	r3, r2
 800f132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f136:	461a      	mov	r2, r3
 800f138:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f13c:	6093      	str	r3, [r2, #8]
 800f13e:	693b      	ldr	r3, [r7, #16]
 800f140:	3301      	adds	r3, #1
 800f142:	613b      	str	r3, [r7, #16]
 800f144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f146:	693a      	ldr	r2, [r7, #16]
 800f148:	429a      	cmp	r2, r3
 800f14a:	d3b7      	bcc.n	800f0bc <USB_DevInit+0x1a8>
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f152:	691b      	ldr	r3, [r3, #16]
 800f154:	68fa      	ldr	r2, [r7, #12]
 800f156:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f15a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f15e:	6113      	str	r3, [r2, #16]
 800f160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f162:	2b01      	cmp	r3, #1
 800f164:	d111      	bne.n	800f18a <USB_DevInit+0x276>
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f16c:	461a      	mov	r2, r3
 800f16e:	4b20      	ldr	r3, [pc, #128]	; (800f1f0 <USB_DevInit+0x2dc>)
 800f170:	6313      	str	r3, [r2, #48]	; 0x30
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f17a:	68fa      	ldr	r2, [r7, #12]
 800f17c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f184:	f043 0303 	orr.w	r3, r3, #3
 800f188:	6313      	str	r3, [r2, #48]	; 0x30
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	2200      	movs	r2, #0
 800f18e:	619a      	str	r2, [r3, #24]
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800f196:	615a      	str	r2, [r3, #20]
 800f198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d105      	bne.n	800f1aa <USB_DevInit+0x296>
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	699b      	ldr	r3, [r3, #24]
 800f1a2:	f043 0210 	orr.w	r2, r3, #16
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	619a      	str	r2, [r3, #24]
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	699a      	ldr	r2, [r3, #24]
 800f1ae:	4b11      	ldr	r3, [pc, #68]	; (800f1f4 <USB_DevInit+0x2e0>)
 800f1b0:	4313      	orrs	r3, r2
 800f1b2:	687a      	ldr	r2, [r7, #4]
 800f1b4:	6193      	str	r3, [r2, #24]
 800f1b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d005      	beq.n	800f1c8 <USB_DevInit+0x2b4>
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	699b      	ldr	r3, [r3, #24]
 800f1c0:	f043 0208 	orr.w	r2, r3, #8
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	619a      	str	r2, [r3, #24]
 800f1c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f1ca:	2b01      	cmp	r3, #1
 800f1cc:	d107      	bne.n	800f1de <USB_DevInit+0x2ca>
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	699b      	ldr	r3, [r3, #24]
 800f1d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f1d6:	f043 0304 	orr.w	r3, r3, #4
 800f1da:	687a      	ldr	r2, [r7, #4]
 800f1dc:	6193      	str	r3, [r2, #24]
 800f1de:	7dfb      	ldrb	r3, [r7, #23]
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	3718      	adds	r7, #24
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f1ea:	b004      	add	sp, #16
 800f1ec:	4770      	bx	lr
 800f1ee:	bf00      	nop
 800f1f0:	00800100 	.word	0x00800100
 800f1f4:	803c3800 	.word	0x803c3800

0800f1f8 <USB_FlushTxFifo>:
 800f1f8:	b480      	push	{r7}
 800f1fa:	b085      	sub	sp, #20
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	6078      	str	r0, [r7, #4]
 800f200:	6039      	str	r1, [r7, #0]
 800f202:	2300      	movs	r3, #0
 800f204:	60fb      	str	r3, [r7, #12]
 800f206:	683b      	ldr	r3, [r7, #0]
 800f208:	019b      	lsls	r3, r3, #6
 800f20a:	f043 0220 	orr.w	r2, r3, #32
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	611a      	str	r2, [r3, #16]
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	3301      	adds	r3, #1
 800f216:	60fb      	str	r3, [r7, #12]
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	4a09      	ldr	r2, [pc, #36]	; (800f240 <USB_FlushTxFifo+0x48>)
 800f21c:	4293      	cmp	r3, r2
 800f21e:	d901      	bls.n	800f224 <USB_FlushTxFifo+0x2c>
 800f220:	2303      	movs	r3, #3
 800f222:	e006      	b.n	800f232 <USB_FlushTxFifo+0x3a>
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	691b      	ldr	r3, [r3, #16]
 800f228:	f003 0320 	and.w	r3, r3, #32
 800f22c:	2b20      	cmp	r3, #32
 800f22e:	d0f0      	beq.n	800f212 <USB_FlushTxFifo+0x1a>
 800f230:	2300      	movs	r3, #0
 800f232:	4618      	mov	r0, r3
 800f234:	3714      	adds	r7, #20
 800f236:	46bd      	mov	sp, r7
 800f238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f23c:	4770      	bx	lr
 800f23e:	bf00      	nop
 800f240:	00030d40 	.word	0x00030d40

0800f244 <USB_FlushRxFifo>:
 800f244:	b480      	push	{r7}
 800f246:	b085      	sub	sp, #20
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
 800f24c:	2300      	movs	r3, #0
 800f24e:	60fb      	str	r3, [r7, #12]
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	2210      	movs	r2, #16
 800f254:	611a      	str	r2, [r3, #16]
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	3301      	adds	r3, #1
 800f25a:	60fb      	str	r3, [r7, #12]
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	4a09      	ldr	r2, [pc, #36]	; (800f284 <USB_FlushRxFifo+0x40>)
 800f260:	4293      	cmp	r3, r2
 800f262:	d901      	bls.n	800f268 <USB_FlushRxFifo+0x24>
 800f264:	2303      	movs	r3, #3
 800f266:	e006      	b.n	800f276 <USB_FlushRxFifo+0x32>
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	691b      	ldr	r3, [r3, #16]
 800f26c:	f003 0310 	and.w	r3, r3, #16
 800f270:	2b10      	cmp	r3, #16
 800f272:	d0f0      	beq.n	800f256 <USB_FlushRxFifo+0x12>
 800f274:	2300      	movs	r3, #0
 800f276:	4618      	mov	r0, r3
 800f278:	3714      	adds	r7, #20
 800f27a:	46bd      	mov	sp, r7
 800f27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f280:	4770      	bx	lr
 800f282:	bf00      	nop
 800f284:	00030d40 	.word	0x00030d40

0800f288 <USB_SetDevSpeed>:
 800f288:	b480      	push	{r7}
 800f28a:	b085      	sub	sp, #20
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	6078      	str	r0, [r7, #4]
 800f290:	460b      	mov	r3, r1
 800f292:	70fb      	strb	r3, [r7, #3]
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	60fb      	str	r3, [r7, #12]
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f29e:	681a      	ldr	r2, [r3, #0]
 800f2a0:	78fb      	ldrb	r3, [r7, #3]
 800f2a2:	68f9      	ldr	r1, [r7, #12]
 800f2a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f2a8:	4313      	orrs	r3, r2
 800f2aa:	600b      	str	r3, [r1, #0]
 800f2ac:	2300      	movs	r3, #0
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	3714      	adds	r7, #20
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b8:	4770      	bx	lr

0800f2ba <USB_GetDevSpeed>:
 800f2ba:	b480      	push	{r7}
 800f2bc:	b087      	sub	sp, #28
 800f2be:	af00      	add	r7, sp, #0
 800f2c0:	6078      	str	r0, [r7, #4]
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	613b      	str	r3, [r7, #16]
 800f2c6:	693b      	ldr	r3, [r7, #16]
 800f2c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f2cc:	689b      	ldr	r3, [r3, #8]
 800f2ce:	f003 0306 	and.w	r3, r3, #6
 800f2d2:	60fb      	str	r3, [r7, #12]
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d102      	bne.n	800f2e0 <USB_GetDevSpeed+0x26>
 800f2da:	2300      	movs	r3, #0
 800f2dc:	75fb      	strb	r3, [r7, #23]
 800f2de:	e00a      	b.n	800f2f6 <USB_GetDevSpeed+0x3c>
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	2b02      	cmp	r3, #2
 800f2e4:	d002      	beq.n	800f2ec <USB_GetDevSpeed+0x32>
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	2b06      	cmp	r3, #6
 800f2ea:	d102      	bne.n	800f2f2 <USB_GetDevSpeed+0x38>
 800f2ec:	2302      	movs	r3, #2
 800f2ee:	75fb      	strb	r3, [r7, #23]
 800f2f0:	e001      	b.n	800f2f6 <USB_GetDevSpeed+0x3c>
 800f2f2:	230f      	movs	r3, #15
 800f2f4:	75fb      	strb	r3, [r7, #23]
 800f2f6:	7dfb      	ldrb	r3, [r7, #23]
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	371c      	adds	r7, #28
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f302:	4770      	bx	lr

0800f304 <USB_ActivateEndpoint>:
 800f304:	b480      	push	{r7}
 800f306:	b085      	sub	sp, #20
 800f308:	af00      	add	r7, sp, #0
 800f30a:	6078      	str	r0, [r7, #4]
 800f30c:	6039      	str	r1, [r7, #0]
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	60fb      	str	r3, [r7, #12]
 800f312:	683b      	ldr	r3, [r7, #0]
 800f314:	781b      	ldrb	r3, [r3, #0]
 800f316:	60bb      	str	r3, [r7, #8]
 800f318:	683b      	ldr	r3, [r7, #0]
 800f31a:	785b      	ldrb	r3, [r3, #1]
 800f31c:	2b01      	cmp	r3, #1
 800f31e:	d13a      	bne.n	800f396 <USB_ActivateEndpoint+0x92>
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f326:	69da      	ldr	r2, [r3, #28]
 800f328:	683b      	ldr	r3, [r7, #0]
 800f32a:	781b      	ldrb	r3, [r3, #0]
 800f32c:	f003 030f 	and.w	r3, r3, #15
 800f330:	2101      	movs	r1, #1
 800f332:	fa01 f303 	lsl.w	r3, r1, r3
 800f336:	b29b      	uxth	r3, r3
 800f338:	68f9      	ldr	r1, [r7, #12]
 800f33a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f33e:	4313      	orrs	r3, r2
 800f340:	61cb      	str	r3, [r1, #28]
 800f342:	68bb      	ldr	r3, [r7, #8]
 800f344:	015a      	lsls	r2, r3, #5
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	4413      	add	r3, r2
 800f34a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f354:	2b00      	cmp	r3, #0
 800f356:	d155      	bne.n	800f404 <USB_ActivateEndpoint+0x100>
 800f358:	68bb      	ldr	r3, [r7, #8]
 800f35a:	015a      	lsls	r2, r3, #5
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	4413      	add	r3, r2
 800f360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f364:	681a      	ldr	r2, [r3, #0]
 800f366:	683b      	ldr	r3, [r7, #0]
 800f368:	689b      	ldr	r3, [r3, #8]
 800f36a:	f3c3 010a 	ubfx	r1, r3, #0, #11
 800f36e:	683b      	ldr	r3, [r7, #0]
 800f370:	78db      	ldrb	r3, [r3, #3]
 800f372:	049b      	lsls	r3, r3, #18
 800f374:	4319      	orrs	r1, r3
 800f376:	68bb      	ldr	r3, [r7, #8]
 800f378:	059b      	lsls	r3, r3, #22
 800f37a:	430b      	orrs	r3, r1
 800f37c:	4313      	orrs	r3, r2
 800f37e:	68ba      	ldr	r2, [r7, #8]
 800f380:	0151      	lsls	r1, r2, #5
 800f382:	68fa      	ldr	r2, [r7, #12]
 800f384:	440a      	add	r2, r1
 800f386:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f38a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f38e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f392:	6013      	str	r3, [r2, #0]
 800f394:	e036      	b.n	800f404 <USB_ActivateEndpoint+0x100>
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f39c:	69da      	ldr	r2, [r3, #28]
 800f39e:	683b      	ldr	r3, [r7, #0]
 800f3a0:	781b      	ldrb	r3, [r3, #0]
 800f3a2:	f003 030f 	and.w	r3, r3, #15
 800f3a6:	2101      	movs	r1, #1
 800f3a8:	fa01 f303 	lsl.w	r3, r1, r3
 800f3ac:	041b      	lsls	r3, r3, #16
 800f3ae:	68f9      	ldr	r1, [r7, #12]
 800f3b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f3b4:	4313      	orrs	r3, r2
 800f3b6:	61cb      	str	r3, [r1, #28]
 800f3b8:	68bb      	ldr	r3, [r7, #8]
 800f3ba:	015a      	lsls	r2, r3, #5
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	4413      	add	r3, r2
 800f3c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d11a      	bne.n	800f404 <USB_ActivateEndpoint+0x100>
 800f3ce:	68bb      	ldr	r3, [r7, #8]
 800f3d0:	015a      	lsls	r2, r3, #5
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	4413      	add	r3, r2
 800f3d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3da:	681a      	ldr	r2, [r3, #0]
 800f3dc:	683b      	ldr	r3, [r7, #0]
 800f3de:	689b      	ldr	r3, [r3, #8]
 800f3e0:	f3c3 010a 	ubfx	r1, r3, #0, #11
 800f3e4:	683b      	ldr	r3, [r7, #0]
 800f3e6:	78db      	ldrb	r3, [r3, #3]
 800f3e8:	049b      	lsls	r3, r3, #18
 800f3ea:	430b      	orrs	r3, r1
 800f3ec:	4313      	orrs	r3, r2
 800f3ee:	68ba      	ldr	r2, [r7, #8]
 800f3f0:	0151      	lsls	r1, r2, #5
 800f3f2:	68fa      	ldr	r2, [r7, #12]
 800f3f4:	440a      	add	r2, r1
 800f3f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f3fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f3fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f402:	6013      	str	r3, [r2, #0]
 800f404:	2300      	movs	r3, #0
 800f406:	4618      	mov	r0, r3
 800f408:	3714      	adds	r7, #20
 800f40a:	46bd      	mov	sp, r7
 800f40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f410:	4770      	bx	lr
	...

0800f414 <USB_DeactivateEndpoint>:
 800f414:	b480      	push	{r7}
 800f416:	b085      	sub	sp, #20
 800f418:	af00      	add	r7, sp, #0
 800f41a:	6078      	str	r0, [r7, #4]
 800f41c:	6039      	str	r1, [r7, #0]
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	60fb      	str	r3, [r7, #12]
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	781b      	ldrb	r3, [r3, #0]
 800f426:	60bb      	str	r3, [r7, #8]
 800f428:	683b      	ldr	r3, [r7, #0]
 800f42a:	785b      	ldrb	r3, [r3, #1]
 800f42c:	2b01      	cmp	r3, #1
 800f42e:	d135      	bne.n	800f49c <USB_DeactivateEndpoint+0x88>
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f436:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f438:	683b      	ldr	r3, [r7, #0]
 800f43a:	781b      	ldrb	r3, [r3, #0]
 800f43c:	f003 030f 	and.w	r3, r3, #15
 800f440:	2101      	movs	r1, #1
 800f442:	fa01 f303 	lsl.w	r3, r1, r3
 800f446:	b29b      	uxth	r3, r3
 800f448:	43db      	mvns	r3, r3
 800f44a:	68f9      	ldr	r1, [r7, #12]
 800f44c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f450:	4013      	ands	r3, r2
 800f452:	63cb      	str	r3, [r1, #60]	; 0x3c
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f45a:	69da      	ldr	r2, [r3, #28]
 800f45c:	683b      	ldr	r3, [r7, #0]
 800f45e:	781b      	ldrb	r3, [r3, #0]
 800f460:	f003 030f 	and.w	r3, r3, #15
 800f464:	2101      	movs	r1, #1
 800f466:	fa01 f303 	lsl.w	r3, r1, r3
 800f46a:	b29b      	uxth	r3, r3
 800f46c:	43db      	mvns	r3, r3
 800f46e:	68f9      	ldr	r1, [r7, #12]
 800f470:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f474:	4013      	ands	r3, r2
 800f476:	61cb      	str	r3, [r1, #28]
 800f478:	68bb      	ldr	r3, [r7, #8]
 800f47a:	015a      	lsls	r2, r3, #5
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	4413      	add	r3, r2
 800f480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f484:	681a      	ldr	r2, [r3, #0]
 800f486:	68bb      	ldr	r3, [r7, #8]
 800f488:	0159      	lsls	r1, r3, #5
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	440b      	add	r3, r1
 800f48e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f492:	4619      	mov	r1, r3
 800f494:	4b1f      	ldr	r3, [pc, #124]	; (800f514 <USB_DeactivateEndpoint+0x100>)
 800f496:	4013      	ands	r3, r2
 800f498:	600b      	str	r3, [r1, #0]
 800f49a:	e034      	b.n	800f506 <USB_DeactivateEndpoint+0xf2>
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f4a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f4a4:	683b      	ldr	r3, [r7, #0]
 800f4a6:	781b      	ldrb	r3, [r3, #0]
 800f4a8:	f003 030f 	and.w	r3, r3, #15
 800f4ac:	2101      	movs	r1, #1
 800f4ae:	fa01 f303 	lsl.w	r3, r1, r3
 800f4b2:	041b      	lsls	r3, r3, #16
 800f4b4:	43db      	mvns	r3, r3
 800f4b6:	68f9      	ldr	r1, [r7, #12]
 800f4b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f4bc:	4013      	ands	r3, r2
 800f4be:	63cb      	str	r3, [r1, #60]	; 0x3c
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f4c6:	69da      	ldr	r2, [r3, #28]
 800f4c8:	683b      	ldr	r3, [r7, #0]
 800f4ca:	781b      	ldrb	r3, [r3, #0]
 800f4cc:	f003 030f 	and.w	r3, r3, #15
 800f4d0:	2101      	movs	r1, #1
 800f4d2:	fa01 f303 	lsl.w	r3, r1, r3
 800f4d6:	041b      	lsls	r3, r3, #16
 800f4d8:	43db      	mvns	r3, r3
 800f4da:	68f9      	ldr	r1, [r7, #12]
 800f4dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f4e0:	4013      	ands	r3, r2
 800f4e2:	61cb      	str	r3, [r1, #28]
 800f4e4:	68bb      	ldr	r3, [r7, #8]
 800f4e6:	015a      	lsls	r2, r3, #5
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	4413      	add	r3, r2
 800f4ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4f0:	681a      	ldr	r2, [r3, #0]
 800f4f2:	68bb      	ldr	r3, [r7, #8]
 800f4f4:	0159      	lsls	r1, r3, #5
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	440b      	add	r3, r1
 800f4fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4fe:	4619      	mov	r1, r3
 800f500:	4b05      	ldr	r3, [pc, #20]	; (800f518 <USB_DeactivateEndpoint+0x104>)
 800f502:	4013      	ands	r3, r2
 800f504:	600b      	str	r3, [r1, #0]
 800f506:	2300      	movs	r3, #0
 800f508:	4618      	mov	r0, r3
 800f50a:	3714      	adds	r7, #20
 800f50c:	46bd      	mov	sp, r7
 800f50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f512:	4770      	bx	lr
 800f514:	ec337800 	.word	0xec337800
 800f518:	eff37800 	.word	0xeff37800

0800f51c <USB_EPStartXfer>:
 800f51c:	b580      	push	{r7, lr}
 800f51e:	b08a      	sub	sp, #40	; 0x28
 800f520:	af02      	add	r7, sp, #8
 800f522:	60f8      	str	r0, [r7, #12]
 800f524:	60b9      	str	r1, [r7, #8]
 800f526:	4613      	mov	r3, r2
 800f528:	71fb      	strb	r3, [r7, #7]
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	61fb      	str	r3, [r7, #28]
 800f52e:	68bb      	ldr	r3, [r7, #8]
 800f530:	781b      	ldrb	r3, [r3, #0]
 800f532:	61bb      	str	r3, [r7, #24]
 800f534:	68bb      	ldr	r3, [r7, #8]
 800f536:	785b      	ldrb	r3, [r3, #1]
 800f538:	2b01      	cmp	r3, #1
 800f53a:	f040 815c 	bne.w	800f7f6 <USB_EPStartXfer+0x2da>
 800f53e:	68bb      	ldr	r3, [r7, #8]
 800f540:	695b      	ldr	r3, [r3, #20]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d132      	bne.n	800f5ac <USB_EPStartXfer+0x90>
 800f546:	69bb      	ldr	r3, [r7, #24]
 800f548:	015a      	lsls	r2, r3, #5
 800f54a:	69fb      	ldr	r3, [r7, #28]
 800f54c:	4413      	add	r3, r2
 800f54e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f552:	691b      	ldr	r3, [r3, #16]
 800f554:	69ba      	ldr	r2, [r7, #24]
 800f556:	0151      	lsls	r1, r2, #5
 800f558:	69fa      	ldr	r2, [r7, #28]
 800f55a:	440a      	add	r2, r1
 800f55c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f560:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f564:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f568:	6113      	str	r3, [r2, #16]
 800f56a:	69bb      	ldr	r3, [r7, #24]
 800f56c:	015a      	lsls	r2, r3, #5
 800f56e:	69fb      	ldr	r3, [r7, #28]
 800f570:	4413      	add	r3, r2
 800f572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f576:	691b      	ldr	r3, [r3, #16]
 800f578:	69ba      	ldr	r2, [r7, #24]
 800f57a:	0151      	lsls	r1, r2, #5
 800f57c:	69fa      	ldr	r2, [r7, #28]
 800f57e:	440a      	add	r2, r1
 800f580:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f584:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f588:	6113      	str	r3, [r2, #16]
 800f58a:	69bb      	ldr	r3, [r7, #24]
 800f58c:	015a      	lsls	r2, r3, #5
 800f58e:	69fb      	ldr	r3, [r7, #28]
 800f590:	4413      	add	r3, r2
 800f592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f596:	691b      	ldr	r3, [r3, #16]
 800f598:	69ba      	ldr	r2, [r7, #24]
 800f59a:	0151      	lsls	r1, r2, #5
 800f59c:	69fa      	ldr	r2, [r7, #28]
 800f59e:	440a      	add	r2, r1
 800f5a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f5a4:	0cdb      	lsrs	r3, r3, #19
 800f5a6:	04db      	lsls	r3, r3, #19
 800f5a8:	6113      	str	r3, [r2, #16]
 800f5aa:	e074      	b.n	800f696 <USB_EPStartXfer+0x17a>
 800f5ac:	69bb      	ldr	r3, [r7, #24]
 800f5ae:	015a      	lsls	r2, r3, #5
 800f5b0:	69fb      	ldr	r3, [r7, #28]
 800f5b2:	4413      	add	r3, r2
 800f5b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5b8:	691b      	ldr	r3, [r3, #16]
 800f5ba:	69ba      	ldr	r2, [r7, #24]
 800f5bc:	0151      	lsls	r1, r2, #5
 800f5be:	69fa      	ldr	r2, [r7, #28]
 800f5c0:	440a      	add	r2, r1
 800f5c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f5c6:	0cdb      	lsrs	r3, r3, #19
 800f5c8:	04db      	lsls	r3, r3, #19
 800f5ca:	6113      	str	r3, [r2, #16]
 800f5cc:	69bb      	ldr	r3, [r7, #24]
 800f5ce:	015a      	lsls	r2, r3, #5
 800f5d0:	69fb      	ldr	r3, [r7, #28]
 800f5d2:	4413      	add	r3, r2
 800f5d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5d8:	691b      	ldr	r3, [r3, #16]
 800f5da:	69ba      	ldr	r2, [r7, #24]
 800f5dc:	0151      	lsls	r1, r2, #5
 800f5de:	69fa      	ldr	r2, [r7, #28]
 800f5e0:	440a      	add	r2, r1
 800f5e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f5e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f5ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f5ee:	6113      	str	r3, [r2, #16]
 800f5f0:	69bb      	ldr	r3, [r7, #24]
 800f5f2:	015a      	lsls	r2, r3, #5
 800f5f4:	69fb      	ldr	r3, [r7, #28]
 800f5f6:	4413      	add	r3, r2
 800f5f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5fc:	691a      	ldr	r2, [r3, #16]
 800f5fe:	68bb      	ldr	r3, [r7, #8]
 800f600:	6959      	ldr	r1, [r3, #20]
 800f602:	68bb      	ldr	r3, [r7, #8]
 800f604:	689b      	ldr	r3, [r3, #8]
 800f606:	440b      	add	r3, r1
 800f608:	1e59      	subs	r1, r3, #1
 800f60a:	68bb      	ldr	r3, [r7, #8]
 800f60c:	689b      	ldr	r3, [r3, #8]
 800f60e:	fbb1 f3f3 	udiv	r3, r1, r3
 800f612:	04d9      	lsls	r1, r3, #19
 800f614:	4b9d      	ldr	r3, [pc, #628]	; (800f88c <USB_EPStartXfer+0x370>)
 800f616:	400b      	ands	r3, r1
 800f618:	69b9      	ldr	r1, [r7, #24]
 800f61a:	0148      	lsls	r0, r1, #5
 800f61c:	69f9      	ldr	r1, [r7, #28]
 800f61e:	4401      	add	r1, r0
 800f620:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f624:	4313      	orrs	r3, r2
 800f626:	610b      	str	r3, [r1, #16]
 800f628:	69bb      	ldr	r3, [r7, #24]
 800f62a:	015a      	lsls	r2, r3, #5
 800f62c:	69fb      	ldr	r3, [r7, #28]
 800f62e:	4413      	add	r3, r2
 800f630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f634:	691a      	ldr	r2, [r3, #16]
 800f636:	68bb      	ldr	r3, [r7, #8]
 800f638:	695b      	ldr	r3, [r3, #20]
 800f63a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f63e:	69b9      	ldr	r1, [r7, #24]
 800f640:	0148      	lsls	r0, r1, #5
 800f642:	69f9      	ldr	r1, [r7, #28]
 800f644:	4401      	add	r1, r0
 800f646:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f64a:	4313      	orrs	r3, r2
 800f64c:	610b      	str	r3, [r1, #16]
 800f64e:	68bb      	ldr	r3, [r7, #8]
 800f650:	78db      	ldrb	r3, [r3, #3]
 800f652:	2b01      	cmp	r3, #1
 800f654:	d11f      	bne.n	800f696 <USB_EPStartXfer+0x17a>
 800f656:	69bb      	ldr	r3, [r7, #24]
 800f658:	015a      	lsls	r2, r3, #5
 800f65a:	69fb      	ldr	r3, [r7, #28]
 800f65c:	4413      	add	r3, r2
 800f65e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f662:	691b      	ldr	r3, [r3, #16]
 800f664:	69ba      	ldr	r2, [r7, #24]
 800f666:	0151      	lsls	r1, r2, #5
 800f668:	69fa      	ldr	r2, [r7, #28]
 800f66a:	440a      	add	r2, r1
 800f66c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f670:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800f674:	6113      	str	r3, [r2, #16]
 800f676:	69bb      	ldr	r3, [r7, #24]
 800f678:	015a      	lsls	r2, r3, #5
 800f67a:	69fb      	ldr	r3, [r7, #28]
 800f67c:	4413      	add	r3, r2
 800f67e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f682:	691b      	ldr	r3, [r3, #16]
 800f684:	69ba      	ldr	r2, [r7, #24]
 800f686:	0151      	lsls	r1, r2, #5
 800f688:	69fa      	ldr	r2, [r7, #28]
 800f68a:	440a      	add	r2, r1
 800f68c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f690:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f694:	6113      	str	r3, [r2, #16]
 800f696:	79fb      	ldrb	r3, [r7, #7]
 800f698:	2b01      	cmp	r3, #1
 800f69a:	d14b      	bne.n	800f734 <USB_EPStartXfer+0x218>
 800f69c:	68bb      	ldr	r3, [r7, #8]
 800f69e:	691b      	ldr	r3, [r3, #16]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d009      	beq.n	800f6b8 <USB_EPStartXfer+0x19c>
 800f6a4:	69bb      	ldr	r3, [r7, #24]
 800f6a6:	015a      	lsls	r2, r3, #5
 800f6a8:	69fb      	ldr	r3, [r7, #28]
 800f6aa:	4413      	add	r3, r2
 800f6ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6b0:	461a      	mov	r2, r3
 800f6b2:	68bb      	ldr	r3, [r7, #8]
 800f6b4:	691b      	ldr	r3, [r3, #16]
 800f6b6:	6153      	str	r3, [r2, #20]
 800f6b8:	68bb      	ldr	r3, [r7, #8]
 800f6ba:	78db      	ldrb	r3, [r3, #3]
 800f6bc:	2b01      	cmp	r3, #1
 800f6be:	d128      	bne.n	800f712 <USB_EPStartXfer+0x1f6>
 800f6c0:	69fb      	ldr	r3, [r7, #28]
 800f6c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6c6:	689b      	ldr	r3, [r3, #8]
 800f6c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d110      	bne.n	800f6f2 <USB_EPStartXfer+0x1d6>
 800f6d0:	69bb      	ldr	r3, [r7, #24]
 800f6d2:	015a      	lsls	r2, r3, #5
 800f6d4:	69fb      	ldr	r3, [r7, #28]
 800f6d6:	4413      	add	r3, r2
 800f6d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	69ba      	ldr	r2, [r7, #24]
 800f6e0:	0151      	lsls	r1, r2, #5
 800f6e2:	69fa      	ldr	r2, [r7, #28]
 800f6e4:	440a      	add	r2, r1
 800f6e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f6ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f6ee:	6013      	str	r3, [r2, #0]
 800f6f0:	e00f      	b.n	800f712 <USB_EPStartXfer+0x1f6>
 800f6f2:	69bb      	ldr	r3, [r7, #24]
 800f6f4:	015a      	lsls	r2, r3, #5
 800f6f6:	69fb      	ldr	r3, [r7, #28]
 800f6f8:	4413      	add	r3, r2
 800f6fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	69ba      	ldr	r2, [r7, #24]
 800f702:	0151      	lsls	r1, r2, #5
 800f704:	69fa      	ldr	r2, [r7, #28]
 800f706:	440a      	add	r2, r1
 800f708:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f70c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f710:	6013      	str	r3, [r2, #0]
 800f712:	69bb      	ldr	r3, [r7, #24]
 800f714:	015a      	lsls	r2, r3, #5
 800f716:	69fb      	ldr	r3, [r7, #28]
 800f718:	4413      	add	r3, r2
 800f71a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	69ba      	ldr	r2, [r7, #24]
 800f722:	0151      	lsls	r1, r2, #5
 800f724:	69fa      	ldr	r2, [r7, #28]
 800f726:	440a      	add	r2, r1
 800f728:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f72c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f730:	6013      	str	r3, [r2, #0]
 800f732:	e12f      	b.n	800f994 <USB_EPStartXfer+0x478>
 800f734:	69bb      	ldr	r3, [r7, #24]
 800f736:	015a      	lsls	r2, r3, #5
 800f738:	69fb      	ldr	r3, [r7, #28]
 800f73a:	4413      	add	r3, r2
 800f73c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	69ba      	ldr	r2, [r7, #24]
 800f744:	0151      	lsls	r1, r2, #5
 800f746:	69fa      	ldr	r2, [r7, #28]
 800f748:	440a      	add	r2, r1
 800f74a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f74e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f752:	6013      	str	r3, [r2, #0]
 800f754:	68bb      	ldr	r3, [r7, #8]
 800f756:	78db      	ldrb	r3, [r3, #3]
 800f758:	2b01      	cmp	r3, #1
 800f75a:	d015      	beq.n	800f788 <USB_EPStartXfer+0x26c>
 800f75c:	68bb      	ldr	r3, [r7, #8]
 800f75e:	695b      	ldr	r3, [r3, #20]
 800f760:	2b00      	cmp	r3, #0
 800f762:	f000 8117 	beq.w	800f994 <USB_EPStartXfer+0x478>
 800f766:	69fb      	ldr	r3, [r7, #28]
 800f768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f76c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f76e:	68bb      	ldr	r3, [r7, #8]
 800f770:	781b      	ldrb	r3, [r3, #0]
 800f772:	f003 030f 	and.w	r3, r3, #15
 800f776:	2101      	movs	r1, #1
 800f778:	fa01 f303 	lsl.w	r3, r1, r3
 800f77c:	69f9      	ldr	r1, [r7, #28]
 800f77e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f782:	4313      	orrs	r3, r2
 800f784:	634b      	str	r3, [r1, #52]	; 0x34
 800f786:	e105      	b.n	800f994 <USB_EPStartXfer+0x478>
 800f788:	69fb      	ldr	r3, [r7, #28]
 800f78a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f78e:	689b      	ldr	r3, [r3, #8]
 800f790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f794:	2b00      	cmp	r3, #0
 800f796:	d110      	bne.n	800f7ba <USB_EPStartXfer+0x29e>
 800f798:	69bb      	ldr	r3, [r7, #24]
 800f79a:	015a      	lsls	r2, r3, #5
 800f79c:	69fb      	ldr	r3, [r7, #28]
 800f79e:	4413      	add	r3, r2
 800f7a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	69ba      	ldr	r2, [r7, #24]
 800f7a8:	0151      	lsls	r1, r2, #5
 800f7aa:	69fa      	ldr	r2, [r7, #28]
 800f7ac:	440a      	add	r2, r1
 800f7ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f7b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f7b6:	6013      	str	r3, [r2, #0]
 800f7b8:	e00f      	b.n	800f7da <USB_EPStartXfer+0x2be>
 800f7ba:	69bb      	ldr	r3, [r7, #24]
 800f7bc:	015a      	lsls	r2, r3, #5
 800f7be:	69fb      	ldr	r3, [r7, #28]
 800f7c0:	4413      	add	r3, r2
 800f7c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	69ba      	ldr	r2, [r7, #24]
 800f7ca:	0151      	lsls	r1, r2, #5
 800f7cc:	69fa      	ldr	r2, [r7, #28]
 800f7ce:	440a      	add	r2, r1
 800f7d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f7d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f7d8:	6013      	str	r3, [r2, #0]
 800f7da:	68bb      	ldr	r3, [r7, #8]
 800f7dc:	68d9      	ldr	r1, [r3, #12]
 800f7de:	68bb      	ldr	r3, [r7, #8]
 800f7e0:	781a      	ldrb	r2, [r3, #0]
 800f7e2:	68bb      	ldr	r3, [r7, #8]
 800f7e4:	695b      	ldr	r3, [r3, #20]
 800f7e6:	b298      	uxth	r0, r3
 800f7e8:	79fb      	ldrb	r3, [r7, #7]
 800f7ea:	9300      	str	r3, [sp, #0]
 800f7ec:	4603      	mov	r3, r0
 800f7ee:	68f8      	ldr	r0, [r7, #12]
 800f7f0:	f000 fa2b 	bl	800fc4a <USB_WritePacket>
 800f7f4:	e0ce      	b.n	800f994 <USB_EPStartXfer+0x478>
 800f7f6:	69bb      	ldr	r3, [r7, #24]
 800f7f8:	015a      	lsls	r2, r3, #5
 800f7fa:	69fb      	ldr	r3, [r7, #28]
 800f7fc:	4413      	add	r3, r2
 800f7fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f802:	691b      	ldr	r3, [r3, #16]
 800f804:	69ba      	ldr	r2, [r7, #24]
 800f806:	0151      	lsls	r1, r2, #5
 800f808:	69fa      	ldr	r2, [r7, #28]
 800f80a:	440a      	add	r2, r1
 800f80c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f810:	0cdb      	lsrs	r3, r3, #19
 800f812:	04db      	lsls	r3, r3, #19
 800f814:	6113      	str	r3, [r2, #16]
 800f816:	69bb      	ldr	r3, [r7, #24]
 800f818:	015a      	lsls	r2, r3, #5
 800f81a:	69fb      	ldr	r3, [r7, #28]
 800f81c:	4413      	add	r3, r2
 800f81e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f822:	691b      	ldr	r3, [r3, #16]
 800f824:	69ba      	ldr	r2, [r7, #24]
 800f826:	0151      	lsls	r1, r2, #5
 800f828:	69fa      	ldr	r2, [r7, #28]
 800f82a:	440a      	add	r2, r1
 800f82c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f830:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f834:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f838:	6113      	str	r3, [r2, #16]
 800f83a:	68bb      	ldr	r3, [r7, #8]
 800f83c:	695b      	ldr	r3, [r3, #20]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d126      	bne.n	800f890 <USB_EPStartXfer+0x374>
 800f842:	69bb      	ldr	r3, [r7, #24]
 800f844:	015a      	lsls	r2, r3, #5
 800f846:	69fb      	ldr	r3, [r7, #28]
 800f848:	4413      	add	r3, r2
 800f84a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f84e:	691a      	ldr	r2, [r3, #16]
 800f850:	68bb      	ldr	r3, [r7, #8]
 800f852:	689b      	ldr	r3, [r3, #8]
 800f854:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f858:	69b9      	ldr	r1, [r7, #24]
 800f85a:	0148      	lsls	r0, r1, #5
 800f85c:	69f9      	ldr	r1, [r7, #28]
 800f85e:	4401      	add	r1, r0
 800f860:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f864:	4313      	orrs	r3, r2
 800f866:	610b      	str	r3, [r1, #16]
 800f868:	69bb      	ldr	r3, [r7, #24]
 800f86a:	015a      	lsls	r2, r3, #5
 800f86c:	69fb      	ldr	r3, [r7, #28]
 800f86e:	4413      	add	r3, r2
 800f870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f874:	691b      	ldr	r3, [r3, #16]
 800f876:	69ba      	ldr	r2, [r7, #24]
 800f878:	0151      	lsls	r1, r2, #5
 800f87a:	69fa      	ldr	r2, [r7, #28]
 800f87c:	440a      	add	r2, r1
 800f87e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f882:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f886:	6113      	str	r3, [r2, #16]
 800f888:	e036      	b.n	800f8f8 <USB_EPStartXfer+0x3dc>
 800f88a:	bf00      	nop
 800f88c:	1ff80000 	.word	0x1ff80000
 800f890:	68bb      	ldr	r3, [r7, #8]
 800f892:	695a      	ldr	r2, [r3, #20]
 800f894:	68bb      	ldr	r3, [r7, #8]
 800f896:	689b      	ldr	r3, [r3, #8]
 800f898:	4413      	add	r3, r2
 800f89a:	1e5a      	subs	r2, r3, #1
 800f89c:	68bb      	ldr	r3, [r7, #8]
 800f89e:	689b      	ldr	r3, [r3, #8]
 800f8a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800f8a4:	82fb      	strh	r3, [r7, #22]
 800f8a6:	69bb      	ldr	r3, [r7, #24]
 800f8a8:	015a      	lsls	r2, r3, #5
 800f8aa:	69fb      	ldr	r3, [r7, #28]
 800f8ac:	4413      	add	r3, r2
 800f8ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8b2:	691a      	ldr	r2, [r3, #16]
 800f8b4:	8afb      	ldrh	r3, [r7, #22]
 800f8b6:	04d9      	lsls	r1, r3, #19
 800f8b8:	4b39      	ldr	r3, [pc, #228]	; (800f9a0 <USB_EPStartXfer+0x484>)
 800f8ba:	400b      	ands	r3, r1
 800f8bc:	69b9      	ldr	r1, [r7, #24]
 800f8be:	0148      	lsls	r0, r1, #5
 800f8c0:	69f9      	ldr	r1, [r7, #28]
 800f8c2:	4401      	add	r1, r0
 800f8c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f8c8:	4313      	orrs	r3, r2
 800f8ca:	610b      	str	r3, [r1, #16]
 800f8cc:	69bb      	ldr	r3, [r7, #24]
 800f8ce:	015a      	lsls	r2, r3, #5
 800f8d0:	69fb      	ldr	r3, [r7, #28]
 800f8d2:	4413      	add	r3, r2
 800f8d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8d8:	691a      	ldr	r2, [r3, #16]
 800f8da:	68bb      	ldr	r3, [r7, #8]
 800f8dc:	689b      	ldr	r3, [r3, #8]
 800f8de:	8af9      	ldrh	r1, [r7, #22]
 800f8e0:	fb01 f303 	mul.w	r3, r1, r3
 800f8e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f8e8:	69b9      	ldr	r1, [r7, #24]
 800f8ea:	0148      	lsls	r0, r1, #5
 800f8ec:	69f9      	ldr	r1, [r7, #28]
 800f8ee:	4401      	add	r1, r0
 800f8f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f8f4:	4313      	orrs	r3, r2
 800f8f6:	610b      	str	r3, [r1, #16]
 800f8f8:	79fb      	ldrb	r3, [r7, #7]
 800f8fa:	2b01      	cmp	r3, #1
 800f8fc:	d10d      	bne.n	800f91a <USB_EPStartXfer+0x3fe>
 800f8fe:	68bb      	ldr	r3, [r7, #8]
 800f900:	68db      	ldr	r3, [r3, #12]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d009      	beq.n	800f91a <USB_EPStartXfer+0x3fe>
 800f906:	68bb      	ldr	r3, [r7, #8]
 800f908:	68d9      	ldr	r1, [r3, #12]
 800f90a:	69bb      	ldr	r3, [r7, #24]
 800f90c:	015a      	lsls	r2, r3, #5
 800f90e:	69fb      	ldr	r3, [r7, #28]
 800f910:	4413      	add	r3, r2
 800f912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f916:	460a      	mov	r2, r1
 800f918:	615a      	str	r2, [r3, #20]
 800f91a:	68bb      	ldr	r3, [r7, #8]
 800f91c:	78db      	ldrb	r3, [r3, #3]
 800f91e:	2b01      	cmp	r3, #1
 800f920:	d128      	bne.n	800f974 <USB_EPStartXfer+0x458>
 800f922:	69fb      	ldr	r3, [r7, #28]
 800f924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f928:	689b      	ldr	r3, [r3, #8]
 800f92a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d110      	bne.n	800f954 <USB_EPStartXfer+0x438>
 800f932:	69bb      	ldr	r3, [r7, #24]
 800f934:	015a      	lsls	r2, r3, #5
 800f936:	69fb      	ldr	r3, [r7, #28]
 800f938:	4413      	add	r3, r2
 800f93a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	69ba      	ldr	r2, [r7, #24]
 800f942:	0151      	lsls	r1, r2, #5
 800f944:	69fa      	ldr	r2, [r7, #28]
 800f946:	440a      	add	r2, r1
 800f948:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f94c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f950:	6013      	str	r3, [r2, #0]
 800f952:	e00f      	b.n	800f974 <USB_EPStartXfer+0x458>
 800f954:	69bb      	ldr	r3, [r7, #24]
 800f956:	015a      	lsls	r2, r3, #5
 800f958:	69fb      	ldr	r3, [r7, #28]
 800f95a:	4413      	add	r3, r2
 800f95c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	69ba      	ldr	r2, [r7, #24]
 800f964:	0151      	lsls	r1, r2, #5
 800f966:	69fa      	ldr	r2, [r7, #28]
 800f968:	440a      	add	r2, r1
 800f96a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f96e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f972:	6013      	str	r3, [r2, #0]
 800f974:	69bb      	ldr	r3, [r7, #24]
 800f976:	015a      	lsls	r2, r3, #5
 800f978:	69fb      	ldr	r3, [r7, #28]
 800f97a:	4413      	add	r3, r2
 800f97c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	69ba      	ldr	r2, [r7, #24]
 800f984:	0151      	lsls	r1, r2, #5
 800f986:	69fa      	ldr	r2, [r7, #28]
 800f988:	440a      	add	r2, r1
 800f98a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f98e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f992:	6013      	str	r3, [r2, #0]
 800f994:	2300      	movs	r3, #0
 800f996:	4618      	mov	r0, r3
 800f998:	3720      	adds	r7, #32
 800f99a:	46bd      	mov	sp, r7
 800f99c:	bd80      	pop	{r7, pc}
 800f99e:	bf00      	nop
 800f9a0:	1ff80000 	.word	0x1ff80000

0800f9a4 <USB_EP0StartXfer>:
 800f9a4:	b480      	push	{r7}
 800f9a6:	b087      	sub	sp, #28
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	60f8      	str	r0, [r7, #12]
 800f9ac:	60b9      	str	r1, [r7, #8]
 800f9ae:	4613      	mov	r3, r2
 800f9b0:	71fb      	strb	r3, [r7, #7]
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	617b      	str	r3, [r7, #20]
 800f9b6:	68bb      	ldr	r3, [r7, #8]
 800f9b8:	781b      	ldrb	r3, [r3, #0]
 800f9ba:	613b      	str	r3, [r7, #16]
 800f9bc:	68bb      	ldr	r3, [r7, #8]
 800f9be:	785b      	ldrb	r3, [r3, #1]
 800f9c0:	2b01      	cmp	r3, #1
 800f9c2:	f040 80cd 	bne.w	800fb60 <USB_EP0StartXfer+0x1bc>
 800f9c6:	68bb      	ldr	r3, [r7, #8]
 800f9c8:	695b      	ldr	r3, [r3, #20]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d132      	bne.n	800fa34 <USB_EP0StartXfer+0x90>
 800f9ce:	693b      	ldr	r3, [r7, #16]
 800f9d0:	015a      	lsls	r2, r3, #5
 800f9d2:	697b      	ldr	r3, [r7, #20]
 800f9d4:	4413      	add	r3, r2
 800f9d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9da:	691b      	ldr	r3, [r3, #16]
 800f9dc:	693a      	ldr	r2, [r7, #16]
 800f9de:	0151      	lsls	r1, r2, #5
 800f9e0:	697a      	ldr	r2, [r7, #20]
 800f9e2:	440a      	add	r2, r1
 800f9e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f9e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f9ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f9f0:	6113      	str	r3, [r2, #16]
 800f9f2:	693b      	ldr	r3, [r7, #16]
 800f9f4:	015a      	lsls	r2, r3, #5
 800f9f6:	697b      	ldr	r3, [r7, #20]
 800f9f8:	4413      	add	r3, r2
 800f9fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9fe:	691b      	ldr	r3, [r3, #16]
 800fa00:	693a      	ldr	r2, [r7, #16]
 800fa02:	0151      	lsls	r1, r2, #5
 800fa04:	697a      	ldr	r2, [r7, #20]
 800fa06:	440a      	add	r2, r1
 800fa08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fa10:	6113      	str	r3, [r2, #16]
 800fa12:	693b      	ldr	r3, [r7, #16]
 800fa14:	015a      	lsls	r2, r3, #5
 800fa16:	697b      	ldr	r3, [r7, #20]
 800fa18:	4413      	add	r3, r2
 800fa1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa1e:	691b      	ldr	r3, [r3, #16]
 800fa20:	693a      	ldr	r2, [r7, #16]
 800fa22:	0151      	lsls	r1, r2, #5
 800fa24:	697a      	ldr	r2, [r7, #20]
 800fa26:	440a      	add	r2, r1
 800fa28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa2c:	0cdb      	lsrs	r3, r3, #19
 800fa2e:	04db      	lsls	r3, r3, #19
 800fa30:	6113      	str	r3, [r2, #16]
 800fa32:	e04e      	b.n	800fad2 <USB_EP0StartXfer+0x12e>
 800fa34:	693b      	ldr	r3, [r7, #16]
 800fa36:	015a      	lsls	r2, r3, #5
 800fa38:	697b      	ldr	r3, [r7, #20]
 800fa3a:	4413      	add	r3, r2
 800fa3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa40:	691b      	ldr	r3, [r3, #16]
 800fa42:	693a      	ldr	r2, [r7, #16]
 800fa44:	0151      	lsls	r1, r2, #5
 800fa46:	697a      	ldr	r2, [r7, #20]
 800fa48:	440a      	add	r2, r1
 800fa4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa4e:	0cdb      	lsrs	r3, r3, #19
 800fa50:	04db      	lsls	r3, r3, #19
 800fa52:	6113      	str	r3, [r2, #16]
 800fa54:	693b      	ldr	r3, [r7, #16]
 800fa56:	015a      	lsls	r2, r3, #5
 800fa58:	697b      	ldr	r3, [r7, #20]
 800fa5a:	4413      	add	r3, r2
 800fa5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa60:	691b      	ldr	r3, [r3, #16]
 800fa62:	693a      	ldr	r2, [r7, #16]
 800fa64:	0151      	lsls	r1, r2, #5
 800fa66:	697a      	ldr	r2, [r7, #20]
 800fa68:	440a      	add	r2, r1
 800fa6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa6e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fa72:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fa76:	6113      	str	r3, [r2, #16]
 800fa78:	68bb      	ldr	r3, [r7, #8]
 800fa7a:	695a      	ldr	r2, [r3, #20]
 800fa7c:	68bb      	ldr	r3, [r7, #8]
 800fa7e:	689b      	ldr	r3, [r3, #8]
 800fa80:	429a      	cmp	r2, r3
 800fa82:	d903      	bls.n	800fa8c <USB_EP0StartXfer+0xe8>
 800fa84:	68bb      	ldr	r3, [r7, #8]
 800fa86:	689a      	ldr	r2, [r3, #8]
 800fa88:	68bb      	ldr	r3, [r7, #8]
 800fa8a:	615a      	str	r2, [r3, #20]
 800fa8c:	693b      	ldr	r3, [r7, #16]
 800fa8e:	015a      	lsls	r2, r3, #5
 800fa90:	697b      	ldr	r3, [r7, #20]
 800fa92:	4413      	add	r3, r2
 800fa94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa98:	691b      	ldr	r3, [r3, #16]
 800fa9a:	693a      	ldr	r2, [r7, #16]
 800fa9c:	0151      	lsls	r1, r2, #5
 800fa9e:	697a      	ldr	r2, [r7, #20]
 800faa0:	440a      	add	r2, r1
 800faa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800faa6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800faaa:	6113      	str	r3, [r2, #16]
 800faac:	693b      	ldr	r3, [r7, #16]
 800faae:	015a      	lsls	r2, r3, #5
 800fab0:	697b      	ldr	r3, [r7, #20]
 800fab2:	4413      	add	r3, r2
 800fab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fab8:	691a      	ldr	r2, [r3, #16]
 800faba:	68bb      	ldr	r3, [r7, #8]
 800fabc:	695b      	ldr	r3, [r3, #20]
 800fabe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fac2:	6939      	ldr	r1, [r7, #16]
 800fac4:	0148      	lsls	r0, r1, #5
 800fac6:	6979      	ldr	r1, [r7, #20]
 800fac8:	4401      	add	r1, r0
 800faca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800face:	4313      	orrs	r3, r2
 800fad0:	610b      	str	r3, [r1, #16]
 800fad2:	79fb      	ldrb	r3, [r7, #7]
 800fad4:	2b01      	cmp	r3, #1
 800fad6:	d11e      	bne.n	800fb16 <USB_EP0StartXfer+0x172>
 800fad8:	68bb      	ldr	r3, [r7, #8]
 800fada:	691b      	ldr	r3, [r3, #16]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d009      	beq.n	800faf4 <USB_EP0StartXfer+0x150>
 800fae0:	693b      	ldr	r3, [r7, #16]
 800fae2:	015a      	lsls	r2, r3, #5
 800fae4:	697b      	ldr	r3, [r7, #20]
 800fae6:	4413      	add	r3, r2
 800fae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800faec:	461a      	mov	r2, r3
 800faee:	68bb      	ldr	r3, [r7, #8]
 800faf0:	691b      	ldr	r3, [r3, #16]
 800faf2:	6153      	str	r3, [r2, #20]
 800faf4:	693b      	ldr	r3, [r7, #16]
 800faf6:	015a      	lsls	r2, r3, #5
 800faf8:	697b      	ldr	r3, [r7, #20]
 800fafa:	4413      	add	r3, r2
 800fafc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	693a      	ldr	r2, [r7, #16]
 800fb04:	0151      	lsls	r1, r2, #5
 800fb06:	697a      	ldr	r2, [r7, #20]
 800fb08:	440a      	add	r2, r1
 800fb0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fb0e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fb12:	6013      	str	r3, [r2, #0]
 800fb14:	e092      	b.n	800fc3c <USB_EP0StartXfer+0x298>
 800fb16:	693b      	ldr	r3, [r7, #16]
 800fb18:	015a      	lsls	r2, r3, #5
 800fb1a:	697b      	ldr	r3, [r7, #20]
 800fb1c:	4413      	add	r3, r2
 800fb1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	693a      	ldr	r2, [r7, #16]
 800fb26:	0151      	lsls	r1, r2, #5
 800fb28:	697a      	ldr	r2, [r7, #20]
 800fb2a:	440a      	add	r2, r1
 800fb2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fb30:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fb34:	6013      	str	r3, [r2, #0]
 800fb36:	68bb      	ldr	r3, [r7, #8]
 800fb38:	695b      	ldr	r3, [r3, #20]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d07e      	beq.n	800fc3c <USB_EP0StartXfer+0x298>
 800fb3e:	697b      	ldr	r3, [r7, #20]
 800fb40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fb46:	68bb      	ldr	r3, [r7, #8]
 800fb48:	781b      	ldrb	r3, [r3, #0]
 800fb4a:	f003 030f 	and.w	r3, r3, #15
 800fb4e:	2101      	movs	r1, #1
 800fb50:	fa01 f303 	lsl.w	r3, r1, r3
 800fb54:	6979      	ldr	r1, [r7, #20]
 800fb56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fb5a:	4313      	orrs	r3, r2
 800fb5c:	634b      	str	r3, [r1, #52]	; 0x34
 800fb5e:	e06d      	b.n	800fc3c <USB_EP0StartXfer+0x298>
 800fb60:	693b      	ldr	r3, [r7, #16]
 800fb62:	015a      	lsls	r2, r3, #5
 800fb64:	697b      	ldr	r3, [r7, #20]
 800fb66:	4413      	add	r3, r2
 800fb68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb6c:	691b      	ldr	r3, [r3, #16]
 800fb6e:	693a      	ldr	r2, [r7, #16]
 800fb70:	0151      	lsls	r1, r2, #5
 800fb72:	697a      	ldr	r2, [r7, #20]
 800fb74:	440a      	add	r2, r1
 800fb76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fb7a:	0cdb      	lsrs	r3, r3, #19
 800fb7c:	04db      	lsls	r3, r3, #19
 800fb7e:	6113      	str	r3, [r2, #16]
 800fb80:	693b      	ldr	r3, [r7, #16]
 800fb82:	015a      	lsls	r2, r3, #5
 800fb84:	697b      	ldr	r3, [r7, #20]
 800fb86:	4413      	add	r3, r2
 800fb88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb8c:	691b      	ldr	r3, [r3, #16]
 800fb8e:	693a      	ldr	r2, [r7, #16]
 800fb90:	0151      	lsls	r1, r2, #5
 800fb92:	697a      	ldr	r2, [r7, #20]
 800fb94:	440a      	add	r2, r1
 800fb96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fb9a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fb9e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fba2:	6113      	str	r3, [r2, #16]
 800fba4:	68bb      	ldr	r3, [r7, #8]
 800fba6:	695b      	ldr	r3, [r3, #20]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d003      	beq.n	800fbb4 <USB_EP0StartXfer+0x210>
 800fbac:	68bb      	ldr	r3, [r7, #8]
 800fbae:	689a      	ldr	r2, [r3, #8]
 800fbb0:	68bb      	ldr	r3, [r7, #8]
 800fbb2:	615a      	str	r2, [r3, #20]
 800fbb4:	693b      	ldr	r3, [r7, #16]
 800fbb6:	015a      	lsls	r2, r3, #5
 800fbb8:	697b      	ldr	r3, [r7, #20]
 800fbba:	4413      	add	r3, r2
 800fbbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fbc0:	691b      	ldr	r3, [r3, #16]
 800fbc2:	693a      	ldr	r2, [r7, #16]
 800fbc4:	0151      	lsls	r1, r2, #5
 800fbc6:	697a      	ldr	r2, [r7, #20]
 800fbc8:	440a      	add	r2, r1
 800fbca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fbce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fbd2:	6113      	str	r3, [r2, #16]
 800fbd4:	693b      	ldr	r3, [r7, #16]
 800fbd6:	015a      	lsls	r2, r3, #5
 800fbd8:	697b      	ldr	r3, [r7, #20]
 800fbda:	4413      	add	r3, r2
 800fbdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fbe0:	691a      	ldr	r2, [r3, #16]
 800fbe2:	68bb      	ldr	r3, [r7, #8]
 800fbe4:	689b      	ldr	r3, [r3, #8]
 800fbe6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fbea:	6939      	ldr	r1, [r7, #16]
 800fbec:	0148      	lsls	r0, r1, #5
 800fbee:	6979      	ldr	r1, [r7, #20]
 800fbf0:	4401      	add	r1, r0
 800fbf2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fbf6:	4313      	orrs	r3, r2
 800fbf8:	610b      	str	r3, [r1, #16]
 800fbfa:	79fb      	ldrb	r3, [r7, #7]
 800fbfc:	2b01      	cmp	r3, #1
 800fbfe:	d10d      	bne.n	800fc1c <USB_EP0StartXfer+0x278>
 800fc00:	68bb      	ldr	r3, [r7, #8]
 800fc02:	68db      	ldr	r3, [r3, #12]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d009      	beq.n	800fc1c <USB_EP0StartXfer+0x278>
 800fc08:	68bb      	ldr	r3, [r7, #8]
 800fc0a:	68d9      	ldr	r1, [r3, #12]
 800fc0c:	693b      	ldr	r3, [r7, #16]
 800fc0e:	015a      	lsls	r2, r3, #5
 800fc10:	697b      	ldr	r3, [r7, #20]
 800fc12:	4413      	add	r3, r2
 800fc14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc18:	460a      	mov	r2, r1
 800fc1a:	615a      	str	r2, [r3, #20]
 800fc1c:	693b      	ldr	r3, [r7, #16]
 800fc1e:	015a      	lsls	r2, r3, #5
 800fc20:	697b      	ldr	r3, [r7, #20]
 800fc22:	4413      	add	r3, r2
 800fc24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	693a      	ldr	r2, [r7, #16]
 800fc2c:	0151      	lsls	r1, r2, #5
 800fc2e:	697a      	ldr	r2, [r7, #20]
 800fc30:	440a      	add	r2, r1
 800fc32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fc36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fc3a:	6013      	str	r3, [r2, #0]
 800fc3c:	2300      	movs	r3, #0
 800fc3e:	4618      	mov	r0, r3
 800fc40:	371c      	adds	r7, #28
 800fc42:	46bd      	mov	sp, r7
 800fc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc48:	4770      	bx	lr

0800fc4a <USB_WritePacket>:
 800fc4a:	b480      	push	{r7}
 800fc4c:	b089      	sub	sp, #36	; 0x24
 800fc4e:	af00      	add	r7, sp, #0
 800fc50:	60f8      	str	r0, [r7, #12]
 800fc52:	60b9      	str	r1, [r7, #8]
 800fc54:	4611      	mov	r1, r2
 800fc56:	461a      	mov	r2, r3
 800fc58:	460b      	mov	r3, r1
 800fc5a:	71fb      	strb	r3, [r7, #7]
 800fc5c:	4613      	mov	r3, r2
 800fc5e:	80bb      	strh	r3, [r7, #4]
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	617b      	str	r3, [r7, #20]
 800fc64:	68bb      	ldr	r3, [r7, #8]
 800fc66:	61fb      	str	r3, [r7, #28]
 800fc68:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d11a      	bne.n	800fca6 <USB_WritePacket+0x5c>
 800fc70:	88bb      	ldrh	r3, [r7, #4]
 800fc72:	3303      	adds	r3, #3
 800fc74:	089b      	lsrs	r3, r3, #2
 800fc76:	613b      	str	r3, [r7, #16]
 800fc78:	2300      	movs	r3, #0
 800fc7a:	61bb      	str	r3, [r7, #24]
 800fc7c:	e00f      	b.n	800fc9e <USB_WritePacket+0x54>
 800fc7e:	79fb      	ldrb	r3, [r7, #7]
 800fc80:	031a      	lsls	r2, r3, #12
 800fc82:	697b      	ldr	r3, [r7, #20]
 800fc84:	4413      	add	r3, r2
 800fc86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fc8a:	461a      	mov	r2, r3
 800fc8c:	69fb      	ldr	r3, [r7, #28]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	6013      	str	r3, [r2, #0]
 800fc92:	69fb      	ldr	r3, [r7, #28]
 800fc94:	3304      	adds	r3, #4
 800fc96:	61fb      	str	r3, [r7, #28]
 800fc98:	69bb      	ldr	r3, [r7, #24]
 800fc9a:	3301      	adds	r3, #1
 800fc9c:	61bb      	str	r3, [r7, #24]
 800fc9e:	69ba      	ldr	r2, [r7, #24]
 800fca0:	693b      	ldr	r3, [r7, #16]
 800fca2:	429a      	cmp	r2, r3
 800fca4:	d3eb      	bcc.n	800fc7e <USB_WritePacket+0x34>
 800fca6:	2300      	movs	r3, #0
 800fca8:	4618      	mov	r0, r3
 800fcaa:	3724      	adds	r7, #36	; 0x24
 800fcac:	46bd      	mov	sp, r7
 800fcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb2:	4770      	bx	lr

0800fcb4 <USB_ReadPacket>:
 800fcb4:	b480      	push	{r7}
 800fcb6:	b089      	sub	sp, #36	; 0x24
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	60f8      	str	r0, [r7, #12]
 800fcbc:	60b9      	str	r1, [r7, #8]
 800fcbe:	4613      	mov	r3, r2
 800fcc0:	80fb      	strh	r3, [r7, #6]
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	617b      	str	r3, [r7, #20]
 800fcc6:	68bb      	ldr	r3, [r7, #8]
 800fcc8:	61fb      	str	r3, [r7, #28]
 800fcca:	88fb      	ldrh	r3, [r7, #6]
 800fccc:	3303      	adds	r3, #3
 800fcce:	089b      	lsrs	r3, r3, #2
 800fcd0:	613b      	str	r3, [r7, #16]
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	61bb      	str	r3, [r7, #24]
 800fcd6:	e00b      	b.n	800fcf0 <USB_ReadPacket+0x3c>
 800fcd8:	697b      	ldr	r3, [r7, #20]
 800fcda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fcde:	681a      	ldr	r2, [r3, #0]
 800fce0:	69fb      	ldr	r3, [r7, #28]
 800fce2:	601a      	str	r2, [r3, #0]
 800fce4:	69fb      	ldr	r3, [r7, #28]
 800fce6:	3304      	adds	r3, #4
 800fce8:	61fb      	str	r3, [r7, #28]
 800fcea:	69bb      	ldr	r3, [r7, #24]
 800fcec:	3301      	adds	r3, #1
 800fcee:	61bb      	str	r3, [r7, #24]
 800fcf0:	69ba      	ldr	r2, [r7, #24]
 800fcf2:	693b      	ldr	r3, [r7, #16]
 800fcf4:	429a      	cmp	r2, r3
 800fcf6:	d3ef      	bcc.n	800fcd8 <USB_ReadPacket+0x24>
 800fcf8:	69fb      	ldr	r3, [r7, #28]
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	3724      	adds	r7, #36	; 0x24
 800fcfe:	46bd      	mov	sp, r7
 800fd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd04:	4770      	bx	lr

0800fd06 <USB_EPSetStall>:
 800fd06:	b480      	push	{r7}
 800fd08:	b085      	sub	sp, #20
 800fd0a:	af00      	add	r7, sp, #0
 800fd0c:	6078      	str	r0, [r7, #4]
 800fd0e:	6039      	str	r1, [r7, #0]
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	60fb      	str	r3, [r7, #12]
 800fd14:	683b      	ldr	r3, [r7, #0]
 800fd16:	781b      	ldrb	r3, [r3, #0]
 800fd18:	60bb      	str	r3, [r7, #8]
 800fd1a:	683b      	ldr	r3, [r7, #0]
 800fd1c:	785b      	ldrb	r3, [r3, #1]
 800fd1e:	2b01      	cmp	r3, #1
 800fd20:	d12c      	bne.n	800fd7c <USB_EPSetStall+0x76>
 800fd22:	68bb      	ldr	r3, [r7, #8]
 800fd24:	015a      	lsls	r2, r3, #5
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	4413      	add	r3, r2
 800fd2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	db12      	blt.n	800fd5a <USB_EPSetStall+0x54>
 800fd34:	68bb      	ldr	r3, [r7, #8]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d00f      	beq.n	800fd5a <USB_EPSetStall+0x54>
 800fd3a:	68bb      	ldr	r3, [r7, #8]
 800fd3c:	015a      	lsls	r2, r3, #5
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	4413      	add	r3, r2
 800fd42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	68ba      	ldr	r2, [r7, #8]
 800fd4a:	0151      	lsls	r1, r2, #5
 800fd4c:	68fa      	ldr	r2, [r7, #12]
 800fd4e:	440a      	add	r2, r1
 800fd50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd54:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800fd58:	6013      	str	r3, [r2, #0]
 800fd5a:	68bb      	ldr	r3, [r7, #8]
 800fd5c:	015a      	lsls	r2, r3, #5
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	4413      	add	r3, r2
 800fd62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	68ba      	ldr	r2, [r7, #8]
 800fd6a:	0151      	lsls	r1, r2, #5
 800fd6c:	68fa      	ldr	r2, [r7, #12]
 800fd6e:	440a      	add	r2, r1
 800fd70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800fd78:	6013      	str	r3, [r2, #0]
 800fd7a:	e02b      	b.n	800fdd4 <USB_EPSetStall+0xce>
 800fd7c:	68bb      	ldr	r3, [r7, #8]
 800fd7e:	015a      	lsls	r2, r3, #5
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	4413      	add	r3, r2
 800fd84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	db12      	blt.n	800fdb4 <USB_EPSetStall+0xae>
 800fd8e:	68bb      	ldr	r3, [r7, #8]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d00f      	beq.n	800fdb4 <USB_EPSetStall+0xae>
 800fd94:	68bb      	ldr	r3, [r7, #8]
 800fd96:	015a      	lsls	r2, r3, #5
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	4413      	add	r3, r2
 800fd9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	68ba      	ldr	r2, [r7, #8]
 800fda4:	0151      	lsls	r1, r2, #5
 800fda6:	68fa      	ldr	r2, [r7, #12]
 800fda8:	440a      	add	r2, r1
 800fdaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fdae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800fdb2:	6013      	str	r3, [r2, #0]
 800fdb4:	68bb      	ldr	r3, [r7, #8]
 800fdb6:	015a      	lsls	r2, r3, #5
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	4413      	add	r3, r2
 800fdbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	68ba      	ldr	r2, [r7, #8]
 800fdc4:	0151      	lsls	r1, r2, #5
 800fdc6:	68fa      	ldr	r2, [r7, #12]
 800fdc8:	440a      	add	r2, r1
 800fdca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fdce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800fdd2:	6013      	str	r3, [r2, #0]
 800fdd4:	2300      	movs	r3, #0
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	3714      	adds	r7, #20
 800fdda:	46bd      	mov	sp, r7
 800fddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde0:	4770      	bx	lr

0800fde2 <USB_EPClearStall>:
 800fde2:	b480      	push	{r7}
 800fde4:	b085      	sub	sp, #20
 800fde6:	af00      	add	r7, sp, #0
 800fde8:	6078      	str	r0, [r7, #4]
 800fdea:	6039      	str	r1, [r7, #0]
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	60fb      	str	r3, [r7, #12]
 800fdf0:	683b      	ldr	r3, [r7, #0]
 800fdf2:	781b      	ldrb	r3, [r3, #0]
 800fdf4:	60bb      	str	r3, [r7, #8]
 800fdf6:	683b      	ldr	r3, [r7, #0]
 800fdf8:	785b      	ldrb	r3, [r3, #1]
 800fdfa:	2b01      	cmp	r3, #1
 800fdfc:	d128      	bne.n	800fe50 <USB_EPClearStall+0x6e>
 800fdfe:	68bb      	ldr	r3, [r7, #8]
 800fe00:	015a      	lsls	r2, r3, #5
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	4413      	add	r3, r2
 800fe06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	68ba      	ldr	r2, [r7, #8]
 800fe0e:	0151      	lsls	r1, r2, #5
 800fe10:	68fa      	ldr	r2, [r7, #12]
 800fe12:	440a      	add	r2, r1
 800fe14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe18:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fe1c:	6013      	str	r3, [r2, #0]
 800fe1e:	683b      	ldr	r3, [r7, #0]
 800fe20:	78db      	ldrb	r3, [r3, #3]
 800fe22:	2b03      	cmp	r3, #3
 800fe24:	d003      	beq.n	800fe2e <USB_EPClearStall+0x4c>
 800fe26:	683b      	ldr	r3, [r7, #0]
 800fe28:	78db      	ldrb	r3, [r3, #3]
 800fe2a:	2b02      	cmp	r3, #2
 800fe2c:	d138      	bne.n	800fea0 <USB_EPClearStall+0xbe>
 800fe2e:	68bb      	ldr	r3, [r7, #8]
 800fe30:	015a      	lsls	r2, r3, #5
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	4413      	add	r3, r2
 800fe36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	68ba      	ldr	r2, [r7, #8]
 800fe3e:	0151      	lsls	r1, r2, #5
 800fe40:	68fa      	ldr	r2, [r7, #12]
 800fe42:	440a      	add	r2, r1
 800fe44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fe4c:	6013      	str	r3, [r2, #0]
 800fe4e:	e027      	b.n	800fea0 <USB_EPClearStall+0xbe>
 800fe50:	68bb      	ldr	r3, [r7, #8]
 800fe52:	015a      	lsls	r2, r3, #5
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	4413      	add	r3, r2
 800fe58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	68ba      	ldr	r2, [r7, #8]
 800fe60:	0151      	lsls	r1, r2, #5
 800fe62:	68fa      	ldr	r2, [r7, #12]
 800fe64:	440a      	add	r2, r1
 800fe66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fe6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fe6e:	6013      	str	r3, [r2, #0]
 800fe70:	683b      	ldr	r3, [r7, #0]
 800fe72:	78db      	ldrb	r3, [r3, #3]
 800fe74:	2b03      	cmp	r3, #3
 800fe76:	d003      	beq.n	800fe80 <USB_EPClearStall+0x9e>
 800fe78:	683b      	ldr	r3, [r7, #0]
 800fe7a:	78db      	ldrb	r3, [r3, #3]
 800fe7c:	2b02      	cmp	r3, #2
 800fe7e:	d10f      	bne.n	800fea0 <USB_EPClearStall+0xbe>
 800fe80:	68bb      	ldr	r3, [r7, #8]
 800fe82:	015a      	lsls	r2, r3, #5
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	4413      	add	r3, r2
 800fe88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	68ba      	ldr	r2, [r7, #8]
 800fe90:	0151      	lsls	r1, r2, #5
 800fe92:	68fa      	ldr	r2, [r7, #12]
 800fe94:	440a      	add	r2, r1
 800fe96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fe9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fe9e:	6013      	str	r3, [r2, #0]
 800fea0:	2300      	movs	r3, #0
 800fea2:	4618      	mov	r0, r3
 800fea4:	3714      	adds	r7, #20
 800fea6:	46bd      	mov	sp, r7
 800fea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feac:	4770      	bx	lr

0800feae <USB_SetDevAddress>:
 800feae:	b480      	push	{r7}
 800feb0:	b085      	sub	sp, #20
 800feb2:	af00      	add	r7, sp, #0
 800feb4:	6078      	str	r0, [r7, #4]
 800feb6:	460b      	mov	r3, r1
 800feb8:	70fb      	strb	r3, [r7, #3]
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	60fb      	str	r3, [r7, #12]
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	68fa      	ldr	r2, [r7, #12]
 800fec8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fecc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800fed0:	6013      	str	r3, [r2, #0]
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fed8:	681a      	ldr	r2, [r3, #0]
 800feda:	78fb      	ldrb	r3, [r7, #3]
 800fedc:	011b      	lsls	r3, r3, #4
 800fede:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800fee2:	68f9      	ldr	r1, [r7, #12]
 800fee4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fee8:	4313      	orrs	r3, r2
 800feea:	600b      	str	r3, [r1, #0]
 800feec:	2300      	movs	r3, #0
 800feee:	4618      	mov	r0, r3
 800fef0:	3714      	adds	r7, #20
 800fef2:	46bd      	mov	sp, r7
 800fef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef8:	4770      	bx	lr

0800fefa <USB_DevConnect>:
 800fefa:	b580      	push	{r7, lr}
 800fefc:	b084      	sub	sp, #16
 800fefe:	af00      	add	r7, sp, #0
 800ff00:	6078      	str	r0, [r7, #4]
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	60fb      	str	r3, [r7, #12]
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff0c:	685b      	ldr	r3, [r3, #4]
 800ff0e:	68fa      	ldr	r2, [r7, #12]
 800ff10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ff14:	f023 0302 	bic.w	r3, r3, #2
 800ff18:	6053      	str	r3, [r2, #4]
 800ff1a:	2003      	movs	r0, #3
 800ff1c:	f7fa ff54 	bl	800adc8 <HAL_Delay>
 800ff20:	2300      	movs	r3, #0
 800ff22:	4618      	mov	r0, r3
 800ff24:	3710      	adds	r7, #16
 800ff26:	46bd      	mov	sp, r7
 800ff28:	bd80      	pop	{r7, pc}

0800ff2a <USB_DevDisconnect>:
 800ff2a:	b580      	push	{r7, lr}
 800ff2c:	b084      	sub	sp, #16
 800ff2e:	af00      	add	r7, sp, #0
 800ff30:	6078      	str	r0, [r7, #4]
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	60fb      	str	r3, [r7, #12]
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff3c:	685b      	ldr	r3, [r3, #4]
 800ff3e:	68fa      	ldr	r2, [r7, #12]
 800ff40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ff44:	f043 0302 	orr.w	r3, r3, #2
 800ff48:	6053      	str	r3, [r2, #4]
 800ff4a:	2003      	movs	r0, #3
 800ff4c:	f7fa ff3c 	bl	800adc8 <HAL_Delay>
 800ff50:	2300      	movs	r3, #0
 800ff52:	4618      	mov	r0, r3
 800ff54:	3710      	adds	r7, #16
 800ff56:	46bd      	mov	sp, r7
 800ff58:	bd80      	pop	{r7, pc}

0800ff5a <USB_ReadInterrupts>:
 800ff5a:	b480      	push	{r7}
 800ff5c:	b085      	sub	sp, #20
 800ff5e:	af00      	add	r7, sp, #0
 800ff60:	6078      	str	r0, [r7, #4]
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	695b      	ldr	r3, [r3, #20]
 800ff66:	60fb      	str	r3, [r7, #12]
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	699b      	ldr	r3, [r3, #24]
 800ff6c:	68fa      	ldr	r2, [r7, #12]
 800ff6e:	4013      	ands	r3, r2
 800ff70:	60fb      	str	r3, [r7, #12]
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	4618      	mov	r0, r3
 800ff76:	3714      	adds	r7, #20
 800ff78:	46bd      	mov	sp, r7
 800ff7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7e:	4770      	bx	lr

0800ff80 <USB_ReadDevAllOutEpInterrupt>:
 800ff80:	b480      	push	{r7}
 800ff82:	b085      	sub	sp, #20
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	6078      	str	r0, [r7, #4]
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	60fb      	str	r3, [r7, #12]
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff92:	699b      	ldr	r3, [r3, #24]
 800ff94:	60bb      	str	r3, [r7, #8]
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff9c:	69db      	ldr	r3, [r3, #28]
 800ff9e:	68ba      	ldr	r2, [r7, #8]
 800ffa0:	4013      	ands	r3, r2
 800ffa2:	60bb      	str	r3, [r7, #8]
 800ffa4:	68bb      	ldr	r3, [r7, #8]
 800ffa6:	0c1b      	lsrs	r3, r3, #16
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	3714      	adds	r7, #20
 800ffac:	46bd      	mov	sp, r7
 800ffae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb2:	4770      	bx	lr

0800ffb4 <USB_ReadDevAllInEpInterrupt>:
 800ffb4:	b480      	push	{r7}
 800ffb6:	b085      	sub	sp, #20
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	6078      	str	r0, [r7, #4]
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	60fb      	str	r3, [r7, #12]
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ffc6:	699b      	ldr	r3, [r3, #24]
 800ffc8:	60bb      	str	r3, [r7, #8]
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ffd0:	69db      	ldr	r3, [r3, #28]
 800ffd2:	68ba      	ldr	r2, [r7, #8]
 800ffd4:	4013      	ands	r3, r2
 800ffd6:	60bb      	str	r3, [r7, #8]
 800ffd8:	68bb      	ldr	r3, [r7, #8]
 800ffda:	b29b      	uxth	r3, r3
 800ffdc:	4618      	mov	r0, r3
 800ffde:	3714      	adds	r7, #20
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe6:	4770      	bx	lr

0800ffe8 <USB_ReadDevOutEPInterrupt>:
 800ffe8:	b480      	push	{r7}
 800ffea:	b085      	sub	sp, #20
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	6078      	str	r0, [r7, #4]
 800fff0:	460b      	mov	r3, r1
 800fff2:	70fb      	strb	r3, [r7, #3]
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	60fb      	str	r3, [r7, #12]
 800fff8:	78fb      	ldrb	r3, [r7, #3]
 800fffa:	015a      	lsls	r2, r3, #5
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	4413      	add	r3, r2
 8010000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010004:	689b      	ldr	r3, [r3, #8]
 8010006:	60bb      	str	r3, [r7, #8]
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801000e:	695b      	ldr	r3, [r3, #20]
 8010010:	68ba      	ldr	r2, [r7, #8]
 8010012:	4013      	ands	r3, r2
 8010014:	60bb      	str	r3, [r7, #8]
 8010016:	68bb      	ldr	r3, [r7, #8]
 8010018:	4618      	mov	r0, r3
 801001a:	3714      	adds	r7, #20
 801001c:	46bd      	mov	sp, r7
 801001e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010022:	4770      	bx	lr

08010024 <USB_ReadDevInEPInterrupt>:
 8010024:	b480      	push	{r7}
 8010026:	b087      	sub	sp, #28
 8010028:	af00      	add	r7, sp, #0
 801002a:	6078      	str	r0, [r7, #4]
 801002c:	460b      	mov	r3, r1
 801002e:	70fb      	strb	r3, [r7, #3]
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	617b      	str	r3, [r7, #20]
 8010034:	697b      	ldr	r3, [r7, #20]
 8010036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801003a:	691b      	ldr	r3, [r3, #16]
 801003c:	613b      	str	r3, [r7, #16]
 801003e:	697b      	ldr	r3, [r7, #20]
 8010040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010046:	60fb      	str	r3, [r7, #12]
 8010048:	78fb      	ldrb	r3, [r7, #3]
 801004a:	f003 030f 	and.w	r3, r3, #15
 801004e:	68fa      	ldr	r2, [r7, #12]
 8010050:	fa22 f303 	lsr.w	r3, r2, r3
 8010054:	01db      	lsls	r3, r3, #7
 8010056:	b2db      	uxtb	r3, r3
 8010058:	693a      	ldr	r2, [r7, #16]
 801005a:	4313      	orrs	r3, r2
 801005c:	613b      	str	r3, [r7, #16]
 801005e:	78fb      	ldrb	r3, [r7, #3]
 8010060:	015a      	lsls	r2, r3, #5
 8010062:	697b      	ldr	r3, [r7, #20]
 8010064:	4413      	add	r3, r2
 8010066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801006a:	689b      	ldr	r3, [r3, #8]
 801006c:	693a      	ldr	r2, [r7, #16]
 801006e:	4013      	ands	r3, r2
 8010070:	60bb      	str	r3, [r7, #8]
 8010072:	68bb      	ldr	r3, [r7, #8]
 8010074:	4618      	mov	r0, r3
 8010076:	371c      	adds	r7, #28
 8010078:	46bd      	mov	sp, r7
 801007a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801007e:	4770      	bx	lr

08010080 <USB_GetMode>:
 8010080:	b480      	push	{r7}
 8010082:	b083      	sub	sp, #12
 8010084:	af00      	add	r7, sp, #0
 8010086:	6078      	str	r0, [r7, #4]
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	695b      	ldr	r3, [r3, #20]
 801008c:	f003 0301 	and.w	r3, r3, #1
 8010090:	4618      	mov	r0, r3
 8010092:	370c      	adds	r7, #12
 8010094:	46bd      	mov	sp, r7
 8010096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801009a:	4770      	bx	lr

0801009c <USB_ActivateSetup>:
 801009c:	b480      	push	{r7}
 801009e:	b085      	sub	sp, #20
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	6078      	str	r0, [r7, #4]
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	60fb      	str	r3, [r7, #12]
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	68fa      	ldr	r2, [r7, #12]
 80100b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80100b6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80100ba:	f023 0307 	bic.w	r3, r3, #7
 80100be:	6013      	str	r3, [r2, #0]
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80100c6:	689b      	ldr	r3, [r3, #8]
 80100c8:	f003 0306 	and.w	r3, r3, #6
 80100cc:	2b04      	cmp	r3, #4
 80100ce:	d109      	bne.n	80100e4 <USB_ActivateSetup+0x48>
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	68fa      	ldr	r2, [r7, #12]
 80100da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80100de:	f043 0303 	orr.w	r3, r3, #3
 80100e2:	6013      	str	r3, [r2, #0]
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80100ea:	685b      	ldr	r3, [r3, #4]
 80100ec:	68fa      	ldr	r2, [r7, #12]
 80100ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80100f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80100f6:	6053      	str	r3, [r2, #4]
 80100f8:	2300      	movs	r3, #0
 80100fa:	4618      	mov	r0, r3
 80100fc:	3714      	adds	r7, #20
 80100fe:	46bd      	mov	sp, r7
 8010100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010104:	4770      	bx	lr
	...

08010108 <USB_EP0_OutStart>:
 8010108:	b480      	push	{r7}
 801010a:	b087      	sub	sp, #28
 801010c:	af00      	add	r7, sp, #0
 801010e:	60f8      	str	r0, [r7, #12]
 8010110:	460b      	mov	r3, r1
 8010112:	607a      	str	r2, [r7, #4]
 8010114:	72fb      	strb	r3, [r7, #11]
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	617b      	str	r3, [r7, #20]
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	333c      	adds	r3, #60	; 0x3c
 801011e:	3304      	adds	r3, #4
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	613b      	str	r3, [r7, #16]
 8010124:	693b      	ldr	r3, [r7, #16]
 8010126:	4a26      	ldr	r2, [pc, #152]	; (80101c0 <USB_EP0_OutStart+0xb8>)
 8010128:	4293      	cmp	r3, r2
 801012a:	d90a      	bls.n	8010142 <USB_EP0_OutStart+0x3a>
 801012c:	697b      	ldr	r3, [r7, #20]
 801012e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010138:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801013c:	d101      	bne.n	8010142 <USB_EP0_OutStart+0x3a>
 801013e:	2300      	movs	r3, #0
 8010140:	e037      	b.n	80101b2 <USB_EP0_OutStart+0xaa>
 8010142:	697b      	ldr	r3, [r7, #20]
 8010144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010148:	461a      	mov	r2, r3
 801014a:	2300      	movs	r3, #0
 801014c:	6113      	str	r3, [r2, #16]
 801014e:	697b      	ldr	r3, [r7, #20]
 8010150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010154:	691b      	ldr	r3, [r3, #16]
 8010156:	697a      	ldr	r2, [r7, #20]
 8010158:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801015c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010160:	6113      	str	r3, [r2, #16]
 8010162:	697b      	ldr	r3, [r7, #20]
 8010164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010168:	691b      	ldr	r3, [r3, #16]
 801016a:	697a      	ldr	r2, [r7, #20]
 801016c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010170:	f043 0318 	orr.w	r3, r3, #24
 8010174:	6113      	str	r3, [r2, #16]
 8010176:	697b      	ldr	r3, [r7, #20]
 8010178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801017c:	691b      	ldr	r3, [r3, #16]
 801017e:	697a      	ldr	r2, [r7, #20]
 8010180:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010184:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8010188:	6113      	str	r3, [r2, #16]
 801018a:	7afb      	ldrb	r3, [r7, #11]
 801018c:	2b01      	cmp	r3, #1
 801018e:	d10f      	bne.n	80101b0 <USB_EP0_OutStart+0xa8>
 8010190:	697b      	ldr	r3, [r7, #20]
 8010192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010196:	461a      	mov	r2, r3
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	6153      	str	r3, [r2, #20]
 801019c:	697b      	ldr	r3, [r7, #20]
 801019e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	697a      	ldr	r2, [r7, #20]
 80101a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80101aa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80101ae:	6013      	str	r3, [r2, #0]
 80101b0:	2300      	movs	r3, #0
 80101b2:	4618      	mov	r0, r3
 80101b4:	371c      	adds	r7, #28
 80101b6:	46bd      	mov	sp, r7
 80101b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101bc:	4770      	bx	lr
 80101be:	bf00      	nop
 80101c0:	4f54300a 	.word	0x4f54300a

080101c4 <USB_CoreReset>:
 80101c4:	b480      	push	{r7}
 80101c6:	b085      	sub	sp, #20
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	6078      	str	r0, [r7, #4]
 80101cc:	2300      	movs	r3, #0
 80101ce:	60fb      	str	r3, [r7, #12]
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	3301      	adds	r3, #1
 80101d4:	60fb      	str	r3, [r7, #12]
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	4a13      	ldr	r2, [pc, #76]	; (8010228 <USB_CoreReset+0x64>)
 80101da:	4293      	cmp	r3, r2
 80101dc:	d901      	bls.n	80101e2 <USB_CoreReset+0x1e>
 80101de:	2303      	movs	r3, #3
 80101e0:	e01b      	b.n	801021a <USB_CoreReset+0x56>
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	691b      	ldr	r3, [r3, #16]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	daf2      	bge.n	80101d0 <USB_CoreReset+0xc>
 80101ea:	2300      	movs	r3, #0
 80101ec:	60fb      	str	r3, [r7, #12]
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	691b      	ldr	r3, [r3, #16]
 80101f2:	f043 0201 	orr.w	r2, r3, #1
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	611a      	str	r2, [r3, #16]
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	3301      	adds	r3, #1
 80101fe:	60fb      	str	r3, [r7, #12]
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	4a09      	ldr	r2, [pc, #36]	; (8010228 <USB_CoreReset+0x64>)
 8010204:	4293      	cmp	r3, r2
 8010206:	d901      	bls.n	801020c <USB_CoreReset+0x48>
 8010208:	2303      	movs	r3, #3
 801020a:	e006      	b.n	801021a <USB_CoreReset+0x56>
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	691b      	ldr	r3, [r3, #16]
 8010210:	f003 0301 	and.w	r3, r3, #1
 8010214:	2b01      	cmp	r3, #1
 8010216:	d0f0      	beq.n	80101fa <USB_CoreReset+0x36>
 8010218:	2300      	movs	r3, #0
 801021a:	4618      	mov	r0, r3
 801021c:	3714      	adds	r7, #20
 801021e:	46bd      	mov	sp, r7
 8010220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010224:	4770      	bx	lr
 8010226:	bf00      	nop
 8010228:	00030d40 	.word	0x00030d40

0801022c <USBD_CDC_Init>:
 801022c:	b580      	push	{r7, lr}
 801022e:	b084      	sub	sp, #16
 8010230:	af00      	add	r7, sp, #0
 8010232:	6078      	str	r0, [r7, #4]
 8010234:	460b      	mov	r3, r1
 8010236:	70fb      	strb	r3, [r7, #3]
 8010238:	2300      	movs	r3, #0
 801023a:	73fb      	strb	r3, [r7, #15]
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	7c1b      	ldrb	r3, [r3, #16]
 8010240:	2b00      	cmp	r3, #0
 8010242:	d115      	bne.n	8010270 <USBD_CDC_Init+0x44>
 8010244:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010248:	2202      	movs	r2, #2
 801024a:	2181      	movs	r1, #129	; 0x81
 801024c:	6878      	ldr	r0, [r7, #4]
 801024e:	f005 f8a2 	bl	8015396 <USBD_LL_OpenEP>
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	2201      	movs	r2, #1
 8010256:	62da      	str	r2, [r3, #44]	; 0x2c
 8010258:	f44f 7300 	mov.w	r3, #512	; 0x200
 801025c:	2202      	movs	r2, #2
 801025e:	2101      	movs	r1, #1
 8010260:	6878      	ldr	r0, [r7, #4]
 8010262:	f005 f898 	bl	8015396 <USBD_LL_OpenEP>
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	2201      	movs	r2, #1
 801026a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 801026e:	e012      	b.n	8010296 <USBD_CDC_Init+0x6a>
 8010270:	2340      	movs	r3, #64	; 0x40
 8010272:	2202      	movs	r2, #2
 8010274:	2181      	movs	r1, #129	; 0x81
 8010276:	6878      	ldr	r0, [r7, #4]
 8010278:	f005 f88d 	bl	8015396 <USBD_LL_OpenEP>
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	2201      	movs	r2, #1
 8010280:	62da      	str	r2, [r3, #44]	; 0x2c
 8010282:	2340      	movs	r3, #64	; 0x40
 8010284:	2202      	movs	r2, #2
 8010286:	2101      	movs	r1, #1
 8010288:	6878      	ldr	r0, [r7, #4]
 801028a:	f005 f884 	bl	8015396 <USBD_LL_OpenEP>
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	2201      	movs	r2, #1
 8010292:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8010296:	2308      	movs	r3, #8
 8010298:	2203      	movs	r2, #3
 801029a:	2182      	movs	r1, #130	; 0x82
 801029c:	6878      	ldr	r0, [r7, #4]
 801029e:	f005 f87a 	bl	8015396 <USBD_LL_OpenEP>
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	2201      	movs	r2, #1
 80102a6:	641a      	str	r2, [r3, #64]	; 0x40
 80102a8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80102ac:	f005 f9f0 	bl	8015690 <malloc>
 80102b0:	4603      	mov	r3, r0
 80102b2:	461a      	mov	r2, r3
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d102      	bne.n	80102ca <USBD_CDC_Init+0x9e>
 80102c4:	2301      	movs	r3, #1
 80102c6:	73fb      	strb	r3, [r7, #15]
 80102c8:	e026      	b.n	8010318 <USBD_CDC_Init+0xec>
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80102d0:	60bb      	str	r3, [r7, #8]
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	4798      	blx	r3
 80102dc:	68bb      	ldr	r3, [r7, #8]
 80102de:	2200      	movs	r2, #0
 80102e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80102e4:	68bb      	ldr	r3, [r7, #8]
 80102e6:	2200      	movs	r2, #0
 80102e8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	7c1b      	ldrb	r3, [r3, #16]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d109      	bne.n	8010308 <USBD_CDC_Init+0xdc>
 80102f4:	68bb      	ldr	r3, [r7, #8]
 80102f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80102fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80102fe:	2101      	movs	r1, #1
 8010300:	6878      	ldr	r0, [r7, #4]
 8010302:	f005 f939 	bl	8015578 <USBD_LL_PrepareReceive>
 8010306:	e007      	b.n	8010318 <USBD_CDC_Init+0xec>
 8010308:	68bb      	ldr	r3, [r7, #8]
 801030a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801030e:	2340      	movs	r3, #64	; 0x40
 8010310:	2101      	movs	r1, #1
 8010312:	6878      	ldr	r0, [r7, #4]
 8010314:	f005 f930 	bl	8015578 <USBD_LL_PrepareReceive>
 8010318:	7bfb      	ldrb	r3, [r7, #15]
 801031a:	4618      	mov	r0, r3
 801031c:	3710      	adds	r7, #16
 801031e:	46bd      	mov	sp, r7
 8010320:	bd80      	pop	{r7, pc}

08010322 <USBD_CDC_DeInit>:
 8010322:	b580      	push	{r7, lr}
 8010324:	b084      	sub	sp, #16
 8010326:	af00      	add	r7, sp, #0
 8010328:	6078      	str	r0, [r7, #4]
 801032a:	460b      	mov	r3, r1
 801032c:	70fb      	strb	r3, [r7, #3]
 801032e:	2300      	movs	r3, #0
 8010330:	73fb      	strb	r3, [r7, #15]
 8010332:	2181      	movs	r1, #129	; 0x81
 8010334:	6878      	ldr	r0, [r7, #4]
 8010336:	f005 f854 	bl	80153e2 <USBD_LL_CloseEP>
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	2200      	movs	r2, #0
 801033e:	62da      	str	r2, [r3, #44]	; 0x2c
 8010340:	2101      	movs	r1, #1
 8010342:	6878      	ldr	r0, [r7, #4]
 8010344:	f005 f84d 	bl	80153e2 <USBD_LL_CloseEP>
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	2200      	movs	r2, #0
 801034c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8010350:	2182      	movs	r1, #130	; 0x82
 8010352:	6878      	ldr	r0, [r7, #4]
 8010354:	f005 f845 	bl	80153e2 <USBD_LL_CloseEP>
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	2200      	movs	r2, #0
 801035c:	641a      	str	r2, [r3, #64]	; 0x40
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010364:	2b00      	cmp	r3, #0
 8010366:	d00e      	beq.n	8010386 <USBD_CDC_DeInit+0x64>
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801036e:	685b      	ldr	r3, [r3, #4]
 8010370:	4798      	blx	r3
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010378:	4618      	mov	r0, r3
 801037a:	f005 f991 	bl	80156a0 <free>
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	2200      	movs	r2, #0
 8010382:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
 8010386:	7bfb      	ldrb	r3, [r7, #15]
 8010388:	4618      	mov	r0, r3
 801038a:	3710      	adds	r7, #16
 801038c:	46bd      	mov	sp, r7
 801038e:	bd80      	pop	{r7, pc}

08010390 <USBD_CDC_Setup>:
 8010390:	b580      	push	{r7, lr}
 8010392:	b086      	sub	sp, #24
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]
 8010398:	6039      	str	r1, [r7, #0]
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80103a0:	613b      	str	r3, [r7, #16]
 80103a2:	2300      	movs	r3, #0
 80103a4:	73fb      	strb	r3, [r7, #15]
 80103a6:	2300      	movs	r3, #0
 80103a8:	81bb      	strh	r3, [r7, #12]
 80103aa:	2300      	movs	r3, #0
 80103ac:	75fb      	strb	r3, [r7, #23]
 80103ae:	683b      	ldr	r3, [r7, #0]
 80103b0:	781b      	ldrb	r3, [r3, #0]
 80103b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d039      	beq.n	801042e <USBD_CDC_Setup+0x9e>
 80103ba:	2b20      	cmp	r3, #32
 80103bc:	d17c      	bne.n	80104b8 <USBD_CDC_Setup+0x128>
 80103be:	683b      	ldr	r3, [r7, #0]
 80103c0:	88db      	ldrh	r3, [r3, #6]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d029      	beq.n	801041a <USBD_CDC_Setup+0x8a>
 80103c6:	683b      	ldr	r3, [r7, #0]
 80103c8:	781b      	ldrb	r3, [r3, #0]
 80103ca:	b25b      	sxtb	r3, r3
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	da11      	bge.n	80103f4 <USBD_CDC_Setup+0x64>
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80103d6:	689b      	ldr	r3, [r3, #8]
 80103d8:	683a      	ldr	r2, [r7, #0]
 80103da:	7850      	ldrb	r0, [r2, #1]
 80103dc:	6939      	ldr	r1, [r7, #16]
 80103de:	683a      	ldr	r2, [r7, #0]
 80103e0:	88d2      	ldrh	r2, [r2, #6]
 80103e2:	4798      	blx	r3
 80103e4:	6939      	ldr	r1, [r7, #16]
 80103e6:	683b      	ldr	r3, [r7, #0]
 80103e8:	88db      	ldrh	r3, [r3, #6]
 80103ea:	461a      	mov	r2, r3
 80103ec:	6878      	ldr	r0, [r7, #4]
 80103ee:	f001 f9c9 	bl	8011784 <USBD_CtlSendData>
 80103f2:	e068      	b.n	80104c6 <USBD_CDC_Setup+0x136>
 80103f4:	683b      	ldr	r3, [r7, #0]
 80103f6:	785a      	ldrb	r2, [r3, #1]
 80103f8:	693b      	ldr	r3, [r7, #16]
 80103fa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 80103fe:	683b      	ldr	r3, [r7, #0]
 8010400:	88db      	ldrh	r3, [r3, #6]
 8010402:	b2da      	uxtb	r2, r3
 8010404:	693b      	ldr	r3, [r7, #16]
 8010406:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
 801040a:	6939      	ldr	r1, [r7, #16]
 801040c:	683b      	ldr	r3, [r7, #0]
 801040e:	88db      	ldrh	r3, [r3, #6]
 8010410:	461a      	mov	r2, r3
 8010412:	6878      	ldr	r0, [r7, #4]
 8010414:	f001 f9e4 	bl	80117e0 <USBD_CtlPrepareRx>
 8010418:	e055      	b.n	80104c6 <USBD_CDC_Setup+0x136>
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010420:	689b      	ldr	r3, [r3, #8]
 8010422:	683a      	ldr	r2, [r7, #0]
 8010424:	7850      	ldrb	r0, [r2, #1]
 8010426:	2200      	movs	r2, #0
 8010428:	6839      	ldr	r1, [r7, #0]
 801042a:	4798      	blx	r3
 801042c:	e04b      	b.n	80104c6 <USBD_CDC_Setup+0x136>
 801042e:	683b      	ldr	r3, [r7, #0]
 8010430:	785b      	ldrb	r3, [r3, #1]
 8010432:	2b0a      	cmp	r3, #10
 8010434:	d017      	beq.n	8010466 <USBD_CDC_Setup+0xd6>
 8010436:	2b0b      	cmp	r3, #11
 8010438:	d029      	beq.n	801048e <USBD_CDC_Setup+0xfe>
 801043a:	2b00      	cmp	r3, #0
 801043c:	d133      	bne.n	80104a6 <USBD_CDC_Setup+0x116>
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010444:	2b03      	cmp	r3, #3
 8010446:	d107      	bne.n	8010458 <USBD_CDC_Setup+0xc8>
 8010448:	f107 030c 	add.w	r3, r7, #12
 801044c:	2202      	movs	r2, #2
 801044e:	4619      	mov	r1, r3
 8010450:	6878      	ldr	r0, [r7, #4]
 8010452:	f001 f997 	bl	8011784 <USBD_CtlSendData>
 8010456:	e02e      	b.n	80104b6 <USBD_CDC_Setup+0x126>
 8010458:	6839      	ldr	r1, [r7, #0]
 801045a:	6878      	ldr	r0, [r7, #4]
 801045c:	f001 f927 	bl	80116ae <USBD_CtlError>
 8010460:	2302      	movs	r3, #2
 8010462:	75fb      	strb	r3, [r7, #23]
 8010464:	e027      	b.n	80104b6 <USBD_CDC_Setup+0x126>
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 801046c:	2b03      	cmp	r3, #3
 801046e:	d107      	bne.n	8010480 <USBD_CDC_Setup+0xf0>
 8010470:	f107 030f 	add.w	r3, r7, #15
 8010474:	2201      	movs	r2, #1
 8010476:	4619      	mov	r1, r3
 8010478:	6878      	ldr	r0, [r7, #4]
 801047a:	f001 f983 	bl	8011784 <USBD_CtlSendData>
 801047e:	e01a      	b.n	80104b6 <USBD_CDC_Setup+0x126>
 8010480:	6839      	ldr	r1, [r7, #0]
 8010482:	6878      	ldr	r0, [r7, #4]
 8010484:	f001 f913 	bl	80116ae <USBD_CtlError>
 8010488:	2302      	movs	r3, #2
 801048a:	75fb      	strb	r3, [r7, #23]
 801048c:	e013      	b.n	80104b6 <USBD_CDC_Setup+0x126>
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010494:	2b03      	cmp	r3, #3
 8010496:	d00d      	beq.n	80104b4 <USBD_CDC_Setup+0x124>
 8010498:	6839      	ldr	r1, [r7, #0]
 801049a:	6878      	ldr	r0, [r7, #4]
 801049c:	f001 f907 	bl	80116ae <USBD_CtlError>
 80104a0:	2302      	movs	r3, #2
 80104a2:	75fb      	strb	r3, [r7, #23]
 80104a4:	e006      	b.n	80104b4 <USBD_CDC_Setup+0x124>
 80104a6:	6839      	ldr	r1, [r7, #0]
 80104a8:	6878      	ldr	r0, [r7, #4]
 80104aa:	f001 f900 	bl	80116ae <USBD_CtlError>
 80104ae:	2302      	movs	r3, #2
 80104b0:	75fb      	strb	r3, [r7, #23]
 80104b2:	e000      	b.n	80104b6 <USBD_CDC_Setup+0x126>
 80104b4:	bf00      	nop
 80104b6:	e006      	b.n	80104c6 <USBD_CDC_Setup+0x136>
 80104b8:	6839      	ldr	r1, [r7, #0]
 80104ba:	6878      	ldr	r0, [r7, #4]
 80104bc:	f001 f8f7 	bl	80116ae <USBD_CtlError>
 80104c0:	2302      	movs	r3, #2
 80104c2:	75fb      	strb	r3, [r7, #23]
 80104c4:	bf00      	nop
 80104c6:	7dfb      	ldrb	r3, [r7, #23]
 80104c8:	4618      	mov	r0, r3
 80104ca:	3718      	adds	r7, #24
 80104cc:	46bd      	mov	sp, r7
 80104ce:	bd80      	pop	{r7, pc}

080104d0 <USBD_CDC_DataIn>:
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b084      	sub	sp, #16
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	6078      	str	r0, [r7, #4]
 80104d8:	460b      	mov	r3, r1
 80104da:	70fb      	strb	r3, [r7, #3]
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80104e2:	60fb      	str	r3, [r7, #12]
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80104ea:	60bb      	str	r3, [r7, #8]
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d03a      	beq.n	801056c <USBD_CDC_DataIn+0x9c>
 80104f6:	78fa      	ldrb	r2, [r7, #3]
 80104f8:	6879      	ldr	r1, [r7, #4]
 80104fa:	4613      	mov	r3, r2
 80104fc:	009b      	lsls	r3, r3, #2
 80104fe:	4413      	add	r3, r2
 8010500:	009b      	lsls	r3, r3, #2
 8010502:	440b      	add	r3, r1
 8010504:	331c      	adds	r3, #28
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	2b00      	cmp	r3, #0
 801050a:	d029      	beq.n	8010560 <USBD_CDC_DataIn+0x90>
 801050c:	78fa      	ldrb	r2, [r7, #3]
 801050e:	6879      	ldr	r1, [r7, #4]
 8010510:	4613      	mov	r3, r2
 8010512:	009b      	lsls	r3, r3, #2
 8010514:	4413      	add	r3, r2
 8010516:	009b      	lsls	r3, r3, #2
 8010518:	440b      	add	r3, r1
 801051a:	331c      	adds	r3, #28
 801051c:	681a      	ldr	r2, [r3, #0]
 801051e:	78f9      	ldrb	r1, [r7, #3]
 8010520:	68b8      	ldr	r0, [r7, #8]
 8010522:	460b      	mov	r3, r1
 8010524:	00db      	lsls	r3, r3, #3
 8010526:	1a5b      	subs	r3, r3, r1
 8010528:	009b      	lsls	r3, r3, #2
 801052a:	4403      	add	r3, r0
 801052c:	3344      	adds	r3, #68	; 0x44
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	fbb2 f1f3 	udiv	r1, r2, r3
 8010534:	fb03 f301 	mul.w	r3, r3, r1
 8010538:	1ad3      	subs	r3, r2, r3
 801053a:	2b00      	cmp	r3, #0
 801053c:	d110      	bne.n	8010560 <USBD_CDC_DataIn+0x90>
 801053e:	78fa      	ldrb	r2, [r7, #3]
 8010540:	6879      	ldr	r1, [r7, #4]
 8010542:	4613      	mov	r3, r2
 8010544:	009b      	lsls	r3, r3, #2
 8010546:	4413      	add	r3, r2
 8010548:	009b      	lsls	r3, r3, #2
 801054a:	440b      	add	r3, r1
 801054c:	331c      	adds	r3, #28
 801054e:	2200      	movs	r2, #0
 8010550:	601a      	str	r2, [r3, #0]
 8010552:	78f9      	ldrb	r1, [r7, #3]
 8010554:	2300      	movs	r3, #0
 8010556:	2200      	movs	r2, #0
 8010558:	6878      	ldr	r0, [r7, #4]
 801055a:	f004 ffea 	bl	8015532 <USBD_LL_Transmit>
 801055e:	e003      	b.n	8010568 <USBD_CDC_DataIn+0x98>
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	2200      	movs	r2, #0
 8010564:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8010568:	2300      	movs	r3, #0
 801056a:	e000      	b.n	801056e <USBD_CDC_DataIn+0x9e>
 801056c:	2302      	movs	r3, #2
 801056e:	4618      	mov	r0, r3
 8010570:	3710      	adds	r7, #16
 8010572:	46bd      	mov	sp, r7
 8010574:	bd80      	pop	{r7, pc}

08010576 <USBD_CDC_DataOut>:
 8010576:	b580      	push	{r7, lr}
 8010578:	b084      	sub	sp, #16
 801057a:	af00      	add	r7, sp, #0
 801057c:	6078      	str	r0, [r7, #4]
 801057e:	460b      	mov	r3, r1
 8010580:	70fb      	strb	r3, [r7, #3]
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010588:	60fb      	str	r3, [r7, #12]
 801058a:	78fb      	ldrb	r3, [r7, #3]
 801058c:	4619      	mov	r1, r3
 801058e:	6878      	ldr	r0, [r7, #4]
 8010590:	f005 f815 	bl	80155be <USBD_LL_GetRxDataSize>
 8010594:	4602      	mov	r2, r0
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d00d      	beq.n	80105c2 <USBD_CDC_DataOut+0x4c>
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80105ac:	68db      	ldr	r3, [r3, #12]
 80105ae:	68fa      	ldr	r2, [r7, #12]
 80105b0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80105b4:	68fa      	ldr	r2, [r7, #12]
 80105b6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80105ba:	4611      	mov	r1, r2
 80105bc:	4798      	blx	r3
 80105be:	2300      	movs	r3, #0
 80105c0:	e000      	b.n	80105c4 <USBD_CDC_DataOut+0x4e>
 80105c2:	2302      	movs	r3, #2
 80105c4:	4618      	mov	r0, r3
 80105c6:	3710      	adds	r7, #16
 80105c8:	46bd      	mov	sp, r7
 80105ca:	bd80      	pop	{r7, pc}

080105cc <USBD_CDC_EP0_RxReady>:
 80105cc:	b580      	push	{r7, lr}
 80105ce:	b084      	sub	sp, #16
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80105da:	60fb      	str	r3, [r7, #12]
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d015      	beq.n	8010612 <USBD_CDC_EP0_RxReady+0x46>
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80105ec:	2bff      	cmp	r3, #255	; 0xff
 80105ee:	d010      	beq.n	8010612 <USBD_CDC_EP0_RxReady+0x46>
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80105f6:	689b      	ldr	r3, [r3, #8]
 80105f8:	68fa      	ldr	r2, [r7, #12]
 80105fa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
 80105fe:	68f9      	ldr	r1, [r7, #12]
 8010600:	68fa      	ldr	r2, [r7, #12]
 8010602:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
 8010606:	b292      	uxth	r2, r2
 8010608:	4798      	blx	r3
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	22ff      	movs	r2, #255	; 0xff
 801060e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 8010612:	2300      	movs	r3, #0
 8010614:	4618      	mov	r0, r3
 8010616:	3710      	adds	r7, #16
 8010618:	46bd      	mov	sp, r7
 801061a:	bd80      	pop	{r7, pc}

0801061c <USBD_CDC_GetFSCfgDesc>:
 801061c:	b480      	push	{r7}
 801061e:	b083      	sub	sp, #12
 8010620:	af00      	add	r7, sp, #0
 8010622:	6078      	str	r0, [r7, #4]
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	2243      	movs	r2, #67	; 0x43
 8010628:	801a      	strh	r2, [r3, #0]
 801062a:	4b03      	ldr	r3, [pc, #12]	; (8010638 <USBD_CDC_GetFSCfgDesc+0x1c>)
 801062c:	4618      	mov	r0, r3
 801062e:	370c      	adds	r7, #12
 8010630:	46bd      	mov	sp, r7
 8010632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010636:	4770      	bx	lr
 8010638:	20000d20 	.word	0x20000d20

0801063c <USBD_CDC_GetHSCfgDesc>:
 801063c:	b480      	push	{r7}
 801063e:	b083      	sub	sp, #12
 8010640:	af00      	add	r7, sp, #0
 8010642:	6078      	str	r0, [r7, #4]
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	2243      	movs	r2, #67	; 0x43
 8010648:	801a      	strh	r2, [r3, #0]
 801064a:	4b03      	ldr	r3, [pc, #12]	; (8010658 <USBD_CDC_GetHSCfgDesc+0x1c>)
 801064c:	4618      	mov	r0, r3
 801064e:	370c      	adds	r7, #12
 8010650:	46bd      	mov	sp, r7
 8010652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010656:	4770      	bx	lr
 8010658:	20000cdc 	.word	0x20000cdc

0801065c <USBD_CDC_GetOtherSpeedCfgDesc>:
 801065c:	b480      	push	{r7}
 801065e:	b083      	sub	sp, #12
 8010660:	af00      	add	r7, sp, #0
 8010662:	6078      	str	r0, [r7, #4]
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	2243      	movs	r2, #67	; 0x43
 8010668:	801a      	strh	r2, [r3, #0]
 801066a:	4b03      	ldr	r3, [pc, #12]	; (8010678 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
 801066c:	4618      	mov	r0, r3
 801066e:	370c      	adds	r7, #12
 8010670:	46bd      	mov	sp, r7
 8010672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010676:	4770      	bx	lr
 8010678:	20000d64 	.word	0x20000d64

0801067c <USBD_CDC_GetDeviceQualifierDescriptor>:
 801067c:	b480      	push	{r7}
 801067e:	b083      	sub	sp, #12
 8010680:	af00      	add	r7, sp, #0
 8010682:	6078      	str	r0, [r7, #4]
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	220a      	movs	r2, #10
 8010688:	801a      	strh	r2, [r3, #0]
 801068a:	4b03      	ldr	r3, [pc, #12]	; (8010698 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
 801068c:	4618      	mov	r0, r3
 801068e:	370c      	adds	r7, #12
 8010690:	46bd      	mov	sp, r7
 8010692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010696:	4770      	bx	lr
 8010698:	20000c98 	.word	0x20000c98

0801069c <USBD_CDC_RegisterInterface>:
 801069c:	b480      	push	{r7}
 801069e:	b085      	sub	sp, #20
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	6078      	str	r0, [r7, #4]
 80106a4:	6039      	str	r1, [r7, #0]
 80106a6:	2302      	movs	r3, #2
 80106a8:	73fb      	strb	r3, [r7, #15]
 80106aa:	683b      	ldr	r3, [r7, #0]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d005      	beq.n	80106bc <USBD_CDC_RegisterInterface+0x20>
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	683a      	ldr	r2, [r7, #0]
 80106b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 80106b8:	2300      	movs	r3, #0
 80106ba:	73fb      	strb	r3, [r7, #15]
 80106bc:	7bfb      	ldrb	r3, [r7, #15]
 80106be:	4618      	mov	r0, r3
 80106c0:	3714      	adds	r7, #20
 80106c2:	46bd      	mov	sp, r7
 80106c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c8:	4770      	bx	lr

080106ca <USBD_CDC_SetTxBuffer>:
 80106ca:	b480      	push	{r7}
 80106cc:	b087      	sub	sp, #28
 80106ce:	af00      	add	r7, sp, #0
 80106d0:	60f8      	str	r0, [r7, #12]
 80106d2:	60b9      	str	r1, [r7, #8]
 80106d4:	4613      	mov	r3, r2
 80106d6:	80fb      	strh	r3, [r7, #6]
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80106de:	617b      	str	r3, [r7, #20]
 80106e0:	697b      	ldr	r3, [r7, #20]
 80106e2:	68ba      	ldr	r2, [r7, #8]
 80106e4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 80106e8:	88fa      	ldrh	r2, [r7, #6]
 80106ea:	697b      	ldr	r3, [r7, #20]
 80106ec:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 80106f0:	2300      	movs	r3, #0
 80106f2:	4618      	mov	r0, r3
 80106f4:	371c      	adds	r7, #28
 80106f6:	46bd      	mov	sp, r7
 80106f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fc:	4770      	bx	lr

080106fe <USBD_CDC_SetRxBuffer>:
 80106fe:	b480      	push	{r7}
 8010700:	b085      	sub	sp, #20
 8010702:	af00      	add	r7, sp, #0
 8010704:	6078      	str	r0, [r7, #4]
 8010706:	6039      	str	r1, [r7, #0]
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 801070e:	60fb      	str	r3, [r7, #12]
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	683a      	ldr	r2, [r7, #0]
 8010714:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8010718:	2300      	movs	r3, #0
 801071a:	4618      	mov	r0, r3
 801071c:	3714      	adds	r7, #20
 801071e:	46bd      	mov	sp, r7
 8010720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010724:	4770      	bx	lr

08010726 <USBD_CDC_TransmitPacket>:
 8010726:	b580      	push	{r7, lr}
 8010728:	b084      	sub	sp, #16
 801072a:	af00      	add	r7, sp, #0
 801072c:	6078      	str	r0, [r7, #4]
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010734:	60fb      	str	r3, [r7, #12]
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 801073c:	2b00      	cmp	r3, #0
 801073e:	d01c      	beq.n	801077a <USBD_CDC_TransmitPacket+0x54>
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010746:	2b00      	cmp	r3, #0
 8010748:	d115      	bne.n	8010776 <USBD_CDC_TransmitPacket+0x50>
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	2201      	movs	r2, #1
 801074e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	631a      	str	r2, [r3, #48]	; 0x30
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010768:	b29b      	uxth	r3, r3
 801076a:	2181      	movs	r1, #129	; 0x81
 801076c:	6878      	ldr	r0, [r7, #4]
 801076e:	f004 fee0 	bl	8015532 <USBD_LL_Transmit>
 8010772:	2300      	movs	r3, #0
 8010774:	e002      	b.n	801077c <USBD_CDC_TransmitPacket+0x56>
 8010776:	2301      	movs	r3, #1
 8010778:	e000      	b.n	801077c <USBD_CDC_TransmitPacket+0x56>
 801077a:	2302      	movs	r3, #2
 801077c:	4618      	mov	r0, r3
 801077e:	3710      	adds	r7, #16
 8010780:	46bd      	mov	sp, r7
 8010782:	bd80      	pop	{r7, pc}

08010784 <USBD_CDC_ReceivePacket>:
 8010784:	b580      	push	{r7, lr}
 8010786:	b084      	sub	sp, #16
 8010788:	af00      	add	r7, sp, #0
 801078a:	6078      	str	r0, [r7, #4]
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010792:	60fb      	str	r3, [r7, #12]
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 801079a:	2b00      	cmp	r3, #0
 801079c:	d017      	beq.n	80107ce <USBD_CDC_ReceivePacket+0x4a>
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	7c1b      	ldrb	r3, [r3, #16]
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d109      	bne.n	80107ba <USBD_CDC_ReceivePacket+0x36>
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80107ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80107b0:	2101      	movs	r1, #1
 80107b2:	6878      	ldr	r0, [r7, #4]
 80107b4:	f004 fee0 	bl	8015578 <USBD_LL_PrepareReceive>
 80107b8:	e007      	b.n	80107ca <USBD_CDC_ReceivePacket+0x46>
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80107c0:	2340      	movs	r3, #64	; 0x40
 80107c2:	2101      	movs	r1, #1
 80107c4:	6878      	ldr	r0, [r7, #4]
 80107c6:	f004 fed7 	bl	8015578 <USBD_LL_PrepareReceive>
 80107ca:	2300      	movs	r3, #0
 80107cc:	e000      	b.n	80107d0 <USBD_CDC_ReceivePacket+0x4c>
 80107ce:	2302      	movs	r3, #2
 80107d0:	4618      	mov	r0, r3
 80107d2:	3710      	adds	r7, #16
 80107d4:	46bd      	mov	sp, r7
 80107d6:	bd80      	pop	{r7, pc}

080107d8 <USBD_Init>:
 80107d8:	b580      	push	{r7, lr}
 80107da:	b084      	sub	sp, #16
 80107dc:	af00      	add	r7, sp, #0
 80107de:	60f8      	str	r0, [r7, #12]
 80107e0:	60b9      	str	r1, [r7, #8]
 80107e2:	4613      	mov	r3, r2
 80107e4:	71fb      	strb	r3, [r7, #7]
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d101      	bne.n	80107f0 <USBD_Init+0x18>
 80107ec:	2302      	movs	r3, #2
 80107ee:	e01a      	b.n	8010826 <USBD_Init+0x4e>
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d003      	beq.n	8010802 <USBD_Init+0x2a>
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	2200      	movs	r2, #0
 80107fe:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
 8010802:	68bb      	ldr	r3, [r7, #8]
 8010804:	2b00      	cmp	r3, #0
 8010806:	d003      	beq.n	8010810 <USBD_Init+0x38>
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	68ba      	ldr	r2, [r7, #8]
 801080c:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	2201      	movs	r2, #1
 8010814:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	79fa      	ldrb	r2, [r7, #7]
 801081c:	701a      	strb	r2, [r3, #0]
 801081e:	68f8      	ldr	r0, [r7, #12]
 8010820:	f004 fd52 	bl	80152c8 <USBD_LL_Init>
 8010824:	2300      	movs	r3, #0
 8010826:	4618      	mov	r0, r3
 8010828:	3710      	adds	r7, #16
 801082a:	46bd      	mov	sp, r7
 801082c:	bd80      	pop	{r7, pc}

0801082e <USBD_RegisterClass>:
 801082e:	b480      	push	{r7}
 8010830:	b085      	sub	sp, #20
 8010832:	af00      	add	r7, sp, #0
 8010834:	6078      	str	r0, [r7, #4]
 8010836:	6039      	str	r1, [r7, #0]
 8010838:	2300      	movs	r3, #0
 801083a:	73fb      	strb	r3, [r7, #15]
 801083c:	683b      	ldr	r3, [r7, #0]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d006      	beq.n	8010850 <USBD_RegisterClass+0x22>
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	683a      	ldr	r2, [r7, #0]
 8010846:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
 801084a:	2300      	movs	r3, #0
 801084c:	73fb      	strb	r3, [r7, #15]
 801084e:	e001      	b.n	8010854 <USBD_RegisterClass+0x26>
 8010850:	2302      	movs	r3, #2
 8010852:	73fb      	strb	r3, [r7, #15]
 8010854:	7bfb      	ldrb	r3, [r7, #15]
 8010856:	4618      	mov	r0, r3
 8010858:	3714      	adds	r7, #20
 801085a:	46bd      	mov	sp, r7
 801085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010860:	4770      	bx	lr

08010862 <USBD_Start>:
 8010862:	b580      	push	{r7, lr}
 8010864:	b082      	sub	sp, #8
 8010866:	af00      	add	r7, sp, #0
 8010868:	6078      	str	r0, [r7, #4]
 801086a:	6878      	ldr	r0, [r7, #4]
 801086c:	f004 fd78 	bl	8015360 <USBD_LL_Start>
 8010870:	2300      	movs	r3, #0
 8010872:	4618      	mov	r0, r3
 8010874:	3708      	adds	r7, #8
 8010876:	46bd      	mov	sp, r7
 8010878:	bd80      	pop	{r7, pc}

0801087a <USBD_RunTestMode>:
 801087a:	b480      	push	{r7}
 801087c:	b083      	sub	sp, #12
 801087e:	af00      	add	r7, sp, #0
 8010880:	6078      	str	r0, [r7, #4]
 8010882:	2300      	movs	r3, #0
 8010884:	4618      	mov	r0, r3
 8010886:	370c      	adds	r7, #12
 8010888:	46bd      	mov	sp, r7
 801088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801088e:	4770      	bx	lr

08010890 <USBD_SetClassConfig>:
 8010890:	b580      	push	{r7, lr}
 8010892:	b084      	sub	sp, #16
 8010894:	af00      	add	r7, sp, #0
 8010896:	6078      	str	r0, [r7, #4]
 8010898:	460b      	mov	r3, r1
 801089a:	70fb      	strb	r3, [r7, #3]
 801089c:	2302      	movs	r3, #2
 801089e:	73fb      	strb	r3, [r7, #15]
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d00c      	beq.n	80108c4 <USBD_SetClassConfig+0x34>
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	78fa      	ldrb	r2, [r7, #3]
 80108b4:	4611      	mov	r1, r2
 80108b6:	6878      	ldr	r0, [r7, #4]
 80108b8:	4798      	blx	r3
 80108ba:	4603      	mov	r3, r0
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d101      	bne.n	80108c4 <USBD_SetClassConfig+0x34>
 80108c0:	2300      	movs	r3, #0
 80108c2:	73fb      	strb	r3, [r7, #15]
 80108c4:	7bfb      	ldrb	r3, [r7, #15]
 80108c6:	4618      	mov	r0, r3
 80108c8:	3710      	adds	r7, #16
 80108ca:	46bd      	mov	sp, r7
 80108cc:	bd80      	pop	{r7, pc}

080108ce <USBD_ClrClassConfig>:
 80108ce:	b580      	push	{r7, lr}
 80108d0:	b082      	sub	sp, #8
 80108d2:	af00      	add	r7, sp, #0
 80108d4:	6078      	str	r0, [r7, #4]
 80108d6:	460b      	mov	r3, r1
 80108d8:	70fb      	strb	r3, [r7, #3]
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80108e0:	685b      	ldr	r3, [r3, #4]
 80108e2:	78fa      	ldrb	r2, [r7, #3]
 80108e4:	4611      	mov	r1, r2
 80108e6:	6878      	ldr	r0, [r7, #4]
 80108e8:	4798      	blx	r3
 80108ea:	2300      	movs	r3, #0
 80108ec:	4618      	mov	r0, r3
 80108ee:	3708      	adds	r7, #8
 80108f0:	46bd      	mov	sp, r7
 80108f2:	bd80      	pop	{r7, pc}

080108f4 <USBD_LL_SetupStage>:
 80108f4:	b580      	push	{r7, lr}
 80108f6:	b082      	sub	sp, #8
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	6078      	str	r0, [r7, #4]
 80108fc:	6039      	str	r1, [r7, #0]
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8010904:	6839      	ldr	r1, [r7, #0]
 8010906:	4618      	mov	r0, r3
 8010908:	f000 fe94 	bl	8011634 <USBD_ParseSetupRequest>
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	2201      	movs	r2, #1
 8010910:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 801091a:	461a      	mov	r2, r3
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8010928:	f003 031f 	and.w	r3, r3, #31
 801092c:	2b01      	cmp	r3, #1
 801092e:	d00c      	beq.n	801094a <USBD_LL_SetupStage+0x56>
 8010930:	2b01      	cmp	r3, #1
 8010932:	d302      	bcc.n	801093a <USBD_LL_SetupStage+0x46>
 8010934:	2b02      	cmp	r3, #2
 8010936:	d010      	beq.n	801095a <USBD_LL_SetupStage+0x66>
 8010938:	e017      	b.n	801096a <USBD_LL_SetupStage+0x76>
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8010940:	4619      	mov	r1, r3
 8010942:	6878      	ldr	r0, [r7, #4]
 8010944:	f000 fa04 	bl	8010d50 <USBD_StdDevReq>
 8010948:	e01a      	b.n	8010980 <USBD_LL_SetupStage+0x8c>
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8010950:	4619      	mov	r1, r3
 8010952:	6878      	ldr	r0, [r7, #4]
 8010954:	f000 fa66 	bl	8010e24 <USBD_StdItfReq>
 8010958:	e012      	b.n	8010980 <USBD_LL_SetupStage+0x8c>
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8010960:	4619      	mov	r1, r3
 8010962:	6878      	ldr	r0, [r7, #4]
 8010964:	f000 faa4 	bl	8010eb0 <USBD_StdEPReq>
 8010968:	e00a      	b.n	8010980 <USBD_LL_SetupStage+0x8c>
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8010970:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010974:	b2db      	uxtb	r3, r3
 8010976:	4619      	mov	r1, r3
 8010978:	6878      	ldr	r0, [r7, #4]
 801097a:	f004 fd51 	bl	8015420 <USBD_LL_StallEP>
 801097e:	bf00      	nop
 8010980:	2300      	movs	r3, #0
 8010982:	4618      	mov	r0, r3
 8010984:	3708      	adds	r7, #8
 8010986:	46bd      	mov	sp, r7
 8010988:	bd80      	pop	{r7, pc}

0801098a <USBD_LL_DataOutStage>:
 801098a:	b580      	push	{r7, lr}
 801098c:	b086      	sub	sp, #24
 801098e:	af00      	add	r7, sp, #0
 8010990:	60f8      	str	r0, [r7, #12]
 8010992:	460b      	mov	r3, r1
 8010994:	607a      	str	r2, [r7, #4]
 8010996:	72fb      	strb	r3, [r7, #11]
 8010998:	7afb      	ldrb	r3, [r7, #11]
 801099a:	2b00      	cmp	r3, #0
 801099c:	d14b      	bne.n	8010a36 <USBD_LL_DataOutStage+0xac>
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80109a4:	617b      	str	r3, [r7, #20]
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80109ac:	2b03      	cmp	r3, #3
 80109ae:	d134      	bne.n	8010a1a <USBD_LL_DataOutStage+0x90>
 80109b0:	697b      	ldr	r3, [r7, #20]
 80109b2:	68da      	ldr	r2, [r3, #12]
 80109b4:	697b      	ldr	r3, [r7, #20]
 80109b6:	691b      	ldr	r3, [r3, #16]
 80109b8:	429a      	cmp	r2, r3
 80109ba:	d919      	bls.n	80109f0 <USBD_LL_DataOutStage+0x66>
 80109bc:	697b      	ldr	r3, [r7, #20]
 80109be:	68da      	ldr	r2, [r3, #12]
 80109c0:	697b      	ldr	r3, [r7, #20]
 80109c2:	691b      	ldr	r3, [r3, #16]
 80109c4:	1ad2      	subs	r2, r2, r3
 80109c6:	697b      	ldr	r3, [r7, #20]
 80109c8:	60da      	str	r2, [r3, #12]
 80109ca:	697b      	ldr	r3, [r7, #20]
 80109cc:	68da      	ldr	r2, [r3, #12]
 80109ce:	697b      	ldr	r3, [r7, #20]
 80109d0:	691b      	ldr	r3, [r3, #16]
 80109d2:	429a      	cmp	r2, r3
 80109d4:	d203      	bcs.n	80109de <USBD_LL_DataOutStage+0x54>
 80109d6:	697b      	ldr	r3, [r7, #20]
 80109d8:	68db      	ldr	r3, [r3, #12]
 80109da:	b29b      	uxth	r3, r3
 80109dc:	e002      	b.n	80109e4 <USBD_LL_DataOutStage+0x5a>
 80109de:	697b      	ldr	r3, [r7, #20]
 80109e0:	691b      	ldr	r3, [r3, #16]
 80109e2:	b29b      	uxth	r3, r3
 80109e4:	461a      	mov	r2, r3
 80109e6:	6879      	ldr	r1, [r7, #4]
 80109e8:	68f8      	ldr	r0, [r7, #12]
 80109ea:	f000 ff17 	bl	801181c <USBD_CtlContinueRx>
 80109ee:	e038      	b.n	8010a62 <USBD_LL_DataOutStage+0xd8>
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80109f6:	691b      	ldr	r3, [r3, #16]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d00a      	beq.n	8010a12 <USBD_LL_DataOutStage+0x88>
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010a02:	2b03      	cmp	r3, #3
 8010a04:	d105      	bne.n	8010a12 <USBD_LL_DataOutStage+0x88>
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010a0c:	691b      	ldr	r3, [r3, #16]
 8010a0e:	68f8      	ldr	r0, [r7, #12]
 8010a10:	4798      	blx	r3
 8010a12:	68f8      	ldr	r0, [r7, #12]
 8010a14:	f000 ff14 	bl	8011840 <USBD_CtlSendStatus>
 8010a18:	e023      	b.n	8010a62 <USBD_LL_DataOutStage+0xd8>
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8010a20:	2b05      	cmp	r3, #5
 8010a22:	d11e      	bne.n	8010a62 <USBD_LL_DataOutStage+0xd8>
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	2200      	movs	r2, #0
 8010a28:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
 8010a2c:	2100      	movs	r1, #0
 8010a2e:	68f8      	ldr	r0, [r7, #12]
 8010a30:	f004 fcf6 	bl	8015420 <USBD_LL_StallEP>
 8010a34:	e015      	b.n	8010a62 <USBD_LL_DataOutStage+0xd8>
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010a3c:	699b      	ldr	r3, [r3, #24]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d00d      	beq.n	8010a5e <USBD_LL_DataOutStage+0xd4>
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010a48:	2b03      	cmp	r3, #3
 8010a4a:	d108      	bne.n	8010a5e <USBD_LL_DataOutStage+0xd4>
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010a52:	699b      	ldr	r3, [r3, #24]
 8010a54:	7afa      	ldrb	r2, [r7, #11]
 8010a56:	4611      	mov	r1, r2
 8010a58:	68f8      	ldr	r0, [r7, #12]
 8010a5a:	4798      	blx	r3
 8010a5c:	e001      	b.n	8010a62 <USBD_LL_DataOutStage+0xd8>
 8010a5e:	2302      	movs	r3, #2
 8010a60:	e000      	b.n	8010a64 <USBD_LL_DataOutStage+0xda>
 8010a62:	2300      	movs	r3, #0
 8010a64:	4618      	mov	r0, r3
 8010a66:	3718      	adds	r7, #24
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	bd80      	pop	{r7, pc}

08010a6c <USBD_LL_DataInStage>:
 8010a6c:	b580      	push	{r7, lr}
 8010a6e:	b086      	sub	sp, #24
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	60f8      	str	r0, [r7, #12]
 8010a74:	460b      	mov	r3, r1
 8010a76:	607a      	str	r2, [r7, #4]
 8010a78:	72fb      	strb	r3, [r7, #11]
 8010a7a:	7afb      	ldrb	r3, [r7, #11]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d17f      	bne.n	8010b80 <USBD_LL_DataInStage+0x114>
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	3314      	adds	r3, #20
 8010a84:	617b      	str	r3, [r7, #20]
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8010a8c:	2b02      	cmp	r3, #2
 8010a8e:	d15c      	bne.n	8010b4a <USBD_LL_DataInStage+0xde>
 8010a90:	697b      	ldr	r3, [r7, #20]
 8010a92:	68da      	ldr	r2, [r3, #12]
 8010a94:	697b      	ldr	r3, [r7, #20]
 8010a96:	691b      	ldr	r3, [r3, #16]
 8010a98:	429a      	cmp	r2, r3
 8010a9a:	d915      	bls.n	8010ac8 <USBD_LL_DataInStage+0x5c>
 8010a9c:	697b      	ldr	r3, [r7, #20]
 8010a9e:	68da      	ldr	r2, [r3, #12]
 8010aa0:	697b      	ldr	r3, [r7, #20]
 8010aa2:	691b      	ldr	r3, [r3, #16]
 8010aa4:	1ad2      	subs	r2, r2, r3
 8010aa6:	697b      	ldr	r3, [r7, #20]
 8010aa8:	60da      	str	r2, [r3, #12]
 8010aaa:	697b      	ldr	r3, [r7, #20]
 8010aac:	68db      	ldr	r3, [r3, #12]
 8010aae:	b29b      	uxth	r3, r3
 8010ab0:	461a      	mov	r2, r3
 8010ab2:	6879      	ldr	r1, [r7, #4]
 8010ab4:	68f8      	ldr	r0, [r7, #12]
 8010ab6:	f000 fe81 	bl	80117bc <USBD_CtlContinueSendData>
 8010aba:	2300      	movs	r3, #0
 8010abc:	2200      	movs	r2, #0
 8010abe:	2100      	movs	r1, #0
 8010ac0:	68f8      	ldr	r0, [r7, #12]
 8010ac2:	f004 fd59 	bl	8015578 <USBD_LL_PrepareReceive>
 8010ac6:	e04e      	b.n	8010b66 <USBD_LL_DataInStage+0xfa>
 8010ac8:	697b      	ldr	r3, [r7, #20]
 8010aca:	689b      	ldr	r3, [r3, #8]
 8010acc:	697a      	ldr	r2, [r7, #20]
 8010ace:	6912      	ldr	r2, [r2, #16]
 8010ad0:	fbb3 f1f2 	udiv	r1, r3, r2
 8010ad4:	fb02 f201 	mul.w	r2, r2, r1
 8010ad8:	1a9b      	subs	r3, r3, r2
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d11c      	bne.n	8010b18 <USBD_LL_DataInStage+0xac>
 8010ade:	697b      	ldr	r3, [r7, #20]
 8010ae0:	689a      	ldr	r2, [r3, #8]
 8010ae2:	697b      	ldr	r3, [r7, #20]
 8010ae4:	691b      	ldr	r3, [r3, #16]
 8010ae6:	429a      	cmp	r2, r3
 8010ae8:	d316      	bcc.n	8010b18 <USBD_LL_DataInStage+0xac>
 8010aea:	697b      	ldr	r3, [r7, #20]
 8010aec:	689a      	ldr	r2, [r3, #8]
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8010af4:	429a      	cmp	r2, r3
 8010af6:	d20f      	bcs.n	8010b18 <USBD_LL_DataInStage+0xac>
 8010af8:	2200      	movs	r2, #0
 8010afa:	2100      	movs	r1, #0
 8010afc:	68f8      	ldr	r0, [r7, #12]
 8010afe:	f000 fe5d 	bl	80117bc <USBD_CtlContinueSendData>
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	2200      	movs	r2, #0
 8010b06:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
 8010b0a:	2300      	movs	r3, #0
 8010b0c:	2200      	movs	r2, #0
 8010b0e:	2100      	movs	r1, #0
 8010b10:	68f8      	ldr	r0, [r7, #12]
 8010b12:	f004 fd31 	bl	8015578 <USBD_LL_PrepareReceive>
 8010b16:	e026      	b.n	8010b66 <USBD_LL_DataInStage+0xfa>
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010b1e:	68db      	ldr	r3, [r3, #12]
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d00a      	beq.n	8010b3a <USBD_LL_DataInStage+0xce>
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010b2a:	2b03      	cmp	r3, #3
 8010b2c:	d105      	bne.n	8010b3a <USBD_LL_DataInStage+0xce>
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010b34:	68db      	ldr	r3, [r3, #12]
 8010b36:	68f8      	ldr	r0, [r7, #12]
 8010b38:	4798      	blx	r3
 8010b3a:	2180      	movs	r1, #128	; 0x80
 8010b3c:	68f8      	ldr	r0, [r7, #12]
 8010b3e:	f004 fc6f 	bl	8015420 <USBD_LL_StallEP>
 8010b42:	68f8      	ldr	r0, [r7, #12]
 8010b44:	f000 fe8f 	bl	8011866 <USBD_CtlReceiveStatus>
 8010b48:	e00d      	b.n	8010b66 <USBD_LL_DataInStage+0xfa>
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8010b50:	2b04      	cmp	r3, #4
 8010b52:	d004      	beq.n	8010b5e <USBD_LL_DataInStage+0xf2>
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d103      	bne.n	8010b66 <USBD_LL_DataInStage+0xfa>
 8010b5e:	2180      	movs	r1, #128	; 0x80
 8010b60:	68f8      	ldr	r0, [r7, #12]
 8010b62:	f004 fc5d 	bl	8015420 <USBD_LL_StallEP>
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8010b6c:	2b01      	cmp	r3, #1
 8010b6e:	d11d      	bne.n	8010bac <USBD_LL_DataInStage+0x140>
 8010b70:	68f8      	ldr	r0, [r7, #12]
 8010b72:	f7ff fe82 	bl	801087a <USBD_RunTestMode>
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	2200      	movs	r2, #0
 8010b7a:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8010b7e:	e015      	b.n	8010bac <USBD_LL_DataInStage+0x140>
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010b86:	695b      	ldr	r3, [r3, #20]
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d00d      	beq.n	8010ba8 <USBD_LL_DataInStage+0x13c>
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010b92:	2b03      	cmp	r3, #3
 8010b94:	d108      	bne.n	8010ba8 <USBD_LL_DataInStage+0x13c>
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010b9c:	695b      	ldr	r3, [r3, #20]
 8010b9e:	7afa      	ldrb	r2, [r7, #11]
 8010ba0:	4611      	mov	r1, r2
 8010ba2:	68f8      	ldr	r0, [r7, #12]
 8010ba4:	4798      	blx	r3
 8010ba6:	e001      	b.n	8010bac <USBD_LL_DataInStage+0x140>
 8010ba8:	2302      	movs	r3, #2
 8010baa:	e000      	b.n	8010bae <USBD_LL_DataInStage+0x142>
 8010bac:	2300      	movs	r3, #0
 8010bae:	4618      	mov	r0, r3
 8010bb0:	3718      	adds	r7, #24
 8010bb2:	46bd      	mov	sp, r7
 8010bb4:	bd80      	pop	{r7, pc}

08010bb6 <USBD_LL_Reset>:
 8010bb6:	b580      	push	{r7, lr}
 8010bb8:	b082      	sub	sp, #8
 8010bba:	af00      	add	r7, sp, #0
 8010bbc:	6078      	str	r0, [r7, #4]
 8010bbe:	2340      	movs	r3, #64	; 0x40
 8010bc0:	2200      	movs	r2, #0
 8010bc2:	2100      	movs	r1, #0
 8010bc4:	6878      	ldr	r0, [r7, #4]
 8010bc6:	f004 fbe6 	bl	8015396 <USBD_LL_OpenEP>
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	2201      	movs	r2, #1
 8010bce:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	2240      	movs	r2, #64	; 0x40
 8010bd6:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 8010bda:	2340      	movs	r3, #64	; 0x40
 8010bdc:	2200      	movs	r2, #0
 8010bde:	2180      	movs	r1, #128	; 0x80
 8010be0:	6878      	ldr	r0, [r7, #4]
 8010be2:	f004 fbd8 	bl	8015396 <USBD_LL_OpenEP>
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	2201      	movs	r2, #1
 8010bea:	619a      	str	r2, [r3, #24]
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	2240      	movs	r2, #64	; 0x40
 8010bf0:	625a      	str	r2, [r3, #36]	; 0x24
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	2201      	movs	r2, #1
 8010bf6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	2200      	movs	r2, #0
 8010bfe:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	2200      	movs	r2, #0
 8010c06:	605a      	str	r2, [r3, #4]
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	2200      	movs	r2, #0
 8010c0c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d009      	beq.n	8010c2e <USBD_LL_Reset+0x78>
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010c20:	685b      	ldr	r3, [r3, #4]
 8010c22:	687a      	ldr	r2, [r7, #4]
 8010c24:	6852      	ldr	r2, [r2, #4]
 8010c26:	b2d2      	uxtb	r2, r2
 8010c28:	4611      	mov	r1, r2
 8010c2a:	6878      	ldr	r0, [r7, #4]
 8010c2c:	4798      	blx	r3
 8010c2e:	2300      	movs	r3, #0
 8010c30:	4618      	mov	r0, r3
 8010c32:	3708      	adds	r7, #8
 8010c34:	46bd      	mov	sp, r7
 8010c36:	bd80      	pop	{r7, pc}

08010c38 <USBD_LL_SetSpeed>:
 8010c38:	b480      	push	{r7}
 8010c3a:	b083      	sub	sp, #12
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6078      	str	r0, [r7, #4]
 8010c40:	460b      	mov	r3, r1
 8010c42:	70fb      	strb	r3, [r7, #3]
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	78fa      	ldrb	r2, [r7, #3]
 8010c48:	741a      	strb	r2, [r3, #16]
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	370c      	adds	r7, #12
 8010c50:	46bd      	mov	sp, r7
 8010c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c56:	4770      	bx	lr

08010c58 <USBD_LL_Suspend>:
 8010c58:	b480      	push	{r7}
 8010c5a:	b083      	sub	sp, #12
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	6078      	str	r0, [r7, #4]
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	2204      	movs	r2, #4
 8010c70:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
 8010c74:	2300      	movs	r3, #0
 8010c76:	4618      	mov	r0, r3
 8010c78:	370c      	adds	r7, #12
 8010c7a:	46bd      	mov	sp, r7
 8010c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c80:	4770      	bx	lr

08010c82 <USBD_LL_Resume>:
 8010c82:	b480      	push	{r7}
 8010c84:	b083      	sub	sp, #12
 8010c86:	af00      	add	r7, sp, #0
 8010c88:	6078      	str	r0, [r7, #4]
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
 8010c96:	2300      	movs	r3, #0
 8010c98:	4618      	mov	r0, r3
 8010c9a:	370c      	adds	r7, #12
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca2:	4770      	bx	lr

08010ca4 <USBD_LL_SOF>:
 8010ca4:	b580      	push	{r7, lr}
 8010ca6:	b082      	sub	sp, #8
 8010ca8:	af00      	add	r7, sp, #0
 8010caa:	6078      	str	r0, [r7, #4]
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010cb2:	2b03      	cmp	r3, #3
 8010cb4:	d10b      	bne.n	8010cce <USBD_LL_SOF+0x2a>
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010cbc:	69db      	ldr	r3, [r3, #28]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d005      	beq.n	8010cce <USBD_LL_SOF+0x2a>
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010cc8:	69db      	ldr	r3, [r3, #28]
 8010cca:	6878      	ldr	r0, [r7, #4]
 8010ccc:	4798      	blx	r3
 8010cce:	2300      	movs	r3, #0
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	3708      	adds	r7, #8
 8010cd4:	46bd      	mov	sp, r7
 8010cd6:	bd80      	pop	{r7, pc}

08010cd8 <USBD_LL_IsoINIncomplete>:
 8010cd8:	b480      	push	{r7}
 8010cda:	b083      	sub	sp, #12
 8010cdc:	af00      	add	r7, sp, #0
 8010cde:	6078      	str	r0, [r7, #4]
 8010ce0:	460b      	mov	r3, r1
 8010ce2:	70fb      	strb	r3, [r7, #3]
 8010ce4:	2300      	movs	r3, #0
 8010ce6:	4618      	mov	r0, r3
 8010ce8:	370c      	adds	r7, #12
 8010cea:	46bd      	mov	sp, r7
 8010cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf0:	4770      	bx	lr

08010cf2 <USBD_LL_IsoOUTIncomplete>:
 8010cf2:	b480      	push	{r7}
 8010cf4:	b083      	sub	sp, #12
 8010cf6:	af00      	add	r7, sp, #0
 8010cf8:	6078      	str	r0, [r7, #4]
 8010cfa:	460b      	mov	r3, r1
 8010cfc:	70fb      	strb	r3, [r7, #3]
 8010cfe:	2300      	movs	r3, #0
 8010d00:	4618      	mov	r0, r3
 8010d02:	370c      	adds	r7, #12
 8010d04:	46bd      	mov	sp, r7
 8010d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d0a:	4770      	bx	lr

08010d0c <USBD_LL_DevConnected>:
 8010d0c:	b480      	push	{r7}
 8010d0e:	b083      	sub	sp, #12
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
 8010d14:	2300      	movs	r3, #0
 8010d16:	4618      	mov	r0, r3
 8010d18:	370c      	adds	r7, #12
 8010d1a:	46bd      	mov	sp, r7
 8010d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d20:	4770      	bx	lr

08010d22 <USBD_LL_DevDisconnected>:
 8010d22:	b580      	push	{r7, lr}
 8010d24:	b082      	sub	sp, #8
 8010d26:	af00      	add	r7, sp, #0
 8010d28:	6078      	str	r0, [r7, #4]
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	2201      	movs	r2, #1
 8010d2e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010d38:	685b      	ldr	r3, [r3, #4]
 8010d3a:	687a      	ldr	r2, [r7, #4]
 8010d3c:	6852      	ldr	r2, [r2, #4]
 8010d3e:	b2d2      	uxtb	r2, r2
 8010d40:	4611      	mov	r1, r2
 8010d42:	6878      	ldr	r0, [r7, #4]
 8010d44:	4798      	blx	r3
 8010d46:	2300      	movs	r3, #0
 8010d48:	4618      	mov	r0, r3
 8010d4a:	3708      	adds	r7, #8
 8010d4c:	46bd      	mov	sp, r7
 8010d4e:	bd80      	pop	{r7, pc}

08010d50 <USBD_StdDevReq>:
 8010d50:	b580      	push	{r7, lr}
 8010d52:	b084      	sub	sp, #16
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	6078      	str	r0, [r7, #4]
 8010d58:	6039      	str	r1, [r7, #0]
 8010d5a:	2300      	movs	r3, #0
 8010d5c:	73fb      	strb	r3, [r7, #15]
 8010d5e:	683b      	ldr	r3, [r7, #0]
 8010d60:	781b      	ldrb	r3, [r3, #0]
 8010d62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010d66:	2b20      	cmp	r3, #32
 8010d68:	d004      	beq.n	8010d74 <USBD_StdDevReq+0x24>
 8010d6a:	2b40      	cmp	r3, #64	; 0x40
 8010d6c:	d002      	beq.n	8010d74 <USBD_StdDevReq+0x24>
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d008      	beq.n	8010d84 <USBD_StdDevReq+0x34>
 8010d72:	e04c      	b.n	8010e0e <USBD_StdDevReq+0xbe>
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010d7a:	689b      	ldr	r3, [r3, #8]
 8010d7c:	6839      	ldr	r1, [r7, #0]
 8010d7e:	6878      	ldr	r0, [r7, #4]
 8010d80:	4798      	blx	r3
 8010d82:	e049      	b.n	8010e18 <USBD_StdDevReq+0xc8>
 8010d84:	683b      	ldr	r3, [r7, #0]
 8010d86:	785b      	ldrb	r3, [r3, #1]
 8010d88:	2b09      	cmp	r3, #9
 8010d8a:	d83a      	bhi.n	8010e02 <USBD_StdDevReq+0xb2>
 8010d8c:	a201      	add	r2, pc, #4	; (adr r2, 8010d94 <USBD_StdDevReq+0x44>)
 8010d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d92:	bf00      	nop
 8010d94:	08010de5 	.word	0x08010de5
 8010d98:	08010df9 	.word	0x08010df9
 8010d9c:	08010e03 	.word	0x08010e03
 8010da0:	08010def 	.word	0x08010def
 8010da4:	08010e03 	.word	0x08010e03
 8010da8:	08010dc7 	.word	0x08010dc7
 8010dac:	08010dbd 	.word	0x08010dbd
 8010db0:	08010e03 	.word	0x08010e03
 8010db4:	08010ddb 	.word	0x08010ddb
 8010db8:	08010dd1 	.word	0x08010dd1
 8010dbc:	6839      	ldr	r1, [r7, #0]
 8010dbe:	6878      	ldr	r0, [r7, #4]
 8010dc0:	f000 f9d2 	bl	8011168 <USBD_GetDescriptor>
 8010dc4:	e022      	b.n	8010e0c <USBD_StdDevReq+0xbc>
 8010dc6:	6839      	ldr	r1, [r7, #0]
 8010dc8:	6878      	ldr	r0, [r7, #4]
 8010dca:	f000 fac7 	bl	801135c <USBD_SetAddress>
 8010dce:	e01d      	b.n	8010e0c <USBD_StdDevReq+0xbc>
 8010dd0:	6839      	ldr	r1, [r7, #0]
 8010dd2:	6878      	ldr	r0, [r7, #4]
 8010dd4:	f000 fb04 	bl	80113e0 <USBD_SetConfig>
 8010dd8:	e018      	b.n	8010e0c <USBD_StdDevReq+0xbc>
 8010dda:	6839      	ldr	r1, [r7, #0]
 8010ddc:	6878      	ldr	r0, [r7, #4]
 8010dde:	f000 fb8d 	bl	80114fc <USBD_GetConfig>
 8010de2:	e013      	b.n	8010e0c <USBD_StdDevReq+0xbc>
 8010de4:	6839      	ldr	r1, [r7, #0]
 8010de6:	6878      	ldr	r0, [r7, #4]
 8010de8:	f000 fbbc 	bl	8011564 <USBD_GetStatus>
 8010dec:	e00e      	b.n	8010e0c <USBD_StdDevReq+0xbc>
 8010dee:	6839      	ldr	r1, [r7, #0]
 8010df0:	6878      	ldr	r0, [r7, #4]
 8010df2:	f000 fbea 	bl	80115ca <USBD_SetFeature>
 8010df6:	e009      	b.n	8010e0c <USBD_StdDevReq+0xbc>
 8010df8:	6839      	ldr	r1, [r7, #0]
 8010dfa:	6878      	ldr	r0, [r7, #4]
 8010dfc:	f000 fbf9 	bl	80115f2 <USBD_ClrFeature>
 8010e00:	e004      	b.n	8010e0c <USBD_StdDevReq+0xbc>
 8010e02:	6839      	ldr	r1, [r7, #0]
 8010e04:	6878      	ldr	r0, [r7, #4]
 8010e06:	f000 fc52 	bl	80116ae <USBD_CtlError>
 8010e0a:	bf00      	nop
 8010e0c:	e004      	b.n	8010e18 <USBD_StdDevReq+0xc8>
 8010e0e:	6839      	ldr	r1, [r7, #0]
 8010e10:	6878      	ldr	r0, [r7, #4]
 8010e12:	f000 fc4c 	bl	80116ae <USBD_CtlError>
 8010e16:	bf00      	nop
 8010e18:	7bfb      	ldrb	r3, [r7, #15]
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	3710      	adds	r7, #16
 8010e1e:	46bd      	mov	sp, r7
 8010e20:	bd80      	pop	{r7, pc}
 8010e22:	bf00      	nop

08010e24 <USBD_StdItfReq>:
 8010e24:	b580      	push	{r7, lr}
 8010e26:	b084      	sub	sp, #16
 8010e28:	af00      	add	r7, sp, #0
 8010e2a:	6078      	str	r0, [r7, #4]
 8010e2c:	6039      	str	r1, [r7, #0]
 8010e2e:	2300      	movs	r3, #0
 8010e30:	73fb      	strb	r3, [r7, #15]
 8010e32:	683b      	ldr	r3, [r7, #0]
 8010e34:	781b      	ldrb	r3, [r3, #0]
 8010e36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010e3a:	2b20      	cmp	r3, #32
 8010e3c:	d003      	beq.n	8010e46 <USBD_StdItfReq+0x22>
 8010e3e:	2b40      	cmp	r3, #64	; 0x40
 8010e40:	d001      	beq.n	8010e46 <USBD_StdItfReq+0x22>
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d12a      	bne.n	8010e9c <USBD_StdItfReq+0x78>
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010e4c:	3b01      	subs	r3, #1
 8010e4e:	2b02      	cmp	r3, #2
 8010e50:	d81d      	bhi.n	8010e8e <USBD_StdItfReq+0x6a>
 8010e52:	683b      	ldr	r3, [r7, #0]
 8010e54:	889b      	ldrh	r3, [r3, #4]
 8010e56:	b2db      	uxtb	r3, r3
 8010e58:	2b01      	cmp	r3, #1
 8010e5a:	d813      	bhi.n	8010e84 <USBD_StdItfReq+0x60>
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010e62:	689b      	ldr	r3, [r3, #8]
 8010e64:	6839      	ldr	r1, [r7, #0]
 8010e66:	6878      	ldr	r0, [r7, #4]
 8010e68:	4798      	blx	r3
 8010e6a:	4603      	mov	r3, r0
 8010e6c:	73fb      	strb	r3, [r7, #15]
 8010e6e:	683b      	ldr	r3, [r7, #0]
 8010e70:	88db      	ldrh	r3, [r3, #6]
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d110      	bne.n	8010e98 <USBD_StdItfReq+0x74>
 8010e76:	7bfb      	ldrb	r3, [r7, #15]
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d10d      	bne.n	8010e98 <USBD_StdItfReq+0x74>
 8010e7c:	6878      	ldr	r0, [r7, #4]
 8010e7e:	f000 fcdf 	bl	8011840 <USBD_CtlSendStatus>
 8010e82:	e009      	b.n	8010e98 <USBD_StdItfReq+0x74>
 8010e84:	6839      	ldr	r1, [r7, #0]
 8010e86:	6878      	ldr	r0, [r7, #4]
 8010e88:	f000 fc11 	bl	80116ae <USBD_CtlError>
 8010e8c:	e004      	b.n	8010e98 <USBD_StdItfReq+0x74>
 8010e8e:	6839      	ldr	r1, [r7, #0]
 8010e90:	6878      	ldr	r0, [r7, #4]
 8010e92:	f000 fc0c 	bl	80116ae <USBD_CtlError>
 8010e96:	e000      	b.n	8010e9a <USBD_StdItfReq+0x76>
 8010e98:	bf00      	nop
 8010e9a:	e004      	b.n	8010ea6 <USBD_StdItfReq+0x82>
 8010e9c:	6839      	ldr	r1, [r7, #0]
 8010e9e:	6878      	ldr	r0, [r7, #4]
 8010ea0:	f000 fc05 	bl	80116ae <USBD_CtlError>
 8010ea4:	bf00      	nop
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	3710      	adds	r7, #16
 8010eac:	46bd      	mov	sp, r7
 8010eae:	bd80      	pop	{r7, pc}

08010eb0 <USBD_StdEPReq>:
 8010eb0:	b580      	push	{r7, lr}
 8010eb2:	b084      	sub	sp, #16
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	6078      	str	r0, [r7, #4]
 8010eb8:	6039      	str	r1, [r7, #0]
 8010eba:	2300      	movs	r3, #0
 8010ebc:	73fb      	strb	r3, [r7, #15]
 8010ebe:	683b      	ldr	r3, [r7, #0]
 8010ec0:	889b      	ldrh	r3, [r3, #4]
 8010ec2:	73bb      	strb	r3, [r7, #14]
 8010ec4:	683b      	ldr	r3, [r7, #0]
 8010ec6:	781b      	ldrb	r3, [r3, #0]
 8010ec8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010ecc:	2b20      	cmp	r3, #32
 8010ece:	d004      	beq.n	8010eda <USBD_StdEPReq+0x2a>
 8010ed0:	2b40      	cmp	r3, #64	; 0x40
 8010ed2:	d002      	beq.n	8010eda <USBD_StdEPReq+0x2a>
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d008      	beq.n	8010eea <USBD_StdEPReq+0x3a>
 8010ed8:	e13b      	b.n	8011152 <USBD_StdEPReq+0x2a2>
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010ee0:	689b      	ldr	r3, [r3, #8]
 8010ee2:	6839      	ldr	r1, [r7, #0]
 8010ee4:	6878      	ldr	r0, [r7, #4]
 8010ee6:	4798      	blx	r3
 8010ee8:	e138      	b.n	801115c <USBD_StdEPReq+0x2ac>
 8010eea:	683b      	ldr	r3, [r7, #0]
 8010eec:	781b      	ldrb	r3, [r3, #0]
 8010eee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010ef2:	2b20      	cmp	r3, #32
 8010ef4:	d10a      	bne.n	8010f0c <USBD_StdEPReq+0x5c>
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010efc:	689b      	ldr	r3, [r3, #8]
 8010efe:	6839      	ldr	r1, [r7, #0]
 8010f00:	6878      	ldr	r0, [r7, #4]
 8010f02:	4798      	blx	r3
 8010f04:	4603      	mov	r3, r0
 8010f06:	73fb      	strb	r3, [r7, #15]
 8010f08:	7bfb      	ldrb	r3, [r7, #15]
 8010f0a:	e128      	b.n	801115e <USBD_StdEPReq+0x2ae>
 8010f0c:	683b      	ldr	r3, [r7, #0]
 8010f0e:	785b      	ldrb	r3, [r3, #1]
 8010f10:	2b01      	cmp	r3, #1
 8010f12:	d03e      	beq.n	8010f92 <USBD_StdEPReq+0xe2>
 8010f14:	2b03      	cmp	r3, #3
 8010f16:	d002      	beq.n	8010f1e <USBD_StdEPReq+0x6e>
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d070      	beq.n	8010ffe <USBD_StdEPReq+0x14e>
 8010f1c:	e113      	b.n	8011146 <USBD_StdEPReq+0x296>
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010f24:	2b02      	cmp	r3, #2
 8010f26:	d002      	beq.n	8010f2e <USBD_StdEPReq+0x7e>
 8010f28:	2b03      	cmp	r3, #3
 8010f2a:	d015      	beq.n	8010f58 <USBD_StdEPReq+0xa8>
 8010f2c:	e02b      	b.n	8010f86 <USBD_StdEPReq+0xd6>
 8010f2e:	7bbb      	ldrb	r3, [r7, #14]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d00c      	beq.n	8010f4e <USBD_StdEPReq+0x9e>
 8010f34:	7bbb      	ldrb	r3, [r7, #14]
 8010f36:	2b80      	cmp	r3, #128	; 0x80
 8010f38:	d009      	beq.n	8010f4e <USBD_StdEPReq+0x9e>
 8010f3a:	7bbb      	ldrb	r3, [r7, #14]
 8010f3c:	4619      	mov	r1, r3
 8010f3e:	6878      	ldr	r0, [r7, #4]
 8010f40:	f004 fa6e 	bl	8015420 <USBD_LL_StallEP>
 8010f44:	2180      	movs	r1, #128	; 0x80
 8010f46:	6878      	ldr	r0, [r7, #4]
 8010f48:	f004 fa6a 	bl	8015420 <USBD_LL_StallEP>
 8010f4c:	e020      	b.n	8010f90 <USBD_StdEPReq+0xe0>
 8010f4e:	6839      	ldr	r1, [r7, #0]
 8010f50:	6878      	ldr	r0, [r7, #4]
 8010f52:	f000 fbac 	bl	80116ae <USBD_CtlError>
 8010f56:	e01b      	b.n	8010f90 <USBD_StdEPReq+0xe0>
 8010f58:	683b      	ldr	r3, [r7, #0]
 8010f5a:	885b      	ldrh	r3, [r3, #2]
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d10e      	bne.n	8010f7e <USBD_StdEPReq+0xce>
 8010f60:	7bbb      	ldrb	r3, [r7, #14]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d00b      	beq.n	8010f7e <USBD_StdEPReq+0xce>
 8010f66:	7bbb      	ldrb	r3, [r7, #14]
 8010f68:	2b80      	cmp	r3, #128	; 0x80
 8010f6a:	d008      	beq.n	8010f7e <USBD_StdEPReq+0xce>
 8010f6c:	683b      	ldr	r3, [r7, #0]
 8010f6e:	88db      	ldrh	r3, [r3, #6]
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d104      	bne.n	8010f7e <USBD_StdEPReq+0xce>
 8010f74:	7bbb      	ldrb	r3, [r7, #14]
 8010f76:	4619      	mov	r1, r3
 8010f78:	6878      	ldr	r0, [r7, #4]
 8010f7a:	f004 fa51 	bl	8015420 <USBD_LL_StallEP>
 8010f7e:	6878      	ldr	r0, [r7, #4]
 8010f80:	f000 fc5e 	bl	8011840 <USBD_CtlSendStatus>
 8010f84:	e004      	b.n	8010f90 <USBD_StdEPReq+0xe0>
 8010f86:	6839      	ldr	r1, [r7, #0]
 8010f88:	6878      	ldr	r0, [r7, #4]
 8010f8a:	f000 fb90 	bl	80116ae <USBD_CtlError>
 8010f8e:	bf00      	nop
 8010f90:	e0de      	b.n	8011150 <USBD_StdEPReq+0x2a0>
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010f98:	2b02      	cmp	r3, #2
 8010f9a:	d002      	beq.n	8010fa2 <USBD_StdEPReq+0xf2>
 8010f9c:	2b03      	cmp	r3, #3
 8010f9e:	d015      	beq.n	8010fcc <USBD_StdEPReq+0x11c>
 8010fa0:	e026      	b.n	8010ff0 <USBD_StdEPReq+0x140>
 8010fa2:	7bbb      	ldrb	r3, [r7, #14]
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d00c      	beq.n	8010fc2 <USBD_StdEPReq+0x112>
 8010fa8:	7bbb      	ldrb	r3, [r7, #14]
 8010faa:	2b80      	cmp	r3, #128	; 0x80
 8010fac:	d009      	beq.n	8010fc2 <USBD_StdEPReq+0x112>
 8010fae:	7bbb      	ldrb	r3, [r7, #14]
 8010fb0:	4619      	mov	r1, r3
 8010fb2:	6878      	ldr	r0, [r7, #4]
 8010fb4:	f004 fa34 	bl	8015420 <USBD_LL_StallEP>
 8010fb8:	2180      	movs	r1, #128	; 0x80
 8010fba:	6878      	ldr	r0, [r7, #4]
 8010fbc:	f004 fa30 	bl	8015420 <USBD_LL_StallEP>
 8010fc0:	e01c      	b.n	8010ffc <USBD_StdEPReq+0x14c>
 8010fc2:	6839      	ldr	r1, [r7, #0]
 8010fc4:	6878      	ldr	r0, [r7, #4]
 8010fc6:	f000 fb72 	bl	80116ae <USBD_CtlError>
 8010fca:	e017      	b.n	8010ffc <USBD_StdEPReq+0x14c>
 8010fcc:	683b      	ldr	r3, [r7, #0]
 8010fce:	885b      	ldrh	r3, [r3, #2]
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d112      	bne.n	8010ffa <USBD_StdEPReq+0x14a>
 8010fd4:	7bbb      	ldrb	r3, [r7, #14]
 8010fd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d004      	beq.n	8010fe8 <USBD_StdEPReq+0x138>
 8010fde:	7bbb      	ldrb	r3, [r7, #14]
 8010fe0:	4619      	mov	r1, r3
 8010fe2:	6878      	ldr	r0, [r7, #4]
 8010fe4:	f004 fa3b 	bl	801545e <USBD_LL_ClearStallEP>
 8010fe8:	6878      	ldr	r0, [r7, #4]
 8010fea:	f000 fc29 	bl	8011840 <USBD_CtlSendStatus>
 8010fee:	e004      	b.n	8010ffa <USBD_StdEPReq+0x14a>
 8010ff0:	6839      	ldr	r1, [r7, #0]
 8010ff2:	6878      	ldr	r0, [r7, #4]
 8010ff4:	f000 fb5b 	bl	80116ae <USBD_CtlError>
 8010ff8:	e000      	b.n	8010ffc <USBD_StdEPReq+0x14c>
 8010ffa:	bf00      	nop
 8010ffc:	e0a8      	b.n	8011150 <USBD_StdEPReq+0x2a0>
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8011004:	2b02      	cmp	r3, #2
 8011006:	d002      	beq.n	801100e <USBD_StdEPReq+0x15e>
 8011008:	2b03      	cmp	r3, #3
 801100a:	d031      	beq.n	8011070 <USBD_StdEPReq+0x1c0>
 801100c:	e095      	b.n	801113a <USBD_StdEPReq+0x28a>
 801100e:	7bbb      	ldrb	r3, [r7, #14]
 8011010:	2b00      	cmp	r3, #0
 8011012:	d007      	beq.n	8011024 <USBD_StdEPReq+0x174>
 8011014:	7bbb      	ldrb	r3, [r7, #14]
 8011016:	2b80      	cmp	r3, #128	; 0x80
 8011018:	d004      	beq.n	8011024 <USBD_StdEPReq+0x174>
 801101a:	6839      	ldr	r1, [r7, #0]
 801101c:	6878      	ldr	r0, [r7, #4]
 801101e:	f000 fb46 	bl	80116ae <USBD_CtlError>
 8011022:	e08f      	b.n	8011144 <USBD_StdEPReq+0x294>
 8011024:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011028:	2b00      	cmp	r3, #0
 801102a:	da0b      	bge.n	8011044 <USBD_StdEPReq+0x194>
 801102c:	7bbb      	ldrb	r3, [r7, #14]
 801102e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011032:	4613      	mov	r3, r2
 8011034:	009b      	lsls	r3, r3, #2
 8011036:	4413      	add	r3, r2
 8011038:	009b      	lsls	r3, r3, #2
 801103a:	3310      	adds	r3, #16
 801103c:	687a      	ldr	r2, [r7, #4]
 801103e:	4413      	add	r3, r2
 8011040:	3304      	adds	r3, #4
 8011042:	e00a      	b.n	801105a <USBD_StdEPReq+0x1aa>
 8011044:	7bbb      	ldrb	r3, [r7, #14]
 8011046:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801104a:	4613      	mov	r3, r2
 801104c:	009b      	lsls	r3, r3, #2
 801104e:	4413      	add	r3, r2
 8011050:	009b      	lsls	r3, r3, #2
 8011052:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8011056:	687a      	ldr	r2, [r7, #4]
 8011058:	4413      	add	r3, r2
 801105a:	60bb      	str	r3, [r7, #8]
 801105c:	68bb      	ldr	r3, [r7, #8]
 801105e:	2200      	movs	r2, #0
 8011060:	601a      	str	r2, [r3, #0]
 8011062:	68bb      	ldr	r3, [r7, #8]
 8011064:	2202      	movs	r2, #2
 8011066:	4619      	mov	r1, r3
 8011068:	6878      	ldr	r0, [r7, #4]
 801106a:	f000 fb8b 	bl	8011784 <USBD_CtlSendData>
 801106e:	e069      	b.n	8011144 <USBD_StdEPReq+0x294>
 8011070:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011074:	2b00      	cmp	r3, #0
 8011076:	da11      	bge.n	801109c <USBD_StdEPReq+0x1ec>
 8011078:	7bbb      	ldrb	r3, [r7, #14]
 801107a:	f003 020f 	and.w	r2, r3, #15
 801107e:	6879      	ldr	r1, [r7, #4]
 8011080:	4613      	mov	r3, r2
 8011082:	009b      	lsls	r3, r3, #2
 8011084:	4413      	add	r3, r2
 8011086:	009b      	lsls	r3, r3, #2
 8011088:	440b      	add	r3, r1
 801108a:	3318      	adds	r3, #24
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	2b00      	cmp	r3, #0
 8011090:	d117      	bne.n	80110c2 <USBD_StdEPReq+0x212>
 8011092:	6839      	ldr	r1, [r7, #0]
 8011094:	6878      	ldr	r0, [r7, #4]
 8011096:	f000 fb0a 	bl	80116ae <USBD_CtlError>
 801109a:	e053      	b.n	8011144 <USBD_StdEPReq+0x294>
 801109c:	7bbb      	ldrb	r3, [r7, #14]
 801109e:	f003 020f 	and.w	r2, r3, #15
 80110a2:	6879      	ldr	r1, [r7, #4]
 80110a4:	4613      	mov	r3, r2
 80110a6:	009b      	lsls	r3, r3, #2
 80110a8:	4413      	add	r3, r2
 80110aa:	009b      	lsls	r3, r3, #2
 80110ac:	440b      	add	r3, r1
 80110ae:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d104      	bne.n	80110c2 <USBD_StdEPReq+0x212>
 80110b8:	6839      	ldr	r1, [r7, #0]
 80110ba:	6878      	ldr	r0, [r7, #4]
 80110bc:	f000 faf7 	bl	80116ae <USBD_CtlError>
 80110c0:	e040      	b.n	8011144 <USBD_StdEPReq+0x294>
 80110c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	da0b      	bge.n	80110e2 <USBD_StdEPReq+0x232>
 80110ca:	7bbb      	ldrb	r3, [r7, #14]
 80110cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80110d0:	4613      	mov	r3, r2
 80110d2:	009b      	lsls	r3, r3, #2
 80110d4:	4413      	add	r3, r2
 80110d6:	009b      	lsls	r3, r3, #2
 80110d8:	3310      	adds	r3, #16
 80110da:	687a      	ldr	r2, [r7, #4]
 80110dc:	4413      	add	r3, r2
 80110de:	3304      	adds	r3, #4
 80110e0:	e00a      	b.n	80110f8 <USBD_StdEPReq+0x248>
 80110e2:	7bbb      	ldrb	r3, [r7, #14]
 80110e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80110e8:	4613      	mov	r3, r2
 80110ea:	009b      	lsls	r3, r3, #2
 80110ec:	4413      	add	r3, r2
 80110ee:	009b      	lsls	r3, r3, #2
 80110f0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80110f4:	687a      	ldr	r2, [r7, #4]
 80110f6:	4413      	add	r3, r2
 80110f8:	60bb      	str	r3, [r7, #8]
 80110fa:	7bbb      	ldrb	r3, [r7, #14]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d002      	beq.n	8011106 <USBD_StdEPReq+0x256>
 8011100:	7bbb      	ldrb	r3, [r7, #14]
 8011102:	2b80      	cmp	r3, #128	; 0x80
 8011104:	d103      	bne.n	801110e <USBD_StdEPReq+0x25e>
 8011106:	68bb      	ldr	r3, [r7, #8]
 8011108:	2200      	movs	r2, #0
 801110a:	601a      	str	r2, [r3, #0]
 801110c:	e00e      	b.n	801112c <USBD_StdEPReq+0x27c>
 801110e:	7bbb      	ldrb	r3, [r7, #14]
 8011110:	4619      	mov	r1, r3
 8011112:	6878      	ldr	r0, [r7, #4]
 8011114:	f004 f9c2 	bl	801549c <USBD_LL_IsStallEP>
 8011118:	4603      	mov	r3, r0
 801111a:	2b00      	cmp	r3, #0
 801111c:	d003      	beq.n	8011126 <USBD_StdEPReq+0x276>
 801111e:	68bb      	ldr	r3, [r7, #8]
 8011120:	2201      	movs	r2, #1
 8011122:	601a      	str	r2, [r3, #0]
 8011124:	e002      	b.n	801112c <USBD_StdEPReq+0x27c>
 8011126:	68bb      	ldr	r3, [r7, #8]
 8011128:	2200      	movs	r2, #0
 801112a:	601a      	str	r2, [r3, #0]
 801112c:	68bb      	ldr	r3, [r7, #8]
 801112e:	2202      	movs	r2, #2
 8011130:	4619      	mov	r1, r3
 8011132:	6878      	ldr	r0, [r7, #4]
 8011134:	f000 fb26 	bl	8011784 <USBD_CtlSendData>
 8011138:	e004      	b.n	8011144 <USBD_StdEPReq+0x294>
 801113a:	6839      	ldr	r1, [r7, #0]
 801113c:	6878      	ldr	r0, [r7, #4]
 801113e:	f000 fab6 	bl	80116ae <USBD_CtlError>
 8011142:	bf00      	nop
 8011144:	e004      	b.n	8011150 <USBD_StdEPReq+0x2a0>
 8011146:	6839      	ldr	r1, [r7, #0]
 8011148:	6878      	ldr	r0, [r7, #4]
 801114a:	f000 fab0 	bl	80116ae <USBD_CtlError>
 801114e:	bf00      	nop
 8011150:	e004      	b.n	801115c <USBD_StdEPReq+0x2ac>
 8011152:	6839      	ldr	r1, [r7, #0]
 8011154:	6878      	ldr	r0, [r7, #4]
 8011156:	f000 faaa 	bl	80116ae <USBD_CtlError>
 801115a:	bf00      	nop
 801115c:	7bfb      	ldrb	r3, [r7, #15]
 801115e:	4618      	mov	r0, r3
 8011160:	3710      	adds	r7, #16
 8011162:	46bd      	mov	sp, r7
 8011164:	bd80      	pop	{r7, pc}
	...

08011168 <USBD_GetDescriptor>:
 8011168:	b580      	push	{r7, lr}
 801116a:	b084      	sub	sp, #16
 801116c:	af00      	add	r7, sp, #0
 801116e:	6078      	str	r0, [r7, #4]
 8011170:	6039      	str	r1, [r7, #0]
 8011172:	683b      	ldr	r3, [r7, #0]
 8011174:	885b      	ldrh	r3, [r3, #2]
 8011176:	0a1b      	lsrs	r3, r3, #8
 8011178:	b29b      	uxth	r3, r3
 801117a:	3b01      	subs	r3, #1
 801117c:	2b06      	cmp	r3, #6
 801117e:	f200 80c9 	bhi.w	8011314 <USBD_GetDescriptor+0x1ac>
 8011182:	a201      	add	r2, pc, #4	; (adr r2, 8011188 <USBD_GetDescriptor+0x20>)
 8011184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011188:	080111a5 	.word	0x080111a5
 801118c:	080111bd 	.word	0x080111bd
 8011190:	080111fd 	.word	0x080111fd
 8011194:	08011315 	.word	0x08011315
 8011198:	08011315 	.word	0x08011315
 801119c:	080112c1 	.word	0x080112c1
 80111a0:	080112e7 	.word	0x080112e7
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	687a      	ldr	r2, [r7, #4]
 80111ae:	7c12      	ldrb	r2, [r2, #16]
 80111b0:	f107 010a 	add.w	r1, r7, #10
 80111b4:	4610      	mov	r0, r2
 80111b6:	4798      	blx	r3
 80111b8:	60f8      	str	r0, [r7, #12]
 80111ba:	e0b0      	b.n	801131e <USBD_GetDescriptor+0x1b6>
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	7c1b      	ldrb	r3, [r3, #16]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d10d      	bne.n	80111e0 <USBD_GetDescriptor+0x78>
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80111ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111cc:	f107 020a 	add.w	r2, r7, #10
 80111d0:	4610      	mov	r0, r2
 80111d2:	4798      	blx	r3
 80111d4:	60f8      	str	r0, [r7, #12]
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	3301      	adds	r3, #1
 80111da:	2202      	movs	r2, #2
 80111dc:	701a      	strb	r2, [r3, #0]
 80111de:	e09e      	b.n	801131e <USBD_GetDescriptor+0x1b6>
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80111e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111e8:	f107 020a 	add.w	r2, r7, #10
 80111ec:	4610      	mov	r0, r2
 80111ee:	4798      	blx	r3
 80111f0:	60f8      	str	r0, [r7, #12]
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	3301      	adds	r3, #1
 80111f6:	2202      	movs	r2, #2
 80111f8:	701a      	strb	r2, [r3, #0]
 80111fa:	e090      	b.n	801131e <USBD_GetDescriptor+0x1b6>
 80111fc:	683b      	ldr	r3, [r7, #0]
 80111fe:	885b      	ldrh	r3, [r3, #2]
 8011200:	b2db      	uxtb	r3, r3
 8011202:	2b05      	cmp	r3, #5
 8011204:	d856      	bhi.n	80112b4 <USBD_GetDescriptor+0x14c>
 8011206:	a201      	add	r2, pc, #4	; (adr r2, 801120c <USBD_GetDescriptor+0xa4>)
 8011208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801120c:	08011225 	.word	0x08011225
 8011210:	0801123d 	.word	0x0801123d
 8011214:	08011255 	.word	0x08011255
 8011218:	0801126d 	.word	0x0801126d
 801121c:	08011285 	.word	0x08011285
 8011220:	0801129d 	.word	0x0801129d
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 801122a:	685b      	ldr	r3, [r3, #4]
 801122c:	687a      	ldr	r2, [r7, #4]
 801122e:	7c12      	ldrb	r2, [r2, #16]
 8011230:	f107 010a 	add.w	r1, r7, #10
 8011234:	4610      	mov	r0, r2
 8011236:	4798      	blx	r3
 8011238:	60f8      	str	r0, [r7, #12]
 801123a:	e040      	b.n	80112be <USBD_GetDescriptor+0x156>
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8011242:	689b      	ldr	r3, [r3, #8]
 8011244:	687a      	ldr	r2, [r7, #4]
 8011246:	7c12      	ldrb	r2, [r2, #16]
 8011248:	f107 010a 	add.w	r1, r7, #10
 801124c:	4610      	mov	r0, r2
 801124e:	4798      	blx	r3
 8011250:	60f8      	str	r0, [r7, #12]
 8011252:	e034      	b.n	80112be <USBD_GetDescriptor+0x156>
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 801125a:	68db      	ldr	r3, [r3, #12]
 801125c:	687a      	ldr	r2, [r7, #4]
 801125e:	7c12      	ldrb	r2, [r2, #16]
 8011260:	f107 010a 	add.w	r1, r7, #10
 8011264:	4610      	mov	r0, r2
 8011266:	4798      	blx	r3
 8011268:	60f8      	str	r0, [r7, #12]
 801126a:	e028      	b.n	80112be <USBD_GetDescriptor+0x156>
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8011272:	691b      	ldr	r3, [r3, #16]
 8011274:	687a      	ldr	r2, [r7, #4]
 8011276:	7c12      	ldrb	r2, [r2, #16]
 8011278:	f107 010a 	add.w	r1, r7, #10
 801127c:	4610      	mov	r0, r2
 801127e:	4798      	blx	r3
 8011280:	60f8      	str	r0, [r7, #12]
 8011282:	e01c      	b.n	80112be <USBD_GetDescriptor+0x156>
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 801128a:	695b      	ldr	r3, [r3, #20]
 801128c:	687a      	ldr	r2, [r7, #4]
 801128e:	7c12      	ldrb	r2, [r2, #16]
 8011290:	f107 010a 	add.w	r1, r7, #10
 8011294:	4610      	mov	r0, r2
 8011296:	4798      	blx	r3
 8011298:	60f8      	str	r0, [r7, #12]
 801129a:	e010      	b.n	80112be <USBD_GetDescriptor+0x156>
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80112a2:	699b      	ldr	r3, [r3, #24]
 80112a4:	687a      	ldr	r2, [r7, #4]
 80112a6:	7c12      	ldrb	r2, [r2, #16]
 80112a8:	f107 010a 	add.w	r1, r7, #10
 80112ac:	4610      	mov	r0, r2
 80112ae:	4798      	blx	r3
 80112b0:	60f8      	str	r0, [r7, #12]
 80112b2:	e004      	b.n	80112be <USBD_GetDescriptor+0x156>
 80112b4:	6839      	ldr	r1, [r7, #0]
 80112b6:	6878      	ldr	r0, [r7, #4]
 80112b8:	f000 f9f9 	bl	80116ae <USBD_CtlError>
 80112bc:	e04b      	b.n	8011356 <USBD_GetDescriptor+0x1ee>
 80112be:	e02e      	b.n	801131e <USBD_GetDescriptor+0x1b6>
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	7c1b      	ldrb	r3, [r3, #16]
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d109      	bne.n	80112dc <USBD_GetDescriptor+0x174>
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80112ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80112d0:	f107 020a 	add.w	r2, r7, #10
 80112d4:	4610      	mov	r0, r2
 80112d6:	4798      	blx	r3
 80112d8:	60f8      	str	r0, [r7, #12]
 80112da:	e020      	b.n	801131e <USBD_GetDescriptor+0x1b6>
 80112dc:	6839      	ldr	r1, [r7, #0]
 80112de:	6878      	ldr	r0, [r7, #4]
 80112e0:	f000 f9e5 	bl	80116ae <USBD_CtlError>
 80112e4:	e037      	b.n	8011356 <USBD_GetDescriptor+0x1ee>
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	7c1b      	ldrb	r3, [r3, #16]
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d10d      	bne.n	801130a <USBD_GetDescriptor+0x1a2>
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80112f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80112f6:	f107 020a 	add.w	r2, r7, #10
 80112fa:	4610      	mov	r0, r2
 80112fc:	4798      	blx	r3
 80112fe:	60f8      	str	r0, [r7, #12]
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	3301      	adds	r3, #1
 8011304:	2207      	movs	r2, #7
 8011306:	701a      	strb	r2, [r3, #0]
 8011308:	e009      	b.n	801131e <USBD_GetDescriptor+0x1b6>
 801130a:	6839      	ldr	r1, [r7, #0]
 801130c:	6878      	ldr	r0, [r7, #4]
 801130e:	f000 f9ce 	bl	80116ae <USBD_CtlError>
 8011312:	e020      	b.n	8011356 <USBD_GetDescriptor+0x1ee>
 8011314:	6839      	ldr	r1, [r7, #0]
 8011316:	6878      	ldr	r0, [r7, #4]
 8011318:	f000 f9c9 	bl	80116ae <USBD_CtlError>
 801131c:	e01b      	b.n	8011356 <USBD_GetDescriptor+0x1ee>
 801131e:	897b      	ldrh	r3, [r7, #10]
 8011320:	2b00      	cmp	r3, #0
 8011322:	d011      	beq.n	8011348 <USBD_GetDescriptor+0x1e0>
 8011324:	683b      	ldr	r3, [r7, #0]
 8011326:	88db      	ldrh	r3, [r3, #6]
 8011328:	2b00      	cmp	r3, #0
 801132a:	d00d      	beq.n	8011348 <USBD_GetDescriptor+0x1e0>
 801132c:	683b      	ldr	r3, [r7, #0]
 801132e:	88da      	ldrh	r2, [r3, #6]
 8011330:	897b      	ldrh	r3, [r7, #10]
 8011332:	4293      	cmp	r3, r2
 8011334:	bf28      	it	cs
 8011336:	4613      	movcs	r3, r2
 8011338:	b29b      	uxth	r3, r3
 801133a:	817b      	strh	r3, [r7, #10]
 801133c:	897b      	ldrh	r3, [r7, #10]
 801133e:	461a      	mov	r2, r3
 8011340:	68f9      	ldr	r1, [r7, #12]
 8011342:	6878      	ldr	r0, [r7, #4]
 8011344:	f000 fa1e 	bl	8011784 <USBD_CtlSendData>
 8011348:	683b      	ldr	r3, [r7, #0]
 801134a:	88db      	ldrh	r3, [r3, #6]
 801134c:	2b00      	cmp	r3, #0
 801134e:	d102      	bne.n	8011356 <USBD_GetDescriptor+0x1ee>
 8011350:	6878      	ldr	r0, [r7, #4]
 8011352:	f000 fa75 	bl	8011840 <USBD_CtlSendStatus>
 8011356:	3710      	adds	r7, #16
 8011358:	46bd      	mov	sp, r7
 801135a:	bd80      	pop	{r7, pc}

0801135c <USBD_SetAddress>:
 801135c:	b580      	push	{r7, lr}
 801135e:	b084      	sub	sp, #16
 8011360:	af00      	add	r7, sp, #0
 8011362:	6078      	str	r0, [r7, #4]
 8011364:	6039      	str	r1, [r7, #0]
 8011366:	683b      	ldr	r3, [r7, #0]
 8011368:	889b      	ldrh	r3, [r3, #4]
 801136a:	2b00      	cmp	r3, #0
 801136c:	d130      	bne.n	80113d0 <USBD_SetAddress+0x74>
 801136e:	683b      	ldr	r3, [r7, #0]
 8011370:	88db      	ldrh	r3, [r3, #6]
 8011372:	2b00      	cmp	r3, #0
 8011374:	d12c      	bne.n	80113d0 <USBD_SetAddress+0x74>
 8011376:	683b      	ldr	r3, [r7, #0]
 8011378:	885b      	ldrh	r3, [r3, #2]
 801137a:	2b7f      	cmp	r3, #127	; 0x7f
 801137c:	d828      	bhi.n	80113d0 <USBD_SetAddress+0x74>
 801137e:	683b      	ldr	r3, [r7, #0]
 8011380:	885b      	ldrh	r3, [r3, #2]
 8011382:	b2db      	uxtb	r3, r3
 8011384:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011388:	73fb      	strb	r3, [r7, #15]
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8011390:	2b03      	cmp	r3, #3
 8011392:	d104      	bne.n	801139e <USBD_SetAddress+0x42>
 8011394:	6839      	ldr	r1, [r7, #0]
 8011396:	6878      	ldr	r0, [r7, #4]
 8011398:	f000 f989 	bl	80116ae <USBD_CtlError>
 801139c:	e01c      	b.n	80113d8 <USBD_SetAddress+0x7c>
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	7bfa      	ldrb	r2, [r7, #15]
 80113a2:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
 80113a6:	7bfb      	ldrb	r3, [r7, #15]
 80113a8:	4619      	mov	r1, r3
 80113aa:	6878      	ldr	r0, [r7, #4]
 80113ac:	f004 f8a2 	bl	80154f4 <USBD_LL_SetUSBAddress>
 80113b0:	6878      	ldr	r0, [r7, #4]
 80113b2:	f000 fa45 	bl	8011840 <USBD_CtlSendStatus>
 80113b6:	7bfb      	ldrb	r3, [r7, #15]
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d004      	beq.n	80113c6 <USBD_SetAddress+0x6a>
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	2202      	movs	r2, #2
 80113c0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
 80113c4:	e008      	b.n	80113d8 <USBD_SetAddress+0x7c>
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	2201      	movs	r2, #1
 80113ca:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
 80113ce:	e003      	b.n	80113d8 <USBD_SetAddress+0x7c>
 80113d0:	6839      	ldr	r1, [r7, #0]
 80113d2:	6878      	ldr	r0, [r7, #4]
 80113d4:	f000 f96b 	bl	80116ae <USBD_CtlError>
 80113d8:	bf00      	nop
 80113da:	3710      	adds	r7, #16
 80113dc:	46bd      	mov	sp, r7
 80113de:	bd80      	pop	{r7, pc}

080113e0 <USBD_SetConfig>:
 80113e0:	b580      	push	{r7, lr}
 80113e2:	b082      	sub	sp, #8
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	6078      	str	r0, [r7, #4]
 80113e8:	6039      	str	r1, [r7, #0]
 80113ea:	683b      	ldr	r3, [r7, #0]
 80113ec:	885b      	ldrh	r3, [r3, #2]
 80113ee:	b2da      	uxtb	r2, r3
 80113f0:	4b41      	ldr	r3, [pc, #260]	; (80114f8 <USBD_SetConfig+0x118>)
 80113f2:	701a      	strb	r2, [r3, #0]
 80113f4:	4b40      	ldr	r3, [pc, #256]	; (80114f8 <USBD_SetConfig+0x118>)
 80113f6:	781b      	ldrb	r3, [r3, #0]
 80113f8:	2b01      	cmp	r3, #1
 80113fa:	d904      	bls.n	8011406 <USBD_SetConfig+0x26>
 80113fc:	6839      	ldr	r1, [r7, #0]
 80113fe:	6878      	ldr	r0, [r7, #4]
 8011400:	f000 f955 	bl	80116ae <USBD_CtlError>
 8011404:	e075      	b.n	80114f2 <USBD_SetConfig+0x112>
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 801140c:	2b02      	cmp	r3, #2
 801140e:	d002      	beq.n	8011416 <USBD_SetConfig+0x36>
 8011410:	2b03      	cmp	r3, #3
 8011412:	d023      	beq.n	801145c <USBD_SetConfig+0x7c>
 8011414:	e062      	b.n	80114dc <USBD_SetConfig+0xfc>
 8011416:	4b38      	ldr	r3, [pc, #224]	; (80114f8 <USBD_SetConfig+0x118>)
 8011418:	781b      	ldrb	r3, [r3, #0]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d01a      	beq.n	8011454 <USBD_SetConfig+0x74>
 801141e:	4b36      	ldr	r3, [pc, #216]	; (80114f8 <USBD_SetConfig+0x118>)
 8011420:	781b      	ldrb	r3, [r3, #0]
 8011422:	461a      	mov	r2, r3
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	605a      	str	r2, [r3, #4]
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	2203      	movs	r2, #3
 801142c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
 8011430:	4b31      	ldr	r3, [pc, #196]	; (80114f8 <USBD_SetConfig+0x118>)
 8011432:	781b      	ldrb	r3, [r3, #0]
 8011434:	4619      	mov	r1, r3
 8011436:	6878      	ldr	r0, [r7, #4]
 8011438:	f7ff fa2a 	bl	8010890 <USBD_SetClassConfig>
 801143c:	4603      	mov	r3, r0
 801143e:	2b02      	cmp	r3, #2
 8011440:	d104      	bne.n	801144c <USBD_SetConfig+0x6c>
 8011442:	6839      	ldr	r1, [r7, #0]
 8011444:	6878      	ldr	r0, [r7, #4]
 8011446:	f000 f932 	bl	80116ae <USBD_CtlError>
 801144a:	e052      	b.n	80114f2 <USBD_SetConfig+0x112>
 801144c:	6878      	ldr	r0, [r7, #4]
 801144e:	f000 f9f7 	bl	8011840 <USBD_CtlSendStatus>
 8011452:	e04e      	b.n	80114f2 <USBD_SetConfig+0x112>
 8011454:	6878      	ldr	r0, [r7, #4]
 8011456:	f000 f9f3 	bl	8011840 <USBD_CtlSendStatus>
 801145a:	e04a      	b.n	80114f2 <USBD_SetConfig+0x112>
 801145c:	4b26      	ldr	r3, [pc, #152]	; (80114f8 <USBD_SetConfig+0x118>)
 801145e:	781b      	ldrb	r3, [r3, #0]
 8011460:	2b00      	cmp	r3, #0
 8011462:	d112      	bne.n	801148a <USBD_SetConfig+0xaa>
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	2202      	movs	r2, #2
 8011468:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
 801146c:	4b22      	ldr	r3, [pc, #136]	; (80114f8 <USBD_SetConfig+0x118>)
 801146e:	781b      	ldrb	r3, [r3, #0]
 8011470:	461a      	mov	r2, r3
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	605a      	str	r2, [r3, #4]
 8011476:	4b20      	ldr	r3, [pc, #128]	; (80114f8 <USBD_SetConfig+0x118>)
 8011478:	781b      	ldrb	r3, [r3, #0]
 801147a:	4619      	mov	r1, r3
 801147c:	6878      	ldr	r0, [r7, #4]
 801147e:	f7ff fa26 	bl	80108ce <USBD_ClrClassConfig>
 8011482:	6878      	ldr	r0, [r7, #4]
 8011484:	f000 f9dc 	bl	8011840 <USBD_CtlSendStatus>
 8011488:	e033      	b.n	80114f2 <USBD_SetConfig+0x112>
 801148a:	4b1b      	ldr	r3, [pc, #108]	; (80114f8 <USBD_SetConfig+0x118>)
 801148c:	781b      	ldrb	r3, [r3, #0]
 801148e:	461a      	mov	r2, r3
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	685b      	ldr	r3, [r3, #4]
 8011494:	429a      	cmp	r2, r3
 8011496:	d01d      	beq.n	80114d4 <USBD_SetConfig+0xf4>
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	685b      	ldr	r3, [r3, #4]
 801149c:	b2db      	uxtb	r3, r3
 801149e:	4619      	mov	r1, r3
 80114a0:	6878      	ldr	r0, [r7, #4]
 80114a2:	f7ff fa14 	bl	80108ce <USBD_ClrClassConfig>
 80114a6:	4b14      	ldr	r3, [pc, #80]	; (80114f8 <USBD_SetConfig+0x118>)
 80114a8:	781b      	ldrb	r3, [r3, #0]
 80114aa:	461a      	mov	r2, r3
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	605a      	str	r2, [r3, #4]
 80114b0:	4b11      	ldr	r3, [pc, #68]	; (80114f8 <USBD_SetConfig+0x118>)
 80114b2:	781b      	ldrb	r3, [r3, #0]
 80114b4:	4619      	mov	r1, r3
 80114b6:	6878      	ldr	r0, [r7, #4]
 80114b8:	f7ff f9ea 	bl	8010890 <USBD_SetClassConfig>
 80114bc:	4603      	mov	r3, r0
 80114be:	2b02      	cmp	r3, #2
 80114c0:	d104      	bne.n	80114cc <USBD_SetConfig+0xec>
 80114c2:	6839      	ldr	r1, [r7, #0]
 80114c4:	6878      	ldr	r0, [r7, #4]
 80114c6:	f000 f8f2 	bl	80116ae <USBD_CtlError>
 80114ca:	e012      	b.n	80114f2 <USBD_SetConfig+0x112>
 80114cc:	6878      	ldr	r0, [r7, #4]
 80114ce:	f000 f9b7 	bl	8011840 <USBD_CtlSendStatus>
 80114d2:	e00e      	b.n	80114f2 <USBD_SetConfig+0x112>
 80114d4:	6878      	ldr	r0, [r7, #4]
 80114d6:	f000 f9b3 	bl	8011840 <USBD_CtlSendStatus>
 80114da:	e00a      	b.n	80114f2 <USBD_SetConfig+0x112>
 80114dc:	6839      	ldr	r1, [r7, #0]
 80114de:	6878      	ldr	r0, [r7, #4]
 80114e0:	f000 f8e5 	bl	80116ae <USBD_CtlError>
 80114e4:	4b04      	ldr	r3, [pc, #16]	; (80114f8 <USBD_SetConfig+0x118>)
 80114e6:	781b      	ldrb	r3, [r3, #0]
 80114e8:	4619      	mov	r1, r3
 80114ea:	6878      	ldr	r0, [r7, #4]
 80114ec:	f7ff f9ef 	bl	80108ce <USBD_ClrClassConfig>
 80114f0:	bf00      	nop
 80114f2:	3708      	adds	r7, #8
 80114f4:	46bd      	mov	sp, r7
 80114f6:	bd80      	pop	{r7, pc}
 80114f8:	2000145c 	.word	0x2000145c

080114fc <USBD_GetConfig>:
 80114fc:	b580      	push	{r7, lr}
 80114fe:	b082      	sub	sp, #8
 8011500:	af00      	add	r7, sp, #0
 8011502:	6078      	str	r0, [r7, #4]
 8011504:	6039      	str	r1, [r7, #0]
 8011506:	683b      	ldr	r3, [r7, #0]
 8011508:	88db      	ldrh	r3, [r3, #6]
 801150a:	2b01      	cmp	r3, #1
 801150c:	d004      	beq.n	8011518 <USBD_GetConfig+0x1c>
 801150e:	6839      	ldr	r1, [r7, #0]
 8011510:	6878      	ldr	r0, [r7, #4]
 8011512:	f000 f8cc 	bl	80116ae <USBD_CtlError>
 8011516:	e021      	b.n	801155c <USBD_GetConfig+0x60>
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 801151e:	2b01      	cmp	r3, #1
 8011520:	db17      	blt.n	8011552 <USBD_GetConfig+0x56>
 8011522:	2b02      	cmp	r3, #2
 8011524:	dd02      	ble.n	801152c <USBD_GetConfig+0x30>
 8011526:	2b03      	cmp	r3, #3
 8011528:	d00b      	beq.n	8011542 <USBD_GetConfig+0x46>
 801152a:	e012      	b.n	8011552 <USBD_GetConfig+0x56>
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	2200      	movs	r2, #0
 8011530:	609a      	str	r2, [r3, #8]
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	3308      	adds	r3, #8
 8011536:	2201      	movs	r2, #1
 8011538:	4619      	mov	r1, r3
 801153a:	6878      	ldr	r0, [r7, #4]
 801153c:	f000 f922 	bl	8011784 <USBD_CtlSendData>
 8011540:	e00c      	b.n	801155c <USBD_GetConfig+0x60>
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	3304      	adds	r3, #4
 8011546:	2201      	movs	r2, #1
 8011548:	4619      	mov	r1, r3
 801154a:	6878      	ldr	r0, [r7, #4]
 801154c:	f000 f91a 	bl	8011784 <USBD_CtlSendData>
 8011550:	e004      	b.n	801155c <USBD_GetConfig+0x60>
 8011552:	6839      	ldr	r1, [r7, #0]
 8011554:	6878      	ldr	r0, [r7, #4]
 8011556:	f000 f8aa 	bl	80116ae <USBD_CtlError>
 801155a:	bf00      	nop
 801155c:	bf00      	nop
 801155e:	3708      	adds	r7, #8
 8011560:	46bd      	mov	sp, r7
 8011562:	bd80      	pop	{r7, pc}

08011564 <USBD_GetStatus>:
 8011564:	b580      	push	{r7, lr}
 8011566:	b082      	sub	sp, #8
 8011568:	af00      	add	r7, sp, #0
 801156a:	6078      	str	r0, [r7, #4]
 801156c:	6039      	str	r1, [r7, #0]
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8011574:	3b01      	subs	r3, #1
 8011576:	2b02      	cmp	r3, #2
 8011578:	d81e      	bhi.n	80115b8 <USBD_GetStatus+0x54>
 801157a:	683b      	ldr	r3, [r7, #0]
 801157c:	88db      	ldrh	r3, [r3, #6]
 801157e:	2b02      	cmp	r3, #2
 8011580:	d004      	beq.n	801158c <USBD_GetStatus+0x28>
 8011582:	6839      	ldr	r1, [r7, #0]
 8011584:	6878      	ldr	r0, [r7, #4]
 8011586:	f000 f892 	bl	80116ae <USBD_CtlError>
 801158a:	e01a      	b.n	80115c2 <USBD_GetStatus+0x5e>
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	2201      	movs	r2, #1
 8011590:	60da      	str	r2, [r3, #12]
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8011598:	2b00      	cmp	r3, #0
 801159a:	d005      	beq.n	80115a8 <USBD_GetStatus+0x44>
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	68db      	ldr	r3, [r3, #12]
 80115a0:	f043 0202 	orr.w	r2, r3, #2
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	60da      	str	r2, [r3, #12]
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	330c      	adds	r3, #12
 80115ac:	2202      	movs	r2, #2
 80115ae:	4619      	mov	r1, r3
 80115b0:	6878      	ldr	r0, [r7, #4]
 80115b2:	f000 f8e7 	bl	8011784 <USBD_CtlSendData>
 80115b6:	e004      	b.n	80115c2 <USBD_GetStatus+0x5e>
 80115b8:	6839      	ldr	r1, [r7, #0]
 80115ba:	6878      	ldr	r0, [r7, #4]
 80115bc:	f000 f877 	bl	80116ae <USBD_CtlError>
 80115c0:	bf00      	nop
 80115c2:	bf00      	nop
 80115c4:	3708      	adds	r7, #8
 80115c6:	46bd      	mov	sp, r7
 80115c8:	bd80      	pop	{r7, pc}

080115ca <USBD_SetFeature>:
 80115ca:	b580      	push	{r7, lr}
 80115cc:	b082      	sub	sp, #8
 80115ce:	af00      	add	r7, sp, #0
 80115d0:	6078      	str	r0, [r7, #4]
 80115d2:	6039      	str	r1, [r7, #0]
 80115d4:	683b      	ldr	r3, [r7, #0]
 80115d6:	885b      	ldrh	r3, [r3, #2]
 80115d8:	2b01      	cmp	r3, #1
 80115da:	d106      	bne.n	80115ea <USBD_SetFeature+0x20>
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	2201      	movs	r2, #1
 80115e0:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
 80115e4:	6878      	ldr	r0, [r7, #4]
 80115e6:	f000 f92b 	bl	8011840 <USBD_CtlSendStatus>
 80115ea:	bf00      	nop
 80115ec:	3708      	adds	r7, #8
 80115ee:	46bd      	mov	sp, r7
 80115f0:	bd80      	pop	{r7, pc}

080115f2 <USBD_ClrFeature>:
 80115f2:	b580      	push	{r7, lr}
 80115f4:	b082      	sub	sp, #8
 80115f6:	af00      	add	r7, sp, #0
 80115f8:	6078      	str	r0, [r7, #4]
 80115fa:	6039      	str	r1, [r7, #0]
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8011602:	3b01      	subs	r3, #1
 8011604:	2b02      	cmp	r3, #2
 8011606:	d80b      	bhi.n	8011620 <USBD_ClrFeature+0x2e>
 8011608:	683b      	ldr	r3, [r7, #0]
 801160a:	885b      	ldrh	r3, [r3, #2]
 801160c:	2b01      	cmp	r3, #1
 801160e:	d10c      	bne.n	801162a <USBD_ClrFeature+0x38>
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	2200      	movs	r2, #0
 8011614:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
 8011618:	6878      	ldr	r0, [r7, #4]
 801161a:	f000 f911 	bl	8011840 <USBD_CtlSendStatus>
 801161e:	e004      	b.n	801162a <USBD_ClrFeature+0x38>
 8011620:	6839      	ldr	r1, [r7, #0]
 8011622:	6878      	ldr	r0, [r7, #4]
 8011624:	f000 f843 	bl	80116ae <USBD_CtlError>
 8011628:	e000      	b.n	801162c <USBD_ClrFeature+0x3a>
 801162a:	bf00      	nop
 801162c:	bf00      	nop
 801162e:	3708      	adds	r7, #8
 8011630:	46bd      	mov	sp, r7
 8011632:	bd80      	pop	{r7, pc}

08011634 <USBD_ParseSetupRequest>:
 8011634:	b480      	push	{r7}
 8011636:	b083      	sub	sp, #12
 8011638:	af00      	add	r7, sp, #0
 801163a:	6078      	str	r0, [r7, #4]
 801163c:	6039      	str	r1, [r7, #0]
 801163e:	683b      	ldr	r3, [r7, #0]
 8011640:	781a      	ldrb	r2, [r3, #0]
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	701a      	strb	r2, [r3, #0]
 8011646:	683b      	ldr	r3, [r7, #0]
 8011648:	785a      	ldrb	r2, [r3, #1]
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	705a      	strb	r2, [r3, #1]
 801164e:	683b      	ldr	r3, [r7, #0]
 8011650:	3302      	adds	r3, #2
 8011652:	781b      	ldrb	r3, [r3, #0]
 8011654:	b29a      	uxth	r2, r3
 8011656:	683b      	ldr	r3, [r7, #0]
 8011658:	3303      	adds	r3, #3
 801165a:	781b      	ldrb	r3, [r3, #0]
 801165c:	b29b      	uxth	r3, r3
 801165e:	021b      	lsls	r3, r3, #8
 8011660:	b29b      	uxth	r3, r3
 8011662:	4413      	add	r3, r2
 8011664:	b29a      	uxth	r2, r3
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	805a      	strh	r2, [r3, #2]
 801166a:	683b      	ldr	r3, [r7, #0]
 801166c:	3304      	adds	r3, #4
 801166e:	781b      	ldrb	r3, [r3, #0]
 8011670:	b29a      	uxth	r2, r3
 8011672:	683b      	ldr	r3, [r7, #0]
 8011674:	3305      	adds	r3, #5
 8011676:	781b      	ldrb	r3, [r3, #0]
 8011678:	b29b      	uxth	r3, r3
 801167a:	021b      	lsls	r3, r3, #8
 801167c:	b29b      	uxth	r3, r3
 801167e:	4413      	add	r3, r2
 8011680:	b29a      	uxth	r2, r3
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	809a      	strh	r2, [r3, #4]
 8011686:	683b      	ldr	r3, [r7, #0]
 8011688:	3306      	adds	r3, #6
 801168a:	781b      	ldrb	r3, [r3, #0]
 801168c:	b29a      	uxth	r2, r3
 801168e:	683b      	ldr	r3, [r7, #0]
 8011690:	3307      	adds	r3, #7
 8011692:	781b      	ldrb	r3, [r3, #0]
 8011694:	b29b      	uxth	r3, r3
 8011696:	021b      	lsls	r3, r3, #8
 8011698:	b29b      	uxth	r3, r3
 801169a:	4413      	add	r3, r2
 801169c:	b29a      	uxth	r2, r3
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	80da      	strh	r2, [r3, #6]
 80116a2:	bf00      	nop
 80116a4:	370c      	adds	r7, #12
 80116a6:	46bd      	mov	sp, r7
 80116a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ac:	4770      	bx	lr

080116ae <USBD_CtlError>:
 80116ae:	b580      	push	{r7, lr}
 80116b0:	b082      	sub	sp, #8
 80116b2:	af00      	add	r7, sp, #0
 80116b4:	6078      	str	r0, [r7, #4]
 80116b6:	6039      	str	r1, [r7, #0]
 80116b8:	2180      	movs	r1, #128	; 0x80
 80116ba:	6878      	ldr	r0, [r7, #4]
 80116bc:	f003 feb0 	bl	8015420 <USBD_LL_StallEP>
 80116c0:	2100      	movs	r1, #0
 80116c2:	6878      	ldr	r0, [r7, #4]
 80116c4:	f003 feac 	bl	8015420 <USBD_LL_StallEP>
 80116c8:	bf00      	nop
 80116ca:	3708      	adds	r7, #8
 80116cc:	46bd      	mov	sp, r7
 80116ce:	bd80      	pop	{r7, pc}

080116d0 <USBD_GetString>:
 80116d0:	b580      	push	{r7, lr}
 80116d2:	b086      	sub	sp, #24
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	60f8      	str	r0, [r7, #12]
 80116d8:	60b9      	str	r1, [r7, #8]
 80116da:	607a      	str	r2, [r7, #4]
 80116dc:	2300      	movs	r3, #0
 80116de:	75fb      	strb	r3, [r7, #23]
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d032      	beq.n	801174c <USBD_GetString+0x7c>
 80116e6:	68f8      	ldr	r0, [r7, #12]
 80116e8:	f000 f834 	bl	8011754 <USBD_GetLen>
 80116ec:	4603      	mov	r3, r0
 80116ee:	3301      	adds	r3, #1
 80116f0:	b29b      	uxth	r3, r3
 80116f2:	005b      	lsls	r3, r3, #1
 80116f4:	b29a      	uxth	r2, r3
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	801a      	strh	r2, [r3, #0]
 80116fa:	7dfb      	ldrb	r3, [r7, #23]
 80116fc:	1c5a      	adds	r2, r3, #1
 80116fe:	75fa      	strb	r2, [r7, #23]
 8011700:	461a      	mov	r2, r3
 8011702:	68bb      	ldr	r3, [r7, #8]
 8011704:	4413      	add	r3, r2
 8011706:	687a      	ldr	r2, [r7, #4]
 8011708:	7812      	ldrb	r2, [r2, #0]
 801170a:	701a      	strb	r2, [r3, #0]
 801170c:	7dfb      	ldrb	r3, [r7, #23]
 801170e:	1c5a      	adds	r2, r3, #1
 8011710:	75fa      	strb	r2, [r7, #23]
 8011712:	461a      	mov	r2, r3
 8011714:	68bb      	ldr	r3, [r7, #8]
 8011716:	4413      	add	r3, r2
 8011718:	2203      	movs	r2, #3
 801171a:	701a      	strb	r2, [r3, #0]
 801171c:	e012      	b.n	8011744 <USBD_GetString+0x74>
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	1c5a      	adds	r2, r3, #1
 8011722:	60fa      	str	r2, [r7, #12]
 8011724:	7dfa      	ldrb	r2, [r7, #23]
 8011726:	1c51      	adds	r1, r2, #1
 8011728:	75f9      	strb	r1, [r7, #23]
 801172a:	4611      	mov	r1, r2
 801172c:	68ba      	ldr	r2, [r7, #8]
 801172e:	440a      	add	r2, r1
 8011730:	781b      	ldrb	r3, [r3, #0]
 8011732:	7013      	strb	r3, [r2, #0]
 8011734:	7dfb      	ldrb	r3, [r7, #23]
 8011736:	1c5a      	adds	r2, r3, #1
 8011738:	75fa      	strb	r2, [r7, #23]
 801173a:	461a      	mov	r2, r3
 801173c:	68bb      	ldr	r3, [r7, #8]
 801173e:	4413      	add	r3, r2
 8011740:	2200      	movs	r2, #0
 8011742:	701a      	strb	r2, [r3, #0]
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	781b      	ldrb	r3, [r3, #0]
 8011748:	2b00      	cmp	r3, #0
 801174a:	d1e8      	bne.n	801171e <USBD_GetString+0x4e>
 801174c:	bf00      	nop
 801174e:	3718      	adds	r7, #24
 8011750:	46bd      	mov	sp, r7
 8011752:	bd80      	pop	{r7, pc}

08011754 <USBD_GetLen>:
 8011754:	b480      	push	{r7}
 8011756:	b085      	sub	sp, #20
 8011758:	af00      	add	r7, sp, #0
 801175a:	6078      	str	r0, [r7, #4]
 801175c:	2300      	movs	r3, #0
 801175e:	73fb      	strb	r3, [r7, #15]
 8011760:	e005      	b.n	801176e <USBD_GetLen+0x1a>
 8011762:	7bfb      	ldrb	r3, [r7, #15]
 8011764:	3301      	adds	r3, #1
 8011766:	73fb      	strb	r3, [r7, #15]
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	3301      	adds	r3, #1
 801176c:	607b      	str	r3, [r7, #4]
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	781b      	ldrb	r3, [r3, #0]
 8011772:	2b00      	cmp	r3, #0
 8011774:	d1f5      	bne.n	8011762 <USBD_GetLen+0xe>
 8011776:	7bfb      	ldrb	r3, [r7, #15]
 8011778:	4618      	mov	r0, r3
 801177a:	3714      	adds	r7, #20
 801177c:	46bd      	mov	sp, r7
 801177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011782:	4770      	bx	lr

08011784 <USBD_CtlSendData>:
 8011784:	b580      	push	{r7, lr}
 8011786:	b084      	sub	sp, #16
 8011788:	af00      	add	r7, sp, #0
 801178a:	60f8      	str	r0, [r7, #12]
 801178c:	60b9      	str	r1, [r7, #8]
 801178e:	4613      	mov	r3, r2
 8011790:	80fb      	strh	r3, [r7, #6]
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	2202      	movs	r2, #2
 8011796:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
 801179a:	88fa      	ldrh	r2, [r7, #6]
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	61da      	str	r2, [r3, #28]
 80117a0:	88fa      	ldrh	r2, [r7, #6]
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	621a      	str	r2, [r3, #32]
 80117a6:	88fb      	ldrh	r3, [r7, #6]
 80117a8:	68ba      	ldr	r2, [r7, #8]
 80117aa:	2100      	movs	r1, #0
 80117ac:	68f8      	ldr	r0, [r7, #12]
 80117ae:	f003 fec0 	bl	8015532 <USBD_LL_Transmit>
 80117b2:	2300      	movs	r3, #0
 80117b4:	4618      	mov	r0, r3
 80117b6:	3710      	adds	r7, #16
 80117b8:	46bd      	mov	sp, r7
 80117ba:	bd80      	pop	{r7, pc}

080117bc <USBD_CtlContinueSendData>:
 80117bc:	b580      	push	{r7, lr}
 80117be:	b084      	sub	sp, #16
 80117c0:	af00      	add	r7, sp, #0
 80117c2:	60f8      	str	r0, [r7, #12]
 80117c4:	60b9      	str	r1, [r7, #8]
 80117c6:	4613      	mov	r3, r2
 80117c8:	80fb      	strh	r3, [r7, #6]
 80117ca:	88fb      	ldrh	r3, [r7, #6]
 80117cc:	68ba      	ldr	r2, [r7, #8]
 80117ce:	2100      	movs	r1, #0
 80117d0:	68f8      	ldr	r0, [r7, #12]
 80117d2:	f003 feae 	bl	8015532 <USBD_LL_Transmit>
 80117d6:	2300      	movs	r3, #0
 80117d8:	4618      	mov	r0, r3
 80117da:	3710      	adds	r7, #16
 80117dc:	46bd      	mov	sp, r7
 80117de:	bd80      	pop	{r7, pc}

080117e0 <USBD_CtlPrepareRx>:
 80117e0:	b580      	push	{r7, lr}
 80117e2:	b084      	sub	sp, #16
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	60f8      	str	r0, [r7, #12]
 80117e8:	60b9      	str	r1, [r7, #8]
 80117ea:	4613      	mov	r3, r2
 80117ec:	80fb      	strh	r3, [r7, #6]
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	2203      	movs	r2, #3
 80117f2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
 80117f6:	88fa      	ldrh	r2, [r7, #6]
 80117f8:	68fb      	ldr	r3, [r7, #12]
 80117fa:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 80117fe:	88fa      	ldrh	r2, [r7, #6]
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
 8011806:	88fb      	ldrh	r3, [r7, #6]
 8011808:	68ba      	ldr	r2, [r7, #8]
 801180a:	2100      	movs	r1, #0
 801180c:	68f8      	ldr	r0, [r7, #12]
 801180e:	f003 feb3 	bl	8015578 <USBD_LL_PrepareReceive>
 8011812:	2300      	movs	r3, #0
 8011814:	4618      	mov	r0, r3
 8011816:	3710      	adds	r7, #16
 8011818:	46bd      	mov	sp, r7
 801181a:	bd80      	pop	{r7, pc}

0801181c <USBD_CtlContinueRx>:
 801181c:	b580      	push	{r7, lr}
 801181e:	b084      	sub	sp, #16
 8011820:	af00      	add	r7, sp, #0
 8011822:	60f8      	str	r0, [r7, #12]
 8011824:	60b9      	str	r1, [r7, #8]
 8011826:	4613      	mov	r3, r2
 8011828:	80fb      	strh	r3, [r7, #6]
 801182a:	88fb      	ldrh	r3, [r7, #6]
 801182c:	68ba      	ldr	r2, [r7, #8]
 801182e:	2100      	movs	r1, #0
 8011830:	68f8      	ldr	r0, [r7, #12]
 8011832:	f003 fea1 	bl	8015578 <USBD_LL_PrepareReceive>
 8011836:	2300      	movs	r3, #0
 8011838:	4618      	mov	r0, r3
 801183a:	3710      	adds	r7, #16
 801183c:	46bd      	mov	sp, r7
 801183e:	bd80      	pop	{r7, pc}

08011840 <USBD_CtlSendStatus>:
 8011840:	b580      	push	{r7, lr}
 8011842:	b082      	sub	sp, #8
 8011844:	af00      	add	r7, sp, #0
 8011846:	6078      	str	r0, [r7, #4]
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	2204      	movs	r2, #4
 801184c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
 8011850:	2300      	movs	r3, #0
 8011852:	2200      	movs	r2, #0
 8011854:	2100      	movs	r1, #0
 8011856:	6878      	ldr	r0, [r7, #4]
 8011858:	f003 fe6b 	bl	8015532 <USBD_LL_Transmit>
 801185c:	2300      	movs	r3, #0
 801185e:	4618      	mov	r0, r3
 8011860:	3708      	adds	r7, #8
 8011862:	46bd      	mov	sp, r7
 8011864:	bd80      	pop	{r7, pc}

08011866 <USBD_CtlReceiveStatus>:
 8011866:	b580      	push	{r7, lr}
 8011868:	b082      	sub	sp, #8
 801186a:	af00      	add	r7, sp, #0
 801186c:	6078      	str	r0, [r7, #4]
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	2205      	movs	r2, #5
 8011872:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
 8011876:	2300      	movs	r3, #0
 8011878:	2200      	movs	r2, #0
 801187a:	2100      	movs	r1, #0
 801187c:	6878      	ldr	r0, [r7, #4]
 801187e:	f003 fe7b 	bl	8015578 <USBD_LL_PrepareReceive>
 8011882:	2300      	movs	r3, #0
 8011884:	4618      	mov	r0, r3
 8011886:	3708      	adds	r7, #8
 8011888:	46bd      	mov	sp, r7
 801188a:	bd80      	pop	{r7, pc}

0801188c <makeFreeRtosPriority>:
 801188c:	b480      	push	{r7}
 801188e:	b085      	sub	sp, #20
 8011890:	af00      	add	r7, sp, #0
 8011892:	4603      	mov	r3, r0
 8011894:	80fb      	strh	r3, [r7, #6]
 8011896:	2300      	movs	r3, #0
 8011898:	60fb      	str	r3, [r7, #12]
 801189a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801189e:	2b84      	cmp	r3, #132	; 0x84
 80118a0:	d005      	beq.n	80118ae <makeFreeRtosPriority+0x22>
 80118a2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	4413      	add	r3, r2
 80118aa:	3303      	adds	r3, #3
 80118ac:	60fb      	str	r3, [r7, #12]
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	4618      	mov	r0, r3
 80118b2:	3714      	adds	r7, #20
 80118b4:	46bd      	mov	sp, r7
 80118b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ba:	4770      	bx	lr

080118bc <inHandlerMode>:
 80118bc:	b480      	push	{r7}
 80118be:	b083      	sub	sp, #12
 80118c0:	af00      	add	r7, sp, #0
 80118c2:	f3ef 8305 	mrs	r3, IPSR
 80118c6:	607b      	str	r3, [r7, #4]
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	bf14      	ite	ne
 80118ce:	2301      	movne	r3, #1
 80118d0:	2300      	moveq	r3, #0
 80118d2:	b2db      	uxtb	r3, r3
 80118d4:	4618      	mov	r0, r3
 80118d6:	370c      	adds	r7, #12
 80118d8:	46bd      	mov	sp, r7
 80118da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118de:	4770      	bx	lr

080118e0 <osKernelStart>:
 80118e0:	b580      	push	{r7, lr}
 80118e2:	af00      	add	r7, sp, #0
 80118e4:	f001 fd56 	bl	8013394 <vTaskStartScheduler>
 80118e8:	2300      	movs	r3, #0
 80118ea:	4618      	mov	r0, r3
 80118ec:	bd80      	pop	{r7, pc}

080118ee <osThreadCreate>:
 80118ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80118f0:	b089      	sub	sp, #36	; 0x24
 80118f2:	af04      	add	r7, sp, #16
 80118f4:	6078      	str	r0, [r7, #4]
 80118f6:	6039      	str	r1, [r7, #0]
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	695b      	ldr	r3, [r3, #20]
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d020      	beq.n	8011942 <osThreadCreate+0x54>
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	699b      	ldr	r3, [r3, #24]
 8011904:	2b00      	cmp	r3, #0
 8011906:	d01c      	beq.n	8011942 <osThreadCreate+0x54>
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	685c      	ldr	r4, [r3, #4]
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	681d      	ldr	r5, [r3, #0]
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	691e      	ldr	r6, [r3, #16]
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801191a:	4618      	mov	r0, r3
 801191c:	f7ff ffb6 	bl	801188c <makeFreeRtosPriority>
 8011920:	4601      	mov	r1, r0
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	695b      	ldr	r3, [r3, #20]
 8011926:	687a      	ldr	r2, [r7, #4]
 8011928:	6992      	ldr	r2, [r2, #24]
 801192a:	9202      	str	r2, [sp, #8]
 801192c:	9301      	str	r3, [sp, #4]
 801192e:	9100      	str	r1, [sp, #0]
 8011930:	683b      	ldr	r3, [r7, #0]
 8011932:	4632      	mov	r2, r6
 8011934:	4629      	mov	r1, r5
 8011936:	4620      	mov	r0, r4
 8011938:	f001 fb71 	bl	801301e <xTaskCreateStatic>
 801193c:	4603      	mov	r3, r0
 801193e:	60fb      	str	r3, [r7, #12]
 8011940:	e01c      	b.n	801197c <osThreadCreate+0x8e>
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	685c      	ldr	r4, [r3, #4]
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	681d      	ldr	r5, [r3, #0]
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	691b      	ldr	r3, [r3, #16]
 801194e:	b29e      	uxth	r6, r3
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011956:	4618      	mov	r0, r3
 8011958:	f7ff ff98 	bl	801188c <makeFreeRtosPriority>
 801195c:	4602      	mov	r2, r0
 801195e:	f107 030c 	add.w	r3, r7, #12
 8011962:	9301      	str	r3, [sp, #4]
 8011964:	9200      	str	r2, [sp, #0]
 8011966:	683b      	ldr	r3, [r7, #0]
 8011968:	4632      	mov	r2, r6
 801196a:	4629      	mov	r1, r5
 801196c:	4620      	mov	r0, r4
 801196e:	f001 fbaf 	bl	80130d0 <xTaskCreate>
 8011972:	4603      	mov	r3, r0
 8011974:	2b01      	cmp	r3, #1
 8011976:	d001      	beq.n	801197c <osThreadCreate+0x8e>
 8011978:	2300      	movs	r3, #0
 801197a:	e000      	b.n	801197e <osThreadCreate+0x90>
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	4618      	mov	r0, r3
 8011980:	3714      	adds	r7, #20
 8011982:	46bd      	mov	sp, r7
 8011984:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011986 <osDelay>:
 8011986:	b580      	push	{r7, lr}
 8011988:	b084      	sub	sp, #16
 801198a:	af00      	add	r7, sp, #0
 801198c:	6078      	str	r0, [r7, #4]
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	60fb      	str	r3, [r7, #12]
 8011992:	68fb      	ldr	r3, [r7, #12]
 8011994:	2b00      	cmp	r3, #0
 8011996:	d001      	beq.n	801199c <osDelay+0x16>
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	e000      	b.n	801199e <osDelay+0x18>
 801199c:	2301      	movs	r3, #1
 801199e:	4618      	mov	r0, r3
 80119a0:	f001 fcc4 	bl	801332c <vTaskDelay>
 80119a4:	2300      	movs	r3, #0
 80119a6:	4618      	mov	r0, r3
 80119a8:	3710      	adds	r7, #16
 80119aa:	46bd      	mov	sp, r7
 80119ac:	bd80      	pop	{r7, pc}
	...

080119b0 <osSignalSet>:
 80119b0:	b580      	push	{r7, lr}
 80119b2:	b086      	sub	sp, #24
 80119b4:	af02      	add	r7, sp, #8
 80119b6:	6078      	str	r0, [r7, #4]
 80119b8:	6039      	str	r1, [r7, #0]
 80119ba:	2300      	movs	r3, #0
 80119bc:	60fb      	str	r3, [r7, #12]
 80119be:	2300      	movs	r3, #0
 80119c0:	60bb      	str	r3, [r7, #8]
 80119c2:	f7ff ff7b 	bl	80118bc <inHandlerMode>
 80119c6:	4603      	mov	r3, r0
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d01c      	beq.n	8011a06 <osSignalSet+0x56>
 80119cc:	6839      	ldr	r1, [r7, #0]
 80119ce:	f107 0208 	add.w	r2, r7, #8
 80119d2:	f107 030c 	add.w	r3, r7, #12
 80119d6:	9300      	str	r3, [sp, #0]
 80119d8:	4613      	mov	r3, r2
 80119da:	2201      	movs	r2, #1
 80119dc:	6878      	ldr	r0, [r7, #4]
 80119de:	f002 fbab 	bl	8014138 <xTaskGenericNotifyFromISR>
 80119e2:	4603      	mov	r3, r0
 80119e4:	2b01      	cmp	r3, #1
 80119e6:	d002      	beq.n	80119ee <osSignalSet+0x3e>
 80119e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80119ec:	e019      	b.n	8011a22 <osSignalSet+0x72>
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d015      	beq.n	8011a20 <osSignalSet+0x70>
 80119f4:	4b0d      	ldr	r3, [pc, #52]	; (8011a2c <osSignalSet+0x7c>)
 80119f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80119fa:	601a      	str	r2, [r3, #0]
 80119fc:	f3bf 8f4f 	dsb	sy
 8011a00:	f3bf 8f6f 	isb	sy
 8011a04:	e00c      	b.n	8011a20 <osSignalSet+0x70>
 8011a06:	6839      	ldr	r1, [r7, #0]
 8011a08:	f107 0308 	add.w	r3, r7, #8
 8011a0c:	2201      	movs	r2, #1
 8011a0e:	6878      	ldr	r0, [r7, #4]
 8011a10:	f002 faf2 	bl	8013ff8 <xTaskGenericNotify>
 8011a14:	4603      	mov	r3, r0
 8011a16:	2b01      	cmp	r3, #1
 8011a18:	d002      	beq.n	8011a20 <osSignalSet+0x70>
 8011a1a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011a1e:	e000      	b.n	8011a22 <osSignalSet+0x72>
 8011a20:	68bb      	ldr	r3, [r7, #8]
 8011a22:	4618      	mov	r0, r3
 8011a24:	3710      	adds	r7, #16
 8011a26:	46bd      	mov	sp, r7
 8011a28:	bd80      	pop	{r7, pc}
 8011a2a:	bf00      	nop
 8011a2c:	e000ed04 	.word	0xe000ed04

08011a30 <osSignalWait>:
 8011a30:	b590      	push	{r4, r7, lr}
 8011a32:	b089      	sub	sp, #36	; 0x24
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	60f8      	str	r0, [r7, #12]
 8011a38:	60b9      	str	r1, [r7, #8]
 8011a3a:	607a      	str	r2, [r7, #4]
 8011a3c:	2300      	movs	r3, #0
 8011a3e:	617b      	str	r3, [r7, #20]
 8011a40:	2300      	movs	r3, #0
 8011a42:	61fb      	str	r3, [r7, #28]
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a4a:	d103      	bne.n	8011a54 <osSignalWait+0x24>
 8011a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8011a50:	61fb      	str	r3, [r7, #28]
 8011a52:	e009      	b.n	8011a68 <osSignalWait+0x38>
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d006      	beq.n	8011a68 <osSignalWait+0x38>
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	61fb      	str	r3, [r7, #28]
 8011a5e:	69fb      	ldr	r3, [r7, #28]
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d101      	bne.n	8011a68 <osSignalWait+0x38>
 8011a64:	2301      	movs	r3, #1
 8011a66:	61fb      	str	r3, [r7, #28]
 8011a68:	f7ff ff28 	bl	80118bc <inHandlerMode>
 8011a6c:	4603      	mov	r3, r0
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d002      	beq.n	8011a78 <osSignalWait+0x48>
 8011a72:	2382      	movs	r3, #130	; 0x82
 8011a74:	613b      	str	r3, [r7, #16]
 8011a76:	e01b      	b.n	8011ab0 <osSignalWait+0x80>
 8011a78:	68b9      	ldr	r1, [r7, #8]
 8011a7a:	f107 0310 	add.w	r3, r7, #16
 8011a7e:	1d1a      	adds	r2, r3, #4
 8011a80:	69fb      	ldr	r3, [r7, #28]
 8011a82:	2000      	movs	r0, #0
 8011a84:	f002 fa5e 	bl	8013f44 <xTaskNotifyWait>
 8011a88:	4603      	mov	r3, r0
 8011a8a:	2b01      	cmp	r3, #1
 8011a8c:	d008      	beq.n	8011aa0 <osSignalWait+0x70>
 8011a8e:	69fb      	ldr	r3, [r7, #28]
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d102      	bne.n	8011a9a <osSignalWait+0x6a>
 8011a94:	2300      	movs	r3, #0
 8011a96:	613b      	str	r3, [r7, #16]
 8011a98:	e00a      	b.n	8011ab0 <osSignalWait+0x80>
 8011a9a:	2340      	movs	r3, #64	; 0x40
 8011a9c:	613b      	str	r3, [r7, #16]
 8011a9e:	e007      	b.n	8011ab0 <osSignalWait+0x80>
 8011aa0:	697b      	ldr	r3, [r7, #20]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	da02      	bge.n	8011aac <osSignalWait+0x7c>
 8011aa6:	2386      	movs	r3, #134	; 0x86
 8011aa8:	613b      	str	r3, [r7, #16]
 8011aaa:	e001      	b.n	8011ab0 <osSignalWait+0x80>
 8011aac:	2308      	movs	r3, #8
 8011aae:	613b      	str	r3, [r7, #16]
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	461c      	mov	r4, r3
 8011ab4:	f107 0310 	add.w	r3, r7, #16
 8011ab8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011abc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011ac0:	68f8      	ldr	r0, [r7, #12]
 8011ac2:	3724      	adds	r7, #36	; 0x24
 8011ac4:	46bd      	mov	sp, r7
 8011ac6:	bd90      	pop	{r4, r7, pc}

08011ac8 <osMutexCreate>:
 8011ac8:	b580      	push	{r7, lr}
 8011aca:	b082      	sub	sp, #8
 8011acc:	af00      	add	r7, sp, #0
 8011ace:	6078      	str	r0, [r7, #4]
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	685b      	ldr	r3, [r3, #4]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d007      	beq.n	8011ae8 <osMutexCreate+0x20>
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	685b      	ldr	r3, [r3, #4]
 8011adc:	4619      	mov	r1, r3
 8011ade:	2001      	movs	r0, #1
 8011ae0:	f000 fce0 	bl	80124a4 <xQueueCreateMutexStatic>
 8011ae4:	4603      	mov	r3, r0
 8011ae6:	e003      	b.n	8011af0 <osMutexCreate+0x28>
 8011ae8:	2001      	movs	r0, #1
 8011aea:	f000 fcc3 	bl	8012474 <xQueueCreateMutex>
 8011aee:	4603      	mov	r3, r0
 8011af0:	4618      	mov	r0, r3
 8011af2:	3708      	adds	r7, #8
 8011af4:	46bd      	mov	sp, r7
 8011af6:	bd80      	pop	{r7, pc}

08011af8 <osMutexWait>:
 8011af8:	b580      	push	{r7, lr}
 8011afa:	b084      	sub	sp, #16
 8011afc:	af00      	add	r7, sp, #0
 8011afe:	6078      	str	r0, [r7, #4]
 8011b00:	6039      	str	r1, [r7, #0]
 8011b02:	2300      	movs	r3, #0
 8011b04:	60bb      	str	r3, [r7, #8]
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d101      	bne.n	8011b10 <osMutexWait+0x18>
 8011b0c:	2380      	movs	r3, #128	; 0x80
 8011b0e:	e03a      	b.n	8011b86 <osMutexWait+0x8e>
 8011b10:	2300      	movs	r3, #0
 8011b12:	60fb      	str	r3, [r7, #12]
 8011b14:	683b      	ldr	r3, [r7, #0]
 8011b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b1a:	d103      	bne.n	8011b24 <osMutexWait+0x2c>
 8011b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8011b20:	60fb      	str	r3, [r7, #12]
 8011b22:	e009      	b.n	8011b38 <osMutexWait+0x40>
 8011b24:	683b      	ldr	r3, [r7, #0]
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d006      	beq.n	8011b38 <osMutexWait+0x40>
 8011b2a:	683b      	ldr	r3, [r7, #0]
 8011b2c:	60fb      	str	r3, [r7, #12]
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d101      	bne.n	8011b38 <osMutexWait+0x40>
 8011b34:	2301      	movs	r3, #1
 8011b36:	60fb      	str	r3, [r7, #12]
 8011b38:	f7ff fec0 	bl	80118bc <inHandlerMode>
 8011b3c:	4603      	mov	r3, r0
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d017      	beq.n	8011b72 <osMutexWait+0x7a>
 8011b42:	f107 0308 	add.w	r3, r7, #8
 8011b46:	461a      	mov	r2, r3
 8011b48:	2100      	movs	r1, #0
 8011b4a:	6878      	ldr	r0, [r7, #4]
 8011b4c:	f001 f8c2 	bl	8012cd4 <xQueueReceiveFromISR>
 8011b50:	4603      	mov	r3, r0
 8011b52:	2b01      	cmp	r3, #1
 8011b54:	d001      	beq.n	8011b5a <osMutexWait+0x62>
 8011b56:	23ff      	movs	r3, #255	; 0xff
 8011b58:	e015      	b.n	8011b86 <osMutexWait+0x8e>
 8011b5a:	68bb      	ldr	r3, [r7, #8]
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d011      	beq.n	8011b84 <osMutexWait+0x8c>
 8011b60:	4b0b      	ldr	r3, [pc, #44]	; (8011b90 <osMutexWait+0x98>)
 8011b62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b66:	601a      	str	r2, [r3, #0]
 8011b68:	f3bf 8f4f 	dsb	sy
 8011b6c:	f3bf 8f6f 	isb	sy
 8011b70:	e008      	b.n	8011b84 <osMutexWait+0x8c>
 8011b72:	68f9      	ldr	r1, [r7, #12]
 8011b74:	6878      	ldr	r0, [r7, #4]
 8011b76:	f000 ffa5 	bl	8012ac4 <xQueueSemaphoreTake>
 8011b7a:	4603      	mov	r3, r0
 8011b7c:	2b01      	cmp	r3, #1
 8011b7e:	d001      	beq.n	8011b84 <osMutexWait+0x8c>
 8011b80:	23ff      	movs	r3, #255	; 0xff
 8011b82:	e000      	b.n	8011b86 <osMutexWait+0x8e>
 8011b84:	2300      	movs	r3, #0
 8011b86:	4618      	mov	r0, r3
 8011b88:	3710      	adds	r7, #16
 8011b8a:	46bd      	mov	sp, r7
 8011b8c:	bd80      	pop	{r7, pc}
 8011b8e:	bf00      	nop
 8011b90:	e000ed04 	.word	0xe000ed04

08011b94 <osMutexRelease>:
 8011b94:	b580      	push	{r7, lr}
 8011b96:	b084      	sub	sp, #16
 8011b98:	af00      	add	r7, sp, #0
 8011b9a:	6078      	str	r0, [r7, #4]
 8011b9c:	2300      	movs	r3, #0
 8011b9e:	60fb      	str	r3, [r7, #12]
 8011ba0:	2300      	movs	r3, #0
 8011ba2:	60bb      	str	r3, [r7, #8]
 8011ba4:	f7ff fe8a 	bl	80118bc <inHandlerMode>
 8011ba8:	4603      	mov	r3, r0
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d016      	beq.n	8011bdc <osMutexRelease+0x48>
 8011bae:	f107 0308 	add.w	r3, r7, #8
 8011bb2:	4619      	mov	r1, r3
 8011bb4:	6878      	ldr	r0, [r7, #4]
 8011bb6:	f000 fe1f 	bl	80127f8 <xQueueGiveFromISR>
 8011bba:	4603      	mov	r3, r0
 8011bbc:	2b01      	cmp	r3, #1
 8011bbe:	d001      	beq.n	8011bc4 <osMutexRelease+0x30>
 8011bc0:	23ff      	movs	r3, #255	; 0xff
 8011bc2:	e017      	b.n	8011bf4 <osMutexRelease+0x60>
 8011bc4:	68bb      	ldr	r3, [r7, #8]
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d013      	beq.n	8011bf2 <osMutexRelease+0x5e>
 8011bca:	4b0c      	ldr	r3, [pc, #48]	; (8011bfc <osMutexRelease+0x68>)
 8011bcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011bd0:	601a      	str	r2, [r3, #0]
 8011bd2:	f3bf 8f4f 	dsb	sy
 8011bd6:	f3bf 8f6f 	isb	sy
 8011bda:	e00a      	b.n	8011bf2 <osMutexRelease+0x5e>
 8011bdc:	2300      	movs	r3, #0
 8011bde:	2200      	movs	r2, #0
 8011be0:	2100      	movs	r1, #0
 8011be2:	6878      	ldr	r0, [r7, #4]
 8011be4:	f000 fc7a 	bl	80124dc <xQueueGenericSend>
 8011be8:	4603      	mov	r3, r0
 8011bea:	2b01      	cmp	r3, #1
 8011bec:	d001      	beq.n	8011bf2 <osMutexRelease+0x5e>
 8011bee:	23ff      	movs	r3, #255	; 0xff
 8011bf0:	60fb      	str	r3, [r7, #12]
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	4618      	mov	r0, r3
 8011bf6:	3710      	adds	r7, #16
 8011bf8:	46bd      	mov	sp, r7
 8011bfa:	bd80      	pop	{r7, pc}
 8011bfc:	e000ed04 	.word	0xe000ed04

08011c00 <osPoolCreate>:
 8011c00:	b580      	push	{r7, lr}
 8011c02:	b086      	sub	sp, #24
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	6078      	str	r0, [r7, #4]
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	685b      	ldr	r3, [r3, #4]
 8011c0c:	3303      	adds	r3, #3
 8011c0e:	f023 0303 	bic.w	r3, r3, #3
 8011c12:	60fb      	str	r3, [r7, #12]
 8011c14:	2014      	movs	r0, #20
 8011c16:	f002 fdfb 	bl	8014810 <pvPortMalloc>
 8011c1a:	6178      	str	r0, [r7, #20]
 8011c1c:	697b      	ldr	r3, [r7, #20]
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d046      	beq.n	8011cb0 <osPoolCreate+0xb0>
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	681a      	ldr	r2, [r3, #0]
 8011c26:	697b      	ldr	r3, [r7, #20]
 8011c28:	609a      	str	r2, [r3, #8]
 8011c2a:	68fa      	ldr	r2, [r7, #12]
 8011c2c:	697b      	ldr	r3, [r7, #20]
 8011c2e:	60da      	str	r2, [r3, #12]
 8011c30:	697b      	ldr	r3, [r7, #20]
 8011c32:	2200      	movs	r2, #0
 8011c34:	611a      	str	r2, [r3, #16]
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	4618      	mov	r0, r3
 8011c3c:	f002 fde8 	bl	8014810 <pvPortMalloc>
 8011c40:	4602      	mov	r2, r0
 8011c42:	697b      	ldr	r3, [r7, #20]
 8011c44:	605a      	str	r2, [r3, #4]
 8011c46:	697b      	ldr	r3, [r7, #20]
 8011c48:	685b      	ldr	r3, [r3, #4]
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d02b      	beq.n	8011ca6 <osPoolCreate+0xa6>
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	68fa      	ldr	r2, [r7, #12]
 8011c54:	fb02 f303 	mul.w	r3, r2, r3
 8011c58:	4618      	mov	r0, r3
 8011c5a:	f002 fdd9 	bl	8014810 <pvPortMalloc>
 8011c5e:	4602      	mov	r2, r0
 8011c60:	697b      	ldr	r3, [r7, #20]
 8011c62:	601a      	str	r2, [r3, #0]
 8011c64:	697b      	ldr	r3, [r7, #20]
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d011      	beq.n	8011c90 <osPoolCreate+0x90>
 8011c6c:	2300      	movs	r3, #0
 8011c6e:	613b      	str	r3, [r7, #16]
 8011c70:	e008      	b.n	8011c84 <osPoolCreate+0x84>
 8011c72:	697b      	ldr	r3, [r7, #20]
 8011c74:	685a      	ldr	r2, [r3, #4]
 8011c76:	693b      	ldr	r3, [r7, #16]
 8011c78:	4413      	add	r3, r2
 8011c7a:	2200      	movs	r2, #0
 8011c7c:	701a      	strb	r2, [r3, #0]
 8011c7e:	693b      	ldr	r3, [r7, #16]
 8011c80:	3301      	adds	r3, #1
 8011c82:	613b      	str	r3, [r7, #16]
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	693a      	ldr	r2, [r7, #16]
 8011c8a:	429a      	cmp	r2, r3
 8011c8c:	d3f1      	bcc.n	8011c72 <osPoolCreate+0x72>
 8011c8e:	e00f      	b.n	8011cb0 <osPoolCreate+0xb0>
 8011c90:	697b      	ldr	r3, [r7, #20]
 8011c92:	685b      	ldr	r3, [r3, #4]
 8011c94:	4618      	mov	r0, r3
 8011c96:	f002 fe7d 	bl	8014994 <vPortFree>
 8011c9a:	6978      	ldr	r0, [r7, #20]
 8011c9c:	f002 fe7a 	bl	8014994 <vPortFree>
 8011ca0:	2300      	movs	r3, #0
 8011ca2:	617b      	str	r3, [r7, #20]
 8011ca4:	e004      	b.n	8011cb0 <osPoolCreate+0xb0>
 8011ca6:	6978      	ldr	r0, [r7, #20]
 8011ca8:	f002 fe74 	bl	8014994 <vPortFree>
 8011cac:	2300      	movs	r3, #0
 8011cae:	617b      	str	r3, [r7, #20]
 8011cb0:	697b      	ldr	r3, [r7, #20]
 8011cb2:	4618      	mov	r0, r3
 8011cb4:	3718      	adds	r7, #24
 8011cb6:	46bd      	mov	sp, r7
 8011cb8:	bd80      	pop	{r7, pc}

08011cba <osPoolAlloc>:
 8011cba:	b580      	push	{r7, lr}
 8011cbc:	b08a      	sub	sp, #40	; 0x28
 8011cbe:	af00      	add	r7, sp, #0
 8011cc0:	6078      	str	r0, [r7, #4]
 8011cc2:	2300      	movs	r3, #0
 8011cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8011cc6:	2300      	movs	r3, #0
 8011cc8:	623b      	str	r3, [r7, #32]
 8011cca:	f7ff fdf7 	bl	80118bc <inHandlerMode>
 8011cce:	4603      	mov	r3, r0
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d00e      	beq.n	8011cf2 <osPoolAlloc+0x38>
 8011cd4:	f3ef 8211 	mrs	r2, BASEPRI
 8011cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cdc:	f383 8811 	msr	BASEPRI, r3
 8011ce0:	f3bf 8f6f 	isb	sy
 8011ce4:	f3bf 8f4f 	dsb	sy
 8011ce8:	617a      	str	r2, [r7, #20]
 8011cea:	613b      	str	r3, [r7, #16]
 8011cec:	697b      	ldr	r3, [r7, #20]
 8011cee:	627b      	str	r3, [r7, #36]	; 0x24
 8011cf0:	e001      	b.n	8011cf6 <osPoolAlloc+0x3c>
 8011cf2:	f002 fc73 	bl	80145dc <vPortEnterCritical>
 8011cf6:	2300      	movs	r3, #0
 8011cf8:	61fb      	str	r3, [r7, #28]
 8011cfa:	e029      	b.n	8011d50 <osPoolAlloc+0x96>
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	691b      	ldr	r3, [r3, #16]
 8011d00:	69fa      	ldr	r2, [r7, #28]
 8011d02:	4413      	add	r3, r2
 8011d04:	61bb      	str	r3, [r7, #24]
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	689b      	ldr	r3, [r3, #8]
 8011d0a:	69ba      	ldr	r2, [r7, #24]
 8011d0c:	429a      	cmp	r2, r3
 8011d0e:	d301      	bcc.n	8011d14 <osPoolAlloc+0x5a>
 8011d10:	2300      	movs	r3, #0
 8011d12:	61bb      	str	r3, [r7, #24]
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	685a      	ldr	r2, [r3, #4]
 8011d18:	69bb      	ldr	r3, [r7, #24]
 8011d1a:	4413      	add	r3, r2
 8011d1c:	781b      	ldrb	r3, [r3, #0]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d113      	bne.n	8011d4a <osPoolAlloc+0x90>
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	685a      	ldr	r2, [r3, #4]
 8011d26:	69bb      	ldr	r3, [r7, #24]
 8011d28:	4413      	add	r3, r2
 8011d2a:	2201      	movs	r2, #1
 8011d2c:	701a      	strb	r2, [r3, #0]
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	4619      	mov	r1, r3
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	68db      	ldr	r3, [r3, #12]
 8011d38:	69ba      	ldr	r2, [r7, #24]
 8011d3a:	fb02 f303 	mul.w	r3, r2, r3
 8011d3e:	440b      	add	r3, r1
 8011d40:	623b      	str	r3, [r7, #32]
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	69ba      	ldr	r2, [r7, #24]
 8011d46:	611a      	str	r2, [r3, #16]
 8011d48:	e007      	b.n	8011d5a <osPoolAlloc+0xa0>
 8011d4a:	69fb      	ldr	r3, [r7, #28]
 8011d4c:	3301      	adds	r3, #1
 8011d4e:	61fb      	str	r3, [r7, #28]
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	689b      	ldr	r3, [r3, #8]
 8011d54:	69fa      	ldr	r2, [r7, #28]
 8011d56:	429a      	cmp	r2, r3
 8011d58:	d3d0      	bcc.n	8011cfc <osPoolAlloc+0x42>
 8011d5a:	f7ff fdaf 	bl	80118bc <inHandlerMode>
 8011d5e:	4603      	mov	r3, r0
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d005      	beq.n	8011d70 <osPoolAlloc+0xb6>
 8011d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d66:	60fb      	str	r3, [r7, #12]
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	f383 8811 	msr	BASEPRI, r3
 8011d6e:	e001      	b.n	8011d74 <osPoolAlloc+0xba>
 8011d70:	f002 fc62 	bl	8014638 <vPortExitCritical>
 8011d74:	6a3b      	ldr	r3, [r7, #32]
 8011d76:	4618      	mov	r0, r3
 8011d78:	3728      	adds	r7, #40	; 0x28
 8011d7a:	46bd      	mov	sp, r7
 8011d7c:	bd80      	pop	{r7, pc}

08011d7e <osPoolFree>:
 8011d7e:	b480      	push	{r7}
 8011d80:	b085      	sub	sp, #20
 8011d82:	af00      	add	r7, sp, #0
 8011d84:	6078      	str	r0, [r7, #4]
 8011d86:	6039      	str	r1, [r7, #0]
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d101      	bne.n	8011d92 <osPoolFree+0x14>
 8011d8e:	2380      	movs	r3, #128	; 0x80
 8011d90:	e030      	b.n	8011df4 <osPoolFree+0x76>
 8011d92:	683b      	ldr	r3, [r7, #0]
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d101      	bne.n	8011d9c <osPoolFree+0x1e>
 8011d98:	2380      	movs	r3, #128	; 0x80
 8011d9a:	e02b      	b.n	8011df4 <osPoolFree+0x76>
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	683a      	ldr	r2, [r7, #0]
 8011da2:	429a      	cmp	r2, r3
 8011da4:	d201      	bcs.n	8011daa <osPoolFree+0x2c>
 8011da6:	2380      	movs	r3, #128	; 0x80
 8011da8:	e024      	b.n	8011df4 <osPoolFree+0x76>
 8011daa:	683b      	ldr	r3, [r7, #0]
 8011dac:	687a      	ldr	r2, [r7, #4]
 8011dae:	6812      	ldr	r2, [r2, #0]
 8011db0:	1a9b      	subs	r3, r3, r2
 8011db2:	60fb      	str	r3, [r7, #12]
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	68da      	ldr	r2, [r3, #12]
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	fbb3 f1f2 	udiv	r1, r3, r2
 8011dbe:	fb02 f201 	mul.w	r2, r2, r1
 8011dc2:	1a9b      	subs	r3, r3, r2
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d001      	beq.n	8011dcc <osPoolFree+0x4e>
 8011dc8:	2380      	movs	r3, #128	; 0x80
 8011dca:	e013      	b.n	8011df4 <osPoolFree+0x76>
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	68db      	ldr	r3, [r3, #12]
 8011dd0:	68fa      	ldr	r2, [r7, #12]
 8011dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8011dd6:	60fb      	str	r3, [r7, #12]
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	689b      	ldr	r3, [r3, #8]
 8011ddc:	68fa      	ldr	r2, [r7, #12]
 8011dde:	429a      	cmp	r2, r3
 8011de0:	d301      	bcc.n	8011de6 <osPoolFree+0x68>
 8011de2:	2380      	movs	r3, #128	; 0x80
 8011de4:	e006      	b.n	8011df4 <osPoolFree+0x76>
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	685a      	ldr	r2, [r3, #4]
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	4413      	add	r3, r2
 8011dee:	2200      	movs	r2, #0
 8011df0:	701a      	strb	r2, [r3, #0]
 8011df2:	2300      	movs	r3, #0
 8011df4:	4618      	mov	r0, r3
 8011df6:	3714      	adds	r7, #20
 8011df8:	46bd      	mov	sp, r7
 8011dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dfe:	4770      	bx	lr

08011e00 <osMailCreate>:
 8011e00:	b590      	push	{r4, r7, lr}
 8011e02:	b087      	sub	sp, #28
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	6078      	str	r0, [r7, #4]
 8011e08:	6039      	str	r1, [r7, #0]
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	60fb      	str	r3, [r7, #12]
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	685b      	ldr	r3, [r3, #4]
 8011e14:	613b      	str	r3, [r7, #16]
 8011e16:	2300      	movs	r3, #0
 8011e18:	617b      	str	r3, [r7, #20]
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	689c      	ldr	r4, [r3, #8]
 8011e1e:	200c      	movs	r0, #12
 8011e20:	f002 fcf6 	bl	8014810 <pvPortMalloc>
 8011e24:	4603      	mov	r3, r0
 8011e26:	6023      	str	r3, [r4, #0]
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	689b      	ldr	r3, [r3, #8]
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d101      	bne.n	8011e36 <osMailCreate+0x36>
 8011e32:	2300      	movs	r3, #0
 8011e34:	e038      	b.n	8011ea8 <osMailCreate+0xa8>
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	689b      	ldr	r3, [r3, #8]
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	687a      	ldr	r2, [r7, #4]
 8011e3e:	601a      	str	r2, [r3, #0]
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	6818      	ldr	r0, [r3, #0]
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	689b      	ldr	r3, [r3, #8]
 8011e48:	681c      	ldr	r4, [r3, #0]
 8011e4a:	2200      	movs	r2, #0
 8011e4c:	2104      	movs	r1, #4
 8011e4e:	f000 fa9b 	bl	8012388 <xQueueGenericCreate>
 8011e52:	4603      	mov	r3, r0
 8011e54:	6063      	str	r3, [r4, #4]
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	689b      	ldr	r3, [r3, #8]
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	685b      	ldr	r3, [r3, #4]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d107      	bne.n	8011e72 <osMailCreate+0x72>
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	689b      	ldr	r3, [r3, #8]
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	4618      	mov	r0, r3
 8011e6a:	f002 fd93 	bl	8014994 <vPortFree>
 8011e6e:	2300      	movs	r3, #0
 8011e70:	e01a      	b.n	8011ea8 <osMailCreate+0xa8>
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	689b      	ldr	r3, [r3, #8]
 8011e76:	681c      	ldr	r4, [r3, #0]
 8011e78:	f107 030c 	add.w	r3, r7, #12
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	f7ff febf 	bl	8011c00 <osPoolCreate>
 8011e82:	4603      	mov	r3, r0
 8011e84:	60a3      	str	r3, [r4, #8]
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	689b      	ldr	r3, [r3, #8]
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	689b      	ldr	r3, [r3, #8]
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d107      	bne.n	8011ea2 <osMailCreate+0xa2>
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	689b      	ldr	r3, [r3, #8]
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	4618      	mov	r0, r3
 8011e9a:	f002 fd7b 	bl	8014994 <vPortFree>
 8011e9e:	2300      	movs	r3, #0
 8011ea0:	e002      	b.n	8011ea8 <osMailCreate+0xa8>
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	689b      	ldr	r3, [r3, #8]
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	4618      	mov	r0, r3
 8011eaa:	371c      	adds	r7, #28
 8011eac:	46bd      	mov	sp, r7
 8011eae:	bd90      	pop	{r4, r7, pc}

08011eb0 <osMailAlloc>:
 8011eb0:	b580      	push	{r7, lr}
 8011eb2:	b084      	sub	sp, #16
 8011eb4:	af00      	add	r7, sp, #0
 8011eb6:	6078      	str	r0, [r7, #4]
 8011eb8:	6039      	str	r1, [r7, #0]
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d101      	bne.n	8011ec4 <osMailAlloc+0x14>
 8011ec0:	2300      	movs	r3, #0
 8011ec2:	e006      	b.n	8011ed2 <osMailAlloc+0x22>
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	689b      	ldr	r3, [r3, #8]
 8011ec8:	4618      	mov	r0, r3
 8011eca:	f7ff fef6 	bl	8011cba <osPoolAlloc>
 8011ece:	60f8      	str	r0, [r7, #12]
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	4618      	mov	r0, r3
 8011ed4:	3710      	adds	r7, #16
 8011ed6:	46bd      	mov	sp, r7
 8011ed8:	bd80      	pop	{r7, pc}
	...

08011edc <osMailPut>:
 8011edc:	b580      	push	{r7, lr}
 8011ede:	b084      	sub	sp, #16
 8011ee0:	af00      	add	r7, sp, #0
 8011ee2:	6078      	str	r0, [r7, #4]
 8011ee4:	6039      	str	r1, [r7, #0]
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d101      	bne.n	8011ef0 <osMailPut+0x14>
 8011eec:	2380      	movs	r3, #128	; 0x80
 8011eee:	e02c      	b.n	8011f4a <osMailPut+0x6e>
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	60fb      	str	r3, [r7, #12]
 8011ef4:	f7ff fce2 	bl	80118bc <inHandlerMode>
 8011ef8:	4603      	mov	r3, r0
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d018      	beq.n	8011f30 <osMailPut+0x54>
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	6858      	ldr	r0, [r3, #4]
 8011f02:	f107 020c 	add.w	r2, r7, #12
 8011f06:	4639      	mov	r1, r7
 8011f08:	2300      	movs	r3, #0
 8011f0a:	f000 fbe1 	bl	80126d0 <xQueueGenericSendFromISR>
 8011f0e:	4603      	mov	r3, r0
 8011f10:	2b01      	cmp	r3, #1
 8011f12:	d001      	beq.n	8011f18 <osMailPut+0x3c>
 8011f14:	23ff      	movs	r3, #255	; 0xff
 8011f16:	e018      	b.n	8011f4a <osMailPut+0x6e>
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d014      	beq.n	8011f48 <osMailPut+0x6c>
 8011f1e:	4b0d      	ldr	r3, [pc, #52]	; (8011f54 <osMailPut+0x78>)
 8011f20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f24:	601a      	str	r2, [r3, #0]
 8011f26:	f3bf 8f4f 	dsb	sy
 8011f2a:	f3bf 8f6f 	isb	sy
 8011f2e:	e00b      	b.n	8011f48 <osMailPut+0x6c>
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	6858      	ldr	r0, [r3, #4]
 8011f34:	4639      	mov	r1, r7
 8011f36:	2300      	movs	r3, #0
 8011f38:	2200      	movs	r2, #0
 8011f3a:	f000 facf 	bl	80124dc <xQueueGenericSend>
 8011f3e:	4603      	mov	r3, r0
 8011f40:	2b01      	cmp	r3, #1
 8011f42:	d001      	beq.n	8011f48 <osMailPut+0x6c>
 8011f44:	23ff      	movs	r3, #255	; 0xff
 8011f46:	e000      	b.n	8011f4a <osMailPut+0x6e>
 8011f48:	2300      	movs	r3, #0
 8011f4a:	4618      	mov	r0, r3
 8011f4c:	3710      	adds	r7, #16
 8011f4e:	46bd      	mov	sp, r7
 8011f50:	bd80      	pop	{r7, pc}
 8011f52:	bf00      	nop
 8011f54:	e000ed04 	.word	0xe000ed04

08011f58 <osMailGet>:
 8011f58:	b590      	push	{r4, r7, lr}
 8011f5a:	b08b      	sub	sp, #44	; 0x2c
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	60f8      	str	r0, [r7, #12]
 8011f60:	60b9      	str	r1, [r7, #8]
 8011f62:	607a      	str	r2, [r7, #4]
 8011f64:	68bb      	ldr	r3, [r7, #8]
 8011f66:	61fb      	str	r3, [r7, #28]
 8011f68:	68bb      	ldr	r3, [r7, #8]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d10a      	bne.n	8011f84 <osMailGet+0x2c>
 8011f6e:	2380      	movs	r3, #128	; 0x80
 8011f70:	617b      	str	r3, [r7, #20]
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	461c      	mov	r4, r3
 8011f76:	f107 0314 	add.w	r3, r7, #20
 8011f7a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011f7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011f82:	e056      	b.n	8012032 <osMailGet+0xda>
 8011f84:	2300      	movs	r3, #0
 8011f86:	623b      	str	r3, [r7, #32]
 8011f88:	2300      	movs	r3, #0
 8011f8a:	627b      	str	r3, [r7, #36]	; 0x24
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f92:	d103      	bne.n	8011f9c <osMailGet+0x44>
 8011f94:	f04f 33ff 	mov.w	r3, #4294967295
 8011f98:	627b      	str	r3, [r7, #36]	; 0x24
 8011f9a:	e009      	b.n	8011fb0 <osMailGet+0x58>
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d006      	beq.n	8011fb0 <osMailGet+0x58>
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8011fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d101      	bne.n	8011fb0 <osMailGet+0x58>
 8011fac:	2301      	movs	r3, #1
 8011fae:	627b      	str	r3, [r7, #36]	; 0x24
 8011fb0:	f7ff fc84 	bl	80118bc <inHandlerMode>
 8011fb4:	4603      	mov	r3, r0
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d01d      	beq.n	8011ff6 <osMailGet+0x9e>
 8011fba:	68bb      	ldr	r3, [r7, #8]
 8011fbc:	6858      	ldr	r0, [r3, #4]
 8011fbe:	f107 0220 	add.w	r2, r7, #32
 8011fc2:	f107 0314 	add.w	r3, r7, #20
 8011fc6:	3304      	adds	r3, #4
 8011fc8:	4619      	mov	r1, r3
 8011fca:	f000 fe83 	bl	8012cd4 <xQueueReceiveFromISR>
 8011fce:	4603      	mov	r3, r0
 8011fd0:	2b01      	cmp	r3, #1
 8011fd2:	d102      	bne.n	8011fda <osMailGet+0x82>
 8011fd4:	2320      	movs	r3, #32
 8011fd6:	617b      	str	r3, [r7, #20]
 8011fd8:	e001      	b.n	8011fde <osMailGet+0x86>
 8011fda:	2300      	movs	r3, #0
 8011fdc:	617b      	str	r3, [r7, #20]
 8011fde:	6a3b      	ldr	r3, [r7, #32]
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d01e      	beq.n	8012022 <osMailGet+0xca>
 8011fe4:	4b15      	ldr	r3, [pc, #84]	; (801203c <osMailGet+0xe4>)
 8011fe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011fea:	601a      	str	r2, [r3, #0]
 8011fec:	f3bf 8f4f 	dsb	sy
 8011ff0:	f3bf 8f6f 	isb	sy
 8011ff4:	e015      	b.n	8012022 <osMailGet+0xca>
 8011ff6:	68bb      	ldr	r3, [r7, #8]
 8011ff8:	6858      	ldr	r0, [r3, #4]
 8011ffa:	f107 0314 	add.w	r3, r7, #20
 8011ffe:	3304      	adds	r3, #4
 8012000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012002:	4619      	mov	r1, r3
 8012004:	f000 fc82 	bl	801290c <xQueueReceive>
 8012008:	4603      	mov	r3, r0
 801200a:	2b01      	cmp	r3, #1
 801200c:	d102      	bne.n	8012014 <osMailGet+0xbc>
 801200e:	2320      	movs	r3, #32
 8012010:	617b      	str	r3, [r7, #20]
 8012012:	e006      	b.n	8012022 <osMailGet+0xca>
 8012014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012016:	2b00      	cmp	r3, #0
 8012018:	d101      	bne.n	801201e <osMailGet+0xc6>
 801201a:	2300      	movs	r3, #0
 801201c:	e000      	b.n	8012020 <osMailGet+0xc8>
 801201e:	2340      	movs	r3, #64	; 0x40
 8012020:	617b      	str	r3, [r7, #20]
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	461c      	mov	r4, r3
 8012026:	f107 0314 	add.w	r3, r7, #20
 801202a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801202e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012032:	68f8      	ldr	r0, [r7, #12]
 8012034:	372c      	adds	r7, #44	; 0x2c
 8012036:	46bd      	mov	sp, r7
 8012038:	bd90      	pop	{r4, r7, pc}
 801203a:	bf00      	nop
 801203c:	e000ed04 	.word	0xe000ed04

08012040 <osMailFree>:
 8012040:	b580      	push	{r7, lr}
 8012042:	b082      	sub	sp, #8
 8012044:	af00      	add	r7, sp, #0
 8012046:	6078      	str	r0, [r7, #4]
 8012048:	6039      	str	r1, [r7, #0]
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	2b00      	cmp	r3, #0
 801204e:	d101      	bne.n	8012054 <osMailFree+0x14>
 8012050:	2380      	movs	r3, #128	; 0x80
 8012052:	e006      	b.n	8012062 <osMailFree+0x22>
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	689b      	ldr	r3, [r3, #8]
 8012058:	6839      	ldr	r1, [r7, #0]
 801205a:	4618      	mov	r0, r3
 801205c:	f7ff fe8f 	bl	8011d7e <osPoolFree>
 8012060:	4603      	mov	r3, r0
 8012062:	4618      	mov	r0, r3
 8012064:	3708      	adds	r7, #8
 8012066:	46bd      	mov	sp, r7
 8012068:	bd80      	pop	{r7, pc}

0801206a <vListInitialise>:
 801206a:	b480      	push	{r7}
 801206c:	b083      	sub	sp, #12
 801206e:	af00      	add	r7, sp, #0
 8012070:	6078      	str	r0, [r7, #4]
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	f103 0208 	add.w	r2, r3, #8
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	605a      	str	r2, [r3, #4]
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	f04f 32ff 	mov.w	r2, #4294967295
 8012082:	609a      	str	r2, [r3, #8]
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	f103 0208 	add.w	r2, r3, #8
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	60da      	str	r2, [r3, #12]
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	f103 0208 	add.w	r2, r3, #8
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	611a      	str	r2, [r3, #16]
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	2200      	movs	r2, #0
 801209c:	601a      	str	r2, [r3, #0]
 801209e:	bf00      	nop
 80120a0:	370c      	adds	r7, #12
 80120a2:	46bd      	mov	sp, r7
 80120a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a8:	4770      	bx	lr

080120aa <vListInitialiseItem>:
 80120aa:	b480      	push	{r7}
 80120ac:	b083      	sub	sp, #12
 80120ae:	af00      	add	r7, sp, #0
 80120b0:	6078      	str	r0, [r7, #4]
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	2200      	movs	r2, #0
 80120b6:	611a      	str	r2, [r3, #16]
 80120b8:	bf00      	nop
 80120ba:	370c      	adds	r7, #12
 80120bc:	46bd      	mov	sp, r7
 80120be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c2:	4770      	bx	lr

080120c4 <vListInsertEnd>:
 80120c4:	b480      	push	{r7}
 80120c6:	b085      	sub	sp, #20
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	6078      	str	r0, [r7, #4]
 80120cc:	6039      	str	r1, [r7, #0]
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	685b      	ldr	r3, [r3, #4]
 80120d2:	60fb      	str	r3, [r7, #12]
 80120d4:	683b      	ldr	r3, [r7, #0]
 80120d6:	68fa      	ldr	r2, [r7, #12]
 80120d8:	605a      	str	r2, [r3, #4]
 80120da:	68fb      	ldr	r3, [r7, #12]
 80120dc:	689a      	ldr	r2, [r3, #8]
 80120de:	683b      	ldr	r3, [r7, #0]
 80120e0:	609a      	str	r2, [r3, #8]
 80120e2:	68fb      	ldr	r3, [r7, #12]
 80120e4:	689b      	ldr	r3, [r3, #8]
 80120e6:	683a      	ldr	r2, [r7, #0]
 80120e8:	605a      	str	r2, [r3, #4]
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	683a      	ldr	r2, [r7, #0]
 80120ee:	609a      	str	r2, [r3, #8]
 80120f0:	683b      	ldr	r3, [r7, #0]
 80120f2:	687a      	ldr	r2, [r7, #4]
 80120f4:	611a      	str	r2, [r3, #16]
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	1c5a      	adds	r2, r3, #1
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	601a      	str	r2, [r3, #0]
 8012100:	bf00      	nop
 8012102:	3714      	adds	r7, #20
 8012104:	46bd      	mov	sp, r7
 8012106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801210a:	4770      	bx	lr

0801210c <vListInsert>:
 801210c:	b480      	push	{r7}
 801210e:	b085      	sub	sp, #20
 8012110:	af00      	add	r7, sp, #0
 8012112:	6078      	str	r0, [r7, #4]
 8012114:	6039      	str	r1, [r7, #0]
 8012116:	683b      	ldr	r3, [r7, #0]
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	60bb      	str	r3, [r7, #8]
 801211c:	68bb      	ldr	r3, [r7, #8]
 801211e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012122:	d103      	bne.n	801212c <vListInsert+0x20>
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	691b      	ldr	r3, [r3, #16]
 8012128:	60fb      	str	r3, [r7, #12]
 801212a:	e00c      	b.n	8012146 <vListInsert+0x3a>
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	3308      	adds	r3, #8
 8012130:	60fb      	str	r3, [r7, #12]
 8012132:	e002      	b.n	801213a <vListInsert+0x2e>
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	685b      	ldr	r3, [r3, #4]
 8012138:	60fb      	str	r3, [r7, #12]
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	685b      	ldr	r3, [r3, #4]
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	68ba      	ldr	r2, [r7, #8]
 8012142:	429a      	cmp	r2, r3
 8012144:	d2f6      	bcs.n	8012134 <vListInsert+0x28>
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	685a      	ldr	r2, [r3, #4]
 801214a:	683b      	ldr	r3, [r7, #0]
 801214c:	605a      	str	r2, [r3, #4]
 801214e:	683b      	ldr	r3, [r7, #0]
 8012150:	685b      	ldr	r3, [r3, #4]
 8012152:	683a      	ldr	r2, [r7, #0]
 8012154:	609a      	str	r2, [r3, #8]
 8012156:	683b      	ldr	r3, [r7, #0]
 8012158:	68fa      	ldr	r2, [r7, #12]
 801215a:	609a      	str	r2, [r3, #8]
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	683a      	ldr	r2, [r7, #0]
 8012160:	605a      	str	r2, [r3, #4]
 8012162:	683b      	ldr	r3, [r7, #0]
 8012164:	687a      	ldr	r2, [r7, #4]
 8012166:	611a      	str	r2, [r3, #16]
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	1c5a      	adds	r2, r3, #1
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	601a      	str	r2, [r3, #0]
 8012172:	bf00      	nop
 8012174:	3714      	adds	r7, #20
 8012176:	46bd      	mov	sp, r7
 8012178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801217c:	4770      	bx	lr

0801217e <uxListRemove>:
 801217e:	b480      	push	{r7}
 8012180:	b085      	sub	sp, #20
 8012182:	af00      	add	r7, sp, #0
 8012184:	6078      	str	r0, [r7, #4]
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	691b      	ldr	r3, [r3, #16]
 801218a:	60fb      	str	r3, [r7, #12]
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	685b      	ldr	r3, [r3, #4]
 8012190:	687a      	ldr	r2, [r7, #4]
 8012192:	6892      	ldr	r2, [r2, #8]
 8012194:	609a      	str	r2, [r3, #8]
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	689b      	ldr	r3, [r3, #8]
 801219a:	687a      	ldr	r2, [r7, #4]
 801219c:	6852      	ldr	r2, [r2, #4]
 801219e:	605a      	str	r2, [r3, #4]
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	685b      	ldr	r3, [r3, #4]
 80121a4:	687a      	ldr	r2, [r7, #4]
 80121a6:	429a      	cmp	r2, r3
 80121a8:	d103      	bne.n	80121b2 <uxListRemove+0x34>
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	689a      	ldr	r2, [r3, #8]
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	605a      	str	r2, [r3, #4]
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	2200      	movs	r2, #0
 80121b6:	611a      	str	r2, [r3, #16]
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	1e5a      	subs	r2, r3, #1
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	601a      	str	r2, [r3, #0]
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	4618      	mov	r0, r3
 80121c8:	3714      	adds	r7, #20
 80121ca:	46bd      	mov	sp, r7
 80121cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121d0:	4770      	bx	lr
	...

080121d4 <xQueueGenericReset>:
 80121d4:	b580      	push	{r7, lr}
 80121d6:	b084      	sub	sp, #16
 80121d8:	af00      	add	r7, sp, #0
 80121da:	6078      	str	r0, [r7, #4]
 80121dc:	6039      	str	r1, [r7, #0]
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	60fb      	str	r3, [r7, #12]
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d109      	bne.n	80121fc <xQueueGenericReset+0x28>
 80121e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121ec:	f383 8811 	msr	BASEPRI, r3
 80121f0:	f3bf 8f6f 	isb	sy
 80121f4:	f3bf 8f4f 	dsb	sy
 80121f8:	60bb      	str	r3, [r7, #8]
 80121fa:	e7fe      	b.n	80121fa <xQueueGenericReset+0x26>
 80121fc:	f002 f9ee 	bl	80145dc <vPortEnterCritical>
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	681a      	ldr	r2, [r3, #0]
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012208:	68f9      	ldr	r1, [r7, #12]
 801220a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801220c:	fb01 f303 	mul.w	r3, r1, r3
 8012210:	441a      	add	r2, r3
 8012212:	68fb      	ldr	r3, [r7, #12]
 8012214:	605a      	str	r2, [r3, #4]
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	2200      	movs	r2, #0
 801221a:	639a      	str	r2, [r3, #56]	; 0x38
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	681a      	ldr	r2, [r3, #0]
 8012220:	68fb      	ldr	r3, [r7, #12]
 8012222:	609a      	str	r2, [r3, #8]
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	681a      	ldr	r2, [r3, #0]
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801222c:	3b01      	subs	r3, #1
 801222e:	68f9      	ldr	r1, [r7, #12]
 8012230:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012232:	fb01 f303 	mul.w	r3, r1, r3
 8012236:	441a      	add	r2, r3
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	60da      	str	r2, [r3, #12]
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	22ff      	movs	r2, #255	; 0xff
 8012240:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012244:	68fb      	ldr	r3, [r7, #12]
 8012246:	22ff      	movs	r2, #255	; 0xff
 8012248:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801224c:	683b      	ldr	r3, [r7, #0]
 801224e:	2b00      	cmp	r3, #0
 8012250:	d114      	bne.n	801227c <xQueueGenericReset+0xa8>
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	691b      	ldr	r3, [r3, #16]
 8012256:	2b00      	cmp	r3, #0
 8012258:	d01a      	beq.n	8012290 <xQueueGenericReset+0xbc>
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	3310      	adds	r3, #16
 801225e:	4618      	mov	r0, r3
 8012260:	f001 fada 	bl	8013818 <xTaskRemoveFromEventList>
 8012264:	4603      	mov	r3, r0
 8012266:	2b00      	cmp	r3, #0
 8012268:	d012      	beq.n	8012290 <xQueueGenericReset+0xbc>
 801226a:	4b0d      	ldr	r3, [pc, #52]	; (80122a0 <xQueueGenericReset+0xcc>)
 801226c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012270:	601a      	str	r2, [r3, #0]
 8012272:	f3bf 8f4f 	dsb	sy
 8012276:	f3bf 8f6f 	isb	sy
 801227a:	e009      	b.n	8012290 <xQueueGenericReset+0xbc>
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	3310      	adds	r3, #16
 8012280:	4618      	mov	r0, r3
 8012282:	f7ff fef2 	bl	801206a <vListInitialise>
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	3324      	adds	r3, #36	; 0x24
 801228a:	4618      	mov	r0, r3
 801228c:	f7ff feed 	bl	801206a <vListInitialise>
 8012290:	f002 f9d2 	bl	8014638 <vPortExitCritical>
 8012294:	2301      	movs	r3, #1
 8012296:	4618      	mov	r0, r3
 8012298:	3710      	adds	r7, #16
 801229a:	46bd      	mov	sp, r7
 801229c:	bd80      	pop	{r7, pc}
 801229e:	bf00      	nop
 80122a0:	e000ed04 	.word	0xe000ed04

080122a4 <xQueueGenericCreateStatic>:
 80122a4:	b580      	push	{r7, lr}
 80122a6:	b08e      	sub	sp, #56	; 0x38
 80122a8:	af02      	add	r7, sp, #8
 80122aa:	60f8      	str	r0, [r7, #12]
 80122ac:	60b9      	str	r1, [r7, #8]
 80122ae:	607a      	str	r2, [r7, #4]
 80122b0:	603b      	str	r3, [r7, #0]
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d109      	bne.n	80122cc <xQueueGenericCreateStatic+0x28>
 80122b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122bc:	f383 8811 	msr	BASEPRI, r3
 80122c0:	f3bf 8f6f 	isb	sy
 80122c4:	f3bf 8f4f 	dsb	sy
 80122c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80122ca:	e7fe      	b.n	80122ca <xQueueGenericCreateStatic+0x26>
 80122cc:	683b      	ldr	r3, [r7, #0]
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d109      	bne.n	80122e6 <xQueueGenericCreateStatic+0x42>
 80122d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122d6:	f383 8811 	msr	BASEPRI, r3
 80122da:	f3bf 8f6f 	isb	sy
 80122de:	f3bf 8f4f 	dsb	sy
 80122e2:	627b      	str	r3, [r7, #36]	; 0x24
 80122e4:	e7fe      	b.n	80122e4 <xQueueGenericCreateStatic+0x40>
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d002      	beq.n	80122f2 <xQueueGenericCreateStatic+0x4e>
 80122ec:	68bb      	ldr	r3, [r7, #8]
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d001      	beq.n	80122f6 <xQueueGenericCreateStatic+0x52>
 80122f2:	2301      	movs	r3, #1
 80122f4:	e000      	b.n	80122f8 <xQueueGenericCreateStatic+0x54>
 80122f6:	2300      	movs	r3, #0
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d109      	bne.n	8012310 <xQueueGenericCreateStatic+0x6c>
 80122fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012300:	f383 8811 	msr	BASEPRI, r3
 8012304:	f3bf 8f6f 	isb	sy
 8012308:	f3bf 8f4f 	dsb	sy
 801230c:	623b      	str	r3, [r7, #32]
 801230e:	e7fe      	b.n	801230e <xQueueGenericCreateStatic+0x6a>
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	2b00      	cmp	r3, #0
 8012314:	d102      	bne.n	801231c <xQueueGenericCreateStatic+0x78>
 8012316:	68bb      	ldr	r3, [r7, #8]
 8012318:	2b00      	cmp	r3, #0
 801231a:	d101      	bne.n	8012320 <xQueueGenericCreateStatic+0x7c>
 801231c:	2301      	movs	r3, #1
 801231e:	e000      	b.n	8012322 <xQueueGenericCreateStatic+0x7e>
 8012320:	2300      	movs	r3, #0
 8012322:	2b00      	cmp	r3, #0
 8012324:	d109      	bne.n	801233a <xQueueGenericCreateStatic+0x96>
 8012326:	f04f 0350 	mov.w	r3, #80	; 0x50
 801232a:	f383 8811 	msr	BASEPRI, r3
 801232e:	f3bf 8f6f 	isb	sy
 8012332:	f3bf 8f4f 	dsb	sy
 8012336:	61fb      	str	r3, [r7, #28]
 8012338:	e7fe      	b.n	8012338 <xQueueGenericCreateStatic+0x94>
 801233a:	2348      	movs	r3, #72	; 0x48
 801233c:	617b      	str	r3, [r7, #20]
 801233e:	697b      	ldr	r3, [r7, #20]
 8012340:	2b48      	cmp	r3, #72	; 0x48
 8012342:	d009      	beq.n	8012358 <xQueueGenericCreateStatic+0xb4>
 8012344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012348:	f383 8811 	msr	BASEPRI, r3
 801234c:	f3bf 8f6f 	isb	sy
 8012350:	f3bf 8f4f 	dsb	sy
 8012354:	61bb      	str	r3, [r7, #24]
 8012356:	e7fe      	b.n	8012356 <xQueueGenericCreateStatic+0xb2>
 8012358:	683b      	ldr	r3, [r7, #0]
 801235a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801235c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801235e:	2b00      	cmp	r3, #0
 8012360:	d00d      	beq.n	801237e <xQueueGenericCreateStatic+0xda>
 8012362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012364:	2201      	movs	r2, #1
 8012366:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801236a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801236e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012370:	9300      	str	r3, [sp, #0]
 8012372:	4613      	mov	r3, r2
 8012374:	687a      	ldr	r2, [r7, #4]
 8012376:	68b9      	ldr	r1, [r7, #8]
 8012378:	68f8      	ldr	r0, [r7, #12]
 801237a:	f000 f842 	bl	8012402 <prvInitialiseNewQueue>
 801237e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012380:	4618      	mov	r0, r3
 8012382:	3730      	adds	r7, #48	; 0x30
 8012384:	46bd      	mov	sp, r7
 8012386:	bd80      	pop	{r7, pc}

08012388 <xQueueGenericCreate>:
 8012388:	b580      	push	{r7, lr}
 801238a:	b08a      	sub	sp, #40	; 0x28
 801238c:	af02      	add	r7, sp, #8
 801238e:	60f8      	str	r0, [r7, #12]
 8012390:	60b9      	str	r1, [r7, #8]
 8012392:	4613      	mov	r3, r2
 8012394:	71fb      	strb	r3, [r7, #7]
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	2b00      	cmp	r3, #0
 801239a:	d109      	bne.n	80123b0 <xQueueGenericCreate+0x28>
 801239c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123a0:	f383 8811 	msr	BASEPRI, r3
 80123a4:	f3bf 8f6f 	isb	sy
 80123a8:	f3bf 8f4f 	dsb	sy
 80123ac:	613b      	str	r3, [r7, #16]
 80123ae:	e7fe      	b.n	80123ae <xQueueGenericCreate+0x26>
 80123b0:	68bb      	ldr	r3, [r7, #8]
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d102      	bne.n	80123bc <xQueueGenericCreate+0x34>
 80123b6:	2300      	movs	r3, #0
 80123b8:	61fb      	str	r3, [r7, #28]
 80123ba:	e004      	b.n	80123c6 <xQueueGenericCreate+0x3e>
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	68ba      	ldr	r2, [r7, #8]
 80123c0:	fb02 f303 	mul.w	r3, r2, r3
 80123c4:	61fb      	str	r3, [r7, #28]
 80123c6:	69fb      	ldr	r3, [r7, #28]
 80123c8:	3348      	adds	r3, #72	; 0x48
 80123ca:	4618      	mov	r0, r3
 80123cc:	f002 fa20 	bl	8014810 <pvPortMalloc>
 80123d0:	61b8      	str	r0, [r7, #24]
 80123d2:	69bb      	ldr	r3, [r7, #24]
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d00f      	beq.n	80123f8 <xQueueGenericCreate+0x70>
 80123d8:	69bb      	ldr	r3, [r7, #24]
 80123da:	3348      	adds	r3, #72	; 0x48
 80123dc:	617b      	str	r3, [r7, #20]
 80123de:	69bb      	ldr	r3, [r7, #24]
 80123e0:	2200      	movs	r2, #0
 80123e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80123e6:	79fa      	ldrb	r2, [r7, #7]
 80123e8:	69bb      	ldr	r3, [r7, #24]
 80123ea:	9300      	str	r3, [sp, #0]
 80123ec:	4613      	mov	r3, r2
 80123ee:	697a      	ldr	r2, [r7, #20]
 80123f0:	68b9      	ldr	r1, [r7, #8]
 80123f2:	68f8      	ldr	r0, [r7, #12]
 80123f4:	f000 f805 	bl	8012402 <prvInitialiseNewQueue>
 80123f8:	69bb      	ldr	r3, [r7, #24]
 80123fa:	4618      	mov	r0, r3
 80123fc:	3720      	adds	r7, #32
 80123fe:	46bd      	mov	sp, r7
 8012400:	bd80      	pop	{r7, pc}

08012402 <prvInitialiseNewQueue>:
 8012402:	b580      	push	{r7, lr}
 8012404:	b084      	sub	sp, #16
 8012406:	af00      	add	r7, sp, #0
 8012408:	60f8      	str	r0, [r7, #12]
 801240a:	60b9      	str	r1, [r7, #8]
 801240c:	607a      	str	r2, [r7, #4]
 801240e:	70fb      	strb	r3, [r7, #3]
 8012410:	68bb      	ldr	r3, [r7, #8]
 8012412:	2b00      	cmp	r3, #0
 8012414:	d103      	bne.n	801241e <prvInitialiseNewQueue+0x1c>
 8012416:	69bb      	ldr	r3, [r7, #24]
 8012418:	69ba      	ldr	r2, [r7, #24]
 801241a:	601a      	str	r2, [r3, #0]
 801241c:	e002      	b.n	8012424 <prvInitialiseNewQueue+0x22>
 801241e:	69bb      	ldr	r3, [r7, #24]
 8012420:	687a      	ldr	r2, [r7, #4]
 8012422:	601a      	str	r2, [r3, #0]
 8012424:	69bb      	ldr	r3, [r7, #24]
 8012426:	68fa      	ldr	r2, [r7, #12]
 8012428:	63da      	str	r2, [r3, #60]	; 0x3c
 801242a:	69bb      	ldr	r3, [r7, #24]
 801242c:	68ba      	ldr	r2, [r7, #8]
 801242e:	641a      	str	r2, [r3, #64]	; 0x40
 8012430:	2101      	movs	r1, #1
 8012432:	69b8      	ldr	r0, [r7, #24]
 8012434:	f7ff fece 	bl	80121d4 <xQueueGenericReset>
 8012438:	bf00      	nop
 801243a:	3710      	adds	r7, #16
 801243c:	46bd      	mov	sp, r7
 801243e:	bd80      	pop	{r7, pc}

08012440 <prvInitialiseMutex>:
 8012440:	b580      	push	{r7, lr}
 8012442:	b082      	sub	sp, #8
 8012444:	af00      	add	r7, sp, #0
 8012446:	6078      	str	r0, [r7, #4]
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	2b00      	cmp	r3, #0
 801244c:	d00e      	beq.n	801246c <prvInitialiseMutex+0x2c>
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	2200      	movs	r2, #0
 8012452:	605a      	str	r2, [r3, #4]
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	2200      	movs	r2, #0
 8012458:	601a      	str	r2, [r3, #0]
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	2200      	movs	r2, #0
 801245e:	60da      	str	r2, [r3, #12]
 8012460:	2300      	movs	r3, #0
 8012462:	2200      	movs	r2, #0
 8012464:	2100      	movs	r1, #0
 8012466:	6878      	ldr	r0, [r7, #4]
 8012468:	f000 f838 	bl	80124dc <xQueueGenericSend>
 801246c:	bf00      	nop
 801246e:	3708      	adds	r7, #8
 8012470:	46bd      	mov	sp, r7
 8012472:	bd80      	pop	{r7, pc}

08012474 <xQueueCreateMutex>:
 8012474:	b580      	push	{r7, lr}
 8012476:	b086      	sub	sp, #24
 8012478:	af00      	add	r7, sp, #0
 801247a:	4603      	mov	r3, r0
 801247c:	71fb      	strb	r3, [r7, #7]
 801247e:	2301      	movs	r3, #1
 8012480:	617b      	str	r3, [r7, #20]
 8012482:	2300      	movs	r3, #0
 8012484:	613b      	str	r3, [r7, #16]
 8012486:	79fb      	ldrb	r3, [r7, #7]
 8012488:	461a      	mov	r2, r3
 801248a:	6939      	ldr	r1, [r7, #16]
 801248c:	6978      	ldr	r0, [r7, #20]
 801248e:	f7ff ff7b 	bl	8012388 <xQueueGenericCreate>
 8012492:	60f8      	str	r0, [r7, #12]
 8012494:	68f8      	ldr	r0, [r7, #12]
 8012496:	f7ff ffd3 	bl	8012440 <prvInitialiseMutex>
 801249a:	68fb      	ldr	r3, [r7, #12]
 801249c:	4618      	mov	r0, r3
 801249e:	3718      	adds	r7, #24
 80124a0:	46bd      	mov	sp, r7
 80124a2:	bd80      	pop	{r7, pc}

080124a4 <xQueueCreateMutexStatic>:
 80124a4:	b580      	push	{r7, lr}
 80124a6:	b088      	sub	sp, #32
 80124a8:	af02      	add	r7, sp, #8
 80124aa:	4603      	mov	r3, r0
 80124ac:	6039      	str	r1, [r7, #0]
 80124ae:	71fb      	strb	r3, [r7, #7]
 80124b0:	2301      	movs	r3, #1
 80124b2:	617b      	str	r3, [r7, #20]
 80124b4:	2300      	movs	r3, #0
 80124b6:	613b      	str	r3, [r7, #16]
 80124b8:	79fb      	ldrb	r3, [r7, #7]
 80124ba:	9300      	str	r3, [sp, #0]
 80124bc:	683b      	ldr	r3, [r7, #0]
 80124be:	2200      	movs	r2, #0
 80124c0:	6939      	ldr	r1, [r7, #16]
 80124c2:	6978      	ldr	r0, [r7, #20]
 80124c4:	f7ff feee 	bl	80122a4 <xQueueGenericCreateStatic>
 80124c8:	60f8      	str	r0, [r7, #12]
 80124ca:	68f8      	ldr	r0, [r7, #12]
 80124cc:	f7ff ffb8 	bl	8012440 <prvInitialiseMutex>
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	4618      	mov	r0, r3
 80124d4:	3718      	adds	r7, #24
 80124d6:	46bd      	mov	sp, r7
 80124d8:	bd80      	pop	{r7, pc}
	...

080124dc <xQueueGenericSend>:
 80124dc:	b580      	push	{r7, lr}
 80124de:	b08e      	sub	sp, #56	; 0x38
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	60f8      	str	r0, [r7, #12]
 80124e4:	60b9      	str	r1, [r7, #8]
 80124e6:	607a      	str	r2, [r7, #4]
 80124e8:	603b      	str	r3, [r7, #0]
 80124ea:	2300      	movs	r3, #0
 80124ec:	637b      	str	r3, [r7, #52]	; 0x34
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	633b      	str	r3, [r7, #48]	; 0x30
 80124f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d109      	bne.n	801250c <xQueueGenericSend+0x30>
 80124f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124fc:	f383 8811 	msr	BASEPRI, r3
 8012500:	f3bf 8f6f 	isb	sy
 8012504:	f3bf 8f4f 	dsb	sy
 8012508:	62bb      	str	r3, [r7, #40]	; 0x28
 801250a:	e7fe      	b.n	801250a <xQueueGenericSend+0x2e>
 801250c:	68bb      	ldr	r3, [r7, #8]
 801250e:	2b00      	cmp	r3, #0
 8012510:	d103      	bne.n	801251a <xQueueGenericSend+0x3e>
 8012512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012516:	2b00      	cmp	r3, #0
 8012518:	d101      	bne.n	801251e <xQueueGenericSend+0x42>
 801251a:	2301      	movs	r3, #1
 801251c:	e000      	b.n	8012520 <xQueueGenericSend+0x44>
 801251e:	2300      	movs	r3, #0
 8012520:	2b00      	cmp	r3, #0
 8012522:	d109      	bne.n	8012538 <xQueueGenericSend+0x5c>
 8012524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012528:	f383 8811 	msr	BASEPRI, r3
 801252c:	f3bf 8f6f 	isb	sy
 8012530:	f3bf 8f4f 	dsb	sy
 8012534:	627b      	str	r3, [r7, #36]	; 0x24
 8012536:	e7fe      	b.n	8012536 <xQueueGenericSend+0x5a>
 8012538:	683b      	ldr	r3, [r7, #0]
 801253a:	2b02      	cmp	r3, #2
 801253c:	d103      	bne.n	8012546 <xQueueGenericSend+0x6a>
 801253e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012542:	2b01      	cmp	r3, #1
 8012544:	d101      	bne.n	801254a <xQueueGenericSend+0x6e>
 8012546:	2301      	movs	r3, #1
 8012548:	e000      	b.n	801254c <xQueueGenericSend+0x70>
 801254a:	2300      	movs	r3, #0
 801254c:	2b00      	cmp	r3, #0
 801254e:	d109      	bne.n	8012564 <xQueueGenericSend+0x88>
 8012550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012554:	f383 8811 	msr	BASEPRI, r3
 8012558:	f3bf 8f6f 	isb	sy
 801255c:	f3bf 8f4f 	dsb	sy
 8012560:	623b      	str	r3, [r7, #32]
 8012562:	e7fe      	b.n	8012562 <xQueueGenericSend+0x86>
 8012564:	f001 fb14 	bl	8013b90 <xTaskGetSchedulerState>
 8012568:	4603      	mov	r3, r0
 801256a:	2b00      	cmp	r3, #0
 801256c:	d102      	bne.n	8012574 <xQueueGenericSend+0x98>
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	2b00      	cmp	r3, #0
 8012572:	d101      	bne.n	8012578 <xQueueGenericSend+0x9c>
 8012574:	2301      	movs	r3, #1
 8012576:	e000      	b.n	801257a <xQueueGenericSend+0x9e>
 8012578:	2300      	movs	r3, #0
 801257a:	2b00      	cmp	r3, #0
 801257c:	d109      	bne.n	8012592 <xQueueGenericSend+0xb6>
 801257e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012582:	f383 8811 	msr	BASEPRI, r3
 8012586:	f3bf 8f6f 	isb	sy
 801258a:	f3bf 8f4f 	dsb	sy
 801258e:	61fb      	str	r3, [r7, #28]
 8012590:	e7fe      	b.n	8012590 <xQueueGenericSend+0xb4>
 8012592:	f002 f823 	bl	80145dc <vPortEnterCritical>
 8012596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012598:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801259a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801259c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801259e:	429a      	cmp	r2, r3
 80125a0:	d302      	bcc.n	80125a8 <xQueueGenericSend+0xcc>
 80125a2:	683b      	ldr	r3, [r7, #0]
 80125a4:	2b02      	cmp	r3, #2
 80125a6:	d129      	bne.n	80125fc <xQueueGenericSend+0x120>
 80125a8:	683a      	ldr	r2, [r7, #0]
 80125aa:	68b9      	ldr	r1, [r7, #8]
 80125ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80125ae:	f000 fc26 	bl	8012dfe <prvCopyDataToQueue>
 80125b2:	62f8      	str	r0, [r7, #44]	; 0x2c
 80125b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d010      	beq.n	80125de <xQueueGenericSend+0x102>
 80125bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125be:	3324      	adds	r3, #36	; 0x24
 80125c0:	4618      	mov	r0, r3
 80125c2:	f001 f929 	bl	8013818 <xTaskRemoveFromEventList>
 80125c6:	4603      	mov	r3, r0
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d013      	beq.n	80125f4 <xQueueGenericSend+0x118>
 80125cc:	4b3f      	ldr	r3, [pc, #252]	; (80126cc <xQueueGenericSend+0x1f0>)
 80125ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80125d2:	601a      	str	r2, [r3, #0]
 80125d4:	f3bf 8f4f 	dsb	sy
 80125d8:	f3bf 8f6f 	isb	sy
 80125dc:	e00a      	b.n	80125f4 <xQueueGenericSend+0x118>
 80125de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d007      	beq.n	80125f4 <xQueueGenericSend+0x118>
 80125e4:	4b39      	ldr	r3, [pc, #228]	; (80126cc <xQueueGenericSend+0x1f0>)
 80125e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80125ea:	601a      	str	r2, [r3, #0]
 80125ec:	f3bf 8f4f 	dsb	sy
 80125f0:	f3bf 8f6f 	isb	sy
 80125f4:	f002 f820 	bl	8014638 <vPortExitCritical>
 80125f8:	2301      	movs	r3, #1
 80125fa:	e063      	b.n	80126c4 <xQueueGenericSend+0x1e8>
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d103      	bne.n	801260a <xQueueGenericSend+0x12e>
 8012602:	f002 f819 	bl	8014638 <vPortExitCritical>
 8012606:	2300      	movs	r3, #0
 8012608:	e05c      	b.n	80126c4 <xQueueGenericSend+0x1e8>
 801260a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801260c:	2b00      	cmp	r3, #0
 801260e:	d106      	bne.n	801261e <xQueueGenericSend+0x142>
 8012610:	f107 0314 	add.w	r3, r7, #20
 8012614:	4618      	mov	r0, r3
 8012616:	f001 f961 	bl	80138dc <vTaskInternalSetTimeOutState>
 801261a:	2301      	movs	r3, #1
 801261c:	637b      	str	r3, [r7, #52]	; 0x34
 801261e:	f002 f80b 	bl	8014638 <vPortExitCritical>
 8012622:	f000 ff15 	bl	8013450 <vTaskSuspendAll>
 8012626:	f001 ffd9 	bl	80145dc <vPortEnterCritical>
 801262a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801262c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012630:	b25b      	sxtb	r3, r3
 8012632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012636:	d103      	bne.n	8012640 <xQueueGenericSend+0x164>
 8012638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801263a:	2200      	movs	r2, #0
 801263c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012642:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012646:	b25b      	sxtb	r3, r3
 8012648:	f1b3 3fff 	cmp.w	r3, #4294967295
 801264c:	d103      	bne.n	8012656 <xQueueGenericSend+0x17a>
 801264e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012650:	2200      	movs	r2, #0
 8012652:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012656:	f001 ffef 	bl	8014638 <vPortExitCritical>
 801265a:	1d3a      	adds	r2, r7, #4
 801265c:	f107 0314 	add.w	r3, r7, #20
 8012660:	4611      	mov	r1, r2
 8012662:	4618      	mov	r0, r3
 8012664:	f001 f950 	bl	8013908 <xTaskCheckForTimeOut>
 8012668:	4603      	mov	r3, r0
 801266a:	2b00      	cmp	r3, #0
 801266c:	d124      	bne.n	80126b8 <xQueueGenericSend+0x1dc>
 801266e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012670:	f000 fcbd 	bl	8012fee <prvIsQueueFull>
 8012674:	4603      	mov	r3, r0
 8012676:	2b00      	cmp	r3, #0
 8012678:	d018      	beq.n	80126ac <xQueueGenericSend+0x1d0>
 801267a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801267c:	3310      	adds	r3, #16
 801267e:	687a      	ldr	r2, [r7, #4]
 8012680:	4611      	mov	r1, r2
 8012682:	4618      	mov	r0, r3
 8012684:	f001 f8a4 	bl	80137d0 <vTaskPlaceOnEventList>
 8012688:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801268a:	f000 fc48 	bl	8012f1e <prvUnlockQueue>
 801268e:	f000 feed 	bl	801346c <xTaskResumeAll>
 8012692:	4603      	mov	r3, r0
 8012694:	2b00      	cmp	r3, #0
 8012696:	f47f af7c 	bne.w	8012592 <xQueueGenericSend+0xb6>
 801269a:	4b0c      	ldr	r3, [pc, #48]	; (80126cc <xQueueGenericSend+0x1f0>)
 801269c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80126a0:	601a      	str	r2, [r3, #0]
 80126a2:	f3bf 8f4f 	dsb	sy
 80126a6:	f3bf 8f6f 	isb	sy
 80126aa:	e772      	b.n	8012592 <xQueueGenericSend+0xb6>
 80126ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80126ae:	f000 fc36 	bl	8012f1e <prvUnlockQueue>
 80126b2:	f000 fedb 	bl	801346c <xTaskResumeAll>
 80126b6:	e76c      	b.n	8012592 <xQueueGenericSend+0xb6>
 80126b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80126ba:	f000 fc30 	bl	8012f1e <prvUnlockQueue>
 80126be:	f000 fed5 	bl	801346c <xTaskResumeAll>
 80126c2:	2300      	movs	r3, #0
 80126c4:	4618      	mov	r0, r3
 80126c6:	3738      	adds	r7, #56	; 0x38
 80126c8:	46bd      	mov	sp, r7
 80126ca:	bd80      	pop	{r7, pc}
 80126cc:	e000ed04 	.word	0xe000ed04

080126d0 <xQueueGenericSendFromISR>:
 80126d0:	b580      	push	{r7, lr}
 80126d2:	b08e      	sub	sp, #56	; 0x38
 80126d4:	af00      	add	r7, sp, #0
 80126d6:	60f8      	str	r0, [r7, #12]
 80126d8:	60b9      	str	r1, [r7, #8]
 80126da:	607a      	str	r2, [r7, #4]
 80126dc:	603b      	str	r3, [r7, #0]
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	633b      	str	r3, [r7, #48]	; 0x30
 80126e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d109      	bne.n	80126fc <xQueueGenericSendFromISR+0x2c>
 80126e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126ec:	f383 8811 	msr	BASEPRI, r3
 80126f0:	f3bf 8f6f 	isb	sy
 80126f4:	f3bf 8f4f 	dsb	sy
 80126f8:	627b      	str	r3, [r7, #36]	; 0x24
 80126fa:	e7fe      	b.n	80126fa <xQueueGenericSendFromISR+0x2a>
 80126fc:	68bb      	ldr	r3, [r7, #8]
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d103      	bne.n	801270a <xQueueGenericSendFromISR+0x3a>
 8012702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012706:	2b00      	cmp	r3, #0
 8012708:	d101      	bne.n	801270e <xQueueGenericSendFromISR+0x3e>
 801270a:	2301      	movs	r3, #1
 801270c:	e000      	b.n	8012710 <xQueueGenericSendFromISR+0x40>
 801270e:	2300      	movs	r3, #0
 8012710:	2b00      	cmp	r3, #0
 8012712:	d109      	bne.n	8012728 <xQueueGenericSendFromISR+0x58>
 8012714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012718:	f383 8811 	msr	BASEPRI, r3
 801271c:	f3bf 8f6f 	isb	sy
 8012720:	f3bf 8f4f 	dsb	sy
 8012724:	623b      	str	r3, [r7, #32]
 8012726:	e7fe      	b.n	8012726 <xQueueGenericSendFromISR+0x56>
 8012728:	683b      	ldr	r3, [r7, #0]
 801272a:	2b02      	cmp	r3, #2
 801272c:	d103      	bne.n	8012736 <xQueueGenericSendFromISR+0x66>
 801272e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012732:	2b01      	cmp	r3, #1
 8012734:	d101      	bne.n	801273a <xQueueGenericSendFromISR+0x6a>
 8012736:	2301      	movs	r3, #1
 8012738:	e000      	b.n	801273c <xQueueGenericSendFromISR+0x6c>
 801273a:	2300      	movs	r3, #0
 801273c:	2b00      	cmp	r3, #0
 801273e:	d109      	bne.n	8012754 <xQueueGenericSendFromISR+0x84>
 8012740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012744:	f383 8811 	msr	BASEPRI, r3
 8012748:	f3bf 8f6f 	isb	sy
 801274c:	f3bf 8f4f 	dsb	sy
 8012750:	61fb      	str	r3, [r7, #28]
 8012752:	e7fe      	b.n	8012752 <xQueueGenericSendFromISR+0x82>
 8012754:	f002 f81e 	bl	8014794 <vPortValidateInterruptPriority>
 8012758:	f3ef 8211 	mrs	r2, BASEPRI
 801275c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012760:	f383 8811 	msr	BASEPRI, r3
 8012764:	f3bf 8f6f 	isb	sy
 8012768:	f3bf 8f4f 	dsb	sy
 801276c:	61ba      	str	r2, [r7, #24]
 801276e:	617b      	str	r3, [r7, #20]
 8012770:	69bb      	ldr	r3, [r7, #24]
 8012772:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012776:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801277a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801277c:	429a      	cmp	r2, r3
 801277e:	d302      	bcc.n	8012786 <xQueueGenericSendFromISR+0xb6>
 8012780:	683b      	ldr	r3, [r7, #0]
 8012782:	2b02      	cmp	r3, #2
 8012784:	d12c      	bne.n	80127e0 <xQueueGenericSendFromISR+0x110>
 8012786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012788:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801278c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012790:	683a      	ldr	r2, [r7, #0]
 8012792:	68b9      	ldr	r1, [r7, #8]
 8012794:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012796:	f000 fb32 	bl	8012dfe <prvCopyDataToQueue>
 801279a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 801279e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127a2:	d112      	bne.n	80127ca <xQueueGenericSendFromISR+0xfa>
 80127a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d016      	beq.n	80127da <xQueueGenericSendFromISR+0x10a>
 80127ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127ae:	3324      	adds	r3, #36	; 0x24
 80127b0:	4618      	mov	r0, r3
 80127b2:	f001 f831 	bl	8013818 <xTaskRemoveFromEventList>
 80127b6:	4603      	mov	r3, r0
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d00e      	beq.n	80127da <xQueueGenericSendFromISR+0x10a>
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d00b      	beq.n	80127da <xQueueGenericSendFromISR+0x10a>
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	2201      	movs	r2, #1
 80127c6:	601a      	str	r2, [r3, #0]
 80127c8:	e007      	b.n	80127da <xQueueGenericSendFromISR+0x10a>
 80127ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80127ce:	3301      	adds	r3, #1
 80127d0:	b2db      	uxtb	r3, r3
 80127d2:	b25a      	sxtb	r2, r3
 80127d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80127da:	2301      	movs	r3, #1
 80127dc:	637b      	str	r3, [r7, #52]	; 0x34
 80127de:	e001      	b.n	80127e4 <xQueueGenericSendFromISR+0x114>
 80127e0:	2300      	movs	r3, #0
 80127e2:	637b      	str	r3, [r7, #52]	; 0x34
 80127e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127e6:	613b      	str	r3, [r7, #16]
 80127e8:	693b      	ldr	r3, [r7, #16]
 80127ea:	f383 8811 	msr	BASEPRI, r3
 80127ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127f0:	4618      	mov	r0, r3
 80127f2:	3738      	adds	r7, #56	; 0x38
 80127f4:	46bd      	mov	sp, r7
 80127f6:	bd80      	pop	{r7, pc}

080127f8 <xQueueGiveFromISR>:
 80127f8:	b580      	push	{r7, lr}
 80127fa:	b08e      	sub	sp, #56	; 0x38
 80127fc:	af00      	add	r7, sp, #0
 80127fe:	6078      	str	r0, [r7, #4]
 8012800:	6039      	str	r1, [r7, #0]
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	633b      	str	r3, [r7, #48]	; 0x30
 8012806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012808:	2b00      	cmp	r3, #0
 801280a:	d109      	bne.n	8012820 <xQueueGiveFromISR+0x28>
 801280c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012810:	f383 8811 	msr	BASEPRI, r3
 8012814:	f3bf 8f6f 	isb	sy
 8012818:	f3bf 8f4f 	dsb	sy
 801281c:	623b      	str	r3, [r7, #32]
 801281e:	e7fe      	b.n	801281e <xQueueGiveFromISR+0x26>
 8012820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012824:	2b00      	cmp	r3, #0
 8012826:	d009      	beq.n	801283c <xQueueGiveFromISR+0x44>
 8012828:	f04f 0350 	mov.w	r3, #80	; 0x50
 801282c:	f383 8811 	msr	BASEPRI, r3
 8012830:	f3bf 8f6f 	isb	sy
 8012834:	f3bf 8f4f 	dsb	sy
 8012838:	61fb      	str	r3, [r7, #28]
 801283a:	e7fe      	b.n	801283a <xQueueGiveFromISR+0x42>
 801283c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	2b00      	cmp	r3, #0
 8012842:	d103      	bne.n	801284c <xQueueGiveFromISR+0x54>
 8012844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012846:	685b      	ldr	r3, [r3, #4]
 8012848:	2b00      	cmp	r3, #0
 801284a:	d101      	bne.n	8012850 <xQueueGiveFromISR+0x58>
 801284c:	2301      	movs	r3, #1
 801284e:	e000      	b.n	8012852 <xQueueGiveFromISR+0x5a>
 8012850:	2300      	movs	r3, #0
 8012852:	2b00      	cmp	r3, #0
 8012854:	d109      	bne.n	801286a <xQueueGiveFromISR+0x72>
 8012856:	f04f 0350 	mov.w	r3, #80	; 0x50
 801285a:	f383 8811 	msr	BASEPRI, r3
 801285e:	f3bf 8f6f 	isb	sy
 8012862:	f3bf 8f4f 	dsb	sy
 8012866:	61bb      	str	r3, [r7, #24]
 8012868:	e7fe      	b.n	8012868 <xQueueGiveFromISR+0x70>
 801286a:	f001 ff93 	bl	8014794 <vPortValidateInterruptPriority>
 801286e:	f3ef 8211 	mrs	r2, BASEPRI
 8012872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012876:	f383 8811 	msr	BASEPRI, r3
 801287a:	f3bf 8f6f 	isb	sy
 801287e:	f3bf 8f4f 	dsb	sy
 8012882:	617a      	str	r2, [r7, #20]
 8012884:	613b      	str	r3, [r7, #16]
 8012886:	697b      	ldr	r3, [r7, #20]
 8012888:	62fb      	str	r3, [r7, #44]	; 0x2c
 801288a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801288c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801288e:	62bb      	str	r3, [r7, #40]	; 0x28
 8012890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012894:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012896:	429a      	cmp	r2, r3
 8012898:	d22b      	bcs.n	80128f2 <xQueueGiveFromISR+0xfa>
 801289a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801289c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80128a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80128a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128a6:	1c5a      	adds	r2, r3, #1
 80128a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128aa:	639a      	str	r2, [r3, #56]	; 0x38
 80128ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80128b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128b4:	d112      	bne.n	80128dc <xQueueGiveFromISR+0xe4>
 80128b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d016      	beq.n	80128ec <xQueueGiveFromISR+0xf4>
 80128be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128c0:	3324      	adds	r3, #36	; 0x24
 80128c2:	4618      	mov	r0, r3
 80128c4:	f000 ffa8 	bl	8013818 <xTaskRemoveFromEventList>
 80128c8:	4603      	mov	r3, r0
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d00e      	beq.n	80128ec <xQueueGiveFromISR+0xf4>
 80128ce:	683b      	ldr	r3, [r7, #0]
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d00b      	beq.n	80128ec <xQueueGiveFromISR+0xf4>
 80128d4:	683b      	ldr	r3, [r7, #0]
 80128d6:	2201      	movs	r2, #1
 80128d8:	601a      	str	r2, [r3, #0]
 80128da:	e007      	b.n	80128ec <xQueueGiveFromISR+0xf4>
 80128dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80128e0:	3301      	adds	r3, #1
 80128e2:	b2db      	uxtb	r3, r3
 80128e4:	b25a      	sxtb	r2, r3
 80128e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80128ec:	2301      	movs	r3, #1
 80128ee:	637b      	str	r3, [r7, #52]	; 0x34
 80128f0:	e001      	b.n	80128f6 <xQueueGiveFromISR+0xfe>
 80128f2:	2300      	movs	r3, #0
 80128f4:	637b      	str	r3, [r7, #52]	; 0x34
 80128f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128f8:	60fb      	str	r3, [r7, #12]
 80128fa:	68fb      	ldr	r3, [r7, #12]
 80128fc:	f383 8811 	msr	BASEPRI, r3
 8012900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012902:	4618      	mov	r0, r3
 8012904:	3738      	adds	r7, #56	; 0x38
 8012906:	46bd      	mov	sp, r7
 8012908:	bd80      	pop	{r7, pc}
	...

0801290c <xQueueReceive>:
 801290c:	b580      	push	{r7, lr}
 801290e:	b08c      	sub	sp, #48	; 0x30
 8012910:	af00      	add	r7, sp, #0
 8012912:	60f8      	str	r0, [r7, #12]
 8012914:	60b9      	str	r1, [r7, #8]
 8012916:	607a      	str	r2, [r7, #4]
 8012918:	2300      	movs	r3, #0
 801291a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801291c:	68fb      	ldr	r3, [r7, #12]
 801291e:	62bb      	str	r3, [r7, #40]	; 0x28
 8012920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012922:	2b00      	cmp	r3, #0
 8012924:	d109      	bne.n	801293a <xQueueReceive+0x2e>
 8012926:	f04f 0350 	mov.w	r3, #80	; 0x50
 801292a:	f383 8811 	msr	BASEPRI, r3
 801292e:	f3bf 8f6f 	isb	sy
 8012932:	f3bf 8f4f 	dsb	sy
 8012936:	623b      	str	r3, [r7, #32]
 8012938:	e7fe      	b.n	8012938 <xQueueReceive+0x2c>
 801293a:	68bb      	ldr	r3, [r7, #8]
 801293c:	2b00      	cmp	r3, #0
 801293e:	d103      	bne.n	8012948 <xQueueReceive+0x3c>
 8012940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012944:	2b00      	cmp	r3, #0
 8012946:	d101      	bne.n	801294c <xQueueReceive+0x40>
 8012948:	2301      	movs	r3, #1
 801294a:	e000      	b.n	801294e <xQueueReceive+0x42>
 801294c:	2300      	movs	r3, #0
 801294e:	2b00      	cmp	r3, #0
 8012950:	d109      	bne.n	8012966 <xQueueReceive+0x5a>
 8012952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012956:	f383 8811 	msr	BASEPRI, r3
 801295a:	f3bf 8f6f 	isb	sy
 801295e:	f3bf 8f4f 	dsb	sy
 8012962:	61fb      	str	r3, [r7, #28]
 8012964:	e7fe      	b.n	8012964 <xQueueReceive+0x58>
 8012966:	f001 f913 	bl	8013b90 <xTaskGetSchedulerState>
 801296a:	4603      	mov	r3, r0
 801296c:	2b00      	cmp	r3, #0
 801296e:	d102      	bne.n	8012976 <xQueueReceive+0x6a>
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	2b00      	cmp	r3, #0
 8012974:	d101      	bne.n	801297a <xQueueReceive+0x6e>
 8012976:	2301      	movs	r3, #1
 8012978:	e000      	b.n	801297c <xQueueReceive+0x70>
 801297a:	2300      	movs	r3, #0
 801297c:	2b00      	cmp	r3, #0
 801297e:	d109      	bne.n	8012994 <xQueueReceive+0x88>
 8012980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012984:	f383 8811 	msr	BASEPRI, r3
 8012988:	f3bf 8f6f 	isb	sy
 801298c:	f3bf 8f4f 	dsb	sy
 8012990:	61bb      	str	r3, [r7, #24]
 8012992:	e7fe      	b.n	8012992 <xQueueReceive+0x86>
 8012994:	f001 fe22 	bl	80145dc <vPortEnterCritical>
 8012998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801299a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801299c:	627b      	str	r3, [r7, #36]	; 0x24
 801299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d01f      	beq.n	80129e4 <xQueueReceive+0xd8>
 80129a4:	68b9      	ldr	r1, [r7, #8]
 80129a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80129a8:	f000 fa93 	bl	8012ed2 <prvCopyDataFromQueue>
 80129ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129ae:	1e5a      	subs	r2, r3, #1
 80129b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129b2:	639a      	str	r2, [r3, #56]	; 0x38
 80129b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129b6:	691b      	ldr	r3, [r3, #16]
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d00f      	beq.n	80129dc <xQueueReceive+0xd0>
 80129bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129be:	3310      	adds	r3, #16
 80129c0:	4618      	mov	r0, r3
 80129c2:	f000 ff29 	bl	8013818 <xTaskRemoveFromEventList>
 80129c6:	4603      	mov	r3, r0
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d007      	beq.n	80129dc <xQueueReceive+0xd0>
 80129cc:	4b3c      	ldr	r3, [pc, #240]	; (8012ac0 <xQueueReceive+0x1b4>)
 80129ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80129d2:	601a      	str	r2, [r3, #0]
 80129d4:	f3bf 8f4f 	dsb	sy
 80129d8:	f3bf 8f6f 	isb	sy
 80129dc:	f001 fe2c 	bl	8014638 <vPortExitCritical>
 80129e0:	2301      	movs	r3, #1
 80129e2:	e069      	b.n	8012ab8 <xQueueReceive+0x1ac>
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d103      	bne.n	80129f2 <xQueueReceive+0xe6>
 80129ea:	f001 fe25 	bl	8014638 <vPortExitCritical>
 80129ee:	2300      	movs	r3, #0
 80129f0:	e062      	b.n	8012ab8 <xQueueReceive+0x1ac>
 80129f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d106      	bne.n	8012a06 <xQueueReceive+0xfa>
 80129f8:	f107 0310 	add.w	r3, r7, #16
 80129fc:	4618      	mov	r0, r3
 80129fe:	f000 ff6d 	bl	80138dc <vTaskInternalSetTimeOutState>
 8012a02:	2301      	movs	r3, #1
 8012a04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012a06:	f001 fe17 	bl	8014638 <vPortExitCritical>
 8012a0a:	f000 fd21 	bl	8013450 <vTaskSuspendAll>
 8012a0e:	f001 fde5 	bl	80145dc <vPortEnterCritical>
 8012a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012a18:	b25b      	sxtb	r3, r3
 8012a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a1e:	d103      	bne.n	8012a28 <xQueueReceive+0x11c>
 8012a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a22:	2200      	movs	r2, #0
 8012a24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012a2e:	b25b      	sxtb	r3, r3
 8012a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a34:	d103      	bne.n	8012a3e <xQueueReceive+0x132>
 8012a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a38:	2200      	movs	r2, #0
 8012a3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012a3e:	f001 fdfb 	bl	8014638 <vPortExitCritical>
 8012a42:	1d3a      	adds	r2, r7, #4
 8012a44:	f107 0310 	add.w	r3, r7, #16
 8012a48:	4611      	mov	r1, r2
 8012a4a:	4618      	mov	r0, r3
 8012a4c:	f000 ff5c 	bl	8013908 <xTaskCheckForTimeOut>
 8012a50:	4603      	mov	r3, r0
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d123      	bne.n	8012a9e <xQueueReceive+0x192>
 8012a56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012a58:	f000 fab3 	bl	8012fc2 <prvIsQueueEmpty>
 8012a5c:	4603      	mov	r3, r0
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d017      	beq.n	8012a92 <xQueueReceive+0x186>
 8012a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a64:	3324      	adds	r3, #36	; 0x24
 8012a66:	687a      	ldr	r2, [r7, #4]
 8012a68:	4611      	mov	r1, r2
 8012a6a:	4618      	mov	r0, r3
 8012a6c:	f000 feb0 	bl	80137d0 <vTaskPlaceOnEventList>
 8012a70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012a72:	f000 fa54 	bl	8012f1e <prvUnlockQueue>
 8012a76:	f000 fcf9 	bl	801346c <xTaskResumeAll>
 8012a7a:	4603      	mov	r3, r0
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d189      	bne.n	8012994 <xQueueReceive+0x88>
 8012a80:	4b0f      	ldr	r3, [pc, #60]	; (8012ac0 <xQueueReceive+0x1b4>)
 8012a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a86:	601a      	str	r2, [r3, #0]
 8012a88:	f3bf 8f4f 	dsb	sy
 8012a8c:	f3bf 8f6f 	isb	sy
 8012a90:	e780      	b.n	8012994 <xQueueReceive+0x88>
 8012a92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012a94:	f000 fa43 	bl	8012f1e <prvUnlockQueue>
 8012a98:	f000 fce8 	bl	801346c <xTaskResumeAll>
 8012a9c:	e77a      	b.n	8012994 <xQueueReceive+0x88>
 8012a9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012aa0:	f000 fa3d 	bl	8012f1e <prvUnlockQueue>
 8012aa4:	f000 fce2 	bl	801346c <xTaskResumeAll>
 8012aa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012aaa:	f000 fa8a 	bl	8012fc2 <prvIsQueueEmpty>
 8012aae:	4603      	mov	r3, r0
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	f43f af6f 	beq.w	8012994 <xQueueReceive+0x88>
 8012ab6:	2300      	movs	r3, #0
 8012ab8:	4618      	mov	r0, r3
 8012aba:	3730      	adds	r7, #48	; 0x30
 8012abc:	46bd      	mov	sp, r7
 8012abe:	bd80      	pop	{r7, pc}
 8012ac0:	e000ed04 	.word	0xe000ed04

08012ac4 <xQueueSemaphoreTake>:
 8012ac4:	b580      	push	{r7, lr}
 8012ac6:	b08e      	sub	sp, #56	; 0x38
 8012ac8:	af00      	add	r7, sp, #0
 8012aca:	6078      	str	r0, [r7, #4]
 8012acc:	6039      	str	r1, [r7, #0]
 8012ace:	2300      	movs	r3, #0
 8012ad0:	637b      	str	r3, [r7, #52]	; 0x34
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012ad6:	2300      	movs	r3, #0
 8012ad8:	633b      	str	r3, [r7, #48]	; 0x30
 8012ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d109      	bne.n	8012af4 <xQueueSemaphoreTake+0x30>
 8012ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ae4:	f383 8811 	msr	BASEPRI, r3
 8012ae8:	f3bf 8f6f 	isb	sy
 8012aec:	f3bf 8f4f 	dsb	sy
 8012af0:	623b      	str	r3, [r7, #32]
 8012af2:	e7fe      	b.n	8012af2 <xQueueSemaphoreTake+0x2e>
 8012af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d009      	beq.n	8012b10 <xQueueSemaphoreTake+0x4c>
 8012afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b00:	f383 8811 	msr	BASEPRI, r3
 8012b04:	f3bf 8f6f 	isb	sy
 8012b08:	f3bf 8f4f 	dsb	sy
 8012b0c:	61fb      	str	r3, [r7, #28]
 8012b0e:	e7fe      	b.n	8012b0e <xQueueSemaphoreTake+0x4a>
 8012b10:	f001 f83e 	bl	8013b90 <xTaskGetSchedulerState>
 8012b14:	4603      	mov	r3, r0
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d102      	bne.n	8012b20 <xQueueSemaphoreTake+0x5c>
 8012b1a:	683b      	ldr	r3, [r7, #0]
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d101      	bne.n	8012b24 <xQueueSemaphoreTake+0x60>
 8012b20:	2301      	movs	r3, #1
 8012b22:	e000      	b.n	8012b26 <xQueueSemaphoreTake+0x62>
 8012b24:	2300      	movs	r3, #0
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d109      	bne.n	8012b3e <xQueueSemaphoreTake+0x7a>
 8012b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b2e:	f383 8811 	msr	BASEPRI, r3
 8012b32:	f3bf 8f6f 	isb	sy
 8012b36:	f3bf 8f4f 	dsb	sy
 8012b3a:	61bb      	str	r3, [r7, #24]
 8012b3c:	e7fe      	b.n	8012b3c <xQueueSemaphoreTake+0x78>
 8012b3e:	f001 fd4d 	bl	80145dc <vPortEnterCritical>
 8012b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b46:	62bb      	str	r3, [r7, #40]	; 0x28
 8012b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d024      	beq.n	8012b98 <xQueueSemaphoreTake+0xd4>
 8012b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b50:	1e5a      	subs	r2, r3, #1
 8012b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b54:	639a      	str	r2, [r3, #56]	; 0x38
 8012b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d104      	bne.n	8012b68 <xQueueSemaphoreTake+0xa4>
 8012b5e:	f001 f9dd 	bl	8013f1c <pvTaskIncrementMutexHeldCount>
 8012b62:	4602      	mov	r2, r0
 8012b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b66:	605a      	str	r2, [r3, #4]
 8012b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b6a:	691b      	ldr	r3, [r3, #16]
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d00f      	beq.n	8012b90 <xQueueSemaphoreTake+0xcc>
 8012b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b72:	3310      	adds	r3, #16
 8012b74:	4618      	mov	r0, r3
 8012b76:	f000 fe4f 	bl	8013818 <xTaskRemoveFromEventList>
 8012b7a:	4603      	mov	r3, r0
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d007      	beq.n	8012b90 <xQueueSemaphoreTake+0xcc>
 8012b80:	4b53      	ldr	r3, [pc, #332]	; (8012cd0 <xQueueSemaphoreTake+0x20c>)
 8012b82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012b86:	601a      	str	r2, [r3, #0]
 8012b88:	f3bf 8f4f 	dsb	sy
 8012b8c:	f3bf 8f6f 	isb	sy
 8012b90:	f001 fd52 	bl	8014638 <vPortExitCritical>
 8012b94:	2301      	movs	r3, #1
 8012b96:	e096      	b.n	8012cc6 <xQueueSemaphoreTake+0x202>
 8012b98:	683b      	ldr	r3, [r7, #0]
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d110      	bne.n	8012bc0 <xQueueSemaphoreTake+0xfc>
 8012b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d009      	beq.n	8012bb8 <xQueueSemaphoreTake+0xf4>
 8012ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ba8:	f383 8811 	msr	BASEPRI, r3
 8012bac:	f3bf 8f6f 	isb	sy
 8012bb0:	f3bf 8f4f 	dsb	sy
 8012bb4:	617b      	str	r3, [r7, #20]
 8012bb6:	e7fe      	b.n	8012bb6 <xQueueSemaphoreTake+0xf2>
 8012bb8:	f001 fd3e 	bl	8014638 <vPortExitCritical>
 8012bbc:	2300      	movs	r3, #0
 8012bbe:	e082      	b.n	8012cc6 <xQueueSemaphoreTake+0x202>
 8012bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d106      	bne.n	8012bd4 <xQueueSemaphoreTake+0x110>
 8012bc6:	f107 030c 	add.w	r3, r7, #12
 8012bca:	4618      	mov	r0, r3
 8012bcc:	f000 fe86 	bl	80138dc <vTaskInternalSetTimeOutState>
 8012bd0:	2301      	movs	r3, #1
 8012bd2:	637b      	str	r3, [r7, #52]	; 0x34
 8012bd4:	f001 fd30 	bl	8014638 <vPortExitCritical>
 8012bd8:	f000 fc3a 	bl	8013450 <vTaskSuspendAll>
 8012bdc:	f001 fcfe 	bl	80145dc <vPortEnterCritical>
 8012be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012be2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012be6:	b25b      	sxtb	r3, r3
 8012be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012bec:	d103      	bne.n	8012bf6 <xQueueSemaphoreTake+0x132>
 8012bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bf0:	2200      	movs	r2, #0
 8012bf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bf8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012bfc:	b25b      	sxtb	r3, r3
 8012bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c02:	d103      	bne.n	8012c0c <xQueueSemaphoreTake+0x148>
 8012c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c06:	2200      	movs	r2, #0
 8012c08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012c0c:	f001 fd14 	bl	8014638 <vPortExitCritical>
 8012c10:	463a      	mov	r2, r7
 8012c12:	f107 030c 	add.w	r3, r7, #12
 8012c16:	4611      	mov	r1, r2
 8012c18:	4618      	mov	r0, r3
 8012c1a:	f000 fe75 	bl	8013908 <xTaskCheckForTimeOut>
 8012c1e:	4603      	mov	r3, r0
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d132      	bne.n	8012c8a <xQueueSemaphoreTake+0x1c6>
 8012c24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012c26:	f000 f9cc 	bl	8012fc2 <prvIsQueueEmpty>
 8012c2a:	4603      	mov	r3, r0
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d026      	beq.n	8012c7e <xQueueSemaphoreTake+0x1ba>
 8012c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d109      	bne.n	8012c4c <xQueueSemaphoreTake+0x188>
 8012c38:	f001 fcd0 	bl	80145dc <vPortEnterCritical>
 8012c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c3e:	685b      	ldr	r3, [r3, #4]
 8012c40:	4618      	mov	r0, r3
 8012c42:	f000 ffc3 	bl	8013bcc <xTaskPriorityInherit>
 8012c46:	6338      	str	r0, [r7, #48]	; 0x30
 8012c48:	f001 fcf6 	bl	8014638 <vPortExitCritical>
 8012c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c4e:	3324      	adds	r3, #36	; 0x24
 8012c50:	683a      	ldr	r2, [r7, #0]
 8012c52:	4611      	mov	r1, r2
 8012c54:	4618      	mov	r0, r3
 8012c56:	f000 fdbb 	bl	80137d0 <vTaskPlaceOnEventList>
 8012c5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012c5c:	f000 f95f 	bl	8012f1e <prvUnlockQueue>
 8012c60:	f000 fc04 	bl	801346c <xTaskResumeAll>
 8012c64:	4603      	mov	r3, r0
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	f47f af69 	bne.w	8012b3e <xQueueSemaphoreTake+0x7a>
 8012c6c:	4b18      	ldr	r3, [pc, #96]	; (8012cd0 <xQueueSemaphoreTake+0x20c>)
 8012c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c72:	601a      	str	r2, [r3, #0]
 8012c74:	f3bf 8f4f 	dsb	sy
 8012c78:	f3bf 8f6f 	isb	sy
 8012c7c:	e75f      	b.n	8012b3e <xQueueSemaphoreTake+0x7a>
 8012c7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012c80:	f000 f94d 	bl	8012f1e <prvUnlockQueue>
 8012c84:	f000 fbf2 	bl	801346c <xTaskResumeAll>
 8012c88:	e759      	b.n	8012b3e <xQueueSemaphoreTake+0x7a>
 8012c8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012c8c:	f000 f947 	bl	8012f1e <prvUnlockQueue>
 8012c90:	f000 fbec 	bl	801346c <xTaskResumeAll>
 8012c94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012c96:	f000 f994 	bl	8012fc2 <prvIsQueueEmpty>
 8012c9a:	4603      	mov	r3, r0
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	f43f af4e 	beq.w	8012b3e <xQueueSemaphoreTake+0x7a>
 8012ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d00d      	beq.n	8012cc4 <xQueueSemaphoreTake+0x200>
 8012ca8:	f001 fc98 	bl	80145dc <vPortEnterCritical>
 8012cac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012cae:	f000 f88e 	bl	8012dce <prvGetDisinheritPriorityAfterTimeout>
 8012cb2:	6278      	str	r0, [r7, #36]	; 0x24
 8012cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cb6:	685b      	ldr	r3, [r3, #4]
 8012cb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012cba:	4618      	mov	r0, r3
 8012cbc:	f001 f890 	bl	8013de0 <vTaskPriorityDisinheritAfterTimeout>
 8012cc0:	f001 fcba 	bl	8014638 <vPortExitCritical>
 8012cc4:	2300      	movs	r3, #0
 8012cc6:	4618      	mov	r0, r3
 8012cc8:	3738      	adds	r7, #56	; 0x38
 8012cca:	46bd      	mov	sp, r7
 8012ccc:	bd80      	pop	{r7, pc}
 8012cce:	bf00      	nop
 8012cd0:	e000ed04 	.word	0xe000ed04

08012cd4 <xQueueReceiveFromISR>:
 8012cd4:	b580      	push	{r7, lr}
 8012cd6:	b08e      	sub	sp, #56	; 0x38
 8012cd8:	af00      	add	r7, sp, #0
 8012cda:	60f8      	str	r0, [r7, #12]
 8012cdc:	60b9      	str	r1, [r7, #8]
 8012cde:	607a      	str	r2, [r7, #4]
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	633b      	str	r3, [r7, #48]	; 0x30
 8012ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d109      	bne.n	8012cfe <xQueueReceiveFromISR+0x2a>
 8012cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cee:	f383 8811 	msr	BASEPRI, r3
 8012cf2:	f3bf 8f6f 	isb	sy
 8012cf6:	f3bf 8f4f 	dsb	sy
 8012cfa:	623b      	str	r3, [r7, #32]
 8012cfc:	e7fe      	b.n	8012cfc <xQueueReceiveFromISR+0x28>
 8012cfe:	68bb      	ldr	r3, [r7, #8]
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d103      	bne.n	8012d0c <xQueueReceiveFromISR+0x38>
 8012d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d101      	bne.n	8012d10 <xQueueReceiveFromISR+0x3c>
 8012d0c:	2301      	movs	r3, #1
 8012d0e:	e000      	b.n	8012d12 <xQueueReceiveFromISR+0x3e>
 8012d10:	2300      	movs	r3, #0
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d109      	bne.n	8012d2a <xQueueReceiveFromISR+0x56>
 8012d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d1a:	f383 8811 	msr	BASEPRI, r3
 8012d1e:	f3bf 8f6f 	isb	sy
 8012d22:	f3bf 8f4f 	dsb	sy
 8012d26:	61fb      	str	r3, [r7, #28]
 8012d28:	e7fe      	b.n	8012d28 <xQueueReceiveFromISR+0x54>
 8012d2a:	f001 fd33 	bl	8014794 <vPortValidateInterruptPriority>
 8012d2e:	f3ef 8211 	mrs	r2, BASEPRI
 8012d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d36:	f383 8811 	msr	BASEPRI, r3
 8012d3a:	f3bf 8f6f 	isb	sy
 8012d3e:	f3bf 8f4f 	dsb	sy
 8012d42:	61ba      	str	r2, [r7, #24]
 8012d44:	617b      	str	r3, [r7, #20]
 8012d46:	69bb      	ldr	r3, [r7, #24]
 8012d48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012d4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8012d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d02f      	beq.n	8012db6 <xQueueReceiveFromISR+0xe2>
 8012d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012d5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012d60:	68b9      	ldr	r1, [r7, #8]
 8012d62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012d64:	f000 f8b5 	bl	8012ed2 <prvCopyDataFromQueue>
 8012d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d6a:	1e5a      	subs	r2, r3, #1
 8012d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d6e:	639a      	str	r2, [r3, #56]	; 0x38
 8012d70:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d78:	d112      	bne.n	8012da0 <xQueueReceiveFromISR+0xcc>
 8012d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d7c:	691b      	ldr	r3, [r3, #16]
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d016      	beq.n	8012db0 <xQueueReceiveFromISR+0xdc>
 8012d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d84:	3310      	adds	r3, #16
 8012d86:	4618      	mov	r0, r3
 8012d88:	f000 fd46 	bl	8013818 <xTaskRemoveFromEventList>
 8012d8c:	4603      	mov	r3, r0
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d00e      	beq.n	8012db0 <xQueueReceiveFromISR+0xdc>
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d00b      	beq.n	8012db0 <xQueueReceiveFromISR+0xdc>
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	2201      	movs	r2, #1
 8012d9c:	601a      	str	r2, [r3, #0]
 8012d9e:	e007      	b.n	8012db0 <xQueueReceiveFromISR+0xdc>
 8012da0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012da4:	3301      	adds	r3, #1
 8012da6:	b2db      	uxtb	r3, r3
 8012da8:	b25a      	sxtb	r2, r3
 8012daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012db0:	2301      	movs	r3, #1
 8012db2:	637b      	str	r3, [r7, #52]	; 0x34
 8012db4:	e001      	b.n	8012dba <xQueueReceiveFromISR+0xe6>
 8012db6:	2300      	movs	r3, #0
 8012db8:	637b      	str	r3, [r7, #52]	; 0x34
 8012dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dbc:	613b      	str	r3, [r7, #16]
 8012dbe:	693b      	ldr	r3, [r7, #16]
 8012dc0:	f383 8811 	msr	BASEPRI, r3
 8012dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012dc6:	4618      	mov	r0, r3
 8012dc8:	3738      	adds	r7, #56	; 0x38
 8012dca:	46bd      	mov	sp, r7
 8012dcc:	bd80      	pop	{r7, pc}

08012dce <prvGetDisinheritPriorityAfterTimeout>:
 8012dce:	b480      	push	{r7}
 8012dd0:	b085      	sub	sp, #20
 8012dd2:	af00      	add	r7, sp, #0
 8012dd4:	6078      	str	r0, [r7, #4]
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d006      	beq.n	8012dec <prvGetDisinheritPriorityAfterTimeout+0x1e>
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	f1c3 0307 	rsb	r3, r3, #7
 8012de8:	60fb      	str	r3, [r7, #12]
 8012dea:	e001      	b.n	8012df0 <prvGetDisinheritPriorityAfterTimeout+0x22>
 8012dec:	2300      	movs	r3, #0
 8012dee:	60fb      	str	r3, [r7, #12]
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	4618      	mov	r0, r3
 8012df4:	3714      	adds	r7, #20
 8012df6:	46bd      	mov	sp, r7
 8012df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dfc:	4770      	bx	lr

08012dfe <prvCopyDataToQueue>:
 8012dfe:	b580      	push	{r7, lr}
 8012e00:	b086      	sub	sp, #24
 8012e02:	af00      	add	r7, sp, #0
 8012e04:	60f8      	str	r0, [r7, #12]
 8012e06:	60b9      	str	r1, [r7, #8]
 8012e08:	607a      	str	r2, [r7, #4]
 8012e0a:	2300      	movs	r3, #0
 8012e0c:	617b      	str	r3, [r7, #20]
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e12:	613b      	str	r3, [r7, #16]
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d10d      	bne.n	8012e38 <prvCopyDataToQueue+0x3a>
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d14d      	bne.n	8012ec0 <prvCopyDataToQueue+0xc2>
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	685b      	ldr	r3, [r3, #4]
 8012e28:	4618      	mov	r0, r3
 8012e2a:	f000 ff55 	bl	8013cd8 <xTaskPriorityDisinherit>
 8012e2e:	6178      	str	r0, [r7, #20]
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	2200      	movs	r2, #0
 8012e34:	605a      	str	r2, [r3, #4]
 8012e36:	e043      	b.n	8012ec0 <prvCopyDataToQueue+0xc2>
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d119      	bne.n	8012e72 <prvCopyDataToQueue+0x74>
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	6898      	ldr	r0, [r3, #8]
 8012e42:	68fb      	ldr	r3, [r7, #12]
 8012e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e46:	461a      	mov	r2, r3
 8012e48:	68b9      	ldr	r1, [r7, #8]
 8012e4a:	f002 fc31 	bl	80156b0 <memcpy>
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	689a      	ldr	r2, [r3, #8]
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e56:	441a      	add	r2, r3
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	609a      	str	r2, [r3, #8]
 8012e5c:	68fb      	ldr	r3, [r7, #12]
 8012e5e:	689a      	ldr	r2, [r3, #8]
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	685b      	ldr	r3, [r3, #4]
 8012e64:	429a      	cmp	r2, r3
 8012e66:	d32b      	bcc.n	8012ec0 <prvCopyDataToQueue+0xc2>
 8012e68:	68fb      	ldr	r3, [r7, #12]
 8012e6a:	681a      	ldr	r2, [r3, #0]
 8012e6c:	68fb      	ldr	r3, [r7, #12]
 8012e6e:	609a      	str	r2, [r3, #8]
 8012e70:	e026      	b.n	8012ec0 <prvCopyDataToQueue+0xc2>
 8012e72:	68fb      	ldr	r3, [r7, #12]
 8012e74:	68d8      	ldr	r0, [r3, #12]
 8012e76:	68fb      	ldr	r3, [r7, #12]
 8012e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e7a:	461a      	mov	r2, r3
 8012e7c:	68b9      	ldr	r1, [r7, #8]
 8012e7e:	f002 fc17 	bl	80156b0 <memcpy>
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	68da      	ldr	r2, [r3, #12]
 8012e86:	68fb      	ldr	r3, [r7, #12]
 8012e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e8a:	425b      	negs	r3, r3
 8012e8c:	441a      	add	r2, r3
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	60da      	str	r2, [r3, #12]
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	68da      	ldr	r2, [r3, #12]
 8012e96:	68fb      	ldr	r3, [r7, #12]
 8012e98:	681b      	ldr	r3, [r3, #0]
 8012e9a:	429a      	cmp	r2, r3
 8012e9c:	d207      	bcs.n	8012eae <prvCopyDataToQueue+0xb0>
 8012e9e:	68fb      	ldr	r3, [r7, #12]
 8012ea0:	685a      	ldr	r2, [r3, #4]
 8012ea2:	68fb      	ldr	r3, [r7, #12]
 8012ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ea6:	425b      	negs	r3, r3
 8012ea8:	441a      	add	r2, r3
 8012eaa:	68fb      	ldr	r3, [r7, #12]
 8012eac:	60da      	str	r2, [r3, #12]
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	2b02      	cmp	r3, #2
 8012eb2:	d105      	bne.n	8012ec0 <prvCopyDataToQueue+0xc2>
 8012eb4:	693b      	ldr	r3, [r7, #16]
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d002      	beq.n	8012ec0 <prvCopyDataToQueue+0xc2>
 8012eba:	693b      	ldr	r3, [r7, #16]
 8012ebc:	3b01      	subs	r3, #1
 8012ebe:	613b      	str	r3, [r7, #16]
 8012ec0:	693b      	ldr	r3, [r7, #16]
 8012ec2:	1c5a      	adds	r2, r3, #1
 8012ec4:	68fb      	ldr	r3, [r7, #12]
 8012ec6:	639a      	str	r2, [r3, #56]	; 0x38
 8012ec8:	697b      	ldr	r3, [r7, #20]
 8012eca:	4618      	mov	r0, r3
 8012ecc:	3718      	adds	r7, #24
 8012ece:	46bd      	mov	sp, r7
 8012ed0:	bd80      	pop	{r7, pc}

08012ed2 <prvCopyDataFromQueue>:
 8012ed2:	b580      	push	{r7, lr}
 8012ed4:	b082      	sub	sp, #8
 8012ed6:	af00      	add	r7, sp, #0
 8012ed8:	6078      	str	r0, [r7, #4]
 8012eda:	6039      	str	r1, [r7, #0]
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d018      	beq.n	8012f16 <prvCopyDataFromQueue+0x44>
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	68da      	ldr	r2, [r3, #12]
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012eec:	441a      	add	r2, r3
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	60da      	str	r2, [r3, #12]
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	68da      	ldr	r2, [r3, #12]
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	685b      	ldr	r3, [r3, #4]
 8012efa:	429a      	cmp	r2, r3
 8012efc:	d303      	bcc.n	8012f06 <prvCopyDataFromQueue+0x34>
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	681a      	ldr	r2, [r3, #0]
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	60da      	str	r2, [r3, #12]
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	68d9      	ldr	r1, [r3, #12]
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f0e:	461a      	mov	r2, r3
 8012f10:	6838      	ldr	r0, [r7, #0]
 8012f12:	f002 fbcd 	bl	80156b0 <memcpy>
 8012f16:	bf00      	nop
 8012f18:	3708      	adds	r7, #8
 8012f1a:	46bd      	mov	sp, r7
 8012f1c:	bd80      	pop	{r7, pc}

08012f1e <prvUnlockQueue>:
 8012f1e:	b580      	push	{r7, lr}
 8012f20:	b084      	sub	sp, #16
 8012f22:	af00      	add	r7, sp, #0
 8012f24:	6078      	str	r0, [r7, #4]
 8012f26:	f001 fb59 	bl	80145dc <vPortEnterCritical>
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012f30:	73fb      	strb	r3, [r7, #15]
 8012f32:	e011      	b.n	8012f58 <prvUnlockQueue+0x3a>
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d012      	beq.n	8012f62 <prvUnlockQueue+0x44>
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	3324      	adds	r3, #36	; 0x24
 8012f40:	4618      	mov	r0, r3
 8012f42:	f000 fc69 	bl	8013818 <xTaskRemoveFromEventList>
 8012f46:	4603      	mov	r3, r0
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d001      	beq.n	8012f50 <prvUnlockQueue+0x32>
 8012f4c:	f000 fd3c 	bl	80139c8 <vTaskMissedYield>
 8012f50:	7bfb      	ldrb	r3, [r7, #15]
 8012f52:	3b01      	subs	r3, #1
 8012f54:	b2db      	uxtb	r3, r3
 8012f56:	73fb      	strb	r3, [r7, #15]
 8012f58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	dce9      	bgt.n	8012f34 <prvUnlockQueue+0x16>
 8012f60:	e000      	b.n	8012f64 <prvUnlockQueue+0x46>
 8012f62:	bf00      	nop
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	22ff      	movs	r2, #255	; 0xff
 8012f68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012f6c:	f001 fb64 	bl	8014638 <vPortExitCritical>
 8012f70:	f001 fb34 	bl	80145dc <vPortEnterCritical>
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012f7a:	73bb      	strb	r3, [r7, #14]
 8012f7c:	e011      	b.n	8012fa2 <prvUnlockQueue+0x84>
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	691b      	ldr	r3, [r3, #16]
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d012      	beq.n	8012fac <prvUnlockQueue+0x8e>
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	3310      	adds	r3, #16
 8012f8a:	4618      	mov	r0, r3
 8012f8c:	f000 fc44 	bl	8013818 <xTaskRemoveFromEventList>
 8012f90:	4603      	mov	r3, r0
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d001      	beq.n	8012f9a <prvUnlockQueue+0x7c>
 8012f96:	f000 fd17 	bl	80139c8 <vTaskMissedYield>
 8012f9a:	7bbb      	ldrb	r3, [r7, #14]
 8012f9c:	3b01      	subs	r3, #1
 8012f9e:	b2db      	uxtb	r3, r3
 8012fa0:	73bb      	strb	r3, [r7, #14]
 8012fa2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	dce9      	bgt.n	8012f7e <prvUnlockQueue+0x60>
 8012faa:	e000      	b.n	8012fae <prvUnlockQueue+0x90>
 8012fac:	bf00      	nop
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	22ff      	movs	r2, #255	; 0xff
 8012fb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012fb6:	f001 fb3f 	bl	8014638 <vPortExitCritical>
 8012fba:	bf00      	nop
 8012fbc:	3710      	adds	r7, #16
 8012fbe:	46bd      	mov	sp, r7
 8012fc0:	bd80      	pop	{r7, pc}

08012fc2 <prvIsQueueEmpty>:
 8012fc2:	b580      	push	{r7, lr}
 8012fc4:	b084      	sub	sp, #16
 8012fc6:	af00      	add	r7, sp, #0
 8012fc8:	6078      	str	r0, [r7, #4]
 8012fca:	f001 fb07 	bl	80145dc <vPortEnterCritical>
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d102      	bne.n	8012fdc <prvIsQueueEmpty+0x1a>
 8012fd6:	2301      	movs	r3, #1
 8012fd8:	60fb      	str	r3, [r7, #12]
 8012fda:	e001      	b.n	8012fe0 <prvIsQueueEmpty+0x1e>
 8012fdc:	2300      	movs	r3, #0
 8012fde:	60fb      	str	r3, [r7, #12]
 8012fe0:	f001 fb2a 	bl	8014638 <vPortExitCritical>
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	3710      	adds	r7, #16
 8012fea:	46bd      	mov	sp, r7
 8012fec:	bd80      	pop	{r7, pc}

08012fee <prvIsQueueFull>:
 8012fee:	b580      	push	{r7, lr}
 8012ff0:	b084      	sub	sp, #16
 8012ff2:	af00      	add	r7, sp, #0
 8012ff4:	6078      	str	r0, [r7, #4]
 8012ff6:	f001 faf1 	bl	80145dc <vPortEnterCritical>
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013002:	429a      	cmp	r2, r3
 8013004:	d102      	bne.n	801300c <prvIsQueueFull+0x1e>
 8013006:	2301      	movs	r3, #1
 8013008:	60fb      	str	r3, [r7, #12]
 801300a:	e001      	b.n	8013010 <prvIsQueueFull+0x22>
 801300c:	2300      	movs	r3, #0
 801300e:	60fb      	str	r3, [r7, #12]
 8013010:	f001 fb12 	bl	8014638 <vPortExitCritical>
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	4618      	mov	r0, r3
 8013018:	3710      	adds	r7, #16
 801301a:	46bd      	mov	sp, r7
 801301c:	bd80      	pop	{r7, pc}

0801301e <xTaskCreateStatic>:
 801301e:	b580      	push	{r7, lr}
 8013020:	b08e      	sub	sp, #56	; 0x38
 8013022:	af04      	add	r7, sp, #16
 8013024:	60f8      	str	r0, [r7, #12]
 8013026:	60b9      	str	r1, [r7, #8]
 8013028:	607a      	str	r2, [r7, #4]
 801302a:	603b      	str	r3, [r7, #0]
 801302c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801302e:	2b00      	cmp	r3, #0
 8013030:	d109      	bne.n	8013046 <xTaskCreateStatic+0x28>
 8013032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013036:	f383 8811 	msr	BASEPRI, r3
 801303a:	f3bf 8f6f 	isb	sy
 801303e:	f3bf 8f4f 	dsb	sy
 8013042:	623b      	str	r3, [r7, #32]
 8013044:	e7fe      	b.n	8013044 <xTaskCreateStatic+0x26>
 8013046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013048:	2b00      	cmp	r3, #0
 801304a:	d109      	bne.n	8013060 <xTaskCreateStatic+0x42>
 801304c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013050:	f383 8811 	msr	BASEPRI, r3
 8013054:	f3bf 8f6f 	isb	sy
 8013058:	f3bf 8f4f 	dsb	sy
 801305c:	61fb      	str	r3, [r7, #28]
 801305e:	e7fe      	b.n	801305e <xTaskCreateStatic+0x40>
 8013060:	2354      	movs	r3, #84	; 0x54
 8013062:	613b      	str	r3, [r7, #16]
 8013064:	693b      	ldr	r3, [r7, #16]
 8013066:	2b54      	cmp	r3, #84	; 0x54
 8013068:	d009      	beq.n	801307e <xTaskCreateStatic+0x60>
 801306a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801306e:	f383 8811 	msr	BASEPRI, r3
 8013072:	f3bf 8f6f 	isb	sy
 8013076:	f3bf 8f4f 	dsb	sy
 801307a:	61bb      	str	r3, [r7, #24]
 801307c:	e7fe      	b.n	801307c <xTaskCreateStatic+0x5e>
 801307e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013080:	2b00      	cmp	r3, #0
 8013082:	d01e      	beq.n	80130c2 <xTaskCreateStatic+0xa4>
 8013084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013086:	2b00      	cmp	r3, #0
 8013088:	d01b      	beq.n	80130c2 <xTaskCreateStatic+0xa4>
 801308a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801308c:	627b      	str	r3, [r7, #36]	; 0x24
 801308e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013090:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013092:	631a      	str	r2, [r3, #48]	; 0x30
 8013094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013096:	2202      	movs	r2, #2
 8013098:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 801309c:	2300      	movs	r3, #0
 801309e:	9303      	str	r3, [sp, #12]
 80130a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130a2:	9302      	str	r3, [sp, #8]
 80130a4:	f107 0314 	add.w	r3, r7, #20
 80130a8:	9301      	str	r3, [sp, #4]
 80130aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130ac:	9300      	str	r3, [sp, #0]
 80130ae:	683b      	ldr	r3, [r7, #0]
 80130b0:	687a      	ldr	r2, [r7, #4]
 80130b2:	68b9      	ldr	r1, [r7, #8]
 80130b4:	68f8      	ldr	r0, [r7, #12]
 80130b6:	f000 f850 	bl	801315a <prvInitialiseNewTask>
 80130ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80130bc:	f000 f8cc 	bl	8013258 <prvAddNewTaskToReadyList>
 80130c0:	e001      	b.n	80130c6 <xTaskCreateStatic+0xa8>
 80130c2:	2300      	movs	r3, #0
 80130c4:	617b      	str	r3, [r7, #20]
 80130c6:	697b      	ldr	r3, [r7, #20]
 80130c8:	4618      	mov	r0, r3
 80130ca:	3728      	adds	r7, #40	; 0x28
 80130cc:	46bd      	mov	sp, r7
 80130ce:	bd80      	pop	{r7, pc}

080130d0 <xTaskCreate>:
 80130d0:	b580      	push	{r7, lr}
 80130d2:	b08c      	sub	sp, #48	; 0x30
 80130d4:	af04      	add	r7, sp, #16
 80130d6:	60f8      	str	r0, [r7, #12]
 80130d8:	60b9      	str	r1, [r7, #8]
 80130da:	603b      	str	r3, [r7, #0]
 80130dc:	4613      	mov	r3, r2
 80130de:	80fb      	strh	r3, [r7, #6]
 80130e0:	88fb      	ldrh	r3, [r7, #6]
 80130e2:	009b      	lsls	r3, r3, #2
 80130e4:	4618      	mov	r0, r3
 80130e6:	f001 fb93 	bl	8014810 <pvPortMalloc>
 80130ea:	6178      	str	r0, [r7, #20]
 80130ec:	697b      	ldr	r3, [r7, #20]
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d00e      	beq.n	8013110 <xTaskCreate+0x40>
 80130f2:	2054      	movs	r0, #84	; 0x54
 80130f4:	f001 fb8c 	bl	8014810 <pvPortMalloc>
 80130f8:	61f8      	str	r0, [r7, #28]
 80130fa:	69fb      	ldr	r3, [r7, #28]
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d003      	beq.n	8013108 <xTaskCreate+0x38>
 8013100:	69fb      	ldr	r3, [r7, #28]
 8013102:	697a      	ldr	r2, [r7, #20]
 8013104:	631a      	str	r2, [r3, #48]	; 0x30
 8013106:	e005      	b.n	8013114 <xTaskCreate+0x44>
 8013108:	6978      	ldr	r0, [r7, #20]
 801310a:	f001 fc43 	bl	8014994 <vPortFree>
 801310e:	e001      	b.n	8013114 <xTaskCreate+0x44>
 8013110:	2300      	movs	r3, #0
 8013112:	61fb      	str	r3, [r7, #28]
 8013114:	69fb      	ldr	r3, [r7, #28]
 8013116:	2b00      	cmp	r3, #0
 8013118:	d017      	beq.n	801314a <xTaskCreate+0x7a>
 801311a:	69fb      	ldr	r3, [r7, #28]
 801311c:	2200      	movs	r2, #0
 801311e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8013122:	88fa      	ldrh	r2, [r7, #6]
 8013124:	2300      	movs	r3, #0
 8013126:	9303      	str	r3, [sp, #12]
 8013128:	69fb      	ldr	r3, [r7, #28]
 801312a:	9302      	str	r3, [sp, #8]
 801312c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801312e:	9301      	str	r3, [sp, #4]
 8013130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013132:	9300      	str	r3, [sp, #0]
 8013134:	683b      	ldr	r3, [r7, #0]
 8013136:	68b9      	ldr	r1, [r7, #8]
 8013138:	68f8      	ldr	r0, [r7, #12]
 801313a:	f000 f80e 	bl	801315a <prvInitialiseNewTask>
 801313e:	69f8      	ldr	r0, [r7, #28]
 8013140:	f000 f88a 	bl	8013258 <prvAddNewTaskToReadyList>
 8013144:	2301      	movs	r3, #1
 8013146:	61bb      	str	r3, [r7, #24]
 8013148:	e002      	b.n	8013150 <xTaskCreate+0x80>
 801314a:	f04f 33ff 	mov.w	r3, #4294967295
 801314e:	61bb      	str	r3, [r7, #24]
 8013150:	69bb      	ldr	r3, [r7, #24]
 8013152:	4618      	mov	r0, r3
 8013154:	3720      	adds	r7, #32
 8013156:	46bd      	mov	sp, r7
 8013158:	bd80      	pop	{r7, pc}

0801315a <prvInitialiseNewTask>:
 801315a:	b580      	push	{r7, lr}
 801315c:	b088      	sub	sp, #32
 801315e:	af00      	add	r7, sp, #0
 8013160:	60f8      	str	r0, [r7, #12]
 8013162:	60b9      	str	r1, [r7, #8]
 8013164:	607a      	str	r2, [r7, #4]
 8013166:	603b      	str	r3, [r7, #0]
 8013168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801316a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8013172:	3b01      	subs	r3, #1
 8013174:	009b      	lsls	r3, r3, #2
 8013176:	4413      	add	r3, r2
 8013178:	61bb      	str	r3, [r7, #24]
 801317a:	69bb      	ldr	r3, [r7, #24]
 801317c:	f023 0307 	bic.w	r3, r3, #7
 8013180:	61bb      	str	r3, [r7, #24]
 8013182:	69bb      	ldr	r3, [r7, #24]
 8013184:	f003 0307 	and.w	r3, r3, #7
 8013188:	2b00      	cmp	r3, #0
 801318a:	d009      	beq.n	80131a0 <prvInitialiseNewTask+0x46>
 801318c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013190:	f383 8811 	msr	BASEPRI, r3
 8013194:	f3bf 8f6f 	isb	sy
 8013198:	f3bf 8f4f 	dsb	sy
 801319c:	617b      	str	r3, [r7, #20]
 801319e:	e7fe      	b.n	801319e <prvInitialiseNewTask+0x44>
 80131a0:	2300      	movs	r3, #0
 80131a2:	61fb      	str	r3, [r7, #28]
 80131a4:	e012      	b.n	80131cc <prvInitialiseNewTask+0x72>
 80131a6:	68ba      	ldr	r2, [r7, #8]
 80131a8:	69fb      	ldr	r3, [r7, #28]
 80131aa:	4413      	add	r3, r2
 80131ac:	7819      	ldrb	r1, [r3, #0]
 80131ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80131b0:	69fb      	ldr	r3, [r7, #28]
 80131b2:	4413      	add	r3, r2
 80131b4:	3334      	adds	r3, #52	; 0x34
 80131b6:	460a      	mov	r2, r1
 80131b8:	701a      	strb	r2, [r3, #0]
 80131ba:	68ba      	ldr	r2, [r7, #8]
 80131bc:	69fb      	ldr	r3, [r7, #28]
 80131be:	4413      	add	r3, r2
 80131c0:	781b      	ldrb	r3, [r3, #0]
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d006      	beq.n	80131d4 <prvInitialiseNewTask+0x7a>
 80131c6:	69fb      	ldr	r3, [r7, #28]
 80131c8:	3301      	adds	r3, #1
 80131ca:	61fb      	str	r3, [r7, #28]
 80131cc:	69fb      	ldr	r3, [r7, #28]
 80131ce:	2b0f      	cmp	r3, #15
 80131d0:	d9e9      	bls.n	80131a6 <prvInitialiseNewTask+0x4c>
 80131d2:	e000      	b.n	80131d6 <prvInitialiseNewTask+0x7c>
 80131d4:	bf00      	nop
 80131d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131d8:	2200      	movs	r2, #0
 80131da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80131de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131e0:	2b06      	cmp	r3, #6
 80131e2:	d901      	bls.n	80131e8 <prvInitialiseNewTask+0x8e>
 80131e4:	2306      	movs	r3, #6
 80131e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80131e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80131ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80131ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80131f2:	645a      	str	r2, [r3, #68]	; 0x44
 80131f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131f6:	2200      	movs	r2, #0
 80131f8:	649a      	str	r2, [r3, #72]	; 0x48
 80131fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131fc:	3304      	adds	r3, #4
 80131fe:	4618      	mov	r0, r3
 8013200:	f7fe ff53 	bl	80120aa <vListInitialiseItem>
 8013204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013206:	3318      	adds	r3, #24
 8013208:	4618      	mov	r0, r3
 801320a:	f7fe ff4e 	bl	80120aa <vListInitialiseItem>
 801320e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013210:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013212:	611a      	str	r2, [r3, #16]
 8013214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013216:	f1c3 0207 	rsb	r2, r3, #7
 801321a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801321c:	619a      	str	r2, [r3, #24]
 801321e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013220:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013222:	625a      	str	r2, [r3, #36]	; 0x24
 8013224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013226:	2200      	movs	r2, #0
 8013228:	64da      	str	r2, [r3, #76]	; 0x4c
 801322a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801322c:	2200      	movs	r2, #0
 801322e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8013232:	683a      	ldr	r2, [r7, #0]
 8013234:	68f9      	ldr	r1, [r7, #12]
 8013236:	69b8      	ldr	r0, [r7, #24]
 8013238:	f001 f8aa 	bl	8014390 <pxPortInitialiseStack>
 801323c:	4602      	mov	r2, r0
 801323e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013240:	601a      	str	r2, [r3, #0]
 8013242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013244:	2b00      	cmp	r3, #0
 8013246:	d002      	beq.n	801324e <prvInitialiseNewTask+0xf4>
 8013248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801324a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801324c:	601a      	str	r2, [r3, #0]
 801324e:	bf00      	nop
 8013250:	3720      	adds	r7, #32
 8013252:	46bd      	mov	sp, r7
 8013254:	bd80      	pop	{r7, pc}
	...

08013258 <prvAddNewTaskToReadyList>:
 8013258:	b580      	push	{r7, lr}
 801325a:	b082      	sub	sp, #8
 801325c:	af00      	add	r7, sp, #0
 801325e:	6078      	str	r0, [r7, #4]
 8013260:	f001 f9bc 	bl	80145dc <vPortEnterCritical>
 8013264:	4b2a      	ldr	r3, [pc, #168]	; (8013310 <prvAddNewTaskToReadyList+0xb8>)
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	3301      	adds	r3, #1
 801326a:	4a29      	ldr	r2, [pc, #164]	; (8013310 <prvAddNewTaskToReadyList+0xb8>)
 801326c:	6013      	str	r3, [r2, #0]
 801326e:	4b29      	ldr	r3, [pc, #164]	; (8013314 <prvAddNewTaskToReadyList+0xbc>)
 8013270:	681b      	ldr	r3, [r3, #0]
 8013272:	2b00      	cmp	r3, #0
 8013274:	d109      	bne.n	801328a <prvAddNewTaskToReadyList+0x32>
 8013276:	4a27      	ldr	r2, [pc, #156]	; (8013314 <prvAddNewTaskToReadyList+0xbc>)
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	6013      	str	r3, [r2, #0]
 801327c:	4b24      	ldr	r3, [pc, #144]	; (8013310 <prvAddNewTaskToReadyList+0xb8>)
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	2b01      	cmp	r3, #1
 8013282:	d110      	bne.n	80132a6 <prvAddNewTaskToReadyList+0x4e>
 8013284:	f000 fbc4 	bl	8013a10 <prvInitialiseTaskLists>
 8013288:	e00d      	b.n	80132a6 <prvAddNewTaskToReadyList+0x4e>
 801328a:	4b23      	ldr	r3, [pc, #140]	; (8013318 <prvAddNewTaskToReadyList+0xc0>)
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	2b00      	cmp	r3, #0
 8013290:	d109      	bne.n	80132a6 <prvAddNewTaskToReadyList+0x4e>
 8013292:	4b20      	ldr	r3, [pc, #128]	; (8013314 <prvAddNewTaskToReadyList+0xbc>)
 8013294:	681b      	ldr	r3, [r3, #0]
 8013296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801329c:	429a      	cmp	r2, r3
 801329e:	d802      	bhi.n	80132a6 <prvAddNewTaskToReadyList+0x4e>
 80132a0:	4a1c      	ldr	r2, [pc, #112]	; (8013314 <prvAddNewTaskToReadyList+0xbc>)
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	6013      	str	r3, [r2, #0]
 80132a6:	4b1d      	ldr	r3, [pc, #116]	; (801331c <prvAddNewTaskToReadyList+0xc4>)
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	3301      	adds	r3, #1
 80132ac:	4a1b      	ldr	r2, [pc, #108]	; (801331c <prvAddNewTaskToReadyList+0xc4>)
 80132ae:	6013      	str	r3, [r2, #0]
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132b4:	2201      	movs	r2, #1
 80132b6:	409a      	lsls	r2, r3
 80132b8:	4b19      	ldr	r3, [pc, #100]	; (8013320 <prvAddNewTaskToReadyList+0xc8>)
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	4313      	orrs	r3, r2
 80132be:	4a18      	ldr	r2, [pc, #96]	; (8013320 <prvAddNewTaskToReadyList+0xc8>)
 80132c0:	6013      	str	r3, [r2, #0]
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80132c6:	4613      	mov	r3, r2
 80132c8:	009b      	lsls	r3, r3, #2
 80132ca:	4413      	add	r3, r2
 80132cc:	009b      	lsls	r3, r3, #2
 80132ce:	4a15      	ldr	r2, [pc, #84]	; (8013324 <prvAddNewTaskToReadyList+0xcc>)
 80132d0:	441a      	add	r2, r3
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	3304      	adds	r3, #4
 80132d6:	4619      	mov	r1, r3
 80132d8:	4610      	mov	r0, r2
 80132da:	f7fe fef3 	bl	80120c4 <vListInsertEnd>
 80132de:	f001 f9ab 	bl	8014638 <vPortExitCritical>
 80132e2:	4b0d      	ldr	r3, [pc, #52]	; (8013318 <prvAddNewTaskToReadyList+0xc0>)
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d00e      	beq.n	8013308 <prvAddNewTaskToReadyList+0xb0>
 80132ea:	4b0a      	ldr	r3, [pc, #40]	; (8013314 <prvAddNewTaskToReadyList+0xbc>)
 80132ec:	681b      	ldr	r3, [r3, #0]
 80132ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132f4:	429a      	cmp	r2, r3
 80132f6:	d207      	bcs.n	8013308 <prvAddNewTaskToReadyList+0xb0>
 80132f8:	4b0b      	ldr	r3, [pc, #44]	; (8013328 <prvAddNewTaskToReadyList+0xd0>)
 80132fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80132fe:	601a      	str	r2, [r3, #0]
 8013300:	f3bf 8f4f 	dsb	sy
 8013304:	f3bf 8f6f 	isb	sy
 8013308:	bf00      	nop
 801330a:	3708      	adds	r7, #8
 801330c:	46bd      	mov	sp, r7
 801330e:	bd80      	pop	{r7, pc}
 8013310:	20001560 	.word	0x20001560
 8013314:	20001460 	.word	0x20001460
 8013318:	2000156c 	.word	0x2000156c
 801331c:	2000157c 	.word	0x2000157c
 8013320:	20001568 	.word	0x20001568
 8013324:	20001464 	.word	0x20001464
 8013328:	e000ed04 	.word	0xe000ed04

0801332c <vTaskDelay>:
 801332c:	b580      	push	{r7, lr}
 801332e:	b084      	sub	sp, #16
 8013330:	af00      	add	r7, sp, #0
 8013332:	6078      	str	r0, [r7, #4]
 8013334:	2300      	movs	r3, #0
 8013336:	60fb      	str	r3, [r7, #12]
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d016      	beq.n	801336c <vTaskDelay+0x40>
 801333e:	4b13      	ldr	r3, [pc, #76]	; (801338c <vTaskDelay+0x60>)
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	2b00      	cmp	r3, #0
 8013344:	d009      	beq.n	801335a <vTaskDelay+0x2e>
 8013346:	f04f 0350 	mov.w	r3, #80	; 0x50
 801334a:	f383 8811 	msr	BASEPRI, r3
 801334e:	f3bf 8f6f 	isb	sy
 8013352:	f3bf 8f4f 	dsb	sy
 8013356:	60bb      	str	r3, [r7, #8]
 8013358:	e7fe      	b.n	8013358 <vTaskDelay+0x2c>
 801335a:	f000 f879 	bl	8013450 <vTaskSuspendAll>
 801335e:	2100      	movs	r1, #0
 8013360:	6878      	ldr	r0, [r7, #4]
 8013362:	f000 ffaf 	bl	80142c4 <prvAddCurrentTaskToDelayedList>
 8013366:	f000 f881 	bl	801346c <xTaskResumeAll>
 801336a:	60f8      	str	r0, [r7, #12]
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	2b00      	cmp	r3, #0
 8013370:	d107      	bne.n	8013382 <vTaskDelay+0x56>
 8013372:	4b07      	ldr	r3, [pc, #28]	; (8013390 <vTaskDelay+0x64>)
 8013374:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013378:	601a      	str	r2, [r3, #0]
 801337a:	f3bf 8f4f 	dsb	sy
 801337e:	f3bf 8f6f 	isb	sy
 8013382:	bf00      	nop
 8013384:	3710      	adds	r7, #16
 8013386:	46bd      	mov	sp, r7
 8013388:	bd80      	pop	{r7, pc}
 801338a:	bf00      	nop
 801338c:	20001588 	.word	0x20001588
 8013390:	e000ed04 	.word	0xe000ed04

08013394 <vTaskStartScheduler>:
 8013394:	b580      	push	{r7, lr}
 8013396:	b08a      	sub	sp, #40	; 0x28
 8013398:	af04      	add	r7, sp, #16
 801339a:	2300      	movs	r3, #0
 801339c:	60bb      	str	r3, [r7, #8]
 801339e:	2300      	movs	r3, #0
 80133a0:	607b      	str	r3, [r7, #4]
 80133a2:	463a      	mov	r2, r7
 80133a4:	1d39      	adds	r1, r7, #4
 80133a6:	f107 0308 	add.w	r3, r7, #8
 80133aa:	4618      	mov	r0, r3
 80133ac:	f7ee fd06 	bl	8001dbc <vApplicationGetIdleTaskMemory>
 80133b0:	6839      	ldr	r1, [r7, #0]
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	68ba      	ldr	r2, [r7, #8]
 80133b6:	9202      	str	r2, [sp, #8]
 80133b8:	9301      	str	r3, [sp, #4]
 80133ba:	2300      	movs	r3, #0
 80133bc:	9300      	str	r3, [sp, #0]
 80133be:	2300      	movs	r3, #0
 80133c0:	460a      	mov	r2, r1
 80133c2:	491d      	ldr	r1, [pc, #116]	; (8013438 <vTaskStartScheduler+0xa4>)
 80133c4:	481d      	ldr	r0, [pc, #116]	; (801343c <vTaskStartScheduler+0xa8>)
 80133c6:	f7ff fe2a 	bl	801301e <xTaskCreateStatic>
 80133ca:	4602      	mov	r2, r0
 80133cc:	4b1c      	ldr	r3, [pc, #112]	; (8013440 <vTaskStartScheduler+0xac>)
 80133ce:	601a      	str	r2, [r3, #0]
 80133d0:	4b1b      	ldr	r3, [pc, #108]	; (8013440 <vTaskStartScheduler+0xac>)
 80133d2:	681b      	ldr	r3, [r3, #0]
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d002      	beq.n	80133de <vTaskStartScheduler+0x4a>
 80133d8:	2301      	movs	r3, #1
 80133da:	617b      	str	r3, [r7, #20]
 80133dc:	e001      	b.n	80133e2 <vTaskStartScheduler+0x4e>
 80133de:	2300      	movs	r3, #0
 80133e0:	617b      	str	r3, [r7, #20]
 80133e2:	697b      	ldr	r3, [r7, #20]
 80133e4:	2b01      	cmp	r3, #1
 80133e6:	d115      	bne.n	8013414 <vTaskStartScheduler+0x80>
 80133e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133ec:	f383 8811 	msr	BASEPRI, r3
 80133f0:	f3bf 8f6f 	isb	sy
 80133f4:	f3bf 8f4f 	dsb	sy
 80133f8:	613b      	str	r3, [r7, #16]
 80133fa:	4b12      	ldr	r3, [pc, #72]	; (8013444 <vTaskStartScheduler+0xb0>)
 80133fc:	f04f 32ff 	mov.w	r2, #4294967295
 8013400:	601a      	str	r2, [r3, #0]
 8013402:	4b11      	ldr	r3, [pc, #68]	; (8013448 <vTaskStartScheduler+0xb4>)
 8013404:	2201      	movs	r2, #1
 8013406:	601a      	str	r2, [r3, #0]
 8013408:	4b10      	ldr	r3, [pc, #64]	; (801344c <vTaskStartScheduler+0xb8>)
 801340a:	2200      	movs	r2, #0
 801340c:	601a      	str	r2, [r3, #0]
 801340e:	f001 f847 	bl	80144a0 <xPortStartScheduler>
 8013412:	e00d      	b.n	8013430 <vTaskStartScheduler+0x9c>
 8013414:	697b      	ldr	r3, [r7, #20]
 8013416:	f1b3 3fff 	cmp.w	r3, #4294967295
 801341a:	d109      	bne.n	8013430 <vTaskStartScheduler+0x9c>
 801341c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013420:	f383 8811 	msr	BASEPRI, r3
 8013424:	f3bf 8f6f 	isb	sy
 8013428:	f3bf 8f4f 	dsb	sy
 801342c:	60fb      	str	r3, [r7, #12]
 801342e:	e7fe      	b.n	801342e <vTaskStartScheduler+0x9a>
 8013430:	bf00      	nop
 8013432:	3718      	adds	r7, #24
 8013434:	46bd      	mov	sp, r7
 8013436:	bd80      	pop	{r7, pc}
 8013438:	0801b0a8 	.word	0x0801b0a8
 801343c:	080139e1 	.word	0x080139e1
 8013440:	20001584 	.word	0x20001584
 8013444:	20001580 	.word	0x20001580
 8013448:	2000156c 	.word	0x2000156c
 801344c:	20001564 	.word	0x20001564

08013450 <vTaskSuspendAll>:
 8013450:	b480      	push	{r7}
 8013452:	af00      	add	r7, sp, #0
 8013454:	4b04      	ldr	r3, [pc, #16]	; (8013468 <vTaskSuspendAll+0x18>)
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	3301      	adds	r3, #1
 801345a:	4a03      	ldr	r2, [pc, #12]	; (8013468 <vTaskSuspendAll+0x18>)
 801345c:	6013      	str	r3, [r2, #0]
 801345e:	bf00      	nop
 8013460:	46bd      	mov	sp, r7
 8013462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013466:	4770      	bx	lr
 8013468:	20001588 	.word	0x20001588

0801346c <xTaskResumeAll>:
 801346c:	b580      	push	{r7, lr}
 801346e:	b084      	sub	sp, #16
 8013470:	af00      	add	r7, sp, #0
 8013472:	2300      	movs	r3, #0
 8013474:	60fb      	str	r3, [r7, #12]
 8013476:	2300      	movs	r3, #0
 8013478:	60bb      	str	r3, [r7, #8]
 801347a:	4b41      	ldr	r3, [pc, #260]	; (8013580 <xTaskResumeAll+0x114>)
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	2b00      	cmp	r3, #0
 8013480:	d109      	bne.n	8013496 <xTaskResumeAll+0x2a>
 8013482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013486:	f383 8811 	msr	BASEPRI, r3
 801348a:	f3bf 8f6f 	isb	sy
 801348e:	f3bf 8f4f 	dsb	sy
 8013492:	603b      	str	r3, [r7, #0]
 8013494:	e7fe      	b.n	8013494 <xTaskResumeAll+0x28>
 8013496:	f001 f8a1 	bl	80145dc <vPortEnterCritical>
 801349a:	4b39      	ldr	r3, [pc, #228]	; (8013580 <xTaskResumeAll+0x114>)
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	3b01      	subs	r3, #1
 80134a0:	4a37      	ldr	r2, [pc, #220]	; (8013580 <xTaskResumeAll+0x114>)
 80134a2:	6013      	str	r3, [r2, #0]
 80134a4:	4b36      	ldr	r3, [pc, #216]	; (8013580 <xTaskResumeAll+0x114>)
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d161      	bne.n	8013570 <xTaskResumeAll+0x104>
 80134ac:	4b35      	ldr	r3, [pc, #212]	; (8013584 <xTaskResumeAll+0x118>)
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d05d      	beq.n	8013570 <xTaskResumeAll+0x104>
 80134b4:	e02e      	b.n	8013514 <xTaskResumeAll+0xa8>
 80134b6:	4b34      	ldr	r3, [pc, #208]	; (8013588 <xTaskResumeAll+0x11c>)
 80134b8:	68db      	ldr	r3, [r3, #12]
 80134ba:	68db      	ldr	r3, [r3, #12]
 80134bc:	60fb      	str	r3, [r7, #12]
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	3318      	adds	r3, #24
 80134c2:	4618      	mov	r0, r3
 80134c4:	f7fe fe5b 	bl	801217e <uxListRemove>
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	3304      	adds	r3, #4
 80134cc:	4618      	mov	r0, r3
 80134ce:	f7fe fe56 	bl	801217e <uxListRemove>
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134d6:	2201      	movs	r2, #1
 80134d8:	409a      	lsls	r2, r3
 80134da:	4b2c      	ldr	r3, [pc, #176]	; (801358c <xTaskResumeAll+0x120>)
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	4313      	orrs	r3, r2
 80134e0:	4a2a      	ldr	r2, [pc, #168]	; (801358c <xTaskResumeAll+0x120>)
 80134e2:	6013      	str	r3, [r2, #0]
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134e8:	4613      	mov	r3, r2
 80134ea:	009b      	lsls	r3, r3, #2
 80134ec:	4413      	add	r3, r2
 80134ee:	009b      	lsls	r3, r3, #2
 80134f0:	4a27      	ldr	r2, [pc, #156]	; (8013590 <xTaskResumeAll+0x124>)
 80134f2:	441a      	add	r2, r3
 80134f4:	68fb      	ldr	r3, [r7, #12]
 80134f6:	3304      	adds	r3, #4
 80134f8:	4619      	mov	r1, r3
 80134fa:	4610      	mov	r0, r2
 80134fc:	f7fe fde2 	bl	80120c4 <vListInsertEnd>
 8013500:	68fb      	ldr	r3, [r7, #12]
 8013502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013504:	4b23      	ldr	r3, [pc, #140]	; (8013594 <xTaskResumeAll+0x128>)
 8013506:	681b      	ldr	r3, [r3, #0]
 8013508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801350a:	429a      	cmp	r2, r3
 801350c:	d302      	bcc.n	8013514 <xTaskResumeAll+0xa8>
 801350e:	4b22      	ldr	r3, [pc, #136]	; (8013598 <xTaskResumeAll+0x12c>)
 8013510:	2201      	movs	r2, #1
 8013512:	601a      	str	r2, [r3, #0]
 8013514:	4b1c      	ldr	r3, [pc, #112]	; (8013588 <xTaskResumeAll+0x11c>)
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	2b00      	cmp	r3, #0
 801351a:	d1cc      	bne.n	80134b6 <xTaskResumeAll+0x4a>
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	2b00      	cmp	r3, #0
 8013520:	d001      	beq.n	8013526 <xTaskResumeAll+0xba>
 8013522:	f000 fb0f 	bl	8013b44 <prvResetNextTaskUnblockTime>
 8013526:	4b1d      	ldr	r3, [pc, #116]	; (801359c <xTaskResumeAll+0x130>)
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	607b      	str	r3, [r7, #4]
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	2b00      	cmp	r3, #0
 8013530:	d010      	beq.n	8013554 <xTaskResumeAll+0xe8>
 8013532:	f000 f837 	bl	80135a4 <xTaskIncrementTick>
 8013536:	4603      	mov	r3, r0
 8013538:	2b00      	cmp	r3, #0
 801353a:	d002      	beq.n	8013542 <xTaskResumeAll+0xd6>
 801353c:	4b16      	ldr	r3, [pc, #88]	; (8013598 <xTaskResumeAll+0x12c>)
 801353e:	2201      	movs	r2, #1
 8013540:	601a      	str	r2, [r3, #0]
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	3b01      	subs	r3, #1
 8013546:	607b      	str	r3, [r7, #4]
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	2b00      	cmp	r3, #0
 801354c:	d1f1      	bne.n	8013532 <xTaskResumeAll+0xc6>
 801354e:	4b13      	ldr	r3, [pc, #76]	; (801359c <xTaskResumeAll+0x130>)
 8013550:	2200      	movs	r2, #0
 8013552:	601a      	str	r2, [r3, #0]
 8013554:	4b10      	ldr	r3, [pc, #64]	; (8013598 <xTaskResumeAll+0x12c>)
 8013556:	681b      	ldr	r3, [r3, #0]
 8013558:	2b00      	cmp	r3, #0
 801355a:	d009      	beq.n	8013570 <xTaskResumeAll+0x104>
 801355c:	2301      	movs	r3, #1
 801355e:	60bb      	str	r3, [r7, #8]
 8013560:	4b0f      	ldr	r3, [pc, #60]	; (80135a0 <xTaskResumeAll+0x134>)
 8013562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013566:	601a      	str	r2, [r3, #0]
 8013568:	f3bf 8f4f 	dsb	sy
 801356c:	f3bf 8f6f 	isb	sy
 8013570:	f001 f862 	bl	8014638 <vPortExitCritical>
 8013574:	68bb      	ldr	r3, [r7, #8]
 8013576:	4618      	mov	r0, r3
 8013578:	3710      	adds	r7, #16
 801357a:	46bd      	mov	sp, r7
 801357c:	bd80      	pop	{r7, pc}
 801357e:	bf00      	nop
 8013580:	20001588 	.word	0x20001588
 8013584:	20001560 	.word	0x20001560
 8013588:	20001520 	.word	0x20001520
 801358c:	20001568 	.word	0x20001568
 8013590:	20001464 	.word	0x20001464
 8013594:	20001460 	.word	0x20001460
 8013598:	20001574 	.word	0x20001574
 801359c:	20001570 	.word	0x20001570
 80135a0:	e000ed04 	.word	0xe000ed04

080135a4 <xTaskIncrementTick>:
 80135a4:	b580      	push	{r7, lr}
 80135a6:	b086      	sub	sp, #24
 80135a8:	af00      	add	r7, sp, #0
 80135aa:	2300      	movs	r3, #0
 80135ac:	617b      	str	r3, [r7, #20]
 80135ae:	4b50      	ldr	r3, [pc, #320]	; (80136f0 <xTaskIncrementTick+0x14c>)
 80135b0:	681b      	ldr	r3, [r3, #0]
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	f040 808c 	bne.w	80136d0 <xTaskIncrementTick+0x12c>
 80135b8:	4b4e      	ldr	r3, [pc, #312]	; (80136f4 <xTaskIncrementTick+0x150>)
 80135ba:	681b      	ldr	r3, [r3, #0]
 80135bc:	3301      	adds	r3, #1
 80135be:	613b      	str	r3, [r7, #16]
 80135c0:	4a4c      	ldr	r2, [pc, #304]	; (80136f4 <xTaskIncrementTick+0x150>)
 80135c2:	693b      	ldr	r3, [r7, #16]
 80135c4:	6013      	str	r3, [r2, #0]
 80135c6:	693b      	ldr	r3, [r7, #16]
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d11f      	bne.n	801360c <xTaskIncrementTick+0x68>
 80135cc:	4b4a      	ldr	r3, [pc, #296]	; (80136f8 <xTaskIncrementTick+0x154>)
 80135ce:	681b      	ldr	r3, [r3, #0]
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d009      	beq.n	80135ea <xTaskIncrementTick+0x46>
 80135d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135da:	f383 8811 	msr	BASEPRI, r3
 80135de:	f3bf 8f6f 	isb	sy
 80135e2:	f3bf 8f4f 	dsb	sy
 80135e6:	603b      	str	r3, [r7, #0]
 80135e8:	e7fe      	b.n	80135e8 <xTaskIncrementTick+0x44>
 80135ea:	4b43      	ldr	r3, [pc, #268]	; (80136f8 <xTaskIncrementTick+0x154>)
 80135ec:	681b      	ldr	r3, [r3, #0]
 80135ee:	60fb      	str	r3, [r7, #12]
 80135f0:	4b42      	ldr	r3, [pc, #264]	; (80136fc <xTaskIncrementTick+0x158>)
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	4a40      	ldr	r2, [pc, #256]	; (80136f8 <xTaskIncrementTick+0x154>)
 80135f6:	6013      	str	r3, [r2, #0]
 80135f8:	4a40      	ldr	r2, [pc, #256]	; (80136fc <xTaskIncrementTick+0x158>)
 80135fa:	68fb      	ldr	r3, [r7, #12]
 80135fc:	6013      	str	r3, [r2, #0]
 80135fe:	4b40      	ldr	r3, [pc, #256]	; (8013700 <xTaskIncrementTick+0x15c>)
 8013600:	681b      	ldr	r3, [r3, #0]
 8013602:	3301      	adds	r3, #1
 8013604:	4a3e      	ldr	r2, [pc, #248]	; (8013700 <xTaskIncrementTick+0x15c>)
 8013606:	6013      	str	r3, [r2, #0]
 8013608:	f000 fa9c 	bl	8013b44 <prvResetNextTaskUnblockTime>
 801360c:	4b3d      	ldr	r3, [pc, #244]	; (8013704 <xTaskIncrementTick+0x160>)
 801360e:	681b      	ldr	r3, [r3, #0]
 8013610:	693a      	ldr	r2, [r7, #16]
 8013612:	429a      	cmp	r2, r3
 8013614:	d34d      	bcc.n	80136b2 <xTaskIncrementTick+0x10e>
 8013616:	4b38      	ldr	r3, [pc, #224]	; (80136f8 <xTaskIncrementTick+0x154>)
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	681b      	ldr	r3, [r3, #0]
 801361c:	2b00      	cmp	r3, #0
 801361e:	d101      	bne.n	8013624 <xTaskIncrementTick+0x80>
 8013620:	2301      	movs	r3, #1
 8013622:	e000      	b.n	8013626 <xTaskIncrementTick+0x82>
 8013624:	2300      	movs	r3, #0
 8013626:	2b00      	cmp	r3, #0
 8013628:	d004      	beq.n	8013634 <xTaskIncrementTick+0x90>
 801362a:	4b36      	ldr	r3, [pc, #216]	; (8013704 <xTaskIncrementTick+0x160>)
 801362c:	f04f 32ff 	mov.w	r2, #4294967295
 8013630:	601a      	str	r2, [r3, #0]
 8013632:	e03e      	b.n	80136b2 <xTaskIncrementTick+0x10e>
 8013634:	4b30      	ldr	r3, [pc, #192]	; (80136f8 <xTaskIncrementTick+0x154>)
 8013636:	681b      	ldr	r3, [r3, #0]
 8013638:	68db      	ldr	r3, [r3, #12]
 801363a:	68db      	ldr	r3, [r3, #12]
 801363c:	60bb      	str	r3, [r7, #8]
 801363e:	68bb      	ldr	r3, [r7, #8]
 8013640:	685b      	ldr	r3, [r3, #4]
 8013642:	607b      	str	r3, [r7, #4]
 8013644:	693a      	ldr	r2, [r7, #16]
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	429a      	cmp	r2, r3
 801364a:	d203      	bcs.n	8013654 <xTaskIncrementTick+0xb0>
 801364c:	4a2d      	ldr	r2, [pc, #180]	; (8013704 <xTaskIncrementTick+0x160>)
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	6013      	str	r3, [r2, #0]
 8013652:	e02e      	b.n	80136b2 <xTaskIncrementTick+0x10e>
 8013654:	68bb      	ldr	r3, [r7, #8]
 8013656:	3304      	adds	r3, #4
 8013658:	4618      	mov	r0, r3
 801365a:	f7fe fd90 	bl	801217e <uxListRemove>
 801365e:	68bb      	ldr	r3, [r7, #8]
 8013660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013662:	2b00      	cmp	r3, #0
 8013664:	d004      	beq.n	8013670 <xTaskIncrementTick+0xcc>
 8013666:	68bb      	ldr	r3, [r7, #8]
 8013668:	3318      	adds	r3, #24
 801366a:	4618      	mov	r0, r3
 801366c:	f7fe fd87 	bl	801217e <uxListRemove>
 8013670:	68bb      	ldr	r3, [r7, #8]
 8013672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013674:	2201      	movs	r2, #1
 8013676:	409a      	lsls	r2, r3
 8013678:	4b23      	ldr	r3, [pc, #140]	; (8013708 <xTaskIncrementTick+0x164>)
 801367a:	681b      	ldr	r3, [r3, #0]
 801367c:	4313      	orrs	r3, r2
 801367e:	4a22      	ldr	r2, [pc, #136]	; (8013708 <xTaskIncrementTick+0x164>)
 8013680:	6013      	str	r3, [r2, #0]
 8013682:	68bb      	ldr	r3, [r7, #8]
 8013684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013686:	4613      	mov	r3, r2
 8013688:	009b      	lsls	r3, r3, #2
 801368a:	4413      	add	r3, r2
 801368c:	009b      	lsls	r3, r3, #2
 801368e:	4a1f      	ldr	r2, [pc, #124]	; (801370c <xTaskIncrementTick+0x168>)
 8013690:	441a      	add	r2, r3
 8013692:	68bb      	ldr	r3, [r7, #8]
 8013694:	3304      	adds	r3, #4
 8013696:	4619      	mov	r1, r3
 8013698:	4610      	mov	r0, r2
 801369a:	f7fe fd13 	bl	80120c4 <vListInsertEnd>
 801369e:	68bb      	ldr	r3, [r7, #8]
 80136a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80136a2:	4b1b      	ldr	r3, [pc, #108]	; (8013710 <xTaskIncrementTick+0x16c>)
 80136a4:	681b      	ldr	r3, [r3, #0]
 80136a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136a8:	429a      	cmp	r2, r3
 80136aa:	d3b4      	bcc.n	8013616 <xTaskIncrementTick+0x72>
 80136ac:	2301      	movs	r3, #1
 80136ae:	617b      	str	r3, [r7, #20]
 80136b0:	e7b1      	b.n	8013616 <xTaskIncrementTick+0x72>
 80136b2:	4b17      	ldr	r3, [pc, #92]	; (8013710 <xTaskIncrementTick+0x16c>)
 80136b4:	681b      	ldr	r3, [r3, #0]
 80136b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80136b8:	4914      	ldr	r1, [pc, #80]	; (801370c <xTaskIncrementTick+0x168>)
 80136ba:	4613      	mov	r3, r2
 80136bc:	009b      	lsls	r3, r3, #2
 80136be:	4413      	add	r3, r2
 80136c0:	009b      	lsls	r3, r3, #2
 80136c2:	440b      	add	r3, r1
 80136c4:	681b      	ldr	r3, [r3, #0]
 80136c6:	2b01      	cmp	r3, #1
 80136c8:	d907      	bls.n	80136da <xTaskIncrementTick+0x136>
 80136ca:	2301      	movs	r3, #1
 80136cc:	617b      	str	r3, [r7, #20]
 80136ce:	e004      	b.n	80136da <xTaskIncrementTick+0x136>
 80136d0:	4b10      	ldr	r3, [pc, #64]	; (8013714 <xTaskIncrementTick+0x170>)
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	3301      	adds	r3, #1
 80136d6:	4a0f      	ldr	r2, [pc, #60]	; (8013714 <xTaskIncrementTick+0x170>)
 80136d8:	6013      	str	r3, [r2, #0]
 80136da:	4b0f      	ldr	r3, [pc, #60]	; (8013718 <xTaskIncrementTick+0x174>)
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d001      	beq.n	80136e6 <xTaskIncrementTick+0x142>
 80136e2:	2301      	movs	r3, #1
 80136e4:	617b      	str	r3, [r7, #20]
 80136e6:	697b      	ldr	r3, [r7, #20]
 80136e8:	4618      	mov	r0, r3
 80136ea:	3718      	adds	r7, #24
 80136ec:	46bd      	mov	sp, r7
 80136ee:	bd80      	pop	{r7, pc}
 80136f0:	20001588 	.word	0x20001588
 80136f4:	20001564 	.word	0x20001564
 80136f8:	20001518 	.word	0x20001518
 80136fc:	2000151c 	.word	0x2000151c
 8013700:	20001578 	.word	0x20001578
 8013704:	20001580 	.word	0x20001580
 8013708:	20001568 	.word	0x20001568
 801370c:	20001464 	.word	0x20001464
 8013710:	20001460 	.word	0x20001460
 8013714:	20001570 	.word	0x20001570
 8013718:	20001574 	.word	0x20001574

0801371c <vTaskSwitchContext>:
 801371c:	b480      	push	{r7}
 801371e:	b087      	sub	sp, #28
 8013720:	af00      	add	r7, sp, #0
 8013722:	4b26      	ldr	r3, [pc, #152]	; (80137bc <vTaskSwitchContext+0xa0>)
 8013724:	681b      	ldr	r3, [r3, #0]
 8013726:	2b00      	cmp	r3, #0
 8013728:	d003      	beq.n	8013732 <vTaskSwitchContext+0x16>
 801372a:	4b25      	ldr	r3, [pc, #148]	; (80137c0 <vTaskSwitchContext+0xa4>)
 801372c:	2201      	movs	r2, #1
 801372e:	601a      	str	r2, [r3, #0]
 8013730:	e03e      	b.n	80137b0 <vTaskSwitchContext+0x94>
 8013732:	4b23      	ldr	r3, [pc, #140]	; (80137c0 <vTaskSwitchContext+0xa4>)
 8013734:	2200      	movs	r2, #0
 8013736:	601a      	str	r2, [r3, #0]
 8013738:	4b22      	ldr	r3, [pc, #136]	; (80137c4 <vTaskSwitchContext+0xa8>)
 801373a:	681b      	ldr	r3, [r3, #0]
 801373c:	60fb      	str	r3, [r7, #12]
 801373e:	68fb      	ldr	r3, [r7, #12]
 8013740:	fab3 f383 	clz	r3, r3
 8013744:	72fb      	strb	r3, [r7, #11]
 8013746:	7afb      	ldrb	r3, [r7, #11]
 8013748:	f1c3 031f 	rsb	r3, r3, #31
 801374c:	617b      	str	r3, [r7, #20]
 801374e:	491e      	ldr	r1, [pc, #120]	; (80137c8 <vTaskSwitchContext+0xac>)
 8013750:	697a      	ldr	r2, [r7, #20]
 8013752:	4613      	mov	r3, r2
 8013754:	009b      	lsls	r3, r3, #2
 8013756:	4413      	add	r3, r2
 8013758:	009b      	lsls	r3, r3, #2
 801375a:	440b      	add	r3, r1
 801375c:	681b      	ldr	r3, [r3, #0]
 801375e:	2b00      	cmp	r3, #0
 8013760:	d109      	bne.n	8013776 <vTaskSwitchContext+0x5a>
 8013762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013766:	f383 8811 	msr	BASEPRI, r3
 801376a:	f3bf 8f6f 	isb	sy
 801376e:	f3bf 8f4f 	dsb	sy
 8013772:	607b      	str	r3, [r7, #4]
 8013774:	e7fe      	b.n	8013774 <vTaskSwitchContext+0x58>
 8013776:	697a      	ldr	r2, [r7, #20]
 8013778:	4613      	mov	r3, r2
 801377a:	009b      	lsls	r3, r3, #2
 801377c:	4413      	add	r3, r2
 801377e:	009b      	lsls	r3, r3, #2
 8013780:	4a11      	ldr	r2, [pc, #68]	; (80137c8 <vTaskSwitchContext+0xac>)
 8013782:	4413      	add	r3, r2
 8013784:	613b      	str	r3, [r7, #16]
 8013786:	693b      	ldr	r3, [r7, #16]
 8013788:	685b      	ldr	r3, [r3, #4]
 801378a:	685a      	ldr	r2, [r3, #4]
 801378c:	693b      	ldr	r3, [r7, #16]
 801378e:	605a      	str	r2, [r3, #4]
 8013790:	693b      	ldr	r3, [r7, #16]
 8013792:	685a      	ldr	r2, [r3, #4]
 8013794:	693b      	ldr	r3, [r7, #16]
 8013796:	3308      	adds	r3, #8
 8013798:	429a      	cmp	r2, r3
 801379a:	d104      	bne.n	80137a6 <vTaskSwitchContext+0x8a>
 801379c:	693b      	ldr	r3, [r7, #16]
 801379e:	685b      	ldr	r3, [r3, #4]
 80137a0:	685a      	ldr	r2, [r3, #4]
 80137a2:	693b      	ldr	r3, [r7, #16]
 80137a4:	605a      	str	r2, [r3, #4]
 80137a6:	693b      	ldr	r3, [r7, #16]
 80137a8:	685b      	ldr	r3, [r3, #4]
 80137aa:	68db      	ldr	r3, [r3, #12]
 80137ac:	4a07      	ldr	r2, [pc, #28]	; (80137cc <vTaskSwitchContext+0xb0>)
 80137ae:	6013      	str	r3, [r2, #0]
 80137b0:	bf00      	nop
 80137b2:	371c      	adds	r7, #28
 80137b4:	46bd      	mov	sp, r7
 80137b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ba:	4770      	bx	lr
 80137bc:	20001588 	.word	0x20001588
 80137c0:	20001574 	.word	0x20001574
 80137c4:	20001568 	.word	0x20001568
 80137c8:	20001464 	.word	0x20001464
 80137cc:	20001460 	.word	0x20001460

080137d0 <vTaskPlaceOnEventList>:
 80137d0:	b580      	push	{r7, lr}
 80137d2:	b084      	sub	sp, #16
 80137d4:	af00      	add	r7, sp, #0
 80137d6:	6078      	str	r0, [r7, #4]
 80137d8:	6039      	str	r1, [r7, #0]
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d109      	bne.n	80137f4 <vTaskPlaceOnEventList+0x24>
 80137e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137e4:	f383 8811 	msr	BASEPRI, r3
 80137e8:	f3bf 8f6f 	isb	sy
 80137ec:	f3bf 8f4f 	dsb	sy
 80137f0:	60fb      	str	r3, [r7, #12]
 80137f2:	e7fe      	b.n	80137f2 <vTaskPlaceOnEventList+0x22>
 80137f4:	4b07      	ldr	r3, [pc, #28]	; (8013814 <vTaskPlaceOnEventList+0x44>)
 80137f6:	681b      	ldr	r3, [r3, #0]
 80137f8:	3318      	adds	r3, #24
 80137fa:	4619      	mov	r1, r3
 80137fc:	6878      	ldr	r0, [r7, #4]
 80137fe:	f7fe fc85 	bl	801210c <vListInsert>
 8013802:	2101      	movs	r1, #1
 8013804:	6838      	ldr	r0, [r7, #0]
 8013806:	f000 fd5d 	bl	80142c4 <prvAddCurrentTaskToDelayedList>
 801380a:	bf00      	nop
 801380c:	3710      	adds	r7, #16
 801380e:	46bd      	mov	sp, r7
 8013810:	bd80      	pop	{r7, pc}
 8013812:	bf00      	nop
 8013814:	20001460 	.word	0x20001460

08013818 <xTaskRemoveFromEventList>:
 8013818:	b580      	push	{r7, lr}
 801381a:	b086      	sub	sp, #24
 801381c:	af00      	add	r7, sp, #0
 801381e:	6078      	str	r0, [r7, #4]
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	68db      	ldr	r3, [r3, #12]
 8013824:	68db      	ldr	r3, [r3, #12]
 8013826:	613b      	str	r3, [r7, #16]
 8013828:	693b      	ldr	r3, [r7, #16]
 801382a:	2b00      	cmp	r3, #0
 801382c:	d109      	bne.n	8013842 <xTaskRemoveFromEventList+0x2a>
 801382e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013832:	f383 8811 	msr	BASEPRI, r3
 8013836:	f3bf 8f6f 	isb	sy
 801383a:	f3bf 8f4f 	dsb	sy
 801383e:	60fb      	str	r3, [r7, #12]
 8013840:	e7fe      	b.n	8013840 <xTaskRemoveFromEventList+0x28>
 8013842:	693b      	ldr	r3, [r7, #16]
 8013844:	3318      	adds	r3, #24
 8013846:	4618      	mov	r0, r3
 8013848:	f7fe fc99 	bl	801217e <uxListRemove>
 801384c:	4b1d      	ldr	r3, [pc, #116]	; (80138c4 <xTaskRemoveFromEventList+0xac>)
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	2b00      	cmp	r3, #0
 8013852:	d11c      	bne.n	801388e <xTaskRemoveFromEventList+0x76>
 8013854:	693b      	ldr	r3, [r7, #16]
 8013856:	3304      	adds	r3, #4
 8013858:	4618      	mov	r0, r3
 801385a:	f7fe fc90 	bl	801217e <uxListRemove>
 801385e:	693b      	ldr	r3, [r7, #16]
 8013860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013862:	2201      	movs	r2, #1
 8013864:	409a      	lsls	r2, r3
 8013866:	4b18      	ldr	r3, [pc, #96]	; (80138c8 <xTaskRemoveFromEventList+0xb0>)
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	4313      	orrs	r3, r2
 801386c:	4a16      	ldr	r2, [pc, #88]	; (80138c8 <xTaskRemoveFromEventList+0xb0>)
 801386e:	6013      	str	r3, [r2, #0]
 8013870:	693b      	ldr	r3, [r7, #16]
 8013872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013874:	4613      	mov	r3, r2
 8013876:	009b      	lsls	r3, r3, #2
 8013878:	4413      	add	r3, r2
 801387a:	009b      	lsls	r3, r3, #2
 801387c:	4a13      	ldr	r2, [pc, #76]	; (80138cc <xTaskRemoveFromEventList+0xb4>)
 801387e:	441a      	add	r2, r3
 8013880:	693b      	ldr	r3, [r7, #16]
 8013882:	3304      	adds	r3, #4
 8013884:	4619      	mov	r1, r3
 8013886:	4610      	mov	r0, r2
 8013888:	f7fe fc1c 	bl	80120c4 <vListInsertEnd>
 801388c:	e005      	b.n	801389a <xTaskRemoveFromEventList+0x82>
 801388e:	693b      	ldr	r3, [r7, #16]
 8013890:	3318      	adds	r3, #24
 8013892:	4619      	mov	r1, r3
 8013894:	480e      	ldr	r0, [pc, #56]	; (80138d0 <xTaskRemoveFromEventList+0xb8>)
 8013896:	f7fe fc15 	bl	80120c4 <vListInsertEnd>
 801389a:	693b      	ldr	r3, [r7, #16]
 801389c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801389e:	4b0d      	ldr	r3, [pc, #52]	; (80138d4 <xTaskRemoveFromEventList+0xbc>)
 80138a0:	681b      	ldr	r3, [r3, #0]
 80138a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138a4:	429a      	cmp	r2, r3
 80138a6:	d905      	bls.n	80138b4 <xTaskRemoveFromEventList+0x9c>
 80138a8:	2301      	movs	r3, #1
 80138aa:	617b      	str	r3, [r7, #20]
 80138ac:	4b0a      	ldr	r3, [pc, #40]	; (80138d8 <xTaskRemoveFromEventList+0xc0>)
 80138ae:	2201      	movs	r2, #1
 80138b0:	601a      	str	r2, [r3, #0]
 80138b2:	e001      	b.n	80138b8 <xTaskRemoveFromEventList+0xa0>
 80138b4:	2300      	movs	r3, #0
 80138b6:	617b      	str	r3, [r7, #20]
 80138b8:	697b      	ldr	r3, [r7, #20]
 80138ba:	4618      	mov	r0, r3
 80138bc:	3718      	adds	r7, #24
 80138be:	46bd      	mov	sp, r7
 80138c0:	bd80      	pop	{r7, pc}
 80138c2:	bf00      	nop
 80138c4:	20001588 	.word	0x20001588
 80138c8:	20001568 	.word	0x20001568
 80138cc:	20001464 	.word	0x20001464
 80138d0:	20001520 	.word	0x20001520
 80138d4:	20001460 	.word	0x20001460
 80138d8:	20001574 	.word	0x20001574

080138dc <vTaskInternalSetTimeOutState>:
 80138dc:	b480      	push	{r7}
 80138de:	b083      	sub	sp, #12
 80138e0:	af00      	add	r7, sp, #0
 80138e2:	6078      	str	r0, [r7, #4]
 80138e4:	4b06      	ldr	r3, [pc, #24]	; (8013900 <vTaskInternalSetTimeOutState+0x24>)
 80138e6:	681a      	ldr	r2, [r3, #0]
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	601a      	str	r2, [r3, #0]
 80138ec:	4b05      	ldr	r3, [pc, #20]	; (8013904 <vTaskInternalSetTimeOutState+0x28>)
 80138ee:	681a      	ldr	r2, [r3, #0]
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	605a      	str	r2, [r3, #4]
 80138f4:	bf00      	nop
 80138f6:	370c      	adds	r7, #12
 80138f8:	46bd      	mov	sp, r7
 80138fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138fe:	4770      	bx	lr
 8013900:	20001578 	.word	0x20001578
 8013904:	20001564 	.word	0x20001564

08013908 <xTaskCheckForTimeOut>:
 8013908:	b580      	push	{r7, lr}
 801390a:	b088      	sub	sp, #32
 801390c:	af00      	add	r7, sp, #0
 801390e:	6078      	str	r0, [r7, #4]
 8013910:	6039      	str	r1, [r7, #0]
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	2b00      	cmp	r3, #0
 8013916:	d109      	bne.n	801392c <xTaskCheckForTimeOut+0x24>
 8013918:	f04f 0350 	mov.w	r3, #80	; 0x50
 801391c:	f383 8811 	msr	BASEPRI, r3
 8013920:	f3bf 8f6f 	isb	sy
 8013924:	f3bf 8f4f 	dsb	sy
 8013928:	613b      	str	r3, [r7, #16]
 801392a:	e7fe      	b.n	801392a <xTaskCheckForTimeOut+0x22>
 801392c:	683b      	ldr	r3, [r7, #0]
 801392e:	2b00      	cmp	r3, #0
 8013930:	d109      	bne.n	8013946 <xTaskCheckForTimeOut+0x3e>
 8013932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013936:	f383 8811 	msr	BASEPRI, r3
 801393a:	f3bf 8f6f 	isb	sy
 801393e:	f3bf 8f4f 	dsb	sy
 8013942:	60fb      	str	r3, [r7, #12]
 8013944:	e7fe      	b.n	8013944 <xTaskCheckForTimeOut+0x3c>
 8013946:	f000 fe49 	bl	80145dc <vPortEnterCritical>
 801394a:	4b1d      	ldr	r3, [pc, #116]	; (80139c0 <xTaskCheckForTimeOut+0xb8>)
 801394c:	681b      	ldr	r3, [r3, #0]
 801394e:	61bb      	str	r3, [r7, #24]
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	685b      	ldr	r3, [r3, #4]
 8013954:	69ba      	ldr	r2, [r7, #24]
 8013956:	1ad3      	subs	r3, r2, r3
 8013958:	617b      	str	r3, [r7, #20]
 801395a:	683b      	ldr	r3, [r7, #0]
 801395c:	681b      	ldr	r3, [r3, #0]
 801395e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013962:	d102      	bne.n	801396a <xTaskCheckForTimeOut+0x62>
 8013964:	2300      	movs	r3, #0
 8013966:	61fb      	str	r3, [r7, #28]
 8013968:	e023      	b.n	80139b2 <xTaskCheckForTimeOut+0xaa>
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	681a      	ldr	r2, [r3, #0]
 801396e:	4b15      	ldr	r3, [pc, #84]	; (80139c4 <xTaskCheckForTimeOut+0xbc>)
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	429a      	cmp	r2, r3
 8013974:	d007      	beq.n	8013986 <xTaskCheckForTimeOut+0x7e>
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	685b      	ldr	r3, [r3, #4]
 801397a:	69ba      	ldr	r2, [r7, #24]
 801397c:	429a      	cmp	r2, r3
 801397e:	d302      	bcc.n	8013986 <xTaskCheckForTimeOut+0x7e>
 8013980:	2301      	movs	r3, #1
 8013982:	61fb      	str	r3, [r7, #28]
 8013984:	e015      	b.n	80139b2 <xTaskCheckForTimeOut+0xaa>
 8013986:	683b      	ldr	r3, [r7, #0]
 8013988:	681b      	ldr	r3, [r3, #0]
 801398a:	697a      	ldr	r2, [r7, #20]
 801398c:	429a      	cmp	r2, r3
 801398e:	d20b      	bcs.n	80139a8 <xTaskCheckForTimeOut+0xa0>
 8013990:	683b      	ldr	r3, [r7, #0]
 8013992:	681a      	ldr	r2, [r3, #0]
 8013994:	697b      	ldr	r3, [r7, #20]
 8013996:	1ad2      	subs	r2, r2, r3
 8013998:	683b      	ldr	r3, [r7, #0]
 801399a:	601a      	str	r2, [r3, #0]
 801399c:	6878      	ldr	r0, [r7, #4]
 801399e:	f7ff ff9d 	bl	80138dc <vTaskInternalSetTimeOutState>
 80139a2:	2300      	movs	r3, #0
 80139a4:	61fb      	str	r3, [r7, #28]
 80139a6:	e004      	b.n	80139b2 <xTaskCheckForTimeOut+0xaa>
 80139a8:	683b      	ldr	r3, [r7, #0]
 80139aa:	2200      	movs	r2, #0
 80139ac:	601a      	str	r2, [r3, #0]
 80139ae:	2301      	movs	r3, #1
 80139b0:	61fb      	str	r3, [r7, #28]
 80139b2:	f000 fe41 	bl	8014638 <vPortExitCritical>
 80139b6:	69fb      	ldr	r3, [r7, #28]
 80139b8:	4618      	mov	r0, r3
 80139ba:	3720      	adds	r7, #32
 80139bc:	46bd      	mov	sp, r7
 80139be:	bd80      	pop	{r7, pc}
 80139c0:	20001564 	.word	0x20001564
 80139c4:	20001578 	.word	0x20001578

080139c8 <vTaskMissedYield>:
 80139c8:	b480      	push	{r7}
 80139ca:	af00      	add	r7, sp, #0
 80139cc:	4b03      	ldr	r3, [pc, #12]	; (80139dc <vTaskMissedYield+0x14>)
 80139ce:	2201      	movs	r2, #1
 80139d0:	601a      	str	r2, [r3, #0]
 80139d2:	bf00      	nop
 80139d4:	46bd      	mov	sp, r7
 80139d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139da:	4770      	bx	lr
 80139dc:	20001574 	.word	0x20001574

080139e0 <prvIdleTask>:
 80139e0:	b580      	push	{r7, lr}
 80139e2:	b082      	sub	sp, #8
 80139e4:	af00      	add	r7, sp, #0
 80139e6:	6078      	str	r0, [r7, #4]
 80139e8:	f000 f852 	bl	8013a90 <prvCheckTasksWaitingTermination>
 80139ec:	4b06      	ldr	r3, [pc, #24]	; (8013a08 <prvIdleTask+0x28>)
 80139ee:	681b      	ldr	r3, [r3, #0]
 80139f0:	2b01      	cmp	r3, #1
 80139f2:	d9f9      	bls.n	80139e8 <prvIdleTask+0x8>
 80139f4:	4b05      	ldr	r3, [pc, #20]	; (8013a0c <prvIdleTask+0x2c>)
 80139f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80139fa:	601a      	str	r2, [r3, #0]
 80139fc:	f3bf 8f4f 	dsb	sy
 8013a00:	f3bf 8f6f 	isb	sy
 8013a04:	e7f0      	b.n	80139e8 <prvIdleTask+0x8>
 8013a06:	bf00      	nop
 8013a08:	20001464 	.word	0x20001464
 8013a0c:	e000ed04 	.word	0xe000ed04

08013a10 <prvInitialiseTaskLists>:
 8013a10:	b580      	push	{r7, lr}
 8013a12:	b082      	sub	sp, #8
 8013a14:	af00      	add	r7, sp, #0
 8013a16:	2300      	movs	r3, #0
 8013a18:	607b      	str	r3, [r7, #4]
 8013a1a:	e00c      	b.n	8013a36 <prvInitialiseTaskLists+0x26>
 8013a1c:	687a      	ldr	r2, [r7, #4]
 8013a1e:	4613      	mov	r3, r2
 8013a20:	009b      	lsls	r3, r3, #2
 8013a22:	4413      	add	r3, r2
 8013a24:	009b      	lsls	r3, r3, #2
 8013a26:	4a12      	ldr	r2, [pc, #72]	; (8013a70 <prvInitialiseTaskLists+0x60>)
 8013a28:	4413      	add	r3, r2
 8013a2a:	4618      	mov	r0, r3
 8013a2c:	f7fe fb1d 	bl	801206a <vListInitialise>
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	3301      	adds	r3, #1
 8013a34:	607b      	str	r3, [r7, #4]
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	2b06      	cmp	r3, #6
 8013a3a:	d9ef      	bls.n	8013a1c <prvInitialiseTaskLists+0xc>
 8013a3c:	480d      	ldr	r0, [pc, #52]	; (8013a74 <prvInitialiseTaskLists+0x64>)
 8013a3e:	f7fe fb14 	bl	801206a <vListInitialise>
 8013a42:	480d      	ldr	r0, [pc, #52]	; (8013a78 <prvInitialiseTaskLists+0x68>)
 8013a44:	f7fe fb11 	bl	801206a <vListInitialise>
 8013a48:	480c      	ldr	r0, [pc, #48]	; (8013a7c <prvInitialiseTaskLists+0x6c>)
 8013a4a:	f7fe fb0e 	bl	801206a <vListInitialise>
 8013a4e:	480c      	ldr	r0, [pc, #48]	; (8013a80 <prvInitialiseTaskLists+0x70>)
 8013a50:	f7fe fb0b 	bl	801206a <vListInitialise>
 8013a54:	480b      	ldr	r0, [pc, #44]	; (8013a84 <prvInitialiseTaskLists+0x74>)
 8013a56:	f7fe fb08 	bl	801206a <vListInitialise>
 8013a5a:	4b0b      	ldr	r3, [pc, #44]	; (8013a88 <prvInitialiseTaskLists+0x78>)
 8013a5c:	4a05      	ldr	r2, [pc, #20]	; (8013a74 <prvInitialiseTaskLists+0x64>)
 8013a5e:	601a      	str	r2, [r3, #0]
 8013a60:	4b0a      	ldr	r3, [pc, #40]	; (8013a8c <prvInitialiseTaskLists+0x7c>)
 8013a62:	4a05      	ldr	r2, [pc, #20]	; (8013a78 <prvInitialiseTaskLists+0x68>)
 8013a64:	601a      	str	r2, [r3, #0]
 8013a66:	bf00      	nop
 8013a68:	3708      	adds	r7, #8
 8013a6a:	46bd      	mov	sp, r7
 8013a6c:	bd80      	pop	{r7, pc}
 8013a6e:	bf00      	nop
 8013a70:	20001464 	.word	0x20001464
 8013a74:	200014f0 	.word	0x200014f0
 8013a78:	20001504 	.word	0x20001504
 8013a7c:	20001520 	.word	0x20001520
 8013a80:	20001534 	.word	0x20001534
 8013a84:	2000154c 	.word	0x2000154c
 8013a88:	20001518 	.word	0x20001518
 8013a8c:	2000151c 	.word	0x2000151c

08013a90 <prvCheckTasksWaitingTermination>:
 8013a90:	b580      	push	{r7, lr}
 8013a92:	b082      	sub	sp, #8
 8013a94:	af00      	add	r7, sp, #0
 8013a96:	e019      	b.n	8013acc <prvCheckTasksWaitingTermination+0x3c>
 8013a98:	f000 fda0 	bl	80145dc <vPortEnterCritical>
 8013a9c:	4b0f      	ldr	r3, [pc, #60]	; (8013adc <prvCheckTasksWaitingTermination+0x4c>)
 8013a9e:	68db      	ldr	r3, [r3, #12]
 8013aa0:	68db      	ldr	r3, [r3, #12]
 8013aa2:	607b      	str	r3, [r7, #4]
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	3304      	adds	r3, #4
 8013aa8:	4618      	mov	r0, r3
 8013aaa:	f7fe fb68 	bl	801217e <uxListRemove>
 8013aae:	4b0c      	ldr	r3, [pc, #48]	; (8013ae0 <prvCheckTasksWaitingTermination+0x50>)
 8013ab0:	681b      	ldr	r3, [r3, #0]
 8013ab2:	3b01      	subs	r3, #1
 8013ab4:	4a0a      	ldr	r2, [pc, #40]	; (8013ae0 <prvCheckTasksWaitingTermination+0x50>)
 8013ab6:	6013      	str	r3, [r2, #0]
 8013ab8:	4b0a      	ldr	r3, [pc, #40]	; (8013ae4 <prvCheckTasksWaitingTermination+0x54>)
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	3b01      	subs	r3, #1
 8013abe:	4a09      	ldr	r2, [pc, #36]	; (8013ae4 <prvCheckTasksWaitingTermination+0x54>)
 8013ac0:	6013      	str	r3, [r2, #0]
 8013ac2:	f000 fdb9 	bl	8014638 <vPortExitCritical>
 8013ac6:	6878      	ldr	r0, [r7, #4]
 8013ac8:	f000 f80e 	bl	8013ae8 <prvDeleteTCB>
 8013acc:	4b05      	ldr	r3, [pc, #20]	; (8013ae4 <prvCheckTasksWaitingTermination+0x54>)
 8013ace:	681b      	ldr	r3, [r3, #0]
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d1e1      	bne.n	8013a98 <prvCheckTasksWaitingTermination+0x8>
 8013ad4:	bf00      	nop
 8013ad6:	3708      	adds	r7, #8
 8013ad8:	46bd      	mov	sp, r7
 8013ada:	bd80      	pop	{r7, pc}
 8013adc:	20001534 	.word	0x20001534
 8013ae0:	20001560 	.word	0x20001560
 8013ae4:	20001548 	.word	0x20001548

08013ae8 <prvDeleteTCB>:
 8013ae8:	b580      	push	{r7, lr}
 8013aea:	b084      	sub	sp, #16
 8013aec:	af00      	add	r7, sp, #0
 8013aee:	6078      	str	r0, [r7, #4]
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d108      	bne.n	8013b0c <prvDeleteTCB+0x24>
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013afe:	4618      	mov	r0, r3
 8013b00:	f000 ff48 	bl	8014994 <vPortFree>
 8013b04:	6878      	ldr	r0, [r7, #4]
 8013b06:	f000 ff45 	bl	8014994 <vPortFree>
 8013b0a:	e017      	b.n	8013b3c <prvDeleteTCB+0x54>
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013b12:	2b01      	cmp	r3, #1
 8013b14:	d103      	bne.n	8013b1e <prvDeleteTCB+0x36>
 8013b16:	6878      	ldr	r0, [r7, #4]
 8013b18:	f000 ff3c 	bl	8014994 <vPortFree>
 8013b1c:	e00e      	b.n	8013b3c <prvDeleteTCB+0x54>
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013b24:	2b02      	cmp	r3, #2
 8013b26:	d009      	beq.n	8013b3c <prvDeleteTCB+0x54>
 8013b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b2c:	f383 8811 	msr	BASEPRI, r3
 8013b30:	f3bf 8f6f 	isb	sy
 8013b34:	f3bf 8f4f 	dsb	sy
 8013b38:	60fb      	str	r3, [r7, #12]
 8013b3a:	e7fe      	b.n	8013b3a <prvDeleteTCB+0x52>
 8013b3c:	bf00      	nop
 8013b3e:	3710      	adds	r7, #16
 8013b40:	46bd      	mov	sp, r7
 8013b42:	bd80      	pop	{r7, pc}

08013b44 <prvResetNextTaskUnblockTime>:
 8013b44:	b480      	push	{r7}
 8013b46:	b083      	sub	sp, #12
 8013b48:	af00      	add	r7, sp, #0
 8013b4a:	4b0f      	ldr	r3, [pc, #60]	; (8013b88 <prvResetNextTaskUnblockTime+0x44>)
 8013b4c:	681b      	ldr	r3, [r3, #0]
 8013b4e:	681b      	ldr	r3, [r3, #0]
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d101      	bne.n	8013b58 <prvResetNextTaskUnblockTime+0x14>
 8013b54:	2301      	movs	r3, #1
 8013b56:	e000      	b.n	8013b5a <prvResetNextTaskUnblockTime+0x16>
 8013b58:	2300      	movs	r3, #0
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d004      	beq.n	8013b68 <prvResetNextTaskUnblockTime+0x24>
 8013b5e:	4b0b      	ldr	r3, [pc, #44]	; (8013b8c <prvResetNextTaskUnblockTime+0x48>)
 8013b60:	f04f 32ff 	mov.w	r2, #4294967295
 8013b64:	601a      	str	r2, [r3, #0]
 8013b66:	e008      	b.n	8013b7a <prvResetNextTaskUnblockTime+0x36>
 8013b68:	4b07      	ldr	r3, [pc, #28]	; (8013b88 <prvResetNextTaskUnblockTime+0x44>)
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	68db      	ldr	r3, [r3, #12]
 8013b6e:	68db      	ldr	r3, [r3, #12]
 8013b70:	607b      	str	r3, [r7, #4]
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	685b      	ldr	r3, [r3, #4]
 8013b76:	4a05      	ldr	r2, [pc, #20]	; (8013b8c <prvResetNextTaskUnblockTime+0x48>)
 8013b78:	6013      	str	r3, [r2, #0]
 8013b7a:	bf00      	nop
 8013b7c:	370c      	adds	r7, #12
 8013b7e:	46bd      	mov	sp, r7
 8013b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b84:	4770      	bx	lr
 8013b86:	bf00      	nop
 8013b88:	20001518 	.word	0x20001518
 8013b8c:	20001580 	.word	0x20001580

08013b90 <xTaskGetSchedulerState>:
 8013b90:	b480      	push	{r7}
 8013b92:	b083      	sub	sp, #12
 8013b94:	af00      	add	r7, sp, #0
 8013b96:	4b0b      	ldr	r3, [pc, #44]	; (8013bc4 <xTaskGetSchedulerState+0x34>)
 8013b98:	681b      	ldr	r3, [r3, #0]
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d102      	bne.n	8013ba4 <xTaskGetSchedulerState+0x14>
 8013b9e:	2301      	movs	r3, #1
 8013ba0:	607b      	str	r3, [r7, #4]
 8013ba2:	e008      	b.n	8013bb6 <xTaskGetSchedulerState+0x26>
 8013ba4:	4b08      	ldr	r3, [pc, #32]	; (8013bc8 <xTaskGetSchedulerState+0x38>)
 8013ba6:	681b      	ldr	r3, [r3, #0]
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d102      	bne.n	8013bb2 <xTaskGetSchedulerState+0x22>
 8013bac:	2302      	movs	r3, #2
 8013bae:	607b      	str	r3, [r7, #4]
 8013bb0:	e001      	b.n	8013bb6 <xTaskGetSchedulerState+0x26>
 8013bb2:	2300      	movs	r3, #0
 8013bb4:	607b      	str	r3, [r7, #4]
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	4618      	mov	r0, r3
 8013bba:	370c      	adds	r7, #12
 8013bbc:	46bd      	mov	sp, r7
 8013bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bc2:	4770      	bx	lr
 8013bc4:	2000156c 	.word	0x2000156c
 8013bc8:	20001588 	.word	0x20001588

08013bcc <xTaskPriorityInherit>:
 8013bcc:	b580      	push	{r7, lr}
 8013bce:	b084      	sub	sp, #16
 8013bd0:	af00      	add	r7, sp, #0
 8013bd2:	6078      	str	r0, [r7, #4]
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	60bb      	str	r3, [r7, #8]
 8013bd8:	2300      	movs	r3, #0
 8013bda:	60fb      	str	r3, [r7, #12]
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d06e      	beq.n	8013cc0 <xTaskPriorityInherit+0xf4>
 8013be2:	68bb      	ldr	r3, [r7, #8]
 8013be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013be6:	4b39      	ldr	r3, [pc, #228]	; (8013ccc <xTaskPriorityInherit+0x100>)
 8013be8:	681b      	ldr	r3, [r3, #0]
 8013bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bec:	429a      	cmp	r2, r3
 8013bee:	d25e      	bcs.n	8013cae <xTaskPriorityInherit+0xe2>
 8013bf0:	68bb      	ldr	r3, [r7, #8]
 8013bf2:	699b      	ldr	r3, [r3, #24]
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	db06      	blt.n	8013c06 <xTaskPriorityInherit+0x3a>
 8013bf8:	4b34      	ldr	r3, [pc, #208]	; (8013ccc <xTaskPriorityInherit+0x100>)
 8013bfa:	681b      	ldr	r3, [r3, #0]
 8013bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bfe:	f1c3 0207 	rsb	r2, r3, #7
 8013c02:	68bb      	ldr	r3, [r7, #8]
 8013c04:	619a      	str	r2, [r3, #24]
 8013c06:	68bb      	ldr	r3, [r7, #8]
 8013c08:	6959      	ldr	r1, [r3, #20]
 8013c0a:	68bb      	ldr	r3, [r7, #8]
 8013c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c0e:	4613      	mov	r3, r2
 8013c10:	009b      	lsls	r3, r3, #2
 8013c12:	4413      	add	r3, r2
 8013c14:	009b      	lsls	r3, r3, #2
 8013c16:	4a2e      	ldr	r2, [pc, #184]	; (8013cd0 <xTaskPriorityInherit+0x104>)
 8013c18:	4413      	add	r3, r2
 8013c1a:	4299      	cmp	r1, r3
 8013c1c:	d101      	bne.n	8013c22 <xTaskPriorityInherit+0x56>
 8013c1e:	2301      	movs	r3, #1
 8013c20:	e000      	b.n	8013c24 <xTaskPriorityInherit+0x58>
 8013c22:	2300      	movs	r3, #0
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d03a      	beq.n	8013c9e <xTaskPriorityInherit+0xd2>
 8013c28:	68bb      	ldr	r3, [r7, #8]
 8013c2a:	3304      	adds	r3, #4
 8013c2c:	4618      	mov	r0, r3
 8013c2e:	f7fe faa6 	bl	801217e <uxListRemove>
 8013c32:	4603      	mov	r3, r0
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d115      	bne.n	8013c64 <xTaskPriorityInherit+0x98>
 8013c38:	68bb      	ldr	r3, [r7, #8]
 8013c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c3c:	4924      	ldr	r1, [pc, #144]	; (8013cd0 <xTaskPriorityInherit+0x104>)
 8013c3e:	4613      	mov	r3, r2
 8013c40:	009b      	lsls	r3, r3, #2
 8013c42:	4413      	add	r3, r2
 8013c44:	009b      	lsls	r3, r3, #2
 8013c46:	440b      	add	r3, r1
 8013c48:	681b      	ldr	r3, [r3, #0]
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d10a      	bne.n	8013c64 <xTaskPriorityInherit+0x98>
 8013c4e:	68bb      	ldr	r3, [r7, #8]
 8013c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c52:	2201      	movs	r2, #1
 8013c54:	fa02 f303 	lsl.w	r3, r2, r3
 8013c58:	43da      	mvns	r2, r3
 8013c5a:	4b1e      	ldr	r3, [pc, #120]	; (8013cd4 <xTaskPriorityInherit+0x108>)
 8013c5c:	681b      	ldr	r3, [r3, #0]
 8013c5e:	4013      	ands	r3, r2
 8013c60:	4a1c      	ldr	r2, [pc, #112]	; (8013cd4 <xTaskPriorityInherit+0x108>)
 8013c62:	6013      	str	r3, [r2, #0]
 8013c64:	4b19      	ldr	r3, [pc, #100]	; (8013ccc <xTaskPriorityInherit+0x100>)
 8013c66:	681b      	ldr	r3, [r3, #0]
 8013c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c6a:	68bb      	ldr	r3, [r7, #8]
 8013c6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8013c6e:	68bb      	ldr	r3, [r7, #8]
 8013c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c72:	2201      	movs	r2, #1
 8013c74:	409a      	lsls	r2, r3
 8013c76:	4b17      	ldr	r3, [pc, #92]	; (8013cd4 <xTaskPriorityInherit+0x108>)
 8013c78:	681b      	ldr	r3, [r3, #0]
 8013c7a:	4313      	orrs	r3, r2
 8013c7c:	4a15      	ldr	r2, [pc, #84]	; (8013cd4 <xTaskPriorityInherit+0x108>)
 8013c7e:	6013      	str	r3, [r2, #0]
 8013c80:	68bb      	ldr	r3, [r7, #8]
 8013c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c84:	4613      	mov	r3, r2
 8013c86:	009b      	lsls	r3, r3, #2
 8013c88:	4413      	add	r3, r2
 8013c8a:	009b      	lsls	r3, r3, #2
 8013c8c:	4a10      	ldr	r2, [pc, #64]	; (8013cd0 <xTaskPriorityInherit+0x104>)
 8013c8e:	441a      	add	r2, r3
 8013c90:	68bb      	ldr	r3, [r7, #8]
 8013c92:	3304      	adds	r3, #4
 8013c94:	4619      	mov	r1, r3
 8013c96:	4610      	mov	r0, r2
 8013c98:	f7fe fa14 	bl	80120c4 <vListInsertEnd>
 8013c9c:	e004      	b.n	8013ca8 <xTaskPriorityInherit+0xdc>
 8013c9e:	4b0b      	ldr	r3, [pc, #44]	; (8013ccc <xTaskPriorityInherit+0x100>)
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ca4:	68bb      	ldr	r3, [r7, #8]
 8013ca6:	62da      	str	r2, [r3, #44]	; 0x2c
 8013ca8:	2301      	movs	r3, #1
 8013caa:	60fb      	str	r3, [r7, #12]
 8013cac:	e008      	b.n	8013cc0 <xTaskPriorityInherit+0xf4>
 8013cae:	68bb      	ldr	r3, [r7, #8]
 8013cb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013cb2:	4b06      	ldr	r3, [pc, #24]	; (8013ccc <xTaskPriorityInherit+0x100>)
 8013cb4:	681b      	ldr	r3, [r3, #0]
 8013cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013cb8:	429a      	cmp	r2, r3
 8013cba:	d201      	bcs.n	8013cc0 <xTaskPriorityInherit+0xf4>
 8013cbc:	2301      	movs	r3, #1
 8013cbe:	60fb      	str	r3, [r7, #12]
 8013cc0:	68fb      	ldr	r3, [r7, #12]
 8013cc2:	4618      	mov	r0, r3
 8013cc4:	3710      	adds	r7, #16
 8013cc6:	46bd      	mov	sp, r7
 8013cc8:	bd80      	pop	{r7, pc}
 8013cca:	bf00      	nop
 8013ccc:	20001460 	.word	0x20001460
 8013cd0:	20001464 	.word	0x20001464
 8013cd4:	20001568 	.word	0x20001568

08013cd8 <xTaskPriorityDisinherit>:
 8013cd8:	b580      	push	{r7, lr}
 8013cda:	b086      	sub	sp, #24
 8013cdc:	af00      	add	r7, sp, #0
 8013cde:	6078      	str	r0, [r7, #4]
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	613b      	str	r3, [r7, #16]
 8013ce4:	2300      	movs	r3, #0
 8013ce6:	617b      	str	r3, [r7, #20]
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d06c      	beq.n	8013dc8 <xTaskPriorityDisinherit+0xf0>
 8013cee:	4b39      	ldr	r3, [pc, #228]	; (8013dd4 <xTaskPriorityDisinherit+0xfc>)
 8013cf0:	681b      	ldr	r3, [r3, #0]
 8013cf2:	693a      	ldr	r2, [r7, #16]
 8013cf4:	429a      	cmp	r2, r3
 8013cf6:	d009      	beq.n	8013d0c <xTaskPriorityDisinherit+0x34>
 8013cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cfc:	f383 8811 	msr	BASEPRI, r3
 8013d00:	f3bf 8f6f 	isb	sy
 8013d04:	f3bf 8f4f 	dsb	sy
 8013d08:	60fb      	str	r3, [r7, #12]
 8013d0a:	e7fe      	b.n	8013d0a <xTaskPriorityDisinherit+0x32>
 8013d0c:	693b      	ldr	r3, [r7, #16]
 8013d0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d109      	bne.n	8013d28 <xTaskPriorityDisinherit+0x50>
 8013d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d18:	f383 8811 	msr	BASEPRI, r3
 8013d1c:	f3bf 8f6f 	isb	sy
 8013d20:	f3bf 8f4f 	dsb	sy
 8013d24:	60bb      	str	r3, [r7, #8]
 8013d26:	e7fe      	b.n	8013d26 <xTaskPriorityDisinherit+0x4e>
 8013d28:	693b      	ldr	r3, [r7, #16]
 8013d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013d2c:	1e5a      	subs	r2, r3, #1
 8013d2e:	693b      	ldr	r3, [r7, #16]
 8013d30:	649a      	str	r2, [r3, #72]	; 0x48
 8013d32:	693b      	ldr	r3, [r7, #16]
 8013d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d36:	693b      	ldr	r3, [r7, #16]
 8013d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013d3a:	429a      	cmp	r2, r3
 8013d3c:	d044      	beq.n	8013dc8 <xTaskPriorityDisinherit+0xf0>
 8013d3e:	693b      	ldr	r3, [r7, #16]
 8013d40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d140      	bne.n	8013dc8 <xTaskPriorityDisinherit+0xf0>
 8013d46:	693b      	ldr	r3, [r7, #16]
 8013d48:	3304      	adds	r3, #4
 8013d4a:	4618      	mov	r0, r3
 8013d4c:	f7fe fa17 	bl	801217e <uxListRemove>
 8013d50:	4603      	mov	r3, r0
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d115      	bne.n	8013d82 <xTaskPriorityDisinherit+0xaa>
 8013d56:	693b      	ldr	r3, [r7, #16]
 8013d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d5a:	491f      	ldr	r1, [pc, #124]	; (8013dd8 <xTaskPriorityDisinherit+0x100>)
 8013d5c:	4613      	mov	r3, r2
 8013d5e:	009b      	lsls	r3, r3, #2
 8013d60:	4413      	add	r3, r2
 8013d62:	009b      	lsls	r3, r3, #2
 8013d64:	440b      	add	r3, r1
 8013d66:	681b      	ldr	r3, [r3, #0]
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d10a      	bne.n	8013d82 <xTaskPriorityDisinherit+0xaa>
 8013d6c:	693b      	ldr	r3, [r7, #16]
 8013d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d70:	2201      	movs	r2, #1
 8013d72:	fa02 f303 	lsl.w	r3, r2, r3
 8013d76:	43da      	mvns	r2, r3
 8013d78:	4b18      	ldr	r3, [pc, #96]	; (8013ddc <xTaskPriorityDisinherit+0x104>)
 8013d7a:	681b      	ldr	r3, [r3, #0]
 8013d7c:	4013      	ands	r3, r2
 8013d7e:	4a17      	ldr	r2, [pc, #92]	; (8013ddc <xTaskPriorityDisinherit+0x104>)
 8013d80:	6013      	str	r3, [r2, #0]
 8013d82:	693b      	ldr	r3, [r7, #16]
 8013d84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013d86:	693b      	ldr	r3, [r7, #16]
 8013d88:	62da      	str	r2, [r3, #44]	; 0x2c
 8013d8a:	693b      	ldr	r3, [r7, #16]
 8013d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d8e:	f1c3 0207 	rsb	r2, r3, #7
 8013d92:	693b      	ldr	r3, [r7, #16]
 8013d94:	619a      	str	r2, [r3, #24]
 8013d96:	693b      	ldr	r3, [r7, #16]
 8013d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d9a:	2201      	movs	r2, #1
 8013d9c:	409a      	lsls	r2, r3
 8013d9e:	4b0f      	ldr	r3, [pc, #60]	; (8013ddc <xTaskPriorityDisinherit+0x104>)
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	4313      	orrs	r3, r2
 8013da4:	4a0d      	ldr	r2, [pc, #52]	; (8013ddc <xTaskPriorityDisinherit+0x104>)
 8013da6:	6013      	str	r3, [r2, #0]
 8013da8:	693b      	ldr	r3, [r7, #16]
 8013daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013dac:	4613      	mov	r3, r2
 8013dae:	009b      	lsls	r3, r3, #2
 8013db0:	4413      	add	r3, r2
 8013db2:	009b      	lsls	r3, r3, #2
 8013db4:	4a08      	ldr	r2, [pc, #32]	; (8013dd8 <xTaskPriorityDisinherit+0x100>)
 8013db6:	441a      	add	r2, r3
 8013db8:	693b      	ldr	r3, [r7, #16]
 8013dba:	3304      	adds	r3, #4
 8013dbc:	4619      	mov	r1, r3
 8013dbe:	4610      	mov	r0, r2
 8013dc0:	f7fe f980 	bl	80120c4 <vListInsertEnd>
 8013dc4:	2301      	movs	r3, #1
 8013dc6:	617b      	str	r3, [r7, #20]
 8013dc8:	697b      	ldr	r3, [r7, #20]
 8013dca:	4618      	mov	r0, r3
 8013dcc:	3718      	adds	r7, #24
 8013dce:	46bd      	mov	sp, r7
 8013dd0:	bd80      	pop	{r7, pc}
 8013dd2:	bf00      	nop
 8013dd4:	20001460 	.word	0x20001460
 8013dd8:	20001464 	.word	0x20001464
 8013ddc:	20001568 	.word	0x20001568

08013de0 <vTaskPriorityDisinheritAfterTimeout>:
 8013de0:	b580      	push	{r7, lr}
 8013de2:	b088      	sub	sp, #32
 8013de4:	af00      	add	r7, sp, #0
 8013de6:	6078      	str	r0, [r7, #4]
 8013de8:	6039      	str	r1, [r7, #0]
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	61bb      	str	r3, [r7, #24]
 8013dee:	2301      	movs	r3, #1
 8013df0:	617b      	str	r3, [r7, #20]
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	f000 8086 	beq.w	8013f06 <vTaskPriorityDisinheritAfterTimeout+0x126>
 8013dfa:	69bb      	ldr	r3, [r7, #24]
 8013dfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d109      	bne.n	8013e16 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8013e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e06:	f383 8811 	msr	BASEPRI, r3
 8013e0a:	f3bf 8f6f 	isb	sy
 8013e0e:	f3bf 8f4f 	dsb	sy
 8013e12:	60fb      	str	r3, [r7, #12]
 8013e14:	e7fe      	b.n	8013e14 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8013e16:	69bb      	ldr	r3, [r7, #24]
 8013e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013e1a:	683a      	ldr	r2, [r7, #0]
 8013e1c:	429a      	cmp	r2, r3
 8013e1e:	d902      	bls.n	8013e26 <vTaskPriorityDisinheritAfterTimeout+0x46>
 8013e20:	683b      	ldr	r3, [r7, #0]
 8013e22:	61fb      	str	r3, [r7, #28]
 8013e24:	e002      	b.n	8013e2c <vTaskPriorityDisinheritAfterTimeout+0x4c>
 8013e26:	69bb      	ldr	r3, [r7, #24]
 8013e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013e2a:	61fb      	str	r3, [r7, #28]
 8013e2c:	69bb      	ldr	r3, [r7, #24]
 8013e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e30:	69fa      	ldr	r2, [r7, #28]
 8013e32:	429a      	cmp	r2, r3
 8013e34:	d067      	beq.n	8013f06 <vTaskPriorityDisinheritAfterTimeout+0x126>
 8013e36:	69bb      	ldr	r3, [r7, #24]
 8013e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013e3a:	697a      	ldr	r2, [r7, #20]
 8013e3c:	429a      	cmp	r2, r3
 8013e3e:	d162      	bne.n	8013f06 <vTaskPriorityDisinheritAfterTimeout+0x126>
 8013e40:	4b33      	ldr	r3, [pc, #204]	; (8013f10 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8013e42:	681b      	ldr	r3, [r3, #0]
 8013e44:	69ba      	ldr	r2, [r7, #24]
 8013e46:	429a      	cmp	r2, r3
 8013e48:	d109      	bne.n	8013e5e <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8013e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e4e:	f383 8811 	msr	BASEPRI, r3
 8013e52:	f3bf 8f6f 	isb	sy
 8013e56:	f3bf 8f4f 	dsb	sy
 8013e5a:	60bb      	str	r3, [r7, #8]
 8013e5c:	e7fe      	b.n	8013e5c <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8013e5e:	69bb      	ldr	r3, [r7, #24]
 8013e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e62:	613b      	str	r3, [r7, #16]
 8013e64:	69bb      	ldr	r3, [r7, #24]
 8013e66:	69fa      	ldr	r2, [r7, #28]
 8013e68:	62da      	str	r2, [r3, #44]	; 0x2c
 8013e6a:	69bb      	ldr	r3, [r7, #24]
 8013e6c:	699b      	ldr	r3, [r3, #24]
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	db04      	blt.n	8013e7c <vTaskPriorityDisinheritAfterTimeout+0x9c>
 8013e72:	69fb      	ldr	r3, [r7, #28]
 8013e74:	f1c3 0207 	rsb	r2, r3, #7
 8013e78:	69bb      	ldr	r3, [r7, #24]
 8013e7a:	619a      	str	r2, [r3, #24]
 8013e7c:	69bb      	ldr	r3, [r7, #24]
 8013e7e:	6959      	ldr	r1, [r3, #20]
 8013e80:	693a      	ldr	r2, [r7, #16]
 8013e82:	4613      	mov	r3, r2
 8013e84:	009b      	lsls	r3, r3, #2
 8013e86:	4413      	add	r3, r2
 8013e88:	009b      	lsls	r3, r3, #2
 8013e8a:	4a22      	ldr	r2, [pc, #136]	; (8013f14 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8013e8c:	4413      	add	r3, r2
 8013e8e:	4299      	cmp	r1, r3
 8013e90:	d101      	bne.n	8013e96 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8013e92:	2301      	movs	r3, #1
 8013e94:	e000      	b.n	8013e98 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8013e96:	2300      	movs	r3, #0
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d034      	beq.n	8013f06 <vTaskPriorityDisinheritAfterTimeout+0x126>
 8013e9c:	69bb      	ldr	r3, [r7, #24]
 8013e9e:	3304      	adds	r3, #4
 8013ea0:	4618      	mov	r0, r3
 8013ea2:	f7fe f96c 	bl	801217e <uxListRemove>
 8013ea6:	4603      	mov	r3, r0
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d115      	bne.n	8013ed8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 8013eac:	69bb      	ldr	r3, [r7, #24]
 8013eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013eb0:	4918      	ldr	r1, [pc, #96]	; (8013f14 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8013eb2:	4613      	mov	r3, r2
 8013eb4:	009b      	lsls	r3, r3, #2
 8013eb6:	4413      	add	r3, r2
 8013eb8:	009b      	lsls	r3, r3, #2
 8013eba:	440b      	add	r3, r1
 8013ebc:	681b      	ldr	r3, [r3, #0]
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	d10a      	bne.n	8013ed8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 8013ec2:	69bb      	ldr	r3, [r7, #24]
 8013ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ec6:	2201      	movs	r2, #1
 8013ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8013ecc:	43da      	mvns	r2, r3
 8013ece:	4b12      	ldr	r3, [pc, #72]	; (8013f18 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8013ed0:	681b      	ldr	r3, [r3, #0]
 8013ed2:	4013      	ands	r3, r2
 8013ed4:	4a10      	ldr	r2, [pc, #64]	; (8013f18 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8013ed6:	6013      	str	r3, [r2, #0]
 8013ed8:	69bb      	ldr	r3, [r7, #24]
 8013eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013edc:	2201      	movs	r2, #1
 8013ede:	409a      	lsls	r2, r3
 8013ee0:	4b0d      	ldr	r3, [pc, #52]	; (8013f18 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	4313      	orrs	r3, r2
 8013ee6:	4a0c      	ldr	r2, [pc, #48]	; (8013f18 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8013ee8:	6013      	str	r3, [r2, #0]
 8013eea:	69bb      	ldr	r3, [r7, #24]
 8013eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013eee:	4613      	mov	r3, r2
 8013ef0:	009b      	lsls	r3, r3, #2
 8013ef2:	4413      	add	r3, r2
 8013ef4:	009b      	lsls	r3, r3, #2
 8013ef6:	4a07      	ldr	r2, [pc, #28]	; (8013f14 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8013ef8:	441a      	add	r2, r3
 8013efa:	69bb      	ldr	r3, [r7, #24]
 8013efc:	3304      	adds	r3, #4
 8013efe:	4619      	mov	r1, r3
 8013f00:	4610      	mov	r0, r2
 8013f02:	f7fe f8df 	bl	80120c4 <vListInsertEnd>
 8013f06:	bf00      	nop
 8013f08:	3720      	adds	r7, #32
 8013f0a:	46bd      	mov	sp, r7
 8013f0c:	bd80      	pop	{r7, pc}
 8013f0e:	bf00      	nop
 8013f10:	20001460 	.word	0x20001460
 8013f14:	20001464 	.word	0x20001464
 8013f18:	20001568 	.word	0x20001568

08013f1c <pvTaskIncrementMutexHeldCount>:
 8013f1c:	b480      	push	{r7}
 8013f1e:	af00      	add	r7, sp, #0
 8013f20:	4b07      	ldr	r3, [pc, #28]	; (8013f40 <pvTaskIncrementMutexHeldCount+0x24>)
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d004      	beq.n	8013f32 <pvTaskIncrementMutexHeldCount+0x16>
 8013f28:	4b05      	ldr	r3, [pc, #20]	; (8013f40 <pvTaskIncrementMutexHeldCount+0x24>)
 8013f2a:	681b      	ldr	r3, [r3, #0]
 8013f2c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013f2e:	3201      	adds	r2, #1
 8013f30:	649a      	str	r2, [r3, #72]	; 0x48
 8013f32:	4b03      	ldr	r3, [pc, #12]	; (8013f40 <pvTaskIncrementMutexHeldCount+0x24>)
 8013f34:	681b      	ldr	r3, [r3, #0]
 8013f36:	4618      	mov	r0, r3
 8013f38:	46bd      	mov	sp, r7
 8013f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f3e:	4770      	bx	lr
 8013f40:	20001460 	.word	0x20001460

08013f44 <xTaskNotifyWait>:
 8013f44:	b580      	push	{r7, lr}
 8013f46:	b086      	sub	sp, #24
 8013f48:	af00      	add	r7, sp, #0
 8013f4a:	60f8      	str	r0, [r7, #12]
 8013f4c:	60b9      	str	r1, [r7, #8]
 8013f4e:	607a      	str	r2, [r7, #4]
 8013f50:	603b      	str	r3, [r7, #0]
 8013f52:	f000 fb43 	bl	80145dc <vPortEnterCritical>
 8013f56:	4b26      	ldr	r3, [pc, #152]	; (8013ff0 <xTaskNotifyWait+0xac>)
 8013f58:	681b      	ldr	r3, [r3, #0]
 8013f5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013f5e:	b2db      	uxtb	r3, r3
 8013f60:	2b02      	cmp	r3, #2
 8013f62:	d01a      	beq.n	8013f9a <xTaskNotifyWait+0x56>
 8013f64:	4b22      	ldr	r3, [pc, #136]	; (8013ff0 <xTaskNotifyWait+0xac>)
 8013f66:	681b      	ldr	r3, [r3, #0]
 8013f68:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8013f6a:	68fa      	ldr	r2, [r7, #12]
 8013f6c:	43d2      	mvns	r2, r2
 8013f6e:	400a      	ands	r2, r1
 8013f70:	64da      	str	r2, [r3, #76]	; 0x4c
 8013f72:	4b1f      	ldr	r3, [pc, #124]	; (8013ff0 <xTaskNotifyWait+0xac>)
 8013f74:	681b      	ldr	r3, [r3, #0]
 8013f76:	2201      	movs	r2, #1
 8013f78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8013f7c:	683b      	ldr	r3, [r7, #0]
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d00b      	beq.n	8013f9a <xTaskNotifyWait+0x56>
 8013f82:	2101      	movs	r1, #1
 8013f84:	6838      	ldr	r0, [r7, #0]
 8013f86:	f000 f99d 	bl	80142c4 <prvAddCurrentTaskToDelayedList>
 8013f8a:	4b1a      	ldr	r3, [pc, #104]	; (8013ff4 <xTaskNotifyWait+0xb0>)
 8013f8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013f90:	601a      	str	r2, [r3, #0]
 8013f92:	f3bf 8f4f 	dsb	sy
 8013f96:	f3bf 8f6f 	isb	sy
 8013f9a:	f000 fb4d 	bl	8014638 <vPortExitCritical>
 8013f9e:	f000 fb1d 	bl	80145dc <vPortEnterCritical>
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d004      	beq.n	8013fb2 <xTaskNotifyWait+0x6e>
 8013fa8:	4b11      	ldr	r3, [pc, #68]	; (8013ff0 <xTaskNotifyWait+0xac>)
 8013faa:	681b      	ldr	r3, [r3, #0]
 8013fac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	601a      	str	r2, [r3, #0]
 8013fb2:	4b0f      	ldr	r3, [pc, #60]	; (8013ff0 <xTaskNotifyWait+0xac>)
 8013fb4:	681b      	ldr	r3, [r3, #0]
 8013fb6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013fba:	b2db      	uxtb	r3, r3
 8013fbc:	2b02      	cmp	r3, #2
 8013fbe:	d002      	beq.n	8013fc6 <xTaskNotifyWait+0x82>
 8013fc0:	2300      	movs	r3, #0
 8013fc2:	617b      	str	r3, [r7, #20]
 8013fc4:	e008      	b.n	8013fd8 <xTaskNotifyWait+0x94>
 8013fc6:	4b0a      	ldr	r3, [pc, #40]	; (8013ff0 <xTaskNotifyWait+0xac>)
 8013fc8:	681b      	ldr	r3, [r3, #0]
 8013fca:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8013fcc:	68ba      	ldr	r2, [r7, #8]
 8013fce:	43d2      	mvns	r2, r2
 8013fd0:	400a      	ands	r2, r1
 8013fd2:	64da      	str	r2, [r3, #76]	; 0x4c
 8013fd4:	2301      	movs	r3, #1
 8013fd6:	617b      	str	r3, [r7, #20]
 8013fd8:	4b05      	ldr	r3, [pc, #20]	; (8013ff0 <xTaskNotifyWait+0xac>)
 8013fda:	681b      	ldr	r3, [r3, #0]
 8013fdc:	2200      	movs	r2, #0
 8013fde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8013fe2:	f000 fb29 	bl	8014638 <vPortExitCritical>
 8013fe6:	697b      	ldr	r3, [r7, #20]
 8013fe8:	4618      	mov	r0, r3
 8013fea:	3718      	adds	r7, #24
 8013fec:	46bd      	mov	sp, r7
 8013fee:	bd80      	pop	{r7, pc}
 8013ff0:	20001460 	.word	0x20001460
 8013ff4:	e000ed04 	.word	0xe000ed04

08013ff8 <xTaskGenericNotify>:
 8013ff8:	b580      	push	{r7, lr}
 8013ffa:	b08a      	sub	sp, #40	; 0x28
 8013ffc:	af00      	add	r7, sp, #0
 8013ffe:	60f8      	str	r0, [r7, #12]
 8014000:	60b9      	str	r1, [r7, #8]
 8014002:	603b      	str	r3, [r7, #0]
 8014004:	4613      	mov	r3, r2
 8014006:	71fb      	strb	r3, [r7, #7]
 8014008:	2301      	movs	r3, #1
 801400a:	627b      	str	r3, [r7, #36]	; 0x24
 801400c:	68fb      	ldr	r3, [r7, #12]
 801400e:	2b00      	cmp	r3, #0
 8014010:	d109      	bne.n	8014026 <xTaskGenericNotify+0x2e>
 8014012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014016:	f383 8811 	msr	BASEPRI, r3
 801401a:	f3bf 8f6f 	isb	sy
 801401e:	f3bf 8f4f 	dsb	sy
 8014022:	61bb      	str	r3, [r7, #24]
 8014024:	e7fe      	b.n	8014024 <xTaskGenericNotify+0x2c>
 8014026:	68fb      	ldr	r3, [r7, #12]
 8014028:	623b      	str	r3, [r7, #32]
 801402a:	f000 fad7 	bl	80145dc <vPortEnterCritical>
 801402e:	683b      	ldr	r3, [r7, #0]
 8014030:	2b00      	cmp	r3, #0
 8014032:	d003      	beq.n	801403c <xTaskGenericNotify+0x44>
 8014034:	6a3b      	ldr	r3, [r7, #32]
 8014036:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014038:	683b      	ldr	r3, [r7, #0]
 801403a:	601a      	str	r2, [r3, #0]
 801403c:	6a3b      	ldr	r3, [r7, #32]
 801403e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014042:	77fb      	strb	r3, [r7, #31]
 8014044:	6a3b      	ldr	r3, [r7, #32]
 8014046:	2202      	movs	r2, #2
 8014048:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 801404c:	79fb      	ldrb	r3, [r7, #7]
 801404e:	2b04      	cmp	r3, #4
 8014050:	d827      	bhi.n	80140a2 <xTaskGenericNotify+0xaa>
 8014052:	a201      	add	r2, pc, #4	; (adr r2, 8014058 <xTaskGenericNotify+0x60>)
 8014054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014058:	080140a3 	.word	0x080140a3
 801405c:	0801406d 	.word	0x0801406d
 8014060:	0801407b 	.word	0x0801407b
 8014064:	08014087 	.word	0x08014087
 8014068:	0801408f 	.word	0x0801408f
 801406c:	6a3b      	ldr	r3, [r7, #32]
 801406e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014070:	68bb      	ldr	r3, [r7, #8]
 8014072:	431a      	orrs	r2, r3
 8014074:	6a3b      	ldr	r3, [r7, #32]
 8014076:	64da      	str	r2, [r3, #76]	; 0x4c
 8014078:	e013      	b.n	80140a2 <xTaskGenericNotify+0xaa>
 801407a:	6a3b      	ldr	r3, [r7, #32]
 801407c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801407e:	1c5a      	adds	r2, r3, #1
 8014080:	6a3b      	ldr	r3, [r7, #32]
 8014082:	64da      	str	r2, [r3, #76]	; 0x4c
 8014084:	e00d      	b.n	80140a2 <xTaskGenericNotify+0xaa>
 8014086:	6a3b      	ldr	r3, [r7, #32]
 8014088:	68ba      	ldr	r2, [r7, #8]
 801408a:	64da      	str	r2, [r3, #76]	; 0x4c
 801408c:	e009      	b.n	80140a2 <xTaskGenericNotify+0xaa>
 801408e:	7ffb      	ldrb	r3, [r7, #31]
 8014090:	2b02      	cmp	r3, #2
 8014092:	d003      	beq.n	801409c <xTaskGenericNotify+0xa4>
 8014094:	6a3b      	ldr	r3, [r7, #32]
 8014096:	68ba      	ldr	r2, [r7, #8]
 8014098:	64da      	str	r2, [r3, #76]	; 0x4c
 801409a:	e001      	b.n	80140a0 <xTaskGenericNotify+0xa8>
 801409c:	2300      	movs	r3, #0
 801409e:	627b      	str	r3, [r7, #36]	; 0x24
 80140a0:	bf00      	nop
 80140a2:	7ffb      	ldrb	r3, [r7, #31]
 80140a4:	2b01      	cmp	r3, #1
 80140a6:	d138      	bne.n	801411a <xTaskGenericNotify+0x122>
 80140a8:	6a3b      	ldr	r3, [r7, #32]
 80140aa:	3304      	adds	r3, #4
 80140ac:	4618      	mov	r0, r3
 80140ae:	f7fe f866 	bl	801217e <uxListRemove>
 80140b2:	6a3b      	ldr	r3, [r7, #32]
 80140b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140b6:	2201      	movs	r2, #1
 80140b8:	409a      	lsls	r2, r3
 80140ba:	4b1b      	ldr	r3, [pc, #108]	; (8014128 <xTaskGenericNotify+0x130>)
 80140bc:	681b      	ldr	r3, [r3, #0]
 80140be:	4313      	orrs	r3, r2
 80140c0:	4a19      	ldr	r2, [pc, #100]	; (8014128 <xTaskGenericNotify+0x130>)
 80140c2:	6013      	str	r3, [r2, #0]
 80140c4:	6a3b      	ldr	r3, [r7, #32]
 80140c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80140c8:	4613      	mov	r3, r2
 80140ca:	009b      	lsls	r3, r3, #2
 80140cc:	4413      	add	r3, r2
 80140ce:	009b      	lsls	r3, r3, #2
 80140d0:	4a16      	ldr	r2, [pc, #88]	; (801412c <xTaskGenericNotify+0x134>)
 80140d2:	441a      	add	r2, r3
 80140d4:	6a3b      	ldr	r3, [r7, #32]
 80140d6:	3304      	adds	r3, #4
 80140d8:	4619      	mov	r1, r3
 80140da:	4610      	mov	r0, r2
 80140dc:	f7fd fff2 	bl	80120c4 <vListInsertEnd>
 80140e0:	6a3b      	ldr	r3, [r7, #32]
 80140e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d009      	beq.n	80140fc <xTaskGenericNotify+0x104>
 80140e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140ec:	f383 8811 	msr	BASEPRI, r3
 80140f0:	f3bf 8f6f 	isb	sy
 80140f4:	f3bf 8f4f 	dsb	sy
 80140f8:	617b      	str	r3, [r7, #20]
 80140fa:	e7fe      	b.n	80140fa <xTaskGenericNotify+0x102>
 80140fc:	6a3b      	ldr	r3, [r7, #32]
 80140fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014100:	4b0b      	ldr	r3, [pc, #44]	; (8014130 <xTaskGenericNotify+0x138>)
 8014102:	681b      	ldr	r3, [r3, #0]
 8014104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014106:	429a      	cmp	r2, r3
 8014108:	d907      	bls.n	801411a <xTaskGenericNotify+0x122>
 801410a:	4b0a      	ldr	r3, [pc, #40]	; (8014134 <xTaskGenericNotify+0x13c>)
 801410c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014110:	601a      	str	r2, [r3, #0]
 8014112:	f3bf 8f4f 	dsb	sy
 8014116:	f3bf 8f6f 	isb	sy
 801411a:	f000 fa8d 	bl	8014638 <vPortExitCritical>
 801411e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014120:	4618      	mov	r0, r3
 8014122:	3728      	adds	r7, #40	; 0x28
 8014124:	46bd      	mov	sp, r7
 8014126:	bd80      	pop	{r7, pc}
 8014128:	20001568 	.word	0x20001568
 801412c:	20001464 	.word	0x20001464
 8014130:	20001460 	.word	0x20001460
 8014134:	e000ed04 	.word	0xe000ed04

08014138 <xTaskGenericNotifyFromISR>:
 8014138:	b580      	push	{r7, lr}
 801413a:	b08e      	sub	sp, #56	; 0x38
 801413c:	af00      	add	r7, sp, #0
 801413e:	60f8      	str	r0, [r7, #12]
 8014140:	60b9      	str	r1, [r7, #8]
 8014142:	603b      	str	r3, [r7, #0]
 8014144:	4613      	mov	r3, r2
 8014146:	71fb      	strb	r3, [r7, #7]
 8014148:	2301      	movs	r3, #1
 801414a:	637b      	str	r3, [r7, #52]	; 0x34
 801414c:	68fb      	ldr	r3, [r7, #12]
 801414e:	2b00      	cmp	r3, #0
 8014150:	d109      	bne.n	8014166 <xTaskGenericNotifyFromISR+0x2e>
 8014152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014156:	f383 8811 	msr	BASEPRI, r3
 801415a:	f3bf 8f6f 	isb	sy
 801415e:	f3bf 8f4f 	dsb	sy
 8014162:	627b      	str	r3, [r7, #36]	; 0x24
 8014164:	e7fe      	b.n	8014164 <xTaskGenericNotifyFromISR+0x2c>
 8014166:	f000 fb15 	bl	8014794 <vPortValidateInterruptPriority>
 801416a:	68fb      	ldr	r3, [r7, #12]
 801416c:	633b      	str	r3, [r7, #48]	; 0x30
 801416e:	f3ef 8211 	mrs	r2, BASEPRI
 8014172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014176:	f383 8811 	msr	BASEPRI, r3
 801417a:	f3bf 8f6f 	isb	sy
 801417e:	f3bf 8f4f 	dsb	sy
 8014182:	623a      	str	r2, [r7, #32]
 8014184:	61fb      	str	r3, [r7, #28]
 8014186:	6a3b      	ldr	r3, [r7, #32]
 8014188:	62fb      	str	r3, [r7, #44]	; 0x2c
 801418a:	683b      	ldr	r3, [r7, #0]
 801418c:	2b00      	cmp	r3, #0
 801418e:	d003      	beq.n	8014198 <xTaskGenericNotifyFromISR+0x60>
 8014190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014192:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014194:	683b      	ldr	r3, [r7, #0]
 8014196:	601a      	str	r2, [r3, #0]
 8014198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801419a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801419e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80141a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141a4:	2202      	movs	r2, #2
 80141a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80141aa:	79fb      	ldrb	r3, [r7, #7]
 80141ac:	2b04      	cmp	r3, #4
 80141ae:	d829      	bhi.n	8014204 <xTaskGenericNotifyFromISR+0xcc>
 80141b0:	a201      	add	r2, pc, #4	; (adr r2, 80141b8 <xTaskGenericNotifyFromISR+0x80>)
 80141b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80141b6:	bf00      	nop
 80141b8:	08014205 	.word	0x08014205
 80141bc:	080141cd 	.word	0x080141cd
 80141c0:	080141db 	.word	0x080141db
 80141c4:	080141e7 	.word	0x080141e7
 80141c8:	080141ef 	.word	0x080141ef
 80141cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80141d0:	68bb      	ldr	r3, [r7, #8]
 80141d2:	431a      	orrs	r2, r3
 80141d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141d6:	64da      	str	r2, [r3, #76]	; 0x4c
 80141d8:	e014      	b.n	8014204 <xTaskGenericNotifyFromISR+0xcc>
 80141da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80141de:	1c5a      	adds	r2, r3, #1
 80141e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141e2:	64da      	str	r2, [r3, #76]	; 0x4c
 80141e4:	e00e      	b.n	8014204 <xTaskGenericNotifyFromISR+0xcc>
 80141e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141e8:	68ba      	ldr	r2, [r7, #8]
 80141ea:	64da      	str	r2, [r3, #76]	; 0x4c
 80141ec:	e00a      	b.n	8014204 <xTaskGenericNotifyFromISR+0xcc>
 80141ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80141f2:	2b02      	cmp	r3, #2
 80141f4:	d003      	beq.n	80141fe <xTaskGenericNotifyFromISR+0xc6>
 80141f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141f8:	68ba      	ldr	r2, [r7, #8]
 80141fa:	64da      	str	r2, [r3, #76]	; 0x4c
 80141fc:	e001      	b.n	8014202 <xTaskGenericNotifyFromISR+0xca>
 80141fe:	2300      	movs	r3, #0
 8014200:	637b      	str	r3, [r7, #52]	; 0x34
 8014202:	bf00      	nop
 8014204:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014208:	2b01      	cmp	r3, #1
 801420a:	d145      	bne.n	8014298 <xTaskGenericNotifyFromISR+0x160>
 801420c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801420e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014210:	2b00      	cmp	r3, #0
 8014212:	d009      	beq.n	8014228 <xTaskGenericNotifyFromISR+0xf0>
 8014214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014218:	f383 8811 	msr	BASEPRI, r3
 801421c:	f3bf 8f6f 	isb	sy
 8014220:	f3bf 8f4f 	dsb	sy
 8014224:	61bb      	str	r3, [r7, #24]
 8014226:	e7fe      	b.n	8014226 <xTaskGenericNotifyFromISR+0xee>
 8014228:	4b20      	ldr	r3, [pc, #128]	; (80142ac <xTaskGenericNotifyFromISR+0x174>)
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	2b00      	cmp	r3, #0
 801422e:	d11c      	bne.n	801426a <xTaskGenericNotifyFromISR+0x132>
 8014230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014232:	3304      	adds	r3, #4
 8014234:	4618      	mov	r0, r3
 8014236:	f7fd ffa2 	bl	801217e <uxListRemove>
 801423a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801423c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801423e:	2201      	movs	r2, #1
 8014240:	409a      	lsls	r2, r3
 8014242:	4b1b      	ldr	r3, [pc, #108]	; (80142b0 <xTaskGenericNotifyFromISR+0x178>)
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	4313      	orrs	r3, r2
 8014248:	4a19      	ldr	r2, [pc, #100]	; (80142b0 <xTaskGenericNotifyFromISR+0x178>)
 801424a:	6013      	str	r3, [r2, #0]
 801424c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801424e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014250:	4613      	mov	r3, r2
 8014252:	009b      	lsls	r3, r3, #2
 8014254:	4413      	add	r3, r2
 8014256:	009b      	lsls	r3, r3, #2
 8014258:	4a16      	ldr	r2, [pc, #88]	; (80142b4 <xTaskGenericNotifyFromISR+0x17c>)
 801425a:	441a      	add	r2, r3
 801425c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801425e:	3304      	adds	r3, #4
 8014260:	4619      	mov	r1, r3
 8014262:	4610      	mov	r0, r2
 8014264:	f7fd ff2e 	bl	80120c4 <vListInsertEnd>
 8014268:	e005      	b.n	8014276 <xTaskGenericNotifyFromISR+0x13e>
 801426a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801426c:	3318      	adds	r3, #24
 801426e:	4619      	mov	r1, r3
 8014270:	4811      	ldr	r0, [pc, #68]	; (80142b8 <xTaskGenericNotifyFromISR+0x180>)
 8014272:	f7fd ff27 	bl	80120c4 <vListInsertEnd>
 8014276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801427a:	4b10      	ldr	r3, [pc, #64]	; (80142bc <xTaskGenericNotifyFromISR+0x184>)
 801427c:	681b      	ldr	r3, [r3, #0]
 801427e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014280:	429a      	cmp	r2, r3
 8014282:	d909      	bls.n	8014298 <xTaskGenericNotifyFromISR+0x160>
 8014284:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014286:	2b00      	cmp	r3, #0
 8014288:	d003      	beq.n	8014292 <xTaskGenericNotifyFromISR+0x15a>
 801428a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801428c:	2201      	movs	r2, #1
 801428e:	601a      	str	r2, [r3, #0]
 8014290:	e002      	b.n	8014298 <xTaskGenericNotifyFromISR+0x160>
 8014292:	4b0b      	ldr	r3, [pc, #44]	; (80142c0 <xTaskGenericNotifyFromISR+0x188>)
 8014294:	2201      	movs	r2, #1
 8014296:	601a      	str	r2, [r3, #0]
 8014298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801429a:	617b      	str	r3, [r7, #20]
 801429c:	697b      	ldr	r3, [r7, #20]
 801429e:	f383 8811 	msr	BASEPRI, r3
 80142a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80142a4:	4618      	mov	r0, r3
 80142a6:	3738      	adds	r7, #56	; 0x38
 80142a8:	46bd      	mov	sp, r7
 80142aa:	bd80      	pop	{r7, pc}
 80142ac:	20001588 	.word	0x20001588
 80142b0:	20001568 	.word	0x20001568
 80142b4:	20001464 	.word	0x20001464
 80142b8:	20001520 	.word	0x20001520
 80142bc:	20001460 	.word	0x20001460
 80142c0:	20001574 	.word	0x20001574

080142c4 <prvAddCurrentTaskToDelayedList>:
 80142c4:	b580      	push	{r7, lr}
 80142c6:	b084      	sub	sp, #16
 80142c8:	af00      	add	r7, sp, #0
 80142ca:	6078      	str	r0, [r7, #4]
 80142cc:	6039      	str	r1, [r7, #0]
 80142ce:	4b29      	ldr	r3, [pc, #164]	; (8014374 <prvAddCurrentTaskToDelayedList+0xb0>)
 80142d0:	681b      	ldr	r3, [r3, #0]
 80142d2:	60fb      	str	r3, [r7, #12]
 80142d4:	4b28      	ldr	r3, [pc, #160]	; (8014378 <prvAddCurrentTaskToDelayedList+0xb4>)
 80142d6:	681b      	ldr	r3, [r3, #0]
 80142d8:	3304      	adds	r3, #4
 80142da:	4618      	mov	r0, r3
 80142dc:	f7fd ff4f 	bl	801217e <uxListRemove>
 80142e0:	4603      	mov	r3, r0
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	d10b      	bne.n	80142fe <prvAddCurrentTaskToDelayedList+0x3a>
 80142e6:	4b24      	ldr	r3, [pc, #144]	; (8014378 <prvAddCurrentTaskToDelayedList+0xb4>)
 80142e8:	681b      	ldr	r3, [r3, #0]
 80142ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142ec:	2201      	movs	r2, #1
 80142ee:	fa02 f303 	lsl.w	r3, r2, r3
 80142f2:	43da      	mvns	r2, r3
 80142f4:	4b21      	ldr	r3, [pc, #132]	; (801437c <prvAddCurrentTaskToDelayedList+0xb8>)
 80142f6:	681b      	ldr	r3, [r3, #0]
 80142f8:	4013      	ands	r3, r2
 80142fa:	4a20      	ldr	r2, [pc, #128]	; (801437c <prvAddCurrentTaskToDelayedList+0xb8>)
 80142fc:	6013      	str	r3, [r2, #0]
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014304:	d10a      	bne.n	801431c <prvAddCurrentTaskToDelayedList+0x58>
 8014306:	683b      	ldr	r3, [r7, #0]
 8014308:	2b00      	cmp	r3, #0
 801430a:	d007      	beq.n	801431c <prvAddCurrentTaskToDelayedList+0x58>
 801430c:	4b1a      	ldr	r3, [pc, #104]	; (8014378 <prvAddCurrentTaskToDelayedList+0xb4>)
 801430e:	681b      	ldr	r3, [r3, #0]
 8014310:	3304      	adds	r3, #4
 8014312:	4619      	mov	r1, r3
 8014314:	481a      	ldr	r0, [pc, #104]	; (8014380 <prvAddCurrentTaskToDelayedList+0xbc>)
 8014316:	f7fd fed5 	bl	80120c4 <vListInsertEnd>
 801431a:	e026      	b.n	801436a <prvAddCurrentTaskToDelayedList+0xa6>
 801431c:	68fa      	ldr	r2, [r7, #12]
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	4413      	add	r3, r2
 8014322:	60bb      	str	r3, [r7, #8]
 8014324:	4b14      	ldr	r3, [pc, #80]	; (8014378 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014326:	681b      	ldr	r3, [r3, #0]
 8014328:	68ba      	ldr	r2, [r7, #8]
 801432a:	605a      	str	r2, [r3, #4]
 801432c:	68ba      	ldr	r2, [r7, #8]
 801432e:	68fb      	ldr	r3, [r7, #12]
 8014330:	429a      	cmp	r2, r3
 8014332:	d209      	bcs.n	8014348 <prvAddCurrentTaskToDelayedList+0x84>
 8014334:	4b13      	ldr	r3, [pc, #76]	; (8014384 <prvAddCurrentTaskToDelayedList+0xc0>)
 8014336:	681a      	ldr	r2, [r3, #0]
 8014338:	4b0f      	ldr	r3, [pc, #60]	; (8014378 <prvAddCurrentTaskToDelayedList+0xb4>)
 801433a:	681b      	ldr	r3, [r3, #0]
 801433c:	3304      	adds	r3, #4
 801433e:	4619      	mov	r1, r3
 8014340:	4610      	mov	r0, r2
 8014342:	f7fd fee3 	bl	801210c <vListInsert>
 8014346:	e010      	b.n	801436a <prvAddCurrentTaskToDelayedList+0xa6>
 8014348:	4b0f      	ldr	r3, [pc, #60]	; (8014388 <prvAddCurrentTaskToDelayedList+0xc4>)
 801434a:	681a      	ldr	r2, [r3, #0]
 801434c:	4b0a      	ldr	r3, [pc, #40]	; (8014378 <prvAddCurrentTaskToDelayedList+0xb4>)
 801434e:	681b      	ldr	r3, [r3, #0]
 8014350:	3304      	adds	r3, #4
 8014352:	4619      	mov	r1, r3
 8014354:	4610      	mov	r0, r2
 8014356:	f7fd fed9 	bl	801210c <vListInsert>
 801435a:	4b0c      	ldr	r3, [pc, #48]	; (801438c <prvAddCurrentTaskToDelayedList+0xc8>)
 801435c:	681b      	ldr	r3, [r3, #0]
 801435e:	68ba      	ldr	r2, [r7, #8]
 8014360:	429a      	cmp	r2, r3
 8014362:	d202      	bcs.n	801436a <prvAddCurrentTaskToDelayedList+0xa6>
 8014364:	4a09      	ldr	r2, [pc, #36]	; (801438c <prvAddCurrentTaskToDelayedList+0xc8>)
 8014366:	68bb      	ldr	r3, [r7, #8]
 8014368:	6013      	str	r3, [r2, #0]
 801436a:	bf00      	nop
 801436c:	3710      	adds	r7, #16
 801436e:	46bd      	mov	sp, r7
 8014370:	bd80      	pop	{r7, pc}
 8014372:	bf00      	nop
 8014374:	20001564 	.word	0x20001564
 8014378:	20001460 	.word	0x20001460
 801437c:	20001568 	.word	0x20001568
 8014380:	2000154c 	.word	0x2000154c
 8014384:	2000151c 	.word	0x2000151c
 8014388:	20001518 	.word	0x20001518
 801438c:	20001580 	.word	0x20001580

08014390 <pxPortInitialiseStack>:
 8014390:	b480      	push	{r7}
 8014392:	b085      	sub	sp, #20
 8014394:	af00      	add	r7, sp, #0
 8014396:	60f8      	str	r0, [r7, #12]
 8014398:	60b9      	str	r1, [r7, #8]
 801439a:	607a      	str	r2, [r7, #4]
 801439c:	68fb      	ldr	r3, [r7, #12]
 801439e:	3b04      	subs	r3, #4
 80143a0:	60fb      	str	r3, [r7, #12]
 80143a2:	68fb      	ldr	r3, [r7, #12]
 80143a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80143a8:	601a      	str	r2, [r3, #0]
 80143aa:	68fb      	ldr	r3, [r7, #12]
 80143ac:	3b04      	subs	r3, #4
 80143ae:	60fb      	str	r3, [r7, #12]
 80143b0:	68bb      	ldr	r3, [r7, #8]
 80143b2:	f023 0201 	bic.w	r2, r3, #1
 80143b6:	68fb      	ldr	r3, [r7, #12]
 80143b8:	601a      	str	r2, [r3, #0]
 80143ba:	68fb      	ldr	r3, [r7, #12]
 80143bc:	3b04      	subs	r3, #4
 80143be:	60fb      	str	r3, [r7, #12]
 80143c0:	4a0c      	ldr	r2, [pc, #48]	; (80143f4 <pxPortInitialiseStack+0x64>)
 80143c2:	68fb      	ldr	r3, [r7, #12]
 80143c4:	601a      	str	r2, [r3, #0]
 80143c6:	68fb      	ldr	r3, [r7, #12]
 80143c8:	3b14      	subs	r3, #20
 80143ca:	60fb      	str	r3, [r7, #12]
 80143cc:	687a      	ldr	r2, [r7, #4]
 80143ce:	68fb      	ldr	r3, [r7, #12]
 80143d0:	601a      	str	r2, [r3, #0]
 80143d2:	68fb      	ldr	r3, [r7, #12]
 80143d4:	3b04      	subs	r3, #4
 80143d6:	60fb      	str	r3, [r7, #12]
 80143d8:	68fb      	ldr	r3, [r7, #12]
 80143da:	f06f 0202 	mvn.w	r2, #2
 80143de:	601a      	str	r2, [r3, #0]
 80143e0:	68fb      	ldr	r3, [r7, #12]
 80143e2:	3b20      	subs	r3, #32
 80143e4:	60fb      	str	r3, [r7, #12]
 80143e6:	68fb      	ldr	r3, [r7, #12]
 80143e8:	4618      	mov	r0, r3
 80143ea:	3714      	adds	r7, #20
 80143ec:	46bd      	mov	sp, r7
 80143ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143f2:	4770      	bx	lr
 80143f4:	080143f9 	.word	0x080143f9

080143f8 <prvTaskExitError>:
 80143f8:	b480      	push	{r7}
 80143fa:	b085      	sub	sp, #20
 80143fc:	af00      	add	r7, sp, #0
 80143fe:	2300      	movs	r3, #0
 8014400:	607b      	str	r3, [r7, #4]
 8014402:	4b11      	ldr	r3, [pc, #68]	; (8014448 <prvTaskExitError+0x50>)
 8014404:	681b      	ldr	r3, [r3, #0]
 8014406:	f1b3 3fff 	cmp.w	r3, #4294967295
 801440a:	d009      	beq.n	8014420 <prvTaskExitError+0x28>
 801440c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014410:	f383 8811 	msr	BASEPRI, r3
 8014414:	f3bf 8f6f 	isb	sy
 8014418:	f3bf 8f4f 	dsb	sy
 801441c:	60fb      	str	r3, [r7, #12]
 801441e:	e7fe      	b.n	801441e <prvTaskExitError+0x26>
 8014420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014424:	f383 8811 	msr	BASEPRI, r3
 8014428:	f3bf 8f6f 	isb	sy
 801442c:	f3bf 8f4f 	dsb	sy
 8014430:	60bb      	str	r3, [r7, #8]
 8014432:	bf00      	nop
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	2b00      	cmp	r3, #0
 8014438:	d0fc      	beq.n	8014434 <prvTaskExitError+0x3c>
 801443a:	bf00      	nop
 801443c:	3714      	adds	r7, #20
 801443e:	46bd      	mov	sp, r7
 8014440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014444:	4770      	bx	lr
 8014446:	bf00      	nop
 8014448:	20000da8 	.word	0x20000da8
 801444c:	00000000 	.word	0x00000000

08014450 <SVC_Handler>:
 8014450:	4b07      	ldr	r3, [pc, #28]	; (8014470 <pxCurrentTCBConst2>)
 8014452:	6819      	ldr	r1, [r3, #0]
 8014454:	6808      	ldr	r0, [r1, #0]
 8014456:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801445a:	f380 8809 	msr	PSP, r0
 801445e:	f3bf 8f6f 	isb	sy
 8014462:	f04f 0000 	mov.w	r0, #0
 8014466:	f380 8811 	msr	BASEPRI, r0
 801446a:	4770      	bx	lr
 801446c:	f3af 8000 	nop.w

08014470 <pxCurrentTCBConst2>:
 8014470:	20001460 	.word	0x20001460
 8014474:	bf00      	nop
 8014476:	bf00      	nop

08014478 <prvPortStartFirstTask>:
 8014478:	4808      	ldr	r0, [pc, #32]	; (801449c <prvPortStartFirstTask+0x24>)
 801447a:	6800      	ldr	r0, [r0, #0]
 801447c:	6800      	ldr	r0, [r0, #0]
 801447e:	f380 8808 	msr	MSP, r0
 8014482:	f04f 0000 	mov.w	r0, #0
 8014486:	f380 8814 	msr	CONTROL, r0
 801448a:	b662      	cpsie	i
 801448c:	b661      	cpsie	f
 801448e:	f3bf 8f4f 	dsb	sy
 8014492:	f3bf 8f6f 	isb	sy
 8014496:	df00      	svc	0
 8014498:	bf00      	nop
 801449a:	bf00      	nop
 801449c:	e000ed08 	.word	0xe000ed08

080144a0 <xPortStartScheduler>:
 80144a0:	b580      	push	{r7, lr}
 80144a2:	b086      	sub	sp, #24
 80144a4:	af00      	add	r7, sp, #0
 80144a6:	4b44      	ldr	r3, [pc, #272]	; (80145b8 <xPortStartScheduler+0x118>)
 80144a8:	681b      	ldr	r3, [r3, #0]
 80144aa:	4a44      	ldr	r2, [pc, #272]	; (80145bc <xPortStartScheduler+0x11c>)
 80144ac:	4293      	cmp	r3, r2
 80144ae:	d109      	bne.n	80144c4 <xPortStartScheduler+0x24>
 80144b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144b4:	f383 8811 	msr	BASEPRI, r3
 80144b8:	f3bf 8f6f 	isb	sy
 80144bc:	f3bf 8f4f 	dsb	sy
 80144c0:	613b      	str	r3, [r7, #16]
 80144c2:	e7fe      	b.n	80144c2 <xPortStartScheduler+0x22>
 80144c4:	4b3c      	ldr	r3, [pc, #240]	; (80145b8 <xPortStartScheduler+0x118>)
 80144c6:	681b      	ldr	r3, [r3, #0]
 80144c8:	4a3d      	ldr	r2, [pc, #244]	; (80145c0 <xPortStartScheduler+0x120>)
 80144ca:	4293      	cmp	r3, r2
 80144cc:	d109      	bne.n	80144e2 <xPortStartScheduler+0x42>
 80144ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144d2:	f383 8811 	msr	BASEPRI, r3
 80144d6:	f3bf 8f6f 	isb	sy
 80144da:	f3bf 8f4f 	dsb	sy
 80144de:	60fb      	str	r3, [r7, #12]
 80144e0:	e7fe      	b.n	80144e0 <xPortStartScheduler+0x40>
 80144e2:	4b38      	ldr	r3, [pc, #224]	; (80145c4 <xPortStartScheduler+0x124>)
 80144e4:	617b      	str	r3, [r7, #20]
 80144e6:	697b      	ldr	r3, [r7, #20]
 80144e8:	781b      	ldrb	r3, [r3, #0]
 80144ea:	b2db      	uxtb	r3, r3
 80144ec:	607b      	str	r3, [r7, #4]
 80144ee:	697b      	ldr	r3, [r7, #20]
 80144f0:	22ff      	movs	r2, #255	; 0xff
 80144f2:	701a      	strb	r2, [r3, #0]
 80144f4:	697b      	ldr	r3, [r7, #20]
 80144f6:	781b      	ldrb	r3, [r3, #0]
 80144f8:	b2db      	uxtb	r3, r3
 80144fa:	70fb      	strb	r3, [r7, #3]
 80144fc:	78fb      	ldrb	r3, [r7, #3]
 80144fe:	b2db      	uxtb	r3, r3
 8014500:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014504:	b2da      	uxtb	r2, r3
 8014506:	4b30      	ldr	r3, [pc, #192]	; (80145c8 <xPortStartScheduler+0x128>)
 8014508:	701a      	strb	r2, [r3, #0]
 801450a:	4b30      	ldr	r3, [pc, #192]	; (80145cc <xPortStartScheduler+0x12c>)
 801450c:	2207      	movs	r2, #7
 801450e:	601a      	str	r2, [r3, #0]
 8014510:	e009      	b.n	8014526 <xPortStartScheduler+0x86>
 8014512:	4b2e      	ldr	r3, [pc, #184]	; (80145cc <xPortStartScheduler+0x12c>)
 8014514:	681b      	ldr	r3, [r3, #0]
 8014516:	3b01      	subs	r3, #1
 8014518:	4a2c      	ldr	r2, [pc, #176]	; (80145cc <xPortStartScheduler+0x12c>)
 801451a:	6013      	str	r3, [r2, #0]
 801451c:	78fb      	ldrb	r3, [r7, #3]
 801451e:	b2db      	uxtb	r3, r3
 8014520:	005b      	lsls	r3, r3, #1
 8014522:	b2db      	uxtb	r3, r3
 8014524:	70fb      	strb	r3, [r7, #3]
 8014526:	78fb      	ldrb	r3, [r7, #3]
 8014528:	b2db      	uxtb	r3, r3
 801452a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801452e:	2b80      	cmp	r3, #128	; 0x80
 8014530:	d0ef      	beq.n	8014512 <xPortStartScheduler+0x72>
 8014532:	4b26      	ldr	r3, [pc, #152]	; (80145cc <xPortStartScheduler+0x12c>)
 8014534:	681b      	ldr	r3, [r3, #0]
 8014536:	f1c3 0307 	rsb	r3, r3, #7
 801453a:	2b04      	cmp	r3, #4
 801453c:	d009      	beq.n	8014552 <xPortStartScheduler+0xb2>
 801453e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014542:	f383 8811 	msr	BASEPRI, r3
 8014546:	f3bf 8f6f 	isb	sy
 801454a:	f3bf 8f4f 	dsb	sy
 801454e:	60bb      	str	r3, [r7, #8]
 8014550:	e7fe      	b.n	8014550 <xPortStartScheduler+0xb0>
 8014552:	4b1e      	ldr	r3, [pc, #120]	; (80145cc <xPortStartScheduler+0x12c>)
 8014554:	681b      	ldr	r3, [r3, #0]
 8014556:	021b      	lsls	r3, r3, #8
 8014558:	4a1c      	ldr	r2, [pc, #112]	; (80145cc <xPortStartScheduler+0x12c>)
 801455a:	6013      	str	r3, [r2, #0]
 801455c:	4b1b      	ldr	r3, [pc, #108]	; (80145cc <xPortStartScheduler+0x12c>)
 801455e:	681b      	ldr	r3, [r3, #0]
 8014560:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014564:	4a19      	ldr	r2, [pc, #100]	; (80145cc <xPortStartScheduler+0x12c>)
 8014566:	6013      	str	r3, [r2, #0]
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	b2da      	uxtb	r2, r3
 801456c:	697b      	ldr	r3, [r7, #20]
 801456e:	701a      	strb	r2, [r3, #0]
 8014570:	4b17      	ldr	r3, [pc, #92]	; (80145d0 <xPortStartScheduler+0x130>)
 8014572:	681b      	ldr	r3, [r3, #0]
 8014574:	4a16      	ldr	r2, [pc, #88]	; (80145d0 <xPortStartScheduler+0x130>)
 8014576:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801457a:	6013      	str	r3, [r2, #0]
 801457c:	4b14      	ldr	r3, [pc, #80]	; (80145d0 <xPortStartScheduler+0x130>)
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	4a13      	ldr	r2, [pc, #76]	; (80145d0 <xPortStartScheduler+0x130>)
 8014582:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8014586:	6013      	str	r3, [r2, #0]
 8014588:	f000 f8d6 	bl	8014738 <vPortSetupTimerInterrupt>
 801458c:	4b11      	ldr	r3, [pc, #68]	; (80145d4 <xPortStartScheduler+0x134>)
 801458e:	2200      	movs	r2, #0
 8014590:	601a      	str	r2, [r3, #0]
 8014592:	f000 f8f5 	bl	8014780 <vPortEnableVFP>
 8014596:	4b10      	ldr	r3, [pc, #64]	; (80145d8 <xPortStartScheduler+0x138>)
 8014598:	681b      	ldr	r3, [r3, #0]
 801459a:	4a0f      	ldr	r2, [pc, #60]	; (80145d8 <xPortStartScheduler+0x138>)
 801459c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80145a0:	6013      	str	r3, [r2, #0]
 80145a2:	f7ff ff69 	bl	8014478 <prvPortStartFirstTask>
 80145a6:	f7ff f8b9 	bl	801371c <vTaskSwitchContext>
 80145aa:	f7ff ff25 	bl	80143f8 <prvTaskExitError>
 80145ae:	2300      	movs	r3, #0
 80145b0:	4618      	mov	r0, r3
 80145b2:	3718      	adds	r7, #24
 80145b4:	46bd      	mov	sp, r7
 80145b6:	bd80      	pop	{r7, pc}
 80145b8:	e000ed00 	.word	0xe000ed00
 80145bc:	410fc271 	.word	0x410fc271
 80145c0:	410fc270 	.word	0x410fc270
 80145c4:	e000e400 	.word	0xe000e400
 80145c8:	2000158c 	.word	0x2000158c
 80145cc:	20001590 	.word	0x20001590
 80145d0:	e000ed20 	.word	0xe000ed20
 80145d4:	20000da8 	.word	0x20000da8
 80145d8:	e000ef34 	.word	0xe000ef34

080145dc <vPortEnterCritical>:
 80145dc:	b480      	push	{r7}
 80145de:	b083      	sub	sp, #12
 80145e0:	af00      	add	r7, sp, #0
 80145e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145e6:	f383 8811 	msr	BASEPRI, r3
 80145ea:	f3bf 8f6f 	isb	sy
 80145ee:	f3bf 8f4f 	dsb	sy
 80145f2:	607b      	str	r3, [r7, #4]
 80145f4:	4b0e      	ldr	r3, [pc, #56]	; (8014630 <vPortEnterCritical+0x54>)
 80145f6:	681b      	ldr	r3, [r3, #0]
 80145f8:	3301      	adds	r3, #1
 80145fa:	4a0d      	ldr	r2, [pc, #52]	; (8014630 <vPortEnterCritical+0x54>)
 80145fc:	6013      	str	r3, [r2, #0]
 80145fe:	4b0c      	ldr	r3, [pc, #48]	; (8014630 <vPortEnterCritical+0x54>)
 8014600:	681b      	ldr	r3, [r3, #0]
 8014602:	2b01      	cmp	r3, #1
 8014604:	d10e      	bne.n	8014624 <vPortEnterCritical+0x48>
 8014606:	4b0b      	ldr	r3, [pc, #44]	; (8014634 <vPortEnterCritical+0x58>)
 8014608:	681b      	ldr	r3, [r3, #0]
 801460a:	b2db      	uxtb	r3, r3
 801460c:	2b00      	cmp	r3, #0
 801460e:	d009      	beq.n	8014624 <vPortEnterCritical+0x48>
 8014610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014614:	f383 8811 	msr	BASEPRI, r3
 8014618:	f3bf 8f6f 	isb	sy
 801461c:	f3bf 8f4f 	dsb	sy
 8014620:	603b      	str	r3, [r7, #0]
 8014622:	e7fe      	b.n	8014622 <vPortEnterCritical+0x46>
 8014624:	bf00      	nop
 8014626:	370c      	adds	r7, #12
 8014628:	46bd      	mov	sp, r7
 801462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801462e:	4770      	bx	lr
 8014630:	20000da8 	.word	0x20000da8
 8014634:	e000ed04 	.word	0xe000ed04

08014638 <vPortExitCritical>:
 8014638:	b480      	push	{r7}
 801463a:	b083      	sub	sp, #12
 801463c:	af00      	add	r7, sp, #0
 801463e:	4b11      	ldr	r3, [pc, #68]	; (8014684 <vPortExitCritical+0x4c>)
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	2b00      	cmp	r3, #0
 8014644:	d109      	bne.n	801465a <vPortExitCritical+0x22>
 8014646:	f04f 0350 	mov.w	r3, #80	; 0x50
 801464a:	f383 8811 	msr	BASEPRI, r3
 801464e:	f3bf 8f6f 	isb	sy
 8014652:	f3bf 8f4f 	dsb	sy
 8014656:	607b      	str	r3, [r7, #4]
 8014658:	e7fe      	b.n	8014658 <vPortExitCritical+0x20>
 801465a:	4b0a      	ldr	r3, [pc, #40]	; (8014684 <vPortExitCritical+0x4c>)
 801465c:	681b      	ldr	r3, [r3, #0]
 801465e:	3b01      	subs	r3, #1
 8014660:	4a08      	ldr	r2, [pc, #32]	; (8014684 <vPortExitCritical+0x4c>)
 8014662:	6013      	str	r3, [r2, #0]
 8014664:	4b07      	ldr	r3, [pc, #28]	; (8014684 <vPortExitCritical+0x4c>)
 8014666:	681b      	ldr	r3, [r3, #0]
 8014668:	2b00      	cmp	r3, #0
 801466a:	d104      	bne.n	8014676 <vPortExitCritical+0x3e>
 801466c:	2300      	movs	r3, #0
 801466e:	603b      	str	r3, [r7, #0]
 8014670:	683b      	ldr	r3, [r7, #0]
 8014672:	f383 8811 	msr	BASEPRI, r3
 8014676:	bf00      	nop
 8014678:	370c      	adds	r7, #12
 801467a:	46bd      	mov	sp, r7
 801467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014680:	4770      	bx	lr
 8014682:	bf00      	nop
 8014684:	20000da8 	.word	0x20000da8
	...

08014690 <PendSV_Handler>:
 8014690:	f3ef 8009 	mrs	r0, PSP
 8014694:	f3bf 8f6f 	isb	sy
 8014698:	4b15      	ldr	r3, [pc, #84]	; (80146f0 <pxCurrentTCBConst>)
 801469a:	681a      	ldr	r2, [r3, #0]
 801469c:	f01e 0f10 	tst.w	lr, #16
 80146a0:	bf08      	it	eq
 80146a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80146a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146aa:	6010      	str	r0, [r2, #0]
 80146ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80146b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80146b4:	f380 8811 	msr	BASEPRI, r0
 80146b8:	f3bf 8f4f 	dsb	sy
 80146bc:	f3bf 8f6f 	isb	sy
 80146c0:	f7ff f82c 	bl	801371c <vTaskSwitchContext>
 80146c4:	f04f 0000 	mov.w	r0, #0
 80146c8:	f380 8811 	msr	BASEPRI, r0
 80146cc:	bc09      	pop	{r0, r3}
 80146ce:	6819      	ldr	r1, [r3, #0]
 80146d0:	6808      	ldr	r0, [r1, #0]
 80146d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146d6:	f01e 0f10 	tst.w	lr, #16
 80146da:	bf08      	it	eq
 80146dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80146e0:	f380 8809 	msr	PSP, r0
 80146e4:	f3bf 8f6f 	isb	sy
 80146e8:	4770      	bx	lr
 80146ea:	bf00      	nop
 80146ec:	f3af 8000 	nop.w

080146f0 <pxCurrentTCBConst>:
 80146f0:	20001460 	.word	0x20001460
 80146f4:	bf00      	nop
 80146f6:	bf00      	nop

080146f8 <SysTick_Handler>:
 80146f8:	b580      	push	{r7, lr}
 80146fa:	b082      	sub	sp, #8
 80146fc:	af00      	add	r7, sp, #0
 80146fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014702:	f383 8811 	msr	BASEPRI, r3
 8014706:	f3bf 8f6f 	isb	sy
 801470a:	f3bf 8f4f 	dsb	sy
 801470e:	607b      	str	r3, [r7, #4]
 8014710:	f7fe ff48 	bl	80135a4 <xTaskIncrementTick>
 8014714:	4603      	mov	r3, r0
 8014716:	2b00      	cmp	r3, #0
 8014718:	d003      	beq.n	8014722 <SysTick_Handler+0x2a>
 801471a:	4b06      	ldr	r3, [pc, #24]	; (8014734 <SysTick_Handler+0x3c>)
 801471c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014720:	601a      	str	r2, [r3, #0]
 8014722:	2300      	movs	r3, #0
 8014724:	603b      	str	r3, [r7, #0]
 8014726:	683b      	ldr	r3, [r7, #0]
 8014728:	f383 8811 	msr	BASEPRI, r3
 801472c:	bf00      	nop
 801472e:	3708      	adds	r7, #8
 8014730:	46bd      	mov	sp, r7
 8014732:	bd80      	pop	{r7, pc}
 8014734:	e000ed04 	.word	0xe000ed04

08014738 <vPortSetupTimerInterrupt>:
 8014738:	b480      	push	{r7}
 801473a:	af00      	add	r7, sp, #0
 801473c:	4b0b      	ldr	r3, [pc, #44]	; (801476c <vPortSetupTimerInterrupt+0x34>)
 801473e:	2200      	movs	r2, #0
 8014740:	601a      	str	r2, [r3, #0]
 8014742:	4b0b      	ldr	r3, [pc, #44]	; (8014770 <vPortSetupTimerInterrupt+0x38>)
 8014744:	2200      	movs	r2, #0
 8014746:	601a      	str	r2, [r3, #0]
 8014748:	4b0a      	ldr	r3, [pc, #40]	; (8014774 <vPortSetupTimerInterrupt+0x3c>)
 801474a:	681b      	ldr	r3, [r3, #0]
 801474c:	4a0a      	ldr	r2, [pc, #40]	; (8014778 <vPortSetupTimerInterrupt+0x40>)
 801474e:	fba2 2303 	umull	r2, r3, r2, r3
 8014752:	099b      	lsrs	r3, r3, #6
 8014754:	4a09      	ldr	r2, [pc, #36]	; (801477c <vPortSetupTimerInterrupt+0x44>)
 8014756:	3b01      	subs	r3, #1
 8014758:	6013      	str	r3, [r2, #0]
 801475a:	4b04      	ldr	r3, [pc, #16]	; (801476c <vPortSetupTimerInterrupt+0x34>)
 801475c:	2207      	movs	r2, #7
 801475e:	601a      	str	r2, [r3, #0]
 8014760:	bf00      	nop
 8014762:	46bd      	mov	sp, r7
 8014764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014768:	4770      	bx	lr
 801476a:	bf00      	nop
 801476c:	e000e010 	.word	0xe000e010
 8014770:	e000e018 	.word	0xe000e018
 8014774:	20000c8c 	.word	0x20000c8c
 8014778:	10624dd3 	.word	0x10624dd3
 801477c:	e000e014 	.word	0xe000e014

08014780 <vPortEnableVFP>:
 8014780:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014790 <vPortEnableVFP+0x10>
 8014784:	6801      	ldr	r1, [r0, #0]
 8014786:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801478a:	6001      	str	r1, [r0, #0]
 801478c:	4770      	bx	lr
 801478e:	bf00      	nop
 8014790:	e000ed88 	.word	0xe000ed88

08014794 <vPortValidateInterruptPriority>:
 8014794:	b480      	push	{r7}
 8014796:	b085      	sub	sp, #20
 8014798:	af00      	add	r7, sp, #0
 801479a:	f3ef 8305 	mrs	r3, IPSR
 801479e:	60fb      	str	r3, [r7, #12]
 80147a0:	68fb      	ldr	r3, [r7, #12]
 80147a2:	2b0f      	cmp	r3, #15
 80147a4:	d913      	bls.n	80147ce <vPortValidateInterruptPriority+0x3a>
 80147a6:	4a16      	ldr	r2, [pc, #88]	; (8014800 <vPortValidateInterruptPriority+0x6c>)
 80147a8:	68fb      	ldr	r3, [r7, #12]
 80147aa:	4413      	add	r3, r2
 80147ac:	781b      	ldrb	r3, [r3, #0]
 80147ae:	72fb      	strb	r3, [r7, #11]
 80147b0:	4b14      	ldr	r3, [pc, #80]	; (8014804 <vPortValidateInterruptPriority+0x70>)
 80147b2:	781b      	ldrb	r3, [r3, #0]
 80147b4:	7afa      	ldrb	r2, [r7, #11]
 80147b6:	429a      	cmp	r2, r3
 80147b8:	d209      	bcs.n	80147ce <vPortValidateInterruptPriority+0x3a>
 80147ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147be:	f383 8811 	msr	BASEPRI, r3
 80147c2:	f3bf 8f6f 	isb	sy
 80147c6:	f3bf 8f4f 	dsb	sy
 80147ca:	607b      	str	r3, [r7, #4]
 80147cc:	e7fe      	b.n	80147cc <vPortValidateInterruptPriority+0x38>
 80147ce:	4b0e      	ldr	r3, [pc, #56]	; (8014808 <vPortValidateInterruptPriority+0x74>)
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80147d6:	4b0d      	ldr	r3, [pc, #52]	; (801480c <vPortValidateInterruptPriority+0x78>)
 80147d8:	681b      	ldr	r3, [r3, #0]
 80147da:	429a      	cmp	r2, r3
 80147dc:	d909      	bls.n	80147f2 <vPortValidateInterruptPriority+0x5e>
 80147de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147e2:	f383 8811 	msr	BASEPRI, r3
 80147e6:	f3bf 8f6f 	isb	sy
 80147ea:	f3bf 8f4f 	dsb	sy
 80147ee:	603b      	str	r3, [r7, #0]
 80147f0:	e7fe      	b.n	80147f0 <vPortValidateInterruptPriority+0x5c>
 80147f2:	bf00      	nop
 80147f4:	3714      	adds	r7, #20
 80147f6:	46bd      	mov	sp, r7
 80147f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147fc:	4770      	bx	lr
 80147fe:	bf00      	nop
 8014800:	e000e3f0 	.word	0xe000e3f0
 8014804:	2000158c 	.word	0x2000158c
 8014808:	e000ed0c 	.word	0xe000ed0c
 801480c:	20001590 	.word	0x20001590

08014810 <pvPortMalloc>:
 8014810:	b580      	push	{r7, lr}
 8014812:	b08a      	sub	sp, #40	; 0x28
 8014814:	af00      	add	r7, sp, #0
 8014816:	6078      	str	r0, [r7, #4]
 8014818:	2300      	movs	r3, #0
 801481a:	61fb      	str	r3, [r7, #28]
 801481c:	f7fe fe18 	bl	8013450 <vTaskSuspendAll>
 8014820:	4b57      	ldr	r3, [pc, #348]	; (8014980 <pvPortMalloc+0x170>)
 8014822:	681b      	ldr	r3, [r3, #0]
 8014824:	2b00      	cmp	r3, #0
 8014826:	d101      	bne.n	801482c <pvPortMalloc+0x1c>
 8014828:	f000 f90c 	bl	8014a44 <prvHeapInit>
 801482c:	4b55      	ldr	r3, [pc, #340]	; (8014984 <pvPortMalloc+0x174>)
 801482e:	681a      	ldr	r2, [r3, #0]
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	4013      	ands	r3, r2
 8014834:	2b00      	cmp	r3, #0
 8014836:	f040 808c 	bne.w	8014952 <pvPortMalloc+0x142>
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	2b00      	cmp	r3, #0
 801483e:	d01c      	beq.n	801487a <pvPortMalloc+0x6a>
 8014840:	2208      	movs	r2, #8
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	4413      	add	r3, r2
 8014846:	607b      	str	r3, [r7, #4]
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	f003 0307 	and.w	r3, r3, #7
 801484e:	2b00      	cmp	r3, #0
 8014850:	d013      	beq.n	801487a <pvPortMalloc+0x6a>
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	f023 0307 	bic.w	r3, r3, #7
 8014858:	3308      	adds	r3, #8
 801485a:	607b      	str	r3, [r7, #4]
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	f003 0307 	and.w	r3, r3, #7
 8014862:	2b00      	cmp	r3, #0
 8014864:	d009      	beq.n	801487a <pvPortMalloc+0x6a>
 8014866:	f04f 0350 	mov.w	r3, #80	; 0x50
 801486a:	f383 8811 	msr	BASEPRI, r3
 801486e:	f3bf 8f6f 	isb	sy
 8014872:	f3bf 8f4f 	dsb	sy
 8014876:	617b      	str	r3, [r7, #20]
 8014878:	e7fe      	b.n	8014878 <pvPortMalloc+0x68>
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	2b00      	cmp	r3, #0
 801487e:	d068      	beq.n	8014952 <pvPortMalloc+0x142>
 8014880:	4b41      	ldr	r3, [pc, #260]	; (8014988 <pvPortMalloc+0x178>)
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	687a      	ldr	r2, [r7, #4]
 8014886:	429a      	cmp	r2, r3
 8014888:	d863      	bhi.n	8014952 <pvPortMalloc+0x142>
 801488a:	4b40      	ldr	r3, [pc, #256]	; (801498c <pvPortMalloc+0x17c>)
 801488c:	623b      	str	r3, [r7, #32]
 801488e:	4b3f      	ldr	r3, [pc, #252]	; (801498c <pvPortMalloc+0x17c>)
 8014890:	681b      	ldr	r3, [r3, #0]
 8014892:	627b      	str	r3, [r7, #36]	; 0x24
 8014894:	e004      	b.n	80148a0 <pvPortMalloc+0x90>
 8014896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014898:	623b      	str	r3, [r7, #32]
 801489a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801489c:	681b      	ldr	r3, [r3, #0]
 801489e:	627b      	str	r3, [r7, #36]	; 0x24
 80148a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148a2:	685b      	ldr	r3, [r3, #4]
 80148a4:	687a      	ldr	r2, [r7, #4]
 80148a6:	429a      	cmp	r2, r3
 80148a8:	d903      	bls.n	80148b2 <pvPortMalloc+0xa2>
 80148aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148ac:	681b      	ldr	r3, [r3, #0]
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d1f1      	bne.n	8014896 <pvPortMalloc+0x86>
 80148b2:	4b33      	ldr	r3, [pc, #204]	; (8014980 <pvPortMalloc+0x170>)
 80148b4:	681b      	ldr	r3, [r3, #0]
 80148b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80148b8:	429a      	cmp	r2, r3
 80148ba:	d04a      	beq.n	8014952 <pvPortMalloc+0x142>
 80148bc:	6a3b      	ldr	r3, [r7, #32]
 80148be:	681b      	ldr	r3, [r3, #0]
 80148c0:	2208      	movs	r2, #8
 80148c2:	4413      	add	r3, r2
 80148c4:	61fb      	str	r3, [r7, #28]
 80148c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148c8:	681a      	ldr	r2, [r3, #0]
 80148ca:	6a3b      	ldr	r3, [r7, #32]
 80148cc:	601a      	str	r2, [r3, #0]
 80148ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148d0:	685a      	ldr	r2, [r3, #4]
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	1ad2      	subs	r2, r2, r3
 80148d6:	2308      	movs	r3, #8
 80148d8:	005b      	lsls	r3, r3, #1
 80148da:	429a      	cmp	r2, r3
 80148dc:	d91e      	bls.n	801491c <pvPortMalloc+0x10c>
 80148de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	4413      	add	r3, r2
 80148e4:	61bb      	str	r3, [r7, #24]
 80148e6:	69bb      	ldr	r3, [r7, #24]
 80148e8:	f003 0307 	and.w	r3, r3, #7
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d009      	beq.n	8014904 <pvPortMalloc+0xf4>
 80148f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148f4:	f383 8811 	msr	BASEPRI, r3
 80148f8:	f3bf 8f6f 	isb	sy
 80148fc:	f3bf 8f4f 	dsb	sy
 8014900:	613b      	str	r3, [r7, #16]
 8014902:	e7fe      	b.n	8014902 <pvPortMalloc+0xf2>
 8014904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014906:	685a      	ldr	r2, [r3, #4]
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	1ad2      	subs	r2, r2, r3
 801490c:	69bb      	ldr	r3, [r7, #24]
 801490e:	605a      	str	r2, [r3, #4]
 8014910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014912:	687a      	ldr	r2, [r7, #4]
 8014914:	605a      	str	r2, [r3, #4]
 8014916:	69b8      	ldr	r0, [r7, #24]
 8014918:	f000 f8f6 	bl	8014b08 <prvInsertBlockIntoFreeList>
 801491c:	4b1a      	ldr	r3, [pc, #104]	; (8014988 <pvPortMalloc+0x178>)
 801491e:	681a      	ldr	r2, [r3, #0]
 8014920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014922:	685b      	ldr	r3, [r3, #4]
 8014924:	1ad3      	subs	r3, r2, r3
 8014926:	4a18      	ldr	r2, [pc, #96]	; (8014988 <pvPortMalloc+0x178>)
 8014928:	6013      	str	r3, [r2, #0]
 801492a:	4b17      	ldr	r3, [pc, #92]	; (8014988 <pvPortMalloc+0x178>)
 801492c:	681a      	ldr	r2, [r3, #0]
 801492e:	4b18      	ldr	r3, [pc, #96]	; (8014990 <pvPortMalloc+0x180>)
 8014930:	681b      	ldr	r3, [r3, #0]
 8014932:	429a      	cmp	r2, r3
 8014934:	d203      	bcs.n	801493e <pvPortMalloc+0x12e>
 8014936:	4b14      	ldr	r3, [pc, #80]	; (8014988 <pvPortMalloc+0x178>)
 8014938:	681b      	ldr	r3, [r3, #0]
 801493a:	4a15      	ldr	r2, [pc, #84]	; (8014990 <pvPortMalloc+0x180>)
 801493c:	6013      	str	r3, [r2, #0]
 801493e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014940:	685a      	ldr	r2, [r3, #4]
 8014942:	4b10      	ldr	r3, [pc, #64]	; (8014984 <pvPortMalloc+0x174>)
 8014944:	681b      	ldr	r3, [r3, #0]
 8014946:	431a      	orrs	r2, r3
 8014948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801494a:	605a      	str	r2, [r3, #4]
 801494c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801494e:	2200      	movs	r2, #0
 8014950:	601a      	str	r2, [r3, #0]
 8014952:	f7fe fd8b 	bl	801346c <xTaskResumeAll>
 8014956:	69fb      	ldr	r3, [r7, #28]
 8014958:	f003 0307 	and.w	r3, r3, #7
 801495c:	2b00      	cmp	r3, #0
 801495e:	d009      	beq.n	8014974 <pvPortMalloc+0x164>
 8014960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014964:	f383 8811 	msr	BASEPRI, r3
 8014968:	f3bf 8f6f 	isb	sy
 801496c:	f3bf 8f4f 	dsb	sy
 8014970:	60fb      	str	r3, [r7, #12]
 8014972:	e7fe      	b.n	8014972 <pvPortMalloc+0x162>
 8014974:	69fb      	ldr	r3, [r7, #28]
 8014976:	4618      	mov	r0, r3
 8014978:	3728      	adds	r7, #40	; 0x28
 801497a:	46bd      	mov	sp, r7
 801497c:	bd80      	pop	{r7, pc}
 801497e:	bf00      	nop
 8014980:	2000519c 	.word	0x2000519c
 8014984:	200051a8 	.word	0x200051a8
 8014988:	200051a0 	.word	0x200051a0
 801498c:	20005194 	.word	0x20005194
 8014990:	200051a4 	.word	0x200051a4

08014994 <vPortFree>:
 8014994:	b580      	push	{r7, lr}
 8014996:	b086      	sub	sp, #24
 8014998:	af00      	add	r7, sp, #0
 801499a:	6078      	str	r0, [r7, #4]
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	617b      	str	r3, [r7, #20]
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d046      	beq.n	8014a34 <vPortFree+0xa0>
 80149a6:	2308      	movs	r3, #8
 80149a8:	425b      	negs	r3, r3
 80149aa:	697a      	ldr	r2, [r7, #20]
 80149ac:	4413      	add	r3, r2
 80149ae:	617b      	str	r3, [r7, #20]
 80149b0:	697b      	ldr	r3, [r7, #20]
 80149b2:	613b      	str	r3, [r7, #16]
 80149b4:	693b      	ldr	r3, [r7, #16]
 80149b6:	685a      	ldr	r2, [r3, #4]
 80149b8:	4b20      	ldr	r3, [pc, #128]	; (8014a3c <vPortFree+0xa8>)
 80149ba:	681b      	ldr	r3, [r3, #0]
 80149bc:	4013      	ands	r3, r2
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d109      	bne.n	80149d6 <vPortFree+0x42>
 80149c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149c6:	f383 8811 	msr	BASEPRI, r3
 80149ca:	f3bf 8f6f 	isb	sy
 80149ce:	f3bf 8f4f 	dsb	sy
 80149d2:	60fb      	str	r3, [r7, #12]
 80149d4:	e7fe      	b.n	80149d4 <vPortFree+0x40>
 80149d6:	693b      	ldr	r3, [r7, #16]
 80149d8:	681b      	ldr	r3, [r3, #0]
 80149da:	2b00      	cmp	r3, #0
 80149dc:	d009      	beq.n	80149f2 <vPortFree+0x5e>
 80149de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149e2:	f383 8811 	msr	BASEPRI, r3
 80149e6:	f3bf 8f6f 	isb	sy
 80149ea:	f3bf 8f4f 	dsb	sy
 80149ee:	60bb      	str	r3, [r7, #8]
 80149f0:	e7fe      	b.n	80149f0 <vPortFree+0x5c>
 80149f2:	693b      	ldr	r3, [r7, #16]
 80149f4:	685a      	ldr	r2, [r3, #4]
 80149f6:	4b11      	ldr	r3, [pc, #68]	; (8014a3c <vPortFree+0xa8>)
 80149f8:	681b      	ldr	r3, [r3, #0]
 80149fa:	4013      	ands	r3, r2
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d019      	beq.n	8014a34 <vPortFree+0xa0>
 8014a00:	693b      	ldr	r3, [r7, #16]
 8014a02:	681b      	ldr	r3, [r3, #0]
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d115      	bne.n	8014a34 <vPortFree+0xa0>
 8014a08:	693b      	ldr	r3, [r7, #16]
 8014a0a:	685a      	ldr	r2, [r3, #4]
 8014a0c:	4b0b      	ldr	r3, [pc, #44]	; (8014a3c <vPortFree+0xa8>)
 8014a0e:	681b      	ldr	r3, [r3, #0]
 8014a10:	43db      	mvns	r3, r3
 8014a12:	401a      	ands	r2, r3
 8014a14:	693b      	ldr	r3, [r7, #16]
 8014a16:	605a      	str	r2, [r3, #4]
 8014a18:	f7fe fd1a 	bl	8013450 <vTaskSuspendAll>
 8014a1c:	693b      	ldr	r3, [r7, #16]
 8014a1e:	685a      	ldr	r2, [r3, #4]
 8014a20:	4b07      	ldr	r3, [pc, #28]	; (8014a40 <vPortFree+0xac>)
 8014a22:	681b      	ldr	r3, [r3, #0]
 8014a24:	4413      	add	r3, r2
 8014a26:	4a06      	ldr	r2, [pc, #24]	; (8014a40 <vPortFree+0xac>)
 8014a28:	6013      	str	r3, [r2, #0]
 8014a2a:	6938      	ldr	r0, [r7, #16]
 8014a2c:	f000 f86c 	bl	8014b08 <prvInsertBlockIntoFreeList>
 8014a30:	f7fe fd1c 	bl	801346c <xTaskResumeAll>
 8014a34:	bf00      	nop
 8014a36:	3718      	adds	r7, #24
 8014a38:	46bd      	mov	sp, r7
 8014a3a:	bd80      	pop	{r7, pc}
 8014a3c:	200051a8 	.word	0x200051a8
 8014a40:	200051a0 	.word	0x200051a0

08014a44 <prvHeapInit>:
 8014a44:	b480      	push	{r7}
 8014a46:	b085      	sub	sp, #20
 8014a48:	af00      	add	r7, sp, #0
 8014a4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8014a4e:	60bb      	str	r3, [r7, #8]
 8014a50:	4b27      	ldr	r3, [pc, #156]	; (8014af0 <prvHeapInit+0xac>)
 8014a52:	60fb      	str	r3, [r7, #12]
 8014a54:	68fb      	ldr	r3, [r7, #12]
 8014a56:	f003 0307 	and.w	r3, r3, #7
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d00c      	beq.n	8014a78 <prvHeapInit+0x34>
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	3307      	adds	r3, #7
 8014a62:	60fb      	str	r3, [r7, #12]
 8014a64:	68fb      	ldr	r3, [r7, #12]
 8014a66:	f023 0307 	bic.w	r3, r3, #7
 8014a6a:	60fb      	str	r3, [r7, #12]
 8014a6c:	68ba      	ldr	r2, [r7, #8]
 8014a6e:	68fb      	ldr	r3, [r7, #12]
 8014a70:	1ad3      	subs	r3, r2, r3
 8014a72:	4a1f      	ldr	r2, [pc, #124]	; (8014af0 <prvHeapInit+0xac>)
 8014a74:	4413      	add	r3, r2
 8014a76:	60bb      	str	r3, [r7, #8]
 8014a78:	68fb      	ldr	r3, [r7, #12]
 8014a7a:	607b      	str	r3, [r7, #4]
 8014a7c:	4a1d      	ldr	r2, [pc, #116]	; (8014af4 <prvHeapInit+0xb0>)
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	6013      	str	r3, [r2, #0]
 8014a82:	4b1c      	ldr	r3, [pc, #112]	; (8014af4 <prvHeapInit+0xb0>)
 8014a84:	2200      	movs	r2, #0
 8014a86:	605a      	str	r2, [r3, #4]
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	68ba      	ldr	r2, [r7, #8]
 8014a8c:	4413      	add	r3, r2
 8014a8e:	60fb      	str	r3, [r7, #12]
 8014a90:	2208      	movs	r2, #8
 8014a92:	68fb      	ldr	r3, [r7, #12]
 8014a94:	1a9b      	subs	r3, r3, r2
 8014a96:	60fb      	str	r3, [r7, #12]
 8014a98:	68fb      	ldr	r3, [r7, #12]
 8014a9a:	f023 0307 	bic.w	r3, r3, #7
 8014a9e:	60fb      	str	r3, [r7, #12]
 8014aa0:	68fb      	ldr	r3, [r7, #12]
 8014aa2:	4a15      	ldr	r2, [pc, #84]	; (8014af8 <prvHeapInit+0xb4>)
 8014aa4:	6013      	str	r3, [r2, #0]
 8014aa6:	4b14      	ldr	r3, [pc, #80]	; (8014af8 <prvHeapInit+0xb4>)
 8014aa8:	681b      	ldr	r3, [r3, #0]
 8014aaa:	2200      	movs	r2, #0
 8014aac:	605a      	str	r2, [r3, #4]
 8014aae:	4b12      	ldr	r3, [pc, #72]	; (8014af8 <prvHeapInit+0xb4>)
 8014ab0:	681b      	ldr	r3, [r3, #0]
 8014ab2:	2200      	movs	r2, #0
 8014ab4:	601a      	str	r2, [r3, #0]
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	603b      	str	r3, [r7, #0]
 8014aba:	683b      	ldr	r3, [r7, #0]
 8014abc:	68fa      	ldr	r2, [r7, #12]
 8014abe:	1ad2      	subs	r2, r2, r3
 8014ac0:	683b      	ldr	r3, [r7, #0]
 8014ac2:	605a      	str	r2, [r3, #4]
 8014ac4:	4b0c      	ldr	r3, [pc, #48]	; (8014af8 <prvHeapInit+0xb4>)
 8014ac6:	681a      	ldr	r2, [r3, #0]
 8014ac8:	683b      	ldr	r3, [r7, #0]
 8014aca:	601a      	str	r2, [r3, #0]
 8014acc:	683b      	ldr	r3, [r7, #0]
 8014ace:	685b      	ldr	r3, [r3, #4]
 8014ad0:	4a0a      	ldr	r2, [pc, #40]	; (8014afc <prvHeapInit+0xb8>)
 8014ad2:	6013      	str	r3, [r2, #0]
 8014ad4:	683b      	ldr	r3, [r7, #0]
 8014ad6:	685b      	ldr	r3, [r3, #4]
 8014ad8:	4a09      	ldr	r2, [pc, #36]	; (8014b00 <prvHeapInit+0xbc>)
 8014ada:	6013      	str	r3, [r2, #0]
 8014adc:	4b09      	ldr	r3, [pc, #36]	; (8014b04 <prvHeapInit+0xc0>)
 8014ade:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014ae2:	601a      	str	r2, [r3, #0]
 8014ae4:	bf00      	nop
 8014ae6:	3714      	adds	r7, #20
 8014ae8:	46bd      	mov	sp, r7
 8014aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aee:	4770      	bx	lr
 8014af0:	20001594 	.word	0x20001594
 8014af4:	20005194 	.word	0x20005194
 8014af8:	2000519c 	.word	0x2000519c
 8014afc:	200051a4 	.word	0x200051a4
 8014b00:	200051a0 	.word	0x200051a0
 8014b04:	200051a8 	.word	0x200051a8

08014b08 <prvInsertBlockIntoFreeList>:
 8014b08:	b480      	push	{r7}
 8014b0a:	b085      	sub	sp, #20
 8014b0c:	af00      	add	r7, sp, #0
 8014b0e:	6078      	str	r0, [r7, #4]
 8014b10:	4b28      	ldr	r3, [pc, #160]	; (8014bb4 <prvInsertBlockIntoFreeList+0xac>)
 8014b12:	60fb      	str	r3, [r7, #12]
 8014b14:	e002      	b.n	8014b1c <prvInsertBlockIntoFreeList+0x14>
 8014b16:	68fb      	ldr	r3, [r7, #12]
 8014b18:	681b      	ldr	r3, [r3, #0]
 8014b1a:	60fb      	str	r3, [r7, #12]
 8014b1c:	68fb      	ldr	r3, [r7, #12]
 8014b1e:	681b      	ldr	r3, [r3, #0]
 8014b20:	687a      	ldr	r2, [r7, #4]
 8014b22:	429a      	cmp	r2, r3
 8014b24:	d8f7      	bhi.n	8014b16 <prvInsertBlockIntoFreeList+0xe>
 8014b26:	68fb      	ldr	r3, [r7, #12]
 8014b28:	60bb      	str	r3, [r7, #8]
 8014b2a:	68fb      	ldr	r3, [r7, #12]
 8014b2c:	685b      	ldr	r3, [r3, #4]
 8014b2e:	68ba      	ldr	r2, [r7, #8]
 8014b30:	4413      	add	r3, r2
 8014b32:	687a      	ldr	r2, [r7, #4]
 8014b34:	429a      	cmp	r2, r3
 8014b36:	d108      	bne.n	8014b4a <prvInsertBlockIntoFreeList+0x42>
 8014b38:	68fb      	ldr	r3, [r7, #12]
 8014b3a:	685a      	ldr	r2, [r3, #4]
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	685b      	ldr	r3, [r3, #4]
 8014b40:	441a      	add	r2, r3
 8014b42:	68fb      	ldr	r3, [r7, #12]
 8014b44:	605a      	str	r2, [r3, #4]
 8014b46:	68fb      	ldr	r3, [r7, #12]
 8014b48:	607b      	str	r3, [r7, #4]
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	60bb      	str	r3, [r7, #8]
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	685b      	ldr	r3, [r3, #4]
 8014b52:	68ba      	ldr	r2, [r7, #8]
 8014b54:	441a      	add	r2, r3
 8014b56:	68fb      	ldr	r3, [r7, #12]
 8014b58:	681b      	ldr	r3, [r3, #0]
 8014b5a:	429a      	cmp	r2, r3
 8014b5c:	d118      	bne.n	8014b90 <prvInsertBlockIntoFreeList+0x88>
 8014b5e:	68fb      	ldr	r3, [r7, #12]
 8014b60:	681a      	ldr	r2, [r3, #0]
 8014b62:	4b15      	ldr	r3, [pc, #84]	; (8014bb8 <prvInsertBlockIntoFreeList+0xb0>)
 8014b64:	681b      	ldr	r3, [r3, #0]
 8014b66:	429a      	cmp	r2, r3
 8014b68:	d00d      	beq.n	8014b86 <prvInsertBlockIntoFreeList+0x7e>
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	685a      	ldr	r2, [r3, #4]
 8014b6e:	68fb      	ldr	r3, [r7, #12]
 8014b70:	681b      	ldr	r3, [r3, #0]
 8014b72:	685b      	ldr	r3, [r3, #4]
 8014b74:	441a      	add	r2, r3
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	605a      	str	r2, [r3, #4]
 8014b7a:	68fb      	ldr	r3, [r7, #12]
 8014b7c:	681b      	ldr	r3, [r3, #0]
 8014b7e:	681a      	ldr	r2, [r3, #0]
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	601a      	str	r2, [r3, #0]
 8014b84:	e008      	b.n	8014b98 <prvInsertBlockIntoFreeList+0x90>
 8014b86:	4b0c      	ldr	r3, [pc, #48]	; (8014bb8 <prvInsertBlockIntoFreeList+0xb0>)
 8014b88:	681a      	ldr	r2, [r3, #0]
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	601a      	str	r2, [r3, #0]
 8014b8e:	e003      	b.n	8014b98 <prvInsertBlockIntoFreeList+0x90>
 8014b90:	68fb      	ldr	r3, [r7, #12]
 8014b92:	681a      	ldr	r2, [r3, #0]
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	601a      	str	r2, [r3, #0]
 8014b98:	68fa      	ldr	r2, [r7, #12]
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	429a      	cmp	r2, r3
 8014b9e:	d002      	beq.n	8014ba6 <prvInsertBlockIntoFreeList+0x9e>
 8014ba0:	68fb      	ldr	r3, [r7, #12]
 8014ba2:	687a      	ldr	r2, [r7, #4]
 8014ba4:	601a      	str	r2, [r3, #0]
 8014ba6:	bf00      	nop
 8014ba8:	3714      	adds	r7, #20
 8014baa:	46bd      	mov	sp, r7
 8014bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bb0:	4770      	bx	lr
 8014bb2:	bf00      	nop
 8014bb4:	20005194 	.word	0x20005194
 8014bb8:	2000519c 	.word	0x2000519c

08014bbc <MX_USB_DEVICE_Init>:
 8014bbc:	b580      	push	{r7, lr}
 8014bbe:	af00      	add	r7, sp, #0
 8014bc0:	2200      	movs	r2, #0
 8014bc2:	4912      	ldr	r1, [pc, #72]	; (8014c0c <MX_USB_DEVICE_Init+0x50>)
 8014bc4:	4812      	ldr	r0, [pc, #72]	; (8014c10 <MX_USB_DEVICE_Init+0x54>)
 8014bc6:	f7fb fe07 	bl	80107d8 <USBD_Init>
 8014bca:	4603      	mov	r3, r0
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	d001      	beq.n	8014bd4 <MX_USB_DEVICE_Init+0x18>
 8014bd0:	f7ee fd4a 	bl	8003668 <Error_Handler>
 8014bd4:	490f      	ldr	r1, [pc, #60]	; (8014c14 <MX_USB_DEVICE_Init+0x58>)
 8014bd6:	480e      	ldr	r0, [pc, #56]	; (8014c10 <MX_USB_DEVICE_Init+0x54>)
 8014bd8:	f7fb fe29 	bl	801082e <USBD_RegisterClass>
 8014bdc:	4603      	mov	r3, r0
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d001      	beq.n	8014be6 <MX_USB_DEVICE_Init+0x2a>
 8014be2:	f7ee fd41 	bl	8003668 <Error_Handler>
 8014be6:	490c      	ldr	r1, [pc, #48]	; (8014c18 <MX_USB_DEVICE_Init+0x5c>)
 8014be8:	4809      	ldr	r0, [pc, #36]	; (8014c10 <MX_USB_DEVICE_Init+0x54>)
 8014bea:	f7fb fd57 	bl	801069c <USBD_CDC_RegisterInterface>
 8014bee:	4603      	mov	r3, r0
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	d001      	beq.n	8014bf8 <MX_USB_DEVICE_Init+0x3c>
 8014bf4:	f7ee fd38 	bl	8003668 <Error_Handler>
 8014bf8:	4805      	ldr	r0, [pc, #20]	; (8014c10 <MX_USB_DEVICE_Init+0x54>)
 8014bfa:	f7fb fe32 	bl	8010862 <USBD_Start>
 8014bfe:	4603      	mov	r3, r0
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d001      	beq.n	8014c08 <MX_USB_DEVICE_Init+0x4c>
 8014c04:	f7ee fd30 	bl	8003668 <Error_Handler>
 8014c08:	bf00      	nop
 8014c0a:	bd80      	pop	{r7, pc}
 8014c0c:	20000dbc 	.word	0x20000dbc
 8014c10:	20006184 	.word	0x20006184
 8014c14:	20000ca4 	.word	0x20000ca4
 8014c18:	20000dac 	.word	0x20000dac

08014c1c <CDC_Init_FS>:
 8014c1c:	b580      	push	{r7, lr}
 8014c1e:	af00      	add	r7, sp, #0
 8014c20:	2200      	movs	r2, #0
 8014c22:	4905      	ldr	r1, [pc, #20]	; (8014c38 <CDC_Init_FS+0x1c>)
 8014c24:	4805      	ldr	r0, [pc, #20]	; (8014c3c <CDC_Init_FS+0x20>)
 8014c26:	f7fb fd50 	bl	80106ca <USBD_CDC_SetTxBuffer>
 8014c2a:	4905      	ldr	r1, [pc, #20]	; (8014c40 <CDC_Init_FS+0x24>)
 8014c2c:	4803      	ldr	r0, [pc, #12]	; (8014c3c <CDC_Init_FS+0x20>)
 8014c2e:	f7fb fd66 	bl	80106fe <USBD_CDC_SetRxBuffer>
 8014c32:	2300      	movs	r3, #0
 8014c34:	4618      	mov	r0, r3
 8014c36:	bd80      	pop	{r7, pc}
 8014c38:	20006620 	.word	0x20006620
 8014c3c:	20006184 	.word	0x20006184
 8014c40:	20006420 	.word	0x20006420

08014c44 <CDC_DeInit_FS>:
 8014c44:	b480      	push	{r7}
 8014c46:	af00      	add	r7, sp, #0
 8014c48:	2300      	movs	r3, #0
 8014c4a:	4618      	mov	r0, r3
 8014c4c:	46bd      	mov	sp, r7
 8014c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c52:	4770      	bx	lr

08014c54 <CDC_Control_FS>:
 8014c54:	b480      	push	{r7}
 8014c56:	b083      	sub	sp, #12
 8014c58:	af00      	add	r7, sp, #0
 8014c5a:	4603      	mov	r3, r0
 8014c5c:	6039      	str	r1, [r7, #0]
 8014c5e:	71fb      	strb	r3, [r7, #7]
 8014c60:	4613      	mov	r3, r2
 8014c62:	80bb      	strh	r3, [r7, #4]
 8014c64:	79fb      	ldrb	r3, [r7, #7]
 8014c66:	2b23      	cmp	r3, #35	; 0x23
 8014c68:	f200 808c 	bhi.w	8014d84 <CDC_Control_FS+0x130>
 8014c6c:	a201      	add	r2, pc, #4	; (adr r2, 8014c74 <CDC_Control_FS+0x20>)
 8014c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c72:	bf00      	nop
 8014c74:	08014d85 	.word	0x08014d85
 8014c78:	08014d85 	.word	0x08014d85
 8014c7c:	08014d85 	.word	0x08014d85
 8014c80:	08014d85 	.word	0x08014d85
 8014c84:	08014d85 	.word	0x08014d85
 8014c88:	08014d85 	.word	0x08014d85
 8014c8c:	08014d85 	.word	0x08014d85
 8014c90:	08014d85 	.word	0x08014d85
 8014c94:	08014d85 	.word	0x08014d85
 8014c98:	08014d85 	.word	0x08014d85
 8014c9c:	08014d85 	.word	0x08014d85
 8014ca0:	08014d85 	.word	0x08014d85
 8014ca4:	08014d85 	.word	0x08014d85
 8014ca8:	08014d85 	.word	0x08014d85
 8014cac:	08014d85 	.word	0x08014d85
 8014cb0:	08014d85 	.word	0x08014d85
 8014cb4:	08014d85 	.word	0x08014d85
 8014cb8:	08014d85 	.word	0x08014d85
 8014cbc:	08014d85 	.word	0x08014d85
 8014cc0:	08014d85 	.word	0x08014d85
 8014cc4:	08014d85 	.word	0x08014d85
 8014cc8:	08014d85 	.word	0x08014d85
 8014ccc:	08014d85 	.word	0x08014d85
 8014cd0:	08014d85 	.word	0x08014d85
 8014cd4:	08014d85 	.word	0x08014d85
 8014cd8:	08014d85 	.word	0x08014d85
 8014cdc:	08014d85 	.word	0x08014d85
 8014ce0:	08014d85 	.word	0x08014d85
 8014ce4:	08014d85 	.word	0x08014d85
 8014ce8:	08014d85 	.word	0x08014d85
 8014cec:	08014d85 	.word	0x08014d85
 8014cf0:	08014d85 	.word	0x08014d85
 8014cf4:	08014d05 	.word	0x08014d05
 8014cf8:	08014d3f 	.word	0x08014d3f
 8014cfc:	08014d85 	.word	0x08014d85
 8014d00:	08014d85 	.word	0x08014d85
 8014d04:	683b      	ldr	r3, [r7, #0]
 8014d06:	781a      	ldrb	r2, [r3, #0]
 8014d08:	4b22      	ldr	r3, [pc, #136]	; (8014d94 <CDC_Control_FS+0x140>)
 8014d0a:	701a      	strb	r2, [r3, #0]
 8014d0c:	683b      	ldr	r3, [r7, #0]
 8014d0e:	785a      	ldrb	r2, [r3, #1]
 8014d10:	4b20      	ldr	r3, [pc, #128]	; (8014d94 <CDC_Control_FS+0x140>)
 8014d12:	705a      	strb	r2, [r3, #1]
 8014d14:	683b      	ldr	r3, [r7, #0]
 8014d16:	789a      	ldrb	r2, [r3, #2]
 8014d18:	4b1e      	ldr	r3, [pc, #120]	; (8014d94 <CDC_Control_FS+0x140>)
 8014d1a:	709a      	strb	r2, [r3, #2]
 8014d1c:	683b      	ldr	r3, [r7, #0]
 8014d1e:	78da      	ldrb	r2, [r3, #3]
 8014d20:	4b1c      	ldr	r3, [pc, #112]	; (8014d94 <CDC_Control_FS+0x140>)
 8014d22:	70da      	strb	r2, [r3, #3]
 8014d24:	683b      	ldr	r3, [r7, #0]
 8014d26:	791a      	ldrb	r2, [r3, #4]
 8014d28:	4b1a      	ldr	r3, [pc, #104]	; (8014d94 <CDC_Control_FS+0x140>)
 8014d2a:	711a      	strb	r2, [r3, #4]
 8014d2c:	683b      	ldr	r3, [r7, #0]
 8014d2e:	795a      	ldrb	r2, [r3, #5]
 8014d30:	4b18      	ldr	r3, [pc, #96]	; (8014d94 <CDC_Control_FS+0x140>)
 8014d32:	715a      	strb	r2, [r3, #5]
 8014d34:	683b      	ldr	r3, [r7, #0]
 8014d36:	799a      	ldrb	r2, [r3, #6]
 8014d38:	4b16      	ldr	r3, [pc, #88]	; (8014d94 <CDC_Control_FS+0x140>)
 8014d3a:	719a      	strb	r2, [r3, #6]
 8014d3c:	e023      	b.n	8014d86 <CDC_Control_FS+0x132>
 8014d3e:	4b15      	ldr	r3, [pc, #84]	; (8014d94 <CDC_Control_FS+0x140>)
 8014d40:	781a      	ldrb	r2, [r3, #0]
 8014d42:	683b      	ldr	r3, [r7, #0]
 8014d44:	701a      	strb	r2, [r3, #0]
 8014d46:	683b      	ldr	r3, [r7, #0]
 8014d48:	3301      	adds	r3, #1
 8014d4a:	4a12      	ldr	r2, [pc, #72]	; (8014d94 <CDC_Control_FS+0x140>)
 8014d4c:	7852      	ldrb	r2, [r2, #1]
 8014d4e:	701a      	strb	r2, [r3, #0]
 8014d50:	683b      	ldr	r3, [r7, #0]
 8014d52:	3302      	adds	r3, #2
 8014d54:	4a0f      	ldr	r2, [pc, #60]	; (8014d94 <CDC_Control_FS+0x140>)
 8014d56:	7892      	ldrb	r2, [r2, #2]
 8014d58:	701a      	strb	r2, [r3, #0]
 8014d5a:	683b      	ldr	r3, [r7, #0]
 8014d5c:	3303      	adds	r3, #3
 8014d5e:	4a0d      	ldr	r2, [pc, #52]	; (8014d94 <CDC_Control_FS+0x140>)
 8014d60:	78d2      	ldrb	r2, [r2, #3]
 8014d62:	701a      	strb	r2, [r3, #0]
 8014d64:	683b      	ldr	r3, [r7, #0]
 8014d66:	3304      	adds	r3, #4
 8014d68:	4a0a      	ldr	r2, [pc, #40]	; (8014d94 <CDC_Control_FS+0x140>)
 8014d6a:	7912      	ldrb	r2, [r2, #4]
 8014d6c:	701a      	strb	r2, [r3, #0]
 8014d6e:	683b      	ldr	r3, [r7, #0]
 8014d70:	3305      	adds	r3, #5
 8014d72:	4a08      	ldr	r2, [pc, #32]	; (8014d94 <CDC_Control_FS+0x140>)
 8014d74:	7952      	ldrb	r2, [r2, #5]
 8014d76:	701a      	strb	r2, [r3, #0]
 8014d78:	683b      	ldr	r3, [r7, #0]
 8014d7a:	3306      	adds	r3, #6
 8014d7c:	4a05      	ldr	r2, [pc, #20]	; (8014d94 <CDC_Control_FS+0x140>)
 8014d7e:	7992      	ldrb	r2, [r2, #6]
 8014d80:	701a      	strb	r2, [r3, #0]
 8014d82:	e000      	b.n	8014d86 <CDC_Control_FS+0x132>
 8014d84:	bf00      	nop
 8014d86:	2300      	movs	r3, #0
 8014d88:	4618      	mov	r0, r3
 8014d8a:	370c      	adds	r7, #12
 8014d8c:	46bd      	mov	sp, r7
 8014d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d92:	4770      	bx	lr
 8014d94:	20006820 	.word	0x20006820

08014d98 <CDC_Receive_FS>:
 8014d98:	b580      	push	{r7, lr}
 8014d9a:	b082      	sub	sp, #8
 8014d9c:	af00      	add	r7, sp, #0
 8014d9e:	6078      	str	r0, [r7, #4]
 8014da0:	6039      	str	r1, [r7, #0]
 8014da2:	683b      	ldr	r3, [r7, #0]
 8014da4:	681b      	ldr	r3, [r3, #0]
 8014da6:	b29b      	uxth	r3, r3
 8014da8:	461a      	mov	r2, r3
 8014daa:	6879      	ldr	r1, [r7, #4]
 8014dac:	4807      	ldr	r0, [pc, #28]	; (8014dcc <CDC_Receive_FS+0x34>)
 8014dae:	f7ee fcd2 	bl	8003756 <ringBuff_PushArray>
 8014db2:	6879      	ldr	r1, [r7, #4]
 8014db4:	4806      	ldr	r0, [pc, #24]	; (8014dd0 <CDC_Receive_FS+0x38>)
 8014db6:	f7fb fca2 	bl	80106fe <USBD_CDC_SetRxBuffer>
 8014dba:	4805      	ldr	r0, [pc, #20]	; (8014dd0 <CDC_Receive_FS+0x38>)
 8014dbc:	f7fb fce2 	bl	8010784 <USBD_CDC_ReceivePacket>
 8014dc0:	2300      	movs	r3, #0
 8014dc2:	4618      	mov	r0, r3
 8014dc4:	3708      	adds	r7, #8
 8014dc6:	46bd      	mov	sp, r7
 8014dc8:	bd80      	pop	{r7, pc}
 8014dca:	bf00      	nop
 8014dcc:	20000028 	.word	0x20000028
 8014dd0:	20006184 	.word	0x20006184

08014dd4 <CDC_Transmit_FS>:
 8014dd4:	b580      	push	{r7, lr}
 8014dd6:	b084      	sub	sp, #16
 8014dd8:	af00      	add	r7, sp, #0
 8014dda:	6078      	str	r0, [r7, #4]
 8014ddc:	460b      	mov	r3, r1
 8014dde:	807b      	strh	r3, [r7, #2]
 8014de0:	2300      	movs	r3, #0
 8014de2:	73fb      	strb	r3, [r7, #15]
 8014de4:	4b0d      	ldr	r3, [pc, #52]	; (8014e1c <CDC_Transmit_FS+0x48>)
 8014de6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8014dea:	60bb      	str	r3, [r7, #8]
 8014dec:	68bb      	ldr	r3, [r7, #8]
 8014dee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014df2:	2b00      	cmp	r3, #0
 8014df4:	d001      	beq.n	8014dfa <CDC_Transmit_FS+0x26>
 8014df6:	2301      	movs	r3, #1
 8014df8:	e00b      	b.n	8014e12 <CDC_Transmit_FS+0x3e>
 8014dfa:	887b      	ldrh	r3, [r7, #2]
 8014dfc:	461a      	mov	r2, r3
 8014dfe:	6879      	ldr	r1, [r7, #4]
 8014e00:	4806      	ldr	r0, [pc, #24]	; (8014e1c <CDC_Transmit_FS+0x48>)
 8014e02:	f7fb fc62 	bl	80106ca <USBD_CDC_SetTxBuffer>
 8014e06:	4805      	ldr	r0, [pc, #20]	; (8014e1c <CDC_Transmit_FS+0x48>)
 8014e08:	f7fb fc8d 	bl	8010726 <USBD_CDC_TransmitPacket>
 8014e0c:	4603      	mov	r3, r0
 8014e0e:	73fb      	strb	r3, [r7, #15]
 8014e10:	7bfb      	ldrb	r3, [r7, #15]
 8014e12:	4618      	mov	r0, r3
 8014e14:	3710      	adds	r7, #16
 8014e16:	46bd      	mov	sp, r7
 8014e18:	bd80      	pop	{r7, pc}
 8014e1a:	bf00      	nop
 8014e1c:	20006184 	.word	0x20006184

08014e20 <USBD_FS_DeviceDescriptor>:
 8014e20:	b480      	push	{r7}
 8014e22:	b083      	sub	sp, #12
 8014e24:	af00      	add	r7, sp, #0
 8014e26:	4603      	mov	r3, r0
 8014e28:	6039      	str	r1, [r7, #0]
 8014e2a:	71fb      	strb	r3, [r7, #7]
 8014e2c:	683b      	ldr	r3, [r7, #0]
 8014e2e:	2212      	movs	r2, #18
 8014e30:	801a      	strh	r2, [r3, #0]
 8014e32:	4b03      	ldr	r3, [pc, #12]	; (8014e40 <USBD_FS_DeviceDescriptor+0x20>)
 8014e34:	4618      	mov	r0, r3
 8014e36:	370c      	adds	r7, #12
 8014e38:	46bd      	mov	sp, r7
 8014e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e3e:	4770      	bx	lr
 8014e40:	20000dd8 	.word	0x20000dd8

08014e44 <USBD_FS_LangIDStrDescriptor>:
 8014e44:	b480      	push	{r7}
 8014e46:	b083      	sub	sp, #12
 8014e48:	af00      	add	r7, sp, #0
 8014e4a:	4603      	mov	r3, r0
 8014e4c:	6039      	str	r1, [r7, #0]
 8014e4e:	71fb      	strb	r3, [r7, #7]
 8014e50:	683b      	ldr	r3, [r7, #0]
 8014e52:	2204      	movs	r2, #4
 8014e54:	801a      	strh	r2, [r3, #0]
 8014e56:	4b03      	ldr	r3, [pc, #12]	; (8014e64 <USBD_FS_LangIDStrDescriptor+0x20>)
 8014e58:	4618      	mov	r0, r3
 8014e5a:	370c      	adds	r7, #12
 8014e5c:	46bd      	mov	sp, r7
 8014e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e62:	4770      	bx	lr
 8014e64:	20000dec 	.word	0x20000dec

08014e68 <USBD_FS_ProductStrDescriptor>:
 8014e68:	b580      	push	{r7, lr}
 8014e6a:	b082      	sub	sp, #8
 8014e6c:	af00      	add	r7, sp, #0
 8014e6e:	4603      	mov	r3, r0
 8014e70:	6039      	str	r1, [r7, #0]
 8014e72:	71fb      	strb	r3, [r7, #7]
 8014e74:	79fb      	ldrb	r3, [r7, #7]
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d105      	bne.n	8014e86 <USBD_FS_ProductStrDescriptor+0x1e>
 8014e7a:	683a      	ldr	r2, [r7, #0]
 8014e7c:	4907      	ldr	r1, [pc, #28]	; (8014e9c <USBD_FS_ProductStrDescriptor+0x34>)
 8014e7e:	4808      	ldr	r0, [pc, #32]	; (8014ea0 <USBD_FS_ProductStrDescriptor+0x38>)
 8014e80:	f7fc fc26 	bl	80116d0 <USBD_GetString>
 8014e84:	e004      	b.n	8014e90 <USBD_FS_ProductStrDescriptor+0x28>
 8014e86:	683a      	ldr	r2, [r7, #0]
 8014e88:	4904      	ldr	r1, [pc, #16]	; (8014e9c <USBD_FS_ProductStrDescriptor+0x34>)
 8014e8a:	4805      	ldr	r0, [pc, #20]	; (8014ea0 <USBD_FS_ProductStrDescriptor+0x38>)
 8014e8c:	f7fc fc20 	bl	80116d0 <USBD_GetString>
 8014e90:	4b02      	ldr	r3, [pc, #8]	; (8014e9c <USBD_FS_ProductStrDescriptor+0x34>)
 8014e92:	4618      	mov	r0, r3
 8014e94:	3708      	adds	r7, #8
 8014e96:	46bd      	mov	sp, r7
 8014e98:	bd80      	pop	{r7, pc}
 8014e9a:	bf00      	nop
 8014e9c:	20006828 	.word	0x20006828
 8014ea0:	0801b0b0 	.word	0x0801b0b0

08014ea4 <USBD_FS_ManufacturerStrDescriptor>:
 8014ea4:	b580      	push	{r7, lr}
 8014ea6:	b082      	sub	sp, #8
 8014ea8:	af00      	add	r7, sp, #0
 8014eaa:	4603      	mov	r3, r0
 8014eac:	6039      	str	r1, [r7, #0]
 8014eae:	71fb      	strb	r3, [r7, #7]
 8014eb0:	683a      	ldr	r2, [r7, #0]
 8014eb2:	4904      	ldr	r1, [pc, #16]	; (8014ec4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8014eb4:	4804      	ldr	r0, [pc, #16]	; (8014ec8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8014eb6:	f7fc fc0b 	bl	80116d0 <USBD_GetString>
 8014eba:	4b02      	ldr	r3, [pc, #8]	; (8014ec4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8014ebc:	4618      	mov	r0, r3
 8014ebe:	3708      	adds	r7, #8
 8014ec0:	46bd      	mov	sp, r7
 8014ec2:	bd80      	pop	{r7, pc}
 8014ec4:	20006828 	.word	0x20006828
 8014ec8:	0801b0c8 	.word	0x0801b0c8

08014ecc <USBD_FS_SerialStrDescriptor>:
 8014ecc:	b580      	push	{r7, lr}
 8014ece:	b082      	sub	sp, #8
 8014ed0:	af00      	add	r7, sp, #0
 8014ed2:	4603      	mov	r3, r0
 8014ed4:	6039      	str	r1, [r7, #0]
 8014ed6:	71fb      	strb	r3, [r7, #7]
 8014ed8:	683b      	ldr	r3, [r7, #0]
 8014eda:	221a      	movs	r2, #26
 8014edc:	801a      	strh	r2, [r3, #0]
 8014ede:	f000 f843 	bl	8014f68 <Get_SerialNum>
 8014ee2:	4b02      	ldr	r3, [pc, #8]	; (8014eec <USBD_FS_SerialStrDescriptor+0x20>)
 8014ee4:	4618      	mov	r0, r3
 8014ee6:	3708      	adds	r7, #8
 8014ee8:	46bd      	mov	sp, r7
 8014eea:	bd80      	pop	{r7, pc}
 8014eec:	20000df0 	.word	0x20000df0

08014ef0 <USBD_FS_ConfigStrDescriptor>:
 8014ef0:	b580      	push	{r7, lr}
 8014ef2:	b082      	sub	sp, #8
 8014ef4:	af00      	add	r7, sp, #0
 8014ef6:	4603      	mov	r3, r0
 8014ef8:	6039      	str	r1, [r7, #0]
 8014efa:	71fb      	strb	r3, [r7, #7]
 8014efc:	79fb      	ldrb	r3, [r7, #7]
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d105      	bne.n	8014f0e <USBD_FS_ConfigStrDescriptor+0x1e>
 8014f02:	683a      	ldr	r2, [r7, #0]
 8014f04:	4907      	ldr	r1, [pc, #28]	; (8014f24 <USBD_FS_ConfigStrDescriptor+0x34>)
 8014f06:	4808      	ldr	r0, [pc, #32]	; (8014f28 <USBD_FS_ConfigStrDescriptor+0x38>)
 8014f08:	f7fc fbe2 	bl	80116d0 <USBD_GetString>
 8014f0c:	e004      	b.n	8014f18 <USBD_FS_ConfigStrDescriptor+0x28>
 8014f0e:	683a      	ldr	r2, [r7, #0]
 8014f10:	4904      	ldr	r1, [pc, #16]	; (8014f24 <USBD_FS_ConfigStrDescriptor+0x34>)
 8014f12:	4805      	ldr	r0, [pc, #20]	; (8014f28 <USBD_FS_ConfigStrDescriptor+0x38>)
 8014f14:	f7fc fbdc 	bl	80116d0 <USBD_GetString>
 8014f18:	4b02      	ldr	r3, [pc, #8]	; (8014f24 <USBD_FS_ConfigStrDescriptor+0x34>)
 8014f1a:	4618      	mov	r0, r3
 8014f1c:	3708      	adds	r7, #8
 8014f1e:	46bd      	mov	sp, r7
 8014f20:	bd80      	pop	{r7, pc}
 8014f22:	bf00      	nop
 8014f24:	20006828 	.word	0x20006828
 8014f28:	0801b0dc 	.word	0x0801b0dc

08014f2c <USBD_FS_InterfaceStrDescriptor>:
 8014f2c:	b580      	push	{r7, lr}
 8014f2e:	b082      	sub	sp, #8
 8014f30:	af00      	add	r7, sp, #0
 8014f32:	4603      	mov	r3, r0
 8014f34:	6039      	str	r1, [r7, #0]
 8014f36:	71fb      	strb	r3, [r7, #7]
 8014f38:	79fb      	ldrb	r3, [r7, #7]
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d105      	bne.n	8014f4a <USBD_FS_InterfaceStrDescriptor+0x1e>
 8014f3e:	683a      	ldr	r2, [r7, #0]
 8014f40:	4907      	ldr	r1, [pc, #28]	; (8014f60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014f42:	4808      	ldr	r0, [pc, #32]	; (8014f64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014f44:	f7fc fbc4 	bl	80116d0 <USBD_GetString>
 8014f48:	e004      	b.n	8014f54 <USBD_FS_InterfaceStrDescriptor+0x28>
 8014f4a:	683a      	ldr	r2, [r7, #0]
 8014f4c:	4904      	ldr	r1, [pc, #16]	; (8014f60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014f4e:	4805      	ldr	r0, [pc, #20]	; (8014f64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014f50:	f7fc fbbe 	bl	80116d0 <USBD_GetString>
 8014f54:	4b02      	ldr	r3, [pc, #8]	; (8014f60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014f56:	4618      	mov	r0, r3
 8014f58:	3708      	adds	r7, #8
 8014f5a:	46bd      	mov	sp, r7
 8014f5c:	bd80      	pop	{r7, pc}
 8014f5e:	bf00      	nop
 8014f60:	20006828 	.word	0x20006828
 8014f64:	0801b0e8 	.word	0x0801b0e8

08014f68 <Get_SerialNum>:
 8014f68:	b580      	push	{r7, lr}
 8014f6a:	b084      	sub	sp, #16
 8014f6c:	af00      	add	r7, sp, #0
 8014f6e:	4b0f      	ldr	r3, [pc, #60]	; (8014fac <Get_SerialNum+0x44>)
 8014f70:	681b      	ldr	r3, [r3, #0]
 8014f72:	60fb      	str	r3, [r7, #12]
 8014f74:	4b0e      	ldr	r3, [pc, #56]	; (8014fb0 <Get_SerialNum+0x48>)
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	60bb      	str	r3, [r7, #8]
 8014f7a:	4b0e      	ldr	r3, [pc, #56]	; (8014fb4 <Get_SerialNum+0x4c>)
 8014f7c:	681b      	ldr	r3, [r3, #0]
 8014f7e:	607b      	str	r3, [r7, #4]
 8014f80:	68fa      	ldr	r2, [r7, #12]
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	4413      	add	r3, r2
 8014f86:	60fb      	str	r3, [r7, #12]
 8014f88:	68fb      	ldr	r3, [r7, #12]
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d009      	beq.n	8014fa2 <Get_SerialNum+0x3a>
 8014f8e:	2208      	movs	r2, #8
 8014f90:	4909      	ldr	r1, [pc, #36]	; (8014fb8 <Get_SerialNum+0x50>)
 8014f92:	68f8      	ldr	r0, [r7, #12]
 8014f94:	f000 f814 	bl	8014fc0 <IntToUnicode>
 8014f98:	2204      	movs	r2, #4
 8014f9a:	4908      	ldr	r1, [pc, #32]	; (8014fbc <Get_SerialNum+0x54>)
 8014f9c:	68b8      	ldr	r0, [r7, #8]
 8014f9e:	f000 f80f 	bl	8014fc0 <IntToUnicode>
 8014fa2:	bf00      	nop
 8014fa4:	3710      	adds	r7, #16
 8014fa6:	46bd      	mov	sp, r7
 8014fa8:	bd80      	pop	{r7, pc}
 8014faa:	bf00      	nop
 8014fac:	1fff7a10 	.word	0x1fff7a10
 8014fb0:	1fff7a14 	.word	0x1fff7a14
 8014fb4:	1fff7a18 	.word	0x1fff7a18
 8014fb8:	20000df2 	.word	0x20000df2
 8014fbc:	20000e02 	.word	0x20000e02

08014fc0 <IntToUnicode>:
 8014fc0:	b480      	push	{r7}
 8014fc2:	b087      	sub	sp, #28
 8014fc4:	af00      	add	r7, sp, #0
 8014fc6:	60f8      	str	r0, [r7, #12]
 8014fc8:	60b9      	str	r1, [r7, #8]
 8014fca:	4613      	mov	r3, r2
 8014fcc:	71fb      	strb	r3, [r7, #7]
 8014fce:	2300      	movs	r3, #0
 8014fd0:	75fb      	strb	r3, [r7, #23]
 8014fd2:	2300      	movs	r3, #0
 8014fd4:	75fb      	strb	r3, [r7, #23]
 8014fd6:	e027      	b.n	8015028 <IntToUnicode+0x68>
 8014fd8:	68fb      	ldr	r3, [r7, #12]
 8014fda:	0f1b      	lsrs	r3, r3, #28
 8014fdc:	2b09      	cmp	r3, #9
 8014fde:	d80b      	bhi.n	8014ff8 <IntToUnicode+0x38>
 8014fe0:	68fb      	ldr	r3, [r7, #12]
 8014fe2:	0f1b      	lsrs	r3, r3, #28
 8014fe4:	b2da      	uxtb	r2, r3
 8014fe6:	7dfb      	ldrb	r3, [r7, #23]
 8014fe8:	005b      	lsls	r3, r3, #1
 8014fea:	4619      	mov	r1, r3
 8014fec:	68bb      	ldr	r3, [r7, #8]
 8014fee:	440b      	add	r3, r1
 8014ff0:	3230      	adds	r2, #48	; 0x30
 8014ff2:	b2d2      	uxtb	r2, r2
 8014ff4:	701a      	strb	r2, [r3, #0]
 8014ff6:	e00a      	b.n	801500e <IntToUnicode+0x4e>
 8014ff8:	68fb      	ldr	r3, [r7, #12]
 8014ffa:	0f1b      	lsrs	r3, r3, #28
 8014ffc:	b2da      	uxtb	r2, r3
 8014ffe:	7dfb      	ldrb	r3, [r7, #23]
 8015000:	005b      	lsls	r3, r3, #1
 8015002:	4619      	mov	r1, r3
 8015004:	68bb      	ldr	r3, [r7, #8]
 8015006:	440b      	add	r3, r1
 8015008:	3237      	adds	r2, #55	; 0x37
 801500a:	b2d2      	uxtb	r2, r2
 801500c:	701a      	strb	r2, [r3, #0]
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	011b      	lsls	r3, r3, #4
 8015012:	60fb      	str	r3, [r7, #12]
 8015014:	7dfb      	ldrb	r3, [r7, #23]
 8015016:	005b      	lsls	r3, r3, #1
 8015018:	3301      	adds	r3, #1
 801501a:	68ba      	ldr	r2, [r7, #8]
 801501c:	4413      	add	r3, r2
 801501e:	2200      	movs	r2, #0
 8015020:	701a      	strb	r2, [r3, #0]
 8015022:	7dfb      	ldrb	r3, [r7, #23]
 8015024:	3301      	adds	r3, #1
 8015026:	75fb      	strb	r3, [r7, #23]
 8015028:	7dfa      	ldrb	r2, [r7, #23]
 801502a:	79fb      	ldrb	r3, [r7, #7]
 801502c:	429a      	cmp	r2, r3
 801502e:	d3d3      	bcc.n	8014fd8 <IntToUnicode+0x18>
 8015030:	bf00      	nop
 8015032:	371c      	adds	r7, #28
 8015034:	46bd      	mov	sp, r7
 8015036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801503a:	4770      	bx	lr

0801503c <HAL_PCD_MspInit>:
 801503c:	b580      	push	{r7, lr}
 801503e:	b08a      	sub	sp, #40	; 0x28
 8015040:	af00      	add	r7, sp, #0
 8015042:	6078      	str	r0, [r7, #4]
 8015044:	f107 0314 	add.w	r3, r7, #20
 8015048:	2200      	movs	r2, #0
 801504a:	601a      	str	r2, [r3, #0]
 801504c:	605a      	str	r2, [r3, #4]
 801504e:	609a      	str	r2, [r3, #8]
 8015050:	60da      	str	r2, [r3, #12]
 8015052:	611a      	str	r2, [r3, #16]
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	681b      	ldr	r3, [r3, #0]
 8015058:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801505c:	d13a      	bne.n	80150d4 <HAL_PCD_MspInit+0x98>
 801505e:	2300      	movs	r3, #0
 8015060:	613b      	str	r3, [r7, #16]
 8015062:	4b1e      	ldr	r3, [pc, #120]	; (80150dc <HAL_PCD_MspInit+0xa0>)
 8015064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015066:	4a1d      	ldr	r2, [pc, #116]	; (80150dc <HAL_PCD_MspInit+0xa0>)
 8015068:	f043 0301 	orr.w	r3, r3, #1
 801506c:	6313      	str	r3, [r2, #48]	; 0x30
 801506e:	4b1b      	ldr	r3, [pc, #108]	; (80150dc <HAL_PCD_MspInit+0xa0>)
 8015070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015072:	f003 0301 	and.w	r3, r3, #1
 8015076:	613b      	str	r3, [r7, #16]
 8015078:	693b      	ldr	r3, [r7, #16]
 801507a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801507e:	617b      	str	r3, [r7, #20]
 8015080:	2302      	movs	r3, #2
 8015082:	61bb      	str	r3, [r7, #24]
 8015084:	2300      	movs	r3, #0
 8015086:	61fb      	str	r3, [r7, #28]
 8015088:	2303      	movs	r3, #3
 801508a:	623b      	str	r3, [r7, #32]
 801508c:	230a      	movs	r3, #10
 801508e:	627b      	str	r3, [r7, #36]	; 0x24
 8015090:	f107 0314 	add.w	r3, r7, #20
 8015094:	4619      	mov	r1, r3
 8015096:	4812      	ldr	r0, [pc, #72]	; (80150e0 <HAL_PCD_MspInit+0xa4>)
 8015098:	f7f6 fb38 	bl	800b70c <HAL_GPIO_Init>
 801509c:	4b0f      	ldr	r3, [pc, #60]	; (80150dc <HAL_PCD_MspInit+0xa0>)
 801509e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80150a0:	4a0e      	ldr	r2, [pc, #56]	; (80150dc <HAL_PCD_MspInit+0xa0>)
 80150a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80150a6:	6353      	str	r3, [r2, #52]	; 0x34
 80150a8:	2300      	movs	r3, #0
 80150aa:	60fb      	str	r3, [r7, #12]
 80150ac:	4b0b      	ldr	r3, [pc, #44]	; (80150dc <HAL_PCD_MspInit+0xa0>)
 80150ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80150b0:	4a0a      	ldr	r2, [pc, #40]	; (80150dc <HAL_PCD_MspInit+0xa0>)
 80150b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80150b6:	6453      	str	r3, [r2, #68]	; 0x44
 80150b8:	4b08      	ldr	r3, [pc, #32]	; (80150dc <HAL_PCD_MspInit+0xa0>)
 80150ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80150bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80150c0:	60fb      	str	r3, [r7, #12]
 80150c2:	68fb      	ldr	r3, [r7, #12]
 80150c4:	2200      	movs	r2, #0
 80150c6:	2105      	movs	r1, #5
 80150c8:	2043      	movs	r0, #67	; 0x43
 80150ca:	f7f5 ff57 	bl	800af7c <HAL_NVIC_SetPriority>
 80150ce:	2043      	movs	r0, #67	; 0x43
 80150d0:	f7f5 ff70 	bl	800afb4 <HAL_NVIC_EnableIRQ>
 80150d4:	bf00      	nop
 80150d6:	3728      	adds	r7, #40	; 0x28
 80150d8:	46bd      	mov	sp, r7
 80150da:	bd80      	pop	{r7, pc}
 80150dc:	40023800 	.word	0x40023800
 80150e0:	40020000 	.word	0x40020000

080150e4 <HAL_PCD_SetupStageCallback>:
 80150e4:	b580      	push	{r7, lr}
 80150e6:	b082      	sub	sp, #8
 80150e8:	af00      	add	r7, sp, #0
 80150ea:	6078      	str	r0, [r7, #4]
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80150f8:	4619      	mov	r1, r3
 80150fa:	4610      	mov	r0, r2
 80150fc:	f7fb fbfa 	bl	80108f4 <USBD_LL_SetupStage>
 8015100:	bf00      	nop
 8015102:	3708      	adds	r7, #8
 8015104:	46bd      	mov	sp, r7
 8015106:	bd80      	pop	{r7, pc}

08015108 <HAL_PCD_DataOutStageCallback>:
 8015108:	b580      	push	{r7, lr}
 801510a:	b082      	sub	sp, #8
 801510c:	af00      	add	r7, sp, #0
 801510e:	6078      	str	r0, [r7, #4]
 8015110:	460b      	mov	r3, r1
 8015112:	70fb      	strb	r3, [r7, #3]
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801511a:	78fa      	ldrb	r2, [r7, #3]
 801511c:	6879      	ldr	r1, [r7, #4]
 801511e:	4613      	mov	r3, r2
 8015120:	00db      	lsls	r3, r3, #3
 8015122:	1a9b      	subs	r3, r3, r2
 8015124:	009b      	lsls	r3, r3, #2
 8015126:	440b      	add	r3, r1
 8015128:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801512c:	681a      	ldr	r2, [r3, #0]
 801512e:	78fb      	ldrb	r3, [r7, #3]
 8015130:	4619      	mov	r1, r3
 8015132:	f7fb fc2a 	bl	801098a <USBD_LL_DataOutStage>
 8015136:	bf00      	nop
 8015138:	3708      	adds	r7, #8
 801513a:	46bd      	mov	sp, r7
 801513c:	bd80      	pop	{r7, pc}

0801513e <HAL_PCD_DataInStageCallback>:
 801513e:	b580      	push	{r7, lr}
 8015140:	b082      	sub	sp, #8
 8015142:	af00      	add	r7, sp, #0
 8015144:	6078      	str	r0, [r7, #4]
 8015146:	460b      	mov	r3, r1
 8015148:	70fb      	strb	r3, [r7, #3]
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8015150:	78fa      	ldrb	r2, [r7, #3]
 8015152:	6879      	ldr	r1, [r7, #4]
 8015154:	4613      	mov	r3, r2
 8015156:	00db      	lsls	r3, r3, #3
 8015158:	1a9b      	subs	r3, r3, r2
 801515a:	009b      	lsls	r3, r3, #2
 801515c:	440b      	add	r3, r1
 801515e:	3348      	adds	r3, #72	; 0x48
 8015160:	681a      	ldr	r2, [r3, #0]
 8015162:	78fb      	ldrb	r3, [r7, #3]
 8015164:	4619      	mov	r1, r3
 8015166:	f7fb fc81 	bl	8010a6c <USBD_LL_DataInStage>
 801516a:	bf00      	nop
 801516c:	3708      	adds	r7, #8
 801516e:	46bd      	mov	sp, r7
 8015170:	bd80      	pop	{r7, pc}

08015172 <HAL_PCD_SOFCallback>:
 8015172:	b580      	push	{r7, lr}
 8015174:	b082      	sub	sp, #8
 8015176:	af00      	add	r7, sp, #0
 8015178:	6078      	str	r0, [r7, #4]
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015180:	4618      	mov	r0, r3
 8015182:	f7fb fd8f 	bl	8010ca4 <USBD_LL_SOF>
 8015186:	bf00      	nop
 8015188:	3708      	adds	r7, #8
 801518a:	46bd      	mov	sp, r7
 801518c:	bd80      	pop	{r7, pc}

0801518e <HAL_PCD_ResetCallback>:
 801518e:	b580      	push	{r7, lr}
 8015190:	b084      	sub	sp, #16
 8015192:	af00      	add	r7, sp, #0
 8015194:	6078      	str	r0, [r7, #4]
 8015196:	2301      	movs	r3, #1
 8015198:	73fb      	strb	r3, [r7, #15]
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	68db      	ldr	r3, [r3, #12]
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d102      	bne.n	80151a8 <HAL_PCD_ResetCallback+0x1a>
 80151a2:	2300      	movs	r3, #0
 80151a4:	73fb      	strb	r3, [r7, #15]
 80151a6:	e008      	b.n	80151ba <HAL_PCD_ResetCallback+0x2c>
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	68db      	ldr	r3, [r3, #12]
 80151ac:	2b02      	cmp	r3, #2
 80151ae:	d102      	bne.n	80151b6 <HAL_PCD_ResetCallback+0x28>
 80151b0:	2301      	movs	r3, #1
 80151b2:	73fb      	strb	r3, [r7, #15]
 80151b4:	e001      	b.n	80151ba <HAL_PCD_ResetCallback+0x2c>
 80151b6:	f7ee fa57 	bl	8003668 <Error_Handler>
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80151c0:	7bfa      	ldrb	r2, [r7, #15]
 80151c2:	4611      	mov	r1, r2
 80151c4:	4618      	mov	r0, r3
 80151c6:	f7fb fd37 	bl	8010c38 <USBD_LL_SetSpeed>
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80151d0:	4618      	mov	r0, r3
 80151d2:	f7fb fcf0 	bl	8010bb6 <USBD_LL_Reset>
 80151d6:	bf00      	nop
 80151d8:	3710      	adds	r7, #16
 80151da:	46bd      	mov	sp, r7
 80151dc:	bd80      	pop	{r7, pc}
	...

080151e0 <HAL_PCD_SuspendCallback>:
 80151e0:	b580      	push	{r7, lr}
 80151e2:	b082      	sub	sp, #8
 80151e4:	af00      	add	r7, sp, #0
 80151e6:	6078      	str	r0, [r7, #4]
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80151ee:	4618      	mov	r0, r3
 80151f0:	f7fb fd32 	bl	8010c58 <USBD_LL_Suspend>
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	681b      	ldr	r3, [r3, #0]
 80151f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80151fc:	681b      	ldr	r3, [r3, #0]
 80151fe:	687a      	ldr	r2, [r7, #4]
 8015200:	6812      	ldr	r2, [r2, #0]
 8015202:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015206:	f043 0301 	orr.w	r3, r3, #1
 801520a:	6013      	str	r3, [r2, #0]
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	6a1b      	ldr	r3, [r3, #32]
 8015210:	2b00      	cmp	r3, #0
 8015212:	d005      	beq.n	8015220 <HAL_PCD_SuspendCallback+0x40>
 8015214:	4b04      	ldr	r3, [pc, #16]	; (8015228 <HAL_PCD_SuspendCallback+0x48>)
 8015216:	691b      	ldr	r3, [r3, #16]
 8015218:	4a03      	ldr	r2, [pc, #12]	; (8015228 <HAL_PCD_SuspendCallback+0x48>)
 801521a:	f043 0306 	orr.w	r3, r3, #6
 801521e:	6113      	str	r3, [r2, #16]
 8015220:	bf00      	nop
 8015222:	3708      	adds	r7, #8
 8015224:	46bd      	mov	sp, r7
 8015226:	bd80      	pop	{r7, pc}
 8015228:	e000ed00 	.word	0xe000ed00

0801522c <HAL_PCD_ResumeCallback>:
 801522c:	b580      	push	{r7, lr}
 801522e:	b082      	sub	sp, #8
 8015230:	af00      	add	r7, sp, #0
 8015232:	6078      	str	r0, [r7, #4]
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801523a:	4618      	mov	r0, r3
 801523c:	f7fb fd21 	bl	8010c82 <USBD_LL_Resume>
 8015240:	bf00      	nop
 8015242:	3708      	adds	r7, #8
 8015244:	46bd      	mov	sp, r7
 8015246:	bd80      	pop	{r7, pc}

08015248 <HAL_PCD_ISOOUTIncompleteCallback>:
 8015248:	b580      	push	{r7, lr}
 801524a:	b082      	sub	sp, #8
 801524c:	af00      	add	r7, sp, #0
 801524e:	6078      	str	r0, [r7, #4]
 8015250:	460b      	mov	r3, r1
 8015252:	70fb      	strb	r3, [r7, #3]
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801525a:	78fa      	ldrb	r2, [r7, #3]
 801525c:	4611      	mov	r1, r2
 801525e:	4618      	mov	r0, r3
 8015260:	f7fb fd47 	bl	8010cf2 <USBD_LL_IsoOUTIncomplete>
 8015264:	bf00      	nop
 8015266:	3708      	adds	r7, #8
 8015268:	46bd      	mov	sp, r7
 801526a:	bd80      	pop	{r7, pc}

0801526c <HAL_PCD_ISOINIncompleteCallback>:
 801526c:	b580      	push	{r7, lr}
 801526e:	b082      	sub	sp, #8
 8015270:	af00      	add	r7, sp, #0
 8015272:	6078      	str	r0, [r7, #4]
 8015274:	460b      	mov	r3, r1
 8015276:	70fb      	strb	r3, [r7, #3]
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801527e:	78fa      	ldrb	r2, [r7, #3]
 8015280:	4611      	mov	r1, r2
 8015282:	4618      	mov	r0, r3
 8015284:	f7fb fd28 	bl	8010cd8 <USBD_LL_IsoINIncomplete>
 8015288:	bf00      	nop
 801528a:	3708      	adds	r7, #8
 801528c:	46bd      	mov	sp, r7
 801528e:	bd80      	pop	{r7, pc}

08015290 <HAL_PCD_ConnectCallback>:
 8015290:	b580      	push	{r7, lr}
 8015292:	b082      	sub	sp, #8
 8015294:	af00      	add	r7, sp, #0
 8015296:	6078      	str	r0, [r7, #4]
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801529e:	4618      	mov	r0, r3
 80152a0:	f7fb fd34 	bl	8010d0c <USBD_LL_DevConnected>
 80152a4:	bf00      	nop
 80152a6:	3708      	adds	r7, #8
 80152a8:	46bd      	mov	sp, r7
 80152aa:	bd80      	pop	{r7, pc}

080152ac <HAL_PCD_DisconnectCallback>:
 80152ac:	b580      	push	{r7, lr}
 80152ae:	b082      	sub	sp, #8
 80152b0:	af00      	add	r7, sp, #0
 80152b2:	6078      	str	r0, [r7, #4]
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80152ba:	4618      	mov	r0, r3
 80152bc:	f7fb fd31 	bl	8010d22 <USBD_LL_DevDisconnected>
 80152c0:	bf00      	nop
 80152c2:	3708      	adds	r7, #8
 80152c4:	46bd      	mov	sp, r7
 80152c6:	bd80      	pop	{r7, pc}

080152c8 <USBD_LL_Init>:
 80152c8:	b580      	push	{r7, lr}
 80152ca:	b082      	sub	sp, #8
 80152cc:	af00      	add	r7, sp, #0
 80152ce:	6078      	str	r0, [r7, #4]
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	781b      	ldrb	r3, [r3, #0]
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d13c      	bne.n	8015352 <USBD_LL_Init+0x8a>
 80152d8:	4a20      	ldr	r2, [pc, #128]	; (801535c <USBD_LL_Init+0x94>)
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	4a1e      	ldr	r2, [pc, #120]	; (801535c <USBD_LL_Init+0x94>)
 80152e4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
 80152e8:	4b1c      	ldr	r3, [pc, #112]	; (801535c <USBD_LL_Init+0x94>)
 80152ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80152ee:	601a      	str	r2, [r3, #0]
 80152f0:	4b1a      	ldr	r3, [pc, #104]	; (801535c <USBD_LL_Init+0x94>)
 80152f2:	2204      	movs	r2, #4
 80152f4:	605a      	str	r2, [r3, #4]
 80152f6:	4b19      	ldr	r3, [pc, #100]	; (801535c <USBD_LL_Init+0x94>)
 80152f8:	2202      	movs	r2, #2
 80152fa:	60da      	str	r2, [r3, #12]
 80152fc:	4b17      	ldr	r3, [pc, #92]	; (801535c <USBD_LL_Init+0x94>)
 80152fe:	2200      	movs	r2, #0
 8015300:	611a      	str	r2, [r3, #16]
 8015302:	4b16      	ldr	r3, [pc, #88]	; (801535c <USBD_LL_Init+0x94>)
 8015304:	2202      	movs	r2, #2
 8015306:	619a      	str	r2, [r3, #24]
 8015308:	4b14      	ldr	r3, [pc, #80]	; (801535c <USBD_LL_Init+0x94>)
 801530a:	2200      	movs	r2, #0
 801530c:	61da      	str	r2, [r3, #28]
 801530e:	4b13      	ldr	r3, [pc, #76]	; (801535c <USBD_LL_Init+0x94>)
 8015310:	2200      	movs	r2, #0
 8015312:	621a      	str	r2, [r3, #32]
 8015314:	4b11      	ldr	r3, [pc, #68]	; (801535c <USBD_LL_Init+0x94>)
 8015316:	2200      	movs	r2, #0
 8015318:	625a      	str	r2, [r3, #36]	; 0x24
 801531a:	4b10      	ldr	r3, [pc, #64]	; (801535c <USBD_LL_Init+0x94>)
 801531c:	2200      	movs	r2, #0
 801531e:	62da      	str	r2, [r3, #44]	; 0x2c
 8015320:	4b0e      	ldr	r3, [pc, #56]	; (801535c <USBD_LL_Init+0x94>)
 8015322:	2200      	movs	r2, #0
 8015324:	631a      	str	r2, [r3, #48]	; 0x30
 8015326:	480d      	ldr	r0, [pc, #52]	; (801535c <USBD_LL_Init+0x94>)
 8015328:	f7f6 fbfa 	bl	800bb20 <HAL_PCD_Init>
 801532c:	4603      	mov	r3, r0
 801532e:	2b00      	cmp	r3, #0
 8015330:	d001      	beq.n	8015336 <USBD_LL_Init+0x6e>
 8015332:	f7ee f999 	bl	8003668 <Error_Handler>
 8015336:	2180      	movs	r1, #128	; 0x80
 8015338:	4808      	ldr	r0, [pc, #32]	; (801535c <USBD_LL_Init+0x94>)
 801533a:	f7f7 fd5e 	bl	800cdfa <HAL_PCDEx_SetRxFiFo>
 801533e:	2240      	movs	r2, #64	; 0x40
 8015340:	2100      	movs	r1, #0
 8015342:	4806      	ldr	r0, [pc, #24]	; (801535c <USBD_LL_Init+0x94>)
 8015344:	f7f7 fd12 	bl	800cd6c <HAL_PCDEx_SetTxFiFo>
 8015348:	2280      	movs	r2, #128	; 0x80
 801534a:	2101      	movs	r1, #1
 801534c:	4803      	ldr	r0, [pc, #12]	; (801535c <USBD_LL_Init+0x94>)
 801534e:	f7f7 fd0d 	bl	800cd6c <HAL_PCDEx_SetTxFiFo>
 8015352:	2300      	movs	r3, #0
 8015354:	4618      	mov	r0, r3
 8015356:	3708      	adds	r7, #8
 8015358:	46bd      	mov	sp, r7
 801535a:	bd80      	pop	{r7, pc}
 801535c:	20006a28 	.word	0x20006a28

08015360 <USBD_LL_Start>:
 8015360:	b580      	push	{r7, lr}
 8015362:	b084      	sub	sp, #16
 8015364:	af00      	add	r7, sp, #0
 8015366:	6078      	str	r0, [r7, #4]
 8015368:	2300      	movs	r3, #0
 801536a:	73fb      	strb	r3, [r7, #15]
 801536c:	2300      	movs	r3, #0
 801536e:	73bb      	strb	r3, [r7, #14]
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8015376:	4618      	mov	r0, r3
 8015378:	f7f6 fcef 	bl	800bd5a <HAL_PCD_Start>
 801537c:	4603      	mov	r3, r0
 801537e:	73fb      	strb	r3, [r7, #15]
 8015380:	7bfb      	ldrb	r3, [r7, #15]
 8015382:	4618      	mov	r0, r3
 8015384:	f000 f92e 	bl	80155e4 <USBD_Get_USB_Status>
 8015388:	4603      	mov	r3, r0
 801538a:	73bb      	strb	r3, [r7, #14]
 801538c:	7bbb      	ldrb	r3, [r7, #14]
 801538e:	4618      	mov	r0, r3
 8015390:	3710      	adds	r7, #16
 8015392:	46bd      	mov	sp, r7
 8015394:	bd80      	pop	{r7, pc}

08015396 <USBD_LL_OpenEP>:
 8015396:	b580      	push	{r7, lr}
 8015398:	b084      	sub	sp, #16
 801539a:	af00      	add	r7, sp, #0
 801539c:	6078      	str	r0, [r7, #4]
 801539e:	4608      	mov	r0, r1
 80153a0:	4611      	mov	r1, r2
 80153a2:	461a      	mov	r2, r3
 80153a4:	4603      	mov	r3, r0
 80153a6:	70fb      	strb	r3, [r7, #3]
 80153a8:	460b      	mov	r3, r1
 80153aa:	70bb      	strb	r3, [r7, #2]
 80153ac:	4613      	mov	r3, r2
 80153ae:	803b      	strh	r3, [r7, #0]
 80153b0:	2300      	movs	r3, #0
 80153b2:	73fb      	strb	r3, [r7, #15]
 80153b4:	2300      	movs	r3, #0
 80153b6:	73bb      	strb	r3, [r7, #14]
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80153be:	78bb      	ldrb	r3, [r7, #2]
 80153c0:	883a      	ldrh	r2, [r7, #0]
 80153c2:	78f9      	ldrb	r1, [r7, #3]
 80153c4:	f7f7 f8c4 	bl	800c550 <HAL_PCD_EP_Open>
 80153c8:	4603      	mov	r3, r0
 80153ca:	73fb      	strb	r3, [r7, #15]
 80153cc:	7bfb      	ldrb	r3, [r7, #15]
 80153ce:	4618      	mov	r0, r3
 80153d0:	f000 f908 	bl	80155e4 <USBD_Get_USB_Status>
 80153d4:	4603      	mov	r3, r0
 80153d6:	73bb      	strb	r3, [r7, #14]
 80153d8:	7bbb      	ldrb	r3, [r7, #14]
 80153da:	4618      	mov	r0, r3
 80153dc:	3710      	adds	r7, #16
 80153de:	46bd      	mov	sp, r7
 80153e0:	bd80      	pop	{r7, pc}

080153e2 <USBD_LL_CloseEP>:
 80153e2:	b580      	push	{r7, lr}
 80153e4:	b084      	sub	sp, #16
 80153e6:	af00      	add	r7, sp, #0
 80153e8:	6078      	str	r0, [r7, #4]
 80153ea:	460b      	mov	r3, r1
 80153ec:	70fb      	strb	r3, [r7, #3]
 80153ee:	2300      	movs	r3, #0
 80153f0:	73fb      	strb	r3, [r7, #15]
 80153f2:	2300      	movs	r3, #0
 80153f4:	73bb      	strb	r3, [r7, #14]
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80153fc:	78fa      	ldrb	r2, [r7, #3]
 80153fe:	4611      	mov	r1, r2
 8015400:	4618      	mov	r0, r3
 8015402:	f7f7 f90d 	bl	800c620 <HAL_PCD_EP_Close>
 8015406:	4603      	mov	r3, r0
 8015408:	73fb      	strb	r3, [r7, #15]
 801540a:	7bfb      	ldrb	r3, [r7, #15]
 801540c:	4618      	mov	r0, r3
 801540e:	f000 f8e9 	bl	80155e4 <USBD_Get_USB_Status>
 8015412:	4603      	mov	r3, r0
 8015414:	73bb      	strb	r3, [r7, #14]
 8015416:	7bbb      	ldrb	r3, [r7, #14]
 8015418:	4618      	mov	r0, r3
 801541a:	3710      	adds	r7, #16
 801541c:	46bd      	mov	sp, r7
 801541e:	bd80      	pop	{r7, pc}

08015420 <USBD_LL_StallEP>:
 8015420:	b580      	push	{r7, lr}
 8015422:	b084      	sub	sp, #16
 8015424:	af00      	add	r7, sp, #0
 8015426:	6078      	str	r0, [r7, #4]
 8015428:	460b      	mov	r3, r1
 801542a:	70fb      	strb	r3, [r7, #3]
 801542c:	2300      	movs	r3, #0
 801542e:	73fb      	strb	r3, [r7, #15]
 8015430:	2300      	movs	r3, #0
 8015432:	73bb      	strb	r3, [r7, #14]
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801543a:	78fa      	ldrb	r2, [r7, #3]
 801543c:	4611      	mov	r1, r2
 801543e:	4618      	mov	r0, r3
 8015440:	f7f7 f9e5 	bl	800c80e <HAL_PCD_EP_SetStall>
 8015444:	4603      	mov	r3, r0
 8015446:	73fb      	strb	r3, [r7, #15]
 8015448:	7bfb      	ldrb	r3, [r7, #15]
 801544a:	4618      	mov	r0, r3
 801544c:	f000 f8ca 	bl	80155e4 <USBD_Get_USB_Status>
 8015450:	4603      	mov	r3, r0
 8015452:	73bb      	strb	r3, [r7, #14]
 8015454:	7bbb      	ldrb	r3, [r7, #14]
 8015456:	4618      	mov	r0, r3
 8015458:	3710      	adds	r7, #16
 801545a:	46bd      	mov	sp, r7
 801545c:	bd80      	pop	{r7, pc}

0801545e <USBD_LL_ClearStallEP>:
 801545e:	b580      	push	{r7, lr}
 8015460:	b084      	sub	sp, #16
 8015462:	af00      	add	r7, sp, #0
 8015464:	6078      	str	r0, [r7, #4]
 8015466:	460b      	mov	r3, r1
 8015468:	70fb      	strb	r3, [r7, #3]
 801546a:	2300      	movs	r3, #0
 801546c:	73fb      	strb	r3, [r7, #15]
 801546e:	2300      	movs	r3, #0
 8015470:	73bb      	strb	r3, [r7, #14]
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8015478:	78fa      	ldrb	r2, [r7, #3]
 801547a:	4611      	mov	r1, r2
 801547c:	4618      	mov	r0, r3
 801547e:	f7f7 fa2a 	bl	800c8d6 <HAL_PCD_EP_ClrStall>
 8015482:	4603      	mov	r3, r0
 8015484:	73fb      	strb	r3, [r7, #15]
 8015486:	7bfb      	ldrb	r3, [r7, #15]
 8015488:	4618      	mov	r0, r3
 801548a:	f000 f8ab 	bl	80155e4 <USBD_Get_USB_Status>
 801548e:	4603      	mov	r3, r0
 8015490:	73bb      	strb	r3, [r7, #14]
 8015492:	7bbb      	ldrb	r3, [r7, #14]
 8015494:	4618      	mov	r0, r3
 8015496:	3710      	adds	r7, #16
 8015498:	46bd      	mov	sp, r7
 801549a:	bd80      	pop	{r7, pc}

0801549c <USBD_LL_IsStallEP>:
 801549c:	b480      	push	{r7}
 801549e:	b085      	sub	sp, #20
 80154a0:	af00      	add	r7, sp, #0
 80154a2:	6078      	str	r0, [r7, #4]
 80154a4:	460b      	mov	r3, r1
 80154a6:	70fb      	strb	r3, [r7, #3]
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80154ae:	60fb      	str	r3, [r7, #12]
 80154b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	da0b      	bge.n	80154d0 <USBD_LL_IsStallEP+0x34>
 80154b8:	78fb      	ldrb	r3, [r7, #3]
 80154ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80154be:	68f9      	ldr	r1, [r7, #12]
 80154c0:	4613      	mov	r3, r2
 80154c2:	00db      	lsls	r3, r3, #3
 80154c4:	1a9b      	subs	r3, r3, r2
 80154c6:	009b      	lsls	r3, r3, #2
 80154c8:	440b      	add	r3, r1
 80154ca:	333e      	adds	r3, #62	; 0x3e
 80154cc:	781b      	ldrb	r3, [r3, #0]
 80154ce:	e00b      	b.n	80154e8 <USBD_LL_IsStallEP+0x4c>
 80154d0:	78fb      	ldrb	r3, [r7, #3]
 80154d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80154d6:	68f9      	ldr	r1, [r7, #12]
 80154d8:	4613      	mov	r3, r2
 80154da:	00db      	lsls	r3, r3, #3
 80154dc:	1a9b      	subs	r3, r3, r2
 80154de:	009b      	lsls	r3, r3, #2
 80154e0:	440b      	add	r3, r1
 80154e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80154e6:	781b      	ldrb	r3, [r3, #0]
 80154e8:	4618      	mov	r0, r3
 80154ea:	3714      	adds	r7, #20
 80154ec:	46bd      	mov	sp, r7
 80154ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154f2:	4770      	bx	lr

080154f4 <USBD_LL_SetUSBAddress>:
 80154f4:	b580      	push	{r7, lr}
 80154f6:	b084      	sub	sp, #16
 80154f8:	af00      	add	r7, sp, #0
 80154fa:	6078      	str	r0, [r7, #4]
 80154fc:	460b      	mov	r3, r1
 80154fe:	70fb      	strb	r3, [r7, #3]
 8015500:	2300      	movs	r3, #0
 8015502:	73fb      	strb	r3, [r7, #15]
 8015504:	2300      	movs	r3, #0
 8015506:	73bb      	strb	r3, [r7, #14]
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801550e:	78fa      	ldrb	r2, [r7, #3]
 8015510:	4611      	mov	r1, r2
 8015512:	4618      	mov	r0, r3
 8015514:	f7f6 fff7 	bl	800c506 <HAL_PCD_SetAddress>
 8015518:	4603      	mov	r3, r0
 801551a:	73fb      	strb	r3, [r7, #15]
 801551c:	7bfb      	ldrb	r3, [r7, #15]
 801551e:	4618      	mov	r0, r3
 8015520:	f000 f860 	bl	80155e4 <USBD_Get_USB_Status>
 8015524:	4603      	mov	r3, r0
 8015526:	73bb      	strb	r3, [r7, #14]
 8015528:	7bbb      	ldrb	r3, [r7, #14]
 801552a:	4618      	mov	r0, r3
 801552c:	3710      	adds	r7, #16
 801552e:	46bd      	mov	sp, r7
 8015530:	bd80      	pop	{r7, pc}

08015532 <USBD_LL_Transmit>:
 8015532:	b580      	push	{r7, lr}
 8015534:	b086      	sub	sp, #24
 8015536:	af00      	add	r7, sp, #0
 8015538:	60f8      	str	r0, [r7, #12]
 801553a:	607a      	str	r2, [r7, #4]
 801553c:	461a      	mov	r2, r3
 801553e:	460b      	mov	r3, r1
 8015540:	72fb      	strb	r3, [r7, #11]
 8015542:	4613      	mov	r3, r2
 8015544:	813b      	strh	r3, [r7, #8]
 8015546:	2300      	movs	r3, #0
 8015548:	75fb      	strb	r3, [r7, #23]
 801554a:	2300      	movs	r3, #0
 801554c:	75bb      	strb	r3, [r7, #22]
 801554e:	68fb      	ldr	r3, [r7, #12]
 8015550:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8015554:	893b      	ldrh	r3, [r7, #8]
 8015556:	7af9      	ldrb	r1, [r7, #11]
 8015558:	687a      	ldr	r2, [r7, #4]
 801555a:	f7f7 f90e 	bl	800c77a <HAL_PCD_EP_Transmit>
 801555e:	4603      	mov	r3, r0
 8015560:	75fb      	strb	r3, [r7, #23]
 8015562:	7dfb      	ldrb	r3, [r7, #23]
 8015564:	4618      	mov	r0, r3
 8015566:	f000 f83d 	bl	80155e4 <USBD_Get_USB_Status>
 801556a:	4603      	mov	r3, r0
 801556c:	75bb      	strb	r3, [r7, #22]
 801556e:	7dbb      	ldrb	r3, [r7, #22]
 8015570:	4618      	mov	r0, r3
 8015572:	3718      	adds	r7, #24
 8015574:	46bd      	mov	sp, r7
 8015576:	bd80      	pop	{r7, pc}

08015578 <USBD_LL_PrepareReceive>:
 8015578:	b580      	push	{r7, lr}
 801557a:	b086      	sub	sp, #24
 801557c:	af00      	add	r7, sp, #0
 801557e:	60f8      	str	r0, [r7, #12]
 8015580:	607a      	str	r2, [r7, #4]
 8015582:	461a      	mov	r2, r3
 8015584:	460b      	mov	r3, r1
 8015586:	72fb      	strb	r3, [r7, #11]
 8015588:	4613      	mov	r3, r2
 801558a:	813b      	strh	r3, [r7, #8]
 801558c:	2300      	movs	r3, #0
 801558e:	75fb      	strb	r3, [r7, #23]
 8015590:	2300      	movs	r3, #0
 8015592:	75bb      	strb	r3, [r7, #22]
 8015594:	68fb      	ldr	r3, [r7, #12]
 8015596:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 801559a:	893b      	ldrh	r3, [r7, #8]
 801559c:	7af9      	ldrb	r1, [r7, #11]
 801559e:	687a      	ldr	r2, [r7, #4]
 80155a0:	f7f7 f888 	bl	800c6b4 <HAL_PCD_EP_Receive>
 80155a4:	4603      	mov	r3, r0
 80155a6:	75fb      	strb	r3, [r7, #23]
 80155a8:	7dfb      	ldrb	r3, [r7, #23]
 80155aa:	4618      	mov	r0, r3
 80155ac:	f000 f81a 	bl	80155e4 <USBD_Get_USB_Status>
 80155b0:	4603      	mov	r3, r0
 80155b2:	75bb      	strb	r3, [r7, #22]
 80155b4:	7dbb      	ldrb	r3, [r7, #22]
 80155b6:	4618      	mov	r0, r3
 80155b8:	3718      	adds	r7, #24
 80155ba:	46bd      	mov	sp, r7
 80155bc:	bd80      	pop	{r7, pc}

080155be <USBD_LL_GetRxDataSize>:
 80155be:	b580      	push	{r7, lr}
 80155c0:	b082      	sub	sp, #8
 80155c2:	af00      	add	r7, sp, #0
 80155c4:	6078      	str	r0, [r7, #4]
 80155c6:	460b      	mov	r3, r1
 80155c8:	70fb      	strb	r3, [r7, #3]
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80155d0:	78fa      	ldrb	r2, [r7, #3]
 80155d2:	4611      	mov	r1, r2
 80155d4:	4618      	mov	r0, r3
 80155d6:	f7f7 f8b8 	bl	800c74a <HAL_PCD_EP_GetRxCount>
 80155da:	4603      	mov	r3, r0
 80155dc:	4618      	mov	r0, r3
 80155de:	3708      	adds	r7, #8
 80155e0:	46bd      	mov	sp, r7
 80155e2:	bd80      	pop	{r7, pc}

080155e4 <USBD_Get_USB_Status>:
 80155e4:	b480      	push	{r7}
 80155e6:	b085      	sub	sp, #20
 80155e8:	af00      	add	r7, sp, #0
 80155ea:	4603      	mov	r3, r0
 80155ec:	71fb      	strb	r3, [r7, #7]
 80155ee:	2300      	movs	r3, #0
 80155f0:	73fb      	strb	r3, [r7, #15]
 80155f2:	79fb      	ldrb	r3, [r7, #7]
 80155f4:	2b03      	cmp	r3, #3
 80155f6:	d817      	bhi.n	8015628 <USBD_Get_USB_Status+0x44>
 80155f8:	a201      	add	r2, pc, #4	; (adr r2, 8015600 <USBD_Get_USB_Status+0x1c>)
 80155fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80155fe:	bf00      	nop
 8015600:	08015611 	.word	0x08015611
 8015604:	08015617 	.word	0x08015617
 8015608:	0801561d 	.word	0x0801561d
 801560c:	08015623 	.word	0x08015623
 8015610:	2300      	movs	r3, #0
 8015612:	73fb      	strb	r3, [r7, #15]
 8015614:	e00b      	b.n	801562e <USBD_Get_USB_Status+0x4a>
 8015616:	2302      	movs	r3, #2
 8015618:	73fb      	strb	r3, [r7, #15]
 801561a:	e008      	b.n	801562e <USBD_Get_USB_Status+0x4a>
 801561c:	2301      	movs	r3, #1
 801561e:	73fb      	strb	r3, [r7, #15]
 8015620:	e005      	b.n	801562e <USBD_Get_USB_Status+0x4a>
 8015622:	2302      	movs	r3, #2
 8015624:	73fb      	strb	r3, [r7, #15]
 8015626:	e002      	b.n	801562e <USBD_Get_USB_Status+0x4a>
 8015628:	2302      	movs	r3, #2
 801562a:	73fb      	strb	r3, [r7, #15]
 801562c:	bf00      	nop
 801562e:	7bfb      	ldrb	r3, [r7, #15]
 8015630:	4618      	mov	r0, r3
 8015632:	3714      	adds	r7, #20
 8015634:	46bd      	mov	sp, r7
 8015636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801563a:	4770      	bx	lr

0801563c <__errno>:
 801563c:	4b01      	ldr	r3, [pc, #4]	; (8015644 <__errno+0x8>)
 801563e:	6818      	ldr	r0, [r3, #0]
 8015640:	4770      	bx	lr
 8015642:	bf00      	nop
 8015644:	20000e0c 	.word	0x20000e0c

08015648 <__libc_init_array>:
 8015648:	b570      	push	{r4, r5, r6, lr}
 801564a:	4e0d      	ldr	r6, [pc, #52]	; (8015680 <__libc_init_array+0x38>)
 801564c:	4c0d      	ldr	r4, [pc, #52]	; (8015684 <__libc_init_array+0x3c>)
 801564e:	1ba4      	subs	r4, r4, r6
 8015650:	10a4      	asrs	r4, r4, #2
 8015652:	2500      	movs	r5, #0
 8015654:	42a5      	cmp	r5, r4
 8015656:	d109      	bne.n	801566c <__libc_init_array+0x24>
 8015658:	4e0b      	ldr	r6, [pc, #44]	; (8015688 <__libc_init_array+0x40>)
 801565a:	4c0c      	ldr	r4, [pc, #48]	; (801568c <__libc_init_array+0x44>)
 801565c:	f005 fa9a 	bl	801ab94 <_init>
 8015660:	1ba4      	subs	r4, r4, r6
 8015662:	10a4      	asrs	r4, r4, #2
 8015664:	2500      	movs	r5, #0
 8015666:	42a5      	cmp	r5, r4
 8015668:	d105      	bne.n	8015676 <__libc_init_array+0x2e>
 801566a:	bd70      	pop	{r4, r5, r6, pc}
 801566c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015670:	4798      	blx	r3
 8015672:	3501      	adds	r5, #1
 8015674:	e7ee      	b.n	8015654 <__libc_init_array+0xc>
 8015676:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801567a:	4798      	blx	r3
 801567c:	3501      	adds	r5, #1
 801567e:	e7f2      	b.n	8015666 <__libc_init_array+0x1e>
 8015680:	0801b5f8 	.word	0x0801b5f8
 8015684:	0801b5f8 	.word	0x0801b5f8
 8015688:	0801b5f8 	.word	0x0801b5f8
 801568c:	0801b5fc 	.word	0x0801b5fc

08015690 <malloc>:
 8015690:	4b02      	ldr	r3, [pc, #8]	; (801569c <malloc+0xc>)
 8015692:	4601      	mov	r1, r0
 8015694:	6818      	ldr	r0, [r3, #0]
 8015696:	f000 b885 	b.w	80157a4 <_malloc_r>
 801569a:	bf00      	nop
 801569c:	20000e0c 	.word	0x20000e0c

080156a0 <free>:
 80156a0:	4b02      	ldr	r3, [pc, #8]	; (80156ac <free+0xc>)
 80156a2:	4601      	mov	r1, r0
 80156a4:	6818      	ldr	r0, [r3, #0]
 80156a6:	f000 b82f 	b.w	8015708 <_free_r>
 80156aa:	bf00      	nop
 80156ac:	20000e0c 	.word	0x20000e0c

080156b0 <memcpy>:
 80156b0:	b510      	push	{r4, lr}
 80156b2:	1e43      	subs	r3, r0, #1
 80156b4:	440a      	add	r2, r1
 80156b6:	4291      	cmp	r1, r2
 80156b8:	d100      	bne.n	80156bc <memcpy+0xc>
 80156ba:	bd10      	pop	{r4, pc}
 80156bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80156c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80156c4:	e7f7      	b.n	80156b6 <memcpy+0x6>

080156c6 <memmove>:
 80156c6:	4288      	cmp	r0, r1
 80156c8:	b510      	push	{r4, lr}
 80156ca:	eb01 0302 	add.w	r3, r1, r2
 80156ce:	d807      	bhi.n	80156e0 <memmove+0x1a>
 80156d0:	1e42      	subs	r2, r0, #1
 80156d2:	4299      	cmp	r1, r3
 80156d4:	d00a      	beq.n	80156ec <memmove+0x26>
 80156d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80156da:	f802 4f01 	strb.w	r4, [r2, #1]!
 80156de:	e7f8      	b.n	80156d2 <memmove+0xc>
 80156e0:	4283      	cmp	r3, r0
 80156e2:	d9f5      	bls.n	80156d0 <memmove+0xa>
 80156e4:	1881      	adds	r1, r0, r2
 80156e6:	1ad2      	subs	r2, r2, r3
 80156e8:	42d3      	cmn	r3, r2
 80156ea:	d100      	bne.n	80156ee <memmove+0x28>
 80156ec:	bd10      	pop	{r4, pc}
 80156ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80156f2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80156f6:	e7f7      	b.n	80156e8 <memmove+0x22>

080156f8 <memset>:
 80156f8:	4402      	add	r2, r0
 80156fa:	4603      	mov	r3, r0
 80156fc:	4293      	cmp	r3, r2
 80156fe:	d100      	bne.n	8015702 <memset+0xa>
 8015700:	4770      	bx	lr
 8015702:	f803 1b01 	strb.w	r1, [r3], #1
 8015706:	e7f9      	b.n	80156fc <memset+0x4>

08015708 <_free_r>:
 8015708:	b538      	push	{r3, r4, r5, lr}
 801570a:	4605      	mov	r5, r0
 801570c:	2900      	cmp	r1, #0
 801570e:	d045      	beq.n	801579c <_free_r+0x94>
 8015710:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015714:	1f0c      	subs	r4, r1, #4
 8015716:	2b00      	cmp	r3, #0
 8015718:	bfb8      	it	lt
 801571a:	18e4      	addlt	r4, r4, r3
 801571c:	f002 ff94 	bl	8018648 <__malloc_lock>
 8015720:	4a1f      	ldr	r2, [pc, #124]	; (80157a0 <_free_r+0x98>)
 8015722:	6813      	ldr	r3, [r2, #0]
 8015724:	4610      	mov	r0, r2
 8015726:	b933      	cbnz	r3, 8015736 <_free_r+0x2e>
 8015728:	6063      	str	r3, [r4, #4]
 801572a:	6014      	str	r4, [r2, #0]
 801572c:	4628      	mov	r0, r5
 801572e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015732:	f002 bf8a 	b.w	801864a <__malloc_unlock>
 8015736:	42a3      	cmp	r3, r4
 8015738:	d90c      	bls.n	8015754 <_free_r+0x4c>
 801573a:	6821      	ldr	r1, [r4, #0]
 801573c:	1862      	adds	r2, r4, r1
 801573e:	4293      	cmp	r3, r2
 8015740:	bf04      	itt	eq
 8015742:	681a      	ldreq	r2, [r3, #0]
 8015744:	685b      	ldreq	r3, [r3, #4]
 8015746:	6063      	str	r3, [r4, #4]
 8015748:	bf04      	itt	eq
 801574a:	1852      	addeq	r2, r2, r1
 801574c:	6022      	streq	r2, [r4, #0]
 801574e:	6004      	str	r4, [r0, #0]
 8015750:	e7ec      	b.n	801572c <_free_r+0x24>
 8015752:	4613      	mov	r3, r2
 8015754:	685a      	ldr	r2, [r3, #4]
 8015756:	b10a      	cbz	r2, 801575c <_free_r+0x54>
 8015758:	42a2      	cmp	r2, r4
 801575a:	d9fa      	bls.n	8015752 <_free_r+0x4a>
 801575c:	6819      	ldr	r1, [r3, #0]
 801575e:	1858      	adds	r0, r3, r1
 8015760:	42a0      	cmp	r0, r4
 8015762:	d10b      	bne.n	801577c <_free_r+0x74>
 8015764:	6820      	ldr	r0, [r4, #0]
 8015766:	4401      	add	r1, r0
 8015768:	1858      	adds	r0, r3, r1
 801576a:	4282      	cmp	r2, r0
 801576c:	6019      	str	r1, [r3, #0]
 801576e:	d1dd      	bne.n	801572c <_free_r+0x24>
 8015770:	6810      	ldr	r0, [r2, #0]
 8015772:	6852      	ldr	r2, [r2, #4]
 8015774:	605a      	str	r2, [r3, #4]
 8015776:	4401      	add	r1, r0
 8015778:	6019      	str	r1, [r3, #0]
 801577a:	e7d7      	b.n	801572c <_free_r+0x24>
 801577c:	d902      	bls.n	8015784 <_free_r+0x7c>
 801577e:	230c      	movs	r3, #12
 8015780:	602b      	str	r3, [r5, #0]
 8015782:	e7d3      	b.n	801572c <_free_r+0x24>
 8015784:	6820      	ldr	r0, [r4, #0]
 8015786:	1821      	adds	r1, r4, r0
 8015788:	428a      	cmp	r2, r1
 801578a:	bf04      	itt	eq
 801578c:	6811      	ldreq	r1, [r2, #0]
 801578e:	6852      	ldreq	r2, [r2, #4]
 8015790:	6062      	str	r2, [r4, #4]
 8015792:	bf04      	itt	eq
 8015794:	1809      	addeq	r1, r1, r0
 8015796:	6021      	streq	r1, [r4, #0]
 8015798:	605c      	str	r4, [r3, #4]
 801579a:	e7c7      	b.n	801572c <_free_r+0x24>
 801579c:	bd38      	pop	{r3, r4, r5, pc}
 801579e:	bf00      	nop
 80157a0:	200051ac 	.word	0x200051ac

080157a4 <_malloc_r>:
 80157a4:	b570      	push	{r4, r5, r6, lr}
 80157a6:	1ccd      	adds	r5, r1, #3
 80157a8:	f025 0503 	bic.w	r5, r5, #3
 80157ac:	3508      	adds	r5, #8
 80157ae:	2d0c      	cmp	r5, #12
 80157b0:	bf38      	it	cc
 80157b2:	250c      	movcc	r5, #12
 80157b4:	2d00      	cmp	r5, #0
 80157b6:	4606      	mov	r6, r0
 80157b8:	db01      	blt.n	80157be <_malloc_r+0x1a>
 80157ba:	42a9      	cmp	r1, r5
 80157bc:	d903      	bls.n	80157c6 <_malloc_r+0x22>
 80157be:	230c      	movs	r3, #12
 80157c0:	6033      	str	r3, [r6, #0]
 80157c2:	2000      	movs	r0, #0
 80157c4:	bd70      	pop	{r4, r5, r6, pc}
 80157c6:	f002 ff3f 	bl	8018648 <__malloc_lock>
 80157ca:	4a21      	ldr	r2, [pc, #132]	; (8015850 <_malloc_r+0xac>)
 80157cc:	6814      	ldr	r4, [r2, #0]
 80157ce:	4621      	mov	r1, r4
 80157d0:	b991      	cbnz	r1, 80157f8 <_malloc_r+0x54>
 80157d2:	4c20      	ldr	r4, [pc, #128]	; (8015854 <_malloc_r+0xb0>)
 80157d4:	6823      	ldr	r3, [r4, #0]
 80157d6:	b91b      	cbnz	r3, 80157e0 <_malloc_r+0x3c>
 80157d8:	4630      	mov	r0, r6
 80157da:	f000 fe7b 	bl	80164d4 <_sbrk_r>
 80157de:	6020      	str	r0, [r4, #0]
 80157e0:	4629      	mov	r1, r5
 80157e2:	4630      	mov	r0, r6
 80157e4:	f000 fe76 	bl	80164d4 <_sbrk_r>
 80157e8:	1c43      	adds	r3, r0, #1
 80157ea:	d124      	bne.n	8015836 <_malloc_r+0x92>
 80157ec:	230c      	movs	r3, #12
 80157ee:	6033      	str	r3, [r6, #0]
 80157f0:	4630      	mov	r0, r6
 80157f2:	f002 ff2a 	bl	801864a <__malloc_unlock>
 80157f6:	e7e4      	b.n	80157c2 <_malloc_r+0x1e>
 80157f8:	680b      	ldr	r3, [r1, #0]
 80157fa:	1b5b      	subs	r3, r3, r5
 80157fc:	d418      	bmi.n	8015830 <_malloc_r+0x8c>
 80157fe:	2b0b      	cmp	r3, #11
 8015800:	d90f      	bls.n	8015822 <_malloc_r+0x7e>
 8015802:	600b      	str	r3, [r1, #0]
 8015804:	50cd      	str	r5, [r1, r3]
 8015806:	18cc      	adds	r4, r1, r3
 8015808:	4630      	mov	r0, r6
 801580a:	f002 ff1e 	bl	801864a <__malloc_unlock>
 801580e:	f104 000b 	add.w	r0, r4, #11
 8015812:	1d23      	adds	r3, r4, #4
 8015814:	f020 0007 	bic.w	r0, r0, #7
 8015818:	1ac3      	subs	r3, r0, r3
 801581a:	d0d3      	beq.n	80157c4 <_malloc_r+0x20>
 801581c:	425a      	negs	r2, r3
 801581e:	50e2      	str	r2, [r4, r3]
 8015820:	e7d0      	b.n	80157c4 <_malloc_r+0x20>
 8015822:	428c      	cmp	r4, r1
 8015824:	684b      	ldr	r3, [r1, #4]
 8015826:	bf16      	itet	ne
 8015828:	6063      	strne	r3, [r4, #4]
 801582a:	6013      	streq	r3, [r2, #0]
 801582c:	460c      	movne	r4, r1
 801582e:	e7eb      	b.n	8015808 <_malloc_r+0x64>
 8015830:	460c      	mov	r4, r1
 8015832:	6849      	ldr	r1, [r1, #4]
 8015834:	e7cc      	b.n	80157d0 <_malloc_r+0x2c>
 8015836:	1cc4      	adds	r4, r0, #3
 8015838:	f024 0403 	bic.w	r4, r4, #3
 801583c:	42a0      	cmp	r0, r4
 801583e:	d005      	beq.n	801584c <_malloc_r+0xa8>
 8015840:	1a21      	subs	r1, r4, r0
 8015842:	4630      	mov	r0, r6
 8015844:	f000 fe46 	bl	80164d4 <_sbrk_r>
 8015848:	3001      	adds	r0, #1
 801584a:	d0cf      	beq.n	80157ec <_malloc_r+0x48>
 801584c:	6025      	str	r5, [r4, #0]
 801584e:	e7db      	b.n	8015808 <_malloc_r+0x64>
 8015850:	200051ac 	.word	0x200051ac
 8015854:	200051b0 	.word	0x200051b0

08015858 <__cvt>:
 8015858:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801585c:	ec55 4b10 	vmov	r4, r5, d0
 8015860:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8015862:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015866:	2d00      	cmp	r5, #0
 8015868:	460e      	mov	r6, r1
 801586a:	4691      	mov	r9, r2
 801586c:	4619      	mov	r1, r3
 801586e:	bfb8      	it	lt
 8015870:	4622      	movlt	r2, r4
 8015872:	462b      	mov	r3, r5
 8015874:	f027 0720 	bic.w	r7, r7, #32
 8015878:	bfbb      	ittet	lt
 801587a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801587e:	461d      	movlt	r5, r3
 8015880:	2300      	movge	r3, #0
 8015882:	232d      	movlt	r3, #45	; 0x2d
 8015884:	bfb8      	it	lt
 8015886:	4614      	movlt	r4, r2
 8015888:	2f46      	cmp	r7, #70	; 0x46
 801588a:	700b      	strb	r3, [r1, #0]
 801588c:	d004      	beq.n	8015898 <__cvt+0x40>
 801588e:	2f45      	cmp	r7, #69	; 0x45
 8015890:	d100      	bne.n	8015894 <__cvt+0x3c>
 8015892:	3601      	adds	r6, #1
 8015894:	2102      	movs	r1, #2
 8015896:	e000      	b.n	801589a <__cvt+0x42>
 8015898:	2103      	movs	r1, #3
 801589a:	ab03      	add	r3, sp, #12
 801589c:	9301      	str	r3, [sp, #4]
 801589e:	ab02      	add	r3, sp, #8
 80158a0:	9300      	str	r3, [sp, #0]
 80158a2:	4632      	mov	r2, r6
 80158a4:	4653      	mov	r3, sl
 80158a6:	ec45 4b10 	vmov	d0, r4, r5
 80158aa:	f001 fdc9 	bl	8017440 <_dtoa_r>
 80158ae:	2f47      	cmp	r7, #71	; 0x47
 80158b0:	4680      	mov	r8, r0
 80158b2:	d102      	bne.n	80158ba <__cvt+0x62>
 80158b4:	f019 0f01 	tst.w	r9, #1
 80158b8:	d026      	beq.n	8015908 <__cvt+0xb0>
 80158ba:	2f46      	cmp	r7, #70	; 0x46
 80158bc:	eb08 0906 	add.w	r9, r8, r6
 80158c0:	d111      	bne.n	80158e6 <__cvt+0x8e>
 80158c2:	f898 3000 	ldrb.w	r3, [r8]
 80158c6:	2b30      	cmp	r3, #48	; 0x30
 80158c8:	d10a      	bne.n	80158e0 <__cvt+0x88>
 80158ca:	2200      	movs	r2, #0
 80158cc:	2300      	movs	r3, #0
 80158ce:	4620      	mov	r0, r4
 80158d0:	4629      	mov	r1, r5
 80158d2:	f7eb f8f9 	bl	8000ac8 <__aeabi_dcmpeq>
 80158d6:	b918      	cbnz	r0, 80158e0 <__cvt+0x88>
 80158d8:	f1c6 0601 	rsb	r6, r6, #1
 80158dc:	f8ca 6000 	str.w	r6, [sl]
 80158e0:	f8da 3000 	ldr.w	r3, [sl]
 80158e4:	4499      	add	r9, r3
 80158e6:	2200      	movs	r2, #0
 80158e8:	2300      	movs	r3, #0
 80158ea:	4620      	mov	r0, r4
 80158ec:	4629      	mov	r1, r5
 80158ee:	f7eb f8eb 	bl	8000ac8 <__aeabi_dcmpeq>
 80158f2:	b938      	cbnz	r0, 8015904 <__cvt+0xac>
 80158f4:	2230      	movs	r2, #48	; 0x30
 80158f6:	9b03      	ldr	r3, [sp, #12]
 80158f8:	454b      	cmp	r3, r9
 80158fa:	d205      	bcs.n	8015908 <__cvt+0xb0>
 80158fc:	1c59      	adds	r1, r3, #1
 80158fe:	9103      	str	r1, [sp, #12]
 8015900:	701a      	strb	r2, [r3, #0]
 8015902:	e7f8      	b.n	80158f6 <__cvt+0x9e>
 8015904:	f8cd 900c 	str.w	r9, [sp, #12]
 8015908:	9b03      	ldr	r3, [sp, #12]
 801590a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801590c:	eba3 0308 	sub.w	r3, r3, r8
 8015910:	4640      	mov	r0, r8
 8015912:	6013      	str	r3, [r2, #0]
 8015914:	b004      	add	sp, #16
 8015916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801591a <__exponent>:
 801591a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801591c:	2900      	cmp	r1, #0
 801591e:	4604      	mov	r4, r0
 8015920:	bfba      	itte	lt
 8015922:	4249      	neglt	r1, r1
 8015924:	232d      	movlt	r3, #45	; 0x2d
 8015926:	232b      	movge	r3, #43	; 0x2b
 8015928:	2909      	cmp	r1, #9
 801592a:	f804 2b02 	strb.w	r2, [r4], #2
 801592e:	7043      	strb	r3, [r0, #1]
 8015930:	dd20      	ble.n	8015974 <__exponent+0x5a>
 8015932:	f10d 0307 	add.w	r3, sp, #7
 8015936:	461f      	mov	r7, r3
 8015938:	260a      	movs	r6, #10
 801593a:	fb91 f5f6 	sdiv	r5, r1, r6
 801593e:	fb06 1115 	mls	r1, r6, r5, r1
 8015942:	3130      	adds	r1, #48	; 0x30
 8015944:	2d09      	cmp	r5, #9
 8015946:	f803 1c01 	strb.w	r1, [r3, #-1]
 801594a:	f103 32ff 	add.w	r2, r3, #4294967295
 801594e:	4629      	mov	r1, r5
 8015950:	dc09      	bgt.n	8015966 <__exponent+0x4c>
 8015952:	3130      	adds	r1, #48	; 0x30
 8015954:	3b02      	subs	r3, #2
 8015956:	f802 1c01 	strb.w	r1, [r2, #-1]
 801595a:	42bb      	cmp	r3, r7
 801595c:	4622      	mov	r2, r4
 801595e:	d304      	bcc.n	801596a <__exponent+0x50>
 8015960:	1a10      	subs	r0, r2, r0
 8015962:	b003      	add	sp, #12
 8015964:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015966:	4613      	mov	r3, r2
 8015968:	e7e7      	b.n	801593a <__exponent+0x20>
 801596a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801596e:	f804 2b01 	strb.w	r2, [r4], #1
 8015972:	e7f2      	b.n	801595a <__exponent+0x40>
 8015974:	2330      	movs	r3, #48	; 0x30
 8015976:	4419      	add	r1, r3
 8015978:	7083      	strb	r3, [r0, #2]
 801597a:	1d02      	adds	r2, r0, #4
 801597c:	70c1      	strb	r1, [r0, #3]
 801597e:	e7ef      	b.n	8015960 <__exponent+0x46>

08015980 <_printf_float>:
 8015980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015984:	b08d      	sub	sp, #52	; 0x34
 8015986:	460c      	mov	r4, r1
 8015988:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801598c:	4616      	mov	r6, r2
 801598e:	461f      	mov	r7, r3
 8015990:	4605      	mov	r5, r0
 8015992:	f002 fe39 	bl	8018608 <_localeconv_r>
 8015996:	6803      	ldr	r3, [r0, #0]
 8015998:	9304      	str	r3, [sp, #16]
 801599a:	4618      	mov	r0, r3
 801599c:	f7ea fc18 	bl	80001d0 <strlen>
 80159a0:	2300      	movs	r3, #0
 80159a2:	930a      	str	r3, [sp, #40]	; 0x28
 80159a4:	f8d8 3000 	ldr.w	r3, [r8]
 80159a8:	9005      	str	r0, [sp, #20]
 80159aa:	3307      	adds	r3, #7
 80159ac:	f023 0307 	bic.w	r3, r3, #7
 80159b0:	f103 0208 	add.w	r2, r3, #8
 80159b4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80159b8:	f8d4 b000 	ldr.w	fp, [r4]
 80159bc:	f8c8 2000 	str.w	r2, [r8]
 80159c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159c4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80159c8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80159cc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80159d0:	9307      	str	r3, [sp, #28]
 80159d2:	f8cd 8018 	str.w	r8, [sp, #24]
 80159d6:	f04f 32ff 	mov.w	r2, #4294967295
 80159da:	4ba7      	ldr	r3, [pc, #668]	; (8015c78 <_printf_float+0x2f8>)
 80159dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80159e0:	f7eb f8a4 	bl	8000b2c <__aeabi_dcmpun>
 80159e4:	bb70      	cbnz	r0, 8015a44 <_printf_float+0xc4>
 80159e6:	f04f 32ff 	mov.w	r2, #4294967295
 80159ea:	4ba3      	ldr	r3, [pc, #652]	; (8015c78 <_printf_float+0x2f8>)
 80159ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80159f0:	f7eb f87e 	bl	8000af0 <__aeabi_dcmple>
 80159f4:	bb30      	cbnz	r0, 8015a44 <_printf_float+0xc4>
 80159f6:	2200      	movs	r2, #0
 80159f8:	2300      	movs	r3, #0
 80159fa:	4640      	mov	r0, r8
 80159fc:	4649      	mov	r1, r9
 80159fe:	f7eb f86d 	bl	8000adc <__aeabi_dcmplt>
 8015a02:	b110      	cbz	r0, 8015a0a <_printf_float+0x8a>
 8015a04:	232d      	movs	r3, #45	; 0x2d
 8015a06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015a0a:	4a9c      	ldr	r2, [pc, #624]	; (8015c7c <_printf_float+0x2fc>)
 8015a0c:	4b9c      	ldr	r3, [pc, #624]	; (8015c80 <_printf_float+0x300>)
 8015a0e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015a12:	bf8c      	ite	hi
 8015a14:	4690      	movhi	r8, r2
 8015a16:	4698      	movls	r8, r3
 8015a18:	2303      	movs	r3, #3
 8015a1a:	f02b 0204 	bic.w	r2, fp, #4
 8015a1e:	6123      	str	r3, [r4, #16]
 8015a20:	6022      	str	r2, [r4, #0]
 8015a22:	f04f 0900 	mov.w	r9, #0
 8015a26:	9700      	str	r7, [sp, #0]
 8015a28:	4633      	mov	r3, r6
 8015a2a:	aa0b      	add	r2, sp, #44	; 0x2c
 8015a2c:	4621      	mov	r1, r4
 8015a2e:	4628      	mov	r0, r5
 8015a30:	f000 f9e6 	bl	8015e00 <_printf_common>
 8015a34:	3001      	adds	r0, #1
 8015a36:	f040 808d 	bne.w	8015b54 <_printf_float+0x1d4>
 8015a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8015a3e:	b00d      	add	sp, #52	; 0x34
 8015a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a44:	4642      	mov	r2, r8
 8015a46:	464b      	mov	r3, r9
 8015a48:	4640      	mov	r0, r8
 8015a4a:	4649      	mov	r1, r9
 8015a4c:	f7eb f86e 	bl	8000b2c <__aeabi_dcmpun>
 8015a50:	b110      	cbz	r0, 8015a58 <_printf_float+0xd8>
 8015a52:	4a8c      	ldr	r2, [pc, #560]	; (8015c84 <_printf_float+0x304>)
 8015a54:	4b8c      	ldr	r3, [pc, #560]	; (8015c88 <_printf_float+0x308>)
 8015a56:	e7da      	b.n	8015a0e <_printf_float+0x8e>
 8015a58:	6861      	ldr	r1, [r4, #4]
 8015a5a:	1c4b      	adds	r3, r1, #1
 8015a5c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8015a60:	a80a      	add	r0, sp, #40	; 0x28
 8015a62:	d13e      	bne.n	8015ae2 <_printf_float+0x162>
 8015a64:	2306      	movs	r3, #6
 8015a66:	6063      	str	r3, [r4, #4]
 8015a68:	2300      	movs	r3, #0
 8015a6a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015a6e:	ab09      	add	r3, sp, #36	; 0x24
 8015a70:	9300      	str	r3, [sp, #0]
 8015a72:	ec49 8b10 	vmov	d0, r8, r9
 8015a76:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015a7a:	6022      	str	r2, [r4, #0]
 8015a7c:	f8cd a004 	str.w	sl, [sp, #4]
 8015a80:	6861      	ldr	r1, [r4, #4]
 8015a82:	4628      	mov	r0, r5
 8015a84:	f7ff fee8 	bl	8015858 <__cvt>
 8015a88:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8015a8c:	2b47      	cmp	r3, #71	; 0x47
 8015a8e:	4680      	mov	r8, r0
 8015a90:	d109      	bne.n	8015aa6 <_printf_float+0x126>
 8015a92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a94:	1cd8      	adds	r0, r3, #3
 8015a96:	db02      	blt.n	8015a9e <_printf_float+0x11e>
 8015a98:	6862      	ldr	r2, [r4, #4]
 8015a9a:	4293      	cmp	r3, r2
 8015a9c:	dd47      	ble.n	8015b2e <_printf_float+0x1ae>
 8015a9e:	f1aa 0a02 	sub.w	sl, sl, #2
 8015aa2:	fa5f fa8a 	uxtb.w	sl, sl
 8015aa6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015aaa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015aac:	d824      	bhi.n	8015af8 <_printf_float+0x178>
 8015aae:	3901      	subs	r1, #1
 8015ab0:	4652      	mov	r2, sl
 8015ab2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015ab6:	9109      	str	r1, [sp, #36]	; 0x24
 8015ab8:	f7ff ff2f 	bl	801591a <__exponent>
 8015abc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015abe:	1813      	adds	r3, r2, r0
 8015ac0:	2a01      	cmp	r2, #1
 8015ac2:	4681      	mov	r9, r0
 8015ac4:	6123      	str	r3, [r4, #16]
 8015ac6:	dc02      	bgt.n	8015ace <_printf_float+0x14e>
 8015ac8:	6822      	ldr	r2, [r4, #0]
 8015aca:	07d1      	lsls	r1, r2, #31
 8015acc:	d501      	bpl.n	8015ad2 <_printf_float+0x152>
 8015ace:	3301      	adds	r3, #1
 8015ad0:	6123      	str	r3, [r4, #16]
 8015ad2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	d0a5      	beq.n	8015a26 <_printf_float+0xa6>
 8015ada:	232d      	movs	r3, #45	; 0x2d
 8015adc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015ae0:	e7a1      	b.n	8015a26 <_printf_float+0xa6>
 8015ae2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8015ae6:	f000 8177 	beq.w	8015dd8 <_printf_float+0x458>
 8015aea:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015aee:	d1bb      	bne.n	8015a68 <_printf_float+0xe8>
 8015af0:	2900      	cmp	r1, #0
 8015af2:	d1b9      	bne.n	8015a68 <_printf_float+0xe8>
 8015af4:	2301      	movs	r3, #1
 8015af6:	e7b6      	b.n	8015a66 <_printf_float+0xe6>
 8015af8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8015afc:	d119      	bne.n	8015b32 <_printf_float+0x1b2>
 8015afe:	2900      	cmp	r1, #0
 8015b00:	6863      	ldr	r3, [r4, #4]
 8015b02:	dd0c      	ble.n	8015b1e <_printf_float+0x19e>
 8015b04:	6121      	str	r1, [r4, #16]
 8015b06:	b913      	cbnz	r3, 8015b0e <_printf_float+0x18e>
 8015b08:	6822      	ldr	r2, [r4, #0]
 8015b0a:	07d2      	lsls	r2, r2, #31
 8015b0c:	d502      	bpl.n	8015b14 <_printf_float+0x194>
 8015b0e:	3301      	adds	r3, #1
 8015b10:	440b      	add	r3, r1
 8015b12:	6123      	str	r3, [r4, #16]
 8015b14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b16:	65a3      	str	r3, [r4, #88]	; 0x58
 8015b18:	f04f 0900 	mov.w	r9, #0
 8015b1c:	e7d9      	b.n	8015ad2 <_printf_float+0x152>
 8015b1e:	b913      	cbnz	r3, 8015b26 <_printf_float+0x1a6>
 8015b20:	6822      	ldr	r2, [r4, #0]
 8015b22:	07d0      	lsls	r0, r2, #31
 8015b24:	d501      	bpl.n	8015b2a <_printf_float+0x1aa>
 8015b26:	3302      	adds	r3, #2
 8015b28:	e7f3      	b.n	8015b12 <_printf_float+0x192>
 8015b2a:	2301      	movs	r3, #1
 8015b2c:	e7f1      	b.n	8015b12 <_printf_float+0x192>
 8015b2e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8015b32:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015b36:	4293      	cmp	r3, r2
 8015b38:	db05      	blt.n	8015b46 <_printf_float+0x1c6>
 8015b3a:	6822      	ldr	r2, [r4, #0]
 8015b3c:	6123      	str	r3, [r4, #16]
 8015b3e:	07d1      	lsls	r1, r2, #31
 8015b40:	d5e8      	bpl.n	8015b14 <_printf_float+0x194>
 8015b42:	3301      	adds	r3, #1
 8015b44:	e7e5      	b.n	8015b12 <_printf_float+0x192>
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	bfd4      	ite	le
 8015b4a:	f1c3 0302 	rsble	r3, r3, #2
 8015b4e:	2301      	movgt	r3, #1
 8015b50:	4413      	add	r3, r2
 8015b52:	e7de      	b.n	8015b12 <_printf_float+0x192>
 8015b54:	6823      	ldr	r3, [r4, #0]
 8015b56:	055a      	lsls	r2, r3, #21
 8015b58:	d407      	bmi.n	8015b6a <_printf_float+0x1ea>
 8015b5a:	6923      	ldr	r3, [r4, #16]
 8015b5c:	4642      	mov	r2, r8
 8015b5e:	4631      	mov	r1, r6
 8015b60:	4628      	mov	r0, r5
 8015b62:	47b8      	blx	r7
 8015b64:	3001      	adds	r0, #1
 8015b66:	d12b      	bne.n	8015bc0 <_printf_float+0x240>
 8015b68:	e767      	b.n	8015a3a <_printf_float+0xba>
 8015b6a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015b6e:	f240 80dc 	bls.w	8015d2a <_printf_float+0x3aa>
 8015b72:	2200      	movs	r2, #0
 8015b74:	2300      	movs	r3, #0
 8015b76:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015b7a:	f7ea ffa5 	bl	8000ac8 <__aeabi_dcmpeq>
 8015b7e:	2800      	cmp	r0, #0
 8015b80:	d033      	beq.n	8015bea <_printf_float+0x26a>
 8015b82:	2301      	movs	r3, #1
 8015b84:	4a41      	ldr	r2, [pc, #260]	; (8015c8c <_printf_float+0x30c>)
 8015b86:	4631      	mov	r1, r6
 8015b88:	4628      	mov	r0, r5
 8015b8a:	47b8      	blx	r7
 8015b8c:	3001      	adds	r0, #1
 8015b8e:	f43f af54 	beq.w	8015a3a <_printf_float+0xba>
 8015b92:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015b96:	429a      	cmp	r2, r3
 8015b98:	db02      	blt.n	8015ba0 <_printf_float+0x220>
 8015b9a:	6823      	ldr	r3, [r4, #0]
 8015b9c:	07d8      	lsls	r0, r3, #31
 8015b9e:	d50f      	bpl.n	8015bc0 <_printf_float+0x240>
 8015ba0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015ba4:	4631      	mov	r1, r6
 8015ba6:	4628      	mov	r0, r5
 8015ba8:	47b8      	blx	r7
 8015baa:	3001      	adds	r0, #1
 8015bac:	f43f af45 	beq.w	8015a3a <_printf_float+0xba>
 8015bb0:	f04f 0800 	mov.w	r8, #0
 8015bb4:	f104 091a 	add.w	r9, r4, #26
 8015bb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015bba:	3b01      	subs	r3, #1
 8015bbc:	4543      	cmp	r3, r8
 8015bbe:	dc09      	bgt.n	8015bd4 <_printf_float+0x254>
 8015bc0:	6823      	ldr	r3, [r4, #0]
 8015bc2:	079b      	lsls	r3, r3, #30
 8015bc4:	f100 8103 	bmi.w	8015dce <_printf_float+0x44e>
 8015bc8:	68e0      	ldr	r0, [r4, #12]
 8015bca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015bcc:	4298      	cmp	r0, r3
 8015bce:	bfb8      	it	lt
 8015bd0:	4618      	movlt	r0, r3
 8015bd2:	e734      	b.n	8015a3e <_printf_float+0xbe>
 8015bd4:	2301      	movs	r3, #1
 8015bd6:	464a      	mov	r2, r9
 8015bd8:	4631      	mov	r1, r6
 8015bda:	4628      	mov	r0, r5
 8015bdc:	47b8      	blx	r7
 8015bde:	3001      	adds	r0, #1
 8015be0:	f43f af2b 	beq.w	8015a3a <_printf_float+0xba>
 8015be4:	f108 0801 	add.w	r8, r8, #1
 8015be8:	e7e6      	b.n	8015bb8 <_printf_float+0x238>
 8015bea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	dc2b      	bgt.n	8015c48 <_printf_float+0x2c8>
 8015bf0:	2301      	movs	r3, #1
 8015bf2:	4a26      	ldr	r2, [pc, #152]	; (8015c8c <_printf_float+0x30c>)
 8015bf4:	4631      	mov	r1, r6
 8015bf6:	4628      	mov	r0, r5
 8015bf8:	47b8      	blx	r7
 8015bfa:	3001      	adds	r0, #1
 8015bfc:	f43f af1d 	beq.w	8015a3a <_printf_float+0xba>
 8015c00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c02:	b923      	cbnz	r3, 8015c0e <_printf_float+0x28e>
 8015c04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c06:	b913      	cbnz	r3, 8015c0e <_printf_float+0x28e>
 8015c08:	6823      	ldr	r3, [r4, #0]
 8015c0a:	07d9      	lsls	r1, r3, #31
 8015c0c:	d5d8      	bpl.n	8015bc0 <_printf_float+0x240>
 8015c0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015c12:	4631      	mov	r1, r6
 8015c14:	4628      	mov	r0, r5
 8015c16:	47b8      	blx	r7
 8015c18:	3001      	adds	r0, #1
 8015c1a:	f43f af0e 	beq.w	8015a3a <_printf_float+0xba>
 8015c1e:	f04f 0900 	mov.w	r9, #0
 8015c22:	f104 0a1a 	add.w	sl, r4, #26
 8015c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c28:	425b      	negs	r3, r3
 8015c2a:	454b      	cmp	r3, r9
 8015c2c:	dc01      	bgt.n	8015c32 <_printf_float+0x2b2>
 8015c2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c30:	e794      	b.n	8015b5c <_printf_float+0x1dc>
 8015c32:	2301      	movs	r3, #1
 8015c34:	4652      	mov	r2, sl
 8015c36:	4631      	mov	r1, r6
 8015c38:	4628      	mov	r0, r5
 8015c3a:	47b8      	blx	r7
 8015c3c:	3001      	adds	r0, #1
 8015c3e:	f43f aefc 	beq.w	8015a3a <_printf_float+0xba>
 8015c42:	f109 0901 	add.w	r9, r9, #1
 8015c46:	e7ee      	b.n	8015c26 <_printf_float+0x2a6>
 8015c48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015c4a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015c4c:	429a      	cmp	r2, r3
 8015c4e:	bfa8      	it	ge
 8015c50:	461a      	movge	r2, r3
 8015c52:	2a00      	cmp	r2, #0
 8015c54:	4691      	mov	r9, r2
 8015c56:	dd07      	ble.n	8015c68 <_printf_float+0x2e8>
 8015c58:	4613      	mov	r3, r2
 8015c5a:	4631      	mov	r1, r6
 8015c5c:	4642      	mov	r2, r8
 8015c5e:	4628      	mov	r0, r5
 8015c60:	47b8      	blx	r7
 8015c62:	3001      	adds	r0, #1
 8015c64:	f43f aee9 	beq.w	8015a3a <_printf_float+0xba>
 8015c68:	f104 031a 	add.w	r3, r4, #26
 8015c6c:	f04f 0b00 	mov.w	fp, #0
 8015c70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015c74:	9306      	str	r3, [sp, #24]
 8015c76:	e015      	b.n	8015ca4 <_printf_float+0x324>
 8015c78:	7fefffff 	.word	0x7fefffff
 8015c7c:	0801b120 	.word	0x0801b120
 8015c80:	0801b11c 	.word	0x0801b11c
 8015c84:	0801b128 	.word	0x0801b128
 8015c88:	0801b124 	.word	0x0801b124
 8015c8c:	0801b12c 	.word	0x0801b12c
 8015c90:	2301      	movs	r3, #1
 8015c92:	9a06      	ldr	r2, [sp, #24]
 8015c94:	4631      	mov	r1, r6
 8015c96:	4628      	mov	r0, r5
 8015c98:	47b8      	blx	r7
 8015c9a:	3001      	adds	r0, #1
 8015c9c:	f43f aecd 	beq.w	8015a3a <_printf_float+0xba>
 8015ca0:	f10b 0b01 	add.w	fp, fp, #1
 8015ca4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8015ca8:	ebaa 0309 	sub.w	r3, sl, r9
 8015cac:	455b      	cmp	r3, fp
 8015cae:	dcef      	bgt.n	8015c90 <_printf_float+0x310>
 8015cb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015cb4:	429a      	cmp	r2, r3
 8015cb6:	44d0      	add	r8, sl
 8015cb8:	db15      	blt.n	8015ce6 <_printf_float+0x366>
 8015cba:	6823      	ldr	r3, [r4, #0]
 8015cbc:	07da      	lsls	r2, r3, #31
 8015cbe:	d412      	bmi.n	8015ce6 <_printf_float+0x366>
 8015cc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015cc2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015cc4:	eba3 020a 	sub.w	r2, r3, sl
 8015cc8:	eba3 0a01 	sub.w	sl, r3, r1
 8015ccc:	4592      	cmp	sl, r2
 8015cce:	bfa8      	it	ge
 8015cd0:	4692      	movge	sl, r2
 8015cd2:	f1ba 0f00 	cmp.w	sl, #0
 8015cd6:	dc0e      	bgt.n	8015cf6 <_printf_float+0x376>
 8015cd8:	f04f 0800 	mov.w	r8, #0
 8015cdc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015ce0:	f104 091a 	add.w	r9, r4, #26
 8015ce4:	e019      	b.n	8015d1a <_printf_float+0x39a>
 8015ce6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015cea:	4631      	mov	r1, r6
 8015cec:	4628      	mov	r0, r5
 8015cee:	47b8      	blx	r7
 8015cf0:	3001      	adds	r0, #1
 8015cf2:	d1e5      	bne.n	8015cc0 <_printf_float+0x340>
 8015cf4:	e6a1      	b.n	8015a3a <_printf_float+0xba>
 8015cf6:	4653      	mov	r3, sl
 8015cf8:	4642      	mov	r2, r8
 8015cfa:	4631      	mov	r1, r6
 8015cfc:	4628      	mov	r0, r5
 8015cfe:	47b8      	blx	r7
 8015d00:	3001      	adds	r0, #1
 8015d02:	d1e9      	bne.n	8015cd8 <_printf_float+0x358>
 8015d04:	e699      	b.n	8015a3a <_printf_float+0xba>
 8015d06:	2301      	movs	r3, #1
 8015d08:	464a      	mov	r2, r9
 8015d0a:	4631      	mov	r1, r6
 8015d0c:	4628      	mov	r0, r5
 8015d0e:	47b8      	blx	r7
 8015d10:	3001      	adds	r0, #1
 8015d12:	f43f ae92 	beq.w	8015a3a <_printf_float+0xba>
 8015d16:	f108 0801 	add.w	r8, r8, #1
 8015d1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015d1e:	1a9b      	subs	r3, r3, r2
 8015d20:	eba3 030a 	sub.w	r3, r3, sl
 8015d24:	4543      	cmp	r3, r8
 8015d26:	dcee      	bgt.n	8015d06 <_printf_float+0x386>
 8015d28:	e74a      	b.n	8015bc0 <_printf_float+0x240>
 8015d2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015d2c:	2a01      	cmp	r2, #1
 8015d2e:	dc01      	bgt.n	8015d34 <_printf_float+0x3b4>
 8015d30:	07db      	lsls	r3, r3, #31
 8015d32:	d53a      	bpl.n	8015daa <_printf_float+0x42a>
 8015d34:	2301      	movs	r3, #1
 8015d36:	4642      	mov	r2, r8
 8015d38:	4631      	mov	r1, r6
 8015d3a:	4628      	mov	r0, r5
 8015d3c:	47b8      	blx	r7
 8015d3e:	3001      	adds	r0, #1
 8015d40:	f43f ae7b 	beq.w	8015a3a <_printf_float+0xba>
 8015d44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015d48:	4631      	mov	r1, r6
 8015d4a:	4628      	mov	r0, r5
 8015d4c:	47b8      	blx	r7
 8015d4e:	3001      	adds	r0, #1
 8015d50:	f108 0801 	add.w	r8, r8, #1
 8015d54:	f43f ae71 	beq.w	8015a3a <_printf_float+0xba>
 8015d58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015d5a:	2200      	movs	r2, #0
 8015d5c:	f103 3aff 	add.w	sl, r3, #4294967295
 8015d60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015d64:	2300      	movs	r3, #0
 8015d66:	f7ea feaf 	bl	8000ac8 <__aeabi_dcmpeq>
 8015d6a:	b9c8      	cbnz	r0, 8015da0 <_printf_float+0x420>
 8015d6c:	4653      	mov	r3, sl
 8015d6e:	4642      	mov	r2, r8
 8015d70:	4631      	mov	r1, r6
 8015d72:	4628      	mov	r0, r5
 8015d74:	47b8      	blx	r7
 8015d76:	3001      	adds	r0, #1
 8015d78:	d10e      	bne.n	8015d98 <_printf_float+0x418>
 8015d7a:	e65e      	b.n	8015a3a <_printf_float+0xba>
 8015d7c:	2301      	movs	r3, #1
 8015d7e:	4652      	mov	r2, sl
 8015d80:	4631      	mov	r1, r6
 8015d82:	4628      	mov	r0, r5
 8015d84:	47b8      	blx	r7
 8015d86:	3001      	adds	r0, #1
 8015d88:	f43f ae57 	beq.w	8015a3a <_printf_float+0xba>
 8015d8c:	f108 0801 	add.w	r8, r8, #1
 8015d90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015d92:	3b01      	subs	r3, #1
 8015d94:	4543      	cmp	r3, r8
 8015d96:	dcf1      	bgt.n	8015d7c <_printf_float+0x3fc>
 8015d98:	464b      	mov	r3, r9
 8015d9a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015d9e:	e6de      	b.n	8015b5e <_printf_float+0x1de>
 8015da0:	f04f 0800 	mov.w	r8, #0
 8015da4:	f104 0a1a 	add.w	sl, r4, #26
 8015da8:	e7f2      	b.n	8015d90 <_printf_float+0x410>
 8015daa:	2301      	movs	r3, #1
 8015dac:	e7df      	b.n	8015d6e <_printf_float+0x3ee>
 8015dae:	2301      	movs	r3, #1
 8015db0:	464a      	mov	r2, r9
 8015db2:	4631      	mov	r1, r6
 8015db4:	4628      	mov	r0, r5
 8015db6:	47b8      	blx	r7
 8015db8:	3001      	adds	r0, #1
 8015dba:	f43f ae3e 	beq.w	8015a3a <_printf_float+0xba>
 8015dbe:	f108 0801 	add.w	r8, r8, #1
 8015dc2:	68e3      	ldr	r3, [r4, #12]
 8015dc4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015dc6:	1a9b      	subs	r3, r3, r2
 8015dc8:	4543      	cmp	r3, r8
 8015dca:	dcf0      	bgt.n	8015dae <_printf_float+0x42e>
 8015dcc:	e6fc      	b.n	8015bc8 <_printf_float+0x248>
 8015dce:	f04f 0800 	mov.w	r8, #0
 8015dd2:	f104 0919 	add.w	r9, r4, #25
 8015dd6:	e7f4      	b.n	8015dc2 <_printf_float+0x442>
 8015dd8:	2900      	cmp	r1, #0
 8015dda:	f43f ae8b 	beq.w	8015af4 <_printf_float+0x174>
 8015dde:	2300      	movs	r3, #0
 8015de0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015de4:	ab09      	add	r3, sp, #36	; 0x24
 8015de6:	9300      	str	r3, [sp, #0]
 8015de8:	ec49 8b10 	vmov	d0, r8, r9
 8015dec:	6022      	str	r2, [r4, #0]
 8015dee:	f8cd a004 	str.w	sl, [sp, #4]
 8015df2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015df6:	4628      	mov	r0, r5
 8015df8:	f7ff fd2e 	bl	8015858 <__cvt>
 8015dfc:	4680      	mov	r8, r0
 8015dfe:	e648      	b.n	8015a92 <_printf_float+0x112>

08015e00 <_printf_common>:
 8015e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015e04:	4691      	mov	r9, r2
 8015e06:	461f      	mov	r7, r3
 8015e08:	688a      	ldr	r2, [r1, #8]
 8015e0a:	690b      	ldr	r3, [r1, #16]
 8015e0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015e10:	4293      	cmp	r3, r2
 8015e12:	bfb8      	it	lt
 8015e14:	4613      	movlt	r3, r2
 8015e16:	f8c9 3000 	str.w	r3, [r9]
 8015e1a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015e1e:	4606      	mov	r6, r0
 8015e20:	460c      	mov	r4, r1
 8015e22:	b112      	cbz	r2, 8015e2a <_printf_common+0x2a>
 8015e24:	3301      	adds	r3, #1
 8015e26:	f8c9 3000 	str.w	r3, [r9]
 8015e2a:	6823      	ldr	r3, [r4, #0]
 8015e2c:	0699      	lsls	r1, r3, #26
 8015e2e:	bf42      	ittt	mi
 8015e30:	f8d9 3000 	ldrmi.w	r3, [r9]
 8015e34:	3302      	addmi	r3, #2
 8015e36:	f8c9 3000 	strmi.w	r3, [r9]
 8015e3a:	6825      	ldr	r5, [r4, #0]
 8015e3c:	f015 0506 	ands.w	r5, r5, #6
 8015e40:	d107      	bne.n	8015e52 <_printf_common+0x52>
 8015e42:	f104 0a19 	add.w	sl, r4, #25
 8015e46:	68e3      	ldr	r3, [r4, #12]
 8015e48:	f8d9 2000 	ldr.w	r2, [r9]
 8015e4c:	1a9b      	subs	r3, r3, r2
 8015e4e:	42ab      	cmp	r3, r5
 8015e50:	dc28      	bgt.n	8015ea4 <_printf_common+0xa4>
 8015e52:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8015e56:	6822      	ldr	r2, [r4, #0]
 8015e58:	3300      	adds	r3, #0
 8015e5a:	bf18      	it	ne
 8015e5c:	2301      	movne	r3, #1
 8015e5e:	0692      	lsls	r2, r2, #26
 8015e60:	d42d      	bmi.n	8015ebe <_printf_common+0xbe>
 8015e62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015e66:	4639      	mov	r1, r7
 8015e68:	4630      	mov	r0, r6
 8015e6a:	47c0      	blx	r8
 8015e6c:	3001      	adds	r0, #1
 8015e6e:	d020      	beq.n	8015eb2 <_printf_common+0xb2>
 8015e70:	6823      	ldr	r3, [r4, #0]
 8015e72:	68e5      	ldr	r5, [r4, #12]
 8015e74:	f8d9 2000 	ldr.w	r2, [r9]
 8015e78:	f003 0306 	and.w	r3, r3, #6
 8015e7c:	2b04      	cmp	r3, #4
 8015e7e:	bf08      	it	eq
 8015e80:	1aad      	subeq	r5, r5, r2
 8015e82:	68a3      	ldr	r3, [r4, #8]
 8015e84:	6922      	ldr	r2, [r4, #16]
 8015e86:	bf0c      	ite	eq
 8015e88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015e8c:	2500      	movne	r5, #0
 8015e8e:	4293      	cmp	r3, r2
 8015e90:	bfc4      	itt	gt
 8015e92:	1a9b      	subgt	r3, r3, r2
 8015e94:	18ed      	addgt	r5, r5, r3
 8015e96:	f04f 0900 	mov.w	r9, #0
 8015e9a:	341a      	adds	r4, #26
 8015e9c:	454d      	cmp	r5, r9
 8015e9e:	d11a      	bne.n	8015ed6 <_printf_common+0xd6>
 8015ea0:	2000      	movs	r0, #0
 8015ea2:	e008      	b.n	8015eb6 <_printf_common+0xb6>
 8015ea4:	2301      	movs	r3, #1
 8015ea6:	4652      	mov	r2, sl
 8015ea8:	4639      	mov	r1, r7
 8015eaa:	4630      	mov	r0, r6
 8015eac:	47c0      	blx	r8
 8015eae:	3001      	adds	r0, #1
 8015eb0:	d103      	bne.n	8015eba <_printf_common+0xba>
 8015eb2:	f04f 30ff 	mov.w	r0, #4294967295
 8015eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015eba:	3501      	adds	r5, #1
 8015ebc:	e7c3      	b.n	8015e46 <_printf_common+0x46>
 8015ebe:	18e1      	adds	r1, r4, r3
 8015ec0:	1c5a      	adds	r2, r3, #1
 8015ec2:	2030      	movs	r0, #48	; 0x30
 8015ec4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015ec8:	4422      	add	r2, r4
 8015eca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015ece:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015ed2:	3302      	adds	r3, #2
 8015ed4:	e7c5      	b.n	8015e62 <_printf_common+0x62>
 8015ed6:	2301      	movs	r3, #1
 8015ed8:	4622      	mov	r2, r4
 8015eda:	4639      	mov	r1, r7
 8015edc:	4630      	mov	r0, r6
 8015ede:	47c0      	blx	r8
 8015ee0:	3001      	adds	r0, #1
 8015ee2:	d0e6      	beq.n	8015eb2 <_printf_common+0xb2>
 8015ee4:	f109 0901 	add.w	r9, r9, #1
 8015ee8:	e7d8      	b.n	8015e9c <_printf_common+0x9c>
	...

08015eec <_printf_i>:
 8015eec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015ef0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8015ef4:	460c      	mov	r4, r1
 8015ef6:	7e09      	ldrb	r1, [r1, #24]
 8015ef8:	b085      	sub	sp, #20
 8015efa:	296e      	cmp	r1, #110	; 0x6e
 8015efc:	4617      	mov	r7, r2
 8015efe:	4606      	mov	r6, r0
 8015f00:	4698      	mov	r8, r3
 8015f02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015f04:	f000 80b3 	beq.w	801606e <_printf_i+0x182>
 8015f08:	d822      	bhi.n	8015f50 <_printf_i+0x64>
 8015f0a:	2963      	cmp	r1, #99	; 0x63
 8015f0c:	d036      	beq.n	8015f7c <_printf_i+0x90>
 8015f0e:	d80a      	bhi.n	8015f26 <_printf_i+0x3a>
 8015f10:	2900      	cmp	r1, #0
 8015f12:	f000 80b9 	beq.w	8016088 <_printf_i+0x19c>
 8015f16:	2958      	cmp	r1, #88	; 0x58
 8015f18:	f000 8083 	beq.w	8016022 <_printf_i+0x136>
 8015f1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015f20:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8015f24:	e032      	b.n	8015f8c <_printf_i+0xa0>
 8015f26:	2964      	cmp	r1, #100	; 0x64
 8015f28:	d001      	beq.n	8015f2e <_printf_i+0x42>
 8015f2a:	2969      	cmp	r1, #105	; 0x69
 8015f2c:	d1f6      	bne.n	8015f1c <_printf_i+0x30>
 8015f2e:	6820      	ldr	r0, [r4, #0]
 8015f30:	6813      	ldr	r3, [r2, #0]
 8015f32:	0605      	lsls	r5, r0, #24
 8015f34:	f103 0104 	add.w	r1, r3, #4
 8015f38:	d52a      	bpl.n	8015f90 <_printf_i+0xa4>
 8015f3a:	681b      	ldr	r3, [r3, #0]
 8015f3c:	6011      	str	r1, [r2, #0]
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	da03      	bge.n	8015f4a <_printf_i+0x5e>
 8015f42:	222d      	movs	r2, #45	; 0x2d
 8015f44:	425b      	negs	r3, r3
 8015f46:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8015f4a:	486f      	ldr	r0, [pc, #444]	; (8016108 <_printf_i+0x21c>)
 8015f4c:	220a      	movs	r2, #10
 8015f4e:	e039      	b.n	8015fc4 <_printf_i+0xd8>
 8015f50:	2973      	cmp	r1, #115	; 0x73
 8015f52:	f000 809d 	beq.w	8016090 <_printf_i+0x1a4>
 8015f56:	d808      	bhi.n	8015f6a <_printf_i+0x7e>
 8015f58:	296f      	cmp	r1, #111	; 0x6f
 8015f5a:	d020      	beq.n	8015f9e <_printf_i+0xb2>
 8015f5c:	2970      	cmp	r1, #112	; 0x70
 8015f5e:	d1dd      	bne.n	8015f1c <_printf_i+0x30>
 8015f60:	6823      	ldr	r3, [r4, #0]
 8015f62:	f043 0320 	orr.w	r3, r3, #32
 8015f66:	6023      	str	r3, [r4, #0]
 8015f68:	e003      	b.n	8015f72 <_printf_i+0x86>
 8015f6a:	2975      	cmp	r1, #117	; 0x75
 8015f6c:	d017      	beq.n	8015f9e <_printf_i+0xb2>
 8015f6e:	2978      	cmp	r1, #120	; 0x78
 8015f70:	d1d4      	bne.n	8015f1c <_printf_i+0x30>
 8015f72:	2378      	movs	r3, #120	; 0x78
 8015f74:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015f78:	4864      	ldr	r0, [pc, #400]	; (801610c <_printf_i+0x220>)
 8015f7a:	e055      	b.n	8016028 <_printf_i+0x13c>
 8015f7c:	6813      	ldr	r3, [r2, #0]
 8015f7e:	1d19      	adds	r1, r3, #4
 8015f80:	681b      	ldr	r3, [r3, #0]
 8015f82:	6011      	str	r1, [r2, #0]
 8015f84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015f88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015f8c:	2301      	movs	r3, #1
 8015f8e:	e08c      	b.n	80160aa <_printf_i+0x1be>
 8015f90:	681b      	ldr	r3, [r3, #0]
 8015f92:	6011      	str	r1, [r2, #0]
 8015f94:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015f98:	bf18      	it	ne
 8015f9a:	b21b      	sxthne	r3, r3
 8015f9c:	e7cf      	b.n	8015f3e <_printf_i+0x52>
 8015f9e:	6813      	ldr	r3, [r2, #0]
 8015fa0:	6825      	ldr	r5, [r4, #0]
 8015fa2:	1d18      	adds	r0, r3, #4
 8015fa4:	6010      	str	r0, [r2, #0]
 8015fa6:	0628      	lsls	r0, r5, #24
 8015fa8:	d501      	bpl.n	8015fae <_printf_i+0xc2>
 8015faa:	681b      	ldr	r3, [r3, #0]
 8015fac:	e002      	b.n	8015fb4 <_printf_i+0xc8>
 8015fae:	0668      	lsls	r0, r5, #25
 8015fb0:	d5fb      	bpl.n	8015faa <_printf_i+0xbe>
 8015fb2:	881b      	ldrh	r3, [r3, #0]
 8015fb4:	4854      	ldr	r0, [pc, #336]	; (8016108 <_printf_i+0x21c>)
 8015fb6:	296f      	cmp	r1, #111	; 0x6f
 8015fb8:	bf14      	ite	ne
 8015fba:	220a      	movne	r2, #10
 8015fbc:	2208      	moveq	r2, #8
 8015fbe:	2100      	movs	r1, #0
 8015fc0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015fc4:	6865      	ldr	r5, [r4, #4]
 8015fc6:	60a5      	str	r5, [r4, #8]
 8015fc8:	2d00      	cmp	r5, #0
 8015fca:	f2c0 8095 	blt.w	80160f8 <_printf_i+0x20c>
 8015fce:	6821      	ldr	r1, [r4, #0]
 8015fd0:	f021 0104 	bic.w	r1, r1, #4
 8015fd4:	6021      	str	r1, [r4, #0]
 8015fd6:	2b00      	cmp	r3, #0
 8015fd8:	d13d      	bne.n	8016056 <_printf_i+0x16a>
 8015fda:	2d00      	cmp	r5, #0
 8015fdc:	f040 808e 	bne.w	80160fc <_printf_i+0x210>
 8015fe0:	4665      	mov	r5, ip
 8015fe2:	2a08      	cmp	r2, #8
 8015fe4:	d10b      	bne.n	8015ffe <_printf_i+0x112>
 8015fe6:	6823      	ldr	r3, [r4, #0]
 8015fe8:	07db      	lsls	r3, r3, #31
 8015fea:	d508      	bpl.n	8015ffe <_printf_i+0x112>
 8015fec:	6923      	ldr	r3, [r4, #16]
 8015fee:	6862      	ldr	r2, [r4, #4]
 8015ff0:	429a      	cmp	r2, r3
 8015ff2:	bfde      	ittt	le
 8015ff4:	2330      	movle	r3, #48	; 0x30
 8015ff6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015ffa:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015ffe:	ebac 0305 	sub.w	r3, ip, r5
 8016002:	6123      	str	r3, [r4, #16]
 8016004:	f8cd 8000 	str.w	r8, [sp]
 8016008:	463b      	mov	r3, r7
 801600a:	aa03      	add	r2, sp, #12
 801600c:	4621      	mov	r1, r4
 801600e:	4630      	mov	r0, r6
 8016010:	f7ff fef6 	bl	8015e00 <_printf_common>
 8016014:	3001      	adds	r0, #1
 8016016:	d14d      	bne.n	80160b4 <_printf_i+0x1c8>
 8016018:	f04f 30ff 	mov.w	r0, #4294967295
 801601c:	b005      	add	sp, #20
 801601e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016022:	4839      	ldr	r0, [pc, #228]	; (8016108 <_printf_i+0x21c>)
 8016024:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8016028:	6813      	ldr	r3, [r2, #0]
 801602a:	6821      	ldr	r1, [r4, #0]
 801602c:	1d1d      	adds	r5, r3, #4
 801602e:	681b      	ldr	r3, [r3, #0]
 8016030:	6015      	str	r5, [r2, #0]
 8016032:	060a      	lsls	r2, r1, #24
 8016034:	d50b      	bpl.n	801604e <_printf_i+0x162>
 8016036:	07ca      	lsls	r2, r1, #31
 8016038:	bf44      	itt	mi
 801603a:	f041 0120 	orrmi.w	r1, r1, #32
 801603e:	6021      	strmi	r1, [r4, #0]
 8016040:	b91b      	cbnz	r3, 801604a <_printf_i+0x15e>
 8016042:	6822      	ldr	r2, [r4, #0]
 8016044:	f022 0220 	bic.w	r2, r2, #32
 8016048:	6022      	str	r2, [r4, #0]
 801604a:	2210      	movs	r2, #16
 801604c:	e7b7      	b.n	8015fbe <_printf_i+0xd2>
 801604e:	064d      	lsls	r5, r1, #25
 8016050:	bf48      	it	mi
 8016052:	b29b      	uxthmi	r3, r3
 8016054:	e7ef      	b.n	8016036 <_printf_i+0x14a>
 8016056:	4665      	mov	r5, ip
 8016058:	fbb3 f1f2 	udiv	r1, r3, r2
 801605c:	fb02 3311 	mls	r3, r2, r1, r3
 8016060:	5cc3      	ldrb	r3, [r0, r3]
 8016062:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8016066:	460b      	mov	r3, r1
 8016068:	2900      	cmp	r1, #0
 801606a:	d1f5      	bne.n	8016058 <_printf_i+0x16c>
 801606c:	e7b9      	b.n	8015fe2 <_printf_i+0xf6>
 801606e:	6813      	ldr	r3, [r2, #0]
 8016070:	6825      	ldr	r5, [r4, #0]
 8016072:	6961      	ldr	r1, [r4, #20]
 8016074:	1d18      	adds	r0, r3, #4
 8016076:	6010      	str	r0, [r2, #0]
 8016078:	0628      	lsls	r0, r5, #24
 801607a:	681b      	ldr	r3, [r3, #0]
 801607c:	d501      	bpl.n	8016082 <_printf_i+0x196>
 801607e:	6019      	str	r1, [r3, #0]
 8016080:	e002      	b.n	8016088 <_printf_i+0x19c>
 8016082:	066a      	lsls	r2, r5, #25
 8016084:	d5fb      	bpl.n	801607e <_printf_i+0x192>
 8016086:	8019      	strh	r1, [r3, #0]
 8016088:	2300      	movs	r3, #0
 801608a:	6123      	str	r3, [r4, #16]
 801608c:	4665      	mov	r5, ip
 801608e:	e7b9      	b.n	8016004 <_printf_i+0x118>
 8016090:	6813      	ldr	r3, [r2, #0]
 8016092:	1d19      	adds	r1, r3, #4
 8016094:	6011      	str	r1, [r2, #0]
 8016096:	681d      	ldr	r5, [r3, #0]
 8016098:	6862      	ldr	r2, [r4, #4]
 801609a:	2100      	movs	r1, #0
 801609c:	4628      	mov	r0, r5
 801609e:	f7ea f89f 	bl	80001e0 <memchr>
 80160a2:	b108      	cbz	r0, 80160a8 <_printf_i+0x1bc>
 80160a4:	1b40      	subs	r0, r0, r5
 80160a6:	6060      	str	r0, [r4, #4]
 80160a8:	6863      	ldr	r3, [r4, #4]
 80160aa:	6123      	str	r3, [r4, #16]
 80160ac:	2300      	movs	r3, #0
 80160ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80160b2:	e7a7      	b.n	8016004 <_printf_i+0x118>
 80160b4:	6923      	ldr	r3, [r4, #16]
 80160b6:	462a      	mov	r2, r5
 80160b8:	4639      	mov	r1, r7
 80160ba:	4630      	mov	r0, r6
 80160bc:	47c0      	blx	r8
 80160be:	3001      	adds	r0, #1
 80160c0:	d0aa      	beq.n	8016018 <_printf_i+0x12c>
 80160c2:	6823      	ldr	r3, [r4, #0]
 80160c4:	079b      	lsls	r3, r3, #30
 80160c6:	d413      	bmi.n	80160f0 <_printf_i+0x204>
 80160c8:	68e0      	ldr	r0, [r4, #12]
 80160ca:	9b03      	ldr	r3, [sp, #12]
 80160cc:	4298      	cmp	r0, r3
 80160ce:	bfb8      	it	lt
 80160d0:	4618      	movlt	r0, r3
 80160d2:	e7a3      	b.n	801601c <_printf_i+0x130>
 80160d4:	2301      	movs	r3, #1
 80160d6:	464a      	mov	r2, r9
 80160d8:	4639      	mov	r1, r7
 80160da:	4630      	mov	r0, r6
 80160dc:	47c0      	blx	r8
 80160de:	3001      	adds	r0, #1
 80160e0:	d09a      	beq.n	8016018 <_printf_i+0x12c>
 80160e2:	3501      	adds	r5, #1
 80160e4:	68e3      	ldr	r3, [r4, #12]
 80160e6:	9a03      	ldr	r2, [sp, #12]
 80160e8:	1a9b      	subs	r3, r3, r2
 80160ea:	42ab      	cmp	r3, r5
 80160ec:	dcf2      	bgt.n	80160d4 <_printf_i+0x1e8>
 80160ee:	e7eb      	b.n	80160c8 <_printf_i+0x1dc>
 80160f0:	2500      	movs	r5, #0
 80160f2:	f104 0919 	add.w	r9, r4, #25
 80160f6:	e7f5      	b.n	80160e4 <_printf_i+0x1f8>
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d1ac      	bne.n	8016056 <_printf_i+0x16a>
 80160fc:	7803      	ldrb	r3, [r0, #0]
 80160fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016102:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016106:	e76c      	b.n	8015fe2 <_printf_i+0xf6>
 8016108:	0801b12e 	.word	0x0801b12e
 801610c:	0801b13f 	.word	0x0801b13f

08016110 <_scanf_float>:
 8016110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016114:	469a      	mov	sl, r3
 8016116:	688b      	ldr	r3, [r1, #8]
 8016118:	4616      	mov	r6, r2
 801611a:	1e5a      	subs	r2, r3, #1
 801611c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016120:	b087      	sub	sp, #28
 8016122:	bf83      	ittte	hi
 8016124:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8016128:	189b      	addhi	r3, r3, r2
 801612a:	9301      	strhi	r3, [sp, #4]
 801612c:	2300      	movls	r3, #0
 801612e:	bf86      	itte	hi
 8016130:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016134:	608b      	strhi	r3, [r1, #8]
 8016136:	9301      	strls	r3, [sp, #4]
 8016138:	680b      	ldr	r3, [r1, #0]
 801613a:	4688      	mov	r8, r1
 801613c:	f04f 0b00 	mov.w	fp, #0
 8016140:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8016144:	f848 3b1c 	str.w	r3, [r8], #28
 8016148:	e9cd bb03 	strd	fp, fp, [sp, #12]
 801614c:	4607      	mov	r7, r0
 801614e:	460c      	mov	r4, r1
 8016150:	4645      	mov	r5, r8
 8016152:	465a      	mov	r2, fp
 8016154:	46d9      	mov	r9, fp
 8016156:	f8cd b008 	str.w	fp, [sp, #8]
 801615a:	68a1      	ldr	r1, [r4, #8]
 801615c:	b181      	cbz	r1, 8016180 <_scanf_float+0x70>
 801615e:	6833      	ldr	r3, [r6, #0]
 8016160:	781b      	ldrb	r3, [r3, #0]
 8016162:	2b49      	cmp	r3, #73	; 0x49
 8016164:	d071      	beq.n	801624a <_scanf_float+0x13a>
 8016166:	d84d      	bhi.n	8016204 <_scanf_float+0xf4>
 8016168:	2b39      	cmp	r3, #57	; 0x39
 801616a:	d840      	bhi.n	80161ee <_scanf_float+0xde>
 801616c:	2b31      	cmp	r3, #49	; 0x31
 801616e:	f080 8088 	bcs.w	8016282 <_scanf_float+0x172>
 8016172:	2b2d      	cmp	r3, #45	; 0x2d
 8016174:	f000 8090 	beq.w	8016298 <_scanf_float+0x188>
 8016178:	d815      	bhi.n	80161a6 <_scanf_float+0x96>
 801617a:	2b2b      	cmp	r3, #43	; 0x2b
 801617c:	f000 808c 	beq.w	8016298 <_scanf_float+0x188>
 8016180:	f1b9 0f00 	cmp.w	r9, #0
 8016184:	d003      	beq.n	801618e <_scanf_float+0x7e>
 8016186:	6823      	ldr	r3, [r4, #0]
 8016188:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801618c:	6023      	str	r3, [r4, #0]
 801618e:	3a01      	subs	r2, #1
 8016190:	2a01      	cmp	r2, #1
 8016192:	f200 80ea 	bhi.w	801636a <_scanf_float+0x25a>
 8016196:	4545      	cmp	r5, r8
 8016198:	f200 80dc 	bhi.w	8016354 <_scanf_float+0x244>
 801619c:	2601      	movs	r6, #1
 801619e:	4630      	mov	r0, r6
 80161a0:	b007      	add	sp, #28
 80161a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161a6:	2b2e      	cmp	r3, #46	; 0x2e
 80161a8:	f000 809f 	beq.w	80162ea <_scanf_float+0x1da>
 80161ac:	2b30      	cmp	r3, #48	; 0x30
 80161ae:	d1e7      	bne.n	8016180 <_scanf_float+0x70>
 80161b0:	6820      	ldr	r0, [r4, #0]
 80161b2:	f410 7f80 	tst.w	r0, #256	; 0x100
 80161b6:	d064      	beq.n	8016282 <_scanf_float+0x172>
 80161b8:	9b01      	ldr	r3, [sp, #4]
 80161ba:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80161be:	6020      	str	r0, [r4, #0]
 80161c0:	f109 0901 	add.w	r9, r9, #1
 80161c4:	b11b      	cbz	r3, 80161ce <_scanf_float+0xbe>
 80161c6:	3b01      	subs	r3, #1
 80161c8:	3101      	adds	r1, #1
 80161ca:	9301      	str	r3, [sp, #4]
 80161cc:	60a1      	str	r1, [r4, #8]
 80161ce:	68a3      	ldr	r3, [r4, #8]
 80161d0:	3b01      	subs	r3, #1
 80161d2:	60a3      	str	r3, [r4, #8]
 80161d4:	6923      	ldr	r3, [r4, #16]
 80161d6:	3301      	adds	r3, #1
 80161d8:	6123      	str	r3, [r4, #16]
 80161da:	6873      	ldr	r3, [r6, #4]
 80161dc:	3b01      	subs	r3, #1
 80161de:	2b00      	cmp	r3, #0
 80161e0:	6073      	str	r3, [r6, #4]
 80161e2:	f340 80ac 	ble.w	801633e <_scanf_float+0x22e>
 80161e6:	6833      	ldr	r3, [r6, #0]
 80161e8:	3301      	adds	r3, #1
 80161ea:	6033      	str	r3, [r6, #0]
 80161ec:	e7b5      	b.n	801615a <_scanf_float+0x4a>
 80161ee:	2b45      	cmp	r3, #69	; 0x45
 80161f0:	f000 8085 	beq.w	80162fe <_scanf_float+0x1ee>
 80161f4:	2b46      	cmp	r3, #70	; 0x46
 80161f6:	d06a      	beq.n	80162ce <_scanf_float+0x1be>
 80161f8:	2b41      	cmp	r3, #65	; 0x41
 80161fa:	d1c1      	bne.n	8016180 <_scanf_float+0x70>
 80161fc:	2a01      	cmp	r2, #1
 80161fe:	d1bf      	bne.n	8016180 <_scanf_float+0x70>
 8016200:	2202      	movs	r2, #2
 8016202:	e046      	b.n	8016292 <_scanf_float+0x182>
 8016204:	2b65      	cmp	r3, #101	; 0x65
 8016206:	d07a      	beq.n	80162fe <_scanf_float+0x1ee>
 8016208:	d818      	bhi.n	801623c <_scanf_float+0x12c>
 801620a:	2b54      	cmp	r3, #84	; 0x54
 801620c:	d066      	beq.n	80162dc <_scanf_float+0x1cc>
 801620e:	d811      	bhi.n	8016234 <_scanf_float+0x124>
 8016210:	2b4e      	cmp	r3, #78	; 0x4e
 8016212:	d1b5      	bne.n	8016180 <_scanf_float+0x70>
 8016214:	2a00      	cmp	r2, #0
 8016216:	d146      	bne.n	80162a6 <_scanf_float+0x196>
 8016218:	f1b9 0f00 	cmp.w	r9, #0
 801621c:	d145      	bne.n	80162aa <_scanf_float+0x19a>
 801621e:	6821      	ldr	r1, [r4, #0]
 8016220:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8016224:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8016228:	d13f      	bne.n	80162aa <_scanf_float+0x19a>
 801622a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801622e:	6021      	str	r1, [r4, #0]
 8016230:	2201      	movs	r2, #1
 8016232:	e02e      	b.n	8016292 <_scanf_float+0x182>
 8016234:	2b59      	cmp	r3, #89	; 0x59
 8016236:	d01e      	beq.n	8016276 <_scanf_float+0x166>
 8016238:	2b61      	cmp	r3, #97	; 0x61
 801623a:	e7de      	b.n	80161fa <_scanf_float+0xea>
 801623c:	2b6e      	cmp	r3, #110	; 0x6e
 801623e:	d0e9      	beq.n	8016214 <_scanf_float+0x104>
 8016240:	d815      	bhi.n	801626e <_scanf_float+0x15e>
 8016242:	2b66      	cmp	r3, #102	; 0x66
 8016244:	d043      	beq.n	80162ce <_scanf_float+0x1be>
 8016246:	2b69      	cmp	r3, #105	; 0x69
 8016248:	d19a      	bne.n	8016180 <_scanf_float+0x70>
 801624a:	f1bb 0f00 	cmp.w	fp, #0
 801624e:	d138      	bne.n	80162c2 <_scanf_float+0x1b2>
 8016250:	f1b9 0f00 	cmp.w	r9, #0
 8016254:	d197      	bne.n	8016186 <_scanf_float+0x76>
 8016256:	6821      	ldr	r1, [r4, #0]
 8016258:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801625c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8016260:	d195      	bne.n	801618e <_scanf_float+0x7e>
 8016262:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016266:	6021      	str	r1, [r4, #0]
 8016268:	f04f 0b01 	mov.w	fp, #1
 801626c:	e011      	b.n	8016292 <_scanf_float+0x182>
 801626e:	2b74      	cmp	r3, #116	; 0x74
 8016270:	d034      	beq.n	80162dc <_scanf_float+0x1cc>
 8016272:	2b79      	cmp	r3, #121	; 0x79
 8016274:	d184      	bne.n	8016180 <_scanf_float+0x70>
 8016276:	f1bb 0f07 	cmp.w	fp, #7
 801627a:	d181      	bne.n	8016180 <_scanf_float+0x70>
 801627c:	f04f 0b08 	mov.w	fp, #8
 8016280:	e007      	b.n	8016292 <_scanf_float+0x182>
 8016282:	eb12 0f0b 	cmn.w	r2, fp
 8016286:	f47f af7b 	bne.w	8016180 <_scanf_float+0x70>
 801628a:	6821      	ldr	r1, [r4, #0]
 801628c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8016290:	6021      	str	r1, [r4, #0]
 8016292:	702b      	strb	r3, [r5, #0]
 8016294:	3501      	adds	r5, #1
 8016296:	e79a      	b.n	80161ce <_scanf_float+0xbe>
 8016298:	6821      	ldr	r1, [r4, #0]
 801629a:	0608      	lsls	r0, r1, #24
 801629c:	f57f af70 	bpl.w	8016180 <_scanf_float+0x70>
 80162a0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80162a4:	e7f4      	b.n	8016290 <_scanf_float+0x180>
 80162a6:	2a02      	cmp	r2, #2
 80162a8:	d047      	beq.n	801633a <_scanf_float+0x22a>
 80162aa:	f1bb 0f01 	cmp.w	fp, #1
 80162ae:	d003      	beq.n	80162b8 <_scanf_float+0x1a8>
 80162b0:	f1bb 0f04 	cmp.w	fp, #4
 80162b4:	f47f af64 	bne.w	8016180 <_scanf_float+0x70>
 80162b8:	f10b 0b01 	add.w	fp, fp, #1
 80162bc:	fa5f fb8b 	uxtb.w	fp, fp
 80162c0:	e7e7      	b.n	8016292 <_scanf_float+0x182>
 80162c2:	f1bb 0f03 	cmp.w	fp, #3
 80162c6:	d0f7      	beq.n	80162b8 <_scanf_float+0x1a8>
 80162c8:	f1bb 0f05 	cmp.w	fp, #5
 80162cc:	e7f2      	b.n	80162b4 <_scanf_float+0x1a4>
 80162ce:	f1bb 0f02 	cmp.w	fp, #2
 80162d2:	f47f af55 	bne.w	8016180 <_scanf_float+0x70>
 80162d6:	f04f 0b03 	mov.w	fp, #3
 80162da:	e7da      	b.n	8016292 <_scanf_float+0x182>
 80162dc:	f1bb 0f06 	cmp.w	fp, #6
 80162e0:	f47f af4e 	bne.w	8016180 <_scanf_float+0x70>
 80162e4:	f04f 0b07 	mov.w	fp, #7
 80162e8:	e7d3      	b.n	8016292 <_scanf_float+0x182>
 80162ea:	6821      	ldr	r1, [r4, #0]
 80162ec:	0588      	lsls	r0, r1, #22
 80162ee:	f57f af47 	bpl.w	8016180 <_scanf_float+0x70>
 80162f2:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80162f6:	6021      	str	r1, [r4, #0]
 80162f8:	f8cd 9008 	str.w	r9, [sp, #8]
 80162fc:	e7c9      	b.n	8016292 <_scanf_float+0x182>
 80162fe:	6821      	ldr	r1, [r4, #0]
 8016300:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8016304:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8016308:	d006      	beq.n	8016318 <_scanf_float+0x208>
 801630a:	0548      	lsls	r0, r1, #21
 801630c:	f57f af38 	bpl.w	8016180 <_scanf_float+0x70>
 8016310:	f1b9 0f00 	cmp.w	r9, #0
 8016314:	f43f af3b 	beq.w	801618e <_scanf_float+0x7e>
 8016318:	0588      	lsls	r0, r1, #22
 801631a:	bf58      	it	pl
 801631c:	9802      	ldrpl	r0, [sp, #8]
 801631e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016322:	bf58      	it	pl
 8016324:	eba9 0000 	subpl.w	r0, r9, r0
 8016328:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 801632c:	bf58      	it	pl
 801632e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8016332:	6021      	str	r1, [r4, #0]
 8016334:	f04f 0900 	mov.w	r9, #0
 8016338:	e7ab      	b.n	8016292 <_scanf_float+0x182>
 801633a:	2203      	movs	r2, #3
 801633c:	e7a9      	b.n	8016292 <_scanf_float+0x182>
 801633e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016342:	9205      	str	r2, [sp, #20]
 8016344:	4631      	mov	r1, r6
 8016346:	4638      	mov	r0, r7
 8016348:	4798      	blx	r3
 801634a:	9a05      	ldr	r2, [sp, #20]
 801634c:	2800      	cmp	r0, #0
 801634e:	f43f af04 	beq.w	801615a <_scanf_float+0x4a>
 8016352:	e715      	b.n	8016180 <_scanf_float+0x70>
 8016354:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016358:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801635c:	4632      	mov	r2, r6
 801635e:	4638      	mov	r0, r7
 8016360:	4798      	blx	r3
 8016362:	6923      	ldr	r3, [r4, #16]
 8016364:	3b01      	subs	r3, #1
 8016366:	6123      	str	r3, [r4, #16]
 8016368:	e715      	b.n	8016196 <_scanf_float+0x86>
 801636a:	f10b 33ff 	add.w	r3, fp, #4294967295
 801636e:	2b06      	cmp	r3, #6
 8016370:	d80a      	bhi.n	8016388 <_scanf_float+0x278>
 8016372:	f1bb 0f02 	cmp.w	fp, #2
 8016376:	d968      	bls.n	801644a <_scanf_float+0x33a>
 8016378:	f1ab 0b03 	sub.w	fp, fp, #3
 801637c:	fa5f fb8b 	uxtb.w	fp, fp
 8016380:	eba5 0b0b 	sub.w	fp, r5, fp
 8016384:	455d      	cmp	r5, fp
 8016386:	d14b      	bne.n	8016420 <_scanf_float+0x310>
 8016388:	6823      	ldr	r3, [r4, #0]
 801638a:	05da      	lsls	r2, r3, #23
 801638c:	d51f      	bpl.n	80163ce <_scanf_float+0x2be>
 801638e:	055b      	lsls	r3, r3, #21
 8016390:	d468      	bmi.n	8016464 <_scanf_float+0x354>
 8016392:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016396:	6923      	ldr	r3, [r4, #16]
 8016398:	2965      	cmp	r1, #101	; 0x65
 801639a:	f103 33ff 	add.w	r3, r3, #4294967295
 801639e:	f105 3bff 	add.w	fp, r5, #4294967295
 80163a2:	6123      	str	r3, [r4, #16]
 80163a4:	d00d      	beq.n	80163c2 <_scanf_float+0x2b2>
 80163a6:	2945      	cmp	r1, #69	; 0x45
 80163a8:	d00b      	beq.n	80163c2 <_scanf_float+0x2b2>
 80163aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80163ae:	4632      	mov	r2, r6
 80163b0:	4638      	mov	r0, r7
 80163b2:	4798      	blx	r3
 80163b4:	6923      	ldr	r3, [r4, #16]
 80163b6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80163ba:	3b01      	subs	r3, #1
 80163bc:	f1a5 0b02 	sub.w	fp, r5, #2
 80163c0:	6123      	str	r3, [r4, #16]
 80163c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80163c6:	4632      	mov	r2, r6
 80163c8:	4638      	mov	r0, r7
 80163ca:	4798      	blx	r3
 80163cc:	465d      	mov	r5, fp
 80163ce:	6826      	ldr	r6, [r4, #0]
 80163d0:	f016 0610 	ands.w	r6, r6, #16
 80163d4:	d17a      	bne.n	80164cc <_scanf_float+0x3bc>
 80163d6:	702e      	strb	r6, [r5, #0]
 80163d8:	6823      	ldr	r3, [r4, #0]
 80163da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80163de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80163e2:	d142      	bne.n	801646a <_scanf_float+0x35a>
 80163e4:	9b02      	ldr	r3, [sp, #8]
 80163e6:	eba9 0303 	sub.w	r3, r9, r3
 80163ea:	425a      	negs	r2, r3
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	d149      	bne.n	8016484 <_scanf_float+0x374>
 80163f0:	2200      	movs	r2, #0
 80163f2:	4641      	mov	r1, r8
 80163f4:	4638      	mov	r0, r7
 80163f6:	f000 fef7 	bl	80171e8 <_strtod_r>
 80163fa:	6825      	ldr	r5, [r4, #0]
 80163fc:	f8da 3000 	ldr.w	r3, [sl]
 8016400:	f015 0f02 	tst.w	r5, #2
 8016404:	f103 0204 	add.w	r2, r3, #4
 8016408:	ec59 8b10 	vmov	r8, r9, d0
 801640c:	f8ca 2000 	str.w	r2, [sl]
 8016410:	d043      	beq.n	801649a <_scanf_float+0x38a>
 8016412:	681b      	ldr	r3, [r3, #0]
 8016414:	e9c3 8900 	strd	r8, r9, [r3]
 8016418:	68e3      	ldr	r3, [r4, #12]
 801641a:	3301      	adds	r3, #1
 801641c:	60e3      	str	r3, [r4, #12]
 801641e:	e6be      	b.n	801619e <_scanf_float+0x8e>
 8016420:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016424:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016428:	4632      	mov	r2, r6
 801642a:	4638      	mov	r0, r7
 801642c:	4798      	blx	r3
 801642e:	6923      	ldr	r3, [r4, #16]
 8016430:	3b01      	subs	r3, #1
 8016432:	6123      	str	r3, [r4, #16]
 8016434:	e7a6      	b.n	8016384 <_scanf_float+0x274>
 8016436:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801643a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801643e:	4632      	mov	r2, r6
 8016440:	4638      	mov	r0, r7
 8016442:	4798      	blx	r3
 8016444:	6923      	ldr	r3, [r4, #16]
 8016446:	3b01      	subs	r3, #1
 8016448:	6123      	str	r3, [r4, #16]
 801644a:	4545      	cmp	r5, r8
 801644c:	d8f3      	bhi.n	8016436 <_scanf_float+0x326>
 801644e:	e6a5      	b.n	801619c <_scanf_float+0x8c>
 8016450:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016454:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016458:	4632      	mov	r2, r6
 801645a:	4638      	mov	r0, r7
 801645c:	4798      	blx	r3
 801645e:	6923      	ldr	r3, [r4, #16]
 8016460:	3b01      	subs	r3, #1
 8016462:	6123      	str	r3, [r4, #16]
 8016464:	4545      	cmp	r5, r8
 8016466:	d8f3      	bhi.n	8016450 <_scanf_float+0x340>
 8016468:	e698      	b.n	801619c <_scanf_float+0x8c>
 801646a:	9b03      	ldr	r3, [sp, #12]
 801646c:	2b00      	cmp	r3, #0
 801646e:	d0bf      	beq.n	80163f0 <_scanf_float+0x2e0>
 8016470:	9904      	ldr	r1, [sp, #16]
 8016472:	230a      	movs	r3, #10
 8016474:	4632      	mov	r2, r6
 8016476:	3101      	adds	r1, #1
 8016478:	4638      	mov	r0, r7
 801647a:	f000 ff41 	bl	8017300 <_strtol_r>
 801647e:	9b03      	ldr	r3, [sp, #12]
 8016480:	9d04      	ldr	r5, [sp, #16]
 8016482:	1ac2      	subs	r2, r0, r3
 8016484:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016488:	429d      	cmp	r5, r3
 801648a:	bf28      	it	cs
 801648c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8016490:	490f      	ldr	r1, [pc, #60]	; (80164d0 <_scanf_float+0x3c0>)
 8016492:	4628      	mov	r0, r5
 8016494:	f000 f868 	bl	8016568 <siprintf>
 8016498:	e7aa      	b.n	80163f0 <_scanf_float+0x2e0>
 801649a:	f015 0504 	ands.w	r5, r5, #4
 801649e:	d1b8      	bne.n	8016412 <_scanf_float+0x302>
 80164a0:	681f      	ldr	r7, [r3, #0]
 80164a2:	ee10 2a10 	vmov	r2, s0
 80164a6:	464b      	mov	r3, r9
 80164a8:	ee10 0a10 	vmov	r0, s0
 80164ac:	4649      	mov	r1, r9
 80164ae:	f7ea fb3d 	bl	8000b2c <__aeabi_dcmpun>
 80164b2:	b128      	cbz	r0, 80164c0 <_scanf_float+0x3b0>
 80164b4:	4628      	mov	r0, r5
 80164b6:	f000 f81d 	bl	80164f4 <nanf>
 80164ba:	ed87 0a00 	vstr	s0, [r7]
 80164be:	e7ab      	b.n	8016418 <_scanf_float+0x308>
 80164c0:	4640      	mov	r0, r8
 80164c2:	4649      	mov	r1, r9
 80164c4:	f7ea fb90 	bl	8000be8 <__aeabi_d2f>
 80164c8:	6038      	str	r0, [r7, #0]
 80164ca:	e7a5      	b.n	8016418 <_scanf_float+0x308>
 80164cc:	2600      	movs	r6, #0
 80164ce:	e666      	b.n	801619e <_scanf_float+0x8e>
 80164d0:	0801b150 	.word	0x0801b150

080164d4 <_sbrk_r>:
 80164d4:	b538      	push	{r3, r4, r5, lr}
 80164d6:	4c06      	ldr	r4, [pc, #24]	; (80164f0 <_sbrk_r+0x1c>)
 80164d8:	2300      	movs	r3, #0
 80164da:	4605      	mov	r5, r0
 80164dc:	4608      	mov	r0, r1
 80164de:	6023      	str	r3, [r4, #0]
 80164e0:	f7f4 fa92 	bl	800aa08 <_sbrk>
 80164e4:	1c43      	adds	r3, r0, #1
 80164e6:	d102      	bne.n	80164ee <_sbrk_r+0x1a>
 80164e8:	6823      	ldr	r3, [r4, #0]
 80164ea:	b103      	cbz	r3, 80164ee <_sbrk_r+0x1a>
 80164ec:	602b      	str	r3, [r5, #0]
 80164ee:	bd38      	pop	{r3, r4, r5, pc}
 80164f0:	20006e30 	.word	0x20006e30

080164f4 <nanf>:
 80164f4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80164fc <nanf+0x8>
 80164f8:	4770      	bx	lr
 80164fa:	bf00      	nop
 80164fc:	7fc00000 	.word	0x7fc00000

08016500 <sniprintf>:
 8016500:	b40c      	push	{r2, r3}
 8016502:	b530      	push	{r4, r5, lr}
 8016504:	4b17      	ldr	r3, [pc, #92]	; (8016564 <sniprintf+0x64>)
 8016506:	1e0c      	subs	r4, r1, #0
 8016508:	b09d      	sub	sp, #116	; 0x74
 801650a:	681d      	ldr	r5, [r3, #0]
 801650c:	da08      	bge.n	8016520 <sniprintf+0x20>
 801650e:	238b      	movs	r3, #139	; 0x8b
 8016510:	602b      	str	r3, [r5, #0]
 8016512:	f04f 30ff 	mov.w	r0, #4294967295
 8016516:	b01d      	add	sp, #116	; 0x74
 8016518:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801651c:	b002      	add	sp, #8
 801651e:	4770      	bx	lr
 8016520:	f44f 7302 	mov.w	r3, #520	; 0x208
 8016524:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016528:	bf14      	ite	ne
 801652a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801652e:	4623      	moveq	r3, r4
 8016530:	9304      	str	r3, [sp, #16]
 8016532:	9307      	str	r3, [sp, #28]
 8016534:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016538:	9002      	str	r0, [sp, #8]
 801653a:	9006      	str	r0, [sp, #24]
 801653c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016540:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016542:	ab21      	add	r3, sp, #132	; 0x84
 8016544:	a902      	add	r1, sp, #8
 8016546:	4628      	mov	r0, r5
 8016548:	9301      	str	r3, [sp, #4]
 801654a:	f002 fce7 	bl	8018f1c <_svfiprintf_r>
 801654e:	1c43      	adds	r3, r0, #1
 8016550:	bfbc      	itt	lt
 8016552:	238b      	movlt	r3, #139	; 0x8b
 8016554:	602b      	strlt	r3, [r5, #0]
 8016556:	2c00      	cmp	r4, #0
 8016558:	d0dd      	beq.n	8016516 <sniprintf+0x16>
 801655a:	9b02      	ldr	r3, [sp, #8]
 801655c:	2200      	movs	r2, #0
 801655e:	701a      	strb	r2, [r3, #0]
 8016560:	e7d9      	b.n	8016516 <sniprintf+0x16>
 8016562:	bf00      	nop
 8016564:	20000e0c 	.word	0x20000e0c

08016568 <siprintf>:
 8016568:	b40e      	push	{r1, r2, r3}
 801656a:	b500      	push	{lr}
 801656c:	b09c      	sub	sp, #112	; 0x70
 801656e:	ab1d      	add	r3, sp, #116	; 0x74
 8016570:	9002      	str	r0, [sp, #8]
 8016572:	9006      	str	r0, [sp, #24]
 8016574:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016578:	4809      	ldr	r0, [pc, #36]	; (80165a0 <siprintf+0x38>)
 801657a:	9107      	str	r1, [sp, #28]
 801657c:	9104      	str	r1, [sp, #16]
 801657e:	4909      	ldr	r1, [pc, #36]	; (80165a4 <siprintf+0x3c>)
 8016580:	f853 2b04 	ldr.w	r2, [r3], #4
 8016584:	9105      	str	r1, [sp, #20]
 8016586:	6800      	ldr	r0, [r0, #0]
 8016588:	9301      	str	r3, [sp, #4]
 801658a:	a902      	add	r1, sp, #8
 801658c:	f002 fcc6 	bl	8018f1c <_svfiprintf_r>
 8016590:	9b02      	ldr	r3, [sp, #8]
 8016592:	2200      	movs	r2, #0
 8016594:	701a      	strb	r2, [r3, #0]
 8016596:	b01c      	add	sp, #112	; 0x70
 8016598:	f85d eb04 	ldr.w	lr, [sp], #4
 801659c:	b003      	add	sp, #12
 801659e:	4770      	bx	lr
 80165a0:	20000e0c 	.word	0x20000e0c
 80165a4:	ffff0208 	.word	0xffff0208

080165a8 <strcat>:
 80165a8:	b510      	push	{r4, lr}
 80165aa:	4603      	mov	r3, r0
 80165ac:	781a      	ldrb	r2, [r3, #0]
 80165ae:	1c5c      	adds	r4, r3, #1
 80165b0:	b93a      	cbnz	r2, 80165c2 <strcat+0x1a>
 80165b2:	3b01      	subs	r3, #1
 80165b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80165b8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80165bc:	2a00      	cmp	r2, #0
 80165be:	d1f9      	bne.n	80165b4 <strcat+0xc>
 80165c0:	bd10      	pop	{r4, pc}
 80165c2:	4623      	mov	r3, r4
 80165c4:	e7f2      	b.n	80165ac <strcat+0x4>

080165c6 <sulp>:
 80165c6:	b570      	push	{r4, r5, r6, lr}
 80165c8:	4604      	mov	r4, r0
 80165ca:	460d      	mov	r5, r1
 80165cc:	ec45 4b10 	vmov	d0, r4, r5
 80165d0:	4616      	mov	r6, r2
 80165d2:	f002 fb07 	bl	8018be4 <__ulp>
 80165d6:	ec51 0b10 	vmov	r0, r1, d0
 80165da:	b17e      	cbz	r6, 80165fc <sulp+0x36>
 80165dc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80165e0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	dd09      	ble.n	80165fc <sulp+0x36>
 80165e8:	051b      	lsls	r3, r3, #20
 80165ea:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80165ee:	2400      	movs	r4, #0
 80165f0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80165f4:	4622      	mov	r2, r4
 80165f6:	462b      	mov	r3, r5
 80165f8:	f7e9 fffe 	bl	80005f8 <__aeabi_dmul>
 80165fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08016600 <_strtod_l>:
 8016600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016604:	461f      	mov	r7, r3
 8016606:	b0a1      	sub	sp, #132	; 0x84
 8016608:	2300      	movs	r3, #0
 801660a:	4681      	mov	r9, r0
 801660c:	4638      	mov	r0, r7
 801660e:	460e      	mov	r6, r1
 8016610:	9217      	str	r2, [sp, #92]	; 0x5c
 8016612:	931c      	str	r3, [sp, #112]	; 0x70
 8016614:	f001 fff5 	bl	8018602 <__localeconv_l>
 8016618:	4680      	mov	r8, r0
 801661a:	6800      	ldr	r0, [r0, #0]
 801661c:	f7e9 fdd8 	bl	80001d0 <strlen>
 8016620:	f04f 0a00 	mov.w	sl, #0
 8016624:	4604      	mov	r4, r0
 8016626:	f04f 0b00 	mov.w	fp, #0
 801662a:	961b      	str	r6, [sp, #108]	; 0x6c
 801662c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801662e:	781a      	ldrb	r2, [r3, #0]
 8016630:	2a0d      	cmp	r2, #13
 8016632:	d832      	bhi.n	801669a <_strtod_l+0x9a>
 8016634:	2a09      	cmp	r2, #9
 8016636:	d236      	bcs.n	80166a6 <_strtod_l+0xa6>
 8016638:	2a00      	cmp	r2, #0
 801663a:	d03e      	beq.n	80166ba <_strtod_l+0xba>
 801663c:	2300      	movs	r3, #0
 801663e:	930d      	str	r3, [sp, #52]	; 0x34
 8016640:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8016642:	782b      	ldrb	r3, [r5, #0]
 8016644:	2b30      	cmp	r3, #48	; 0x30
 8016646:	f040 80ac 	bne.w	80167a2 <_strtod_l+0x1a2>
 801664a:	786b      	ldrb	r3, [r5, #1]
 801664c:	2b58      	cmp	r3, #88	; 0x58
 801664e:	d001      	beq.n	8016654 <_strtod_l+0x54>
 8016650:	2b78      	cmp	r3, #120	; 0x78
 8016652:	d167      	bne.n	8016724 <_strtod_l+0x124>
 8016654:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016656:	9301      	str	r3, [sp, #4]
 8016658:	ab1c      	add	r3, sp, #112	; 0x70
 801665a:	9300      	str	r3, [sp, #0]
 801665c:	9702      	str	r7, [sp, #8]
 801665e:	ab1d      	add	r3, sp, #116	; 0x74
 8016660:	4a88      	ldr	r2, [pc, #544]	; (8016884 <_strtod_l+0x284>)
 8016662:	a91b      	add	r1, sp, #108	; 0x6c
 8016664:	4648      	mov	r0, r9
 8016666:	f001 fcf2 	bl	801804e <__gethex>
 801666a:	f010 0407 	ands.w	r4, r0, #7
 801666e:	4606      	mov	r6, r0
 8016670:	d005      	beq.n	801667e <_strtod_l+0x7e>
 8016672:	2c06      	cmp	r4, #6
 8016674:	d12b      	bne.n	80166ce <_strtod_l+0xce>
 8016676:	3501      	adds	r5, #1
 8016678:	2300      	movs	r3, #0
 801667a:	951b      	str	r5, [sp, #108]	; 0x6c
 801667c:	930d      	str	r3, [sp, #52]	; 0x34
 801667e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016680:	2b00      	cmp	r3, #0
 8016682:	f040 859a 	bne.w	80171ba <_strtod_l+0xbba>
 8016686:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016688:	b1e3      	cbz	r3, 80166c4 <_strtod_l+0xc4>
 801668a:	4652      	mov	r2, sl
 801668c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016690:	ec43 2b10 	vmov	d0, r2, r3
 8016694:	b021      	add	sp, #132	; 0x84
 8016696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801669a:	2a2b      	cmp	r2, #43	; 0x2b
 801669c:	d015      	beq.n	80166ca <_strtod_l+0xca>
 801669e:	2a2d      	cmp	r2, #45	; 0x2d
 80166a0:	d004      	beq.n	80166ac <_strtod_l+0xac>
 80166a2:	2a20      	cmp	r2, #32
 80166a4:	d1ca      	bne.n	801663c <_strtod_l+0x3c>
 80166a6:	3301      	adds	r3, #1
 80166a8:	931b      	str	r3, [sp, #108]	; 0x6c
 80166aa:	e7bf      	b.n	801662c <_strtod_l+0x2c>
 80166ac:	2201      	movs	r2, #1
 80166ae:	920d      	str	r2, [sp, #52]	; 0x34
 80166b0:	1c5a      	adds	r2, r3, #1
 80166b2:	921b      	str	r2, [sp, #108]	; 0x6c
 80166b4:	785b      	ldrb	r3, [r3, #1]
 80166b6:	2b00      	cmp	r3, #0
 80166b8:	d1c2      	bne.n	8016640 <_strtod_l+0x40>
 80166ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80166bc:	961b      	str	r6, [sp, #108]	; 0x6c
 80166be:	2b00      	cmp	r3, #0
 80166c0:	f040 8579 	bne.w	80171b6 <_strtod_l+0xbb6>
 80166c4:	4652      	mov	r2, sl
 80166c6:	465b      	mov	r3, fp
 80166c8:	e7e2      	b.n	8016690 <_strtod_l+0x90>
 80166ca:	2200      	movs	r2, #0
 80166cc:	e7ef      	b.n	80166ae <_strtod_l+0xae>
 80166ce:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80166d0:	b13a      	cbz	r2, 80166e2 <_strtod_l+0xe2>
 80166d2:	2135      	movs	r1, #53	; 0x35
 80166d4:	a81e      	add	r0, sp, #120	; 0x78
 80166d6:	f002 fb7d 	bl	8018dd4 <__copybits>
 80166da:	991c      	ldr	r1, [sp, #112]	; 0x70
 80166dc:	4648      	mov	r0, r9
 80166de:	f001 ffe9 	bl	80186b4 <_Bfree>
 80166e2:	3c01      	subs	r4, #1
 80166e4:	2c04      	cmp	r4, #4
 80166e6:	d806      	bhi.n	80166f6 <_strtod_l+0xf6>
 80166e8:	e8df f004 	tbb	[pc, r4]
 80166ec:	1714030a 	.word	0x1714030a
 80166f0:	0a          	.byte	0x0a
 80166f1:	00          	.byte	0x00
 80166f2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80166f6:	0730      	lsls	r0, r6, #28
 80166f8:	d5c1      	bpl.n	801667e <_strtod_l+0x7e>
 80166fa:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80166fe:	e7be      	b.n	801667e <_strtod_l+0x7e>
 8016700:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8016704:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016706:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801670a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801670e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016712:	e7f0      	b.n	80166f6 <_strtod_l+0xf6>
 8016714:	f8df b170 	ldr.w	fp, [pc, #368]	; 8016888 <_strtod_l+0x288>
 8016718:	e7ed      	b.n	80166f6 <_strtod_l+0xf6>
 801671a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801671e:	f04f 3aff 	mov.w	sl, #4294967295
 8016722:	e7e8      	b.n	80166f6 <_strtod_l+0xf6>
 8016724:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016726:	1c5a      	adds	r2, r3, #1
 8016728:	921b      	str	r2, [sp, #108]	; 0x6c
 801672a:	785b      	ldrb	r3, [r3, #1]
 801672c:	2b30      	cmp	r3, #48	; 0x30
 801672e:	d0f9      	beq.n	8016724 <_strtod_l+0x124>
 8016730:	2b00      	cmp	r3, #0
 8016732:	d0a4      	beq.n	801667e <_strtod_l+0x7e>
 8016734:	2301      	movs	r3, #1
 8016736:	2500      	movs	r5, #0
 8016738:	9306      	str	r3, [sp, #24]
 801673a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801673c:	9308      	str	r3, [sp, #32]
 801673e:	9507      	str	r5, [sp, #28]
 8016740:	9505      	str	r5, [sp, #20]
 8016742:	220a      	movs	r2, #10
 8016744:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8016746:	7807      	ldrb	r7, [r0, #0]
 8016748:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 801674c:	b2d9      	uxtb	r1, r3
 801674e:	2909      	cmp	r1, #9
 8016750:	d929      	bls.n	80167a6 <_strtod_l+0x1a6>
 8016752:	4622      	mov	r2, r4
 8016754:	f8d8 1000 	ldr.w	r1, [r8]
 8016758:	f002 fcd8 	bl	801910c <strncmp>
 801675c:	2800      	cmp	r0, #0
 801675e:	d031      	beq.n	80167c4 <_strtod_l+0x1c4>
 8016760:	2000      	movs	r0, #0
 8016762:	9c05      	ldr	r4, [sp, #20]
 8016764:	9004      	str	r0, [sp, #16]
 8016766:	463b      	mov	r3, r7
 8016768:	4602      	mov	r2, r0
 801676a:	2b65      	cmp	r3, #101	; 0x65
 801676c:	d001      	beq.n	8016772 <_strtod_l+0x172>
 801676e:	2b45      	cmp	r3, #69	; 0x45
 8016770:	d114      	bne.n	801679c <_strtod_l+0x19c>
 8016772:	b924      	cbnz	r4, 801677e <_strtod_l+0x17e>
 8016774:	b910      	cbnz	r0, 801677c <_strtod_l+0x17c>
 8016776:	9b06      	ldr	r3, [sp, #24]
 8016778:	2b00      	cmp	r3, #0
 801677a:	d09e      	beq.n	80166ba <_strtod_l+0xba>
 801677c:	2400      	movs	r4, #0
 801677e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8016780:	1c73      	adds	r3, r6, #1
 8016782:	931b      	str	r3, [sp, #108]	; 0x6c
 8016784:	7873      	ldrb	r3, [r6, #1]
 8016786:	2b2b      	cmp	r3, #43	; 0x2b
 8016788:	d078      	beq.n	801687c <_strtod_l+0x27c>
 801678a:	2b2d      	cmp	r3, #45	; 0x2d
 801678c:	d070      	beq.n	8016870 <_strtod_l+0x270>
 801678e:	f04f 0c00 	mov.w	ip, #0
 8016792:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8016796:	2f09      	cmp	r7, #9
 8016798:	d97c      	bls.n	8016894 <_strtod_l+0x294>
 801679a:	961b      	str	r6, [sp, #108]	; 0x6c
 801679c:	f04f 0e00 	mov.w	lr, #0
 80167a0:	e09a      	b.n	80168d8 <_strtod_l+0x2d8>
 80167a2:	2300      	movs	r3, #0
 80167a4:	e7c7      	b.n	8016736 <_strtod_l+0x136>
 80167a6:	9905      	ldr	r1, [sp, #20]
 80167a8:	2908      	cmp	r1, #8
 80167aa:	bfdd      	ittte	le
 80167ac:	9907      	ldrle	r1, [sp, #28]
 80167ae:	fb02 3301 	mlale	r3, r2, r1, r3
 80167b2:	9307      	strle	r3, [sp, #28]
 80167b4:	fb02 3505 	mlagt	r5, r2, r5, r3
 80167b8:	9b05      	ldr	r3, [sp, #20]
 80167ba:	3001      	adds	r0, #1
 80167bc:	3301      	adds	r3, #1
 80167be:	9305      	str	r3, [sp, #20]
 80167c0:	901b      	str	r0, [sp, #108]	; 0x6c
 80167c2:	e7bf      	b.n	8016744 <_strtod_l+0x144>
 80167c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80167c6:	191a      	adds	r2, r3, r4
 80167c8:	921b      	str	r2, [sp, #108]	; 0x6c
 80167ca:	9a05      	ldr	r2, [sp, #20]
 80167cc:	5d1b      	ldrb	r3, [r3, r4]
 80167ce:	2a00      	cmp	r2, #0
 80167d0:	d037      	beq.n	8016842 <_strtod_l+0x242>
 80167d2:	9c05      	ldr	r4, [sp, #20]
 80167d4:	4602      	mov	r2, r0
 80167d6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80167da:	2909      	cmp	r1, #9
 80167dc:	d913      	bls.n	8016806 <_strtod_l+0x206>
 80167de:	2101      	movs	r1, #1
 80167e0:	9104      	str	r1, [sp, #16]
 80167e2:	e7c2      	b.n	801676a <_strtod_l+0x16a>
 80167e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80167e6:	1c5a      	adds	r2, r3, #1
 80167e8:	921b      	str	r2, [sp, #108]	; 0x6c
 80167ea:	785b      	ldrb	r3, [r3, #1]
 80167ec:	3001      	adds	r0, #1
 80167ee:	2b30      	cmp	r3, #48	; 0x30
 80167f0:	d0f8      	beq.n	80167e4 <_strtod_l+0x1e4>
 80167f2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80167f6:	2a08      	cmp	r2, #8
 80167f8:	f200 84e4 	bhi.w	80171c4 <_strtod_l+0xbc4>
 80167fc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80167fe:	9208      	str	r2, [sp, #32]
 8016800:	4602      	mov	r2, r0
 8016802:	2000      	movs	r0, #0
 8016804:	4604      	mov	r4, r0
 8016806:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 801680a:	f100 0101 	add.w	r1, r0, #1
 801680e:	d012      	beq.n	8016836 <_strtod_l+0x236>
 8016810:	440a      	add	r2, r1
 8016812:	eb00 0c04 	add.w	ip, r0, r4
 8016816:	4621      	mov	r1, r4
 8016818:	270a      	movs	r7, #10
 801681a:	458c      	cmp	ip, r1
 801681c:	d113      	bne.n	8016846 <_strtod_l+0x246>
 801681e:	1821      	adds	r1, r4, r0
 8016820:	2908      	cmp	r1, #8
 8016822:	f104 0401 	add.w	r4, r4, #1
 8016826:	4404      	add	r4, r0
 8016828:	dc19      	bgt.n	801685e <_strtod_l+0x25e>
 801682a:	9b07      	ldr	r3, [sp, #28]
 801682c:	210a      	movs	r1, #10
 801682e:	fb01 e303 	mla	r3, r1, r3, lr
 8016832:	9307      	str	r3, [sp, #28]
 8016834:	2100      	movs	r1, #0
 8016836:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016838:	1c58      	adds	r0, r3, #1
 801683a:	901b      	str	r0, [sp, #108]	; 0x6c
 801683c:	785b      	ldrb	r3, [r3, #1]
 801683e:	4608      	mov	r0, r1
 8016840:	e7c9      	b.n	80167d6 <_strtod_l+0x1d6>
 8016842:	9805      	ldr	r0, [sp, #20]
 8016844:	e7d3      	b.n	80167ee <_strtod_l+0x1ee>
 8016846:	2908      	cmp	r1, #8
 8016848:	f101 0101 	add.w	r1, r1, #1
 801684c:	dc03      	bgt.n	8016856 <_strtod_l+0x256>
 801684e:	9b07      	ldr	r3, [sp, #28]
 8016850:	437b      	muls	r3, r7
 8016852:	9307      	str	r3, [sp, #28]
 8016854:	e7e1      	b.n	801681a <_strtod_l+0x21a>
 8016856:	2910      	cmp	r1, #16
 8016858:	bfd8      	it	le
 801685a:	437d      	mulle	r5, r7
 801685c:	e7dd      	b.n	801681a <_strtod_l+0x21a>
 801685e:	2c10      	cmp	r4, #16
 8016860:	bfdc      	itt	le
 8016862:	210a      	movle	r1, #10
 8016864:	fb01 e505 	mlale	r5, r1, r5, lr
 8016868:	e7e4      	b.n	8016834 <_strtod_l+0x234>
 801686a:	2301      	movs	r3, #1
 801686c:	9304      	str	r3, [sp, #16]
 801686e:	e781      	b.n	8016774 <_strtod_l+0x174>
 8016870:	f04f 0c01 	mov.w	ip, #1
 8016874:	1cb3      	adds	r3, r6, #2
 8016876:	931b      	str	r3, [sp, #108]	; 0x6c
 8016878:	78b3      	ldrb	r3, [r6, #2]
 801687a:	e78a      	b.n	8016792 <_strtod_l+0x192>
 801687c:	f04f 0c00 	mov.w	ip, #0
 8016880:	e7f8      	b.n	8016874 <_strtod_l+0x274>
 8016882:	bf00      	nop
 8016884:	0801b158 	.word	0x0801b158
 8016888:	7ff00000 	.word	0x7ff00000
 801688c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801688e:	1c5f      	adds	r7, r3, #1
 8016890:	971b      	str	r7, [sp, #108]	; 0x6c
 8016892:	785b      	ldrb	r3, [r3, #1]
 8016894:	2b30      	cmp	r3, #48	; 0x30
 8016896:	d0f9      	beq.n	801688c <_strtod_l+0x28c>
 8016898:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 801689c:	2f08      	cmp	r7, #8
 801689e:	f63f af7d 	bhi.w	801679c <_strtod_l+0x19c>
 80168a2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80168a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80168a8:	930a      	str	r3, [sp, #40]	; 0x28
 80168aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80168ac:	1c5f      	adds	r7, r3, #1
 80168ae:	971b      	str	r7, [sp, #108]	; 0x6c
 80168b0:	785b      	ldrb	r3, [r3, #1]
 80168b2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80168b6:	f1b8 0f09 	cmp.w	r8, #9
 80168ba:	d937      	bls.n	801692c <_strtod_l+0x32c>
 80168bc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80168be:	1a7f      	subs	r7, r7, r1
 80168c0:	2f08      	cmp	r7, #8
 80168c2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80168c6:	dc37      	bgt.n	8016938 <_strtod_l+0x338>
 80168c8:	45be      	cmp	lr, r7
 80168ca:	bfa8      	it	ge
 80168cc:	46be      	movge	lr, r7
 80168ce:	f1bc 0f00 	cmp.w	ip, #0
 80168d2:	d001      	beq.n	80168d8 <_strtod_l+0x2d8>
 80168d4:	f1ce 0e00 	rsb	lr, lr, #0
 80168d8:	2c00      	cmp	r4, #0
 80168da:	d151      	bne.n	8016980 <_strtod_l+0x380>
 80168dc:	2800      	cmp	r0, #0
 80168de:	f47f aece 	bne.w	801667e <_strtod_l+0x7e>
 80168e2:	9a06      	ldr	r2, [sp, #24]
 80168e4:	2a00      	cmp	r2, #0
 80168e6:	f47f aeca 	bne.w	801667e <_strtod_l+0x7e>
 80168ea:	9a04      	ldr	r2, [sp, #16]
 80168ec:	2a00      	cmp	r2, #0
 80168ee:	f47f aee4 	bne.w	80166ba <_strtod_l+0xba>
 80168f2:	2b4e      	cmp	r3, #78	; 0x4e
 80168f4:	d027      	beq.n	8016946 <_strtod_l+0x346>
 80168f6:	dc21      	bgt.n	801693c <_strtod_l+0x33c>
 80168f8:	2b49      	cmp	r3, #73	; 0x49
 80168fa:	f47f aede 	bne.w	80166ba <_strtod_l+0xba>
 80168fe:	49a0      	ldr	r1, [pc, #640]	; (8016b80 <_strtod_l+0x580>)
 8016900:	a81b      	add	r0, sp, #108	; 0x6c
 8016902:	f001 fdd7 	bl	80184b4 <__match>
 8016906:	2800      	cmp	r0, #0
 8016908:	f43f aed7 	beq.w	80166ba <_strtod_l+0xba>
 801690c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801690e:	499d      	ldr	r1, [pc, #628]	; (8016b84 <_strtod_l+0x584>)
 8016910:	3b01      	subs	r3, #1
 8016912:	a81b      	add	r0, sp, #108	; 0x6c
 8016914:	931b      	str	r3, [sp, #108]	; 0x6c
 8016916:	f001 fdcd 	bl	80184b4 <__match>
 801691a:	b910      	cbnz	r0, 8016922 <_strtod_l+0x322>
 801691c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801691e:	3301      	adds	r3, #1
 8016920:	931b      	str	r3, [sp, #108]	; 0x6c
 8016922:	f8df b274 	ldr.w	fp, [pc, #628]	; 8016b98 <_strtod_l+0x598>
 8016926:	f04f 0a00 	mov.w	sl, #0
 801692a:	e6a8      	b.n	801667e <_strtod_l+0x7e>
 801692c:	210a      	movs	r1, #10
 801692e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8016932:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8016936:	e7b8      	b.n	80168aa <_strtod_l+0x2aa>
 8016938:	46be      	mov	lr, r7
 801693a:	e7c8      	b.n	80168ce <_strtod_l+0x2ce>
 801693c:	2b69      	cmp	r3, #105	; 0x69
 801693e:	d0de      	beq.n	80168fe <_strtod_l+0x2fe>
 8016940:	2b6e      	cmp	r3, #110	; 0x6e
 8016942:	f47f aeba 	bne.w	80166ba <_strtod_l+0xba>
 8016946:	4990      	ldr	r1, [pc, #576]	; (8016b88 <_strtod_l+0x588>)
 8016948:	a81b      	add	r0, sp, #108	; 0x6c
 801694a:	f001 fdb3 	bl	80184b4 <__match>
 801694e:	2800      	cmp	r0, #0
 8016950:	f43f aeb3 	beq.w	80166ba <_strtod_l+0xba>
 8016954:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016956:	781b      	ldrb	r3, [r3, #0]
 8016958:	2b28      	cmp	r3, #40	; 0x28
 801695a:	d10e      	bne.n	801697a <_strtod_l+0x37a>
 801695c:	aa1e      	add	r2, sp, #120	; 0x78
 801695e:	498b      	ldr	r1, [pc, #556]	; (8016b8c <_strtod_l+0x58c>)
 8016960:	a81b      	add	r0, sp, #108	; 0x6c
 8016962:	f001 fdbb 	bl	80184dc <__hexnan>
 8016966:	2805      	cmp	r0, #5
 8016968:	d107      	bne.n	801697a <_strtod_l+0x37a>
 801696a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801696c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8016970:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8016974:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8016978:	e681      	b.n	801667e <_strtod_l+0x7e>
 801697a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8016ba0 <_strtod_l+0x5a0>
 801697e:	e7d2      	b.n	8016926 <_strtod_l+0x326>
 8016980:	ebae 0302 	sub.w	r3, lr, r2
 8016984:	9306      	str	r3, [sp, #24]
 8016986:	9b05      	ldr	r3, [sp, #20]
 8016988:	9807      	ldr	r0, [sp, #28]
 801698a:	2b00      	cmp	r3, #0
 801698c:	bf08      	it	eq
 801698e:	4623      	moveq	r3, r4
 8016990:	2c10      	cmp	r4, #16
 8016992:	9305      	str	r3, [sp, #20]
 8016994:	46a0      	mov	r8, r4
 8016996:	bfa8      	it	ge
 8016998:	f04f 0810 	movge.w	r8, #16
 801699c:	f7e9 fdb2 	bl	8000504 <__aeabi_ui2d>
 80169a0:	2c09      	cmp	r4, #9
 80169a2:	4682      	mov	sl, r0
 80169a4:	468b      	mov	fp, r1
 80169a6:	dc13      	bgt.n	80169d0 <_strtod_l+0x3d0>
 80169a8:	9b06      	ldr	r3, [sp, #24]
 80169aa:	2b00      	cmp	r3, #0
 80169ac:	f43f ae67 	beq.w	801667e <_strtod_l+0x7e>
 80169b0:	9b06      	ldr	r3, [sp, #24]
 80169b2:	dd7a      	ble.n	8016aaa <_strtod_l+0x4aa>
 80169b4:	2b16      	cmp	r3, #22
 80169b6:	dc61      	bgt.n	8016a7c <_strtod_l+0x47c>
 80169b8:	4a75      	ldr	r2, [pc, #468]	; (8016b90 <_strtod_l+0x590>)
 80169ba:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80169be:	e9de 0100 	ldrd	r0, r1, [lr]
 80169c2:	4652      	mov	r2, sl
 80169c4:	465b      	mov	r3, fp
 80169c6:	f7e9 fe17 	bl	80005f8 <__aeabi_dmul>
 80169ca:	4682      	mov	sl, r0
 80169cc:	468b      	mov	fp, r1
 80169ce:	e656      	b.n	801667e <_strtod_l+0x7e>
 80169d0:	4b6f      	ldr	r3, [pc, #444]	; (8016b90 <_strtod_l+0x590>)
 80169d2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80169d6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80169da:	f7e9 fe0d 	bl	80005f8 <__aeabi_dmul>
 80169de:	4606      	mov	r6, r0
 80169e0:	4628      	mov	r0, r5
 80169e2:	460f      	mov	r7, r1
 80169e4:	f7e9 fd8e 	bl	8000504 <__aeabi_ui2d>
 80169e8:	4602      	mov	r2, r0
 80169ea:	460b      	mov	r3, r1
 80169ec:	4630      	mov	r0, r6
 80169ee:	4639      	mov	r1, r7
 80169f0:	f7e9 fc4c 	bl	800028c <__adddf3>
 80169f4:	2c0f      	cmp	r4, #15
 80169f6:	4682      	mov	sl, r0
 80169f8:	468b      	mov	fp, r1
 80169fa:	ddd5      	ble.n	80169a8 <_strtod_l+0x3a8>
 80169fc:	9b06      	ldr	r3, [sp, #24]
 80169fe:	eba4 0808 	sub.w	r8, r4, r8
 8016a02:	4498      	add	r8, r3
 8016a04:	f1b8 0f00 	cmp.w	r8, #0
 8016a08:	f340 8096 	ble.w	8016b38 <_strtod_l+0x538>
 8016a0c:	f018 030f 	ands.w	r3, r8, #15
 8016a10:	d00a      	beq.n	8016a28 <_strtod_l+0x428>
 8016a12:	495f      	ldr	r1, [pc, #380]	; (8016b90 <_strtod_l+0x590>)
 8016a14:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016a18:	4652      	mov	r2, sl
 8016a1a:	465b      	mov	r3, fp
 8016a1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016a20:	f7e9 fdea 	bl	80005f8 <__aeabi_dmul>
 8016a24:	4682      	mov	sl, r0
 8016a26:	468b      	mov	fp, r1
 8016a28:	f038 080f 	bics.w	r8, r8, #15
 8016a2c:	d073      	beq.n	8016b16 <_strtod_l+0x516>
 8016a2e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8016a32:	dd47      	ble.n	8016ac4 <_strtod_l+0x4c4>
 8016a34:	2400      	movs	r4, #0
 8016a36:	46a0      	mov	r8, r4
 8016a38:	9407      	str	r4, [sp, #28]
 8016a3a:	9405      	str	r4, [sp, #20]
 8016a3c:	2322      	movs	r3, #34	; 0x22
 8016a3e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8016b98 <_strtod_l+0x598>
 8016a42:	f8c9 3000 	str.w	r3, [r9]
 8016a46:	f04f 0a00 	mov.w	sl, #0
 8016a4a:	9b07      	ldr	r3, [sp, #28]
 8016a4c:	2b00      	cmp	r3, #0
 8016a4e:	f43f ae16 	beq.w	801667e <_strtod_l+0x7e>
 8016a52:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016a54:	4648      	mov	r0, r9
 8016a56:	f001 fe2d 	bl	80186b4 <_Bfree>
 8016a5a:	9905      	ldr	r1, [sp, #20]
 8016a5c:	4648      	mov	r0, r9
 8016a5e:	f001 fe29 	bl	80186b4 <_Bfree>
 8016a62:	4641      	mov	r1, r8
 8016a64:	4648      	mov	r0, r9
 8016a66:	f001 fe25 	bl	80186b4 <_Bfree>
 8016a6a:	9907      	ldr	r1, [sp, #28]
 8016a6c:	4648      	mov	r0, r9
 8016a6e:	f001 fe21 	bl	80186b4 <_Bfree>
 8016a72:	4621      	mov	r1, r4
 8016a74:	4648      	mov	r0, r9
 8016a76:	f001 fe1d 	bl	80186b4 <_Bfree>
 8016a7a:	e600      	b.n	801667e <_strtod_l+0x7e>
 8016a7c:	9a06      	ldr	r2, [sp, #24]
 8016a7e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8016a82:	4293      	cmp	r3, r2
 8016a84:	dbba      	blt.n	80169fc <_strtod_l+0x3fc>
 8016a86:	4d42      	ldr	r5, [pc, #264]	; (8016b90 <_strtod_l+0x590>)
 8016a88:	f1c4 040f 	rsb	r4, r4, #15
 8016a8c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8016a90:	4652      	mov	r2, sl
 8016a92:	465b      	mov	r3, fp
 8016a94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016a98:	f7e9 fdae 	bl	80005f8 <__aeabi_dmul>
 8016a9c:	9b06      	ldr	r3, [sp, #24]
 8016a9e:	1b1c      	subs	r4, r3, r4
 8016aa0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8016aa4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016aa8:	e78d      	b.n	80169c6 <_strtod_l+0x3c6>
 8016aaa:	f113 0f16 	cmn.w	r3, #22
 8016aae:	dba5      	blt.n	80169fc <_strtod_l+0x3fc>
 8016ab0:	4a37      	ldr	r2, [pc, #220]	; (8016b90 <_strtod_l+0x590>)
 8016ab2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8016ab6:	e9d2 2300 	ldrd	r2, r3, [r2]
 8016aba:	4650      	mov	r0, sl
 8016abc:	4659      	mov	r1, fp
 8016abe:	f7e9 fec5 	bl	800084c <__aeabi_ddiv>
 8016ac2:	e782      	b.n	80169ca <_strtod_l+0x3ca>
 8016ac4:	2300      	movs	r3, #0
 8016ac6:	4e33      	ldr	r6, [pc, #204]	; (8016b94 <_strtod_l+0x594>)
 8016ac8:	ea4f 1828 	mov.w	r8, r8, asr #4
 8016acc:	4650      	mov	r0, sl
 8016ace:	4659      	mov	r1, fp
 8016ad0:	461d      	mov	r5, r3
 8016ad2:	f1b8 0f01 	cmp.w	r8, #1
 8016ad6:	dc21      	bgt.n	8016b1c <_strtod_l+0x51c>
 8016ad8:	b10b      	cbz	r3, 8016ade <_strtod_l+0x4de>
 8016ada:	4682      	mov	sl, r0
 8016adc:	468b      	mov	fp, r1
 8016ade:	4b2d      	ldr	r3, [pc, #180]	; (8016b94 <_strtod_l+0x594>)
 8016ae0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8016ae4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8016ae8:	4652      	mov	r2, sl
 8016aea:	465b      	mov	r3, fp
 8016aec:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016af0:	f7e9 fd82 	bl	80005f8 <__aeabi_dmul>
 8016af4:	4b28      	ldr	r3, [pc, #160]	; (8016b98 <_strtod_l+0x598>)
 8016af6:	460a      	mov	r2, r1
 8016af8:	400b      	ands	r3, r1
 8016afa:	4928      	ldr	r1, [pc, #160]	; (8016b9c <_strtod_l+0x59c>)
 8016afc:	428b      	cmp	r3, r1
 8016afe:	4682      	mov	sl, r0
 8016b00:	d898      	bhi.n	8016a34 <_strtod_l+0x434>
 8016b02:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8016b06:	428b      	cmp	r3, r1
 8016b08:	bf86      	itte	hi
 8016b0a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8016ba4 <_strtod_l+0x5a4>
 8016b0e:	f04f 3aff 	movhi.w	sl, #4294967295
 8016b12:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8016b16:	2300      	movs	r3, #0
 8016b18:	9304      	str	r3, [sp, #16]
 8016b1a:	e077      	b.n	8016c0c <_strtod_l+0x60c>
 8016b1c:	f018 0f01 	tst.w	r8, #1
 8016b20:	d006      	beq.n	8016b30 <_strtod_l+0x530>
 8016b22:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8016b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b2a:	f7e9 fd65 	bl	80005f8 <__aeabi_dmul>
 8016b2e:	2301      	movs	r3, #1
 8016b30:	3501      	adds	r5, #1
 8016b32:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016b36:	e7cc      	b.n	8016ad2 <_strtod_l+0x4d2>
 8016b38:	d0ed      	beq.n	8016b16 <_strtod_l+0x516>
 8016b3a:	f1c8 0800 	rsb	r8, r8, #0
 8016b3e:	f018 020f 	ands.w	r2, r8, #15
 8016b42:	d00a      	beq.n	8016b5a <_strtod_l+0x55a>
 8016b44:	4b12      	ldr	r3, [pc, #72]	; (8016b90 <_strtod_l+0x590>)
 8016b46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016b4a:	4650      	mov	r0, sl
 8016b4c:	4659      	mov	r1, fp
 8016b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b52:	f7e9 fe7b 	bl	800084c <__aeabi_ddiv>
 8016b56:	4682      	mov	sl, r0
 8016b58:	468b      	mov	fp, r1
 8016b5a:	ea5f 1828 	movs.w	r8, r8, asr #4
 8016b5e:	d0da      	beq.n	8016b16 <_strtod_l+0x516>
 8016b60:	f1b8 0f1f 	cmp.w	r8, #31
 8016b64:	dd20      	ble.n	8016ba8 <_strtod_l+0x5a8>
 8016b66:	2400      	movs	r4, #0
 8016b68:	46a0      	mov	r8, r4
 8016b6a:	9407      	str	r4, [sp, #28]
 8016b6c:	9405      	str	r4, [sp, #20]
 8016b6e:	2322      	movs	r3, #34	; 0x22
 8016b70:	f04f 0a00 	mov.w	sl, #0
 8016b74:	f04f 0b00 	mov.w	fp, #0
 8016b78:	f8c9 3000 	str.w	r3, [r9]
 8016b7c:	e765      	b.n	8016a4a <_strtod_l+0x44a>
 8016b7e:	bf00      	nop
 8016b80:	0801b121 	.word	0x0801b121
 8016b84:	0801b1ab 	.word	0x0801b1ab
 8016b88:	0801b129 	.word	0x0801b129
 8016b8c:	0801b16c 	.word	0x0801b16c
 8016b90:	0801b1e8 	.word	0x0801b1e8
 8016b94:	0801b1c0 	.word	0x0801b1c0
 8016b98:	7ff00000 	.word	0x7ff00000
 8016b9c:	7ca00000 	.word	0x7ca00000
 8016ba0:	fff80000 	.word	0xfff80000
 8016ba4:	7fefffff 	.word	0x7fefffff
 8016ba8:	f018 0310 	ands.w	r3, r8, #16
 8016bac:	bf18      	it	ne
 8016bae:	236a      	movne	r3, #106	; 0x6a
 8016bb0:	4da0      	ldr	r5, [pc, #640]	; (8016e34 <_strtod_l+0x834>)
 8016bb2:	9304      	str	r3, [sp, #16]
 8016bb4:	4650      	mov	r0, sl
 8016bb6:	4659      	mov	r1, fp
 8016bb8:	2300      	movs	r3, #0
 8016bba:	f1b8 0f00 	cmp.w	r8, #0
 8016bbe:	f300 810a 	bgt.w	8016dd6 <_strtod_l+0x7d6>
 8016bc2:	b10b      	cbz	r3, 8016bc8 <_strtod_l+0x5c8>
 8016bc4:	4682      	mov	sl, r0
 8016bc6:	468b      	mov	fp, r1
 8016bc8:	9b04      	ldr	r3, [sp, #16]
 8016bca:	b1bb      	cbz	r3, 8016bfc <_strtod_l+0x5fc>
 8016bcc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8016bd0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016bd4:	2b00      	cmp	r3, #0
 8016bd6:	4659      	mov	r1, fp
 8016bd8:	dd10      	ble.n	8016bfc <_strtod_l+0x5fc>
 8016bda:	2b1f      	cmp	r3, #31
 8016bdc:	f340 8107 	ble.w	8016dee <_strtod_l+0x7ee>
 8016be0:	2b34      	cmp	r3, #52	; 0x34
 8016be2:	bfde      	ittt	le
 8016be4:	3b20      	suble	r3, #32
 8016be6:	f04f 32ff 	movle.w	r2, #4294967295
 8016bea:	fa02 f303 	lslle.w	r3, r2, r3
 8016bee:	f04f 0a00 	mov.w	sl, #0
 8016bf2:	bfcc      	ite	gt
 8016bf4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8016bf8:	ea03 0b01 	andle.w	fp, r3, r1
 8016bfc:	2200      	movs	r2, #0
 8016bfe:	2300      	movs	r3, #0
 8016c00:	4650      	mov	r0, sl
 8016c02:	4659      	mov	r1, fp
 8016c04:	f7e9 ff60 	bl	8000ac8 <__aeabi_dcmpeq>
 8016c08:	2800      	cmp	r0, #0
 8016c0a:	d1ac      	bne.n	8016b66 <_strtod_l+0x566>
 8016c0c:	9b07      	ldr	r3, [sp, #28]
 8016c0e:	9300      	str	r3, [sp, #0]
 8016c10:	9a05      	ldr	r2, [sp, #20]
 8016c12:	9908      	ldr	r1, [sp, #32]
 8016c14:	4623      	mov	r3, r4
 8016c16:	4648      	mov	r0, r9
 8016c18:	f001 fd9e 	bl	8018758 <__s2b>
 8016c1c:	9007      	str	r0, [sp, #28]
 8016c1e:	2800      	cmp	r0, #0
 8016c20:	f43f af08 	beq.w	8016a34 <_strtod_l+0x434>
 8016c24:	9a06      	ldr	r2, [sp, #24]
 8016c26:	9b06      	ldr	r3, [sp, #24]
 8016c28:	2a00      	cmp	r2, #0
 8016c2a:	f1c3 0300 	rsb	r3, r3, #0
 8016c2e:	bfa8      	it	ge
 8016c30:	2300      	movge	r3, #0
 8016c32:	930e      	str	r3, [sp, #56]	; 0x38
 8016c34:	2400      	movs	r4, #0
 8016c36:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8016c3a:	9316      	str	r3, [sp, #88]	; 0x58
 8016c3c:	46a0      	mov	r8, r4
 8016c3e:	9b07      	ldr	r3, [sp, #28]
 8016c40:	4648      	mov	r0, r9
 8016c42:	6859      	ldr	r1, [r3, #4]
 8016c44:	f001 fd02 	bl	801864c <_Balloc>
 8016c48:	9005      	str	r0, [sp, #20]
 8016c4a:	2800      	cmp	r0, #0
 8016c4c:	f43f aef6 	beq.w	8016a3c <_strtod_l+0x43c>
 8016c50:	9b07      	ldr	r3, [sp, #28]
 8016c52:	691a      	ldr	r2, [r3, #16]
 8016c54:	3202      	adds	r2, #2
 8016c56:	f103 010c 	add.w	r1, r3, #12
 8016c5a:	0092      	lsls	r2, r2, #2
 8016c5c:	300c      	adds	r0, #12
 8016c5e:	f7fe fd27 	bl	80156b0 <memcpy>
 8016c62:	aa1e      	add	r2, sp, #120	; 0x78
 8016c64:	a91d      	add	r1, sp, #116	; 0x74
 8016c66:	ec4b ab10 	vmov	d0, sl, fp
 8016c6a:	4648      	mov	r0, r9
 8016c6c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8016c70:	f002 f82e 	bl	8018cd0 <__d2b>
 8016c74:	901c      	str	r0, [sp, #112]	; 0x70
 8016c76:	2800      	cmp	r0, #0
 8016c78:	f43f aee0 	beq.w	8016a3c <_strtod_l+0x43c>
 8016c7c:	2101      	movs	r1, #1
 8016c7e:	4648      	mov	r0, r9
 8016c80:	f001 fdf6 	bl	8018870 <__i2b>
 8016c84:	4680      	mov	r8, r0
 8016c86:	2800      	cmp	r0, #0
 8016c88:	f43f aed8 	beq.w	8016a3c <_strtod_l+0x43c>
 8016c8c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8016c8e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016c90:	2e00      	cmp	r6, #0
 8016c92:	bfab      	itete	ge
 8016c94:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8016c96:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8016c98:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8016c9a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8016c9c:	bfac      	ite	ge
 8016c9e:	18f7      	addge	r7, r6, r3
 8016ca0:	1b9d      	sublt	r5, r3, r6
 8016ca2:	9b04      	ldr	r3, [sp, #16]
 8016ca4:	1af6      	subs	r6, r6, r3
 8016ca6:	4416      	add	r6, r2
 8016ca8:	4b63      	ldr	r3, [pc, #396]	; (8016e38 <_strtod_l+0x838>)
 8016caa:	3e01      	subs	r6, #1
 8016cac:	429e      	cmp	r6, r3
 8016cae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8016cb2:	f280 80af 	bge.w	8016e14 <_strtod_l+0x814>
 8016cb6:	1b9b      	subs	r3, r3, r6
 8016cb8:	2b1f      	cmp	r3, #31
 8016cba:	eba2 0203 	sub.w	r2, r2, r3
 8016cbe:	f04f 0101 	mov.w	r1, #1
 8016cc2:	f300 809b 	bgt.w	8016dfc <_strtod_l+0x7fc>
 8016cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8016cca:	930f      	str	r3, [sp, #60]	; 0x3c
 8016ccc:	2300      	movs	r3, #0
 8016cce:	930a      	str	r3, [sp, #40]	; 0x28
 8016cd0:	18be      	adds	r6, r7, r2
 8016cd2:	9b04      	ldr	r3, [sp, #16]
 8016cd4:	42b7      	cmp	r7, r6
 8016cd6:	4415      	add	r5, r2
 8016cd8:	441d      	add	r5, r3
 8016cda:	463b      	mov	r3, r7
 8016cdc:	bfa8      	it	ge
 8016cde:	4633      	movge	r3, r6
 8016ce0:	42ab      	cmp	r3, r5
 8016ce2:	bfa8      	it	ge
 8016ce4:	462b      	movge	r3, r5
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	bfc2      	ittt	gt
 8016cea:	1af6      	subgt	r6, r6, r3
 8016cec:	1aed      	subgt	r5, r5, r3
 8016cee:	1aff      	subgt	r7, r7, r3
 8016cf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016cf2:	b1bb      	cbz	r3, 8016d24 <_strtod_l+0x724>
 8016cf4:	4641      	mov	r1, r8
 8016cf6:	461a      	mov	r2, r3
 8016cf8:	4648      	mov	r0, r9
 8016cfa:	f001 fe59 	bl	80189b0 <__pow5mult>
 8016cfe:	4680      	mov	r8, r0
 8016d00:	2800      	cmp	r0, #0
 8016d02:	f43f ae9b 	beq.w	8016a3c <_strtod_l+0x43c>
 8016d06:	4601      	mov	r1, r0
 8016d08:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016d0a:	4648      	mov	r0, r9
 8016d0c:	f001 fdb9 	bl	8018882 <__multiply>
 8016d10:	900c      	str	r0, [sp, #48]	; 0x30
 8016d12:	2800      	cmp	r0, #0
 8016d14:	f43f ae92 	beq.w	8016a3c <_strtod_l+0x43c>
 8016d18:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016d1a:	4648      	mov	r0, r9
 8016d1c:	f001 fcca 	bl	80186b4 <_Bfree>
 8016d20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016d22:	931c      	str	r3, [sp, #112]	; 0x70
 8016d24:	2e00      	cmp	r6, #0
 8016d26:	dc7a      	bgt.n	8016e1e <_strtod_l+0x81e>
 8016d28:	9b06      	ldr	r3, [sp, #24]
 8016d2a:	2b00      	cmp	r3, #0
 8016d2c:	dd08      	ble.n	8016d40 <_strtod_l+0x740>
 8016d2e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016d30:	9905      	ldr	r1, [sp, #20]
 8016d32:	4648      	mov	r0, r9
 8016d34:	f001 fe3c 	bl	80189b0 <__pow5mult>
 8016d38:	9005      	str	r0, [sp, #20]
 8016d3a:	2800      	cmp	r0, #0
 8016d3c:	f43f ae7e 	beq.w	8016a3c <_strtod_l+0x43c>
 8016d40:	2d00      	cmp	r5, #0
 8016d42:	dd08      	ble.n	8016d56 <_strtod_l+0x756>
 8016d44:	462a      	mov	r2, r5
 8016d46:	9905      	ldr	r1, [sp, #20]
 8016d48:	4648      	mov	r0, r9
 8016d4a:	f001 fe7f 	bl	8018a4c <__lshift>
 8016d4e:	9005      	str	r0, [sp, #20]
 8016d50:	2800      	cmp	r0, #0
 8016d52:	f43f ae73 	beq.w	8016a3c <_strtod_l+0x43c>
 8016d56:	2f00      	cmp	r7, #0
 8016d58:	dd08      	ble.n	8016d6c <_strtod_l+0x76c>
 8016d5a:	4641      	mov	r1, r8
 8016d5c:	463a      	mov	r2, r7
 8016d5e:	4648      	mov	r0, r9
 8016d60:	f001 fe74 	bl	8018a4c <__lshift>
 8016d64:	4680      	mov	r8, r0
 8016d66:	2800      	cmp	r0, #0
 8016d68:	f43f ae68 	beq.w	8016a3c <_strtod_l+0x43c>
 8016d6c:	9a05      	ldr	r2, [sp, #20]
 8016d6e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016d70:	4648      	mov	r0, r9
 8016d72:	f001 fed9 	bl	8018b28 <__mdiff>
 8016d76:	4604      	mov	r4, r0
 8016d78:	2800      	cmp	r0, #0
 8016d7a:	f43f ae5f 	beq.w	8016a3c <_strtod_l+0x43c>
 8016d7e:	68c3      	ldr	r3, [r0, #12]
 8016d80:	930c      	str	r3, [sp, #48]	; 0x30
 8016d82:	2300      	movs	r3, #0
 8016d84:	60c3      	str	r3, [r0, #12]
 8016d86:	4641      	mov	r1, r8
 8016d88:	f001 feb4 	bl	8018af4 <__mcmp>
 8016d8c:	2800      	cmp	r0, #0
 8016d8e:	da55      	bge.n	8016e3c <_strtod_l+0x83c>
 8016d90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016d92:	b9e3      	cbnz	r3, 8016dce <_strtod_l+0x7ce>
 8016d94:	f1ba 0f00 	cmp.w	sl, #0
 8016d98:	d119      	bne.n	8016dce <_strtod_l+0x7ce>
 8016d9a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016d9e:	b9b3      	cbnz	r3, 8016dce <_strtod_l+0x7ce>
 8016da0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016da4:	0d1b      	lsrs	r3, r3, #20
 8016da6:	051b      	lsls	r3, r3, #20
 8016da8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8016dac:	d90f      	bls.n	8016dce <_strtod_l+0x7ce>
 8016dae:	6963      	ldr	r3, [r4, #20]
 8016db0:	b913      	cbnz	r3, 8016db8 <_strtod_l+0x7b8>
 8016db2:	6923      	ldr	r3, [r4, #16]
 8016db4:	2b01      	cmp	r3, #1
 8016db6:	dd0a      	ble.n	8016dce <_strtod_l+0x7ce>
 8016db8:	4621      	mov	r1, r4
 8016dba:	2201      	movs	r2, #1
 8016dbc:	4648      	mov	r0, r9
 8016dbe:	f001 fe45 	bl	8018a4c <__lshift>
 8016dc2:	4641      	mov	r1, r8
 8016dc4:	4604      	mov	r4, r0
 8016dc6:	f001 fe95 	bl	8018af4 <__mcmp>
 8016dca:	2800      	cmp	r0, #0
 8016dcc:	dc67      	bgt.n	8016e9e <_strtod_l+0x89e>
 8016dce:	9b04      	ldr	r3, [sp, #16]
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	d171      	bne.n	8016eb8 <_strtod_l+0x8b8>
 8016dd4:	e63d      	b.n	8016a52 <_strtod_l+0x452>
 8016dd6:	f018 0f01 	tst.w	r8, #1
 8016dda:	d004      	beq.n	8016de6 <_strtod_l+0x7e6>
 8016ddc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016de0:	f7e9 fc0a 	bl	80005f8 <__aeabi_dmul>
 8016de4:	2301      	movs	r3, #1
 8016de6:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016dea:	3508      	adds	r5, #8
 8016dec:	e6e5      	b.n	8016bba <_strtod_l+0x5ba>
 8016dee:	f04f 32ff 	mov.w	r2, #4294967295
 8016df2:	fa02 f303 	lsl.w	r3, r2, r3
 8016df6:	ea03 0a0a 	and.w	sl, r3, sl
 8016dfa:	e6ff      	b.n	8016bfc <_strtod_l+0x5fc>
 8016dfc:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8016e00:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8016e04:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8016e08:	36e2      	adds	r6, #226	; 0xe2
 8016e0a:	fa01 f306 	lsl.w	r3, r1, r6
 8016e0e:	930a      	str	r3, [sp, #40]	; 0x28
 8016e10:	910f      	str	r1, [sp, #60]	; 0x3c
 8016e12:	e75d      	b.n	8016cd0 <_strtod_l+0x6d0>
 8016e14:	2300      	movs	r3, #0
 8016e16:	930a      	str	r3, [sp, #40]	; 0x28
 8016e18:	2301      	movs	r3, #1
 8016e1a:	930f      	str	r3, [sp, #60]	; 0x3c
 8016e1c:	e758      	b.n	8016cd0 <_strtod_l+0x6d0>
 8016e1e:	4632      	mov	r2, r6
 8016e20:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016e22:	4648      	mov	r0, r9
 8016e24:	f001 fe12 	bl	8018a4c <__lshift>
 8016e28:	901c      	str	r0, [sp, #112]	; 0x70
 8016e2a:	2800      	cmp	r0, #0
 8016e2c:	f47f af7c 	bne.w	8016d28 <_strtod_l+0x728>
 8016e30:	e604      	b.n	8016a3c <_strtod_l+0x43c>
 8016e32:	bf00      	nop
 8016e34:	0801b180 	.word	0x0801b180
 8016e38:	fffffc02 	.word	0xfffffc02
 8016e3c:	465d      	mov	r5, fp
 8016e3e:	f040 8086 	bne.w	8016f4e <_strtod_l+0x94e>
 8016e42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016e44:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016e48:	b32a      	cbz	r2, 8016e96 <_strtod_l+0x896>
 8016e4a:	4aaf      	ldr	r2, [pc, #700]	; (8017108 <_strtod_l+0xb08>)
 8016e4c:	4293      	cmp	r3, r2
 8016e4e:	d153      	bne.n	8016ef8 <_strtod_l+0x8f8>
 8016e50:	9b04      	ldr	r3, [sp, #16]
 8016e52:	4650      	mov	r0, sl
 8016e54:	b1d3      	cbz	r3, 8016e8c <_strtod_l+0x88c>
 8016e56:	4aad      	ldr	r2, [pc, #692]	; (801710c <_strtod_l+0xb0c>)
 8016e58:	402a      	ands	r2, r5
 8016e5a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8016e5e:	f04f 31ff 	mov.w	r1, #4294967295
 8016e62:	d816      	bhi.n	8016e92 <_strtod_l+0x892>
 8016e64:	0d12      	lsrs	r2, r2, #20
 8016e66:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8016e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8016e6e:	4298      	cmp	r0, r3
 8016e70:	d142      	bne.n	8016ef8 <_strtod_l+0x8f8>
 8016e72:	4ba7      	ldr	r3, [pc, #668]	; (8017110 <_strtod_l+0xb10>)
 8016e74:	429d      	cmp	r5, r3
 8016e76:	d102      	bne.n	8016e7e <_strtod_l+0x87e>
 8016e78:	3001      	adds	r0, #1
 8016e7a:	f43f addf 	beq.w	8016a3c <_strtod_l+0x43c>
 8016e7e:	4ba3      	ldr	r3, [pc, #652]	; (801710c <_strtod_l+0xb0c>)
 8016e80:	402b      	ands	r3, r5
 8016e82:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8016e86:	f04f 0a00 	mov.w	sl, #0
 8016e8a:	e7a0      	b.n	8016dce <_strtod_l+0x7ce>
 8016e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8016e90:	e7ed      	b.n	8016e6e <_strtod_l+0x86e>
 8016e92:	460b      	mov	r3, r1
 8016e94:	e7eb      	b.n	8016e6e <_strtod_l+0x86e>
 8016e96:	bb7b      	cbnz	r3, 8016ef8 <_strtod_l+0x8f8>
 8016e98:	f1ba 0f00 	cmp.w	sl, #0
 8016e9c:	d12c      	bne.n	8016ef8 <_strtod_l+0x8f8>
 8016e9e:	9904      	ldr	r1, [sp, #16]
 8016ea0:	4a9a      	ldr	r2, [pc, #616]	; (801710c <_strtod_l+0xb0c>)
 8016ea2:	465b      	mov	r3, fp
 8016ea4:	b1f1      	cbz	r1, 8016ee4 <_strtod_l+0x8e4>
 8016ea6:	ea02 010b 	and.w	r1, r2, fp
 8016eaa:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8016eae:	dc19      	bgt.n	8016ee4 <_strtod_l+0x8e4>
 8016eb0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8016eb4:	f77f ae5b 	ble.w	8016b6e <_strtod_l+0x56e>
 8016eb8:	4a96      	ldr	r2, [pc, #600]	; (8017114 <_strtod_l+0xb14>)
 8016eba:	2300      	movs	r3, #0
 8016ebc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8016ec0:	4650      	mov	r0, sl
 8016ec2:	4659      	mov	r1, fp
 8016ec4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8016ec8:	f7e9 fb96 	bl	80005f8 <__aeabi_dmul>
 8016ecc:	4682      	mov	sl, r0
 8016ece:	468b      	mov	fp, r1
 8016ed0:	2900      	cmp	r1, #0
 8016ed2:	f47f adbe 	bne.w	8016a52 <_strtod_l+0x452>
 8016ed6:	2800      	cmp	r0, #0
 8016ed8:	f47f adbb 	bne.w	8016a52 <_strtod_l+0x452>
 8016edc:	2322      	movs	r3, #34	; 0x22
 8016ede:	f8c9 3000 	str.w	r3, [r9]
 8016ee2:	e5b6      	b.n	8016a52 <_strtod_l+0x452>
 8016ee4:	4013      	ands	r3, r2
 8016ee6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016eea:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016eee:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8016ef2:	f04f 3aff 	mov.w	sl, #4294967295
 8016ef6:	e76a      	b.n	8016dce <_strtod_l+0x7ce>
 8016ef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016efa:	b193      	cbz	r3, 8016f22 <_strtod_l+0x922>
 8016efc:	422b      	tst	r3, r5
 8016efe:	f43f af66 	beq.w	8016dce <_strtod_l+0x7ce>
 8016f02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016f04:	9a04      	ldr	r2, [sp, #16]
 8016f06:	4650      	mov	r0, sl
 8016f08:	4659      	mov	r1, fp
 8016f0a:	b173      	cbz	r3, 8016f2a <_strtod_l+0x92a>
 8016f0c:	f7ff fb5b 	bl	80165c6 <sulp>
 8016f10:	4602      	mov	r2, r0
 8016f12:	460b      	mov	r3, r1
 8016f14:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016f18:	f7e9 f9b8 	bl	800028c <__adddf3>
 8016f1c:	4682      	mov	sl, r0
 8016f1e:	468b      	mov	fp, r1
 8016f20:	e755      	b.n	8016dce <_strtod_l+0x7ce>
 8016f22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016f24:	ea13 0f0a 	tst.w	r3, sl
 8016f28:	e7e9      	b.n	8016efe <_strtod_l+0x8fe>
 8016f2a:	f7ff fb4c 	bl	80165c6 <sulp>
 8016f2e:	4602      	mov	r2, r0
 8016f30:	460b      	mov	r3, r1
 8016f32:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016f36:	f7e9 f9a7 	bl	8000288 <__aeabi_dsub>
 8016f3a:	2200      	movs	r2, #0
 8016f3c:	2300      	movs	r3, #0
 8016f3e:	4682      	mov	sl, r0
 8016f40:	468b      	mov	fp, r1
 8016f42:	f7e9 fdc1 	bl	8000ac8 <__aeabi_dcmpeq>
 8016f46:	2800      	cmp	r0, #0
 8016f48:	f47f ae11 	bne.w	8016b6e <_strtod_l+0x56e>
 8016f4c:	e73f      	b.n	8016dce <_strtod_l+0x7ce>
 8016f4e:	4641      	mov	r1, r8
 8016f50:	4620      	mov	r0, r4
 8016f52:	f001 ff0c 	bl	8018d6e <__ratio>
 8016f56:	ec57 6b10 	vmov	r6, r7, d0
 8016f5a:	2200      	movs	r2, #0
 8016f5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016f60:	ee10 0a10 	vmov	r0, s0
 8016f64:	4639      	mov	r1, r7
 8016f66:	f7e9 fdc3 	bl	8000af0 <__aeabi_dcmple>
 8016f6a:	2800      	cmp	r0, #0
 8016f6c:	d077      	beq.n	801705e <_strtod_l+0xa5e>
 8016f6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016f70:	2b00      	cmp	r3, #0
 8016f72:	d04a      	beq.n	801700a <_strtod_l+0xa0a>
 8016f74:	4b68      	ldr	r3, [pc, #416]	; (8017118 <_strtod_l+0xb18>)
 8016f76:	2200      	movs	r2, #0
 8016f78:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016f7c:	4f66      	ldr	r7, [pc, #408]	; (8017118 <_strtod_l+0xb18>)
 8016f7e:	2600      	movs	r6, #0
 8016f80:	4b62      	ldr	r3, [pc, #392]	; (801710c <_strtod_l+0xb0c>)
 8016f82:	402b      	ands	r3, r5
 8016f84:	930f      	str	r3, [sp, #60]	; 0x3c
 8016f86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016f88:	4b64      	ldr	r3, [pc, #400]	; (801711c <_strtod_l+0xb1c>)
 8016f8a:	429a      	cmp	r2, r3
 8016f8c:	f040 80ce 	bne.w	801712c <_strtod_l+0xb2c>
 8016f90:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016f94:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016f98:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8016f9c:	ec4b ab10 	vmov	d0, sl, fp
 8016fa0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8016fa4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8016fa8:	f001 fe1c 	bl	8018be4 <__ulp>
 8016fac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016fb0:	ec53 2b10 	vmov	r2, r3, d0
 8016fb4:	f7e9 fb20 	bl	80005f8 <__aeabi_dmul>
 8016fb8:	4652      	mov	r2, sl
 8016fba:	465b      	mov	r3, fp
 8016fbc:	f7e9 f966 	bl	800028c <__adddf3>
 8016fc0:	460b      	mov	r3, r1
 8016fc2:	4952      	ldr	r1, [pc, #328]	; (801710c <_strtod_l+0xb0c>)
 8016fc4:	4a56      	ldr	r2, [pc, #344]	; (8017120 <_strtod_l+0xb20>)
 8016fc6:	4019      	ands	r1, r3
 8016fc8:	4291      	cmp	r1, r2
 8016fca:	4682      	mov	sl, r0
 8016fcc:	d95b      	bls.n	8017086 <_strtod_l+0xa86>
 8016fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016fd0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8016fd4:	4293      	cmp	r3, r2
 8016fd6:	d103      	bne.n	8016fe0 <_strtod_l+0x9e0>
 8016fd8:	9b08      	ldr	r3, [sp, #32]
 8016fda:	3301      	adds	r3, #1
 8016fdc:	f43f ad2e 	beq.w	8016a3c <_strtod_l+0x43c>
 8016fe0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8017110 <_strtod_l+0xb10>
 8016fe4:	f04f 3aff 	mov.w	sl, #4294967295
 8016fe8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016fea:	4648      	mov	r0, r9
 8016fec:	f001 fb62 	bl	80186b4 <_Bfree>
 8016ff0:	9905      	ldr	r1, [sp, #20]
 8016ff2:	4648      	mov	r0, r9
 8016ff4:	f001 fb5e 	bl	80186b4 <_Bfree>
 8016ff8:	4641      	mov	r1, r8
 8016ffa:	4648      	mov	r0, r9
 8016ffc:	f001 fb5a 	bl	80186b4 <_Bfree>
 8017000:	4621      	mov	r1, r4
 8017002:	4648      	mov	r0, r9
 8017004:	f001 fb56 	bl	80186b4 <_Bfree>
 8017008:	e619      	b.n	8016c3e <_strtod_l+0x63e>
 801700a:	f1ba 0f00 	cmp.w	sl, #0
 801700e:	d11a      	bne.n	8017046 <_strtod_l+0xa46>
 8017010:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017014:	b9eb      	cbnz	r3, 8017052 <_strtod_l+0xa52>
 8017016:	2200      	movs	r2, #0
 8017018:	4b3f      	ldr	r3, [pc, #252]	; (8017118 <_strtod_l+0xb18>)
 801701a:	4630      	mov	r0, r6
 801701c:	4639      	mov	r1, r7
 801701e:	f7e9 fd5d 	bl	8000adc <__aeabi_dcmplt>
 8017022:	b9c8      	cbnz	r0, 8017058 <_strtod_l+0xa58>
 8017024:	4630      	mov	r0, r6
 8017026:	4639      	mov	r1, r7
 8017028:	2200      	movs	r2, #0
 801702a:	4b3e      	ldr	r3, [pc, #248]	; (8017124 <_strtod_l+0xb24>)
 801702c:	f7e9 fae4 	bl	80005f8 <__aeabi_dmul>
 8017030:	4606      	mov	r6, r0
 8017032:	460f      	mov	r7, r1
 8017034:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8017038:	9618      	str	r6, [sp, #96]	; 0x60
 801703a:	9319      	str	r3, [sp, #100]	; 0x64
 801703c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8017040:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017044:	e79c      	b.n	8016f80 <_strtod_l+0x980>
 8017046:	f1ba 0f01 	cmp.w	sl, #1
 801704a:	d102      	bne.n	8017052 <_strtod_l+0xa52>
 801704c:	2d00      	cmp	r5, #0
 801704e:	f43f ad8e 	beq.w	8016b6e <_strtod_l+0x56e>
 8017052:	2200      	movs	r2, #0
 8017054:	4b34      	ldr	r3, [pc, #208]	; (8017128 <_strtod_l+0xb28>)
 8017056:	e78f      	b.n	8016f78 <_strtod_l+0x978>
 8017058:	2600      	movs	r6, #0
 801705a:	4f32      	ldr	r7, [pc, #200]	; (8017124 <_strtod_l+0xb24>)
 801705c:	e7ea      	b.n	8017034 <_strtod_l+0xa34>
 801705e:	4b31      	ldr	r3, [pc, #196]	; (8017124 <_strtod_l+0xb24>)
 8017060:	4630      	mov	r0, r6
 8017062:	4639      	mov	r1, r7
 8017064:	2200      	movs	r2, #0
 8017066:	f7e9 fac7 	bl	80005f8 <__aeabi_dmul>
 801706a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801706c:	4606      	mov	r6, r0
 801706e:	460f      	mov	r7, r1
 8017070:	b933      	cbnz	r3, 8017080 <_strtod_l+0xa80>
 8017072:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017076:	9010      	str	r0, [sp, #64]	; 0x40
 8017078:	9311      	str	r3, [sp, #68]	; 0x44
 801707a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801707e:	e7df      	b.n	8017040 <_strtod_l+0xa40>
 8017080:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8017084:	e7f9      	b.n	801707a <_strtod_l+0xa7a>
 8017086:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801708a:	9b04      	ldr	r3, [sp, #16]
 801708c:	2b00      	cmp	r3, #0
 801708e:	d1ab      	bne.n	8016fe8 <_strtod_l+0x9e8>
 8017090:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017094:	0d1b      	lsrs	r3, r3, #20
 8017096:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017098:	051b      	lsls	r3, r3, #20
 801709a:	429a      	cmp	r2, r3
 801709c:	465d      	mov	r5, fp
 801709e:	d1a3      	bne.n	8016fe8 <_strtod_l+0x9e8>
 80170a0:	4639      	mov	r1, r7
 80170a2:	4630      	mov	r0, r6
 80170a4:	f7e9 fd58 	bl	8000b58 <__aeabi_d2iz>
 80170a8:	f7e9 fa3c 	bl	8000524 <__aeabi_i2d>
 80170ac:	460b      	mov	r3, r1
 80170ae:	4602      	mov	r2, r0
 80170b0:	4639      	mov	r1, r7
 80170b2:	4630      	mov	r0, r6
 80170b4:	f7e9 f8e8 	bl	8000288 <__aeabi_dsub>
 80170b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80170ba:	4606      	mov	r6, r0
 80170bc:	460f      	mov	r7, r1
 80170be:	b933      	cbnz	r3, 80170ce <_strtod_l+0xace>
 80170c0:	f1ba 0f00 	cmp.w	sl, #0
 80170c4:	d103      	bne.n	80170ce <_strtod_l+0xace>
 80170c6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80170ca:	2d00      	cmp	r5, #0
 80170cc:	d06d      	beq.n	80171aa <_strtod_l+0xbaa>
 80170ce:	a30a      	add	r3, pc, #40	; (adr r3, 80170f8 <_strtod_l+0xaf8>)
 80170d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170d4:	4630      	mov	r0, r6
 80170d6:	4639      	mov	r1, r7
 80170d8:	f7e9 fd00 	bl	8000adc <__aeabi_dcmplt>
 80170dc:	2800      	cmp	r0, #0
 80170de:	f47f acb8 	bne.w	8016a52 <_strtod_l+0x452>
 80170e2:	a307      	add	r3, pc, #28	; (adr r3, 8017100 <_strtod_l+0xb00>)
 80170e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170e8:	4630      	mov	r0, r6
 80170ea:	4639      	mov	r1, r7
 80170ec:	f7e9 fd14 	bl	8000b18 <__aeabi_dcmpgt>
 80170f0:	2800      	cmp	r0, #0
 80170f2:	f43f af79 	beq.w	8016fe8 <_strtod_l+0x9e8>
 80170f6:	e4ac      	b.n	8016a52 <_strtod_l+0x452>
 80170f8:	94a03595 	.word	0x94a03595
 80170fc:	3fdfffff 	.word	0x3fdfffff
 8017100:	35afe535 	.word	0x35afe535
 8017104:	3fe00000 	.word	0x3fe00000
 8017108:	000fffff 	.word	0x000fffff
 801710c:	7ff00000 	.word	0x7ff00000
 8017110:	7fefffff 	.word	0x7fefffff
 8017114:	39500000 	.word	0x39500000
 8017118:	3ff00000 	.word	0x3ff00000
 801711c:	7fe00000 	.word	0x7fe00000
 8017120:	7c9fffff 	.word	0x7c9fffff
 8017124:	3fe00000 	.word	0x3fe00000
 8017128:	bff00000 	.word	0xbff00000
 801712c:	9b04      	ldr	r3, [sp, #16]
 801712e:	b333      	cbz	r3, 801717e <_strtod_l+0xb7e>
 8017130:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017132:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8017136:	d822      	bhi.n	801717e <_strtod_l+0xb7e>
 8017138:	a327      	add	r3, pc, #156	; (adr r3, 80171d8 <_strtod_l+0xbd8>)
 801713a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801713e:	4630      	mov	r0, r6
 8017140:	4639      	mov	r1, r7
 8017142:	f7e9 fcd5 	bl	8000af0 <__aeabi_dcmple>
 8017146:	b1a0      	cbz	r0, 8017172 <_strtod_l+0xb72>
 8017148:	4639      	mov	r1, r7
 801714a:	4630      	mov	r0, r6
 801714c:	f7e9 fd2c 	bl	8000ba8 <__aeabi_d2uiz>
 8017150:	2800      	cmp	r0, #0
 8017152:	bf08      	it	eq
 8017154:	2001      	moveq	r0, #1
 8017156:	f7e9 f9d5 	bl	8000504 <__aeabi_ui2d>
 801715a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801715c:	4606      	mov	r6, r0
 801715e:	460f      	mov	r7, r1
 8017160:	bb03      	cbnz	r3, 80171a4 <_strtod_l+0xba4>
 8017162:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017166:	9012      	str	r0, [sp, #72]	; 0x48
 8017168:	9313      	str	r3, [sp, #76]	; 0x4c
 801716a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801716e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017172:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017174:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017176:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801717a:	1a9b      	subs	r3, r3, r2
 801717c:	930b      	str	r3, [sp, #44]	; 0x2c
 801717e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8017182:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8017186:	f001 fd2d 	bl	8018be4 <__ulp>
 801718a:	4650      	mov	r0, sl
 801718c:	ec53 2b10 	vmov	r2, r3, d0
 8017190:	4659      	mov	r1, fp
 8017192:	f7e9 fa31 	bl	80005f8 <__aeabi_dmul>
 8017196:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801719a:	f7e9 f877 	bl	800028c <__adddf3>
 801719e:	4682      	mov	sl, r0
 80171a0:	468b      	mov	fp, r1
 80171a2:	e772      	b.n	801708a <_strtod_l+0xa8a>
 80171a4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80171a8:	e7df      	b.n	801716a <_strtod_l+0xb6a>
 80171aa:	a30d      	add	r3, pc, #52	; (adr r3, 80171e0 <_strtod_l+0xbe0>)
 80171ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171b0:	f7e9 fc94 	bl	8000adc <__aeabi_dcmplt>
 80171b4:	e79c      	b.n	80170f0 <_strtod_l+0xaf0>
 80171b6:	2300      	movs	r3, #0
 80171b8:	930d      	str	r3, [sp, #52]	; 0x34
 80171ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80171bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80171be:	6013      	str	r3, [r2, #0]
 80171c0:	f7ff ba61 	b.w	8016686 <_strtod_l+0x86>
 80171c4:	2b65      	cmp	r3, #101	; 0x65
 80171c6:	f04f 0200 	mov.w	r2, #0
 80171ca:	f43f ab4e 	beq.w	801686a <_strtod_l+0x26a>
 80171ce:	2101      	movs	r1, #1
 80171d0:	4614      	mov	r4, r2
 80171d2:	9104      	str	r1, [sp, #16]
 80171d4:	f7ff bacb 	b.w	801676e <_strtod_l+0x16e>
 80171d8:	ffc00000 	.word	0xffc00000
 80171dc:	41dfffff 	.word	0x41dfffff
 80171e0:	94a03595 	.word	0x94a03595
 80171e4:	3fcfffff 	.word	0x3fcfffff

080171e8 <_strtod_r>:
 80171e8:	4b05      	ldr	r3, [pc, #20]	; (8017200 <_strtod_r+0x18>)
 80171ea:	681b      	ldr	r3, [r3, #0]
 80171ec:	b410      	push	{r4}
 80171ee:	6a1b      	ldr	r3, [r3, #32]
 80171f0:	4c04      	ldr	r4, [pc, #16]	; (8017204 <_strtod_r+0x1c>)
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	bf08      	it	eq
 80171f6:	4623      	moveq	r3, r4
 80171f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80171fc:	f7ff ba00 	b.w	8016600 <_strtod_l>
 8017200:	20000e0c 	.word	0x20000e0c
 8017204:	20000e70 	.word	0x20000e70

08017208 <_strtol_l.isra.0>:
 8017208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801720c:	4680      	mov	r8, r0
 801720e:	4689      	mov	r9, r1
 8017210:	4692      	mov	sl, r2
 8017212:	461e      	mov	r6, r3
 8017214:	460f      	mov	r7, r1
 8017216:	463d      	mov	r5, r7
 8017218:	9808      	ldr	r0, [sp, #32]
 801721a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801721e:	f001 f9ed 	bl	80185fc <__locale_ctype_ptr_l>
 8017222:	4420      	add	r0, r4
 8017224:	7843      	ldrb	r3, [r0, #1]
 8017226:	f013 0308 	ands.w	r3, r3, #8
 801722a:	d132      	bne.n	8017292 <_strtol_l.isra.0+0x8a>
 801722c:	2c2d      	cmp	r4, #45	; 0x2d
 801722e:	d132      	bne.n	8017296 <_strtol_l.isra.0+0x8e>
 8017230:	787c      	ldrb	r4, [r7, #1]
 8017232:	1cbd      	adds	r5, r7, #2
 8017234:	2201      	movs	r2, #1
 8017236:	2e00      	cmp	r6, #0
 8017238:	d05d      	beq.n	80172f6 <_strtol_l.isra.0+0xee>
 801723a:	2e10      	cmp	r6, #16
 801723c:	d109      	bne.n	8017252 <_strtol_l.isra.0+0x4a>
 801723e:	2c30      	cmp	r4, #48	; 0x30
 8017240:	d107      	bne.n	8017252 <_strtol_l.isra.0+0x4a>
 8017242:	782b      	ldrb	r3, [r5, #0]
 8017244:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017248:	2b58      	cmp	r3, #88	; 0x58
 801724a:	d14f      	bne.n	80172ec <_strtol_l.isra.0+0xe4>
 801724c:	786c      	ldrb	r4, [r5, #1]
 801724e:	2610      	movs	r6, #16
 8017250:	3502      	adds	r5, #2
 8017252:	2a00      	cmp	r2, #0
 8017254:	bf14      	ite	ne
 8017256:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801725a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801725e:	2700      	movs	r7, #0
 8017260:	fbb1 fcf6 	udiv	ip, r1, r6
 8017264:	4638      	mov	r0, r7
 8017266:	fb06 1e1c 	mls	lr, r6, ip, r1
 801726a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801726e:	2b09      	cmp	r3, #9
 8017270:	d817      	bhi.n	80172a2 <_strtol_l.isra.0+0x9a>
 8017272:	461c      	mov	r4, r3
 8017274:	42a6      	cmp	r6, r4
 8017276:	dd23      	ble.n	80172c0 <_strtol_l.isra.0+0xb8>
 8017278:	1c7b      	adds	r3, r7, #1
 801727a:	d007      	beq.n	801728c <_strtol_l.isra.0+0x84>
 801727c:	4584      	cmp	ip, r0
 801727e:	d31c      	bcc.n	80172ba <_strtol_l.isra.0+0xb2>
 8017280:	d101      	bne.n	8017286 <_strtol_l.isra.0+0x7e>
 8017282:	45a6      	cmp	lr, r4
 8017284:	db19      	blt.n	80172ba <_strtol_l.isra.0+0xb2>
 8017286:	fb00 4006 	mla	r0, r0, r6, r4
 801728a:	2701      	movs	r7, #1
 801728c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017290:	e7eb      	b.n	801726a <_strtol_l.isra.0+0x62>
 8017292:	462f      	mov	r7, r5
 8017294:	e7bf      	b.n	8017216 <_strtol_l.isra.0+0xe>
 8017296:	2c2b      	cmp	r4, #43	; 0x2b
 8017298:	bf04      	itt	eq
 801729a:	1cbd      	addeq	r5, r7, #2
 801729c:	787c      	ldrbeq	r4, [r7, #1]
 801729e:	461a      	mov	r2, r3
 80172a0:	e7c9      	b.n	8017236 <_strtol_l.isra.0+0x2e>
 80172a2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80172a6:	2b19      	cmp	r3, #25
 80172a8:	d801      	bhi.n	80172ae <_strtol_l.isra.0+0xa6>
 80172aa:	3c37      	subs	r4, #55	; 0x37
 80172ac:	e7e2      	b.n	8017274 <_strtol_l.isra.0+0x6c>
 80172ae:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80172b2:	2b19      	cmp	r3, #25
 80172b4:	d804      	bhi.n	80172c0 <_strtol_l.isra.0+0xb8>
 80172b6:	3c57      	subs	r4, #87	; 0x57
 80172b8:	e7dc      	b.n	8017274 <_strtol_l.isra.0+0x6c>
 80172ba:	f04f 37ff 	mov.w	r7, #4294967295
 80172be:	e7e5      	b.n	801728c <_strtol_l.isra.0+0x84>
 80172c0:	1c7b      	adds	r3, r7, #1
 80172c2:	d108      	bne.n	80172d6 <_strtol_l.isra.0+0xce>
 80172c4:	2322      	movs	r3, #34	; 0x22
 80172c6:	f8c8 3000 	str.w	r3, [r8]
 80172ca:	4608      	mov	r0, r1
 80172cc:	f1ba 0f00 	cmp.w	sl, #0
 80172d0:	d107      	bne.n	80172e2 <_strtol_l.isra.0+0xda>
 80172d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80172d6:	b102      	cbz	r2, 80172da <_strtol_l.isra.0+0xd2>
 80172d8:	4240      	negs	r0, r0
 80172da:	f1ba 0f00 	cmp.w	sl, #0
 80172de:	d0f8      	beq.n	80172d2 <_strtol_l.isra.0+0xca>
 80172e0:	b10f      	cbz	r7, 80172e6 <_strtol_l.isra.0+0xde>
 80172e2:	f105 39ff 	add.w	r9, r5, #4294967295
 80172e6:	f8ca 9000 	str.w	r9, [sl]
 80172ea:	e7f2      	b.n	80172d2 <_strtol_l.isra.0+0xca>
 80172ec:	2430      	movs	r4, #48	; 0x30
 80172ee:	2e00      	cmp	r6, #0
 80172f0:	d1af      	bne.n	8017252 <_strtol_l.isra.0+0x4a>
 80172f2:	2608      	movs	r6, #8
 80172f4:	e7ad      	b.n	8017252 <_strtol_l.isra.0+0x4a>
 80172f6:	2c30      	cmp	r4, #48	; 0x30
 80172f8:	d0a3      	beq.n	8017242 <_strtol_l.isra.0+0x3a>
 80172fa:	260a      	movs	r6, #10
 80172fc:	e7a9      	b.n	8017252 <_strtol_l.isra.0+0x4a>
	...

08017300 <_strtol_r>:
 8017300:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017302:	4c06      	ldr	r4, [pc, #24]	; (801731c <_strtol_r+0x1c>)
 8017304:	4d06      	ldr	r5, [pc, #24]	; (8017320 <_strtol_r+0x20>)
 8017306:	6824      	ldr	r4, [r4, #0]
 8017308:	6a24      	ldr	r4, [r4, #32]
 801730a:	2c00      	cmp	r4, #0
 801730c:	bf08      	it	eq
 801730e:	462c      	moveq	r4, r5
 8017310:	9400      	str	r4, [sp, #0]
 8017312:	f7ff ff79 	bl	8017208 <_strtol_l.isra.0>
 8017316:	b003      	add	sp, #12
 8017318:	bd30      	pop	{r4, r5, pc}
 801731a:	bf00      	nop
 801731c:	20000e0c 	.word	0x20000e0c
 8017320:	20000e70 	.word	0x20000e70

08017324 <quorem>:
 8017324:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017328:	6903      	ldr	r3, [r0, #16]
 801732a:	690c      	ldr	r4, [r1, #16]
 801732c:	42a3      	cmp	r3, r4
 801732e:	4680      	mov	r8, r0
 8017330:	f2c0 8082 	blt.w	8017438 <quorem+0x114>
 8017334:	3c01      	subs	r4, #1
 8017336:	f101 0714 	add.w	r7, r1, #20
 801733a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801733e:	f100 0614 	add.w	r6, r0, #20
 8017342:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8017346:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801734a:	eb06 030c 	add.w	r3, r6, ip
 801734e:	3501      	adds	r5, #1
 8017350:	eb07 090c 	add.w	r9, r7, ip
 8017354:	9301      	str	r3, [sp, #4]
 8017356:	fbb0 f5f5 	udiv	r5, r0, r5
 801735a:	b395      	cbz	r5, 80173c2 <quorem+0x9e>
 801735c:	f04f 0a00 	mov.w	sl, #0
 8017360:	4638      	mov	r0, r7
 8017362:	46b6      	mov	lr, r6
 8017364:	46d3      	mov	fp, sl
 8017366:	f850 2b04 	ldr.w	r2, [r0], #4
 801736a:	b293      	uxth	r3, r2
 801736c:	fb05 a303 	mla	r3, r5, r3, sl
 8017370:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017374:	b29b      	uxth	r3, r3
 8017376:	ebab 0303 	sub.w	r3, fp, r3
 801737a:	0c12      	lsrs	r2, r2, #16
 801737c:	f8de b000 	ldr.w	fp, [lr]
 8017380:	fb05 a202 	mla	r2, r5, r2, sl
 8017384:	fa13 f38b 	uxtah	r3, r3, fp
 8017388:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801738c:	fa1f fb82 	uxth.w	fp, r2
 8017390:	f8de 2000 	ldr.w	r2, [lr]
 8017394:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8017398:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801739c:	b29b      	uxth	r3, r3
 801739e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80173a2:	4581      	cmp	r9, r0
 80173a4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80173a8:	f84e 3b04 	str.w	r3, [lr], #4
 80173ac:	d2db      	bcs.n	8017366 <quorem+0x42>
 80173ae:	f856 300c 	ldr.w	r3, [r6, ip]
 80173b2:	b933      	cbnz	r3, 80173c2 <quorem+0x9e>
 80173b4:	9b01      	ldr	r3, [sp, #4]
 80173b6:	3b04      	subs	r3, #4
 80173b8:	429e      	cmp	r6, r3
 80173ba:	461a      	mov	r2, r3
 80173bc:	d330      	bcc.n	8017420 <quorem+0xfc>
 80173be:	f8c8 4010 	str.w	r4, [r8, #16]
 80173c2:	4640      	mov	r0, r8
 80173c4:	f001 fb96 	bl	8018af4 <__mcmp>
 80173c8:	2800      	cmp	r0, #0
 80173ca:	db25      	blt.n	8017418 <quorem+0xf4>
 80173cc:	3501      	adds	r5, #1
 80173ce:	4630      	mov	r0, r6
 80173d0:	f04f 0c00 	mov.w	ip, #0
 80173d4:	f857 2b04 	ldr.w	r2, [r7], #4
 80173d8:	f8d0 e000 	ldr.w	lr, [r0]
 80173dc:	b293      	uxth	r3, r2
 80173de:	ebac 0303 	sub.w	r3, ip, r3
 80173e2:	0c12      	lsrs	r2, r2, #16
 80173e4:	fa13 f38e 	uxtah	r3, r3, lr
 80173e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80173ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80173f0:	b29b      	uxth	r3, r3
 80173f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80173f6:	45b9      	cmp	r9, r7
 80173f8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80173fc:	f840 3b04 	str.w	r3, [r0], #4
 8017400:	d2e8      	bcs.n	80173d4 <quorem+0xb0>
 8017402:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8017406:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801740a:	b92a      	cbnz	r2, 8017418 <quorem+0xf4>
 801740c:	3b04      	subs	r3, #4
 801740e:	429e      	cmp	r6, r3
 8017410:	461a      	mov	r2, r3
 8017412:	d30b      	bcc.n	801742c <quorem+0x108>
 8017414:	f8c8 4010 	str.w	r4, [r8, #16]
 8017418:	4628      	mov	r0, r5
 801741a:	b003      	add	sp, #12
 801741c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017420:	6812      	ldr	r2, [r2, #0]
 8017422:	3b04      	subs	r3, #4
 8017424:	2a00      	cmp	r2, #0
 8017426:	d1ca      	bne.n	80173be <quorem+0x9a>
 8017428:	3c01      	subs	r4, #1
 801742a:	e7c5      	b.n	80173b8 <quorem+0x94>
 801742c:	6812      	ldr	r2, [r2, #0]
 801742e:	3b04      	subs	r3, #4
 8017430:	2a00      	cmp	r2, #0
 8017432:	d1ef      	bne.n	8017414 <quorem+0xf0>
 8017434:	3c01      	subs	r4, #1
 8017436:	e7ea      	b.n	801740e <quorem+0xea>
 8017438:	2000      	movs	r0, #0
 801743a:	e7ee      	b.n	801741a <quorem+0xf6>
 801743c:	0000      	movs	r0, r0
	...

08017440 <_dtoa_r>:
 8017440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017444:	ec57 6b10 	vmov	r6, r7, d0
 8017448:	b097      	sub	sp, #92	; 0x5c
 801744a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801744c:	9106      	str	r1, [sp, #24]
 801744e:	4604      	mov	r4, r0
 8017450:	920b      	str	r2, [sp, #44]	; 0x2c
 8017452:	9312      	str	r3, [sp, #72]	; 0x48
 8017454:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017458:	e9cd 6700 	strd	r6, r7, [sp]
 801745c:	b93d      	cbnz	r5, 801746e <_dtoa_r+0x2e>
 801745e:	2010      	movs	r0, #16
 8017460:	f7fe f916 	bl	8015690 <malloc>
 8017464:	6260      	str	r0, [r4, #36]	; 0x24
 8017466:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801746a:	6005      	str	r5, [r0, #0]
 801746c:	60c5      	str	r5, [r0, #12]
 801746e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017470:	6819      	ldr	r1, [r3, #0]
 8017472:	b151      	cbz	r1, 801748a <_dtoa_r+0x4a>
 8017474:	685a      	ldr	r2, [r3, #4]
 8017476:	604a      	str	r2, [r1, #4]
 8017478:	2301      	movs	r3, #1
 801747a:	4093      	lsls	r3, r2
 801747c:	608b      	str	r3, [r1, #8]
 801747e:	4620      	mov	r0, r4
 8017480:	f001 f918 	bl	80186b4 <_Bfree>
 8017484:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017486:	2200      	movs	r2, #0
 8017488:	601a      	str	r2, [r3, #0]
 801748a:	1e3b      	subs	r3, r7, #0
 801748c:	bfbb      	ittet	lt
 801748e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017492:	9301      	strlt	r3, [sp, #4]
 8017494:	2300      	movge	r3, #0
 8017496:	2201      	movlt	r2, #1
 8017498:	bfac      	ite	ge
 801749a:	f8c8 3000 	strge.w	r3, [r8]
 801749e:	f8c8 2000 	strlt.w	r2, [r8]
 80174a2:	4baf      	ldr	r3, [pc, #700]	; (8017760 <_dtoa_r+0x320>)
 80174a4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80174a8:	ea33 0308 	bics.w	r3, r3, r8
 80174ac:	d114      	bne.n	80174d8 <_dtoa_r+0x98>
 80174ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80174b0:	f242 730f 	movw	r3, #9999	; 0x270f
 80174b4:	6013      	str	r3, [r2, #0]
 80174b6:	9b00      	ldr	r3, [sp, #0]
 80174b8:	b923      	cbnz	r3, 80174c4 <_dtoa_r+0x84>
 80174ba:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80174be:	2800      	cmp	r0, #0
 80174c0:	f000 8542 	beq.w	8017f48 <_dtoa_r+0xb08>
 80174c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80174c6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8017774 <_dtoa_r+0x334>
 80174ca:	2b00      	cmp	r3, #0
 80174cc:	f000 8544 	beq.w	8017f58 <_dtoa_r+0xb18>
 80174d0:	f10b 0303 	add.w	r3, fp, #3
 80174d4:	f000 bd3e 	b.w	8017f54 <_dtoa_r+0xb14>
 80174d8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80174dc:	2200      	movs	r2, #0
 80174de:	2300      	movs	r3, #0
 80174e0:	4630      	mov	r0, r6
 80174e2:	4639      	mov	r1, r7
 80174e4:	f7e9 faf0 	bl	8000ac8 <__aeabi_dcmpeq>
 80174e8:	4681      	mov	r9, r0
 80174ea:	b168      	cbz	r0, 8017508 <_dtoa_r+0xc8>
 80174ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80174ee:	2301      	movs	r3, #1
 80174f0:	6013      	str	r3, [r2, #0]
 80174f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80174f4:	2b00      	cmp	r3, #0
 80174f6:	f000 8524 	beq.w	8017f42 <_dtoa_r+0xb02>
 80174fa:	4b9a      	ldr	r3, [pc, #616]	; (8017764 <_dtoa_r+0x324>)
 80174fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80174fe:	f103 3bff 	add.w	fp, r3, #4294967295
 8017502:	6013      	str	r3, [r2, #0]
 8017504:	f000 bd28 	b.w	8017f58 <_dtoa_r+0xb18>
 8017508:	aa14      	add	r2, sp, #80	; 0x50
 801750a:	a915      	add	r1, sp, #84	; 0x54
 801750c:	ec47 6b10 	vmov	d0, r6, r7
 8017510:	4620      	mov	r0, r4
 8017512:	f001 fbdd 	bl	8018cd0 <__d2b>
 8017516:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801751a:	9004      	str	r0, [sp, #16]
 801751c:	2d00      	cmp	r5, #0
 801751e:	d07c      	beq.n	801761a <_dtoa_r+0x1da>
 8017520:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8017524:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8017528:	46b2      	mov	sl, r6
 801752a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801752e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8017532:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8017536:	2200      	movs	r2, #0
 8017538:	4b8b      	ldr	r3, [pc, #556]	; (8017768 <_dtoa_r+0x328>)
 801753a:	4650      	mov	r0, sl
 801753c:	4659      	mov	r1, fp
 801753e:	f7e8 fea3 	bl	8000288 <__aeabi_dsub>
 8017542:	a381      	add	r3, pc, #516	; (adr r3, 8017748 <_dtoa_r+0x308>)
 8017544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017548:	f7e9 f856 	bl	80005f8 <__aeabi_dmul>
 801754c:	a380      	add	r3, pc, #512	; (adr r3, 8017750 <_dtoa_r+0x310>)
 801754e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017552:	f7e8 fe9b 	bl	800028c <__adddf3>
 8017556:	4606      	mov	r6, r0
 8017558:	4628      	mov	r0, r5
 801755a:	460f      	mov	r7, r1
 801755c:	f7e8 ffe2 	bl	8000524 <__aeabi_i2d>
 8017560:	a37d      	add	r3, pc, #500	; (adr r3, 8017758 <_dtoa_r+0x318>)
 8017562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017566:	f7e9 f847 	bl	80005f8 <__aeabi_dmul>
 801756a:	4602      	mov	r2, r0
 801756c:	460b      	mov	r3, r1
 801756e:	4630      	mov	r0, r6
 8017570:	4639      	mov	r1, r7
 8017572:	f7e8 fe8b 	bl	800028c <__adddf3>
 8017576:	4606      	mov	r6, r0
 8017578:	460f      	mov	r7, r1
 801757a:	f7e9 faed 	bl	8000b58 <__aeabi_d2iz>
 801757e:	2200      	movs	r2, #0
 8017580:	4682      	mov	sl, r0
 8017582:	2300      	movs	r3, #0
 8017584:	4630      	mov	r0, r6
 8017586:	4639      	mov	r1, r7
 8017588:	f7e9 faa8 	bl	8000adc <__aeabi_dcmplt>
 801758c:	b148      	cbz	r0, 80175a2 <_dtoa_r+0x162>
 801758e:	4650      	mov	r0, sl
 8017590:	f7e8 ffc8 	bl	8000524 <__aeabi_i2d>
 8017594:	4632      	mov	r2, r6
 8017596:	463b      	mov	r3, r7
 8017598:	f7e9 fa96 	bl	8000ac8 <__aeabi_dcmpeq>
 801759c:	b908      	cbnz	r0, 80175a2 <_dtoa_r+0x162>
 801759e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80175a2:	f1ba 0f16 	cmp.w	sl, #22
 80175a6:	d859      	bhi.n	801765c <_dtoa_r+0x21c>
 80175a8:	4970      	ldr	r1, [pc, #448]	; (801776c <_dtoa_r+0x32c>)
 80175aa:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80175ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80175b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80175b6:	f7e9 faaf 	bl	8000b18 <__aeabi_dcmpgt>
 80175ba:	2800      	cmp	r0, #0
 80175bc:	d050      	beq.n	8017660 <_dtoa_r+0x220>
 80175be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80175c2:	2300      	movs	r3, #0
 80175c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80175c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80175c8:	1b5d      	subs	r5, r3, r5
 80175ca:	f1b5 0801 	subs.w	r8, r5, #1
 80175ce:	bf49      	itett	mi
 80175d0:	f1c5 0301 	rsbmi	r3, r5, #1
 80175d4:	2300      	movpl	r3, #0
 80175d6:	9305      	strmi	r3, [sp, #20]
 80175d8:	f04f 0800 	movmi.w	r8, #0
 80175dc:	bf58      	it	pl
 80175de:	9305      	strpl	r3, [sp, #20]
 80175e0:	f1ba 0f00 	cmp.w	sl, #0
 80175e4:	db3e      	blt.n	8017664 <_dtoa_r+0x224>
 80175e6:	2300      	movs	r3, #0
 80175e8:	44d0      	add	r8, sl
 80175ea:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80175ee:	9307      	str	r3, [sp, #28]
 80175f0:	9b06      	ldr	r3, [sp, #24]
 80175f2:	2b09      	cmp	r3, #9
 80175f4:	f200 8090 	bhi.w	8017718 <_dtoa_r+0x2d8>
 80175f8:	2b05      	cmp	r3, #5
 80175fa:	bfc4      	itt	gt
 80175fc:	3b04      	subgt	r3, #4
 80175fe:	9306      	strgt	r3, [sp, #24]
 8017600:	9b06      	ldr	r3, [sp, #24]
 8017602:	f1a3 0302 	sub.w	r3, r3, #2
 8017606:	bfcc      	ite	gt
 8017608:	2500      	movgt	r5, #0
 801760a:	2501      	movle	r5, #1
 801760c:	2b03      	cmp	r3, #3
 801760e:	f200 808f 	bhi.w	8017730 <_dtoa_r+0x2f0>
 8017612:	e8df f003 	tbb	[pc, r3]
 8017616:	7f7d      	.short	0x7f7d
 8017618:	7131      	.short	0x7131
 801761a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 801761e:	441d      	add	r5, r3
 8017620:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8017624:	2820      	cmp	r0, #32
 8017626:	dd13      	ble.n	8017650 <_dtoa_r+0x210>
 8017628:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801762c:	9b00      	ldr	r3, [sp, #0]
 801762e:	fa08 f800 	lsl.w	r8, r8, r0
 8017632:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8017636:	fa23 f000 	lsr.w	r0, r3, r0
 801763a:	ea48 0000 	orr.w	r0, r8, r0
 801763e:	f7e8 ff61 	bl	8000504 <__aeabi_ui2d>
 8017642:	2301      	movs	r3, #1
 8017644:	4682      	mov	sl, r0
 8017646:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801764a:	3d01      	subs	r5, #1
 801764c:	9313      	str	r3, [sp, #76]	; 0x4c
 801764e:	e772      	b.n	8017536 <_dtoa_r+0xf6>
 8017650:	9b00      	ldr	r3, [sp, #0]
 8017652:	f1c0 0020 	rsb	r0, r0, #32
 8017656:	fa03 f000 	lsl.w	r0, r3, r0
 801765a:	e7f0      	b.n	801763e <_dtoa_r+0x1fe>
 801765c:	2301      	movs	r3, #1
 801765e:	e7b1      	b.n	80175c4 <_dtoa_r+0x184>
 8017660:	900f      	str	r0, [sp, #60]	; 0x3c
 8017662:	e7b0      	b.n	80175c6 <_dtoa_r+0x186>
 8017664:	9b05      	ldr	r3, [sp, #20]
 8017666:	eba3 030a 	sub.w	r3, r3, sl
 801766a:	9305      	str	r3, [sp, #20]
 801766c:	f1ca 0300 	rsb	r3, sl, #0
 8017670:	9307      	str	r3, [sp, #28]
 8017672:	2300      	movs	r3, #0
 8017674:	930e      	str	r3, [sp, #56]	; 0x38
 8017676:	e7bb      	b.n	80175f0 <_dtoa_r+0x1b0>
 8017678:	2301      	movs	r3, #1
 801767a:	930a      	str	r3, [sp, #40]	; 0x28
 801767c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801767e:	2b00      	cmp	r3, #0
 8017680:	dd59      	ble.n	8017736 <_dtoa_r+0x2f6>
 8017682:	9302      	str	r3, [sp, #8]
 8017684:	4699      	mov	r9, r3
 8017686:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017688:	2200      	movs	r2, #0
 801768a:	6072      	str	r2, [r6, #4]
 801768c:	2204      	movs	r2, #4
 801768e:	f102 0014 	add.w	r0, r2, #20
 8017692:	4298      	cmp	r0, r3
 8017694:	6871      	ldr	r1, [r6, #4]
 8017696:	d953      	bls.n	8017740 <_dtoa_r+0x300>
 8017698:	4620      	mov	r0, r4
 801769a:	f000 ffd7 	bl	801864c <_Balloc>
 801769e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80176a0:	6030      	str	r0, [r6, #0]
 80176a2:	f1b9 0f0e 	cmp.w	r9, #14
 80176a6:	f8d3 b000 	ldr.w	fp, [r3]
 80176aa:	f200 80e6 	bhi.w	801787a <_dtoa_r+0x43a>
 80176ae:	2d00      	cmp	r5, #0
 80176b0:	f000 80e3 	beq.w	801787a <_dtoa_r+0x43a>
 80176b4:	ed9d 7b00 	vldr	d7, [sp]
 80176b8:	f1ba 0f00 	cmp.w	sl, #0
 80176bc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80176c0:	dd74      	ble.n	80177ac <_dtoa_r+0x36c>
 80176c2:	4a2a      	ldr	r2, [pc, #168]	; (801776c <_dtoa_r+0x32c>)
 80176c4:	f00a 030f 	and.w	r3, sl, #15
 80176c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80176cc:	ed93 7b00 	vldr	d7, [r3]
 80176d0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80176d4:	06f0      	lsls	r0, r6, #27
 80176d6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80176da:	d565      	bpl.n	80177a8 <_dtoa_r+0x368>
 80176dc:	4b24      	ldr	r3, [pc, #144]	; (8017770 <_dtoa_r+0x330>)
 80176de:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80176e2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80176e6:	f7e9 f8b1 	bl	800084c <__aeabi_ddiv>
 80176ea:	e9cd 0100 	strd	r0, r1, [sp]
 80176ee:	f006 060f 	and.w	r6, r6, #15
 80176f2:	2503      	movs	r5, #3
 80176f4:	4f1e      	ldr	r7, [pc, #120]	; (8017770 <_dtoa_r+0x330>)
 80176f6:	e04c      	b.n	8017792 <_dtoa_r+0x352>
 80176f8:	2301      	movs	r3, #1
 80176fa:	930a      	str	r3, [sp, #40]	; 0x28
 80176fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80176fe:	4453      	add	r3, sl
 8017700:	f103 0901 	add.w	r9, r3, #1
 8017704:	9302      	str	r3, [sp, #8]
 8017706:	464b      	mov	r3, r9
 8017708:	2b01      	cmp	r3, #1
 801770a:	bfb8      	it	lt
 801770c:	2301      	movlt	r3, #1
 801770e:	e7ba      	b.n	8017686 <_dtoa_r+0x246>
 8017710:	2300      	movs	r3, #0
 8017712:	e7b2      	b.n	801767a <_dtoa_r+0x23a>
 8017714:	2300      	movs	r3, #0
 8017716:	e7f0      	b.n	80176fa <_dtoa_r+0x2ba>
 8017718:	2501      	movs	r5, #1
 801771a:	2300      	movs	r3, #0
 801771c:	9306      	str	r3, [sp, #24]
 801771e:	950a      	str	r5, [sp, #40]	; 0x28
 8017720:	f04f 33ff 	mov.w	r3, #4294967295
 8017724:	9302      	str	r3, [sp, #8]
 8017726:	4699      	mov	r9, r3
 8017728:	2200      	movs	r2, #0
 801772a:	2312      	movs	r3, #18
 801772c:	920b      	str	r2, [sp, #44]	; 0x2c
 801772e:	e7aa      	b.n	8017686 <_dtoa_r+0x246>
 8017730:	2301      	movs	r3, #1
 8017732:	930a      	str	r3, [sp, #40]	; 0x28
 8017734:	e7f4      	b.n	8017720 <_dtoa_r+0x2e0>
 8017736:	2301      	movs	r3, #1
 8017738:	9302      	str	r3, [sp, #8]
 801773a:	4699      	mov	r9, r3
 801773c:	461a      	mov	r2, r3
 801773e:	e7f5      	b.n	801772c <_dtoa_r+0x2ec>
 8017740:	3101      	adds	r1, #1
 8017742:	6071      	str	r1, [r6, #4]
 8017744:	0052      	lsls	r2, r2, #1
 8017746:	e7a2      	b.n	801768e <_dtoa_r+0x24e>
 8017748:	636f4361 	.word	0x636f4361
 801774c:	3fd287a7 	.word	0x3fd287a7
 8017750:	8b60c8b3 	.word	0x8b60c8b3
 8017754:	3fc68a28 	.word	0x3fc68a28
 8017758:	509f79fb 	.word	0x509f79fb
 801775c:	3fd34413 	.word	0x3fd34413
 8017760:	7ff00000 	.word	0x7ff00000
 8017764:	0801b12d 	.word	0x0801b12d
 8017768:	3ff80000 	.word	0x3ff80000
 801776c:	0801b1e8 	.word	0x0801b1e8
 8017770:	0801b1c0 	.word	0x0801b1c0
 8017774:	0801b1b1 	.word	0x0801b1b1
 8017778:	07f1      	lsls	r1, r6, #31
 801777a:	d508      	bpl.n	801778e <_dtoa_r+0x34e>
 801777c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017780:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017784:	f7e8 ff38 	bl	80005f8 <__aeabi_dmul>
 8017788:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801778c:	3501      	adds	r5, #1
 801778e:	1076      	asrs	r6, r6, #1
 8017790:	3708      	adds	r7, #8
 8017792:	2e00      	cmp	r6, #0
 8017794:	d1f0      	bne.n	8017778 <_dtoa_r+0x338>
 8017796:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801779a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801779e:	f7e9 f855 	bl	800084c <__aeabi_ddiv>
 80177a2:	e9cd 0100 	strd	r0, r1, [sp]
 80177a6:	e01a      	b.n	80177de <_dtoa_r+0x39e>
 80177a8:	2502      	movs	r5, #2
 80177aa:	e7a3      	b.n	80176f4 <_dtoa_r+0x2b4>
 80177ac:	f000 80a0 	beq.w	80178f0 <_dtoa_r+0x4b0>
 80177b0:	f1ca 0600 	rsb	r6, sl, #0
 80177b4:	4b9f      	ldr	r3, [pc, #636]	; (8017a34 <_dtoa_r+0x5f4>)
 80177b6:	4fa0      	ldr	r7, [pc, #640]	; (8017a38 <_dtoa_r+0x5f8>)
 80177b8:	f006 020f 	and.w	r2, r6, #15
 80177bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80177c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80177c8:	f7e8 ff16 	bl	80005f8 <__aeabi_dmul>
 80177cc:	e9cd 0100 	strd	r0, r1, [sp]
 80177d0:	1136      	asrs	r6, r6, #4
 80177d2:	2300      	movs	r3, #0
 80177d4:	2502      	movs	r5, #2
 80177d6:	2e00      	cmp	r6, #0
 80177d8:	d17f      	bne.n	80178da <_dtoa_r+0x49a>
 80177da:	2b00      	cmp	r3, #0
 80177dc:	d1e1      	bne.n	80177a2 <_dtoa_r+0x362>
 80177de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80177e0:	2b00      	cmp	r3, #0
 80177e2:	f000 8087 	beq.w	80178f4 <_dtoa_r+0x4b4>
 80177e6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80177ea:	2200      	movs	r2, #0
 80177ec:	4b93      	ldr	r3, [pc, #588]	; (8017a3c <_dtoa_r+0x5fc>)
 80177ee:	4630      	mov	r0, r6
 80177f0:	4639      	mov	r1, r7
 80177f2:	f7e9 f973 	bl	8000adc <__aeabi_dcmplt>
 80177f6:	2800      	cmp	r0, #0
 80177f8:	d07c      	beq.n	80178f4 <_dtoa_r+0x4b4>
 80177fa:	f1b9 0f00 	cmp.w	r9, #0
 80177fe:	d079      	beq.n	80178f4 <_dtoa_r+0x4b4>
 8017800:	9b02      	ldr	r3, [sp, #8]
 8017802:	2b00      	cmp	r3, #0
 8017804:	dd35      	ble.n	8017872 <_dtoa_r+0x432>
 8017806:	f10a 33ff 	add.w	r3, sl, #4294967295
 801780a:	9308      	str	r3, [sp, #32]
 801780c:	4639      	mov	r1, r7
 801780e:	2200      	movs	r2, #0
 8017810:	4b8b      	ldr	r3, [pc, #556]	; (8017a40 <_dtoa_r+0x600>)
 8017812:	4630      	mov	r0, r6
 8017814:	f7e8 fef0 	bl	80005f8 <__aeabi_dmul>
 8017818:	e9cd 0100 	strd	r0, r1, [sp]
 801781c:	9f02      	ldr	r7, [sp, #8]
 801781e:	3501      	adds	r5, #1
 8017820:	4628      	mov	r0, r5
 8017822:	f7e8 fe7f 	bl	8000524 <__aeabi_i2d>
 8017826:	e9dd 2300 	ldrd	r2, r3, [sp]
 801782a:	f7e8 fee5 	bl	80005f8 <__aeabi_dmul>
 801782e:	2200      	movs	r2, #0
 8017830:	4b84      	ldr	r3, [pc, #528]	; (8017a44 <_dtoa_r+0x604>)
 8017832:	f7e8 fd2b 	bl	800028c <__adddf3>
 8017836:	4605      	mov	r5, r0
 8017838:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801783c:	2f00      	cmp	r7, #0
 801783e:	d15d      	bne.n	80178fc <_dtoa_r+0x4bc>
 8017840:	2200      	movs	r2, #0
 8017842:	4b81      	ldr	r3, [pc, #516]	; (8017a48 <_dtoa_r+0x608>)
 8017844:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017848:	f7e8 fd1e 	bl	8000288 <__aeabi_dsub>
 801784c:	462a      	mov	r2, r5
 801784e:	4633      	mov	r3, r6
 8017850:	e9cd 0100 	strd	r0, r1, [sp]
 8017854:	f7e9 f960 	bl	8000b18 <__aeabi_dcmpgt>
 8017858:	2800      	cmp	r0, #0
 801785a:	f040 8288 	bne.w	8017d6e <_dtoa_r+0x92e>
 801785e:	462a      	mov	r2, r5
 8017860:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8017864:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017868:	f7e9 f938 	bl	8000adc <__aeabi_dcmplt>
 801786c:	2800      	cmp	r0, #0
 801786e:	f040 827c 	bne.w	8017d6a <_dtoa_r+0x92a>
 8017872:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017876:	e9cd 2300 	strd	r2, r3, [sp]
 801787a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801787c:	2b00      	cmp	r3, #0
 801787e:	f2c0 8150 	blt.w	8017b22 <_dtoa_r+0x6e2>
 8017882:	f1ba 0f0e 	cmp.w	sl, #14
 8017886:	f300 814c 	bgt.w	8017b22 <_dtoa_r+0x6e2>
 801788a:	4b6a      	ldr	r3, [pc, #424]	; (8017a34 <_dtoa_r+0x5f4>)
 801788c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017890:	ed93 7b00 	vldr	d7, [r3]
 8017894:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017896:	2b00      	cmp	r3, #0
 8017898:	ed8d 7b02 	vstr	d7, [sp, #8]
 801789c:	f280 80d8 	bge.w	8017a50 <_dtoa_r+0x610>
 80178a0:	f1b9 0f00 	cmp.w	r9, #0
 80178a4:	f300 80d4 	bgt.w	8017a50 <_dtoa_r+0x610>
 80178a8:	f040 825e 	bne.w	8017d68 <_dtoa_r+0x928>
 80178ac:	2200      	movs	r2, #0
 80178ae:	4b66      	ldr	r3, [pc, #408]	; (8017a48 <_dtoa_r+0x608>)
 80178b0:	ec51 0b17 	vmov	r0, r1, d7
 80178b4:	f7e8 fea0 	bl	80005f8 <__aeabi_dmul>
 80178b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80178bc:	f7e9 f922 	bl	8000b04 <__aeabi_dcmpge>
 80178c0:	464f      	mov	r7, r9
 80178c2:	464e      	mov	r6, r9
 80178c4:	2800      	cmp	r0, #0
 80178c6:	f040 8234 	bne.w	8017d32 <_dtoa_r+0x8f2>
 80178ca:	2331      	movs	r3, #49	; 0x31
 80178cc:	f10b 0501 	add.w	r5, fp, #1
 80178d0:	f88b 3000 	strb.w	r3, [fp]
 80178d4:	f10a 0a01 	add.w	sl, sl, #1
 80178d8:	e22f      	b.n	8017d3a <_dtoa_r+0x8fa>
 80178da:	07f2      	lsls	r2, r6, #31
 80178dc:	d505      	bpl.n	80178ea <_dtoa_r+0x4aa>
 80178de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80178e2:	f7e8 fe89 	bl	80005f8 <__aeabi_dmul>
 80178e6:	3501      	adds	r5, #1
 80178e8:	2301      	movs	r3, #1
 80178ea:	1076      	asrs	r6, r6, #1
 80178ec:	3708      	adds	r7, #8
 80178ee:	e772      	b.n	80177d6 <_dtoa_r+0x396>
 80178f0:	2502      	movs	r5, #2
 80178f2:	e774      	b.n	80177de <_dtoa_r+0x39e>
 80178f4:	f8cd a020 	str.w	sl, [sp, #32]
 80178f8:	464f      	mov	r7, r9
 80178fa:	e791      	b.n	8017820 <_dtoa_r+0x3e0>
 80178fc:	4b4d      	ldr	r3, [pc, #308]	; (8017a34 <_dtoa_r+0x5f4>)
 80178fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8017902:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8017906:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017908:	2b00      	cmp	r3, #0
 801790a:	d047      	beq.n	801799c <_dtoa_r+0x55c>
 801790c:	4602      	mov	r2, r0
 801790e:	460b      	mov	r3, r1
 8017910:	2000      	movs	r0, #0
 8017912:	494e      	ldr	r1, [pc, #312]	; (8017a4c <_dtoa_r+0x60c>)
 8017914:	f7e8 ff9a 	bl	800084c <__aeabi_ddiv>
 8017918:	462a      	mov	r2, r5
 801791a:	4633      	mov	r3, r6
 801791c:	f7e8 fcb4 	bl	8000288 <__aeabi_dsub>
 8017920:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017924:	465d      	mov	r5, fp
 8017926:	e9dd 0100 	ldrd	r0, r1, [sp]
 801792a:	f7e9 f915 	bl	8000b58 <__aeabi_d2iz>
 801792e:	4606      	mov	r6, r0
 8017930:	f7e8 fdf8 	bl	8000524 <__aeabi_i2d>
 8017934:	4602      	mov	r2, r0
 8017936:	460b      	mov	r3, r1
 8017938:	e9dd 0100 	ldrd	r0, r1, [sp]
 801793c:	f7e8 fca4 	bl	8000288 <__aeabi_dsub>
 8017940:	3630      	adds	r6, #48	; 0x30
 8017942:	f805 6b01 	strb.w	r6, [r5], #1
 8017946:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801794a:	e9cd 0100 	strd	r0, r1, [sp]
 801794e:	f7e9 f8c5 	bl	8000adc <__aeabi_dcmplt>
 8017952:	2800      	cmp	r0, #0
 8017954:	d163      	bne.n	8017a1e <_dtoa_r+0x5de>
 8017956:	e9dd 2300 	ldrd	r2, r3, [sp]
 801795a:	2000      	movs	r0, #0
 801795c:	4937      	ldr	r1, [pc, #220]	; (8017a3c <_dtoa_r+0x5fc>)
 801795e:	f7e8 fc93 	bl	8000288 <__aeabi_dsub>
 8017962:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017966:	f7e9 f8b9 	bl	8000adc <__aeabi_dcmplt>
 801796a:	2800      	cmp	r0, #0
 801796c:	f040 80b7 	bne.w	8017ade <_dtoa_r+0x69e>
 8017970:	eba5 030b 	sub.w	r3, r5, fp
 8017974:	429f      	cmp	r7, r3
 8017976:	f77f af7c 	ble.w	8017872 <_dtoa_r+0x432>
 801797a:	2200      	movs	r2, #0
 801797c:	4b30      	ldr	r3, [pc, #192]	; (8017a40 <_dtoa_r+0x600>)
 801797e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017982:	f7e8 fe39 	bl	80005f8 <__aeabi_dmul>
 8017986:	2200      	movs	r2, #0
 8017988:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801798c:	4b2c      	ldr	r3, [pc, #176]	; (8017a40 <_dtoa_r+0x600>)
 801798e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017992:	f7e8 fe31 	bl	80005f8 <__aeabi_dmul>
 8017996:	e9cd 0100 	strd	r0, r1, [sp]
 801799a:	e7c4      	b.n	8017926 <_dtoa_r+0x4e6>
 801799c:	462a      	mov	r2, r5
 801799e:	4633      	mov	r3, r6
 80179a0:	f7e8 fe2a 	bl	80005f8 <__aeabi_dmul>
 80179a4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80179a8:	eb0b 0507 	add.w	r5, fp, r7
 80179ac:	465e      	mov	r6, fp
 80179ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80179b2:	f7e9 f8d1 	bl	8000b58 <__aeabi_d2iz>
 80179b6:	4607      	mov	r7, r0
 80179b8:	f7e8 fdb4 	bl	8000524 <__aeabi_i2d>
 80179bc:	3730      	adds	r7, #48	; 0x30
 80179be:	4602      	mov	r2, r0
 80179c0:	460b      	mov	r3, r1
 80179c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80179c6:	f7e8 fc5f 	bl	8000288 <__aeabi_dsub>
 80179ca:	f806 7b01 	strb.w	r7, [r6], #1
 80179ce:	42ae      	cmp	r6, r5
 80179d0:	e9cd 0100 	strd	r0, r1, [sp]
 80179d4:	f04f 0200 	mov.w	r2, #0
 80179d8:	d126      	bne.n	8017a28 <_dtoa_r+0x5e8>
 80179da:	4b1c      	ldr	r3, [pc, #112]	; (8017a4c <_dtoa_r+0x60c>)
 80179dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80179e0:	f7e8 fc54 	bl	800028c <__adddf3>
 80179e4:	4602      	mov	r2, r0
 80179e6:	460b      	mov	r3, r1
 80179e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80179ec:	f7e9 f894 	bl	8000b18 <__aeabi_dcmpgt>
 80179f0:	2800      	cmp	r0, #0
 80179f2:	d174      	bne.n	8017ade <_dtoa_r+0x69e>
 80179f4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80179f8:	2000      	movs	r0, #0
 80179fa:	4914      	ldr	r1, [pc, #80]	; (8017a4c <_dtoa_r+0x60c>)
 80179fc:	f7e8 fc44 	bl	8000288 <__aeabi_dsub>
 8017a00:	4602      	mov	r2, r0
 8017a02:	460b      	mov	r3, r1
 8017a04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017a08:	f7e9 f868 	bl	8000adc <__aeabi_dcmplt>
 8017a0c:	2800      	cmp	r0, #0
 8017a0e:	f43f af30 	beq.w	8017872 <_dtoa_r+0x432>
 8017a12:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017a16:	2b30      	cmp	r3, #48	; 0x30
 8017a18:	f105 32ff 	add.w	r2, r5, #4294967295
 8017a1c:	d002      	beq.n	8017a24 <_dtoa_r+0x5e4>
 8017a1e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017a22:	e04a      	b.n	8017aba <_dtoa_r+0x67a>
 8017a24:	4615      	mov	r5, r2
 8017a26:	e7f4      	b.n	8017a12 <_dtoa_r+0x5d2>
 8017a28:	4b05      	ldr	r3, [pc, #20]	; (8017a40 <_dtoa_r+0x600>)
 8017a2a:	f7e8 fde5 	bl	80005f8 <__aeabi_dmul>
 8017a2e:	e9cd 0100 	strd	r0, r1, [sp]
 8017a32:	e7bc      	b.n	80179ae <_dtoa_r+0x56e>
 8017a34:	0801b1e8 	.word	0x0801b1e8
 8017a38:	0801b1c0 	.word	0x0801b1c0
 8017a3c:	3ff00000 	.word	0x3ff00000
 8017a40:	40240000 	.word	0x40240000
 8017a44:	401c0000 	.word	0x401c0000
 8017a48:	40140000 	.word	0x40140000
 8017a4c:	3fe00000 	.word	0x3fe00000
 8017a50:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017a54:	465d      	mov	r5, fp
 8017a56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017a5a:	4630      	mov	r0, r6
 8017a5c:	4639      	mov	r1, r7
 8017a5e:	f7e8 fef5 	bl	800084c <__aeabi_ddiv>
 8017a62:	f7e9 f879 	bl	8000b58 <__aeabi_d2iz>
 8017a66:	4680      	mov	r8, r0
 8017a68:	f7e8 fd5c 	bl	8000524 <__aeabi_i2d>
 8017a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017a70:	f7e8 fdc2 	bl	80005f8 <__aeabi_dmul>
 8017a74:	4602      	mov	r2, r0
 8017a76:	460b      	mov	r3, r1
 8017a78:	4630      	mov	r0, r6
 8017a7a:	4639      	mov	r1, r7
 8017a7c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8017a80:	f7e8 fc02 	bl	8000288 <__aeabi_dsub>
 8017a84:	f805 6b01 	strb.w	r6, [r5], #1
 8017a88:	eba5 060b 	sub.w	r6, r5, fp
 8017a8c:	45b1      	cmp	r9, r6
 8017a8e:	4602      	mov	r2, r0
 8017a90:	460b      	mov	r3, r1
 8017a92:	d139      	bne.n	8017b08 <_dtoa_r+0x6c8>
 8017a94:	f7e8 fbfa 	bl	800028c <__adddf3>
 8017a98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017a9c:	4606      	mov	r6, r0
 8017a9e:	460f      	mov	r7, r1
 8017aa0:	f7e9 f83a 	bl	8000b18 <__aeabi_dcmpgt>
 8017aa4:	b9c8      	cbnz	r0, 8017ada <_dtoa_r+0x69a>
 8017aa6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017aaa:	4630      	mov	r0, r6
 8017aac:	4639      	mov	r1, r7
 8017aae:	f7e9 f80b 	bl	8000ac8 <__aeabi_dcmpeq>
 8017ab2:	b110      	cbz	r0, 8017aba <_dtoa_r+0x67a>
 8017ab4:	f018 0f01 	tst.w	r8, #1
 8017ab8:	d10f      	bne.n	8017ada <_dtoa_r+0x69a>
 8017aba:	9904      	ldr	r1, [sp, #16]
 8017abc:	4620      	mov	r0, r4
 8017abe:	f000 fdf9 	bl	80186b4 <_Bfree>
 8017ac2:	2300      	movs	r3, #0
 8017ac4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017ac6:	702b      	strb	r3, [r5, #0]
 8017ac8:	f10a 0301 	add.w	r3, sl, #1
 8017acc:	6013      	str	r3, [r2, #0]
 8017ace:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	f000 8241 	beq.w	8017f58 <_dtoa_r+0xb18>
 8017ad6:	601d      	str	r5, [r3, #0]
 8017ad8:	e23e      	b.n	8017f58 <_dtoa_r+0xb18>
 8017ada:	f8cd a020 	str.w	sl, [sp, #32]
 8017ade:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017ae2:	2a39      	cmp	r2, #57	; 0x39
 8017ae4:	f105 33ff 	add.w	r3, r5, #4294967295
 8017ae8:	d108      	bne.n	8017afc <_dtoa_r+0x6bc>
 8017aea:	459b      	cmp	fp, r3
 8017aec:	d10a      	bne.n	8017b04 <_dtoa_r+0x6c4>
 8017aee:	9b08      	ldr	r3, [sp, #32]
 8017af0:	3301      	adds	r3, #1
 8017af2:	9308      	str	r3, [sp, #32]
 8017af4:	2330      	movs	r3, #48	; 0x30
 8017af6:	f88b 3000 	strb.w	r3, [fp]
 8017afa:	465b      	mov	r3, fp
 8017afc:	781a      	ldrb	r2, [r3, #0]
 8017afe:	3201      	adds	r2, #1
 8017b00:	701a      	strb	r2, [r3, #0]
 8017b02:	e78c      	b.n	8017a1e <_dtoa_r+0x5de>
 8017b04:	461d      	mov	r5, r3
 8017b06:	e7ea      	b.n	8017ade <_dtoa_r+0x69e>
 8017b08:	2200      	movs	r2, #0
 8017b0a:	4b9b      	ldr	r3, [pc, #620]	; (8017d78 <_dtoa_r+0x938>)
 8017b0c:	f7e8 fd74 	bl	80005f8 <__aeabi_dmul>
 8017b10:	2200      	movs	r2, #0
 8017b12:	2300      	movs	r3, #0
 8017b14:	4606      	mov	r6, r0
 8017b16:	460f      	mov	r7, r1
 8017b18:	f7e8 ffd6 	bl	8000ac8 <__aeabi_dcmpeq>
 8017b1c:	2800      	cmp	r0, #0
 8017b1e:	d09a      	beq.n	8017a56 <_dtoa_r+0x616>
 8017b20:	e7cb      	b.n	8017aba <_dtoa_r+0x67a>
 8017b22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017b24:	2a00      	cmp	r2, #0
 8017b26:	f000 808b 	beq.w	8017c40 <_dtoa_r+0x800>
 8017b2a:	9a06      	ldr	r2, [sp, #24]
 8017b2c:	2a01      	cmp	r2, #1
 8017b2e:	dc6e      	bgt.n	8017c0e <_dtoa_r+0x7ce>
 8017b30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017b32:	2a00      	cmp	r2, #0
 8017b34:	d067      	beq.n	8017c06 <_dtoa_r+0x7c6>
 8017b36:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017b3a:	9f07      	ldr	r7, [sp, #28]
 8017b3c:	9d05      	ldr	r5, [sp, #20]
 8017b3e:	9a05      	ldr	r2, [sp, #20]
 8017b40:	2101      	movs	r1, #1
 8017b42:	441a      	add	r2, r3
 8017b44:	4620      	mov	r0, r4
 8017b46:	9205      	str	r2, [sp, #20]
 8017b48:	4498      	add	r8, r3
 8017b4a:	f000 fe91 	bl	8018870 <__i2b>
 8017b4e:	4606      	mov	r6, r0
 8017b50:	2d00      	cmp	r5, #0
 8017b52:	dd0c      	ble.n	8017b6e <_dtoa_r+0x72e>
 8017b54:	f1b8 0f00 	cmp.w	r8, #0
 8017b58:	dd09      	ble.n	8017b6e <_dtoa_r+0x72e>
 8017b5a:	4545      	cmp	r5, r8
 8017b5c:	9a05      	ldr	r2, [sp, #20]
 8017b5e:	462b      	mov	r3, r5
 8017b60:	bfa8      	it	ge
 8017b62:	4643      	movge	r3, r8
 8017b64:	1ad2      	subs	r2, r2, r3
 8017b66:	9205      	str	r2, [sp, #20]
 8017b68:	1aed      	subs	r5, r5, r3
 8017b6a:	eba8 0803 	sub.w	r8, r8, r3
 8017b6e:	9b07      	ldr	r3, [sp, #28]
 8017b70:	b1eb      	cbz	r3, 8017bae <_dtoa_r+0x76e>
 8017b72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b74:	2b00      	cmp	r3, #0
 8017b76:	d067      	beq.n	8017c48 <_dtoa_r+0x808>
 8017b78:	b18f      	cbz	r7, 8017b9e <_dtoa_r+0x75e>
 8017b7a:	4631      	mov	r1, r6
 8017b7c:	463a      	mov	r2, r7
 8017b7e:	4620      	mov	r0, r4
 8017b80:	f000 ff16 	bl	80189b0 <__pow5mult>
 8017b84:	9a04      	ldr	r2, [sp, #16]
 8017b86:	4601      	mov	r1, r0
 8017b88:	4606      	mov	r6, r0
 8017b8a:	4620      	mov	r0, r4
 8017b8c:	f000 fe79 	bl	8018882 <__multiply>
 8017b90:	9904      	ldr	r1, [sp, #16]
 8017b92:	9008      	str	r0, [sp, #32]
 8017b94:	4620      	mov	r0, r4
 8017b96:	f000 fd8d 	bl	80186b4 <_Bfree>
 8017b9a:	9b08      	ldr	r3, [sp, #32]
 8017b9c:	9304      	str	r3, [sp, #16]
 8017b9e:	9b07      	ldr	r3, [sp, #28]
 8017ba0:	1bda      	subs	r2, r3, r7
 8017ba2:	d004      	beq.n	8017bae <_dtoa_r+0x76e>
 8017ba4:	9904      	ldr	r1, [sp, #16]
 8017ba6:	4620      	mov	r0, r4
 8017ba8:	f000 ff02 	bl	80189b0 <__pow5mult>
 8017bac:	9004      	str	r0, [sp, #16]
 8017bae:	2101      	movs	r1, #1
 8017bb0:	4620      	mov	r0, r4
 8017bb2:	f000 fe5d 	bl	8018870 <__i2b>
 8017bb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017bb8:	4607      	mov	r7, r0
 8017bba:	2b00      	cmp	r3, #0
 8017bbc:	f000 81d0 	beq.w	8017f60 <_dtoa_r+0xb20>
 8017bc0:	461a      	mov	r2, r3
 8017bc2:	4601      	mov	r1, r0
 8017bc4:	4620      	mov	r0, r4
 8017bc6:	f000 fef3 	bl	80189b0 <__pow5mult>
 8017bca:	9b06      	ldr	r3, [sp, #24]
 8017bcc:	2b01      	cmp	r3, #1
 8017bce:	4607      	mov	r7, r0
 8017bd0:	dc40      	bgt.n	8017c54 <_dtoa_r+0x814>
 8017bd2:	9b00      	ldr	r3, [sp, #0]
 8017bd4:	2b00      	cmp	r3, #0
 8017bd6:	d139      	bne.n	8017c4c <_dtoa_r+0x80c>
 8017bd8:	9b01      	ldr	r3, [sp, #4]
 8017bda:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017bde:	2b00      	cmp	r3, #0
 8017be0:	d136      	bne.n	8017c50 <_dtoa_r+0x810>
 8017be2:	9b01      	ldr	r3, [sp, #4]
 8017be4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017be8:	0d1b      	lsrs	r3, r3, #20
 8017bea:	051b      	lsls	r3, r3, #20
 8017bec:	b12b      	cbz	r3, 8017bfa <_dtoa_r+0x7ba>
 8017bee:	9b05      	ldr	r3, [sp, #20]
 8017bf0:	3301      	adds	r3, #1
 8017bf2:	9305      	str	r3, [sp, #20]
 8017bf4:	f108 0801 	add.w	r8, r8, #1
 8017bf8:	2301      	movs	r3, #1
 8017bfa:	9307      	str	r3, [sp, #28]
 8017bfc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017bfe:	2b00      	cmp	r3, #0
 8017c00:	d12a      	bne.n	8017c58 <_dtoa_r+0x818>
 8017c02:	2001      	movs	r0, #1
 8017c04:	e030      	b.n	8017c68 <_dtoa_r+0x828>
 8017c06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017c08:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017c0c:	e795      	b.n	8017b3a <_dtoa_r+0x6fa>
 8017c0e:	9b07      	ldr	r3, [sp, #28]
 8017c10:	f109 37ff 	add.w	r7, r9, #4294967295
 8017c14:	42bb      	cmp	r3, r7
 8017c16:	bfbf      	itttt	lt
 8017c18:	9b07      	ldrlt	r3, [sp, #28]
 8017c1a:	9707      	strlt	r7, [sp, #28]
 8017c1c:	1afa      	sublt	r2, r7, r3
 8017c1e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8017c20:	bfbb      	ittet	lt
 8017c22:	189b      	addlt	r3, r3, r2
 8017c24:	930e      	strlt	r3, [sp, #56]	; 0x38
 8017c26:	1bdf      	subge	r7, r3, r7
 8017c28:	2700      	movlt	r7, #0
 8017c2a:	f1b9 0f00 	cmp.w	r9, #0
 8017c2e:	bfb5      	itete	lt
 8017c30:	9b05      	ldrlt	r3, [sp, #20]
 8017c32:	9d05      	ldrge	r5, [sp, #20]
 8017c34:	eba3 0509 	sublt.w	r5, r3, r9
 8017c38:	464b      	movge	r3, r9
 8017c3a:	bfb8      	it	lt
 8017c3c:	2300      	movlt	r3, #0
 8017c3e:	e77e      	b.n	8017b3e <_dtoa_r+0x6fe>
 8017c40:	9f07      	ldr	r7, [sp, #28]
 8017c42:	9d05      	ldr	r5, [sp, #20]
 8017c44:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8017c46:	e783      	b.n	8017b50 <_dtoa_r+0x710>
 8017c48:	9a07      	ldr	r2, [sp, #28]
 8017c4a:	e7ab      	b.n	8017ba4 <_dtoa_r+0x764>
 8017c4c:	2300      	movs	r3, #0
 8017c4e:	e7d4      	b.n	8017bfa <_dtoa_r+0x7ba>
 8017c50:	9b00      	ldr	r3, [sp, #0]
 8017c52:	e7d2      	b.n	8017bfa <_dtoa_r+0x7ba>
 8017c54:	2300      	movs	r3, #0
 8017c56:	9307      	str	r3, [sp, #28]
 8017c58:	693b      	ldr	r3, [r7, #16]
 8017c5a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8017c5e:	6918      	ldr	r0, [r3, #16]
 8017c60:	f000 fdb8 	bl	80187d4 <__hi0bits>
 8017c64:	f1c0 0020 	rsb	r0, r0, #32
 8017c68:	4440      	add	r0, r8
 8017c6a:	f010 001f 	ands.w	r0, r0, #31
 8017c6e:	d047      	beq.n	8017d00 <_dtoa_r+0x8c0>
 8017c70:	f1c0 0320 	rsb	r3, r0, #32
 8017c74:	2b04      	cmp	r3, #4
 8017c76:	dd3b      	ble.n	8017cf0 <_dtoa_r+0x8b0>
 8017c78:	9b05      	ldr	r3, [sp, #20]
 8017c7a:	f1c0 001c 	rsb	r0, r0, #28
 8017c7e:	4403      	add	r3, r0
 8017c80:	9305      	str	r3, [sp, #20]
 8017c82:	4405      	add	r5, r0
 8017c84:	4480      	add	r8, r0
 8017c86:	9b05      	ldr	r3, [sp, #20]
 8017c88:	2b00      	cmp	r3, #0
 8017c8a:	dd05      	ble.n	8017c98 <_dtoa_r+0x858>
 8017c8c:	461a      	mov	r2, r3
 8017c8e:	9904      	ldr	r1, [sp, #16]
 8017c90:	4620      	mov	r0, r4
 8017c92:	f000 fedb 	bl	8018a4c <__lshift>
 8017c96:	9004      	str	r0, [sp, #16]
 8017c98:	f1b8 0f00 	cmp.w	r8, #0
 8017c9c:	dd05      	ble.n	8017caa <_dtoa_r+0x86a>
 8017c9e:	4639      	mov	r1, r7
 8017ca0:	4642      	mov	r2, r8
 8017ca2:	4620      	mov	r0, r4
 8017ca4:	f000 fed2 	bl	8018a4c <__lshift>
 8017ca8:	4607      	mov	r7, r0
 8017caa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017cac:	b353      	cbz	r3, 8017d04 <_dtoa_r+0x8c4>
 8017cae:	4639      	mov	r1, r7
 8017cb0:	9804      	ldr	r0, [sp, #16]
 8017cb2:	f000 ff1f 	bl	8018af4 <__mcmp>
 8017cb6:	2800      	cmp	r0, #0
 8017cb8:	da24      	bge.n	8017d04 <_dtoa_r+0x8c4>
 8017cba:	2300      	movs	r3, #0
 8017cbc:	220a      	movs	r2, #10
 8017cbe:	9904      	ldr	r1, [sp, #16]
 8017cc0:	4620      	mov	r0, r4
 8017cc2:	f000 fd0e 	bl	80186e2 <__multadd>
 8017cc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017cc8:	9004      	str	r0, [sp, #16]
 8017cca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017cce:	2b00      	cmp	r3, #0
 8017cd0:	f000 814d 	beq.w	8017f6e <_dtoa_r+0xb2e>
 8017cd4:	2300      	movs	r3, #0
 8017cd6:	4631      	mov	r1, r6
 8017cd8:	220a      	movs	r2, #10
 8017cda:	4620      	mov	r0, r4
 8017cdc:	f000 fd01 	bl	80186e2 <__multadd>
 8017ce0:	9b02      	ldr	r3, [sp, #8]
 8017ce2:	2b00      	cmp	r3, #0
 8017ce4:	4606      	mov	r6, r0
 8017ce6:	dc4f      	bgt.n	8017d88 <_dtoa_r+0x948>
 8017ce8:	9b06      	ldr	r3, [sp, #24]
 8017cea:	2b02      	cmp	r3, #2
 8017cec:	dd4c      	ble.n	8017d88 <_dtoa_r+0x948>
 8017cee:	e011      	b.n	8017d14 <_dtoa_r+0x8d4>
 8017cf0:	d0c9      	beq.n	8017c86 <_dtoa_r+0x846>
 8017cf2:	9a05      	ldr	r2, [sp, #20]
 8017cf4:	331c      	adds	r3, #28
 8017cf6:	441a      	add	r2, r3
 8017cf8:	9205      	str	r2, [sp, #20]
 8017cfa:	441d      	add	r5, r3
 8017cfc:	4498      	add	r8, r3
 8017cfe:	e7c2      	b.n	8017c86 <_dtoa_r+0x846>
 8017d00:	4603      	mov	r3, r0
 8017d02:	e7f6      	b.n	8017cf2 <_dtoa_r+0x8b2>
 8017d04:	f1b9 0f00 	cmp.w	r9, #0
 8017d08:	dc38      	bgt.n	8017d7c <_dtoa_r+0x93c>
 8017d0a:	9b06      	ldr	r3, [sp, #24]
 8017d0c:	2b02      	cmp	r3, #2
 8017d0e:	dd35      	ble.n	8017d7c <_dtoa_r+0x93c>
 8017d10:	f8cd 9008 	str.w	r9, [sp, #8]
 8017d14:	9b02      	ldr	r3, [sp, #8]
 8017d16:	b963      	cbnz	r3, 8017d32 <_dtoa_r+0x8f2>
 8017d18:	4639      	mov	r1, r7
 8017d1a:	2205      	movs	r2, #5
 8017d1c:	4620      	mov	r0, r4
 8017d1e:	f000 fce0 	bl	80186e2 <__multadd>
 8017d22:	4601      	mov	r1, r0
 8017d24:	4607      	mov	r7, r0
 8017d26:	9804      	ldr	r0, [sp, #16]
 8017d28:	f000 fee4 	bl	8018af4 <__mcmp>
 8017d2c:	2800      	cmp	r0, #0
 8017d2e:	f73f adcc 	bgt.w	80178ca <_dtoa_r+0x48a>
 8017d32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017d34:	465d      	mov	r5, fp
 8017d36:	ea6f 0a03 	mvn.w	sl, r3
 8017d3a:	f04f 0900 	mov.w	r9, #0
 8017d3e:	4639      	mov	r1, r7
 8017d40:	4620      	mov	r0, r4
 8017d42:	f000 fcb7 	bl	80186b4 <_Bfree>
 8017d46:	2e00      	cmp	r6, #0
 8017d48:	f43f aeb7 	beq.w	8017aba <_dtoa_r+0x67a>
 8017d4c:	f1b9 0f00 	cmp.w	r9, #0
 8017d50:	d005      	beq.n	8017d5e <_dtoa_r+0x91e>
 8017d52:	45b1      	cmp	r9, r6
 8017d54:	d003      	beq.n	8017d5e <_dtoa_r+0x91e>
 8017d56:	4649      	mov	r1, r9
 8017d58:	4620      	mov	r0, r4
 8017d5a:	f000 fcab 	bl	80186b4 <_Bfree>
 8017d5e:	4631      	mov	r1, r6
 8017d60:	4620      	mov	r0, r4
 8017d62:	f000 fca7 	bl	80186b4 <_Bfree>
 8017d66:	e6a8      	b.n	8017aba <_dtoa_r+0x67a>
 8017d68:	2700      	movs	r7, #0
 8017d6a:	463e      	mov	r6, r7
 8017d6c:	e7e1      	b.n	8017d32 <_dtoa_r+0x8f2>
 8017d6e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017d72:	463e      	mov	r6, r7
 8017d74:	e5a9      	b.n	80178ca <_dtoa_r+0x48a>
 8017d76:	bf00      	nop
 8017d78:	40240000 	.word	0x40240000
 8017d7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017d7e:	f8cd 9008 	str.w	r9, [sp, #8]
 8017d82:	2b00      	cmp	r3, #0
 8017d84:	f000 80fa 	beq.w	8017f7c <_dtoa_r+0xb3c>
 8017d88:	2d00      	cmp	r5, #0
 8017d8a:	dd05      	ble.n	8017d98 <_dtoa_r+0x958>
 8017d8c:	4631      	mov	r1, r6
 8017d8e:	462a      	mov	r2, r5
 8017d90:	4620      	mov	r0, r4
 8017d92:	f000 fe5b 	bl	8018a4c <__lshift>
 8017d96:	4606      	mov	r6, r0
 8017d98:	9b07      	ldr	r3, [sp, #28]
 8017d9a:	2b00      	cmp	r3, #0
 8017d9c:	d04c      	beq.n	8017e38 <_dtoa_r+0x9f8>
 8017d9e:	6871      	ldr	r1, [r6, #4]
 8017da0:	4620      	mov	r0, r4
 8017da2:	f000 fc53 	bl	801864c <_Balloc>
 8017da6:	6932      	ldr	r2, [r6, #16]
 8017da8:	3202      	adds	r2, #2
 8017daa:	4605      	mov	r5, r0
 8017dac:	0092      	lsls	r2, r2, #2
 8017dae:	f106 010c 	add.w	r1, r6, #12
 8017db2:	300c      	adds	r0, #12
 8017db4:	f7fd fc7c 	bl	80156b0 <memcpy>
 8017db8:	2201      	movs	r2, #1
 8017dba:	4629      	mov	r1, r5
 8017dbc:	4620      	mov	r0, r4
 8017dbe:	f000 fe45 	bl	8018a4c <__lshift>
 8017dc2:	9b00      	ldr	r3, [sp, #0]
 8017dc4:	f8cd b014 	str.w	fp, [sp, #20]
 8017dc8:	f003 0301 	and.w	r3, r3, #1
 8017dcc:	46b1      	mov	r9, r6
 8017dce:	9307      	str	r3, [sp, #28]
 8017dd0:	4606      	mov	r6, r0
 8017dd2:	4639      	mov	r1, r7
 8017dd4:	9804      	ldr	r0, [sp, #16]
 8017dd6:	f7ff faa5 	bl	8017324 <quorem>
 8017dda:	4649      	mov	r1, r9
 8017ddc:	4605      	mov	r5, r0
 8017dde:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017de2:	9804      	ldr	r0, [sp, #16]
 8017de4:	f000 fe86 	bl	8018af4 <__mcmp>
 8017de8:	4632      	mov	r2, r6
 8017dea:	9000      	str	r0, [sp, #0]
 8017dec:	4639      	mov	r1, r7
 8017dee:	4620      	mov	r0, r4
 8017df0:	f000 fe9a 	bl	8018b28 <__mdiff>
 8017df4:	68c3      	ldr	r3, [r0, #12]
 8017df6:	4602      	mov	r2, r0
 8017df8:	bb03      	cbnz	r3, 8017e3c <_dtoa_r+0x9fc>
 8017dfa:	4601      	mov	r1, r0
 8017dfc:	9008      	str	r0, [sp, #32]
 8017dfe:	9804      	ldr	r0, [sp, #16]
 8017e00:	f000 fe78 	bl	8018af4 <__mcmp>
 8017e04:	9a08      	ldr	r2, [sp, #32]
 8017e06:	4603      	mov	r3, r0
 8017e08:	4611      	mov	r1, r2
 8017e0a:	4620      	mov	r0, r4
 8017e0c:	9308      	str	r3, [sp, #32]
 8017e0e:	f000 fc51 	bl	80186b4 <_Bfree>
 8017e12:	9b08      	ldr	r3, [sp, #32]
 8017e14:	b9a3      	cbnz	r3, 8017e40 <_dtoa_r+0xa00>
 8017e16:	9a06      	ldr	r2, [sp, #24]
 8017e18:	b992      	cbnz	r2, 8017e40 <_dtoa_r+0xa00>
 8017e1a:	9a07      	ldr	r2, [sp, #28]
 8017e1c:	b982      	cbnz	r2, 8017e40 <_dtoa_r+0xa00>
 8017e1e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017e22:	d029      	beq.n	8017e78 <_dtoa_r+0xa38>
 8017e24:	9b00      	ldr	r3, [sp, #0]
 8017e26:	2b00      	cmp	r3, #0
 8017e28:	dd01      	ble.n	8017e2e <_dtoa_r+0x9ee>
 8017e2a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8017e2e:	9b05      	ldr	r3, [sp, #20]
 8017e30:	1c5d      	adds	r5, r3, #1
 8017e32:	f883 8000 	strb.w	r8, [r3]
 8017e36:	e782      	b.n	8017d3e <_dtoa_r+0x8fe>
 8017e38:	4630      	mov	r0, r6
 8017e3a:	e7c2      	b.n	8017dc2 <_dtoa_r+0x982>
 8017e3c:	2301      	movs	r3, #1
 8017e3e:	e7e3      	b.n	8017e08 <_dtoa_r+0x9c8>
 8017e40:	9a00      	ldr	r2, [sp, #0]
 8017e42:	2a00      	cmp	r2, #0
 8017e44:	db04      	blt.n	8017e50 <_dtoa_r+0xa10>
 8017e46:	d125      	bne.n	8017e94 <_dtoa_r+0xa54>
 8017e48:	9a06      	ldr	r2, [sp, #24]
 8017e4a:	bb1a      	cbnz	r2, 8017e94 <_dtoa_r+0xa54>
 8017e4c:	9a07      	ldr	r2, [sp, #28]
 8017e4e:	bb0a      	cbnz	r2, 8017e94 <_dtoa_r+0xa54>
 8017e50:	2b00      	cmp	r3, #0
 8017e52:	ddec      	ble.n	8017e2e <_dtoa_r+0x9ee>
 8017e54:	2201      	movs	r2, #1
 8017e56:	9904      	ldr	r1, [sp, #16]
 8017e58:	4620      	mov	r0, r4
 8017e5a:	f000 fdf7 	bl	8018a4c <__lshift>
 8017e5e:	4639      	mov	r1, r7
 8017e60:	9004      	str	r0, [sp, #16]
 8017e62:	f000 fe47 	bl	8018af4 <__mcmp>
 8017e66:	2800      	cmp	r0, #0
 8017e68:	dc03      	bgt.n	8017e72 <_dtoa_r+0xa32>
 8017e6a:	d1e0      	bne.n	8017e2e <_dtoa_r+0x9ee>
 8017e6c:	f018 0f01 	tst.w	r8, #1
 8017e70:	d0dd      	beq.n	8017e2e <_dtoa_r+0x9ee>
 8017e72:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017e76:	d1d8      	bne.n	8017e2a <_dtoa_r+0x9ea>
 8017e78:	9b05      	ldr	r3, [sp, #20]
 8017e7a:	9a05      	ldr	r2, [sp, #20]
 8017e7c:	1c5d      	adds	r5, r3, #1
 8017e7e:	2339      	movs	r3, #57	; 0x39
 8017e80:	7013      	strb	r3, [r2, #0]
 8017e82:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017e86:	2b39      	cmp	r3, #57	; 0x39
 8017e88:	f105 32ff 	add.w	r2, r5, #4294967295
 8017e8c:	d04f      	beq.n	8017f2e <_dtoa_r+0xaee>
 8017e8e:	3301      	adds	r3, #1
 8017e90:	7013      	strb	r3, [r2, #0]
 8017e92:	e754      	b.n	8017d3e <_dtoa_r+0x8fe>
 8017e94:	9a05      	ldr	r2, [sp, #20]
 8017e96:	2b00      	cmp	r3, #0
 8017e98:	f102 0501 	add.w	r5, r2, #1
 8017e9c:	dd06      	ble.n	8017eac <_dtoa_r+0xa6c>
 8017e9e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017ea2:	d0e9      	beq.n	8017e78 <_dtoa_r+0xa38>
 8017ea4:	f108 0801 	add.w	r8, r8, #1
 8017ea8:	9b05      	ldr	r3, [sp, #20]
 8017eaa:	e7c2      	b.n	8017e32 <_dtoa_r+0x9f2>
 8017eac:	9a02      	ldr	r2, [sp, #8]
 8017eae:	f805 8c01 	strb.w	r8, [r5, #-1]
 8017eb2:	eba5 030b 	sub.w	r3, r5, fp
 8017eb6:	4293      	cmp	r3, r2
 8017eb8:	d021      	beq.n	8017efe <_dtoa_r+0xabe>
 8017eba:	2300      	movs	r3, #0
 8017ebc:	220a      	movs	r2, #10
 8017ebe:	9904      	ldr	r1, [sp, #16]
 8017ec0:	4620      	mov	r0, r4
 8017ec2:	f000 fc0e 	bl	80186e2 <__multadd>
 8017ec6:	45b1      	cmp	r9, r6
 8017ec8:	9004      	str	r0, [sp, #16]
 8017eca:	f04f 0300 	mov.w	r3, #0
 8017ece:	f04f 020a 	mov.w	r2, #10
 8017ed2:	4649      	mov	r1, r9
 8017ed4:	4620      	mov	r0, r4
 8017ed6:	d105      	bne.n	8017ee4 <_dtoa_r+0xaa4>
 8017ed8:	f000 fc03 	bl	80186e2 <__multadd>
 8017edc:	4681      	mov	r9, r0
 8017ede:	4606      	mov	r6, r0
 8017ee0:	9505      	str	r5, [sp, #20]
 8017ee2:	e776      	b.n	8017dd2 <_dtoa_r+0x992>
 8017ee4:	f000 fbfd 	bl	80186e2 <__multadd>
 8017ee8:	4631      	mov	r1, r6
 8017eea:	4681      	mov	r9, r0
 8017eec:	2300      	movs	r3, #0
 8017eee:	220a      	movs	r2, #10
 8017ef0:	4620      	mov	r0, r4
 8017ef2:	f000 fbf6 	bl	80186e2 <__multadd>
 8017ef6:	4606      	mov	r6, r0
 8017ef8:	e7f2      	b.n	8017ee0 <_dtoa_r+0xaa0>
 8017efa:	f04f 0900 	mov.w	r9, #0
 8017efe:	2201      	movs	r2, #1
 8017f00:	9904      	ldr	r1, [sp, #16]
 8017f02:	4620      	mov	r0, r4
 8017f04:	f000 fda2 	bl	8018a4c <__lshift>
 8017f08:	4639      	mov	r1, r7
 8017f0a:	9004      	str	r0, [sp, #16]
 8017f0c:	f000 fdf2 	bl	8018af4 <__mcmp>
 8017f10:	2800      	cmp	r0, #0
 8017f12:	dcb6      	bgt.n	8017e82 <_dtoa_r+0xa42>
 8017f14:	d102      	bne.n	8017f1c <_dtoa_r+0xadc>
 8017f16:	f018 0f01 	tst.w	r8, #1
 8017f1a:	d1b2      	bne.n	8017e82 <_dtoa_r+0xa42>
 8017f1c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017f20:	2b30      	cmp	r3, #48	; 0x30
 8017f22:	f105 32ff 	add.w	r2, r5, #4294967295
 8017f26:	f47f af0a 	bne.w	8017d3e <_dtoa_r+0x8fe>
 8017f2a:	4615      	mov	r5, r2
 8017f2c:	e7f6      	b.n	8017f1c <_dtoa_r+0xadc>
 8017f2e:	4593      	cmp	fp, r2
 8017f30:	d105      	bne.n	8017f3e <_dtoa_r+0xafe>
 8017f32:	2331      	movs	r3, #49	; 0x31
 8017f34:	f10a 0a01 	add.w	sl, sl, #1
 8017f38:	f88b 3000 	strb.w	r3, [fp]
 8017f3c:	e6ff      	b.n	8017d3e <_dtoa_r+0x8fe>
 8017f3e:	4615      	mov	r5, r2
 8017f40:	e79f      	b.n	8017e82 <_dtoa_r+0xa42>
 8017f42:	f8df b064 	ldr.w	fp, [pc, #100]	; 8017fa8 <_dtoa_r+0xb68>
 8017f46:	e007      	b.n	8017f58 <_dtoa_r+0xb18>
 8017f48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017f4a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8017fac <_dtoa_r+0xb6c>
 8017f4e:	b11b      	cbz	r3, 8017f58 <_dtoa_r+0xb18>
 8017f50:	f10b 0308 	add.w	r3, fp, #8
 8017f54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017f56:	6013      	str	r3, [r2, #0]
 8017f58:	4658      	mov	r0, fp
 8017f5a:	b017      	add	sp, #92	; 0x5c
 8017f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f60:	9b06      	ldr	r3, [sp, #24]
 8017f62:	2b01      	cmp	r3, #1
 8017f64:	f77f ae35 	ble.w	8017bd2 <_dtoa_r+0x792>
 8017f68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017f6a:	9307      	str	r3, [sp, #28]
 8017f6c:	e649      	b.n	8017c02 <_dtoa_r+0x7c2>
 8017f6e:	9b02      	ldr	r3, [sp, #8]
 8017f70:	2b00      	cmp	r3, #0
 8017f72:	dc03      	bgt.n	8017f7c <_dtoa_r+0xb3c>
 8017f74:	9b06      	ldr	r3, [sp, #24]
 8017f76:	2b02      	cmp	r3, #2
 8017f78:	f73f aecc 	bgt.w	8017d14 <_dtoa_r+0x8d4>
 8017f7c:	465d      	mov	r5, fp
 8017f7e:	4639      	mov	r1, r7
 8017f80:	9804      	ldr	r0, [sp, #16]
 8017f82:	f7ff f9cf 	bl	8017324 <quorem>
 8017f86:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017f8a:	f805 8b01 	strb.w	r8, [r5], #1
 8017f8e:	9a02      	ldr	r2, [sp, #8]
 8017f90:	eba5 030b 	sub.w	r3, r5, fp
 8017f94:	429a      	cmp	r2, r3
 8017f96:	ddb0      	ble.n	8017efa <_dtoa_r+0xaba>
 8017f98:	2300      	movs	r3, #0
 8017f9a:	220a      	movs	r2, #10
 8017f9c:	9904      	ldr	r1, [sp, #16]
 8017f9e:	4620      	mov	r0, r4
 8017fa0:	f000 fb9f 	bl	80186e2 <__multadd>
 8017fa4:	9004      	str	r0, [sp, #16]
 8017fa6:	e7ea      	b.n	8017f7e <_dtoa_r+0xb3e>
 8017fa8:	0801b12c 	.word	0x0801b12c
 8017fac:	0801b1a8 	.word	0x0801b1a8

08017fb0 <rshift>:
 8017fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017fb2:	6906      	ldr	r6, [r0, #16]
 8017fb4:	114b      	asrs	r3, r1, #5
 8017fb6:	429e      	cmp	r6, r3
 8017fb8:	f100 0414 	add.w	r4, r0, #20
 8017fbc:	dd30      	ble.n	8018020 <rshift+0x70>
 8017fbe:	f011 011f 	ands.w	r1, r1, #31
 8017fc2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8017fc6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8017fca:	d108      	bne.n	8017fde <rshift+0x2e>
 8017fcc:	4621      	mov	r1, r4
 8017fce:	42b2      	cmp	r2, r6
 8017fd0:	460b      	mov	r3, r1
 8017fd2:	d211      	bcs.n	8017ff8 <rshift+0x48>
 8017fd4:	f852 3b04 	ldr.w	r3, [r2], #4
 8017fd8:	f841 3b04 	str.w	r3, [r1], #4
 8017fdc:	e7f7      	b.n	8017fce <rshift+0x1e>
 8017fde:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8017fe2:	f1c1 0c20 	rsb	ip, r1, #32
 8017fe6:	40cd      	lsrs	r5, r1
 8017fe8:	3204      	adds	r2, #4
 8017fea:	4623      	mov	r3, r4
 8017fec:	42b2      	cmp	r2, r6
 8017fee:	4617      	mov	r7, r2
 8017ff0:	d30c      	bcc.n	801800c <rshift+0x5c>
 8017ff2:	601d      	str	r5, [r3, #0]
 8017ff4:	b105      	cbz	r5, 8017ff8 <rshift+0x48>
 8017ff6:	3304      	adds	r3, #4
 8017ff8:	1b1a      	subs	r2, r3, r4
 8017ffa:	42a3      	cmp	r3, r4
 8017ffc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018000:	bf08      	it	eq
 8018002:	2300      	moveq	r3, #0
 8018004:	6102      	str	r2, [r0, #16]
 8018006:	bf08      	it	eq
 8018008:	6143      	streq	r3, [r0, #20]
 801800a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801800c:	683f      	ldr	r7, [r7, #0]
 801800e:	fa07 f70c 	lsl.w	r7, r7, ip
 8018012:	433d      	orrs	r5, r7
 8018014:	f843 5b04 	str.w	r5, [r3], #4
 8018018:	f852 5b04 	ldr.w	r5, [r2], #4
 801801c:	40cd      	lsrs	r5, r1
 801801e:	e7e5      	b.n	8017fec <rshift+0x3c>
 8018020:	4623      	mov	r3, r4
 8018022:	e7e9      	b.n	8017ff8 <rshift+0x48>

08018024 <__hexdig_fun>:
 8018024:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018028:	2b09      	cmp	r3, #9
 801802a:	d802      	bhi.n	8018032 <__hexdig_fun+0xe>
 801802c:	3820      	subs	r0, #32
 801802e:	b2c0      	uxtb	r0, r0
 8018030:	4770      	bx	lr
 8018032:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8018036:	2b05      	cmp	r3, #5
 8018038:	d801      	bhi.n	801803e <__hexdig_fun+0x1a>
 801803a:	3847      	subs	r0, #71	; 0x47
 801803c:	e7f7      	b.n	801802e <__hexdig_fun+0xa>
 801803e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8018042:	2b05      	cmp	r3, #5
 8018044:	d801      	bhi.n	801804a <__hexdig_fun+0x26>
 8018046:	3827      	subs	r0, #39	; 0x27
 8018048:	e7f1      	b.n	801802e <__hexdig_fun+0xa>
 801804a:	2000      	movs	r0, #0
 801804c:	4770      	bx	lr

0801804e <__gethex>:
 801804e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018052:	b08b      	sub	sp, #44	; 0x2c
 8018054:	468a      	mov	sl, r1
 8018056:	9002      	str	r0, [sp, #8]
 8018058:	9816      	ldr	r0, [sp, #88]	; 0x58
 801805a:	9306      	str	r3, [sp, #24]
 801805c:	4690      	mov	r8, r2
 801805e:	f000 fad0 	bl	8018602 <__localeconv_l>
 8018062:	6803      	ldr	r3, [r0, #0]
 8018064:	9303      	str	r3, [sp, #12]
 8018066:	4618      	mov	r0, r3
 8018068:	f7e8 f8b2 	bl	80001d0 <strlen>
 801806c:	9b03      	ldr	r3, [sp, #12]
 801806e:	9001      	str	r0, [sp, #4]
 8018070:	4403      	add	r3, r0
 8018072:	f04f 0b00 	mov.w	fp, #0
 8018076:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801807a:	9307      	str	r3, [sp, #28]
 801807c:	f8da 3000 	ldr.w	r3, [sl]
 8018080:	3302      	adds	r3, #2
 8018082:	461f      	mov	r7, r3
 8018084:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018088:	2830      	cmp	r0, #48	; 0x30
 801808a:	d06c      	beq.n	8018166 <__gethex+0x118>
 801808c:	f7ff ffca 	bl	8018024 <__hexdig_fun>
 8018090:	4604      	mov	r4, r0
 8018092:	2800      	cmp	r0, #0
 8018094:	d16a      	bne.n	801816c <__gethex+0x11e>
 8018096:	9a01      	ldr	r2, [sp, #4]
 8018098:	9903      	ldr	r1, [sp, #12]
 801809a:	4638      	mov	r0, r7
 801809c:	f001 f836 	bl	801910c <strncmp>
 80180a0:	2800      	cmp	r0, #0
 80180a2:	d166      	bne.n	8018172 <__gethex+0x124>
 80180a4:	9b01      	ldr	r3, [sp, #4]
 80180a6:	5cf8      	ldrb	r0, [r7, r3]
 80180a8:	18fe      	adds	r6, r7, r3
 80180aa:	f7ff ffbb 	bl	8018024 <__hexdig_fun>
 80180ae:	2800      	cmp	r0, #0
 80180b0:	d062      	beq.n	8018178 <__gethex+0x12a>
 80180b2:	4633      	mov	r3, r6
 80180b4:	7818      	ldrb	r0, [r3, #0]
 80180b6:	2830      	cmp	r0, #48	; 0x30
 80180b8:	461f      	mov	r7, r3
 80180ba:	f103 0301 	add.w	r3, r3, #1
 80180be:	d0f9      	beq.n	80180b4 <__gethex+0x66>
 80180c0:	f7ff ffb0 	bl	8018024 <__hexdig_fun>
 80180c4:	fab0 f580 	clz	r5, r0
 80180c8:	096d      	lsrs	r5, r5, #5
 80180ca:	4634      	mov	r4, r6
 80180cc:	f04f 0b01 	mov.w	fp, #1
 80180d0:	463a      	mov	r2, r7
 80180d2:	4616      	mov	r6, r2
 80180d4:	3201      	adds	r2, #1
 80180d6:	7830      	ldrb	r0, [r6, #0]
 80180d8:	f7ff ffa4 	bl	8018024 <__hexdig_fun>
 80180dc:	2800      	cmp	r0, #0
 80180de:	d1f8      	bne.n	80180d2 <__gethex+0x84>
 80180e0:	9a01      	ldr	r2, [sp, #4]
 80180e2:	9903      	ldr	r1, [sp, #12]
 80180e4:	4630      	mov	r0, r6
 80180e6:	f001 f811 	bl	801910c <strncmp>
 80180ea:	b950      	cbnz	r0, 8018102 <__gethex+0xb4>
 80180ec:	b954      	cbnz	r4, 8018104 <__gethex+0xb6>
 80180ee:	9b01      	ldr	r3, [sp, #4]
 80180f0:	18f4      	adds	r4, r6, r3
 80180f2:	4622      	mov	r2, r4
 80180f4:	4616      	mov	r6, r2
 80180f6:	3201      	adds	r2, #1
 80180f8:	7830      	ldrb	r0, [r6, #0]
 80180fa:	f7ff ff93 	bl	8018024 <__hexdig_fun>
 80180fe:	2800      	cmp	r0, #0
 8018100:	d1f8      	bne.n	80180f4 <__gethex+0xa6>
 8018102:	b10c      	cbz	r4, 8018108 <__gethex+0xba>
 8018104:	1ba4      	subs	r4, r4, r6
 8018106:	00a4      	lsls	r4, r4, #2
 8018108:	7833      	ldrb	r3, [r6, #0]
 801810a:	2b50      	cmp	r3, #80	; 0x50
 801810c:	d001      	beq.n	8018112 <__gethex+0xc4>
 801810e:	2b70      	cmp	r3, #112	; 0x70
 8018110:	d140      	bne.n	8018194 <__gethex+0x146>
 8018112:	7873      	ldrb	r3, [r6, #1]
 8018114:	2b2b      	cmp	r3, #43	; 0x2b
 8018116:	d031      	beq.n	801817c <__gethex+0x12e>
 8018118:	2b2d      	cmp	r3, #45	; 0x2d
 801811a:	d033      	beq.n	8018184 <__gethex+0x136>
 801811c:	1c71      	adds	r1, r6, #1
 801811e:	f04f 0900 	mov.w	r9, #0
 8018122:	7808      	ldrb	r0, [r1, #0]
 8018124:	f7ff ff7e 	bl	8018024 <__hexdig_fun>
 8018128:	1e43      	subs	r3, r0, #1
 801812a:	b2db      	uxtb	r3, r3
 801812c:	2b18      	cmp	r3, #24
 801812e:	d831      	bhi.n	8018194 <__gethex+0x146>
 8018130:	f1a0 0210 	sub.w	r2, r0, #16
 8018134:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018138:	f7ff ff74 	bl	8018024 <__hexdig_fun>
 801813c:	1e43      	subs	r3, r0, #1
 801813e:	b2db      	uxtb	r3, r3
 8018140:	2b18      	cmp	r3, #24
 8018142:	d922      	bls.n	801818a <__gethex+0x13c>
 8018144:	f1b9 0f00 	cmp.w	r9, #0
 8018148:	d000      	beq.n	801814c <__gethex+0xfe>
 801814a:	4252      	negs	r2, r2
 801814c:	4414      	add	r4, r2
 801814e:	f8ca 1000 	str.w	r1, [sl]
 8018152:	b30d      	cbz	r5, 8018198 <__gethex+0x14a>
 8018154:	f1bb 0f00 	cmp.w	fp, #0
 8018158:	bf0c      	ite	eq
 801815a:	2706      	moveq	r7, #6
 801815c:	2700      	movne	r7, #0
 801815e:	4638      	mov	r0, r7
 8018160:	b00b      	add	sp, #44	; 0x2c
 8018162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018166:	f10b 0b01 	add.w	fp, fp, #1
 801816a:	e78a      	b.n	8018082 <__gethex+0x34>
 801816c:	2500      	movs	r5, #0
 801816e:	462c      	mov	r4, r5
 8018170:	e7ae      	b.n	80180d0 <__gethex+0x82>
 8018172:	463e      	mov	r6, r7
 8018174:	2501      	movs	r5, #1
 8018176:	e7c7      	b.n	8018108 <__gethex+0xba>
 8018178:	4604      	mov	r4, r0
 801817a:	e7fb      	b.n	8018174 <__gethex+0x126>
 801817c:	f04f 0900 	mov.w	r9, #0
 8018180:	1cb1      	adds	r1, r6, #2
 8018182:	e7ce      	b.n	8018122 <__gethex+0xd4>
 8018184:	f04f 0901 	mov.w	r9, #1
 8018188:	e7fa      	b.n	8018180 <__gethex+0x132>
 801818a:	230a      	movs	r3, #10
 801818c:	fb03 0202 	mla	r2, r3, r2, r0
 8018190:	3a10      	subs	r2, #16
 8018192:	e7cf      	b.n	8018134 <__gethex+0xe6>
 8018194:	4631      	mov	r1, r6
 8018196:	e7da      	b.n	801814e <__gethex+0x100>
 8018198:	1bf3      	subs	r3, r6, r7
 801819a:	3b01      	subs	r3, #1
 801819c:	4629      	mov	r1, r5
 801819e:	2b07      	cmp	r3, #7
 80181a0:	dc49      	bgt.n	8018236 <__gethex+0x1e8>
 80181a2:	9802      	ldr	r0, [sp, #8]
 80181a4:	f000 fa52 	bl	801864c <_Balloc>
 80181a8:	9b01      	ldr	r3, [sp, #4]
 80181aa:	f100 0914 	add.w	r9, r0, #20
 80181ae:	f04f 0b00 	mov.w	fp, #0
 80181b2:	f1c3 0301 	rsb	r3, r3, #1
 80181b6:	4605      	mov	r5, r0
 80181b8:	f8cd 9010 	str.w	r9, [sp, #16]
 80181bc:	46da      	mov	sl, fp
 80181be:	9308      	str	r3, [sp, #32]
 80181c0:	42b7      	cmp	r7, r6
 80181c2:	d33b      	bcc.n	801823c <__gethex+0x1ee>
 80181c4:	9804      	ldr	r0, [sp, #16]
 80181c6:	f840 ab04 	str.w	sl, [r0], #4
 80181ca:	eba0 0009 	sub.w	r0, r0, r9
 80181ce:	1080      	asrs	r0, r0, #2
 80181d0:	6128      	str	r0, [r5, #16]
 80181d2:	0147      	lsls	r7, r0, #5
 80181d4:	4650      	mov	r0, sl
 80181d6:	f000 fafd 	bl	80187d4 <__hi0bits>
 80181da:	f8d8 6000 	ldr.w	r6, [r8]
 80181de:	1a3f      	subs	r7, r7, r0
 80181e0:	42b7      	cmp	r7, r6
 80181e2:	dd64      	ble.n	80182ae <__gethex+0x260>
 80181e4:	1bbf      	subs	r7, r7, r6
 80181e6:	4639      	mov	r1, r7
 80181e8:	4628      	mov	r0, r5
 80181ea:	f000 fe0d 	bl	8018e08 <__any_on>
 80181ee:	4682      	mov	sl, r0
 80181f0:	b178      	cbz	r0, 8018212 <__gethex+0x1c4>
 80181f2:	1e7b      	subs	r3, r7, #1
 80181f4:	1159      	asrs	r1, r3, #5
 80181f6:	f003 021f 	and.w	r2, r3, #31
 80181fa:	f04f 0a01 	mov.w	sl, #1
 80181fe:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8018202:	fa0a f202 	lsl.w	r2, sl, r2
 8018206:	420a      	tst	r2, r1
 8018208:	d003      	beq.n	8018212 <__gethex+0x1c4>
 801820a:	4553      	cmp	r3, sl
 801820c:	dc46      	bgt.n	801829c <__gethex+0x24e>
 801820e:	f04f 0a02 	mov.w	sl, #2
 8018212:	4639      	mov	r1, r7
 8018214:	4628      	mov	r0, r5
 8018216:	f7ff fecb 	bl	8017fb0 <rshift>
 801821a:	443c      	add	r4, r7
 801821c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018220:	42a3      	cmp	r3, r4
 8018222:	da52      	bge.n	80182ca <__gethex+0x27c>
 8018224:	4629      	mov	r1, r5
 8018226:	9802      	ldr	r0, [sp, #8]
 8018228:	f000 fa44 	bl	80186b4 <_Bfree>
 801822c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801822e:	2300      	movs	r3, #0
 8018230:	6013      	str	r3, [r2, #0]
 8018232:	27a3      	movs	r7, #163	; 0xa3
 8018234:	e793      	b.n	801815e <__gethex+0x110>
 8018236:	3101      	adds	r1, #1
 8018238:	105b      	asrs	r3, r3, #1
 801823a:	e7b0      	b.n	801819e <__gethex+0x150>
 801823c:	1e73      	subs	r3, r6, #1
 801823e:	9305      	str	r3, [sp, #20]
 8018240:	9a07      	ldr	r2, [sp, #28]
 8018242:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8018246:	4293      	cmp	r3, r2
 8018248:	d018      	beq.n	801827c <__gethex+0x22e>
 801824a:	f1bb 0f20 	cmp.w	fp, #32
 801824e:	d107      	bne.n	8018260 <__gethex+0x212>
 8018250:	9b04      	ldr	r3, [sp, #16]
 8018252:	f8c3 a000 	str.w	sl, [r3]
 8018256:	3304      	adds	r3, #4
 8018258:	f04f 0a00 	mov.w	sl, #0
 801825c:	9304      	str	r3, [sp, #16]
 801825e:	46d3      	mov	fp, sl
 8018260:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8018264:	f7ff fede 	bl	8018024 <__hexdig_fun>
 8018268:	f000 000f 	and.w	r0, r0, #15
 801826c:	fa00 f00b 	lsl.w	r0, r0, fp
 8018270:	ea4a 0a00 	orr.w	sl, sl, r0
 8018274:	f10b 0b04 	add.w	fp, fp, #4
 8018278:	9b05      	ldr	r3, [sp, #20]
 801827a:	e00d      	b.n	8018298 <__gethex+0x24a>
 801827c:	9b05      	ldr	r3, [sp, #20]
 801827e:	9a08      	ldr	r2, [sp, #32]
 8018280:	4413      	add	r3, r2
 8018282:	42bb      	cmp	r3, r7
 8018284:	d3e1      	bcc.n	801824a <__gethex+0x1fc>
 8018286:	4618      	mov	r0, r3
 8018288:	9a01      	ldr	r2, [sp, #4]
 801828a:	9903      	ldr	r1, [sp, #12]
 801828c:	9309      	str	r3, [sp, #36]	; 0x24
 801828e:	f000 ff3d 	bl	801910c <strncmp>
 8018292:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018294:	2800      	cmp	r0, #0
 8018296:	d1d8      	bne.n	801824a <__gethex+0x1fc>
 8018298:	461e      	mov	r6, r3
 801829a:	e791      	b.n	80181c0 <__gethex+0x172>
 801829c:	1eb9      	subs	r1, r7, #2
 801829e:	4628      	mov	r0, r5
 80182a0:	f000 fdb2 	bl	8018e08 <__any_on>
 80182a4:	2800      	cmp	r0, #0
 80182a6:	d0b2      	beq.n	801820e <__gethex+0x1c0>
 80182a8:	f04f 0a03 	mov.w	sl, #3
 80182ac:	e7b1      	b.n	8018212 <__gethex+0x1c4>
 80182ae:	da09      	bge.n	80182c4 <__gethex+0x276>
 80182b0:	1bf7      	subs	r7, r6, r7
 80182b2:	4629      	mov	r1, r5
 80182b4:	463a      	mov	r2, r7
 80182b6:	9802      	ldr	r0, [sp, #8]
 80182b8:	f000 fbc8 	bl	8018a4c <__lshift>
 80182bc:	1be4      	subs	r4, r4, r7
 80182be:	4605      	mov	r5, r0
 80182c0:	f100 0914 	add.w	r9, r0, #20
 80182c4:	f04f 0a00 	mov.w	sl, #0
 80182c8:	e7a8      	b.n	801821c <__gethex+0x1ce>
 80182ca:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80182ce:	42a0      	cmp	r0, r4
 80182d0:	dd6a      	ble.n	80183a8 <__gethex+0x35a>
 80182d2:	1b04      	subs	r4, r0, r4
 80182d4:	42a6      	cmp	r6, r4
 80182d6:	dc2e      	bgt.n	8018336 <__gethex+0x2e8>
 80182d8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80182dc:	2b02      	cmp	r3, #2
 80182de:	d022      	beq.n	8018326 <__gethex+0x2d8>
 80182e0:	2b03      	cmp	r3, #3
 80182e2:	d024      	beq.n	801832e <__gethex+0x2e0>
 80182e4:	2b01      	cmp	r3, #1
 80182e6:	d115      	bne.n	8018314 <__gethex+0x2c6>
 80182e8:	42a6      	cmp	r6, r4
 80182ea:	d113      	bne.n	8018314 <__gethex+0x2c6>
 80182ec:	2e01      	cmp	r6, #1
 80182ee:	dc0b      	bgt.n	8018308 <__gethex+0x2ba>
 80182f0:	9a06      	ldr	r2, [sp, #24]
 80182f2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80182f6:	6013      	str	r3, [r2, #0]
 80182f8:	2301      	movs	r3, #1
 80182fa:	612b      	str	r3, [r5, #16]
 80182fc:	f8c9 3000 	str.w	r3, [r9]
 8018300:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018302:	2762      	movs	r7, #98	; 0x62
 8018304:	601d      	str	r5, [r3, #0]
 8018306:	e72a      	b.n	801815e <__gethex+0x110>
 8018308:	1e71      	subs	r1, r6, #1
 801830a:	4628      	mov	r0, r5
 801830c:	f000 fd7c 	bl	8018e08 <__any_on>
 8018310:	2800      	cmp	r0, #0
 8018312:	d1ed      	bne.n	80182f0 <__gethex+0x2a2>
 8018314:	4629      	mov	r1, r5
 8018316:	9802      	ldr	r0, [sp, #8]
 8018318:	f000 f9cc 	bl	80186b4 <_Bfree>
 801831c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801831e:	2300      	movs	r3, #0
 8018320:	6013      	str	r3, [r2, #0]
 8018322:	2750      	movs	r7, #80	; 0x50
 8018324:	e71b      	b.n	801815e <__gethex+0x110>
 8018326:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018328:	2b00      	cmp	r3, #0
 801832a:	d0e1      	beq.n	80182f0 <__gethex+0x2a2>
 801832c:	e7f2      	b.n	8018314 <__gethex+0x2c6>
 801832e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018330:	2b00      	cmp	r3, #0
 8018332:	d1dd      	bne.n	80182f0 <__gethex+0x2a2>
 8018334:	e7ee      	b.n	8018314 <__gethex+0x2c6>
 8018336:	1e67      	subs	r7, r4, #1
 8018338:	f1ba 0f00 	cmp.w	sl, #0
 801833c:	d131      	bne.n	80183a2 <__gethex+0x354>
 801833e:	b127      	cbz	r7, 801834a <__gethex+0x2fc>
 8018340:	4639      	mov	r1, r7
 8018342:	4628      	mov	r0, r5
 8018344:	f000 fd60 	bl	8018e08 <__any_on>
 8018348:	4682      	mov	sl, r0
 801834a:	117a      	asrs	r2, r7, #5
 801834c:	2301      	movs	r3, #1
 801834e:	f007 071f 	and.w	r7, r7, #31
 8018352:	fa03 f707 	lsl.w	r7, r3, r7
 8018356:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801835a:	4621      	mov	r1, r4
 801835c:	421f      	tst	r7, r3
 801835e:	4628      	mov	r0, r5
 8018360:	bf18      	it	ne
 8018362:	f04a 0a02 	orrne.w	sl, sl, #2
 8018366:	1b36      	subs	r6, r6, r4
 8018368:	f7ff fe22 	bl	8017fb0 <rshift>
 801836c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8018370:	2702      	movs	r7, #2
 8018372:	f1ba 0f00 	cmp.w	sl, #0
 8018376:	d048      	beq.n	801840a <__gethex+0x3bc>
 8018378:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801837c:	2b02      	cmp	r3, #2
 801837e:	d015      	beq.n	80183ac <__gethex+0x35e>
 8018380:	2b03      	cmp	r3, #3
 8018382:	d017      	beq.n	80183b4 <__gethex+0x366>
 8018384:	2b01      	cmp	r3, #1
 8018386:	d109      	bne.n	801839c <__gethex+0x34e>
 8018388:	f01a 0f02 	tst.w	sl, #2
 801838c:	d006      	beq.n	801839c <__gethex+0x34e>
 801838e:	f8d9 3000 	ldr.w	r3, [r9]
 8018392:	ea4a 0a03 	orr.w	sl, sl, r3
 8018396:	f01a 0f01 	tst.w	sl, #1
 801839a:	d10e      	bne.n	80183ba <__gethex+0x36c>
 801839c:	f047 0710 	orr.w	r7, r7, #16
 80183a0:	e033      	b.n	801840a <__gethex+0x3bc>
 80183a2:	f04f 0a01 	mov.w	sl, #1
 80183a6:	e7d0      	b.n	801834a <__gethex+0x2fc>
 80183a8:	2701      	movs	r7, #1
 80183aa:	e7e2      	b.n	8018372 <__gethex+0x324>
 80183ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80183ae:	f1c3 0301 	rsb	r3, r3, #1
 80183b2:	9315      	str	r3, [sp, #84]	; 0x54
 80183b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80183b6:	2b00      	cmp	r3, #0
 80183b8:	d0f0      	beq.n	801839c <__gethex+0x34e>
 80183ba:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80183be:	f105 0314 	add.w	r3, r5, #20
 80183c2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80183c6:	eb03 010a 	add.w	r1, r3, sl
 80183ca:	f04f 0c00 	mov.w	ip, #0
 80183ce:	4618      	mov	r0, r3
 80183d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80183d4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80183d8:	d01c      	beq.n	8018414 <__gethex+0x3c6>
 80183da:	3201      	adds	r2, #1
 80183dc:	6002      	str	r2, [r0, #0]
 80183de:	2f02      	cmp	r7, #2
 80183e0:	f105 0314 	add.w	r3, r5, #20
 80183e4:	d138      	bne.n	8018458 <__gethex+0x40a>
 80183e6:	f8d8 2000 	ldr.w	r2, [r8]
 80183ea:	3a01      	subs	r2, #1
 80183ec:	42b2      	cmp	r2, r6
 80183ee:	d10a      	bne.n	8018406 <__gethex+0x3b8>
 80183f0:	1171      	asrs	r1, r6, #5
 80183f2:	2201      	movs	r2, #1
 80183f4:	f006 061f 	and.w	r6, r6, #31
 80183f8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80183fc:	fa02 f606 	lsl.w	r6, r2, r6
 8018400:	421e      	tst	r6, r3
 8018402:	bf18      	it	ne
 8018404:	4617      	movne	r7, r2
 8018406:	f047 0720 	orr.w	r7, r7, #32
 801840a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801840c:	601d      	str	r5, [r3, #0]
 801840e:	9b06      	ldr	r3, [sp, #24]
 8018410:	601c      	str	r4, [r3, #0]
 8018412:	e6a4      	b.n	801815e <__gethex+0x110>
 8018414:	4299      	cmp	r1, r3
 8018416:	f843 cc04 	str.w	ip, [r3, #-4]
 801841a:	d8d8      	bhi.n	80183ce <__gethex+0x380>
 801841c:	68ab      	ldr	r3, [r5, #8]
 801841e:	4599      	cmp	r9, r3
 8018420:	db12      	blt.n	8018448 <__gethex+0x3fa>
 8018422:	6869      	ldr	r1, [r5, #4]
 8018424:	9802      	ldr	r0, [sp, #8]
 8018426:	3101      	adds	r1, #1
 8018428:	f000 f910 	bl	801864c <_Balloc>
 801842c:	692a      	ldr	r2, [r5, #16]
 801842e:	3202      	adds	r2, #2
 8018430:	f105 010c 	add.w	r1, r5, #12
 8018434:	4683      	mov	fp, r0
 8018436:	0092      	lsls	r2, r2, #2
 8018438:	300c      	adds	r0, #12
 801843a:	f7fd f939 	bl	80156b0 <memcpy>
 801843e:	4629      	mov	r1, r5
 8018440:	9802      	ldr	r0, [sp, #8]
 8018442:	f000 f937 	bl	80186b4 <_Bfree>
 8018446:	465d      	mov	r5, fp
 8018448:	692b      	ldr	r3, [r5, #16]
 801844a:	1c5a      	adds	r2, r3, #1
 801844c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8018450:	612a      	str	r2, [r5, #16]
 8018452:	2201      	movs	r2, #1
 8018454:	615a      	str	r2, [r3, #20]
 8018456:	e7c2      	b.n	80183de <__gethex+0x390>
 8018458:	692a      	ldr	r2, [r5, #16]
 801845a:	454a      	cmp	r2, r9
 801845c:	dd0b      	ble.n	8018476 <__gethex+0x428>
 801845e:	2101      	movs	r1, #1
 8018460:	4628      	mov	r0, r5
 8018462:	f7ff fda5 	bl	8017fb0 <rshift>
 8018466:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801846a:	3401      	adds	r4, #1
 801846c:	42a3      	cmp	r3, r4
 801846e:	f6ff aed9 	blt.w	8018224 <__gethex+0x1d6>
 8018472:	2701      	movs	r7, #1
 8018474:	e7c7      	b.n	8018406 <__gethex+0x3b8>
 8018476:	f016 061f 	ands.w	r6, r6, #31
 801847a:	d0fa      	beq.n	8018472 <__gethex+0x424>
 801847c:	449a      	add	sl, r3
 801847e:	f1c6 0620 	rsb	r6, r6, #32
 8018482:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8018486:	f000 f9a5 	bl	80187d4 <__hi0bits>
 801848a:	42b0      	cmp	r0, r6
 801848c:	dbe7      	blt.n	801845e <__gethex+0x410>
 801848e:	e7f0      	b.n	8018472 <__gethex+0x424>

08018490 <L_shift>:
 8018490:	f1c2 0208 	rsb	r2, r2, #8
 8018494:	0092      	lsls	r2, r2, #2
 8018496:	b570      	push	{r4, r5, r6, lr}
 8018498:	f1c2 0620 	rsb	r6, r2, #32
 801849c:	6843      	ldr	r3, [r0, #4]
 801849e:	6804      	ldr	r4, [r0, #0]
 80184a0:	fa03 f506 	lsl.w	r5, r3, r6
 80184a4:	432c      	orrs	r4, r5
 80184a6:	40d3      	lsrs	r3, r2
 80184a8:	6004      	str	r4, [r0, #0]
 80184aa:	f840 3f04 	str.w	r3, [r0, #4]!
 80184ae:	4288      	cmp	r0, r1
 80184b0:	d3f4      	bcc.n	801849c <L_shift+0xc>
 80184b2:	bd70      	pop	{r4, r5, r6, pc}

080184b4 <__match>:
 80184b4:	b530      	push	{r4, r5, lr}
 80184b6:	6803      	ldr	r3, [r0, #0]
 80184b8:	3301      	adds	r3, #1
 80184ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80184be:	b914      	cbnz	r4, 80184c6 <__match+0x12>
 80184c0:	6003      	str	r3, [r0, #0]
 80184c2:	2001      	movs	r0, #1
 80184c4:	bd30      	pop	{r4, r5, pc}
 80184c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80184ca:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80184ce:	2d19      	cmp	r5, #25
 80184d0:	bf98      	it	ls
 80184d2:	3220      	addls	r2, #32
 80184d4:	42a2      	cmp	r2, r4
 80184d6:	d0f0      	beq.n	80184ba <__match+0x6>
 80184d8:	2000      	movs	r0, #0
 80184da:	e7f3      	b.n	80184c4 <__match+0x10>

080184dc <__hexnan>:
 80184dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184e0:	680b      	ldr	r3, [r1, #0]
 80184e2:	6801      	ldr	r1, [r0, #0]
 80184e4:	115f      	asrs	r7, r3, #5
 80184e6:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80184ea:	f013 031f 	ands.w	r3, r3, #31
 80184ee:	b087      	sub	sp, #28
 80184f0:	bf18      	it	ne
 80184f2:	3704      	addne	r7, #4
 80184f4:	2500      	movs	r5, #0
 80184f6:	1f3e      	subs	r6, r7, #4
 80184f8:	4682      	mov	sl, r0
 80184fa:	4690      	mov	r8, r2
 80184fc:	9301      	str	r3, [sp, #4]
 80184fe:	f847 5c04 	str.w	r5, [r7, #-4]
 8018502:	46b1      	mov	r9, r6
 8018504:	4634      	mov	r4, r6
 8018506:	9502      	str	r5, [sp, #8]
 8018508:	46ab      	mov	fp, r5
 801850a:	784a      	ldrb	r2, [r1, #1]
 801850c:	1c4b      	adds	r3, r1, #1
 801850e:	9303      	str	r3, [sp, #12]
 8018510:	b342      	cbz	r2, 8018564 <__hexnan+0x88>
 8018512:	4610      	mov	r0, r2
 8018514:	9105      	str	r1, [sp, #20]
 8018516:	9204      	str	r2, [sp, #16]
 8018518:	f7ff fd84 	bl	8018024 <__hexdig_fun>
 801851c:	2800      	cmp	r0, #0
 801851e:	d143      	bne.n	80185a8 <__hexnan+0xcc>
 8018520:	9a04      	ldr	r2, [sp, #16]
 8018522:	9905      	ldr	r1, [sp, #20]
 8018524:	2a20      	cmp	r2, #32
 8018526:	d818      	bhi.n	801855a <__hexnan+0x7e>
 8018528:	9b02      	ldr	r3, [sp, #8]
 801852a:	459b      	cmp	fp, r3
 801852c:	dd13      	ble.n	8018556 <__hexnan+0x7a>
 801852e:	454c      	cmp	r4, r9
 8018530:	d206      	bcs.n	8018540 <__hexnan+0x64>
 8018532:	2d07      	cmp	r5, #7
 8018534:	dc04      	bgt.n	8018540 <__hexnan+0x64>
 8018536:	462a      	mov	r2, r5
 8018538:	4649      	mov	r1, r9
 801853a:	4620      	mov	r0, r4
 801853c:	f7ff ffa8 	bl	8018490 <L_shift>
 8018540:	4544      	cmp	r4, r8
 8018542:	d944      	bls.n	80185ce <__hexnan+0xf2>
 8018544:	2300      	movs	r3, #0
 8018546:	f1a4 0904 	sub.w	r9, r4, #4
 801854a:	f844 3c04 	str.w	r3, [r4, #-4]
 801854e:	f8cd b008 	str.w	fp, [sp, #8]
 8018552:	464c      	mov	r4, r9
 8018554:	461d      	mov	r5, r3
 8018556:	9903      	ldr	r1, [sp, #12]
 8018558:	e7d7      	b.n	801850a <__hexnan+0x2e>
 801855a:	2a29      	cmp	r2, #41	; 0x29
 801855c:	d14a      	bne.n	80185f4 <__hexnan+0x118>
 801855e:	3102      	adds	r1, #2
 8018560:	f8ca 1000 	str.w	r1, [sl]
 8018564:	f1bb 0f00 	cmp.w	fp, #0
 8018568:	d044      	beq.n	80185f4 <__hexnan+0x118>
 801856a:	454c      	cmp	r4, r9
 801856c:	d206      	bcs.n	801857c <__hexnan+0xa0>
 801856e:	2d07      	cmp	r5, #7
 8018570:	dc04      	bgt.n	801857c <__hexnan+0xa0>
 8018572:	462a      	mov	r2, r5
 8018574:	4649      	mov	r1, r9
 8018576:	4620      	mov	r0, r4
 8018578:	f7ff ff8a 	bl	8018490 <L_shift>
 801857c:	4544      	cmp	r4, r8
 801857e:	d928      	bls.n	80185d2 <__hexnan+0xf6>
 8018580:	4643      	mov	r3, r8
 8018582:	f854 2b04 	ldr.w	r2, [r4], #4
 8018586:	f843 2b04 	str.w	r2, [r3], #4
 801858a:	42a6      	cmp	r6, r4
 801858c:	d2f9      	bcs.n	8018582 <__hexnan+0xa6>
 801858e:	2200      	movs	r2, #0
 8018590:	f843 2b04 	str.w	r2, [r3], #4
 8018594:	429e      	cmp	r6, r3
 8018596:	d2fb      	bcs.n	8018590 <__hexnan+0xb4>
 8018598:	6833      	ldr	r3, [r6, #0]
 801859a:	b91b      	cbnz	r3, 80185a4 <__hexnan+0xc8>
 801859c:	4546      	cmp	r6, r8
 801859e:	d127      	bne.n	80185f0 <__hexnan+0x114>
 80185a0:	2301      	movs	r3, #1
 80185a2:	6033      	str	r3, [r6, #0]
 80185a4:	2005      	movs	r0, #5
 80185a6:	e026      	b.n	80185f6 <__hexnan+0x11a>
 80185a8:	3501      	adds	r5, #1
 80185aa:	2d08      	cmp	r5, #8
 80185ac:	f10b 0b01 	add.w	fp, fp, #1
 80185b0:	dd06      	ble.n	80185c0 <__hexnan+0xe4>
 80185b2:	4544      	cmp	r4, r8
 80185b4:	d9cf      	bls.n	8018556 <__hexnan+0x7a>
 80185b6:	2300      	movs	r3, #0
 80185b8:	f844 3c04 	str.w	r3, [r4, #-4]
 80185bc:	2501      	movs	r5, #1
 80185be:	3c04      	subs	r4, #4
 80185c0:	6822      	ldr	r2, [r4, #0]
 80185c2:	f000 000f 	and.w	r0, r0, #15
 80185c6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80185ca:	6020      	str	r0, [r4, #0]
 80185cc:	e7c3      	b.n	8018556 <__hexnan+0x7a>
 80185ce:	2508      	movs	r5, #8
 80185d0:	e7c1      	b.n	8018556 <__hexnan+0x7a>
 80185d2:	9b01      	ldr	r3, [sp, #4]
 80185d4:	2b00      	cmp	r3, #0
 80185d6:	d0df      	beq.n	8018598 <__hexnan+0xbc>
 80185d8:	f04f 32ff 	mov.w	r2, #4294967295
 80185dc:	f1c3 0320 	rsb	r3, r3, #32
 80185e0:	fa22 f303 	lsr.w	r3, r2, r3
 80185e4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80185e8:	401a      	ands	r2, r3
 80185ea:	f847 2c04 	str.w	r2, [r7, #-4]
 80185ee:	e7d3      	b.n	8018598 <__hexnan+0xbc>
 80185f0:	3e04      	subs	r6, #4
 80185f2:	e7d1      	b.n	8018598 <__hexnan+0xbc>
 80185f4:	2004      	movs	r0, #4
 80185f6:	b007      	add	sp, #28
 80185f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080185fc <__locale_ctype_ptr_l>:
 80185fc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8018600:	4770      	bx	lr

08018602 <__localeconv_l>:
 8018602:	30f0      	adds	r0, #240	; 0xf0
 8018604:	4770      	bx	lr
	...

08018608 <_localeconv_r>:
 8018608:	4b04      	ldr	r3, [pc, #16]	; (801861c <_localeconv_r+0x14>)
 801860a:	681b      	ldr	r3, [r3, #0]
 801860c:	6a18      	ldr	r0, [r3, #32]
 801860e:	4b04      	ldr	r3, [pc, #16]	; (8018620 <_localeconv_r+0x18>)
 8018610:	2800      	cmp	r0, #0
 8018612:	bf08      	it	eq
 8018614:	4618      	moveq	r0, r3
 8018616:	30f0      	adds	r0, #240	; 0xf0
 8018618:	4770      	bx	lr
 801861a:	bf00      	nop
 801861c:	20000e0c 	.word	0x20000e0c
 8018620:	20000e70 	.word	0x20000e70

08018624 <__ascii_mbtowc>:
 8018624:	b082      	sub	sp, #8
 8018626:	b901      	cbnz	r1, 801862a <__ascii_mbtowc+0x6>
 8018628:	a901      	add	r1, sp, #4
 801862a:	b142      	cbz	r2, 801863e <__ascii_mbtowc+0x1a>
 801862c:	b14b      	cbz	r3, 8018642 <__ascii_mbtowc+0x1e>
 801862e:	7813      	ldrb	r3, [r2, #0]
 8018630:	600b      	str	r3, [r1, #0]
 8018632:	7812      	ldrb	r2, [r2, #0]
 8018634:	1c10      	adds	r0, r2, #0
 8018636:	bf18      	it	ne
 8018638:	2001      	movne	r0, #1
 801863a:	b002      	add	sp, #8
 801863c:	4770      	bx	lr
 801863e:	4610      	mov	r0, r2
 8018640:	e7fb      	b.n	801863a <__ascii_mbtowc+0x16>
 8018642:	f06f 0001 	mvn.w	r0, #1
 8018646:	e7f8      	b.n	801863a <__ascii_mbtowc+0x16>

08018648 <__malloc_lock>:
 8018648:	4770      	bx	lr

0801864a <__malloc_unlock>:
 801864a:	4770      	bx	lr

0801864c <_Balloc>:
 801864c:	b570      	push	{r4, r5, r6, lr}
 801864e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018650:	4604      	mov	r4, r0
 8018652:	460e      	mov	r6, r1
 8018654:	b93d      	cbnz	r5, 8018666 <_Balloc+0x1a>
 8018656:	2010      	movs	r0, #16
 8018658:	f7fd f81a 	bl	8015690 <malloc>
 801865c:	6260      	str	r0, [r4, #36]	; 0x24
 801865e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8018662:	6005      	str	r5, [r0, #0]
 8018664:	60c5      	str	r5, [r0, #12]
 8018666:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8018668:	68eb      	ldr	r3, [r5, #12]
 801866a:	b183      	cbz	r3, 801868e <_Balloc+0x42>
 801866c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801866e:	68db      	ldr	r3, [r3, #12]
 8018670:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8018674:	b9b8      	cbnz	r0, 80186a6 <_Balloc+0x5a>
 8018676:	2101      	movs	r1, #1
 8018678:	fa01 f506 	lsl.w	r5, r1, r6
 801867c:	1d6a      	adds	r2, r5, #5
 801867e:	0092      	lsls	r2, r2, #2
 8018680:	4620      	mov	r0, r4
 8018682:	f000 fbe2 	bl	8018e4a <_calloc_r>
 8018686:	b160      	cbz	r0, 80186a2 <_Balloc+0x56>
 8018688:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801868c:	e00e      	b.n	80186ac <_Balloc+0x60>
 801868e:	2221      	movs	r2, #33	; 0x21
 8018690:	2104      	movs	r1, #4
 8018692:	4620      	mov	r0, r4
 8018694:	f000 fbd9 	bl	8018e4a <_calloc_r>
 8018698:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801869a:	60e8      	str	r0, [r5, #12]
 801869c:	68db      	ldr	r3, [r3, #12]
 801869e:	2b00      	cmp	r3, #0
 80186a0:	d1e4      	bne.n	801866c <_Balloc+0x20>
 80186a2:	2000      	movs	r0, #0
 80186a4:	bd70      	pop	{r4, r5, r6, pc}
 80186a6:	6802      	ldr	r2, [r0, #0]
 80186a8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80186ac:	2300      	movs	r3, #0
 80186ae:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80186b2:	e7f7      	b.n	80186a4 <_Balloc+0x58>

080186b4 <_Bfree>:
 80186b4:	b570      	push	{r4, r5, r6, lr}
 80186b6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80186b8:	4606      	mov	r6, r0
 80186ba:	460d      	mov	r5, r1
 80186bc:	b93c      	cbnz	r4, 80186ce <_Bfree+0x1a>
 80186be:	2010      	movs	r0, #16
 80186c0:	f7fc ffe6 	bl	8015690 <malloc>
 80186c4:	6270      	str	r0, [r6, #36]	; 0x24
 80186c6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80186ca:	6004      	str	r4, [r0, #0]
 80186cc:	60c4      	str	r4, [r0, #12]
 80186ce:	b13d      	cbz	r5, 80186e0 <_Bfree+0x2c>
 80186d0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80186d2:	686a      	ldr	r2, [r5, #4]
 80186d4:	68db      	ldr	r3, [r3, #12]
 80186d6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80186da:	6029      	str	r1, [r5, #0]
 80186dc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80186e0:	bd70      	pop	{r4, r5, r6, pc}

080186e2 <__multadd>:
 80186e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80186e6:	690d      	ldr	r5, [r1, #16]
 80186e8:	461f      	mov	r7, r3
 80186ea:	4606      	mov	r6, r0
 80186ec:	460c      	mov	r4, r1
 80186ee:	f101 0c14 	add.w	ip, r1, #20
 80186f2:	2300      	movs	r3, #0
 80186f4:	f8dc 0000 	ldr.w	r0, [ip]
 80186f8:	b281      	uxth	r1, r0
 80186fa:	fb02 7101 	mla	r1, r2, r1, r7
 80186fe:	0c0f      	lsrs	r7, r1, #16
 8018700:	0c00      	lsrs	r0, r0, #16
 8018702:	fb02 7000 	mla	r0, r2, r0, r7
 8018706:	b289      	uxth	r1, r1
 8018708:	3301      	adds	r3, #1
 801870a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801870e:	429d      	cmp	r5, r3
 8018710:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8018714:	f84c 1b04 	str.w	r1, [ip], #4
 8018718:	dcec      	bgt.n	80186f4 <__multadd+0x12>
 801871a:	b1d7      	cbz	r7, 8018752 <__multadd+0x70>
 801871c:	68a3      	ldr	r3, [r4, #8]
 801871e:	42ab      	cmp	r3, r5
 8018720:	dc12      	bgt.n	8018748 <__multadd+0x66>
 8018722:	6861      	ldr	r1, [r4, #4]
 8018724:	4630      	mov	r0, r6
 8018726:	3101      	adds	r1, #1
 8018728:	f7ff ff90 	bl	801864c <_Balloc>
 801872c:	6922      	ldr	r2, [r4, #16]
 801872e:	3202      	adds	r2, #2
 8018730:	f104 010c 	add.w	r1, r4, #12
 8018734:	4680      	mov	r8, r0
 8018736:	0092      	lsls	r2, r2, #2
 8018738:	300c      	adds	r0, #12
 801873a:	f7fc ffb9 	bl	80156b0 <memcpy>
 801873e:	4621      	mov	r1, r4
 8018740:	4630      	mov	r0, r6
 8018742:	f7ff ffb7 	bl	80186b4 <_Bfree>
 8018746:	4644      	mov	r4, r8
 8018748:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801874c:	3501      	adds	r5, #1
 801874e:	615f      	str	r7, [r3, #20]
 8018750:	6125      	str	r5, [r4, #16]
 8018752:	4620      	mov	r0, r4
 8018754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018758 <__s2b>:
 8018758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801875c:	460c      	mov	r4, r1
 801875e:	4615      	mov	r5, r2
 8018760:	461f      	mov	r7, r3
 8018762:	2209      	movs	r2, #9
 8018764:	3308      	adds	r3, #8
 8018766:	4606      	mov	r6, r0
 8018768:	fb93 f3f2 	sdiv	r3, r3, r2
 801876c:	2100      	movs	r1, #0
 801876e:	2201      	movs	r2, #1
 8018770:	429a      	cmp	r2, r3
 8018772:	db20      	blt.n	80187b6 <__s2b+0x5e>
 8018774:	4630      	mov	r0, r6
 8018776:	f7ff ff69 	bl	801864c <_Balloc>
 801877a:	9b08      	ldr	r3, [sp, #32]
 801877c:	6143      	str	r3, [r0, #20]
 801877e:	2d09      	cmp	r5, #9
 8018780:	f04f 0301 	mov.w	r3, #1
 8018784:	6103      	str	r3, [r0, #16]
 8018786:	dd19      	ble.n	80187bc <__s2b+0x64>
 8018788:	f104 0809 	add.w	r8, r4, #9
 801878c:	46c1      	mov	r9, r8
 801878e:	442c      	add	r4, r5
 8018790:	f819 3b01 	ldrb.w	r3, [r9], #1
 8018794:	4601      	mov	r1, r0
 8018796:	3b30      	subs	r3, #48	; 0x30
 8018798:	220a      	movs	r2, #10
 801879a:	4630      	mov	r0, r6
 801879c:	f7ff ffa1 	bl	80186e2 <__multadd>
 80187a0:	45a1      	cmp	r9, r4
 80187a2:	d1f5      	bne.n	8018790 <__s2b+0x38>
 80187a4:	eb08 0405 	add.w	r4, r8, r5
 80187a8:	3c08      	subs	r4, #8
 80187aa:	1b2d      	subs	r5, r5, r4
 80187ac:	1963      	adds	r3, r4, r5
 80187ae:	42bb      	cmp	r3, r7
 80187b0:	db07      	blt.n	80187c2 <__s2b+0x6a>
 80187b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80187b6:	0052      	lsls	r2, r2, #1
 80187b8:	3101      	adds	r1, #1
 80187ba:	e7d9      	b.n	8018770 <__s2b+0x18>
 80187bc:	340a      	adds	r4, #10
 80187be:	2509      	movs	r5, #9
 80187c0:	e7f3      	b.n	80187aa <__s2b+0x52>
 80187c2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80187c6:	4601      	mov	r1, r0
 80187c8:	3b30      	subs	r3, #48	; 0x30
 80187ca:	220a      	movs	r2, #10
 80187cc:	4630      	mov	r0, r6
 80187ce:	f7ff ff88 	bl	80186e2 <__multadd>
 80187d2:	e7eb      	b.n	80187ac <__s2b+0x54>

080187d4 <__hi0bits>:
 80187d4:	0c02      	lsrs	r2, r0, #16
 80187d6:	0412      	lsls	r2, r2, #16
 80187d8:	4603      	mov	r3, r0
 80187da:	b9b2      	cbnz	r2, 801880a <__hi0bits+0x36>
 80187dc:	0403      	lsls	r3, r0, #16
 80187de:	2010      	movs	r0, #16
 80187e0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80187e4:	bf04      	itt	eq
 80187e6:	021b      	lsleq	r3, r3, #8
 80187e8:	3008      	addeq	r0, #8
 80187ea:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80187ee:	bf04      	itt	eq
 80187f0:	011b      	lsleq	r3, r3, #4
 80187f2:	3004      	addeq	r0, #4
 80187f4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80187f8:	bf04      	itt	eq
 80187fa:	009b      	lsleq	r3, r3, #2
 80187fc:	3002      	addeq	r0, #2
 80187fe:	2b00      	cmp	r3, #0
 8018800:	db06      	blt.n	8018810 <__hi0bits+0x3c>
 8018802:	005b      	lsls	r3, r3, #1
 8018804:	d503      	bpl.n	801880e <__hi0bits+0x3a>
 8018806:	3001      	adds	r0, #1
 8018808:	4770      	bx	lr
 801880a:	2000      	movs	r0, #0
 801880c:	e7e8      	b.n	80187e0 <__hi0bits+0xc>
 801880e:	2020      	movs	r0, #32
 8018810:	4770      	bx	lr

08018812 <__lo0bits>:
 8018812:	6803      	ldr	r3, [r0, #0]
 8018814:	f013 0207 	ands.w	r2, r3, #7
 8018818:	4601      	mov	r1, r0
 801881a:	d00b      	beq.n	8018834 <__lo0bits+0x22>
 801881c:	07da      	lsls	r2, r3, #31
 801881e:	d423      	bmi.n	8018868 <__lo0bits+0x56>
 8018820:	0798      	lsls	r0, r3, #30
 8018822:	bf49      	itett	mi
 8018824:	085b      	lsrmi	r3, r3, #1
 8018826:	089b      	lsrpl	r3, r3, #2
 8018828:	2001      	movmi	r0, #1
 801882a:	600b      	strmi	r3, [r1, #0]
 801882c:	bf5c      	itt	pl
 801882e:	600b      	strpl	r3, [r1, #0]
 8018830:	2002      	movpl	r0, #2
 8018832:	4770      	bx	lr
 8018834:	b298      	uxth	r0, r3
 8018836:	b9a8      	cbnz	r0, 8018864 <__lo0bits+0x52>
 8018838:	0c1b      	lsrs	r3, r3, #16
 801883a:	2010      	movs	r0, #16
 801883c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018840:	bf04      	itt	eq
 8018842:	0a1b      	lsreq	r3, r3, #8
 8018844:	3008      	addeq	r0, #8
 8018846:	071a      	lsls	r2, r3, #28
 8018848:	bf04      	itt	eq
 801884a:	091b      	lsreq	r3, r3, #4
 801884c:	3004      	addeq	r0, #4
 801884e:	079a      	lsls	r2, r3, #30
 8018850:	bf04      	itt	eq
 8018852:	089b      	lsreq	r3, r3, #2
 8018854:	3002      	addeq	r0, #2
 8018856:	07da      	lsls	r2, r3, #31
 8018858:	d402      	bmi.n	8018860 <__lo0bits+0x4e>
 801885a:	085b      	lsrs	r3, r3, #1
 801885c:	d006      	beq.n	801886c <__lo0bits+0x5a>
 801885e:	3001      	adds	r0, #1
 8018860:	600b      	str	r3, [r1, #0]
 8018862:	4770      	bx	lr
 8018864:	4610      	mov	r0, r2
 8018866:	e7e9      	b.n	801883c <__lo0bits+0x2a>
 8018868:	2000      	movs	r0, #0
 801886a:	4770      	bx	lr
 801886c:	2020      	movs	r0, #32
 801886e:	4770      	bx	lr

08018870 <__i2b>:
 8018870:	b510      	push	{r4, lr}
 8018872:	460c      	mov	r4, r1
 8018874:	2101      	movs	r1, #1
 8018876:	f7ff fee9 	bl	801864c <_Balloc>
 801887a:	2201      	movs	r2, #1
 801887c:	6144      	str	r4, [r0, #20]
 801887e:	6102      	str	r2, [r0, #16]
 8018880:	bd10      	pop	{r4, pc}

08018882 <__multiply>:
 8018882:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018886:	4614      	mov	r4, r2
 8018888:	690a      	ldr	r2, [r1, #16]
 801888a:	6923      	ldr	r3, [r4, #16]
 801888c:	429a      	cmp	r2, r3
 801888e:	bfb8      	it	lt
 8018890:	460b      	movlt	r3, r1
 8018892:	4688      	mov	r8, r1
 8018894:	bfbc      	itt	lt
 8018896:	46a0      	movlt	r8, r4
 8018898:	461c      	movlt	r4, r3
 801889a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801889e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80188a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80188a6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80188aa:	eb07 0609 	add.w	r6, r7, r9
 80188ae:	42b3      	cmp	r3, r6
 80188b0:	bfb8      	it	lt
 80188b2:	3101      	addlt	r1, #1
 80188b4:	f7ff feca 	bl	801864c <_Balloc>
 80188b8:	f100 0514 	add.w	r5, r0, #20
 80188bc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80188c0:	462b      	mov	r3, r5
 80188c2:	2200      	movs	r2, #0
 80188c4:	4573      	cmp	r3, lr
 80188c6:	d316      	bcc.n	80188f6 <__multiply+0x74>
 80188c8:	f104 0214 	add.w	r2, r4, #20
 80188cc:	f108 0114 	add.w	r1, r8, #20
 80188d0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80188d4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80188d8:	9300      	str	r3, [sp, #0]
 80188da:	9b00      	ldr	r3, [sp, #0]
 80188dc:	9201      	str	r2, [sp, #4]
 80188de:	4293      	cmp	r3, r2
 80188e0:	d80c      	bhi.n	80188fc <__multiply+0x7a>
 80188e2:	2e00      	cmp	r6, #0
 80188e4:	dd03      	ble.n	80188ee <__multiply+0x6c>
 80188e6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80188ea:	2b00      	cmp	r3, #0
 80188ec:	d05d      	beq.n	80189aa <__multiply+0x128>
 80188ee:	6106      	str	r6, [r0, #16]
 80188f0:	b003      	add	sp, #12
 80188f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188f6:	f843 2b04 	str.w	r2, [r3], #4
 80188fa:	e7e3      	b.n	80188c4 <__multiply+0x42>
 80188fc:	f8b2 b000 	ldrh.w	fp, [r2]
 8018900:	f1bb 0f00 	cmp.w	fp, #0
 8018904:	d023      	beq.n	801894e <__multiply+0xcc>
 8018906:	4689      	mov	r9, r1
 8018908:	46ac      	mov	ip, r5
 801890a:	f04f 0800 	mov.w	r8, #0
 801890e:	f859 4b04 	ldr.w	r4, [r9], #4
 8018912:	f8dc a000 	ldr.w	sl, [ip]
 8018916:	b2a3      	uxth	r3, r4
 8018918:	fa1f fa8a 	uxth.w	sl, sl
 801891c:	fb0b a303 	mla	r3, fp, r3, sl
 8018920:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8018924:	f8dc 4000 	ldr.w	r4, [ip]
 8018928:	4443      	add	r3, r8
 801892a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801892e:	fb0b 840a 	mla	r4, fp, sl, r8
 8018932:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8018936:	46e2      	mov	sl, ip
 8018938:	b29b      	uxth	r3, r3
 801893a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801893e:	454f      	cmp	r7, r9
 8018940:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018944:	f84a 3b04 	str.w	r3, [sl], #4
 8018948:	d82b      	bhi.n	80189a2 <__multiply+0x120>
 801894a:	f8cc 8004 	str.w	r8, [ip, #4]
 801894e:	9b01      	ldr	r3, [sp, #4]
 8018950:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8018954:	3204      	adds	r2, #4
 8018956:	f1ba 0f00 	cmp.w	sl, #0
 801895a:	d020      	beq.n	801899e <__multiply+0x11c>
 801895c:	682b      	ldr	r3, [r5, #0]
 801895e:	4689      	mov	r9, r1
 8018960:	46a8      	mov	r8, r5
 8018962:	f04f 0b00 	mov.w	fp, #0
 8018966:	f8b9 c000 	ldrh.w	ip, [r9]
 801896a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801896e:	fb0a 440c 	mla	r4, sl, ip, r4
 8018972:	445c      	add	r4, fp
 8018974:	46c4      	mov	ip, r8
 8018976:	b29b      	uxth	r3, r3
 8018978:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801897c:	f84c 3b04 	str.w	r3, [ip], #4
 8018980:	f859 3b04 	ldr.w	r3, [r9], #4
 8018984:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8018988:	0c1b      	lsrs	r3, r3, #16
 801898a:	fb0a b303 	mla	r3, sl, r3, fp
 801898e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8018992:	454f      	cmp	r7, r9
 8018994:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8018998:	d805      	bhi.n	80189a6 <__multiply+0x124>
 801899a:	f8c8 3004 	str.w	r3, [r8, #4]
 801899e:	3504      	adds	r5, #4
 80189a0:	e79b      	b.n	80188da <__multiply+0x58>
 80189a2:	46d4      	mov	ip, sl
 80189a4:	e7b3      	b.n	801890e <__multiply+0x8c>
 80189a6:	46e0      	mov	r8, ip
 80189a8:	e7dd      	b.n	8018966 <__multiply+0xe4>
 80189aa:	3e01      	subs	r6, #1
 80189ac:	e799      	b.n	80188e2 <__multiply+0x60>
	...

080189b0 <__pow5mult>:
 80189b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80189b4:	4615      	mov	r5, r2
 80189b6:	f012 0203 	ands.w	r2, r2, #3
 80189ba:	4606      	mov	r6, r0
 80189bc:	460f      	mov	r7, r1
 80189be:	d007      	beq.n	80189d0 <__pow5mult+0x20>
 80189c0:	3a01      	subs	r2, #1
 80189c2:	4c21      	ldr	r4, [pc, #132]	; (8018a48 <__pow5mult+0x98>)
 80189c4:	2300      	movs	r3, #0
 80189c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80189ca:	f7ff fe8a 	bl	80186e2 <__multadd>
 80189ce:	4607      	mov	r7, r0
 80189d0:	10ad      	asrs	r5, r5, #2
 80189d2:	d035      	beq.n	8018a40 <__pow5mult+0x90>
 80189d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80189d6:	b93c      	cbnz	r4, 80189e8 <__pow5mult+0x38>
 80189d8:	2010      	movs	r0, #16
 80189da:	f7fc fe59 	bl	8015690 <malloc>
 80189de:	6270      	str	r0, [r6, #36]	; 0x24
 80189e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80189e4:	6004      	str	r4, [r0, #0]
 80189e6:	60c4      	str	r4, [r0, #12]
 80189e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80189ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80189f0:	b94c      	cbnz	r4, 8018a06 <__pow5mult+0x56>
 80189f2:	f240 2171 	movw	r1, #625	; 0x271
 80189f6:	4630      	mov	r0, r6
 80189f8:	f7ff ff3a 	bl	8018870 <__i2b>
 80189fc:	2300      	movs	r3, #0
 80189fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8018a02:	4604      	mov	r4, r0
 8018a04:	6003      	str	r3, [r0, #0]
 8018a06:	f04f 0800 	mov.w	r8, #0
 8018a0a:	07eb      	lsls	r3, r5, #31
 8018a0c:	d50a      	bpl.n	8018a24 <__pow5mult+0x74>
 8018a0e:	4639      	mov	r1, r7
 8018a10:	4622      	mov	r2, r4
 8018a12:	4630      	mov	r0, r6
 8018a14:	f7ff ff35 	bl	8018882 <__multiply>
 8018a18:	4639      	mov	r1, r7
 8018a1a:	4681      	mov	r9, r0
 8018a1c:	4630      	mov	r0, r6
 8018a1e:	f7ff fe49 	bl	80186b4 <_Bfree>
 8018a22:	464f      	mov	r7, r9
 8018a24:	106d      	asrs	r5, r5, #1
 8018a26:	d00b      	beq.n	8018a40 <__pow5mult+0x90>
 8018a28:	6820      	ldr	r0, [r4, #0]
 8018a2a:	b938      	cbnz	r0, 8018a3c <__pow5mult+0x8c>
 8018a2c:	4622      	mov	r2, r4
 8018a2e:	4621      	mov	r1, r4
 8018a30:	4630      	mov	r0, r6
 8018a32:	f7ff ff26 	bl	8018882 <__multiply>
 8018a36:	6020      	str	r0, [r4, #0]
 8018a38:	f8c0 8000 	str.w	r8, [r0]
 8018a3c:	4604      	mov	r4, r0
 8018a3e:	e7e4      	b.n	8018a0a <__pow5mult+0x5a>
 8018a40:	4638      	mov	r0, r7
 8018a42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018a46:	bf00      	nop
 8018a48:	0801b2b0 	.word	0x0801b2b0

08018a4c <__lshift>:
 8018a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018a50:	460c      	mov	r4, r1
 8018a52:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018a56:	6923      	ldr	r3, [r4, #16]
 8018a58:	6849      	ldr	r1, [r1, #4]
 8018a5a:	eb0a 0903 	add.w	r9, sl, r3
 8018a5e:	68a3      	ldr	r3, [r4, #8]
 8018a60:	4607      	mov	r7, r0
 8018a62:	4616      	mov	r6, r2
 8018a64:	f109 0501 	add.w	r5, r9, #1
 8018a68:	42ab      	cmp	r3, r5
 8018a6a:	db32      	blt.n	8018ad2 <__lshift+0x86>
 8018a6c:	4638      	mov	r0, r7
 8018a6e:	f7ff fded 	bl	801864c <_Balloc>
 8018a72:	2300      	movs	r3, #0
 8018a74:	4680      	mov	r8, r0
 8018a76:	f100 0114 	add.w	r1, r0, #20
 8018a7a:	461a      	mov	r2, r3
 8018a7c:	4553      	cmp	r3, sl
 8018a7e:	db2b      	blt.n	8018ad8 <__lshift+0x8c>
 8018a80:	6920      	ldr	r0, [r4, #16]
 8018a82:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018a86:	f104 0314 	add.w	r3, r4, #20
 8018a8a:	f016 021f 	ands.w	r2, r6, #31
 8018a8e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018a92:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018a96:	d025      	beq.n	8018ae4 <__lshift+0x98>
 8018a98:	f1c2 0e20 	rsb	lr, r2, #32
 8018a9c:	2000      	movs	r0, #0
 8018a9e:	681e      	ldr	r6, [r3, #0]
 8018aa0:	468a      	mov	sl, r1
 8018aa2:	4096      	lsls	r6, r2
 8018aa4:	4330      	orrs	r0, r6
 8018aa6:	f84a 0b04 	str.w	r0, [sl], #4
 8018aaa:	f853 0b04 	ldr.w	r0, [r3], #4
 8018aae:	459c      	cmp	ip, r3
 8018ab0:	fa20 f00e 	lsr.w	r0, r0, lr
 8018ab4:	d814      	bhi.n	8018ae0 <__lshift+0x94>
 8018ab6:	6048      	str	r0, [r1, #4]
 8018ab8:	b108      	cbz	r0, 8018abe <__lshift+0x72>
 8018aba:	f109 0502 	add.w	r5, r9, #2
 8018abe:	3d01      	subs	r5, #1
 8018ac0:	4638      	mov	r0, r7
 8018ac2:	f8c8 5010 	str.w	r5, [r8, #16]
 8018ac6:	4621      	mov	r1, r4
 8018ac8:	f7ff fdf4 	bl	80186b4 <_Bfree>
 8018acc:	4640      	mov	r0, r8
 8018ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018ad2:	3101      	adds	r1, #1
 8018ad4:	005b      	lsls	r3, r3, #1
 8018ad6:	e7c7      	b.n	8018a68 <__lshift+0x1c>
 8018ad8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8018adc:	3301      	adds	r3, #1
 8018ade:	e7cd      	b.n	8018a7c <__lshift+0x30>
 8018ae0:	4651      	mov	r1, sl
 8018ae2:	e7dc      	b.n	8018a9e <__lshift+0x52>
 8018ae4:	3904      	subs	r1, #4
 8018ae6:	f853 2b04 	ldr.w	r2, [r3], #4
 8018aea:	f841 2f04 	str.w	r2, [r1, #4]!
 8018aee:	459c      	cmp	ip, r3
 8018af0:	d8f9      	bhi.n	8018ae6 <__lshift+0x9a>
 8018af2:	e7e4      	b.n	8018abe <__lshift+0x72>

08018af4 <__mcmp>:
 8018af4:	6903      	ldr	r3, [r0, #16]
 8018af6:	690a      	ldr	r2, [r1, #16]
 8018af8:	1a9b      	subs	r3, r3, r2
 8018afa:	b530      	push	{r4, r5, lr}
 8018afc:	d10c      	bne.n	8018b18 <__mcmp+0x24>
 8018afe:	0092      	lsls	r2, r2, #2
 8018b00:	3014      	adds	r0, #20
 8018b02:	3114      	adds	r1, #20
 8018b04:	1884      	adds	r4, r0, r2
 8018b06:	4411      	add	r1, r2
 8018b08:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018b0c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018b10:	4295      	cmp	r5, r2
 8018b12:	d003      	beq.n	8018b1c <__mcmp+0x28>
 8018b14:	d305      	bcc.n	8018b22 <__mcmp+0x2e>
 8018b16:	2301      	movs	r3, #1
 8018b18:	4618      	mov	r0, r3
 8018b1a:	bd30      	pop	{r4, r5, pc}
 8018b1c:	42a0      	cmp	r0, r4
 8018b1e:	d3f3      	bcc.n	8018b08 <__mcmp+0x14>
 8018b20:	e7fa      	b.n	8018b18 <__mcmp+0x24>
 8018b22:	f04f 33ff 	mov.w	r3, #4294967295
 8018b26:	e7f7      	b.n	8018b18 <__mcmp+0x24>

08018b28 <__mdiff>:
 8018b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018b2c:	460d      	mov	r5, r1
 8018b2e:	4607      	mov	r7, r0
 8018b30:	4611      	mov	r1, r2
 8018b32:	4628      	mov	r0, r5
 8018b34:	4614      	mov	r4, r2
 8018b36:	f7ff ffdd 	bl	8018af4 <__mcmp>
 8018b3a:	1e06      	subs	r6, r0, #0
 8018b3c:	d108      	bne.n	8018b50 <__mdiff+0x28>
 8018b3e:	4631      	mov	r1, r6
 8018b40:	4638      	mov	r0, r7
 8018b42:	f7ff fd83 	bl	801864c <_Balloc>
 8018b46:	2301      	movs	r3, #1
 8018b48:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8018b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018b50:	bfa4      	itt	ge
 8018b52:	4623      	movge	r3, r4
 8018b54:	462c      	movge	r4, r5
 8018b56:	4638      	mov	r0, r7
 8018b58:	6861      	ldr	r1, [r4, #4]
 8018b5a:	bfa6      	itte	ge
 8018b5c:	461d      	movge	r5, r3
 8018b5e:	2600      	movge	r6, #0
 8018b60:	2601      	movlt	r6, #1
 8018b62:	f7ff fd73 	bl	801864c <_Balloc>
 8018b66:	692b      	ldr	r3, [r5, #16]
 8018b68:	60c6      	str	r6, [r0, #12]
 8018b6a:	6926      	ldr	r6, [r4, #16]
 8018b6c:	f105 0914 	add.w	r9, r5, #20
 8018b70:	f104 0214 	add.w	r2, r4, #20
 8018b74:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8018b78:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8018b7c:	f100 0514 	add.w	r5, r0, #20
 8018b80:	f04f 0e00 	mov.w	lr, #0
 8018b84:	f852 ab04 	ldr.w	sl, [r2], #4
 8018b88:	f859 4b04 	ldr.w	r4, [r9], #4
 8018b8c:	fa1e f18a 	uxtah	r1, lr, sl
 8018b90:	b2a3      	uxth	r3, r4
 8018b92:	1ac9      	subs	r1, r1, r3
 8018b94:	0c23      	lsrs	r3, r4, #16
 8018b96:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8018b9a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8018b9e:	b289      	uxth	r1, r1
 8018ba0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8018ba4:	45c8      	cmp	r8, r9
 8018ba6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8018baa:	4694      	mov	ip, r2
 8018bac:	f845 3b04 	str.w	r3, [r5], #4
 8018bb0:	d8e8      	bhi.n	8018b84 <__mdiff+0x5c>
 8018bb2:	45bc      	cmp	ip, r7
 8018bb4:	d304      	bcc.n	8018bc0 <__mdiff+0x98>
 8018bb6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8018bba:	b183      	cbz	r3, 8018bde <__mdiff+0xb6>
 8018bbc:	6106      	str	r6, [r0, #16]
 8018bbe:	e7c5      	b.n	8018b4c <__mdiff+0x24>
 8018bc0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8018bc4:	fa1e f381 	uxtah	r3, lr, r1
 8018bc8:	141a      	asrs	r2, r3, #16
 8018bca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018bce:	b29b      	uxth	r3, r3
 8018bd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018bd4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8018bd8:	f845 3b04 	str.w	r3, [r5], #4
 8018bdc:	e7e9      	b.n	8018bb2 <__mdiff+0x8a>
 8018bde:	3e01      	subs	r6, #1
 8018be0:	e7e9      	b.n	8018bb6 <__mdiff+0x8e>
	...

08018be4 <__ulp>:
 8018be4:	4b12      	ldr	r3, [pc, #72]	; (8018c30 <__ulp+0x4c>)
 8018be6:	ee10 2a90 	vmov	r2, s1
 8018bea:	401a      	ands	r2, r3
 8018bec:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8018bf0:	2b00      	cmp	r3, #0
 8018bf2:	dd04      	ble.n	8018bfe <__ulp+0x1a>
 8018bf4:	2000      	movs	r0, #0
 8018bf6:	4619      	mov	r1, r3
 8018bf8:	ec41 0b10 	vmov	d0, r0, r1
 8018bfc:	4770      	bx	lr
 8018bfe:	425b      	negs	r3, r3
 8018c00:	151b      	asrs	r3, r3, #20
 8018c02:	2b13      	cmp	r3, #19
 8018c04:	f04f 0000 	mov.w	r0, #0
 8018c08:	f04f 0100 	mov.w	r1, #0
 8018c0c:	dc04      	bgt.n	8018c18 <__ulp+0x34>
 8018c0e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8018c12:	fa42 f103 	asr.w	r1, r2, r3
 8018c16:	e7ef      	b.n	8018bf8 <__ulp+0x14>
 8018c18:	3b14      	subs	r3, #20
 8018c1a:	2b1e      	cmp	r3, #30
 8018c1c:	f04f 0201 	mov.w	r2, #1
 8018c20:	bfda      	itte	le
 8018c22:	f1c3 031f 	rsble	r3, r3, #31
 8018c26:	fa02 f303 	lslle.w	r3, r2, r3
 8018c2a:	4613      	movgt	r3, r2
 8018c2c:	4618      	mov	r0, r3
 8018c2e:	e7e3      	b.n	8018bf8 <__ulp+0x14>
 8018c30:	7ff00000 	.word	0x7ff00000

08018c34 <__b2d>:
 8018c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c36:	6905      	ldr	r5, [r0, #16]
 8018c38:	f100 0714 	add.w	r7, r0, #20
 8018c3c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8018c40:	1f2e      	subs	r6, r5, #4
 8018c42:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8018c46:	4620      	mov	r0, r4
 8018c48:	f7ff fdc4 	bl	80187d4 <__hi0bits>
 8018c4c:	f1c0 0320 	rsb	r3, r0, #32
 8018c50:	280a      	cmp	r0, #10
 8018c52:	600b      	str	r3, [r1, #0]
 8018c54:	f8df c074 	ldr.w	ip, [pc, #116]	; 8018ccc <__b2d+0x98>
 8018c58:	dc14      	bgt.n	8018c84 <__b2d+0x50>
 8018c5a:	f1c0 0e0b 	rsb	lr, r0, #11
 8018c5e:	fa24 f10e 	lsr.w	r1, r4, lr
 8018c62:	42b7      	cmp	r7, r6
 8018c64:	ea41 030c 	orr.w	r3, r1, ip
 8018c68:	bf34      	ite	cc
 8018c6a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018c6e:	2100      	movcs	r1, #0
 8018c70:	3015      	adds	r0, #21
 8018c72:	fa04 f000 	lsl.w	r0, r4, r0
 8018c76:	fa21 f10e 	lsr.w	r1, r1, lr
 8018c7a:	ea40 0201 	orr.w	r2, r0, r1
 8018c7e:	ec43 2b10 	vmov	d0, r2, r3
 8018c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018c84:	42b7      	cmp	r7, r6
 8018c86:	bf3a      	itte	cc
 8018c88:	f1a5 0608 	subcc.w	r6, r5, #8
 8018c8c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018c90:	2100      	movcs	r1, #0
 8018c92:	380b      	subs	r0, #11
 8018c94:	d015      	beq.n	8018cc2 <__b2d+0x8e>
 8018c96:	4084      	lsls	r4, r0
 8018c98:	f1c0 0520 	rsb	r5, r0, #32
 8018c9c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8018ca0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8018ca4:	42be      	cmp	r6, r7
 8018ca6:	fa21 fc05 	lsr.w	ip, r1, r5
 8018caa:	ea44 030c 	orr.w	r3, r4, ip
 8018cae:	bf8c      	ite	hi
 8018cb0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8018cb4:	2400      	movls	r4, #0
 8018cb6:	fa01 f000 	lsl.w	r0, r1, r0
 8018cba:	40ec      	lsrs	r4, r5
 8018cbc:	ea40 0204 	orr.w	r2, r0, r4
 8018cc0:	e7dd      	b.n	8018c7e <__b2d+0x4a>
 8018cc2:	ea44 030c 	orr.w	r3, r4, ip
 8018cc6:	460a      	mov	r2, r1
 8018cc8:	e7d9      	b.n	8018c7e <__b2d+0x4a>
 8018cca:	bf00      	nop
 8018ccc:	3ff00000 	.word	0x3ff00000

08018cd0 <__d2b>:
 8018cd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018cd4:	460e      	mov	r6, r1
 8018cd6:	2101      	movs	r1, #1
 8018cd8:	ec59 8b10 	vmov	r8, r9, d0
 8018cdc:	4615      	mov	r5, r2
 8018cde:	f7ff fcb5 	bl	801864c <_Balloc>
 8018ce2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8018ce6:	4607      	mov	r7, r0
 8018ce8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018cec:	bb34      	cbnz	r4, 8018d3c <__d2b+0x6c>
 8018cee:	9301      	str	r3, [sp, #4]
 8018cf0:	f1b8 0300 	subs.w	r3, r8, #0
 8018cf4:	d027      	beq.n	8018d46 <__d2b+0x76>
 8018cf6:	a802      	add	r0, sp, #8
 8018cf8:	f840 3d08 	str.w	r3, [r0, #-8]!
 8018cfc:	f7ff fd89 	bl	8018812 <__lo0bits>
 8018d00:	9900      	ldr	r1, [sp, #0]
 8018d02:	b1f0      	cbz	r0, 8018d42 <__d2b+0x72>
 8018d04:	9a01      	ldr	r2, [sp, #4]
 8018d06:	f1c0 0320 	rsb	r3, r0, #32
 8018d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8018d0e:	430b      	orrs	r3, r1
 8018d10:	40c2      	lsrs	r2, r0
 8018d12:	617b      	str	r3, [r7, #20]
 8018d14:	9201      	str	r2, [sp, #4]
 8018d16:	9b01      	ldr	r3, [sp, #4]
 8018d18:	61bb      	str	r3, [r7, #24]
 8018d1a:	2b00      	cmp	r3, #0
 8018d1c:	bf14      	ite	ne
 8018d1e:	2102      	movne	r1, #2
 8018d20:	2101      	moveq	r1, #1
 8018d22:	6139      	str	r1, [r7, #16]
 8018d24:	b1c4      	cbz	r4, 8018d58 <__d2b+0x88>
 8018d26:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8018d2a:	4404      	add	r4, r0
 8018d2c:	6034      	str	r4, [r6, #0]
 8018d2e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018d32:	6028      	str	r0, [r5, #0]
 8018d34:	4638      	mov	r0, r7
 8018d36:	b003      	add	sp, #12
 8018d38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018d3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018d40:	e7d5      	b.n	8018cee <__d2b+0x1e>
 8018d42:	6179      	str	r1, [r7, #20]
 8018d44:	e7e7      	b.n	8018d16 <__d2b+0x46>
 8018d46:	a801      	add	r0, sp, #4
 8018d48:	f7ff fd63 	bl	8018812 <__lo0bits>
 8018d4c:	9b01      	ldr	r3, [sp, #4]
 8018d4e:	617b      	str	r3, [r7, #20]
 8018d50:	2101      	movs	r1, #1
 8018d52:	6139      	str	r1, [r7, #16]
 8018d54:	3020      	adds	r0, #32
 8018d56:	e7e5      	b.n	8018d24 <__d2b+0x54>
 8018d58:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8018d5c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018d60:	6030      	str	r0, [r6, #0]
 8018d62:	6918      	ldr	r0, [r3, #16]
 8018d64:	f7ff fd36 	bl	80187d4 <__hi0bits>
 8018d68:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8018d6c:	e7e1      	b.n	8018d32 <__d2b+0x62>

08018d6e <__ratio>:
 8018d6e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d72:	4688      	mov	r8, r1
 8018d74:	4669      	mov	r1, sp
 8018d76:	4681      	mov	r9, r0
 8018d78:	f7ff ff5c 	bl	8018c34 <__b2d>
 8018d7c:	a901      	add	r1, sp, #4
 8018d7e:	4640      	mov	r0, r8
 8018d80:	ec57 6b10 	vmov	r6, r7, d0
 8018d84:	f7ff ff56 	bl	8018c34 <__b2d>
 8018d88:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018d8c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018d90:	eba3 0c02 	sub.w	ip, r3, r2
 8018d94:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018d98:	1a9b      	subs	r3, r3, r2
 8018d9a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8018d9e:	ec5b ab10 	vmov	sl, fp, d0
 8018da2:	2b00      	cmp	r3, #0
 8018da4:	bfce      	itee	gt
 8018da6:	463a      	movgt	r2, r7
 8018da8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018dac:	465a      	movle	r2, fp
 8018dae:	4659      	mov	r1, fp
 8018db0:	463d      	mov	r5, r7
 8018db2:	bfd4      	ite	le
 8018db4:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8018db8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8018dbc:	4630      	mov	r0, r6
 8018dbe:	ee10 2a10 	vmov	r2, s0
 8018dc2:	460b      	mov	r3, r1
 8018dc4:	4629      	mov	r1, r5
 8018dc6:	f7e7 fd41 	bl	800084c <__aeabi_ddiv>
 8018dca:	ec41 0b10 	vmov	d0, r0, r1
 8018dce:	b003      	add	sp, #12
 8018dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018dd4 <__copybits>:
 8018dd4:	3901      	subs	r1, #1
 8018dd6:	b510      	push	{r4, lr}
 8018dd8:	1149      	asrs	r1, r1, #5
 8018dda:	6914      	ldr	r4, [r2, #16]
 8018ddc:	3101      	adds	r1, #1
 8018dde:	f102 0314 	add.w	r3, r2, #20
 8018de2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018de6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018dea:	42a3      	cmp	r3, r4
 8018dec:	4602      	mov	r2, r0
 8018dee:	d303      	bcc.n	8018df8 <__copybits+0x24>
 8018df0:	2300      	movs	r3, #0
 8018df2:	428a      	cmp	r2, r1
 8018df4:	d305      	bcc.n	8018e02 <__copybits+0x2e>
 8018df6:	bd10      	pop	{r4, pc}
 8018df8:	f853 2b04 	ldr.w	r2, [r3], #4
 8018dfc:	f840 2b04 	str.w	r2, [r0], #4
 8018e00:	e7f3      	b.n	8018dea <__copybits+0x16>
 8018e02:	f842 3b04 	str.w	r3, [r2], #4
 8018e06:	e7f4      	b.n	8018df2 <__copybits+0x1e>

08018e08 <__any_on>:
 8018e08:	f100 0214 	add.w	r2, r0, #20
 8018e0c:	6900      	ldr	r0, [r0, #16]
 8018e0e:	114b      	asrs	r3, r1, #5
 8018e10:	4298      	cmp	r0, r3
 8018e12:	b510      	push	{r4, lr}
 8018e14:	db11      	blt.n	8018e3a <__any_on+0x32>
 8018e16:	dd0a      	ble.n	8018e2e <__any_on+0x26>
 8018e18:	f011 011f 	ands.w	r1, r1, #31
 8018e1c:	d007      	beq.n	8018e2e <__any_on+0x26>
 8018e1e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018e22:	fa24 f001 	lsr.w	r0, r4, r1
 8018e26:	fa00 f101 	lsl.w	r1, r0, r1
 8018e2a:	428c      	cmp	r4, r1
 8018e2c:	d10b      	bne.n	8018e46 <__any_on+0x3e>
 8018e2e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018e32:	4293      	cmp	r3, r2
 8018e34:	d803      	bhi.n	8018e3e <__any_on+0x36>
 8018e36:	2000      	movs	r0, #0
 8018e38:	bd10      	pop	{r4, pc}
 8018e3a:	4603      	mov	r3, r0
 8018e3c:	e7f7      	b.n	8018e2e <__any_on+0x26>
 8018e3e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018e42:	2900      	cmp	r1, #0
 8018e44:	d0f5      	beq.n	8018e32 <__any_on+0x2a>
 8018e46:	2001      	movs	r0, #1
 8018e48:	e7f6      	b.n	8018e38 <__any_on+0x30>

08018e4a <_calloc_r>:
 8018e4a:	b538      	push	{r3, r4, r5, lr}
 8018e4c:	fb02 f401 	mul.w	r4, r2, r1
 8018e50:	4621      	mov	r1, r4
 8018e52:	f7fc fca7 	bl	80157a4 <_malloc_r>
 8018e56:	4605      	mov	r5, r0
 8018e58:	b118      	cbz	r0, 8018e62 <_calloc_r+0x18>
 8018e5a:	4622      	mov	r2, r4
 8018e5c:	2100      	movs	r1, #0
 8018e5e:	f7fc fc4b 	bl	80156f8 <memset>
 8018e62:	4628      	mov	r0, r5
 8018e64:	bd38      	pop	{r3, r4, r5, pc}

08018e66 <__ssputs_r>:
 8018e66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018e6a:	688e      	ldr	r6, [r1, #8]
 8018e6c:	429e      	cmp	r6, r3
 8018e6e:	4682      	mov	sl, r0
 8018e70:	460c      	mov	r4, r1
 8018e72:	4690      	mov	r8, r2
 8018e74:	4699      	mov	r9, r3
 8018e76:	d837      	bhi.n	8018ee8 <__ssputs_r+0x82>
 8018e78:	898a      	ldrh	r2, [r1, #12]
 8018e7a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018e7e:	d031      	beq.n	8018ee4 <__ssputs_r+0x7e>
 8018e80:	6825      	ldr	r5, [r4, #0]
 8018e82:	6909      	ldr	r1, [r1, #16]
 8018e84:	1a6f      	subs	r7, r5, r1
 8018e86:	6965      	ldr	r5, [r4, #20]
 8018e88:	2302      	movs	r3, #2
 8018e8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018e8e:	fb95 f5f3 	sdiv	r5, r5, r3
 8018e92:	f109 0301 	add.w	r3, r9, #1
 8018e96:	443b      	add	r3, r7
 8018e98:	429d      	cmp	r5, r3
 8018e9a:	bf38      	it	cc
 8018e9c:	461d      	movcc	r5, r3
 8018e9e:	0553      	lsls	r3, r2, #21
 8018ea0:	d530      	bpl.n	8018f04 <__ssputs_r+0x9e>
 8018ea2:	4629      	mov	r1, r5
 8018ea4:	f7fc fc7e 	bl	80157a4 <_malloc_r>
 8018ea8:	4606      	mov	r6, r0
 8018eaa:	b950      	cbnz	r0, 8018ec2 <__ssputs_r+0x5c>
 8018eac:	230c      	movs	r3, #12
 8018eae:	f8ca 3000 	str.w	r3, [sl]
 8018eb2:	89a3      	ldrh	r3, [r4, #12]
 8018eb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018eb8:	81a3      	strh	r3, [r4, #12]
 8018eba:	f04f 30ff 	mov.w	r0, #4294967295
 8018ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018ec2:	463a      	mov	r2, r7
 8018ec4:	6921      	ldr	r1, [r4, #16]
 8018ec6:	f7fc fbf3 	bl	80156b0 <memcpy>
 8018eca:	89a3      	ldrh	r3, [r4, #12]
 8018ecc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018ed4:	81a3      	strh	r3, [r4, #12]
 8018ed6:	6126      	str	r6, [r4, #16]
 8018ed8:	6165      	str	r5, [r4, #20]
 8018eda:	443e      	add	r6, r7
 8018edc:	1bed      	subs	r5, r5, r7
 8018ede:	6026      	str	r6, [r4, #0]
 8018ee0:	60a5      	str	r5, [r4, #8]
 8018ee2:	464e      	mov	r6, r9
 8018ee4:	454e      	cmp	r6, r9
 8018ee6:	d900      	bls.n	8018eea <__ssputs_r+0x84>
 8018ee8:	464e      	mov	r6, r9
 8018eea:	4632      	mov	r2, r6
 8018eec:	4641      	mov	r1, r8
 8018eee:	6820      	ldr	r0, [r4, #0]
 8018ef0:	f7fc fbe9 	bl	80156c6 <memmove>
 8018ef4:	68a3      	ldr	r3, [r4, #8]
 8018ef6:	1b9b      	subs	r3, r3, r6
 8018ef8:	60a3      	str	r3, [r4, #8]
 8018efa:	6823      	ldr	r3, [r4, #0]
 8018efc:	441e      	add	r6, r3
 8018efe:	6026      	str	r6, [r4, #0]
 8018f00:	2000      	movs	r0, #0
 8018f02:	e7dc      	b.n	8018ebe <__ssputs_r+0x58>
 8018f04:	462a      	mov	r2, r5
 8018f06:	f000 f920 	bl	801914a <_realloc_r>
 8018f0a:	4606      	mov	r6, r0
 8018f0c:	2800      	cmp	r0, #0
 8018f0e:	d1e2      	bne.n	8018ed6 <__ssputs_r+0x70>
 8018f10:	6921      	ldr	r1, [r4, #16]
 8018f12:	4650      	mov	r0, sl
 8018f14:	f7fc fbf8 	bl	8015708 <_free_r>
 8018f18:	e7c8      	b.n	8018eac <__ssputs_r+0x46>
	...

08018f1c <_svfiprintf_r>:
 8018f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f20:	461d      	mov	r5, r3
 8018f22:	898b      	ldrh	r3, [r1, #12]
 8018f24:	061f      	lsls	r7, r3, #24
 8018f26:	b09d      	sub	sp, #116	; 0x74
 8018f28:	4680      	mov	r8, r0
 8018f2a:	460c      	mov	r4, r1
 8018f2c:	4616      	mov	r6, r2
 8018f2e:	d50f      	bpl.n	8018f50 <_svfiprintf_r+0x34>
 8018f30:	690b      	ldr	r3, [r1, #16]
 8018f32:	b96b      	cbnz	r3, 8018f50 <_svfiprintf_r+0x34>
 8018f34:	2140      	movs	r1, #64	; 0x40
 8018f36:	f7fc fc35 	bl	80157a4 <_malloc_r>
 8018f3a:	6020      	str	r0, [r4, #0]
 8018f3c:	6120      	str	r0, [r4, #16]
 8018f3e:	b928      	cbnz	r0, 8018f4c <_svfiprintf_r+0x30>
 8018f40:	230c      	movs	r3, #12
 8018f42:	f8c8 3000 	str.w	r3, [r8]
 8018f46:	f04f 30ff 	mov.w	r0, #4294967295
 8018f4a:	e0c8      	b.n	80190de <_svfiprintf_r+0x1c2>
 8018f4c:	2340      	movs	r3, #64	; 0x40
 8018f4e:	6163      	str	r3, [r4, #20]
 8018f50:	2300      	movs	r3, #0
 8018f52:	9309      	str	r3, [sp, #36]	; 0x24
 8018f54:	2320      	movs	r3, #32
 8018f56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018f5a:	2330      	movs	r3, #48	; 0x30
 8018f5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018f60:	9503      	str	r5, [sp, #12]
 8018f62:	f04f 0b01 	mov.w	fp, #1
 8018f66:	4637      	mov	r7, r6
 8018f68:	463d      	mov	r5, r7
 8018f6a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8018f6e:	b10b      	cbz	r3, 8018f74 <_svfiprintf_r+0x58>
 8018f70:	2b25      	cmp	r3, #37	; 0x25
 8018f72:	d13e      	bne.n	8018ff2 <_svfiprintf_r+0xd6>
 8018f74:	ebb7 0a06 	subs.w	sl, r7, r6
 8018f78:	d00b      	beq.n	8018f92 <_svfiprintf_r+0x76>
 8018f7a:	4653      	mov	r3, sl
 8018f7c:	4632      	mov	r2, r6
 8018f7e:	4621      	mov	r1, r4
 8018f80:	4640      	mov	r0, r8
 8018f82:	f7ff ff70 	bl	8018e66 <__ssputs_r>
 8018f86:	3001      	adds	r0, #1
 8018f88:	f000 80a4 	beq.w	80190d4 <_svfiprintf_r+0x1b8>
 8018f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018f8e:	4453      	add	r3, sl
 8018f90:	9309      	str	r3, [sp, #36]	; 0x24
 8018f92:	783b      	ldrb	r3, [r7, #0]
 8018f94:	2b00      	cmp	r3, #0
 8018f96:	f000 809d 	beq.w	80190d4 <_svfiprintf_r+0x1b8>
 8018f9a:	2300      	movs	r3, #0
 8018f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8018fa0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018fa4:	9304      	str	r3, [sp, #16]
 8018fa6:	9307      	str	r3, [sp, #28]
 8018fa8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018fac:	931a      	str	r3, [sp, #104]	; 0x68
 8018fae:	462f      	mov	r7, r5
 8018fb0:	2205      	movs	r2, #5
 8018fb2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8018fb6:	4850      	ldr	r0, [pc, #320]	; (80190f8 <_svfiprintf_r+0x1dc>)
 8018fb8:	f7e7 f912 	bl	80001e0 <memchr>
 8018fbc:	9b04      	ldr	r3, [sp, #16]
 8018fbe:	b9d0      	cbnz	r0, 8018ff6 <_svfiprintf_r+0xda>
 8018fc0:	06d9      	lsls	r1, r3, #27
 8018fc2:	bf44      	itt	mi
 8018fc4:	2220      	movmi	r2, #32
 8018fc6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018fca:	071a      	lsls	r2, r3, #28
 8018fcc:	bf44      	itt	mi
 8018fce:	222b      	movmi	r2, #43	; 0x2b
 8018fd0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018fd4:	782a      	ldrb	r2, [r5, #0]
 8018fd6:	2a2a      	cmp	r2, #42	; 0x2a
 8018fd8:	d015      	beq.n	8019006 <_svfiprintf_r+0xea>
 8018fda:	9a07      	ldr	r2, [sp, #28]
 8018fdc:	462f      	mov	r7, r5
 8018fde:	2000      	movs	r0, #0
 8018fe0:	250a      	movs	r5, #10
 8018fe2:	4639      	mov	r1, r7
 8018fe4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018fe8:	3b30      	subs	r3, #48	; 0x30
 8018fea:	2b09      	cmp	r3, #9
 8018fec:	d94d      	bls.n	801908a <_svfiprintf_r+0x16e>
 8018fee:	b1b8      	cbz	r0, 8019020 <_svfiprintf_r+0x104>
 8018ff0:	e00f      	b.n	8019012 <_svfiprintf_r+0xf6>
 8018ff2:	462f      	mov	r7, r5
 8018ff4:	e7b8      	b.n	8018f68 <_svfiprintf_r+0x4c>
 8018ff6:	4a40      	ldr	r2, [pc, #256]	; (80190f8 <_svfiprintf_r+0x1dc>)
 8018ff8:	1a80      	subs	r0, r0, r2
 8018ffa:	fa0b f000 	lsl.w	r0, fp, r0
 8018ffe:	4318      	orrs	r0, r3
 8019000:	9004      	str	r0, [sp, #16]
 8019002:	463d      	mov	r5, r7
 8019004:	e7d3      	b.n	8018fae <_svfiprintf_r+0x92>
 8019006:	9a03      	ldr	r2, [sp, #12]
 8019008:	1d11      	adds	r1, r2, #4
 801900a:	6812      	ldr	r2, [r2, #0]
 801900c:	9103      	str	r1, [sp, #12]
 801900e:	2a00      	cmp	r2, #0
 8019010:	db01      	blt.n	8019016 <_svfiprintf_r+0xfa>
 8019012:	9207      	str	r2, [sp, #28]
 8019014:	e004      	b.n	8019020 <_svfiprintf_r+0x104>
 8019016:	4252      	negs	r2, r2
 8019018:	f043 0302 	orr.w	r3, r3, #2
 801901c:	9207      	str	r2, [sp, #28]
 801901e:	9304      	str	r3, [sp, #16]
 8019020:	783b      	ldrb	r3, [r7, #0]
 8019022:	2b2e      	cmp	r3, #46	; 0x2e
 8019024:	d10c      	bne.n	8019040 <_svfiprintf_r+0x124>
 8019026:	787b      	ldrb	r3, [r7, #1]
 8019028:	2b2a      	cmp	r3, #42	; 0x2a
 801902a:	d133      	bne.n	8019094 <_svfiprintf_r+0x178>
 801902c:	9b03      	ldr	r3, [sp, #12]
 801902e:	1d1a      	adds	r2, r3, #4
 8019030:	681b      	ldr	r3, [r3, #0]
 8019032:	9203      	str	r2, [sp, #12]
 8019034:	2b00      	cmp	r3, #0
 8019036:	bfb8      	it	lt
 8019038:	f04f 33ff 	movlt.w	r3, #4294967295
 801903c:	3702      	adds	r7, #2
 801903e:	9305      	str	r3, [sp, #20]
 8019040:	4d2e      	ldr	r5, [pc, #184]	; (80190fc <_svfiprintf_r+0x1e0>)
 8019042:	7839      	ldrb	r1, [r7, #0]
 8019044:	2203      	movs	r2, #3
 8019046:	4628      	mov	r0, r5
 8019048:	f7e7 f8ca 	bl	80001e0 <memchr>
 801904c:	b138      	cbz	r0, 801905e <_svfiprintf_r+0x142>
 801904e:	2340      	movs	r3, #64	; 0x40
 8019050:	1b40      	subs	r0, r0, r5
 8019052:	fa03 f000 	lsl.w	r0, r3, r0
 8019056:	9b04      	ldr	r3, [sp, #16]
 8019058:	4303      	orrs	r3, r0
 801905a:	3701      	adds	r7, #1
 801905c:	9304      	str	r3, [sp, #16]
 801905e:	7839      	ldrb	r1, [r7, #0]
 8019060:	4827      	ldr	r0, [pc, #156]	; (8019100 <_svfiprintf_r+0x1e4>)
 8019062:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019066:	2206      	movs	r2, #6
 8019068:	1c7e      	adds	r6, r7, #1
 801906a:	f7e7 f8b9 	bl	80001e0 <memchr>
 801906e:	2800      	cmp	r0, #0
 8019070:	d038      	beq.n	80190e4 <_svfiprintf_r+0x1c8>
 8019072:	4b24      	ldr	r3, [pc, #144]	; (8019104 <_svfiprintf_r+0x1e8>)
 8019074:	bb13      	cbnz	r3, 80190bc <_svfiprintf_r+0x1a0>
 8019076:	9b03      	ldr	r3, [sp, #12]
 8019078:	3307      	adds	r3, #7
 801907a:	f023 0307 	bic.w	r3, r3, #7
 801907e:	3308      	adds	r3, #8
 8019080:	9303      	str	r3, [sp, #12]
 8019082:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019084:	444b      	add	r3, r9
 8019086:	9309      	str	r3, [sp, #36]	; 0x24
 8019088:	e76d      	b.n	8018f66 <_svfiprintf_r+0x4a>
 801908a:	fb05 3202 	mla	r2, r5, r2, r3
 801908e:	2001      	movs	r0, #1
 8019090:	460f      	mov	r7, r1
 8019092:	e7a6      	b.n	8018fe2 <_svfiprintf_r+0xc6>
 8019094:	2300      	movs	r3, #0
 8019096:	3701      	adds	r7, #1
 8019098:	9305      	str	r3, [sp, #20]
 801909a:	4619      	mov	r1, r3
 801909c:	250a      	movs	r5, #10
 801909e:	4638      	mov	r0, r7
 80190a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80190a4:	3a30      	subs	r2, #48	; 0x30
 80190a6:	2a09      	cmp	r2, #9
 80190a8:	d903      	bls.n	80190b2 <_svfiprintf_r+0x196>
 80190aa:	2b00      	cmp	r3, #0
 80190ac:	d0c8      	beq.n	8019040 <_svfiprintf_r+0x124>
 80190ae:	9105      	str	r1, [sp, #20]
 80190b0:	e7c6      	b.n	8019040 <_svfiprintf_r+0x124>
 80190b2:	fb05 2101 	mla	r1, r5, r1, r2
 80190b6:	2301      	movs	r3, #1
 80190b8:	4607      	mov	r7, r0
 80190ba:	e7f0      	b.n	801909e <_svfiprintf_r+0x182>
 80190bc:	ab03      	add	r3, sp, #12
 80190be:	9300      	str	r3, [sp, #0]
 80190c0:	4622      	mov	r2, r4
 80190c2:	4b11      	ldr	r3, [pc, #68]	; (8019108 <_svfiprintf_r+0x1ec>)
 80190c4:	a904      	add	r1, sp, #16
 80190c6:	4640      	mov	r0, r8
 80190c8:	f7fc fc5a 	bl	8015980 <_printf_float>
 80190cc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80190d0:	4681      	mov	r9, r0
 80190d2:	d1d6      	bne.n	8019082 <_svfiprintf_r+0x166>
 80190d4:	89a3      	ldrh	r3, [r4, #12]
 80190d6:	065b      	lsls	r3, r3, #25
 80190d8:	f53f af35 	bmi.w	8018f46 <_svfiprintf_r+0x2a>
 80190dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80190de:	b01d      	add	sp, #116	; 0x74
 80190e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190e4:	ab03      	add	r3, sp, #12
 80190e6:	9300      	str	r3, [sp, #0]
 80190e8:	4622      	mov	r2, r4
 80190ea:	4b07      	ldr	r3, [pc, #28]	; (8019108 <_svfiprintf_r+0x1ec>)
 80190ec:	a904      	add	r1, sp, #16
 80190ee:	4640      	mov	r0, r8
 80190f0:	f7fc fefc 	bl	8015eec <_printf_i>
 80190f4:	e7ea      	b.n	80190cc <_svfiprintf_r+0x1b0>
 80190f6:	bf00      	nop
 80190f8:	0801b2bc 	.word	0x0801b2bc
 80190fc:	0801b2c2 	.word	0x0801b2c2
 8019100:	0801b2c6 	.word	0x0801b2c6
 8019104:	08015981 	.word	0x08015981
 8019108:	08018e67 	.word	0x08018e67

0801910c <strncmp>:
 801910c:	b510      	push	{r4, lr}
 801910e:	b16a      	cbz	r2, 801912c <strncmp+0x20>
 8019110:	3901      	subs	r1, #1
 8019112:	1884      	adds	r4, r0, r2
 8019114:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019118:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801911c:	4293      	cmp	r3, r2
 801911e:	d103      	bne.n	8019128 <strncmp+0x1c>
 8019120:	42a0      	cmp	r0, r4
 8019122:	d001      	beq.n	8019128 <strncmp+0x1c>
 8019124:	2b00      	cmp	r3, #0
 8019126:	d1f5      	bne.n	8019114 <strncmp+0x8>
 8019128:	1a98      	subs	r0, r3, r2
 801912a:	bd10      	pop	{r4, pc}
 801912c:	4610      	mov	r0, r2
 801912e:	e7fc      	b.n	801912a <strncmp+0x1e>

08019130 <__ascii_wctomb>:
 8019130:	b149      	cbz	r1, 8019146 <__ascii_wctomb+0x16>
 8019132:	2aff      	cmp	r2, #255	; 0xff
 8019134:	bf85      	ittet	hi
 8019136:	238a      	movhi	r3, #138	; 0x8a
 8019138:	6003      	strhi	r3, [r0, #0]
 801913a:	700a      	strbls	r2, [r1, #0]
 801913c:	f04f 30ff 	movhi.w	r0, #4294967295
 8019140:	bf98      	it	ls
 8019142:	2001      	movls	r0, #1
 8019144:	4770      	bx	lr
 8019146:	4608      	mov	r0, r1
 8019148:	4770      	bx	lr

0801914a <_realloc_r>:
 801914a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801914c:	4607      	mov	r7, r0
 801914e:	4614      	mov	r4, r2
 8019150:	460e      	mov	r6, r1
 8019152:	b921      	cbnz	r1, 801915e <_realloc_r+0x14>
 8019154:	4611      	mov	r1, r2
 8019156:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801915a:	f7fc bb23 	b.w	80157a4 <_malloc_r>
 801915e:	b922      	cbnz	r2, 801916a <_realloc_r+0x20>
 8019160:	f7fc fad2 	bl	8015708 <_free_r>
 8019164:	4625      	mov	r5, r4
 8019166:	4628      	mov	r0, r5
 8019168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801916a:	f000 f814 	bl	8019196 <_malloc_usable_size_r>
 801916e:	42a0      	cmp	r0, r4
 8019170:	d20f      	bcs.n	8019192 <_realloc_r+0x48>
 8019172:	4621      	mov	r1, r4
 8019174:	4638      	mov	r0, r7
 8019176:	f7fc fb15 	bl	80157a4 <_malloc_r>
 801917a:	4605      	mov	r5, r0
 801917c:	2800      	cmp	r0, #0
 801917e:	d0f2      	beq.n	8019166 <_realloc_r+0x1c>
 8019180:	4631      	mov	r1, r6
 8019182:	4622      	mov	r2, r4
 8019184:	f7fc fa94 	bl	80156b0 <memcpy>
 8019188:	4631      	mov	r1, r6
 801918a:	4638      	mov	r0, r7
 801918c:	f7fc fabc 	bl	8015708 <_free_r>
 8019190:	e7e9      	b.n	8019166 <_realloc_r+0x1c>
 8019192:	4635      	mov	r5, r6
 8019194:	e7e7      	b.n	8019166 <_realloc_r+0x1c>

08019196 <_malloc_usable_size_r>:
 8019196:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801919a:	1f18      	subs	r0, r3, #4
 801919c:	2b00      	cmp	r3, #0
 801919e:	bfbc      	itt	lt
 80191a0:	580b      	ldrlt	r3, [r1, r0]
 80191a2:	18c0      	addlt	r0, r0, r3
 80191a4:	4770      	bx	lr
	...

080191a8 <ceil>:
 80191a8:	ec51 0b10 	vmov	r0, r1, d0
 80191ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80191b0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80191b4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80191b8:	2e13      	cmp	r6, #19
 80191ba:	460c      	mov	r4, r1
 80191bc:	ee10 5a10 	vmov	r5, s0
 80191c0:	4680      	mov	r8, r0
 80191c2:	dc30      	bgt.n	8019226 <ceil+0x7e>
 80191c4:	2e00      	cmp	r6, #0
 80191c6:	da12      	bge.n	80191ee <ceil+0x46>
 80191c8:	a333      	add	r3, pc, #204	; (adr r3, 8019298 <ceil+0xf0>)
 80191ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191ce:	f7e7 f85d 	bl	800028c <__adddf3>
 80191d2:	2200      	movs	r2, #0
 80191d4:	2300      	movs	r3, #0
 80191d6:	f7e7 fc9f 	bl	8000b18 <__aeabi_dcmpgt>
 80191da:	b128      	cbz	r0, 80191e8 <ceil+0x40>
 80191dc:	2c00      	cmp	r4, #0
 80191de:	db55      	blt.n	801928c <ceil+0xe4>
 80191e0:	432c      	orrs	r4, r5
 80191e2:	d057      	beq.n	8019294 <ceil+0xec>
 80191e4:	4c2e      	ldr	r4, [pc, #184]	; (80192a0 <ceil+0xf8>)
 80191e6:	2500      	movs	r5, #0
 80191e8:	4621      	mov	r1, r4
 80191ea:	4628      	mov	r0, r5
 80191ec:	e025      	b.n	801923a <ceil+0x92>
 80191ee:	4f2d      	ldr	r7, [pc, #180]	; (80192a4 <ceil+0xfc>)
 80191f0:	4137      	asrs	r7, r6
 80191f2:	ea01 0307 	and.w	r3, r1, r7
 80191f6:	4303      	orrs	r3, r0
 80191f8:	d01f      	beq.n	801923a <ceil+0x92>
 80191fa:	a327      	add	r3, pc, #156	; (adr r3, 8019298 <ceil+0xf0>)
 80191fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019200:	f7e7 f844 	bl	800028c <__adddf3>
 8019204:	2200      	movs	r2, #0
 8019206:	2300      	movs	r3, #0
 8019208:	f7e7 fc86 	bl	8000b18 <__aeabi_dcmpgt>
 801920c:	2800      	cmp	r0, #0
 801920e:	d0eb      	beq.n	80191e8 <ceil+0x40>
 8019210:	2c00      	cmp	r4, #0
 8019212:	bfc2      	ittt	gt
 8019214:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8019218:	fa43 f606 	asrgt.w	r6, r3, r6
 801921c:	19a4      	addgt	r4, r4, r6
 801921e:	ea24 0407 	bic.w	r4, r4, r7
 8019222:	2500      	movs	r5, #0
 8019224:	e7e0      	b.n	80191e8 <ceil+0x40>
 8019226:	2e33      	cmp	r6, #51	; 0x33
 8019228:	dd0b      	ble.n	8019242 <ceil+0x9a>
 801922a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801922e:	d104      	bne.n	801923a <ceil+0x92>
 8019230:	ee10 2a10 	vmov	r2, s0
 8019234:	460b      	mov	r3, r1
 8019236:	f7e7 f829 	bl	800028c <__adddf3>
 801923a:	ec41 0b10 	vmov	d0, r0, r1
 801923e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019242:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8019246:	f04f 33ff 	mov.w	r3, #4294967295
 801924a:	fa23 f707 	lsr.w	r7, r3, r7
 801924e:	4207      	tst	r7, r0
 8019250:	d0f3      	beq.n	801923a <ceil+0x92>
 8019252:	a311      	add	r3, pc, #68	; (adr r3, 8019298 <ceil+0xf0>)
 8019254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019258:	f7e7 f818 	bl	800028c <__adddf3>
 801925c:	2200      	movs	r2, #0
 801925e:	2300      	movs	r3, #0
 8019260:	f7e7 fc5a 	bl	8000b18 <__aeabi_dcmpgt>
 8019264:	2800      	cmp	r0, #0
 8019266:	d0bf      	beq.n	80191e8 <ceil+0x40>
 8019268:	2c00      	cmp	r4, #0
 801926a:	dd02      	ble.n	8019272 <ceil+0xca>
 801926c:	2e14      	cmp	r6, #20
 801926e:	d103      	bne.n	8019278 <ceil+0xd0>
 8019270:	3401      	adds	r4, #1
 8019272:	ea25 0507 	bic.w	r5, r5, r7
 8019276:	e7b7      	b.n	80191e8 <ceil+0x40>
 8019278:	2301      	movs	r3, #1
 801927a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801927e:	fa03 f606 	lsl.w	r6, r3, r6
 8019282:	4435      	add	r5, r6
 8019284:	4545      	cmp	r5, r8
 8019286:	bf38      	it	cc
 8019288:	18e4      	addcc	r4, r4, r3
 801928a:	e7f2      	b.n	8019272 <ceil+0xca>
 801928c:	2500      	movs	r5, #0
 801928e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8019292:	e7a9      	b.n	80191e8 <ceil+0x40>
 8019294:	4625      	mov	r5, r4
 8019296:	e7a7      	b.n	80191e8 <ceil+0x40>
 8019298:	8800759c 	.word	0x8800759c
 801929c:	7e37e43c 	.word	0x7e37e43c
 80192a0:	3ff00000 	.word	0x3ff00000
 80192a4:	000fffff 	.word	0x000fffff

080192a8 <cos>:
 80192a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80192aa:	ec51 0b10 	vmov	r0, r1, d0
 80192ae:	4a1e      	ldr	r2, [pc, #120]	; (8019328 <cos+0x80>)
 80192b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80192b4:	4293      	cmp	r3, r2
 80192b6:	dc06      	bgt.n	80192c6 <cos+0x1e>
 80192b8:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8019320 <cos+0x78>
 80192bc:	f000 fcec 	bl	8019c98 <__kernel_cos>
 80192c0:	ec51 0b10 	vmov	r0, r1, d0
 80192c4:	e007      	b.n	80192d6 <cos+0x2e>
 80192c6:	4a19      	ldr	r2, [pc, #100]	; (801932c <cos+0x84>)
 80192c8:	4293      	cmp	r3, r2
 80192ca:	dd09      	ble.n	80192e0 <cos+0x38>
 80192cc:	ee10 2a10 	vmov	r2, s0
 80192d0:	460b      	mov	r3, r1
 80192d2:	f7e6 ffd9 	bl	8000288 <__aeabi_dsub>
 80192d6:	ec41 0b10 	vmov	d0, r0, r1
 80192da:	b005      	add	sp, #20
 80192dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80192e0:	4668      	mov	r0, sp
 80192e2:	f000 fa35 	bl	8019750 <__ieee754_rem_pio2>
 80192e6:	f000 0003 	and.w	r0, r0, #3
 80192ea:	2801      	cmp	r0, #1
 80192ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 80192f0:	ed9d 0b00 	vldr	d0, [sp]
 80192f4:	d007      	beq.n	8019306 <cos+0x5e>
 80192f6:	2802      	cmp	r0, #2
 80192f8:	d00e      	beq.n	8019318 <cos+0x70>
 80192fa:	2800      	cmp	r0, #0
 80192fc:	d0de      	beq.n	80192bc <cos+0x14>
 80192fe:	2001      	movs	r0, #1
 8019300:	f001 f8d2 	bl	801a4a8 <__kernel_sin>
 8019304:	e7dc      	b.n	80192c0 <cos+0x18>
 8019306:	f001 f8cf 	bl	801a4a8 <__kernel_sin>
 801930a:	ec53 2b10 	vmov	r2, r3, d0
 801930e:	ee10 0a10 	vmov	r0, s0
 8019312:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8019316:	e7de      	b.n	80192d6 <cos+0x2e>
 8019318:	f000 fcbe 	bl	8019c98 <__kernel_cos>
 801931c:	e7f5      	b.n	801930a <cos+0x62>
 801931e:	bf00      	nop
	...
 8019328:	3fe921fb 	.word	0x3fe921fb
 801932c:	7fefffff 	.word	0x7fefffff

08019330 <round>:
 8019330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019332:	ec57 6b10 	vmov	r6, r7, d0
 8019336:	f3c7 500a 	ubfx	r0, r7, #20, #11
 801933a:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 801933e:	2c13      	cmp	r4, #19
 8019340:	463b      	mov	r3, r7
 8019342:	463d      	mov	r5, r7
 8019344:	dc17      	bgt.n	8019376 <round+0x46>
 8019346:	2c00      	cmp	r4, #0
 8019348:	da09      	bge.n	801935e <round+0x2e>
 801934a:	3401      	adds	r4, #1
 801934c:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8019350:	d103      	bne.n	801935a <round+0x2a>
 8019352:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8019356:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801935a:	2100      	movs	r1, #0
 801935c:	e02c      	b.n	80193b8 <round+0x88>
 801935e:	4a18      	ldr	r2, [pc, #96]	; (80193c0 <round+0x90>)
 8019360:	4122      	asrs	r2, r4
 8019362:	4217      	tst	r7, r2
 8019364:	d100      	bne.n	8019368 <round+0x38>
 8019366:	b19e      	cbz	r6, 8019390 <round+0x60>
 8019368:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801936c:	4123      	asrs	r3, r4
 801936e:	442b      	add	r3, r5
 8019370:	ea23 0302 	bic.w	r3, r3, r2
 8019374:	e7f1      	b.n	801935a <round+0x2a>
 8019376:	2c33      	cmp	r4, #51	; 0x33
 8019378:	dd0d      	ble.n	8019396 <round+0x66>
 801937a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 801937e:	d107      	bne.n	8019390 <round+0x60>
 8019380:	4630      	mov	r0, r6
 8019382:	4639      	mov	r1, r7
 8019384:	ee10 2a10 	vmov	r2, s0
 8019388:	f7e6 ff80 	bl	800028c <__adddf3>
 801938c:	4606      	mov	r6, r0
 801938e:	460f      	mov	r7, r1
 8019390:	ec47 6b10 	vmov	d0, r6, r7
 8019394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019396:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 801939a:	f04f 30ff 	mov.w	r0, #4294967295
 801939e:	40d0      	lsrs	r0, r2
 80193a0:	4206      	tst	r6, r0
 80193a2:	d0f5      	beq.n	8019390 <round+0x60>
 80193a4:	2201      	movs	r2, #1
 80193a6:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80193aa:	fa02 f404 	lsl.w	r4, r2, r4
 80193ae:	1931      	adds	r1, r6, r4
 80193b0:	bf28      	it	cs
 80193b2:	189b      	addcs	r3, r3, r2
 80193b4:	ea21 0100 	bic.w	r1, r1, r0
 80193b8:	461f      	mov	r7, r3
 80193ba:	460e      	mov	r6, r1
 80193bc:	e7e8      	b.n	8019390 <round+0x60>
 80193be:	bf00      	nop
 80193c0:	000fffff 	.word	0x000fffff
 80193c4:	00000000 	.word	0x00000000

080193c8 <sin>:
 80193c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80193ca:	ec51 0b10 	vmov	r0, r1, d0
 80193ce:	4a20      	ldr	r2, [pc, #128]	; (8019450 <sin+0x88>)
 80193d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80193d4:	4293      	cmp	r3, r2
 80193d6:	dc07      	bgt.n	80193e8 <sin+0x20>
 80193d8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8019448 <sin+0x80>
 80193dc:	2000      	movs	r0, #0
 80193de:	f001 f863 	bl	801a4a8 <__kernel_sin>
 80193e2:	ec51 0b10 	vmov	r0, r1, d0
 80193e6:	e007      	b.n	80193f8 <sin+0x30>
 80193e8:	4a1a      	ldr	r2, [pc, #104]	; (8019454 <sin+0x8c>)
 80193ea:	4293      	cmp	r3, r2
 80193ec:	dd09      	ble.n	8019402 <sin+0x3a>
 80193ee:	ee10 2a10 	vmov	r2, s0
 80193f2:	460b      	mov	r3, r1
 80193f4:	f7e6 ff48 	bl	8000288 <__aeabi_dsub>
 80193f8:	ec41 0b10 	vmov	d0, r0, r1
 80193fc:	b005      	add	sp, #20
 80193fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8019402:	4668      	mov	r0, sp
 8019404:	f000 f9a4 	bl	8019750 <__ieee754_rem_pio2>
 8019408:	f000 0003 	and.w	r0, r0, #3
 801940c:	2801      	cmp	r0, #1
 801940e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019412:	ed9d 0b00 	vldr	d0, [sp]
 8019416:	d004      	beq.n	8019422 <sin+0x5a>
 8019418:	2802      	cmp	r0, #2
 801941a:	d005      	beq.n	8019428 <sin+0x60>
 801941c:	b970      	cbnz	r0, 801943c <sin+0x74>
 801941e:	2001      	movs	r0, #1
 8019420:	e7dd      	b.n	80193de <sin+0x16>
 8019422:	f000 fc39 	bl	8019c98 <__kernel_cos>
 8019426:	e7dc      	b.n	80193e2 <sin+0x1a>
 8019428:	2001      	movs	r0, #1
 801942a:	f001 f83d 	bl	801a4a8 <__kernel_sin>
 801942e:	ec53 2b10 	vmov	r2, r3, d0
 8019432:	ee10 0a10 	vmov	r0, s0
 8019436:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801943a:	e7dd      	b.n	80193f8 <sin+0x30>
 801943c:	f000 fc2c 	bl	8019c98 <__kernel_cos>
 8019440:	e7f5      	b.n	801942e <sin+0x66>
 8019442:	bf00      	nop
 8019444:	f3af 8000 	nop.w
	...
 8019450:	3fe921fb 	.word	0x3fe921fb
 8019454:	7fefffff 	.word	0x7fefffff

08019458 <ceilf>:
 8019458:	ee10 3a10 	vmov	r3, s0
 801945c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8019460:	0dca      	lsrs	r2, r1, #23
 8019462:	3a7f      	subs	r2, #127	; 0x7f
 8019464:	2a16      	cmp	r2, #22
 8019466:	dc2a      	bgt.n	80194be <ceilf+0x66>
 8019468:	2a00      	cmp	r2, #0
 801946a:	da11      	bge.n	8019490 <ceilf+0x38>
 801946c:	eddf 7a18 	vldr	s15, [pc, #96]	; 80194d0 <ceilf+0x78>
 8019470:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019474:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801947c:	dd05      	ble.n	801948a <ceilf+0x32>
 801947e:	2b00      	cmp	r3, #0
 8019480:	db23      	blt.n	80194ca <ceilf+0x72>
 8019482:	2900      	cmp	r1, #0
 8019484:	bf18      	it	ne
 8019486:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 801948a:	ee00 3a10 	vmov	s0, r3
 801948e:	4770      	bx	lr
 8019490:	4910      	ldr	r1, [pc, #64]	; (80194d4 <ceilf+0x7c>)
 8019492:	4111      	asrs	r1, r2
 8019494:	420b      	tst	r3, r1
 8019496:	d0fa      	beq.n	801948e <ceilf+0x36>
 8019498:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80194d0 <ceilf+0x78>
 801949c:	ee30 0a27 	vadd.f32	s0, s0, s15
 80194a0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80194a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194a8:	ddef      	ble.n	801948a <ceilf+0x32>
 80194aa:	2b00      	cmp	r3, #0
 80194ac:	bfc2      	ittt	gt
 80194ae:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 80194b2:	fa40 f202 	asrgt.w	r2, r0, r2
 80194b6:	189b      	addgt	r3, r3, r2
 80194b8:	ea23 0301 	bic.w	r3, r3, r1
 80194bc:	e7e5      	b.n	801948a <ceilf+0x32>
 80194be:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80194c2:	d3e4      	bcc.n	801948e <ceilf+0x36>
 80194c4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80194c8:	4770      	bx	lr
 80194ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80194ce:	e7dc      	b.n	801948a <ceilf+0x32>
 80194d0:	7149f2ca 	.word	0x7149f2ca
 80194d4:	007fffff 	.word	0x007fffff

080194d8 <atan2>:
 80194d8:	f000 b85a 	b.w	8019590 <__ieee754_atan2>

080194dc <sqrt>:
 80194dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80194e0:	ed2d 8b02 	vpush	{d8}
 80194e4:	b08b      	sub	sp, #44	; 0x2c
 80194e6:	ec55 4b10 	vmov	r4, r5, d0
 80194ea:	f000 fb23 	bl	8019b34 <__ieee754_sqrt>
 80194ee:	4b26      	ldr	r3, [pc, #152]	; (8019588 <sqrt+0xac>)
 80194f0:	eeb0 8a40 	vmov.f32	s16, s0
 80194f4:	eef0 8a60 	vmov.f32	s17, s1
 80194f8:	f993 6000 	ldrsb.w	r6, [r3]
 80194fc:	1c73      	adds	r3, r6, #1
 80194fe:	d02a      	beq.n	8019556 <sqrt+0x7a>
 8019500:	4622      	mov	r2, r4
 8019502:	462b      	mov	r3, r5
 8019504:	4620      	mov	r0, r4
 8019506:	4629      	mov	r1, r5
 8019508:	f7e7 fb10 	bl	8000b2c <__aeabi_dcmpun>
 801950c:	4607      	mov	r7, r0
 801950e:	bb10      	cbnz	r0, 8019556 <sqrt+0x7a>
 8019510:	f04f 0800 	mov.w	r8, #0
 8019514:	f04f 0900 	mov.w	r9, #0
 8019518:	4642      	mov	r2, r8
 801951a:	464b      	mov	r3, r9
 801951c:	4620      	mov	r0, r4
 801951e:	4629      	mov	r1, r5
 8019520:	f7e7 fadc 	bl	8000adc <__aeabi_dcmplt>
 8019524:	b1b8      	cbz	r0, 8019556 <sqrt+0x7a>
 8019526:	2301      	movs	r3, #1
 8019528:	9300      	str	r3, [sp, #0]
 801952a:	4b18      	ldr	r3, [pc, #96]	; (801958c <sqrt+0xb0>)
 801952c:	9301      	str	r3, [sp, #4]
 801952e:	9708      	str	r7, [sp, #32]
 8019530:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8019534:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8019538:	b9b6      	cbnz	r6, 8019568 <sqrt+0x8c>
 801953a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 801953e:	4668      	mov	r0, sp
 8019540:	f001 fa9e 	bl	801aa80 <matherr>
 8019544:	b1d0      	cbz	r0, 801957c <sqrt+0xa0>
 8019546:	9b08      	ldr	r3, [sp, #32]
 8019548:	b11b      	cbz	r3, 8019552 <sqrt+0x76>
 801954a:	f7fc f877 	bl	801563c <__errno>
 801954e:	9b08      	ldr	r3, [sp, #32]
 8019550:	6003      	str	r3, [r0, #0]
 8019552:	ed9d 8b06 	vldr	d8, [sp, #24]
 8019556:	eeb0 0a48 	vmov.f32	s0, s16
 801955a:	eef0 0a68 	vmov.f32	s1, s17
 801955e:	b00b      	add	sp, #44	; 0x2c
 8019560:	ecbd 8b02 	vpop	{d8}
 8019564:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019568:	4642      	mov	r2, r8
 801956a:	464b      	mov	r3, r9
 801956c:	4640      	mov	r0, r8
 801956e:	4649      	mov	r1, r9
 8019570:	f7e7 f96c 	bl	800084c <__aeabi_ddiv>
 8019574:	2e02      	cmp	r6, #2
 8019576:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801957a:	d1e0      	bne.n	801953e <sqrt+0x62>
 801957c:	f7fc f85e 	bl	801563c <__errno>
 8019580:	2321      	movs	r3, #33	; 0x21
 8019582:	6003      	str	r3, [r0, #0]
 8019584:	e7df      	b.n	8019546 <sqrt+0x6a>
 8019586:	bf00      	nop
 8019588:	20000fdc 	.word	0x20000fdc
 801958c:	0801b3ce 	.word	0x0801b3ce

08019590 <__ieee754_atan2>:
 8019590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019594:	ec57 6b11 	vmov	r6, r7, d1
 8019598:	4273      	negs	r3, r6
 801959a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801959e:	4333      	orrs	r3, r6
 80195a0:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8019748 <__ieee754_atan2+0x1b8>
 80195a4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80195a8:	4573      	cmp	r3, lr
 80195aa:	ec51 0b10 	vmov	r0, r1, d0
 80195ae:	ee11 8a10 	vmov	r8, s2
 80195b2:	d80a      	bhi.n	80195ca <__ieee754_atan2+0x3a>
 80195b4:	4244      	negs	r4, r0
 80195b6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80195ba:	4304      	orrs	r4, r0
 80195bc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80195c0:	4574      	cmp	r4, lr
 80195c2:	468c      	mov	ip, r1
 80195c4:	ee10 9a10 	vmov	r9, s0
 80195c8:	d907      	bls.n	80195da <__ieee754_atan2+0x4a>
 80195ca:	4632      	mov	r2, r6
 80195cc:	463b      	mov	r3, r7
 80195ce:	f7e6 fe5d 	bl	800028c <__adddf3>
 80195d2:	ec41 0b10 	vmov	d0, r0, r1
 80195d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80195da:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80195de:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80195e2:	4334      	orrs	r4, r6
 80195e4:	d103      	bne.n	80195ee <__ieee754_atan2+0x5e>
 80195e6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80195ea:	f001 b819 	b.w	801a620 <atan>
 80195ee:	17bc      	asrs	r4, r7, #30
 80195f0:	f004 0402 	and.w	r4, r4, #2
 80195f4:	ea53 0909 	orrs.w	r9, r3, r9
 80195f8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80195fc:	d107      	bne.n	801960e <__ieee754_atan2+0x7e>
 80195fe:	2c02      	cmp	r4, #2
 8019600:	d073      	beq.n	80196ea <__ieee754_atan2+0x15a>
 8019602:	2c03      	cmp	r4, #3
 8019604:	d1e5      	bne.n	80195d2 <__ieee754_atan2+0x42>
 8019606:	a13e      	add	r1, pc, #248	; (adr r1, 8019700 <__ieee754_atan2+0x170>)
 8019608:	e9d1 0100 	ldrd	r0, r1, [r1]
 801960c:	e7e1      	b.n	80195d2 <__ieee754_atan2+0x42>
 801960e:	ea52 0808 	orrs.w	r8, r2, r8
 8019612:	d106      	bne.n	8019622 <__ieee754_atan2+0x92>
 8019614:	f1bc 0f00 	cmp.w	ip, #0
 8019618:	da6b      	bge.n	80196f2 <__ieee754_atan2+0x162>
 801961a:	a13b      	add	r1, pc, #236	; (adr r1, 8019708 <__ieee754_atan2+0x178>)
 801961c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019620:	e7d7      	b.n	80195d2 <__ieee754_atan2+0x42>
 8019622:	4572      	cmp	r2, lr
 8019624:	d120      	bne.n	8019668 <__ieee754_atan2+0xd8>
 8019626:	4293      	cmp	r3, r2
 8019628:	d111      	bne.n	801964e <__ieee754_atan2+0xbe>
 801962a:	2c02      	cmp	r4, #2
 801962c:	d007      	beq.n	801963e <__ieee754_atan2+0xae>
 801962e:	2c03      	cmp	r4, #3
 8019630:	d009      	beq.n	8019646 <__ieee754_atan2+0xb6>
 8019632:	2c01      	cmp	r4, #1
 8019634:	d155      	bne.n	80196e2 <__ieee754_atan2+0x152>
 8019636:	a136      	add	r1, pc, #216	; (adr r1, 8019710 <__ieee754_atan2+0x180>)
 8019638:	e9d1 0100 	ldrd	r0, r1, [r1]
 801963c:	e7c9      	b.n	80195d2 <__ieee754_atan2+0x42>
 801963e:	a136      	add	r1, pc, #216	; (adr r1, 8019718 <__ieee754_atan2+0x188>)
 8019640:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019644:	e7c5      	b.n	80195d2 <__ieee754_atan2+0x42>
 8019646:	a136      	add	r1, pc, #216	; (adr r1, 8019720 <__ieee754_atan2+0x190>)
 8019648:	e9d1 0100 	ldrd	r0, r1, [r1]
 801964c:	e7c1      	b.n	80195d2 <__ieee754_atan2+0x42>
 801964e:	2c02      	cmp	r4, #2
 8019650:	d04b      	beq.n	80196ea <__ieee754_atan2+0x15a>
 8019652:	2c03      	cmp	r4, #3
 8019654:	d0d7      	beq.n	8019606 <__ieee754_atan2+0x76>
 8019656:	2c01      	cmp	r4, #1
 8019658:	f04f 0000 	mov.w	r0, #0
 801965c:	d102      	bne.n	8019664 <__ieee754_atan2+0xd4>
 801965e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8019662:	e7b6      	b.n	80195d2 <__ieee754_atan2+0x42>
 8019664:	2100      	movs	r1, #0
 8019666:	e7b4      	b.n	80195d2 <__ieee754_atan2+0x42>
 8019668:	4573      	cmp	r3, lr
 801966a:	d0d3      	beq.n	8019614 <__ieee754_atan2+0x84>
 801966c:	1a9b      	subs	r3, r3, r2
 801966e:	151b      	asrs	r3, r3, #20
 8019670:	2b3c      	cmp	r3, #60	; 0x3c
 8019672:	dc1e      	bgt.n	80196b2 <__ieee754_atan2+0x122>
 8019674:	2f00      	cmp	r7, #0
 8019676:	da01      	bge.n	801967c <__ieee754_atan2+0xec>
 8019678:	333c      	adds	r3, #60	; 0x3c
 801967a:	db1e      	blt.n	80196ba <__ieee754_atan2+0x12a>
 801967c:	4632      	mov	r2, r6
 801967e:	463b      	mov	r3, r7
 8019680:	f7e7 f8e4 	bl	800084c <__aeabi_ddiv>
 8019684:	ec41 0b10 	vmov	d0, r0, r1
 8019688:	f001 f96a 	bl	801a960 <fabs>
 801968c:	f000 ffc8 	bl	801a620 <atan>
 8019690:	ec51 0b10 	vmov	r0, r1, d0
 8019694:	2c01      	cmp	r4, #1
 8019696:	d013      	beq.n	80196c0 <__ieee754_atan2+0x130>
 8019698:	2c02      	cmp	r4, #2
 801969a:	d015      	beq.n	80196c8 <__ieee754_atan2+0x138>
 801969c:	2c00      	cmp	r4, #0
 801969e:	d098      	beq.n	80195d2 <__ieee754_atan2+0x42>
 80196a0:	a321      	add	r3, pc, #132	; (adr r3, 8019728 <__ieee754_atan2+0x198>)
 80196a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196a6:	f7e6 fdef 	bl	8000288 <__aeabi_dsub>
 80196aa:	a321      	add	r3, pc, #132	; (adr r3, 8019730 <__ieee754_atan2+0x1a0>)
 80196ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196b0:	e014      	b.n	80196dc <__ieee754_atan2+0x14c>
 80196b2:	a121      	add	r1, pc, #132	; (adr r1, 8019738 <__ieee754_atan2+0x1a8>)
 80196b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80196b8:	e7ec      	b.n	8019694 <__ieee754_atan2+0x104>
 80196ba:	2000      	movs	r0, #0
 80196bc:	2100      	movs	r1, #0
 80196be:	e7e9      	b.n	8019694 <__ieee754_atan2+0x104>
 80196c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80196c4:	4619      	mov	r1, r3
 80196c6:	e784      	b.n	80195d2 <__ieee754_atan2+0x42>
 80196c8:	a317      	add	r3, pc, #92	; (adr r3, 8019728 <__ieee754_atan2+0x198>)
 80196ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196ce:	f7e6 fddb 	bl	8000288 <__aeabi_dsub>
 80196d2:	4602      	mov	r2, r0
 80196d4:	460b      	mov	r3, r1
 80196d6:	a116      	add	r1, pc, #88	; (adr r1, 8019730 <__ieee754_atan2+0x1a0>)
 80196d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80196dc:	f7e6 fdd4 	bl	8000288 <__aeabi_dsub>
 80196e0:	e777      	b.n	80195d2 <__ieee754_atan2+0x42>
 80196e2:	a117      	add	r1, pc, #92	; (adr r1, 8019740 <__ieee754_atan2+0x1b0>)
 80196e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80196e8:	e773      	b.n	80195d2 <__ieee754_atan2+0x42>
 80196ea:	a111      	add	r1, pc, #68	; (adr r1, 8019730 <__ieee754_atan2+0x1a0>)
 80196ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80196f0:	e76f      	b.n	80195d2 <__ieee754_atan2+0x42>
 80196f2:	a111      	add	r1, pc, #68	; (adr r1, 8019738 <__ieee754_atan2+0x1a8>)
 80196f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80196f8:	e76b      	b.n	80195d2 <__ieee754_atan2+0x42>
 80196fa:	bf00      	nop
 80196fc:	f3af 8000 	nop.w
 8019700:	54442d18 	.word	0x54442d18
 8019704:	c00921fb 	.word	0xc00921fb
 8019708:	54442d18 	.word	0x54442d18
 801970c:	bff921fb 	.word	0xbff921fb
 8019710:	54442d18 	.word	0x54442d18
 8019714:	bfe921fb 	.word	0xbfe921fb
 8019718:	7f3321d2 	.word	0x7f3321d2
 801971c:	4002d97c 	.word	0x4002d97c
 8019720:	7f3321d2 	.word	0x7f3321d2
 8019724:	c002d97c 	.word	0xc002d97c
 8019728:	33145c07 	.word	0x33145c07
 801972c:	3ca1a626 	.word	0x3ca1a626
 8019730:	54442d18 	.word	0x54442d18
 8019734:	400921fb 	.word	0x400921fb
 8019738:	54442d18 	.word	0x54442d18
 801973c:	3ff921fb 	.word	0x3ff921fb
 8019740:	54442d18 	.word	0x54442d18
 8019744:	3fe921fb 	.word	0x3fe921fb
 8019748:	7ff00000 	.word	0x7ff00000
 801974c:	00000000 	.word	0x00000000

08019750 <__ieee754_rem_pio2>:
 8019750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019754:	ec57 6b10 	vmov	r6, r7, d0
 8019758:	4bc3      	ldr	r3, [pc, #780]	; (8019a68 <__ieee754_rem_pio2+0x318>)
 801975a:	b08d      	sub	sp, #52	; 0x34
 801975c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8019760:	4598      	cmp	r8, r3
 8019762:	4604      	mov	r4, r0
 8019764:	9704      	str	r7, [sp, #16]
 8019766:	dc07      	bgt.n	8019778 <__ieee754_rem_pio2+0x28>
 8019768:	2200      	movs	r2, #0
 801976a:	2300      	movs	r3, #0
 801976c:	ed84 0b00 	vstr	d0, [r4]
 8019770:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8019774:	2500      	movs	r5, #0
 8019776:	e027      	b.n	80197c8 <__ieee754_rem_pio2+0x78>
 8019778:	4bbc      	ldr	r3, [pc, #752]	; (8019a6c <__ieee754_rem_pio2+0x31c>)
 801977a:	4598      	cmp	r8, r3
 801977c:	dc75      	bgt.n	801986a <__ieee754_rem_pio2+0x11a>
 801977e:	9b04      	ldr	r3, [sp, #16]
 8019780:	4dbb      	ldr	r5, [pc, #748]	; (8019a70 <__ieee754_rem_pio2+0x320>)
 8019782:	2b00      	cmp	r3, #0
 8019784:	ee10 0a10 	vmov	r0, s0
 8019788:	a3a9      	add	r3, pc, #676	; (adr r3, 8019a30 <__ieee754_rem_pio2+0x2e0>)
 801978a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801978e:	4639      	mov	r1, r7
 8019790:	dd36      	ble.n	8019800 <__ieee754_rem_pio2+0xb0>
 8019792:	f7e6 fd79 	bl	8000288 <__aeabi_dsub>
 8019796:	45a8      	cmp	r8, r5
 8019798:	4606      	mov	r6, r0
 801979a:	460f      	mov	r7, r1
 801979c:	d018      	beq.n	80197d0 <__ieee754_rem_pio2+0x80>
 801979e:	a3a6      	add	r3, pc, #664	; (adr r3, 8019a38 <__ieee754_rem_pio2+0x2e8>)
 80197a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197a4:	f7e6 fd70 	bl	8000288 <__aeabi_dsub>
 80197a8:	4602      	mov	r2, r0
 80197aa:	460b      	mov	r3, r1
 80197ac:	e9c4 2300 	strd	r2, r3, [r4]
 80197b0:	4630      	mov	r0, r6
 80197b2:	4639      	mov	r1, r7
 80197b4:	f7e6 fd68 	bl	8000288 <__aeabi_dsub>
 80197b8:	a39f      	add	r3, pc, #636	; (adr r3, 8019a38 <__ieee754_rem_pio2+0x2e8>)
 80197ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197be:	f7e6 fd63 	bl	8000288 <__aeabi_dsub>
 80197c2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80197c6:	2501      	movs	r5, #1
 80197c8:	4628      	mov	r0, r5
 80197ca:	b00d      	add	sp, #52	; 0x34
 80197cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197d0:	a39b      	add	r3, pc, #620	; (adr r3, 8019a40 <__ieee754_rem_pio2+0x2f0>)
 80197d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197d6:	f7e6 fd57 	bl	8000288 <__aeabi_dsub>
 80197da:	a39b      	add	r3, pc, #620	; (adr r3, 8019a48 <__ieee754_rem_pio2+0x2f8>)
 80197dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197e0:	4606      	mov	r6, r0
 80197e2:	460f      	mov	r7, r1
 80197e4:	f7e6 fd50 	bl	8000288 <__aeabi_dsub>
 80197e8:	4602      	mov	r2, r0
 80197ea:	460b      	mov	r3, r1
 80197ec:	e9c4 2300 	strd	r2, r3, [r4]
 80197f0:	4630      	mov	r0, r6
 80197f2:	4639      	mov	r1, r7
 80197f4:	f7e6 fd48 	bl	8000288 <__aeabi_dsub>
 80197f8:	a393      	add	r3, pc, #588	; (adr r3, 8019a48 <__ieee754_rem_pio2+0x2f8>)
 80197fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197fe:	e7de      	b.n	80197be <__ieee754_rem_pio2+0x6e>
 8019800:	f7e6 fd44 	bl	800028c <__adddf3>
 8019804:	45a8      	cmp	r8, r5
 8019806:	4606      	mov	r6, r0
 8019808:	460f      	mov	r7, r1
 801980a:	d016      	beq.n	801983a <__ieee754_rem_pio2+0xea>
 801980c:	a38a      	add	r3, pc, #552	; (adr r3, 8019a38 <__ieee754_rem_pio2+0x2e8>)
 801980e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019812:	f7e6 fd3b 	bl	800028c <__adddf3>
 8019816:	4602      	mov	r2, r0
 8019818:	460b      	mov	r3, r1
 801981a:	e9c4 2300 	strd	r2, r3, [r4]
 801981e:	4630      	mov	r0, r6
 8019820:	4639      	mov	r1, r7
 8019822:	f7e6 fd31 	bl	8000288 <__aeabi_dsub>
 8019826:	a384      	add	r3, pc, #528	; (adr r3, 8019a38 <__ieee754_rem_pio2+0x2e8>)
 8019828:	e9d3 2300 	ldrd	r2, r3, [r3]
 801982c:	f7e6 fd2e 	bl	800028c <__adddf3>
 8019830:	f04f 35ff 	mov.w	r5, #4294967295
 8019834:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8019838:	e7c6      	b.n	80197c8 <__ieee754_rem_pio2+0x78>
 801983a:	a381      	add	r3, pc, #516	; (adr r3, 8019a40 <__ieee754_rem_pio2+0x2f0>)
 801983c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019840:	f7e6 fd24 	bl	800028c <__adddf3>
 8019844:	a380      	add	r3, pc, #512	; (adr r3, 8019a48 <__ieee754_rem_pio2+0x2f8>)
 8019846:	e9d3 2300 	ldrd	r2, r3, [r3]
 801984a:	4606      	mov	r6, r0
 801984c:	460f      	mov	r7, r1
 801984e:	f7e6 fd1d 	bl	800028c <__adddf3>
 8019852:	4602      	mov	r2, r0
 8019854:	460b      	mov	r3, r1
 8019856:	e9c4 2300 	strd	r2, r3, [r4]
 801985a:	4630      	mov	r0, r6
 801985c:	4639      	mov	r1, r7
 801985e:	f7e6 fd13 	bl	8000288 <__aeabi_dsub>
 8019862:	a379      	add	r3, pc, #484	; (adr r3, 8019a48 <__ieee754_rem_pio2+0x2f8>)
 8019864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019868:	e7e0      	b.n	801982c <__ieee754_rem_pio2+0xdc>
 801986a:	4b82      	ldr	r3, [pc, #520]	; (8019a74 <__ieee754_rem_pio2+0x324>)
 801986c:	4598      	cmp	r8, r3
 801986e:	f300 80d0 	bgt.w	8019a12 <__ieee754_rem_pio2+0x2c2>
 8019872:	f001 f875 	bl	801a960 <fabs>
 8019876:	ec57 6b10 	vmov	r6, r7, d0
 801987a:	ee10 0a10 	vmov	r0, s0
 801987e:	a374      	add	r3, pc, #464	; (adr r3, 8019a50 <__ieee754_rem_pio2+0x300>)
 8019880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019884:	4639      	mov	r1, r7
 8019886:	f7e6 feb7 	bl	80005f8 <__aeabi_dmul>
 801988a:	2200      	movs	r2, #0
 801988c:	4b7a      	ldr	r3, [pc, #488]	; (8019a78 <__ieee754_rem_pio2+0x328>)
 801988e:	f7e6 fcfd 	bl	800028c <__adddf3>
 8019892:	f7e7 f961 	bl	8000b58 <__aeabi_d2iz>
 8019896:	4605      	mov	r5, r0
 8019898:	f7e6 fe44 	bl	8000524 <__aeabi_i2d>
 801989c:	a364      	add	r3, pc, #400	; (adr r3, 8019a30 <__ieee754_rem_pio2+0x2e0>)
 801989e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80198a6:	f7e6 fea7 	bl	80005f8 <__aeabi_dmul>
 80198aa:	4602      	mov	r2, r0
 80198ac:	460b      	mov	r3, r1
 80198ae:	4630      	mov	r0, r6
 80198b0:	4639      	mov	r1, r7
 80198b2:	f7e6 fce9 	bl	8000288 <__aeabi_dsub>
 80198b6:	a360      	add	r3, pc, #384	; (adr r3, 8019a38 <__ieee754_rem_pio2+0x2e8>)
 80198b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198bc:	4682      	mov	sl, r0
 80198be:	468b      	mov	fp, r1
 80198c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80198c4:	f7e6 fe98 	bl	80005f8 <__aeabi_dmul>
 80198c8:	2d1f      	cmp	r5, #31
 80198ca:	4606      	mov	r6, r0
 80198cc:	460f      	mov	r7, r1
 80198ce:	dc0c      	bgt.n	80198ea <__ieee754_rem_pio2+0x19a>
 80198d0:	1e6a      	subs	r2, r5, #1
 80198d2:	4b6a      	ldr	r3, [pc, #424]	; (8019a7c <__ieee754_rem_pio2+0x32c>)
 80198d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80198d8:	4543      	cmp	r3, r8
 80198da:	d006      	beq.n	80198ea <__ieee754_rem_pio2+0x19a>
 80198dc:	4632      	mov	r2, r6
 80198de:	463b      	mov	r3, r7
 80198e0:	4650      	mov	r0, sl
 80198e2:	4659      	mov	r1, fp
 80198e4:	f7e6 fcd0 	bl	8000288 <__aeabi_dsub>
 80198e8:	e00e      	b.n	8019908 <__ieee754_rem_pio2+0x1b8>
 80198ea:	4632      	mov	r2, r6
 80198ec:	463b      	mov	r3, r7
 80198ee:	4650      	mov	r0, sl
 80198f0:	4659      	mov	r1, fp
 80198f2:	f7e6 fcc9 	bl	8000288 <__aeabi_dsub>
 80198f6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80198fa:	9305      	str	r3, [sp, #20]
 80198fc:	9a05      	ldr	r2, [sp, #20]
 80198fe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8019902:	1ad3      	subs	r3, r2, r3
 8019904:	2b10      	cmp	r3, #16
 8019906:	dc02      	bgt.n	801990e <__ieee754_rem_pio2+0x1be>
 8019908:	e9c4 0100 	strd	r0, r1, [r4]
 801990c:	e039      	b.n	8019982 <__ieee754_rem_pio2+0x232>
 801990e:	a34c      	add	r3, pc, #304	; (adr r3, 8019a40 <__ieee754_rem_pio2+0x2f0>)
 8019910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019914:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019918:	f7e6 fe6e 	bl	80005f8 <__aeabi_dmul>
 801991c:	4606      	mov	r6, r0
 801991e:	460f      	mov	r7, r1
 8019920:	4602      	mov	r2, r0
 8019922:	460b      	mov	r3, r1
 8019924:	4650      	mov	r0, sl
 8019926:	4659      	mov	r1, fp
 8019928:	f7e6 fcae 	bl	8000288 <__aeabi_dsub>
 801992c:	4602      	mov	r2, r0
 801992e:	460b      	mov	r3, r1
 8019930:	4680      	mov	r8, r0
 8019932:	4689      	mov	r9, r1
 8019934:	4650      	mov	r0, sl
 8019936:	4659      	mov	r1, fp
 8019938:	f7e6 fca6 	bl	8000288 <__aeabi_dsub>
 801993c:	4632      	mov	r2, r6
 801993e:	463b      	mov	r3, r7
 8019940:	f7e6 fca2 	bl	8000288 <__aeabi_dsub>
 8019944:	a340      	add	r3, pc, #256	; (adr r3, 8019a48 <__ieee754_rem_pio2+0x2f8>)
 8019946:	e9d3 2300 	ldrd	r2, r3, [r3]
 801994a:	4606      	mov	r6, r0
 801994c:	460f      	mov	r7, r1
 801994e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019952:	f7e6 fe51 	bl	80005f8 <__aeabi_dmul>
 8019956:	4632      	mov	r2, r6
 8019958:	463b      	mov	r3, r7
 801995a:	f7e6 fc95 	bl	8000288 <__aeabi_dsub>
 801995e:	4602      	mov	r2, r0
 8019960:	460b      	mov	r3, r1
 8019962:	4606      	mov	r6, r0
 8019964:	460f      	mov	r7, r1
 8019966:	4640      	mov	r0, r8
 8019968:	4649      	mov	r1, r9
 801996a:	f7e6 fc8d 	bl	8000288 <__aeabi_dsub>
 801996e:	9a05      	ldr	r2, [sp, #20]
 8019970:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8019974:	1ad3      	subs	r3, r2, r3
 8019976:	2b31      	cmp	r3, #49	; 0x31
 8019978:	dc20      	bgt.n	80199bc <__ieee754_rem_pio2+0x26c>
 801997a:	e9c4 0100 	strd	r0, r1, [r4]
 801997e:	46c2      	mov	sl, r8
 8019980:	46cb      	mov	fp, r9
 8019982:	e9d4 8900 	ldrd	r8, r9, [r4]
 8019986:	4650      	mov	r0, sl
 8019988:	4642      	mov	r2, r8
 801998a:	464b      	mov	r3, r9
 801998c:	4659      	mov	r1, fp
 801998e:	f7e6 fc7b 	bl	8000288 <__aeabi_dsub>
 8019992:	463b      	mov	r3, r7
 8019994:	4632      	mov	r2, r6
 8019996:	f7e6 fc77 	bl	8000288 <__aeabi_dsub>
 801999a:	9b04      	ldr	r3, [sp, #16]
 801999c:	2b00      	cmp	r3, #0
 801999e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80199a2:	f6bf af11 	bge.w	80197c8 <__ieee754_rem_pio2+0x78>
 80199a6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80199aa:	6063      	str	r3, [r4, #4]
 80199ac:	f8c4 8000 	str.w	r8, [r4]
 80199b0:	60a0      	str	r0, [r4, #8]
 80199b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80199b6:	60e3      	str	r3, [r4, #12]
 80199b8:	426d      	negs	r5, r5
 80199ba:	e705      	b.n	80197c8 <__ieee754_rem_pio2+0x78>
 80199bc:	a326      	add	r3, pc, #152	; (adr r3, 8019a58 <__ieee754_rem_pio2+0x308>)
 80199be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80199c6:	f7e6 fe17 	bl	80005f8 <__aeabi_dmul>
 80199ca:	4606      	mov	r6, r0
 80199cc:	460f      	mov	r7, r1
 80199ce:	4602      	mov	r2, r0
 80199d0:	460b      	mov	r3, r1
 80199d2:	4640      	mov	r0, r8
 80199d4:	4649      	mov	r1, r9
 80199d6:	f7e6 fc57 	bl	8000288 <__aeabi_dsub>
 80199da:	4602      	mov	r2, r0
 80199dc:	460b      	mov	r3, r1
 80199de:	4682      	mov	sl, r0
 80199e0:	468b      	mov	fp, r1
 80199e2:	4640      	mov	r0, r8
 80199e4:	4649      	mov	r1, r9
 80199e6:	f7e6 fc4f 	bl	8000288 <__aeabi_dsub>
 80199ea:	4632      	mov	r2, r6
 80199ec:	463b      	mov	r3, r7
 80199ee:	f7e6 fc4b 	bl	8000288 <__aeabi_dsub>
 80199f2:	a31b      	add	r3, pc, #108	; (adr r3, 8019a60 <__ieee754_rem_pio2+0x310>)
 80199f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199f8:	4606      	mov	r6, r0
 80199fa:	460f      	mov	r7, r1
 80199fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019a00:	f7e6 fdfa 	bl	80005f8 <__aeabi_dmul>
 8019a04:	4632      	mov	r2, r6
 8019a06:	463b      	mov	r3, r7
 8019a08:	f7e6 fc3e 	bl	8000288 <__aeabi_dsub>
 8019a0c:	4606      	mov	r6, r0
 8019a0e:	460f      	mov	r7, r1
 8019a10:	e764      	b.n	80198dc <__ieee754_rem_pio2+0x18c>
 8019a12:	4b1b      	ldr	r3, [pc, #108]	; (8019a80 <__ieee754_rem_pio2+0x330>)
 8019a14:	4598      	cmp	r8, r3
 8019a16:	dd35      	ble.n	8019a84 <__ieee754_rem_pio2+0x334>
 8019a18:	ee10 2a10 	vmov	r2, s0
 8019a1c:	463b      	mov	r3, r7
 8019a1e:	4630      	mov	r0, r6
 8019a20:	4639      	mov	r1, r7
 8019a22:	f7e6 fc31 	bl	8000288 <__aeabi_dsub>
 8019a26:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8019a2a:	e9c4 0100 	strd	r0, r1, [r4]
 8019a2e:	e6a1      	b.n	8019774 <__ieee754_rem_pio2+0x24>
 8019a30:	54400000 	.word	0x54400000
 8019a34:	3ff921fb 	.word	0x3ff921fb
 8019a38:	1a626331 	.word	0x1a626331
 8019a3c:	3dd0b461 	.word	0x3dd0b461
 8019a40:	1a600000 	.word	0x1a600000
 8019a44:	3dd0b461 	.word	0x3dd0b461
 8019a48:	2e037073 	.word	0x2e037073
 8019a4c:	3ba3198a 	.word	0x3ba3198a
 8019a50:	6dc9c883 	.word	0x6dc9c883
 8019a54:	3fe45f30 	.word	0x3fe45f30
 8019a58:	2e000000 	.word	0x2e000000
 8019a5c:	3ba3198a 	.word	0x3ba3198a
 8019a60:	252049c1 	.word	0x252049c1
 8019a64:	397b839a 	.word	0x397b839a
 8019a68:	3fe921fb 	.word	0x3fe921fb
 8019a6c:	4002d97b 	.word	0x4002d97b
 8019a70:	3ff921fb 	.word	0x3ff921fb
 8019a74:	413921fb 	.word	0x413921fb
 8019a78:	3fe00000 	.word	0x3fe00000
 8019a7c:	0801b3d4 	.word	0x0801b3d4
 8019a80:	7fefffff 	.word	0x7fefffff
 8019a84:	ea4f 5528 	mov.w	r5, r8, asr #20
 8019a88:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8019a8c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8019a90:	4630      	mov	r0, r6
 8019a92:	460f      	mov	r7, r1
 8019a94:	f7e7 f860 	bl	8000b58 <__aeabi_d2iz>
 8019a98:	f7e6 fd44 	bl	8000524 <__aeabi_i2d>
 8019a9c:	4602      	mov	r2, r0
 8019a9e:	460b      	mov	r3, r1
 8019aa0:	4630      	mov	r0, r6
 8019aa2:	4639      	mov	r1, r7
 8019aa4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8019aa8:	f7e6 fbee 	bl	8000288 <__aeabi_dsub>
 8019aac:	2200      	movs	r2, #0
 8019aae:	4b1f      	ldr	r3, [pc, #124]	; (8019b2c <__ieee754_rem_pio2+0x3dc>)
 8019ab0:	f7e6 fda2 	bl	80005f8 <__aeabi_dmul>
 8019ab4:	460f      	mov	r7, r1
 8019ab6:	4606      	mov	r6, r0
 8019ab8:	f7e7 f84e 	bl	8000b58 <__aeabi_d2iz>
 8019abc:	f7e6 fd32 	bl	8000524 <__aeabi_i2d>
 8019ac0:	4602      	mov	r2, r0
 8019ac2:	460b      	mov	r3, r1
 8019ac4:	4630      	mov	r0, r6
 8019ac6:	4639      	mov	r1, r7
 8019ac8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8019acc:	f7e6 fbdc 	bl	8000288 <__aeabi_dsub>
 8019ad0:	2200      	movs	r2, #0
 8019ad2:	4b16      	ldr	r3, [pc, #88]	; (8019b2c <__ieee754_rem_pio2+0x3dc>)
 8019ad4:	f7e6 fd90 	bl	80005f8 <__aeabi_dmul>
 8019ad8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8019adc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8019ae0:	f04f 0803 	mov.w	r8, #3
 8019ae4:	2600      	movs	r6, #0
 8019ae6:	2700      	movs	r7, #0
 8019ae8:	4632      	mov	r2, r6
 8019aea:	463b      	mov	r3, r7
 8019aec:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8019af0:	f108 3aff 	add.w	sl, r8, #4294967295
 8019af4:	f7e6 ffe8 	bl	8000ac8 <__aeabi_dcmpeq>
 8019af8:	b9b0      	cbnz	r0, 8019b28 <__ieee754_rem_pio2+0x3d8>
 8019afa:	4b0d      	ldr	r3, [pc, #52]	; (8019b30 <__ieee754_rem_pio2+0x3e0>)
 8019afc:	9301      	str	r3, [sp, #4]
 8019afe:	2302      	movs	r3, #2
 8019b00:	9300      	str	r3, [sp, #0]
 8019b02:	462a      	mov	r2, r5
 8019b04:	4643      	mov	r3, r8
 8019b06:	4621      	mov	r1, r4
 8019b08:	a806      	add	r0, sp, #24
 8019b0a:	f000 f98d 	bl	8019e28 <__kernel_rem_pio2>
 8019b0e:	9b04      	ldr	r3, [sp, #16]
 8019b10:	2b00      	cmp	r3, #0
 8019b12:	4605      	mov	r5, r0
 8019b14:	f6bf ae58 	bge.w	80197c8 <__ieee754_rem_pio2+0x78>
 8019b18:	6863      	ldr	r3, [r4, #4]
 8019b1a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8019b1e:	6063      	str	r3, [r4, #4]
 8019b20:	68e3      	ldr	r3, [r4, #12]
 8019b22:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8019b26:	e746      	b.n	80199b6 <__ieee754_rem_pio2+0x266>
 8019b28:	46d0      	mov	r8, sl
 8019b2a:	e7dd      	b.n	8019ae8 <__ieee754_rem_pio2+0x398>
 8019b2c:	41700000 	.word	0x41700000
 8019b30:	0801b454 	.word	0x0801b454

08019b34 <__ieee754_sqrt>:
 8019b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b38:	4955      	ldr	r1, [pc, #340]	; (8019c90 <__ieee754_sqrt+0x15c>)
 8019b3a:	ec55 4b10 	vmov	r4, r5, d0
 8019b3e:	43a9      	bics	r1, r5
 8019b40:	462b      	mov	r3, r5
 8019b42:	462a      	mov	r2, r5
 8019b44:	d112      	bne.n	8019b6c <__ieee754_sqrt+0x38>
 8019b46:	ee10 2a10 	vmov	r2, s0
 8019b4a:	ee10 0a10 	vmov	r0, s0
 8019b4e:	4629      	mov	r1, r5
 8019b50:	f7e6 fd52 	bl	80005f8 <__aeabi_dmul>
 8019b54:	4602      	mov	r2, r0
 8019b56:	460b      	mov	r3, r1
 8019b58:	4620      	mov	r0, r4
 8019b5a:	4629      	mov	r1, r5
 8019b5c:	f7e6 fb96 	bl	800028c <__adddf3>
 8019b60:	4604      	mov	r4, r0
 8019b62:	460d      	mov	r5, r1
 8019b64:	ec45 4b10 	vmov	d0, r4, r5
 8019b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b6c:	2d00      	cmp	r5, #0
 8019b6e:	ee10 0a10 	vmov	r0, s0
 8019b72:	4621      	mov	r1, r4
 8019b74:	dc0f      	bgt.n	8019b96 <__ieee754_sqrt+0x62>
 8019b76:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8019b7a:	4330      	orrs	r0, r6
 8019b7c:	d0f2      	beq.n	8019b64 <__ieee754_sqrt+0x30>
 8019b7e:	b155      	cbz	r5, 8019b96 <__ieee754_sqrt+0x62>
 8019b80:	ee10 2a10 	vmov	r2, s0
 8019b84:	4620      	mov	r0, r4
 8019b86:	4629      	mov	r1, r5
 8019b88:	f7e6 fb7e 	bl	8000288 <__aeabi_dsub>
 8019b8c:	4602      	mov	r2, r0
 8019b8e:	460b      	mov	r3, r1
 8019b90:	f7e6 fe5c 	bl	800084c <__aeabi_ddiv>
 8019b94:	e7e4      	b.n	8019b60 <__ieee754_sqrt+0x2c>
 8019b96:	151b      	asrs	r3, r3, #20
 8019b98:	d073      	beq.n	8019c82 <__ieee754_sqrt+0x14e>
 8019b9a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8019b9e:	07dd      	lsls	r5, r3, #31
 8019ba0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8019ba4:	bf48      	it	mi
 8019ba6:	0fc8      	lsrmi	r0, r1, #31
 8019ba8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8019bac:	bf44      	itt	mi
 8019bae:	0049      	lslmi	r1, r1, #1
 8019bb0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8019bb4:	2500      	movs	r5, #0
 8019bb6:	1058      	asrs	r0, r3, #1
 8019bb8:	0fcb      	lsrs	r3, r1, #31
 8019bba:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8019bbe:	0049      	lsls	r1, r1, #1
 8019bc0:	2316      	movs	r3, #22
 8019bc2:	462c      	mov	r4, r5
 8019bc4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8019bc8:	19a7      	adds	r7, r4, r6
 8019bca:	4297      	cmp	r7, r2
 8019bcc:	bfde      	ittt	le
 8019bce:	19bc      	addle	r4, r7, r6
 8019bd0:	1bd2      	suble	r2, r2, r7
 8019bd2:	19ad      	addle	r5, r5, r6
 8019bd4:	0fcf      	lsrs	r7, r1, #31
 8019bd6:	3b01      	subs	r3, #1
 8019bd8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8019bdc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8019be0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8019be4:	d1f0      	bne.n	8019bc8 <__ieee754_sqrt+0x94>
 8019be6:	f04f 0c20 	mov.w	ip, #32
 8019bea:	469e      	mov	lr, r3
 8019bec:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8019bf0:	42a2      	cmp	r2, r4
 8019bf2:	eb06 070e 	add.w	r7, r6, lr
 8019bf6:	dc02      	bgt.n	8019bfe <__ieee754_sqrt+0xca>
 8019bf8:	d112      	bne.n	8019c20 <__ieee754_sqrt+0xec>
 8019bfa:	428f      	cmp	r7, r1
 8019bfc:	d810      	bhi.n	8019c20 <__ieee754_sqrt+0xec>
 8019bfe:	2f00      	cmp	r7, #0
 8019c00:	eb07 0e06 	add.w	lr, r7, r6
 8019c04:	da42      	bge.n	8019c8c <__ieee754_sqrt+0x158>
 8019c06:	f1be 0f00 	cmp.w	lr, #0
 8019c0a:	db3f      	blt.n	8019c8c <__ieee754_sqrt+0x158>
 8019c0c:	f104 0801 	add.w	r8, r4, #1
 8019c10:	1b12      	subs	r2, r2, r4
 8019c12:	428f      	cmp	r7, r1
 8019c14:	bf88      	it	hi
 8019c16:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8019c1a:	1bc9      	subs	r1, r1, r7
 8019c1c:	4433      	add	r3, r6
 8019c1e:	4644      	mov	r4, r8
 8019c20:	0052      	lsls	r2, r2, #1
 8019c22:	f1bc 0c01 	subs.w	ip, ip, #1
 8019c26:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8019c2a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8019c2e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8019c32:	d1dd      	bne.n	8019bf0 <__ieee754_sqrt+0xbc>
 8019c34:	430a      	orrs	r2, r1
 8019c36:	d006      	beq.n	8019c46 <__ieee754_sqrt+0x112>
 8019c38:	1c5c      	adds	r4, r3, #1
 8019c3a:	bf13      	iteet	ne
 8019c3c:	3301      	addne	r3, #1
 8019c3e:	3501      	addeq	r5, #1
 8019c40:	4663      	moveq	r3, ip
 8019c42:	f023 0301 	bicne.w	r3, r3, #1
 8019c46:	106a      	asrs	r2, r5, #1
 8019c48:	085b      	lsrs	r3, r3, #1
 8019c4a:	07e9      	lsls	r1, r5, #31
 8019c4c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8019c50:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8019c54:	bf48      	it	mi
 8019c56:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8019c5a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8019c5e:	461c      	mov	r4, r3
 8019c60:	e780      	b.n	8019b64 <__ieee754_sqrt+0x30>
 8019c62:	0aca      	lsrs	r2, r1, #11
 8019c64:	3815      	subs	r0, #21
 8019c66:	0549      	lsls	r1, r1, #21
 8019c68:	2a00      	cmp	r2, #0
 8019c6a:	d0fa      	beq.n	8019c62 <__ieee754_sqrt+0x12e>
 8019c6c:	02d6      	lsls	r6, r2, #11
 8019c6e:	d50a      	bpl.n	8019c86 <__ieee754_sqrt+0x152>
 8019c70:	f1c3 0420 	rsb	r4, r3, #32
 8019c74:	fa21 f404 	lsr.w	r4, r1, r4
 8019c78:	1e5d      	subs	r5, r3, #1
 8019c7a:	4099      	lsls	r1, r3
 8019c7c:	4322      	orrs	r2, r4
 8019c7e:	1b43      	subs	r3, r0, r5
 8019c80:	e78b      	b.n	8019b9a <__ieee754_sqrt+0x66>
 8019c82:	4618      	mov	r0, r3
 8019c84:	e7f0      	b.n	8019c68 <__ieee754_sqrt+0x134>
 8019c86:	0052      	lsls	r2, r2, #1
 8019c88:	3301      	adds	r3, #1
 8019c8a:	e7ef      	b.n	8019c6c <__ieee754_sqrt+0x138>
 8019c8c:	46a0      	mov	r8, r4
 8019c8e:	e7bf      	b.n	8019c10 <__ieee754_sqrt+0xdc>
 8019c90:	7ff00000 	.word	0x7ff00000
 8019c94:	00000000 	.word	0x00000000

08019c98 <__kernel_cos>:
 8019c98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c9c:	ec59 8b10 	vmov	r8, r9, d0
 8019ca0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8019ca4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8019ca8:	ed2d 8b02 	vpush	{d8}
 8019cac:	eeb0 8a41 	vmov.f32	s16, s2
 8019cb0:	eef0 8a61 	vmov.f32	s17, s3
 8019cb4:	da07      	bge.n	8019cc6 <__kernel_cos+0x2e>
 8019cb6:	ee10 0a10 	vmov	r0, s0
 8019cba:	4649      	mov	r1, r9
 8019cbc:	f7e6 ff4c 	bl	8000b58 <__aeabi_d2iz>
 8019cc0:	2800      	cmp	r0, #0
 8019cc2:	f000 8089 	beq.w	8019dd8 <__kernel_cos+0x140>
 8019cc6:	4642      	mov	r2, r8
 8019cc8:	464b      	mov	r3, r9
 8019cca:	4640      	mov	r0, r8
 8019ccc:	4649      	mov	r1, r9
 8019cce:	f7e6 fc93 	bl	80005f8 <__aeabi_dmul>
 8019cd2:	2200      	movs	r2, #0
 8019cd4:	4b4e      	ldr	r3, [pc, #312]	; (8019e10 <__kernel_cos+0x178>)
 8019cd6:	4604      	mov	r4, r0
 8019cd8:	460d      	mov	r5, r1
 8019cda:	f7e6 fc8d 	bl	80005f8 <__aeabi_dmul>
 8019cde:	a340      	add	r3, pc, #256	; (adr r3, 8019de0 <__kernel_cos+0x148>)
 8019ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ce4:	4682      	mov	sl, r0
 8019ce6:	468b      	mov	fp, r1
 8019ce8:	4620      	mov	r0, r4
 8019cea:	4629      	mov	r1, r5
 8019cec:	f7e6 fc84 	bl	80005f8 <__aeabi_dmul>
 8019cf0:	a33d      	add	r3, pc, #244	; (adr r3, 8019de8 <__kernel_cos+0x150>)
 8019cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019cf6:	f7e6 fac9 	bl	800028c <__adddf3>
 8019cfa:	4622      	mov	r2, r4
 8019cfc:	462b      	mov	r3, r5
 8019cfe:	f7e6 fc7b 	bl	80005f8 <__aeabi_dmul>
 8019d02:	a33b      	add	r3, pc, #236	; (adr r3, 8019df0 <__kernel_cos+0x158>)
 8019d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d08:	f7e6 fabe 	bl	8000288 <__aeabi_dsub>
 8019d0c:	4622      	mov	r2, r4
 8019d0e:	462b      	mov	r3, r5
 8019d10:	f7e6 fc72 	bl	80005f8 <__aeabi_dmul>
 8019d14:	a338      	add	r3, pc, #224	; (adr r3, 8019df8 <__kernel_cos+0x160>)
 8019d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d1a:	f7e6 fab7 	bl	800028c <__adddf3>
 8019d1e:	4622      	mov	r2, r4
 8019d20:	462b      	mov	r3, r5
 8019d22:	f7e6 fc69 	bl	80005f8 <__aeabi_dmul>
 8019d26:	a336      	add	r3, pc, #216	; (adr r3, 8019e00 <__kernel_cos+0x168>)
 8019d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d2c:	f7e6 faac 	bl	8000288 <__aeabi_dsub>
 8019d30:	4622      	mov	r2, r4
 8019d32:	462b      	mov	r3, r5
 8019d34:	f7e6 fc60 	bl	80005f8 <__aeabi_dmul>
 8019d38:	a333      	add	r3, pc, #204	; (adr r3, 8019e08 <__kernel_cos+0x170>)
 8019d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d3e:	f7e6 faa5 	bl	800028c <__adddf3>
 8019d42:	4622      	mov	r2, r4
 8019d44:	462b      	mov	r3, r5
 8019d46:	f7e6 fc57 	bl	80005f8 <__aeabi_dmul>
 8019d4a:	4622      	mov	r2, r4
 8019d4c:	462b      	mov	r3, r5
 8019d4e:	f7e6 fc53 	bl	80005f8 <__aeabi_dmul>
 8019d52:	ec53 2b18 	vmov	r2, r3, d8
 8019d56:	4604      	mov	r4, r0
 8019d58:	460d      	mov	r5, r1
 8019d5a:	4640      	mov	r0, r8
 8019d5c:	4649      	mov	r1, r9
 8019d5e:	f7e6 fc4b 	bl	80005f8 <__aeabi_dmul>
 8019d62:	460b      	mov	r3, r1
 8019d64:	4602      	mov	r2, r0
 8019d66:	4629      	mov	r1, r5
 8019d68:	4620      	mov	r0, r4
 8019d6a:	f7e6 fa8d 	bl	8000288 <__aeabi_dsub>
 8019d6e:	4b29      	ldr	r3, [pc, #164]	; (8019e14 <__kernel_cos+0x17c>)
 8019d70:	429e      	cmp	r6, r3
 8019d72:	4680      	mov	r8, r0
 8019d74:	4689      	mov	r9, r1
 8019d76:	dc11      	bgt.n	8019d9c <__kernel_cos+0x104>
 8019d78:	4602      	mov	r2, r0
 8019d7a:	460b      	mov	r3, r1
 8019d7c:	4650      	mov	r0, sl
 8019d7e:	4659      	mov	r1, fp
 8019d80:	f7e6 fa82 	bl	8000288 <__aeabi_dsub>
 8019d84:	460b      	mov	r3, r1
 8019d86:	4924      	ldr	r1, [pc, #144]	; (8019e18 <__kernel_cos+0x180>)
 8019d88:	4602      	mov	r2, r0
 8019d8a:	2000      	movs	r0, #0
 8019d8c:	f7e6 fa7c 	bl	8000288 <__aeabi_dsub>
 8019d90:	ecbd 8b02 	vpop	{d8}
 8019d94:	ec41 0b10 	vmov	d0, r0, r1
 8019d98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d9c:	4b1f      	ldr	r3, [pc, #124]	; (8019e1c <__kernel_cos+0x184>)
 8019d9e:	491e      	ldr	r1, [pc, #120]	; (8019e18 <__kernel_cos+0x180>)
 8019da0:	429e      	cmp	r6, r3
 8019da2:	bfcc      	ite	gt
 8019da4:	4d1e      	ldrgt	r5, [pc, #120]	; (8019e20 <__kernel_cos+0x188>)
 8019da6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8019daa:	2400      	movs	r4, #0
 8019dac:	4622      	mov	r2, r4
 8019dae:	462b      	mov	r3, r5
 8019db0:	2000      	movs	r0, #0
 8019db2:	f7e6 fa69 	bl	8000288 <__aeabi_dsub>
 8019db6:	4622      	mov	r2, r4
 8019db8:	4606      	mov	r6, r0
 8019dba:	460f      	mov	r7, r1
 8019dbc:	462b      	mov	r3, r5
 8019dbe:	4650      	mov	r0, sl
 8019dc0:	4659      	mov	r1, fp
 8019dc2:	f7e6 fa61 	bl	8000288 <__aeabi_dsub>
 8019dc6:	4642      	mov	r2, r8
 8019dc8:	464b      	mov	r3, r9
 8019dca:	f7e6 fa5d 	bl	8000288 <__aeabi_dsub>
 8019dce:	4602      	mov	r2, r0
 8019dd0:	460b      	mov	r3, r1
 8019dd2:	4630      	mov	r0, r6
 8019dd4:	4639      	mov	r1, r7
 8019dd6:	e7d9      	b.n	8019d8c <__kernel_cos+0xf4>
 8019dd8:	2000      	movs	r0, #0
 8019dda:	490f      	ldr	r1, [pc, #60]	; (8019e18 <__kernel_cos+0x180>)
 8019ddc:	e7d8      	b.n	8019d90 <__kernel_cos+0xf8>
 8019dde:	bf00      	nop
 8019de0:	be8838d4 	.word	0xbe8838d4
 8019de4:	bda8fae9 	.word	0xbda8fae9
 8019de8:	bdb4b1c4 	.word	0xbdb4b1c4
 8019dec:	3e21ee9e 	.word	0x3e21ee9e
 8019df0:	809c52ad 	.word	0x809c52ad
 8019df4:	3e927e4f 	.word	0x3e927e4f
 8019df8:	19cb1590 	.word	0x19cb1590
 8019dfc:	3efa01a0 	.word	0x3efa01a0
 8019e00:	16c15177 	.word	0x16c15177
 8019e04:	3f56c16c 	.word	0x3f56c16c
 8019e08:	5555554c 	.word	0x5555554c
 8019e0c:	3fa55555 	.word	0x3fa55555
 8019e10:	3fe00000 	.word	0x3fe00000
 8019e14:	3fd33332 	.word	0x3fd33332
 8019e18:	3ff00000 	.word	0x3ff00000
 8019e1c:	3fe90000 	.word	0x3fe90000
 8019e20:	3fd20000 	.word	0x3fd20000
 8019e24:	00000000 	.word	0x00000000

08019e28 <__kernel_rem_pio2>:
 8019e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e2c:	ed2d 8b02 	vpush	{d8}
 8019e30:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8019e34:	1ed4      	subs	r4, r2, #3
 8019e36:	9308      	str	r3, [sp, #32]
 8019e38:	9101      	str	r1, [sp, #4]
 8019e3a:	4bc5      	ldr	r3, [pc, #788]	; (801a150 <__kernel_rem_pio2+0x328>)
 8019e3c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8019e3e:	9009      	str	r0, [sp, #36]	; 0x24
 8019e40:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8019e44:	9304      	str	r3, [sp, #16]
 8019e46:	9b08      	ldr	r3, [sp, #32]
 8019e48:	3b01      	subs	r3, #1
 8019e4a:	9307      	str	r3, [sp, #28]
 8019e4c:	2318      	movs	r3, #24
 8019e4e:	fb94 f4f3 	sdiv	r4, r4, r3
 8019e52:	f06f 0317 	mvn.w	r3, #23
 8019e56:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8019e5a:	fb04 3303 	mla	r3, r4, r3, r3
 8019e5e:	eb03 0a02 	add.w	sl, r3, r2
 8019e62:	9b04      	ldr	r3, [sp, #16]
 8019e64:	9a07      	ldr	r2, [sp, #28]
 8019e66:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 801a140 <__kernel_rem_pio2+0x318>
 8019e6a:	eb03 0802 	add.w	r8, r3, r2
 8019e6e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8019e70:	1aa7      	subs	r7, r4, r2
 8019e72:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8019e76:	ae22      	add	r6, sp, #136	; 0x88
 8019e78:	2500      	movs	r5, #0
 8019e7a:	4545      	cmp	r5, r8
 8019e7c:	dd13      	ble.n	8019ea6 <__kernel_rem_pio2+0x7e>
 8019e7e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 801a140 <__kernel_rem_pio2+0x318>
 8019e82:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8019e86:	2600      	movs	r6, #0
 8019e88:	9b04      	ldr	r3, [sp, #16]
 8019e8a:	429e      	cmp	r6, r3
 8019e8c:	dc32      	bgt.n	8019ef4 <__kernel_rem_pio2+0xcc>
 8019e8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019e90:	9302      	str	r3, [sp, #8]
 8019e92:	9b08      	ldr	r3, [sp, #32]
 8019e94:	199d      	adds	r5, r3, r6
 8019e96:	ab22      	add	r3, sp, #136	; 0x88
 8019e98:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8019e9c:	9306      	str	r3, [sp, #24]
 8019e9e:	ec59 8b18 	vmov	r8, r9, d8
 8019ea2:	2700      	movs	r7, #0
 8019ea4:	e01f      	b.n	8019ee6 <__kernel_rem_pio2+0xbe>
 8019ea6:	42ef      	cmn	r7, r5
 8019ea8:	d407      	bmi.n	8019eba <__kernel_rem_pio2+0x92>
 8019eaa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8019eae:	f7e6 fb39 	bl	8000524 <__aeabi_i2d>
 8019eb2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8019eb6:	3501      	adds	r5, #1
 8019eb8:	e7df      	b.n	8019e7a <__kernel_rem_pio2+0x52>
 8019eba:	ec51 0b18 	vmov	r0, r1, d8
 8019ebe:	e7f8      	b.n	8019eb2 <__kernel_rem_pio2+0x8a>
 8019ec0:	9906      	ldr	r1, [sp, #24]
 8019ec2:	9d02      	ldr	r5, [sp, #8]
 8019ec4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8019ec8:	9106      	str	r1, [sp, #24]
 8019eca:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8019ece:	9502      	str	r5, [sp, #8]
 8019ed0:	f7e6 fb92 	bl	80005f8 <__aeabi_dmul>
 8019ed4:	4602      	mov	r2, r0
 8019ed6:	460b      	mov	r3, r1
 8019ed8:	4640      	mov	r0, r8
 8019eda:	4649      	mov	r1, r9
 8019edc:	f7e6 f9d6 	bl	800028c <__adddf3>
 8019ee0:	3701      	adds	r7, #1
 8019ee2:	4680      	mov	r8, r0
 8019ee4:	4689      	mov	r9, r1
 8019ee6:	9b07      	ldr	r3, [sp, #28]
 8019ee8:	429f      	cmp	r7, r3
 8019eea:	dde9      	ble.n	8019ec0 <__kernel_rem_pio2+0x98>
 8019eec:	e8eb 8902 	strd	r8, r9, [fp], #8
 8019ef0:	3601      	adds	r6, #1
 8019ef2:	e7c9      	b.n	8019e88 <__kernel_rem_pio2+0x60>
 8019ef4:	9b04      	ldr	r3, [sp, #16]
 8019ef6:	aa0e      	add	r2, sp, #56	; 0x38
 8019ef8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019efc:	930c      	str	r3, [sp, #48]	; 0x30
 8019efe:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8019f00:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8019f04:	9c04      	ldr	r4, [sp, #16]
 8019f06:	930b      	str	r3, [sp, #44]	; 0x2c
 8019f08:	ab9a      	add	r3, sp, #616	; 0x268
 8019f0a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8019f0e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8019f12:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019f16:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8019f1a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8019f1e:	ab9a      	add	r3, sp, #616	; 0x268
 8019f20:	445b      	add	r3, fp
 8019f22:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8019f26:	2500      	movs	r5, #0
 8019f28:	1b63      	subs	r3, r4, r5
 8019f2a:	2b00      	cmp	r3, #0
 8019f2c:	dc78      	bgt.n	801a020 <__kernel_rem_pio2+0x1f8>
 8019f2e:	4650      	mov	r0, sl
 8019f30:	ec49 8b10 	vmov	d0, r8, r9
 8019f34:	f000 fda8 	bl	801aa88 <scalbn>
 8019f38:	ec57 6b10 	vmov	r6, r7, d0
 8019f3c:	2200      	movs	r2, #0
 8019f3e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8019f42:	ee10 0a10 	vmov	r0, s0
 8019f46:	4639      	mov	r1, r7
 8019f48:	f7e6 fb56 	bl	80005f8 <__aeabi_dmul>
 8019f4c:	ec41 0b10 	vmov	d0, r0, r1
 8019f50:	f000 fd12 	bl	801a978 <floor>
 8019f54:	2200      	movs	r2, #0
 8019f56:	ec51 0b10 	vmov	r0, r1, d0
 8019f5a:	4b7e      	ldr	r3, [pc, #504]	; (801a154 <__kernel_rem_pio2+0x32c>)
 8019f5c:	f7e6 fb4c 	bl	80005f8 <__aeabi_dmul>
 8019f60:	4602      	mov	r2, r0
 8019f62:	460b      	mov	r3, r1
 8019f64:	4630      	mov	r0, r6
 8019f66:	4639      	mov	r1, r7
 8019f68:	f7e6 f98e 	bl	8000288 <__aeabi_dsub>
 8019f6c:	460f      	mov	r7, r1
 8019f6e:	4606      	mov	r6, r0
 8019f70:	f7e6 fdf2 	bl	8000b58 <__aeabi_d2iz>
 8019f74:	9006      	str	r0, [sp, #24]
 8019f76:	f7e6 fad5 	bl	8000524 <__aeabi_i2d>
 8019f7a:	4602      	mov	r2, r0
 8019f7c:	460b      	mov	r3, r1
 8019f7e:	4630      	mov	r0, r6
 8019f80:	4639      	mov	r1, r7
 8019f82:	f7e6 f981 	bl	8000288 <__aeabi_dsub>
 8019f86:	f1ba 0f00 	cmp.w	sl, #0
 8019f8a:	4606      	mov	r6, r0
 8019f8c:	460f      	mov	r7, r1
 8019f8e:	dd6c      	ble.n	801a06a <__kernel_rem_pio2+0x242>
 8019f90:	1e62      	subs	r2, r4, #1
 8019f92:	ab0e      	add	r3, sp, #56	; 0x38
 8019f94:	f1ca 0118 	rsb	r1, sl, #24
 8019f98:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8019f9c:	9d06      	ldr	r5, [sp, #24]
 8019f9e:	fa40 f301 	asr.w	r3, r0, r1
 8019fa2:	441d      	add	r5, r3
 8019fa4:	408b      	lsls	r3, r1
 8019fa6:	1ac0      	subs	r0, r0, r3
 8019fa8:	ab0e      	add	r3, sp, #56	; 0x38
 8019faa:	9506      	str	r5, [sp, #24]
 8019fac:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8019fb0:	f1ca 0317 	rsb	r3, sl, #23
 8019fb4:	fa40 f303 	asr.w	r3, r0, r3
 8019fb8:	9302      	str	r3, [sp, #8]
 8019fba:	9b02      	ldr	r3, [sp, #8]
 8019fbc:	2b00      	cmp	r3, #0
 8019fbe:	dd62      	ble.n	801a086 <__kernel_rem_pio2+0x25e>
 8019fc0:	9b06      	ldr	r3, [sp, #24]
 8019fc2:	2200      	movs	r2, #0
 8019fc4:	3301      	adds	r3, #1
 8019fc6:	9306      	str	r3, [sp, #24]
 8019fc8:	4615      	mov	r5, r2
 8019fca:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8019fce:	4294      	cmp	r4, r2
 8019fd0:	f300 8095 	bgt.w	801a0fe <__kernel_rem_pio2+0x2d6>
 8019fd4:	f1ba 0f00 	cmp.w	sl, #0
 8019fd8:	dd07      	ble.n	8019fea <__kernel_rem_pio2+0x1c2>
 8019fda:	f1ba 0f01 	cmp.w	sl, #1
 8019fde:	f000 80a2 	beq.w	801a126 <__kernel_rem_pio2+0x2fe>
 8019fe2:	f1ba 0f02 	cmp.w	sl, #2
 8019fe6:	f000 80c1 	beq.w	801a16c <__kernel_rem_pio2+0x344>
 8019fea:	9b02      	ldr	r3, [sp, #8]
 8019fec:	2b02      	cmp	r3, #2
 8019fee:	d14a      	bne.n	801a086 <__kernel_rem_pio2+0x25e>
 8019ff0:	4632      	mov	r2, r6
 8019ff2:	463b      	mov	r3, r7
 8019ff4:	2000      	movs	r0, #0
 8019ff6:	4958      	ldr	r1, [pc, #352]	; (801a158 <__kernel_rem_pio2+0x330>)
 8019ff8:	f7e6 f946 	bl	8000288 <__aeabi_dsub>
 8019ffc:	4606      	mov	r6, r0
 8019ffe:	460f      	mov	r7, r1
 801a000:	2d00      	cmp	r5, #0
 801a002:	d040      	beq.n	801a086 <__kernel_rem_pio2+0x25e>
 801a004:	4650      	mov	r0, sl
 801a006:	ed9f 0b50 	vldr	d0, [pc, #320]	; 801a148 <__kernel_rem_pio2+0x320>
 801a00a:	f000 fd3d 	bl	801aa88 <scalbn>
 801a00e:	4630      	mov	r0, r6
 801a010:	4639      	mov	r1, r7
 801a012:	ec53 2b10 	vmov	r2, r3, d0
 801a016:	f7e6 f937 	bl	8000288 <__aeabi_dsub>
 801a01a:	4606      	mov	r6, r0
 801a01c:	460f      	mov	r7, r1
 801a01e:	e032      	b.n	801a086 <__kernel_rem_pio2+0x25e>
 801a020:	2200      	movs	r2, #0
 801a022:	4b4e      	ldr	r3, [pc, #312]	; (801a15c <__kernel_rem_pio2+0x334>)
 801a024:	4640      	mov	r0, r8
 801a026:	4649      	mov	r1, r9
 801a028:	f7e6 fae6 	bl	80005f8 <__aeabi_dmul>
 801a02c:	f7e6 fd94 	bl	8000b58 <__aeabi_d2iz>
 801a030:	f7e6 fa78 	bl	8000524 <__aeabi_i2d>
 801a034:	2200      	movs	r2, #0
 801a036:	4b4a      	ldr	r3, [pc, #296]	; (801a160 <__kernel_rem_pio2+0x338>)
 801a038:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a03c:	f7e6 fadc 	bl	80005f8 <__aeabi_dmul>
 801a040:	4602      	mov	r2, r0
 801a042:	460b      	mov	r3, r1
 801a044:	4640      	mov	r0, r8
 801a046:	4649      	mov	r1, r9
 801a048:	f7e6 f91e 	bl	8000288 <__aeabi_dsub>
 801a04c:	f7e6 fd84 	bl	8000b58 <__aeabi_d2iz>
 801a050:	ab0e      	add	r3, sp, #56	; 0x38
 801a052:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 801a056:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801a05a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a05e:	f7e6 f915 	bl	800028c <__adddf3>
 801a062:	3501      	adds	r5, #1
 801a064:	4680      	mov	r8, r0
 801a066:	4689      	mov	r9, r1
 801a068:	e75e      	b.n	8019f28 <__kernel_rem_pio2+0x100>
 801a06a:	d105      	bne.n	801a078 <__kernel_rem_pio2+0x250>
 801a06c:	1e63      	subs	r3, r4, #1
 801a06e:	aa0e      	add	r2, sp, #56	; 0x38
 801a070:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801a074:	15c3      	asrs	r3, r0, #23
 801a076:	e79f      	b.n	8019fb8 <__kernel_rem_pio2+0x190>
 801a078:	2200      	movs	r2, #0
 801a07a:	4b3a      	ldr	r3, [pc, #232]	; (801a164 <__kernel_rem_pio2+0x33c>)
 801a07c:	f7e6 fd42 	bl	8000b04 <__aeabi_dcmpge>
 801a080:	2800      	cmp	r0, #0
 801a082:	d139      	bne.n	801a0f8 <__kernel_rem_pio2+0x2d0>
 801a084:	9002      	str	r0, [sp, #8]
 801a086:	2200      	movs	r2, #0
 801a088:	2300      	movs	r3, #0
 801a08a:	4630      	mov	r0, r6
 801a08c:	4639      	mov	r1, r7
 801a08e:	f7e6 fd1b 	bl	8000ac8 <__aeabi_dcmpeq>
 801a092:	2800      	cmp	r0, #0
 801a094:	f000 80c7 	beq.w	801a226 <__kernel_rem_pio2+0x3fe>
 801a098:	1e65      	subs	r5, r4, #1
 801a09a:	462b      	mov	r3, r5
 801a09c:	2200      	movs	r2, #0
 801a09e:	9904      	ldr	r1, [sp, #16]
 801a0a0:	428b      	cmp	r3, r1
 801a0a2:	da6a      	bge.n	801a17a <__kernel_rem_pio2+0x352>
 801a0a4:	2a00      	cmp	r2, #0
 801a0a6:	f000 8088 	beq.w	801a1ba <__kernel_rem_pio2+0x392>
 801a0aa:	ab0e      	add	r3, sp, #56	; 0x38
 801a0ac:	f1aa 0a18 	sub.w	sl, sl, #24
 801a0b0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801a0b4:	2b00      	cmp	r3, #0
 801a0b6:	f000 80b4 	beq.w	801a222 <__kernel_rem_pio2+0x3fa>
 801a0ba:	4650      	mov	r0, sl
 801a0bc:	ed9f 0b22 	vldr	d0, [pc, #136]	; 801a148 <__kernel_rem_pio2+0x320>
 801a0c0:	f000 fce2 	bl	801aa88 <scalbn>
 801a0c4:	00ec      	lsls	r4, r5, #3
 801a0c6:	ab72      	add	r3, sp, #456	; 0x1c8
 801a0c8:	191e      	adds	r6, r3, r4
 801a0ca:	ec59 8b10 	vmov	r8, r9, d0
 801a0ce:	f106 0a08 	add.w	sl, r6, #8
 801a0d2:	462f      	mov	r7, r5
 801a0d4:	2f00      	cmp	r7, #0
 801a0d6:	f280 80df 	bge.w	801a298 <__kernel_rem_pio2+0x470>
 801a0da:	ed9f 8b19 	vldr	d8, [pc, #100]	; 801a140 <__kernel_rem_pio2+0x318>
 801a0de:	f04f 0a00 	mov.w	sl, #0
 801a0e2:	eba5 030a 	sub.w	r3, r5, sl
 801a0e6:	2b00      	cmp	r3, #0
 801a0e8:	f2c0 810a 	blt.w	801a300 <__kernel_rem_pio2+0x4d8>
 801a0ec:	f8df b078 	ldr.w	fp, [pc, #120]	; 801a168 <__kernel_rem_pio2+0x340>
 801a0f0:	ec59 8b18 	vmov	r8, r9, d8
 801a0f4:	2700      	movs	r7, #0
 801a0f6:	e0f5      	b.n	801a2e4 <__kernel_rem_pio2+0x4bc>
 801a0f8:	2302      	movs	r3, #2
 801a0fa:	9302      	str	r3, [sp, #8]
 801a0fc:	e760      	b.n	8019fc0 <__kernel_rem_pio2+0x198>
 801a0fe:	ab0e      	add	r3, sp, #56	; 0x38
 801a100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a104:	b94d      	cbnz	r5, 801a11a <__kernel_rem_pio2+0x2f2>
 801a106:	b12b      	cbz	r3, 801a114 <__kernel_rem_pio2+0x2ec>
 801a108:	a80e      	add	r0, sp, #56	; 0x38
 801a10a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801a10e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801a112:	2301      	movs	r3, #1
 801a114:	3201      	adds	r2, #1
 801a116:	461d      	mov	r5, r3
 801a118:	e759      	b.n	8019fce <__kernel_rem_pio2+0x1a6>
 801a11a:	a80e      	add	r0, sp, #56	; 0x38
 801a11c:	1acb      	subs	r3, r1, r3
 801a11e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801a122:	462b      	mov	r3, r5
 801a124:	e7f6      	b.n	801a114 <__kernel_rem_pio2+0x2ec>
 801a126:	1e62      	subs	r2, r4, #1
 801a128:	ab0e      	add	r3, sp, #56	; 0x38
 801a12a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a12e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801a132:	a90e      	add	r1, sp, #56	; 0x38
 801a134:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801a138:	e757      	b.n	8019fea <__kernel_rem_pio2+0x1c2>
 801a13a:	bf00      	nop
 801a13c:	f3af 8000 	nop.w
	...
 801a14c:	3ff00000 	.word	0x3ff00000
 801a150:	0801b5a0 	.word	0x0801b5a0
 801a154:	40200000 	.word	0x40200000
 801a158:	3ff00000 	.word	0x3ff00000
 801a15c:	3e700000 	.word	0x3e700000
 801a160:	41700000 	.word	0x41700000
 801a164:	3fe00000 	.word	0x3fe00000
 801a168:	0801b560 	.word	0x0801b560
 801a16c:	1e62      	subs	r2, r4, #1
 801a16e:	ab0e      	add	r3, sp, #56	; 0x38
 801a170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a174:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801a178:	e7db      	b.n	801a132 <__kernel_rem_pio2+0x30a>
 801a17a:	a90e      	add	r1, sp, #56	; 0x38
 801a17c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801a180:	3b01      	subs	r3, #1
 801a182:	430a      	orrs	r2, r1
 801a184:	e78b      	b.n	801a09e <__kernel_rem_pio2+0x276>
 801a186:	3301      	adds	r3, #1
 801a188:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801a18c:	2900      	cmp	r1, #0
 801a18e:	d0fa      	beq.n	801a186 <__kernel_rem_pio2+0x35e>
 801a190:	9a08      	ldr	r2, [sp, #32]
 801a192:	4422      	add	r2, r4
 801a194:	00d2      	lsls	r2, r2, #3
 801a196:	a922      	add	r1, sp, #136	; 0x88
 801a198:	18e3      	adds	r3, r4, r3
 801a19a:	9206      	str	r2, [sp, #24]
 801a19c:	440a      	add	r2, r1
 801a19e:	9302      	str	r3, [sp, #8]
 801a1a0:	f10b 0108 	add.w	r1, fp, #8
 801a1a4:	f102 0308 	add.w	r3, r2, #8
 801a1a8:	1c66      	adds	r6, r4, #1
 801a1aa:	910a      	str	r1, [sp, #40]	; 0x28
 801a1ac:	2500      	movs	r5, #0
 801a1ae:	930d      	str	r3, [sp, #52]	; 0x34
 801a1b0:	9b02      	ldr	r3, [sp, #8]
 801a1b2:	42b3      	cmp	r3, r6
 801a1b4:	da04      	bge.n	801a1c0 <__kernel_rem_pio2+0x398>
 801a1b6:	461c      	mov	r4, r3
 801a1b8:	e6a6      	b.n	8019f08 <__kernel_rem_pio2+0xe0>
 801a1ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a1bc:	2301      	movs	r3, #1
 801a1be:	e7e3      	b.n	801a188 <__kernel_rem_pio2+0x360>
 801a1c0:	9b06      	ldr	r3, [sp, #24]
 801a1c2:	18ef      	adds	r7, r5, r3
 801a1c4:	ab22      	add	r3, sp, #136	; 0x88
 801a1c6:	441f      	add	r7, r3
 801a1c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a1ca:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801a1ce:	f7e6 f9a9 	bl	8000524 <__aeabi_i2d>
 801a1d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a1d4:	461c      	mov	r4, r3
 801a1d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a1d8:	e9c7 0100 	strd	r0, r1, [r7]
 801a1dc:	eb03 0b05 	add.w	fp, r3, r5
 801a1e0:	2700      	movs	r7, #0
 801a1e2:	f04f 0800 	mov.w	r8, #0
 801a1e6:	f04f 0900 	mov.w	r9, #0
 801a1ea:	9b07      	ldr	r3, [sp, #28]
 801a1ec:	429f      	cmp	r7, r3
 801a1ee:	dd08      	ble.n	801a202 <__kernel_rem_pio2+0x3da>
 801a1f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a1f2:	aa72      	add	r2, sp, #456	; 0x1c8
 801a1f4:	18eb      	adds	r3, r5, r3
 801a1f6:	4413      	add	r3, r2
 801a1f8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 801a1fc:	3601      	adds	r6, #1
 801a1fe:	3508      	adds	r5, #8
 801a200:	e7d6      	b.n	801a1b0 <__kernel_rem_pio2+0x388>
 801a202:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801a206:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801a20a:	f7e6 f9f5 	bl	80005f8 <__aeabi_dmul>
 801a20e:	4602      	mov	r2, r0
 801a210:	460b      	mov	r3, r1
 801a212:	4640      	mov	r0, r8
 801a214:	4649      	mov	r1, r9
 801a216:	f7e6 f839 	bl	800028c <__adddf3>
 801a21a:	3701      	adds	r7, #1
 801a21c:	4680      	mov	r8, r0
 801a21e:	4689      	mov	r9, r1
 801a220:	e7e3      	b.n	801a1ea <__kernel_rem_pio2+0x3c2>
 801a222:	3d01      	subs	r5, #1
 801a224:	e741      	b.n	801a0aa <__kernel_rem_pio2+0x282>
 801a226:	f1ca 0000 	rsb	r0, sl, #0
 801a22a:	ec47 6b10 	vmov	d0, r6, r7
 801a22e:	f000 fc2b 	bl	801aa88 <scalbn>
 801a232:	ec57 6b10 	vmov	r6, r7, d0
 801a236:	2200      	movs	r2, #0
 801a238:	4b99      	ldr	r3, [pc, #612]	; (801a4a0 <__kernel_rem_pio2+0x678>)
 801a23a:	ee10 0a10 	vmov	r0, s0
 801a23e:	4639      	mov	r1, r7
 801a240:	f7e6 fc60 	bl	8000b04 <__aeabi_dcmpge>
 801a244:	b1f8      	cbz	r0, 801a286 <__kernel_rem_pio2+0x45e>
 801a246:	2200      	movs	r2, #0
 801a248:	4b96      	ldr	r3, [pc, #600]	; (801a4a4 <__kernel_rem_pio2+0x67c>)
 801a24a:	4630      	mov	r0, r6
 801a24c:	4639      	mov	r1, r7
 801a24e:	f7e6 f9d3 	bl	80005f8 <__aeabi_dmul>
 801a252:	f7e6 fc81 	bl	8000b58 <__aeabi_d2iz>
 801a256:	4680      	mov	r8, r0
 801a258:	f7e6 f964 	bl	8000524 <__aeabi_i2d>
 801a25c:	2200      	movs	r2, #0
 801a25e:	4b90      	ldr	r3, [pc, #576]	; (801a4a0 <__kernel_rem_pio2+0x678>)
 801a260:	f7e6 f9ca 	bl	80005f8 <__aeabi_dmul>
 801a264:	460b      	mov	r3, r1
 801a266:	4602      	mov	r2, r0
 801a268:	4639      	mov	r1, r7
 801a26a:	4630      	mov	r0, r6
 801a26c:	f7e6 f80c 	bl	8000288 <__aeabi_dsub>
 801a270:	f7e6 fc72 	bl	8000b58 <__aeabi_d2iz>
 801a274:	1c65      	adds	r5, r4, #1
 801a276:	ab0e      	add	r3, sp, #56	; 0x38
 801a278:	f10a 0a18 	add.w	sl, sl, #24
 801a27c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801a280:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801a284:	e719      	b.n	801a0ba <__kernel_rem_pio2+0x292>
 801a286:	4630      	mov	r0, r6
 801a288:	4639      	mov	r1, r7
 801a28a:	f7e6 fc65 	bl	8000b58 <__aeabi_d2iz>
 801a28e:	ab0e      	add	r3, sp, #56	; 0x38
 801a290:	4625      	mov	r5, r4
 801a292:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801a296:	e710      	b.n	801a0ba <__kernel_rem_pio2+0x292>
 801a298:	ab0e      	add	r3, sp, #56	; 0x38
 801a29a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801a29e:	f7e6 f941 	bl	8000524 <__aeabi_i2d>
 801a2a2:	4642      	mov	r2, r8
 801a2a4:	464b      	mov	r3, r9
 801a2a6:	f7e6 f9a7 	bl	80005f8 <__aeabi_dmul>
 801a2aa:	2200      	movs	r2, #0
 801a2ac:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 801a2b0:	4b7c      	ldr	r3, [pc, #496]	; (801a4a4 <__kernel_rem_pio2+0x67c>)
 801a2b2:	4640      	mov	r0, r8
 801a2b4:	4649      	mov	r1, r9
 801a2b6:	f7e6 f99f 	bl	80005f8 <__aeabi_dmul>
 801a2ba:	3f01      	subs	r7, #1
 801a2bc:	4680      	mov	r8, r0
 801a2be:	4689      	mov	r9, r1
 801a2c0:	e708      	b.n	801a0d4 <__kernel_rem_pio2+0x2ac>
 801a2c2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 801a2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2ca:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 801a2ce:	f7e6 f993 	bl	80005f8 <__aeabi_dmul>
 801a2d2:	4602      	mov	r2, r0
 801a2d4:	460b      	mov	r3, r1
 801a2d6:	4640      	mov	r0, r8
 801a2d8:	4649      	mov	r1, r9
 801a2da:	f7e5 ffd7 	bl	800028c <__adddf3>
 801a2de:	3701      	adds	r7, #1
 801a2e0:	4680      	mov	r8, r0
 801a2e2:	4689      	mov	r9, r1
 801a2e4:	9b04      	ldr	r3, [sp, #16]
 801a2e6:	429f      	cmp	r7, r3
 801a2e8:	dc01      	bgt.n	801a2ee <__kernel_rem_pio2+0x4c6>
 801a2ea:	45ba      	cmp	sl, r7
 801a2ec:	dae9      	bge.n	801a2c2 <__kernel_rem_pio2+0x49a>
 801a2ee:	ab4a      	add	r3, sp, #296	; 0x128
 801a2f0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801a2f4:	e9c3 8900 	strd	r8, r9, [r3]
 801a2f8:	f10a 0a01 	add.w	sl, sl, #1
 801a2fc:	3e08      	subs	r6, #8
 801a2fe:	e6f0      	b.n	801a0e2 <__kernel_rem_pio2+0x2ba>
 801a300:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801a302:	2b03      	cmp	r3, #3
 801a304:	d85b      	bhi.n	801a3be <__kernel_rem_pio2+0x596>
 801a306:	e8df f003 	tbb	[pc, r3]
 801a30a:	264a      	.short	0x264a
 801a30c:	0226      	.short	0x0226
 801a30e:	ab9a      	add	r3, sp, #616	; 0x268
 801a310:	441c      	add	r4, r3
 801a312:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801a316:	46a2      	mov	sl, r4
 801a318:	46ab      	mov	fp, r5
 801a31a:	f1bb 0f00 	cmp.w	fp, #0
 801a31e:	dc6c      	bgt.n	801a3fa <__kernel_rem_pio2+0x5d2>
 801a320:	46a2      	mov	sl, r4
 801a322:	46ab      	mov	fp, r5
 801a324:	f1bb 0f01 	cmp.w	fp, #1
 801a328:	f300 8086 	bgt.w	801a438 <__kernel_rem_pio2+0x610>
 801a32c:	2000      	movs	r0, #0
 801a32e:	2100      	movs	r1, #0
 801a330:	2d01      	cmp	r5, #1
 801a332:	f300 80a0 	bgt.w	801a476 <__kernel_rem_pio2+0x64e>
 801a336:	9b02      	ldr	r3, [sp, #8]
 801a338:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801a33c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 801a340:	2b00      	cmp	r3, #0
 801a342:	f040 809e 	bne.w	801a482 <__kernel_rem_pio2+0x65a>
 801a346:	9b01      	ldr	r3, [sp, #4]
 801a348:	e9c3 7800 	strd	r7, r8, [r3]
 801a34c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801a350:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801a354:	e033      	b.n	801a3be <__kernel_rem_pio2+0x596>
 801a356:	3408      	adds	r4, #8
 801a358:	ab4a      	add	r3, sp, #296	; 0x128
 801a35a:	441c      	add	r4, r3
 801a35c:	462e      	mov	r6, r5
 801a35e:	2000      	movs	r0, #0
 801a360:	2100      	movs	r1, #0
 801a362:	2e00      	cmp	r6, #0
 801a364:	da3a      	bge.n	801a3dc <__kernel_rem_pio2+0x5b4>
 801a366:	9b02      	ldr	r3, [sp, #8]
 801a368:	2b00      	cmp	r3, #0
 801a36a:	d03d      	beq.n	801a3e8 <__kernel_rem_pio2+0x5c0>
 801a36c:	4602      	mov	r2, r0
 801a36e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a372:	9c01      	ldr	r4, [sp, #4]
 801a374:	e9c4 2300 	strd	r2, r3, [r4]
 801a378:	4602      	mov	r2, r0
 801a37a:	460b      	mov	r3, r1
 801a37c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 801a380:	f7e5 ff82 	bl	8000288 <__aeabi_dsub>
 801a384:	ae4c      	add	r6, sp, #304	; 0x130
 801a386:	2401      	movs	r4, #1
 801a388:	42a5      	cmp	r5, r4
 801a38a:	da30      	bge.n	801a3ee <__kernel_rem_pio2+0x5c6>
 801a38c:	9b02      	ldr	r3, [sp, #8]
 801a38e:	b113      	cbz	r3, 801a396 <__kernel_rem_pio2+0x56e>
 801a390:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a394:	4619      	mov	r1, r3
 801a396:	9b01      	ldr	r3, [sp, #4]
 801a398:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801a39c:	e00f      	b.n	801a3be <__kernel_rem_pio2+0x596>
 801a39e:	ab9a      	add	r3, sp, #616	; 0x268
 801a3a0:	441c      	add	r4, r3
 801a3a2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801a3a6:	2000      	movs	r0, #0
 801a3a8:	2100      	movs	r1, #0
 801a3aa:	2d00      	cmp	r5, #0
 801a3ac:	da10      	bge.n	801a3d0 <__kernel_rem_pio2+0x5a8>
 801a3ae:	9b02      	ldr	r3, [sp, #8]
 801a3b0:	b113      	cbz	r3, 801a3b8 <__kernel_rem_pio2+0x590>
 801a3b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a3b6:	4619      	mov	r1, r3
 801a3b8:	9b01      	ldr	r3, [sp, #4]
 801a3ba:	e9c3 0100 	strd	r0, r1, [r3]
 801a3be:	9b06      	ldr	r3, [sp, #24]
 801a3c0:	f003 0007 	and.w	r0, r3, #7
 801a3c4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 801a3c8:	ecbd 8b02 	vpop	{d8}
 801a3cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a3d0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801a3d4:	f7e5 ff5a 	bl	800028c <__adddf3>
 801a3d8:	3d01      	subs	r5, #1
 801a3da:	e7e6      	b.n	801a3aa <__kernel_rem_pio2+0x582>
 801a3dc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801a3e0:	f7e5 ff54 	bl	800028c <__adddf3>
 801a3e4:	3e01      	subs	r6, #1
 801a3e6:	e7bc      	b.n	801a362 <__kernel_rem_pio2+0x53a>
 801a3e8:	4602      	mov	r2, r0
 801a3ea:	460b      	mov	r3, r1
 801a3ec:	e7c1      	b.n	801a372 <__kernel_rem_pio2+0x54a>
 801a3ee:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801a3f2:	f7e5 ff4b 	bl	800028c <__adddf3>
 801a3f6:	3401      	adds	r4, #1
 801a3f8:	e7c6      	b.n	801a388 <__kernel_rem_pio2+0x560>
 801a3fa:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 801a3fe:	ed3a 7b02 	vldmdb	sl!, {d7}
 801a402:	4640      	mov	r0, r8
 801a404:	ec53 2b17 	vmov	r2, r3, d7
 801a408:	4649      	mov	r1, r9
 801a40a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801a40e:	f7e5 ff3d 	bl	800028c <__adddf3>
 801a412:	4602      	mov	r2, r0
 801a414:	460b      	mov	r3, r1
 801a416:	4606      	mov	r6, r0
 801a418:	460f      	mov	r7, r1
 801a41a:	4640      	mov	r0, r8
 801a41c:	4649      	mov	r1, r9
 801a41e:	f7e5 ff33 	bl	8000288 <__aeabi_dsub>
 801a422:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a426:	f7e5 ff31 	bl	800028c <__adddf3>
 801a42a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a42e:	e9ca 0100 	strd	r0, r1, [sl]
 801a432:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801a436:	e770      	b.n	801a31a <__kernel_rem_pio2+0x4f2>
 801a438:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 801a43c:	ed3a 7b02 	vldmdb	sl!, {d7}
 801a440:	4630      	mov	r0, r6
 801a442:	ec53 2b17 	vmov	r2, r3, d7
 801a446:	4639      	mov	r1, r7
 801a448:	ed8d 7b04 	vstr	d7, [sp, #16]
 801a44c:	f7e5 ff1e 	bl	800028c <__adddf3>
 801a450:	4602      	mov	r2, r0
 801a452:	460b      	mov	r3, r1
 801a454:	4680      	mov	r8, r0
 801a456:	4689      	mov	r9, r1
 801a458:	4630      	mov	r0, r6
 801a45a:	4639      	mov	r1, r7
 801a45c:	f7e5 ff14 	bl	8000288 <__aeabi_dsub>
 801a460:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a464:	f7e5 ff12 	bl	800028c <__adddf3>
 801a468:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a46c:	e9ca 0100 	strd	r0, r1, [sl]
 801a470:	e94a 8902 	strd	r8, r9, [sl, #-8]
 801a474:	e756      	b.n	801a324 <__kernel_rem_pio2+0x4fc>
 801a476:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801a47a:	f7e5 ff07 	bl	800028c <__adddf3>
 801a47e:	3d01      	subs	r5, #1
 801a480:	e756      	b.n	801a330 <__kernel_rem_pio2+0x508>
 801a482:	9b01      	ldr	r3, [sp, #4]
 801a484:	9a01      	ldr	r2, [sp, #4]
 801a486:	601f      	str	r7, [r3, #0]
 801a488:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 801a48c:	605c      	str	r4, [r3, #4]
 801a48e:	609d      	str	r5, [r3, #8]
 801a490:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801a494:	60d3      	str	r3, [r2, #12]
 801a496:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a49a:	6110      	str	r0, [r2, #16]
 801a49c:	6153      	str	r3, [r2, #20]
 801a49e:	e78e      	b.n	801a3be <__kernel_rem_pio2+0x596>
 801a4a0:	41700000 	.word	0x41700000
 801a4a4:	3e700000 	.word	0x3e700000

0801a4a8 <__kernel_sin>:
 801a4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a4ac:	ec55 4b10 	vmov	r4, r5, d0
 801a4b0:	b085      	sub	sp, #20
 801a4b2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801a4b6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801a4ba:	ed8d 1b00 	vstr	d1, [sp]
 801a4be:	9002      	str	r0, [sp, #8]
 801a4c0:	da06      	bge.n	801a4d0 <__kernel_sin+0x28>
 801a4c2:	ee10 0a10 	vmov	r0, s0
 801a4c6:	4629      	mov	r1, r5
 801a4c8:	f7e6 fb46 	bl	8000b58 <__aeabi_d2iz>
 801a4cc:	2800      	cmp	r0, #0
 801a4ce:	d051      	beq.n	801a574 <__kernel_sin+0xcc>
 801a4d0:	4622      	mov	r2, r4
 801a4d2:	462b      	mov	r3, r5
 801a4d4:	4620      	mov	r0, r4
 801a4d6:	4629      	mov	r1, r5
 801a4d8:	f7e6 f88e 	bl	80005f8 <__aeabi_dmul>
 801a4dc:	4682      	mov	sl, r0
 801a4de:	468b      	mov	fp, r1
 801a4e0:	4602      	mov	r2, r0
 801a4e2:	460b      	mov	r3, r1
 801a4e4:	4620      	mov	r0, r4
 801a4e6:	4629      	mov	r1, r5
 801a4e8:	f7e6 f886 	bl	80005f8 <__aeabi_dmul>
 801a4ec:	a341      	add	r3, pc, #260	; (adr r3, 801a5f4 <__kernel_sin+0x14c>)
 801a4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4f2:	4680      	mov	r8, r0
 801a4f4:	4689      	mov	r9, r1
 801a4f6:	4650      	mov	r0, sl
 801a4f8:	4659      	mov	r1, fp
 801a4fa:	f7e6 f87d 	bl	80005f8 <__aeabi_dmul>
 801a4fe:	a33f      	add	r3, pc, #252	; (adr r3, 801a5fc <__kernel_sin+0x154>)
 801a500:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a504:	f7e5 fec0 	bl	8000288 <__aeabi_dsub>
 801a508:	4652      	mov	r2, sl
 801a50a:	465b      	mov	r3, fp
 801a50c:	f7e6 f874 	bl	80005f8 <__aeabi_dmul>
 801a510:	a33c      	add	r3, pc, #240	; (adr r3, 801a604 <__kernel_sin+0x15c>)
 801a512:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a516:	f7e5 feb9 	bl	800028c <__adddf3>
 801a51a:	4652      	mov	r2, sl
 801a51c:	465b      	mov	r3, fp
 801a51e:	f7e6 f86b 	bl	80005f8 <__aeabi_dmul>
 801a522:	a33a      	add	r3, pc, #232	; (adr r3, 801a60c <__kernel_sin+0x164>)
 801a524:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a528:	f7e5 feae 	bl	8000288 <__aeabi_dsub>
 801a52c:	4652      	mov	r2, sl
 801a52e:	465b      	mov	r3, fp
 801a530:	f7e6 f862 	bl	80005f8 <__aeabi_dmul>
 801a534:	a337      	add	r3, pc, #220	; (adr r3, 801a614 <__kernel_sin+0x16c>)
 801a536:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a53a:	f7e5 fea7 	bl	800028c <__adddf3>
 801a53e:	9b02      	ldr	r3, [sp, #8]
 801a540:	4606      	mov	r6, r0
 801a542:	460f      	mov	r7, r1
 801a544:	b9db      	cbnz	r3, 801a57e <__kernel_sin+0xd6>
 801a546:	4602      	mov	r2, r0
 801a548:	460b      	mov	r3, r1
 801a54a:	4650      	mov	r0, sl
 801a54c:	4659      	mov	r1, fp
 801a54e:	f7e6 f853 	bl	80005f8 <__aeabi_dmul>
 801a552:	a325      	add	r3, pc, #148	; (adr r3, 801a5e8 <__kernel_sin+0x140>)
 801a554:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a558:	f7e5 fe96 	bl	8000288 <__aeabi_dsub>
 801a55c:	4642      	mov	r2, r8
 801a55e:	464b      	mov	r3, r9
 801a560:	f7e6 f84a 	bl	80005f8 <__aeabi_dmul>
 801a564:	4602      	mov	r2, r0
 801a566:	460b      	mov	r3, r1
 801a568:	4620      	mov	r0, r4
 801a56a:	4629      	mov	r1, r5
 801a56c:	f7e5 fe8e 	bl	800028c <__adddf3>
 801a570:	4604      	mov	r4, r0
 801a572:	460d      	mov	r5, r1
 801a574:	ec45 4b10 	vmov	d0, r4, r5
 801a578:	b005      	add	sp, #20
 801a57a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a57e:	2200      	movs	r2, #0
 801a580:	4b1b      	ldr	r3, [pc, #108]	; (801a5f0 <__kernel_sin+0x148>)
 801a582:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a586:	f7e6 f837 	bl	80005f8 <__aeabi_dmul>
 801a58a:	4632      	mov	r2, r6
 801a58c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a590:	463b      	mov	r3, r7
 801a592:	4640      	mov	r0, r8
 801a594:	4649      	mov	r1, r9
 801a596:	f7e6 f82f 	bl	80005f8 <__aeabi_dmul>
 801a59a:	4602      	mov	r2, r0
 801a59c:	460b      	mov	r3, r1
 801a59e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a5a2:	f7e5 fe71 	bl	8000288 <__aeabi_dsub>
 801a5a6:	4652      	mov	r2, sl
 801a5a8:	465b      	mov	r3, fp
 801a5aa:	f7e6 f825 	bl	80005f8 <__aeabi_dmul>
 801a5ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a5b2:	f7e5 fe69 	bl	8000288 <__aeabi_dsub>
 801a5b6:	a30c      	add	r3, pc, #48	; (adr r3, 801a5e8 <__kernel_sin+0x140>)
 801a5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5bc:	4606      	mov	r6, r0
 801a5be:	460f      	mov	r7, r1
 801a5c0:	4640      	mov	r0, r8
 801a5c2:	4649      	mov	r1, r9
 801a5c4:	f7e6 f818 	bl	80005f8 <__aeabi_dmul>
 801a5c8:	4602      	mov	r2, r0
 801a5ca:	460b      	mov	r3, r1
 801a5cc:	4630      	mov	r0, r6
 801a5ce:	4639      	mov	r1, r7
 801a5d0:	f7e5 fe5c 	bl	800028c <__adddf3>
 801a5d4:	4602      	mov	r2, r0
 801a5d6:	460b      	mov	r3, r1
 801a5d8:	4620      	mov	r0, r4
 801a5da:	4629      	mov	r1, r5
 801a5dc:	f7e5 fe54 	bl	8000288 <__aeabi_dsub>
 801a5e0:	e7c6      	b.n	801a570 <__kernel_sin+0xc8>
 801a5e2:	bf00      	nop
 801a5e4:	f3af 8000 	nop.w
 801a5e8:	55555549 	.word	0x55555549
 801a5ec:	3fc55555 	.word	0x3fc55555
 801a5f0:	3fe00000 	.word	0x3fe00000
 801a5f4:	5acfd57c 	.word	0x5acfd57c
 801a5f8:	3de5d93a 	.word	0x3de5d93a
 801a5fc:	8a2b9ceb 	.word	0x8a2b9ceb
 801a600:	3e5ae5e6 	.word	0x3e5ae5e6
 801a604:	57b1fe7d 	.word	0x57b1fe7d
 801a608:	3ec71de3 	.word	0x3ec71de3
 801a60c:	19c161d5 	.word	0x19c161d5
 801a610:	3f2a01a0 	.word	0x3f2a01a0
 801a614:	1110f8a6 	.word	0x1110f8a6
 801a618:	3f811111 	.word	0x3f811111
 801a61c:	00000000 	.word	0x00000000

0801a620 <atan>:
 801a620:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a624:	ec55 4b10 	vmov	r4, r5, d0
 801a628:	4bc3      	ldr	r3, [pc, #780]	; (801a938 <atan+0x318>)
 801a62a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801a62e:	429e      	cmp	r6, r3
 801a630:	46ab      	mov	fp, r5
 801a632:	dd18      	ble.n	801a666 <atan+0x46>
 801a634:	4bc1      	ldr	r3, [pc, #772]	; (801a93c <atan+0x31c>)
 801a636:	429e      	cmp	r6, r3
 801a638:	dc01      	bgt.n	801a63e <atan+0x1e>
 801a63a:	d109      	bne.n	801a650 <atan+0x30>
 801a63c:	b144      	cbz	r4, 801a650 <atan+0x30>
 801a63e:	4622      	mov	r2, r4
 801a640:	462b      	mov	r3, r5
 801a642:	4620      	mov	r0, r4
 801a644:	4629      	mov	r1, r5
 801a646:	f7e5 fe21 	bl	800028c <__adddf3>
 801a64a:	4604      	mov	r4, r0
 801a64c:	460d      	mov	r5, r1
 801a64e:	e006      	b.n	801a65e <atan+0x3e>
 801a650:	f1bb 0f00 	cmp.w	fp, #0
 801a654:	f340 8131 	ble.w	801a8ba <atan+0x29a>
 801a658:	a59b      	add	r5, pc, #620	; (adr r5, 801a8c8 <atan+0x2a8>)
 801a65a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801a65e:	ec45 4b10 	vmov	d0, r4, r5
 801a662:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a666:	4bb6      	ldr	r3, [pc, #728]	; (801a940 <atan+0x320>)
 801a668:	429e      	cmp	r6, r3
 801a66a:	dc14      	bgt.n	801a696 <atan+0x76>
 801a66c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801a670:	429e      	cmp	r6, r3
 801a672:	dc0d      	bgt.n	801a690 <atan+0x70>
 801a674:	a396      	add	r3, pc, #600	; (adr r3, 801a8d0 <atan+0x2b0>)
 801a676:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a67a:	ee10 0a10 	vmov	r0, s0
 801a67e:	4629      	mov	r1, r5
 801a680:	f7e5 fe04 	bl	800028c <__adddf3>
 801a684:	2200      	movs	r2, #0
 801a686:	4baf      	ldr	r3, [pc, #700]	; (801a944 <atan+0x324>)
 801a688:	f7e6 fa46 	bl	8000b18 <__aeabi_dcmpgt>
 801a68c:	2800      	cmp	r0, #0
 801a68e:	d1e6      	bne.n	801a65e <atan+0x3e>
 801a690:	f04f 3aff 	mov.w	sl, #4294967295
 801a694:	e02b      	b.n	801a6ee <atan+0xce>
 801a696:	f000 f963 	bl	801a960 <fabs>
 801a69a:	4bab      	ldr	r3, [pc, #684]	; (801a948 <atan+0x328>)
 801a69c:	429e      	cmp	r6, r3
 801a69e:	ec55 4b10 	vmov	r4, r5, d0
 801a6a2:	f300 80bf 	bgt.w	801a824 <atan+0x204>
 801a6a6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801a6aa:	429e      	cmp	r6, r3
 801a6ac:	f300 80a0 	bgt.w	801a7f0 <atan+0x1d0>
 801a6b0:	ee10 2a10 	vmov	r2, s0
 801a6b4:	ee10 0a10 	vmov	r0, s0
 801a6b8:	462b      	mov	r3, r5
 801a6ba:	4629      	mov	r1, r5
 801a6bc:	f7e5 fde6 	bl	800028c <__adddf3>
 801a6c0:	2200      	movs	r2, #0
 801a6c2:	4ba0      	ldr	r3, [pc, #640]	; (801a944 <atan+0x324>)
 801a6c4:	f7e5 fde0 	bl	8000288 <__aeabi_dsub>
 801a6c8:	2200      	movs	r2, #0
 801a6ca:	4606      	mov	r6, r0
 801a6cc:	460f      	mov	r7, r1
 801a6ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801a6d2:	4620      	mov	r0, r4
 801a6d4:	4629      	mov	r1, r5
 801a6d6:	f7e5 fdd9 	bl	800028c <__adddf3>
 801a6da:	4602      	mov	r2, r0
 801a6dc:	460b      	mov	r3, r1
 801a6de:	4630      	mov	r0, r6
 801a6e0:	4639      	mov	r1, r7
 801a6e2:	f7e6 f8b3 	bl	800084c <__aeabi_ddiv>
 801a6e6:	f04f 0a00 	mov.w	sl, #0
 801a6ea:	4604      	mov	r4, r0
 801a6ec:	460d      	mov	r5, r1
 801a6ee:	4622      	mov	r2, r4
 801a6f0:	462b      	mov	r3, r5
 801a6f2:	4620      	mov	r0, r4
 801a6f4:	4629      	mov	r1, r5
 801a6f6:	f7e5 ff7f 	bl	80005f8 <__aeabi_dmul>
 801a6fa:	4602      	mov	r2, r0
 801a6fc:	460b      	mov	r3, r1
 801a6fe:	4680      	mov	r8, r0
 801a700:	4689      	mov	r9, r1
 801a702:	f7e5 ff79 	bl	80005f8 <__aeabi_dmul>
 801a706:	a374      	add	r3, pc, #464	; (adr r3, 801a8d8 <atan+0x2b8>)
 801a708:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a70c:	4606      	mov	r6, r0
 801a70e:	460f      	mov	r7, r1
 801a710:	f7e5 ff72 	bl	80005f8 <__aeabi_dmul>
 801a714:	a372      	add	r3, pc, #456	; (adr r3, 801a8e0 <atan+0x2c0>)
 801a716:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a71a:	f7e5 fdb7 	bl	800028c <__adddf3>
 801a71e:	4632      	mov	r2, r6
 801a720:	463b      	mov	r3, r7
 801a722:	f7e5 ff69 	bl	80005f8 <__aeabi_dmul>
 801a726:	a370      	add	r3, pc, #448	; (adr r3, 801a8e8 <atan+0x2c8>)
 801a728:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a72c:	f7e5 fdae 	bl	800028c <__adddf3>
 801a730:	4632      	mov	r2, r6
 801a732:	463b      	mov	r3, r7
 801a734:	f7e5 ff60 	bl	80005f8 <__aeabi_dmul>
 801a738:	a36d      	add	r3, pc, #436	; (adr r3, 801a8f0 <atan+0x2d0>)
 801a73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a73e:	f7e5 fda5 	bl	800028c <__adddf3>
 801a742:	4632      	mov	r2, r6
 801a744:	463b      	mov	r3, r7
 801a746:	f7e5 ff57 	bl	80005f8 <__aeabi_dmul>
 801a74a:	a36b      	add	r3, pc, #428	; (adr r3, 801a8f8 <atan+0x2d8>)
 801a74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a750:	f7e5 fd9c 	bl	800028c <__adddf3>
 801a754:	4632      	mov	r2, r6
 801a756:	463b      	mov	r3, r7
 801a758:	f7e5 ff4e 	bl	80005f8 <__aeabi_dmul>
 801a75c:	a368      	add	r3, pc, #416	; (adr r3, 801a900 <atan+0x2e0>)
 801a75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a762:	f7e5 fd93 	bl	800028c <__adddf3>
 801a766:	4642      	mov	r2, r8
 801a768:	464b      	mov	r3, r9
 801a76a:	f7e5 ff45 	bl	80005f8 <__aeabi_dmul>
 801a76e:	a366      	add	r3, pc, #408	; (adr r3, 801a908 <atan+0x2e8>)
 801a770:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a774:	4680      	mov	r8, r0
 801a776:	4689      	mov	r9, r1
 801a778:	4630      	mov	r0, r6
 801a77a:	4639      	mov	r1, r7
 801a77c:	f7e5 ff3c 	bl	80005f8 <__aeabi_dmul>
 801a780:	a363      	add	r3, pc, #396	; (adr r3, 801a910 <atan+0x2f0>)
 801a782:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a786:	f7e5 fd7f 	bl	8000288 <__aeabi_dsub>
 801a78a:	4632      	mov	r2, r6
 801a78c:	463b      	mov	r3, r7
 801a78e:	f7e5 ff33 	bl	80005f8 <__aeabi_dmul>
 801a792:	a361      	add	r3, pc, #388	; (adr r3, 801a918 <atan+0x2f8>)
 801a794:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a798:	f7e5 fd76 	bl	8000288 <__aeabi_dsub>
 801a79c:	4632      	mov	r2, r6
 801a79e:	463b      	mov	r3, r7
 801a7a0:	f7e5 ff2a 	bl	80005f8 <__aeabi_dmul>
 801a7a4:	a35e      	add	r3, pc, #376	; (adr r3, 801a920 <atan+0x300>)
 801a7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7aa:	f7e5 fd6d 	bl	8000288 <__aeabi_dsub>
 801a7ae:	4632      	mov	r2, r6
 801a7b0:	463b      	mov	r3, r7
 801a7b2:	f7e5 ff21 	bl	80005f8 <__aeabi_dmul>
 801a7b6:	a35c      	add	r3, pc, #368	; (adr r3, 801a928 <atan+0x308>)
 801a7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7bc:	f7e5 fd64 	bl	8000288 <__aeabi_dsub>
 801a7c0:	4632      	mov	r2, r6
 801a7c2:	463b      	mov	r3, r7
 801a7c4:	f7e5 ff18 	bl	80005f8 <__aeabi_dmul>
 801a7c8:	4602      	mov	r2, r0
 801a7ca:	460b      	mov	r3, r1
 801a7cc:	4640      	mov	r0, r8
 801a7ce:	4649      	mov	r1, r9
 801a7d0:	f7e5 fd5c 	bl	800028c <__adddf3>
 801a7d4:	4622      	mov	r2, r4
 801a7d6:	462b      	mov	r3, r5
 801a7d8:	f7e5 ff0e 	bl	80005f8 <__aeabi_dmul>
 801a7dc:	f1ba 3fff 	cmp.w	sl, #4294967295
 801a7e0:	4602      	mov	r2, r0
 801a7e2:	460b      	mov	r3, r1
 801a7e4:	d14b      	bne.n	801a87e <atan+0x25e>
 801a7e6:	4620      	mov	r0, r4
 801a7e8:	4629      	mov	r1, r5
 801a7ea:	f7e5 fd4d 	bl	8000288 <__aeabi_dsub>
 801a7ee:	e72c      	b.n	801a64a <atan+0x2a>
 801a7f0:	ee10 0a10 	vmov	r0, s0
 801a7f4:	2200      	movs	r2, #0
 801a7f6:	4b53      	ldr	r3, [pc, #332]	; (801a944 <atan+0x324>)
 801a7f8:	4629      	mov	r1, r5
 801a7fa:	f7e5 fd45 	bl	8000288 <__aeabi_dsub>
 801a7fe:	2200      	movs	r2, #0
 801a800:	4606      	mov	r6, r0
 801a802:	460f      	mov	r7, r1
 801a804:	4b4f      	ldr	r3, [pc, #316]	; (801a944 <atan+0x324>)
 801a806:	4620      	mov	r0, r4
 801a808:	4629      	mov	r1, r5
 801a80a:	f7e5 fd3f 	bl	800028c <__adddf3>
 801a80e:	4602      	mov	r2, r0
 801a810:	460b      	mov	r3, r1
 801a812:	4630      	mov	r0, r6
 801a814:	4639      	mov	r1, r7
 801a816:	f7e6 f819 	bl	800084c <__aeabi_ddiv>
 801a81a:	f04f 0a01 	mov.w	sl, #1
 801a81e:	4604      	mov	r4, r0
 801a820:	460d      	mov	r5, r1
 801a822:	e764      	b.n	801a6ee <atan+0xce>
 801a824:	4b49      	ldr	r3, [pc, #292]	; (801a94c <atan+0x32c>)
 801a826:	429e      	cmp	r6, r3
 801a828:	dc1d      	bgt.n	801a866 <atan+0x246>
 801a82a:	ee10 0a10 	vmov	r0, s0
 801a82e:	2200      	movs	r2, #0
 801a830:	4b47      	ldr	r3, [pc, #284]	; (801a950 <atan+0x330>)
 801a832:	4629      	mov	r1, r5
 801a834:	f7e5 fd28 	bl	8000288 <__aeabi_dsub>
 801a838:	2200      	movs	r2, #0
 801a83a:	4606      	mov	r6, r0
 801a83c:	460f      	mov	r7, r1
 801a83e:	4b44      	ldr	r3, [pc, #272]	; (801a950 <atan+0x330>)
 801a840:	4620      	mov	r0, r4
 801a842:	4629      	mov	r1, r5
 801a844:	f7e5 fed8 	bl	80005f8 <__aeabi_dmul>
 801a848:	2200      	movs	r2, #0
 801a84a:	4b3e      	ldr	r3, [pc, #248]	; (801a944 <atan+0x324>)
 801a84c:	f7e5 fd1e 	bl	800028c <__adddf3>
 801a850:	4602      	mov	r2, r0
 801a852:	460b      	mov	r3, r1
 801a854:	4630      	mov	r0, r6
 801a856:	4639      	mov	r1, r7
 801a858:	f7e5 fff8 	bl	800084c <__aeabi_ddiv>
 801a85c:	f04f 0a02 	mov.w	sl, #2
 801a860:	4604      	mov	r4, r0
 801a862:	460d      	mov	r5, r1
 801a864:	e743      	b.n	801a6ee <atan+0xce>
 801a866:	462b      	mov	r3, r5
 801a868:	ee10 2a10 	vmov	r2, s0
 801a86c:	2000      	movs	r0, #0
 801a86e:	4939      	ldr	r1, [pc, #228]	; (801a954 <atan+0x334>)
 801a870:	f7e5 ffec 	bl	800084c <__aeabi_ddiv>
 801a874:	f04f 0a03 	mov.w	sl, #3
 801a878:	4604      	mov	r4, r0
 801a87a:	460d      	mov	r5, r1
 801a87c:	e737      	b.n	801a6ee <atan+0xce>
 801a87e:	4b36      	ldr	r3, [pc, #216]	; (801a958 <atan+0x338>)
 801a880:	4e36      	ldr	r6, [pc, #216]	; (801a95c <atan+0x33c>)
 801a882:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 801a886:	4456      	add	r6, sl
 801a888:	449a      	add	sl, r3
 801a88a:	e9da 2300 	ldrd	r2, r3, [sl]
 801a88e:	f7e5 fcfb 	bl	8000288 <__aeabi_dsub>
 801a892:	4622      	mov	r2, r4
 801a894:	462b      	mov	r3, r5
 801a896:	f7e5 fcf7 	bl	8000288 <__aeabi_dsub>
 801a89a:	4602      	mov	r2, r0
 801a89c:	460b      	mov	r3, r1
 801a89e:	e9d6 0100 	ldrd	r0, r1, [r6]
 801a8a2:	f7e5 fcf1 	bl	8000288 <__aeabi_dsub>
 801a8a6:	f1bb 0f00 	cmp.w	fp, #0
 801a8aa:	4604      	mov	r4, r0
 801a8ac:	460d      	mov	r5, r1
 801a8ae:	f6bf aed6 	bge.w	801a65e <atan+0x3e>
 801a8b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a8b6:	461d      	mov	r5, r3
 801a8b8:	e6d1      	b.n	801a65e <atan+0x3e>
 801a8ba:	a51d      	add	r5, pc, #116	; (adr r5, 801a930 <atan+0x310>)
 801a8bc:	e9d5 4500 	ldrd	r4, r5, [r5]
 801a8c0:	e6cd      	b.n	801a65e <atan+0x3e>
 801a8c2:	bf00      	nop
 801a8c4:	f3af 8000 	nop.w
 801a8c8:	54442d18 	.word	0x54442d18
 801a8cc:	3ff921fb 	.word	0x3ff921fb
 801a8d0:	8800759c 	.word	0x8800759c
 801a8d4:	7e37e43c 	.word	0x7e37e43c
 801a8d8:	e322da11 	.word	0xe322da11
 801a8dc:	3f90ad3a 	.word	0x3f90ad3a
 801a8e0:	24760deb 	.word	0x24760deb
 801a8e4:	3fa97b4b 	.word	0x3fa97b4b
 801a8e8:	a0d03d51 	.word	0xa0d03d51
 801a8ec:	3fb10d66 	.word	0x3fb10d66
 801a8f0:	c54c206e 	.word	0xc54c206e
 801a8f4:	3fb745cd 	.word	0x3fb745cd
 801a8f8:	920083ff 	.word	0x920083ff
 801a8fc:	3fc24924 	.word	0x3fc24924
 801a900:	5555550d 	.word	0x5555550d
 801a904:	3fd55555 	.word	0x3fd55555
 801a908:	2c6a6c2f 	.word	0x2c6a6c2f
 801a90c:	bfa2b444 	.word	0xbfa2b444
 801a910:	52defd9a 	.word	0x52defd9a
 801a914:	3fadde2d 	.word	0x3fadde2d
 801a918:	af749a6d 	.word	0xaf749a6d
 801a91c:	3fb3b0f2 	.word	0x3fb3b0f2
 801a920:	fe231671 	.word	0xfe231671
 801a924:	3fbc71c6 	.word	0x3fbc71c6
 801a928:	9998ebc4 	.word	0x9998ebc4
 801a92c:	3fc99999 	.word	0x3fc99999
 801a930:	54442d18 	.word	0x54442d18
 801a934:	bff921fb 	.word	0xbff921fb
 801a938:	440fffff 	.word	0x440fffff
 801a93c:	7ff00000 	.word	0x7ff00000
 801a940:	3fdbffff 	.word	0x3fdbffff
 801a944:	3ff00000 	.word	0x3ff00000
 801a948:	3ff2ffff 	.word	0x3ff2ffff
 801a94c:	40037fff 	.word	0x40037fff
 801a950:	3ff80000 	.word	0x3ff80000
 801a954:	bff00000 	.word	0xbff00000
 801a958:	0801b5d0 	.word	0x0801b5d0
 801a95c:	0801b5b0 	.word	0x0801b5b0

0801a960 <fabs>:
 801a960:	ec51 0b10 	vmov	r0, r1, d0
 801a964:	ee10 2a10 	vmov	r2, s0
 801a968:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a96c:	ec43 2b10 	vmov	d0, r2, r3
 801a970:	4770      	bx	lr
 801a972:	0000      	movs	r0, r0
 801a974:	0000      	movs	r0, r0
	...

0801a978 <floor>:
 801a978:	ec51 0b10 	vmov	r0, r1, d0
 801a97c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a980:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801a984:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801a988:	2e13      	cmp	r6, #19
 801a98a:	460c      	mov	r4, r1
 801a98c:	ee10 5a10 	vmov	r5, s0
 801a990:	4680      	mov	r8, r0
 801a992:	dc34      	bgt.n	801a9fe <floor+0x86>
 801a994:	2e00      	cmp	r6, #0
 801a996:	da16      	bge.n	801a9c6 <floor+0x4e>
 801a998:	a335      	add	r3, pc, #212	; (adr r3, 801aa70 <floor+0xf8>)
 801a99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a99e:	f7e5 fc75 	bl	800028c <__adddf3>
 801a9a2:	2200      	movs	r2, #0
 801a9a4:	2300      	movs	r3, #0
 801a9a6:	f7e6 f8b7 	bl	8000b18 <__aeabi_dcmpgt>
 801a9aa:	b148      	cbz	r0, 801a9c0 <floor+0x48>
 801a9ac:	2c00      	cmp	r4, #0
 801a9ae:	da59      	bge.n	801aa64 <floor+0xec>
 801a9b0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801a9b4:	4a30      	ldr	r2, [pc, #192]	; (801aa78 <floor+0x100>)
 801a9b6:	432b      	orrs	r3, r5
 801a9b8:	2500      	movs	r5, #0
 801a9ba:	42ab      	cmp	r3, r5
 801a9bc:	bf18      	it	ne
 801a9be:	4614      	movne	r4, r2
 801a9c0:	4621      	mov	r1, r4
 801a9c2:	4628      	mov	r0, r5
 801a9c4:	e025      	b.n	801aa12 <floor+0x9a>
 801a9c6:	4f2d      	ldr	r7, [pc, #180]	; (801aa7c <floor+0x104>)
 801a9c8:	4137      	asrs	r7, r6
 801a9ca:	ea01 0307 	and.w	r3, r1, r7
 801a9ce:	4303      	orrs	r3, r0
 801a9d0:	d01f      	beq.n	801aa12 <floor+0x9a>
 801a9d2:	a327      	add	r3, pc, #156	; (adr r3, 801aa70 <floor+0xf8>)
 801a9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9d8:	f7e5 fc58 	bl	800028c <__adddf3>
 801a9dc:	2200      	movs	r2, #0
 801a9de:	2300      	movs	r3, #0
 801a9e0:	f7e6 f89a 	bl	8000b18 <__aeabi_dcmpgt>
 801a9e4:	2800      	cmp	r0, #0
 801a9e6:	d0eb      	beq.n	801a9c0 <floor+0x48>
 801a9e8:	2c00      	cmp	r4, #0
 801a9ea:	bfbe      	ittt	lt
 801a9ec:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801a9f0:	fa43 f606 	asrlt.w	r6, r3, r6
 801a9f4:	19a4      	addlt	r4, r4, r6
 801a9f6:	ea24 0407 	bic.w	r4, r4, r7
 801a9fa:	2500      	movs	r5, #0
 801a9fc:	e7e0      	b.n	801a9c0 <floor+0x48>
 801a9fe:	2e33      	cmp	r6, #51	; 0x33
 801aa00:	dd0b      	ble.n	801aa1a <floor+0xa2>
 801aa02:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801aa06:	d104      	bne.n	801aa12 <floor+0x9a>
 801aa08:	ee10 2a10 	vmov	r2, s0
 801aa0c:	460b      	mov	r3, r1
 801aa0e:	f7e5 fc3d 	bl	800028c <__adddf3>
 801aa12:	ec41 0b10 	vmov	d0, r0, r1
 801aa16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aa1a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801aa1e:	f04f 33ff 	mov.w	r3, #4294967295
 801aa22:	fa23 f707 	lsr.w	r7, r3, r7
 801aa26:	4207      	tst	r7, r0
 801aa28:	d0f3      	beq.n	801aa12 <floor+0x9a>
 801aa2a:	a311      	add	r3, pc, #68	; (adr r3, 801aa70 <floor+0xf8>)
 801aa2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa30:	f7e5 fc2c 	bl	800028c <__adddf3>
 801aa34:	2200      	movs	r2, #0
 801aa36:	2300      	movs	r3, #0
 801aa38:	f7e6 f86e 	bl	8000b18 <__aeabi_dcmpgt>
 801aa3c:	2800      	cmp	r0, #0
 801aa3e:	d0bf      	beq.n	801a9c0 <floor+0x48>
 801aa40:	2c00      	cmp	r4, #0
 801aa42:	da02      	bge.n	801aa4a <floor+0xd2>
 801aa44:	2e14      	cmp	r6, #20
 801aa46:	d103      	bne.n	801aa50 <floor+0xd8>
 801aa48:	3401      	adds	r4, #1
 801aa4a:	ea25 0507 	bic.w	r5, r5, r7
 801aa4e:	e7b7      	b.n	801a9c0 <floor+0x48>
 801aa50:	2301      	movs	r3, #1
 801aa52:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801aa56:	fa03 f606 	lsl.w	r6, r3, r6
 801aa5a:	4435      	add	r5, r6
 801aa5c:	4545      	cmp	r5, r8
 801aa5e:	bf38      	it	cc
 801aa60:	18e4      	addcc	r4, r4, r3
 801aa62:	e7f2      	b.n	801aa4a <floor+0xd2>
 801aa64:	2500      	movs	r5, #0
 801aa66:	462c      	mov	r4, r5
 801aa68:	e7aa      	b.n	801a9c0 <floor+0x48>
 801aa6a:	bf00      	nop
 801aa6c:	f3af 8000 	nop.w
 801aa70:	8800759c 	.word	0x8800759c
 801aa74:	7e37e43c 	.word	0x7e37e43c
 801aa78:	bff00000 	.word	0xbff00000
 801aa7c:	000fffff 	.word	0x000fffff

0801aa80 <matherr>:
 801aa80:	2000      	movs	r0, #0
 801aa82:	4770      	bx	lr
 801aa84:	0000      	movs	r0, r0
	...

0801aa88 <scalbn>:
 801aa88:	b570      	push	{r4, r5, r6, lr}
 801aa8a:	ec55 4b10 	vmov	r4, r5, d0
 801aa8e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801aa92:	4606      	mov	r6, r0
 801aa94:	462b      	mov	r3, r5
 801aa96:	b9aa      	cbnz	r2, 801aac4 <scalbn+0x3c>
 801aa98:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801aa9c:	4323      	orrs	r3, r4
 801aa9e:	d03b      	beq.n	801ab18 <scalbn+0x90>
 801aaa0:	4b31      	ldr	r3, [pc, #196]	; (801ab68 <scalbn+0xe0>)
 801aaa2:	4629      	mov	r1, r5
 801aaa4:	2200      	movs	r2, #0
 801aaa6:	ee10 0a10 	vmov	r0, s0
 801aaaa:	f7e5 fda5 	bl	80005f8 <__aeabi_dmul>
 801aaae:	4b2f      	ldr	r3, [pc, #188]	; (801ab6c <scalbn+0xe4>)
 801aab0:	429e      	cmp	r6, r3
 801aab2:	4604      	mov	r4, r0
 801aab4:	460d      	mov	r5, r1
 801aab6:	da12      	bge.n	801aade <scalbn+0x56>
 801aab8:	a327      	add	r3, pc, #156	; (adr r3, 801ab58 <scalbn+0xd0>)
 801aaba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aabe:	f7e5 fd9b 	bl	80005f8 <__aeabi_dmul>
 801aac2:	e009      	b.n	801aad8 <scalbn+0x50>
 801aac4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801aac8:	428a      	cmp	r2, r1
 801aaca:	d10c      	bne.n	801aae6 <scalbn+0x5e>
 801aacc:	ee10 2a10 	vmov	r2, s0
 801aad0:	4620      	mov	r0, r4
 801aad2:	4629      	mov	r1, r5
 801aad4:	f7e5 fbda 	bl	800028c <__adddf3>
 801aad8:	4604      	mov	r4, r0
 801aada:	460d      	mov	r5, r1
 801aadc:	e01c      	b.n	801ab18 <scalbn+0x90>
 801aade:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801aae2:	460b      	mov	r3, r1
 801aae4:	3a36      	subs	r2, #54	; 0x36
 801aae6:	4432      	add	r2, r6
 801aae8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801aaec:	428a      	cmp	r2, r1
 801aaee:	dd0b      	ble.n	801ab08 <scalbn+0x80>
 801aaf0:	ec45 4b11 	vmov	d1, r4, r5
 801aaf4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 801ab60 <scalbn+0xd8>
 801aaf8:	f000 f83c 	bl	801ab74 <copysign>
 801aafc:	a318      	add	r3, pc, #96	; (adr r3, 801ab60 <scalbn+0xd8>)
 801aafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab02:	ec51 0b10 	vmov	r0, r1, d0
 801ab06:	e7da      	b.n	801aabe <scalbn+0x36>
 801ab08:	2a00      	cmp	r2, #0
 801ab0a:	dd08      	ble.n	801ab1e <scalbn+0x96>
 801ab0c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801ab10:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801ab14:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801ab18:	ec45 4b10 	vmov	d0, r4, r5
 801ab1c:	bd70      	pop	{r4, r5, r6, pc}
 801ab1e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801ab22:	da0d      	bge.n	801ab40 <scalbn+0xb8>
 801ab24:	f24c 3350 	movw	r3, #50000	; 0xc350
 801ab28:	429e      	cmp	r6, r3
 801ab2a:	ec45 4b11 	vmov	d1, r4, r5
 801ab2e:	dce1      	bgt.n	801aaf4 <scalbn+0x6c>
 801ab30:	ed9f 0b09 	vldr	d0, [pc, #36]	; 801ab58 <scalbn+0xd0>
 801ab34:	f000 f81e 	bl	801ab74 <copysign>
 801ab38:	a307      	add	r3, pc, #28	; (adr r3, 801ab58 <scalbn+0xd0>)
 801ab3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab3e:	e7e0      	b.n	801ab02 <scalbn+0x7a>
 801ab40:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801ab44:	3236      	adds	r2, #54	; 0x36
 801ab46:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801ab4a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801ab4e:	4620      	mov	r0, r4
 801ab50:	4629      	mov	r1, r5
 801ab52:	2200      	movs	r2, #0
 801ab54:	4b06      	ldr	r3, [pc, #24]	; (801ab70 <scalbn+0xe8>)
 801ab56:	e7b2      	b.n	801aabe <scalbn+0x36>
 801ab58:	c2f8f359 	.word	0xc2f8f359
 801ab5c:	01a56e1f 	.word	0x01a56e1f
 801ab60:	8800759c 	.word	0x8800759c
 801ab64:	7e37e43c 	.word	0x7e37e43c
 801ab68:	43500000 	.word	0x43500000
 801ab6c:	ffff3cb0 	.word	0xffff3cb0
 801ab70:	3c900000 	.word	0x3c900000

0801ab74 <copysign>:
 801ab74:	ec51 0b10 	vmov	r0, r1, d0
 801ab78:	ee11 0a90 	vmov	r0, s3
 801ab7c:	ee10 2a10 	vmov	r2, s0
 801ab80:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801ab84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801ab88:	ea41 0300 	orr.w	r3, r1, r0
 801ab8c:	ec43 2b10 	vmov	d0, r2, r3
 801ab90:	4770      	bx	lr
	...

0801ab94 <_init>:
 801ab94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab96:	bf00      	nop
 801ab98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ab9a:	bc08      	pop	{r3}
 801ab9c:	469e      	mov	lr, r3
 801ab9e:	4770      	bx	lr

0801aba0 <_fini>:
 801aba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aba2:	bf00      	nop
 801aba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801aba6:	bc08      	pop	{r3}
 801aba8:	469e      	mov	lr, r3
 801abaa:	4770      	bx	lr
