
DMA_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ac8c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009b8  0801ae20  0801ae20  0002ae20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b7d8  0801b7d8  00030fe0  2**0
                  CONTENTS
  4 .ARM          00000008  0801b7d8  0801b7d8  0002b7d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b7e0  0801b7e0  00030fe0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b7e0  0801b7e0  0002b7e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b7e4  0801b7e4  0002b7e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000fe0  20000000  0801b7e8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005e54  20000fe0  0801c7c8  00030fe0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20006e34  0801c7c8  00036e34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030fe0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e2b1  00000000  00000000  00031010  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006217  00000000  00000000  0005f2c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001d50  00000000  00000000  000654d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001af8  00000000  00000000  00067228  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000299d2  00000000  00000000  00068d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001f1d1  00000000  00000000  000926f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dccbb  00000000  00000000  000b18c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018e57e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008990  00000000  00000000  0018e5fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000fe0 	.word	0x20000fe0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801ae04 	.word	0x0801ae04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000fe4 	.word	0x20000fe4
 80001cc:	0801ae04 	.word	0x0801ae04

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <commandRead>:
												"STOP",
												"ERRO",
												"OKAY"};


Robot_CommandTypedef 	commandRead	(uint8_t *message, int32_t length, int32_t *id_command, DUTY_Command_TypeDef *duty_cmd) {
 8000f88:	b590      	push	{r4, r7, lr}
 8000f8a:	b08d      	sub	sp, #52	; 0x34
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
 8000f94:	603b      	str	r3, [r7, #0]
	Transfer_Protocol protocol_id = message[0];
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    Robot_CommandTypedef command_id = message[1];
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	785b      	ldrb	r3, [r3, #1]
 8000fa2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    duty_cmd->id_command = command_id;
 8000fa6:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	609a      	str	r2, [r3, #8]
	int32_t temp_pointer = 2;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	62bb      	str	r3, [r7, #40]	; 0x28
    switch(protocol_id) 
 8000fb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	f000 819c 	beq.w	80012f4 <commandRead+0x36c>
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	f040 8197 	bne.w	80012f0 <commandRead+0x368>
        break;

        // command control from pc
        case COMMAND_TRANSMISION:
        {
            switch(command_id)
 8000fc2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000fc6:	2b14      	cmp	r3, #20
 8000fc8:	f200 8190 	bhi.w	80012ec <commandRead+0x364>
 8000fcc:	a201      	add	r2, pc, #4	; (adr r2, 8000fd4 <commandRead+0x4c>)
 8000fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fd2:	bf00      	nop
 8000fd4:	08001029 	.word	0x08001029
 8000fd8:	0800103f 	.word	0x0800103f
 8000fdc:	08001055 	.word	0x08001055
 8000fe0:	080010e7 	.word	0x080010e7
 8000fe4:	080011f9 	.word	0x080011f9
 8000fe8:	080011fd 	.word	0x080011fd
 8000fec:	08001201 	.word	0x08001201
 8000ff0:	08001205 	.word	0x08001205
 8000ff4:	080012ed 	.word	0x080012ed
 8000ff8:	08001225 	.word	0x08001225
 8000ffc:	08001229 	.word	0x08001229
 8001000:	080012ed 	.word	0x080012ed
 8001004:	080012ed 	.word	0x080012ed
 8001008:	080012ed 	.word	0x080012ed
 800100c:	080012ed 	.word	0x080012ed
 8001010:	080012ed 	.word	0x080012ed
 8001014:	080012ed 	.word	0x080012ed
 8001018:	080012ed 	.word	0x080012ed
 800101c:	080012ed 	.word	0x080012ed
 8001020:	08001291 	.word	0x08001291
 8001024:	080012bb 	.word	0x080012bb
            {
                // Stop now
                case CMD_STOPNOW:
                {
                    duty_cmd->robot_mode = SCARA_MODE_STOP;
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	2200      	movs	r2, #0
 800102c:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	2201      	movs	r2, #1
 8001032:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	2200      	movs	r2, #0
 8001038:	701a      	strb	r2, [r3, #0]
                    return CMD_STOPNOW;
 800103a:	2300      	movs	r3, #0
 800103c:	e15b      	b.n	80012f6 <commandRead+0x36e>
                break;

                // Scan limit
                case CMD_SCAN_LIMIT:
                {
                    duty_cmd->robot_mode = SCARA_MODE_SCAN;
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	2201      	movs	r2, #1
 8001042:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	2201      	movs	r2, #1
 8001048:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	2200      	movs	r2, #0
 800104e:	701a      	strb	r2, [r3, #0]
                    return CMD_SCAN_LIMIT;
 8001050:	2301      	movs	r3, #1
 8001052:	e150      	b.n	80012f6 <commandRead+0x36e>
                break;

                // Move home
                case CMD_MOVE_HOME:
                {
                    if (length == 18){ // 2 double number + 2 define byte
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	2b12      	cmp	r3, #18
 8001058:	d143      	bne.n	80010e2 <commandRead+0x15a>
                        memcpy(&duty_cmd->v_factor, &message[temp_pointer+=8], 8);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	f503 70cc 	add.w	r0, r3, #408	; 0x198
 8001060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001062:	3308      	adds	r3, #8
 8001064:	62bb      	str	r3, [r7, #40]	; 0x28
 8001066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001068:	68fa      	ldr	r2, [r7, #12]
 800106a:	4413      	add	r3, r2
 800106c:	2208      	movs	r2, #8
 800106e:	4619      	mov	r1, r3
 8001070:	f014 fc66 	bl	8015940 <memcpy>
						memcpy(&duty_cmd->a_factor, &message[temp_pointer], 8); 
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	f503 70d0 	add.w	r0, r3, #416	; 0x1a0
 800107a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800107c:	68fa      	ldr	r2, [r7, #12]
 800107e:	4413      	add	r3, r2
 8001080:	2208      	movs	r2, #8
 8001082:	4619      	mov	r1, r3
 8001084:	f014 fc5c 	bl	8015940 <memcpy>
						// duty_cmd->v_factor = (*(int32_t*)(&message[temp_pointer+=8])*COR_INVERSE_SCALE;
						// duty_cmd->a_factor = (*(int32_t*)(&message[temp_pointer])*COR_INVERSE_SCALE;
                    }else{
                        return CMD_ERROR;
                    }
                    duty_cmd->target_point.x = 250;
 8001088:	683a      	ldr	r2, [r7, #0]
 800108a:	f04f 0300 	mov.w	r3, #0
 800108e:	4c9c      	ldr	r4, [pc, #624]	; (8001300 <commandRead+0x378>)
 8001090:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
                    duty_cmd->target_point.y = -200;
 8001094:	683a      	ldr	r2, [r7, #0]
 8001096:	f04f 0300 	mov.w	r3, #0
 800109a:	4c9a      	ldr	r4, [pc, #616]	; (8001304 <commandRead+0x37c>)
 800109c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
                    duty_cmd->target_point.z = 120;
 80010a0:	683a      	ldr	r2, [r7, #0]
 80010a2:	f04f 0300 	mov.w	r3, #0
 80010a6:	4c98      	ldr	r4, [pc, #608]	; (8001308 <commandRead+0x380>)
 80010a8:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
                    duty_cmd->target_point.roll = 0;
 80010ac:	683a      	ldr	r2, [r7, #0]
 80010ae:	f04f 0300 	mov.w	r3, #0
 80010b2:	f04f 0400 	mov.w	r4, #0
 80010b6:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

                    duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	2200      	movs	r2, #0
 80010be:	745a      	strb	r2, [r3, #17]
                    duty_cmd->space_type = DUTY_SPACE_JOINT;
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	2201      	movs	r2, #1
 80010c4:	735a      	strb	r2, [r3, #13]
                    duty_cmd->joint_type = DUTY_JOINT_4DOF;
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	2201      	movs	r2, #1
 80010ca:	73da      	strb	r2, [r3, #15]
                    duty_cmd->robot_mode = SCARA_MODE_DUTY;
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	2202      	movs	r2, #2
 80010d0:	709a      	strb	r2, [r3, #2]
                    duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	2201      	movs	r2, #1
 80010d6:	705a      	strb	r2, [r3, #1]
                    duty_cmd->change_method = FALSE;
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	2200      	movs	r2, #0
 80010dc:	701a      	strb	r2, [r3, #0]
                    return CMD_MOVE_HOME;
 80010de:	2302      	movs	r3, #2
 80010e0:	e109      	b.n	80012f6 <commandRead+0x36e>
                        return CMD_ERROR;
 80010e2:	2315      	movs	r3, #21
 80010e4:	e107      	b.n	80012f6 <commandRead+0x36e>
                break;

                // Move line
                case CMD_MOVE_LINE:
                {
                    if (length == 51){ // 6 double number + 1 byte number + 2 define byte
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	2b33      	cmp	r3, #51	; 0x33
 80010ea:	f040 8083 	bne.w	80011f4 <commandRead+0x26c>
						scaraSetScanFlag();
 80010ee:	f007 fedb 	bl	8008ea8 <scaraSetScanFlag>
						uint8_t mode_init;
						temp_pointer = -6;
 80010f2:	f06f 0305 	mvn.w	r3, #5
 80010f6:	62bb      	str	r3, [r7, #40]	; 0x28
						memcpy(&duty_cmd->target_point.x, &message[temp_pointer+=8], 8);
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	f103 0070 	add.w	r0, r3, #112	; 0x70
 80010fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001100:	3308      	adds	r3, #8
 8001102:	62bb      	str	r3, [r7, #40]	; 0x28
 8001104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	4413      	add	r3, r2
 800110a:	2208      	movs	r2, #8
 800110c:	4619      	mov	r1, r3
 800110e:	f014 fc17 	bl	8015940 <memcpy>
						memcpy(&duty_cmd->target_point.y, &message[temp_pointer+=8], 8);
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8001118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800111a:	3308      	adds	r3, #8
 800111c:	62bb      	str	r3, [r7, #40]	; 0x28
 800111e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001120:	68fa      	ldr	r2, [r7, #12]
 8001122:	4413      	add	r3, r2
 8001124:	2208      	movs	r2, #8
 8001126:	4619      	mov	r1, r3
 8001128:	f014 fc0a 	bl	8015940 <memcpy>
						memcpy(&duty_cmd->target_point.z, &message[temp_pointer+=8], 8);
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	f103 0080 	add.w	r0, r3, #128	; 0x80
 8001132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001134:	3308      	adds	r3, #8
 8001136:	62bb      	str	r3, [r7, #40]	; 0x28
 8001138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	4413      	add	r3, r2
 800113e:	2208      	movs	r2, #8
 8001140:	4619      	mov	r1, r3
 8001142:	f014 fbfd 	bl	8015940 <memcpy>
						memcpy(&duty_cmd->target_point.roll, &message[temp_pointer+=8], 8);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	f103 0088 	add.w	r0, r3, #136	; 0x88
 800114c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800114e:	3308      	adds	r3, #8
 8001150:	62bb      	str	r3, [r7, #40]	; 0x28
 8001152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001154:	68fa      	ldr	r2, [r7, #12]
 8001156:	4413      	add	r3, r2
 8001158:	2208      	movs	r2, #8
 800115a:	4619      	mov	r1, r3
 800115c:	f014 fbf0 	bl	8015940 <memcpy>
						memcpy(&duty_cmd->v_factor, &message[temp_pointer+=8], 8);
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	f503 70cc 	add.w	r0, r3, #408	; 0x198
 8001166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001168:	3308      	adds	r3, #8
 800116a:	62bb      	str	r3, [r7, #40]	; 0x28
 800116c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800116e:	68fa      	ldr	r2, [r7, #12]
 8001170:	4413      	add	r3, r2
 8001172:	2208      	movs	r2, #8
 8001174:	4619      	mov	r1, r3
 8001176:	f014 fbe3 	bl	8015940 <memcpy>
						mode_init = message[temp_pointer+=1];
 800117a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800117c:	3301      	adds	r3, #1
 800117e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001182:	68fa      	ldr	r2, [r7, #12]
 8001184:	4413      	add	r3, r2
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	74fb      	strb	r3, [r7, #19]

						if(mode_init == DUTY_MODE_INIT_QVA){
 800118a:	7cfb      	ldrb	r3, [r7, #19]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d10d      	bne.n	80011ac <commandRead+0x224>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVA;
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	2200      	movs	r2, #0
 8001194:	745a      	strb	r2, [r3, #17]
							memcpy(&duty_cmd->a_factor, &message[temp_pointer], 8);
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	f503 70d0 	add.w	r0, r3, #416	; 0x1a0
 800119c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	4413      	add	r3, r2
 80011a2:	2208      	movs	r2, #8
 80011a4:	4619      	mov	r1, r3
 80011a6:	f014 fbcb 	bl	8015940 <memcpy>
 80011aa:	e012      	b.n	80011d2 <commandRead+0x24a>
						}else if(mode_init == DUTY_MODE_INIT_QVT){
 80011ac:	7cfb      	ldrb	r3, [r7, #19]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d10d      	bne.n	80011ce <commandRead+0x246>
							duty_cmd->modeInit_type = DUTY_MODE_INIT_QVT;
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	2201      	movs	r2, #1
 80011b6:	745a      	strb	r2, [r3, #17]
							memcpy(&duty_cmd->time_total, &message[temp_pointer], 8);
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	f103 0020 	add.w	r0, r3, #32
 80011be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011c0:	68fa      	ldr	r2, [r7, #12]
 80011c2:	4413      	add	r3, r2
 80011c4:	2208      	movs	r2, #8
 80011c6:	4619      	mov	r1, r3
 80011c8:	f014 fbba 	bl	8015940 <memcpy>
 80011cc:	e001      	b.n	80011d2 <commandRead+0x24a>
						}else{
							return CMD_ERROR;
 80011ce:	2315      	movs	r3, #21
 80011d0:	e091      	b.n	80012f6 <commandRead+0x36e>
						}
						duty_cmd->path_type = DUTY_PATH_LINE;
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	2200      	movs	r2, #0
 80011d6:	739a      	strb	r2, [r3, #14]
						duty_cmd->space_type = DUTY_SPACE_TASK;
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	2200      	movs	r2, #0
 80011dc:	735a      	strb	r2, [r3, #13]
					}else{
						return CMD_ERROR;
					}
					duty_cmd->robot_mode = SCARA_MODE_DUTY;
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	2202      	movs	r2, #2
 80011e2:	709a      	strb	r2, [r3, #2]
					duty_cmd->robot_method = SCARA_METHOD_SEMI_AUTO;
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	2201      	movs	r2, #1
 80011e8:	705a      	strb	r2, [r3, #1]
					duty_cmd->change_method = FALSE;
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	2200      	movs	r2, #0
 80011ee:	701a      	strb	r2, [r3, #0]
					return CMD_MOVE_LINE;
 80011f0:	2303      	movs	r3, #3
 80011f2:	e080      	b.n	80012f6 <commandRead+0x36e>
						return CMD_ERROR;
 80011f4:	2315      	movs	r3, #21
 80011f6:	e07e      	b.n	80012f6 <commandRead+0x36e>
				break;

				// Move circle
				case CMD_MOVE_CIRCLE:
				{
					return CMD_MOVE_CIRCLE;
 80011f8:	2304      	movs	r3, #4
 80011fa:	e07c      	b.n	80012f6 <commandRead+0x36e>
				break;

				// Move joint
				case CMD_MOVE_JOINT:
				{
					return CMD_MOVE_JOINT;
 80011fc:	2305      	movs	r3, #5
 80011fe:	e07a      	b.n	80012f6 <commandRead+0x36e>
				break;

				// Rotate Single
				case CMD_ROTATE_SINGLE:
				{
					return CMD_ROTATE_SINGLE;
 8001200:	2306      	movs	r3, #6
 8001202:	e078      	b.n	80012f6 <commandRead+0x36e>
				break;

				// Set output
				case CMD_OUTPUT:
				{
					if(length == 3){ // 1 byte output value + 2 byte define
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	2b03      	cmp	r3, #3
 8001208:	d10a      	bne.n	8001220 <commandRead+0x298>
						int temp_pointer = 2;
 800120a:	2302      	movs	r3, #2
 800120c:	617b      	str	r3, [r7, #20]
						duty_cmd->sub_para_int = message[temp_pointer];
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	68fa      	ldr	r2, [r7, #12]
 8001212:	4413      	add	r3, r2
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	461a      	mov	r2, r3
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	615a      	str	r2, [r3, #20]
						return CMD_OUTPUT;
 800121c:	2307      	movs	r3, #7
 800121e:	e06a      	b.n	80012f6 <commandRead+0x36e>
					}else{
						return CMD_ERROR;
 8001220:	2315      	movs	r3, #21
 8001222:	e068      	b.n	80012f6 <commandRead+0x36e>
				break;

				// Read position
				case CMD_READ_POSITION:
				{
					return CMD_READ_POSITION;
 8001224:	2309      	movs	r3, #9
 8001226:	e066      	b.n	80012f6 <commandRead+0x36e>
				break;			

				// Setting
				case CMD_SETTING:
				{
					if (length == 4){ // 2 byte configure + 2 byte define
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	2b04      	cmp	r3, #4
 800122c:	d12e      	bne.n	800128c <commandRead+0x304>
						uint8_t mode_traject;
						uint8_t mode_coordinate;
						mode_coordinate = message[temp_pointer++];
 800122e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001230:	1c5a      	adds	r2, r3, #1
 8001232:	62ba      	str	r2, [r7, #40]	; 0x28
 8001234:	461a      	mov	r2, r3
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	4413      	add	r3, r2
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	76fb      	strb	r3, [r7, #27]
						mode_traject = message[temp_pointer];
 800123e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001240:	68fa      	ldr	r2, [r7, #12]
 8001242:	4413      	add	r3, r2
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	76bb      	strb	r3, [r7, #26]

						if (mode_coordinate == DUTY_COORDINATES_ABS) {
 8001248:	7efb      	ldrb	r3, [r7, #27]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d103      	bne.n	8001256 <commandRead+0x2ce>
							duty_cmd->coordinate_type = DUTY_COORDINATES_ABS;
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	2200      	movs	r2, #0
 8001252:	731a      	strb	r2, [r3, #12]
 8001254:	e008      	b.n	8001268 <commandRead+0x2e0>
						} else if (mode_coordinate == DUTY_COORDINATES_REL) {
 8001256:	7efb      	ldrb	r3, [r7, #27]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d103      	bne.n	8001264 <commandRead+0x2dc>
							duty_cmd->coordinate_type = DUTY_COORDINATES_REL;
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	2201      	movs	r2, #1
 8001260:	731a      	strb	r2, [r3, #12]
 8001262:	e001      	b.n	8001268 <commandRead+0x2e0>
						} else {
							return CMD_ERROR;
 8001264:	2315      	movs	r3, #21
 8001266:	e046      	b.n	80012f6 <commandRead+0x36e>
						}

						if (mode_traject == DUTY_TRAJECTORY_LSPB) {
 8001268:	7ebb      	ldrb	r3, [r7, #26]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d103      	bne.n	8001276 <commandRead+0x2ee>
							duty_cmd->trajec_type = DUTY_TRAJECTORY_LSPB;
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	2200      	movs	r2, #0
 8001272:	741a      	strb	r2, [r3, #16]
 8001274:	e008      	b.n	8001288 <commandRead+0x300>
						} else if (mode_traject == DUTY_TRAJECTORY_SCURVE) {
 8001276:	7ebb      	ldrb	r3, [r7, #26]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d103      	bne.n	8001284 <commandRead+0x2fc>
							duty_cmd->trajec_type = DUTY_TRAJECTORY_SCURVE;
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	2201      	movs	r2, #1
 8001280:	741a      	strb	r2, [r3, #16]
 8001282:	e001      	b.n	8001288 <commandRead+0x300>
						} else {
							return CMD_ERROR;
 8001284:	2315      	movs	r3, #21
 8001286:	e036      	b.n	80012f6 <commandRead+0x36e>
						}
						return CMD_SETTING;
 8001288:	230a      	movs	r3, #10
 800128a:	e034      	b.n	80012f6 <commandRead+0x36e>
					}else{
						return CMD_ERROR;
 800128c:	2315      	movs	r3, #21
 800128e:	e032      	b.n	80012f6 <commandRead+0x36e>
				break;
				
				// Set manual key
				case CMD_KEYBOARD:
				{
					if(length == 3){ // 1 byte output value + 2 byte define
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	2b03      	cmp	r3, #3
 8001294:	d10f      	bne.n	80012b6 <commandRead+0x32e>
						int temp_pointer = 2;
 8001296:	2302      	movs	r3, #2
 8001298:	61fb      	str	r3, [r7, #28]
						duty_cmd->keyboard = (SCARA_KeyTypeDef)message[temp_pointer];
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	68fa      	ldr	r2, [r7, #12]
 800129e:	4413      	add	r3, r2
 80012a0:	781a      	ldrb	r2, [r3, #0]
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	70da      	strb	r2, [r3, #3]
						duty_cmd->robot_method = SCARA_METHOD_MANUAL;
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	2200      	movs	r2, #0
 80012aa:	705a      	strb	r2, [r3, #1]
						duty_cmd->change_method = FALSE;
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	2200      	movs	r2, #0
 80012b0:	701a      	strb	r2, [r3, #0]
						return CMD_KEYBOARD;
 80012b2:	2313      	movs	r3, #19
 80012b4:	e01f      	b.n	80012f6 <commandRead+0x36e>
					}else{
						return CMD_ERROR;
 80012b6:	2315      	movs	r3, #21
 80012b8:	e01d      	b.n	80012f6 <commandRead+0x36e>
				break;

				// Set manual key speed
				case CMD_KEY_SPEED:
				{
					if(length == 3){ // 1 byte key value + 2 byte define
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	2b03      	cmp	r3, #3
 80012be:	d113      	bne.n	80012e8 <commandRead+0x360>
						int temp_pointer = 2;
 80012c0:	2302      	movs	r3, #2
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
						int32_t speed = (int32_t)message[temp_pointer];
 80012c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	4413      	add	r3, r2
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	623b      	str	r3, [r7, #32]
						// check limit
						if ((speed < SHIFT_SPEED_MIN) || (speed > SHIFT_SPPED_MAX)) {
 80012ce:	6a3b      	ldr	r3, [r7, #32]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	dd02      	ble.n	80012da <commandRead+0x352>
 80012d4:	6a3b      	ldr	r3, [r7, #32]
 80012d6:	2b07      	cmp	r3, #7
 80012d8:	dd01      	ble.n	80012de <commandRead+0x356>
							return CMD_ERROR;
 80012da:	2315      	movs	r3, #21
 80012dc:	e00b      	b.n	80012f6 <commandRead+0x36e>
						}
						duty_cmd->key_speed = speed;
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	6a3a      	ldr	r2, [r7, #32]
 80012e2:	605a      	str	r2, [r3, #4]
						return CMD_KEY_SPEED;
 80012e4:	2314      	movs	r3, #20
 80012e6:	e006      	b.n	80012f6 <commandRead+0x36e>
					}else{
						return CMD_ERROR;
 80012e8:	2315      	movs	r3, #21
 80012ea:	e004      	b.n	80012f6 <commandRead+0x36e>
				break;

				//Unknow command id
				default:
				{
					return CMD_ERROR;
 80012ec:	2315      	movs	r3, #21
 80012ee:	e002      	b.n	80012f6 <commandRead+0x36e>
        break;

        //unknow protocol id
        default:
        {
            return PROTOCOL_ERROR;
 80012f0:	2316      	movs	r3, #22
 80012f2:	e000      	b.n	80012f6 <commandRead+0x36e>
        break;
 80012f4:	bf00      	nop
        }
    }
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3734      	adds	r7, #52	; 0x34
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd90      	pop	{r4, r7, pc}
 80012fe:	bf00      	nop
 8001300:	406f4000 	.word	0x406f4000
 8001304:	c0690000 	.word	0xc0690000
 8001308:	405e0000 	.word	0x405e0000

0800130c <commandReply>:

Robot_RespondTypedef	commandReply	(Robot_CommandTypedef cmd_type,
										DUTY_Command_TypeDef duty_cmd,
										uint8_t *detail, int32_t *detail_length) {
 800130c:	b082      	sub	sp, #8
 800130e:	b580      	push	{r7, lr}
 8001310:	b0de      	sub	sp, #376	; 0x178
 8001312:	af2c      	add	r7, sp, #176	; 0xb0
 8001314:	4601      	mov	r1, r0
 8001316:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 800131a:	e880 000c 	stmia.w	r0, {r2, r3}
 800131e:	460b      	mov	r3, r1
 8001320:	71fb      	strb	r3, [r7, #7]
	Robot_RespondTypedef ret;

	switch(cmd_type) {
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	2b15      	cmp	r3, #21
 8001326:	f200 814c 	bhi.w	80015c2 <commandReply+0x2b6>
 800132a:	a201      	add	r2, pc, #4	; (adr r2, 8001330 <commandReply+0x24>)
 800132c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001330:	08001389 	.word	0x08001389
 8001334:	08001389 	.word	0x08001389
 8001338:	08001389 	.word	0x08001389
 800133c:	08001389 	.word	0x08001389
 8001340:	08001389 	.word	0x08001389
 8001344:	08001389 	.word	0x08001389
 8001348:	08001389 	.word	0x08001389
 800134c:	08001391 	.word	0x08001391
 8001350:	0800140b 	.word	0x0800140b
 8001354:	0800143f 	.word	0x0800143f
 8001358:	08001475 	.word	0x08001475
 800135c:	08001549 	.word	0x08001549
 8001360:	080015e5 	.word	0x080015e5
 8001364:	080015e5 	.word	0x080015e5
 8001368:	080015e5 	.word	0x080015e5
 800136c:	080015e5 	.word	0x080015e5
 8001370:	080015e5 	.word	0x080015e5
 8001374:	080015e5 	.word	0x080015e5
 8001378:	08001551 	.word	0x08001551
 800137c:	08001559 	.word	0x08001559
 8001380:	08001561 	.word	0x08001561
 8001384:	080015a1 	.word	0x080015a1
	case CMD_MOVE_HOME:
	case CMD_MOVE_LINE:
	case CMD_MOVE_CIRCLE:
	case CMD_MOVE_JOINT:
	case CMD_ROTATE_SINGLE:
		ret = RPD_DUTY;
 8001388:	2309      	movs	r3, #9
 800138a:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		break;
 800138e:	e12a      	b.n	80015e6 <commandReply+0x2da>
	case CMD_OUTPUT:
		{
			if (1 == duty_cmd.sub_para_int) {
 8001390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001394:	2b01      	cmp	r3, #1
 8001396:	d110      	bne.n	80013ba <commandReply+0xae>
				scaraSetOutput(1);
 8001398:	2001      	movs	r0, #1
 800139a:	f007 fd91 	bl	8008ec0 <scaraSetOutput>
				// strcpy( (char *)detail, "Output ON");
				// detail_length += 9;
				detail[(*detail_length)++] = OUTPUT_ON;
 800139e:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	1c59      	adds	r1, r3, #1
 80013a6:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 80013aa:	6011      	str	r1, [r2, #0]
 80013ac:	461a      	mov	r2, r3
 80013ae:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 80013b2:	4413      	add	r3, r2
 80013b4:	220d      	movs	r2, #13
 80013b6:	701a      	strb	r2, [r3, #0]
 80013b8:	e023      	b.n	8001402 <commandReply+0xf6>
			} else if (0 == duty_cmd.sub_para_int) {
 80013ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d110      	bne.n	80013e4 <commandReply+0xd8>
				scaraSetOutput(0);
 80013c2:	2000      	movs	r0, #0
 80013c4:	f007 fd7c 	bl	8008ec0 <scaraSetOutput>
				detail[(*detail_length)++] = OUTPUT_OFF;
 80013c8:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	1c59      	adds	r1, r3, #1
 80013d0:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 80013d4:	6011      	str	r1, [r2, #0]
 80013d6:	461a      	mov	r2, r3
 80013d8:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 80013dc:	4413      	add	r3, r2
 80013de:	220e      	movs	r2, #14
 80013e0:	701a      	strb	r2, [r3, #0]
 80013e2:	e00e      	b.n	8001402 <commandReply+0xf6>
			} else {
				// strcpy( (char *)detail, "Wrong Value");
				// detail_length += 11;
				detail[(*detail_length)++] = WRONG_OUTPUT_VALUE ;
 80013e4:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	1c59      	adds	r1, r3, #1
 80013ec:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 80013f0:	6011      	str	r1, [r2, #0]
 80013f2:	461a      	mov	r2, r3
 80013f4:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 80013f8:	4413      	add	r3, r2
 80013fa:	220f      	movs	r2, #15
 80013fc:	701a      	strb	r2, [r3, #0]
				return RPD_ERROR;
 80013fe:	2307      	movs	r3, #7
 8001400:	e0f3      	b.n	80015ea <commandReply+0x2de>
			}
			ret = RPD_OK;
 8001402:	2308      	movs	r3, #8
 8001404:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		}
		break;
 8001408:	e0ed      	b.n	80015e6 <commandReply+0x2da>
	case CMD_READ_STATUS:
		{
			SCARA_ModeTypeDef		current_mode;
			SCARA_DutyStateTypeDef 	current_state;
			current_mode	 = scaraGetMode();
 800140a:	f007 fdab 	bl	8008f64 <scaraGetMode>
 800140e:	4603      	mov	r3, r0
 8001410:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6
			current_state	 = scaraGetDutyState();
 8001414:	f007 fdbe 	bl	8008f94 <scaraGetDutyState>
 8001418:	4603      	mov	r3, r0
 800141a:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
			if ( SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_state) {
 800141e:	f897 30c6 	ldrb.w	r3, [r7, #198]	; 0xc6
 8001422:	2b02      	cmp	r3, #2
 8001424:	d107      	bne.n	8001436 <commandReply+0x12a>
 8001426:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 800142a:	2b00      	cmp	r3, #0
 800142c:	d103      	bne.n	8001436 <commandReply+0x12a>
				ret = RPD_IDLE;
 800142e:	2300      	movs	r3, #0
 8001430:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
			} else {
				ret = RPD_BUSY;
			}
		}
		break;
 8001434:	e0d7      	b.n	80015e6 <commandReply+0x2da>
				ret = RPD_BUSY;
 8001436:	2301      	movs	r3, #1
 8001438:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		break;
 800143c:	e0d3      	b.n	80015e6 <commandReply+0x2da>
	case CMD_READ_POSITION:
		{
			SCARA_PositionTypeDef position;
			scaraGetPosition(&position);
 800143e:	f107 0308 	add.w	r3, r7, #8
 8001442:	4618      	mov	r0, r3
 8001444:	f007 fd7e 	bl	8008f44 <scaraGetPosition>
			//scaraPosition2String((char *)detail, position);
			*detail_length = scaraPosition_packaging(detail, position);
 8001448:	4668      	mov	r0, sp
 800144a:	f107 0310 	add.w	r3, r7, #16
 800144e:	22b0      	movs	r2, #176	; 0xb0
 8001450:	4619      	mov	r1, r3
 8001452:	f014 fa75 	bl	8015940 <memcpy>
 8001456:	f107 0308 	add.w	r3, r7, #8
 800145a:	cb0c      	ldmia	r3, {r2, r3}
 800145c:	f8d7 0278 	ldr.w	r0, [r7, #632]	; 0x278
 8001460:	f007 feee 	bl	8009240 <scaraPosition_packaging>
 8001464:	4602      	mov	r2, r0
 8001466:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 800146a:	601a      	str	r2, [r3, #0]
			ret =  RPD_POSITION;
 800146c:	2302      	movs	r3, #2
 800146e:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		}
		break;
 8001472:	e0b8      	b.n	80015e6 <commandReply+0x2da>
	case CMD_SETTING:
		if ( DUTY_COORDINATES_ABS == duty_cmd.coordinate_type) {
 8001474:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 8001478:	2b00      	cmp	r3, #0
 800147a:	d10d      	bne.n	8001498 <commandReply+0x18c>
			// strcpy( (char *)detail, "ABSOLUTE.");
			// detail_length += 9;
			detail[(*detail_length)++] = ABSOLUTE;
 800147c:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	1c59      	adds	r1, r3, #1
 8001484:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 8001488:	6011      	str	r1, [r2, #0]
 800148a:	461a      	mov	r2, r3
 800148c:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8001490:	4413      	add	r3, r2
 8001492:	2210      	movs	r2, #16
 8001494:	701a      	strb	r2, [r3, #0]
 8001496:	e020      	b.n	80014da <commandReply+0x1ce>
		} else if ( DUTY_COORDINATES_REL == duty_cmd.coordinate_type) {
 8001498:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 800149c:	2b01      	cmp	r3, #1
 800149e:	d10d      	bne.n	80014bc <commandReply+0x1b0>
			detail[(*detail_length)++] = RELATIVE;
 80014a0:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	1c59      	adds	r1, r3, #1
 80014a8:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 80014ac:	6011      	str	r1, [r2, #0]
 80014ae:	461a      	mov	r2, r3
 80014b0:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 80014b4:	4413      	add	r3, r2
 80014b6:	2211      	movs	r2, #17
 80014b8:	701a      	strb	r2, [r3, #0]
 80014ba:	e00e      	b.n	80014da <commandReply+0x1ce>
		} else {
			detail[(*detail_length)++] = WRONG_COORDINATE;
 80014bc:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	1c59      	adds	r1, r3, #1
 80014c4:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 80014c8:	6011      	str	r1, [r2, #0]
 80014ca:	461a      	mov	r2, r3
 80014cc:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 80014d0:	4413      	add	r3, r2
 80014d2:	220c      	movs	r2, #12
 80014d4:	701a      	strb	r2, [r3, #0]
			return RPD_ERROR;
 80014d6:	2307      	movs	r3, #7
 80014d8:	e087      	b.n	80015ea <commandReply+0x2de>
		}

		if ( DUTY_TRAJECTORY_LSPB == duty_cmd.trajec_type) {
 80014da:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d10d      	bne.n	80014fe <commandReply+0x1f2>
			detail[(*detail_length)++] = LSPB;
 80014e2:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	1c59      	adds	r1, r3, #1
 80014ea:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 80014ee:	6011      	str	r1, [r2, #0]
 80014f0:	461a      	mov	r2, r3
 80014f2:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 80014f6:	4413      	add	r3, r2
 80014f8:	2212      	movs	r2, #18
 80014fa:	701a      	strb	r2, [r3, #0]
 80014fc:	e020      	b.n	8001540 <commandReply+0x234>
		} else if ( DUTY_TRAJECTORY_SCURVE == duty_cmd.trajec_type) {
 80014fe:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 8001502:	2b01      	cmp	r3, #1
 8001504:	d10d      	bne.n	8001522 <commandReply+0x216>
			detail[(*detail_length)++] = S_CURVE;
 8001506:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	1c59      	adds	r1, r3, #1
 800150e:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 8001512:	6011      	str	r1, [r2, #0]
 8001514:	461a      	mov	r2, r3
 8001516:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 800151a:	4413      	add	r3, r2
 800151c:	2213      	movs	r2, #19
 800151e:	701a      	strb	r2, [r3, #0]
 8001520:	e00e      	b.n	8001540 <commandReply+0x234>
		} else {
			detail[(*detail_length)++] = WRONG_TRAJECTORY_TYPE;
 8001522:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	1c59      	adds	r1, r3, #1
 800152a:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 800152e:	6011      	str	r1, [r2, #0]
 8001530:	461a      	mov	r2, r3
 8001532:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8001536:	4413      	add	r3, r2
 8001538:	2205      	movs	r2, #5
 800153a:	701a      	strb	r2, [r3, #0]
			return RPD_ERROR;
 800153c:	2307      	movs	r3, #7
 800153e:	e054      	b.n	80015ea <commandReply+0x2de>
		}
		ret = RPD_OK;
 8001540:	2308      	movs	r3, #8
 8001542:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		break;
 8001546:	e04e      	b.n	80015e6 <commandReply+0x2da>
	case CMD_METHOD_CHANGE:
		ret = RPD_DUTY;
 8001548:	2309      	movs	r3, #9
 800154a:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		break;
 800154e:	e04a      	b.n	80015e6 <commandReply+0x2da>
	case CMD_JOB_PUSH_OUTPUT:
		break;
	case CMD_JOB_TEST:
		break;
	case CMD_JOB_RUN:
		ret = RPD_DUTY;
 8001550:	2309      	movs	r3, #9
 8001552:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		break;
 8001556:	e046      	b.n	80015e6 <commandReply+0x2da>
	case CMD_KEYBOARD:
		ret = RPD_DUTY;
 8001558:	2309      	movs	r3, #9
 800155a:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		break;
 800155e:	e042      	b.n	80015e6 <commandReply+0x2da>
	case CMD_KEY_SPEED:
		// sprintf((char*) detail, "MANUAL SPEED = %d", duty_cmd.key_speed);
		detail[(*detail_length)++] = MANUAL_SPEED;
 8001560:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	1c59      	adds	r1, r3, #1
 8001568:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 800156c:	6011      	str	r1, [r2, #0]
 800156e:	461a      	mov	r2, r3
 8001570:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8001574:	4413      	add	r3, r2
 8001576:	2215      	movs	r2, #21
 8001578:	701a      	strb	r2, [r3, #0]
		detail[(*detail_length)++] = (uint8_t)(duty_cmd.key_speed);
 800157a:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800157e:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	1c59      	adds	r1, r3, #1
 8001586:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 800158a:	6011      	str	r1, [r2, #0]
 800158c:	461a      	mov	r2, r3
 800158e:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8001592:	4413      	add	r3, r2
 8001594:	b2c2      	uxtb	r2, r0
 8001596:	701a      	strb	r2, [r3, #0]
		ret = RPD_OK;
 8001598:	2308      	movs	r3, #8
 800159a:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		break;
 800159e:	e022      	b.n	80015e6 <commandReply+0x2da>
	case CMD_ERROR:
		// strcpy( (char *)detail, "Check parameters");
		detail[(*detail_length)++] = CHECK_PARAMETER;
 80015a0:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	1c59      	adds	r1, r3, #1
 80015a8:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 80015ac:	6011      	str	r1, [r2, #0]
 80015ae:	461a      	mov	r2, r3
 80015b0:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 80015b4:	4413      	add	r3, r2
 80015b6:	2214      	movs	r2, #20
 80015b8:	701a      	strb	r2, [r3, #0]
		ret = RPD_ERROR;
 80015ba:	2307      	movs	r3, #7
 80015bc:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		break;
 80015c0:	e011      	b.n	80015e6 <commandReply+0x2da>
	default:
		// strcpy( (char *)detail, "Unknown command");
		detail[(*detail_length)++] = UNKNOW_COMMAND;
 80015c2:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	1c59      	adds	r1, r3, #1
 80015ca:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 80015ce:	6011      	str	r1, [r2, #0]
 80015d0:	461a      	mov	r2, r3
 80015d2:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 80015d6:	4413      	add	r3, r2
 80015d8:	2216      	movs	r2, #22
 80015da:	701a      	strb	r2, [r3, #0]
		ret = RPD_ERROR;
 80015dc:	2307      	movs	r3, #7
 80015de:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 80015e2:	e000      	b.n	80015e6 <commandReply+0x2da>
		break;
 80015e4:	bf00      	nop
	}
	return ret;
 80015e6:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	37c8      	adds	r7, #200	; 0xc8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80015f4:	b002      	add	sp, #8
 80015f6:	4770      	bx	lr

080015f8 <commandRespond>:


int32_t				commandRespond	(Robot_RespondTypedef rpd,
										int32_t id_command,
										char *detail,
										char *respond) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b088      	sub	sp, #32
 80015fc:	af02      	add	r7, sp, #8
 80015fe:	60b9      	str	r1, [r7, #8]
 8001600:	607a      	str	r2, [r7, #4]
 8001602:	603b      	str	r3, [r7, #0]
 8001604:	4603      	mov	r3, r0
 8001606:	73fb      	strb	r3, [r7, #15]
	int out_lenght;
	switch(rpd) {
 8001608:	7bfb      	ldrb	r3, [r7, #15]
 800160a:	2b08      	cmp	r3, #8
 800160c:	d836      	bhi.n	800167c <commandRespond+0x84>
 800160e:	a201      	add	r2, pc, #4	; (adr r2, 8001614 <commandRespond+0x1c>)
 8001610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001614:	08001639 	.word	0x08001639
 8001618:	08001639 	.word	0x08001639
 800161c:	0800165f 	.word	0x0800165f
 8001620:	0800165f 	.word	0x0800165f
 8001624:	0800165f 	.word	0x0800165f
 8001628:	0800165f 	.word	0x0800165f
 800162c:	0800165f 	.word	0x0800165f
 8001630:	0800165f 	.word	0x0800165f
 8001634:	0800165f 	.word	0x0800165f
	case RPD_IDLE:
	case RPD_BUSY:
		{
			uint8_t		isScanLitmit;
			isScanLitmit = scaraIsScanLimit();
 8001638:	f007 fcb8 	bl	8008fac <scaraIsScanLimit>
 800163c:	4603      	mov	r3, r0
 800163e:	74fb      	strb	r3, [r7, #19]
			out_lenght = snprintf( (char *)respond,
 8001640:	7bfb      	ldrb	r3, [r7, #15]
 8001642:	4a12      	ldr	r2, [pc, #72]	; (800168c <commandRespond+0x94>)
 8001644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001648:	7cfa      	ldrb	r2, [r7, #19]
 800164a:	9201      	str	r2, [sp, #4]
 800164c:	9300      	str	r3, [sp, #0]
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	4a0f      	ldr	r2, [pc, #60]	; (8001690 <commandRespond+0x98>)
 8001652:	2114      	movs	r1, #20
 8001654:	6838      	ldr	r0, [r7, #0]
 8001656:	f015 f89b 	bl	8016790 <sniprintf>
 800165a:	6178      	str	r0, [r7, #20]
									"%d %s %d",
									(int)id_command,
									ROBOTRESPOND[rpd],
									(int)isScanLitmit);
		}
		break;
 800165c:	e010      	b.n	8001680 <commandRespond+0x88>
	case RPD_STOP:
	case RPD_ERROR:
	case RPD_OK:

		{
			out_lenght = snprintf( (char *)respond,
 800165e:	7bfb      	ldrb	r3, [r7, #15]
 8001660:	4a0a      	ldr	r2, [pc, #40]	; (800168c <commandRespond+0x94>)
 8001662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	9201      	str	r2, [sp, #4]
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	4a09      	ldr	r2, [pc, #36]	; (8001694 <commandRespond+0x9c>)
 8001670:	2191      	movs	r1, #145	; 0x91
 8001672:	6838      	ldr	r0, [r7, #0]
 8001674:	f015 f88c 	bl	8016790 <sniprintf>
 8001678:	6178      	str	r0, [r7, #20]
									"%d %s %s",
									(int)id_command,
									ROBOTRESPOND[rpd],
									(char *)detail);
		}
		break;
 800167a:	e001      	b.n	8001680 <commandRespond+0x88>
	default:
		out_lenght = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]
	}

	return (int32_t)out_lenght;
 8001680:	697b      	ldr	r3, [r7, #20]
}
 8001682:	4618      	mov	r0, r3
 8001684:	3718      	adds	r7, #24
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	20000000 	.word	0x20000000
 8001690:	0801af00 	.word	0x0801af00
 8001694:	0801af0c 	.word	0x0801af0c

08001698 <commandRespond1>:

int32_t				commandRespond1	(Robot_RespondTypedef rpd,
										int32_t id_command,
										char *detail,
										int32_t detail_length,
										char *respond) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	60b9      	str	r1, [r7, #8]
 80016a0:	607a      	str	r2, [r7, #4]
 80016a2:	603b      	str	r3, [r7, #0]
 80016a4:	4603      	mov	r3, r0
 80016a6:	73fb      	strb	r3, [r7, #15]
	int32_t out_length = 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]
	respond[out_length++] = 0x28;
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	1c5a      	adds	r2, r3, #1
 80016b0:	617a      	str	r2, [r7, #20]
 80016b2:	461a      	mov	r2, r3
 80016b4:	6a3b      	ldr	r3, [r7, #32]
 80016b6:	4413      	add	r3, r2
 80016b8:	2228      	movs	r2, #40	; 0x28
 80016ba:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = RESPONSE_TRANSMISION;
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	1c5a      	adds	r2, r3, #1
 80016c0:	617a      	str	r2, [r7, #20]
 80016c2:	461a      	mov	r2, r3
 80016c4:	6a3b      	ldr	r3, [r7, #32]
 80016c6:	4413      	add	r3, r2
 80016c8:	2202      	movs	r2, #2
 80016ca:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = rpd;
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	1c5a      	adds	r2, r3, #1
 80016d0:	617a      	str	r2, [r7, #20]
 80016d2:	461a      	mov	r2, r3
 80016d4:	6a3b      	ldr	r3, [r7, #32]
 80016d6:	4413      	add	r3, r2
 80016d8:	7bfa      	ldrb	r2, [r7, #15]
 80016da:	701a      	strb	r2, [r3, #0]
	respond[out_length++] = id_command;
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	1c5a      	adds	r2, r3, #1
 80016e0:	617a      	str	r2, [r7, #20]
 80016e2:	461a      	mov	r2, r3
 80016e4:	6a3b      	ldr	r3, [r7, #32]
 80016e6:	4413      	add	r3, r2
 80016e8:	68ba      	ldr	r2, [r7, #8]
 80016ea:	b2d2      	uxtb	r2, r2
 80016ec:	701a      	strb	r2, [r3, #0]
	if(detail_length != 0){
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d00b      	beq.n	800170c <commandRespond1+0x74>
		memcpy(&respond[out_length], detail, detail_length);
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	6a3a      	ldr	r2, [r7, #32]
 80016f8:	4413      	add	r3, r2
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	6879      	ldr	r1, [r7, #4]
 80016fe:	4618      	mov	r0, r3
 8001700:	f014 f91e 	bl	8015940 <memcpy>
		out_length += detail_length;
 8001704:	697a      	ldr	r2, [r7, #20]
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	4413      	add	r3, r2
 800170a:	617b      	str	r3, [r7, #20]
	}
	respond[out_length++] = 0x29;
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	1c5a      	adds	r2, r3, #1
 8001710:	617a      	str	r2, [r7, #20]
 8001712:	461a      	mov	r2, r3
 8001714:	6a3b      	ldr	r3, [r7, #32]
 8001716:	4413      	add	r3, r2
 8001718:	2229      	movs	r2, #41	; 0x29
 800171a:	701a      	strb	r2, [r3, #0]

	return out_length;
 800171c:	697b      	ldr	r3, [r7, #20]
}
 800171e:	4618      	mov	r0, r3
 8001720:	3718      	adds	r7, #24
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
	...

08001728 <LOG_REPORT>:
 *  line		: line code number
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t LOG_REPORT(char *message, uint16_t line) {
 8001728:	b580      	push	{r7, lr}
 800172a:	b096      	sub	sp, #88	; 0x58
 800172c:	af02      	add	r7, sp, #8
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	460b      	mov	r3, r1
 8001732:	807b      	strh	r3, [r7, #2]
	uint8_t temp_buff[64];
	int32_t len;

	len = snprintf((char*)temp_buff, 63, "%d, %s \r\n", line, message);
 8001734:	887a      	ldrh	r2, [r7, #2]
 8001736:	f107 0008 	add.w	r0, r7, #8
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	9300      	str	r3, [sp, #0]
 800173e:	4613      	mov	r3, r2
 8001740:	4a17      	ldr	r2, [pc, #92]	; (80017a0 <LOG_REPORT+0x78>)
 8001742:	213f      	movs	r1, #63	; 0x3f
 8001744:	f015 f824 	bl	8016790 <sniprintf>
 8001748:	64f8      	str	r0, [r7, #76]	; 0x4c
	if (-1 == len) {
 800174a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800174c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001750:	d101      	bne.n	8001756 <LOG_REPORT+0x2e>
		return FALSE;
 8001752:	2300      	movs	r3, #0
 8001754:	e01f      	b.n	8001796 <LOG_REPORT+0x6e>
	}
	ringBuff_PushArray(&uart_tx_ringbuff, temp_buff, len);
 8001756:	f107 0308 	add.w	r3, r7, #8
 800175a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800175c:	4619      	mov	r1, r3
 800175e:	4811      	ldr	r0, [pc, #68]	; (80017a4 <LOG_REPORT+0x7c>)
 8001760:	f002 f87d 	bl	800385e <ringBuff_PushArray>
	if (HAL_DMA_GetState(&hdma_uart4_tx) == HAL_DMA_STATE_BUSY) {
 8001764:	4810      	ldr	r0, [pc, #64]	; (80017a8 <LOG_REPORT+0x80>)
 8001766:	f00a f829 	bl	800b7bc <HAL_DMA_GetState>
 800176a:	4603      	mov	r3, r0
 800176c:	2b02      	cmp	r3, #2
 800176e:	d101      	bne.n	8001774 <LOG_REPORT+0x4c>
		return TRUE;
 8001770:	2301      	movs	r3, #1
 8001772:	e010      	b.n	8001796 <LOG_REPORT+0x6e>
	}// dma busy
	uint16_t size_dma;
	size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 8001774:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001778:	490c      	ldr	r1, [pc, #48]	; (80017ac <LOG_REPORT+0x84>)
 800177a:	480a      	ldr	r0, [pc, #40]	; (80017a4 <LOG_REPORT+0x7c>)
 800177c:	f002 f897 	bl	80038ae <ringBuff_PopArray>
 8001780:	4603      	mov	r3, r0
 8001782:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 8001786:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800178a:	461a      	mov	r2, r3
 800178c:	4907      	ldr	r1, [pc, #28]	; (80017ac <LOG_REPORT+0x84>)
 800178e:	4808      	ldr	r0, [pc, #32]	; (80017b0 <LOG_REPORT+0x88>)
 8001790:	f00c fc26 	bl	800dfe0 <HAL_UART_Transmit_DMA>
	return TRUE;
 8001794:	2301      	movs	r3, #1
}
 8001796:	4618      	mov	r0, r3
 8001798:	3750      	adds	r7, #80	; 0x50
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	0801af18 	.word	0x0801af18
 80017a4:	20000840 	.word	0x20000840
 80017a8:	20006120 	.word	0x20006120
 80017ac:	200051b4 	.word	0x200051b4
 80017b0:	200060e0 	.word	0x200060e0
 80017b4:	00000000 	.word	0x00000000

080017b8 <double2string>:

int32_t	double2string( uint8_t *result, double value, uint8_t precision) {
 80017b8:	b5b0      	push	{r4, r5, r7, lr}
 80017ba:	b090      	sub	sp, #64	; 0x40
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	ed87 0b00 	vstr	d0, [r7]
 80017c4:	460b      	mov	r3, r1
 80017c6:	72fb      	strb	r3, [r7, #11]
	uint8_t le[6];
	int8_t sign;
	double temp1, temp2;
	int32_t index;

	if((precision < 0) || (6 < precision)) {
 80017c8:	7afb      	ldrb	r3, [r7, #11]
 80017ca:	2b06      	cmp	r3, #6
 80017cc:	d901      	bls.n	80017d2 <double2string+0x1a>
		precision = 6;
 80017ce:	2306      	movs	r3, #6
 80017d0:	72fb      	strb	r3, [r7, #11]
	}

	if(value < 0) {
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	f04f 0300 	mov.w	r3, #0
 80017da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017de:	f7ff f97d 	bl	8000adc <__aeabi_dcmplt>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d003      	beq.n	80017f0 <double2string+0x38>
		sign = -1;
 80017e8:	23ff      	movs	r3, #255	; 0xff
 80017ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80017ee:	e002      	b.n	80017f6 <double2string+0x3e>
	} else {
		sign = 1;
 80017f0:	2301      	movs	r3, #1
 80017f2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}
	value = value*sign;
 80017f6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7fe fe92 	bl	8000524 <__aeabi_i2d>
 8001800:	4603      	mov	r3, r0
 8001802:	460c      	mov	r4, r1
 8001804:	461a      	mov	r2, r3
 8001806:	4623      	mov	r3, r4
 8001808:	e9d7 0100 	ldrd	r0, r1, [r7]
 800180c:	f7fe fef4 	bl	80005f8 <__aeabi_dmul>
 8001810:	4603      	mov	r3, r0
 8001812:	460c      	mov	r4, r1
 8001814:	e9c7 3400 	strd	r3, r4, [r7]

	if (value > 10000.0f) {
 8001818:	a307      	add	r3, pc, #28	; (adr r3, 8001838 <double2string+0x80>)
 800181a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001822:	f7ff f979 	bl	8000b18 <__aeabi_dcmpgt>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d009      	beq.n	8001840 <double2string+0x88>
		return -1;
 800182c:	f04f 33ff 	mov.w	r3, #4294967295
 8001830:	e265      	b.n	8001cfe <double2string+0x546>
 8001832:	bf00      	nop
 8001834:	f3af 8000 	nop.w
 8001838:	00000000 	.word	0x00000000
 800183c:	40c38800 	.word	0x40c38800
	}

	nguyen[0] 	= (int32_t)value/1000;
 8001840:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001844:	f7ff f988 	bl	8000b58 <__aeabi_d2iz>
 8001848:	4603      	mov	r3, r0
 800184a:	4acf      	ldr	r2, [pc, #828]	; (8001b88 <double2string+0x3d0>)
 800184c:	fb82 1203 	smull	r1, r2, r2, r3
 8001850:	1192      	asrs	r2, r2, #6
 8001852:	17db      	asrs	r3, r3, #31
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	b2db      	uxtb	r3, r3
 8001858:	773b      	strb	r3, [r7, #28]
	nguyen[1]	= (int32_t)value/100 - nguyen[0]*10;
 800185a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800185e:	f7ff f97b 	bl	8000b58 <__aeabi_d2iz>
 8001862:	4603      	mov	r3, r0
 8001864:	4ac9      	ldr	r2, [pc, #804]	; (8001b8c <double2string+0x3d4>)
 8001866:	fb82 1203 	smull	r1, r2, r2, r3
 800186a:	1152      	asrs	r2, r2, #5
 800186c:	17db      	asrs	r3, r3, #31
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	b2da      	uxtb	r2, r3
 8001872:	7f3b      	ldrb	r3, [r7, #28]
 8001874:	4619      	mov	r1, r3
 8001876:	0149      	lsls	r1, r1, #5
 8001878:	1ac9      	subs	r1, r1, r3
 800187a:	0089      	lsls	r1, r1, #2
 800187c:	1acb      	subs	r3, r1, r3
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	b2db      	uxtb	r3, r3
 8001882:	4413      	add	r3, r2
 8001884:	b2db      	uxtb	r3, r3
 8001886:	777b      	strb	r3, [r7, #29]
	nguyen[2]	= (int32_t)value/10 - nguyen[0]*100 - nguyen[1]*10;
 8001888:	e9d7 0100 	ldrd	r0, r1, [r7]
 800188c:	f7ff f964 	bl	8000b58 <__aeabi_d2iz>
 8001890:	4603      	mov	r3, r0
 8001892:	4abf      	ldr	r2, [pc, #764]	; (8001b90 <double2string+0x3d8>)
 8001894:	fb82 1203 	smull	r1, r2, r2, r3
 8001898:	1092      	asrs	r2, r2, #2
 800189a:	17db      	asrs	r3, r3, #31
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	7f7b      	ldrb	r3, [r7, #29]
 80018a2:	4619      	mov	r1, r3
 80018a4:	0149      	lsls	r1, r1, #5
 80018a6:	1ac9      	subs	r1, r1, r3
 80018a8:	0089      	lsls	r1, r1, #2
 80018aa:	1acb      	subs	r3, r1, r3
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	b2d9      	uxtb	r1, r3
 80018b0:	7f3b      	ldrb	r3, [r7, #28]
 80018b2:	4618      	mov	r0, r3
 80018b4:	0080      	lsls	r0, r0, #2
 80018b6:	4418      	add	r0, r3
 80018b8:	00c0      	lsls	r0, r0, #3
 80018ba:	1ac3      	subs	r3, r0, r3
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	440b      	add	r3, r1
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	4413      	add	r3, r2
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	77bb      	strb	r3, [r7, #30]
	nguyen[3]	= (int32_t)value - nguyen[0]*1000 - nguyen[1]*100 - nguyen[2]*10;
 80018ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018ce:	f7ff f943 	bl	8000b58 <__aeabi_d2iz>
 80018d2:	4603      	mov	r3, r0
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	7f7b      	ldrb	r3, [r7, #29]
 80018d8:	4619      	mov	r1, r3
 80018da:	0089      	lsls	r1, r1, #2
 80018dc:	4419      	add	r1, r3
 80018de:	00c9      	lsls	r1, r1, #3
 80018e0:	1acb      	subs	r3, r1, r3
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	b2d9      	uxtb	r1, r3
 80018e6:	7f3b      	ldrb	r3, [r7, #28]
 80018e8:	4618      	mov	r0, r3
 80018ea:	0040      	lsls	r0, r0, #1
 80018ec:	4403      	add	r3, r0
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	440b      	add	r3, r1
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	4413      	add	r3, r2
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	7fbb      	ldrb	r3, [r7, #30]
 80018fc:	4619      	mov	r1, r3
 80018fe:	0149      	lsls	r1, r1, #5
 8001900:	1ac9      	subs	r1, r1, r3
 8001902:	0089      	lsls	r1, r1, #2
 8001904:	1acb      	subs	r3, r1, r3
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	b2db      	uxtb	r3, r3
 800190a:	4413      	add	r3, r2
 800190c:	b2db      	uxtb	r3, r3
 800190e:	77fb      	strb	r3, [r7, #31]

	temp1	= (value - nguyen[0]*1000 - nguyen[1]*100 - nguyen[2]*10 - nguyen[3])*1000;
 8001910:	7f3b      	ldrb	r3, [r7, #28]
 8001912:	461a      	mov	r2, r3
 8001914:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001918:	fb03 f302 	mul.w	r3, r3, r2
 800191c:	4618      	mov	r0, r3
 800191e:	f7fe fe01 	bl	8000524 <__aeabi_i2d>
 8001922:	4603      	mov	r3, r0
 8001924:	460c      	mov	r4, r1
 8001926:	461a      	mov	r2, r3
 8001928:	4623      	mov	r3, r4
 800192a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800192e:	f7fe fcab 	bl	8000288 <__aeabi_dsub>
 8001932:	4603      	mov	r3, r0
 8001934:	460c      	mov	r4, r1
 8001936:	4625      	mov	r5, r4
 8001938:	461c      	mov	r4, r3
 800193a:	7f7b      	ldrb	r3, [r7, #29]
 800193c:	461a      	mov	r2, r3
 800193e:	2364      	movs	r3, #100	; 0x64
 8001940:	fb03 f302 	mul.w	r3, r3, r2
 8001944:	4618      	mov	r0, r3
 8001946:	f7fe fded 	bl	8000524 <__aeabi_i2d>
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	4620      	mov	r0, r4
 8001950:	4629      	mov	r1, r5
 8001952:	f7fe fc99 	bl	8000288 <__aeabi_dsub>
 8001956:	4603      	mov	r3, r0
 8001958:	460c      	mov	r4, r1
 800195a:	4625      	mov	r5, r4
 800195c:	461c      	mov	r4, r3
 800195e:	7fbb      	ldrb	r3, [r7, #30]
 8001960:	461a      	mov	r2, r3
 8001962:	4613      	mov	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	4618      	mov	r0, r3
 800196c:	f7fe fdda 	bl	8000524 <__aeabi_i2d>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	4620      	mov	r0, r4
 8001976:	4629      	mov	r1, r5
 8001978:	f7fe fc86 	bl	8000288 <__aeabi_dsub>
 800197c:	4603      	mov	r3, r0
 800197e:	460c      	mov	r4, r1
 8001980:	4625      	mov	r5, r4
 8001982:	461c      	mov	r4, r3
 8001984:	7ffb      	ldrb	r3, [r7, #31]
 8001986:	4618      	mov	r0, r3
 8001988:	f7fe fdcc 	bl	8000524 <__aeabi_i2d>
 800198c:	4602      	mov	r2, r0
 800198e:	460b      	mov	r3, r1
 8001990:	4620      	mov	r0, r4
 8001992:	4629      	mov	r1, r5
 8001994:	f7fe fc78 	bl	8000288 <__aeabi_dsub>
 8001998:	4603      	mov	r3, r0
 800199a:	460c      	mov	r4, r1
 800199c:	4618      	mov	r0, r3
 800199e:	4621      	mov	r1, r4
 80019a0:	f04f 0200 	mov.w	r2, #0
 80019a4:	4b7b      	ldr	r3, [pc, #492]	; (8001b94 <double2string+0x3dc>)
 80019a6:	f7fe fe27 	bl	80005f8 <__aeabi_dmul>
 80019aa:	4603      	mov	r3, r0
 80019ac:	460c      	mov	r4, r1
 80019ae:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	le[0] 	= (int32_t)temp1/100;
 80019b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80019b6:	f7ff f8cf 	bl	8000b58 <__aeabi_d2iz>
 80019ba:	4603      	mov	r3, r0
 80019bc:	4a73      	ldr	r2, [pc, #460]	; (8001b8c <double2string+0x3d4>)
 80019be:	fb82 1203 	smull	r1, r2, r2, r3
 80019c2:	1152      	asrs	r2, r2, #5
 80019c4:	17db      	asrs	r3, r3, #31
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	753b      	strb	r3, [r7, #20]
	le[1] 	= (int32_t)temp1/10 - le[0]*10;
 80019cc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80019d0:	f7ff f8c2 	bl	8000b58 <__aeabi_d2iz>
 80019d4:	4603      	mov	r3, r0
 80019d6:	4a6e      	ldr	r2, [pc, #440]	; (8001b90 <double2string+0x3d8>)
 80019d8:	fb82 1203 	smull	r1, r2, r2, r3
 80019dc:	1092      	asrs	r2, r2, #2
 80019de:	17db      	asrs	r3, r3, #31
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	7d3b      	ldrb	r3, [r7, #20]
 80019e6:	4619      	mov	r1, r3
 80019e8:	0149      	lsls	r1, r1, #5
 80019ea:	1ac9      	subs	r1, r1, r3
 80019ec:	0089      	lsls	r1, r1, #2
 80019ee:	1acb      	subs	r3, r1, r3
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	4413      	add	r3, r2
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	757b      	strb	r3, [r7, #21]
	le[2]	= (int32_t)temp1 - le[0]*100 - le[1]*10;
 80019fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80019fe:	f7ff f8ab 	bl	8000b58 <__aeabi_d2iz>
 8001a02:	4603      	mov	r3, r0
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	7d7b      	ldrb	r3, [r7, #21]
 8001a08:	4619      	mov	r1, r3
 8001a0a:	0149      	lsls	r1, r1, #5
 8001a0c:	1ac9      	subs	r1, r1, r3
 8001a0e:	0089      	lsls	r1, r1, #2
 8001a10:	1acb      	subs	r3, r1, r3
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	b2d9      	uxtb	r1, r3
 8001a16:	7d3b      	ldrb	r3, [r7, #20]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	0080      	lsls	r0, r0, #2
 8001a1c:	4418      	add	r0, r3
 8001a1e:	00c0      	lsls	r0, r0, #3
 8001a20:	1ac3      	subs	r3, r0, r3
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	440b      	add	r3, r1
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	4413      	add	r3, r2
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	75bb      	strb	r3, [r7, #22]

	temp2	= (temp1 - le[0]*100 - le[1]*10 - le[2])*1000;
 8001a30:	7d3b      	ldrb	r3, [r7, #20]
 8001a32:	461a      	mov	r2, r3
 8001a34:	2364      	movs	r3, #100	; 0x64
 8001a36:	fb03 f302 	mul.w	r3, r3, r2
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7fe fd72 	bl	8000524 <__aeabi_i2d>
 8001a40:	4603      	mov	r3, r0
 8001a42:	460c      	mov	r4, r1
 8001a44:	461a      	mov	r2, r3
 8001a46:	4623      	mov	r3, r4
 8001a48:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a4c:	f7fe fc1c 	bl	8000288 <__aeabi_dsub>
 8001a50:	4603      	mov	r3, r0
 8001a52:	460c      	mov	r4, r1
 8001a54:	4625      	mov	r5, r4
 8001a56:	461c      	mov	r4, r3
 8001a58:	7d7b      	ldrb	r3, [r7, #21]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7fe fd5d 	bl	8000524 <__aeabi_i2d>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	4620      	mov	r0, r4
 8001a70:	4629      	mov	r1, r5
 8001a72:	f7fe fc09 	bl	8000288 <__aeabi_dsub>
 8001a76:	4603      	mov	r3, r0
 8001a78:	460c      	mov	r4, r1
 8001a7a:	4625      	mov	r5, r4
 8001a7c:	461c      	mov	r4, r3
 8001a7e:	7dbb      	ldrb	r3, [r7, #22]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7fe fd4f 	bl	8000524 <__aeabi_i2d>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	4620      	mov	r0, r4
 8001a8c:	4629      	mov	r1, r5
 8001a8e:	f7fe fbfb 	bl	8000288 <__aeabi_dsub>
 8001a92:	4603      	mov	r3, r0
 8001a94:	460c      	mov	r4, r1
 8001a96:	4618      	mov	r0, r3
 8001a98:	4621      	mov	r1, r4
 8001a9a:	f04f 0200 	mov.w	r2, #0
 8001a9e:	4b3d      	ldr	r3, [pc, #244]	; (8001b94 <double2string+0x3dc>)
 8001aa0:	f7fe fdaa 	bl	80005f8 <__aeabi_dmul>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	460c      	mov	r4, r1
 8001aa8:	e9c7 3408 	strd	r3, r4, [r7, #32]
	le[3] 	= (int32_t)temp2/100;
 8001aac:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ab0:	f7ff f852 	bl	8000b58 <__aeabi_d2iz>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	4a35      	ldr	r2, [pc, #212]	; (8001b8c <double2string+0x3d4>)
 8001ab8:	fb82 1203 	smull	r1, r2, r2, r3
 8001abc:	1152      	asrs	r2, r2, #5
 8001abe:	17db      	asrs	r3, r3, #31
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	75fb      	strb	r3, [r7, #23]
	le[4] 	= (int32_t)temp2/10 - le[3]*10;
 8001ac6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001aca:	f7ff f845 	bl	8000b58 <__aeabi_d2iz>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	4a2f      	ldr	r2, [pc, #188]	; (8001b90 <double2string+0x3d8>)
 8001ad2:	fb82 1203 	smull	r1, r2, r2, r3
 8001ad6:	1092      	asrs	r2, r2, #2
 8001ad8:	17db      	asrs	r3, r3, #31
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	b2da      	uxtb	r2, r3
 8001ade:	7dfb      	ldrb	r3, [r7, #23]
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	0149      	lsls	r1, r1, #5
 8001ae4:	1ac9      	subs	r1, r1, r3
 8001ae6:	0089      	lsls	r1, r1, #2
 8001ae8:	1acb      	subs	r3, r1, r3
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	4413      	add	r3, r2
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	763b      	strb	r3, [r7, #24]
	le[5]	= (int32_t)temp2 - le[3]*100 - le[4]*10;
 8001af4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001af8:	f7ff f82e 	bl	8000b58 <__aeabi_d2iz>
 8001afc:	4603      	mov	r3, r0
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	7e3b      	ldrb	r3, [r7, #24]
 8001b02:	4619      	mov	r1, r3
 8001b04:	0149      	lsls	r1, r1, #5
 8001b06:	1ac9      	subs	r1, r1, r3
 8001b08:	0089      	lsls	r1, r1, #2
 8001b0a:	1acb      	subs	r3, r1, r3
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	b2d9      	uxtb	r1, r3
 8001b10:	7dfb      	ldrb	r3, [r7, #23]
 8001b12:	4618      	mov	r0, r3
 8001b14:	0080      	lsls	r0, r0, #2
 8001b16:	4418      	add	r0, r3
 8001b18:	00c0      	lsls	r0, r0, #3
 8001b1a:	1ac3      	subs	r3, r0, r3
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	440b      	add	r3, r1
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	4413      	add	r3, r2
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	767b      	strb	r3, [r7, #25]
	// Rounding
	if ((temp2 - le[3]*1000 - le[4]*100 - le[5]) >= 0.5) {
 8001b2a:	7dfb      	ldrb	r3, [r7, #23]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b32:	fb03 f302 	mul.w	r3, r3, r2
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7fe fcf4 	bl	8000524 <__aeabi_i2d>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	460c      	mov	r4, r1
 8001b40:	461a      	mov	r2, r3
 8001b42:	4623      	mov	r3, r4
 8001b44:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b48:	f7fe fb9e 	bl	8000288 <__aeabi_dsub>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	460c      	mov	r4, r1
 8001b50:	4625      	mov	r5, r4
 8001b52:	461c      	mov	r4, r3
 8001b54:	7e3b      	ldrb	r3, [r7, #24]
 8001b56:	461a      	mov	r2, r3
 8001b58:	2364      	movs	r3, #100	; 0x64
 8001b5a:	fb03 f302 	mul.w	r3, r3, r2
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7fe fce0 	bl	8000524 <__aeabi_i2d>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4620      	mov	r0, r4
 8001b6a:	4629      	mov	r1, r5
 8001b6c:	f7fe fb8c 	bl	8000288 <__aeabi_dsub>
 8001b70:	4603      	mov	r3, r0
 8001b72:	460c      	mov	r4, r1
 8001b74:	4625      	mov	r5, r4
 8001b76:	461c      	mov	r4, r3
 8001b78:	7e7b      	ldrb	r3, [r7, #25]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7fe fcd2 	bl	8000524 <__aeabi_i2d>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	e008      	b.n	8001b98 <double2string+0x3e0>
 8001b86:	bf00      	nop
 8001b88:	10624dd3 	.word	0x10624dd3
 8001b8c:	51eb851f 	.word	0x51eb851f
 8001b90:	66666667 	.word	0x66666667
 8001b94:	408f4000 	.word	0x408f4000
 8001b98:	4620      	mov	r0, r4
 8001b9a:	4629      	mov	r1, r5
 8001b9c:	f7fe fb74 	bl	8000288 <__aeabi_dsub>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	460c      	mov	r4, r1
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	4621      	mov	r1, r4
 8001ba8:	f04f 0200 	mov.w	r2, #0
 8001bac:	4b56      	ldr	r3, [pc, #344]	; (8001d08 <double2string+0x550>)
 8001bae:	f7fe ffa9 	bl	8000b04 <__aeabi_dcmpge>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d003      	beq.n	8001bc0 <double2string+0x408>
		le[5]++;
 8001bb8:	7e7b      	ldrb	r3, [r7, #25]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	767b      	strb	r3, [r7, #25]
	}

	index = 0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	63bb      	str	r3, [r7, #56]	; 0x38

	if( -1 == sign) {
 8001bc4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bcc:	d107      	bne.n	8001bde <double2string+0x426>
		*(result + index++) = '-'; // Negative
 8001bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bd0:	1c5a      	adds	r2, r3, #1
 8001bd2:	63ba      	str	r2, [r7, #56]	; 0x38
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	4413      	add	r3, r2
 8001bda:	222d      	movs	r2, #45	; 0x2d
 8001bdc:	701a      	strb	r2, [r3, #0]
	}
	// Find first position
	if ( value < 1) {
 8001bde:	f04f 0200 	mov.w	r2, #0
 8001be2:	4b4a      	ldr	r3, [pc, #296]	; (8001d0c <double2string+0x554>)
 8001be4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001be8:	f7fe ff78 	bl	8000adc <__aeabi_dcmplt>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d008      	beq.n	8001c04 <double2string+0x44c>
		*(result + index++) = 0x30;
 8001bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bf4:	1c5a      	adds	r2, r3, #1
 8001bf6:	63ba      	str	r2, [r7, #56]	; 0x38
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	2230      	movs	r2, #48	; 0x30
 8001c00:	701a      	strb	r2, [r3, #0]
 8001c02:	e04b      	b.n	8001c9c <double2string+0x4e4>
	} else {
		int8_t i = 0;
 8001c04:	2300      	movs	r3, #0
 8001c06:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		for( ; i < 4; i++) {
 8001c0a:	e027      	b.n	8001c5c <double2string+0x4a4>
			if (nguyen[i] > 0) {
 8001c0c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001c10:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001c14:	4413      	add	r3, r2
 8001c16:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d017      	beq.n	8001c4e <double2string+0x496>
				*(result + index++) = nguyen[i] + 0x30;
 8001c1e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001c22:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001c26:	4413      	add	r3, r2
 8001c28:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 8001c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c2e:	1c59      	adds	r1, r3, #1
 8001c30:	63b9      	str	r1, [r7, #56]	; 0x38
 8001c32:	4619      	mov	r1, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	440b      	add	r3, r1
 8001c38:	3230      	adds	r2, #48	; 0x30
 8001c3a:	b2d2      	uxtb	r2, r2
 8001c3c:	701a      	strb	r2, [r3, #0]
				i++;
 8001c3e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	3301      	adds	r3, #1
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;
 8001c4c:	e00a      	b.n	8001c64 <double2string+0x4ac>
		for( ; i < 4; i++) {
 8001c4e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	3301      	adds	r3, #1
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001c5c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001c60:	2b03      	cmp	r3, #3
 8001c62:	ddd3      	ble.n	8001c0c <double2string+0x454>
			}
		}

		for( ; i < 4; i++) {
 8001c64:	e016      	b.n	8001c94 <double2string+0x4dc>
		*(result + index++) = nguyen[i] + 0x30;
 8001c66:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001c6a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001c6e:	4413      	add	r3, r2
 8001c70:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 8001c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c76:	1c59      	adds	r1, r3, #1
 8001c78:	63b9      	str	r1, [r7, #56]	; 0x38
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	440b      	add	r3, r1
 8001c80:	3230      	adds	r2, #48	; 0x30
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	701a      	strb	r2, [r3, #0]
		for( ; i < 4; i++) {
 8001c86:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001c94:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001c98:	2b03      	cmp	r3, #3
 8001c9a:	dde4      	ble.n	8001c66 <double2string+0x4ae>
		}
	}
	*(result + index++) = '.';
 8001c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c9e:	1c5a      	adds	r2, r3, #1
 8001ca0:	63ba      	str	r2, [r7, #56]	; 0x38
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	222e      	movs	r2, #46	; 0x2e
 8001caa:	701a      	strb	r2, [r3, #0]
	for( int8_t i = 0; i < precision; i++) {
 8001cac:	2300      	movs	r3, #0
 8001cae:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001cb2:	e016      	b.n	8001ce2 <double2string+0x52a>
			*(result + index++) = le[i] + 0x30;
 8001cb4:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001cb8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001cbc:	4413      	add	r3, r2
 8001cbe:	f813 2c2c 	ldrb.w	r2, [r3, #-44]
 8001cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cc4:	1c59      	adds	r1, r3, #1
 8001cc6:	63b9      	str	r1, [r7, #56]	; 0x38
 8001cc8:	4619      	mov	r1, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	440b      	add	r3, r1
 8001cce:	3230      	adds	r2, #48	; 0x30
 8001cd0:	b2d2      	uxtb	r2, r2
 8001cd2:	701a      	strb	r2, [r3, #0]
	for( int8_t i = 0; i < precision; i++) {
 8001cd4:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	3301      	adds	r3, #1
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001ce2:	f997 2036 	ldrsb.w	r2, [r7, #54]	; 0x36
 8001ce6:	7afb      	ldrb	r3, [r7, #11]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	dbe3      	blt.n	8001cb4 <double2string+0x4fc>
	}

	// Chua giai quyet van de lam tron chu so thap phan
	*(result + index++) = 0;
 8001cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cee:	1c5a      	adds	r2, r3, #1
 8001cf0:	63ba      	str	r2, [r7, #56]	; 0x38
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	701a      	strb	r2, [r3, #0]
	return index;
 8001cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3740      	adds	r7, #64	; 0x40
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bdb0      	pop	{r4, r5, r7, pc}
 8001d06:	bf00      	nop
 8001d08:	3fe00000 	.word	0x3fe00000
 8001d0c:	3ff00000 	.word	0x3ff00000

08001d10 <packPayload>:
 *  in_lenght		: lenght of input_buff
 *
 *  returns:		: lenght of output_buff
 *  				  -1 if error
 */
int32_t	packPayload		(uint8_t *input_buff, uint8_t *output_buff, int32_t in_lenght) {
 8001d10:	b5b0      	push	{r4, r5, r7, lr}
 8001d12:	b088      	sub	sp, #32
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
 8001d1c:	466b      	mov	r3, sp
 8001d1e:	461d      	mov	r5, r3
	if (NULL == input_buff) {
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d102      	bne.n	8001d2c <packPayload+0x1c>
		return -1;
 8001d26:	f04f 33ff 	mov.w	r3, #4294967295
 8001d2a:	e056      	b.n	8001dda <packPayload+0xca>
	}

	if (NULL == output_buff) {
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d102      	bne.n	8001d38 <packPayload+0x28>
		return -1;
 8001d32:	f04f 33ff 	mov.w	r3, #4294967295
 8001d36:	e050      	b.n	8001dda <packPayload+0xca>
	}

	int32_t out_lenght = 0;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	61bb      	str	r3, [r7, #24]

	out_lenght = in_lenght + 2;//lenght of start char and end char
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3302      	adds	r3, #2
 8001d40:	61bb      	str	r3, [r7, #24]
//		if ( (START_CHAR == input_buff[i]) ||	(END_CHAR == input_buff[i])	|| (ADD_CHAR == input_buff[i]) ) {
//			out_lenght++;
//		}
//	}// compute output buffer lenght

	uint8_t temp_buff[out_lenght];
 8001d42:	69b8      	ldr	r0, [r7, #24]
 8001d44:	1e43      	subs	r3, r0, #1
 8001d46:	617b      	str	r3, [r7, #20]
 8001d48:	4603      	mov	r3, r0
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	f04f 0200 	mov.w	r2, #0
 8001d50:	f04f 0300 	mov.w	r3, #0
 8001d54:	f04f 0400 	mov.w	r4, #0
 8001d58:	00d4      	lsls	r4, r2, #3
 8001d5a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001d5e:	00cb      	lsls	r3, r1, #3
 8001d60:	4603      	mov	r3, r0
 8001d62:	4619      	mov	r1, r3
 8001d64:	f04f 0200 	mov.w	r2, #0
 8001d68:	f04f 0300 	mov.w	r3, #0
 8001d6c:	f04f 0400 	mov.w	r4, #0
 8001d70:	00d4      	lsls	r4, r2, #3
 8001d72:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001d76:	00cb      	lsls	r3, r1, #3
 8001d78:	4603      	mov	r3, r0
 8001d7a:	3307      	adds	r3, #7
 8001d7c:	08db      	lsrs	r3, r3, #3
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	ebad 0d03 	sub.w	sp, sp, r3
 8001d84:	466b      	mov	r3, sp
 8001d86:	3300      	adds	r3, #0
 8001d88:	613b      	str	r3, [r7, #16]

	out_lenght = 0;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61bb      	str	r3, [r7, #24]
	temp_buff[out_lenght++] = START_CHAR;
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	1c5a      	adds	r2, r3, #1
 8001d92:	61ba      	str	r2, [r7, #24]
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	2128      	movs	r1, #40	; 0x28
 8001d98:	54d1      	strb	r1, [r2, r3]
	for (int32_t i = 0; i < in_lenght; i++) {
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	61fb      	str	r3, [r7, #28]
 8001d9e:	e00b      	b.n	8001db8 <packPayload+0xa8>
//			temp_buff[out_lenght++] = ADD_CHAR;
//			temp_buff[out_lenght++] = input_buff[i] ^ XOR_CHAR;
//		} else {
//			temp_buff[out_lenght++] = input_buff[i];
//		}
		temp_buff[out_lenght++] = input_buff[i];
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	441a      	add	r2, r3
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	1c59      	adds	r1, r3, #1
 8001daa:	61b9      	str	r1, [r7, #24]
 8001dac:	7811      	ldrb	r1, [r2, #0]
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	54d1      	strb	r1, [r2, r3]
	for (int32_t i = 0; i < in_lenght; i++) {
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	3301      	adds	r3, #1
 8001db6:	61fb      	str	r3, [r7, #28]
 8001db8:	69fa      	ldr	r2, [r7, #28]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	dbef      	blt.n	8001da0 <packPayload+0x90>
	}
	temp_buff[out_lenght++] = END_CHAR;
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	1c5a      	adds	r2, r3, #1
 8001dc4:	61ba      	str	r2, [r7, #24]
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	2129      	movs	r1, #41	; 0x29
 8001dca:	54d1      	strb	r1, [r2, r3]

	memmove(output_buff, temp_buff, out_lenght);
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	68b8      	ldr	r0, [r7, #8]
 8001dd4:	f013 fdbf 	bl	8015956 <memmove>

	return out_lenght;
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	46ad      	mov	sp, r5
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3720      	adds	r7, #32
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bdb0      	pop	{r4, r5, r7, pc}

08001de4 <unPackPayload>:
 *  in_lenght		: lenght of input_buff
 *
 *  returns:		: lenght of output_buff
 *  				  -1 if error
 */
int32_t	unPackPayload	(uint8_t *message_buff, int32_t in_lenght) {
 8001de4:	b5b0      	push	{r4, r5, r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
 8001dee:	466b      	mov	r3, sp
 8001df0:	461d      	mov	r5, r3
	if (in_lenght < MIN_MESSAGE_LENGHT) {
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	2b03      	cmp	r3, #3
 8001df6:	dc02      	bgt.n	8001dfe <unPackPayload+0x1a>
		return -1;
 8001df8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dfc:	e063      	b.n	8001ec6 <unPackPayload+0xe2>
	}// check minimum lenght

	if ( (START_CHAR != message_buff[0]) || (END_CHAR != message_buff[in_lenght - 1]) ) {
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	2b28      	cmp	r3, #40	; 0x28
 8001e04:	d106      	bne.n	8001e14 <unPackPayload+0x30>
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	2b29      	cmp	r3, #41	; 0x29
 8001e12:	d002      	beq.n	8001e1a <unPackPayload+0x36>
		return -1;
 8001e14:	f04f 33ff 	mov.w	r3, #4294967295
 8001e18:	e055      	b.n	8001ec6 <unPackPayload+0xe2>
	}// check start char and end char

	int32_t out_lenght = in_lenght - 2;
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	3b02      	subs	r3, #2
 8001e1e:	613b      	str	r3, [r7, #16]
//		if ( (START_CHAR == message_buff[i]) || (END_CHAR == message_buff[i]) || (ADD_CHAR == message_buff[i]) ) {
//			out_lenght--;
//		}
//	}// compute output buffer lenght

	uint8_t temp_buff[out_lenght];
 8001e20:	6938      	ldr	r0, [r7, #16]
 8001e22:	1e43      	subs	r3, r0, #1
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	4603      	mov	r3, r0
 8001e28:	4619      	mov	r1, r3
 8001e2a:	f04f 0200 	mov.w	r2, #0
 8001e2e:	f04f 0300 	mov.w	r3, #0
 8001e32:	f04f 0400 	mov.w	r4, #0
 8001e36:	00d4      	lsls	r4, r2, #3
 8001e38:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001e3c:	00cb      	lsls	r3, r1, #3
 8001e3e:	4603      	mov	r3, r0
 8001e40:	4619      	mov	r1, r3
 8001e42:	f04f 0200 	mov.w	r2, #0
 8001e46:	f04f 0300 	mov.w	r3, #0
 8001e4a:	f04f 0400 	mov.w	r4, #0
 8001e4e:	00d4      	lsls	r4, r2, #3
 8001e50:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001e54:	00cb      	lsls	r3, r1, #3
 8001e56:	4603      	mov	r3, r0
 8001e58:	3307      	adds	r3, #7
 8001e5a:	08db      	lsrs	r3, r3, #3
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	ebad 0d03 	sub.w	sp, sp, r3
 8001e62:	466b      	mov	r3, sp
 8001e64:	3300      	adds	r3, #0
 8001e66:	60bb      	str	r3, [r7, #8]

	out_lenght = 0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	613b      	str	r3, [r7, #16]
	for (int32_t i = 0; i < (in_lenght - 1); i++) {
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
 8001e70:	e017      	b.n	8001ea2 <unPackPayload+0xbe>
		if ( (START_CHAR == message_buff[i]) ||	(END_CHAR == message_buff[i]) ) {
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	4413      	add	r3, r2
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	2b28      	cmp	r3, #40	; 0x28
 8001e7c:	d00e      	beq.n	8001e9c <unPackPayload+0xb8>
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	4413      	add	r3, r2
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b29      	cmp	r3, #41	; 0x29
 8001e88:	d008      	beq.n	8001e9c <unPackPayload+0xb8>
			;
//		} else if ( (ADD_CHAR == message_buff[i]) ) {
//			temp_buff[out_lenght++] = message_buff[++i] ^ XOR_CHAR;
		}
		else {
			temp_buff[out_lenght++] = message_buff[i];
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	441a      	add	r2, r3
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1c59      	adds	r1, r3, #1
 8001e94:	6139      	str	r1, [r7, #16]
 8001e96:	7811      	ldrb	r1, [r2, #0]
 8001e98:	68ba      	ldr	r2, [r7, #8]
 8001e9a:	54d1      	strb	r1, [r2, r3]
	for (int32_t i = 0; i < (in_lenght - 1); i++) {
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	617b      	str	r3, [r7, #20]
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	dbe2      	blt.n	8001e72 <unPackPayload+0x8e>
		}
	}
	memset((uint8_t*)message_buff, 0, in_lenght);
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f013 fd68 	bl	8015988 <memset>
	memmove(message_buff, temp_buff, out_lenght);
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f013 fd49 	bl	8015956 <memmove>

	return out_lenght;
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	46ad      	mov	sp, r5
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3718      	adds	r7, #24
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bdb0      	pop	{r4, r5, r7, pc}

08001ed0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	607b      	str	r3, [r7, #4]
 8001eda:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <MX_DMA_Init+0x3c>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	4a0b      	ldr	r2, [pc, #44]	; (8001f0c <MX_DMA_Init+0x3c>)
 8001ee0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee6:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <MX_DMA_Init+0x3c>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eee:	607b      	str	r3, [r7, #4]
 8001ef0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	2105      	movs	r1, #5
 8001ef6:	200f      	movs	r0, #15
 8001ef8:	f009 f984 	bl	800b204 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001efc:	200f      	movs	r0, #15
 8001efe:	f009 f99d 	bl	800b23c <HAL_NVIC_EnableIRQ>

}
 8001f02:	bf00      	nop
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40023800 	.word	0x40023800

08001f10 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	4a07      	ldr	r2, [pc, #28]	; (8001f3c <vApplicationGetIdleTaskMemory+0x2c>)
 8001f20:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	4a06      	ldr	r2, [pc, #24]	; (8001f40 <vApplicationGetIdleTaskMemory+0x30>)
 8001f26:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f2e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8001f30:	bf00      	nop
 8001f32:	3714      	adds	r7, #20
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	20000ffc 	.word	0x20000ffc
 8001f40:	20001050 	.word	0x20001050

08001f44 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001f44:	b5b0      	push	{r4, r5, r7, lr}
 8001f46:	b094      	sub	sp, #80	; 0x50
 8001f48:	af00      	add	r7, sp, #0
       
  /* USER CODE END Init */

  /* Create the mutex(es) */
  /* definition and creation of usbTxMutex */
  osMutexDef(usbTxMutex);
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f4e:	2300      	movs	r3, #0
 8001f50:	64fb      	str	r3, [r7, #76]	; 0x4c
  usbTxMutexHandle = osMutexCreate(osMutex(usbTxMutex));
 8001f52:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f56:	4618      	mov	r0, r3
 8001f58:	f00f fefa 	bl	8011d50 <osMutexCreate>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	4b1d      	ldr	r3, [pc, #116]	; (8001fd4 <MX_FREERTOS_Init+0x90>)
 8001f60:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	  /* Create the queue(s) */
	  /* definition and creation of commandMail */
	  osMailQDef(commandMail, 1, DUTY_Command_TypeDef);
 8001f62:	2301      	movs	r3, #1
 8001f64:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f66:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
 8001f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f6c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f70:	643b      	str	r3, [r7, #64]	; 0x40
	  commandMailHandle = osMailCreate(osMailQ(commandMail), NULL);
 8001f72:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f76:	2100      	movs	r1, #0
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f010 f885 	bl	8012088 <osMailCreate>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	4b15      	ldr	r3, [pc, #84]	; (8001fd8 <MX_FREERTOS_Init+0x94>)
 8001f82:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityHigh, 0, 2048);
 8001f84:	4b15      	ldr	r3, [pc, #84]	; (8001fdc <MX_FREERTOS_Init+0x98>)
 8001f86:	f107 041c 	add.w	r4, r7, #28
 8001f8a:	461d      	mov	r5, r3
 8001f8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f90:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001f98:	f107 031c 	add.w	r3, r7, #28
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f00f fde9 	bl	8011b76 <osThreadCreate>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <MX_FREERTOS_Init+0x9c>)
 8001fa8:	601a      	str	r2, [r3, #0]

  /* definition and creation of USB_RX_Check_ */
  osThreadDef(USB_RX_Check_, Start_USB_RX_Task, osPriorityNormal, 0, 1024);
 8001faa:	4b0e      	ldr	r3, [pc, #56]	; (8001fe4 <MX_FREERTOS_Init+0xa0>)
 8001fac:	463c      	mov	r4, r7
 8001fae:	461d      	mov	r5, r3
 8001fb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fb4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001fb8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  USB_RX_Check_Handle = osThreadCreate(osThread(USB_RX_Check_), NULL);
 8001fbc:	463b      	mov	r3, r7
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f00f fdd8 	bl	8011b76 <osThreadCreate>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	4b07      	ldr	r3, [pc, #28]	; (8001fe8 <MX_FREERTOS_Init+0xa4>)
 8001fca:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001fcc:	bf00      	nop
 8001fce:	3750      	adds	r7, #80	; 0x50
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bdb0      	pop	{r4, r5, r7, pc}
 8001fd4:	200052b8 	.word	0x200052b8
 8001fd8:	200052bc 	.word	0x200052bc
 8001fdc:	0801af30 	.word	0x0801af30
 8001fe0:	200052b4 	.word	0x200052b4
 8001fe4:	0801af5c 	.word	0x0801af5c
 8001fe8:	200052c0 	.word	0x200052c0
 8001fec:	00000000 	.word	0x00000000

08001ff0 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001ff0:	b5b0      	push	{r4, r5, r7, lr}
 8001ff2:	ed2d 8b02 	vpush	{d8}
 8001ff6:	f5ad 6df5 	sub.w	sp, sp, #1960	; 0x7a8
 8001ffa:	af66      	add	r7, sp, #408	; 0x198
 8001ffc:	f107 0314 	add.w	r3, r7, #20
 8002000:	6018      	str	r0, [r3, #0]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002002:	f012 ff23 	bl	8014e4c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  HAL_GPIO_WritePin(USB_SIGN_GPIO_Port, USB_SIGN_Pin, GPIO_PIN_SET); // Pull-up Resistor
 8002006:	2201      	movs	r2, #1
 8002008:	2110      	movs	r1, #16
 800200a:	48c5      	ldr	r0, [pc, #788]	; (8002320 <StartDefaultTask+0x330>)
 800200c:	f009 fe5c 	bl	800bcc8 <HAL_GPIO_WritePin>

  osEvent 				ret_mail;
  DUTY_Command_TypeDef 	duty_cmd;
  DUTY_Command_TypeDef 	*dataMail;
  uint8_t 				isNewDuty = FALSE;
 8002010:	2300      	movs	r3, #0
 8002012:	f887 360f 	strb.w	r3, [r7, #1551]	; 0x60f
  SCARA_KeyStateTypeDef		current_key_state;
  SCARA_KeyTypeDef			current_key;
  int32_t					current_key_speed;
  double						run_time;

  LOG_REPORT("free_rtos.c: PROGRAM START...", __LINE__);
 8002016:	21cd      	movs	r1, #205	; 0xcd
 8002018:	48c2      	ldr	r0, [pc, #776]	; (8002324 <StartDefaultTask+0x334>)
 800201a:	f7ff fb85 	bl	8001728 <LOG_REPORT>

  // Init value
  current_method = scaraGetMethod();
 800201e:	f006 ffad 	bl	8008f7c <scaraGetMethod>
 8002022:	4603      	mov	r3, r0
 8002024:	f887 35fb 	strb.w	r3, [r7, #1531]	; 0x5fb
  current_mode	 = scaraGetMode();
 8002028:	f006 ff9c 	bl	8008f64 <scaraGetMode>
 800202c:	4603      	mov	r3, r0
 800202e:	f887 35fa 	strb.w	r3, [r7, #1530]	; 0x5fa
  current_duty_state	 = scaraGetDutyState();
 8002032:	f006 ffaf 	bl	8008f94 <scaraGetDutyState>
 8002036:	4603      	mov	r3, r0
 8002038:	f887 35f9 	strb.w	r3, [r7, #1529]	; 0x5f9

  // Start up robot
  scaraStartup();
 800203c:	f002 fbea 	bl	8004814 <scaraStartup>
  osDelay(10);
 8002040:	200a      	movs	r0, #10
 8002042:	f00f fde4 	bl	8011c0e <osDelay>

  positionNext.Theta1 = -PI/3;
 8002046:	4ab8      	ldr	r2, [pc, #736]	; (8002328 <StartDefaultTask+0x338>)
 8002048:	a4b1      	add	r4, pc, #708	; (adr r4, 8002310 <StartDefaultTask+0x320>)
 800204a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800204e:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
  positionNext.Theta2 = PI/3;
 8002052:	4ab5      	ldr	r2, [pc, #724]	; (8002328 <StartDefaultTask+0x338>)
 8002054:	a4b0      	add	r4, pc, #704	; (adr r4, 8002318 <StartDefaultTask+0x328>)
 8002056:	e9d4 3400 	ldrd	r3, r4, [r4]
 800205a:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
  positionNext.D3 = 10;
 800205e:	4ab2      	ldr	r2, [pc, #712]	; (8002328 <StartDefaultTask+0x338>)
 8002060:	f04f 0300 	mov.w	r3, #0
 8002064:	4cb1      	ldr	r4, [pc, #708]	; (800232c <StartDefaultTask+0x33c>)
 8002066:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
  positionNext.Theta4 = 0;
 800206a:	4aaf      	ldr	r2, [pc, #700]	; (8002328 <StartDefaultTask+0x338>)
 800206c:	f04f 0300 	mov.w	r3, #0
 8002070:	f04f 0400 	mov.w	r4, #0
 8002074:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
  positionNext.t = 0;
 8002078:	4aab      	ldr	r2, [pc, #684]	; (8002328 <StartDefaultTask+0x338>)
 800207a:	f04f 0300 	mov.w	r3, #0
 800207e:	f04f 0400 	mov.w	r4, #0
 8002082:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
  kinematicForward(&positionNext);
 8002086:	48a8      	ldr	r0, [pc, #672]	; (8002328 <StartDefaultTask+0x338>)
 8002088:	f000 ffa6 	bl	8002fd8 <kinematicForward>
  /* Infinite loop */
//Start Timer 7
	  HAL_TIM_Base_Start_IT(&htim7);
 800208c:	48a8      	ldr	r0, [pc, #672]	; (8002330 <StartDefaultTask+0x340>)
 800208e:	f00b fcd4 	bl	800da3a <HAL_TIM_Base_Start_IT>
  for(;;)
  {
	  /*---------Wait for Timer Trigger-----------*/
	  osSignalWait(0x01, osWaitForever); // Very Important
 8002092:	463b      	mov	r3, r7
 8002094:	f04f 32ff 	mov.w	r2, #4294967295
 8002098:	2101      	movs	r1, #1
 800209a:	4618      	mov	r0, r3
 800209c:	f00f fe0c 	bl	8011cb8 <osSignalWait>
	  /* 1--- Reset Value ---*/
	  respond_lenght		= 0;
 80020a0:	2300      	movs	r3, #0
 80020a2:	f8c7 3608 	str.w	r3, [r7, #1544]	; 0x608
	  respond_packed_lenght = 0;
 80020a6:	2300      	movs	r3, #0
 80020a8:	f8c7 3600 	str.w	r3, [r7, #1536]	; 0x600
	  infor_lenght			= 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	f8c7 3604 	str.w	r3, [r7, #1540]	; 0x604
	  infor_packed_lenght	= 0;
 80020b2:	2300      	movs	r3, #0
 80020b4:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
	  task_usb_lenght		= 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
	  usb_lenght			= 0;
 80020be:	2300      	movs	r3, #0
 80020c0:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8
	  // Update new position
	  memcpy(&positionPrevios, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 80020c4:	4a9b      	ldr	r2, [pc, #620]	; (8002334 <StartDefaultTask+0x344>)
 80020c6:	4b9c      	ldr	r3, [pc, #624]	; (8002338 <StartDefaultTask+0x348>)
 80020c8:	4610      	mov	r0, r2
 80020ca:	4619      	mov	r1, r3
 80020cc:	23b8      	movs	r3, #184	; 0xb8
 80020ce:	461a      	mov	r2, r3
 80020d0:	f013 fc36 	bl	8015940 <memcpy>
	  memcpy(&positionCurrent, &positionNext, sizeof(SCARA_PositionTypeDef));
 80020d4:	4a98      	ldr	r2, [pc, #608]	; (8002338 <StartDefaultTask+0x348>)
 80020d6:	4b94      	ldr	r3, [pc, #592]	; (8002328 <StartDefaultTask+0x338>)
 80020d8:	4610      	mov	r0, r2
 80020da:	4619      	mov	r1, r3
 80020dc:	23b8      	movs	r3, #184	; 0xb8
 80020de:	461a      	mov	r2, r3
 80020e0:	f013 fc2e 	bl	8015940 <memcpy>
#ifndef SIMULATION
	  if(scaraIsScanLimit()) {
 80020e4:	f006 ff62 	bl	8008fac <scaraIsScanLimit>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d017      	beq.n	800211e <StartDefaultTask+0x12e>
		  lowlayer_readTruePosition(&positionTrue);
 80020ee:	4893      	ldr	r0, [pc, #588]	; (800233c <StartDefaultTask+0x34c>)
 80020f0:	f001 fe66 	bl	8003dc0 <lowlayer_readTruePosition>
		  kinematicForward(&positionTrue);
 80020f4:	4891      	ldr	r0, [pc, #580]	; (800233c <StartDefaultTask+0x34c>)
 80020f6:	f000 ff6f 	bl	8002fd8 <kinematicForward>
		  positionTrue.t = positionCurrent.t;
 80020fa:	4b8f      	ldr	r3, [pc, #572]	; (8002338 <StartDefaultTask+0x348>)
 80020fc:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8002100:	4a8e      	ldr	r2, [pc, #568]	; (800233c <StartDefaultTask+0x34c>)
 8002102:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		  positionTrue.total_time = positionCurrent.total_time;
 8002106:	4b8c      	ldr	r3, [pc, #560]	; (8002338 <StartDefaultTask+0x348>)
 8002108:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
 800210c:	4a8b      	ldr	r2, [pc, #556]	; (800233c <StartDefaultTask+0x34c>)
 800210e:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
		  positionTrue.q = positionCurrent.q;
 8002112:	4b89      	ldr	r3, [pc, #548]	; (8002338 <StartDefaultTask+0x348>)
 8002114:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002118:	4a88      	ldr	r2, [pc, #544]	; (800233c <StartDefaultTask+0x34c>)
 800211a:	e9c2 3400 	strd	r3, r4, [r2]
	  }
#endif
	  /* 2--- Check New Duty Phase ---*/
	  // Check mail
	  ret_mail = osMailGet(commandMailHandle, 0);
 800211e:	4b88      	ldr	r3, [pc, #544]	; (8002340 <StartDefaultTask+0x350>)
 8002120:	6819      	ldr	r1, [r3, #0]
 8002122:	f207 53d4 	addw	r3, r7, #1492	; 0x5d4
 8002126:	2200      	movs	r2, #0
 8002128:	4618      	mov	r0, r3
 800212a:	f010 f859 	bl	80121e0 <osMailGet>
	  if ( ret_mail.status == osEventMail) {
 800212e:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	; 0x5d4
 8002132:	2b20      	cmp	r3, #32
 8002134:	d116      	bne.n	8002164 <StartDefaultTask+0x174>
		   dataMail = ret_mail.value.p;
 8002136:	f8d7 35d8 	ldr.w	r3, [r7, #1496]	; 0x5d8
 800213a:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
		   memcpy( &duty_cmd, dataMail, sizeof(DUTY_Command_TypeDef));
 800213e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002142:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
 8002146:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 800214a:	4618      	mov	r0, r3
 800214c:	f013 fbf8 	bl	8015940 <memcpy>
		   isNewDuty = TRUE;
 8002150:	2301      	movs	r3, #1
 8002152:	f887 360f 	strb.w	r3, [r7, #1551]	; 0x60f
		   osMailFree(commandMailHandle, dataMail);/* free memory allocated for mail */
 8002156:	4b7a      	ldr	r3, [pc, #488]	; (8002340 <StartDefaultTask+0x350>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 800215e:	4618      	mov	r0, r3
 8002160:	f010 f8b2 	bl	80122c8 <osMailFree>
	  }
	  if(isNewDuty) {
 8002164:	f897 360f 	ldrb.w	r3, [r7, #1551]	; 0x60f
 8002168:	2b00      	cmp	r3, #0
 800216a:	f000 8151 	beq.w	8002410 <StartDefaultTask+0x420>
		  memset(respond, 0, 40);
 800216e:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002172:	2228      	movs	r2, #40	; 0x28
 8002174:	2100      	movs	r1, #0
 8002176:	4618      	mov	r0, r3
 8002178:	f013 fc06 	bl	8015988 <memset>
		  // Check change method
		  if (duty_cmd.change_method == TRUE) {
 800217c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d13c      	bne.n	8002200 <StartDefaultTask+0x210>
			  if (SCARA_METHOD_MANUAL == duty_cmd.robot_method) {
 8002186:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800218a:	785b      	ldrb	r3, [r3, #1]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d10e      	bne.n	80021ae <StartDefaultTask+0x1be>
				  // Need add check condition idle in each method
				  current_method = SCARA_METHOD_MANUAL;
 8002190:	2300      	movs	r3, #0
 8002192:	f887 35fb 	strb.w	r3, [r7, #1531]	; 0x5fb
				  respond_lenght = commandRespond(RPD_OK,
 8002196:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800219a:	6899      	ldr	r1, [r3, #8]
 800219c:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80021a0:	4a68      	ldr	r2, [pc, #416]	; (8002344 <StartDefaultTask+0x354>)
 80021a2:	2008      	movs	r0, #8
 80021a4:	f7ff fa28 	bl	80015f8 <commandRespond>
 80021a8:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
 80021ac:	e12d      	b.n	800240a <StartDefaultTask+0x41a>
												duty_cmd.id_command,
												"Changed MANUAL Method",
												(char *)respond);
			  } else if (SCARA_METHOD_SEMI_AUTO == duty_cmd.robot_method) {
 80021ae:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80021b2:	785b      	ldrb	r3, [r3, #1]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d10e      	bne.n	80021d6 <StartDefaultTask+0x1e6>
				  current_method = SCARA_METHOD_SEMI_AUTO;
 80021b8:	2301      	movs	r3, #1
 80021ba:	f887 35fb 	strb.w	r3, [r7, #1531]	; 0x5fb
				  respond_lenght = commandRespond(RPD_OK,
 80021be:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80021c2:	6899      	ldr	r1, [r3, #8]
 80021c4:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80021c8:	4a5f      	ldr	r2, [pc, #380]	; (8002348 <StartDefaultTask+0x358>)
 80021ca:	2008      	movs	r0, #8
 80021cc:	f7ff fa14 	bl	80015f8 <commandRespond>
 80021d0:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
 80021d4:	e119      	b.n	800240a <StartDefaultTask+0x41a>
												duty_cmd.id_command,
												"Changed SEMI AUTO Method",
												(char *)respond);
			  } else if (SCARA_METHOD_AUTO == duty_cmd.robot_method) {
 80021d6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80021da:	785b      	ldrb	r3, [r3, #1]
 80021dc:	2b02      	cmp	r3, #2
 80021de:	f040 8114 	bne.w	800240a <StartDefaultTask+0x41a>
				  current_method = SCARA_METHOD_AUTO;
 80021e2:	2302      	movs	r3, #2
 80021e4:	f887 35fb 	strb.w	r3, [r7, #1531]	; 0x5fb
				  respond_lenght = commandRespond(RPD_OK,
 80021e8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80021ec:	6899      	ldr	r1, [r3, #8]
 80021ee:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80021f2:	4a56      	ldr	r2, [pc, #344]	; (800234c <StartDefaultTask+0x35c>)
 80021f4:	2008      	movs	r0, #8
 80021f6:	f7ff f9ff 	bl	80015f8 <commandRespond>
 80021fa:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
 80021fe:	e104      	b.n	800240a <StartDefaultTask+0x41a>
												"Changed AUTO Method",
												(char *)respond);
			  }
		  } else {
			  	  // Check current method & cmd method
			  	  if (current_method == duty_cmd.robot_method) {
 8002200:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002204:	785b      	ldrb	r3, [r3, #1]
 8002206:	f897 25fb 	ldrb.w	r2, [r7, #1531]	; 0x5fb
 800220a:	429a      	cmp	r2, r3
 800220c:	f040 80ee 	bne.w	80023ec <StartDefaultTask+0x3fc>
				  	  switch( duty_cmd.robot_method) {
 8002210:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002214:	785b      	ldrb	r3, [r3, #1]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d030      	beq.n	800227c <StartDefaultTask+0x28c>
 800221a:	2b02      	cmp	r3, #2
 800221c:	f000 80f2 	beq.w	8002404 <StartDefaultTask+0x414>
 8002220:	2b00      	cmp	r3, #0
 8002222:	f040 80dd 	bne.w	80023e0 <StartDefaultTask+0x3f0>
				  	  case SCARA_METHOD_MANUAL:
				  	  {
				  		  if (current_key_state == SCARA_KEY_STATE_READY) {
 8002226:	f897 35f7 	ldrb.w	r3, [r7, #1527]	; 0x5f7
 800222a:	2b00      	cmp	r3, #0
 800222c:	d10d      	bne.n	800224a <StartDefaultTask+0x25a>
				  			  current_key = duty_cmd.keyboard;
 800222e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002232:	78db      	ldrb	r3, [r3, #3]
 8002234:	f887 35f6 	strb.w	r3, [r7, #1526]	; 0x5f6
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Init new path
 8002238:	2301      	movs	r3, #1
 800223a:	f887 35f7 	strb.w	r3, [r7, #1527]	; 0x5f7
				  			  current_key_speed = duty_cmd.key_speed;
 800223e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f8c7 35f0 	str.w	r3, [r7, #1520]	; 0x5f0
				  				  	  && current_key_state == SCARA_KEY_STATE_FLOW
									  && current_key_speed == duty_cmd.key_speed) {
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Continue old path
				  		  }
				  	  }
				  	  break;
 8002248:	e0de      	b.n	8002408 <StartDefaultTask+0x418>
				  		  } else if (current_key == duty_cmd.keyboard
 800224a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800224e:	78db      	ldrb	r3, [r3, #3]
 8002250:	f897 25f6 	ldrb.w	r2, [r7, #1526]	; 0x5f6
 8002254:	429a      	cmp	r2, r3
 8002256:	f040 80d7 	bne.w	8002408 <StartDefaultTask+0x418>
				  				  	  && current_key_state == SCARA_KEY_STATE_FLOW
 800225a:	f897 35f7 	ldrb.w	r3, [r7, #1527]	; 0x5f7
 800225e:	2b02      	cmp	r3, #2
 8002260:	f040 80d2 	bne.w	8002408 <StartDefaultTask+0x418>
									  && current_key_speed == duty_cmd.key_speed) {
 8002264:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f8d7 25f0 	ldr.w	r2, [r7, #1520]	; 0x5f0
 800226e:	429a      	cmp	r2, r3
 8002270:	f040 80ca 	bne.w	8002408 <StartDefaultTask+0x418>
				  			  current_key_state = SCARA_KEY_STATE_INIT;// Continue old path
 8002274:	2301      	movs	r3, #1
 8002276:	f887 35f7 	strb.w	r3, [r7, #1527]	; 0x5f7
				  	  break;
 800227a:	e0c5      	b.n	8002408 <StartDefaultTask+0x418>
				  	  case SCARA_METHOD_SEMI_AUTO:
				  	  {
						  switch( duty_cmd.robot_mode) {
 800227c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002280:	789b      	ldrb	r3, [r3, #2]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d018      	beq.n	80022b8 <StartDefaultTask+0x2c8>
 8002286:	2b02      	cmp	r3, #2
 8002288:	d06c      	beq.n	8002364 <StartDefaultTask+0x374>
 800228a:	2b00      	cmp	r3, #0
 800228c:	f040 80a1 	bne.w	80023d2 <StartDefaultTask+0x3e2>
						  case SCARA_MODE_STOP:
							  {
								  current_mode	 = SCARA_MODE_STOP;
 8002290:	2300      	movs	r3, #0
 8002292:	f887 35fa 	strb.w	r3, [r7, #1530]	; 0x5fa
								  respond_lenght = commandRespond(RPD_OK,
 8002296:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800229a:	6899      	ldr	r1, [r3, #8]
 800229c:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80022a0:	4a2b      	ldr	r2, [pc, #172]	; (8002350 <StartDefaultTask+0x360>)
 80022a2:	2008      	movs	r0, #8
 80022a4:	f7ff f9a8 	bl	80015f8 <commandRespond>
 80022a8:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
																  duty_cmd.id_command,
																  "Stop Now",
																  (char *)respond);
								  LOG_REPORT("ROBOT STOP !!!", __LINE__);
 80022ac:	f44f 719a 	mov.w	r1, #308	; 0x134
 80022b0:	4828      	ldr	r0, [pc, #160]	; (8002354 <StartDefaultTask+0x364>)
 80022b2:	f7ff fa39 	bl	8001728 <LOG_REPORT>
							  }
							  break;
 80022b6:	e092      	b.n	80023de <StartDefaultTask+0x3ee>

						  case SCARA_MODE_SCAN:
							  {
								  if (SCARA_MODE_DUTY == current_mode
 80022b8:	f897 35fa 	ldrb.w	r3, [r7, #1530]	; 0x5fa
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d115      	bne.n	80022ec <StartDefaultTask+0x2fc>
									  && SCARA_DUTY_STATE_READY == current_duty_state) {
 80022c0:	f897 35f9 	ldrb.w	r3, [r7, #1529]	; 0x5f9
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d111      	bne.n	80022ec <StartDefaultTask+0x2fc>
									  current_mode = SCARA_MODE_SCAN;
 80022c8:	2301      	movs	r3, #1
 80022ca:	f887 35fa 	strb.w	r3, [r7, #1530]	; 0x5fa
									  current_scan_state = SCARA_SCAN_STATE_INIT;
 80022ce:	2300      	movs	r3, #0
 80022d0:	f887 35f8 	strb.w	r3, [r7, #1528]	; 0x5f8
									  respond_lenght = commandRespond(RPD_OK,
 80022d4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80022d8:	6899      	ldr	r1, [r3, #8]
 80022da:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80022de:	4a1e      	ldr	r2, [pc, #120]	; (8002358 <StartDefaultTask+0x368>)
 80022e0:	2008      	movs	r0, #8
 80022e2:	f7ff f989 	bl	80015f8 <commandRespond>
 80022e6:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
																	  "Busy",
																	  (char *)respond);
									  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
								  }
							  }
							  break;
 80022ea:	e078      	b.n	80023de <StartDefaultTask+0x3ee>
									  respond_lenght = commandRespond(RPD_ERROR,
 80022ec:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80022f0:	6899      	ldr	r1, [r3, #8]
 80022f2:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80022f6:	4a19      	ldr	r2, [pc, #100]	; (800235c <StartDefaultTask+0x36c>)
 80022f8:	2007      	movs	r0, #7
 80022fa:	f7ff f97d 	bl	80015f8 <commandRespond>
 80022fe:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
									  LOG_REPORT("SCAN FAIL: BUSY", __LINE__);
 8002302:	f240 1147 	movw	r1, #327	; 0x147
 8002306:	4816      	ldr	r0, [pc, #88]	; (8002360 <StartDefaultTask+0x370>)
 8002308:	f7ff fa0e 	bl	8001728 <LOG_REPORT>
							  break;
 800230c:	e067      	b.n	80023de <StartDefaultTask+0x3ee>
 800230e:	bf00      	nop
 8002310:	40000000 	.word	0x40000000
 8002314:	bff0c152 	.word	0xbff0c152
 8002318:	40000000 	.word	0x40000000
 800231c:	3ff0c152 	.word	0x3ff0c152
 8002320:	40020400 	.word	0x40020400
 8002324:	0801af78 	.word	0x0801af78
 8002328:	20005fa8 	.word	0x20005fa8
 800232c:	40240000 	.word	0x40240000
 8002330:	200060a0 	.word	0x200060a0
 8002334:	20005cc8 	.word	0x20005cc8
 8002338:	20005e38 	.word	0x20005e38
 800233c:	20005ef0 	.word	0x20005ef0
 8002340:	200052bc 	.word	0x200052bc
 8002344:	0801af98 	.word	0x0801af98
 8002348:	0801afb0 	.word	0x0801afb0
 800234c:	0801afcc 	.word	0x0801afcc
 8002350:	0801afe0 	.word	0x0801afe0
 8002354:	0801afec 	.word	0x0801afec
 8002358:	0801affc 	.word	0x0801affc
 800235c:	0801b008 	.word	0x0801b008
 8002360:	0801b010 	.word	0x0801b010

						  case SCARA_MODE_DUTY:
							  {
								  if (SCARA_MODE_DUTY == current_mode && SCARA_DUTY_STATE_READY == current_duty_state) {
 8002364:	f897 35fa 	ldrb.w	r3, [r7, #1530]	; 0x5fa
 8002368:	2b02      	cmp	r3, #2
 800236a:	d120      	bne.n	80023ae <StartDefaultTask+0x3be>
 800236c:	f897 35f9 	ldrb.w	r3, [r7, #1529]	; 0x5f9
 8002370:	2b00      	cmp	r3, #0
 8002372:	d11c      	bne.n	80023ae <StartDefaultTask+0x3be>
									  if (scaraIsScanLimit()) {
 8002374:	f006 fe1a 	bl	8008fac <scaraIsScanLimit>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d006      	beq.n	800238c <StartDefaultTask+0x39c>
										  current_mode	 = SCARA_MODE_DUTY;
 800237e:	2302      	movs	r3, #2
 8002380:	f887 35fa 	strb.w	r3, [r7, #1530]	; 0x5fa
										  current_duty_state	 = SCARA_DUTY_STATE_INIT;
 8002384:	2301      	movs	r3, #1
 8002386:	f887 35f9 	strb.w	r3, [r7, #1529]	; 0x5f9
									  if (scaraIsScanLimit()) {
 800238a:	e021      	b.n	80023d0 <StartDefaultTask+0x3e0>
									  } else {
										  respond_lenght = commandRespond(RPD_ERROR,
 800238c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002390:	6899      	ldr	r1, [r3, #8]
 8002392:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002396:	4ad0      	ldr	r2, [pc, #832]	; (80026d8 <StartDefaultTask+0x6e8>)
 8002398:	2007      	movs	r0, #7
 800239a:	f7ff f92d 	bl	80015f8 <commandRespond>
 800239e:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
																		  duty_cmd.id_command,
																		  "Has Not Scan Yet.",
																		  (char *)respond);
										  LOG_REPORT("MOVE FAIL:NOT SCAN", __LINE__);
 80023a2:	f240 1157 	movw	r1, #343	; 0x157
 80023a6:	48cd      	ldr	r0, [pc, #820]	; (80026dc <StartDefaultTask+0x6ec>)
 80023a8:	f7ff f9be 	bl	8001728 <LOG_REPORT>
									  if (scaraIsScanLimit()) {
 80023ac:	e010      	b.n	80023d0 <StartDefaultTask+0x3e0>
									  }
								  } else {
									  respond_lenght	= commandRespond(RPD_ERROR,
 80023ae:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80023b2:	6899      	ldr	r1, [r3, #8]
 80023b4:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80023b8:	4ac9      	ldr	r2, [pc, #804]	; (80026e0 <StartDefaultTask+0x6f0>)
 80023ba:	2007      	movs	r0, #7
 80023bc:	f7ff f91c 	bl	80015f8 <commandRespond>
 80023c0:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
																		  duty_cmd.id_command,
																		  "Busy.",
																		  (char *)respond);
									  LOG_REPORT("MOVE FAIL:BUSY", __LINE__);
 80023c4:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80023c8:	48c6      	ldr	r0, [pc, #792]	; (80026e4 <StartDefaultTask+0x6f4>)
 80023ca:	f7ff f9ad 	bl	8001728 <LOG_REPORT>
								  }
							  }
							  break;
 80023ce:	e006      	b.n	80023de <StartDefaultTask+0x3ee>
 80023d0:	e005      	b.n	80023de <StartDefaultTask+0x3ee>
						  default:
							  {
								  LOG_REPORT("CMD Error Mode !!!", __LINE__);
 80023d2:	f44f 71b2 	mov.w	r1, #356	; 0x164
 80023d6:	48c4      	ldr	r0, [pc, #784]	; (80026e8 <StartDefaultTask+0x6f8>)
 80023d8:	f7ff f9a6 	bl	8001728 <LOG_REPORT>
							  }
						  }
					  }
					  break;
 80023dc:	e015      	b.n	800240a <StartDefaultTask+0x41a>
 80023de:	e014      	b.n	800240a <StartDefaultTask+0x41a>

				  	  }
				  	  break;
				  	  default:
				  	  {
				  		  LOG_REPORT("CMD Error Method !!!", __LINE__);
 80023e0:	f44f 71b8 	mov.w	r1, #368	; 0x170
 80023e4:	48c1      	ldr	r0, [pc, #772]	; (80026ec <StartDefaultTask+0x6fc>)
 80023e6:	f7ff f99f 	bl	8001728 <LOG_REPORT>
 80023ea:	e00e      	b.n	800240a <StartDefaultTask+0x41a>
				  	  }
				  	  }
			  	  } else {
					  respond_lenght = commandRespond(RPD_ERROR,
 80023ec:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80023f0:	6899      	ldr	r1, [r3, #8]
 80023f2:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80023f6:	4abe      	ldr	r2, [pc, #760]	; (80026f0 <StartDefaultTask+0x700>)
 80023f8:	2007      	movs	r0, #7
 80023fa:	f7ff f8fd 	bl	80015f8 <commandRespond>
 80023fe:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
 8002402:	e002      	b.n	800240a <StartDefaultTask+0x41a>
				  	  break;
 8002404:	bf00      	nop
 8002406:	e000      	b.n	800240a <StartDefaultTask+0x41a>
				  	  break;
 8002408:	bf00      	nop
													"METHOD isn't correct",
													(char *)respond);
			  	  }

			  }
		  isNewDuty = FALSE;
 800240a:	2300      	movs	r3, #0
 800240c:	f887 360f 	strb.w	r3, [r7, #1551]	; 0x60f
	  }

	  /* 3--- Execute Phase ---*/
	  switch(current_method) {
 8002410:	f897 35fb 	ldrb.w	r3, [r7, #1531]	; 0x5fb
 8002414:	2b01      	cmp	r3, #1
 8002416:	f000 80de 	beq.w	80025d6 <StartDefaultTask+0x5e6>
 800241a:	2b02      	cmp	r3, #2
 800241c:	f000 82b7 	beq.w	800298e <StartDefaultTask+0x99e>
 8002420:	2b00      	cmp	r3, #0
 8002422:	f040 82b7 	bne.w	8002994 <StartDefaultTask+0x9a4>
	  case SCARA_METHOD_MANUAL:
	  {
		  switch( current_key_state) {
 8002426:	f897 35f7 	ldrb.w	r3, [r7, #1527]	; 0x5f7
 800242a:	2b03      	cmp	r3, #3
 800242c:	f200 82b1 	bhi.w	8002992 <StartDefaultTask+0x9a2>
 8002430:	a201      	add	r2, pc, #4	; (adr r2, 8002438 <StartDefaultTask+0x448>)
 8002432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002436:	bf00      	nop
 8002438:	080025d3 	.word	0x080025d3
 800243c:	08002449 	.word	0x08002449
 8002440:	080024a3 	.word	0x080024a3
 8002444:	080025a1 	.word	0x080025a1
		  case SCARA_KEY_STATE_READY:
			  /* Wait for application keyboard , do nothing*/
		  break;
		  case SCARA_KEY_STATE_INIT:
		  {
			  if (scaraKeyInit(current_key, current_key_speed, &run_time) == SCARA_STATUS_OK) {
 8002448:	f107 0218 	add.w	r2, r7, #24
 800244c:	f897 35f6 	ldrb.w	r3, [r7, #1526]	; 0x5f6
 8002450:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 8002454:	4618      	mov	r0, r3
 8002456:	f006 ffdf 	bl	8009418 <scaraKeyInit>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d11c      	bne.n	800249a <StartDefaultTask+0x4aa>
				  current_key_state = SCARA_KEY_STATE_FLOW;
 8002460:	2302      	movs	r3, #2
 8002462:	f887 35f7 	strb.w	r3, [r7, #1527]	; 0x5f7
#ifdef SIMULATION
				  scaraPosition2String((char *)position, positionCurrent);
#else
				  scaraPosition2String((char *)position, positionTrue);
 8002466:	4ca3      	ldr	r4, [pc, #652]	; (80026f4 <StartDefaultTask+0x704>)
 8002468:	f507 755e 	add.w	r5, r7, #888	; 0x378
 800246c:	4668      	mov	r0, sp
 800246e:	f104 0308 	add.w	r3, r4, #8
 8002472:	22b0      	movs	r2, #176	; 0xb0
 8002474:	4619      	mov	r1, r3
 8002476:	f013 fa63 	bl	8015940 <memcpy>
 800247a:	e894 000c 	ldmia.w	r4, {r2, r3}
 800247e:	4628      	mov	r0, r5
 8002480:	f006 fdce 	bl	8009020 <scaraPosition2String>
#endif
				  infor_lenght 		= commandRespond(RPD_START,
 8002484:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8002488:	f507 725e 	add.w	r2, r7, #888	; 0x378
 800248c:	2100      	movs	r1, #0
 800248e:	2003      	movs	r0, #3
 8002490:	f7ff f8b2 	bl	80015f8 <commandRespond>
 8002494:	f8c7 0604 	str.w	r0, [r7, #1540]	; 0x604
													  (char *)infor);
			  } else {
				  current_key_state = SCARA_KEY_STATE_READY;
			  }
		  }
		  break;
 8002498:	e09c      	b.n	80025d4 <StartDefaultTask+0x5e4>
				  current_key_state = SCARA_KEY_STATE_READY;
 800249a:	2300      	movs	r3, #0
 800249c:	f887 35f7 	strb.w	r3, [r7, #1527]	; 0x5f7
		  break;
 80024a0:	e098      	b.n	80025d4 <StartDefaultTask+0x5e4>
		  case SCARA_KEY_STATE_FLOW:
		  {
			  SCARA_StatusTypeDef status;
			  // Increase run time
			  run_time += T_SAMPLING;
 80024a2:	f107 0318 	add.w	r3, r7, #24
 80024a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024aa:	a389      	add	r3, pc, #548	; (adr r3, 80026d0 <StartDefaultTask+0x6e0>)
 80024ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b0:	f7fd feec 	bl	800028c <__adddf3>
 80024b4:	4603      	mov	r3, r0
 80024b6:	460c      	mov	r4, r1
 80024b8:	f107 0218 	add.w	r2, r7, #24
 80024bc:	e9c2 3400 	strd	r3, r4, [r2]
			  // Check Time Out
			  if (scaraIsFinish(run_time)) {
 80024c0:	f107 0318 	add.w	r3, r7, #24
 80024c4:	ed93 7b00 	vldr	d7, [r3]
 80024c8:	eeb0 0a47 	vmov.f32	s0, s14
 80024cc:	eef0 0a67 	vmov.f32	s1, s15
 80024d0:	f006 fd7a 	bl	8008fc8 <scaraIsFinish>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <StartDefaultTask+0x4f2>
				  current_key_state = SCARA_KEY_STATE_FINISH;// Key Done
 80024da:	2303      	movs	r3, #3
 80024dc:	f887 35f7 	strb.w	r3, [r7, #1527]	; 0x5f7
													(char *)infor);
					  LOG_REPORT("STOP KEY", __LINE__);
				  }
			  }
		  }
		  break;
 80024e0:	e078      	b.n	80025d4 <StartDefaultTask+0x5e4>
				  status = scaraKeyFlow(run_time, &positionNext, positionCurrent);
 80024e2:	f107 0318 	add.w	r3, r7, #24
 80024e6:	ed93 8b00 	vldr	d8, [r3]
 80024ea:	4c83      	ldr	r4, [pc, #524]	; (80026f8 <StartDefaultTask+0x708>)
 80024ec:	4668      	mov	r0, sp
 80024ee:	f104 0308 	add.w	r3, r4, #8
 80024f2:	22b0      	movs	r2, #176	; 0xb0
 80024f4:	4619      	mov	r1, r3
 80024f6:	f013 fa23 	bl	8015940 <memcpy>
 80024fa:	e894 000c 	ldmia.w	r4, {r2, r3}
 80024fe:	487f      	ldr	r0, [pc, #508]	; (80026fc <StartDefaultTask+0x70c>)
 8002500:	eeb0 0a48 	vmov.f32	s0, s16
 8002504:	eef0 0a68 	vmov.f32	s1, s17
 8002508:	f008 f804 	bl	800a514 <scaraKeyFlow>
 800250c:	4603      	mov	r3, r0
 800250e:	f887 35e0 	strb.w	r3, [r7, #1504]	; 0x5e0
				  if ( SCARA_STATUS_OK == status) {
 8002512:	f897 35e0 	ldrb.w	r3, [r7, #1504]	; 0x5e0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d12c      	bne.n	8002574 <StartDefaultTask+0x584>
					  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 800251a:	4c77      	ldr	r4, [pc, #476]	; (80026f8 <StartDefaultTask+0x708>)
 800251c:	4a77      	ldr	r2, [pc, #476]	; (80026fc <StartDefaultTask+0x70c>)
 800251e:	ab2a      	add	r3, sp, #168	; 0xa8
 8002520:	4611      	mov	r1, r2
 8002522:	22b8      	movs	r2, #184	; 0xb8
 8002524:	4618      	mov	r0, r3
 8002526:	f013 fa0b 	bl	8015940 <memcpy>
 800252a:	4668      	mov	r0, sp
 800252c:	f104 0310 	add.w	r3, r4, #16
 8002530:	22a8      	movs	r2, #168	; 0xa8
 8002532:	4619      	mov	r1, r3
 8002534:	f013 fa04 	bl	8015940 <memcpy>
 8002538:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800253c:	f001 fdd0 	bl	80040e0 <lowlayer_computeAndWritePulse>
					  scaraPosition2String((char *)position, positionTrue);
 8002540:	4c6c      	ldr	r4, [pc, #432]	; (80026f4 <StartDefaultTask+0x704>)
 8002542:	f507 755e 	add.w	r5, r7, #888	; 0x378
 8002546:	4668      	mov	r0, sp
 8002548:	f104 0308 	add.w	r3, r4, #8
 800254c:	22b0      	movs	r2, #176	; 0xb0
 800254e:	4619      	mov	r1, r3
 8002550:	f013 f9f6 	bl	8015940 <memcpy>
 8002554:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002558:	4628      	mov	r0, r5
 800255a:	f006 fd61 	bl	8009020 <scaraPosition2String>
					  infor_lenght = commandRespond(RPD_RUNNING,
 800255e:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8002562:	f507 725e 	add.w	r2, r7, #888	; 0x378
 8002566:	2100      	movs	r1, #0
 8002568:	2004      	movs	r0, #4
 800256a:	f7ff f845 	bl	80015f8 <commandRespond>
 800256e:	f8c7 0604 	str.w	r0, [r7, #1540]	; 0x604
		  break;
 8002572:	e02f      	b.n	80025d4 <StartDefaultTask+0x5e4>
					  current_key_state = SCARA_KEY_STATE_FINISH;
 8002574:	2303      	movs	r3, #3
 8002576:	f887 35f7 	strb.w	r3, [r7, #1527]	; 0x5f7
					  infor_lenght = commandRespond(RPD_STOP,
 800257a:	f897 35e0 	ldrb.w	r3, [r7, #1504]	; 0x5e0
													(char *)DETAIL_STATUS[status],
 800257e:	4a60      	ldr	r2, [pc, #384]	; (8002700 <StartDefaultTask+0x710>)
 8002580:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
					  infor_lenght = commandRespond(RPD_STOP,
 8002584:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8002588:	2100      	movs	r1, #0
 800258a:	2006      	movs	r0, #6
 800258c:	f7ff f834 	bl	80015f8 <commandRespond>
 8002590:	f8c7 0604 	str.w	r0, [r7, #1540]	; 0x604
					  LOG_REPORT("STOP KEY", __LINE__);
 8002594:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8002598:	485a      	ldr	r0, [pc, #360]	; (8002704 <StartDefaultTask+0x714>)
 800259a:	f7ff f8c5 	bl	8001728 <LOG_REPORT>
		  break;
 800259e:	e019      	b.n	80025d4 <StartDefaultTask+0x5e4>
		  case SCARA_KEY_STATE_FINISH:
		  {
			  current_key_state = SCARA_KEY_STATE_READY;
 80025a0:	2300      	movs	r3, #0
 80025a2:	f887 35f7 	strb.w	r3, [r7, #1527]	; 0x5f7
			  positionNext.t = 0;
 80025a6:	4a55      	ldr	r2, [pc, #340]	; (80026fc <StartDefaultTask+0x70c>)
 80025a8:	f04f 0300 	mov.w	r3, #0
 80025ac:	f04f 0400 	mov.w	r4, #0
 80025b0:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
			  positionNext.total_time = 0;
 80025b4:	4a51      	ldr	r2, [pc, #324]	; (80026fc <StartDefaultTask+0x70c>)
 80025b6:	f04f 0300 	mov.w	r3, #0
 80025ba:	f04f 0400 	mov.w	r4, #0
 80025be:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
			  positionNext.q = 0;
 80025c2:	4a4e      	ldr	r2, [pc, #312]	; (80026fc <StartDefaultTask+0x70c>)
 80025c4:	f04f 0300 	mov.w	r3, #0
 80025c8:	f04f 0400 	mov.w	r4, #0
 80025cc:	e9c2 3400 	strd	r3, r4, [r2]
		  }
		  break;
 80025d0:	e000      	b.n	80025d4 <StartDefaultTask+0x5e4>
		  break;
 80025d2:	bf00      	nop
		  }
	  }
	  break;
 80025d4:	e1dd      	b.n	8002992 <StartDefaultTask+0x9a2>

	  case SCARA_METHOD_SEMI_AUTO:
	  {
		  switch( current_mode) {
 80025d6:	f897 35fa 	ldrb.w	r3, [r7, #1530]	; 0x5fa
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d00b      	beq.n	80025f6 <StartDefaultTask+0x606>
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d063      	beq.n	80026aa <StartDefaultTask+0x6ba>
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f040 81cc 	bne.w	8002980 <StartDefaultTask+0x990>
		  case SCARA_MODE_STOP:
			  {
				  current_mode 	= SCARA_MODE_DUTY;
 80025e8:	2302      	movs	r3, #2
 80025ea:	f887 35fa 	strb.w	r3, [r7, #1530]	; 0x5fa
				  current_duty_state = SCARA_DUTY_STATE_READY;
 80025ee:	2300      	movs	r3, #0
 80025f0:	f887 35f9 	strb.w	r3, [r7, #1529]	; 0x5f9
			  }
			  break;
 80025f4:	e1ca      	b.n	800298c <StartDefaultTask+0x99c>

		  case SCARA_MODE_SCAN:
			  {
				  switch (current_scan_state) {
 80025f6:	f897 35f8 	ldrb.w	r3, [r7, #1528]	; 0x5f8
 80025fa:	2b03      	cmp	r3, #3
 80025fc:	d84b      	bhi.n	8002696 <StartDefaultTask+0x6a6>
 80025fe:	a201      	add	r2, pc, #4	; (adr r2, 8002604 <StartDefaultTask+0x614>)
 8002600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002604:	08002615 	.word	0x08002615
 8002608:	08002621 	.word	0x08002621
 800260c:	08002633 	.word	0x08002633
 8002610:	08002647 	.word	0x08002647
				  case SCARA_SCAN_STATE_INIT:
					  {
						  lowlayer_scanReset();
 8002614:	f001 f9c8 	bl	80039a8 <lowlayer_scanReset>
						  current_scan_state = SCARA_SCAN_STATE_HARD;
 8002618:	2301      	movs	r3, #1
 800261a:	f887 35f8 	strb.w	r3, [r7, #1528]	; 0x5f8
					  }
					  break;
 800261e:	e043      	b.n	80026a8 <StartDefaultTask+0x6b8>
				  case SCARA_SCAN_STATE_HARD:
					  {
						  if(lowlayer_scanFlow()) {
 8002620:	f001 f9f2 	bl	8003a08 <lowlayer_scanFlow>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d03b      	beq.n	80026a2 <StartDefaultTask+0x6b2>
							  current_scan_state = SCARA_SCAN_STATE_SOFT;
 800262a:	2302      	movs	r3, #2
 800262c:	f887 35f8 	strb.w	r3, [r7, #1528]	; 0x5f8
						  }
					  }
					  break;
 8002630:	e037      	b.n	80026a2 <StartDefaultTask+0x6b2>
				  case SCARA_SCAN_STATE_SOFT:
					  {
						  if(lowlayer_goToSoftLimit(&positionNext)) {
 8002632:	4832      	ldr	r0, [pc, #200]	; (80026fc <StartDefaultTask+0x70c>)
 8002634:	f001 fb44 	bl	8003cc0 <lowlayer_goToSoftLimit>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d033      	beq.n	80026a6 <StartDefaultTask+0x6b6>
							  current_scan_state = SCARA_SCAN_STATE_FINISH;
 800263e:	2303      	movs	r3, #3
 8002640:	f887 35f8 	strb.w	r3, [r7, #1528]	; 0x5f8
							}
					  }
					  break;
 8002644:	e02f      	b.n	80026a6 <StartDefaultTask+0x6b6>
				  case SCARA_SCAN_STATE_FINISH:
					  {
						  lowlayer_readSetPosition(&positionNext);
 8002646:	482d      	ldr	r0, [pc, #180]	; (80026fc <StartDefaultTask+0x70c>)
 8002648:	f001 fc96 	bl	8003f78 <lowlayer_readSetPosition>
						  current_mode 	= SCARA_MODE_DUTY;
 800264c:	2302      	movs	r3, #2
 800264e:	f887 35fa 	strb.w	r3, [r7, #1530]	; 0x5fa
						  current_duty_state = SCARA_DUTY_STATE_READY;
 8002652:	2300      	movs	r3, #0
 8002654:	f887 35f9 	strb.w	r3, [r7, #1529]	; 0x5f9
						  kinematicForward(&positionNext);
 8002658:	4828      	ldr	r0, [pc, #160]	; (80026fc <StartDefaultTask+0x70c>)
 800265a:	f000 fcbd 	bl	8002fd8 <kinematicForward>
						  scaraSetScanFlag();
 800265e:	f006 fc23 	bl	8008ea8 <scaraSetScanFlag>
						  //Done Inform
						  scaraPosition2String((char *)position, positionNext);
 8002662:	4c26      	ldr	r4, [pc, #152]	; (80026fc <StartDefaultTask+0x70c>)
 8002664:	f507 755e 	add.w	r5, r7, #888	; 0x378
 8002668:	4668      	mov	r0, sp
 800266a:	f104 0308 	add.w	r3, r4, #8
 800266e:	22b0      	movs	r2, #176	; 0xb0
 8002670:	4619      	mov	r1, r3
 8002672:	f013 f965 	bl	8015940 <memcpy>
 8002676:	e894 000c 	ldmia.w	r4, {r2, r3}
 800267a:	4628      	mov	r0, r5
 800267c:	f006 fcd0 	bl	8009020 <scaraPosition2String>
						  infor_lenght 		= commandRespond(RPD_DONE,
 8002680:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8002684:	f507 725e 	add.w	r2, r7, #888	; 0x378
 8002688:	2100      	movs	r1, #0
 800268a:	2005      	movs	r0, #5
 800268c:	f7fe ffb4 	bl	80015f8 <commandRespond>
 8002690:	f8c7 0604 	str.w	r0, [r7, #1540]	; 0x604
															 0,
															(char *)position,
															(char *)infor);
					  }
					  break;
 8002694:	e008      	b.n	80026a8 <StartDefaultTask+0x6b8>
				  default:
					  {
						  LOG_REPORT("ERROR STATE !!!", __LINE__);
 8002696:	f240 11f9 	movw	r1, #505	; 0x1f9
 800269a:	481b      	ldr	r0, [pc, #108]	; (8002708 <StartDefaultTask+0x718>)
 800269c:	f7ff f844 	bl	8001728 <LOG_REPORT>
						  while(1);
 80026a0:	e7fe      	b.n	80026a0 <StartDefaultTask+0x6b0>
					  break;
 80026a2:	bf00      	nop
 80026a4:	e172      	b.n	800298c <StartDefaultTask+0x99c>
					  break;
 80026a6:	bf00      	nop
					  }
				  }

			  }
			  break;
 80026a8:	e170      	b.n	800298c <StartDefaultTask+0x99c>

		  case SCARA_MODE_DUTY:
			  {
				  switch (current_duty_state) {
 80026aa:	f897 35f9 	ldrb.w	r3, [r7, #1529]	; 0x5f9
 80026ae:	2b03      	cmp	r3, #3
 80026b0:	f200 815f 	bhi.w	8002972 <StartDefaultTask+0x982>
 80026b4:	a201      	add	r2, pc, #4	; (adr r2, 80026bc <StartDefaultTask+0x6cc>)
 80026b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ba:	bf00      	nop
 80026bc:	080026cd 	.word	0x080026cd
 80026c0:	0800270d 	.word	0x0800270d
 80026c4:	08002811 	.word	0x08002811
 80026c8:	0800290f 	.word	0x0800290f
				  case SCARA_DUTY_STATE_READY:
					  {
						  // Do nothing();
						  __NOP();
 80026cc:	bf00      	nop
					  }
				  break;
 80026ce:	e156      	b.n	800297e <StartDefaultTask+0x98e>
 80026d0:	40000000 	.word	0x40000000
 80026d4:	3f847ae1 	.word	0x3f847ae1
 80026d8:	0801b020 	.word	0x0801b020
 80026dc:	0801b034 	.word	0x0801b034
 80026e0:	0801b048 	.word	0x0801b048
 80026e4:	0801b050 	.word	0x0801b050
 80026e8:	0801b060 	.word	0x0801b060
 80026ec:	0801b074 	.word	0x0801b074
 80026f0:	0801b08c 	.word	0x0801b08c
 80026f4:	20005ef0 	.word	0x20005ef0
 80026f8:	20005e38 	.word	0x20005e38
 80026fc:	20005fa8 	.word	0x20005fa8
 8002700:	20000c58 	.word	0x20000c58
 8002704:	0801b0a4 	.word	0x0801b0a4
 8002708:	0801b0b0 	.word	0x0801b0b0

				  case SCARA_DUTY_STATE_INIT:
					  {
						  SCARA_StatusTypeDef status1, status2;
						  status1 = scaraInitDuty(duty_cmd);
 800270c:	f507 6485 	add.w	r4, r7, #1064	; 0x428
 8002710:	4668      	mov	r0, sp
 8002712:	f104 0310 	add.w	r3, r4, #16
 8002716:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800271a:	4619      	mov	r1, r3
 800271c:	f013 f910 	bl	8015940 <memcpy>
 8002720:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002724:	f002 f888 	bl	8004838 <scaraInitDuty>
 8002728:	4603      	mov	r3, r0
 800272a:	f887 35e2 	strb.w	r3, [r7, #1506]	; 0x5e2
						  if ( SCARA_STATUS_OK == status1) {
 800272e:	f897 35e2 	ldrb.w	r3, [r7, #1506]	; 0x5e2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d154      	bne.n	80027e0 <StartDefaultTask+0x7f0>
							  status2 = scaraTestDuty();
 8002736:	f006 fb3b 	bl	8008db0 <scaraTestDuty>
 800273a:	4603      	mov	r3, r0
 800273c:	f887 35e1 	strb.w	r3, [r7, #1505]	; 0x5e1
							  if (SCARA_STATUS_OK == status2) {
 8002740:	f897 35e1 	ldrb.w	r3, [r7, #1505]	; 0x5e1
 8002744:	2b00      	cmp	r3, #0
 8002746:	d133      	bne.n	80027b0 <StartDefaultTask+0x7c0>
							  //current_duty_state		= SCARA_DUTY_STATE_FLOW;
							  current_duty_state = SCARA_DUTY_STATE_FINISH;
 8002748:	2303      	movs	r3, #3
 800274a:	f887 35f9 	strb.w	r3, [r7, #1529]	; 0x5f9
							  run_time			= 0;
 800274e:	f107 0218 	add.w	r2, r7, #24
 8002752:	f04f 0300 	mov.w	r3, #0
 8002756:	f04f 0400 	mov.w	r4, #0
 800275a:	e9c2 3400 	strd	r3, r4, [r2]
							  // Respond
							  respond_lenght 	= commandRespond(RPD_OK,
 800275e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002762:	6899      	ldr	r1, [r3, #8]
 8002764:	f897 35e2 	ldrb.w	r3, [r7, #1506]	; 0x5e2
																  duty_cmd.id_command,
																  (char *)DETAIL_STATUS[status1],
 8002768:	4ad1      	ldr	r2, [pc, #836]	; (8002ab0 <StartDefaultTask+0xac0>)
 800276a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
							  respond_lenght 	= commandRespond(RPD_OK,
 800276e:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002772:	2008      	movs	r0, #8
 8002774:	f7fe ff40 	bl	80015f8 <commandRespond>
 8002778:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
																  (char *)respond);
#ifdef SIMULATION
							  scaraPosition2String((char *)position, positionCurrent);
#else
							  scaraPosition2String((char *)position, positionTrue);
 800277c:	4ccd      	ldr	r4, [pc, #820]	; (8002ab4 <StartDefaultTask+0xac4>)
 800277e:	f507 755e 	add.w	r5, r7, #888	; 0x378
 8002782:	4668      	mov	r0, sp
 8002784:	f104 0308 	add.w	r3, r4, #8
 8002788:	22b0      	movs	r2, #176	; 0xb0
 800278a:	4619      	mov	r1, r3
 800278c:	f013 f8d8 	bl	8015940 <memcpy>
 8002790:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002794:	4628      	mov	r0, r5
 8002796:	f006 fc43 	bl	8009020 <scaraPosition2String>
#endif
							  // Start Inform
							  infor_lenght 		= commandRespond(RPD_START,
 800279a:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 800279e:	f507 725e 	add.w	r2, r7, #888	; 0x378
 80027a2:	2100      	movs	r1, #0
 80027a4:	2003      	movs	r0, #3
 80027a6:	f7fe ff27 	bl	80015f8 <commandRespond>
 80027aa:	f8c7 0604 	str.w	r0, [r7, #1540]	; 0x604
																  (char *)DETAIL_STATUS[status1],
																  (char *)respond);
							  LOG_REPORT("INIT FAIL", __LINE__);
						  }
					  }
				  break;
 80027ae:	e0e6      	b.n	800297e <StartDefaultTask+0x98e>
								  current_duty_state 	= SCARA_DUTY_STATE_READY;
 80027b0:	2300      	movs	r3, #0
 80027b2:	f887 35f9 	strb.w	r3, [r7, #1529]	; 0x5f9
								  respond_lenght	= commandRespond(RPD_ERROR,
 80027b6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80027ba:	6899      	ldr	r1, [r3, #8]
 80027bc:	f897 35e1 	ldrb.w	r3, [r7, #1505]	; 0x5e1
																	  (char *)DETAIL_STATUS[status2],
 80027c0:	4abb      	ldr	r2, [pc, #748]	; (8002ab0 <StartDefaultTask+0xac0>)
 80027c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
								  respond_lenght	= commandRespond(RPD_ERROR,
 80027c6:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80027ca:	2007      	movs	r0, #7
 80027cc:	f7fe ff14 	bl	80015f8 <commandRespond>
 80027d0:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
								  LOG_REPORT("TEST FAIL", __LINE__);
 80027d4:	f240 212a 	movw	r1, #554	; 0x22a
 80027d8:	48b7      	ldr	r0, [pc, #732]	; (8002ab8 <StartDefaultTask+0xac8>)
 80027da:	f7fe ffa5 	bl	8001728 <LOG_REPORT>
				  break;
 80027de:	e0ce      	b.n	800297e <StartDefaultTask+0x98e>
							  current_duty_state 	= SCARA_DUTY_STATE_READY;
 80027e0:	2300      	movs	r3, #0
 80027e2:	f887 35f9 	strb.w	r3, [r7, #1529]	; 0x5f9
							  respond_lenght	= commandRespond(RPD_ERROR,
 80027e6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80027ea:	6899      	ldr	r1, [r3, #8]
 80027ec:	f897 35e2 	ldrb.w	r3, [r7, #1506]	; 0x5e2
																  (char *)DETAIL_STATUS[status1],
 80027f0:	4aaf      	ldr	r2, [pc, #700]	; (8002ab0 <StartDefaultTask+0xac0>)
 80027f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
							  respond_lenght	= commandRespond(RPD_ERROR,
 80027f6:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80027fa:	2007      	movs	r0, #7
 80027fc:	f7fe fefc 	bl	80015f8 <commandRespond>
 8002800:	f8c7 0608 	str.w	r0, [r7, #1544]	; 0x608
							  LOG_REPORT("INIT FAIL", __LINE__);
 8002804:	f240 2132 	movw	r1, #562	; 0x232
 8002808:	48ac      	ldr	r0, [pc, #688]	; (8002abc <StartDefaultTask+0xacc>)
 800280a:	f7fe ff8d 	bl	8001728 <LOG_REPORT>
				  break;
 800280e:	e0b6      	b.n	800297e <StartDefaultTask+0x98e>

				  case SCARA_DUTY_STATE_FLOW:
					  {
						  SCARA_StatusTypeDef status;
						  // Increase run time
						  run_time += T_SAMPLING;
 8002810:	f107 0318 	add.w	r3, r7, #24
 8002814:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002818:	a3a3      	add	r3, pc, #652	; (adr r3, 8002aa8 <StartDefaultTask+0xab8>)
 800281a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281e:	f7fd fd35 	bl	800028c <__adddf3>
 8002822:	4603      	mov	r3, r0
 8002824:	460c      	mov	r4, r1
 8002826:	f107 0218 	add.w	r2, r7, #24
 800282a:	e9c2 3400 	strd	r3, r4, [r2]
						  // Check Time Out
						  if (scaraIsFinish(run_time)) {
 800282e:	f107 0318 	add.w	r3, r7, #24
 8002832:	ed93 7b00 	vldr	d7, [r3]
 8002836:	eeb0 0a47 	vmov.f32	s0, s14
 800283a:	eef0 0a67 	vmov.f32	s1, s15
 800283e:	f006 fbc3 	bl	8008fc8 <scaraIsFinish>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d003      	beq.n	8002850 <StartDefaultTask+0x860>
							  current_duty_state = SCARA_DUTY_STATE_FINISH;// Work Done
 8002848:	2303      	movs	r3, #3
 800284a:	f887 35f9 	strb.w	r3, [r7, #1529]	; 0x5f9
																(char *)infor);
								  LOG_REPORT("STOP DUTY", __LINE__);
							  }
						  }
					  }
				  break;
 800284e:	e096      	b.n	800297e <StartDefaultTask+0x98e>
							  status = scaraFlowDuty(run_time , &positionNext, positionCurrent);
 8002850:	f107 0318 	add.w	r3, r7, #24
 8002854:	ed93 8b00 	vldr	d8, [r3]
 8002858:	4c99      	ldr	r4, [pc, #612]	; (8002ac0 <StartDefaultTask+0xad0>)
 800285a:	4668      	mov	r0, sp
 800285c:	f104 0308 	add.w	r3, r4, #8
 8002860:	22b0      	movs	r2, #176	; 0xb0
 8002862:	4619      	mov	r1, r3
 8002864:	f013 f86c 	bl	8015940 <memcpy>
 8002868:	e894 000c 	ldmia.w	r4, {r2, r3}
 800286c:	4895      	ldr	r0, [pc, #596]	; (8002ac4 <StartDefaultTask+0xad4>)
 800286e:	eeb0 0a48 	vmov.f32	s0, s16
 8002872:	eef0 0a68 	vmov.f32	s1, s17
 8002876:	f004 fc85 	bl	8007184 <scaraFlowDuty>
 800287a:	4603      	mov	r3, r0
 800287c:	f887 35e3 	strb.w	r3, [r7, #1507]	; 0x5e3
							  if ( SCARA_STATUS_OK == status) {
 8002880:	f897 35e3 	ldrb.w	r3, [r7, #1507]	; 0x5e3
 8002884:	2b00      	cmp	r3, #0
 8002886:	d12c      	bne.n	80028e2 <StartDefaultTask+0x8f2>
								  lowlayer_computeAndWritePulse(positionCurrent, positionNext);
 8002888:	4c8d      	ldr	r4, [pc, #564]	; (8002ac0 <StartDefaultTask+0xad0>)
 800288a:	4a8e      	ldr	r2, [pc, #568]	; (8002ac4 <StartDefaultTask+0xad4>)
 800288c:	ab2a      	add	r3, sp, #168	; 0xa8
 800288e:	4611      	mov	r1, r2
 8002890:	22b8      	movs	r2, #184	; 0xb8
 8002892:	4618      	mov	r0, r3
 8002894:	f013 f854 	bl	8015940 <memcpy>
 8002898:	4668      	mov	r0, sp
 800289a:	f104 0310 	add.w	r3, r4, #16
 800289e:	22a8      	movs	r2, #168	; 0xa8
 80028a0:	4619      	mov	r1, r3
 80028a2:	f013 f84d 	bl	8015940 <memcpy>
 80028a6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80028aa:	f001 fc19 	bl	80040e0 <lowlayer_computeAndWritePulse>
								  scaraPosition2String((char *)position, positionTrue);
 80028ae:	4c81      	ldr	r4, [pc, #516]	; (8002ab4 <StartDefaultTask+0xac4>)
 80028b0:	f507 755e 	add.w	r5, r7, #888	; 0x378
 80028b4:	4668      	mov	r0, sp
 80028b6:	f104 0308 	add.w	r3, r4, #8
 80028ba:	22b0      	movs	r2, #176	; 0xb0
 80028bc:	4619      	mov	r1, r3
 80028be:	f013 f83f 	bl	8015940 <memcpy>
 80028c2:	e894 000c 	ldmia.w	r4, {r2, r3}
 80028c6:	4628      	mov	r0, r5
 80028c8:	f006 fbaa 	bl	8009020 <scaraPosition2String>
								  infor_lenght = commandRespond(RPD_RUNNING,
 80028cc:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 80028d0:	f507 725e 	add.w	r2, r7, #888	; 0x378
 80028d4:	2100      	movs	r1, #0
 80028d6:	2004      	movs	r0, #4
 80028d8:	f7fe fe8e 	bl	80015f8 <commandRespond>
 80028dc:	f8c7 0604 	str.w	r0, [r7, #1540]	; 0x604
				  break;
 80028e0:	e04d      	b.n	800297e <StartDefaultTask+0x98e>
								  current_duty_state = SCARA_DUTY_STATE_FINISH;
 80028e2:	2303      	movs	r3, #3
 80028e4:	f887 35f9 	strb.w	r3, [r7, #1529]	; 0x5f9
								  infor_lenght = commandRespond(RPD_STOP,
 80028e8:	f897 35e3 	ldrb.w	r3, [r7, #1507]	; 0x5e3
																(char *)DETAIL_STATUS[status],
 80028ec:	4a70      	ldr	r2, [pc, #448]	; (8002ab0 <StartDefaultTask+0xac0>)
 80028ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
								  infor_lenght = commandRespond(RPD_STOP,
 80028f2:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 80028f6:	2100      	movs	r1, #0
 80028f8:	2006      	movs	r0, #6
 80028fa:	f7fe fe7d 	bl	80015f8 <commandRespond>
 80028fe:	f8c7 0604 	str.w	r0, [r7, #1540]	; 0x604
								  LOG_REPORT("STOP DUTY", __LINE__);
 8002902:	f240 2155 	movw	r1, #597	; 0x255
 8002906:	4870      	ldr	r0, [pc, #448]	; (8002ac8 <StartDefaultTask+0xad8>)
 8002908:	f7fe ff0e 	bl	8001728 <LOG_REPORT>
				  break;
 800290c:	e037      	b.n	800297e <StartDefaultTask+0x98e>

				  case SCARA_DUTY_STATE_FINISH:
					  {
						  current_duty_state = SCARA_DUTY_STATE_READY;
 800290e:	2300      	movs	r3, #0
 8002910:	f887 35f9 	strb.w	r3, [r7, #1529]	; 0x5f9
						  positionNext.t = 0;
 8002914:	4a6b      	ldr	r2, [pc, #428]	; (8002ac4 <StartDefaultTask+0xad4>)
 8002916:	f04f 0300 	mov.w	r3, #0
 800291a:	f04f 0400 	mov.w	r4, #0
 800291e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
						  positionNext.total_time = 0;
 8002922:	4a68      	ldr	r2, [pc, #416]	; (8002ac4 <StartDefaultTask+0xad4>)
 8002924:	f04f 0300 	mov.w	r3, #0
 8002928:	f04f 0400 	mov.w	r4, #0
 800292c:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
						  positionNext.q = 0;
 8002930:	4a64      	ldr	r2, [pc, #400]	; (8002ac4 <StartDefaultTask+0xad4>)
 8002932:	f04f 0300 	mov.w	r3, #0
 8002936:	f04f 0400 	mov.w	r4, #0
 800293a:	e9c2 3400 	strd	r3, r4, [r2]
						  // Done Inform
#ifdef SIMULATION
						  scaraPosition2String((char *)position, positionCurrent);
#else
						  scaraPosition2String((char *)position, positionTrue);
 800293e:	4c5d      	ldr	r4, [pc, #372]	; (8002ab4 <StartDefaultTask+0xac4>)
 8002940:	f507 755e 	add.w	r5, r7, #888	; 0x378
 8002944:	4668      	mov	r0, sp
 8002946:	f104 0308 	add.w	r3, r4, #8
 800294a:	22b0      	movs	r2, #176	; 0xb0
 800294c:	4619      	mov	r1, r3
 800294e:	f012 fff7 	bl	8015940 <memcpy>
 8002952:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002956:	4628      	mov	r0, r5
 8002958:	f006 fb62 	bl	8009020 <scaraPosition2String>
#endif
						  infor_lenght 		= commandRespond(RPD_DONE,
 800295c:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8002960:	f507 725e 	add.w	r2, r7, #888	; 0x378
 8002964:	2100      	movs	r1, #0
 8002966:	2005      	movs	r0, #5
 8002968:	f7fe fe46 	bl	80015f8 <commandRespond>
 800296c:	f8c7 0604 	str.w	r0, [r7, #1540]	; 0x604
															 0,
															 (char *)position,
															 (char *)infor);
					  }
				  break;
 8002970:	e005      	b.n	800297e <StartDefaultTask+0x98e>

				  default:
					  {
						  LOG_REPORT("ERROR STATE !!!", __LINE__);
 8002972:	f44f 711c 	mov.w	r1, #624	; 0x270
 8002976:	4855      	ldr	r0, [pc, #340]	; (8002acc <StartDefaultTask+0xadc>)
 8002978:	f7fe fed6 	bl	8001728 <LOG_REPORT>
						  while(1);
 800297c:	e7fe      	b.n	800297c <StartDefaultTask+0x98c>
					  }
				  }

			  }
			  break;
 800297e:	e005      	b.n	800298c <StartDefaultTask+0x99c>

		  default:
			  {
				  LOG_REPORT("ERROR MODE !!!", __LINE__);
 8002980:	f240 217a 	movw	r1, #634	; 0x27a
 8002984:	4852      	ldr	r0, [pc, #328]	; (8002ad0 <StartDefaultTask+0xae0>)
 8002986:	f7fe fecf 	bl	8001728 <LOG_REPORT>
				  while(1);
 800298a:	e7fe      	b.n	800298a <StartDefaultTask+0x99a>
			  }
		  }
	  }
	  break;
 800298c:	e002      	b.n	8002994 <StartDefaultTask+0x9a4>
	  case SCARA_METHOD_AUTO:
	  {

	  }

	  break;
 800298e:	bf00      	nop
 8002990:	e000      	b.n	8002994 <StartDefaultTask+0x9a4>
	  break;
 8002992:	bf00      	nop
	  }
	  }

	  /* 4--- Send to PC Phase ---*/
	  // Check buffer from USB task
	  osMutexWait(usbTxMutexHandle, osWaitForever);
 8002994:	4b4f      	ldr	r3, [pc, #316]	; (8002ad4 <StartDefaultTask+0xae4>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f04f 31ff 	mov.w	r1, #4294967295
 800299c:	4618      	mov	r0, r3
 800299e:	f00f f9ef 	bl	8011d80 <osMutexWait>
	  task_usb_lenght = ringBuff_PopArray(&cmd_tx_ringbuff, task_usb, RINGBUFFER_SIZE);
 80029a2:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80029a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029aa:	4619      	mov	r1, r3
 80029ac:	484a      	ldr	r0, [pc, #296]	; (8002ad8 <StartDefaultTask+0xae8>)
 80029ae:	f000 ff7e 	bl	80038ae <ringBuff_PopArray>
 80029b2:	f8c7 05ec 	str.w	r0, [r7, #1516]	; 0x5ec
	  osMutexRelease(usbTxMutexHandle);
 80029b6:	4b47      	ldr	r3, [pc, #284]	; (8002ad4 <StartDefaultTask+0xae4>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f00f fa2e 	bl	8011e1c <osMutexRelease>
	  // Intergrate to 1 buffer
	  if (respond_lenght > 0) {
 80029c0:	f8d7 3608 	ldr.w	r3, [r7, #1544]	; 0x608
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	dd13      	ble.n	80029f0 <StartDefaultTask+0xa00>
		  respond_packed_lenght = packPayload(respond, respond_packed, respond_lenght);
 80029c8:	f507 7106 	add.w	r1, r7, #536	; 0x218
 80029cc:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80029d0:	f8d7 2608 	ldr.w	r2, [r7, #1544]	; 0x608
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff f99b 	bl	8001d10 <packPayload>
 80029da:	f8c7 0600 	str.w	r0, [r7, #1536]	; 0x600
		  memcpy(usb_buff, respond_packed, respond_packed_lenght);
 80029de:	f8d7 2600 	ldr.w	r2, [r7, #1536]	; 0x600
 80029e2:	f507 7106 	add.w	r1, r7, #536	; 0x218
 80029e6:	f107 0320 	add.w	r3, r7, #32
 80029ea:	4618      	mov	r0, r3
 80029ec:	f012 ffa8 	bl	8015940 <memcpy>
	  }
	  if (task_usb_lenght > 0) {
 80029f0:	f8d7 35ec 	ldr.w	r3, [r7, #1516]	; 0x5ec
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	dd0b      	ble.n	8002a10 <StartDefaultTask+0xa20>
		  memcpy(usb_buff + respond_packed_lenght, task_usb, task_usb_lenght);
 80029f8:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 80029fc:	f107 0220 	add.w	r2, r7, #32
 8002a00:	4413      	add	r3, r2
 8002a02:	f8d7 25ec 	ldr.w	r2, [r7, #1516]	; 0x5ec
 8002a06:	f507 7113 	add.w	r1, r7, #588	; 0x24c
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f012 ff98 	bl	8015940 <memcpy>
	  }
	  if (infor_lenght > 0) {
 8002a10:	f8d7 3604 	ldr.w	r3, [r7, #1540]	; 0x604
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	dd19      	ble.n	8002a4c <StartDefaultTask+0xa5c>
		  infor_packed_lenght 	= packPayload(infor, infor_packed, infor_lenght);
 8002a18:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 8002a1c:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8002a20:	f8d7 2604 	ldr.w	r2, [r7, #1540]	; 0x604
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff f973 	bl	8001d10 <packPayload>
 8002a2a:	f8c7 05fc 	str.w	r0, [r7, #1532]	; 0x5fc
		  memcpy(usb_buff + respond_packed_lenght + task_usb_lenght, infor_packed, infor_packed_lenght);
 8002a2e:	f8d7 2600 	ldr.w	r2, [r7, #1536]	; 0x600
 8002a32:	f8d7 35ec 	ldr.w	r3, [r7, #1516]	; 0x5ec
 8002a36:	4413      	add	r3, r2
 8002a38:	f107 0220 	add.w	r2, r7, #32
 8002a3c:	4413      	add	r3, r2
 8002a3e:	f8d7 25fc 	ldr.w	r2, [r7, #1532]	; 0x5fc
 8002a42:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 8002a46:	4618      	mov	r0, r3
 8002a48:	f012 ff7a 	bl	8015940 <memcpy>
	  }
	  usb_lenght = respond_packed_lenght + task_usb_lenght + infor_packed_lenght;
 8002a4c:	f8d7 2600 	ldr.w	r2, [r7, #1536]	; 0x600
 8002a50:	f8d7 35ec 	ldr.w	r3, [r7, #1516]	; 0x5ec
 8002a54:	4413      	add	r3, r2
 8002a56:	f8d7 25fc 	ldr.w	r2, [r7, #1532]	; 0x5fc
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8
	  // Send through USB
	  if (usb_lenght > 0) {
 8002a60:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	dd08      	ble.n	8002a7a <StartDefaultTask+0xa8a>
		  CDC_Transmit_FS(usb_buff, (uint16_t)usb_lenght);
 8002a68:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	; 0x5e8
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	f107 0320 	add.w	r3, r7, #32
 8002a72:	4611      	mov	r1, r2
 8002a74:	4618      	mov	r0, r3
 8002a76:	f012 faf5 	bl	8015064 <CDC_Transmit_FS>
	  }

	  /* 5--- Update ---*/
	  scaraSetMethod(current_method);
 8002a7a:	f897 35fb 	ldrb.w	r3, [r7, #1531]	; 0x5fb
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f006 fa50 	bl	8008f24 <scaraSetMethod>
	  scaraSetMode(current_mode);
 8002a84:	f897 35fa 	ldrb.w	r3, [r7, #1530]	; 0x5fa
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f006 fa3b 	bl	8008f04 <scaraSetMode>
	  scaraSetDutyState(current_duty_state);
 8002a8e:	f897 35f9 	ldrb.w	r3, [r7, #1529]	; 0x5f9
 8002a92:	4618      	mov	r0, r3
 8002a94:	f006 fa26 	bl	8008ee4 <scaraSetDutyState>

    osDelay(1);
 8002a98:	2001      	movs	r0, #1
 8002a9a:	f00f f8b8 	bl	8011c0e <osDelay>
	  osSignalWait(0x01, osWaitForever); // Very Important
 8002a9e:	f7ff baf8 	b.w	8002092 <StartDefaultTask+0xa2>
 8002aa2:	bf00      	nop
 8002aa4:	f3af 8000 	nop.w
 8002aa8:	40000000 	.word	0x40000000
 8002aac:	3f847ae1 	.word	0x3f847ae1
 8002ab0:	20000c58 	.word	0x20000c58
 8002ab4:	20005ef0 	.word	0x20005ef0
 8002ab8:	0801b0c0 	.word	0x0801b0c0
 8002abc:	0801b0cc 	.word	0x0801b0cc
 8002ac0:	20005e38 	.word	0x20005e38
 8002ac4:	20005fa8 	.word	0x20005fa8
 8002ac8:	0801b0d8 	.word	0x0801b0d8
 8002acc:	0801b0b0 	.word	0x0801b0b0
 8002ad0:	0801b0e4 	.word	0x0801b0e4
 8002ad4:	200052b8 	.word	0x200052b8
 8002ad8:	20000434 	.word	0x20000434

08002adc <Start_USB_RX_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_USB_RX_Task */
void Start_USB_RX_Task(void const * argument)
{
 8002adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ade:	f2ad 5d3c 	subw	sp, sp, #1340	; 0x53c
 8002ae2:	af6a      	add	r7, sp, #424	; 0x1a8
 8002ae4:	1d3b      	adds	r3, r7, #4
 8002ae6:	6018      	str	r0, [r3, #0]
	int32_t				respond_lenght;
	int32_t				message_lenght;
	int32_t 			detail_length;

	// Default value
	duty_cmd.key_speed = 1;
 8002ae8:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002aec:	2201      	movs	r2, #1
 8002aee:	605a      	str	r2, [r3, #4]

  /* Infinite loop */
  for(;;)
  {
	  for(;;) {
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, END_CHAR);
 8002af0:	2129      	movs	r1, #41	; 0x29
 8002af2:	4868      	ldr	r0, [pc, #416]	; (8002c94 <Start_USB_RX_Task+0x1b8>)
 8002af4:	f000 fefc 	bl	80038f0 <ringBuff_DistanceOf>
 8002af8:	f8c7 0388 	str.w	r0, [r7, #904]	; 0x388
		  if ( -1 != distance ) {
 8002afc:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 8002b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b04:	d0f4      	beq.n	8002af0 <Start_USB_RX_Task+0x14>
 8002b06:	466b      	mov	r3, sp
 8002b08:	461e      	mov	r6, r3
			  uint8_t temp[distance+1];
 8002b0a:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 8002b0e:	1c58      	adds	r0, r3, #1
 8002b10:	1e43      	subs	r3, r0, #1
 8002b12:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
 8002b16:	4603      	mov	r3, r0
 8002b18:	4619      	mov	r1, r3
 8002b1a:	f04f 0200 	mov.w	r2, #0
 8002b1e:	f04f 0300 	mov.w	r3, #0
 8002b22:	f04f 0400 	mov.w	r4, #0
 8002b26:	00d4      	lsls	r4, r2, #3
 8002b28:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002b2c:	00cb      	lsls	r3, r1, #3
 8002b2e:	4603      	mov	r3, r0
 8002b30:	4619      	mov	r1, r3
 8002b32:	f04f 0200 	mov.w	r2, #0
 8002b36:	f04f 0300 	mov.w	r3, #0
 8002b3a:	f04f 0400 	mov.w	r4, #0
 8002b3e:	00d4      	lsls	r4, r2, #3
 8002b40:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002b44:	00cb      	lsls	r3, r1, #3
 8002b46:	4603      	mov	r3, r0
 8002b48:	3307      	adds	r3, #7
 8002b4a:	08db      	lsrs	r3, r3, #3
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	ebad 0d03 	sub.w	sp, sp, r3
 8002b52:	ab6a      	add	r3, sp, #424	; 0x1a8
 8002b54:	3300      	adds	r3, #0
 8002b56:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
			  int32_t ret;
			  ringBuff_PopArray(&usb_rx_ringbuff, temp, distance + 1);
 8002b5a:	f8d7 1380 	ldr.w	r1, [r7, #896]	; 0x380
 8002b5e:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 8002b62:	3301      	adds	r3, #1
 8002b64:	461a      	mov	r2, r3
 8002b66:	484b      	ldr	r0, [pc, #300]	; (8002c94 <Start_USB_RX_Task+0x1b8>)
 8002b68:	f000 fea1 	bl	80038ae <ringBuff_PopArray>
			  ret = unPackPayload(temp, distance + 1);
 8002b6c:	f8d7 2380 	ldr.w	r2, [r7, #896]	; 0x380
 8002b70:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 8002b74:	3301      	adds	r3, #1
 8002b76:	4619      	mov	r1, r3
 8002b78:	4610      	mov	r0, r2
 8002b7a:	f7ff f933 	bl	8001de4 <unPackPayload>
 8002b7e:	f8c7 037c 	str.w	r0, [r7, #892]	; 0x37c
			  if( -1 == ret) {
 8002b82:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8002b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b8a:	d105      	bne.n	8002b98 <Start_USB_RX_Task+0xbc>
				  LOG_REPORT("UNPACK FAIL", __LINE__);
 8002b8c:	f240 21d2 	movw	r1, #722	; 0x2d2
 8002b90:	4841      	ldr	r0, [pc, #260]	; (8002c98 <Start_USB_RX_Task+0x1bc>)
 8002b92:	f7fe fdc9 	bl	8001728 <LOG_REPORT>
 8002b96:	e07a      	b.n	8002c8e <Start_USB_RX_Task+0x1b2>
			  } else {
				  LOG_REPORT((char*) temp, __LINE__);
 8002b98:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 8002b9c:	f44f 7135 	mov.w	r1, #724	; 0x2d4
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7fe fdc1 	bl	8001728 <LOG_REPORT>
				  cmd_type = commandRead(temp, ret, &id_command, &duty_cmd);
 8002ba6:	f8d7 0380 	ldr.w	r0, [r7, #896]	; 0x380
 8002baa:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002bae:	f507 725b 	add.w	r2, r7, #876	; 0x36c
 8002bb2:	f8d7 137c 	ldr.w	r1, [r7, #892]	; 0x37c
 8002bb6:	f7fe f9e7 	bl	8000f88 <commandRead>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	f887 337b 	strb.w	r3, [r7, #891]	; 0x37b
				  memset(detail, 0, sizeof(detail));
 8002bc0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002bc4:	2287      	movs	r2, #135	; 0x87
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f012 fedd 	bl	8015988 <memset>
				  detail_length = 0;
 8002bce:	f107 0308 	add.w	r3, r7, #8
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]
				  rpd_type = commandReply(cmd_type, duty_cmd, detail, &detail_length);
 8002bd6:	f507 74e0 	add.w	r4, r7, #448	; 0x1c0
 8002bda:	f897 537b 	ldrb.w	r5, [r7, #891]	; 0x37b
 8002bde:	f107 0308 	add.w	r3, r7, #8
 8002be2:	9369      	str	r3, [sp, #420]	; 0x1a4
 8002be4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002be8:	9368      	str	r3, [sp, #416]	; 0x1a0
 8002bea:	4668      	mov	r0, sp
 8002bec:	f104 0308 	add.w	r3, r4, #8
 8002bf0:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	f012 fea3 	bl	8015940 <memcpy>
 8002bfa:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002bfe:	4628      	mov	r0, r5
 8002c00:	f7fe fb84 	bl	800130c <commandReply>
 8002c04:	4603      	mov	r3, r0
 8002c06:	f887 337a 	strb.w	r3, [r7, #890]	; 0x37a

				  if ( RPD_DUTY == rpd_type) {
 8002c0a:	f897 337a 	ldrb.w	r3, [r7, #890]	; 0x37a
 8002c0e:	2b09      	cmp	r3, #9
 8002c10:	d123      	bne.n	8002c5a <Start_USB_RX_Task+0x17e>
					  DUTY_Command_TypeDef *dataMail;
					  dataMail = NULL;
 8002c12:	2300      	movs	r3, #0
 8002c14:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
					  // Wait allocate
					  while (dataMail == NULL) {
 8002c18:	e008      	b.n	8002c2c <Start_USB_RX_Task+0x150>
						  dataMail = osMailAlloc(commandMailHandle, osWaitForever);
 8002c1a:	4b20      	ldr	r3, [pc, #128]	; (8002c9c <Start_USB_RX_Task+0x1c0>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f04f 31ff 	mov.w	r1, #4294967295
 8002c22:	4618      	mov	r0, r3
 8002c24:	f00f fa88 	bl	8012138 <osMailAlloc>
 8002c28:	f8c7 038c 	str.w	r0, [r7, #908]	; 0x38c
					  while (dataMail == NULL) {
 8002c2c:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0f2      	beq.n	8002c1a <Start_USB_RX_Task+0x13e>
					  }
					  memcpy( dataMail, &duty_cmd, sizeof(DUTY_Command_TypeDef));
 8002c34:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8002c38:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	f8d7 038c 	ldr.w	r0, [r7, #908]	; 0x38c
 8002c42:	f012 fe7d 	bl	8015940 <memcpy>
					  osStatus result;
					  result = osMailPut(commandMailHandle, dataMail);
 8002c46:	4b15      	ldr	r3, [pc, #84]	; (8002c9c <Start_USB_RX_Task+0x1c0>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f8d7 138c 	ldr.w	r1, [r7, #908]	; 0x38c
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f00f fa88 	bl	8012164 <osMailPut>
 8002c54:	f8c7 0370 	str.w	r0, [r7, #880]	; 0x370
 8002c58:	e019      	b.n	8002c8e <Start_USB_RX_Task+0x1b2>
				//   }else if( RPD_POSITION == rpd_type) { 
				// 	  CDC_Transmit_FS(detail, 84);
				  }else {
					//   memset(respond, 0, sizeof(respond));
					//   memset(message, 0, sizeof(message));
					  respond_lenght	= commandRespond1(rpd_type, id_command,
 8002c5a:	f8d7 136c 	ldr.w	r1, [r7, #876]	; 0x36c
 8002c5e:	f107 0308 	add.w	r3, r7, #8
 8002c62:	681c      	ldr	r4, [r3, #0]
 8002c64:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8002c68:	f897 037a 	ldrb.w	r0, [r7, #890]	; 0x37a
 8002c6c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	4623      	mov	r3, r4
 8002c74:	f7fe fd10 	bl	8001698 <commandRespond1>
 8002c78:	f8c7 0374 	str.w	r0, [r7, #884]	; 0x374
							  	  	  	  (char *)detail, detail_length,
										  (char *)respond);
					  //message_lenght	= packPayload(respond, message, respond_lenght);
					  CDC_Transmit_FS(respond, respond_lenght);
 8002c7c:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002c86:	4611      	mov	r1, r2
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f012 f9eb 	bl	8015064 <CDC_Transmit_FS>
 8002c8e:	46b5      	mov	sp, r6
		  distance = ringBuff_DistanceOf(&usb_rx_ringbuff, END_CHAR);
 8002c90:	e72e      	b.n	8002af0 <Start_USB_RX_Task+0x14>
 8002c92:	bf00      	nop
 8002c94:	20000028 	.word	0x20000028
 8002c98:	0801b0f4 	.word	0x0801b0f4
 8002c9c:	200052bc 	.word	0x200052bc

08002ca0 <FSMC_Write>:
/* Includes ------------------------------------------------------------------*/
#include "fsmc.h"

/* USER CODE BEGIN 0 */
void FSMC_Write(uint32_t ui_address, uint32_t ui_data)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
	*(volatile uint16_t *)ui_address = ui_data;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	b292      	uxth	r2, r2
 8002cb0:	801a      	strh	r2, [r3, #0]
}
 8002cb2:	bf00      	nop
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <FSMC_Read>:

uint16_t FSMC_Read(uint32_t ui_address) {
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
	return *(volatile uint16_t *)ui_address;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	881b      	ldrh	r3, [r3, #0]
 8002cca:	b29b      	uxth	r3, r3
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <MX_FSMC_Init>:

NOR_HandleTypeDef hnor1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b088      	sub	sp, #32
 8002cdc:	af00      	add	r7, sp, #0
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8002cde:	1d3b      	adds	r3, r7, #4
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	605a      	str	r2, [r3, #4]
 8002ce6:	609a      	str	r2, [r3, #8]
 8002ce8:	60da      	str	r2, [r3, #12]
 8002cea:	611a      	str	r2, [r3, #16]
 8002cec:	615a      	str	r2, [r3, #20]
 8002cee:	619a      	str	r2, [r3, #24]

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FSMC_NORSRAM_DEVICE;
 8002cf0:	4b27      	ldr	r3, [pc, #156]	; (8002d90 <MX_FSMC_Init+0xb8>)
 8002cf2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8002cf6:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002cf8:	4b25      	ldr	r3, [pc, #148]	; (8002d90 <MX_FSMC_Init+0xb8>)
 8002cfa:	4a26      	ldr	r2, [pc, #152]	; (8002d94 <MX_FSMC_Init+0xbc>)
 8002cfc:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8002cfe:	4b24      	ldr	r3, [pc, #144]	; (8002d90 <MX_FSMC_Init+0xb8>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_ENABLE;
 8002d04:	4b22      	ldr	r3, [pc, #136]	; (8002d90 <MX_FSMC_Init+0xb8>)
 8002d06:	2202      	movs	r2, #2
 8002d08:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FSMC_MEMORY_TYPE_NOR;
 8002d0a:	4b21      	ldr	r3, [pc, #132]	; (8002d90 <MX_FSMC_Init+0xb8>)
 8002d0c:	2208      	movs	r2, #8
 8002d0e:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002d10:	4b1f      	ldr	r3, [pc, #124]	; (8002d90 <MX_FSMC_Init+0xb8>)
 8002d12:	2210      	movs	r2, #16
 8002d14:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8002d16:	4b1e      	ldr	r3, [pc, #120]	; (8002d90 <MX_FSMC_Init+0xb8>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002d1c:	4b1c      	ldr	r3, [pc, #112]	; (8002d90 <MX_FSMC_Init+0xb8>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	61da      	str	r2, [r3, #28]
  hnor1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8002d22:	4b1b      	ldr	r3, [pc, #108]	; (8002d90 <MX_FSMC_Init+0xb8>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	621a      	str	r2, [r3, #32]
  hnor1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8002d28:	4b19      	ldr	r3, [pc, #100]	; (8002d90 <MX_FSMC_Init+0xb8>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8002d2e:	4b18      	ldr	r3, [pc, #96]	; (8002d90 <MX_FSMC_Init+0xb8>)
 8002d30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d34:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8002d36:	4b16      	ldr	r3, [pc, #88]	; (8002d90 <MX_FSMC_Init+0xb8>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8002d3c:	4b14      	ldr	r3, [pc, #80]	; (8002d90 <MX_FSMC_Init+0xb8>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002d42:	4b13      	ldr	r3, [pc, #76]	; (8002d90 <MX_FSMC_Init+0xb8>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8002d48:	4b11      	ldr	r3, [pc, #68]	; (8002d90 <MX_FSMC_Init+0xb8>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8002d4e:	4b10      	ldr	r3, [pc, #64]	; (8002d90 <MX_FSMC_Init+0xb8>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8002d54:	230f      	movs	r3, #15
 8002d56:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8002d58:	230f      	movs	r3, #15
 8002d5a:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8002d5c:	23ff      	movs	r3, #255	; 0xff
 8002d5e:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8002d60:	230f      	movs	r3, #15
 8002d62:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8002d64:	2310      	movs	r3, #16
 8002d66:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8002d68:	2311      	movs	r3, #17
 8002d6a:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 8002d70:	1d3b      	adds	r3, r7, #4
 8002d72:	2200      	movs	r2, #0
 8002d74:	4619      	mov	r1, r3
 8002d76:	4806      	ldr	r0, [pc, #24]	; (8002d90 <MX_FSMC_Init+0xb8>)
 8002d78:	f008 ffc0 	bl	800bcfc <HAL_NOR_Init>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8002d82:	f000 fcf5 	bl	8003770 <Error_Handler>
  }

}
 8002d86:	bf00      	nop
 8002d88:	3720      	adds	r7, #32
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	200052c4 	.word	0x200052c4
 8002d94:	a0000104 	.word	0xa0000104

08002d98 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d9e:	1d3b      	adds	r3, r7, #4
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	605a      	str	r2, [r3, #4]
 8002da6:	609a      	str	r2, [r3, #8]
 8002da8:	60da      	str	r2, [r3, #12]
 8002daa:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8002dac:	4b24      	ldr	r3, [pc, #144]	; (8002e40 <HAL_FSMC_MspInit+0xa8>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d140      	bne.n	8002e36 <HAL_FSMC_MspInit+0x9e>
    return;
  }
  FSMC_Initialized = 1;
 8002db4:	4b22      	ldr	r3, [pc, #136]	; (8002e40 <HAL_FSMC_MspInit+0xa8>)
 8002db6:	2201      	movs	r2, #1
 8002db8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002dba:	2300      	movs	r3, #0
 8002dbc:	603b      	str	r3, [r7, #0]
 8002dbe:	4b21      	ldr	r3, [pc, #132]	; (8002e44 <HAL_FSMC_MspInit+0xac>)
 8002dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc2:	4a20      	ldr	r2, [pc, #128]	; (8002e44 <HAL_FSMC_MspInit+0xac>)
 8002dc4:	f043 0301 	orr.w	r3, r3, #1
 8002dc8:	6393      	str	r3, [r2, #56]	; 0x38
 8002dca:	4b1e      	ldr	r3, [pc, #120]	; (8002e44 <HAL_FSMC_MspInit+0xac>)
 8002dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	603b      	str	r3, [r7, #0]
 8002dd4:	683b      	ldr	r3, [r7, #0]
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  PB7   ------> FSMC_NL
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8002dd6:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002dda:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ddc:	2302      	movs	r3, #2
 8002dde:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de0:	2300      	movs	r3, #0
 8002de2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002de4:	2303      	movs	r3, #3
 8002de6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002de8:	230c      	movs	r3, #12
 8002dea:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002dec:	1d3b      	adds	r3, r7, #4
 8002dee:	4619      	mov	r1, r3
 8002df0:	4815      	ldr	r0, [pc, #84]	; (8002e48 <HAL_FSMC_MspInit+0xb0>)
 8002df2:	f008 fdcf 	bl	800b994 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 8002df6:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8002dfa:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e00:	2300      	movs	r3, #0
 8002e02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e04:	2303      	movs	r3, #3
 8002e06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002e08:	230c      	movs	r3, #12
 8002e0a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e0c:	1d3b      	adds	r3, r7, #4
 8002e0e:	4619      	mov	r1, r3
 8002e10:	480e      	ldr	r0, [pc, #56]	; (8002e4c <HAL_FSMC_MspInit+0xb4>)
 8002e12:	f008 fdbf 	bl	800b994 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002e16:	2380      	movs	r3, #128	; 0x80
 8002e18:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e22:	2303      	movs	r3, #3
 8002e24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002e26:	230c      	movs	r3, #12
 8002e28:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e2a:	1d3b      	adds	r3, r7, #4
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	4808      	ldr	r0, [pc, #32]	; (8002e50 <HAL_FSMC_MspInit+0xb8>)
 8002e30:	f008 fdb0 	bl	800b994 <HAL_GPIO_Init>
 8002e34:	e000      	b.n	8002e38 <HAL_FSMC_MspInit+0xa0>
    return;
 8002e36:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8002e38:	3718      	adds	r7, #24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	20001450 	.word	0x20001450
 8002e44:	40023800 	.word	0x40023800
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	40020c00 	.word	0x40020c00
 8002e50:	40020400 	.word	0x40020400

08002e54 <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* norHandle){
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FSMC_MspInit();
 8002e5c:	f7ff ff9c 	bl	8002d98 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 8002e60:	bf00      	nop
 8002e62:	3708      	adds	r7, #8
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b08a      	sub	sp, #40	; 0x28
 8002e6c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e6e:	f107 0314 	add.w	r3, r7, #20
 8002e72:	2200      	movs	r2, #0
 8002e74:	601a      	str	r2, [r3, #0]
 8002e76:	605a      	str	r2, [r3, #4]
 8002e78:	609a      	str	r2, [r3, #8]
 8002e7a:	60da      	str	r2, [r3, #12]
 8002e7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e7e:	2300      	movs	r3, #0
 8002e80:	613b      	str	r3, [r7, #16]
 8002e82:	4b51      	ldr	r3, [pc, #324]	; (8002fc8 <MX_GPIO_Init+0x160>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	4a50      	ldr	r2, [pc, #320]	; (8002fc8 <MX_GPIO_Init+0x160>)
 8002e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e8e:	4b4e      	ldr	r3, [pc, #312]	; (8002fc8 <MX_GPIO_Init+0x160>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e96:	613b      	str	r3, [r7, #16]
 8002e98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60fb      	str	r3, [r7, #12]
 8002e9e:	4b4a      	ldr	r3, [pc, #296]	; (8002fc8 <MX_GPIO_Init+0x160>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	4a49      	ldr	r2, [pc, #292]	; (8002fc8 <MX_GPIO_Init+0x160>)
 8002ea4:	f043 0301 	orr.w	r3, r3, #1
 8002ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eaa:	4b47      	ldr	r3, [pc, #284]	; (8002fc8 <MX_GPIO_Init+0x160>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	60fb      	str	r3, [r7, #12]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60bb      	str	r3, [r7, #8]
 8002eba:	4b43      	ldr	r3, [pc, #268]	; (8002fc8 <MX_GPIO_Init+0x160>)
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebe:	4a42      	ldr	r2, [pc, #264]	; (8002fc8 <MX_GPIO_Init+0x160>)
 8002ec0:	f043 0310 	orr.w	r3, r3, #16
 8002ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ec6:	4b40      	ldr	r3, [pc, #256]	; (8002fc8 <MX_GPIO_Init+0x160>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eca:	f003 0310 	and.w	r3, r3, #16
 8002ece:	60bb      	str	r3, [r7, #8]
 8002ed0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	607b      	str	r3, [r7, #4]
 8002ed6:	4b3c      	ldr	r3, [pc, #240]	; (8002fc8 <MX_GPIO_Init+0x160>)
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eda:	4a3b      	ldr	r2, [pc, #236]	; (8002fc8 <MX_GPIO_Init+0x160>)
 8002edc:	f043 0302 	orr.w	r3, r3, #2
 8002ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ee2:	4b39      	ldr	r3, [pc, #228]	; (8002fc8 <MX_GPIO_Init+0x160>)
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	607b      	str	r3, [r7, #4]
 8002eec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002eee:	2300      	movs	r3, #0
 8002ef0:	603b      	str	r3, [r7, #0]
 8002ef2:	4b35      	ldr	r3, [pc, #212]	; (8002fc8 <MX_GPIO_Init+0x160>)
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef6:	4a34      	ldr	r2, [pc, #208]	; (8002fc8 <MX_GPIO_Init+0x160>)
 8002ef8:	f043 0308 	orr.w	r3, r3, #8
 8002efc:	6313      	str	r3, [r2, #48]	; 0x30
 8002efe:	4b32      	ldr	r3, [pc, #200]	; (8002fc8 <MX_GPIO_Init+0x160>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	f003 0308 	and.w	r3, r3, #8
 8002f06:	603b      	str	r3, [r7, #0]
 8002f08:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin, GPIO_PIN_RESET);
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f44f 6141 	mov.w	r1, #3088	; 0xc10
 8002f10:	482e      	ldr	r0, [pc, #184]	; (8002fcc <MX_GPIO_Init+0x164>)
 8002f12:	f008 fed9 	bl	800bcc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ENCODER_RESET_Pin|PULSE_WRITE_Pin|CAPTURE_ENABLE_Pin|STOP_Pin, GPIO_PIN_RESET);
 8002f16:	2200      	movs	r2, #0
 8002f18:	f641 0148 	movw	r1, #6216	; 0x1848
 8002f1c:	482c      	ldr	r0, [pc, #176]	; (8002fd0 <MX_GPIO_Init+0x168>)
 8002f1e:	f008 fed3 	bl	800bcc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin, GPIO_PIN_RESET);
 8002f22:	2200      	movs	r2, #0
 8002f24:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8002f28:	482a      	ldr	r0, [pc, #168]	; (8002fd4 <MX_GPIO_Init+0x16c>)
 8002f2a:	f008 fecd 	bl	800bcc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OUTPUT_1_Pin|OUTPUT_2_Pin|USB_SIGN_Pin;
 8002f2e:	f44f 6341 	mov.w	r3, #3088	; 0xc10
 8002f32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f34:	2301      	movs	r3, #1
 8002f36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f40:	f107 0314 	add.w	r3, r7, #20
 8002f44:	4619      	mov	r1, r3
 8002f46:	4821      	ldr	r0, [pc, #132]	; (8002fcc <MX_GPIO_Init+0x164>)
 8002f48:	f008 fd24 	bl	800b994 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = ENCODER_RESET_Pin|CAPTURE_ENABLE_Pin|STOP_Pin;
 8002f4c:	f640 0348 	movw	r3, #2120	; 0x848
 8002f50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f52:	2301      	movs	r3, #1
 8002f54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f56:	2300      	movs	r3, #0
 8002f58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f5e:	f107 0314 	add.w	r3, r7, #20
 8002f62:	4619      	mov	r1, r3
 8002f64:	481a      	ldr	r0, [pc, #104]	; (8002fd0 <MX_GPIO_Init+0x168>)
 8002f66:	f008 fd15 	bl	800b994 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PULSE_WRITE_Pin;
 8002f6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f70:	2301      	movs	r3, #1
 8002f72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f74:	2300      	movs	r3, #0
 8002f76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PULSE_WRITE_GPIO_Port, &GPIO_InitStruct);
 8002f7c:	f107 0314 	add.w	r3, r7, #20
 8002f80:	4619      	mov	r1, r3
 8002f82:	4813      	ldr	r0, [pc, #76]	; (8002fd0 <MX_GPIO_Init+0x168>)
 8002f84:	f008 fd06 	bl	800b994 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = CPLD_LIMIT_Pin|CPLD_BUSY_Pin;
 8002f88:	f242 0304 	movw	r3, #8196	; 0x2004
 8002f8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f92:	2301      	movs	r3, #1
 8002f94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f96:	f107 0314 	add.w	r3, r7, #20
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	480c      	ldr	r0, [pc, #48]	; (8002fd0 <MX_GPIO_Init+0x168>)
 8002f9e:	f008 fcf9 	bl	800b994 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = STEP_SLEEP_Pin|STEP_RESET_Pin|STEP_ENABLE_Pin;
 8002fa2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002fa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fac:	2300      	movs	r3, #0
 8002fae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fb4:	f107 0314 	add.w	r3, r7, #20
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4806      	ldr	r0, [pc, #24]	; (8002fd4 <MX_GPIO_Init+0x16c>)
 8002fbc:	f008 fcea 	bl	800b994 <HAL_GPIO_Init>

}
 8002fc0:	bf00      	nop
 8002fc2:	3728      	adds	r7, #40	; 0x28
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	40020400 	.word	0x40020400
 8002fd0:	40020c00 	.word	0x40020c00
 8002fd4:	40020000 	.word	0x40020000

08002fd8 <kinematicForward>:
#include "kinematic.h"
#include "common_def.h"
#include "math.h"
#include "system_params.h"

uint8_t		kinematicForward(SCARA_PositionTypeDef *pnt) {
 8002fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fda:	b08b      	sub	sp, #44	; 0x2c
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
	double x, y, z, roll;

	x =   a1*cos(pnt->Theta1)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8002fe6:	eeb0 0a47 	vmov.f32	s0, s14
 8002fea:	eef0 0a67 	vmov.f32	s1, s15
 8002fee:	f016 fa93 	bl	8019518 <cos>
 8002ff2:	ec51 0b10 	vmov	r0, r1, d0
 8002ff6:	a38e      	add	r3, pc, #568	; (adr r3, 8003230 <kinematicForward+0x258>)
 8002ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ffc:	f7fd fafc 	bl	80005f8 <__aeabi_dmul>
 8003000:	4603      	mov	r3, r0
 8003002:	460c      	mov	r4, r1
 8003004:	461d      	mov	r5, r3
 8003006:	4626      	mov	r6, r4
		+ a2*cos(pnt->Theta1 + pnt->Theta2)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8003014:	461a      	mov	r2, r3
 8003016:	4623      	mov	r3, r4
 8003018:	f7fd f938 	bl	800028c <__adddf3>
 800301c:	4603      	mov	r3, r0
 800301e:	460c      	mov	r4, r1
 8003020:	ec44 3b17 	vmov	d7, r3, r4
 8003024:	eeb0 0a47 	vmov.f32	s0, s14
 8003028:	eef0 0a67 	vmov.f32	s1, s15
 800302c:	f016 fa74 	bl	8019518 <cos>
 8003030:	ec51 0b10 	vmov	r0, r1, d0
 8003034:	f04f 0200 	mov.w	r2, #0
 8003038:	4b83      	ldr	r3, [pc, #524]	; (8003248 <kinematicForward+0x270>)
 800303a:	f7fd fadd 	bl	80005f8 <__aeabi_dmul>
 800303e:	4603      	mov	r3, r0
 8003040:	460c      	mov	r4, r1
 8003042:	461a      	mov	r2, r3
 8003044:	4623      	mov	r3, r4
 8003046:	4628      	mov	r0, r5
 8003048:	4631      	mov	r1, r6
 800304a:	f7fd f91f 	bl	800028c <__adddf3>
 800304e:	4603      	mov	r3, r0
 8003050:	460c      	mov	r4, r1
 8003052:	461d      	mov	r5, r3
 8003054:	4626      	mov	r6, r4
		+ a4*cos(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8003062:	461a      	mov	r2, r3
 8003064:	4623      	mov	r3, r4
 8003066:	f7fd f911 	bl	800028c <__adddf3>
 800306a:	4603      	mov	r3, r0
 800306c:	460c      	mov	r4, r1
 800306e:	4618      	mov	r0, r3
 8003070:	4621      	mov	r1, r4
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 8003078:	461a      	mov	r2, r3
 800307a:	4623      	mov	r3, r4
 800307c:	f7fd f904 	bl	8000288 <__aeabi_dsub>
 8003080:	4603      	mov	r3, r0
 8003082:	460c      	mov	r4, r1
 8003084:	ec44 3b17 	vmov	d7, r3, r4
 8003088:	eeb0 0a47 	vmov.f32	s0, s14
 800308c:	eef0 0a67 	vmov.f32	s1, s15
 8003090:	f016 fa42 	bl	8019518 <cos>
 8003094:	ec51 0b10 	vmov	r0, r1, d0
 8003098:	a363      	add	r3, pc, #396	; (adr r3, 8003228 <kinematicForward+0x250>)
 800309a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800309e:	f7fd faab 	bl	80005f8 <__aeabi_dmul>
 80030a2:	4603      	mov	r3, r0
 80030a4:	460c      	mov	r4, r1
	x =   a1*cos(pnt->Theta1)
 80030a6:	461a      	mov	r2, r3
 80030a8:	4623      	mov	r3, r4
 80030aa:	4628      	mov	r0, r5
 80030ac:	4631      	mov	r1, r6
 80030ae:	f7fd f8ed 	bl	800028c <__adddf3>
 80030b2:	4603      	mov	r3, r0
 80030b4:	460c      	mov	r4, r1
 80030b6:	e9c7 3408 	strd	r3, r4, [r7, #32]
	y =   a1*sin(pnt->Theta1)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80030c0:	eeb0 0a47 	vmov.f32	s0, s14
 80030c4:	eef0 0a67 	vmov.f32	s1, s15
 80030c8:	f016 fab6 	bl	8019638 <sin>
 80030cc:	ec51 0b10 	vmov	r0, r1, d0
 80030d0:	a357      	add	r3, pc, #348	; (adr r3, 8003230 <kinematicForward+0x258>)
 80030d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d6:	f7fd fa8f 	bl	80005f8 <__aeabi_dmul>
 80030da:	4603      	mov	r3, r0
 80030dc:	460c      	mov	r4, r1
 80030de:	461d      	mov	r5, r3
 80030e0:	4626      	mov	r6, r4
		+ a2*sin(pnt->Theta1 + pnt->Theta2)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 80030ee:	461a      	mov	r2, r3
 80030f0:	4623      	mov	r3, r4
 80030f2:	f7fd f8cb 	bl	800028c <__adddf3>
 80030f6:	4603      	mov	r3, r0
 80030f8:	460c      	mov	r4, r1
 80030fa:	ec44 3b17 	vmov	d7, r3, r4
 80030fe:	eeb0 0a47 	vmov.f32	s0, s14
 8003102:	eef0 0a67 	vmov.f32	s1, s15
 8003106:	f016 fa97 	bl	8019638 <sin>
 800310a:	ec51 0b10 	vmov	r0, r1, d0
 800310e:	f04f 0200 	mov.w	r2, #0
 8003112:	4b4d      	ldr	r3, [pc, #308]	; (8003248 <kinematicForward+0x270>)
 8003114:	f7fd fa70 	bl	80005f8 <__aeabi_dmul>
 8003118:	4603      	mov	r3, r0
 800311a:	460c      	mov	r4, r1
 800311c:	461a      	mov	r2, r3
 800311e:	4623      	mov	r3, r4
 8003120:	4628      	mov	r0, r5
 8003122:	4631      	mov	r1, r6
 8003124:	f7fd f8b2 	bl	800028c <__adddf3>
 8003128:	4603      	mov	r3, r0
 800312a:	460c      	mov	r4, r1
 800312c:	461d      	mov	r5, r3
 800312e:	4626      	mov	r6, r4
		+ a4*sin(pnt->Theta1 + pnt->Theta2 - pnt->Theta4);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 800313c:	461a      	mov	r2, r3
 800313e:	4623      	mov	r3, r4
 8003140:	f7fd f8a4 	bl	800028c <__adddf3>
 8003144:	4603      	mov	r3, r0
 8003146:	460c      	mov	r4, r1
 8003148:	4618      	mov	r0, r3
 800314a:	4621      	mov	r1, r4
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 8003152:	461a      	mov	r2, r3
 8003154:	4623      	mov	r3, r4
 8003156:	f7fd f897 	bl	8000288 <__aeabi_dsub>
 800315a:	4603      	mov	r3, r0
 800315c:	460c      	mov	r4, r1
 800315e:	ec44 3b17 	vmov	d7, r3, r4
 8003162:	eeb0 0a47 	vmov.f32	s0, s14
 8003166:	eef0 0a67 	vmov.f32	s1, s15
 800316a:	f016 fa65 	bl	8019638 <sin>
 800316e:	ec51 0b10 	vmov	r0, r1, d0
 8003172:	a32d      	add	r3, pc, #180	; (adr r3, 8003228 <kinematicForward+0x250>)
 8003174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003178:	f7fd fa3e 	bl	80005f8 <__aeabi_dmul>
 800317c:	4603      	mov	r3, r0
 800317e:	460c      	mov	r4, r1
	y =   a1*sin(pnt->Theta1)
 8003180:	461a      	mov	r2, r3
 8003182:	4623      	mov	r3, r4
 8003184:	4628      	mov	r0, r5
 8003186:	4631      	mov	r1, r6
 8003188:	f7fd f880 	bl	800028c <__adddf3>
 800318c:	4603      	mov	r3, r0
 800318e:	460c      	mov	r4, r1
 8003190:	e9c7 3406 	strd	r3, r4, [r7, #24]
	z =   d1 - pnt->D3 - d4;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 800319a:	461a      	mov	r2, r3
 800319c:	4623      	mov	r3, r4
 800319e:	a126      	add	r1, pc, #152	; (adr r1, 8003238 <kinematicForward+0x260>)
 80031a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80031a4:	f7fd f870 	bl	8000288 <__aeabi_dsub>
 80031a8:	4603      	mov	r3, r0
 80031aa:	460c      	mov	r4, r1
 80031ac:	4618      	mov	r0, r3
 80031ae:	4621      	mov	r1, r4
 80031b0:	a323      	add	r3, pc, #140	; (adr r3, 8003240 <kinematicForward+0x268>)
 80031b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b6:	f7fd f867 	bl	8000288 <__aeabi_dsub>
 80031ba:	4603      	mov	r3, r0
 80031bc:	460c      	mov	r4, r1
 80031be:	e9c7 3404 	strd	r3, r4, [r7, #16]
	roll = pnt->Theta1 + pnt->Theta2 - pnt->Theta4;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 80031ce:	461a      	mov	r2, r3
 80031d0:	4623      	mov	r3, r4
 80031d2:	f7fd f85b 	bl	800028c <__adddf3>
 80031d6:	4603      	mov	r3, r0
 80031d8:	460c      	mov	r4, r1
 80031da:	4618      	mov	r0, r3
 80031dc:	4621      	mov	r1, r4
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 80031e4:	461a      	mov	r2, r3
 80031e6:	4623      	mov	r3, r4
 80031e8:	f7fd f84e 	bl	8000288 <__aeabi_dsub>
 80031ec:	4603      	mov	r3, r0
 80031ee:	460c      	mov	r4, r1
 80031f0:	e9c7 3402 	strd	r3, r4, [r7, #8]

	pnt->x = x;
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80031fa:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	pnt->y = y;
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003204:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	pnt->z = z;
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800320e:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	pnt->roll = roll;
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003218:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

	return TRUE;
 800321c:	2301      	movs	r3, #1
}
 800321e:	4618      	mov	r0, r3
 8003220:	372c      	adds	r7, #44	; 0x2c
 8003222:	46bd      	mov	sp, r7
 8003224:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003226:	bf00      	nop
 8003228:	80000000 	.word	0x80000000
 800322c:	40402e14 	.word	0x40402e14
 8003230:	00000000 	.word	0x00000000
 8003234:	4068a000 	.word	0x4068a000
 8003238:	00000000 	.word	0x00000000
 800323c:	406a6000 	.word	0x406a6000
 8003240:	e0000000 	.word	0xe0000000
 8003244:	40536b22 	.word	0x40536b22
 8003248:	40640000 	.word	0x40640000
 800324c:	00000000 	.word	0x00000000

08003250 <kinematicInverse>:

uint8_t		kinematicInverse(SCARA_PositionTypeDef *pnt, SCARA_PositionTypeDef current) {
 8003250:	b082      	sub	sp, #8
 8003252:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003256:	b0a0      	sub	sp, #128	; 0x80
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8003260:	e881 000c 	stmia.w	r1, {r2, r3}
	double theta1, theta2, theta2_positive, theta2_negative, d3, theta4 , pWx, pWy;
	double s1, c1, s2, s2_positive, s2_negative, c2 , temp;

	d3  = d1 - d4 - pnt->z;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800326a:	a1f2      	add	r1, pc, #968	; (adr r1, 8003634 <kinematicInverse+0x3e4>)
 800326c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003270:	f7fd f80a 	bl	8000288 <__aeabi_dsub>
 8003274:	4602      	mov	r2, r0
 8003276:	460b      	mov	r3, r1
 8003278:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	pWx = pnt->x - a4*cos(pnt->roll);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	e9d3 ab12 	ldrd	sl, fp, [r3, #72]	; 0x48
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8003288:	eeb0 0a47 	vmov.f32	s0, s14
 800328c:	eef0 0a67 	vmov.f32	s1, s15
 8003290:	f016 f942 	bl	8019518 <cos>
 8003294:	ec51 0b10 	vmov	r0, r1, d0
 8003298:	a3e8      	add	r3, pc, #928	; (adr r3, 800363c <kinematicInverse+0x3ec>)
 800329a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800329e:	f7fd f9ab 	bl	80005f8 <__aeabi_dmul>
 80032a2:	4602      	mov	r2, r0
 80032a4:	460b      	mov	r3, r1
 80032a6:	4650      	mov	r0, sl
 80032a8:	4659      	mov	r1, fp
 80032aa:	f7fc ffed 	bl	8000288 <__aeabi_dsub>
 80032ae:	4602      	mov	r2, r0
 80032b0:	460b      	mov	r3, r1
 80032b2:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	pWy = pnt->y - a4*sin(pnt->roll);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	e9d3 ab14 	ldrd	sl, fp, [r3, #80]	; 0x50
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 80032c2:	eeb0 0a47 	vmov.f32	s0, s14
 80032c6:	eef0 0a67 	vmov.f32	s1, s15
 80032ca:	f016 f9b5 	bl	8019638 <sin>
 80032ce:	ec51 0b10 	vmov	r0, r1, d0
 80032d2:	a3da      	add	r3, pc, #872	; (adr r3, 800363c <kinematicInverse+0x3ec>)
 80032d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d8:	f7fd f98e 	bl	80005f8 <__aeabi_dmul>
 80032dc:	4602      	mov	r2, r0
 80032de:	460b      	mov	r3, r1
 80032e0:	4650      	mov	r0, sl
 80032e2:	4659      	mov	r1, fp
 80032e4:	f7fc ffd0 	bl	8000288 <__aeabi_dsub>
 80032e8:	4602      	mov	r2, r0
 80032ea:	460b      	mov	r3, r1
 80032ec:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	c2  = (pWx*pWx + pWy*pWy - a1*a1 - a2*a2) / (2*a1*a2);
 80032f0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80032f4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80032f8:	f7fd f97e 	bl	80005f8 <__aeabi_dmul>
 80032fc:	4602      	mov	r2, r0
 80032fe:	460b      	mov	r3, r1
 8003300:	4692      	mov	sl, r2
 8003302:	469b      	mov	fp, r3
 8003304:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003308:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800330c:	f7fd f974 	bl	80005f8 <__aeabi_dmul>
 8003310:	4602      	mov	r2, r0
 8003312:	460b      	mov	r3, r1
 8003314:	4650      	mov	r0, sl
 8003316:	4659      	mov	r1, fp
 8003318:	f7fc ffb8 	bl	800028c <__adddf3>
 800331c:	4602      	mov	r2, r0
 800331e:	460b      	mov	r3, r1
 8003320:	4610      	mov	r0, r2
 8003322:	4619      	mov	r1, r3
 8003324:	a3c7      	add	r3, pc, #796	; (adr r3, 8003644 <kinematicInverse+0x3f4>)
 8003326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800332a:	f7fc ffad 	bl	8000288 <__aeabi_dsub>
 800332e:	4602      	mov	r2, r0
 8003330:	460b      	mov	r3, r1
 8003332:	4610      	mov	r0, r2
 8003334:	4619      	mov	r1, r3
 8003336:	f04f 0200 	mov.w	r2, #0
 800333a:	4bbb      	ldr	r3, [pc, #748]	; (8003628 <kinematicInverse+0x3d8>)
 800333c:	f7fc ffa4 	bl	8000288 <__aeabi_dsub>
 8003340:	4602      	mov	r2, r0
 8003342:	460b      	mov	r3, r1
 8003344:	4610      	mov	r0, r2
 8003346:	4619      	mov	r1, r3
 8003348:	a3b3      	add	r3, pc, #716	; (adr r3, 8003618 <kinematicInverse+0x3c8>)
 800334a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800334e:	f7fd fa7d 	bl	800084c <__aeabi_ddiv>
 8003352:	4602      	mov	r2, r0
 8003354:	460b      	mov	r3, r1
 8003356:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp = 1 - c2*c2;
 800335a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800335e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003362:	f7fd f949 	bl	80005f8 <__aeabi_dmul>
 8003366:	4602      	mov	r2, r0
 8003368:	460b      	mov	r3, r1
 800336a:	f04f 0000 	mov.w	r0, #0
 800336e:	49af      	ldr	r1, [pc, #700]	; (800362c <kinematicInverse+0x3dc>)
 8003370:	f7fc ff8a 	bl	8000288 <__aeabi_dsub>
 8003374:	4602      	mov	r2, r0
 8003376:	460b      	mov	r3, r1
 8003378:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	if ( temp < 0 ) {
 800337c:	f04f 0200 	mov.w	r2, #0
 8003380:	f04f 0300 	mov.w	r3, #0
 8003384:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003388:	f7fd fba8 	bl	8000adc <__aeabi_dcmplt>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <kinematicInverse+0x146>
		return FALSE;
 8003392:	2300      	movs	r3, #0
 8003394:	e136      	b.n	8003604 <kinematicInverse+0x3b4>
	}
	s2_positive  = sqrt(temp); // Note that there are 2 solution: elbow up & elbow down
 8003396:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 800339a:	f016 f9d7 	bl	801974c <sqrt>
 800339e:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
	s2_negative	 = -s2_positive;
 80033a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80033a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80033ac:	63fb      	str	r3, [r7, #60]	; 0x3c

	theta2_positive = atan2(s2_positive,c2);
 80033ae:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 80033b2:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 80033b6:	f016 f9c7 	bl	8019748 <atan2>
 80033ba:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
	theta2_negative = atan2(s2_negative,c2);
 80033be:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 80033c2:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80033c6:	f016 f9bf 	bl	8019748 <atan2>
 80033ca:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	// Choose relevant situation : nearest
	if ( fabs( theta2_positive - current.Theta2) <= fabs( theta2_negative - current.Theta2)) {
 80033ce:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80033d2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80033d6:	f7fc ff57 	bl	8000288 <__aeabi_dsub>
 80033da:	4602      	mov	r2, r0
 80033dc:	460b      	mov	r3, r1
 80033de:	4614      	mov	r4, r2
 80033e0:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80033e4:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80033e8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80033ec:	f7fc ff4c 	bl	8000288 <__aeabi_dsub>
 80033f0:	4602      	mov	r2, r0
 80033f2:	460b      	mov	r3, r1
 80033f4:	4690      	mov	r8, r2
 80033f6:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80033fa:	4642      	mov	r2, r8
 80033fc:	464b      	mov	r3, r9
 80033fe:	4620      	mov	r0, r4
 8003400:	4629      	mov	r1, r5
 8003402:	f7fd fb75 	bl	8000af0 <__aeabi_dcmple>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d008      	beq.n	800341e <kinematicInverse+0x1ce>
		s2 		= s2_positive;
 800340c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003410:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		theta2 	= theta2_positive;
 8003414:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003418:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 800341c:	e007      	b.n	800342e <kinematicInverse+0x1de>
	} else {
		s2 		= s2_negative;
 800341e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8003422:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
		theta2 	= theta2_negative;
 8003426:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800342a:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	}

	s1 = ((a1 + a2*c2)*pWy - a2*s2*pWx) / (pWx*pWx + pWy*pWy);
 800342e:	f04f 0200 	mov.w	r2, #0
 8003432:	4b7f      	ldr	r3, [pc, #508]	; (8003630 <kinematicInverse+0x3e0>)
 8003434:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003438:	f7fd f8de 	bl	80005f8 <__aeabi_dmul>
 800343c:	4603      	mov	r3, r0
 800343e:	460c      	mov	r4, r1
 8003440:	4618      	mov	r0, r3
 8003442:	4621      	mov	r1, r4
 8003444:	a376      	add	r3, pc, #472	; (adr r3, 8003620 <kinematicInverse+0x3d0>)
 8003446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344a:	f7fc ff1f 	bl	800028c <__adddf3>
 800344e:	4603      	mov	r3, r0
 8003450:	460c      	mov	r4, r1
 8003452:	4618      	mov	r0, r3
 8003454:	4621      	mov	r1, r4
 8003456:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800345a:	f7fd f8cd 	bl	80005f8 <__aeabi_dmul>
 800345e:	4603      	mov	r3, r0
 8003460:	460c      	mov	r4, r1
 8003462:	4625      	mov	r5, r4
 8003464:	461c      	mov	r4, r3
 8003466:	f04f 0200 	mov.w	r2, #0
 800346a:	4b71      	ldr	r3, [pc, #452]	; (8003630 <kinematicInverse+0x3e0>)
 800346c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003470:	f7fd f8c2 	bl	80005f8 <__aeabi_dmul>
 8003474:	4602      	mov	r2, r0
 8003476:	460b      	mov	r3, r1
 8003478:	4610      	mov	r0, r2
 800347a:	4619      	mov	r1, r3
 800347c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003480:	f7fd f8ba 	bl	80005f8 <__aeabi_dmul>
 8003484:	4602      	mov	r2, r0
 8003486:	460b      	mov	r3, r1
 8003488:	4620      	mov	r0, r4
 800348a:	4629      	mov	r1, r5
 800348c:	f7fc fefc 	bl	8000288 <__aeabi_dsub>
 8003490:	4603      	mov	r3, r0
 8003492:	460c      	mov	r4, r1
 8003494:	4625      	mov	r5, r4
 8003496:	461c      	mov	r4, r3
 8003498:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800349c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80034a0:	f7fd f8aa 	bl	80005f8 <__aeabi_dmul>
 80034a4:	4602      	mov	r2, r0
 80034a6:	460b      	mov	r3, r1
 80034a8:	4690      	mov	r8, r2
 80034aa:	4699      	mov	r9, r3
 80034ac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80034b0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80034b4:	f7fd f8a0 	bl	80005f8 <__aeabi_dmul>
 80034b8:	4602      	mov	r2, r0
 80034ba:	460b      	mov	r3, r1
 80034bc:	4640      	mov	r0, r8
 80034be:	4649      	mov	r1, r9
 80034c0:	f7fc fee4 	bl	800028c <__adddf3>
 80034c4:	4602      	mov	r2, r0
 80034c6:	460b      	mov	r3, r1
 80034c8:	4620      	mov	r0, r4
 80034ca:	4629      	mov	r1, r5
 80034cc:	f7fd f9be 	bl	800084c <__aeabi_ddiv>
 80034d0:	4603      	mov	r3, r0
 80034d2:	460c      	mov	r4, r1
 80034d4:	e9c7 3408 	strd	r3, r4, [r7, #32]
	c1 = ((a1 + a2*c2)*pWx + a2*s2*pWy) / (pWx*pWx + pWy*pWy);
 80034d8:	f04f 0200 	mov.w	r2, #0
 80034dc:	4b54      	ldr	r3, [pc, #336]	; (8003630 <kinematicInverse+0x3e0>)
 80034de:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80034e2:	f7fd f889 	bl	80005f8 <__aeabi_dmul>
 80034e6:	4603      	mov	r3, r0
 80034e8:	460c      	mov	r4, r1
 80034ea:	4618      	mov	r0, r3
 80034ec:	4621      	mov	r1, r4
 80034ee:	a34c      	add	r3, pc, #304	; (adr r3, 8003620 <kinematicInverse+0x3d0>)
 80034f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f4:	f7fc feca 	bl	800028c <__adddf3>
 80034f8:	4603      	mov	r3, r0
 80034fa:	460c      	mov	r4, r1
 80034fc:	4618      	mov	r0, r3
 80034fe:	4621      	mov	r1, r4
 8003500:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003504:	f7fd f878 	bl	80005f8 <__aeabi_dmul>
 8003508:	4603      	mov	r3, r0
 800350a:	460c      	mov	r4, r1
 800350c:	4625      	mov	r5, r4
 800350e:	461c      	mov	r4, r3
 8003510:	f04f 0200 	mov.w	r2, #0
 8003514:	4b46      	ldr	r3, [pc, #280]	; (8003630 <kinematicInverse+0x3e0>)
 8003516:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800351a:	f7fd f86d 	bl	80005f8 <__aeabi_dmul>
 800351e:	4602      	mov	r2, r0
 8003520:	460b      	mov	r3, r1
 8003522:	4610      	mov	r0, r2
 8003524:	4619      	mov	r1, r3
 8003526:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800352a:	f7fd f865 	bl	80005f8 <__aeabi_dmul>
 800352e:	4602      	mov	r2, r0
 8003530:	460b      	mov	r3, r1
 8003532:	4620      	mov	r0, r4
 8003534:	4629      	mov	r1, r5
 8003536:	f7fc fea9 	bl	800028c <__adddf3>
 800353a:	4603      	mov	r3, r0
 800353c:	460c      	mov	r4, r1
 800353e:	4625      	mov	r5, r4
 8003540:	461c      	mov	r4, r3
 8003542:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003546:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800354a:	f7fd f855 	bl	80005f8 <__aeabi_dmul>
 800354e:	4602      	mov	r2, r0
 8003550:	460b      	mov	r3, r1
 8003552:	4690      	mov	r8, r2
 8003554:	4699      	mov	r9, r3
 8003556:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800355a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800355e:	f7fd f84b 	bl	80005f8 <__aeabi_dmul>
 8003562:	4602      	mov	r2, r0
 8003564:	460b      	mov	r3, r1
 8003566:	4640      	mov	r0, r8
 8003568:	4649      	mov	r1, r9
 800356a:	f7fc fe8f 	bl	800028c <__adddf3>
 800356e:	4602      	mov	r2, r0
 8003570:	460b      	mov	r3, r1
 8003572:	4620      	mov	r0, r4
 8003574:	4629      	mov	r1, r5
 8003576:	f7fd f969 	bl	800084c <__aeabi_ddiv>
 800357a:	4603      	mov	r3, r0
 800357c:	460c      	mov	r4, r1
 800357e:	e9c7 3406 	strd	r3, r4, [r7, #24]
	theta1 = atan2(s1,c1);
 8003582:	ed97 1b06 	vldr	d1, [r7, #24]
 8003586:	ed97 0b08 	vldr	d0, [r7, #32]
 800358a:	f016 f8dd 	bl	8019748 <atan2>
 800358e:	ed87 0b04 	vstr	d0, [r7, #16]
 	theta4 = theta1 + theta2 - pnt->roll;
 8003592:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003596:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800359a:	f7fc fe77 	bl	800028c <__adddf3>
 800359e:	4603      	mov	r3, r0
 80035a0:	460c      	mov	r4, r1
 80035a2:	4618      	mov	r0, r3
 80035a4:	4621      	mov	r1, r4
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 80035ac:	461a      	mov	r2, r3
 80035ae:	4623      	mov	r3, r4
 80035b0:	f7fc fe6a 	bl	8000288 <__aeabi_dsub>
 80035b4:	4603      	mov	r3, r0
 80035b6:	460c      	mov	r4, r1
 80035b8:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if ( SCARA_STATUS_OK != scaraCheckWorkSpace4(theta1, theta2, d3, theta4)) {
 80035bc:	ed97 3b02 	vldr	d3, [r7, #8]
 80035c0:	ed97 2b1a 	vldr	d2, [r7, #104]	; 0x68
 80035c4:	ed97 1b1e 	vldr	d1, [r7, #120]	; 0x78
 80035c8:	ed97 0b04 	vldr	d0, [r7, #16]
 80035cc:	f005 fad8 	bl	8008b80 <scaraCheckWorkSpace4>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <kinematicInverse+0x38a>
		return FALSE; // Over workspace !!!
 80035d6:	2300      	movs	r3, #0
 80035d8:	e014      	b.n	8003604 <kinematicInverse+0x3b4>
	}
	pnt->Theta1 = theta1;
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80035e0:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	pnt->Theta2 = theta2;
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80035ea:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	pnt->D3		= d3;
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80035f4:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	pnt->Theta4 = theta4;
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80035fe:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

	return TRUE; // All is well
 8003602:	2301      	movs	r3, #1
}
 8003604:	4618      	mov	r0, r3
 8003606:	3780      	adds	r7, #128	; 0x80
 8003608:	46bd      	mov	sp, r7
 800360a:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800360e:	b002      	add	sp, #8
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	f3af 8000 	nop.w
 8003618:	00000000 	.word	0x00000000
 800361c:	40eec800 	.word	0x40eec800
 8003620:	00000000 	.word	0x00000000
 8003624:	4068a000 	.word	0x4068a000
 8003628:	40d90000 	.word	0x40d90000
 800362c:	3ff00000 	.word	0x3ff00000
 8003630:	40640000 	.word	0x40640000
 8003634:	80000000 	.word	0x80000000
 8003638:	4060aa6e 	.word	0x4060aa6e
 800363c:	80000000 	.word	0x80000000
 8003640:	40402e14 	.word	0x40402e14
 8003644:	00000000 	.word	0x00000000
 8003648:	40e2f320 	.word	0x40e2f320

0800364c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003650:	f007 fcbc 	bl	800afcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003654:	f000 f810 	bl	8003678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003658:	f7ff fc06 	bl	8002e68 <MX_GPIO_Init>
  MX_DMA_Init();
 800365c:	f7fe fc38 	bl	8001ed0 <MX_DMA_Init>
  MX_UART4_Init();
 8003660:	f007 fbb6 	bl	800add0 <MX_UART4_Init>
  MX_FSMC_Init();
 8003664:	f7ff fb38 	bl	8002cd8 <MX_FSMC_Init>
  MX_TIM7_Init();
 8003668:	f007 fb54 	bl	800ad14 <MX_TIM7_Init>
  //lowlayer_writePulse(0, 0, 0, 0);
  //HAL_Delay(10);
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800366c:	f7fe fc6a 	bl	8001f44 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003670:	f00e fa7a 	bl	8011b68 <osKernelStart>
//  		  HAL_Delay(10);
//  	  }
//  lowlayer_writePulse(0, 0, 0, 0);
//  __NOP();

  while (1)
 8003674:	e7fe      	b.n	8003674 <main+0x28>
	...

08003678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b094      	sub	sp, #80	; 0x50
 800367c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800367e:	f107 0320 	add.w	r3, r7, #32
 8003682:	2230      	movs	r2, #48	; 0x30
 8003684:	2100      	movs	r1, #0
 8003686:	4618      	mov	r0, r3
 8003688:	f012 f97e 	bl	8015988 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800368c:	f107 030c 	add.w	r3, r7, #12
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]
 8003694:	605a      	str	r2, [r3, #4]
 8003696:	609a      	str	r2, [r3, #8]
 8003698:	60da      	str	r2, [r3, #12]
 800369a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800369c:	2300      	movs	r3, #0
 800369e:	60bb      	str	r3, [r7, #8]
 80036a0:	4b28      	ldr	r3, [pc, #160]	; (8003744 <SystemClock_Config+0xcc>)
 80036a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a4:	4a27      	ldr	r2, [pc, #156]	; (8003744 <SystemClock_Config+0xcc>)
 80036a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036aa:	6413      	str	r3, [r2, #64]	; 0x40
 80036ac:	4b25      	ldr	r3, [pc, #148]	; (8003744 <SystemClock_Config+0xcc>)
 80036ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036b4:	60bb      	str	r3, [r7, #8]
 80036b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80036b8:	2300      	movs	r3, #0
 80036ba:	607b      	str	r3, [r7, #4]
 80036bc:	4b22      	ldr	r3, [pc, #136]	; (8003748 <SystemClock_Config+0xd0>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a21      	ldr	r2, [pc, #132]	; (8003748 <SystemClock_Config+0xd0>)
 80036c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036c6:	6013      	str	r3, [r2, #0]
 80036c8:	4b1f      	ldr	r3, [pc, #124]	; (8003748 <SystemClock_Config+0xd0>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036d0:	607b      	str	r3, [r7, #4]
 80036d2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80036d4:	2301      	movs	r3, #1
 80036d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80036d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80036de:	2302      	movs	r3, #2
 80036e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80036e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80036e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80036e8:	2308      	movs	r3, #8
 80036ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80036ec:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80036f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80036f2:	2302      	movs	r3, #2
 80036f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80036f6:	2307      	movs	r3, #7
 80036f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036fa:	f107 0320 	add.w	r3, r7, #32
 80036fe:	4618      	mov	r0, r3
 8003700:	f009 fcdc 	bl	800d0bc <HAL_RCC_OscConfig>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800370a:	f000 f831 	bl	8003770 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800370e:	230f      	movs	r3, #15
 8003710:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003712:	2302      	movs	r3, #2
 8003714:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003716:	2300      	movs	r3, #0
 8003718:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800371a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800371e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003720:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003724:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003726:	f107 030c 	add.w	r3, r7, #12
 800372a:	2105      	movs	r1, #5
 800372c:	4618      	mov	r0, r3
 800372e:	f009 ff35 	bl	800d59c <HAL_RCC_ClockConfig>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003738:	f000 f81a 	bl	8003770 <Error_Handler>
  }
}
 800373c:	bf00      	nop
 800373e:	3750      	adds	r7, #80	; 0x50
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	40023800 	.word	0x40023800
 8003748:	40007000 	.word	0x40007000

0800374c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a04      	ldr	r2, [pc, #16]	; (800376c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d101      	bne.n	8003762 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800375e:	f007 fc57 	bl	800b010 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003762:	bf00      	nop
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	40001000 	.word	0x40001000

08003770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003774:	bf00      	nop
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr

0800377e <ringBuff_PushChar>:
 *  data		: data to write
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PushChar(RINGBUFFER_TypeDef *ringbuff, uint8_t data) {
 800377e:	b480      	push	{r7}
 8003780:	b083      	sub	sp, #12
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
 8003786:	460b      	mov	r3, r1
 8003788:	70fb      	strb	r3, [r7, #3]
	if (ringbuff->isFull_Flag) {
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 8003790:	2b00      	cmp	r3, #0
 8003792:	d001      	beq.n	8003798 <ringBuff_PushChar+0x1a>
		return FALSE;
 8003794:	2300      	movs	r3, #0
 8003796:	e024      	b.n	80037e2 <ringBuff_PushChar+0x64>
	} else {
			ringbuff->Array[ringbuff->head]	= data;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	78f9      	ldrb	r1, [r7, #3]
 80037a2:	54d1      	strb	r1, [r2, r3]
			ringbuff->head					= (ringbuff->head + 1) % RINGBUFFER_SIZE;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80037aa:	3301      	adds	r3, #1
 80037ac:	425a      	negs	r2, r3
 80037ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037b2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80037b6:	bf58      	it	pl
 80037b8:	4253      	negpl	r3, r2
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
			if (ringbuff->head == ringbuff->tail) {
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d103      	bne.n	80037d8 <ringBuff_PushChar+0x5a>
				ringbuff->isFull_Flag = TRUE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			}
			ringbuff->isEmpty_Flag = FALSE;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
			return TRUE;
 80037e0:	2301      	movs	r3, #1
	}
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr

080037ee <ringBuff_PopChar>:
 *  *ptr_data	: pointer of destination
 *
 *  returns:	: TRUE if success
 *  			  FALSE if fail
 */
uint8_t	ringBuff_PopChar(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data) {
 80037ee:	b480      	push	{r7}
 80037f0:	b083      	sub	sp, #12
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
 80037f6:	6039      	str	r1, [r7, #0]
	if (ringbuff->isEmpty_Flag) {
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f893 3409 	ldrb.w	r3, [r3, #1033]	; 0x409
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <ringBuff_PopChar+0x18>
		return FALSE;
 8003802:	2300      	movs	r3, #0
 8003804:	e025      	b.n	8003852 <ringBuff_PopChar+0x64>
	} else {
			*ptr_data		= ringbuff->Array[ringbuff->tail];
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	5cd2      	ldrb	r2, [r2, r3]
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	701a      	strb	r2, [r3, #0]
			ringbuff->tail	= (ringbuff->tail +1) % RINGBUFFER_SIZE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800381a:	3301      	adds	r3, #1
 800381c:	425a      	negs	r2, r3
 800381e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003822:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003826:	bf58      	it	pl
 8003828:	4253      	negpl	r3, r2
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			if (ringbuff->head == ringbuff->tail) {
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800383c:	429a      	cmp	r2, r3
 800383e:	d103      	bne.n	8003848 <ringBuff_PopChar+0x5a>
				ringbuff->isEmpty_Flag = TRUE;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
			}
			ringbuff->isFull_Flag = FALSE;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			return TRUE;
 8003850:	2301      	movs	r3, #1
	}
}
 8003852:	4618      	mov	r0, r3
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr

0800385e <ringBuff_PushArray>:
 *  *ptr_data	: pointer of source
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PushArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 800385e:	b580      	push	{r7, lr}
 8003860:	b086      	sub	sp, #24
 8003862:	af00      	add	r7, sp, #0
 8003864:	60f8      	str	r0, [r7, #12]
 8003866:	60b9      	str	r1, [r7, #8]
 8003868:	607a      	str	r2, [r7, #4]
	int16_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 800386a:	2300      	movs	r3, #0
 800386c:	82fb      	strh	r3, [r7, #22]
 800386e:	e011      	b.n	8003894 <ringBuff_PushArray+0x36>
		if ( !ringBuff_PushChar(ringbuff, *(ptr_data + success_number))) {
 8003870:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003874:	68ba      	ldr	r2, [r7, #8]
 8003876:	4413      	add	r3, r2
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	4619      	mov	r1, r3
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f7ff ff7e 	bl	800377e <ringBuff_PushChar>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00b      	beq.n	80038a0 <ringBuff_PushArray+0x42>
	for (success_number = 0; success_number < len; success_number++) {
 8003888:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800388c:	b29b      	uxth	r3, r3
 800388e:	3301      	adds	r3, #1
 8003890:	b29b      	uxth	r3, r3
 8003892:	82fb      	strh	r3, [r7, #22]
 8003894:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	429a      	cmp	r2, r3
 800389c:	dce8      	bgt.n	8003870 <ringBuff_PushArray+0x12>
 800389e:	e000      	b.n	80038a2 <ringBuff_PushArray+0x44>
			break;
 80038a0:	bf00      	nop
		}// stop when ring buffer FULL
	}
	return success_number;
 80038a2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3718      	adds	r7, #24
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <ringBuff_PopArray>:
 *  *ptr_data	: pointer of destination
 *  len			: maximum number of bytes that want to copy
 *
 *  returns:	: number of bytes copied
 */
int32_t ringBuff_PopArray(RINGBUFFER_TypeDef *ringbuff, uint8_t *ptr_data, int32_t len) {
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b086      	sub	sp, #24
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	60f8      	str	r0, [r7, #12]
 80038b6:	60b9      	str	r1, [r7, #8]
 80038b8:	607a      	str	r2, [r7, #4]
	int32_t success_number;

	for (success_number = 0; success_number < len; success_number++) {
 80038ba:	2300      	movs	r3, #0
 80038bc:	617b      	str	r3, [r7, #20]
 80038be:	e00c      	b.n	80038da <ringBuff_PopArray+0x2c>
		if ( !ringBuff_PopChar(ringbuff, (ptr_data + success_number))) {
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	68ba      	ldr	r2, [r7, #8]
 80038c4:	4413      	add	r3, r2
 80038c6:	4619      	mov	r1, r3
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f7ff ff90 	bl	80037ee <ringBuff_PopChar>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d007      	beq.n	80038e4 <ringBuff_PopArray+0x36>
	for (success_number = 0; success_number < len; success_number++) {
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	3301      	adds	r3, #1
 80038d8:	617b      	str	r3, [r7, #20]
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	429a      	cmp	r2, r3
 80038e0:	dbee      	blt.n	80038c0 <ringBuff_PopArray+0x12>
 80038e2:	e000      	b.n	80038e6 <ringBuff_PopArray+0x38>
			break;
 80038e4:	bf00      	nop
		}// stop when ring buffer EMPTY
	}
	return success_number;
 80038e6:	697b      	ldr	r3, [r7, #20]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3718      	adds	r7, #24
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <ringBuff_DistanceOf>:
 *  cmp_char	: compare character
 *
 *  returns:	: distance from 'tail' to 'cmp_char'
 *  			  -1 'cmp_char' could not be found.
 */
int32_t	ringBuff_DistanceOf	(RINGBUFFER_TypeDef *ringbuff, uint8_t cmp_char) {
 80038f0:	b480      	push	{r7}
 80038f2:	b087      	sub	sp, #28
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	460b      	mov	r3, r1
 80038fa:	70fb      	strb	r3, [r7, #3]
	int32_t index;
	int32_t distance = 0;
 80038fc:	2300      	movs	r3, #0
 80038fe:	613b      	str	r3, [r7, #16]

	index = ringbuff->tail;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003906:	617b      	str	r3, [r7, #20]
	if (ringbuff->isFull_Flag) {
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f893 3408 	ldrb.w	r3, [r3, #1032]	; 0x408
 800390e:	2b00      	cmp	r3, #0
 8003910:	d036      	beq.n	8003980 <ringBuff_DistanceOf+0x90>
		for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 8003912:	2300      	movs	r3, #0
 8003914:	60fb      	str	r3, [r7, #12]
 8003916:	e018      	b.n	800394a <ringBuff_DistanceOf+0x5a>
				if ( cmp_char == ringbuff->Array[index]) {
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	4413      	add	r3, r2
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	78fa      	ldrb	r2, [r7, #3]
 8003922:	429a      	cmp	r2, r3
 8003924:	d101      	bne.n	800392a <ringBuff_DistanceOf+0x3a>
					return distance;
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	e037      	b.n	800399a <ringBuff_DistanceOf+0xaa>
				}
				distance++;
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	3301      	adds	r3, #1
 800392e:	613b      	str	r3, [r7, #16]
		for ( int32_t i = 0; i < RINGBUFFER_SIZE; i++, index = (index + 1) % RINGBUFFER_SIZE) {
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	3301      	adds	r3, #1
 8003934:	60fb      	str	r3, [r7, #12]
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	3301      	adds	r3, #1
 800393a:	425a      	negs	r2, r3
 800393c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003940:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003944:	bf58      	it	pl
 8003946:	4253      	negpl	r3, r2
 8003948:	617b      	str	r3, [r7, #20]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003950:	dbe2      	blt.n	8003918 <ringBuff_DistanceOf+0x28>
 8003952:	e020      	b.n	8003996 <ringBuff_DistanceOf+0xa6>
			}

	} else {
		for ( ; (index != ringbuff->head) || !ringbuff->isEmpty_Flag; index = (index + 1) % RINGBUFFER_SIZE) {
				if ( cmp_char == ringbuff->Array[index]) {
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	4413      	add	r3, r2
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	78fa      	ldrb	r2, [r7, #3]
 800395e:	429a      	cmp	r2, r3
 8003960:	d101      	bne.n	8003966 <ringBuff_DistanceOf+0x76>
					return distance;
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	e019      	b.n	800399a <ringBuff_DistanceOf+0xaa>
				}
				distance++;
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	3301      	adds	r3, #1
 800396a:	613b      	str	r3, [r7, #16]
		for ( ; (index != ringbuff->head) || !ringbuff->isEmpty_Flag; index = (index + 1) % RINGBUFFER_SIZE) {
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	3301      	adds	r3, #1
 8003970:	425a      	negs	r2, r3
 8003972:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003976:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800397a:	bf58      	it	pl
 800397c:	4253      	negpl	r3, r2
 800397e:	617b      	str	r3, [r7, #20]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	429a      	cmp	r2, r3
 800398a:	d1e3      	bne.n	8003954 <ringBuff_DistanceOf+0x64>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f893 3409 	ldrb.w	r3, [r3, #1033]	; 0x409
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0de      	beq.n	8003954 <ringBuff_DistanceOf+0x64>
			}
	}
	return -1;
 8003996:	f04f 33ff 	mov.w	r3, #4294967295
}
 800399a:	4618      	mov	r0, r3
 800399c:	371c      	adds	r7, #28
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
	...

080039a8 <lowlayer_scanReset>:
uint8_t state_scan;
uint8_t scan_flag;

const int8_t	pulse_scan[4] = {3, 5, 5, 10};

void	lowlayer_scanReset(void) {
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
	pulse_accumulate[0] = 0;
 80039ac:	4b10      	ldr	r3, [pc, #64]	; (80039f0 <lowlayer_scanReset+0x48>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	601a      	str	r2, [r3, #0]
	pulse_accumulate[1] = 0;
 80039b2:	4b0f      	ldr	r3, [pc, #60]	; (80039f0 <lowlayer_scanReset+0x48>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	605a      	str	r2, [r3, #4]
	pulse_accumulate[2] = 0;
 80039b8:	4b0d      	ldr	r3, [pc, #52]	; (80039f0 <lowlayer_scanReset+0x48>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	609a      	str	r2, [r3, #8]
	pulse_accumulate[3] = 0;
 80039be:	4b0c      	ldr	r3, [pc, #48]	; (80039f0 <lowlayer_scanReset+0x48>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	60da      	str	r2, [r3, #12]

	position_encoder[0] = 0;
 80039c4:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <lowlayer_scanReset+0x4c>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	601a      	str	r2, [r3, #0]
	position_encoder[1] = 0;
 80039ca:	4b0a      	ldr	r3, [pc, #40]	; (80039f4 <lowlayer_scanReset+0x4c>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	605a      	str	r2, [r3, #4]
	position_encoder[2] = 0;
 80039d0:	4b08      	ldr	r3, [pc, #32]	; (80039f4 <lowlayer_scanReset+0x4c>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	609a      	str	r2, [r3, #8]

	scan_flag = 0;
 80039d6:	4b08      	ldr	r3, [pc, #32]	; (80039f8 <lowlayer_scanReset+0x50>)
 80039d8:	2200      	movs	r2, #0
 80039da:	701a      	strb	r2, [r3, #0]
	state_scan = 0;
 80039dc:	4b07      	ldr	r3, [pc, #28]	; (80039fc <lowlayer_scanReset+0x54>)
 80039de:	2200      	movs	r2, #0
 80039e0:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_RESET);
 80039e2:	2200      	movs	r2, #0
 80039e4:	2108      	movs	r1, #8
 80039e6:	4806      	ldr	r0, [pc, #24]	; (8003a00 <lowlayer_scanReset+0x58>)
 80039e8:	f008 f96e 	bl	800bcc8 <HAL_GPIO_WritePin>
}
 80039ec:	bf00      	nop
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	20005310 	.word	0x20005310
 80039f4:	20005324 	.word	0x20005324
 80039f8:	20005320 	.word	0x20005320
 80039fc:	20005340 	.word	0x20005340
 8003a00:	40020c00 	.word	0x40020c00
 8003a04:	00000000 	.word	0x00000000

08003a08 <lowlayer_scanFlow>:

uint8_t	lowlayer_scanFlow(void) {
 8003a08:	b590      	push	{r4, r7, lr}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
	// Scan limit switch from 3 to 0
	int8_t pulse[4] = {0, 0, 0 ,0};
 8003a0e:	2300      	movs	r3, #0
 8003a10:	607b      	str	r3, [r7, #4]
	lowlayer_updateLimit();
 8003a12:	f000 fe9d 	bl	8004750 <lowlayer_updateLimit>
	if (state_scan < 4) {
 8003a16:	4b98      	ldr	r3, [pc, #608]	; (8003c78 <lowlayer_scanFlow+0x270>)
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	2b03      	cmp	r3, #3
 8003a1c:	d837      	bhi.n	8003a8e <lowlayer_scanFlow+0x86>
		if (limit_switch[3 - state_scan] == 0) {
 8003a1e:	4b96      	ldr	r3, [pc, #600]	; (8003c78 <lowlayer_scanFlow+0x270>)
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	f1c3 0303 	rsb	r3, r3, #3
 8003a26:	4a95      	ldr	r2, [pc, #596]	; (8003c7c <lowlayer_scanFlow+0x274>)
 8003a28:	5cd3      	ldrb	r3, [r2, r3]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d121      	bne.n	8003a72 <lowlayer_scanFlow+0x6a>
			pulse[3 - state_scan] = pulse_scan[3 - state_scan];
 8003a2e:	4b92      	ldr	r3, [pc, #584]	; (8003c78 <lowlayer_scanFlow+0x270>)
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	f1c3 0203 	rsb	r2, r3, #3
 8003a36:	4b90      	ldr	r3, [pc, #576]	; (8003c78 <lowlayer_scanFlow+0x270>)
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	f1c3 0303 	rsb	r3, r3, #3
 8003a3e:	4990      	ldr	r1, [pc, #576]	; (8003c80 <lowlayer_scanFlow+0x278>)
 8003a40:	568a      	ldrsb	r2, [r1, r2]
 8003a42:	f107 0108 	add.w	r1, r7, #8
 8003a46:	440b      	add	r3, r1
 8003a48:	f803 2c04 	strb.w	r2, [r3, #-4]
			lowlayer_writePulse(-pulse[0], pulse[1], -pulse[2], pulse[3]);
 8003a4c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	425b      	negs	r3, r3
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	b258      	sxtb	r0, r3
 8003a58:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8003a5c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	425b      	negs	r3, r3
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	b25a      	sxtb	r2, r3
 8003a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a6c:	f000 fcee 	bl	800444c <lowlayer_writePulse>
 8003a70:	e00b      	b.n	8003a8a <lowlayer_scanFlow+0x82>
		} else {
			state_scan++;
 8003a72:	4b81      	ldr	r3, [pc, #516]	; (8003c78 <lowlayer_scanFlow+0x270>)
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	3301      	adds	r3, #1
 8003a78:	b2da      	uxtb	r2, r3
 8003a7a:	4b7f      	ldr	r3, [pc, #508]	; (8003c78 <lowlayer_scanFlow+0x270>)
 8003a7c:	701a      	strb	r2, [r3, #0]
			lowlayer_writePulse(0, 0, 0, 0);
 8003a7e:	2300      	movs	r3, #0
 8003a80:	2200      	movs	r2, #0
 8003a82:	2100      	movs	r1, #0
 8003a84:	2000      	movs	r0, #0
 8003a86:	f000 fce1 	bl	800444c <lowlayer_writePulse>
		}

		return FALSE;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	e0d8      	b.n	8003c40 <lowlayer_scanFlow+0x238>
	} else {
		HAL_GPIO_WritePin(CAPTURE_ENABLE_GPIO_Port, CAPTURE_ENABLE_Pin, GPIO_PIN_SET);
 8003a8e:	2201      	movs	r2, #1
 8003a90:	2108      	movs	r1, #8
 8003a92:	487c      	ldr	r0, [pc, #496]	; (8003c84 <lowlayer_scanFlow+0x27c>)
 8003a94:	f008 f918 	bl	800bcc8 <HAL_GPIO_WritePin>
		lowlayer_updateCapture();
 8003a98:	f000 fe3e 	bl	8004718 <lowlayer_updateCapture>
		lowlayer_writePulse(0, 0, 0, 0);
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	2000      	movs	r0, #0
 8003aa4:	f000 fcd2 	bl	800444c <lowlayer_writePulse>
		scan_flag = 1;
 8003aa8:	4b77      	ldr	r3, [pc, #476]	; (8003c88 <lowlayer_scanFlow+0x280>)
 8003aaa:	2201      	movs	r2, #1
 8003aac:	701a      	strb	r2, [r3, #0]
		// Update offset
		offset_encoder[0] 	= position_capture[0];
 8003aae:	4b77      	ldr	r3, [pc, #476]	; (8003c8c <lowlayer_scanFlow+0x284>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a77      	ldr	r2, [pc, #476]	; (8003c90 <lowlayer_scanFlow+0x288>)
 8003ab4:	6013      	str	r3, [r2, #0]
		offset_encoder[1] 	= position_capture[1];
 8003ab6:	4b75      	ldr	r3, [pc, #468]	; (8003c8c <lowlayer_scanFlow+0x284>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	4a75      	ldr	r2, [pc, #468]	; (8003c90 <lowlayer_scanFlow+0x288>)
 8003abc:	6053      	str	r3, [r2, #4]
		offset_encoder[2] 	= position_capture[2];
 8003abe:	4b73      	ldr	r3, [pc, #460]	; (8003c8c <lowlayer_scanFlow+0x284>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	4a73      	ldr	r2, [pc, #460]	; (8003c90 <lowlayer_scanFlow+0x288>)
 8003ac4:	6093      	str	r3, [r2, #8]
		offset_stepper		= pulse_accumulate[3];
 8003ac6:	4b73      	ldr	r3, [pc, #460]	; (8003c94 <lowlayer_scanFlow+0x28c>)
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	4a73      	ldr	r2, [pc, #460]	; (8003c98 <lowlayer_scanFlow+0x290>)
 8003acc:	6013      	str	r3, [r2, #0]
		// LOG offset
		LOG_REPORT("offset encoder 0", offset_encoder[0]);
 8003ace:	4b70      	ldr	r3, [pc, #448]	; (8003c90 <lowlayer_scanFlow+0x288>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	4871      	ldr	r0, [pc, #452]	; (8003c9c <lowlayer_scanFlow+0x294>)
 8003ad8:	f7fd fe26 	bl	8001728 <LOG_REPORT>
		LOG_REPORT("offset encoder 1", offset_encoder[1]);
 8003adc:	4b6c      	ldr	r3, [pc, #432]	; (8003c90 <lowlayer_scanFlow+0x288>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	486e      	ldr	r0, [pc, #440]	; (8003ca0 <lowlayer_scanFlow+0x298>)
 8003ae6:	f7fd fe1f 	bl	8001728 <LOG_REPORT>
		LOG_REPORT("offset encoder 2", offset_encoder[2]);
 8003aea:	4b69      	ldr	r3, [pc, #420]	; (8003c90 <lowlayer_scanFlow+0x288>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	4619      	mov	r1, r3
 8003af2:	486c      	ldr	r0, [pc, #432]	; (8003ca4 <lowlayer_scanFlow+0x29c>)
 8003af4:	f7fd fe18 	bl	8001728 <LOG_REPORT>
		LOG_REPORT("offset stepper", offset_stepper);
 8003af8:	4b67      	ldr	r3, [pc, #412]	; (8003c98 <lowlayer_scanFlow+0x290>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	4619      	mov	r1, r3
 8003b00:	4869      	ldr	r0, [pc, #420]	; (8003ca8 <lowlayer_scanFlow+0x2a0>)
 8003b02:	f7fd fe11 	bl	8001728 <LOG_REPORT>

		offset_setpoint[0]	= HARD_LIM0_NEG
				- DIR_ENCODER_0*offset_encoder[0]*2.0*PI/ENCODER_J0;
 8003b06:	4b62      	ldr	r3, [pc, #392]	; (8003c90 <lowlayer_scanFlow+0x288>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	ee07 3a90 	vmov	s15, r3
 8003b0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b12:	ee17 0a90 	vmov	r0, s15
 8003b16:	f7fc fd17 	bl	8000548 <__aeabi_f2d>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	f7fc fbb5 	bl	800028c <__adddf3>
 8003b22:	4603      	mov	r3, r0
 8003b24:	460c      	mov	r4, r1
 8003b26:	4618      	mov	r0, r3
 8003b28:	4621      	mov	r1, r4
 8003b2a:	a347      	add	r3, pc, #284	; (adr r3, 8003c48 <lowlayer_scanFlow+0x240>)
 8003b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b30:	f7fc fd62 	bl	80005f8 <__aeabi_dmul>
 8003b34:	4603      	mov	r3, r0
 8003b36:	460c      	mov	r4, r1
 8003b38:	4618      	mov	r0, r3
 8003b3a:	4621      	mov	r1, r4
 8003b3c:	a344      	add	r3, pc, #272	; (adr r3, 8003c50 <lowlayer_scanFlow+0x248>)
 8003b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b42:	f7fc fe83 	bl	800084c <__aeabi_ddiv>
 8003b46:	4603      	mov	r3, r0
 8003b48:	460c      	mov	r4, r1
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	4623      	mov	r3, r4
 8003b4e:	a142      	add	r1, pc, #264	; (adr r1, 8003c58 <lowlayer_scanFlow+0x250>)
 8003b50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b54:	f7fc fb98 	bl	8000288 <__aeabi_dsub>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	460c      	mov	r4, r1
		offset_setpoint[0]	= HARD_LIM0_NEG
 8003b5c:	4a53      	ldr	r2, [pc, #332]	; (8003cac <lowlayer_scanFlow+0x2a4>)
 8003b5e:	e9c2 3400 	strd	r3, r4, [r2]
		offset_setpoint[1]	= HARD_LIM1_POS
				- DIR_ENCODER_1*offset_encoder[1]*2.0*PI/ENCODER_J1;
 8003b62:	4b4b      	ldr	r3, [pc, #300]	; (8003c90 <lowlayer_scanFlow+0x288>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	ee07 3a90 	vmov	s15, r3
 8003b6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b6e:	ee17 0a90 	vmov	r0, s15
 8003b72:	f7fc fce9 	bl	8000548 <__aeabi_f2d>
 8003b76:	4602      	mov	r2, r0
 8003b78:	460b      	mov	r3, r1
 8003b7a:	f7fc fb87 	bl	800028c <__adddf3>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	460c      	mov	r4, r1
 8003b82:	4618      	mov	r0, r3
 8003b84:	4621      	mov	r1, r4
 8003b86:	a330      	add	r3, pc, #192	; (adr r3, 8003c48 <lowlayer_scanFlow+0x240>)
 8003b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8c:	f7fc fd34 	bl	80005f8 <__aeabi_dmul>
 8003b90:	4603      	mov	r3, r0
 8003b92:	460c      	mov	r4, r1
 8003b94:	4618      	mov	r0, r3
 8003b96:	4621      	mov	r1, r4
 8003b98:	f04f 0200 	mov.w	r2, #0
 8003b9c:	4b44      	ldr	r3, [pc, #272]	; (8003cb0 <lowlayer_scanFlow+0x2a8>)
 8003b9e:	f7fc fe55 	bl	800084c <__aeabi_ddiv>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	460c      	mov	r4, r1
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	4623      	mov	r3, r4
 8003baa:	a12d      	add	r1, pc, #180	; (adr r1, 8003c60 <lowlayer_scanFlow+0x258>)
 8003bac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003bb0:	f7fc fb6a 	bl	8000288 <__aeabi_dsub>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	460c      	mov	r4, r1
		offset_setpoint[1]	= HARD_LIM1_POS
 8003bb8:	4a3c      	ldr	r2, [pc, #240]	; (8003cac <lowlayer_scanFlow+0x2a4>)
 8003bba:	e9c2 3402 	strd	r3, r4, [r2, #8]
		offset_setpoint[2]	= HARD_LIM2_NEG
				- DIR_ENCODER_2*offset_encoder[2]/ENCODER_J2;
 8003bbe:	4b34      	ldr	r3, [pc, #208]	; (8003c90 <lowlayer_scanFlow+0x288>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	ee07 3a90 	vmov	s15, r3
 8003bc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bca:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8003cb4 <lowlayer_scanFlow+0x2ac>
 8003bce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003bd2:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8003cb8 <lowlayer_scanFlow+0x2b0>
 8003bd6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003bda:	ee17 0a90 	vmov	r0, s15
 8003bde:	f7fc fcb3 	bl	8000548 <__aeabi_f2d>
 8003be2:	4603      	mov	r3, r0
 8003be4:	460c      	mov	r4, r1
		offset_setpoint[2]	= HARD_LIM2_NEG
 8003be6:	4a31      	ldr	r2, [pc, #196]	; (8003cac <lowlayer_scanFlow+0x2a4>)
 8003be8:	e9c2 3404 	strd	r3, r4, [r2, #16]
		offset_setpoint[3]  = HARD_LIM3_POS
				- offset_stepper*2.0*PI/GEAR_J3;
 8003bec:	4b2a      	ldr	r3, [pc, #168]	; (8003c98 <lowlayer_scanFlow+0x290>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7fc fc97 	bl	8000524 <__aeabi_i2d>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	f7fc fb47 	bl	800028c <__adddf3>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	460c      	mov	r4, r1
 8003c02:	4618      	mov	r0, r3
 8003c04:	4621      	mov	r1, r4
 8003c06:	a310      	add	r3, pc, #64	; (adr r3, 8003c48 <lowlayer_scanFlow+0x240>)
 8003c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0c:	f7fc fcf4 	bl	80005f8 <__aeabi_dmul>
 8003c10:	4603      	mov	r3, r0
 8003c12:	460c      	mov	r4, r1
 8003c14:	4618      	mov	r0, r3
 8003c16:	4621      	mov	r1, r4
 8003c18:	a313      	add	r3, pc, #76	; (adr r3, 8003c68 <lowlayer_scanFlow+0x260>)
 8003c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c1e:	f7fc fe15 	bl	800084c <__aeabi_ddiv>
 8003c22:	4603      	mov	r3, r0
 8003c24:	460c      	mov	r4, r1
 8003c26:	461a      	mov	r2, r3
 8003c28:	4623      	mov	r3, r4
 8003c2a:	a111      	add	r1, pc, #68	; (adr r1, 8003c70 <lowlayer_scanFlow+0x268>)
 8003c2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c30:	f7fc fb2a 	bl	8000288 <__aeabi_dsub>
 8003c34:	4603      	mov	r3, r0
 8003c36:	460c      	mov	r4, r1
		offset_setpoint[3]  = HARD_LIM3_POS
 8003c38:	4a1c      	ldr	r2, [pc, #112]	; (8003cac <lowlayer_scanFlow+0x2a4>)
 8003c3a:	e9c2 3406 	strd	r3, r4, [r2, #24]

		return TRUE;
 8003c3e:	2301      	movs	r3, #1
	}
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd90      	pop	{r4, r7, pc}
 8003c48:	60000000 	.word	0x60000000
 8003c4c:	400921fb 	.word	0x400921fb
 8003c50:	00000000 	.word	0x00000000
 8003c54:	40f38800 	.word	0x40f38800
 8003c58:	40000000 	.word	0x40000000
 8003c5c:	bff9f17a 	.word	0xbff9f17a
 8003c60:	80000000 	.word	0x80000000
 8003c64:	40039716 	.word	0x40039716
 8003c68:	a0000000 	.word	0xa0000000
 8003c6c:	40d3bca1 	.word	0x40d3bca1
 8003c70:	a0000000 	.word	0xa0000000
 8003c74:	4008330d 	.word	0x4008330d
 8003c78:	20005340 	.word	0x20005340
 8003c7c:	20005330 	.word	0x20005330
 8003c80:	0801b2e0 	.word	0x0801b2e0
 8003c84:	40020c00 	.word	0x40020c00
 8003c88:	20005320 	.word	0x20005320
 8003c8c:	20005334 	.word	0x20005334
 8003c90:	20005368 	.word	0x20005368
 8003c94:	20005310 	.word	0x20005310
 8003c98:	20005344 	.word	0x20005344
 8003c9c:	0801b100 	.word	0x0801b100
 8003ca0:	0801b114 	.word	0x0801b114
 8003ca4:	0801b128 	.word	0x0801b128
 8003ca8:	0801b13c 	.word	0x0801b13c
 8003cac:	20005348 	.word	0x20005348
 8003cb0:	40ff4000 	.word	0x40ff4000
 8003cb4:	4426aaab 	.word	0x4426aaab
 8003cb8:	400f1aa0 	.word	0x400f1aa0
 8003cbc:	00000000 	.word	0x00000000

08003cc0 <lowlayer_goToSoftLimit>:

uint8_t	lowlayer_goToSoftLimit(SCARA_PositionTypeDef *setpoint) {
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
	int8_t pulse[4] = {0, 0, 0 ,0};
 8003cc8:	2300      	movs	r3, #0
 8003cca:	60bb      	str	r3, [r7, #8]
	uint8_t check = 0;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	73fb      	strb	r3, [r7, #15]
	lowlayer_readSetPosition(setpoint);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 f951 	bl	8003f78 <lowlayer_readSetPosition>
	if (setpoint->Theta1 < LIM_MIN_J0) {
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003cdc:	a333      	add	r3, pc, #204	; (adr r3, 8003dac <lowlayer_goToSoftLimit+0xec>)
 8003cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce2:	f7fc fefb 	bl	8000adc <__aeabi_dcmplt>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d004      	beq.n	8003cf6 <lowlayer_goToSoftLimit+0x36>
		pulse[0] = pulse_scan[0];
 8003cec:	2303      	movs	r3, #3
 8003cee:	723b      	strb	r3, [r7, #8]
		check++;
 8003cf0:	7bfb      	ldrb	r3, [r7, #15]
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta2 > LIM_MAX_J1) {
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8003cfc:	a32d      	add	r3, pc, #180	; (adr r3, 8003db4 <lowlayer_goToSoftLimit+0xf4>)
 8003cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d02:	f7fc ff09 	bl	8000b18 <__aeabi_dcmpgt>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d004      	beq.n	8003d16 <lowlayer_goToSoftLimit+0x56>
		pulse[1] = pulse_scan[1];
 8003d0c:	2305      	movs	r3, #5
 8003d0e:	727b      	strb	r3, [r7, #9]
		check++;
 8003d10:	7bfb      	ldrb	r3, [r7, #15]
 8003d12:	3301      	adds	r3, #1
 8003d14:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->D3 < LIM_MIN_J2) {
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8003d1c:	f04f 0200 	mov.w	r2, #0
 8003d20:	4b21      	ldr	r3, [pc, #132]	; (8003da8 <lowlayer_goToSoftLimit+0xe8>)
 8003d22:	f7fc fedb 	bl	8000adc <__aeabi_dcmplt>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d004      	beq.n	8003d36 <lowlayer_goToSoftLimit+0x76>
		pulse[2] = pulse_scan[2];
 8003d2c:	2305      	movs	r3, #5
 8003d2e:	72bb      	strb	r3, [r7, #10]
		check++;
 8003d30:	7bfb      	ldrb	r3, [r7, #15]
 8003d32:	3301      	adds	r3, #1
 8003d34:	73fb      	strb	r3, [r7, #15]
	}
	if (setpoint->Theta4 > LIM_MAX_J3) {
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8003d3c:	a318      	add	r3, pc, #96	; (adr r3, 8003da0 <lowlayer_goToSoftLimit+0xe0>)
 8003d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d42:	f7fc fee9 	bl	8000b18 <__aeabi_dcmpgt>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d004      	beq.n	8003d56 <lowlayer_goToSoftLimit+0x96>
		pulse[3] = pulse_scan[3];
 8003d4c:	230a      	movs	r3, #10
 8003d4e:	72fb      	strb	r3, [r7, #11]
		check++;
 8003d50:	7bfb      	ldrb	r3, [r7, #15]
 8003d52:	3301      	adds	r3, #1
 8003d54:	73fb      	strb	r3, [r7, #15]
	}

	if (check > 0) {
 8003d56:	7bfb      	ldrb	r3, [r7, #15]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d013      	beq.n	8003d84 <lowlayer_goToSoftLimit+0xc4>
		lowlayer_writePulse(pulse[0], -pulse[1], pulse[2], -pulse[3]);
 8003d5c:	f997 0008 	ldrsb.w	r0, [r7, #8]
 8003d60:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	425b      	negs	r3, r3
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	b259      	sxtb	r1, r3
 8003d6c:	f997 200a 	ldrsb.w	r2, [r7, #10]
 8003d70:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	425b      	negs	r3, r3
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	b25b      	sxtb	r3, r3
 8003d7c:	f000 fb66 	bl	800444c <lowlayer_writePulse>
		return FALSE;
 8003d80:	2300      	movs	r3, #0
 8003d82:	e006      	b.n	8003d92 <lowlayer_goToSoftLimit+0xd2>
	} else {
		lowlayer_writePulse(0, 0, 0, 0);
 8003d84:	2300      	movs	r3, #0
 8003d86:	2200      	movs	r2, #0
 8003d88:	2100      	movs	r1, #0
 8003d8a:	2000      	movs	r0, #0
 8003d8c:	f000 fb5e 	bl	800444c <lowlayer_writePulse>
		return TRUE;
 8003d90:	2301      	movs	r3, #1
	}
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	f3af 8000 	nop.w
 8003da0:	daaaaaab 	.word	0xdaaaaaab
 8003da4:	4007bc89 	.word	0x4007bc89
 8003da8:	3ff00000 	.word	0x3ff00000
 8003dac:	daaaaaab 	.word	0xdaaaaaab
 8003db0:	bff7bc89 	.word	0xbff7bc89
 8003db4:	88000000 	.word	0x88000000
 8003db8:	4002d97c 	.word	0x4002d97c
 8003dbc:	00000000 	.word	0x00000000

08003dc0 <lowlayer_readTruePosition>:

void	lowlayer_readTruePosition(SCARA_PositionTypeDef *true) {
 8003dc0:	b590      	push	{r4, r7, lr}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
	lowlayer_updateEncoder();
 8003dc8:	f000 fc8a 	bl	80046e0 <lowlayer_updateEncoder>
	true->Theta1 = HARD_LIM0_NEG
			+ DIR_ENCODER_0*(position_encoder[0] - offset_encoder[0])*2.0*PI/ENCODER_J0; // Servo Motor
 8003dcc:	4b62      	ldr	r3, [pc, #392]	; (8003f58 <lowlayer_readTruePosition+0x198>)
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	4b62      	ldr	r3, [pc, #392]	; (8003f5c <lowlayer_readTruePosition+0x19c>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	ee07 3a90 	vmov	s15, r3
 8003dda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dde:	ee17 0a90 	vmov	r0, s15
 8003de2:	f7fc fbb1 	bl	8000548 <__aeabi_f2d>
 8003de6:	4602      	mov	r2, r0
 8003de8:	460b      	mov	r3, r1
 8003dea:	f7fc fa4f 	bl	800028c <__adddf3>
 8003dee:	4603      	mov	r3, r0
 8003df0:	460c      	mov	r4, r1
 8003df2:	4618      	mov	r0, r3
 8003df4:	4621      	mov	r1, r4
 8003df6:	a34c      	add	r3, pc, #304	; (adr r3, 8003f28 <lowlayer_readTruePosition+0x168>)
 8003df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfc:	f7fc fbfc 	bl	80005f8 <__aeabi_dmul>
 8003e00:	4603      	mov	r3, r0
 8003e02:	460c      	mov	r4, r1
 8003e04:	4618      	mov	r0, r3
 8003e06:	4621      	mov	r1, r4
 8003e08:	a349      	add	r3, pc, #292	; (adr r3, 8003f30 <lowlayer_readTruePosition+0x170>)
 8003e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e0e:	f7fc fd1d 	bl	800084c <__aeabi_ddiv>
 8003e12:	4603      	mov	r3, r0
 8003e14:	460c      	mov	r4, r1
 8003e16:	4618      	mov	r0, r3
 8003e18:	4621      	mov	r1, r4
 8003e1a:	a347      	add	r3, pc, #284	; (adr r3, 8003f38 <lowlayer_readTruePosition+0x178>)
 8003e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e20:	f7fc fa32 	bl	8000288 <__aeabi_dsub>
 8003e24:	4603      	mov	r3, r0
 8003e26:	460c      	mov	r4, r1
	true->Theta1 = HARD_LIM0_NEG
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	true->Theta2 = HARD_LIM1_POS
			+ DIR_ENCODER_1*(position_encoder[1] - offset_encoder[1])*2.0*PI/ENCODER_J1; // Servo Motor
 8003e2e:	4b4a      	ldr	r3, [pc, #296]	; (8003f58 <lowlayer_readTruePosition+0x198>)
 8003e30:	685a      	ldr	r2, [r3, #4]
 8003e32:	4b4a      	ldr	r3, [pc, #296]	; (8003f5c <lowlayer_readTruePosition+0x19c>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	ee07 3a90 	vmov	s15, r3
 8003e3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e40:	ee17 0a90 	vmov	r0, s15
 8003e44:	f7fc fb80 	bl	8000548 <__aeabi_f2d>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	f7fc fa1e 	bl	800028c <__adddf3>
 8003e50:	4603      	mov	r3, r0
 8003e52:	460c      	mov	r4, r1
 8003e54:	4618      	mov	r0, r3
 8003e56:	4621      	mov	r1, r4
 8003e58:	a333      	add	r3, pc, #204	; (adr r3, 8003f28 <lowlayer_readTruePosition+0x168>)
 8003e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e5e:	f7fc fbcb 	bl	80005f8 <__aeabi_dmul>
 8003e62:	4603      	mov	r3, r0
 8003e64:	460c      	mov	r4, r1
 8003e66:	4618      	mov	r0, r3
 8003e68:	4621      	mov	r1, r4
 8003e6a:	f04f 0200 	mov.w	r2, #0
 8003e6e:	4b3c      	ldr	r3, [pc, #240]	; (8003f60 <lowlayer_readTruePosition+0x1a0>)
 8003e70:	f7fc fcec 	bl	800084c <__aeabi_ddiv>
 8003e74:	4603      	mov	r3, r0
 8003e76:	460c      	mov	r4, r1
 8003e78:	4618      	mov	r0, r3
 8003e7a:	4621      	mov	r1, r4
 8003e7c:	a330      	add	r3, pc, #192	; (adr r3, 8003f40 <lowlayer_readTruePosition+0x180>)
 8003e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e82:	f7fc fa03 	bl	800028c <__adddf3>
 8003e86:	4603      	mov	r3, r0
 8003e88:	460c      	mov	r4, r1
	true->Theta2 = HARD_LIM1_POS
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70

	true->D3	 = HARD_LIM2_NEG
			+ DIR_ENCODER_2*(position_encoder[2] - offset_encoder[2])/ENCODER_J2; // Servo Motor
 8003e90:	4b31      	ldr	r3, [pc, #196]	; (8003f58 <lowlayer_readTruePosition+0x198>)
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	4b31      	ldr	r3, [pc, #196]	; (8003f5c <lowlayer_readTruePosition+0x19c>)
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	ee07 3a90 	vmov	s15, r3
 8003e9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ea2:	eeb1 7a67 	vneg.f32	s14, s15
 8003ea6:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8003f64 <lowlayer_readTruePosition+0x1a4>
 8003eaa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003eae:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8003f68 <lowlayer_readTruePosition+0x1a8>
 8003eb2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003eb6:	ee17 0a90 	vmov	r0, s15
 8003eba:	f7fc fb45 	bl	8000548 <__aeabi_f2d>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	460c      	mov	r4, r1
	true->D3	 = HARD_LIM2_NEG
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78

	true->Theta4 = HARD_LIM3_POS
			+ (pulse_accumulate[3] - offset_stepper)*2.0*PI/GEAR_J3; // Stepper Motor
 8003ec8:	4b28      	ldr	r3, [pc, #160]	; (8003f6c <lowlayer_readTruePosition+0x1ac>)
 8003eca:	68da      	ldr	r2, [r3, #12]
 8003ecc:	4b28      	ldr	r3, [pc, #160]	; (8003f70 <lowlayer_readTruePosition+0x1b0>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7fc fb26 	bl	8000524 <__aeabi_i2d>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	460b      	mov	r3, r1
 8003edc:	f7fc f9d6 	bl	800028c <__adddf3>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	460c      	mov	r4, r1
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	4621      	mov	r1, r4
 8003ee8:	a30f      	add	r3, pc, #60	; (adr r3, 8003f28 <lowlayer_readTruePosition+0x168>)
 8003eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eee:	f7fc fb83 	bl	80005f8 <__aeabi_dmul>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	460c      	mov	r4, r1
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	4621      	mov	r1, r4
 8003efa:	a313      	add	r3, pc, #76	; (adr r3, 8003f48 <lowlayer_readTruePosition+0x188>)
 8003efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f00:	f7fc fca4 	bl	800084c <__aeabi_ddiv>
 8003f04:	4603      	mov	r3, r0
 8003f06:	460c      	mov	r4, r1
 8003f08:	4618      	mov	r0, r3
 8003f0a:	4621      	mov	r1, r4
 8003f0c:	a310      	add	r3, pc, #64	; (adr r3, 8003f50 <lowlayer_readTruePosition+0x190>)
 8003f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f12:	f7fc f9bb 	bl	800028c <__adddf3>
 8003f16:	4603      	mov	r3, r0
 8003f18:	460c      	mov	r4, r1
	true->Theta4 = HARD_LIM3_POS
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd90      	pop	{r4, r7, pc}
 8003f28:	60000000 	.word	0x60000000
 8003f2c:	400921fb 	.word	0x400921fb
 8003f30:	00000000 	.word	0x00000000
 8003f34:	40f38800 	.word	0x40f38800
 8003f38:	40000000 	.word	0x40000000
 8003f3c:	3ff9f17a 	.word	0x3ff9f17a
 8003f40:	80000000 	.word	0x80000000
 8003f44:	40039716 	.word	0x40039716
 8003f48:	a0000000 	.word	0xa0000000
 8003f4c:	40d3bca1 	.word	0x40d3bca1
 8003f50:	a0000000 	.word	0xa0000000
 8003f54:	4008330d 	.word	0x4008330d
 8003f58:	20005324 	.word	0x20005324
 8003f5c:	20005368 	.word	0x20005368
 8003f60:	40ff4000 	.word	0x40ff4000
 8003f64:	4426aaab 	.word	0x4426aaab
 8003f68:	400f1aa0 	.word	0x400f1aa0
 8003f6c:	20005310 	.word	0x20005310
 8003f70:	20005344 	.word	0x20005344
 8003f74:	00000000 	.word	0x00000000

08003f78 <lowlayer_readSetPosition>:

void	lowlayer_readSetPosition(SCARA_PositionTypeDef *setpoint) {
 8003f78:	b5b0      	push	{r4, r5, r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
	setpoint->Theta1 = offset_setpoint[0] + pulse_accumulate[0]*2.0*PI/GEAR_J0;
 8003f80:	4b53      	ldr	r3, [pc, #332]	; (80040d0 <lowlayer_readSetPosition+0x158>)
 8003f82:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003f86:	4b53      	ldr	r3, [pc, #332]	; (80040d4 <lowlayer_readSetPosition+0x15c>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7fc faca 	bl	8000524 <__aeabi_i2d>
 8003f90:	4602      	mov	r2, r0
 8003f92:	460b      	mov	r3, r1
 8003f94:	f7fc f97a 	bl	800028c <__adddf3>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	4610      	mov	r0, r2
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	a345      	add	r3, pc, #276	; (adr r3, 80040b8 <lowlayer_readSetPosition+0x140>)
 8003fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa6:	f7fc fb27 	bl	80005f8 <__aeabi_dmul>
 8003faa:	4602      	mov	r2, r0
 8003fac:	460b      	mov	r3, r1
 8003fae:	4610      	mov	r0, r2
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	a343      	add	r3, pc, #268	; (adr r3, 80040c0 <lowlayer_readSetPosition+0x148>)
 8003fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb8:	f7fc fc48 	bl	800084c <__aeabi_ddiv>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	4620      	mov	r0, r4
 8003fc2:	4629      	mov	r1, r5
 8003fc4:	f7fc f962 	bl	800028c <__adddf3>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	460c      	mov	r4, r1
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	setpoint->Theta2 = offset_setpoint[1] + pulse_accumulate[1]*2.0*PI/GEAR_J1;
 8003fd2:	4b3f      	ldr	r3, [pc, #252]	; (80040d0 <lowlayer_readSetPosition+0x158>)
 8003fd4:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8003fd8:	4b3e      	ldr	r3, [pc, #248]	; (80040d4 <lowlayer_readSetPosition+0x15c>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7fc faa1 	bl	8000524 <__aeabi_i2d>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	f7fc f951 	bl	800028c <__adddf3>
 8003fea:	4602      	mov	r2, r0
 8003fec:	460b      	mov	r3, r1
 8003fee:	4610      	mov	r0, r2
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	a331      	add	r3, pc, #196	; (adr r3, 80040b8 <lowlayer_readSetPosition+0x140>)
 8003ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff8:	f7fc fafe 	bl	80005f8 <__aeabi_dmul>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	460b      	mov	r3, r1
 8004000:	4610      	mov	r0, r2
 8004002:	4619      	mov	r1, r3
 8004004:	f04f 0200 	mov.w	r2, #0
 8004008:	4b33      	ldr	r3, [pc, #204]	; (80040d8 <lowlayer_readSetPosition+0x160>)
 800400a:	f7fc fc1f 	bl	800084c <__aeabi_ddiv>
 800400e:	4602      	mov	r2, r0
 8004010:	460b      	mov	r3, r1
 8004012:	4620      	mov	r0, r4
 8004014:	4629      	mov	r1, r5
 8004016:	f7fc f939 	bl	800028c <__adddf3>
 800401a:	4603      	mov	r3, r0
 800401c:	460c      	mov	r4, r1
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70

	setpoint->D3	 = offset_setpoint[2] + pulse_accumulate[2]/GEAR_J2;
 8004024:	4b2a      	ldr	r3, [pc, #168]	; (80040d0 <lowlayer_readSetPosition+0x158>)
 8004026:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800402a:	4b2a      	ldr	r3, [pc, #168]	; (80040d4 <lowlayer_readSetPosition+0x15c>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	ee07 3a90 	vmov	s15, r3
 8004032:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004036:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80040dc <lowlayer_readSetPosition+0x164>
 800403a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800403e:	ee16 0a90 	vmov	r0, s13
 8004042:	f7fc fa81 	bl	8000548 <__aeabi_f2d>
 8004046:	4602      	mov	r2, r0
 8004048:	460b      	mov	r3, r1
 800404a:	4620      	mov	r0, r4
 800404c:	4629      	mov	r1, r5
 800404e:	f7fc f91d 	bl	800028c <__adddf3>
 8004052:	4603      	mov	r3, r0
 8004054:	460c      	mov	r4, r1
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78

	setpoint->Theta4 = offset_setpoint[3] + pulse_accumulate[3]*2.0*PI/GEAR_J3;
 800405c:	4b1c      	ldr	r3, [pc, #112]	; (80040d0 <lowlayer_readSetPosition+0x158>)
 800405e:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004062:	4b1c      	ldr	r3, [pc, #112]	; (80040d4 <lowlayer_readSetPosition+0x15c>)
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	4618      	mov	r0, r3
 8004068:	f7fc fa5c 	bl	8000524 <__aeabi_i2d>
 800406c:	4602      	mov	r2, r0
 800406e:	460b      	mov	r3, r1
 8004070:	f7fc f90c 	bl	800028c <__adddf3>
 8004074:	4602      	mov	r2, r0
 8004076:	460b      	mov	r3, r1
 8004078:	4610      	mov	r0, r2
 800407a:	4619      	mov	r1, r3
 800407c:	a30e      	add	r3, pc, #56	; (adr r3, 80040b8 <lowlayer_readSetPosition+0x140>)
 800407e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004082:	f7fc fab9 	bl	80005f8 <__aeabi_dmul>
 8004086:	4602      	mov	r2, r0
 8004088:	460b      	mov	r3, r1
 800408a:	4610      	mov	r0, r2
 800408c:	4619      	mov	r1, r3
 800408e:	a30e      	add	r3, pc, #56	; (adr r3, 80040c8 <lowlayer_readSetPosition+0x150>)
 8004090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004094:	f7fc fbda 	bl	800084c <__aeabi_ddiv>
 8004098:	4602      	mov	r2, r0
 800409a:	460b      	mov	r3, r1
 800409c:	4620      	mov	r0, r4
 800409e:	4629      	mov	r1, r5
 80040a0:	f7fc f8f4 	bl	800028c <__adddf3>
 80040a4:	4603      	mov	r3, r0
 80040a6:	460c      	mov	r4, r1
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
}
 80040ae:	bf00      	nop
 80040b0:	3708      	adds	r7, #8
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bdb0      	pop	{r4, r5, r7, pc}
 80040b6:	bf00      	nop
 80040b8:	60000000 	.word	0x60000000
 80040bc:	400921fb 	.word	0x400921fb
 80040c0:	00000000 	.word	0x00000000
 80040c4:	40d38800 	.word	0x40d38800
 80040c8:	a0000000 	.word	0xa0000000
 80040cc:	40d3bca1 	.word	0x40d3bca1
 80040d0:	20005348 	.word	0x20005348
 80040d4:	20005310 	.word	0x20005310
 80040d8:	40df4000 	.word	0x40df4000
 80040dc:	42c80000 	.word	0x42c80000

080040e0 <lowlayer_computeAndWritePulse>:

uint8_t	lowlayer_computeAndWritePulse(SCARA_PositionTypeDef current, SCARA_PositionTypeDef next) {
 80040e0:	b084      	sub	sp, #16
 80040e2:	b590      	push	{r4, r7, lr}
 80040e4:	b093      	sub	sp, #76	; 0x4c
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80040ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t	current_var0, current_var1, current_var2, current_var3;
	uint32_t	next_var0, next_var1, next_var2, next_var3;
	int64_t		delta_var0, delta_var1, delta_var2, delta_var3;
	uint8_t 	result;

	current_var0	= round((current.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 80040f0:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80040f4:	a3cc      	add	r3, pc, #816	; (adr r3, 8004428 <lowlayer_computeAndWritePulse+0x348>)
 80040f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fa:	f7fc f8c7 	bl	800028c <__adddf3>
 80040fe:	4603      	mov	r3, r0
 8004100:	460c      	mov	r4, r1
 8004102:	4618      	mov	r0, r3
 8004104:	4621      	mov	r1, r4
 8004106:	a3ca      	add	r3, pc, #808	; (adr r3, 8004430 <lowlayer_computeAndWritePulse+0x350>)
 8004108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410c:	f7fc fa74 	bl	80005f8 <__aeabi_dmul>
 8004110:	4603      	mov	r3, r0
 8004112:	460c      	mov	r4, r1
 8004114:	4618      	mov	r0, r3
 8004116:	4621      	mov	r1, r4
 8004118:	a3bd      	add	r3, pc, #756	; (adr r3, 8004410 <lowlayer_computeAndWritePulse+0x330>)
 800411a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800411e:	f7fc fb95 	bl	800084c <__aeabi_ddiv>
 8004122:	4603      	mov	r3, r0
 8004124:	460c      	mov	r4, r1
 8004126:	ec44 3b17 	vmov	d7, r3, r4
 800412a:	eeb0 0a47 	vmov.f32	s0, s14
 800412e:	eef0 0a67 	vmov.f32	s1, s15
 8004132:	f015 fa35 	bl	80195a0 <round>
 8004136:	ec54 3b10 	vmov	r3, r4, d0
 800413a:	4618      	mov	r0, r3
 800413c:	4621      	mov	r1, r4
 800413e:	f7fc fd33 	bl	8000ba8 <__aeabi_d2uiz>
 8004142:	4603      	mov	r3, r0
 8004144:	647b      	str	r3, [r7, #68]	; 0x44
	current_var1 	= round((current.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 8004146:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800414a:	a3bb      	add	r3, pc, #748	; (adr r3, 8004438 <lowlayer_computeAndWritePulse+0x358>)
 800414c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004150:	f7fc f89c 	bl	800028c <__adddf3>
 8004154:	4603      	mov	r3, r0
 8004156:	460c      	mov	r4, r1
 8004158:	4618      	mov	r0, r3
 800415a:	4621      	mov	r1, r4
 800415c:	f04f 0200 	mov.w	r2, #0
 8004160:	4bb7      	ldr	r3, [pc, #732]	; (8004440 <lowlayer_computeAndWritePulse+0x360>)
 8004162:	f7fc fa49 	bl	80005f8 <__aeabi_dmul>
 8004166:	4603      	mov	r3, r0
 8004168:	460c      	mov	r4, r1
 800416a:	4618      	mov	r0, r3
 800416c:	4621      	mov	r1, r4
 800416e:	a3a8      	add	r3, pc, #672	; (adr r3, 8004410 <lowlayer_computeAndWritePulse+0x330>)
 8004170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004174:	f7fc fb6a 	bl	800084c <__aeabi_ddiv>
 8004178:	4603      	mov	r3, r0
 800417a:	460c      	mov	r4, r1
 800417c:	ec44 3b17 	vmov	d7, r3, r4
 8004180:	eeb0 0a47 	vmov.f32	s0, s14
 8004184:	eef0 0a67 	vmov.f32	s1, s15
 8004188:	f015 fa0a 	bl	80195a0 <round>
 800418c:	ec54 3b10 	vmov	r3, r4, d0
 8004190:	4618      	mov	r0, r3
 8004192:	4621      	mov	r1, r4
 8004194:	f7fc fd08 	bl	8000ba8 <__aeabi_d2uiz>
 8004198:	4603      	mov	r3, r0
 800419a:	643b      	str	r3, [r7, #64]	; 0x40
	current_var2 	= round((current.D3 - LIM_MIN_J2) * GEAR_J2);
 800419c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80041a0:	f04f 0200 	mov.w	r2, #0
 80041a4:	4ba7      	ldr	r3, [pc, #668]	; (8004444 <lowlayer_computeAndWritePulse+0x364>)
 80041a6:	f7fc f86f 	bl	8000288 <__aeabi_dsub>
 80041aa:	4603      	mov	r3, r0
 80041ac:	460c      	mov	r4, r1
 80041ae:	4618      	mov	r0, r3
 80041b0:	4621      	mov	r1, r4
 80041b2:	f04f 0200 	mov.w	r2, #0
 80041b6:	4ba4      	ldr	r3, [pc, #656]	; (8004448 <lowlayer_computeAndWritePulse+0x368>)
 80041b8:	f7fc fa1e 	bl	80005f8 <__aeabi_dmul>
 80041bc:	4603      	mov	r3, r0
 80041be:	460c      	mov	r4, r1
 80041c0:	ec44 3b17 	vmov	d7, r3, r4
 80041c4:	eeb0 0a47 	vmov.f32	s0, s14
 80041c8:	eef0 0a67 	vmov.f32	s1, s15
 80041cc:	f015 f9e8 	bl	80195a0 <round>
 80041d0:	ec54 3b10 	vmov	r3, r4, d0
 80041d4:	4618      	mov	r0, r3
 80041d6:	4621      	mov	r1, r4
 80041d8:	f7fc fce6 	bl	8000ba8 <__aeabi_d2uiz>
 80041dc:	4603      	mov	r3, r0
 80041de:	63fb      	str	r3, [r7, #60]	; 0x3c
	current_var3 	= round((current.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 80041e0:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80041e4:	a38c      	add	r3, pc, #560	; (adr r3, 8004418 <lowlayer_computeAndWritePulse+0x338>)
 80041e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ea:	f7fc f84f 	bl	800028c <__adddf3>
 80041ee:	4603      	mov	r3, r0
 80041f0:	460c      	mov	r4, r1
 80041f2:	4618      	mov	r0, r3
 80041f4:	4621      	mov	r1, r4
 80041f6:	a38a      	add	r3, pc, #552	; (adr r3, 8004420 <lowlayer_computeAndWritePulse+0x340>)
 80041f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041fc:	f7fc f9fc 	bl	80005f8 <__aeabi_dmul>
 8004200:	4603      	mov	r3, r0
 8004202:	460c      	mov	r4, r1
 8004204:	4618      	mov	r0, r3
 8004206:	4621      	mov	r1, r4
 8004208:	a381      	add	r3, pc, #516	; (adr r3, 8004410 <lowlayer_computeAndWritePulse+0x330>)
 800420a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420e:	f7fc fb1d 	bl	800084c <__aeabi_ddiv>
 8004212:	4603      	mov	r3, r0
 8004214:	460c      	mov	r4, r1
 8004216:	ec44 3b17 	vmov	d7, r3, r4
 800421a:	eeb0 0a47 	vmov.f32	s0, s14
 800421e:	eef0 0a67 	vmov.f32	s1, s15
 8004222:	f015 f9bd 	bl	80195a0 <round>
 8004226:	ec54 3b10 	vmov	r3, r4, d0
 800422a:	4618      	mov	r0, r3
 800422c:	4621      	mov	r1, r4
 800422e:	f7fc fcbb 	bl	8000ba8 <__aeabi_d2uiz>
 8004232:	4603      	mov	r3, r0
 8004234:	63bb      	str	r3, [r7, #56]	; 0x38
	next_var0 		= round((next.Theta1 - LIM_MIN_J0) * GEAR_J0/(2*PI));
 8004236:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 800423a:	a37b      	add	r3, pc, #492	; (adr r3, 8004428 <lowlayer_computeAndWritePulse+0x348>)
 800423c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004240:	f7fc f824 	bl	800028c <__adddf3>
 8004244:	4603      	mov	r3, r0
 8004246:	460c      	mov	r4, r1
 8004248:	4618      	mov	r0, r3
 800424a:	4621      	mov	r1, r4
 800424c:	a378      	add	r3, pc, #480	; (adr r3, 8004430 <lowlayer_computeAndWritePulse+0x350>)
 800424e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004252:	f7fc f9d1 	bl	80005f8 <__aeabi_dmul>
 8004256:	4603      	mov	r3, r0
 8004258:	460c      	mov	r4, r1
 800425a:	4618      	mov	r0, r3
 800425c:	4621      	mov	r1, r4
 800425e:	a36c      	add	r3, pc, #432	; (adr r3, 8004410 <lowlayer_computeAndWritePulse+0x330>)
 8004260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004264:	f7fc faf2 	bl	800084c <__aeabi_ddiv>
 8004268:	4603      	mov	r3, r0
 800426a:	460c      	mov	r4, r1
 800426c:	ec44 3b17 	vmov	d7, r3, r4
 8004270:	eeb0 0a47 	vmov.f32	s0, s14
 8004274:	eef0 0a67 	vmov.f32	s1, s15
 8004278:	f015 f992 	bl	80195a0 <round>
 800427c:	ec54 3b10 	vmov	r3, r4, d0
 8004280:	4618      	mov	r0, r3
 8004282:	4621      	mov	r1, r4
 8004284:	f7fc fc90 	bl	8000ba8 <__aeabi_d2uiz>
 8004288:	4603      	mov	r3, r0
 800428a:	637b      	str	r3, [r7, #52]	; 0x34
	next_var1 		= round((next.Theta2 - LIM_MIN_J1) * GEAR_J1/(2*PI));
 800428c:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8004290:	a369      	add	r3, pc, #420	; (adr r3, 8004438 <lowlayer_computeAndWritePulse+0x358>)
 8004292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004296:	f7fb fff9 	bl	800028c <__adddf3>
 800429a:	4603      	mov	r3, r0
 800429c:	460c      	mov	r4, r1
 800429e:	4618      	mov	r0, r3
 80042a0:	4621      	mov	r1, r4
 80042a2:	f04f 0200 	mov.w	r2, #0
 80042a6:	4b66      	ldr	r3, [pc, #408]	; (8004440 <lowlayer_computeAndWritePulse+0x360>)
 80042a8:	f7fc f9a6 	bl	80005f8 <__aeabi_dmul>
 80042ac:	4603      	mov	r3, r0
 80042ae:	460c      	mov	r4, r1
 80042b0:	4618      	mov	r0, r3
 80042b2:	4621      	mov	r1, r4
 80042b4:	a356      	add	r3, pc, #344	; (adr r3, 8004410 <lowlayer_computeAndWritePulse+0x330>)
 80042b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ba:	f7fc fac7 	bl	800084c <__aeabi_ddiv>
 80042be:	4603      	mov	r3, r0
 80042c0:	460c      	mov	r4, r1
 80042c2:	ec44 3b17 	vmov	d7, r3, r4
 80042c6:	eeb0 0a47 	vmov.f32	s0, s14
 80042ca:	eef0 0a67 	vmov.f32	s1, s15
 80042ce:	f015 f967 	bl	80195a0 <round>
 80042d2:	ec54 3b10 	vmov	r3, r4, d0
 80042d6:	4618      	mov	r0, r3
 80042d8:	4621      	mov	r1, r4
 80042da:	f7fc fc65 	bl	8000ba8 <__aeabi_d2uiz>
 80042de:	4603      	mov	r3, r0
 80042e0:	633b      	str	r3, [r7, #48]	; 0x30
	next_var2 		= round((next.D3 - LIM_MIN_J2) * GEAR_J2);
 80042e2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80042e6:	f04f 0200 	mov.w	r2, #0
 80042ea:	4b56      	ldr	r3, [pc, #344]	; (8004444 <lowlayer_computeAndWritePulse+0x364>)
 80042ec:	f7fb ffcc 	bl	8000288 <__aeabi_dsub>
 80042f0:	4603      	mov	r3, r0
 80042f2:	460c      	mov	r4, r1
 80042f4:	4618      	mov	r0, r3
 80042f6:	4621      	mov	r1, r4
 80042f8:	f04f 0200 	mov.w	r2, #0
 80042fc:	4b52      	ldr	r3, [pc, #328]	; (8004448 <lowlayer_computeAndWritePulse+0x368>)
 80042fe:	f7fc f97b 	bl	80005f8 <__aeabi_dmul>
 8004302:	4603      	mov	r3, r0
 8004304:	460c      	mov	r4, r1
 8004306:	ec44 3b17 	vmov	d7, r3, r4
 800430a:	eeb0 0a47 	vmov.f32	s0, s14
 800430e:	eef0 0a67 	vmov.f32	s1, s15
 8004312:	f015 f945 	bl	80195a0 <round>
 8004316:	ec54 3b10 	vmov	r3, r4, d0
 800431a:	4618      	mov	r0, r3
 800431c:	4621      	mov	r1, r4
 800431e:	f7fc fc43 	bl	8000ba8 <__aeabi_d2uiz>
 8004322:	4603      	mov	r3, r0
 8004324:	62fb      	str	r3, [r7, #44]	; 0x2c
	next_var3 		= round((next.Theta4 - LIM_MIN_J3) * GEAR_J3/(2*PI));
 8004326:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800432a:	a33b      	add	r3, pc, #236	; (adr r3, 8004418 <lowlayer_computeAndWritePulse+0x338>)
 800432c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004330:	f7fb ffac 	bl	800028c <__adddf3>
 8004334:	4603      	mov	r3, r0
 8004336:	460c      	mov	r4, r1
 8004338:	4618      	mov	r0, r3
 800433a:	4621      	mov	r1, r4
 800433c:	a338      	add	r3, pc, #224	; (adr r3, 8004420 <lowlayer_computeAndWritePulse+0x340>)
 800433e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004342:	f7fc f959 	bl	80005f8 <__aeabi_dmul>
 8004346:	4603      	mov	r3, r0
 8004348:	460c      	mov	r4, r1
 800434a:	4618      	mov	r0, r3
 800434c:	4621      	mov	r1, r4
 800434e:	a330      	add	r3, pc, #192	; (adr r3, 8004410 <lowlayer_computeAndWritePulse+0x330>)
 8004350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004354:	f7fc fa7a 	bl	800084c <__aeabi_ddiv>
 8004358:	4603      	mov	r3, r0
 800435a:	460c      	mov	r4, r1
 800435c:	ec44 3b17 	vmov	d7, r3, r4
 8004360:	eeb0 0a47 	vmov.f32	s0, s14
 8004364:	eef0 0a67 	vmov.f32	s1, s15
 8004368:	f015 f91a 	bl	80195a0 <round>
 800436c:	ec54 3b10 	vmov	r3, r4, d0
 8004370:	4618      	mov	r0, r3
 8004372:	4621      	mov	r1, r4
 8004374:	f7fc fc18 	bl	8000ba8 <__aeabi_d2uiz>
 8004378:	4603      	mov	r3, r0
 800437a:	62bb      	str	r3, [r7, #40]	; 0x28

	delta_var0 = next_var0 - current_var0;
 800437c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800437e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	f04f 0400 	mov.w	r4, #0
 8004386:	e9c7 3408 	strd	r3, r4, [r7, #32]
	delta_var1 = next_var1 - current_var1;
 800438a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800438c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	f04f 0400 	mov.w	r4, #0
 8004394:	e9c7 3406 	strd	r3, r4, [r7, #24]
	delta_var2 = next_var2 - current_var2;
 8004398:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800439a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	f04f 0400 	mov.w	r4, #0
 80043a2:	e9c7 3404 	strd	r3, r4, [r7, #16]
	delta_var3 = next_var3 - current_var3;
 80043a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	f04f 0400 	mov.w	r4, #0
 80043b0:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if (abs(delta_var0) > 127
 80043b4:	6a3b      	ldr	r3, [r7, #32]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	bfb8      	it	lt
 80043ba:	425b      	neglt	r3, r3
 80043bc:	2b7f      	cmp	r3, #127	; 0x7f
 80043be:	dc11      	bgt.n	80043e4 <lowlayer_computeAndWritePulse+0x304>
		|| abs(delta_var1) > 127
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	bfb8      	it	lt
 80043c6:	425b      	neglt	r3, r3
 80043c8:	2b7f      	cmp	r3, #127	; 0x7f
 80043ca:	dc0b      	bgt.n	80043e4 <lowlayer_computeAndWritePulse+0x304>
		|| abs(delta_var2) > 127
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	bfb8      	it	lt
 80043d2:	425b      	neglt	r3, r3
 80043d4:	2b7f      	cmp	r3, #127	; 0x7f
 80043d6:	dc05      	bgt.n	80043e4 <lowlayer_computeAndWritePulse+0x304>
		|| abs(delta_var3) > 127) {
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	bfb8      	it	lt
 80043de:	425b      	neglt	r3, r3
 80043e0:	2b7f      	cmp	r3, #127	; 0x7f
 80043e2:	dd01      	ble.n	80043e8 <lowlayer_computeAndWritePulse+0x308>
		return FALSE;
 80043e4:	2300      	movs	r3, #0
 80043e6:	e00c      	b.n	8004402 <lowlayer_computeAndWritePulse+0x322>
	} // Can't convert to int8_t , over range

	result = lowlayer_writePulse((int8_t)delta_var0,
 80043e8:	f997 0020 	ldrsb.w	r0, [r7, #32]
 80043ec:	f997 1018 	ldrsb.w	r1, [r7, #24]
 80043f0:	f997 2010 	ldrsb.w	r2, [r7, #16]
 80043f4:	f997 3008 	ldrsb.w	r3, [r7, #8]
 80043f8:	f000 f828 	bl	800444c <lowlayer_writePulse>
 80043fc:	4603      	mov	r3, r0
 80043fe:	71fb      	strb	r3, [r7, #7]
								 (int8_t)delta_var1,
								 (int8_t)delta_var2,
								 (int8_t)delta_var3);

	return result;
 8004400:	79fb      	ldrb	r3, [r7, #7]
}
 8004402:	4618      	mov	r0, r3
 8004404:	374c      	adds	r7, #76	; 0x4c
 8004406:	46bd      	mov	sp, r7
 8004408:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800440c:	b004      	add	sp, #16
 800440e:	4770      	bx	lr
 8004410:	60000000 	.word	0x60000000
 8004414:	401921fb 	.word	0x401921fb
 8004418:	daaaaaab 	.word	0xdaaaaaab
 800441c:	4007bc89 	.word	0x4007bc89
 8004420:	a0000000 	.word	0xa0000000
 8004424:	40d3bca1 	.word	0x40d3bca1
 8004428:	daaaaaab 	.word	0xdaaaaaab
 800442c:	3ff7bc89 	.word	0x3ff7bc89
 8004430:	00000000 	.word	0x00000000
 8004434:	40d38800 	.word	0x40d38800
 8004438:	88000000 	.word	0x88000000
 800443c:	4002d97c 	.word	0x4002d97c
 8004440:	40df4000 	.word	0x40df4000
 8004444:	3ff00000 	.word	0x3ff00000
 8004448:	40590000 	.word	0x40590000

0800444c <lowlayer_writePulse>:


uint8_t	lowlayer_writePulse(int8_t pulse0, int8_t pulse1, int8_t pulse2, int8_t pulse3) {
 800444c:	b590      	push	{r4, r7, lr}
 800444e:	b087      	sub	sp, #28
 8004450:	af00      	add	r7, sp, #0
 8004452:	4604      	mov	r4, r0
 8004454:	4608      	mov	r0, r1
 8004456:	4611      	mov	r1, r2
 8004458:	461a      	mov	r2, r3
 800445a:	4623      	mov	r3, r4
 800445c:	71fb      	strb	r3, [r7, #7]
 800445e:	4603      	mov	r3, r0
 8004460:	71bb      	strb	r3, [r7, #6]
 8004462:	460b      	mov	r3, r1
 8004464:	717b      	strb	r3, [r7, #5]
 8004466:	4613      	mov	r3, r2
 8004468:	713b      	strb	r3, [r7, #4]
	uint8_t pulse0_combine, pulse1_combine, pulse2_combine, pulse3_combine;
	uint8_t pulse0_abs, pulse1_abs, pulse2_abs, pulse3_abs;

	// Var 0
	if (pulse0 < 0) {
 800446a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800446e:	2b00      	cmp	r3, #0
 8004470:	da06      	bge.n	8004480 <lowlayer_writePulse+0x34>
		pulse0_abs = -pulse0;
 8004472:	79fb      	ldrb	r3, [r7, #7]
 8004474:	425b      	negs	r3, r3
 8004476:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = -pulse0 | ((!DIR_J0) << 7); // Negative : Clockwise
 8004478:	79fb      	ldrb	r3, [r7, #7]
 800447a:	425b      	negs	r3, r3
 800447c:	75fb      	strb	r3, [r7, #23]
 800447e:	e006      	b.n	800448e <lowlayer_writePulse+0x42>
	} else {
		pulse0_abs = pulse0;
 8004480:	79fb      	ldrb	r3, [r7, #7]
 8004482:	74fb      	strb	r3, [r7, #19]
		pulse0_combine = pulse0 | (DIR_J0 << 7); // Positive : Anti-Clockwise
 8004484:	79fb      	ldrb	r3, [r7, #7]
 8004486:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800448a:	b25b      	sxtb	r3, r3
 800448c:	75fb      	strb	r3, [r7, #23]
	}
	// Var 1
	if (pulse1 < 0) {
 800448e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004492:	2b00      	cmp	r3, #0
 8004494:	da06      	bge.n	80044a4 <lowlayer_writePulse+0x58>
		pulse1_abs = -pulse1;
 8004496:	79bb      	ldrb	r3, [r7, #6]
 8004498:	425b      	negs	r3, r3
 800449a:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = -pulse1 | ((!DIR_J1) << 7);
 800449c:	79bb      	ldrb	r3, [r7, #6]
 800449e:	425b      	negs	r3, r3
 80044a0:	75bb      	strb	r3, [r7, #22]
 80044a2:	e006      	b.n	80044b2 <lowlayer_writePulse+0x66>
	} else {
		pulse1_abs = pulse1;
 80044a4:	79bb      	ldrb	r3, [r7, #6]
 80044a6:	74bb      	strb	r3, [r7, #18]
		pulse1_combine = pulse1 | (DIR_J1 << 7);
 80044a8:	79bb      	ldrb	r3, [r7, #6]
 80044aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80044ae:	b25b      	sxtb	r3, r3
 80044b0:	75bb      	strb	r3, [r7, #22]
	}
	// Var 2
	if (pulse2 < 0) {
 80044b2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	da0b      	bge.n	80044d2 <lowlayer_writePulse+0x86>
		pulse2_abs = -pulse2;
 80044ba:	797b      	ldrb	r3, [r7, #5]
 80044bc:	425b      	negs	r3, r3
 80044be:	747b      	strb	r3, [r7, #17]
		pulse2_combine = -pulse2 | ((!DIR_J2) << 7);
 80044c0:	797b      	ldrb	r3, [r7, #5]
 80044c2:	425b      	negs	r3, r3
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	b25b      	sxtb	r3, r3
 80044c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80044cc:	b25b      	sxtb	r3, r3
 80044ce:	757b      	strb	r3, [r7, #21]
 80044d0:	e003      	b.n	80044da <lowlayer_writePulse+0x8e>
	} else {
		pulse2_abs = pulse2;
 80044d2:	797b      	ldrb	r3, [r7, #5]
 80044d4:	747b      	strb	r3, [r7, #17]
		pulse2_combine = pulse2 | (DIR_J2 << 7);
 80044d6:	797b      	ldrb	r3, [r7, #5]
 80044d8:	757b      	strb	r3, [r7, #21]
	}
	// Var 3
	if (pulse3 < 0) {
 80044da:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	da06      	bge.n	80044f0 <lowlayer_writePulse+0xa4>
		pulse3_abs = -pulse3;
 80044e2:	793b      	ldrb	r3, [r7, #4]
 80044e4:	425b      	negs	r3, r3
 80044e6:	743b      	strb	r3, [r7, #16]
		pulse3_combine = -pulse3 | ((!DIR_J3) << 7);
 80044e8:	793b      	ldrb	r3, [r7, #4]
 80044ea:	425b      	negs	r3, r3
 80044ec:	753b      	strb	r3, [r7, #20]
 80044ee:	e006      	b.n	80044fe <lowlayer_writePulse+0xb2>
	} else {
		pulse3_abs = pulse3;
 80044f0:	793b      	ldrb	r3, [r7, #4]
 80044f2:	743b      	strb	r3, [r7, #16]
		pulse3_combine = pulse3 | (DIR_J3 << 7);
 80044f4:	793b      	ldrb	r3, [r7, #4]
 80044f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80044fa:	b25b      	sxtb	r3, r3
 80044fc:	753b      	strb	r3, [r7, #20]
	}

	// Check limit
	if (pulse0_abs > LIM_PULSE_J0
 80044fe:	7cfb      	ldrb	r3, [r7, #19]
 8004500:	2b4b      	cmp	r3, #75	; 0x4b
 8004502:	d808      	bhi.n	8004516 <lowlayer_writePulse+0xca>
		|| pulse1_abs > LIM_PULSE_J1
 8004504:	7cbb      	ldrb	r3, [r7, #18]
 8004506:	2b78      	cmp	r3, #120	; 0x78
 8004508:	d805      	bhi.n	8004516 <lowlayer_writePulse+0xca>
		|| pulse2_abs > LIM_PULSE_J2
 800450a:	7c7b      	ldrb	r3, [r7, #17]
 800450c:	2b7d      	cmp	r3, #125	; 0x7d
 800450e:	d802      	bhi.n	8004516 <lowlayer_writePulse+0xca>
		|| pulse3_abs > LIM_PULSE_J3) {
 8004510:	7c3b      	ldrb	r3, [r7, #16]
 8004512:	2b65      	cmp	r3, #101	; 0x65
 8004514:	d901      	bls.n	800451a <lowlayer_writePulse+0xce>
		return FALSE;
 8004516:	2300      	movs	r3, #0
 8004518:	e04b      	b.n	80045b2 <lowlayer_writePulse+0x166>
//	if (pulse3_abs == 0) {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // Disable
//	} else {
//		HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
//	}
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_RESET);
 800451a:	2200      	movs	r2, #0
 800451c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004520:	4826      	ldr	r0, [pc, #152]	; (80045bc <lowlayer_writePulse+0x170>)
 8004522:	f007 fbd1 	bl	800bcc8 <HAL_GPIO_WritePin>

	// Write to Module DDA
	FSMC_Write(ADDRESS_DDA_0, (uint32_t)pulse0_combine);
 8004526:	7dfb      	ldrb	r3, [r7, #23]
 8004528:	4619      	mov	r1, r3
 800452a:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
 800452e:	f7fe fbb7 	bl	8002ca0 <FSMC_Write>
	FSMC_Write(ADDRESS_DDA_1, (uint32_t)pulse1_combine);
 8004532:	7dbb      	ldrb	r3, [r7, #22]
 8004534:	4619      	mov	r1, r3
 8004536:	4822      	ldr	r0, [pc, #136]	; (80045c0 <lowlayer_writePulse+0x174>)
 8004538:	f7fe fbb2 	bl	8002ca0 <FSMC_Write>
	FSMC_Write(ADDRESS_DDA_2, (uint32_t)pulse2_combine);
 800453c:	7d7b      	ldrb	r3, [r7, #21]
 800453e:	4619      	mov	r1, r3
 8004540:	4820      	ldr	r0, [pc, #128]	; (80045c4 <lowlayer_writePulse+0x178>)
 8004542:	f7fe fbad 	bl	8002ca0 <FSMC_Write>
	FSMC_Write(ADDRESS_DDA_3, (uint32_t)pulse3_combine);
 8004546:	7d3b      	ldrb	r3, [r7, #20]
 8004548:	4619      	mov	r1, r3
 800454a:	481f      	ldr	r0, [pc, #124]	; (80045c8 <lowlayer_writePulse+0x17c>)
 800454c:	f7fe fba8 	bl	8002ca0 <FSMC_Write>

	// Trigger
	uint8_t delay = 100;
 8004550:	2364      	movs	r3, #100	; 0x64
 8004552:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_RESET);
 8004554:	2200      	movs	r2, #0
 8004556:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800455a:	481c      	ldr	r0, [pc, #112]	; (80045cc <lowlayer_writePulse+0x180>)
 800455c:	f007 fbb4 	bl	800bcc8 <HAL_GPIO_WritePin>
	while (delay--);
 8004560:	bf00      	nop
 8004562:	7bfb      	ldrb	r3, [r7, #15]
 8004564:	1e5a      	subs	r2, r3, #1
 8004566:	73fa      	strb	r2, [r7, #15]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1fa      	bne.n	8004562 <lowlayer_writePulse+0x116>
	HAL_GPIO_WritePin(PULSE_WRITE_GPIO_Port, PULSE_WRITE_Pin, GPIO_PIN_SET);
 800456c:	2201      	movs	r2, #1
 800456e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004572:	4816      	ldr	r0, [pc, #88]	; (80045cc <lowlayer_writePulse+0x180>)
 8004574:	f007 fba8 	bl	800bcc8 <HAL_GPIO_WritePin>

	// Accumulate
	pulse_accumulate[0] += pulse0;
 8004578:	4b15      	ldr	r3, [pc, #84]	; (80045d0 <lowlayer_writePulse+0x184>)
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004580:	4413      	add	r3, r2
 8004582:	4a13      	ldr	r2, [pc, #76]	; (80045d0 <lowlayer_writePulse+0x184>)
 8004584:	6013      	str	r3, [r2, #0]
	pulse_accumulate[1] += pulse1;
 8004586:	4b12      	ldr	r3, [pc, #72]	; (80045d0 <lowlayer_writePulse+0x184>)
 8004588:	685a      	ldr	r2, [r3, #4]
 800458a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800458e:	4413      	add	r3, r2
 8004590:	4a0f      	ldr	r2, [pc, #60]	; (80045d0 <lowlayer_writePulse+0x184>)
 8004592:	6053      	str	r3, [r2, #4]
	pulse_accumulate[2] += pulse2;
 8004594:	4b0e      	ldr	r3, [pc, #56]	; (80045d0 <lowlayer_writePulse+0x184>)
 8004596:	689a      	ldr	r2, [r3, #8]
 8004598:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800459c:	4413      	add	r3, r2
 800459e:	4a0c      	ldr	r2, [pc, #48]	; (80045d0 <lowlayer_writePulse+0x184>)
 80045a0:	6093      	str	r3, [r2, #8]
	pulse_accumulate[3] += pulse3;
 80045a2:	4b0b      	ldr	r3, [pc, #44]	; (80045d0 <lowlayer_writePulse+0x184>)
 80045a4:	68da      	ldr	r2, [r3, #12]
 80045a6:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80045aa:	4413      	add	r3, r2
 80045ac:	4a08      	ldr	r2, [pc, #32]	; (80045d0 <lowlayer_writePulse+0x184>)
 80045ae:	60d3      	str	r3, [r2, #12]

	return TRUE;
 80045b0:	2301      	movs	r3, #1
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	371c      	adds	r7, #28
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd90      	pop	{r4, r7, pc}
 80045ba:	bf00      	nop
 80045bc:	40020000 	.word	0x40020000
 80045c0:	60000002 	.word	0x60000002
 80045c4:	60000004 	.word	0x60000004
 80045c8:	60000006 	.word	0x60000006
 80045cc:	40020c00 	.word	0x40020c00
 80045d0:	20005310 	.word	0x20005310

080045d4 <lowlayer_resetEncoder>:

void	lowlayer_resetEncoder(void) {
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
	// Trigger
	uint8_t delay = 100;
 80045da:	2364      	movs	r3, #100	; 0x64
 80045dc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_SET);
 80045de:	2201      	movs	r2, #1
 80045e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80045e4:	4809      	ldr	r0, [pc, #36]	; (800460c <lowlayer_resetEncoder+0x38>)
 80045e6:	f007 fb6f 	bl	800bcc8 <HAL_GPIO_WritePin>
	while (delay--);
 80045ea:	bf00      	nop
 80045ec:	79fb      	ldrb	r3, [r7, #7]
 80045ee:	1e5a      	subs	r2, r3, #1
 80045f0:	71fa      	strb	r2, [r7, #7]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1fa      	bne.n	80045ec <lowlayer_resetEncoder+0x18>
	HAL_GPIO_WritePin(ENCODER_RESET_GPIO_Port, ENCODER_RESET_Pin, GPIO_PIN_RESET);
 80045f6:	2200      	movs	r2, #0
 80045f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80045fc:	4803      	ldr	r0, [pc, #12]	; (800460c <lowlayer_resetEncoder+0x38>)
 80045fe:	f007 fb63 	bl	800bcc8 <HAL_GPIO_WritePin>
}
 8004602:	bf00      	nop
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	40020c00 	.word	0x40020c00

08004610 <lowlayer_readLimitSwitch>:

uint8_t lowlayer_readLimitSwitch(void) {
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
	uint16_t read_data = FSMC_Read(ADDRESS_LIMIT);
 8004616:	4805      	ldr	r0, [pc, #20]	; (800462c <lowlayer_readLimitSwitch+0x1c>)
 8004618:	f7fe fb51 	bl	8002cbe <FSMC_Read>
 800461c:	4603      	mov	r3, r0
 800461e:	80fb      	strh	r3, [r7, #6]

	return (uint8_t)read_data;
 8004620:	88fb      	ldrh	r3, [r7, #6]
 8004622:	b2db      	uxtb	r3, r3
}
 8004624:	4618      	mov	r0, r3
 8004626:	3708      	adds	r7, #8
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	60000020 	.word	0x60000020

08004630 <lowlayer_readEncoder>:

int32_t lowlayer_readEncoder(uint8_t encoder_num) {
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	4603      	mov	r3, r0
 8004638:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (encoder_num <= 2) {
 800463a:	79fb      	ldrb	r3, [r7, #7]
 800463c:	2b02      	cmp	r3, #2
 800463e:	d81c      	bhi.n	800467a <lowlayer_readEncoder+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_ENC0_LOW + encoder_num*4);
 8004640:	79fb      	ldrb	r3, [r7, #7]
 8004642:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 8004646:	3310      	adds	r3, #16
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	4618      	mov	r0, r3
 800464c:	f7fe fb37 	bl	8002cbe <FSMC_Read>
 8004650:	4603      	mov	r3, r0
 8004652:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_ENC0_LOW + encoder_num*4 + 2);
 8004654:	79fb      	ldrb	r3, [r7, #7]
 8004656:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 800465a:	3310      	adds	r3, #16
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	3302      	adds	r3, #2
 8004660:	4618      	mov	r0, r3
 8004662:	f7fe fb2c 	bl	8002cbe <FSMC_Read>
 8004666:	4603      	mov	r3, r0
 8004668:	813b      	strh	r3, [r7, #8]
		data = high_word;
 800466a:	893b      	ldrh	r3, [r7, #8]
 800466c:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	041a      	lsls	r2, r3, #16
 8004672:	897b      	ldrh	r3, [r7, #10]
 8004674:	4313      	orrs	r3, r2
 8004676:	60fb      	str	r3, [r7, #12]
 8004678:	e001      	b.n	800467e <lowlayer_readEncoder+0x4e>
	} else {
		data = 0;
 800467a:	2300      	movs	r3, #0
 800467c:	60fb      	str	r3, [r7, #12]
	}
	return data;
 800467e:	68fb      	ldr	r3, [r7, #12]
}
 8004680:	4618      	mov	r0, r3
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <lowlayer_readCapture>:

int32_t lowlayer_readCapture(uint8_t capture_num) {
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	4603      	mov	r3, r0
 8004690:	71fb      	strb	r3, [r7, #7]
	int32_t data;
	if (capture_num <= 2) {
 8004692:	79fb      	ldrb	r3, [r7, #7]
 8004694:	2b02      	cmp	r3, #2
 8004696:	d81c      	bhi.n	80046d2 <lowlayer_readCapture+0x4a>
		uint16_t low_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4);
 8004698:	79fb      	ldrb	r3, [r7, #7]
 800469a:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 800469e:	3318      	adds	r3, #24
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7fe fb0b 	bl	8002cbe <FSMC_Read>
 80046a8:	4603      	mov	r3, r0
 80046aa:	817b      	strh	r3, [r7, #10]
		uint16_t high_word = FSMC_Read(ADDRESS_CAP0_LOW + capture_num*4 + 2);
 80046ac:	79fb      	ldrb	r3, [r7, #7]
 80046ae:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 80046b2:	3318      	adds	r3, #24
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	3302      	adds	r3, #2
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7fe fb00 	bl	8002cbe <FSMC_Read>
 80046be:	4603      	mov	r3, r0
 80046c0:	813b      	strh	r3, [r7, #8]
		data = high_word;
 80046c2:	893b      	ldrh	r3, [r7, #8]
 80046c4:	60fb      	str	r3, [r7, #12]
		data = (data << 16) | low_word;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	041a      	lsls	r2, r3, #16
 80046ca:	897b      	ldrh	r3, [r7, #10]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	60fb      	str	r3, [r7, #12]
 80046d0:	e001      	b.n	80046d6 <lowlayer_readCapture+0x4e>
	} else {
		data = 0;
 80046d2:	2300      	movs	r3, #0
 80046d4:	60fb      	str	r3, [r7, #12]
	}
	return data;
 80046d6:	68fb      	ldr	r3, [r7, #12]
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <lowlayer_updateEncoder>:

void	lowlayer_updateEncoder(void) {
 80046e0:	b590      	push	{r4, r7, lr}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 80046e6:	2300      	movs	r3, #0
 80046e8:	71fb      	strb	r3, [r7, #7]
 80046ea:	e00b      	b.n	8004704 <lowlayer_updateEncoder+0x24>
		position_encoder[i] = lowlayer_readEncoder(i);
 80046ec:	79fc      	ldrb	r4, [r7, #7]
 80046ee:	79fb      	ldrb	r3, [r7, #7]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7ff ff9d 	bl	8004630 <lowlayer_readEncoder>
 80046f6:	4602      	mov	r2, r0
 80046f8:	4b06      	ldr	r3, [pc, #24]	; (8004714 <lowlayer_updateEncoder+0x34>)
 80046fa:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 80046fe:	79fb      	ldrb	r3, [r7, #7]
 8004700:	3301      	adds	r3, #1
 8004702:	71fb      	strb	r3, [r7, #7]
 8004704:	79fb      	ldrb	r3, [r7, #7]
 8004706:	2b02      	cmp	r3, #2
 8004708:	d9f0      	bls.n	80046ec <lowlayer_updateEncoder+0xc>
	}
}
 800470a:	bf00      	nop
 800470c:	370c      	adds	r7, #12
 800470e:	46bd      	mov	sp, r7
 8004710:	bd90      	pop	{r4, r7, pc}
 8004712:	bf00      	nop
 8004714:	20005324 	.word	0x20005324

08004718 <lowlayer_updateCapture>:

void	lowlayer_updateCapture(void) {
 8004718:	b590      	push	{r4, r7, lr}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 800471e:	2300      	movs	r3, #0
 8004720:	71fb      	strb	r3, [r7, #7]
 8004722:	e00b      	b.n	800473c <lowlayer_updateCapture+0x24>
			position_capture[i] = lowlayer_readCapture(i);
 8004724:	79fc      	ldrb	r4, [r7, #7]
 8004726:	79fb      	ldrb	r3, [r7, #7]
 8004728:	4618      	mov	r0, r3
 800472a:	f7ff ffad 	bl	8004688 <lowlayer_readCapture>
 800472e:	4602      	mov	r2, r0
 8004730:	4b06      	ldr	r3, [pc, #24]	; (800474c <lowlayer_updateCapture+0x34>)
 8004732:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	for (uint8_t i = 0; i < 3; i++) {
 8004736:	79fb      	ldrb	r3, [r7, #7]
 8004738:	3301      	adds	r3, #1
 800473a:	71fb      	strb	r3, [r7, #7]
 800473c:	79fb      	ldrb	r3, [r7, #7]
 800473e:	2b02      	cmp	r3, #2
 8004740:	d9f0      	bls.n	8004724 <lowlayer_updateCapture+0xc>
	}
}
 8004742:	bf00      	nop
 8004744:	370c      	adds	r7, #12
 8004746:	46bd      	mov	sp, r7
 8004748:	bd90      	pop	{r4, r7, pc}
 800474a:	bf00      	nop
 800474c:	20005334 	.word	0x20005334

08004750 <lowlayer_updateLimit>:

void	lowlayer_updateLimit(void) {
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
	uint8_t limit_data = lowlayer_readLimitSwitch();
 8004756:	f7ff ff5b 	bl	8004610 <lowlayer_readLimitSwitch>
 800475a:	4603      	mov	r3, r0
 800475c:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < 4; i++) {
 800475e:	2300      	movs	r3, #0
 8004760:	71fb      	strb	r3, [r7, #7]
 8004762:	e00d      	b.n	8004780 <lowlayer_updateLimit+0x30>
			limit_switch[i] = (limit_data & (0x01 << i)) ? 1 : 0;
 8004764:	79ba      	ldrb	r2, [r7, #6]
 8004766:	79fb      	ldrb	r3, [r7, #7]
 8004768:	fa42 f303 	asr.w	r3, r2, r3
 800476c:	b2da      	uxtb	r2, r3
 800476e:	79fb      	ldrb	r3, [r7, #7]
 8004770:	f002 0201 	and.w	r2, r2, #1
 8004774:	b2d1      	uxtb	r1, r2
 8004776:	4a06      	ldr	r2, [pc, #24]	; (8004790 <lowlayer_updateLimit+0x40>)
 8004778:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 4; i++) {
 800477a:	79fb      	ldrb	r3, [r7, #7]
 800477c:	3301      	adds	r3, #1
 800477e:	71fb      	strb	r3, [r7, #7]
 8004780:	79fb      	ldrb	r3, [r7, #7]
 8004782:	2b03      	cmp	r3, #3
 8004784:	d9ee      	bls.n	8004764 <lowlayer_updateLimit+0x14>
	}
}
 8004786:	bf00      	nop
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	20005330 	.word	0x20005330

08004794 <lowlayer_setOutput>:

void	lowlayer_setOutput(uint8_t value) {
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	4603      	mov	r3, r0
 800479c:	71fb      	strb	r3, [r7, #7]
	if (value > 0) {
 800479e:	79fb      	ldrb	r3, [r7, #7]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d006      	beq.n	80047b2 <lowlayer_setOutput+0x1e>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_SET);
 80047a4:	2201      	movs	r2, #1
 80047a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80047aa:	4807      	ldr	r0, [pc, #28]	; (80047c8 <lowlayer_setOutput+0x34>)
 80047ac:	f007 fa8c 	bl	800bcc8 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
	}
}
 80047b0:	e005      	b.n	80047be <lowlayer_setOutput+0x2a>
		HAL_GPIO_WritePin(OUTPUT_2_GPIO_Port, OUTPUT_2_Pin, GPIO_PIN_RESET);
 80047b2:	2200      	movs	r2, #0
 80047b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80047b8:	4803      	ldr	r0, [pc, #12]	; (80047c8 <lowlayer_setOutput+0x34>)
 80047ba:	f007 fa85 	bl	800bcc8 <HAL_GPIO_WritePin>
}
 80047be:	bf00      	nop
 80047c0:	3708      	adds	r7, #8
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	40020400 	.word	0x40020400

080047cc <lowlayer_CPLD_Init>:

void	lowlayer_CPLD_Init(void) {
 80047cc:	b580      	push	{r7, lr}
 80047ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STOP_GPIO_Port, STOP_Pin, GPIO_PIN_SET); // STOP low active
 80047d0:	2201      	movs	r2, #1
 80047d2:	2140      	movs	r1, #64	; 0x40
 80047d4:	4802      	ldr	r0, [pc, #8]	; (80047e0 <lowlayer_CPLD_Init+0x14>)
 80047d6:	f007 fa77 	bl	800bcc8 <HAL_GPIO_WritePin>
}
 80047da:	bf00      	nop
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	40020c00 	.word	0x40020c00

080047e4 <lowlayer_stepMotorInit>:

void	lowlayer_stepMotorInit(void) {
 80047e4:	b580      	push	{r7, lr}
 80047e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STEP_ENABLE_GPIO_Port, STEP_ENABLE_Pin, GPIO_PIN_SET); // ENABLE low active
 80047e8:	2201      	movs	r2, #1
 80047ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80047ee:	4808      	ldr	r0, [pc, #32]	; (8004810 <lowlayer_stepMotorInit+0x2c>)
 80047f0:	f007 fa6a 	bl	800bcc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_RESET_GPIO_Port, STEP_RESET_Pin, GPIO_PIN_SET); // RESET low active
 80047f4:	2201      	movs	r2, #1
 80047f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80047fa:	4805      	ldr	r0, [pc, #20]	; (8004810 <lowlayer_stepMotorInit+0x2c>)
 80047fc:	f007 fa64 	bl	800bcc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_SLEEP_GPIO_Port, STEP_SLEEP_Pin, GPIO_PIN_SET); // SLEEP low active
 8004800:	2201      	movs	r2, #1
 8004802:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004806:	4802      	ldr	r0, [pc, #8]	; (8004810 <lowlayer_stepMotorInit+0x2c>)
 8004808:	f007 fa5e 	bl	800bcc8 <HAL_GPIO_WritePin>
}
 800480c:	bf00      	nop
 800480e:	bd80      	pop	{r7, pc}
 8004810:	40020000 	.word	0x40020000

08004814 <scaraStartup>:
											 "Over Accelerate",
											 "Wrong Joint Num",
											 "Wrong Coordinate"
											};

void				scaraStartup(void) {
 8004814:	b580      	push	{r7, lr}
 8004816:	af00      	add	r7, sp, #0
#ifdef SIMULATION
	scaraSetScanFlag();
#endif
	lowlayer_CPLD_Init();
 8004818:	f7ff ffd8 	bl	80047cc <lowlayer_CPLD_Init>
	lowlayer_stepMotorInit();
 800481c:	f7ff ffe2 	bl	80047e4 <lowlayer_stepMotorInit>
	lowlayer_resetEncoder();
 8004820:	f7ff fed8 	bl	80045d4 <lowlayer_resetEncoder>
	lowlayer_writePulse(0, 0, 0, 0);
 8004824:	2300      	movs	r3, #0
 8004826:	2200      	movs	r2, #0
 8004828:	2100      	movs	r1, #0
 800482a:	2000      	movs	r0, #0
 800482c:	f7ff fe0e 	bl	800444c <lowlayer_writePulse>
}
 8004830:	bf00      	nop
 8004832:	bd80      	pop	{r7, pc}
 8004834:	0000      	movs	r0, r0
	...

08004838 <scaraInitDuty>:

/* Compute duty corresponding to new command */
SCARA_StatusTypeDef	scaraInitDuty		(DUTY_Command_TypeDef command) {
 8004838:	b084      	sub	sp, #16
 800483a:	b5b0      	push	{r4, r5, r7, lr}
 800483c:	f5ad 7d76 	sub.w	sp, sp, #984	; 0x3d8
 8004840:	af8a      	add	r7, sp, #552	; 0x228
 8004842:	f507 7ce0 	add.w	ip, r7, #448	; 0x1c0
 8004846:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	SCARA_StatusTypeDef status, status1, status2;

	/*----------- Space Task ------------*/
	if 			(DUTY_SPACE_TASK == command.space_type) {
 800484a:	f897 31cd 	ldrb.w	r3, [r7, #461]	; 0x1cd
 800484e:	2b00      	cmp	r3, #0
 8004850:	f040 834c 	bne.w	8004eec <scaraInitDuty+0x6b4>
		double total_s, angle_s;
		int8_t dir_angle;
		SCARA_PositionTypeDef	target_point;
		// Change Degree --> Radian
		command.target_point.roll = command.target_point.roll*PI/180.0;
 8004854:	e9d7 0192 	ldrd	r0, r1, [r7, #584]	; 0x248
 8004858:	a3ab      	add	r3, pc, #684	; (adr r3, 8004b08 <scaraInitDuty+0x2d0>)
 800485a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485e:	f7fb fecb 	bl	80005f8 <__aeabi_dmul>
 8004862:	4602      	mov	r2, r0
 8004864:	460b      	mov	r3, r1
 8004866:	4610      	mov	r0, r2
 8004868:	4619      	mov	r1, r3
 800486a:	f04f 0200 	mov.w	r2, #0
 800486e:	4ba8      	ldr	r3, [pc, #672]	; (8004b10 <scaraInitDuty+0x2d8>)
 8004870:	f7fb ffec 	bl	800084c <__aeabi_ddiv>
 8004874:	4602      	mov	r2, r0
 8004876:	460b      	mov	r3, r1
 8004878:	e9c7 2392 	strd	r2, r3, [r7, #584]	; 0x248
		// Coordinate
		if( DUTY_COORDINATES_REL == command.coordinate_type) {
 800487c:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 8004880:	2b01      	cmp	r3, #1
 8004882:	d130      	bne.n	80048e6 <scaraInitDuty+0xae>
			target_point.x 		= positionCurrent.x + command.target_point.x;
 8004884:	4ba3      	ldr	r3, [pc, #652]	; (8004b14 <scaraInitDuty+0x2dc>)
 8004886:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800488a:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 800488e:	f7fb fcfd 	bl	800028c <__adddf3>
 8004892:	4602      	mov	r2, r0
 8004894:	460b      	mov	r3, r1
 8004896:	4639      	mov	r1, r7
 8004898:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			target_point.y 		= positionCurrent.y + command.target_point.y;
 800489c:	4b9d      	ldr	r3, [pc, #628]	; (8004b14 <scaraInitDuty+0x2dc>)
 800489e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80048a2:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 80048a6:	f7fb fcf1 	bl	800028c <__adddf3>
 80048aa:	4602      	mov	r2, r0
 80048ac:	460b      	mov	r3, r1
 80048ae:	4639      	mov	r1, r7
 80048b0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			target_point.z 		= positionCurrent.z + command.target_point.z;
 80048b4:	4b97      	ldr	r3, [pc, #604]	; (8004b14 <scaraInitDuty+0x2dc>)
 80048b6:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 80048ba:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 80048be:	f7fb fce5 	bl	800028c <__adddf3>
 80048c2:	4602      	mov	r2, r0
 80048c4:	460b      	mov	r3, r1
 80048c6:	4639      	mov	r1, r7
 80048c8:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			target_point.roll	= positionCurrent.roll + command.target_point.roll;
 80048cc:	4b91      	ldr	r3, [pc, #580]	; (8004b14 <scaraInitDuty+0x2dc>)
 80048ce:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80048d2:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 80048d6:	f7fb fcd9 	bl	800028c <__adddf3>
 80048da:	4602      	mov	r2, r0
 80048dc:	460b      	mov	r3, r1
 80048de:	4639      	mov	r1, r7
 80048e0:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 80048e4:	e01b      	b.n	800491e <scaraInitDuty+0xe6>
		} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 80048e6:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d114      	bne.n	8004918 <scaraInitDuty+0xe0>
			target_point.x 		= command.target_point.x;
 80048ee:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 80048f2:	4639      	mov	r1, r7
 80048f4:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			target_point.y 		= command.target_point.y;
 80048f8:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 80048fc:	4639      	mov	r1, r7
 80048fe:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
			target_point.z 		= command.target_point.z;
 8004902:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 8004906:	4639      	mov	r1, r7
 8004908:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
			target_point.roll	= command.target_point.roll;
 800490c:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8004910:	4639      	mov	r1, r7
 8004912:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8004916:	e002      	b.n	800491e <scaraInitDuty+0xe6>
		} else {
			return SCARA_STATUS_ERROR_COORDINATE;
 8004918:	230c      	movs	r3, #12
 800491a:	f001 ba71 	b.w	8005e00 <scaraInitDuty+0x15c8>
		}

		angle_s = target_point.roll - positionCurrent.roll;
 800491e:	463b      	mov	r3, r7
 8004920:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8004924:	4b7b      	ldr	r3, [pc, #492]	; (8004b14 <scaraInitDuty+0x2dc>)
 8004926:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800492a:	f7fb fcad 	bl	8000288 <__aeabi_dsub>
 800492e:	4602      	mov	r2, r0
 8004930:	460b      	mov	r3, r1
 8004932:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
		dir_angle = 1;
 8004936:	2301      	movs	r3, #1
 8004938:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
		if ( angle_s < 0) {
 800493c:	f04f 0200 	mov.w	r2, #0
 8004940:	f04f 0300 	mov.w	r3, #0
 8004944:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8004948:	f7fc f8c8 	bl	8000adc <__aeabi_dcmplt>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d002      	beq.n	8004958 <scaraInitDuty+0x120>
			dir_angle = -1;
 8004952:	23ff      	movs	r3, #255	; 0xff
 8004954:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
		}
		if ( fabs(angle_s) > PI) {
 8004958:	f8d7 4198 	ldr.w	r4, [r7, #408]	; 0x198
 800495c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8004960:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8004964:	a368      	add	r3, pc, #416	; (adr r3, 8004b08 <scaraInitDuty+0x2d0>)
 8004966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800496a:	4620      	mov	r0, r4
 800496c:	4629      	mov	r1, r5
 800496e:	f7fc f8d3 	bl	8000b18 <__aeabi_dcmpgt>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d021      	beq.n	80049bc <scaraInitDuty+0x184>
			dir_angle = -dir_angle;
 8004978:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 800497c:	425b      	negs	r3, r3
 800497e:	b2db      	uxtb	r3, r3
 8004980:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
			angle_s = (2*PI - fabsf(angle_s))*dir_angle;
 8004984:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8004988:	f7fc f92e 	bl	8000be8 <__aeabi_d2f>
 800498c:	ee07 0a90 	vmov	s15, r0
 8004990:	eef0 7ae7 	vabs.f32	s15, s15
 8004994:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8004b18 <scaraInitDuty+0x2e0>
 8004998:	ee37 7a67 	vsub.f32	s14, s14, s15
 800499c:	f997 3197 	ldrsb.w	r3, [r7, #407]	; 0x197
 80049a0:	ee07 3a90 	vmov	s15, r3
 80049a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ac:	ee17 0a90 	vmov	r0, s15
 80049b0:	f7fb fdca 	bl	8000548 <__aeabi_f2d>
 80049b4:	4603      	mov	r3, r0
 80049b6:	460c      	mov	r4, r1
 80049b8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
		}


		myDUTY.space_type = DUTY_SPACE_TASK;// Change type
 80049bc:	4b57      	ldr	r3, [pc, #348]	; (8004b1c <scaraInitDuty+0x2e4>)
 80049be:	2200      	movs	r2, #0
 80049c0:	701a      	strb	r2, [r3, #0]
		myDUTY.task.roll_start = positionCurrent.roll;
 80049c2:	4b54      	ldr	r3, [pc, #336]	; (8004b14 <scaraInitDuty+0x2dc>)
 80049c4:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 80049c8:	4a54      	ldr	r2, [pc, #336]	; (8004b1c <scaraInitDuty+0x2e4>)
 80049ca:	e9c2 34f0 	strd	r3, r4, [r2, #960]	; 0x3c0
		// 1-Path Planning
			// Straight Line
		if ( DUTY_PATH_LINE == command.path_type ) {
 80049ce:	f897 31ce 	ldrb.w	r3, [r7, #462]	; 0x1ce
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d11f      	bne.n	8004a16 <scaraInitDuty+0x1de>
			myDUTY.task.path.path_type = DUTY_PATH_LINE;
 80049d6:	4b51      	ldr	r3, [pc, #324]	; (8004b1c <scaraInitDuty+0x2e4>)
 80049d8:	2200      	movs	r2, #0
 80049da:	721a      	strb	r2, [r3, #8]
			status = scaraInitLine(&(myDUTY.task.path.line), positionCurrent, target_point);
 80049dc:	4c4d      	ldr	r4, [pc, #308]	; (8004b14 <scaraInitDuty+0x2dc>)
 80049de:	463b      	mov	r3, r7
 80049e0:	a82c      	add	r0, sp, #176	; 0xb0
 80049e2:	4619      	mov	r1, r3
 80049e4:	23b8      	movs	r3, #184	; 0xb8
 80049e6:	461a      	mov	r2, r3
 80049e8:	f010 ffaa 	bl	8015940 <memcpy>
 80049ec:	4668      	mov	r0, sp
 80049ee:	f104 0308 	add.w	r3, r4, #8
 80049f2:	22b0      	movs	r2, #176	; 0xb0
 80049f4:	4619      	mov	r1, r3
 80049f6:	f010 ffa3 	bl	8015940 <memcpy>
 80049fa:	e894 000c 	ldmia.w	r4, {r2, r3}
 80049fe:	4848      	ldr	r0, [pc, #288]	; (8004b20 <scaraInitDuty+0x2e8>)
 8004a00:	f001 fa10 	bl	8005e24 <scaraInitLine>
 8004a04:	4603      	mov	r3, r0
 8004a06:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
			total_s = myDUTY.task.path.line.total_s;
 8004a0a:	4b44      	ldr	r3, [pc, #272]	; (8004b1c <scaraInitDuty+0x2e4>)
 8004a0c:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 8004a10:	e9c7 3468 	strd	r3, r4, [r7, #416]	; 0x1a0
 8004a14:	e070      	b.n	8004af8 <scaraInitDuty+0x2c0>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == command.path_type ) {
 8004a16:	f897 31ce 	ldrb.w	r3, [r7, #462]	; 0x1ce
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d169      	bne.n	8004af2 <scaraInitDuty+0x2ba>
			SCARA_PositionTypeDef	center_point;
			if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8004a1e:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d127      	bne.n	8004a76 <scaraInitDuty+0x23e>
				center_point.x 		= positionCurrent.x + command.sub_point.x;
 8004a26:	4b3b      	ldr	r3, [pc, #236]	; (8004b14 <scaraInitDuty+0x2dc>)
 8004a28:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8004a2c:	e9d7 34ba 	ldrd	r3, r4, [r7, #744]	; 0x2e8
 8004a30:	461a      	mov	r2, r3
 8004a32:	4623      	mov	r3, r4
 8004a34:	f7fb fc2a 	bl	800028c <__adddf3>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	460c      	mov	r4, r1
 8004a3c:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
				center_point.y 		= positionCurrent.y + command.sub_point.y;
 8004a40:	4b34      	ldr	r3, [pc, #208]	; (8004b14 <scaraInitDuty+0x2dc>)
 8004a42:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8004a46:	e9d7 34bc 	ldrd	r3, r4, [r7, #752]	; 0x2f0
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	4623      	mov	r3, r4
 8004a4e:	f7fb fc1d 	bl	800028c <__adddf3>
 8004a52:	4603      	mov	r3, r0
 8004a54:	460c      	mov	r4, r1
 8004a56:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
				center_point.z 		= positionCurrent.z + command.sub_point.z;
 8004a5a:	4b2e      	ldr	r3, [pc, #184]	; (8004b14 <scaraInitDuty+0x2dc>)
 8004a5c:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8004a60:	e9d7 34be 	ldrd	r3, r4, [r7, #760]	; 0x2f8
 8004a64:	461a      	mov	r2, r3
 8004a66:	4623      	mov	r3, r4
 8004a68:	f7fb fc10 	bl	800028c <__adddf3>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	460c      	mov	r4, r1
 8004a70:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
 8004a74:	e013      	b.n	8004a9e <scaraInitDuty+0x266>
			} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8004a76:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10c      	bne.n	8004a98 <scaraInitDuty+0x260>
				center_point.x 		= command.target_point.x;
 8004a7e:	e9d7 348c 	ldrd	r3, r4, [r7, #560]	; 0x230
 8004a82:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
				center_point.y 		= command.target_point.y;
 8004a86:	e9d7 348e 	ldrd	r3, r4, [r7, #568]	; 0x238
 8004a8a:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
				center_point.z 		= command.target_point.z;
 8004a8e:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 8004a92:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
 8004a96:	e002      	b.n	8004a9e <scaraInitDuty+0x266>
			} else {
				return SCARA_STATUS_ERROR_COORDINATE;
 8004a98:	230c      	movs	r3, #12
			return SCARA_STATUS_ERROR_COORDINATE;
 8004a9a:	f001 b9b1 	b.w	8005e00 <scaraInitDuty+0x15c8>
			}

			myDUTY.task.path.path_type = DUTY_PATH_CIRCLE;
 8004a9e:	4b1f      	ldr	r3, [pc, #124]	; (8004b1c <scaraInitDuty+0x2e4>)
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	721a      	strb	r2, [r3, #8]
			status = scaraInitCircle(&(myDUTY.task.path.circle),
 8004aa4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8004aa8:	4c1a      	ldr	r4, [pc, #104]	; (8004b14 <scaraInitDuty+0x2dc>)
 8004aaa:	9388      	str	r3, [sp, #544]	; 0x220
 8004aac:	a85a      	add	r0, sp, #360	; 0x168
 8004aae:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004ab2:	22b8      	movs	r2, #184	; 0xb8
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	f010 ff43 	bl	8015940 <memcpy>
 8004aba:	463b      	mov	r3, r7
 8004abc:	a82c      	add	r0, sp, #176	; 0xb0
 8004abe:	4619      	mov	r1, r3
 8004ac0:	23b8      	movs	r3, #184	; 0xb8
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	f010 ff3c 	bl	8015940 <memcpy>
 8004ac8:	4668      	mov	r0, sp
 8004aca:	f104 0308 	add.w	r3, r4, #8
 8004ace:	22b0      	movs	r2, #176	; 0xb0
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	f010 ff35 	bl	8015940 <memcpy>
 8004ad6:	e894 000c 	ldmia.w	r4, {r2, r3}
 8004ada:	4812      	ldr	r0, [pc, #72]	; (8004b24 <scaraInitDuty+0x2ec>)
 8004adc:	f001 fa68 	bl	8005fb0 <scaraInitCircle>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
										positionCurrent,
										target_point,
										center_point,
										command.sub_para_int );
			total_s = myDUTY.task.path.circle.total_s;
 8004ae6:	4b0d      	ldr	r3, [pc, #52]	; (8004b1c <scaraInitDuty+0x2e4>)
 8004ae8:	e9d3 343a 	ldrd	r3, r4, [r3, #232]	; 0xe8
 8004aec:	e9c7 3468 	strd	r3, r4, [r7, #416]	; 0x1a0
 8004af0:	e002      	b.n	8004af8 <scaraInitDuty+0x2c0>

		} else {
			return SCARA_STATUS_ERROR_TASK;
 8004af2:	2303      	movs	r3, #3
 8004af4:	f001 b984 	b.w	8005e00 <scaraInitDuty+0x15c8>
		}

		if ( SCARA_STATUS_OK != status) {
 8004af8:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d013      	beq.n	8004b28 <scaraInitDuty+0x2f0>
			return status;
 8004b00:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8004b04:	f001 b97c 	b.w	8005e00 <scaraInitDuty+0x15c8>
 8004b08:	60000000 	.word	0x60000000
 8004b0c:	400921fb 	.word	0x400921fb
 8004b10:	40668000 	.word	0x40668000
 8004b14:	20005e38 	.word	0x20005e38
 8004b18:	40c90fdb 	.word	0x40c90fdb
 8004b1c:	20005378 	.word	0x20005378
 8004b20:	20005388 	.word	0x20005388
 8004b24:	200053f8 	.word	0x200053f8
		}

		// 2-Trajectory Planning
			// LSPB
		if ( DUTY_TRAJECTORY_LSPB == command.trajec_type ) {
 8004b28:	f897 31d0 	ldrb.w	r3, [r7, #464]	; 0x1d0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f040 80dd 	bne.w	8004cec <scaraInitDuty+0x4b4>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8004b32:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d145      	bne.n	8004bc6 <scaraInitDuty+0x38e>
				myDUTY.task.trajectory_3d.lspb.Tf = command.time_total;
 8004b3a:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8004b3e:	4ac8      	ldr	r2, [pc, #800]	; (8004e60 <scaraInitDuty+0x628>)
 8004b40:	e9c2 345a 	strd	r3, r4, [r2, #360]	; 0x168
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8004b44:	4bc6      	ldr	r3, [pc, #792]	; (8004e60 <scaraInitDuty+0x628>)
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8004b4c:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004b50:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004b54:	eeb0 2a46 	vmov.f32	s4, s12
 8004b58:	eef0 2a66 	vmov.f32	s5, s13
 8004b5c:	eeb0 1a47 	vmov.f32	s2, s14
 8004b60:	eef0 1a67 	vmov.f32	s3, s15
 8004b64:	2201      	movs	r2, #1
 8004b66:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8004b6a:	2104      	movs	r1, #4
 8004b6c:	48bd      	ldr	r0, [pc, #756]	; (8004e64 <scaraInitDuty+0x62c>)
 8004b6e:	f001 fb97 	bl	80062a0 <scaraInitLSPB>
 8004b72:	4603      	mov	r3, r0
 8004b74:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
						 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

				myDUTY.task.trajectory_roll.lspb.Tf = command.time_total;
 8004b78:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8004b7c:	4ab8      	ldr	r2, [pc, #736]	; (8004e60 <scaraInitDuty+0x628>)
 8004b7e:	e9c2 34b0 	strd	r3, r4, [r2, #704]	; 0x2c0
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8004b82:	4bb7      	ldr	r3, [pc, #732]	; (8004e60 <scaraInitDuty+0x628>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
				status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 8004b8a:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004b8e:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004b92:	eeb0 2a46 	vmov.f32	s4, s12
 8004b96:	eef0 2a66 	vmov.f32	s5, s13
 8004b9a:	eeb0 1a47 	vmov.f32	s2, s14
 8004b9e:	eef0 1a67 	vmov.f32	s3, s15
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8004ba8:	2105      	movs	r1, #5
 8004baa:	48af      	ldr	r0, [pc, #700]	; (8004e68 <scaraInitDuty+0x630>)
 8004bac:	f001 fb78 	bl	80062a0 <scaraInitLSPB>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
						 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
				myDUTY.time_total = command.time_total;
 8004bb6:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8004bba:	4aa9      	ldr	r2, [pc, #676]	; (8004e60 <scaraInitDuty+0x628>)
 8004bbc:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8004bc0:	e9c2 3400 	strd	r3, r4, [r2]
 8004bc4:	e181      	b.n	8004eca <scaraInitDuty+0x692>

			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8004bc6:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	f040 808b 	bne.w	8004ce6 <scaraInitDuty+0x4ae>
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8004bd0:	4ba3      	ldr	r3, [pc, #652]	; (8004e60 <scaraInitDuty+0x628>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8004bd8:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004bdc:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004be0:	eeb0 2a46 	vmov.f32	s4, s12
 8004be4:	eef0 2a66 	vmov.f32	s5, s13
 8004be8:	eeb0 1a47 	vmov.f32	s2, s14
 8004bec:	eef0 1a67 	vmov.f32	s3, s15
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8004bf6:	2104      	movs	r1, #4
 8004bf8:	489a      	ldr	r0, [pc, #616]	; (8004e64 <scaraInitDuty+0x62c>)
 8004bfa:	f001 fb51 	bl	80062a0 <scaraInitLSPB>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
						 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_LSPB;
 8004c04:	4b96      	ldr	r3, [pc, #600]	; (8004e60 <scaraInitDuty+0x628>)
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
				status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 8004c0c:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004c10:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004c14:	eeb0 2a46 	vmov.f32	s4, s12
 8004c18:	eef0 2a66 	vmov.f32	s5, s13
 8004c1c:	eeb0 1a47 	vmov.f32	s2, s14
 8004c20:	eef0 1a67 	vmov.f32	s3, s15
 8004c24:	2200      	movs	r2, #0
 8004c26:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8004c2a:	2105      	movs	r1, #5
 8004c2c:	488e      	ldr	r0, [pc, #568]	; (8004e68 <scaraInitDuty+0x630>)
 8004c2e:	f001 fb37 	bl	80062a0 <scaraInitLSPB>
 8004c32:	4603      	mov	r3, r0
 8004c34:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
						 angle_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				// Synchronous time end
				if(myDUTY.task.trajectory_3d.lspb.Tf > myDUTY.task.trajectory_roll.lspb.Tf) {
 8004c38:	4b89      	ldr	r3, [pc, #548]	; (8004e60 <scaraInitDuty+0x628>)
 8004c3a:	e9d3 015a 	ldrd	r0, r1, [r3, #360]	; 0x168
 8004c3e:	4b88      	ldr	r3, [pc, #544]	; (8004e60 <scaraInitDuty+0x628>)
 8004c40:	e9d3 34b0 	ldrd	r3, r4, [r3, #704]	; 0x2c0
 8004c44:	461a      	mov	r2, r3
 8004c46:	4623      	mov	r3, r4
 8004c48:	f7fb ff66 	bl	8000b18 <__aeabi_dcmpgt>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d024      	beq.n	8004c9c <scaraInitDuty+0x464>
					myDUTY.task.trajectory_roll.lspb.Tf = myDUTY.task.trajectory_3d.lspb.Tf;
 8004c52:	4b83      	ldr	r3, [pc, #524]	; (8004e60 <scaraInitDuty+0x628>)
 8004c54:	e9d3 345a 	ldrd	r3, r4, [r3, #360]	; 0x168
 8004c58:	4a81      	ldr	r2, [pc, #516]	; (8004e60 <scaraInitDuty+0x628>)
 8004c5a:	e9c2 34b0 	strd	r3, r4, [r2, #704]	; 0x2c0
					status2 = scaraInitLSPB(&(myDUTY.task.trajectory_roll.lspb), TRAJECTORY_ROLL,
 8004c5e:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004c62:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004c66:	eeb0 2a46 	vmov.f32	s4, s12
 8004c6a:	eef0 2a66 	vmov.f32	s5, s13
 8004c6e:	eeb0 1a47 	vmov.f32	s2, s14
 8004c72:	eef0 1a67 	vmov.f32	s3, s15
 8004c76:	2201      	movs	r2, #1
 8004c78:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8004c7c:	2105      	movs	r1, #5
 8004c7e:	487a      	ldr	r0, [pc, #488]	; (8004e68 <scaraInitDuty+0x630>)
 8004c80:	f001 fb0e 	bl	80062a0 <scaraInitLSPB>
 8004c84:	4603      	mov	r3, r0
 8004c86:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
							 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_3d.lspb.Tf;
 8004c8a:	4b75      	ldr	r3, [pc, #468]	; (8004e60 <scaraInitDuty+0x628>)
 8004c8c:	e9d3 345a 	ldrd	r3, r4, [r3, #360]	; 0x168
 8004c90:	4a73      	ldr	r2, [pc, #460]	; (8004e60 <scaraInitDuty+0x628>)
 8004c92:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8004c96:	e9c2 3400 	strd	r3, r4, [r2]
 8004c9a:	e116      	b.n	8004eca <scaraInitDuty+0x692>
				} else {
					myDUTY.task.trajectory_3d.lspb.Tf = myDUTY.task.trajectory_roll.lspb.Tf;
 8004c9c:	4b70      	ldr	r3, [pc, #448]	; (8004e60 <scaraInitDuty+0x628>)
 8004c9e:	e9d3 34b0 	ldrd	r3, r4, [r3, #704]	; 0x2c0
 8004ca2:	4a6f      	ldr	r2, [pc, #444]	; (8004e60 <scaraInitDuty+0x628>)
 8004ca4:	e9c2 345a 	strd	r3, r4, [r2, #360]	; 0x168
					status1 = scaraInitLSPB(&(myDUTY.task.trajectory_3d.lspb), TRAJECTORY_3D,
 8004ca8:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004cac:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004cb0:	eeb0 2a46 	vmov.f32	s4, s12
 8004cb4:	eef0 2a66 	vmov.f32	s5, s13
 8004cb8:	eeb0 1a47 	vmov.f32	s2, s14
 8004cbc:	eef0 1a67 	vmov.f32	s3, s15
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8004cc6:	2104      	movs	r1, #4
 8004cc8:	4866      	ldr	r0, [pc, #408]	; (8004e64 <scaraInitDuty+0x62c>)
 8004cca:	f001 fae9 	bl	80062a0 <scaraInitLSPB>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
							 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_roll.lspb.Tf;
 8004cd4:	4b62      	ldr	r3, [pc, #392]	; (8004e60 <scaraInitDuty+0x628>)
 8004cd6:	e9d3 34b0 	ldrd	r3, r4, [r3, #704]	; 0x2c0
 8004cda:	4a61      	ldr	r2, [pc, #388]	; (8004e60 <scaraInitDuty+0x628>)
 8004cdc:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8004ce0:	e9c2 3400 	strd	r3, r4, [r2]
 8004ce4:	e0f1      	b.n	8004eca <scaraInitDuty+0x692>
				}
			} else {
				return SCARA_STATUS_ERROR_MODE_INIT ;
 8004ce6:	2308      	movs	r3, #8
 8004ce8:	f001 b88a 	b.w	8005e00 <scaraInitDuty+0x15c8>
			}
			// SCURVE
		} else if 	( DUTY_TRAJECTORY_SCURVE == command.trajec_type ){
 8004cec:	f897 31d0 	ldrb.w	r3, [r7, #464]	; 0x1d0
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	f040 80e7 	bne.w	8004ec4 <scaraInitDuty+0x68c>

			if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8004cf6:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d145      	bne.n	8004d8a <scaraInitDuty+0x552>
				myDUTY.task.trajectory_3d.scurve.Tf = command.time_total;
 8004cfe:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8004d02:	4a57      	ldr	r2, [pc, #348]	; (8004e60 <scaraInitDuty+0x628>)
 8004d04:	e9c2 347e 	strd	r3, r4, [r2, #504]	; 0x1f8
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8004d08:	4b55      	ldr	r3, [pc, #340]	; (8004e60 <scaraInitDuty+0x628>)
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8004d10:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004d14:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004d18:	eeb0 2a46 	vmov.f32	s4, s12
 8004d1c:	eef0 2a66 	vmov.f32	s5, s13
 8004d20:	eeb0 1a47 	vmov.f32	s2, s14
 8004d24:	eef0 1a67 	vmov.f32	s3, s15
 8004d28:	2201      	movs	r2, #1
 8004d2a:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8004d2e:	2104      	movs	r1, #4
 8004d30:	484e      	ldr	r0, [pc, #312]	; (8004e6c <scaraInitDuty+0x634>)
 8004d32:	f001 fea1 	bl	8006a78 <scaraInitScurve>
 8004d36:	4603      	mov	r3, r0
 8004d38:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
						 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

				myDUTY.task.trajectory_roll.scurve.Tf = command.time_total;
 8004d3c:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8004d40:	4a47      	ldr	r2, [pc, #284]	; (8004e60 <scaraInitDuty+0x628>)
 8004d42:	e9c2 34d4 	strd	r3, r4, [r2, #848]	; 0x350
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8004d46:	4b46      	ldr	r3, [pc, #280]	; (8004e60 <scaraInitDuty+0x628>)
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
				status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 8004d4e:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004d52:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004d56:	eeb0 2a46 	vmov.f32	s4, s12
 8004d5a:	eef0 2a66 	vmov.f32	s5, s13
 8004d5e:	eeb0 1a47 	vmov.f32	s2, s14
 8004d62:	eef0 1a67 	vmov.f32	s3, s15
 8004d66:	2201      	movs	r2, #1
 8004d68:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8004d6c:	2105      	movs	r1, #5
 8004d6e:	4840      	ldr	r0, [pc, #256]	; (8004e70 <scaraInitDuty+0x638>)
 8004d70:	f001 fe82 	bl	8006a78 <scaraInitScurve>
 8004d74:	4603      	mov	r3, r0
 8004d76:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
						 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
				myDUTY.time_total = command.time_total;
 8004d7a:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8004d7e:	4a38      	ldr	r2, [pc, #224]	; (8004e60 <scaraInitDuty+0x628>)
 8004d80:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8004d84:	e9c2 3400 	strd	r3, r4, [r2]
 8004d88:	e09f      	b.n	8004eca <scaraInitDuty+0x692>

			} else if (DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8004d8a:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	f040 8095 	bne.w	8004ebe <scaraInitDuty+0x686>
				myDUTY.task.trajectory_3d.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8004d94:	4b32      	ldr	r3, [pc, #200]	; (8004e60 <scaraInitDuty+0x628>)
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
				status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8004d9c:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004da0:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004da4:	eeb0 2a46 	vmov.f32	s4, s12
 8004da8:	eef0 2a66 	vmov.f32	s5, s13
 8004dac:	eeb0 1a47 	vmov.f32	s2, s14
 8004db0:	eef0 1a67 	vmov.f32	s3, s15
 8004db4:	2200      	movs	r2, #0
 8004db6:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8004dba:	2104      	movs	r1, #4
 8004dbc:	482b      	ldr	r0, [pc, #172]	; (8004e6c <scaraInitDuty+0x634>)
 8004dbe:	f001 fe5b 	bl	8006a78 <scaraInitScurve>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
						 total_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				myDUTY.task.trajectory_roll.trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8004dc8:	4b25      	ldr	r3, [pc, #148]	; (8004e60 <scaraInitDuty+0x628>)
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
				status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 8004dd0:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004dd4:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004dd8:	eeb0 2a46 	vmov.f32	s4, s12
 8004ddc:	eef0 2a66 	vmov.f32	s5, s13
 8004de0:	eeb0 1a47 	vmov.f32	s2, s14
 8004de4:	eef0 1a67 	vmov.f32	s3, s15
 8004de8:	2200      	movs	r2, #0
 8004dea:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8004dee:	2105      	movs	r1, #5
 8004df0:	481f      	ldr	r0, [pc, #124]	; (8004e70 <scaraInitDuty+0x638>)
 8004df2:	f001 fe41 	bl	8006a78 <scaraInitScurve>
 8004df6:	4603      	mov	r3, r0
 8004df8:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
						 angle_s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
				// synchronous time end
				if(myDUTY.task.trajectory_3d.scurve.Tf > myDUTY.task.trajectory_roll.scurve.Tf) {
 8004dfc:	4b18      	ldr	r3, [pc, #96]	; (8004e60 <scaraInitDuty+0x628>)
 8004dfe:	e9d3 017e 	ldrd	r0, r1, [r3, #504]	; 0x1f8
 8004e02:	4b17      	ldr	r3, [pc, #92]	; (8004e60 <scaraInitDuty+0x628>)
 8004e04:	e9d3 34d4 	ldrd	r3, r4, [r3, #848]	; 0x350
 8004e08:	461a      	mov	r2, r3
 8004e0a:	4623      	mov	r3, r4
 8004e0c:	f7fb fe84 	bl	8000b18 <__aeabi_dcmpgt>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d02e      	beq.n	8004e74 <scaraInitDuty+0x63c>
					myDUTY.task.trajectory_roll.scurve.Tf = myDUTY.task.trajectory_3d.scurve.Tf;
 8004e16:	4b12      	ldr	r3, [pc, #72]	; (8004e60 <scaraInitDuty+0x628>)
 8004e18:	e9d3 347e 	ldrd	r3, r4, [r3, #504]	; 0x1f8
 8004e1c:	4a10      	ldr	r2, [pc, #64]	; (8004e60 <scaraInitDuty+0x628>)
 8004e1e:	e9c2 34d4 	strd	r3, r4, [r2, #848]	; 0x350
					status2 = scaraInitScurve(&(myDUTY.task.trajectory_roll.scurve), TRAJECTORY_ROLL,
 8004e22:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004e26:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004e2a:	eeb0 2a46 	vmov.f32	s4, s12
 8004e2e:	eef0 2a66 	vmov.f32	s5, s13
 8004e32:	eeb0 1a47 	vmov.f32	s2, s14
 8004e36:	eef0 1a67 	vmov.f32	s3, s15
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	ed97 0b66 	vldr	d0, [r7, #408]	; 0x198
 8004e40:	2105      	movs	r1, #5
 8004e42:	480b      	ldr	r0, [pc, #44]	; (8004e70 <scaraInitDuty+0x638>)
 8004e44:	f001 fe18 	bl	8006a78 <scaraInitScurve>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
							 angle_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_3d.scurve.Tf;
 8004e4e:	4b04      	ldr	r3, [pc, #16]	; (8004e60 <scaraInitDuty+0x628>)
 8004e50:	e9d3 347e 	ldrd	r3, r4, [r3, #504]	; 0x1f8
 8004e54:	4a02      	ldr	r2, [pc, #8]	; (8004e60 <scaraInitDuty+0x628>)
 8004e56:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8004e5a:	e9c2 3400 	strd	r3, r4, [r2]
 8004e5e:	e034      	b.n	8004eca <scaraInitDuty+0x692>
 8004e60:	20005378 	.word	0x20005378
 8004e64:	20005490 	.word	0x20005490
 8004e68:	200055e8 	.word	0x200055e8
 8004e6c:	20005510 	.word	0x20005510
 8004e70:	20005668 	.word	0x20005668
				} else {
					myDUTY.task.trajectory_3d.scurve.Tf = myDUTY.task.trajectory_roll.scurve.Tf;
 8004e74:	4bb0      	ldr	r3, [pc, #704]	; (8005138 <scaraInitDuty+0x900>)
 8004e76:	e9d3 34d4 	ldrd	r3, r4, [r3, #848]	; 0x350
 8004e7a:	4aaf      	ldr	r2, [pc, #700]	; (8005138 <scaraInitDuty+0x900>)
 8004e7c:	e9c2 347e 	strd	r3, r4, [r2, #504]	; 0x1f8
					status1 = scaraInitScurve(&(myDUTY.task.trajectory_3d.scurve), TRAJECTORY_3D,
 8004e80:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8004e84:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8004e88:	eeb0 2a46 	vmov.f32	s4, s12
 8004e8c:	eef0 2a66 	vmov.f32	s5, s13
 8004e90:	eeb0 1a47 	vmov.f32	s2, s14
 8004e94:	eef0 1a67 	vmov.f32	s3, s15
 8004e98:	2201      	movs	r2, #1
 8004e9a:	ed97 0b68 	vldr	d0, [r7, #416]	; 0x1a0
 8004e9e:	2104      	movs	r1, #4
 8004ea0:	48a6      	ldr	r0, [pc, #664]	; (800513c <scaraInitDuty+0x904>)
 8004ea2:	f001 fde9 	bl	8006a78 <scaraInitScurve>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
							 total_s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					myDUTY.time_total = myDUTY.task.trajectory_roll.scurve.Tf;
 8004eac:	4ba2      	ldr	r3, [pc, #648]	; (8005138 <scaraInitDuty+0x900>)
 8004eae:	e9d3 34d4 	ldrd	r3, r4, [r3, #848]	; 0x350
 8004eb2:	4aa1      	ldr	r2, [pc, #644]	; (8005138 <scaraInitDuty+0x900>)
 8004eb4:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8004eb8:	e9c2 3400 	strd	r3, r4, [r2]
 8004ebc:	e005      	b.n	8004eca <scaraInitDuty+0x692>
				}
			} else {
				return SCARA_STATUS_ERROR_MODE_INIT;
 8004ebe:	2308      	movs	r3, #8
 8004ec0:	f000 bf9e 	b.w	8005e00 <scaraInitDuty+0x15c8>
			}
		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8004ec4:	2305      	movs	r3, #5
 8004ec6:	f000 bf9b 	b.w	8005e00 <scaraInitDuty+0x15c8>
		}
		// Check Init Status
		if ( SCARA_STATUS_OK != status1) {
 8004eca:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <scaraInitDuty+0x6a2>
			return status1;
 8004ed2:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8004ed6:	f000 bf93 	b.w	8005e00 <scaraInitDuty+0x15c8>
		}
		if ( SCARA_STATUS_OK != status2) {
 8004eda:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	f000 8760 	beq.w	8005da4 <scaraInitDuty+0x156c>
			return status2;
 8004ee4:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 8004ee8:	f000 bf8a 	b.w	8005e00 <scaraInitDuty+0x15c8>
		}


	/*----------- Space Joint ------------*/
	} else if (DUTY_SPACE_JOINT == command.space_type) {
 8004eec:	f897 31cd 	ldrb.w	r3, [r7, #461]	; 0x1cd
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	f040 8755 	bne.w	8005da0 <scaraInitDuty+0x1568>

		myDUTY.space_type = DUTY_SPACE_JOINT;// Change type
 8004ef6:	4b90      	ldr	r3, [pc, #576]	; (8005138 <scaraInitDuty+0x900>)
 8004ef8:	2201      	movs	r2, #1
 8004efa:	701a      	strb	r2, [r3, #0]
		myDUTY.joint.theta1_start	 = positionCurrent.Theta1;
 8004efc:	4b90      	ldr	r3, [pc, #576]	; (8005140 <scaraInitDuty+0x908>)
 8004efe:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 8004f02:	4a8d      	ldr	r2, [pc, #564]	; (8005138 <scaraInitDuty+0x900>)
 8004f04:	f602 1228 	addw	r2, r2, #2344	; 0x928
 8004f08:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.theta2_start	 = positionCurrent.Theta2;
 8004f0c:	4b8c      	ldr	r3, [pc, #560]	; (8005140 <scaraInitDuty+0x908>)
 8004f0e:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8004f12:	4a89      	ldr	r2, [pc, #548]	; (8005138 <scaraInitDuty+0x900>)
 8004f14:	f502 6213 	add.w	r2, r2, #2352	; 0x930
 8004f18:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.d3_start		 = positionCurrent.D3;
 8004f1c:	4b88      	ldr	r3, [pc, #544]	; (8005140 <scaraInitDuty+0x908>)
 8004f1e:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8004f22:	4a85      	ldr	r2, [pc, #532]	; (8005138 <scaraInitDuty+0x900>)
 8004f24:	f602 1238 	addw	r2, r2, #2360	; 0x938
 8004f28:	e9c2 3400 	strd	r3, r4, [r2]
		myDUTY.joint.theta4_start 	 = positionCurrent.Theta4;
 8004f2c:	4b84      	ldr	r3, [pc, #528]	; (8005140 <scaraInitDuty+0x908>)
 8004f2e:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 8004f32:	4a81      	ldr	r2, [pc, #516]	; (8005138 <scaraInitDuty+0x900>)
 8004f34:	f502 6214 	add.w	r2, r2, #2368	; 0x940
 8004f38:	e9c2 3400 	strd	r3, r4, [r2]

		//-----Joint Single
		if ( DUTY_JOINT_SINGLE == command.joint_type) {
 8004f3c:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f040 83d6 	bne.w	80056f2 <scaraInitDuty+0xeba>
			// Trajectory 1 profile
			double s, abs_position;
			switch(command.sub_para_int) {
 8004f46:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8004f4a:	2b03      	cmp	r3, #3
 8004f4c:	f200 814e 	bhi.w	80051ec <scaraInitDuty+0x9b4>
 8004f50:	a201      	add	r2, pc, #4	; (adr r2, 8004f58 <scaraInitDuty+0x720>)
 8004f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f56:	bf00      	nop
 8004f58:	08004f69 	.word	0x08004f69
 8004f5c:	0800500f 	.word	0x0800500f
 8004f60:	080050b5 	.word	0x080050b5
 8004f64:	08005149 	.word	0x08005149
			case 0:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 8004f68:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 8004f6c:	a370      	add	r3, pc, #448	; (adr r3, 8005130 <scaraInitDuty+0x8f8>)
 8004f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f72:	f7fb fb41 	bl	80005f8 <__aeabi_dmul>
 8004f76:	4603      	mov	r3, r0
 8004f78:	460c      	mov	r4, r1
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	4621      	mov	r1, r4
 8004f7e:	f04f 0200 	mov.w	r2, #0
 8004f82:	4b70      	ldr	r3, [pc, #448]	; (8005144 <scaraInitDuty+0x90c>)
 8004f84:	f7fb fc62 	bl	800084c <__aeabi_ddiv>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	460c      	mov	r4, r1
 8004f8c:	e9c7 3476 	strd	r3, r4, [r7, #472]	; 0x1d8
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8004f90:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d113      	bne.n	8004fc0 <scaraInitDuty+0x788>
					abs_position = myDUTY.joint.theta1_start + command.sub_para_double;
 8004f98:	4b67      	ldr	r3, [pc, #412]	; (8005138 <scaraInitDuty+0x900>)
 8004f9a:	f603 1328 	addw	r3, r3, #2344	; 0x928
 8004f9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004fa2:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	4623      	mov	r3, r4
 8004faa:	f7fb f96f 	bl	800028c <__adddf3>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	460c      	mov	r4, r1
 8004fb2:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
					s			 = command.sub_para_double;
 8004fb6:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8004fba:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 8004fbe:	e01a      	b.n	8004ff6 <scaraInitDuty+0x7be>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8004fc0:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d113      	bne.n	8004ff0 <scaraInitDuty+0x7b8>
					abs_position = command.sub_para_double;
 8004fc8:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8004fcc:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
					s			 = command.sub_para_double - myDUTY.joint.theta1_start;
 8004fd0:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 8004fd4:	4b58      	ldr	r3, [pc, #352]	; (8005138 <scaraInitDuty+0x900>)
 8004fd6:	f603 1328 	addw	r3, r3, #2344	; 0x928
 8004fda:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004fde:	461a      	mov	r2, r3
 8004fe0:	4623      	mov	r3, r4
 8004fe2:	f7fb f951 	bl	8000288 <__aeabi_dsub>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	460c      	mov	r4, r1
 8004fea:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 8004fee:	e002      	b.n	8004ff6 <scaraInitDuty+0x7be>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8004ff0:	230c      	movs	r3, #12
 8004ff2:	f000 bf05 	b.w	8005e00 <scaraInitDuty+0x15c8>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J0, abs_position)) {
 8004ff6:	ed97 0b60 	vldr	d0, [r7, #384]	; 0x180
 8004ffa:	2000      	movs	r0, #0
 8004ffc:	f003 fe44 	bl	8008c88 <scaraCheckWorkSpace1>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	f000 80f5 	beq.w	80051f2 <scaraInitDuty+0x9ba>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005008:	2307      	movs	r3, #7
 800500a:	f000 bef9 	b.w	8005e00 <scaraInitDuty+0x15c8>
				}
				break;
			case 1:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 800500e:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 8005012:	a347      	add	r3, pc, #284	; (adr r3, 8005130 <scaraInitDuty+0x8f8>)
 8005014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005018:	f7fb faee 	bl	80005f8 <__aeabi_dmul>
 800501c:	4603      	mov	r3, r0
 800501e:	460c      	mov	r4, r1
 8005020:	4618      	mov	r0, r3
 8005022:	4621      	mov	r1, r4
 8005024:	f04f 0200 	mov.w	r2, #0
 8005028:	4b46      	ldr	r3, [pc, #280]	; (8005144 <scaraInitDuty+0x90c>)
 800502a:	f7fb fc0f 	bl	800084c <__aeabi_ddiv>
 800502e:	4603      	mov	r3, r0
 8005030:	460c      	mov	r4, r1
 8005032:	e9c7 3476 	strd	r3, r4, [r7, #472]	; 0x1d8
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8005036:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 800503a:	2b01      	cmp	r3, #1
 800503c:	d113      	bne.n	8005066 <scaraInitDuty+0x82e>
					abs_position = myDUTY.joint.theta2_start + command.sub_para_double;
 800503e:	4b3e      	ldr	r3, [pc, #248]	; (8005138 <scaraInitDuty+0x900>)
 8005040:	f503 6313 	add.w	r3, r3, #2352	; 0x930
 8005044:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005048:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 800504c:	461a      	mov	r2, r3
 800504e:	4623      	mov	r3, r4
 8005050:	f7fb f91c 	bl	800028c <__adddf3>
 8005054:	4603      	mov	r3, r0
 8005056:	460c      	mov	r4, r1
 8005058:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
					s			 = command.sub_para_double;
 800505c:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8005060:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 8005064:	e01a      	b.n	800509c <scaraInitDuty+0x864>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 8005066:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 800506a:	2b00      	cmp	r3, #0
 800506c:	d113      	bne.n	8005096 <scaraInitDuty+0x85e>
					abs_position = command.sub_para_double;
 800506e:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8005072:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
					s			 = command.sub_para_double - myDUTY.joint.theta2_start;
 8005076:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 800507a:	4b2f      	ldr	r3, [pc, #188]	; (8005138 <scaraInitDuty+0x900>)
 800507c:	f503 6313 	add.w	r3, r3, #2352	; 0x930
 8005080:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005084:	461a      	mov	r2, r3
 8005086:	4623      	mov	r3, r4
 8005088:	f7fb f8fe 	bl	8000288 <__aeabi_dsub>
 800508c:	4603      	mov	r3, r0
 800508e:	460c      	mov	r4, r1
 8005090:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 8005094:	e002      	b.n	800509c <scaraInitDuty+0x864>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8005096:	230c      	movs	r3, #12
 8005098:	f000 beb2 	b.w	8005e00 <scaraInitDuty+0x15c8>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J1, abs_position)) {
 800509c:	ed97 0b60 	vldr	d0, [r7, #384]	; 0x180
 80050a0:	2001      	movs	r0, #1
 80050a2:	f003 fdf1 	bl	8008c88 <scaraCheckWorkSpace1>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f000 80a4 	beq.w	80051f6 <scaraInitDuty+0x9be>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80050ae:	2307      	movs	r3, #7
 80050b0:	f000 bea6 	b.w	8005e00 <scaraInitDuty+0x15c8>
				}
				break;
			case 2:
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 80050b4:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d113      	bne.n	80050e4 <scaraInitDuty+0x8ac>
					abs_position = myDUTY.joint.d3_start + command.sub_para_double;
 80050bc:	4b1e      	ldr	r3, [pc, #120]	; (8005138 <scaraInitDuty+0x900>)
 80050be:	f603 1338 	addw	r3, r3, #2360	; 0x938
 80050c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80050c6:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 80050ca:	461a      	mov	r2, r3
 80050cc:	4623      	mov	r3, r4
 80050ce:	f7fb f8dd 	bl	800028c <__adddf3>
 80050d2:	4603      	mov	r3, r0
 80050d4:	460c      	mov	r4, r1
 80050d6:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
					s			 = command.sub_para_double;
 80050da:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 80050de:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 80050e2:	e01a      	b.n	800511a <scaraInitDuty+0x8e2>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 80050e4:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d113      	bne.n	8005114 <scaraInitDuty+0x8dc>
					abs_position = command.sub_para_double;
 80050ec:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 80050f0:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
					s			 = command.sub_para_double - myDUTY.joint.d3_start;
 80050f4:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 80050f8:	4b0f      	ldr	r3, [pc, #60]	; (8005138 <scaraInitDuty+0x900>)
 80050fa:	f603 1338 	addw	r3, r3, #2360	; 0x938
 80050fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005102:	461a      	mov	r2, r3
 8005104:	4623      	mov	r3, r4
 8005106:	f7fb f8bf 	bl	8000288 <__aeabi_dsub>
 800510a:	4603      	mov	r3, r0
 800510c:	460c      	mov	r4, r1
 800510e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 8005112:	e002      	b.n	800511a <scaraInitDuty+0x8e2>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 8005114:	230c      	movs	r3, #12
 8005116:	f000 be73 	b.w	8005e00 <scaraInitDuty+0x15c8>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J2, abs_position)) {
 800511a:	ed97 0b60 	vldr	d0, [r7, #384]	; 0x180
 800511e:	2002      	movs	r0, #2
 8005120:	f003 fdb2 	bl	8008c88 <scaraCheckWorkSpace1>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d067      	beq.n	80051fa <scaraInitDuty+0x9c2>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800512a:	2307      	movs	r3, #7
 800512c:	f000 be68 	b.w	8005e00 <scaraInitDuty+0x15c8>
 8005130:	60000000 	.word	0x60000000
 8005134:	400921fb 	.word	0x400921fb
 8005138:	20005378 	.word	0x20005378
 800513c:	20005510 	.word	0x20005510
 8005140:	20005e38 	.word	0x20005e38
 8005144:	40668000 	.word	0x40668000
				}
				break;
			case 3:
				// Change Degree --> Radian
				command.sub_para_double = command.sub_para_double*PI/180.0;
 8005148:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 800514c:	a3cf      	add	r3, pc, #828	; (adr r3, 800548c <scaraInitDuty+0xc54>)
 800514e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005152:	f7fb fa51 	bl	80005f8 <__aeabi_dmul>
 8005156:	4603      	mov	r3, r0
 8005158:	460c      	mov	r4, r1
 800515a:	4618      	mov	r0, r3
 800515c:	4621      	mov	r1, r4
 800515e:	f04f 0200 	mov.w	r2, #0
 8005162:	4bc7      	ldr	r3, [pc, #796]	; (8005480 <scaraInitDuty+0xc48>)
 8005164:	f7fb fb72 	bl	800084c <__aeabi_ddiv>
 8005168:	4603      	mov	r3, r0
 800516a:	460c      	mov	r4, r1
 800516c:	e9c7 3476 	strd	r3, r4, [r7, #472]	; 0x1d8
				// Coordinate
				if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8005170:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 8005174:	2b01      	cmp	r3, #1
 8005176:	d113      	bne.n	80051a0 <scaraInitDuty+0x968>
					abs_position = myDUTY.joint.theta4_start + command.sub_para_double;
 8005178:	4bc2      	ldr	r3, [pc, #776]	; (8005484 <scaraInitDuty+0xc4c>)
 800517a:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 800517e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005182:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8005186:	461a      	mov	r2, r3
 8005188:	4623      	mov	r3, r4
 800518a:	f7fb f87f 	bl	800028c <__adddf3>
 800518e:	4603      	mov	r3, r0
 8005190:	460c      	mov	r4, r1
 8005192:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
					s			 = command.sub_para_double;
 8005196:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 800519a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 800519e:	e01a      	b.n	80051d6 <scaraInitDuty+0x99e>
				} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 80051a0:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d113      	bne.n	80051d0 <scaraInitDuty+0x998>
					abs_position = command.sub_para_double;
 80051a8:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 80051ac:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
					s			 = command.sub_para_double - myDUTY.joint.theta4_start;
 80051b0:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 80051b4:	4bb3      	ldr	r3, [pc, #716]	; (8005484 <scaraInitDuty+0xc4c>)
 80051b6:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 80051ba:	e9d3 3400 	ldrd	r3, r4, [r3]
 80051be:	461a      	mov	r2, r3
 80051c0:	4623      	mov	r3, r4
 80051c2:	f7fb f861 	bl	8000288 <__aeabi_dsub>
 80051c6:	4603      	mov	r3, r0
 80051c8:	460c      	mov	r4, r1
 80051ca:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
 80051ce:	e002      	b.n	80051d6 <scaraInitDuty+0x99e>
				} else {
					return SCARA_STATUS_ERROR_COORDINATE;
 80051d0:	230c      	movs	r3, #12
 80051d2:	f000 be15 	b.w	8005e00 <scaraInitDuty+0x15c8>
				}

				if( SCARA_STATUS_OK != scaraCheckWorkSpace1(TRAJECTORY_J3, abs_position)) {
 80051d6:	ed97 0b60 	vldr	d0, [r7, #384]	; 0x180
 80051da:	2003      	movs	r0, #3
 80051dc:	f003 fd54 	bl	8008c88 <scaraCheckWorkSpace1>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00b      	beq.n	80051fe <scaraInitDuty+0x9c6>
					return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80051e6:	2307      	movs	r3, #7
 80051e8:	f000 be0a 	b.w	8005e00 <scaraInitDuty+0x15c8>
				}
				break;
			default:
				return SCARA_STATUS_ERROR_JOINT_NUM;
 80051ec:	230b      	movs	r3, #11
 80051ee:	f000 be07 	b.w	8005e00 <scaraInitDuty+0x15c8>
				break;
 80051f2:	bf00      	nop
 80051f4:	e004      	b.n	8005200 <scaraInitDuty+0x9c8>
				break;
 80051f6:	bf00      	nop
 80051f8:	e002      	b.n	8005200 <scaraInitDuty+0x9c8>
				break;
 80051fa:	bf00      	nop
 80051fc:	e000      	b.n	8005200 <scaraInitDuty+0x9c8>
				break;
 80051fe:	bf00      	nop
			}

			// LSPB
			if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 8005200:	f897 31d0 	ldrb.w	r3, [r7, #464]	; 0x1d0
 8005204:	2b00      	cmp	r3, #0
 8005206:	f040 8128 	bne.w	800545a <scaraInitDuty+0xc22>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 800520a:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 800520e:	2b01      	cmp	r3, #1
 8005210:	f040 8097 	bne.w	8005342 <scaraInitDuty+0xb0a>
					for ( uint8_t i = 0; i < 4; i++) {
 8005214:	2300      	movs	r3, #0
 8005216:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 800521a:	e08c      	b.n	8005336 <scaraInitDuty+0xafe>
						if ( i == command.sub_para_int) {
 800521c:	f897 217f 	ldrb.w	r2, [r7, #383]	; 0x17f
 8005220:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8005224:	429a      	cmp	r2, r3
 8005226:	d13d      	bne.n	80052a4 <scaraInitDuty+0xa6c>
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005228:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 800522c:	4a95      	ldr	r2, [pc, #596]	; (8005484 <scaraInitDuty+0xc4c>)
 800522e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005232:	fb01 f303 	mul.w	r3, r1, r3
 8005236:	4413      	add	r3, r2
 8005238:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 800523c:	2200      	movs	r2, #0
 800523e:	701a      	strb	r2, [r3, #0]
							myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 8005240:	f897 217f 	ldrb.w	r2, [r7, #383]	; 0x17f
 8005244:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8005248:	498e      	ldr	r1, [pc, #568]	; (8005484 <scaraInitDuty+0xc4c>)
 800524a:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800524e:	fb00 f202 	mul.w	r2, r0, r2
 8005252:	440a      	add	r2, r1
 8005254:	f502 6284 	add.w	r2, r2, #1056	; 0x420
 8005258:	e9c2 3400 	strd	r3, r4, [r2]
							status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 800525c:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 8005260:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005264:	fb02 f303 	mul.w	r3, r2, r3
 8005268:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 800526c:	4a85      	ldr	r2, [pc, #532]	; (8005484 <scaraInitDuty+0xc4c>)
 800526e:	1898      	adds	r0, r3, r2
 8005270:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 8005274:	4a84      	ldr	r2, [pc, #528]	; (8005488 <scaraInitDuty+0xc50>)
 8005276:	5cd3      	ldrb	r3, [r2, r3]
 8005278:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 800527c:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8005280:	eeb0 2a46 	vmov.f32	s4, s12
 8005284:	eef0 2a66 	vmov.f32	s5, s13
 8005288:	eeb0 1a47 	vmov.f32	s2, s14
 800528c:	eef0 1a67 	vmov.f32	s3, s15
 8005290:	2201      	movs	r2, #1
 8005292:	ed97 0b62 	vldr	d0, [r7, #392]	; 0x188
 8005296:	4619      	mov	r1, r3
 8005298:	f001 f802 	bl	80062a0 <scaraInitLSPB>
 800529c:	4603      	mov	r3, r0
 800529e:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
 80052a2:	e03c      	b.n	800531e <scaraInitDuty+0xae6>
											s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
						} else {
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 80052a4:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 80052a8:	4a76      	ldr	r2, [pc, #472]	; (8005484 <scaraInitDuty+0xc4c>)
 80052aa:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80052ae:	fb01 f303 	mul.w	r3, r1, r3
 80052b2:	4413      	add	r3, r2
 80052b4:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 80052b8:	2200      	movs	r2, #0
 80052ba:	701a      	strb	r2, [r3, #0]
							myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 80052bc:	f897 217f 	ldrb.w	r2, [r7, #383]	; 0x17f
 80052c0:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 80052c4:	496f      	ldr	r1, [pc, #444]	; (8005484 <scaraInitDuty+0xc4c>)
 80052c6:	f44f 70ac 	mov.w	r0, #344	; 0x158
 80052ca:	fb00 f202 	mul.w	r2, r0, r2
 80052ce:	440a      	add	r2, r1
 80052d0:	f502 6284 	add.w	r2, r2, #1056	; 0x420
 80052d4:	e9c2 3400 	strd	r3, r4, [r2]
							status2 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 80052d8:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 80052dc:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80052e0:	fb02 f303 	mul.w	r3, r2, r3
 80052e4:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 80052e8:	4a66      	ldr	r2, [pc, #408]	; (8005484 <scaraInitDuty+0xc4c>)
 80052ea:	1898      	adds	r0, r3, r2
 80052ec:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 80052f0:	4a65      	ldr	r2, [pc, #404]	; (8005488 <scaraInitDuty+0xc50>)
 80052f2:	5cd3      	ldrb	r3, [r2, r3]
 80052f4:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 80052f8:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 80052fc:	eeb0 2a46 	vmov.f32	s4, s12
 8005300:	eef0 2a66 	vmov.f32	s5, s13
 8005304:	eeb0 1a47 	vmov.f32	s2, s14
 8005308:	eef0 1a67 	vmov.f32	s3, s15
 800530c:	2201      	movs	r2, #1
 800530e:	ed9f 0b5a 	vldr	d0, [pc, #360]	; 8005478 <scaraInitDuty+0xc40>
 8005312:	4619      	mov	r1, r3
 8005314:	f000 ffc4 	bl	80062a0 <scaraInitLSPB>
 8005318:	4603      	mov	r3, r0
 800531a:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
											0, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
						}
						myDUTY.time_total = command.time_total;
 800531e:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8005322:	4a58      	ldr	r2, [pc, #352]	; (8005484 <scaraInitDuty+0xc4c>)
 8005324:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8005328:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 800532c:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 8005330:	3301      	adds	r3, #1
 8005332:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 8005336:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 800533a:	2b03      	cmp	r3, #3
 800533c:	f67f af6e 	bls.w	800521c <scaraInitDuty+0x9e4>
 8005340:	e1c8      	b.n	80056d4 <scaraInitDuty+0xe9c>
					}
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8005342:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 8005346:	2b00      	cmp	r3, #0
 8005348:	f040 8084 	bne.w	8005454 <scaraInitDuty+0xc1c>
					for ( uint8_t i = 0; i < 4; i++) {
 800534c:	2300      	movs	r3, #0
 800534e:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 8005352:	e07a      	b.n	800544a <scaraInitDuty+0xc12>
						if ( i == command.sub_para_int) {
 8005354:	f897 217e 	ldrb.w	r2, [r7, #382]	; 0x17e
 8005358:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800535c:	429a      	cmp	r2, r3
 800535e:	d140      	bne.n	80053e2 <scaraInitDuty+0xbaa>
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005360:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 8005364:	4a47      	ldr	r2, [pc, #284]	; (8005484 <scaraInitDuty+0xc4c>)
 8005366:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800536a:	fb01 f303 	mul.w	r3, r1, r3
 800536e:	4413      	add	r3, r2
 8005370:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005374:	2200      	movs	r2, #0
 8005376:	701a      	strb	r2, [r3, #0]
							status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8005378:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 800537c:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005380:	fb02 f303 	mul.w	r3, r2, r3
 8005384:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8005388:	4a3e      	ldr	r2, [pc, #248]	; (8005484 <scaraInitDuty+0xc4c>)
 800538a:	1898      	adds	r0, r3, r2
 800538c:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 8005390:	4a3d      	ldr	r2, [pc, #244]	; (8005488 <scaraInitDuty+0xc50>)
 8005392:	5cd3      	ldrb	r3, [r2, r3]
 8005394:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8005398:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 800539c:	eeb0 2a46 	vmov.f32	s4, s12
 80053a0:	eef0 2a66 	vmov.f32	s5, s13
 80053a4:	eeb0 1a47 	vmov.f32	s2, s14
 80053a8:	eef0 1a67 	vmov.f32	s3, s15
 80053ac:	2200      	movs	r2, #0
 80053ae:	ed97 0b62 	vldr	d0, [r7, #392]	; 0x188
 80053b2:	4619      	mov	r1, r3
 80053b4:	f000 ff74 	bl	80062a0 <scaraInitLSPB>
 80053b8:	4603      	mov	r3, r0
 80053ba:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
											s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
							myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 80053be:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 80053c2:	4a30      	ldr	r2, [pc, #192]	; (8005484 <scaraInitDuty+0xc4c>)
 80053c4:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80053c8:	fb01 f303 	mul.w	r3, r1, r3
 80053cc:	4413      	add	r3, r2
 80053ce:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80053d2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80053d6:	4a2b      	ldr	r2, [pc, #172]	; (8005484 <scaraInitDuty+0xc4c>)
 80053d8:	f602 1248 	addw	r2, r2, #2376	; 0x948
 80053dc:	e9c2 3400 	strd	r3, r4, [r2]
 80053e0:	e02e      	b.n	8005440 <scaraInitDuty+0xc08>
						} else {
							myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 80053e2:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 80053e6:	4a27      	ldr	r2, [pc, #156]	; (8005484 <scaraInitDuty+0xc4c>)
 80053e8:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80053ec:	fb01 f303 	mul.w	r3, r1, r3
 80053f0:	4413      	add	r3, r2
 80053f2:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 80053f6:	2200      	movs	r2, #0
 80053f8:	701a      	strb	r2, [r3, #0]
							status2 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 80053fa:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 80053fe:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005402:	fb02 f303 	mul.w	r3, r2, r3
 8005406:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 800540a:	4a1e      	ldr	r2, [pc, #120]	; (8005484 <scaraInitDuty+0xc4c>)
 800540c:	1898      	adds	r0, r3, r2
 800540e:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 8005412:	4a1d      	ldr	r2, [pc, #116]	; (8005488 <scaraInitDuty+0xc50>)
 8005414:	5cd3      	ldrb	r3, [r2, r3]
 8005416:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 800541a:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 800541e:	eeb0 2a46 	vmov.f32	s4, s12
 8005422:	eef0 2a66 	vmov.f32	s5, s13
 8005426:	eeb0 1a47 	vmov.f32	s2, s14
 800542a:	eef0 1a67 	vmov.f32	s3, s15
 800542e:	2200      	movs	r2, #0
 8005430:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8005478 <scaraInitDuty+0xc40>
 8005434:	4619      	mov	r1, r3
 8005436:	f000 ff33 	bl	80062a0 <scaraInitLSPB>
 800543a:	4603      	mov	r3, r0
 800543c:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
					for ( uint8_t i = 0; i < 4; i++) {
 8005440:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 8005444:	3301      	adds	r3, #1
 8005446:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 800544a:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 800544e:	2b03      	cmp	r3, #3
 8005450:	d980      	bls.n	8005354 <scaraInitDuty+0xb1c>
 8005452:	e13f      	b.n	80056d4 <scaraInitDuty+0xe9c>
											0, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
						}
					}
				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 8005454:	2308      	movs	r3, #8
 8005456:	f000 bcd3 	b.w	8005e00 <scaraInitDuty+0x15c8>
				}
			// SCURVE
			} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 800545a:	f897 31d0 	ldrb.w	r3, [r7, #464]	; 0x1d0
 800545e:	2b01      	cmp	r3, #1
 8005460:	f040 8136 	bne.w	80056d0 <scaraInitDuty+0xe98>
					// Mode Init Time
					if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8005464:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 8005468:	2b01      	cmp	r3, #1
 800546a:	f040 80a6 	bne.w	80055ba <scaraInitDuty+0xd82>
						for ( uint8_t i = 0; i < 4; i++) {
 800546e:	2300      	movs	r3, #0
 8005470:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 8005474:	e09b      	b.n	80055ae <scaraInitDuty+0xd76>
 8005476:	bf00      	nop
	...
 8005480:	40668000 	.word	0x40668000
 8005484:	20005378 	.word	0x20005378
 8005488:	20000c54 	.word	0x20000c54
 800548c:	60000000 	.word	0x60000000
 8005490:	400921fb 	.word	0x400921fb
							if ( i == command.sub_para_int) {
 8005494:	f897 217d 	ldrb.w	r2, [r7, #381]	; 0x17d
 8005498:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800549c:	429a      	cmp	r2, r3
 800549e:	d13d      	bne.n	800551c <scaraInitDuty+0xce4>
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80054a0:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 80054a4:	4ac0      	ldr	r2, [pc, #768]	; (80057a8 <scaraInitDuty+0xf70>)
 80054a6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80054aa:	fb01 f303 	mul.w	r3, r1, r3
 80054ae:	4413      	add	r3, r2
 80054b0:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 80054b4:	2201      	movs	r2, #1
 80054b6:	701a      	strb	r2, [r3, #0]
								myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 80054b8:	f897 217d 	ldrb.w	r2, [r7, #381]	; 0x17d
 80054bc:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 80054c0:	49b9      	ldr	r1, [pc, #740]	; (80057a8 <scaraInitDuty+0xf70>)
 80054c2:	f44f 70ac 	mov.w	r0, #344	; 0x158
 80054c6:	fb00 f202 	mul.w	r2, r0, r2
 80054ca:	440a      	add	r2, r1
 80054cc:	f502 6296 	add.w	r2, r2, #1200	; 0x4b0
 80054d0:	e9c2 3400 	strd	r3, r4, [r2]
								status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 80054d4:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 80054d8:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80054dc:	fb02 f303 	mul.w	r3, r2, r3
 80054e0:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 80054e4:	4ab0      	ldr	r2, [pc, #704]	; (80057a8 <scaraInitDuty+0xf70>)
 80054e6:	1898      	adds	r0, r3, r2
 80054e8:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 80054ec:	4aaf      	ldr	r2, [pc, #700]	; (80057ac <scaraInitDuty+0xf74>)
 80054ee:	5cd3      	ldrb	r3, [r2, r3]
 80054f0:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 80054f4:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 80054f8:	eeb0 2a46 	vmov.f32	s4, s12
 80054fc:	eef0 2a66 	vmov.f32	s5, s13
 8005500:	eeb0 1a47 	vmov.f32	s2, s14
 8005504:	eef0 1a67 	vmov.f32	s3, s15
 8005508:	2201      	movs	r2, #1
 800550a:	ed97 0b62 	vldr	d0, [r7, #392]	; 0x188
 800550e:	4619      	mov	r1, r3
 8005510:	f001 fab2 	bl	8006a78 <scaraInitScurve>
 8005514:	4603      	mov	r3, r0
 8005516:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
 800551a:	e03c      	b.n	8005596 <scaraInitDuty+0xd5e>
											joint_taget[i],
											s, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
							} else {
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 800551c:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 8005520:	4aa1      	ldr	r2, [pc, #644]	; (80057a8 <scaraInitDuty+0xf70>)
 8005522:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005526:	fb01 f303 	mul.w	r3, r1, r3
 800552a:	4413      	add	r3, r2
 800552c:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005530:	2201      	movs	r2, #1
 8005532:	701a      	strb	r2, [r3, #0]
								myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 8005534:	f897 217d 	ldrb.w	r2, [r7, #381]	; 0x17d
 8005538:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 800553c:	499a      	ldr	r1, [pc, #616]	; (80057a8 <scaraInitDuty+0xf70>)
 800553e:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8005542:	fb00 f202 	mul.w	r2, r0, r2
 8005546:	440a      	add	r2, r1
 8005548:	f502 6296 	add.w	r2, r2, #1200	; 0x4b0
 800554c:	e9c2 3400 	strd	r3, r4, [r2]
								status2 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 8005550:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 8005554:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005558:	fb02 f303 	mul.w	r3, r2, r3
 800555c:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8005560:	4a91      	ldr	r2, [pc, #580]	; (80057a8 <scaraInitDuty+0xf70>)
 8005562:	1898      	adds	r0, r3, r2
 8005564:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 8005568:	4a90      	ldr	r2, [pc, #576]	; (80057ac <scaraInitDuty+0xf74>)
 800556a:	5cd3      	ldrb	r3, [r2, r3]
 800556c:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8005570:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8005574:	eeb0 2a46 	vmov.f32	s4, s12
 8005578:	eef0 2a66 	vmov.f32	s5, s13
 800557c:	eeb0 1a47 	vmov.f32	s2, s14
 8005580:	eef0 1a67 	vmov.f32	s3, s15
 8005584:	2201      	movs	r2, #1
 8005586:	ed9f 0b84 	vldr	d0, [pc, #528]	; 8005798 <scaraInitDuty+0xf60>
 800558a:	4619      	mov	r1, r3
 800558c:	f001 fa74 	bl	8006a78 <scaraInitScurve>
 8005590:	4603      	mov	r3, r0
 8005592:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
											joint_taget[i],
											0, DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
							}
							myDUTY.time_total = command.time_total;
 8005596:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 800559a:	4a83      	ldr	r2, [pc, #524]	; (80057a8 <scaraInitDuty+0xf70>)
 800559c:	f602 1248 	addw	r2, r2, #2376	; 0x948
 80055a0:	e9c2 3400 	strd	r3, r4, [r2]
						for ( uint8_t i = 0; i < 4; i++) {
 80055a4:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 80055a8:	3301      	adds	r3, #1
 80055aa:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 80055ae:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 80055b2:	2b03      	cmp	r3, #3
 80055b4:	f67f af6e 	bls.w	8005494 <scaraInitDuty+0xc5c>
 80055b8:	e08c      	b.n	80056d4 <scaraInitDuty+0xe9c>
						}
					// Mode Init Acc
					} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 80055ba:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 80055be:	2b00      	cmp	r3, #0
 80055c0:	f040 8084 	bne.w	80056cc <scaraInitDuty+0xe94>
						for ( uint8_t i = 0; i < 4; i++) {
 80055c4:	2300      	movs	r3, #0
 80055c6:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 80055ca:	e07a      	b.n	80056c2 <scaraInitDuty+0xe8a>
							if ( i == command.sub_para_int) {
 80055cc:	f897 217c 	ldrb.w	r2, [r7, #380]	; 0x17c
 80055d0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d140      	bne.n	800565a <scaraInitDuty+0xe22>
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 80055d8:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 80055dc:	4a72      	ldr	r2, [pc, #456]	; (80057a8 <scaraInitDuty+0xf70>)
 80055de:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80055e2:	fb01 f303 	mul.w	r3, r1, r3
 80055e6:	4413      	add	r3, r2
 80055e8:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 80055ec:	2201      	movs	r2, #1
 80055ee:	701a      	strb	r2, [r3, #0]
								status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 80055f0:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 80055f4:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80055f8:	fb02 f303 	mul.w	r3, r2, r3
 80055fc:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8005600:	4a69      	ldr	r2, [pc, #420]	; (80057a8 <scaraInitDuty+0xf70>)
 8005602:	1898      	adds	r0, r3, r2
 8005604:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 8005608:	4a68      	ldr	r2, [pc, #416]	; (80057ac <scaraInitDuty+0xf74>)
 800560a:	5cd3      	ldrb	r3, [r2, r3]
 800560c:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8005610:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8005614:	eeb0 2a46 	vmov.f32	s4, s12
 8005618:	eef0 2a66 	vmov.f32	s5, s13
 800561c:	eeb0 1a47 	vmov.f32	s2, s14
 8005620:	eef0 1a67 	vmov.f32	s3, s15
 8005624:	2200      	movs	r2, #0
 8005626:	ed97 0b62 	vldr	d0, [r7, #392]	; 0x188
 800562a:	4619      	mov	r1, r3
 800562c:	f001 fa24 	bl	8006a78 <scaraInitScurve>
 8005630:	4603      	mov	r3, r0
 8005632:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
											joint_taget[i],
											s, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
								myDUTY.time_total = myDUTY.joint.trajectory[i].scurve.Tf;
 8005636:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 800563a:	4a5b      	ldr	r2, [pc, #364]	; (80057a8 <scaraInitDuty+0xf70>)
 800563c:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005640:	fb01 f303 	mul.w	r3, r1, r3
 8005644:	4413      	add	r3, r2
 8005646:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 800564a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800564e:	4a56      	ldr	r2, [pc, #344]	; (80057a8 <scaraInitDuty+0xf70>)
 8005650:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8005654:	e9c2 3400 	strd	r3, r4, [r2]
 8005658:	e02e      	b.n	80056b8 <scaraInitDuty+0xe80>
							} else {
								myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 800565a:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 800565e:	4a52      	ldr	r2, [pc, #328]	; (80057a8 <scaraInitDuty+0xf70>)
 8005660:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005664:	fb01 f303 	mul.w	r3, r1, r3
 8005668:	4413      	add	r3, r2
 800566a:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 800566e:	2201      	movs	r2, #1
 8005670:	701a      	strb	r2, [r3, #0]
								status2 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve),
 8005672:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 8005676:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800567a:	fb02 f303 	mul.w	r3, r2, r3
 800567e:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8005682:	4a49      	ldr	r2, [pc, #292]	; (80057a8 <scaraInitDuty+0xf70>)
 8005684:	1898      	adds	r0, r3, r2
 8005686:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 800568a:	4a48      	ldr	r2, [pc, #288]	; (80057ac <scaraInitDuty+0xf74>)
 800568c:	5cd3      	ldrb	r3, [r2, r3]
 800568e:	ed97 7bd6 	vldr	d7, [r7, #856]	; 0x358
 8005692:	ed97 6bd8 	vldr	d6, [r7, #864]	; 0x360
 8005696:	eeb0 2a46 	vmov.f32	s4, s12
 800569a:	eef0 2a66 	vmov.f32	s5, s13
 800569e:	eeb0 1a47 	vmov.f32	s2, s14
 80056a2:	eef0 1a67 	vmov.f32	s3, s15
 80056a6:	2200      	movs	r2, #0
 80056a8:	ed9f 0b3b 	vldr	d0, [pc, #236]	; 8005798 <scaraInitDuty+0xf60>
 80056ac:	4619      	mov	r1, r3
 80056ae:	f001 f9e3 	bl	8006a78 <scaraInitScurve>
 80056b2:	4603      	mov	r3, r0
 80056b4:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
						for ( uint8_t i = 0; i < 4; i++) {
 80056b8:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 80056bc:	3301      	adds	r3, #1
 80056be:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 80056c2:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 80056c6:	2b03      	cmp	r3, #3
 80056c8:	d980      	bls.n	80055cc <scaraInitDuty+0xd94>
 80056ca:	e003      	b.n	80056d4 <scaraInitDuty+0xe9c>
											0, DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
							}
						}

					} else {
						return SCARA_STATUS_ERROR_MODE_INIT;
 80056cc:	2308      	movs	r3, #8
 80056ce:	e397      	b.n	8005e00 <scaraInitDuty+0x15c8>
					}

			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 80056d0:	2305      	movs	r3, #5
 80056d2:	e395      	b.n	8005e00 <scaraInitDuty+0x15c8>
			}
		// Check Init Status
			if ( SCARA_STATUS_OK != status1) {
 80056d4:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d002      	beq.n	80056e2 <scaraInitDuty+0xeaa>
				return status1;
 80056dc:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 80056e0:	e38e      	b.n	8005e00 <scaraInitDuty+0x15c8>
			}
			if ( SCARA_STATUS_OK != status2) {
 80056e2:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	f000 835c 	beq.w	8005da4 <scaraInitDuty+0x156c>
				return status2;
 80056ec:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 80056f0:	e386      	b.n	8005e00 <scaraInitDuty+0x15c8>
			}

		//----Joint Quadra
		} else if 	( DUTY_JOINT_4DOF == command.joint_type) {
 80056f2:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	f040 8350 	bne.w	8005d9c <scaraInitDuty+0x1564>
			SCARA_PositionTypeDef	target_point;
			// Change Degree --> Radian
			command.target_point.roll = command.target_point.roll*PI/180.0;
 80056fc:	e9d7 0192 	ldrd	r0, r1, [r7, #584]	; 0x248
 8005700:	a327      	add	r3, pc, #156	; (adr r3, 80057a0 <scaraInitDuty+0xf68>)
 8005702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005706:	f7fa ff77 	bl	80005f8 <__aeabi_dmul>
 800570a:	4603      	mov	r3, r0
 800570c:	460c      	mov	r4, r1
 800570e:	4618      	mov	r0, r3
 8005710:	4621      	mov	r1, r4
 8005712:	f04f 0200 	mov.w	r2, #0
 8005716:	4b26      	ldr	r3, [pc, #152]	; (80057b0 <scaraInitDuty+0xf78>)
 8005718:	f7fb f898 	bl	800084c <__aeabi_ddiv>
 800571c:	4603      	mov	r3, r0
 800571e:	460c      	mov	r4, r1
 8005720:	e9c7 3492 	strd	r3, r4, [r7, #584]	; 0x248
			// Coordinate
			if( DUTY_COORDINATES_REL == command.coordinate_type) {
 8005724:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 8005728:	2b01      	cmp	r3, #1
 800572a:	d145      	bne.n	80057b8 <scaraInitDuty+0xf80>
				target_point.x 		= positionCurrent.x + command.target_point.x;
 800572c:	4b21      	ldr	r3, [pc, #132]	; (80057b4 <scaraInitDuty+0xf7c>)
 800572e:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8005732:	e9d7 348c 	ldrd	r3, r4, [r7, #560]	; 0x230
 8005736:	461a      	mov	r2, r3
 8005738:	4623      	mov	r3, r4
 800573a:	f7fa fda7 	bl	800028c <__adddf3>
 800573e:	4603      	mov	r3, r0
 8005740:	460c      	mov	r4, r1
 8005742:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
				target_point.y 		= positionCurrent.y + command.target_point.y;
 8005746:	4b1b      	ldr	r3, [pc, #108]	; (80057b4 <scaraInitDuty+0xf7c>)
 8005748:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800574c:	e9d7 348e 	ldrd	r3, r4, [r7, #568]	; 0x238
 8005750:	461a      	mov	r2, r3
 8005752:	4623      	mov	r3, r4
 8005754:	f7fa fd9a 	bl	800028c <__adddf3>
 8005758:	4603      	mov	r3, r0
 800575a:	460c      	mov	r4, r1
 800575c:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
				target_point.z 		= positionCurrent.z + command.target_point.z;
 8005760:	4b14      	ldr	r3, [pc, #80]	; (80057b4 <scaraInitDuty+0xf7c>)
 8005762:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8005766:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 800576a:	461a      	mov	r2, r3
 800576c:	4623      	mov	r3, r4
 800576e:	f7fa fd8d 	bl	800028c <__adddf3>
 8005772:	4603      	mov	r3, r0
 8005774:	460c      	mov	r4, r1
 8005776:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
				target_point.roll	= positionCurrent.roll + command.target_point.roll;
 800577a:	4b0e      	ldr	r3, [pc, #56]	; (80057b4 <scaraInitDuty+0xf7c>)
 800577c:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8005780:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 8005784:	461a      	mov	r2, r3
 8005786:	4623      	mov	r3, r4
 8005788:	f7fa fd80 	bl	800028c <__adddf3>
 800578c:	4603      	mov	r3, r0
 800578e:	460c      	mov	r4, r1
 8005790:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8005794:	e027      	b.n	80057e6 <scaraInitDuty+0xfae>
 8005796:	bf00      	nop
	...
 80057a0:	60000000 	.word	0x60000000
 80057a4:	400921fb 	.word	0x400921fb
 80057a8:	20005378 	.word	0x20005378
 80057ac:	20000c54 	.word	0x20000c54
 80057b0:	40668000 	.word	0x40668000
 80057b4:	20005e38 	.word	0x20005e38
			} else if (DUTY_COORDINATES_ABS == command.coordinate_type) {
 80057b8:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d110      	bne.n	80057e2 <scaraInitDuty+0xfaa>
				target_point.x 		= command.target_point.x;
 80057c0:	e9d7 348c 	ldrd	r3, r4, [r7, #560]	; 0x230
 80057c4:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
				target_point.y 		= command.target_point.y;
 80057c8:	e9d7 348e 	ldrd	r3, r4, [r7, #568]	; 0x238
 80057cc:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
				target_point.z 		= command.target_point.z;
 80057d0:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 80057d4:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
				target_point.roll	= command.target_point.roll;
 80057d8:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 80057dc:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 80057e0:	e001      	b.n	80057e6 <scaraInitDuty+0xfae>
			} else {
				return SCARA_STATUS_ERROR_COORDINATE;
 80057e2:	230c      	movs	r3, #12
 80057e4:	e30c      	b.n	8005e00 <scaraInitDuty+0x15c8>
			}

			if( FALSE == kinematicInverse(&target_point, positionCurrent)) {
 80057e6:	4cce      	ldr	r4, [pc, #824]	; (8005b20 <scaraInitDuty+0x12e8>)
 80057e8:	f107 05b8 	add.w	r5, r7, #184	; 0xb8
 80057ec:	4668      	mov	r0, sp
 80057ee:	f104 0308 	add.w	r3, r4, #8
 80057f2:	22b0      	movs	r2, #176	; 0xb0
 80057f4:	4619      	mov	r1, r3
 80057f6:	f010 f8a3 	bl	8015940 <memcpy>
 80057fa:	e894 000c 	ldmia.w	r4, {r2, r3}
 80057fe:	4628      	mov	r0, r5
 8005800:	f7fd fd26 	bl	8003250 <kinematicInverse>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d101      	bne.n	800580e <scaraInitDuty+0xfd6>
				return SCARA_STATUS_ERROR_OVER_WORKSPACE;// Exit with error
 800580a:	2307      	movs	r3, #7
 800580c:	e2f8      	b.n	8005e00 <scaraInitDuty+0x15c8>
			}
			// Trajectory 4 profile
			double q[4];
			q[0] = target_point.Theta1 - positionCurrent.Theta1;
 800580e:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8005812:	4bc3      	ldr	r3, [pc, #780]	; (8005b20 <scaraInitDuty+0x12e8>)
 8005814:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 8005818:	461a      	mov	r2, r3
 800581a:	4623      	mov	r3, r4
 800581c:	f7fa fd34 	bl	8000288 <__aeabi_dsub>
 8005820:	4603      	mov	r3, r0
 8005822:	460c      	mov	r4, r1
 8005824:	463a      	mov	r2, r7
 8005826:	e9c2 3400 	strd	r3, r4, [r2]
			q[1] = target_point.Theta2 - positionCurrent.Theta2;
 800582a:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800582e:	4bbc      	ldr	r3, [pc, #752]	; (8005b20 <scaraInitDuty+0x12e8>)
 8005830:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8005834:	461a      	mov	r2, r3
 8005836:	4623      	mov	r3, r4
 8005838:	f7fa fd26 	bl	8000288 <__aeabi_dsub>
 800583c:	4603      	mov	r3, r0
 800583e:	460c      	mov	r4, r1
 8005840:	463a      	mov	r2, r7
 8005842:	e9c2 3402 	strd	r3, r4, [r2, #8]
			q[2] = target_point.D3 	   - positionCurrent.D3;
 8005846:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 800584a:	4bb5      	ldr	r3, [pc, #724]	; (8005b20 <scaraInitDuty+0x12e8>)
 800584c:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 8005850:	461a      	mov	r2, r3
 8005852:	4623      	mov	r3, r4
 8005854:	f7fa fd18 	bl	8000288 <__aeabi_dsub>
 8005858:	4603      	mov	r3, r0
 800585a:	460c      	mov	r4, r1
 800585c:	463a      	mov	r2, r7
 800585e:	e9c2 3404 	strd	r3, r4, [r2, #16]
			q[3] = target_point.Theta4 - positionCurrent.Theta4;
 8005862:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8005866:	4bae      	ldr	r3, [pc, #696]	; (8005b20 <scaraInitDuty+0x12e8>)
 8005868:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 800586c:	461a      	mov	r2, r3
 800586e:	4623      	mov	r3, r4
 8005870:	f7fa fd0a 	bl	8000288 <__aeabi_dsub>
 8005874:	4603      	mov	r3, r0
 8005876:	460c      	mov	r4, r1
 8005878:	463a      	mov	r2, r7
 800587a:	e9c2 3406 	strd	r3, r4, [r2, #24]

			// LSPB
			if ( DUTY_TRAJECTORY_LSPB == command.trajec_type) {
 800587e:	f897 31d0 	ldrb.w	r3, [r7, #464]	; 0x1d0
 8005882:	2b00      	cmp	r3, #0
 8005884:	f040 813e 	bne.w	8005b04 <scaraInitDuty+0x12cc>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8005888:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 800588c:	2b01      	cmp	r3, #1
 800588e:	d159      	bne.n	8005944 <scaraInitDuty+0x110c>
					for ( uint8_t i = 0; i < 4; i++) {
 8005890:	2300      	movs	r3, #0
 8005892:	f887 317b 	strb.w	r3, [r7, #379]	; 0x17b
 8005896:	e049      	b.n	800592c <scaraInitDuty+0x10f4>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005898:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 800589c:	4aa1      	ldr	r2, [pc, #644]	; (8005b24 <scaraInitDuty+0x12ec>)
 800589e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80058a2:	fb01 f303 	mul.w	r3, r1, r3
 80058a6:	4413      	add	r3, r2
 80058a8:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 80058ac:	2200      	movs	r2, #0
 80058ae:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].lspb.Tf = command.time_total;
 80058b0:	f897 217b 	ldrb.w	r2, [r7, #379]	; 0x17b
 80058b4:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 80058b8:	499a      	ldr	r1, [pc, #616]	; (8005b24 <scaraInitDuty+0x12ec>)
 80058ba:	f44f 70ac 	mov.w	r0, #344	; 0x158
 80058be:	fb00 f202 	mul.w	r2, r0, r2
 80058c2:	440a      	add	r2, r1
 80058c4:	f502 6284 	add.w	r2, r2, #1056	; 0x420
 80058c8:	e9c2 3400 	strd	r3, r4, [r2]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 80058cc:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 80058d0:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80058d4:	fb02 f303 	mul.w	r3, r2, r3
 80058d8:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 80058dc:	4a91      	ldr	r2, [pc, #580]	; (8005b24 <scaraInitDuty+0x12ec>)
 80058de:	1898      	adds	r0, r3, r2
 80058e0:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 80058e4:	4a90      	ldr	r2, [pc, #576]	; (8005b28 <scaraInitDuty+0x12f0>)
 80058e6:	5cd1      	ldrb	r1, [r2, r3]
 80058e8:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 80058ec:	463a      	mov	r2, r7
 80058ee:	00db      	lsls	r3, r3, #3
 80058f0:	4413      	add	r3, r2
 80058f2:	ed93 7b00 	vldr	d7, [r3]
 80058f6:	ed97 6bd6 	vldr	d6, [r7, #856]	; 0x358
 80058fa:	ed97 5bd8 	vldr	d5, [r7, #864]	; 0x360
 80058fe:	eeb0 2a45 	vmov.f32	s4, s10
 8005902:	eef0 2a65 	vmov.f32	s5, s11
 8005906:	eeb0 1a46 	vmov.f32	s2, s12
 800590a:	eef0 1a66 	vmov.f32	s3, s13
 800590e:	2201      	movs	r2, #1
 8005910:	eeb0 0a47 	vmov.f32	s0, s14
 8005914:	eef0 0a67 	vmov.f32	s1, s15
 8005918:	f000 fcc2 	bl	80062a0 <scaraInitLSPB>
 800591c:	4603      	mov	r3, r0
 800591e:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
					for ( uint8_t i = 0; i < 4; i++) {
 8005922:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 8005926:	3301      	adds	r3, #1
 8005928:	f887 317b 	strb.w	r3, [r7, #379]	; 0x17b
 800592c:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 8005930:	2b03      	cmp	r3, #3
 8005932:	d9b1      	bls.n	8005898 <scaraInitDuty+0x1060>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

					}
					myDUTY.time_total = command.time_total;
 8005934:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8005938:	4a7a      	ldr	r2, [pc, #488]	; (8005b24 <scaraInitDuty+0x12ec>)
 800593a:	f602 1248 	addw	r2, r2, #2376	; 0x948
 800593e:	e9c2 3400 	strd	r3, r4, [r2]
 8005942:	e22f      	b.n	8005da4 <scaraInitDuty+0x156c>
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8005944:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 8005948:	2b00      	cmp	r3, #0
 800594a:	f040 80d9 	bne.w	8005b00 <scaraInitDuty+0x12c8>
					for ( uint8_t i = 0; i < 4; i++) {
 800594e:	2300      	movs	r3, #0
 8005950:	f887 317a 	strb.w	r3, [r7, #378]	; 0x17a
 8005954:	e03b      	b.n	80059ce <scaraInitDuty+0x1196>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005956:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 800595a:	4a72      	ldr	r2, [pc, #456]	; (8005b24 <scaraInitDuty+0x12ec>)
 800595c:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005960:	fb01 f303 	mul.w	r3, r1, r3
 8005964:	4413      	add	r3, r2
 8005966:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 800596a:	2200      	movs	r2, #0
 800596c:	701a      	strb	r2, [r3, #0]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 800596e:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 8005972:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005976:	fb02 f303 	mul.w	r3, r2, r3
 800597a:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 800597e:	4a69      	ldr	r2, [pc, #420]	; (8005b24 <scaraInitDuty+0x12ec>)
 8005980:	1898      	adds	r0, r3, r2
 8005982:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 8005986:	4a68      	ldr	r2, [pc, #416]	; (8005b28 <scaraInitDuty+0x12f0>)
 8005988:	5cd1      	ldrb	r1, [r2, r3]
 800598a:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 800598e:	463a      	mov	r2, r7
 8005990:	00db      	lsls	r3, r3, #3
 8005992:	4413      	add	r3, r2
 8005994:	ed93 7b00 	vldr	d7, [r3]
 8005998:	ed97 6bd6 	vldr	d6, [r7, #856]	; 0x358
 800599c:	ed97 5bd8 	vldr	d5, [r7, #864]	; 0x360
 80059a0:	eeb0 2a45 	vmov.f32	s4, s10
 80059a4:	eef0 2a65 	vmov.f32	s5, s11
 80059a8:	eeb0 1a46 	vmov.f32	s2, s12
 80059ac:	eef0 1a66 	vmov.f32	s3, s13
 80059b0:	2200      	movs	r2, #0
 80059b2:	eeb0 0a47 	vmov.f32	s0, s14
 80059b6:	eef0 0a67 	vmov.f32	s1, s15
 80059ba:	f000 fc71 	bl	80062a0 <scaraInitLSPB>
 80059be:	4603      	mov	r3, r0
 80059c0:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
					for ( uint8_t i = 0; i < 4; i++) {
 80059c4:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 80059c8:	3301      	adds	r3, #1
 80059ca:	f887 317a 	strb.w	r3, [r7, #378]	; 0x17a
 80059ce:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 80059d2:	2b03      	cmp	r3, #3
 80059d4:	d9bf      	bls.n	8005956 <scaraInitDuty+0x111e>
											q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
					}
					myDUTY.time_total = 0;
 80059d6:	4b53      	ldr	r3, [pc, #332]	; (8005b24 <scaraInitDuty+0x12ec>)
 80059d8:	f603 1248 	addw	r2, r3, #2376	; 0x948
 80059dc:	f04f 0300 	mov.w	r3, #0
 80059e0:	f04f 0400 	mov.w	r4, #0
 80059e4:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 80059e8:	2300      	movs	r3, #0
 80059ea:	f887 3179 	strb.w	r3, [r7, #377]	; 0x179
 80059ee:	e02d      	b.n	8005a4c <scaraInitDuty+0x1214>
						if ( myDUTY.joint.trajectory[i].lspb.Tf > myDUTY.time_total) {
 80059f0:	f897 3179 	ldrb.w	r3, [r7, #377]	; 0x179
 80059f4:	4a4b      	ldr	r2, [pc, #300]	; (8005b24 <scaraInitDuty+0x12ec>)
 80059f6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80059fa:	fb01 f303 	mul.w	r3, r1, r3
 80059fe:	4413      	add	r3, r2
 8005a00:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8005a04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005a08:	4b46      	ldr	r3, [pc, #280]	; (8005b24 <scaraInitDuty+0x12ec>)
 8005a0a:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8005a0e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005a12:	461a      	mov	r2, r3
 8005a14:	4623      	mov	r3, r4
 8005a16:	f7fb f87f 	bl	8000b18 <__aeabi_dcmpgt>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d010      	beq.n	8005a42 <scaraInitDuty+0x120a>
							myDUTY.time_total = myDUTY.joint.trajectory[i].lspb.Tf;
 8005a20:	f897 3179 	ldrb.w	r3, [r7, #377]	; 0x179
 8005a24:	4a3f      	ldr	r2, [pc, #252]	; (8005b24 <scaraInitDuty+0x12ec>)
 8005a26:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005a2a:	fb01 f303 	mul.w	r3, r1, r3
 8005a2e:	4413      	add	r3, r2
 8005a30:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8005a34:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005a38:	4a3a      	ldr	r2, [pc, #232]	; (8005b24 <scaraInitDuty+0x12ec>)
 8005a3a:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8005a3e:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 8005a42:	f897 3179 	ldrb.w	r3, [r7, #377]	; 0x179
 8005a46:	3301      	adds	r3, #1
 8005a48:	f887 3179 	strb.w	r3, [r7, #377]	; 0x179
 8005a4c:	f897 3179 	ldrb.w	r3, [r7, #377]	; 0x179
 8005a50:	2b03      	cmp	r3, #3
 8005a52:	d9cd      	bls.n	80059f0 <scaraInitDuty+0x11b8>
						}
					}
					for ( uint8_t i = 0; i < 4; i++) {
 8005a54:	2300      	movs	r3, #0
 8005a56:	f887 3178 	strb.w	r3, [r7, #376]	; 0x178
 8005a5a:	e04c      	b.n	8005af6 <scaraInitDuty+0x12be>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_LSPB;
 8005a5c:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8005a60:	4a30      	ldr	r2, [pc, #192]	; (8005b24 <scaraInitDuty+0x12ec>)
 8005a62:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005a66:	fb01 f303 	mul.w	r3, r1, r3
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005a70:	2200      	movs	r2, #0
 8005a72:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].lspb.Tf = myDUTY.time_total;
 8005a74:	f897 2178 	ldrb.w	r2, [r7, #376]	; 0x178
 8005a78:	4b2a      	ldr	r3, [pc, #168]	; (8005b24 <scaraInitDuty+0x12ec>)
 8005a7a:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8005a7e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005a82:	4928      	ldr	r1, [pc, #160]	; (8005b24 <scaraInitDuty+0x12ec>)
 8005a84:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8005a88:	fb00 f202 	mul.w	r2, r0, r2
 8005a8c:	440a      	add	r2, r1
 8005a8e:	f502 6284 	add.w	r2, r2, #1056	; 0x420
 8005a92:	e9c2 3400 	strd	r3, r4, [r2]
						status1 = scaraInitLSPB(&(myDUTY.joint.trajectory[i].lspb), joint_taget[i],
 8005a96:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8005a9a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005a9e:	fb02 f303 	mul.w	r3, r2, r3
 8005aa2:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
 8005aa6:	4a1f      	ldr	r2, [pc, #124]	; (8005b24 <scaraInitDuty+0x12ec>)
 8005aa8:	1898      	adds	r0, r3, r2
 8005aaa:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8005aae:	4a1e      	ldr	r2, [pc, #120]	; (8005b28 <scaraInitDuty+0x12f0>)
 8005ab0:	5cd1      	ldrb	r1, [r2, r3]
 8005ab2:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8005ab6:	463a      	mov	r2, r7
 8005ab8:	00db      	lsls	r3, r3, #3
 8005aba:	4413      	add	r3, r2
 8005abc:	ed93 7b00 	vldr	d7, [r3]
 8005ac0:	ed97 6bd6 	vldr	d6, [r7, #856]	; 0x358
 8005ac4:	ed97 5bd8 	vldr	d5, [r7, #864]	; 0x360
 8005ac8:	eeb0 2a45 	vmov.f32	s4, s10
 8005acc:	eef0 2a65 	vmov.f32	s5, s11
 8005ad0:	eeb0 1a46 	vmov.f32	s2, s12
 8005ad4:	eef0 1a66 	vmov.f32	s3, s13
 8005ad8:	2201      	movs	r2, #1
 8005ada:	eeb0 0a47 	vmov.f32	s0, s14
 8005ade:	eef0 0a67 	vmov.f32	s1, s15
 8005ae2:	f000 fbdd 	bl	80062a0 <scaraInitLSPB>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
					for ( uint8_t i = 0; i < 4; i++) {
 8005aec:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8005af0:	3301      	adds	r3, #1
 8005af2:	f887 3178 	strb.w	r3, [r7, #376]	; 0x178
 8005af6:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 8005afa:	2b03      	cmp	r3, #3
 8005afc:	d9ae      	bls.n	8005a5c <scaraInitDuty+0x1224>
 8005afe:	e151      	b.n	8005da4 <scaraInitDuty+0x156c>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					}

				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 8005b00:	2308      	movs	r3, #8
 8005b02:	e17d      	b.n	8005e00 <scaraInitDuty+0x15c8>
				}
				// SCURVE
			} else if ( DUTY_TRAJECTORY_SCURVE == command.trajec_type) {
 8005b04:	f897 31d0 	ldrb.w	r3, [r7, #464]	; 0x1d0
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	f040 8145 	bne.w	8005d98 <scaraInitDuty+0x1560>
				// Mode Init Time
				if ( DUTY_MODE_INIT_QVT == command.modeInit_type) {
 8005b0e:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d160      	bne.n	8005bd8 <scaraInitDuty+0x13a0>
					for ( uint8_t i = 0; i < 4; i++) {
 8005b16:	2300      	movs	r3, #0
 8005b18:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
 8005b1c:	e050      	b.n	8005bc0 <scaraInitDuty+0x1388>
 8005b1e:	bf00      	nop
 8005b20:	20005e38 	.word	0x20005e38
 8005b24:	20005378 	.word	0x20005378
 8005b28:	20000c54 	.word	0x20000c54
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005b2c:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8005b30:	4ab7      	ldr	r2, [pc, #732]	; (8005e10 <scaraInitDuty+0x15d8>)
 8005b32:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005b36:	fb01 f303 	mul.w	r3, r1, r3
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005b40:	2201      	movs	r2, #1
 8005b42:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].scurve.Tf = command.time_total;
 8005b44:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 8005b48:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8005b4c:	49b0      	ldr	r1, [pc, #704]	; (8005e10 <scaraInitDuty+0x15d8>)
 8005b4e:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8005b52:	fb00 f202 	mul.w	r2, r0, r2
 8005b56:	440a      	add	r2, r1
 8005b58:	f502 6296 	add.w	r2, r2, #1200	; 0x4b0
 8005b5c:	e9c2 3400 	strd	r3, r4, [r2]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8005b60:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8005b64:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005b68:	fb02 f303 	mul.w	r3, r2, r3
 8005b6c:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8005b70:	4aa7      	ldr	r2, [pc, #668]	; (8005e10 <scaraInitDuty+0x15d8>)
 8005b72:	1898      	adds	r0, r3, r2
 8005b74:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8005b78:	4aa6      	ldr	r2, [pc, #664]	; (8005e14 <scaraInitDuty+0x15dc>)
 8005b7a:	5cd1      	ldrb	r1, [r2, r3]
 8005b7c:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8005b80:	463a      	mov	r2, r7
 8005b82:	00db      	lsls	r3, r3, #3
 8005b84:	4413      	add	r3, r2
 8005b86:	ed93 7b00 	vldr	d7, [r3]
 8005b8a:	ed97 6bd6 	vldr	d6, [r7, #856]	; 0x358
 8005b8e:	ed97 5bd8 	vldr	d5, [r7, #864]	; 0x360
 8005b92:	eeb0 2a45 	vmov.f32	s4, s10
 8005b96:	eef0 2a65 	vmov.f32	s5, s11
 8005b9a:	eeb0 1a46 	vmov.f32	s2, s12
 8005b9e:	eef0 1a66 	vmov.f32	s3, s13
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	eeb0 0a47 	vmov.f32	s0, s14
 8005ba8:	eef0 0a67 	vmov.f32	s1, s15
 8005bac:	f000 ff64 	bl	8006a78 <scaraInitScurve>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
					for ( uint8_t i = 0; i < 4; i++) {
 8005bb6:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8005bba:	3301      	adds	r3, #1
 8005bbc:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
 8005bc0:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8005bc4:	2b03      	cmp	r3, #3
 8005bc6:	d9b1      	bls.n	8005b2c <scaraInitDuty+0x12f4>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);

					}
					myDUTY.time_total = command.time_total;
 8005bc8:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 8005bcc:	4a90      	ldr	r2, [pc, #576]	; (8005e10 <scaraInitDuty+0x15d8>)
 8005bce:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8005bd2:	e9c2 3400 	strd	r3, r4, [r2]
 8005bd6:	e0e5      	b.n	8005da4 <scaraInitDuty+0x156c>
				// Mode Init Acc
				} else if  ( DUTY_MODE_INIT_QVA == command.modeInit_type) {
 8005bd8:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	f040 80d9 	bne.w	8005d94 <scaraInitDuty+0x155c>
					for ( uint8_t i = 0; i < 4; i++) {
 8005be2:	2300      	movs	r3, #0
 8005be4:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
 8005be8:	e03b      	b.n	8005c62 <scaraInitDuty+0x142a>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005bea:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8005bee:	4a88      	ldr	r2, [pc, #544]	; (8005e10 <scaraInitDuty+0x15d8>)
 8005bf0:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005bf4:	fb01 f303 	mul.w	r3, r1, r3
 8005bf8:	4413      	add	r3, r2
 8005bfa:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005bfe:	2201      	movs	r2, #1
 8005c00:	701a      	strb	r2, [r3, #0]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8005c02:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8005c06:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005c0a:	fb02 f303 	mul.w	r3, r2, r3
 8005c0e:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8005c12:	4a7f      	ldr	r2, [pc, #508]	; (8005e10 <scaraInitDuty+0x15d8>)
 8005c14:	1898      	adds	r0, r3, r2
 8005c16:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8005c1a:	4a7e      	ldr	r2, [pc, #504]	; (8005e14 <scaraInitDuty+0x15dc>)
 8005c1c:	5cd1      	ldrb	r1, [r2, r3]
 8005c1e:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8005c22:	463a      	mov	r2, r7
 8005c24:	00db      	lsls	r3, r3, #3
 8005c26:	4413      	add	r3, r2
 8005c28:	ed93 7b00 	vldr	d7, [r3]
 8005c2c:	ed97 6bd6 	vldr	d6, [r7, #856]	; 0x358
 8005c30:	ed97 5bd8 	vldr	d5, [r7, #864]	; 0x360
 8005c34:	eeb0 2a45 	vmov.f32	s4, s10
 8005c38:	eef0 2a65 	vmov.f32	s5, s11
 8005c3c:	eeb0 1a46 	vmov.f32	s2, s12
 8005c40:	eef0 1a66 	vmov.f32	s3, s13
 8005c44:	2200      	movs	r2, #0
 8005c46:	eeb0 0a47 	vmov.f32	s0, s14
 8005c4a:	eef0 0a67 	vmov.f32	s1, s15
 8005c4e:	f000 ff13 	bl	8006a78 <scaraInitScurve>
 8005c52:	4603      	mov	r3, r0
 8005c54:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
					for ( uint8_t i = 0; i < 4; i++) {
 8005c58:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
 8005c62:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8005c66:	2b03      	cmp	r3, #3
 8005c68:	d9bf      	bls.n	8005bea <scaraInitDuty+0x13b2>
											q[i], DUTY_MODE_INIT_QVA, command.v_factor, command.a_factor);
					}
					myDUTY.time_total = 0;
 8005c6a:	4b69      	ldr	r3, [pc, #420]	; (8005e10 <scaraInitDuty+0x15d8>)
 8005c6c:	f603 1248 	addw	r2, r3, #2376	; 0x948
 8005c70:	f04f 0300 	mov.w	r3, #0
 8005c74:	f04f 0400 	mov.w	r4, #0
 8005c78:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	f887 3175 	strb.w	r3, [r7, #373]	; 0x175
 8005c82:	e02d      	b.n	8005ce0 <scaraInitDuty+0x14a8>
						if ( myDUTY.joint.trajectory[i].scurve.Tf > myDUTY.time_total) {
 8005c84:	f897 3175 	ldrb.w	r3, [r7, #373]	; 0x175
 8005c88:	4a61      	ldr	r2, [pc, #388]	; (8005e10 <scaraInitDuty+0x15d8>)
 8005c8a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005c8e:	fb01 f303 	mul.w	r3, r1, r3
 8005c92:	4413      	add	r3, r2
 8005c94:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8005c98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c9c:	4b5c      	ldr	r3, [pc, #368]	; (8005e10 <scaraInitDuty+0x15d8>)
 8005c9e:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8005ca2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	4623      	mov	r3, r4
 8005caa:	f7fa ff35 	bl	8000b18 <__aeabi_dcmpgt>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d010      	beq.n	8005cd6 <scaraInitDuty+0x149e>
							myDUTY.time_total = myDUTY.joint.trajectory[i].scurve.Tf;
 8005cb4:	f897 3175 	ldrb.w	r3, [r7, #373]	; 0x175
 8005cb8:	4a55      	ldr	r2, [pc, #340]	; (8005e10 <scaraInitDuty+0x15d8>)
 8005cba:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005cbe:	fb01 f303 	mul.w	r3, r1, r3
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8005cc8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005ccc:	4a50      	ldr	r2, [pc, #320]	; (8005e10 <scaraInitDuty+0x15d8>)
 8005cce:	f602 1248 	addw	r2, r2, #2376	; 0x948
 8005cd2:	e9c2 3400 	strd	r3, r4, [r2]
					for ( uint8_t i = 0; i < 4; i++) {
 8005cd6:	f897 3175 	ldrb.w	r3, [r7, #373]	; 0x175
 8005cda:	3301      	adds	r3, #1
 8005cdc:	f887 3175 	strb.w	r3, [r7, #373]	; 0x175
 8005ce0:	f897 3175 	ldrb.w	r3, [r7, #373]	; 0x175
 8005ce4:	2b03      	cmp	r3, #3
 8005ce6:	d9cd      	bls.n	8005c84 <scaraInitDuty+0x144c>
						}
					}
					for ( uint8_t i = 0; i < 4; i++) {
 8005ce8:	2300      	movs	r3, #0
 8005cea:	f887 3174 	strb.w	r3, [r7, #372]	; 0x174
 8005cee:	e04c      	b.n	8005d8a <scaraInitDuty+0x1552>
						myDUTY.joint.trajectory[i].trajectory_type = DUTY_TRAJECTORY_SCURVE;
 8005cf0:	f897 3174 	ldrb.w	r3, [r7, #372]	; 0x174
 8005cf4:	4a46      	ldr	r2, [pc, #280]	; (8005e10 <scaraInitDuty+0x15d8>)
 8005cf6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8005cfa:	fb01 f303 	mul.w	r3, r1, r3
 8005cfe:	4413      	add	r3, r2
 8005d00:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005d04:	2201      	movs	r2, #1
 8005d06:	701a      	strb	r2, [r3, #0]
						myDUTY.joint.trajectory[i].scurve.Tf = myDUTY.time_total;
 8005d08:	f897 2174 	ldrb.w	r2, [r7, #372]	; 0x174
 8005d0c:	4b40      	ldr	r3, [pc, #256]	; (8005e10 <scaraInitDuty+0x15d8>)
 8005d0e:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8005d12:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005d16:	493e      	ldr	r1, [pc, #248]	; (8005e10 <scaraInitDuty+0x15d8>)
 8005d18:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8005d1c:	fb00 f202 	mul.w	r2, r0, r2
 8005d20:	440a      	add	r2, r1
 8005d22:	f502 6296 	add.w	r2, r2, #1200	; 0x4b0
 8005d26:	e9c2 3400 	strd	r3, r4, [r2]
						status1 = scaraInitScurve(&(myDUTY.joint.trajectory[i].scurve), joint_taget[i],
 8005d2a:	f897 3174 	ldrb.w	r3, [r7, #372]	; 0x174
 8005d2e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005d32:	fb02 f303 	mul.w	r3, r2, r3
 8005d36:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8005d3a:	4a35      	ldr	r2, [pc, #212]	; (8005e10 <scaraInitDuty+0x15d8>)
 8005d3c:	1898      	adds	r0, r3, r2
 8005d3e:	f897 3174 	ldrb.w	r3, [r7, #372]	; 0x174
 8005d42:	4a34      	ldr	r2, [pc, #208]	; (8005e14 <scaraInitDuty+0x15dc>)
 8005d44:	5cd1      	ldrb	r1, [r2, r3]
 8005d46:	f897 3174 	ldrb.w	r3, [r7, #372]	; 0x174
 8005d4a:	463a      	mov	r2, r7
 8005d4c:	00db      	lsls	r3, r3, #3
 8005d4e:	4413      	add	r3, r2
 8005d50:	ed93 7b00 	vldr	d7, [r3]
 8005d54:	ed97 6bd6 	vldr	d6, [r7, #856]	; 0x358
 8005d58:	ed97 5bd8 	vldr	d5, [r7, #864]	; 0x360
 8005d5c:	eeb0 2a45 	vmov.f32	s4, s10
 8005d60:	eef0 2a65 	vmov.f32	s5, s11
 8005d64:	eeb0 1a46 	vmov.f32	s2, s12
 8005d68:	eef0 1a66 	vmov.f32	s3, s13
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	eeb0 0a47 	vmov.f32	s0, s14
 8005d72:	eef0 0a67 	vmov.f32	s1, s15
 8005d76:	f000 fe7f 	bl	8006a78 <scaraInitScurve>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
					for ( uint8_t i = 0; i < 4; i++) {
 8005d80:	f897 3174 	ldrb.w	r3, [r7, #372]	; 0x174
 8005d84:	3301      	adds	r3, #1
 8005d86:	f887 3174 	strb.w	r3, [r7, #372]	; 0x174
 8005d8a:	f897 3174 	ldrb.w	r3, [r7, #372]	; 0x174
 8005d8e:	2b03      	cmp	r3, #3
 8005d90:	d9ae      	bls.n	8005cf0 <scaraInitDuty+0x14b8>
 8005d92:	e007      	b.n	8005da4 <scaraInitDuty+0x156c>
											q[i], DUTY_MODE_INIT_QVT, command.v_factor, command.a_factor);
					}

				} else {
					return SCARA_STATUS_ERROR_MODE_INIT;
 8005d94:	2308      	movs	r3, #8
 8005d96:	e033      	b.n	8005e00 <scaraInitDuty+0x15c8>
				}

			} else {
				return SCARA_STATUS_ERROR_TRAJECTORY;
 8005d98:	2305      	movs	r3, #5
 8005d9a:	e031      	b.n	8005e00 <scaraInitDuty+0x15c8>
			}

		} else {
			return SCARA_STATUS_ERROR_JOINT;
 8005d9c:	2304      	movs	r3, #4
 8005d9e:	e02f      	b.n	8005e00 <scaraInitDuty+0x15c8>
		}

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 8005da0:	2302      	movs	r3, #2
 8005da2:	e02d      	b.n	8005e00 <scaraInitDuty+0x15c8>
	}

	// Reset time and distance
	positionCurrent.t = 0;
 8005da4:	4a1c      	ldr	r2, [pc, #112]	; (8005e18 <scaraInitDuty+0x15e0>)
 8005da6:	f04f 0300 	mov.w	r3, #0
 8005daa:	f04f 0400 	mov.w	r4, #0
 8005dae:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	positionCurrent.total_time = myDUTY.time_total;
 8005db2:	4b17      	ldr	r3, [pc, #92]	; (8005e10 <scaraInitDuty+0x15d8>)
 8005db4:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8005db8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005dbc:	4a16      	ldr	r2, [pc, #88]	; (8005e18 <scaraInitDuty+0x15e0>)
 8005dbe:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	positionNext.t = 0;
 8005dc2:	4a16      	ldr	r2, [pc, #88]	; (8005e1c <scaraInitDuty+0x15e4>)
 8005dc4:	f04f 0300 	mov.w	r3, #0
 8005dc8:	f04f 0400 	mov.w	r4, #0
 8005dcc:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	positionNext.total_time = myDUTY.time_total;
 8005dd0:	4b0f      	ldr	r3, [pc, #60]	; (8005e10 <scaraInitDuty+0x15d8>)
 8005dd2:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8005dd6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005dda:	4a10      	ldr	r2, [pc, #64]	; (8005e1c <scaraInitDuty+0x15e4>)
 8005ddc:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	positionTrue.t = 0;
 8005de0:	4a0f      	ldr	r2, [pc, #60]	; (8005e20 <scaraInitDuty+0x15e8>)
 8005de2:	f04f 0300 	mov.w	r3, #0
 8005de6:	f04f 0400 	mov.w	r4, #0
 8005dea:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	positionTrue.total_time = myDUTY.time_total;
 8005dee:	4b08      	ldr	r3, [pc, #32]	; (8005e10 <scaraInitDuty+0x15d8>)
 8005df0:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8005df4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005df8:	4a09      	ldr	r2, [pc, #36]	; (8005e20 <scaraInitDuty+0x15e8>)
 8005dfa:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

	return SCARA_STATUS_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	f507 77d8 	add.w	r7, r7, #432	; 0x1b0
 8005e06:	46bd      	mov	sp, r7
 8005e08:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8005e0c:	b004      	add	sp, #16
 8005e0e:	4770      	bx	lr
 8005e10:	20005378 	.word	0x20005378
 8005e14:	20000c54 	.word	0x20000c54
 8005e18:	20005e38 	.word	0x20005e38
 8005e1c:	20005fa8 	.word	0x20005fa8
 8005e20:	20005ef0 	.word	0x20005ef0

08005e24 <scaraInitLine>:

/* Compute straight line path parameters */
SCARA_StatusTypeDef	scaraInitLine		(Path_Line_TypeDef *line,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end) {
 8005e24:	b082      	sub	sp, #8
 8005e26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e28:	b0af      	sub	sp, #188	; 0xbc
 8005e2a:	af2c      	add	r7, sp, #176	; 0xb0
 8005e2c:	6078      	str	r0, [r7, #4]
 8005e2e:	f107 0120 	add.w	r1, r7, #32
 8005e32:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE ==  kinematicInverse(&end, start)) {
 8005e36:	f107 04d8 	add.w	r4, r7, #216	; 0xd8
 8005e3a:	4668      	mov	r0, sp
 8005e3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e40:	22b0      	movs	r2, #176	; 0xb0
 8005e42:	4619      	mov	r1, r3
 8005e44:	f00f fd7c 	bl	8015940 <memcpy>
 8005e48:	f107 0320 	add.w	r3, r7, #32
 8005e4c:	cb0c      	ldmia	r3, {r2, r3}
 8005e4e:	4620      	mov	r0, r4
 8005e50:	f7fd f9fe 	bl	8003250 <kinematicInverse>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d101      	bne.n	8005e5e <scaraInitLine+0x3a>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005e5a:	2307      	movs	r3, #7
 8005e5c:	e09e      	b.n	8005f9c <scaraInitLine+0x178>
	}
	// Init line params
	line->x1 = end.x;
 8005e5e:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	e9c2 3402 	strd	r3, r4, [r2, #8]
	line->y1 = end.y;
 8005e68:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	e9c2 3406 	strd	r3, r4, [r2, #24]
	line->z1 = end.z;
 8005e72:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	line->x0 = start.x;
 8005e7c:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	e9c2 3400 	strd	r3, r4, [r2]
	line->y0 = start.y;
 8005e86:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	e9c2 3404 	strd	r3, r4, [r2, #16]
	line->z0 = start.z;
 8005e90:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	e9c2 3408 	strd	r3, r4, [r2, #32]
	line->denta_x = end.x  -  start.x;
 8005e9a:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8005e9e:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	4623      	mov	r3, r4
 8005ea6:	f7fa f9ef 	bl	8000288 <__aeabi_dsub>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	460c      	mov	r4, r1
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	line->denta_y = end.y  -  start.y;
 8005eb4:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8005eb8:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	4623      	mov	r3, r4
 8005ec0:	f7fa f9e2 	bl	8000288 <__aeabi_dsub>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	460c      	mov	r4, r1
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	line->denta_z = end.z  -  start.z;
 8005ece:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8005ed2:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	4623      	mov	r3, r4
 8005eda:	f7fa f9d5 	bl	8000288 <__aeabi_dsub>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	460c      	mov	r4, r1
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	4623      	mov	r3, r4
 8005ef8:	f7fa fb7e 	bl	80005f8 <__aeabi_dmul>
 8005efc:	4603      	mov	r3, r0
 8005efe:	460c      	mov	r4, r1
 8005f00:	461d      	mov	r5, r3
 8005f02:	4626      	mov	r6, r4
			       +(line->denta_y)*(line->denta_y)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8005f10:	461a      	mov	r2, r3
 8005f12:	4623      	mov	r3, r4
 8005f14:	f7fa fb70 	bl	80005f8 <__aeabi_dmul>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	460c      	mov	r4, r1
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	4623      	mov	r3, r4
 8005f20:	4628      	mov	r0, r5
 8005f22:	4631      	mov	r1, r6
 8005f24:	f7fa f9b2 	bl	800028c <__adddf3>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	460c      	mov	r4, r1
 8005f2c:	461d      	mov	r5, r3
 8005f2e:	4626      	mov	r6, r4
				   +(line->denta_z)*(line->denta_z));
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	4623      	mov	r3, r4
 8005f40:	f7fa fb5a 	bl	80005f8 <__aeabi_dmul>
 8005f44:	4603      	mov	r3, r0
 8005f46:	460c      	mov	r4, r1
	line->total_s = sqrt((line->denta_x)*(line->denta_x)
 8005f48:	461a      	mov	r2, r3
 8005f4a:	4623      	mov	r3, r4
 8005f4c:	4628      	mov	r0, r5
 8005f4e:	4631      	mov	r1, r6
 8005f50:	f7fa f99c 	bl	800028c <__adddf3>
 8005f54:	4603      	mov	r3, r0
 8005f56:	460c      	mov	r4, r1
 8005f58:	ec44 3b17 	vmov	d7, r3, r4
 8005f5c:	eeb0 0a47 	vmov.f32	s0, s14
 8005f60:	eef0 0a67 	vmov.f32	s1, s15
 8005f64:	f013 fbf2 	bl	801974c <sqrt>
 8005f68:	eeb0 7a40 	vmov.f32	s14, s0
 8005f6c:	eef0 7a60 	vmov.f32	s15, s1
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	line->x_current = line->x0;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	line->y_current = line->y0;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	line->z_current = line->z0;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	return SCARA_STATUS_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	370c      	adds	r7, #12
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8005fa6:	b002      	add	sp, #8
 8005fa8:	4770      	bx	lr
 8005faa:	0000      	movs	r0, r0
 8005fac:	0000      	movs	r0, r0
	...

08005fb0 <scaraInitCircle>:
/* Compute circular path parameters */
SCARA_StatusTypeDef	scaraInitCircle		(Path_Circle_TypeDef *circle,
										SCARA_PositionTypeDef start,
										SCARA_PositionTypeDef end,
										SCARA_PositionTypeDef center,
										int32_t dir){
 8005fb0:	b082      	sub	sp, #8
 8005fb2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005fb6:	b0c1      	sub	sp, #260	; 0x104
 8005fb8:	af2c      	add	r7, sp, #176	; 0xb0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8005fc0:	e881 000c 	stmia.w	r1, {r2, r3}
	// Check limit workspace
	if ( FALSE == kinematicInverse(&end, start) ) {
 8005fc4:	f507 7694 	add.w	r6, r7, #296	; 0x128
 8005fc8:	4668      	mov	r0, sp
 8005fca:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005fce:	22b0      	movs	r2, #176	; 0xb0
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	f00f fcb5 	bl	8015940 <memcpy>
 8005fd6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005fda:	cb0c      	ldmia	r3, {r2, r3}
 8005fdc:	4630      	mov	r0, r6
 8005fde:	f7fd f937 	bl	8003250 <kinematicInverse>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d101      	bne.n	8005fec <scaraInitCircle+0x3c>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8005fe8:	2307      	movs	r3, #7
 8005fea:	e146      	b.n	800627a <scaraInitCircle+0x2ca>
	}

	if( 1 != dir && -1 != dir) {
 8005fec:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d006      	beq.n	8006002 <scaraInitCircle+0x52>
 8005ff4:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8005ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ffc:	d001      	beq.n	8006002 <scaraInitCircle+0x52>
		return SCARA_STATUS_ERROR_PARA;// error direction param !!!
 8005ffe:	2306      	movs	r3, #6
 8006000:	e13b      	b.n	800627a <scaraInitCircle+0x2ca>
	}

	double v_x_start, v_y_start, v_x_stop, v_y_stop;
	double r1, r2, angle_start, angle_stop, delta_angle;
	v_x_start = start.x - center.x;
 8006002:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8006006:	e9d7 238a 	ldrd	r2, r3, [r7, #552]	; 0x228
 800600a:	f7fa f93d 	bl	8000288 <__aeabi_dsub>
 800600e:	4602      	mov	r2, r0
 8006010:	460b      	mov	r3, r1
 8006012:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	v_y_start = start.y - center.y;
 8006016:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800601a:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 800601e:	f7fa f933 	bl	8000288 <__aeabi_dsub>
 8006022:	4602      	mov	r2, r0
 8006024:	460b      	mov	r3, r1
 8006026:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	v_x_stop  = end.x  - center.x;
 800602a:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800602e:	e9d7 238a 	ldrd	r2, r3, [r7, #552]	; 0x228
 8006032:	f7fa f929 	bl	8000288 <__aeabi_dsub>
 8006036:	4602      	mov	r2, r0
 8006038:	460b      	mov	r3, r1
 800603a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	v_y_stop  = end.y  - center.y;
 800603e:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8006042:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 8006046:	f7fa f91f 	bl	8000288 <__aeabi_dsub>
 800604a:	4602      	mov	r2, r0
 800604c:	460b      	mov	r3, r1
 800604e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	r1 = sqrt(v_x_start*v_x_start + v_y_start*v_y_start);
 8006052:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006056:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800605a:	f7fa facd 	bl	80005f8 <__aeabi_dmul>
 800605e:	4602      	mov	r2, r0
 8006060:	460b      	mov	r3, r1
 8006062:	4690      	mov	r8, r2
 8006064:	4699      	mov	r9, r3
 8006066:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800606a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800606e:	f7fa fac3 	bl	80005f8 <__aeabi_dmul>
 8006072:	4602      	mov	r2, r0
 8006074:	460b      	mov	r3, r1
 8006076:	4640      	mov	r0, r8
 8006078:	4649      	mov	r1, r9
 800607a:	f7fa f907 	bl	800028c <__adddf3>
 800607e:	4602      	mov	r2, r0
 8006080:	460b      	mov	r3, r1
 8006082:	ec43 2b17 	vmov	d7, r2, r3
 8006086:	eeb0 0a47 	vmov.f32	s0, s14
 800608a:	eef0 0a67 	vmov.f32	s1, s15
 800608e:	f013 fb5d 	bl	801974c <sqrt>
 8006092:	ed87 0b08 	vstr	d0, [r7, #32]
	r2 = sqrt(v_x_stop*v_x_stop + v_y_stop*v_y_stop);
 8006096:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800609a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800609e:	f7fa faab 	bl	80005f8 <__aeabi_dmul>
 80060a2:	4602      	mov	r2, r0
 80060a4:	460b      	mov	r3, r1
 80060a6:	4690      	mov	r8, r2
 80060a8:	4699      	mov	r9, r3
 80060aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80060ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80060b2:	f7fa faa1 	bl	80005f8 <__aeabi_dmul>
 80060b6:	4602      	mov	r2, r0
 80060b8:	460b      	mov	r3, r1
 80060ba:	4640      	mov	r0, r8
 80060bc:	4649      	mov	r1, r9
 80060be:	f7fa f8e5 	bl	800028c <__adddf3>
 80060c2:	4602      	mov	r2, r0
 80060c4:	460b      	mov	r3, r1
 80060c6:	ec43 2b17 	vmov	d7, r2, r3
 80060ca:	eeb0 0a47 	vmov.f32	s0, s14
 80060ce:	eef0 0a67 	vmov.f32	s1, s15
 80060d2:	f013 fb3b 	bl	801974c <sqrt>
 80060d6:	ed87 0b06 	vstr	d0, [r7, #24]

	if( 1.0 < fabs(r1 - r2)) {
 80060da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060de:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80060e2:	f7fa f8d1 	bl	8000288 <__aeabi_dsub>
 80060e6:	4602      	mov	r2, r0
 80060e8:	460b      	mov	r3, r1
 80060ea:	4614      	mov	r4, r2
 80060ec:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80060f0:	f04f 0200 	mov.w	r2, #0
 80060f4:	4b68      	ldr	r3, [pc, #416]	; (8006298 <scaraInitCircle+0x2e8>)
 80060f6:	4620      	mov	r0, r4
 80060f8:	4629      	mov	r1, r5
 80060fa:	f7fa fd0d 	bl	8000b18 <__aeabi_dcmpgt>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d001      	beq.n	8006108 <scaraInitCircle+0x158>
		return SCARA_STATUS_ERROR_PARA; //start & stop are not in a circle together !!
 8006104:	2306      	movs	r3, #6
 8006106:	e0b8      	b.n	800627a <scaraInitCircle+0x2ca>
	}

	if (r1 < 0.1 || r2 < 0.1) {
 8006108:	a35f      	add	r3, pc, #380	; (adr r3, 8006288 <scaraInitCircle+0x2d8>)
 800610a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006112:	f7fa fce3 	bl	8000adc <__aeabi_dcmplt>
 8006116:	4603      	mov	r3, r0
 8006118:	2b00      	cmp	r3, #0
 800611a:	d109      	bne.n	8006130 <scaraInitCircle+0x180>
 800611c:	a35a      	add	r3, pc, #360	; (adr r3, 8006288 <scaraInitCircle+0x2d8>)
 800611e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006122:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006126:	f7fa fcd9 	bl	8000adc <__aeabi_dcmplt>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d001      	beq.n	8006134 <scaraInitCircle+0x184>
		return SCARA_STATUS_ERROR_PARA; //start and center almost in the same phace, radius = 0 !!
 8006130:	2306      	movs	r3, #6
 8006132:	e0a2      	b.n	800627a <scaraInitCircle+0x2ca>
	}

	angle_start = atan2(v_y_start, v_x_start);
 8006134:	ed97 1b10 	vldr	d1, [r7, #64]	; 0x40
 8006138:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800613c:	f013 fb04 	bl	8019748 <atan2>
 8006140:	ed87 0b04 	vstr	d0, [r7, #16]
	angle_stop  = atan2(v_y_stop, v_x_stop);
 8006144:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 8006148:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 800614c:	f013 fafc 	bl	8019748 <atan2>
 8006150:	ed87 0b02 	vstr	d0, [r7, #8]
	delta_angle = angle_stop - angle_start;
 8006154:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006158:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800615c:	f7fa f894 	bl	8000288 <__aeabi_dsub>
 8006160:	4603      	mov	r3, r0
 8006162:	460c      	mov	r4, r1
 8006164:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

	if ( 0 > delta_angle) {
 8006168:	f04f 0200 	mov.w	r2, #0
 800616c:	f04f 0300 	mov.w	r3, #0
 8006170:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006174:	f7fa fcb2 	bl	8000adc <__aeabi_dcmplt>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00a      	beq.n	8006194 <scaraInitCircle+0x1e4>
		delta_angle += 2*PI;
 800617e:	a344      	add	r3, pc, #272	; (adr r3, 8006290 <scaraInitCircle+0x2e0>)
 8006180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006184:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006188:	f7fa f880 	bl	800028c <__adddf3>
 800618c:	4603      	mov	r3, r0
 800618e:	460c      	mov	r4, r1
 8006190:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	} // atan2 range : -PI --> PI

	if ( 0 > dir) {
 8006194:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8006198:	2b00      	cmp	r3, #0
 800619a:	da0a      	bge.n	80061b2 <scaraInitCircle+0x202>
		delta_angle = 2*PI - delta_angle;
 800619c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80061a0:	a13b      	add	r1, pc, #236	; (adr r1, 8006290 <scaraInitCircle+0x2e0>)
 80061a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061a6:	f7fa f86f 	bl	8000288 <__aeabi_dsub>
 80061aa:	4603      	mov	r3, r0
 80061ac:	460c      	mov	r4, r1
 80061ae:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	}
	// Init circle params
	circle->dir = dir;
 80061b2:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80061b6:	b25a      	sxtb	r2, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	701a      	strb	r2, [r3, #0]
	circle->radius = r1;
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80061c2:	e9c2 3402 	strd	r3, r4, [r2, #8]
	circle->angle_start = angle_start;
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80061cc:	e9c2 3404 	strd	r3, r4, [r2, #16]
	circle->angle_stop  = angle_stop;
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80061d6:	e9c2 3406 	strd	r3, r4, [r2, #24]
	circle->total_angle = delta_angle;
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80061e0:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	circle->total_s = delta_angle*r1;
 80061e4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80061e8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80061ec:	f7fa fa04 	bl	80005f8 <__aeabi_dmul>
 80061f0:	4603      	mov	r3, r0
 80061f2:	460c      	mov	r4, r1
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	circle->x0 = start.x;
 80061fa:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	e9c2 3408 	strd	r3, r4, [r2, #32]
	circle->y0 = start.y;
 8006204:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	circle->x1 = end.x;
 800620e:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	circle->y1 = end.y;
 8006218:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	circle->xi = center.x;
 8006222:	e9d7 348a 	ldrd	r3, r4, [r7, #552]	; 0x228
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	circle->yi = center.y;
 800622c:	e9d7 348c 	ldrd	r3, r4, [r7, #560]	; 0x230
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	circle->z0 = start.z;
 8006236:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	circle->z1 = start.z;
 8006240:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	circle->zi = start.z;
 800624a:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	circle->x_current = circle->x0;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	circle->y_current = circle->y0;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	circle->z_current = circle->z0;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

	return SCARA_STATUS_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3754      	adds	r7, #84	; 0x54
 800627e:	46bd      	mov	sp, r7
 8006280:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006284:	b002      	add	sp, #8
 8006286:	4770      	bx	lr
 8006288:	9999999a 	.word	0x9999999a
 800628c:	3fb99999 	.word	0x3fb99999
 8006290:	60000000 	.word	0x60000000
 8006294:	401921fb 	.word	0x401921fb
 8006298:	3ff00000 	.word	0x3ff00000
 800629c:	00000000 	.word	0x00000000

080062a0 <scaraInitLSPB>:
SCARA_StatusTypeDef	scaraInitLSPB		(Trajectory_LSPB_TypeDef *lspb,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double a_factor) {
 80062a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062a4:	b0ad      	sub	sp, #180	; 0xb4
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80062aa:	460b      	mov	r3, r1
 80062ac:	ed87 0b08 	vstr	d0, [r7, #32]
 80062b0:	ed87 1b06 	vstr	d1, [r7, #24]
 80062b4:	ed87 2b04 	vstr	d2, [r7, #16]
 80062b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062bc:	4613      	mov	r3, r2
 80062be:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	 double v_design, a_design, v_lim, q0, q1, v0, v1, ta, td, tf;
	 uint32_t	no_sample;
	 int8_t	dir;

	 if ( TRAJECTORY_3D == target) {
 80062c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80062c6:	2b04      	cmp	r3, #4
 80062c8:	d118      	bne.n	80062fc <scaraInitLSPB+0x5c>
		 v_design = V_DESIGN_3D*v_factor;
 80062ca:	f20f 7380 	addw	r3, pc, #1920	; 0x780
 80062ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80062d6:	f7fa f98f 	bl	80005f8 <__aeabi_dmul>
 80062da:	4603      	mov	r3, r0
 80062dc:	460c      	mov	r4, r1
 80062de:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_3D*a_factor;
 80062e2:	f20f 7368 	addw	r3, pc, #1896	; 0x768
 80062e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80062ee:	f7fa f983 	bl	80005f8 <__aeabi_dmul>
 80062f2:	4603      	mov	r3, r0
 80062f4:	460c      	mov	r4, r1
 80062f6:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 80062fa:	e092      	b.n	8006422 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_ROLL == target) {
 80062fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006300:	2b05      	cmp	r3, #5
 8006302:	d118      	bne.n	8006336 <scaraInitLSPB+0x96>
		 v_design = V_DESIGN_ROLL*v_factor;
 8006304:	f20f 734c 	addw	r3, pc, #1868	; 0x74c
 8006308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006310:	f7fa f972 	bl	80005f8 <__aeabi_dmul>
 8006314:	4603      	mov	r3, r0
 8006316:	460c      	mov	r4, r1
 8006318:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_ROLL*a_factor;
 800631c:	f20f 7334 	addw	r3, pc, #1844	; 0x734
 8006320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006324:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006328:	f7fa f966 	bl	80005f8 <__aeabi_dmul>
 800632c:	4603      	mov	r3, r0
 800632e:	460c      	mov	r4, r1
 8006330:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 8006334:	e075      	b.n	8006422 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J0 == target) {
 8006336:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800633a:	2b00      	cmp	r3, #0
 800633c:	d118      	bne.n	8006370 <scaraInitLSPB+0xd0>
		 v_design = V_DESIGN_J0*v_factor;
 800633e:	f20f 7314 	addw	r3, pc, #1812	; 0x714
 8006342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006346:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800634a:	f7fa f955 	bl	80005f8 <__aeabi_dmul>
 800634e:	4603      	mov	r3, r0
 8006350:	460c      	mov	r4, r1
 8006352:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J0*a_factor;
 8006356:	f20f 63fc 	addw	r3, pc, #1788	; 0x6fc
 800635a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800635e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006362:	f7fa f949 	bl	80005f8 <__aeabi_dmul>
 8006366:	4603      	mov	r3, r0
 8006368:	460c      	mov	r4, r1
 800636a:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 800636e:	e058      	b.n	8006422 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J1 == target) {
 8006370:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006374:	2b01      	cmp	r3, #1
 8006376:	d118      	bne.n	80063aa <scaraInitLSPB+0x10a>
		 v_design = V_DESIGN_J1*v_factor;
 8006378:	f20f 63d8 	addw	r3, pc, #1752	; 0x6d8
 800637c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006380:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006384:	f7fa f938 	bl	80005f8 <__aeabi_dmul>
 8006388:	4603      	mov	r3, r0
 800638a:	460c      	mov	r4, r1
 800638c:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J1*a_factor;
 8006390:	f20f 63c0 	addw	r3, pc, #1728	; 0x6c0
 8006394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006398:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800639c:	f7fa f92c 	bl	80005f8 <__aeabi_dmul>
 80063a0:	4603      	mov	r3, r0
 80063a2:	460c      	mov	r4, r1
 80063a4:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 80063a8:	e03b      	b.n	8006422 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J2 == target) {
 80063aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d118      	bne.n	80063e4 <scaraInitLSPB+0x144>
		 v_design = V_DESIGN_J2*v_factor;
 80063b2:	f20f 6398 	addw	r3, pc, #1688	; 0x698
 80063b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80063be:	f7fa f91b 	bl	80005f8 <__aeabi_dmul>
 80063c2:	4603      	mov	r3, r0
 80063c4:	460c      	mov	r4, r1
 80063c6:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J2*a_factor;
 80063ca:	f20f 6380 	addw	r3, pc, #1664	; 0x680
 80063ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80063d6:	f7fa f90f 	bl	80005f8 <__aeabi_dmul>
 80063da:	4603      	mov	r3, r0
 80063dc:	460c      	mov	r4, r1
 80063de:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 80063e2:	e01e      	b.n	8006422 <scaraInitLSPB+0x182>
	 } else if (TRAJECTORY_J3 == target) {
 80063e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80063e8:	2b03      	cmp	r3, #3
 80063ea:	d118      	bne.n	800641e <scaraInitLSPB+0x17e>
		 v_design = V_DESIGN_J3*v_factor;
 80063ec:	f20f 636c 	addw	r3, pc, #1644	; 0x66c
 80063f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80063f8:	f7fa f8fe 	bl	80005f8 <__aeabi_dmul>
 80063fc:	4603      	mov	r3, r0
 80063fe:	460c      	mov	r4, r1
 8006400:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 a_design = A_DESIGN_J3*a_factor;
 8006404:	f20f 6354 	addw	r3, pc, #1620	; 0x654
 8006408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006410:	f7fa f8f2 	bl	80005f8 <__aeabi_dmul>
 8006414:	4603      	mov	r3, r0
 8006416:	460c      	mov	r4, r1
 8006418:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 800641c:	e001      	b.n	8006422 <scaraInitLSPB+0x182>
	 } else {
		 return SCARA_STATUS_ERROR_PARA;
 800641e:	2306      	movs	r3, #6
 8006420:	e309      	b.n	8006a36 <scaraInitLSPB+0x796>
	 }

	 q0 = 0;
 8006422:	f04f 0300 	mov.w	r3, #0
 8006426:	f04f 0400 	mov.w	r4, #0
 800642a:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	 q1 = total_s;
 800642e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8006432:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
	 v0 = 0;
 8006436:	f04f 0300 	mov.w	r3, #0
 800643a:	f04f 0400 	mov.w	r4, #0
 800643e:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	 v1 = 0;
 8006442:	f04f 0300 	mov.w	r3, #0
 8006446:	f04f 0400 	mov.w	r4, #0
 800644a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50

	 if ( q0 <= q1) {
 800644e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8006452:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006456:	f7fa fb4b 	bl	8000af0 <__aeabi_dcmple>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d003      	beq.n	8006468 <scaraInitLSPB+0x1c8>
		 dir = 1;
 8006460:	2301      	movs	r3, #1
 8006462:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8006466:	e00c      	b.n	8006482 <scaraInitLSPB+0x1e2>
	 } else {
		 dir = -1;
 8006468:	23ff      	movs	r3, #255	; 0xff
 800646a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		 q1 = -q1;
 800646e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006472:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006476:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800647a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800647e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	 }

	 if (DUTY_MODE_INIT_QVT == modeinit) {
 8006482:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006486:	2b01      	cmp	r3, #1
 8006488:	f040 80ad 	bne.w	80065e6 <scaraInitLSPB+0x346>
		 double v_lower, v_upper, tc_upper, a_upper;
		 tf = lspb->Tf;
 800648c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800648e:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8006492:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 // Avoid division by 0
		 if (tf > 0.001) {
 8006496:	f20f 53cc 	addw	r3, pc, #1484	; 0x5cc
 800649a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800649e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80064a2:	f7fa fb39 	bl	8000b18 <__aeabi_dcmpgt>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	f000 8090 	beq.w	80065ce <scaraInitLSPB+0x32e>
			 v_lower 	= (q1 - q0) / tf;
 80064ae:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80064b2:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80064b6:	f7f9 fee7 	bl	8000288 <__aeabi_dsub>
 80064ba:	4603      	mov	r3, r0
 80064bc:	460c      	mov	r4, r1
 80064be:	4618      	mov	r0, r3
 80064c0:	4621      	mov	r1, r4
 80064c2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80064c6:	f7fa f9c1 	bl	800084c <__aeabi_ddiv>
 80064ca:	4603      	mov	r3, r0
 80064cc:	460c      	mov	r4, r1
 80064ce:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			 v_upper 	= 2*(q1 - q0) / tf;
 80064d2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80064d6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80064da:	f7f9 fed5 	bl	8000288 <__aeabi_dsub>
 80064de:	4603      	mov	r3, r0
 80064e0:	460c      	mov	r4, r1
 80064e2:	4618      	mov	r0, r3
 80064e4:	4621      	mov	r1, r4
 80064e6:	4602      	mov	r2, r0
 80064e8:	460b      	mov	r3, r1
 80064ea:	f7f9 fecf 	bl	800028c <__adddf3>
 80064ee:	4603      	mov	r3, r0
 80064f0:	460c      	mov	r4, r1
 80064f2:	4618      	mov	r0, r3
 80064f4:	4621      	mov	r1, r4
 80064f6:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80064fa:	f7fa f9a7 	bl	800084c <__aeabi_ddiv>
 80064fe:	4603      	mov	r3, r0
 8006500:	460c      	mov	r4, r1
 8006502:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

			 if ( v_design < v_lower) {
 8006506:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800650a:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800650e:	f7fa fae5 	bl	8000adc <__aeabi_dcmplt>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d001      	beq.n	800651c <scaraInitLSPB+0x27c>
				 return SCARA_STATUS_ERROR_OVER_VELOC;
 8006518:	2309      	movs	r3, #9
 800651a:	e28c      	b.n	8006a36 <scaraInitLSPB+0x796>
			 } else {
				 if ( v_upper <= v_design) {
 800651c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8006520:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006524:	f7fa fae4 	bl	8000af0 <__aeabi_dcmple>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d003      	beq.n	8006536 <scaraInitLSPB+0x296>
					 v_design = v_upper;
 800652e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8006532:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
				 }
				 // Avoid division by 0
				 if (v_design > 0.0000001) {
 8006536:	f20f 5334 	addw	r3, pc, #1332	; 0x534
 800653a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800653e:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8006542:	f7fa fae9 	bl	8000b18 <__aeabi_dcmpgt>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d01a      	beq.n	8006582 <scaraInitLSPB+0x2e2>
					 tc_upper	= tf - (q1 - q0)/v_design;
 800654c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8006550:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8006554:	f7f9 fe98 	bl	8000288 <__aeabi_dsub>
 8006558:	4603      	mov	r3, r0
 800655a:	460c      	mov	r4, r1
 800655c:	4618      	mov	r0, r3
 800655e:	4621      	mov	r1, r4
 8006560:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8006564:	f7fa f972 	bl	800084c <__aeabi_ddiv>
 8006568:	4603      	mov	r3, r0
 800656a:	460c      	mov	r4, r1
 800656c:	461a      	mov	r2, r3
 800656e:	4623      	mov	r3, r4
 8006570:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8006574:	f7f9 fe88 	bl	8000288 <__aeabi_dsub>
 8006578:	4603      	mov	r3, r0
 800657a:	460c      	mov	r4, r1
 800657c:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
 8006580:	e00b      	b.n	800659a <scaraInitLSPB+0x2fa>
				 } else {
					 tc_upper = tf / 2;
 8006582:	f04f 0200 	mov.w	r2, #0
 8006586:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800658a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800658e:	f7fa f95d 	bl	800084c <__aeabi_ddiv>
 8006592:	4603      	mov	r3, r0
 8006594:	460c      	mov	r4, r1
 8006596:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
				 }
				 a_upper	= v_design/tc_upper;
 800659a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800659e:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80065a2:	f7fa f953 	bl	800084c <__aeabi_ddiv>
 80065a6:	4603      	mov	r3, r0
 80065a8:	460c      	mov	r4, r1
 80065aa:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
				 if ( a_upper > a_design) {
 80065ae:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80065b2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80065b6:	f7fa faaf 	bl	8000b18 <__aeabi_dcmpgt>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d001      	beq.n	80065c4 <scaraInitLSPB+0x324>
					 return SCARA_STATUS_ERROR_OVER_ACCEL;
 80065c0:	230a      	movs	r3, #10
 80065c2:	e238      	b.n	8006a36 <scaraInitLSPB+0x796>
				 } else {
					 a_design = a_upper;
 80065c4:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80065c8:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
 80065cc:	e00b      	b.n	80065e6 <scaraInitLSPB+0x346>
				 }
			 }
		 } else {
			 v_design = 0;
 80065ce:	f04f 0300 	mov.w	r3, #0
 80065d2:	f04f 0400 	mov.w	r4, #0
 80065d6:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
			 a_design = 0;
 80065da:	f04f 0300 	mov.w	r3, #0
 80065de:	f04f 0400 	mov.w	r4, #0
 80065e2:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
		 }
	}

	 // Check condition trapezoidal ---> triangle
	 // Avoid division by 0
	 if (a_design > 0.0000001 && v_design > 0.0000001) {
 80065e6:	f20f 4384 	addw	r3, pc, #1156	; 0x484
 80065ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ee:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80065f2:	f7fa fa91 	bl	8000b18 <__aeabi_dcmpgt>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f000 819c 	beq.w	8006936 <scaraInitLSPB+0x696>
 80065fe:	f20f 436c 	addw	r3, pc, #1132	; 0x46c
 8006602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006606:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800660a:	f7fa fa85 	bl	8000b18 <__aeabi_dcmpgt>
 800660e:	4603      	mov	r3, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	f000 8190 	beq.w	8006936 <scaraInitLSPB+0x696>
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 8006616:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800661a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800661e:	f7f9 fe33 	bl	8000288 <__aeabi_dsub>
 8006622:	4603      	mov	r3, r0
 8006624:	460c      	mov	r4, r1
 8006626:	461d      	mov	r5, r3
 8006628:	f024 4600 	bic.w	r6, r4, #2147483648	; 0x80000000
 800662c:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8006630:	4628      	mov	r0, r5
 8006632:	4631      	mov	r1, r6
 8006634:	f7f9 ffe0 	bl	80005f8 <__aeabi_dmul>
 8006638:	4603      	mov	r3, r0
 800663a:	460c      	mov	r4, r1
 800663c:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8006640:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8006644:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8006648:	f7f9 ffd6 	bl	80005f8 <__aeabi_dmul>
 800664c:	4603      	mov	r3, r0
 800664e:	460c      	mov	r4, r1
 8006650:	e9c7 3400 	strd	r3, r4, [r7]
 8006654:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006658:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800665c:	f7f9 ffcc 	bl	80005f8 <__aeabi_dmul>
 8006660:	4603      	mov	r3, r0
 8006662:	460c      	mov	r4, r1
 8006664:	461d      	mov	r5, r3
 8006666:	4626      	mov	r6, r4
 8006668:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800666c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006670:	f7f9 ffc2 	bl	80005f8 <__aeabi_dmul>
 8006674:	4603      	mov	r3, r0
 8006676:	460c      	mov	r4, r1
 8006678:	461a      	mov	r2, r3
 800667a:	4623      	mov	r3, r4
 800667c:	4628      	mov	r0, r5
 800667e:	4631      	mov	r1, r6
 8006680:	f7f9 fe04 	bl	800028c <__adddf3>
 8006684:	4603      	mov	r3, r0
 8006686:	460c      	mov	r4, r1
 8006688:	4618      	mov	r0, r3
 800668a:	4621      	mov	r1, r4
 800668c:	f04f 0200 	mov.w	r2, #0
 8006690:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006694:	f7fa f8da 	bl	800084c <__aeabi_ddiv>
 8006698:	4603      	mov	r3, r0
 800669a:	460c      	mov	r4, r1
 800669c:	461a      	mov	r2, r3
 800669e:	4623      	mov	r3, r4
 80066a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066a4:	f7f9 fdf0 	bl	8000288 <__aeabi_dsub>
 80066a8:	4603      	mov	r3, r0
 80066aa:	460c      	mov	r4, r1
 80066ac:	461a      	mov	r2, r3
 80066ae:	4623      	mov	r3, r4
 80066b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80066b4:	f7fa fa1c 	bl	8000af0 <__aeabi_dcmple>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d075      	beq.n	80067aa <scaraInitLSPB+0x50a>
			 v_lim 	= sqrt(fabs(q1 - q0)*a_design + (v0*v0 + v1*v1)/2);
 80066be:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80066c2:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80066c6:	f7f9 fddf 	bl	8000288 <__aeabi_dsub>
 80066ca:	4603      	mov	r3, r0
 80066cc:	460c      	mov	r4, r1
 80066ce:	469a      	mov	sl, r3
 80066d0:	f024 4b00 	bic.w	fp, r4, #2147483648	; 0x80000000
 80066d4:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80066d8:	4650      	mov	r0, sl
 80066da:	4659      	mov	r1, fp
 80066dc:	f7f9 ff8c 	bl	80005f8 <__aeabi_dmul>
 80066e0:	4603      	mov	r3, r0
 80066e2:	460c      	mov	r4, r1
 80066e4:	4625      	mov	r5, r4
 80066e6:	461c      	mov	r4, r3
 80066e8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80066ec:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80066f0:	f7f9 ff82 	bl	80005f8 <__aeabi_dmul>
 80066f4:	4602      	mov	r2, r0
 80066f6:	460b      	mov	r3, r1
 80066f8:	4690      	mov	r8, r2
 80066fa:	4699      	mov	r9, r3
 80066fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006700:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006704:	f7f9 ff78 	bl	80005f8 <__aeabi_dmul>
 8006708:	4602      	mov	r2, r0
 800670a:	460b      	mov	r3, r1
 800670c:	4640      	mov	r0, r8
 800670e:	4649      	mov	r1, r9
 8006710:	f7f9 fdbc 	bl	800028c <__adddf3>
 8006714:	4602      	mov	r2, r0
 8006716:	460b      	mov	r3, r1
 8006718:	4610      	mov	r0, r2
 800671a:	4619      	mov	r1, r3
 800671c:	f04f 0200 	mov.w	r2, #0
 8006720:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006724:	f7fa f892 	bl	800084c <__aeabi_ddiv>
 8006728:	4602      	mov	r2, r0
 800672a:	460b      	mov	r3, r1
 800672c:	4620      	mov	r0, r4
 800672e:	4629      	mov	r1, r5
 8006730:	f7f9 fdac 	bl	800028c <__adddf3>
 8006734:	4603      	mov	r3, r0
 8006736:	460c      	mov	r4, r1
 8006738:	ec44 3b17 	vmov	d7, r3, r4
 800673c:	eeb0 0a47 	vmov.f32	s0, s14
 8006740:	eef0 0a67 	vmov.f32	s1, s15
 8006744:	f013 f802 	bl	801974c <sqrt>
 8006748:	ed87 0b26 	vstr	d0, [r7, #152]	; 0x98
			 ta		= (v_lim - v0)/a_design;
 800674c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006750:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006754:	f7f9 fd98 	bl	8000288 <__aeabi_dsub>
 8006758:	4603      	mov	r3, r0
 800675a:	460c      	mov	r4, r1
 800675c:	4618      	mov	r0, r3
 800675e:	4621      	mov	r1, r4
 8006760:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8006764:	f7fa f872 	bl	800084c <__aeabi_ddiv>
 8006768:	4603      	mov	r3, r0
 800676a:	460c      	mov	r4, r1
 800676c:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			 td		= (v_lim - v1)/a_design;
 8006770:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006774:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006778:	f7f9 fd86 	bl	8000288 <__aeabi_dsub>
 800677c:	4603      	mov	r3, r0
 800677e:	460c      	mov	r4, r1
 8006780:	4618      	mov	r0, r3
 8006782:	4621      	mov	r1, r4
 8006784:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8006788:	f7fa f860 	bl	800084c <__aeabi_ddiv>
 800678c:	4603      	mov	r3, r0
 800678e:	460c      	mov	r4, r1
 8006790:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
			 tf		= ta + td;
 8006794:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8006798:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800679c:	f7f9 fd76 	bl	800028c <__adddf3>
 80067a0:	4603      	mov	r3, r0
 80067a2:	460c      	mov	r4, r1
 80067a4:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 80067a8:	e0e3      	b.n	8006972 <scaraInitLSPB+0x6d2>
		 } else {
			 v_lim	= v_design;
 80067aa:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80067ae:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
			 ta		= (v_lim - v0)/a_design;
 80067b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80067b6:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80067ba:	f7f9 fd65 	bl	8000288 <__aeabi_dsub>
 80067be:	4603      	mov	r3, r0
 80067c0:	460c      	mov	r4, r1
 80067c2:	4618      	mov	r0, r3
 80067c4:	4621      	mov	r1, r4
 80067c6:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80067ca:	f7fa f83f 	bl	800084c <__aeabi_ddiv>
 80067ce:	4603      	mov	r3, r0
 80067d0:	460c      	mov	r4, r1
 80067d2:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			 td		= (v_lim - v1)/a_design;
 80067d6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80067da:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80067de:	f7f9 fd53 	bl	8000288 <__aeabi_dsub>
 80067e2:	4603      	mov	r3, r0
 80067e4:	460c      	mov	r4, r1
 80067e6:	4618      	mov	r0, r3
 80067e8:	4621      	mov	r1, r4
 80067ea:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80067ee:	f7fa f82d 	bl	800084c <__aeabi_ddiv>
 80067f2:	4603      	mov	r3, r0
 80067f4:	460c      	mov	r4, r1
 80067f6:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 80067fa:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80067fe:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006802:	f7f9 fd41 	bl	8000288 <__aeabi_dsub>
 8006806:	4603      	mov	r3, r0
 8006808:	460c      	mov	r4, r1
 800680a:	4698      	mov	r8, r3
 800680c:	f024 4900 	bic.w	r9, r4, #2147483648	; 0x80000000
 8006810:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8006814:	4640      	mov	r0, r8
 8006816:	4649      	mov	r1, r9
 8006818:	f7fa f818 	bl	800084c <__aeabi_ddiv>
 800681c:	4603      	mov	r3, r0
 800681e:	460c      	mov	r4, r1
 8006820:	4625      	mov	r5, r4
 8006822:	461c      	mov	r4, r3
 8006824:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8006828:	4602      	mov	r2, r0
 800682a:	460b      	mov	r3, r1
 800682c:	f7f9 fd2e 	bl	800028c <__adddf3>
 8006830:	4602      	mov	r2, r0
 8006832:	460b      	mov	r3, r1
 8006834:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006838:	f7fa f808 	bl	800084c <__aeabi_ddiv>
 800683c:	4602      	mov	r2, r0
 800683e:	460b      	mov	r3, r1
 8006840:	4690      	mov	r8, r2
 8006842:	4699      	mov	r9, r3
 8006844:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8006848:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800684c:	f7f9 fffe 	bl	800084c <__aeabi_ddiv>
 8006850:	4602      	mov	r2, r0
 8006852:	460b      	mov	r3, r1
 8006854:	f04f 0000 	mov.w	r0, #0
 8006858:	497b      	ldr	r1, [pc, #492]	; (8006a48 <scaraInitLSPB+0x7a8>)
 800685a:	f7f9 fd15 	bl	8000288 <__aeabi_dsub>
 800685e:	4602      	mov	r2, r0
 8006860:	460b      	mov	r3, r1
 8006862:	4640      	mov	r0, r8
 8006864:	4649      	mov	r1, r9
 8006866:	f7f9 fec7 	bl	80005f8 <__aeabi_dmul>
 800686a:	4602      	mov	r2, r0
 800686c:	460b      	mov	r3, r1
 800686e:	4690      	mov	r8, r2
 8006870:	4699      	mov	r9, r3
 8006872:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8006876:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800687a:	f7f9 ffe7 	bl	800084c <__aeabi_ddiv>
 800687e:	4602      	mov	r2, r0
 8006880:	460b      	mov	r3, r1
 8006882:	f04f 0000 	mov.w	r0, #0
 8006886:	4970      	ldr	r1, [pc, #448]	; (8006a48 <scaraInitLSPB+0x7a8>)
 8006888:	f7f9 fcfe 	bl	8000288 <__aeabi_dsub>
 800688c:	4602      	mov	r2, r0
 800688e:	460b      	mov	r3, r1
 8006890:	4640      	mov	r0, r8
 8006892:	4649      	mov	r1, r9
 8006894:	f7f9 feb0 	bl	80005f8 <__aeabi_dmul>
 8006898:	4602      	mov	r2, r0
 800689a:	460b      	mov	r3, r1
 800689c:	4620      	mov	r0, r4
 800689e:	4629      	mov	r1, r5
 80068a0:	f7f9 fcf4 	bl	800028c <__adddf3>
 80068a4:	4603      	mov	r3, r0
 80068a6:	460c      	mov	r4, r1
 80068a8:	4625      	mov	r5, r4
 80068aa:	461c      	mov	r4, r3
							+ v_lim/(2*a_design)*(1 - v1/v_lim)*(1 - v1/v_lim);
 80068ac:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80068b0:	4602      	mov	r2, r0
 80068b2:	460b      	mov	r3, r1
 80068b4:	f7f9 fcea 	bl	800028c <__adddf3>
 80068b8:	4602      	mov	r2, r0
 80068ba:	460b      	mov	r3, r1
 80068bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80068c0:	f7f9 ffc4 	bl	800084c <__aeabi_ddiv>
 80068c4:	4602      	mov	r2, r0
 80068c6:	460b      	mov	r3, r1
 80068c8:	4690      	mov	r8, r2
 80068ca:	4699      	mov	r9, r3
 80068cc:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80068d0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80068d4:	f7f9 ffba 	bl	800084c <__aeabi_ddiv>
 80068d8:	4602      	mov	r2, r0
 80068da:	460b      	mov	r3, r1
 80068dc:	f04f 0000 	mov.w	r0, #0
 80068e0:	4959      	ldr	r1, [pc, #356]	; (8006a48 <scaraInitLSPB+0x7a8>)
 80068e2:	f7f9 fcd1 	bl	8000288 <__aeabi_dsub>
 80068e6:	4602      	mov	r2, r0
 80068e8:	460b      	mov	r3, r1
 80068ea:	4640      	mov	r0, r8
 80068ec:	4649      	mov	r1, r9
 80068ee:	f7f9 fe83 	bl	80005f8 <__aeabi_dmul>
 80068f2:	4602      	mov	r2, r0
 80068f4:	460b      	mov	r3, r1
 80068f6:	4690      	mov	r8, r2
 80068f8:	4699      	mov	r9, r3
 80068fa:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80068fe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006902:	f7f9 ffa3 	bl	800084c <__aeabi_ddiv>
 8006906:	4602      	mov	r2, r0
 8006908:	460b      	mov	r3, r1
 800690a:	f04f 0000 	mov.w	r0, #0
 800690e:	494e      	ldr	r1, [pc, #312]	; (8006a48 <scaraInitLSPB+0x7a8>)
 8006910:	f7f9 fcba 	bl	8000288 <__aeabi_dsub>
 8006914:	4602      	mov	r2, r0
 8006916:	460b      	mov	r3, r1
 8006918:	4640      	mov	r0, r8
 800691a:	4649      	mov	r1, r9
 800691c:	f7f9 fe6c 	bl	80005f8 <__aeabi_dmul>
 8006920:	4602      	mov	r2, r0
 8006922:	460b      	mov	r3, r1
			 tf		= fabs(q0 - q1)/v_lim + v_lim/(2*a_design)*(1 - v0/v_lim)*(1 - v0/v_lim)
 8006924:	4620      	mov	r0, r4
 8006926:	4629      	mov	r1, r5
 8006928:	f7f9 fcb0 	bl	800028c <__adddf3>
 800692c:	4603      	mov	r3, r0
 800692e:	460c      	mov	r4, r1
 8006930:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		 if ( (fabs(q1 - q0)*a_design) <= (v_design*v_design - (v0*v0 + v1*v1)/2)) {
 8006934:	e01d      	b.n	8006972 <scaraInitLSPB+0x6d2>
		 }
	 } else {
		 v_lim	= 0;
 8006936:	f04f 0300 	mov.w	r3, #0
 800693a:	f04f 0400 	mov.w	r4, #0
 800693e:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		 ta = tf/2;
 8006942:	f04f 0200 	mov.w	r2, #0
 8006946:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800694a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800694e:	f7f9 ff7d 	bl	800084c <__aeabi_ddiv>
 8006952:	4603      	mov	r3, r0
 8006954:	460c      	mov	r4, r1
 8006956:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
		 td = tf/2;
 800695a:	f04f 0200 	mov.w	r2, #0
 800695e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006962:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8006966:	f7f9 ff71 	bl	800084c <__aeabi_ddiv>
 800696a:	4603      	mov	r3, r0
 800696c:	460c      	mov	r4, r1
 800696e:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	 }

	 no_sample = ceilf(tf / T_SAMPLING); // ceiling
 8006972:	a333      	add	r3, pc, #204	; (adr r3, 8006a40 <scaraInitLSPB+0x7a0>)
 8006974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006978:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800697c:	f7f9 ff66 	bl	800084c <__aeabi_ddiv>
 8006980:	4603      	mov	r3, r0
 8006982:	460c      	mov	r4, r1
 8006984:	4618      	mov	r0, r3
 8006986:	4621      	mov	r1, r4
 8006988:	f7fa f92e 	bl	8000be8 <__aeabi_d2f>
 800698c:	4603      	mov	r3, r0
 800698e:	ee00 3a10 	vmov	s0, r3
 8006992:	f012 fe99 	bl	80196c8 <ceilf>
 8006996:	eef0 7a40 	vmov.f32	s15, s0
 800699a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800699e:	ee17 3a90 	vmov	r3, s15
 80069a2:	637b      	str	r3, [r7, #52]	; 0x34
	 // Init lspb params
	 lspb->dir= dir;
 80069a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a6:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 80069aa:	701a      	strb	r2, [r3, #0]
	 lspb->s0 = q0;
 80069ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069ae:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80069b2:	e9c2 3402 	strd	r3, r4, [r2, #8]
	 lspb->s1 = q1;
 80069b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069b8:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 80069bc:	e9c2 3404 	strd	r3, r4, [r2, #16]
	 lspb->Ta = ta;
 80069c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069c2:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 80069c6:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	 lspb->Td = td;
 80069ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069cc:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 80069d0:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	 lspb->Tf = tf;
 80069d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069d6:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80069da:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	 lspb->a_design = a_design;
 80069de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069e0:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 80069e4:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	 lspb->v_design = v_design;
 80069e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069ea:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80069ee:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	 lspb->v_lim = v_lim;
 80069f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069f4:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 80069f8:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	 lspb->v0 = v0;
 80069fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069fe:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8006a02:	e9c2 3406 	strd	r3, r4, [r2, #24]
	 lspb->v1 = v1;
 8006a06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a08:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8006a0c:	e9c2 3408 	strd	r3, r4, [r2, #32]
	 lspb->num_of_sampling = no_sample;
 8006a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a14:	659a      	str	r2, [r3, #88]	; 0x58
	 lspb->total_s = lspb->s1 - lspb->s0;
 8006a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a18:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8006a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a1e:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8006a22:	461a      	mov	r2, r3
 8006a24:	4623      	mov	r3, r4
 8006a26:	f7f9 fc2f 	bl	8000288 <__aeabi_dsub>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	460c      	mov	r4, r1
 8006a2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a30:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

	 return SCARA_STATUS_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	37b4      	adds	r7, #180	; 0xb4
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a40:	40000000 	.word	0x40000000
 8006a44:	3f847ae1 	.word	0x3f847ae1
 8006a48:	3ff00000 	.word	0x3ff00000
 8006a4c:	00000000 	.word	0x00000000
 8006a50:	405c2000 	.word	0x405c2000
 8006a54:	14000000 	.word	0x14000000
 8006a58:	4000f6f0 	.word	0x4000f6f0
 8006a5c:	6b259425 	.word	0x6b259425
 8006a60:	40069b91 	.word	0x40069b91
 8006a64:	d2f1a9fc 	.word	0xd2f1a9fc
 8006a68:	3f50624d 	.word	0x3f50624d
 8006a6c:	9abcaf48 	.word	0x9abcaf48
 8006a70:	3e7ad7f2 	.word	0x3e7ad7f2
 8006a74:	00000000 	.word	0x00000000

08006a78 <scaraInitScurve>:
SCARA_StatusTypeDef	scaraInitScurve		(Trajectory_Scurve_TypeDef *scurve,
										Trajectory_TargetTypeDef target,
										double total_s,
										ModeInitTypeDef modeinit,
										double v_factor,
										double a_factor) {
 8006a78:	b5b0      	push	{r4, r5, r7, lr}
 8006a7a:	b0ba      	sub	sp, #232	; 0xe8
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	61f8      	str	r0, [r7, #28]
 8006a80:	460b      	mov	r3, r1
 8006a82:	ed87 0b04 	vstr	d0, [r7, #16]
 8006a86:	ed87 1b02 	vstr	d1, [r7, #8]
 8006a8a:	ed87 2b00 	vstr	d2, [r7]
 8006a8e:	76fb      	strb	r3, [r7, #27]
 8006a90:	4613      	mov	r3, r2
 8006a92:	76bb      	strb	r3, [r7, #26]
	 double v_design, a_design, q0, q1, v0, v1, v_lim, j_max, tm, tc, tf, dir;
	 double v_1, s_1, v_2, s_2, v_3, s_3, v_4, s_4;
	 uint32_t	 no_sample;
	 uint8_t	 no_phases;

	 if ( TRAJECTORY_3D == target) {
 8006a94:	7efb      	ldrb	r3, [r7, #27]
 8006a96:	2b04      	cmp	r3, #4
 8006a98:	d118      	bne.n	8006acc <scaraInitScurve+0x54>
		 v_design = V_DESIGN_3D*v_factor;
 8006a9a:	f20f 4320 	addw	r3, pc, #1056	; 0x420
 8006a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006aa6:	f7f9 fda7 	bl	80005f8 <__aeabi_dmul>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	460c      	mov	r4, r1
 8006aae:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_3D*a_factor;
 8006ab2:	f20f 4308 	addw	r3, pc, #1032	; 0x408
 8006ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006abe:	f7f9 fd9b 	bl	80005f8 <__aeabi_dmul>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	460c      	mov	r4, r1
 8006ac6:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8006aca:	e083      	b.n	8006bd4 <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_ROLL == target) {
 8006acc:	7efb      	ldrb	r3, [r7, #27]
 8006ace:	2b05      	cmp	r3, #5
 8006ad0:	d116      	bne.n	8006b00 <scaraInitScurve+0x88>
		 v_design = V_DESIGN_ROLL*v_factor;
 8006ad2:	a3fc      	add	r3, pc, #1008	; (adr r3, 8006ec4 <scaraInitScurve+0x44c>)
 8006ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006adc:	f7f9 fd8c 	bl	80005f8 <__aeabi_dmul>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	460c      	mov	r4, r1
 8006ae4:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_ROLL*a_factor;
 8006ae8:	a3f6      	add	r3, pc, #984	; (adr r3, 8006ec4 <scaraInitScurve+0x44c>)
 8006aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006af2:	f7f9 fd81 	bl	80005f8 <__aeabi_dmul>
 8006af6:	4603      	mov	r3, r0
 8006af8:	460c      	mov	r4, r1
 8006afa:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8006afe:	e069      	b.n	8006bd4 <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J0 == target) {
 8006b00:	7efb      	ldrb	r3, [r7, #27]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d116      	bne.n	8006b34 <scaraInitScurve+0xbc>
		 v_design = V_DESIGN_J0*v_factor;
 8006b06:	a3ef      	add	r3, pc, #956	; (adr r3, 8006ec4 <scaraInitScurve+0x44c>)
 8006b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b0c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006b10:	f7f9 fd72 	bl	80005f8 <__aeabi_dmul>
 8006b14:	4603      	mov	r3, r0
 8006b16:	460c      	mov	r4, r1
 8006b18:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J0*a_factor;
 8006b1c:	a3e9      	add	r3, pc, #932	; (adr r3, 8006ec4 <scaraInitScurve+0x44c>)
 8006b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b26:	f7f9 fd67 	bl	80005f8 <__aeabi_dmul>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	460c      	mov	r4, r1
 8006b2e:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8006b32:	e04f      	b.n	8006bd4 <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J1 == target) {
 8006b34:	7efb      	ldrb	r3, [r7, #27]
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d116      	bne.n	8006b68 <scaraInitScurve+0xf0>
		 v_design = V_DESIGN_J1*v_factor;
 8006b3a:	a3e2      	add	r3, pc, #904	; (adr r3, 8006ec4 <scaraInitScurve+0x44c>)
 8006b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b40:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006b44:	f7f9 fd58 	bl	80005f8 <__aeabi_dmul>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	460c      	mov	r4, r1
 8006b4c:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J1*a_factor;
 8006b50:	a3dc      	add	r3, pc, #880	; (adr r3, 8006ec4 <scaraInitScurve+0x44c>)
 8006b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b56:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b5a:	f7f9 fd4d 	bl	80005f8 <__aeabi_dmul>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	460c      	mov	r4, r1
 8006b62:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8006b66:	e035      	b.n	8006bd4 <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J2 == target) {
 8006b68:	7efb      	ldrb	r3, [r7, #27]
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	d116      	bne.n	8006b9c <scaraInitScurve+0x124>
		 v_design = V_DESIGN_J2*v_factor;
 8006b6e:	a3d3      	add	r3, pc, #844	; (adr r3, 8006ebc <scaraInitScurve+0x444>)
 8006b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b74:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006b78:	f7f9 fd3e 	bl	80005f8 <__aeabi_dmul>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	460c      	mov	r4, r1
 8006b80:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J2*a_factor;
 8006b84:	a3cd      	add	r3, pc, #820	; (adr r3, 8006ebc <scaraInitScurve+0x444>)
 8006b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b8e:	f7f9 fd33 	bl	80005f8 <__aeabi_dmul>
 8006b92:	4603      	mov	r3, r0
 8006b94:	460c      	mov	r4, r1
 8006b96:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8006b9a:	e01b      	b.n	8006bd4 <scaraInitScurve+0x15c>
	 } else if (TRAJECTORY_J3 == target) {
 8006b9c:	7efb      	ldrb	r3, [r7, #27]
 8006b9e:	2b03      	cmp	r3, #3
 8006ba0:	d116      	bne.n	8006bd0 <scaraInitScurve+0x158>
		 v_design = V_DESIGN_J3*v_factor;
 8006ba2:	a3ca      	add	r3, pc, #808	; (adr r3, 8006ecc <scaraInitScurve+0x454>)
 8006ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006bac:	f7f9 fd24 	bl	80005f8 <__aeabi_dmul>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	460c      	mov	r4, r1
 8006bb4:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		 a_design = A_DESIGN_J3*a_factor;
 8006bb8:	a3c4      	add	r3, pc, #784	; (adr r3, 8006ecc <scaraInitScurve+0x454>)
 8006bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006bc2:	f7f9 fd19 	bl	80005f8 <__aeabi_dmul>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	460c      	mov	r4, r1
 8006bca:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8006bce:	e001      	b.n	8006bd4 <scaraInitScurve+0x15c>
	 } else {
		 return SCARA_STATUS_ERROR_PARA;
 8006bd0:	2306      	movs	r3, #6
 8006bd2:	e2c8      	b.n	8007166 <scaraInitScurve+0x6ee>
	 }

	 v0 = 0;
 8006bd4:	f04f 0300 	mov.w	r3, #0
 8006bd8:	f04f 0400 	mov.w	r4, #0
 8006bdc:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
	 v1 = 0;
 8006be0:	f04f 0300 	mov.w	r3, #0
 8006be4:	f04f 0400 	mov.w	r4, #0
 8006be8:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	 q0 = 0;
 8006bec:	f04f 0300 	mov.w	r3, #0
 8006bf0:	f04f 0400 	mov.w	r4, #0
 8006bf4:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	 q1 = total_s;
 8006bf8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006bfc:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0

	 if ( total_s < 0) {
 8006c00:	f04f 0200 	mov.w	r2, #0
 8006c04:	f04f 0300 	mov.w	r3, #0
 8006c08:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006c0c:	f7f9 ff66 	bl	8000adc <__aeabi_dcmplt>
 8006c10:	4603      	mov	r3, r0
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d015      	beq.n	8006c42 <scaraInitScurve+0x1ca>
		 dir = -1;
 8006c16:	f04f 0300 	mov.w	r3, #0
 8006c1a:	4ca5      	ldr	r4, [pc, #660]	; (8006eb0 <scaraInitScurve+0x438>)
 8006c1c:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
		 q1 = -q1;
 8006c20:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006c24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c2c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006c30:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		 total_s = -total_s;
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	613b      	str	r3, [r7, #16]
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006c3e:	617b      	str	r3, [r7, #20]
 8006c40:	e004      	b.n	8006c4c <scaraInitScurve+0x1d4>
	 } else {
		 dir = 1;
 8006c42:	f04f 0300 	mov.w	r3, #0
 8006c46:	4c9b      	ldr	r4, [pc, #620]	; (8006eb4 <scaraInitScurve+0x43c>)
 8006c48:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
	 }


	 if (DUTY_MODE_INIT_QVT == modeinit) {
 8006c4c:	7ebb      	ldrb	r3, [r7, #26]
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	f040 8082 	bne.w	8006d58 <scaraInitScurve+0x2e0>
		 double t_upper, v_upper, a_upper;
		 tf = scurve->Tf;
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8006c5a:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		 // Avoid division by 0
		 if (tf > 0.001) {
 8006c5e:	a390      	add	r3, pc, #576	; (adr r3, 8006ea0 <scaraInitScurve+0x428>)
 8006c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c64:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8006c68:	f7f9 ff56 	bl	8000b18 <__aeabi_dcmpgt>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d066      	beq.n	8006d40 <scaraInitScurve+0x2c8>
			 // Assume 4 phase
			 t_upper = tf / 4;
 8006c72:	f04f 0200 	mov.w	r2, #0
 8006c76:	4b90      	ldr	r3, [pc, #576]	; (8006eb8 <scaraInitScurve+0x440>)
 8006c78:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8006c7c:	f7f9 fde6 	bl	800084c <__aeabi_ddiv>
 8006c80:	4603      	mov	r3, r0
 8006c82:	460c      	mov	r4, r1
 8006c84:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
			 v_upper = total_s / (2*t_upper);
 8006c88:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	460b      	mov	r3, r1
 8006c90:	f7f9 fafc 	bl	800028c <__adddf3>
 8006c94:	4603      	mov	r3, r0
 8006c96:	460c      	mov	r4, r1
 8006c98:	461a      	mov	r2, r3
 8006c9a:	4623      	mov	r3, r4
 8006c9c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006ca0:	f7f9 fdd4 	bl	800084c <__aeabi_ddiv>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	460c      	mov	r4, r1
 8006ca8:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
			 // Check 4 phase --> 5 phase
			 if ( v_upper > v_design) {
 8006cac:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8006cb0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8006cb4:	f7f9 ff30 	bl	8000b18 <__aeabi_dcmpgt>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d022      	beq.n	8006d04 <scaraInitScurve+0x28c>
				 t_upper = tf/2 - total_s/(2*v_design);
 8006cbe:	f04f 0200 	mov.w	r2, #0
 8006cc2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006cc6:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8006cca:	f7f9 fdbf 	bl	800084c <__aeabi_ddiv>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	460c      	mov	r4, r1
 8006cd2:	4625      	mov	r5, r4
 8006cd4:	461c      	mov	r4, r3
 8006cd6:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006cda:	4602      	mov	r2, r0
 8006cdc:	460b      	mov	r3, r1
 8006cde:	f7f9 fad5 	bl	800028c <__adddf3>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006cea:	f7f9 fdaf 	bl	800084c <__aeabi_ddiv>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	4620      	mov	r0, r4
 8006cf4:	4629      	mov	r1, r5
 8006cf6:	f7f9 fac7 	bl	8000288 <__aeabi_dsub>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	460c      	mov	r4, r1
 8006cfe:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
 8006d02:	e003      	b.n	8006d0c <scaraInitScurve+0x294>
			 } else {
				 v_design = v_upper;
 8006d04:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8006d08:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			 }
			 a_upper  = v_design / t_upper;
 8006d0c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8006d10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006d14:	f7f9 fd9a 	bl	800084c <__aeabi_ddiv>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	460c      	mov	r4, r1
 8006d1c:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
			 if ( a_upper > a_design) {
 8006d20:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8006d24:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006d28:	f7f9 fef6 	bl	8000b18 <__aeabi_dcmpgt>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d001      	beq.n	8006d36 <scaraInitScurve+0x2be>
				 return SCARA_STATUS_ERROR_OVER_ACCEL;
 8006d32:	230a      	movs	r3, #10
 8006d34:	e217      	b.n	8007166 <scaraInitScurve+0x6ee>
			 } else {
				 a_design = a_upper;
 8006d36:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8006d3a:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
 8006d3e:	e00b      	b.n	8006d58 <scaraInitScurve+0x2e0>
			 }
		 } else {
			 v_design = 0;
 8006d40:	f04f 0300 	mov.w	r3, #0
 8006d44:	f04f 0400 	mov.w	r4, #0
 8006d48:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			 a_design = 0;
 8006d4c:	f04f 0300 	mov.w	r3, #0
 8006d50:	f04f 0400 	mov.w	r4, #0
 8006d54:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
		 }
	 }
	 // Avoid division by 0
	 if (a_design > 0.0000001 && v_design > 0.0000001) {
 8006d58:	a353      	add	r3, pc, #332	; (adr r3, 8006ea8 <scaraInitScurve+0x430>)
 8006d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d5e:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8006d62:	f7f9 fed9 	bl	8000b18 <__aeabi_dcmpgt>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	f000 80b3 	beq.w	8006ed4 <scaraInitScurve+0x45c>
 8006d6e:	a34e      	add	r3, pc, #312	; (adr r3, 8006ea8 <scaraInitScurve+0x430>)
 8006d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006d78:	f7f9 fece 	bl	8000b18 <__aeabi_dcmpgt>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	f000 80a8 	beq.w	8006ed4 <scaraInitScurve+0x45c>
		 no_phases = 5;
 8006d84:	2305      	movs	r3, #5
 8006d86:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		 tm = v_design/a_design;
 8006d8a:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8006d8e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006d92:	f7f9 fd5b 	bl	800084c <__aeabi_ddiv>
 8006d96:	4603      	mov	r3, r0
 8006d98:	460c      	mov	r4, r1
 8006d9a:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		 tc = total_s/v_design - 2*tm;
 8006d9e:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8006da2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006da6:	f7f9 fd51 	bl	800084c <__aeabi_ddiv>
 8006daa:	4603      	mov	r3, r0
 8006dac:	460c      	mov	r4, r1
 8006dae:	4625      	mov	r5, r4
 8006db0:	461c      	mov	r4, r3
 8006db2:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8006db6:	4602      	mov	r2, r0
 8006db8:	460b      	mov	r3, r1
 8006dba:	f7f9 fa67 	bl	800028c <__adddf3>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	4629      	mov	r1, r5
 8006dc6:	f7f9 fa5f 	bl	8000288 <__aeabi_dsub>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	460c      	mov	r4, r1
 8006dce:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
		 // Check condition 5 phase ---> 4 phase
		 if (tc < 0.0) {
 8006dd2:	f04f 0200 	mov.w	r2, #0
 8006dd6:	f04f 0300 	mov.w	r3, #0
 8006dda:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006dde:	f7f9 fe7d 	bl	8000adc <__aeabi_dcmplt>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d022      	beq.n	8006e2e <scaraInitScurve+0x3b6>
			 tc = 0;
 8006de8:	f04f 0300 	mov.w	r3, #0
 8006dec:	f04f 0400 	mov.w	r4, #0
 8006df0:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
			 no_phases = 4;
 8006df4:	2304      	movs	r3, #4
 8006df6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			 tm = sqrt(total_s/(2*a_design));
 8006dfa:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8006dfe:	4602      	mov	r2, r0
 8006e00:	460b      	mov	r3, r1
 8006e02:	f7f9 fa43 	bl	800028c <__adddf3>
 8006e06:	4603      	mov	r3, r0
 8006e08:	460c      	mov	r4, r1
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	4623      	mov	r3, r4
 8006e0e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006e12:	f7f9 fd1b 	bl	800084c <__aeabi_ddiv>
 8006e16:	4603      	mov	r3, r0
 8006e18:	460c      	mov	r4, r1
 8006e1a:	ec44 3b17 	vmov	d7, r3, r4
 8006e1e:	eeb0 0a47 	vmov.f32	s0, s14
 8006e22:	eef0 0a67 	vmov.f32	s1, s15
 8006e26:	f012 fc91 	bl	801974c <sqrt>
 8006e2a:	ed87 0b2e 	vstr	d0, [r7, #184]	; 0xb8
		 }
		 if (tm < 0.001) {
 8006e2e:	a31c      	add	r3, pc, #112	; (adr r3, 8006ea0 <scaraInitScurve+0x428>)
 8006e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e34:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8006e38:	f7f9 fe50 	bl	8000adc <__aeabi_dcmplt>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d006      	beq.n	8006e50 <scaraInitScurve+0x3d8>
			 j_max = 0;
 8006e42:	f04f 0300 	mov.w	r3, #0
 8006e46:	f04f 0400 	mov.w	r4, #0
 8006e4a:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
 8006e4e:	e009      	b.n	8006e64 <scaraInitScurve+0x3ec>
		 } else {
			 j_max = a_design/tm;
 8006e50:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006e54:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8006e58:	f7f9 fcf8 	bl	800084c <__aeabi_ddiv>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	460c      	mov	r4, r1
 8006e60:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
		 }
		 v_lim = a_design*tm;
 8006e64:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006e68:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8006e6c:	f7f9 fbc4 	bl	80005f8 <__aeabi_dmul>
 8006e70:	4603      	mov	r3, r0
 8006e72:	460c      	mov	r4, r1
 8006e74:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
		 tf    = 4*tm + tc;
 8006e78:	f04f 0200 	mov.w	r2, #0
 8006e7c:	4b0e      	ldr	r3, [pc, #56]	; (8006eb8 <scaraInitScurve+0x440>)
 8006e7e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8006e82:	f7f9 fbb9 	bl	80005f8 <__aeabi_dmul>
 8006e86:	4603      	mov	r3, r0
 8006e88:	460c      	mov	r4, r1
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	4623      	mov	r3, r4
 8006e8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006e92:	f7f9 f9fb 	bl	800028c <__adddf3>
 8006e96:	4603      	mov	r3, r0
 8006e98:	460c      	mov	r4, r1
 8006e9a:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
 8006e9e:	e039      	b.n	8006f14 <scaraInitScurve+0x49c>
 8006ea0:	d2f1a9fc 	.word	0xd2f1a9fc
 8006ea4:	3f50624d 	.word	0x3f50624d
 8006ea8:	9abcaf48 	.word	0x9abcaf48
 8006eac:	3e7ad7f2 	.word	0x3e7ad7f2
 8006eb0:	bff00000 	.word	0xbff00000
 8006eb4:	3ff00000 	.word	0x3ff00000
 8006eb8:	40100000 	.word	0x40100000
 8006ebc:	00000000 	.word	0x00000000
 8006ec0:	405c2000 	.word	0x405c2000
 8006ec4:	14000000 	.word	0x14000000
 8006ec8:	4000f6f0 	.word	0x4000f6f0
 8006ecc:	6b259425 	.word	0x6b259425
 8006ed0:	40069b91 	.word	0x40069b91
	 } else {
		 j_max = 0;
 8006ed4:	f04f 0300 	mov.w	r3, #0
 8006ed8:	f04f 0400 	mov.w	r4, #0
 8006edc:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
		 tc = 0;
 8006ee0:	f04f 0300 	mov.w	r3, #0
 8006ee4:	f04f 0400 	mov.w	r4, #0
 8006ee8:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
		 no_phases = 4;
 8006eec:	2304      	movs	r3, #4
 8006eee:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		 tm = tf / 4;
 8006ef2:	f04f 0200 	mov.w	r2, #0
 8006ef6:	4ba0      	ldr	r3, [pc, #640]	; (8007178 <scaraInitScurve+0x700>)
 8006ef8:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8006efc:	f7f9 fca6 	bl	800084c <__aeabi_ddiv>
 8006f00:	4603      	mov	r3, r0
 8006f02:	460c      	mov	r4, r1
 8006f04:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		 v_lim = 0;
 8006f08:	f04f 0300 	mov.w	r3, #0
 8006f0c:	f04f 0400 	mov.w	r4, #0
 8006f10:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
	 }

	 no_sample = ceil(tf / T_SAMPLING);
 8006f14:	a396      	add	r3, pc, #600	; (adr r3, 8007170 <scaraInitScurve+0x6f8>)
 8006f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f1a:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8006f1e:	f7f9 fc95 	bl	800084c <__aeabi_ddiv>
 8006f22:	4603      	mov	r3, r0
 8006f24:	460c      	mov	r4, r1
 8006f26:	ec44 3b17 	vmov	d7, r3, r4
 8006f2a:	eeb0 0a47 	vmov.f32	s0, s14
 8006f2e:	eef0 0a67 	vmov.f32	s1, s15
 8006f32:	f012 fa71 	bl	8019418 <ceil>
 8006f36:	ec54 3b10 	vmov	r3, r4, d0
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	4621      	mov	r1, r4
 8006f3e:	f7f9 fe33 	bl	8000ba8 <__aeabi_d2uiz>
 8006f42:	4603      	mov	r3, r0
 8006f44:	667b      	str	r3, [r7, #100]	; 0x64
	 v_1 = 0.5*j_max*tm*tm;
 8006f46:	f04f 0200 	mov.w	r2, #0
 8006f4a:	4b8c      	ldr	r3, [pc, #560]	; (800717c <scaraInitScurve+0x704>)
 8006f4c:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8006f50:	f7f9 fb52 	bl	80005f8 <__aeabi_dmul>
 8006f54:	4603      	mov	r3, r0
 8006f56:	460c      	mov	r4, r1
 8006f58:	4618      	mov	r0, r3
 8006f5a:	4621      	mov	r1, r4
 8006f5c:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006f60:	f7f9 fb4a 	bl	80005f8 <__aeabi_dmul>
 8006f64:	4603      	mov	r3, r0
 8006f66:	460c      	mov	r4, r1
 8006f68:	461a      	mov	r2, r3
 8006f6a:	4623      	mov	r3, r4
 8006f6c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8006f70:	f7f9 fb42 	bl	80005f8 <__aeabi_dmul>
 8006f74:	4603      	mov	r3, r0
 8006f76:	460c      	mov	r4, r1
 8006f78:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	 s_1 = j_max*tm*tm*tm/6;
 8006f7c:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006f80:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8006f84:	f7f9 fb38 	bl	80005f8 <__aeabi_dmul>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	460c      	mov	r4, r1
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	4621      	mov	r1, r4
 8006f90:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006f94:	f7f9 fb30 	bl	80005f8 <__aeabi_dmul>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	460c      	mov	r4, r1
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	4621      	mov	r1, r4
 8006fa0:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006fa4:	f7f9 fb28 	bl	80005f8 <__aeabi_dmul>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	460c      	mov	r4, r1
 8006fac:	4618      	mov	r0, r3
 8006fae:	4621      	mov	r1, r4
 8006fb0:	f04f 0200 	mov.w	r2, #0
 8006fb4:	4b72      	ldr	r3, [pc, #456]	; (8007180 <scaraInitScurve+0x708>)
 8006fb6:	f7f9 fc49 	bl	800084c <__aeabi_ddiv>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	460c      	mov	r4, r1
 8006fbe:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	 v_2 = j_max*tm*tm;
 8006fc2:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006fc6:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8006fca:	f7f9 fb15 	bl	80005f8 <__aeabi_dmul>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	460c      	mov	r4, r1
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	4623      	mov	r3, r4
 8006fd6:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8006fda:	f7f9 fb0d 	bl	80005f8 <__aeabi_dmul>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	460c      	mov	r4, r1
 8006fe2:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	 s_2 = v_2*tm;
 8006fe6:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006fea:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006fee:	f7f9 fb03 	bl	80005f8 <__aeabi_dmul>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	460c      	mov	r4, r1
 8006ff6:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
	 v_3 = v_2;
 8006ffa:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8006ffe:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	 s_3 = s_2 + v_2*tc;
 8007002:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8007006:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800700a:	f7f9 faf5 	bl	80005f8 <__aeabi_dmul>
 800700e:	4603      	mov	r3, r0
 8007010:	460c      	mov	r4, r1
 8007012:	461a      	mov	r2, r3
 8007014:	4623      	mov	r3, r4
 8007016:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800701a:	f7f9 f937 	bl	800028c <__adddf3>
 800701e:	4603      	mov	r3, r0
 8007020:	460c      	mov	r4, r1
 8007022:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	 v_4 = v_1;
 8007026:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800702a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	 s_4 = s_3 + s_2 - s_1;
 800702e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007032:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007036:	f7f9 f929 	bl	800028c <__adddf3>
 800703a:	4603      	mov	r3, r0
 800703c:	460c      	mov	r4, r1
 800703e:	4618      	mov	r0, r3
 8007040:	4621      	mov	r1, r4
 8007042:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007046:	f7f9 f91f 	bl	8000288 <__aeabi_dsub>
 800704a:	4603      	mov	r3, r0
 800704c:	460c      	mov	r4, r1
 800704e:	e9c7 3408 	strd	r3, r4, [r7, #32]

	 scurve->Tc = tc;
 8007052:	69fa      	ldr	r2, [r7, #28]
 8007054:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8007058:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	 scurve->Tf = tf;
 800705c:	69fa      	ldr	r2, [r7, #28]
 800705e:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8007062:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	 scurve->Tm = tm;
 8007066:	69fa      	ldr	r2, [r7, #28]
 8007068:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 800706c:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	 scurve->a_design = a_design;
 8007070:	69fa      	ldr	r2, [r7, #28]
 8007072:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 8007076:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	 scurve->v_design = v_design;
 800707a:	69fa      	ldr	r2, [r7, #28]
 800707c:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8007080:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	 scurve->v_lim = v_lim;
 8007084:	69fa      	ldr	r2, [r7, #28]
 8007086:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 800708a:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	 scurve->v0 = v0;
 800708e:	69fa      	ldr	r2, [r7, #28]
 8007090:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8007094:	e9c2 3406 	strd	r3, r4, [r2, #24]
	 scurve->v1 = v1;
 8007098:	69fa      	ldr	r2, [r7, #28]
 800709a:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 800709e:	e9c2 3408 	strd	r3, r4, [r2, #32]
	 scurve->j_max = j_max;
 80070a2:	69fa      	ldr	r2, [r7, #28]
 80070a4:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80070a8:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	 scurve->s0   = q0;
 80070ac:	69fa      	ldr	r2, [r7, #28]
 80070ae:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80070b2:	e9c2 3402 	strd	r3, r4, [r2, #8]
	 scurve->s1   = q1;
 80070b6:	69fa      	ldr	r2, [r7, #28]
 80070b8:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 80070bc:	e9c2 3404 	strd	r3, r4, [r2, #16]
	 scurve->num_of_phase = no_phases;
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 80070c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	 scurve->num_of_sampling = no_sample;
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80070ce:	669a      	str	r2, [r3, #104]	; 0x68
	 scurve->total_s = total_s;
 80070d0:	69fa      	ldr	r2, [r7, #28]
 80070d2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80070d6:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	 scurve->dir = dir;
 80070da:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80070de:	f7f9 fd3b 	bl	8000b58 <__aeabi_d2iz>
 80070e2:	4603      	mov	r3, r0
 80070e4:	b25a      	sxtb	r2, r3
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	701a      	strb	r2, [r3, #0]

	 scurve->a_current = 0;
 80070ea:	69fa      	ldr	r2, [r7, #28]
 80070ec:	f04f 0300 	mov.w	r3, #0
 80070f0:	f04f 0400 	mov.w	r4, #0
 80070f4:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
	 scurve->v_current = 0;
 80070f8:	69fa      	ldr	r2, [r7, #28]
 80070fa:	f04f 0300 	mov.w	r3, #0
 80070fe:	f04f 0400 	mov.w	r4, #0
 8007102:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
	 scurve->s_current = 0;
 8007106:	69fa      	ldr	r2, [r7, #28]
 8007108:	f04f 0300 	mov.w	r3, #0
 800710c:	f04f 0400 	mov.w	r4, #0
 8007110:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
	 scurve->v_1 = v_1;
 8007114:	69fa      	ldr	r2, [r7, #28]
 8007116:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800711a:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	 scurve->v_2 = v_2;
 800711e:	69fa      	ldr	r2, [r7, #28]
 8007120:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8007124:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
	 scurve->v_3 = v_3;
 8007128:	69fa      	ldr	r2, [r7, #28]
 800712a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800712e:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
	 scurve->v_4 = v_4;
 8007132:	69fa      	ldr	r2, [r7, #28]
 8007134:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8007138:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
	 scurve->s_1 = s_1;
 800713c:	69fa      	ldr	r2, [r7, #28]
 800713e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8007142:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	 scurve->s_2 = s_2;
 8007146:	69fa      	ldr	r2, [r7, #28]
 8007148:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800714c:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
	 scurve->s_3 = s_3;
 8007150:	69fa      	ldr	r2, [r7, #28]
 8007152:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8007156:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0
	 scurve->s_4 = s_4;
 800715a:	69fa      	ldr	r2, [r7, #28]
 800715c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8007160:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0

	 return SCARA_STATUS_OK;
 8007164:	2300      	movs	r3, #0
}
 8007166:	4618      	mov	r0, r3
 8007168:	37e8      	adds	r7, #232	; 0xe8
 800716a:	46bd      	mov	sp, r7
 800716c:	bdb0      	pop	{r4, r5, r7, pc}
 800716e:	bf00      	nop
 8007170:	40000000 	.word	0x40000000
 8007174:	3f847ae1 	.word	0x3f847ae1
 8007178:	40100000 	.word	0x40100000
 800717c:	3fe00000 	.word	0x3fe00000
 8007180:	40180000 	.word	0x40180000

08007184 <scaraFlowDuty>:

/* Compute new x, y , z, theta1, theta2 , d3, theta4 corresponding to time */
SCARA_StatusTypeDef	scaraFlowDuty		(double time,
										SCARA_PositionTypeDef *pos_Next ,
										SCARA_PositionTypeDef pos_Current) {
 8007184:	b082      	sub	sp, #8
 8007186:	b5b0      	push	{r4, r5, r7, lr}
 8007188:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800718c:	af2c      	add	r7, sp, #176	; 0xb0
 800718e:	f107 0108 	add.w	r1, r7, #8
 8007192:	ed81 0b00 	vstr	d0, [r1]
 8007196:	1d39      	adds	r1, r7, #4
 8007198:	6008      	str	r0, [r1, #0]
 800719a:	f507 71b4 	add.w	r1, r7, #360	; 0x168
 800719e:	e881 000c 	stmia.w	r1, {r2, r3}
	SCARA_StatusTypeDef status1, status2, status3, status4;
	SCARA_PositionTypeDef	positionCompute;
	// Update time
	positionCompute.t = time;
 80071a2:	f107 0210 	add.w	r2, r7, #16
 80071a6:	f107 0308 	add.w	r3, r7, #8
 80071aa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80071ae:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	/*---- Task space ----*/
	if ( DUTY_SPACE_TASK == myDUTY.space_type) {
 80071b2:	4b92      	ldr	r3, [pc, #584]	; (80073fc <scaraFlowDuty+0x278>)
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	f040 812e 	bne.w	8007418 <scaraFlowDuty+0x294>
		double s, angle, x, y, z, v, v_angle;
		int8_t	dir_roll;
		//---Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.task.trajectory_3d.trajectory_type) {
 80071bc:	4b8f      	ldr	r3, [pc, #572]	; (80073fc <scaraFlowDuty+0x278>)
 80071be:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d12d      	bne.n	8007222 <scaraFlowDuty+0x9e>
			status1 = scaraFlowLSPB(&(myDUTY.task.trajectory_3d.lspb), time);
 80071c6:	f107 0308 	add.w	r3, r7, #8
 80071ca:	ed93 0b00 	vldr	d0, [r3]
 80071ce:	488c      	ldr	r0, [pc, #560]	; (8007400 <scaraFlowDuty+0x27c>)
 80071d0:	f000 fc46 	bl	8007a60 <scaraFlowLSPB>
 80071d4:	4603      	mov	r3, r0
 80071d6:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
			status2 = scaraFlowLSPB(&(myDUTY.task.trajectory_roll.lspb), time);
 80071da:	f107 0308 	add.w	r3, r7, #8
 80071de:	ed93 0b00 	vldr	d0, [r3]
 80071e2:	4888      	ldr	r0, [pc, #544]	; (8007404 <scaraFlowDuty+0x280>)
 80071e4:	f000 fc3c 	bl	8007a60 <scaraFlowLSPB>
 80071e8:	4603      	mov	r3, r0
 80071ea:	f887 3156 	strb.w	r3, [r7, #342]	; 0x156
			s = myDUTY.task.trajectory_3d.lspb.s_current;
 80071ee:	4b83      	ldr	r3, [pc, #524]	; (80073fc <scaraFlowDuty+0x278>)
 80071f0:	e9d3 3464 	ldrd	r3, r4, [r3, #400]	; 0x190
 80071f4:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			v = myDUTY.task.trajectory_3d.lspb.v_current;
 80071f8:	4b80      	ldr	r3, [pc, #512]	; (80073fc <scaraFlowDuty+0x278>)
 80071fa:	e9d3 3462 	ldrd	r3, r4, [r3, #392]	; 0x188
 80071fe:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
			angle = myDUTY.task.trajectory_roll.lspb.s_current;
 8007202:	4b7e      	ldr	r3, [pc, #504]	; (80073fc <scaraFlowDuty+0x278>)
 8007204:	e9d3 34ba 	ldrd	r3, r4, [r3, #744]	; 0x2e8
 8007208:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			v_angle = myDUTY.task.trajectory_roll.lspb.v_current;
 800720c:	4b7b      	ldr	r3, [pc, #492]	; (80073fc <scaraFlowDuty+0x278>)
 800720e:	e9d3 34b8 	ldrd	r3, r4, [r3, #736]	; 0x2e0
 8007212:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
			dir_roll = myDUTY.task.trajectory_roll.lspb.dir;
 8007216:	4b79      	ldr	r3, [pc, #484]	; (80073fc <scaraFlowDuty+0x278>)
 8007218:	f893 3270 	ldrb.w	r3, [r3, #624]	; 0x270
 800721c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8007220:	e034      	b.n	800728c <scaraFlowDuty+0x108>
			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.task.trajectory_3d.trajectory_type) {
 8007222:	4b76      	ldr	r3, [pc, #472]	; (80073fc <scaraFlowDuty+0x278>)
 8007224:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8007228:	2b01      	cmp	r3, #1
 800722a:	d12d      	bne.n	8007288 <scaraFlowDuty+0x104>
			status1 = scaraFLowScurve(&(myDUTY.task.trajectory_3d.scurve), time);
 800722c:	f107 0308 	add.w	r3, r7, #8
 8007230:	ed93 0b00 	vldr	d0, [r3]
 8007234:	4874      	ldr	r0, [pc, #464]	; (8007408 <scaraFlowDuty+0x284>)
 8007236:	f000 fdbf 	bl	8007db8 <scaraFLowScurve>
 800723a:	4603      	mov	r3, r0
 800723c:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
			status2 = scaraFLowScurve(&(myDUTY.task.trajectory_roll.scurve), time);
 8007240:	f107 0308 	add.w	r3, r7, #8
 8007244:	ed93 0b00 	vldr	d0, [r3]
 8007248:	4870      	ldr	r0, [pc, #448]	; (800740c <scaraFlowDuty+0x288>)
 800724a:	f000 fdb5 	bl	8007db8 <scaraFLowScurve>
 800724e:	4603      	mov	r3, r0
 8007250:	f887 3156 	strb.w	r3, [r7, #342]	; 0x156
			s = myDUTY.task.trajectory_3d.scurve.s_current;
 8007254:	4b69      	ldr	r3, [pc, #420]	; (80073fc <scaraFlowDuty+0x278>)
 8007256:	e9d3 3498 	ldrd	r3, r4, [r3, #608]	; 0x260
 800725a:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			v = myDUTY.task.trajectory_3d.scurve.v_current;
 800725e:	4b67      	ldr	r3, [pc, #412]	; (80073fc <scaraFlowDuty+0x278>)
 8007260:	e9d3 3496 	ldrd	r3, r4, [r3, #600]	; 0x258
 8007264:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
			angle = myDUTY.task.trajectory_roll.scurve.s_current;
 8007268:	4b64      	ldr	r3, [pc, #400]	; (80073fc <scaraFlowDuty+0x278>)
 800726a:	e9d3 34ee 	ldrd	r3, r4, [r3, #952]	; 0x3b8
 800726e:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			v_angle = myDUTY.task.trajectory_roll.scurve.v_current;
 8007272:	4b62      	ldr	r3, [pc, #392]	; (80073fc <scaraFlowDuty+0x278>)
 8007274:	e9d3 34ec 	ldrd	r3, r4, [r3, #944]	; 0x3b0
 8007278:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
			dir_roll = myDUTY.task.trajectory_roll.scurve.dir;
 800727c:	4b5f      	ldr	r3, [pc, #380]	; (80073fc <scaraFlowDuty+0x278>)
 800727e:	f893 32f0 	ldrb.w	r3, [r3, #752]	; 0x2f0
 8007282:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8007286:	e001      	b.n	800728c <scaraFlowDuty+0x108>
		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 8007288:	2305      	movs	r3, #5
 800728a:	e2ce      	b.n	800782a <scaraFlowDuty+0x6a6>
		}

		if ( SCARA_STATUS_OK != status1) {
 800728c:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8007290:	2b00      	cmp	r3, #0
 8007292:	d002      	beq.n	800729a <scaraFlowDuty+0x116>
			return status1;
 8007294:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8007298:	e2c7      	b.n	800782a <scaraFlowDuty+0x6a6>
		}
		if ( SCARA_STATUS_OK != status2) {
 800729a:	f897 3156 	ldrb.w	r3, [r7, #342]	; 0x156
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d002      	beq.n	80072a8 <scaraFlowDuty+0x124>
			return status2;
 80072a2:	f897 3156 	ldrb.w	r3, [r7, #342]	; 0x156
 80072a6:	e2c0      	b.n	800782a <scaraFlowDuty+0x6a6>
		}

		//---Path flowing
			// Straight line
		if( DUTY_PATH_LINE == myDUTY.task.path.path_type) {
 80072a8:	4b54      	ldr	r3, [pc, #336]	; (80073fc <scaraFlowDuty+0x278>)
 80072aa:	7a1b      	ldrb	r3, [r3, #8]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d117      	bne.n	80072e0 <scaraFlowDuty+0x15c>
			status1 = scaraFlowLine(&(myDUTY.task.path.line), s);
 80072b0:	ed97 0b52 	vldr	d0, [r7, #328]	; 0x148
 80072b4:	4856      	ldr	r0, [pc, #344]	; (8007410 <scaraFlowDuty+0x28c>)
 80072b6:	f000 fac3 	bl	8007840 <scaraFlowLine>
 80072ba:	4603      	mov	r3, r0
 80072bc:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
			x = myDUTY.task.path.line.x_current;
 80072c0:	4b4e      	ldr	r3, [pc, #312]	; (80073fc <scaraFlowDuty+0x278>)
 80072c2:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 80072c6:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
			y = myDUTY.task.path.line.y_current;
 80072ca:	4b4c      	ldr	r3, [pc, #304]	; (80073fc <scaraFlowDuty+0x278>)
 80072cc:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 80072d0:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
			z = myDUTY.task.path.line.z_current;
 80072d4:	4b49      	ldr	r3, [pc, #292]	; (80073fc <scaraFlowDuty+0x278>)
 80072d6:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 80072da:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
 80072de:	e01d      	b.n	800731c <scaraFlowDuty+0x198>
			// Circular
		} else if ( DUTY_PATH_CIRCLE == myDUTY.task.path.path_type) {
 80072e0:	4b46      	ldr	r3, [pc, #280]	; (80073fc <scaraFlowDuty+0x278>)
 80072e2:	7a1b      	ldrb	r3, [r3, #8]
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d117      	bne.n	8007318 <scaraFlowDuty+0x194>
			status1 = scaraFlowCircle(&(myDUTY.task.path.circle), s);
 80072e8:	ed97 0b52 	vldr	d0, [r7, #328]	; 0x148
 80072ec:	4849      	ldr	r0, [pc, #292]	; (8007414 <scaraFlowDuty+0x290>)
 80072ee:	f000 fb2f 	bl	8007950 <scaraFlowCircle>
 80072f2:	4603      	mov	r3, r0
 80072f4:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
			x = myDUTY.task.path.circle.x_current;
 80072f8:	4b40      	ldr	r3, [pc, #256]	; (80073fc <scaraFlowDuty+0x278>)
 80072fa:	e9d3 343e 	ldrd	r3, r4, [r3, #248]	; 0xf8
 80072fe:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
			y = myDUTY.task.path.circle.y_current;
 8007302:	4b3e      	ldr	r3, [pc, #248]	; (80073fc <scaraFlowDuty+0x278>)
 8007304:	e9d3 3440 	ldrd	r3, r4, [r3, #256]	; 0x100
 8007308:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
			z = myDUTY.task.path.circle.z_current;
 800730c:	4b3b      	ldr	r3, [pc, #236]	; (80073fc <scaraFlowDuty+0x278>)
 800730e:	e9d3 3442 	ldrd	r3, r4, [r3, #264]	; 0x108
 8007312:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
 8007316:	e001      	b.n	800731c <scaraFlowDuty+0x198>
		} else {
			return SCARA_STATUS_ERROR_TASK;
 8007318:	2303      	movs	r3, #3
 800731a:	e286      	b.n	800782a <scaraFlowDuty+0x6a6>
		}

		positionCompute.x 		= x;
 800731c:	f107 0210 	add.w	r2, r7, #16
 8007320:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8007324:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
		positionCompute.y		= y;
 8007328:	f107 0210 	add.w	r2, r7, #16
 800732c:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8007330:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
		positionCompute.z 		= z;
 8007334:	f107 0210 	add.w	r2, r7, #16
 8007338:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 800733c:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		positionCompute.roll 	= myDUTY.task.roll_start + angle*dir_roll;
 8007340:	4b2e      	ldr	r3, [pc, #184]	; (80073fc <scaraFlowDuty+0x278>)
 8007342:	e9d3 45f0 	ldrd	r4, r5, [r3, #960]	; 0x3c0
 8007346:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800734a:	4618      	mov	r0, r3
 800734c:	f7f9 f8ea 	bl	8000524 <__aeabi_i2d>
 8007350:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8007354:	f7f9 f950 	bl	80005f8 <__aeabi_dmul>
 8007358:	4602      	mov	r2, r0
 800735a:	460b      	mov	r3, r1
 800735c:	4620      	mov	r0, r4
 800735e:	4629      	mov	r1, r5
 8007360:	f7f8 ff94 	bl	800028c <__adddf3>
 8007364:	4603      	mov	r3, r0
 8007366:	460c      	mov	r4, r1
 8007368:	f107 0210 	add.w	r2, r7, #16
 800736c:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

		positionCompute.q		= s;
 8007370:	f107 0210 	add.w	r2, r7, #16
 8007374:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 8007378:	e9c2 3400 	strd	r3, r4, [r2]
		positionCompute.q_roll  = angle;
 800737c:	f107 0210 	add.w	r2, r7, #16
 8007380:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8007384:	e9c2 3402 	strd	r3, r4, [r2, #8]

		positionCompute.v_3d    = v;
 8007388:	f107 0210 	add.w	r2, r7, #16
 800738c:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8007390:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
		positionCompute.v_roll  = v_angle;
 8007394:	f107 0210 	add.w	r2, r7, #16
 8007398:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 800739c:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0

		positionCompute.total_time = myDUTY.time_total;
 80073a0:	4b16      	ldr	r3, [pc, #88]	; (80073fc <scaraFlowDuty+0x278>)
 80073a2:	f603 1348 	addw	r3, r3, #2376	; 0x948
 80073a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80073aa:	f107 0210 	add.w	r2, r7, #16
 80073ae:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
		positionCompute.t		= time;
 80073b2:	f107 0210 	add.w	r2, r7, #16
 80073b6:	f107 0308 	add.w	r3, r7, #8
 80073ba:	e9d3 3400 	ldrd	r3, r4, [r3]
 80073be:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		if ( FALSE == kinematicInverse(&positionCompute, pos_Current)) {
 80073c2:	f107 0410 	add.w	r4, r7, #16
 80073c6:	4668      	mov	r0, sp
 80073c8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80073cc:	22b0      	movs	r2, #176	; 0xb0
 80073ce:	4619      	mov	r1, r3
 80073d0:	f00e fab6 	bl	8015940 <memcpy>
 80073d4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80073d8:	cb0c      	ldmia	r3, {r2, r3}
 80073da:	4620      	mov	r0, r4
 80073dc:	f7fb ff38 	bl	8003250 <kinematicInverse>
 80073e0:	4603      	mov	r3, r0
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d101      	bne.n	80073ea <scaraFlowDuty+0x266>
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 80073e6:	2307      	movs	r3, #7
 80073e8:	e21f      	b.n	800782a <scaraFlowDuty+0x6a6>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 80073ea:	f107 0110 	add.w	r1, r7, #16
 80073ee:	1d3b      	adds	r3, r7, #4
 80073f0:	22b8      	movs	r2, #184	; 0xb8
 80073f2:	6818      	ldr	r0, [r3, #0]
 80073f4:	f00e faa4 	bl	8015940 <memcpy>
 80073f8:	e216      	b.n	8007828 <scaraFlowDuty+0x6a4>
 80073fa:	bf00      	nop
 80073fc:	20005378 	.word	0x20005378
 8007400:	20005490 	.word	0x20005490
 8007404:	200055e8 	.word	0x200055e8
 8007408:	20005510 	.word	0x20005510
 800740c:	20005668 	.word	0x20005668
 8007410:	20005388 	.word	0x20005388
 8007414:	200053f8 	.word	0x200053f8
		}

	/*---- Joint space -----*/
	} else if (DUTY_SPACE_JOINT == myDUTY.space_type) {
 8007418:	4b8b      	ldr	r3, [pc, #556]	; (8007648 <scaraFlowDuty+0x4c4>)
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	2b01      	cmp	r3, #1
 800741e:	f040 8201 	bne.w	8007824 <scaraFlowDuty+0x6a0>
		double s0, s1, s2, s3;
		double v0, v1, v2, v3;
		int8_t dir0, dir1, dir2, dir3;
		// Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.joint.trajectory[0].trajectory_type) {
 8007422:	4b89      	ldr	r3, [pc, #548]	; (8007648 <scaraFlowDuty+0x4c4>)
 8007424:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 8007428:	2b00      	cmp	r3, #0
 800742a:	d174      	bne.n	8007516 <scaraFlowDuty+0x392>
			status1 = scaraFlowLSPB(&(myDUTY.joint.trajectory[0].lspb), time);
 800742c:	f107 0308 	add.w	r3, r7, #8
 8007430:	ed93 0b00 	vldr	d0, [r3]
 8007434:	4885      	ldr	r0, [pc, #532]	; (800764c <scaraFlowDuty+0x4c8>)
 8007436:	f000 fb13 	bl	8007a60 <scaraFlowLSPB>
 800743a:	4603      	mov	r3, r0
 800743c:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
			status2 = scaraFlowLSPB(&(myDUTY.joint.trajectory[1].lspb), time);
 8007440:	f107 0308 	add.w	r3, r7, #8
 8007444:	ed93 0b00 	vldr	d0, [r3]
 8007448:	4881      	ldr	r0, [pc, #516]	; (8007650 <scaraFlowDuty+0x4cc>)
 800744a:	f000 fb09 	bl	8007a60 <scaraFlowLSPB>
 800744e:	4603      	mov	r3, r0
 8007450:	f887 3156 	strb.w	r3, [r7, #342]	; 0x156
			status3 = scaraFlowLSPB(&(myDUTY.joint.trajectory[2].lspb), time);
 8007454:	f107 0308 	add.w	r3, r7, #8
 8007458:	ed93 0b00 	vldr	d0, [r3]
 800745c:	487d      	ldr	r0, [pc, #500]	; (8007654 <scaraFlowDuty+0x4d0>)
 800745e:	f000 faff 	bl	8007a60 <scaraFlowLSPB>
 8007462:	4603      	mov	r3, r0
 8007464:	f887 3155 	strb.w	r3, [r7, #341]	; 0x155
			status4 = scaraFlowLSPB(&(myDUTY.joint.trajectory[3].lspb), time);
 8007468:	f107 0308 	add.w	r3, r7, #8
 800746c:	ed93 0b00 	vldr	d0, [r3]
 8007470:	4879      	ldr	r0, [pc, #484]	; (8007658 <scaraFlowDuty+0x4d4>)
 8007472:	f000 faf5 	bl	8007a60 <scaraFlowLSPB>
 8007476:	4603      	mov	r3, r0
 8007478:	f887 3154 	strb.w	r3, [r7, #340]	; 0x154

			dir0 = myDUTY.joint.trajectory[0].lspb.dir;
 800747c:	4b72      	ldr	r3, [pc, #456]	; (8007648 <scaraFlowDuty+0x4c4>)
 800747e:	f893 33d0 	ldrb.w	r3, [r3, #976]	; 0x3d0
 8007482:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			dir1 = myDUTY.joint.trajectory[1].lspb.dir;
 8007486:	4b70      	ldr	r3, [pc, #448]	; (8007648 <scaraFlowDuty+0x4c4>)
 8007488:	f893 3528 	ldrb.w	r3, [r3, #1320]	; 0x528
 800748c:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
			dir2 = myDUTY.joint.trajectory[2].lspb.dir;
 8007490:	4b6d      	ldr	r3, [pc, #436]	; (8007648 <scaraFlowDuty+0x4c4>)
 8007492:	f893 3680 	ldrb.w	r3, [r3, #1664]	; 0x680
 8007496:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
			dir3 = myDUTY.joint.trajectory[3].lspb.dir;
 800749a:	4b6b      	ldr	r3, [pc, #428]	; (8007648 <scaraFlowDuty+0x4c4>)
 800749c:	f893 37d8 	ldrb.w	r3, [r3, #2008]	; 0x7d8
 80074a0:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc

			s0 = myDUTY.joint.trajectory[0].lspb.s_current;
 80074a4:	4b68      	ldr	r3, [pc, #416]	; (8007648 <scaraFlowDuty+0x4c4>)
 80074a6:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 80074aa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80074ae:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
			s1 = myDUTY.joint.trajectory[1].lspb.s_current;
 80074b2:	4b65      	ldr	r3, [pc, #404]	; (8007648 <scaraFlowDuty+0x4c4>)
 80074b4:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 80074b8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80074bc:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
			s2 = myDUTY.joint.trajectory[2].lspb.s_current;
 80074c0:	4b61      	ldr	r3, [pc, #388]	; (8007648 <scaraFlowDuty+0x4c4>)
 80074c2:	f503 63df 	add.w	r3, r3, #1784	; 0x6f8
 80074c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80074ca:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8
			s3 = myDUTY.joint.trajectory[3].lspb.s_current;
 80074ce:	4b5e      	ldr	r3, [pc, #376]	; (8007648 <scaraFlowDuty+0x4c4>)
 80074d0:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 80074d4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80074d8:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0

			v0 = myDUTY.joint.trajectory[0].lspb.v_current;
 80074dc:	4b5a      	ldr	r3, [pc, #360]	; (8007648 <scaraFlowDuty+0x4c4>)
 80074de:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80074e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80074e6:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
			v1 = myDUTY.joint.trajectory[1].lspb.v_current;
 80074ea:	4b57      	ldr	r3, [pc, #348]	; (8007648 <scaraFlowDuty+0x4c4>)
 80074ec:	f503 63b3 	add.w	r3, r3, #1432	; 0x598
 80074f0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80074f4:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			v2 = myDUTY.joint.trajectory[2].lspb.v_current;
 80074f8:	4b53      	ldr	r3, [pc, #332]	; (8007648 <scaraFlowDuty+0x4c4>)
 80074fa:	f503 63de 	add.w	r3, r3, #1776	; 0x6f0
 80074fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007502:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
			v3 = myDUTY.joint.trajectory[3].lspb.v_current;
 8007506:	4b50      	ldr	r3, [pc, #320]	; (8007648 <scaraFlowDuty+0x4c4>)
 8007508:	f603 0348 	addw	r3, r3, #2120	; 0x848
 800750c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007510:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
 8007514:	e07b      	b.n	800760e <scaraFlowDuty+0x48a>

			// SCURVE
		} else if ( DUTY_TRAJECTORY_SCURVE == myDUTY.joint.trajectory[0].trajectory_type) {
 8007516:	4b4c      	ldr	r3, [pc, #304]	; (8007648 <scaraFlowDuty+0x4c4>)
 8007518:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 800751c:	2b01      	cmp	r3, #1
 800751e:	d174      	bne.n	800760a <scaraFlowDuty+0x486>
			status1 = scaraFLowScurve(&(myDUTY.joint.trajectory[0].scurve), time);
 8007520:	f107 0308 	add.w	r3, r7, #8
 8007524:	ed93 0b00 	vldr	d0, [r3]
 8007528:	484c      	ldr	r0, [pc, #304]	; (800765c <scaraFlowDuty+0x4d8>)
 800752a:	f000 fc45 	bl	8007db8 <scaraFLowScurve>
 800752e:	4603      	mov	r3, r0
 8007530:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
			status2 = scaraFLowScurve(&(myDUTY.joint.trajectory[1].scurve), time);
 8007534:	f107 0308 	add.w	r3, r7, #8
 8007538:	ed93 0b00 	vldr	d0, [r3]
 800753c:	4848      	ldr	r0, [pc, #288]	; (8007660 <scaraFlowDuty+0x4dc>)
 800753e:	f000 fc3b 	bl	8007db8 <scaraFLowScurve>
 8007542:	4603      	mov	r3, r0
 8007544:	f887 3156 	strb.w	r3, [r7, #342]	; 0x156
			status3 = scaraFLowScurve(&(myDUTY.joint.trajectory[2].scurve), time);
 8007548:	f107 0308 	add.w	r3, r7, #8
 800754c:	ed93 0b00 	vldr	d0, [r3]
 8007550:	4844      	ldr	r0, [pc, #272]	; (8007664 <scaraFlowDuty+0x4e0>)
 8007552:	f000 fc31 	bl	8007db8 <scaraFLowScurve>
 8007556:	4603      	mov	r3, r0
 8007558:	f887 3155 	strb.w	r3, [r7, #341]	; 0x155
			status4 = scaraFLowScurve(&(myDUTY.joint.trajectory[3].scurve), time);
 800755c:	f107 0308 	add.w	r3, r7, #8
 8007560:	ed93 0b00 	vldr	d0, [r3]
 8007564:	4840      	ldr	r0, [pc, #256]	; (8007668 <scaraFlowDuty+0x4e4>)
 8007566:	f000 fc27 	bl	8007db8 <scaraFLowScurve>
 800756a:	4603      	mov	r3, r0
 800756c:	f887 3154 	strb.w	r3, [r7, #340]	; 0x154
			dir0 = myDUTY.joint.trajectory[0].scurve.dir;
 8007570:	4b35      	ldr	r3, [pc, #212]	; (8007648 <scaraFlowDuty+0x4c4>)
 8007572:	f893 3450 	ldrb.w	r3, [r3, #1104]	; 0x450
 8007576:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			dir1 = myDUTY.joint.trajectory[1].scurve.dir;
 800757a:	4b33      	ldr	r3, [pc, #204]	; (8007648 <scaraFlowDuty+0x4c4>)
 800757c:	f893 35a8 	ldrb.w	r3, [r3, #1448]	; 0x5a8
 8007580:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
			dir2 = myDUTY.joint.trajectory[2].scurve.dir;
 8007584:	4b30      	ldr	r3, [pc, #192]	; (8007648 <scaraFlowDuty+0x4c4>)
 8007586:	f893 3700 	ldrb.w	r3, [r3, #1792]	; 0x700
 800758a:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
			dir3 = myDUTY.joint.trajectory[3].scurve.dir;
 800758e:	4b2e      	ldr	r3, [pc, #184]	; (8007648 <scaraFlowDuty+0x4c4>)
 8007590:	f893 3858 	ldrb.w	r3, [r3, #2136]	; 0x858
 8007594:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
			s0 = myDUTY.joint.trajectory[0].scurve.s_current;
 8007598:	4b2b      	ldr	r3, [pc, #172]	; (8007648 <scaraFlowDuty+0x4c4>)
 800759a:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 800759e:	e9d3 3400 	ldrd	r3, r4, [r3]
 80075a2:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
			s1 = myDUTY.joint.trajectory[1].scurve.s_current;
 80075a6:	4b28      	ldr	r3, [pc, #160]	; (8007648 <scaraFlowDuty+0x4c4>)
 80075a8:	f503 63ce 	add.w	r3, r3, #1648	; 0x670
 80075ac:	e9d3 3400 	ldrd	r3, r4, [r3]
 80075b0:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
			s2 = myDUTY.joint.trajectory[2].scurve.s_current;
 80075b4:	4b24      	ldr	r3, [pc, #144]	; (8007648 <scaraFlowDuty+0x4c4>)
 80075b6:	f503 63f9 	add.w	r3, r3, #1992	; 0x7c8
 80075ba:	e9d3 3400 	ldrd	r3, r4, [r3]
 80075be:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8
			s3 = myDUTY.joint.trajectory[3].scurve.s_current;
 80075c2:	4b21      	ldr	r3, [pc, #132]	; (8007648 <scaraFlowDuty+0x4c4>)
 80075c4:	f503 6312 	add.w	r3, r3, #2336	; 0x920
 80075c8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80075cc:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0

			v0 = myDUTY.joint.trajectory[0].scurve.v_current;
 80075d0:	4b1d      	ldr	r3, [pc, #116]	; (8007648 <scaraFlowDuty+0x4c4>)
 80075d2:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80075d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80075da:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
			v1 = myDUTY.joint.trajectory[1].scurve.v_current;
 80075de:	4b1a      	ldr	r3, [pc, #104]	; (8007648 <scaraFlowDuty+0x4c4>)
 80075e0:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 80075e4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80075e8:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
			v2 = myDUTY.joint.trajectory[2].scurve.v_current;
 80075ec:	4b16      	ldr	r3, [pc, #88]	; (8007648 <scaraFlowDuty+0x4c4>)
 80075ee:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 80075f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80075f6:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
			v3 = myDUTY.joint.trajectory[3].scurve.v_current;
 80075fa:	4b13      	ldr	r3, [pc, #76]	; (8007648 <scaraFlowDuty+0x4c4>)
 80075fc:	f603 1318 	addw	r3, r3, #2328	; 0x918
 8007600:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007604:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
 8007608:	e001      	b.n	800760e <scaraFlowDuty+0x48a>

		} else {
			return SCARA_STATUS_ERROR_TRAJECTORY;
 800760a:	2305      	movs	r3, #5
 800760c:	e10d      	b.n	800782a <scaraFlowDuty+0x6a6>
		}
		// Check init status
		if ( SCARA_STATUS_OK != status1) {
 800760e:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8007612:	2b00      	cmp	r3, #0
 8007614:	d002      	beq.n	800761c <scaraFlowDuty+0x498>
			return status1;
 8007616:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 800761a:	e106      	b.n	800782a <scaraFlowDuty+0x6a6>
		}
		if ( SCARA_STATUS_OK != status2) {
 800761c:	f897 3156 	ldrb.w	r3, [r7, #342]	; 0x156
 8007620:	2b00      	cmp	r3, #0
 8007622:	d002      	beq.n	800762a <scaraFlowDuty+0x4a6>
			return status2;
 8007624:	f897 3156 	ldrb.w	r3, [r7, #342]	; 0x156
 8007628:	e0ff      	b.n	800782a <scaraFlowDuty+0x6a6>
		}
		if ( SCARA_STATUS_OK != status3) {
 800762a:	f897 3155 	ldrb.w	r3, [r7, #341]	; 0x155
 800762e:	2b00      	cmp	r3, #0
 8007630:	d002      	beq.n	8007638 <scaraFlowDuty+0x4b4>
			return status3;
 8007632:	f897 3155 	ldrb.w	r3, [r7, #341]	; 0x155
 8007636:	e0f8      	b.n	800782a <scaraFlowDuty+0x6a6>
		}
		if ( SCARA_STATUS_OK != status4) {
 8007638:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800763c:	2b00      	cmp	r3, #0
 800763e:	d015      	beq.n	800766c <scaraFlowDuty+0x4e8>
			return status4;
 8007640:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8007644:	e0f1      	b.n	800782a <scaraFlowDuty+0x6a6>
 8007646:	bf00      	nop
 8007648:	20005378 	.word	0x20005378
 800764c:	20005748 	.word	0x20005748
 8007650:	200058a0 	.word	0x200058a0
 8007654:	200059f8 	.word	0x200059f8
 8007658:	20005b50 	.word	0x20005b50
 800765c:	200057c8 	.word	0x200057c8
 8007660:	20005920 	.word	0x20005920
 8007664:	20005a78 	.word	0x20005a78
 8007668:	20005bd0 	.word	0x20005bd0
		}

		positionCompute.Theta1 	= myDUTY.joint.theta1_start + s0*dir0;
 800766c:	4b73      	ldr	r3, [pc, #460]	; (800783c <scaraFlowDuty+0x6b8>)
 800766e:	f603 1328 	addw	r3, r3, #2344	; 0x928
 8007672:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007676:	f997 30cf 	ldrsb.w	r3, [r7, #207]	; 0xcf
 800767a:	4618      	mov	r0, r3
 800767c:	f7f8 ff52 	bl	8000524 <__aeabi_i2d>
 8007680:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8007684:	f7f8 ffb8 	bl	80005f8 <__aeabi_dmul>
 8007688:	4602      	mov	r2, r0
 800768a:	460b      	mov	r3, r1
 800768c:	4620      	mov	r0, r4
 800768e:	4629      	mov	r1, r5
 8007690:	f7f8 fdfc 	bl	800028c <__adddf3>
 8007694:	4603      	mov	r3, r0
 8007696:	460c      	mov	r4, r1
 8007698:	f107 0210 	add.w	r2, r7, #16
 800769c:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		positionCompute.Theta2 	= myDUTY.joint.theta2_start + s1*dir1;
 80076a0:	4b66      	ldr	r3, [pc, #408]	; (800783c <scaraFlowDuty+0x6b8>)
 80076a2:	f503 6313 	add.w	r3, r3, #2352	; 0x930
 80076a6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80076aa:	f997 30ce 	ldrsb.w	r3, [r7, #206]	; 0xce
 80076ae:	4618      	mov	r0, r3
 80076b0:	f7f8 ff38 	bl	8000524 <__aeabi_i2d>
 80076b4:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 80076b8:	f7f8 ff9e 	bl	80005f8 <__aeabi_dmul>
 80076bc:	4602      	mov	r2, r0
 80076be:	460b      	mov	r3, r1
 80076c0:	4620      	mov	r0, r4
 80076c2:	4629      	mov	r1, r5
 80076c4:	f7f8 fde2 	bl	800028c <__adddf3>
 80076c8:	4603      	mov	r3, r0
 80076ca:	460c      	mov	r4, r1
 80076cc:	f107 0210 	add.w	r2, r7, #16
 80076d0:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		positionCompute.D3 		= myDUTY.joint.d3_start 	+ s2*dir2;
 80076d4:	4b59      	ldr	r3, [pc, #356]	; (800783c <scaraFlowDuty+0x6b8>)
 80076d6:	f603 1338 	addw	r3, r3, #2360	; 0x938
 80076da:	e9d3 4500 	ldrd	r4, r5, [r3]
 80076de:	f997 30cd 	ldrsb.w	r3, [r7, #205]	; 0xcd
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7f8 ff1e 	bl	8000524 <__aeabi_i2d>
 80076e8:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 80076ec:	f7f8 ff84 	bl	80005f8 <__aeabi_dmul>
 80076f0:	4602      	mov	r2, r0
 80076f2:	460b      	mov	r3, r1
 80076f4:	4620      	mov	r0, r4
 80076f6:	4629      	mov	r1, r5
 80076f8:	f7f8 fdc8 	bl	800028c <__adddf3>
 80076fc:	4603      	mov	r3, r0
 80076fe:	460c      	mov	r4, r1
 8007700:	f107 0210 	add.w	r2, r7, #16
 8007704:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		positionCompute.Theta4 	= myDUTY.joint.theta4_start + s3*dir3;
 8007708:	4b4c      	ldr	r3, [pc, #304]	; (800783c <scaraFlowDuty+0x6b8>)
 800770a:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 800770e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007712:	f997 30cc 	ldrsb.w	r3, [r7, #204]	; 0xcc
 8007716:	4618      	mov	r0, r3
 8007718:	f7f8 ff04 	bl	8000524 <__aeabi_i2d>
 800771c:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8007720:	f7f8 ff6a 	bl	80005f8 <__aeabi_dmul>
 8007724:	4602      	mov	r2, r0
 8007726:	460b      	mov	r3, r1
 8007728:	4620      	mov	r0, r4
 800772a:	4629      	mov	r1, r5
 800772c:	f7f8 fdae 	bl	800028c <__adddf3>
 8007730:	4603      	mov	r3, r0
 8007732:	460c      	mov	r4, r1
 8007734:	f107 0210 	add.w	r2, r7, #16
 8007738:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

		positionCompute.v_theta1 	= v0;
 800773c:	f107 0210 	add.w	r2, r7, #16
 8007740:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 8007744:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		positionCompute.v_theta2 	= v1;
 8007748:	f107 0210 	add.w	r2, r7, #16
 800774c:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8007750:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
		positionCompute.v_d3 		= v2;
 8007754:	f107 0210 	add.w	r2, r7, #16
 8007758:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 800775c:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
		positionCompute.v_theta4 	= v3;
 8007760:	f107 0210 	add.w	r2, r7, #16
 8007764:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8007768:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0

		positionCompute.q_theta1 = s0;
 800776c:	f107 0210 	add.w	r2, r7, #16
 8007770:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 8007774:	e9c2 3404 	strd	r3, r4, [r2, #16]
		positionCompute.q_theta2 = s1;
 8007778:	f107 0210 	add.w	r2, r7, #16
 800777c:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8007780:	e9c2 3406 	strd	r3, r4, [r2, #24]
		positionCompute.q_d3	 = s2;
 8007784:	f107 0210 	add.w	r2, r7, #16
 8007788:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 800778c:	e9c2 3408 	strd	r3, r4, [r2, #32]
		positionCompute.q_theta4 = s3;
 8007790:	f107 0210 	add.w	r2, r7, #16
 8007794:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8007798:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

		positionCompute.total_time = myDUTY.time_total;
 800779c:	4b27      	ldr	r3, [pc, #156]	; (800783c <scaraFlowDuty+0x6b8>)
 800779e:	f603 1348 	addw	r3, r3, #2376	; 0x948
 80077a2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80077a6:	f107 0210 	add.w	r2, r7, #16
 80077aa:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
		positionCompute.t		= time;
 80077ae:	f107 0210 	add.w	r2, r7, #16
 80077b2:	f107 0308 	add.w	r3, r7, #8
 80077b6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80077ba:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		// Check workspace
		if( SCARA_STATUS_OK != scaraCheckWorkSpace4(positionCompute.Theta1,
 80077be:	f107 0310 	add.w	r3, r7, #16
 80077c2:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80077c6:	f107 0310 	add.w	r3, r7, #16
 80077ca:	ed93 6b1c 	vldr	d6, [r3, #112]	; 0x70
 80077ce:	f107 0310 	add.w	r3, r7, #16
 80077d2:	ed93 5b1e 	vldr	d5, [r3, #120]	; 0x78
 80077d6:	f107 0310 	add.w	r3, r7, #16
 80077da:	ed93 4b20 	vldr	d4, [r3, #128]	; 0x80
 80077de:	eeb0 3a44 	vmov.f32	s6, s8
 80077e2:	eef0 3a64 	vmov.f32	s7, s9
 80077e6:	eeb0 2a45 	vmov.f32	s4, s10
 80077ea:	eef0 2a65 	vmov.f32	s5, s11
 80077ee:	eeb0 1a46 	vmov.f32	s2, s12
 80077f2:	eef0 1a66 	vmov.f32	s3, s13
 80077f6:	eeb0 0a47 	vmov.f32	s0, s14
 80077fa:	eef0 0a67 	vmov.f32	s1, s15
 80077fe:	f001 f9bf 	bl	8008b80 <scaraCheckWorkSpace4>
 8007802:	4603      	mov	r3, r0
 8007804:	2b00      	cmp	r3, #0
 8007806:	d001      	beq.n	800780c <scaraFlowDuty+0x688>
							 	 	 	  positionCompute.Theta2,
										  positionCompute.D3,
										  positionCompute.Theta4)) {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8007808:	2307      	movs	r3, #7
 800780a:	e00e      	b.n	800782a <scaraFlowDuty+0x6a6>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 800780c:	f107 0110 	add.w	r1, r7, #16
 8007810:	1d3b      	adds	r3, r7, #4
 8007812:	22b8      	movs	r2, #184	; 0xb8
 8007814:	6818      	ldr	r0, [r3, #0]
 8007816:	f00e f893 	bl	8015940 <memcpy>
		}
		kinematicForward(pos_Next);
 800781a:	1d3b      	adds	r3, r7, #4
 800781c:	6818      	ldr	r0, [r3, #0]
 800781e:	f7fb fbdb 	bl	8002fd8 <kinematicForward>
 8007822:	e001      	b.n	8007828 <scaraFlowDuty+0x6a4>

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 8007824:	2302      	movs	r3, #2
 8007826:	e000      	b.n	800782a <scaraFlowDuty+0x6a6>
	}

	return SCARA_STATUS_OK;
 8007828:	2300      	movs	r3, #0
}
 800782a:	4618      	mov	r0, r3
 800782c:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8007830:	46bd      	mov	sp, r7
 8007832:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8007836:	b002      	add	sp, #8
 8007838:	4770      	bx	lr
 800783a:	bf00      	nop
 800783c:	20005378 	.word	0x20005378

08007840 <scaraFlowLine>:

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowLine		(Path_Line_TypeDef *line, double s) {
 8007840:	b5b0      	push	{r4, r5, r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	ed87 0b00 	vstr	d0, [r7]
	// Avoid div with 0
	if ( line->total_s > 0.01) {
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8007852:	a33d      	add	r3, pc, #244	; (adr r3, 8007948 <scaraFlowLine+0x108>)
 8007854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007858:	f7f9 f95e 	bl	8000b18 <__aeabi_dcmpgt>
 800785c:	4603      	mov	r3, r0
 800785e:	2b00      	cmp	r3, #0
 8007860:	d05a      	beq.n	8007918 <scaraFlowLine+0xd8>
		line->x_current	 = line->x0 + line->denta_x*s/line->total_s;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800786e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007872:	f7f8 fec1 	bl	80005f8 <__aeabi_dmul>
 8007876:	4602      	mov	r2, r0
 8007878:	460b      	mov	r3, r1
 800787a:	4610      	mov	r0, r2
 800787c:	4619      	mov	r1, r3
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8007884:	f7f8 ffe2 	bl	800084c <__aeabi_ddiv>
 8007888:	4602      	mov	r2, r0
 800788a:	460b      	mov	r3, r1
 800788c:	4620      	mov	r0, r4
 800788e:	4629      	mov	r1, r5
 8007890:	f7f8 fcfc 	bl	800028c <__adddf3>
 8007894:	4603      	mov	r3, r0
 8007896:	460c      	mov	r4, r1
 8007898:	68fa      	ldr	r2, [r7, #12]
 800789a:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		line->y_current	 = line->y0 + line->denta_y*s/line->total_s;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80078aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078ae:	f7f8 fea3 	bl	80005f8 <__aeabi_dmul>
 80078b2:	4602      	mov	r2, r0
 80078b4:	460b      	mov	r3, r1
 80078b6:	4610      	mov	r0, r2
 80078b8:	4619      	mov	r1, r3
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80078c0:	f7f8 ffc4 	bl	800084c <__aeabi_ddiv>
 80078c4:	4602      	mov	r2, r0
 80078c6:	460b      	mov	r3, r1
 80078c8:	4620      	mov	r0, r4
 80078ca:	4629      	mov	r1, r5
 80078cc:	f7f8 fcde 	bl	800028c <__adddf3>
 80078d0:	4603      	mov	r3, r0
 80078d2:	460c      	mov	r4, r1
 80078d4:	68fa      	ldr	r2, [r7, #12]
 80078d6:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
		line->z_current	 = line->z0 + line->denta_z*s/line->total_s;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80078e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078ea:	f7f8 fe85 	bl	80005f8 <__aeabi_dmul>
 80078ee:	4602      	mov	r2, r0
 80078f0:	460b      	mov	r3, r1
 80078f2:	4610      	mov	r0, r2
 80078f4:	4619      	mov	r1, r3
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80078fc:	f7f8 ffa6 	bl	800084c <__aeabi_ddiv>
 8007900:	4602      	mov	r2, r0
 8007902:	460b      	mov	r3, r1
 8007904:	4620      	mov	r0, r4
 8007906:	4629      	mov	r1, r5
 8007908:	f7f8 fcc0 	bl	800028c <__adddf3>
 800790c:	4603      	mov	r3, r0
 800790e:	460c      	mov	r4, r1
 8007910:	68fa      	ldr	r2, [r7, #12]
 8007912:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
 8007916:	e011      	b.n	800793c <scaraFlowLine+0xfc>
	} else {
		line->x_current = line->x1;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800791e:	68fa      	ldr	r2, [r7, #12]
 8007920:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		line->y_current = line->y1;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 800792a:	68fa      	ldr	r2, [r7, #12]
 800792c:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
		line->z_current = line->z1;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8007936:	68fa      	ldr	r2, [r7, #12]
 8007938:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	}

	return SCARA_STATUS_OK;
 800793c:	2300      	movs	r3, #0
}
 800793e:	4618      	mov	r0, r3
 8007940:	3710      	adds	r7, #16
 8007942:	46bd      	mov	sp, r7
 8007944:	bdb0      	pop	{r4, r5, r7, pc}
 8007946:	bf00      	nop
 8007948:	47ae147b 	.word	0x47ae147b
 800794c:	3f847ae1 	.word	0x3f847ae1

08007950 <scaraFlowCircle>:

/* Compute new x, y ,z corresponding to s */
SCARA_StatusTypeDef	scaraFlowCircle		(Path_Circle_TypeDef *circle, double s) {
 8007950:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007954:	b086      	sub	sp, #24
 8007956:	af00      	add	r7, sp, #0
 8007958:	60f8      	str	r0, [r7, #12]
 800795a:	ed87 0b00 	vstr	d0, [r7]
	double angle;
	angle = s/(circle->radius);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8007964:	461a      	mov	r2, r3
 8007966:	4623      	mov	r3, r4
 8007968:	e9d7 0100 	ldrd	r0, r1, [r7]
 800796c:	f7f8 ff6e 	bl	800084c <__aeabi_ddiv>
 8007970:	4603      	mov	r3, r0
 8007972:	460c      	mov	r4, r1
 8007974:	e9c7 3404 	strd	r3, r4, [r7, #16]
	circle->x_current = circle->xi + circle->radius*cos(circle->angle_start + circle->dir*angle);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f993 3000 	ldrsb.w	r3, [r3]
 8007990:	4618      	mov	r0, r3
 8007992:	f7f8 fdc7 	bl	8000524 <__aeabi_i2d>
 8007996:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800799a:	f7f8 fe2d 	bl	80005f8 <__aeabi_dmul>
 800799e:	4602      	mov	r2, r0
 80079a0:	460b      	mov	r3, r1
 80079a2:	4650      	mov	r0, sl
 80079a4:	4659      	mov	r1, fp
 80079a6:	f7f8 fc71 	bl	800028c <__adddf3>
 80079aa:	4602      	mov	r2, r0
 80079ac:	460b      	mov	r3, r1
 80079ae:	ec43 2b17 	vmov	d7, r2, r3
 80079b2:	eeb0 0a47 	vmov.f32	s0, s14
 80079b6:	eef0 0a67 	vmov.f32	s1, s15
 80079ba:	f011 fdad 	bl	8019518 <cos>
 80079be:	ec53 2b10 	vmov	r2, r3, d0
 80079c2:	4640      	mov	r0, r8
 80079c4:	4649      	mov	r1, r9
 80079c6:	f7f8 fe17 	bl	80005f8 <__aeabi_dmul>
 80079ca:	4602      	mov	r2, r0
 80079cc:	460b      	mov	r3, r1
 80079ce:	4620      	mov	r0, r4
 80079d0:	4629      	mov	r1, r5
 80079d2:	f7f8 fc5b 	bl	800028c <__adddf3>
 80079d6:	4603      	mov	r3, r0
 80079d8:	460c      	mov	r4, r1
 80079da:	68fa      	ldr	r2, [r7, #12]
 80079dc:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	circle->y_current = circle->yi + circle->radius*sin(circle->angle_start + circle->dir*angle);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	e9d3 ab04 	ldrd	sl, fp, [r3, #16]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f993 3000 	ldrsb.w	r3, [r3]
 80079f8:	4618      	mov	r0, r3
 80079fa:	f7f8 fd93 	bl	8000524 <__aeabi_i2d>
 80079fe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007a02:	f7f8 fdf9 	bl	80005f8 <__aeabi_dmul>
 8007a06:	4602      	mov	r2, r0
 8007a08:	460b      	mov	r3, r1
 8007a0a:	4650      	mov	r0, sl
 8007a0c:	4659      	mov	r1, fp
 8007a0e:	f7f8 fc3d 	bl	800028c <__adddf3>
 8007a12:	4602      	mov	r2, r0
 8007a14:	460b      	mov	r3, r1
 8007a16:	ec43 2b17 	vmov	d7, r2, r3
 8007a1a:	eeb0 0a47 	vmov.f32	s0, s14
 8007a1e:	eef0 0a67 	vmov.f32	s1, s15
 8007a22:	f011 fe09 	bl	8019638 <sin>
 8007a26:	ec53 2b10 	vmov	r2, r3, d0
 8007a2a:	4640      	mov	r0, r8
 8007a2c:	4649      	mov	r1, r9
 8007a2e:	f7f8 fde3 	bl	80005f8 <__aeabi_dmul>
 8007a32:	4602      	mov	r2, r0
 8007a34:	460b      	mov	r3, r1
 8007a36:	4620      	mov	r0, r4
 8007a38:	4629      	mov	r1, r5
 8007a3a:	f7f8 fc27 	bl	800028c <__adddf3>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	460c      	mov	r4, r1
 8007a42:	68fa      	ldr	r2, [r7, #12]
 8007a44:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
	circle->z_current = circle->zi; // XY plane
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

	return SCARA_STATUS_OK;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3718      	adds	r7, #24
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007a60 <scaraFlowLSPB>:

/* Compute new s corresponding to time */
SCARA_StatusTypeDef	scaraFlowLSPB		(Trajectory_LSPB_TypeDef *lspb, double time) {
 8007a60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007a64:	b08b      	sub	sp, #44	; 0x2c
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	60f8      	str	r0, [r7, #12]
 8007a6a:	ed87 0b00 	vstr	d0, [r7]
	double tf, td, ta;

	tf = lspb->Tf;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8007a74:	e9c7 2308 	strd	r2, r3, [r7, #32]
	td = lspb->Td;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8007a7e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	ta = lspb->Ta;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8007a88:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Accelerate
	if ( 0.0f <= time && time <= ta) {
 8007a8c:	f04f 0200 	mov.w	r2, #0
 8007a90:	f04f 0300 	mov.w	r3, #0
 8007a94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a98:	f7f9 f834 	bl	8000b04 <__aeabi_dcmpge>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d05b      	beq.n	8007b5a <scaraFlowLSPB+0xfa>
 8007aa2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007aa6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007aaa:	f7f9 f821 	bl	8000af0 <__aeabi_dcmple>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d052      	beq.n	8007b5a <scaraFlowLSPB+0xfa>
		lspb->a_current		=	lspb->a_design;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8007aba:	68fa      	ldr	r2, [r7, #12]
 8007abc:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	lspb->v0 + lspb->a_design*time;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8007acc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ad0:	f7f8 fd92 	bl	80005f8 <__aeabi_dmul>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	4620      	mov	r0, r4
 8007ada:	4629      	mov	r1, r5
 8007adc:	f7f8 fbd6 	bl	800028c <__adddf3>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	460c      	mov	r4, r1
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*time + 0.5*lspb->a_design*time*time;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007af6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007afa:	f7f8 fd7d 	bl	80005f8 <__aeabi_dmul>
 8007afe:	4602      	mov	r2, r0
 8007b00:	460b      	mov	r3, r1
 8007b02:	4620      	mov	r0, r4
 8007b04:	4629      	mov	r1, r5
 8007b06:	f7f8 fbc1 	bl	800028c <__adddf3>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	460c      	mov	r4, r1
 8007b0e:	4625      	mov	r5, r4
 8007b10:	461c      	mov	r4, r3
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8007b18:	f04f 0200 	mov.w	r2, #0
 8007b1c:	4ba5      	ldr	r3, [pc, #660]	; (8007db4 <scaraFlowLSPB+0x354>)
 8007b1e:	f7f8 fd6b 	bl	80005f8 <__aeabi_dmul>
 8007b22:	4602      	mov	r2, r0
 8007b24:	460b      	mov	r3, r1
 8007b26:	4610      	mov	r0, r2
 8007b28:	4619      	mov	r1, r3
 8007b2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b2e:	f7f8 fd63 	bl	80005f8 <__aeabi_dmul>
 8007b32:	4602      	mov	r2, r0
 8007b34:	460b      	mov	r3, r1
 8007b36:	4610      	mov	r0, r2
 8007b38:	4619      	mov	r1, r3
 8007b3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b3e:	f7f8 fd5b 	bl	80005f8 <__aeabi_dmul>
 8007b42:	4602      	mov	r2, r0
 8007b44:	460b      	mov	r3, r1
 8007b46:	4620      	mov	r0, r4
 8007b48:	4629      	mov	r1, r5
 8007b4a:	f7f8 fb9f 	bl	800028c <__adddf3>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	460c      	mov	r4, r1
 8007b52:	68fa      	ldr	r2, [r7, #12]
 8007b54:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8007b58:	e125      	b.n	8007da6 <scaraFlowLSPB+0x346>
	// Constant velocity
	} else if (ta <= time && time <= (tf - td)) {
 8007b5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b5e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007b62:	f7f8 ffc5 	bl	8000af0 <__aeabi_dcmple>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d05e      	beq.n	8007c2a <scaraFlowLSPB+0x1ca>
 8007b6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b70:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007b74:	f7f8 fb88 	bl	8000288 <__aeabi_dsub>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	460b      	mov	r3, r1
 8007b7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b80:	f7f8 ffb6 	bl	8000af0 <__aeabi_dcmple>
 8007b84:	4603      	mov	r3, r0
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d04f      	beq.n	8007c2a <scaraFlowLSPB+0x1ca>
		lspb->a_current		=	0;
 8007b8a:	68fa      	ldr	r2, [r7, #12]
 8007b8c:	f04f 0300 	mov.w	r3, #0
 8007b90:	f04f 0400 	mov.w	r4, #0
 8007b94:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	lspb->v_lim;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8007b9e:	68fa      	ldr	r2, [r7, #12]
 8007ba0:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s0 + lspb->v0*ta/2 + lspb->v_lim*(time - ta/2);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007bb0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007bb4:	f7f8 fd20 	bl	80005f8 <__aeabi_dmul>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	460b      	mov	r3, r1
 8007bbc:	4610      	mov	r0, r2
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	f04f 0200 	mov.w	r2, #0
 8007bc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007bc8:	f7f8 fe40 	bl	800084c <__aeabi_ddiv>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	460b      	mov	r3, r1
 8007bd0:	4620      	mov	r0, r4
 8007bd2:	4629      	mov	r1, r5
 8007bd4:	f7f8 fb5a 	bl	800028c <__adddf3>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	460c      	mov	r4, r1
 8007bdc:	4698      	mov	r8, r3
 8007bde:	46a1      	mov	r9, r4
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8007be6:	f04f 0200 	mov.w	r2, #0
 8007bea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007bee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007bf2:	f7f8 fe2b 	bl	800084c <__aeabi_ddiv>
 8007bf6:	4602      	mov	r2, r0
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007bfe:	f7f8 fb43 	bl	8000288 <__aeabi_dsub>
 8007c02:	4602      	mov	r2, r0
 8007c04:	460b      	mov	r3, r1
 8007c06:	4620      	mov	r0, r4
 8007c08:	4629      	mov	r1, r5
 8007c0a:	f7f8 fcf5 	bl	80005f8 <__aeabi_dmul>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	460c      	mov	r4, r1
 8007c12:	461a      	mov	r2, r3
 8007c14:	4623      	mov	r3, r4
 8007c16:	4640      	mov	r0, r8
 8007c18:	4649      	mov	r1, r9
 8007c1a:	f7f8 fb37 	bl	800028c <__adddf3>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	460c      	mov	r4, r1
 8007c22:	68fa      	ldr	r2, [r7, #12]
 8007c24:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8007c28:	e0bd      	b.n	8007da6 <scaraFlowLSPB+0x346>
	// Decelerate
	} else if ((tf - td) <= time && time <= tf) {
 8007c2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c2e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007c32:	f7f8 fb29 	bl	8000288 <__aeabi_dsub>
 8007c36:	4602      	mov	r2, r0
 8007c38:	460b      	mov	r3, r1
 8007c3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c3e:	f7f8 ff61 	bl	8000b04 <__aeabi_dcmpge>
 8007c42:	4603      	mov	r3, r0
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	f000 809a 	beq.w	8007d7e <scaraFlowLSPB+0x31e>
 8007c4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007c4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c52:	f7f8 ff4d 	bl	8000af0 <__aeabi_dcmple>
 8007c56:	4603      	mov	r3, r0
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	f000 8090 	beq.w	8007d7e <scaraFlowLSPB+0x31e>
		lspb->a_current		=	-lspb->a_design;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8007c64:	4614      	mov	r4, r2
 8007c66:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	e9c3 451a 	strd	r4, r5, [r3, #104]	; 0x68
		lspb->v_current		=	lspb->v1 + lspb->a_design*(tf - time);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	e9d3 890c 	ldrd	r8, r9, [r3, #48]	; 0x30
 8007c7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c80:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007c84:	f7f8 fb00 	bl	8000288 <__aeabi_dsub>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	460b      	mov	r3, r1
 8007c8c:	4640      	mov	r0, r8
 8007c8e:	4649      	mov	r1, r9
 8007c90:	f7f8 fcb2 	bl	80005f8 <__aeabi_dmul>
 8007c94:	4602      	mov	r2, r0
 8007c96:	460b      	mov	r3, r1
 8007c98:	4620      	mov	r0, r4
 8007c9a:	4629      	mov	r1, r5
 8007c9c:	f7f8 faf6 	bl	800028c <__adddf3>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	460c      	mov	r4, r1
 8007ca4:	68fa      	ldr	r2, [r7, #12]
 8007ca6:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->s1 - lspb->v1*(tf - time)
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8007cb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cba:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007cbe:	f7f8 fae3 	bl	8000288 <__aeabi_dsub>
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	4640      	mov	r0, r8
 8007cc8:	4649      	mov	r1, r9
 8007cca:	f7f8 fc95 	bl	80005f8 <__aeabi_dmul>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	4620      	mov	r0, r4
 8007cd4:	4629      	mov	r1, r5
 8007cd6:	f7f8 fad7 	bl	8000288 <__aeabi_dsub>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	460c      	mov	r4, r1
 8007cde:	461d      	mov	r5, r3
 8007ce0:	4626      	mov	r6, r4
								- (lspb->v_lim - lspb->v1)*(tf - time)*(tf - time)/(2*td);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8007cee:	461a      	mov	r2, r3
 8007cf0:	4623      	mov	r3, r4
 8007cf2:	f7f8 fac9 	bl	8000288 <__aeabi_dsub>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	460c      	mov	r4, r1
 8007cfa:	4698      	mov	r8, r3
 8007cfc:	46a1      	mov	r9, r4
 8007cfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d02:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007d06:	f7f8 fabf 	bl	8000288 <__aeabi_dsub>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	460c      	mov	r4, r1
 8007d0e:	461a      	mov	r2, r3
 8007d10:	4623      	mov	r3, r4
 8007d12:	4640      	mov	r0, r8
 8007d14:	4649      	mov	r1, r9
 8007d16:	f7f8 fc6f 	bl	80005f8 <__aeabi_dmul>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	460c      	mov	r4, r1
 8007d1e:	4698      	mov	r8, r3
 8007d20:	46a1      	mov	r9, r4
 8007d22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d26:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007d2a:	f7f8 faad 	bl	8000288 <__aeabi_dsub>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	460c      	mov	r4, r1
 8007d32:	461a      	mov	r2, r3
 8007d34:	4623      	mov	r3, r4
 8007d36:	4640      	mov	r0, r8
 8007d38:	4649      	mov	r1, r9
 8007d3a:	f7f8 fc5d 	bl	80005f8 <__aeabi_dmul>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	460c      	mov	r4, r1
 8007d42:	4698      	mov	r8, r3
 8007d44:	46a1      	mov	r9, r4
 8007d46:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	f7f8 fa9d 	bl	800028c <__adddf3>
 8007d52:	4603      	mov	r3, r0
 8007d54:	460c      	mov	r4, r1
 8007d56:	461a      	mov	r2, r3
 8007d58:	4623      	mov	r3, r4
 8007d5a:	4640      	mov	r0, r8
 8007d5c:	4649      	mov	r1, r9
 8007d5e:	f7f8 fd75 	bl	800084c <__aeabi_ddiv>
 8007d62:	4603      	mov	r3, r0
 8007d64:	460c      	mov	r4, r1
 8007d66:	461a      	mov	r2, r3
 8007d68:	4623      	mov	r3, r4
 8007d6a:	4628      	mov	r0, r5
 8007d6c:	4631      	mov	r1, r6
 8007d6e:	f7f8 fa8b 	bl	8000288 <__aeabi_dsub>
 8007d72:	4603      	mov	r3, r0
 8007d74:	460c      	mov	r4, r1
		lspb->s_current		=	lspb->s1 - lspb->v1*(tf - time)
 8007d76:	68fa      	ldr	r2, [r7, #12]
 8007d78:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
 8007d7c:	e013      	b.n	8007da6 <scaraFlowLSPB+0x346>
	} else {
		lspb->a_current 	=	0;
 8007d7e:	68fa      	ldr	r2, [r7, #12]
 8007d80:	f04f 0300 	mov.w	r3, #0
 8007d84:	f04f 0400 	mov.w	r4, #0
 8007d88:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		lspb->v_current		=	0;
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	f04f 0300 	mov.w	r3, #0
 8007d92:	f04f 0400 	mov.w	r4, #0
 8007d96:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		lspb->s_current		=	lspb->total_s;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 8007da0:	68fa      	ldr	r2, [r7, #12]
 8007da2:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	}

	return SCARA_STATUS_OK;
 8007da6:	2300      	movs	r3, #0
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	372c      	adds	r7, #44	; 0x2c
 8007dac:	46bd      	mov	sp, r7
 8007dae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007db2:	bf00      	nop
 8007db4:	3fe00000 	.word	0x3fe00000

08007db8 <scaraFLowScurve>:

/* Compute new s corresponding to time */
SCARA_StatusTypeDef	scaraFLowScurve		(Trajectory_Scurve_TypeDef *scurve, double time) {
 8007db8:	b5b0      	push	{r4, r5, r7, lr}
 8007dba:	b092      	sub	sp, #72	; 0x48
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6278      	str	r0, [r7, #36]	; 0x24
 8007dc0:	ed87 0b06 	vstr	d0, [r7, #24]
	double j_max, tm, tc, t;

	j_max = scurve->j_max;
 8007dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc6:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8007dca:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	tm	  = scurve->Tm;
 8007dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8007dd4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	tc	  = scurve->Tc;
 8007dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dda:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8007dde:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	 // SCURVE 4 PHASE: tc = 0;
	 if ( 4 == scurve->num_of_phase) {
 8007de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007de8:	2b04      	cmp	r3, #4
 8007dea:	f040 8321 	bne.w	8008430 <scaraFLowScurve+0x678>
		 // Phase 1
		 if ( (0.0f <= time) && ( time < tm)) {
 8007dee:	f04f 0200 	mov.w	r2, #0
 8007df2:	f04f 0300 	mov.w	r3, #0
 8007df6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007dfa:	f7f8 fe83 	bl	8000b04 <__aeabi_dcmpge>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d059      	beq.n	8007eb8 <scaraFLowScurve+0x100>
 8007e04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007e08:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007e0c:	f7f8 fe66 	bl	8000adc <__aeabi_dcmplt>
 8007e10:	4603      	mov	r3, r0
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d050      	beq.n	8007eb8 <scaraFLowScurve+0x100>
			 t = time;
 8007e16:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8007e1a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*t;
 8007e1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007e22:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007e26:	f7f8 fbe7 	bl	80005f8 <__aeabi_dmul>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	460c      	mov	r4, r1
 8007e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e30:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	= 	0.5*j_max*t*t;
 8007e34:	f04f 0200 	mov.w	r2, #0
 8007e38:	4b93      	ldr	r3, [pc, #588]	; (8008088 <scaraFLowScurve+0x2d0>)
 8007e3a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007e3e:	f7f8 fbdb 	bl	80005f8 <__aeabi_dmul>
 8007e42:	4603      	mov	r3, r0
 8007e44:	460c      	mov	r4, r1
 8007e46:	4618      	mov	r0, r3
 8007e48:	4621      	mov	r1, r4
 8007e4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007e4e:	f7f8 fbd3 	bl	80005f8 <__aeabi_dmul>
 8007e52:	4603      	mov	r3, r0
 8007e54:	460c      	mov	r4, r1
 8007e56:	4618      	mov	r0, r3
 8007e58:	4621      	mov	r1, r4
 8007e5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007e5e:	f7f8 fbcb 	bl	80005f8 <__aeabi_dmul>
 8007e62:	4603      	mov	r3, r0
 8007e64:	460c      	mov	r4, r1
 8007e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e68:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	= 	j_max*t*t*t/6;
 8007e6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007e70:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007e74:	f7f8 fbc0 	bl	80005f8 <__aeabi_dmul>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	460c      	mov	r4, r1
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	4621      	mov	r1, r4
 8007e80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007e84:	f7f8 fbb8 	bl	80005f8 <__aeabi_dmul>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	460c      	mov	r4, r1
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	4621      	mov	r1, r4
 8007e90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007e94:	f7f8 fbb0 	bl	80005f8 <__aeabi_dmul>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	460c      	mov	r4, r1
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	4621      	mov	r1, r4
 8007ea0:	f04f 0200 	mov.w	r2, #0
 8007ea4:	4b79      	ldr	r3, [pc, #484]	; (800808c <scaraFLowScurve+0x2d4>)
 8007ea6:	f7f8 fcd1 	bl	800084c <__aeabi_ddiv>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	460c      	mov	r4, r1
 8007eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eb0:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8007eb4:	f000 be56 	b.w	8008b64 <scaraFLowScurve+0xdac>
		 // Phase 2
		 } else if ( (tm <= time) && ( time < (2*tm) ) ) {
 8007eb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ebc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007ec0:	f7f8 fe16 	bl	8000af0 <__aeabi_dcmple>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	f000 80e2 	beq.w	8008090 <scaraFLowScurve+0x2d8>
 8007ecc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	f7f8 f9da 	bl	800028c <__adddf3>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	460c      	mov	r4, r1
 8007edc:	461a      	mov	r2, r3
 8007ede:	4623      	mov	r3, r4
 8007ee0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007ee4:	f7f8 fdfa 	bl	8000adc <__aeabi_dcmplt>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	f000 80d0 	beq.w	8008090 <scaraFLowScurve+0x2d8>
			 t = time - tm;
 8007ef0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007ef4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007ef8:	f7f8 f9c6 	bl	8000288 <__aeabi_dsub>
 8007efc:	4603      	mov	r3, r0
 8007efe:	460c      	mov	r4, r1
 8007f00:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*tm - j_max*t;
 8007f04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007f08:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007f0c:	f7f8 fb74 	bl	80005f8 <__aeabi_dmul>
 8007f10:	4603      	mov	r3, r0
 8007f12:	460c      	mov	r4, r1
 8007f14:	4625      	mov	r5, r4
 8007f16:	461c      	mov	r4, r3
 8007f18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f1c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007f20:	f7f8 fb6a 	bl	80005f8 <__aeabi_dmul>
 8007f24:	4602      	mov	r2, r0
 8007f26:	460b      	mov	r3, r1
 8007f28:	4620      	mov	r0, r4
 8007f2a:	4629      	mov	r1, r5
 8007f2c:	f7f8 f9ac 	bl	8000288 <__aeabi_dsub>
 8007f30:	4603      	mov	r3, r0
 8007f32:	460c      	mov	r4, r1
 8007f34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f36:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current 	= 	scurve->v_1 + j_max*tm*t - 0.5*j_max*t*t;
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3c:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	; 0x78
 8007f40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007f44:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007f48:	f7f8 fb56 	bl	80005f8 <__aeabi_dmul>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	460b      	mov	r3, r1
 8007f50:	4610      	mov	r0, r2
 8007f52:	4619      	mov	r1, r3
 8007f54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f58:	f7f8 fb4e 	bl	80005f8 <__aeabi_dmul>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	460b      	mov	r3, r1
 8007f60:	4620      	mov	r0, r4
 8007f62:	4629      	mov	r1, r5
 8007f64:	f7f8 f992 	bl	800028c <__adddf3>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	460c      	mov	r4, r1
 8007f6c:	4625      	mov	r5, r4
 8007f6e:	461c      	mov	r4, r3
 8007f70:	f04f 0200 	mov.w	r2, #0
 8007f74:	4b44      	ldr	r3, [pc, #272]	; (8008088 <scaraFLowScurve+0x2d0>)
 8007f76:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007f7a:	f7f8 fb3d 	bl	80005f8 <__aeabi_dmul>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	460b      	mov	r3, r1
 8007f82:	4610      	mov	r0, r2
 8007f84:	4619      	mov	r1, r3
 8007f86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f8a:	f7f8 fb35 	bl	80005f8 <__aeabi_dmul>
 8007f8e:	4602      	mov	r2, r0
 8007f90:	460b      	mov	r3, r1
 8007f92:	4610      	mov	r0, r2
 8007f94:	4619      	mov	r1, r3
 8007f96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f9a:	f7f8 fb2d 	bl	80005f8 <__aeabi_dmul>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	4620      	mov	r0, r4
 8007fa4:	4629      	mov	r1, r5
 8007fa6:	f7f8 f96f 	bl	8000288 <__aeabi_dsub>
 8007faa:	4603      	mov	r3, r0
 8007fac:	460c      	mov	r4, r1
 8007fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fb0:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	=	scurve->s_1 + scurve->v_1*t + 0.5*j_max*tm*t*t - j_max*t*t*t/6;
 8007fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb6:	e9d3 4520 	ldrd	r4, r5, [r3, #128]	; 0x80
 8007fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fbc:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8007fc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007fc4:	f7f8 fb18 	bl	80005f8 <__aeabi_dmul>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	460b      	mov	r3, r1
 8007fcc:	4620      	mov	r0, r4
 8007fce:	4629      	mov	r1, r5
 8007fd0:	f7f8 f95c 	bl	800028c <__adddf3>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	460c      	mov	r4, r1
 8007fd8:	4625      	mov	r5, r4
 8007fda:	461c      	mov	r4, r3
 8007fdc:	f04f 0200 	mov.w	r2, #0
 8007fe0:	4b29      	ldr	r3, [pc, #164]	; (8008088 <scaraFLowScurve+0x2d0>)
 8007fe2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8007fe6:	f7f8 fb07 	bl	80005f8 <__aeabi_dmul>
 8007fea:	4602      	mov	r2, r0
 8007fec:	460b      	mov	r3, r1
 8007fee:	4610      	mov	r0, r2
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007ff6:	f7f8 faff 	bl	80005f8 <__aeabi_dmul>
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	4610      	mov	r0, r2
 8008000:	4619      	mov	r1, r3
 8008002:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008006:	f7f8 faf7 	bl	80005f8 <__aeabi_dmul>
 800800a:	4602      	mov	r2, r0
 800800c:	460b      	mov	r3, r1
 800800e:	4610      	mov	r0, r2
 8008010:	4619      	mov	r1, r3
 8008012:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008016:	f7f8 faef 	bl	80005f8 <__aeabi_dmul>
 800801a:	4602      	mov	r2, r0
 800801c:	460b      	mov	r3, r1
 800801e:	4620      	mov	r0, r4
 8008020:	4629      	mov	r1, r5
 8008022:	f7f8 f933 	bl	800028c <__adddf3>
 8008026:	4603      	mov	r3, r0
 8008028:	460c      	mov	r4, r1
 800802a:	4625      	mov	r5, r4
 800802c:	461c      	mov	r4, r3
 800802e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008032:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008036:	f7f8 fadf 	bl	80005f8 <__aeabi_dmul>
 800803a:	4602      	mov	r2, r0
 800803c:	460b      	mov	r3, r1
 800803e:	4610      	mov	r0, r2
 8008040:	4619      	mov	r1, r3
 8008042:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008046:	f7f8 fad7 	bl	80005f8 <__aeabi_dmul>
 800804a:	4602      	mov	r2, r0
 800804c:	460b      	mov	r3, r1
 800804e:	4610      	mov	r0, r2
 8008050:	4619      	mov	r1, r3
 8008052:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008056:	f7f8 facf 	bl	80005f8 <__aeabi_dmul>
 800805a:	4602      	mov	r2, r0
 800805c:	460b      	mov	r3, r1
 800805e:	4610      	mov	r0, r2
 8008060:	4619      	mov	r1, r3
 8008062:	f04f 0200 	mov.w	r2, #0
 8008066:	4b09      	ldr	r3, [pc, #36]	; (800808c <scaraFLowScurve+0x2d4>)
 8008068:	f7f8 fbf0 	bl	800084c <__aeabi_ddiv>
 800806c:	4602      	mov	r2, r0
 800806e:	460b      	mov	r3, r1
 8008070:	4620      	mov	r0, r4
 8008072:	4629      	mov	r1, r5
 8008074:	f7f8 f908 	bl	8000288 <__aeabi_dsub>
 8008078:	4603      	mov	r3, r0
 800807a:	460c      	mov	r4, r1
 800807c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800807e:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8008082:	f000 bd6f 	b.w	8008b64 <scaraFLowScurve+0xdac>
 8008086:	bf00      	nop
 8008088:	3fe00000 	.word	0x3fe00000
 800808c:	40180000 	.word	0x40180000
		 // Phase 3: does not exist
		 // Phase 4
		 } else if ( ((2*tm) <= time) && ( time < (3*tm)) ) {
 8008090:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008094:	4602      	mov	r2, r0
 8008096:	460b      	mov	r3, r1
 8008098:	f7f8 f8f8 	bl	800028c <__adddf3>
 800809c:	4603      	mov	r3, r0
 800809e:	460c      	mov	r4, r1
 80080a0:	461a      	mov	r2, r3
 80080a2:	4623      	mov	r3, r4
 80080a4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80080a8:	f7f8 fd2c 	bl	8000b04 <__aeabi_dcmpge>
 80080ac:	4603      	mov	r3, r0
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	f000 80a2 	beq.w	80081f8 <scaraFLowScurve+0x440>
 80080b4:	f04f 0200 	mov.w	r2, #0
 80080b8:	4b4c      	ldr	r3, [pc, #304]	; (80081ec <scaraFLowScurve+0x434>)
 80080ba:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80080be:	f7f8 fa9b 	bl	80005f8 <__aeabi_dmul>
 80080c2:	4603      	mov	r3, r0
 80080c4:	460c      	mov	r4, r1
 80080c6:	461a      	mov	r2, r3
 80080c8:	4623      	mov	r3, r4
 80080ca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80080ce:	f7f8 fd05 	bl	8000adc <__aeabi_dcmplt>
 80080d2:	4603      	mov	r3, r0
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	f000 808f 	beq.w	80081f8 <scaraFLowScurve+0x440>
			 t = time - 2*tm;
 80080da:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80080de:	4602      	mov	r2, r0
 80080e0:	460b      	mov	r3, r1
 80080e2:	f7f8 f8d3 	bl	800028c <__adddf3>
 80080e6:	4603      	mov	r3, r0
 80080e8:	460c      	mov	r4, r1
 80080ea:	461a      	mov	r2, r3
 80080ec:	4623      	mov	r3, r4
 80080ee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80080f2:	f7f8 f8c9 	bl	8000288 <__aeabi_dsub>
 80080f6:	4603      	mov	r3, r0
 80080f8:	460c      	mov	r4, r1
 80080fa:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	=	-j_max*t;
 80080fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008100:	613b      	str	r3, [r7, #16]
 8008102:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008104:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008108:	617b      	str	r3, [r7, #20]
 800810a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800810e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008112:	f7f8 fa71 	bl	80005f8 <__aeabi_dmul>
 8008116:	4603      	mov	r3, r0
 8008118:	460c      	mov	r4, r1
 800811a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800811c:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_2 - 0.5*j_max*t*t;
 8008120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008122:	e9d3 4522 	ldrd	r4, r5, [r3, #136]	; 0x88
 8008126:	f04f 0200 	mov.w	r2, #0
 800812a:	4b31      	ldr	r3, [pc, #196]	; (80081f0 <scaraFLowScurve+0x438>)
 800812c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008130:	f7f8 fa62 	bl	80005f8 <__aeabi_dmul>
 8008134:	4602      	mov	r2, r0
 8008136:	460b      	mov	r3, r1
 8008138:	4610      	mov	r0, r2
 800813a:	4619      	mov	r1, r3
 800813c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008140:	f7f8 fa5a 	bl	80005f8 <__aeabi_dmul>
 8008144:	4602      	mov	r2, r0
 8008146:	460b      	mov	r3, r1
 8008148:	4610      	mov	r0, r2
 800814a:	4619      	mov	r1, r3
 800814c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008150:	f7f8 fa52 	bl	80005f8 <__aeabi_dmul>
 8008154:	4602      	mov	r2, r0
 8008156:	460b      	mov	r3, r1
 8008158:	4620      	mov	r0, r4
 800815a:	4629      	mov	r1, r5
 800815c:	f7f8 f894 	bl	8000288 <__aeabi_dsub>
 8008160:	4603      	mov	r3, r0
 8008162:	460c      	mov	r4, r1
 8008164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008166:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_2 + scurve->v_2*t - j_max*t*t*t/6;
 800816a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816c:	e9d3 4524 	ldrd	r4, r5, [r3, #144]	; 0x90
 8008170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008172:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 8008176:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800817a:	f7f8 fa3d 	bl	80005f8 <__aeabi_dmul>
 800817e:	4602      	mov	r2, r0
 8008180:	460b      	mov	r3, r1
 8008182:	4620      	mov	r0, r4
 8008184:	4629      	mov	r1, r5
 8008186:	f7f8 f881 	bl	800028c <__adddf3>
 800818a:	4603      	mov	r3, r0
 800818c:	460c      	mov	r4, r1
 800818e:	4625      	mov	r5, r4
 8008190:	461c      	mov	r4, r3
 8008192:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008196:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800819a:	f7f8 fa2d 	bl	80005f8 <__aeabi_dmul>
 800819e:	4602      	mov	r2, r0
 80081a0:	460b      	mov	r3, r1
 80081a2:	4610      	mov	r0, r2
 80081a4:	4619      	mov	r1, r3
 80081a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80081aa:	f7f8 fa25 	bl	80005f8 <__aeabi_dmul>
 80081ae:	4602      	mov	r2, r0
 80081b0:	460b      	mov	r3, r1
 80081b2:	4610      	mov	r0, r2
 80081b4:	4619      	mov	r1, r3
 80081b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80081ba:	f7f8 fa1d 	bl	80005f8 <__aeabi_dmul>
 80081be:	4602      	mov	r2, r0
 80081c0:	460b      	mov	r3, r1
 80081c2:	4610      	mov	r0, r2
 80081c4:	4619      	mov	r1, r3
 80081c6:	f04f 0200 	mov.w	r2, #0
 80081ca:	4b0a      	ldr	r3, [pc, #40]	; (80081f4 <scaraFLowScurve+0x43c>)
 80081cc:	f7f8 fb3e 	bl	800084c <__aeabi_ddiv>
 80081d0:	4602      	mov	r2, r0
 80081d2:	460b      	mov	r3, r1
 80081d4:	4620      	mov	r0, r4
 80081d6:	4629      	mov	r1, r5
 80081d8:	f7f8 f856 	bl	8000288 <__aeabi_dsub>
 80081dc:	4603      	mov	r3, r0
 80081de:	460c      	mov	r4, r1
 80081e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081e2:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 80081e6:	f000 bcbd 	b.w	8008b64 <scaraFLowScurve+0xdac>
 80081ea:	bf00      	nop
 80081ec:	40080000 	.word	0x40080000
 80081f0:	3fe00000 	.word	0x3fe00000
 80081f4:	40180000 	.word	0x40180000
		 // Phase 5
		 } else if ( ((3*tm) <= time) && ( time < (4*tm)) ) {
 80081f8:	f04f 0200 	mov.w	r2, #0
 80081fc:	4b88      	ldr	r3, [pc, #544]	; (8008420 <scaraFLowScurve+0x668>)
 80081fe:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008202:	f7f8 f9f9 	bl	80005f8 <__aeabi_dmul>
 8008206:	4603      	mov	r3, r0
 8008208:	460c      	mov	r4, r1
 800820a:	461a      	mov	r2, r3
 800820c:	4623      	mov	r3, r4
 800820e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008212:	f7f8 fc77 	bl	8000b04 <__aeabi_dcmpge>
 8008216:	4603      	mov	r3, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	f000 80ec 	beq.w	80083f6 <scaraFLowScurve+0x63e>
 800821e:	f04f 0200 	mov.w	r2, #0
 8008222:	4b80      	ldr	r3, [pc, #512]	; (8008424 <scaraFLowScurve+0x66c>)
 8008224:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008228:	f7f8 f9e6 	bl	80005f8 <__aeabi_dmul>
 800822c:	4603      	mov	r3, r0
 800822e:	460c      	mov	r4, r1
 8008230:	461a      	mov	r2, r3
 8008232:	4623      	mov	r3, r4
 8008234:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008238:	f7f8 fc50 	bl	8000adc <__aeabi_dcmplt>
 800823c:	4603      	mov	r3, r0
 800823e:	2b00      	cmp	r3, #0
 8008240:	f000 80d9 	beq.w	80083f6 <scaraFLowScurve+0x63e>
			 t = time - 3*tm;
 8008244:	f04f 0200 	mov.w	r2, #0
 8008248:	4b75      	ldr	r3, [pc, #468]	; (8008420 <scaraFLowScurve+0x668>)
 800824a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800824e:	f7f8 f9d3 	bl	80005f8 <__aeabi_dmul>
 8008252:	4603      	mov	r3, r0
 8008254:	460c      	mov	r4, r1
 8008256:	461a      	mov	r2, r3
 8008258:	4623      	mov	r3, r4
 800825a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800825e:	f7f8 f813 	bl	8000288 <__aeabi_dsub>
 8008262:	4603      	mov	r3, r0
 8008264:	460c      	mov	r4, r1
 8008266:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current	=	-j_max*tm + j_max*t;
 800826a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800826c:	60bb      	str	r3, [r7, #8]
 800826e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008270:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008274:	60fb      	str	r3, [r7, #12]
 8008276:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800827a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800827e:	f7f8 f9bb 	bl	80005f8 <__aeabi_dmul>
 8008282:	4603      	mov	r3, r0
 8008284:	460c      	mov	r4, r1
 8008286:	4625      	mov	r5, r4
 8008288:	461c      	mov	r4, r3
 800828a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800828e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008292:	f7f8 f9b1 	bl	80005f8 <__aeabi_dmul>
 8008296:	4602      	mov	r2, r0
 8008298:	460b      	mov	r3, r1
 800829a:	4620      	mov	r0, r4
 800829c:	4629      	mov	r1, r5
 800829e:	f7f7 fff5 	bl	800028c <__adddf3>
 80082a2:	4603      	mov	r3, r0
 80082a4:	460c      	mov	r4, r1
 80082a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082a8:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_4 - j_max*tm*t + 0.5*j_max*t*t;
 80082ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ae:	e9d3 452a 	ldrd	r4, r5, [r3, #168]	; 0xa8
 80082b2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80082b6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80082ba:	f7f8 f99d 	bl	80005f8 <__aeabi_dmul>
 80082be:	4602      	mov	r2, r0
 80082c0:	460b      	mov	r3, r1
 80082c2:	4610      	mov	r0, r2
 80082c4:	4619      	mov	r1, r3
 80082c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80082ca:	f7f8 f995 	bl	80005f8 <__aeabi_dmul>
 80082ce:	4602      	mov	r2, r0
 80082d0:	460b      	mov	r3, r1
 80082d2:	4620      	mov	r0, r4
 80082d4:	4629      	mov	r1, r5
 80082d6:	f7f7 ffd7 	bl	8000288 <__aeabi_dsub>
 80082da:	4603      	mov	r3, r0
 80082dc:	460c      	mov	r4, r1
 80082de:	4625      	mov	r5, r4
 80082e0:	461c      	mov	r4, r3
 80082e2:	f04f 0200 	mov.w	r2, #0
 80082e6:	4b50      	ldr	r3, [pc, #320]	; (8008428 <scaraFLowScurve+0x670>)
 80082e8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80082ec:	f7f8 f984 	bl	80005f8 <__aeabi_dmul>
 80082f0:	4602      	mov	r2, r0
 80082f2:	460b      	mov	r3, r1
 80082f4:	4610      	mov	r0, r2
 80082f6:	4619      	mov	r1, r3
 80082f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80082fc:	f7f8 f97c 	bl	80005f8 <__aeabi_dmul>
 8008300:	4602      	mov	r2, r0
 8008302:	460b      	mov	r3, r1
 8008304:	4610      	mov	r0, r2
 8008306:	4619      	mov	r1, r3
 8008308:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800830c:	f7f8 f974 	bl	80005f8 <__aeabi_dmul>
 8008310:	4602      	mov	r2, r0
 8008312:	460b      	mov	r3, r1
 8008314:	4620      	mov	r0, r4
 8008316:	4629      	mov	r1, r5
 8008318:	f7f7 ffb8 	bl	800028c <__adddf3>
 800831c:	4603      	mov	r3, r0
 800831e:	460c      	mov	r4, r1
 8008320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008322:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t
 8008326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008328:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 800832c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832e:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 8008332:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008336:	f7f8 f95f 	bl	80005f8 <__aeabi_dmul>
 800833a:	4602      	mov	r2, r0
 800833c:	460b      	mov	r3, r1
 800833e:	4620      	mov	r0, r4
 8008340:	4629      	mov	r1, r5
 8008342:	f7f7 ffa3 	bl	800028c <__adddf3>
 8008346:	4603      	mov	r3, r0
 8008348:	460c      	mov	r4, r1
 800834a:	4625      	mov	r5, r4
 800834c:	461c      	mov	r4, r3
									- 0.5*j_max*tm*t*t
 800834e:	f04f 0200 	mov.w	r2, #0
 8008352:	4b35      	ldr	r3, [pc, #212]	; (8008428 <scaraFLowScurve+0x670>)
 8008354:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008358:	f7f8 f94e 	bl	80005f8 <__aeabi_dmul>
 800835c:	4602      	mov	r2, r0
 800835e:	460b      	mov	r3, r1
 8008360:	4610      	mov	r0, r2
 8008362:	4619      	mov	r1, r3
 8008364:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008368:	f7f8 f946 	bl	80005f8 <__aeabi_dmul>
 800836c:	4602      	mov	r2, r0
 800836e:	460b      	mov	r3, r1
 8008370:	4610      	mov	r0, r2
 8008372:	4619      	mov	r1, r3
 8008374:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008378:	f7f8 f93e 	bl	80005f8 <__aeabi_dmul>
 800837c:	4602      	mov	r2, r0
 800837e:	460b      	mov	r3, r1
 8008380:	4610      	mov	r0, r2
 8008382:	4619      	mov	r1, r3
 8008384:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008388:	f7f8 f936 	bl	80005f8 <__aeabi_dmul>
 800838c:	4602      	mov	r2, r0
 800838e:	460b      	mov	r3, r1
 8008390:	4620      	mov	r0, r4
 8008392:	4629      	mov	r1, r5
 8008394:	f7f7 ff78 	bl	8000288 <__aeabi_dsub>
 8008398:	4603      	mov	r3, r0
 800839a:	460c      	mov	r4, r1
 800839c:	4625      	mov	r5, r4
 800839e:	461c      	mov	r4, r3
									+ j_max*t*t*t/6;
 80083a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80083a4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80083a8:	f7f8 f926 	bl	80005f8 <__aeabi_dmul>
 80083ac:	4602      	mov	r2, r0
 80083ae:	460b      	mov	r3, r1
 80083b0:	4610      	mov	r0, r2
 80083b2:	4619      	mov	r1, r3
 80083b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80083b8:	f7f8 f91e 	bl	80005f8 <__aeabi_dmul>
 80083bc:	4602      	mov	r2, r0
 80083be:	460b      	mov	r3, r1
 80083c0:	4610      	mov	r0, r2
 80083c2:	4619      	mov	r1, r3
 80083c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80083c8:	f7f8 f916 	bl	80005f8 <__aeabi_dmul>
 80083cc:	4602      	mov	r2, r0
 80083ce:	460b      	mov	r3, r1
 80083d0:	4610      	mov	r0, r2
 80083d2:	4619      	mov	r1, r3
 80083d4:	f04f 0200 	mov.w	r2, #0
 80083d8:	4b14      	ldr	r3, [pc, #80]	; (800842c <scaraFLowScurve+0x674>)
 80083da:	f7f8 fa37 	bl	800084c <__aeabi_ddiv>
 80083de:	4602      	mov	r2, r0
 80083e0:	460b      	mov	r3, r1
 80083e2:	4620      	mov	r0, r4
 80083e4:	4629      	mov	r1, r5
 80083e6:	f7f7 ff51 	bl	800028c <__adddf3>
 80083ea:	4603      	mov	r3, r0
 80083ec:	460c      	mov	r4, r1
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t
 80083ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083f0:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 80083f4:	e3b6      	b.n	8008b64 <scaraFLowScurve+0xdac>
		 } else {
			 scurve->a_current = 0;
 80083f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083f8:	f04f 0300 	mov.w	r3, #0
 80083fc:	f04f 0400 	mov.w	r4, #0
 8008400:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current = 0;
 8008404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008406:	f04f 0300 	mov.w	r3, #0
 800840a:	f04f 0400 	mov.w	r4, #0
 800840e:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current = scurve->total_s;
 8008412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008414:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8008418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800841a:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 800841e:	e3a1      	b.n	8008b64 <scaraFLowScurve+0xdac>
 8008420:	40080000 	.word	0x40080000
 8008424:	40100000 	.word	0x40100000
 8008428:	3fe00000 	.word	0x3fe00000
 800842c:	40180000 	.word	0x40180000
		 }

	 // SCURVE 5 PHASE: tc > 0
	 } else if ( 5 == scurve->num_of_phase) {
 8008430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008432:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008436:	2b05      	cmp	r3, #5
 8008438:	f040 8392 	bne.w	8008b60 <scaraFLowScurve+0xda8>
		 // Phase 1
		 if ( (0 <= time) && ( time < tm)) {
 800843c:	f04f 0200 	mov.w	r2, #0
 8008440:	f04f 0300 	mov.w	r3, #0
 8008444:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008448:	f7f8 fb5c 	bl	8000b04 <__aeabi_dcmpge>
 800844c:	4603      	mov	r3, r0
 800844e:	2b00      	cmp	r3, #0
 8008450:	d058      	beq.n	8008504 <scaraFLowScurve+0x74c>
 8008452:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008456:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800845a:	f7f8 fb3f 	bl	8000adc <__aeabi_dcmplt>
 800845e:	4603      	mov	r3, r0
 8008460:	2b00      	cmp	r3, #0
 8008462:	d04f      	beq.n	8008504 <scaraFLowScurve+0x74c>
			 t = time;
 8008464:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8008468:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*t;
 800846c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008470:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008474:	f7f8 f8c0 	bl	80005f8 <__aeabi_dmul>
 8008478:	4603      	mov	r3, r0
 800847a:	460c      	mov	r4, r1
 800847c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800847e:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	= 	0.5*j_max*t*t;
 8008482:	f04f 0200 	mov.w	r2, #0
 8008486:	4b91      	ldr	r3, [pc, #580]	; (80086cc <scaraFLowScurve+0x914>)
 8008488:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800848c:	f7f8 f8b4 	bl	80005f8 <__aeabi_dmul>
 8008490:	4603      	mov	r3, r0
 8008492:	460c      	mov	r4, r1
 8008494:	4618      	mov	r0, r3
 8008496:	4621      	mov	r1, r4
 8008498:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800849c:	f7f8 f8ac 	bl	80005f8 <__aeabi_dmul>
 80084a0:	4603      	mov	r3, r0
 80084a2:	460c      	mov	r4, r1
 80084a4:	4618      	mov	r0, r3
 80084a6:	4621      	mov	r1, r4
 80084a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80084ac:	f7f8 f8a4 	bl	80005f8 <__aeabi_dmul>
 80084b0:	4603      	mov	r3, r0
 80084b2:	460c      	mov	r4, r1
 80084b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084b6:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	= 	j_max*t*t*t/6;
 80084ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80084be:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80084c2:	f7f8 f899 	bl	80005f8 <__aeabi_dmul>
 80084c6:	4603      	mov	r3, r0
 80084c8:	460c      	mov	r4, r1
 80084ca:	4618      	mov	r0, r3
 80084cc:	4621      	mov	r1, r4
 80084ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80084d2:	f7f8 f891 	bl	80005f8 <__aeabi_dmul>
 80084d6:	4603      	mov	r3, r0
 80084d8:	460c      	mov	r4, r1
 80084da:	4618      	mov	r0, r3
 80084dc:	4621      	mov	r1, r4
 80084de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80084e2:	f7f8 f889 	bl	80005f8 <__aeabi_dmul>
 80084e6:	4603      	mov	r3, r0
 80084e8:	460c      	mov	r4, r1
 80084ea:	4618      	mov	r0, r3
 80084ec:	4621      	mov	r1, r4
 80084ee:	f04f 0200 	mov.w	r2, #0
 80084f2:	4b77      	ldr	r3, [pc, #476]	; (80086d0 <scaraFLowScurve+0x918>)
 80084f4:	f7f8 f9aa 	bl	800084c <__aeabi_ddiv>
 80084f8:	4603      	mov	r3, r0
 80084fa:	460c      	mov	r4, r1
 80084fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084fe:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8008502:	e32f      	b.n	8008b64 <scaraFLowScurve+0xdac>
		 // Phase 2
		 } else if ( (tm <= time) && ( time < (2*tm) ) ) {
 8008504:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008508:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800850c:	f7f8 faf0 	bl	8000af0 <__aeabi_dcmple>
 8008510:	4603      	mov	r3, r0
 8008512:	2b00      	cmp	r3, #0
 8008514:	f000 80de 	beq.w	80086d4 <scaraFLowScurve+0x91c>
 8008518:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800851c:	4602      	mov	r2, r0
 800851e:	460b      	mov	r3, r1
 8008520:	f7f7 feb4 	bl	800028c <__adddf3>
 8008524:	4602      	mov	r2, r0
 8008526:	460b      	mov	r3, r1
 8008528:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800852c:	f7f8 fad6 	bl	8000adc <__aeabi_dcmplt>
 8008530:	4603      	mov	r3, r0
 8008532:	2b00      	cmp	r3, #0
 8008534:	f000 80ce 	beq.w	80086d4 <scaraFLowScurve+0x91c>
			 t = time - tm;
 8008538:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800853c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008540:	f7f7 fea2 	bl	8000288 <__aeabi_dsub>
 8008544:	4603      	mov	r3, r0
 8008546:	460c      	mov	r4, r1
 8008548:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	= 	j_max*tm - j_max*t;
 800854c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008550:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008554:	f7f8 f850 	bl	80005f8 <__aeabi_dmul>
 8008558:	4603      	mov	r3, r0
 800855a:	460c      	mov	r4, r1
 800855c:	4625      	mov	r5, r4
 800855e:	461c      	mov	r4, r3
 8008560:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008564:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008568:	f7f8 f846 	bl	80005f8 <__aeabi_dmul>
 800856c:	4602      	mov	r2, r0
 800856e:	460b      	mov	r3, r1
 8008570:	4620      	mov	r0, r4
 8008572:	4629      	mov	r1, r5
 8008574:	f7f7 fe88 	bl	8000288 <__aeabi_dsub>
 8008578:	4603      	mov	r3, r0
 800857a:	460c      	mov	r4, r1
 800857c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800857e:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current 	= 	scurve->v_1 + j_max*tm*t - 0.5*j_max*t*t;
 8008582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008584:	e9d3 451e 	ldrd	r4, r5, [r3, #120]	; 0x78
 8008588:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800858c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008590:	f7f8 f832 	bl	80005f8 <__aeabi_dmul>
 8008594:	4602      	mov	r2, r0
 8008596:	460b      	mov	r3, r1
 8008598:	4610      	mov	r0, r2
 800859a:	4619      	mov	r1, r3
 800859c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80085a0:	f7f8 f82a 	bl	80005f8 <__aeabi_dmul>
 80085a4:	4602      	mov	r2, r0
 80085a6:	460b      	mov	r3, r1
 80085a8:	4620      	mov	r0, r4
 80085aa:	4629      	mov	r1, r5
 80085ac:	f7f7 fe6e 	bl	800028c <__adddf3>
 80085b0:	4603      	mov	r3, r0
 80085b2:	460c      	mov	r4, r1
 80085b4:	4625      	mov	r5, r4
 80085b6:	461c      	mov	r4, r3
 80085b8:	f04f 0200 	mov.w	r2, #0
 80085bc:	4b43      	ldr	r3, [pc, #268]	; (80086cc <scaraFLowScurve+0x914>)
 80085be:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80085c2:	f7f8 f819 	bl	80005f8 <__aeabi_dmul>
 80085c6:	4602      	mov	r2, r0
 80085c8:	460b      	mov	r3, r1
 80085ca:	4610      	mov	r0, r2
 80085cc:	4619      	mov	r1, r3
 80085ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80085d2:	f7f8 f811 	bl	80005f8 <__aeabi_dmul>
 80085d6:	4602      	mov	r2, r0
 80085d8:	460b      	mov	r3, r1
 80085da:	4610      	mov	r0, r2
 80085dc:	4619      	mov	r1, r3
 80085de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80085e2:	f7f8 f809 	bl	80005f8 <__aeabi_dmul>
 80085e6:	4602      	mov	r2, r0
 80085e8:	460b      	mov	r3, r1
 80085ea:	4620      	mov	r0, r4
 80085ec:	4629      	mov	r1, r5
 80085ee:	f7f7 fe4b 	bl	8000288 <__aeabi_dsub>
 80085f2:	4603      	mov	r3, r0
 80085f4:	460c      	mov	r4, r1
 80085f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085f8:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current 	=	scurve->s_1 + scurve->v_1*t + 0.5*j_max*tm*t*t - j_max*t*t*t/6;
 80085fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fe:	e9d3 4520 	ldrd	r4, r5, [r3, #128]	; 0x80
 8008602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008604:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8008608:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800860c:	f7f7 fff4 	bl	80005f8 <__aeabi_dmul>
 8008610:	4602      	mov	r2, r0
 8008612:	460b      	mov	r3, r1
 8008614:	4620      	mov	r0, r4
 8008616:	4629      	mov	r1, r5
 8008618:	f7f7 fe38 	bl	800028c <__adddf3>
 800861c:	4603      	mov	r3, r0
 800861e:	460c      	mov	r4, r1
 8008620:	4625      	mov	r5, r4
 8008622:	461c      	mov	r4, r3
 8008624:	f04f 0200 	mov.w	r2, #0
 8008628:	4b28      	ldr	r3, [pc, #160]	; (80086cc <scaraFLowScurve+0x914>)
 800862a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800862e:	f7f7 ffe3 	bl	80005f8 <__aeabi_dmul>
 8008632:	4602      	mov	r2, r0
 8008634:	460b      	mov	r3, r1
 8008636:	4610      	mov	r0, r2
 8008638:	4619      	mov	r1, r3
 800863a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800863e:	f7f7 ffdb 	bl	80005f8 <__aeabi_dmul>
 8008642:	4602      	mov	r2, r0
 8008644:	460b      	mov	r3, r1
 8008646:	4610      	mov	r0, r2
 8008648:	4619      	mov	r1, r3
 800864a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800864e:	f7f7 ffd3 	bl	80005f8 <__aeabi_dmul>
 8008652:	4602      	mov	r2, r0
 8008654:	460b      	mov	r3, r1
 8008656:	4610      	mov	r0, r2
 8008658:	4619      	mov	r1, r3
 800865a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800865e:	f7f7 ffcb 	bl	80005f8 <__aeabi_dmul>
 8008662:	4602      	mov	r2, r0
 8008664:	460b      	mov	r3, r1
 8008666:	4620      	mov	r0, r4
 8008668:	4629      	mov	r1, r5
 800866a:	f7f7 fe0f 	bl	800028c <__adddf3>
 800866e:	4603      	mov	r3, r0
 8008670:	460c      	mov	r4, r1
 8008672:	4625      	mov	r5, r4
 8008674:	461c      	mov	r4, r3
 8008676:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800867a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800867e:	f7f7 ffbb 	bl	80005f8 <__aeabi_dmul>
 8008682:	4602      	mov	r2, r0
 8008684:	460b      	mov	r3, r1
 8008686:	4610      	mov	r0, r2
 8008688:	4619      	mov	r1, r3
 800868a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800868e:	f7f7 ffb3 	bl	80005f8 <__aeabi_dmul>
 8008692:	4602      	mov	r2, r0
 8008694:	460b      	mov	r3, r1
 8008696:	4610      	mov	r0, r2
 8008698:	4619      	mov	r1, r3
 800869a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800869e:	f7f7 ffab 	bl	80005f8 <__aeabi_dmul>
 80086a2:	4602      	mov	r2, r0
 80086a4:	460b      	mov	r3, r1
 80086a6:	4610      	mov	r0, r2
 80086a8:	4619      	mov	r1, r3
 80086aa:	f04f 0200 	mov.w	r2, #0
 80086ae:	4b08      	ldr	r3, [pc, #32]	; (80086d0 <scaraFLowScurve+0x918>)
 80086b0:	f7f8 f8cc 	bl	800084c <__aeabi_ddiv>
 80086b4:	4602      	mov	r2, r0
 80086b6:	460b      	mov	r3, r1
 80086b8:	4620      	mov	r0, r4
 80086ba:	4629      	mov	r1, r5
 80086bc:	f7f7 fde4 	bl	8000288 <__aeabi_dsub>
 80086c0:	4603      	mov	r3, r0
 80086c2:	460c      	mov	r4, r1
 80086c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086c6:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 80086ca:	e24b      	b.n	8008b64 <scaraFLowScurve+0xdac>
 80086cc:	3fe00000 	.word	0x3fe00000
 80086d0:	40180000 	.word	0x40180000
		 // Phase 3
		 } else if ( ((2*tm) <= time) && ( time < (2*tm + tc)) ) {
 80086d4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80086d8:	4602      	mov	r2, r0
 80086da:	460b      	mov	r3, r1
 80086dc:	f7f7 fdd6 	bl	800028c <__adddf3>
 80086e0:	4602      	mov	r2, r0
 80086e2:	460b      	mov	r3, r1
 80086e4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80086e8:	f7f8 fa0c 	bl	8000b04 <__aeabi_dcmpge>
 80086ec:	4603      	mov	r3, r0
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d04b      	beq.n	800878a <scaraFLowScurve+0x9d2>
 80086f2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80086f6:	4602      	mov	r2, r0
 80086f8:	460b      	mov	r3, r1
 80086fa:	f7f7 fdc7 	bl	800028c <__adddf3>
 80086fe:	4602      	mov	r2, r0
 8008700:	460b      	mov	r3, r1
 8008702:	4610      	mov	r0, r2
 8008704:	4619      	mov	r1, r3
 8008706:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800870a:	f7f7 fdbf 	bl	800028c <__adddf3>
 800870e:	4602      	mov	r2, r0
 8008710:	460b      	mov	r3, r1
 8008712:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008716:	f7f8 f9e1 	bl	8000adc <__aeabi_dcmplt>
 800871a:	4603      	mov	r3, r0
 800871c:	2b00      	cmp	r3, #0
 800871e:	d034      	beq.n	800878a <scaraFLowScurve+0x9d2>
			 t = time - 2*tm;
 8008720:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008724:	4602      	mov	r2, r0
 8008726:	460b      	mov	r3, r1
 8008728:	f7f7 fdb0 	bl	800028c <__adddf3>
 800872c:	4603      	mov	r3, r0
 800872e:	460c      	mov	r4, r1
 8008730:	461a      	mov	r2, r3
 8008732:	4623      	mov	r3, r4
 8008734:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008738:	f7f7 fda6 	bl	8000288 <__aeabi_dsub>
 800873c:	4603      	mov	r3, r0
 800873e:	460c      	mov	r4, r1
 8008740:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	=	0;
 8008744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008746:	f04f 0300 	mov.w	r3, #0
 800874a:	f04f 0400 	mov.w	r4, #0
 800874e:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_2;
 8008752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008754:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 8008758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800875a:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_2 + scurve->v_2*t;
 800875e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008760:	e9d3 4524 	ldrd	r4, r5, [r3, #144]	; 0x90
 8008764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008766:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 800876a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800876e:	f7f7 ff43 	bl	80005f8 <__aeabi_dmul>
 8008772:	4602      	mov	r2, r0
 8008774:	460b      	mov	r3, r1
 8008776:	4620      	mov	r0, r4
 8008778:	4629      	mov	r1, r5
 800877a:	f7f7 fd87 	bl	800028c <__adddf3>
 800877e:	4603      	mov	r3, r0
 8008780:	460c      	mov	r4, r1
 8008782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008784:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8008788:	e1ec      	b.n	8008b64 <scaraFLowScurve+0xdac>
		 // Phase 4
		 } else if ( ((2*tm + tc) <= time) && ( time < (3*tm + tc)) ) {
 800878a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800878e:	4602      	mov	r2, r0
 8008790:	460b      	mov	r3, r1
 8008792:	f7f7 fd7b 	bl	800028c <__adddf3>
 8008796:	4602      	mov	r2, r0
 8008798:	460b      	mov	r3, r1
 800879a:	4610      	mov	r0, r2
 800879c:	4619      	mov	r1, r3
 800879e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80087a2:	f7f7 fd73 	bl	800028c <__adddf3>
 80087a6:	4602      	mov	r2, r0
 80087a8:	460b      	mov	r3, r1
 80087aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80087ae:	f7f8 f9a9 	bl	8000b04 <__aeabi_dcmpge>
 80087b2:	4603      	mov	r3, r0
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	f000 80af 	beq.w	8008918 <scaraFLowScurve+0xb60>
 80087ba:	f04f 0200 	mov.w	r2, #0
 80087be:	4b53      	ldr	r3, [pc, #332]	; (800890c <scaraFLowScurve+0xb54>)
 80087c0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80087c4:	f7f7 ff18 	bl	80005f8 <__aeabi_dmul>
 80087c8:	4602      	mov	r2, r0
 80087ca:	460b      	mov	r3, r1
 80087cc:	4610      	mov	r0, r2
 80087ce:	4619      	mov	r1, r3
 80087d0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80087d4:	f7f7 fd5a 	bl	800028c <__adddf3>
 80087d8:	4602      	mov	r2, r0
 80087da:	460b      	mov	r3, r1
 80087dc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80087e0:	f7f8 f97c 	bl	8000adc <__aeabi_dcmplt>
 80087e4:	4603      	mov	r3, r0
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	f000 8096 	beq.w	8008918 <scaraFLowScurve+0xb60>
			 t = time - (2*tm + tc);
 80087ec:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80087f0:	4602      	mov	r2, r0
 80087f2:	460b      	mov	r3, r1
 80087f4:	f7f7 fd4a 	bl	800028c <__adddf3>
 80087f8:	4603      	mov	r3, r0
 80087fa:	460c      	mov	r4, r1
 80087fc:	4618      	mov	r0, r3
 80087fe:	4621      	mov	r1, r4
 8008800:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008804:	f7f7 fd42 	bl	800028c <__adddf3>
 8008808:	4603      	mov	r3, r0
 800880a:	460c      	mov	r4, r1
 800880c:	461a      	mov	r2, r3
 800880e:	4623      	mov	r3, r4
 8008810:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008814:	f7f7 fd38 	bl	8000288 <__aeabi_dsub>
 8008818:	4603      	mov	r3, r0
 800881a:	460c      	mov	r4, r1
 800881c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
			 scurve->a_current 	=	-j_max*t;
 8008820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008822:	603b      	str	r3, [r7, #0]
 8008824:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008826:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800882a:	607b      	str	r3, [r7, #4]
 800882c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008830:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008834:	f7f7 fee0 	bl	80005f8 <__aeabi_dmul>
 8008838:	4603      	mov	r3, r0
 800883a:	460c      	mov	r4, r1
 800883c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800883e:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_3 - 0.5*j_max*t*t;
 8008842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008844:	e9d3 4526 	ldrd	r4, r5, [r3, #152]	; 0x98
 8008848:	f04f 0200 	mov.w	r2, #0
 800884c:	4b30      	ldr	r3, [pc, #192]	; (8008910 <scaraFLowScurve+0xb58>)
 800884e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008852:	f7f7 fed1 	bl	80005f8 <__aeabi_dmul>
 8008856:	4602      	mov	r2, r0
 8008858:	460b      	mov	r3, r1
 800885a:	4610      	mov	r0, r2
 800885c:	4619      	mov	r1, r3
 800885e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008862:	f7f7 fec9 	bl	80005f8 <__aeabi_dmul>
 8008866:	4602      	mov	r2, r0
 8008868:	460b      	mov	r3, r1
 800886a:	4610      	mov	r0, r2
 800886c:	4619      	mov	r1, r3
 800886e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008872:	f7f7 fec1 	bl	80005f8 <__aeabi_dmul>
 8008876:	4602      	mov	r2, r0
 8008878:	460b      	mov	r3, r1
 800887a:	4620      	mov	r0, r4
 800887c:	4629      	mov	r1, r5
 800887e:	f7f7 fd03 	bl	8000288 <__aeabi_dsub>
 8008882:	4603      	mov	r3, r0
 8008884:	460c      	mov	r4, r1
 8008886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008888:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_3 + scurve->v_3*t - j_max*t*t*t/6;
 800888c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888e:	e9d3 4528 	ldrd	r4, r5, [r3, #160]	; 0xa0
 8008892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008894:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 8008898:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800889c:	f7f7 feac 	bl	80005f8 <__aeabi_dmul>
 80088a0:	4602      	mov	r2, r0
 80088a2:	460b      	mov	r3, r1
 80088a4:	4620      	mov	r0, r4
 80088a6:	4629      	mov	r1, r5
 80088a8:	f7f7 fcf0 	bl	800028c <__adddf3>
 80088ac:	4603      	mov	r3, r0
 80088ae:	460c      	mov	r4, r1
 80088b0:	4625      	mov	r5, r4
 80088b2:	461c      	mov	r4, r3
 80088b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80088b8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80088bc:	f7f7 fe9c 	bl	80005f8 <__aeabi_dmul>
 80088c0:	4602      	mov	r2, r0
 80088c2:	460b      	mov	r3, r1
 80088c4:	4610      	mov	r0, r2
 80088c6:	4619      	mov	r1, r3
 80088c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80088cc:	f7f7 fe94 	bl	80005f8 <__aeabi_dmul>
 80088d0:	4602      	mov	r2, r0
 80088d2:	460b      	mov	r3, r1
 80088d4:	4610      	mov	r0, r2
 80088d6:	4619      	mov	r1, r3
 80088d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80088dc:	f7f7 fe8c 	bl	80005f8 <__aeabi_dmul>
 80088e0:	4602      	mov	r2, r0
 80088e2:	460b      	mov	r3, r1
 80088e4:	4610      	mov	r0, r2
 80088e6:	4619      	mov	r1, r3
 80088e8:	f04f 0200 	mov.w	r2, #0
 80088ec:	4b09      	ldr	r3, [pc, #36]	; (8008914 <scaraFLowScurve+0xb5c>)
 80088ee:	f7f7 ffad 	bl	800084c <__aeabi_ddiv>
 80088f2:	4602      	mov	r2, r0
 80088f4:	460b      	mov	r3, r1
 80088f6:	4620      	mov	r0, r4
 80088f8:	4629      	mov	r1, r5
 80088fa:	f7f7 fcc5 	bl	8000288 <__aeabi_dsub>
 80088fe:	4603      	mov	r3, r0
 8008900:	460c      	mov	r4, r1
 8008902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008904:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8008908:	e12c      	b.n	8008b64 <scaraFLowScurve+0xdac>
 800890a:	bf00      	nop
 800890c:	40080000 	.word	0x40080000
 8008910:	3fe00000 	.word	0x3fe00000
 8008914:	40180000 	.word	0x40180000
		 // Phase 5
		 } else if ( ((3*tm + tc) <= time) && ( time < (4*tm + tc)) ) {
 8008918:	f04f 0200 	mov.w	r2, #0
 800891c:	4b94      	ldr	r3, [pc, #592]	; (8008b70 <scaraFLowScurve+0xdb8>)
 800891e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008922:	f7f7 fe69 	bl	80005f8 <__aeabi_dmul>
 8008926:	4602      	mov	r2, r0
 8008928:	460b      	mov	r3, r1
 800892a:	4610      	mov	r0, r2
 800892c:	4619      	mov	r1, r3
 800892e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008932:	f7f7 fcab 	bl	800028c <__adddf3>
 8008936:	4602      	mov	r2, r0
 8008938:	460b      	mov	r3, r1
 800893a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800893e:	f7f8 f8e1 	bl	8000b04 <__aeabi_dcmpge>
 8008942:	4603      	mov	r3, r0
 8008944:	2b00      	cmp	r3, #0
 8008946:	f000 80f6 	beq.w	8008b36 <scaraFLowScurve+0xd7e>
 800894a:	f04f 0200 	mov.w	r2, #0
 800894e:	4b89      	ldr	r3, [pc, #548]	; (8008b74 <scaraFLowScurve+0xdbc>)
 8008950:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008954:	f7f7 fe50 	bl	80005f8 <__aeabi_dmul>
 8008958:	4602      	mov	r2, r0
 800895a:	460b      	mov	r3, r1
 800895c:	4610      	mov	r0, r2
 800895e:	4619      	mov	r1, r3
 8008960:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008964:	f7f7 fc92 	bl	800028c <__adddf3>
 8008968:	4602      	mov	r2, r0
 800896a:	460b      	mov	r3, r1
 800896c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008970:	f7f8 f8b4 	bl	8000adc <__aeabi_dcmplt>
 8008974:	4603      	mov	r3, r0
 8008976:	2b00      	cmp	r3, #0
 8008978:	f000 80dd 	beq.w	8008b36 <scaraFLowScurve+0xd7e>
			 t = time - (3*tm + tc);
 800897c:	f04f 0200 	mov.w	r2, #0
 8008980:	4b7b      	ldr	r3, [pc, #492]	; (8008b70 <scaraFLowScurve+0xdb8>)
 8008982:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008986:	f7f7 fe37 	bl	80005f8 <__aeabi_dmul>
 800898a:	4602      	mov	r2, r0
 800898c:	460b      	mov	r3, r1
 800898e:	4610      	mov	r0, r2
 8008990:	4619      	mov	r1, r3
 8008992:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008996:	f7f7 fc79 	bl	800028c <__adddf3>
 800899a:	4602      	mov	r2, r0
 800899c:	460b      	mov	r3, r1
 800899e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80089a2:	f7f7 fc71 	bl	8000288 <__aeabi_dsub>
 80089a6:	4602      	mov	r2, r0
 80089a8:	460b      	mov	r3, r1
 80089aa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			 scurve->a_current	=	-j_max*tm + j_max*t;
 80089ae:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 80089b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089b2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80089b6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80089ba:	4620      	mov	r0, r4
 80089bc:	4629      	mov	r1, r5
 80089be:	f7f7 fe1b 	bl	80005f8 <__aeabi_dmul>
 80089c2:	4603      	mov	r3, r0
 80089c4:	460c      	mov	r4, r1
 80089c6:	4625      	mov	r5, r4
 80089c8:	461c      	mov	r4, r3
 80089ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80089ce:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80089d2:	f7f7 fe11 	bl	80005f8 <__aeabi_dmul>
 80089d6:	4602      	mov	r2, r0
 80089d8:	460b      	mov	r3, r1
 80089da:	4620      	mov	r0, r4
 80089dc:	4629      	mov	r1, r5
 80089de:	f7f7 fc55 	bl	800028c <__adddf3>
 80089e2:	4603      	mov	r3, r0
 80089e4:	460c      	mov	r4, r1
 80089e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089e8:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current	=	scurve->v_4 - j_max*tm*t + 0.5*j_max*t*t;
 80089ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ee:	e9d3 452a 	ldrd	r4, r5, [r3, #168]	; 0xa8
 80089f2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80089f6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80089fa:	f7f7 fdfd 	bl	80005f8 <__aeabi_dmul>
 80089fe:	4602      	mov	r2, r0
 8008a00:	460b      	mov	r3, r1
 8008a02:	4610      	mov	r0, r2
 8008a04:	4619      	mov	r1, r3
 8008a06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008a0a:	f7f7 fdf5 	bl	80005f8 <__aeabi_dmul>
 8008a0e:	4602      	mov	r2, r0
 8008a10:	460b      	mov	r3, r1
 8008a12:	4620      	mov	r0, r4
 8008a14:	4629      	mov	r1, r5
 8008a16:	f7f7 fc37 	bl	8000288 <__aeabi_dsub>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	460c      	mov	r4, r1
 8008a1e:	4625      	mov	r5, r4
 8008a20:	461c      	mov	r4, r3
 8008a22:	f04f 0200 	mov.w	r2, #0
 8008a26:	4b54      	ldr	r3, [pc, #336]	; (8008b78 <scaraFLowScurve+0xdc0>)
 8008a28:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008a2c:	f7f7 fde4 	bl	80005f8 <__aeabi_dmul>
 8008a30:	4602      	mov	r2, r0
 8008a32:	460b      	mov	r3, r1
 8008a34:	4610      	mov	r0, r2
 8008a36:	4619      	mov	r1, r3
 8008a38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008a3c:	f7f7 fddc 	bl	80005f8 <__aeabi_dmul>
 8008a40:	4602      	mov	r2, r0
 8008a42:	460b      	mov	r3, r1
 8008a44:	4610      	mov	r0, r2
 8008a46:	4619      	mov	r1, r3
 8008a48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008a4c:	f7f7 fdd4 	bl	80005f8 <__aeabi_dmul>
 8008a50:	4602      	mov	r2, r0
 8008a52:	460b      	mov	r3, r1
 8008a54:	4620      	mov	r0, r4
 8008a56:	4629      	mov	r1, r5
 8008a58:	f7f7 fc18 	bl	800028c <__adddf3>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	460c      	mov	r4, r1
 8008a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a62:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current	=	scurve->s_4 + scurve->v_4*t - 0.5*j_max*tm*t*t + j_max*t*t*t/6;
 8008a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a68:	e9d3 452c 	ldrd	r4, r5, [r3, #176]	; 0xb0
 8008a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6e:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 8008a72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008a76:	f7f7 fdbf 	bl	80005f8 <__aeabi_dmul>
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	460b      	mov	r3, r1
 8008a7e:	4620      	mov	r0, r4
 8008a80:	4629      	mov	r1, r5
 8008a82:	f7f7 fc03 	bl	800028c <__adddf3>
 8008a86:	4603      	mov	r3, r0
 8008a88:	460c      	mov	r4, r1
 8008a8a:	4625      	mov	r5, r4
 8008a8c:	461c      	mov	r4, r3
 8008a8e:	f04f 0200 	mov.w	r2, #0
 8008a92:	4b39      	ldr	r3, [pc, #228]	; (8008b78 <scaraFLowScurve+0xdc0>)
 8008a94:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008a98:	f7f7 fdae 	bl	80005f8 <__aeabi_dmul>
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	460b      	mov	r3, r1
 8008aa0:	4610      	mov	r0, r2
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008aa8:	f7f7 fda6 	bl	80005f8 <__aeabi_dmul>
 8008aac:	4602      	mov	r2, r0
 8008aae:	460b      	mov	r3, r1
 8008ab0:	4610      	mov	r0, r2
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008ab8:	f7f7 fd9e 	bl	80005f8 <__aeabi_dmul>
 8008abc:	4602      	mov	r2, r0
 8008abe:	460b      	mov	r3, r1
 8008ac0:	4610      	mov	r0, r2
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008ac8:	f7f7 fd96 	bl	80005f8 <__aeabi_dmul>
 8008acc:	4602      	mov	r2, r0
 8008ace:	460b      	mov	r3, r1
 8008ad0:	4620      	mov	r0, r4
 8008ad2:	4629      	mov	r1, r5
 8008ad4:	f7f7 fbd8 	bl	8000288 <__aeabi_dsub>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	460c      	mov	r4, r1
 8008adc:	4625      	mov	r5, r4
 8008ade:	461c      	mov	r4, r3
 8008ae0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008ae4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008ae8:	f7f7 fd86 	bl	80005f8 <__aeabi_dmul>
 8008aec:	4602      	mov	r2, r0
 8008aee:	460b      	mov	r3, r1
 8008af0:	4610      	mov	r0, r2
 8008af2:	4619      	mov	r1, r3
 8008af4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008af8:	f7f7 fd7e 	bl	80005f8 <__aeabi_dmul>
 8008afc:	4602      	mov	r2, r0
 8008afe:	460b      	mov	r3, r1
 8008b00:	4610      	mov	r0, r2
 8008b02:	4619      	mov	r1, r3
 8008b04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008b08:	f7f7 fd76 	bl	80005f8 <__aeabi_dmul>
 8008b0c:	4602      	mov	r2, r0
 8008b0e:	460b      	mov	r3, r1
 8008b10:	4610      	mov	r0, r2
 8008b12:	4619      	mov	r1, r3
 8008b14:	f04f 0200 	mov.w	r2, #0
 8008b18:	4b18      	ldr	r3, [pc, #96]	; (8008b7c <scaraFLowScurve+0xdc4>)
 8008b1a:	f7f7 fe97 	bl	800084c <__aeabi_ddiv>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	460b      	mov	r3, r1
 8008b22:	4620      	mov	r0, r4
 8008b24:	4629      	mov	r1, r5
 8008b26:	f7f7 fbb1 	bl	800028c <__adddf3>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	460c      	mov	r4, r1
 8008b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b30:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8008b34:	e016      	b.n	8008b64 <scaraFLowScurve+0xdac>
		 } else {
			 scurve->a_current = 0;
 8008b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b38:	f04f 0300 	mov.w	r3, #0
 8008b3c:	f04f 0400 	mov.w	r4, #0
 8008b40:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
			 scurve->v_current = 0;
 8008b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b46:	f04f 0300 	mov.w	r3, #0
 8008b4a:	f04f 0400 	mov.w	r4, #0
 8008b4e:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
			 scurve->s_current = scurve->total_s;
 8008b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b54:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 8008b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b5a:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
 8008b5e:	e001      	b.n	8008b64 <scaraFLowScurve+0xdac>
		 }

	 } else {
		 return SCARA_STATUS_ERROR;
 8008b60:	2301      	movs	r3, #1
 8008b62:	e000      	b.n	8008b66 <scaraFLowScurve+0xdae>
	 }

	 return SCARA_STATUS_OK;
 8008b64:	2300      	movs	r3, #0
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3748      	adds	r7, #72	; 0x48
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bdb0      	pop	{r4, r5, r7, pc}
 8008b6e:	bf00      	nop
 8008b70:	40080000 	.word	0x40080000
 8008b74:	40100000 	.word	0x40100000
 8008b78:	3fe00000 	.word	0x3fe00000
 8008b7c:	40180000 	.word	0x40180000

08008b80 <scaraCheckWorkSpace4>:

/* Check limit 4 joint variable */
SCARA_StatusTypeDef	scaraCheckWorkSpace4 (double theta1, double theta2, double d3, double theta4) {
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b088      	sub	sp, #32
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	ed87 0b06 	vstr	d0, [r7, #24]
 8008b8a:	ed87 1b04 	vstr	d1, [r7, #16]
 8008b8e:	ed87 2b02 	vstr	d2, [r7, #8]
 8008b92:	ed87 3b00 	vstr	d3, [r7]
	// check theta 1
	if ( theta1 < LIM_MIN_J0 || theta1 > LIM_MAX_J0) {
 8008b96:	a334      	add	r3, pc, #208	; (adr r3, 8008c68 <scaraCheckWorkSpace4+0xe8>)
 8008b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b9c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008ba0:	f7f7 ff9c 	bl	8000adc <__aeabi_dcmplt>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d109      	bne.n	8008bbe <scaraCheckWorkSpace4+0x3e>
 8008baa:	a331      	add	r3, pc, #196	; (adr r3, 8008c70 <scaraCheckWorkSpace4+0xf0>)
 8008bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008bb4:	f7f7 ffb0 	bl	8000b18 <__aeabi_dcmpgt>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d001      	beq.n	8008bc2 <scaraCheckWorkSpace4+0x42>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008bbe:	2307      	movs	r3, #7
 8008bc0:	e042      	b.n	8008c48 <scaraCheckWorkSpace4+0xc8>
	}
	// check theta 2
	if ( theta2 < LIM_MIN_J1 || theta2 > LIM_MAX_J1) {
 8008bc2:	a32d      	add	r3, pc, #180	; (adr r3, 8008c78 <scaraCheckWorkSpace4+0xf8>)
 8008bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008bcc:	f7f7 ff86 	bl	8000adc <__aeabi_dcmplt>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d109      	bne.n	8008bea <scaraCheckWorkSpace4+0x6a>
 8008bd6:	a32a      	add	r3, pc, #168	; (adr r3, 8008c80 <scaraCheckWorkSpace4+0x100>)
 8008bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bdc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008be0:	f7f7 ff9a 	bl	8000b18 <__aeabi_dcmpgt>
 8008be4:	4603      	mov	r3, r0
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d001      	beq.n	8008bee <scaraCheckWorkSpace4+0x6e>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008bea:	2307      	movs	r3, #7
 8008bec:	e02c      	b.n	8008c48 <scaraCheckWorkSpace4+0xc8>
	}
	// check d 3
	if ( d3 < LIM_MIN_J2 || d3 > LIM_MAX_J2) {
 8008bee:	f04f 0200 	mov.w	r2, #0
 8008bf2:	4b1b      	ldr	r3, [pc, #108]	; (8008c60 <scaraCheckWorkSpace4+0xe0>)
 8008bf4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008bf8:	f7f7 ff70 	bl	8000adc <__aeabi_dcmplt>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d109      	bne.n	8008c16 <scaraCheckWorkSpace4+0x96>
 8008c02:	f04f 0200 	mov.w	r2, #0
 8008c06:	4b17      	ldr	r3, [pc, #92]	; (8008c64 <scaraCheckWorkSpace4+0xe4>)
 8008c08:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008c0c:	f7f7 ff84 	bl	8000b18 <__aeabi_dcmpgt>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d001      	beq.n	8008c1a <scaraCheckWorkSpace4+0x9a>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008c16:	2307      	movs	r3, #7
 8008c18:	e016      	b.n	8008c48 <scaraCheckWorkSpace4+0xc8>
	}
	// check theta 4
	if ( theta4 < LIM_MIN_J3 || theta4 > LIM_MAX_J3) {
 8008c1a:	a30d      	add	r3, pc, #52	; (adr r3, 8008c50 <scaraCheckWorkSpace4+0xd0>)
 8008c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c24:	f7f7 ff5a 	bl	8000adc <__aeabi_dcmplt>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d109      	bne.n	8008c42 <scaraCheckWorkSpace4+0xc2>
 8008c2e:	a30a      	add	r3, pc, #40	; (adr r3, 8008c58 <scaraCheckWorkSpace4+0xd8>)
 8008c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c38:	f7f7 ff6e 	bl	8000b18 <__aeabi_dcmpgt>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d001      	beq.n	8008c46 <scaraCheckWorkSpace4+0xc6>
		return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008c42:	2307      	movs	r3, #7
 8008c44:	e000      	b.n	8008c48 <scaraCheckWorkSpace4+0xc8>
	}
	return SCARA_STATUS_OK;
 8008c46:	2300      	movs	r3, #0
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3720      	adds	r7, #32
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}
 8008c50:	daaaaaab 	.word	0xdaaaaaab
 8008c54:	c007bc89 	.word	0xc007bc89
 8008c58:	daaaaaab 	.word	0xdaaaaaab
 8008c5c:	4007bc89 	.word	0x4007bc89
 8008c60:	3ff00000 	.word	0x3ff00000
 8008c64:	40590000 	.word	0x40590000
 8008c68:	daaaaaab 	.word	0xdaaaaaab
 8008c6c:	bff7bc89 	.word	0xbff7bc89
 8008c70:	daaaaaab 	.word	0xdaaaaaab
 8008c74:	3ff7bc89 	.word	0x3ff7bc89
 8008c78:	88000000 	.word	0x88000000
 8008c7c:	c002d97c 	.word	0xc002d97c
 8008c80:	88000000 	.word	0x88000000
 8008c84:	4002d97c 	.word	0x4002d97c

08008c88 <scaraCheckWorkSpace1>:

/* Check limit 1 joint variable */
SCARA_StatusTypeDef	scaraCheckWorkSpace1 (Trajectory_TargetTypeDef target, double value) {
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b084      	sub	sp, #16
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	4603      	mov	r3, r0
 8008c90:	ed87 0b00 	vstr	d0, [r7]
 8008c94:	73fb      	strb	r3, [r7, #15]
	if ( TRAJECTORY_J0 == target) {
 8008c96:	7bfb      	ldrb	r3, [r7, #15]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d117      	bne.n	8008ccc <scaraCheckWorkSpace1+0x44>
		if ( (LIM_MIN_J0 <= value) && ( value <= LIM_MAX_J0)) {
 8008c9c:	a33c      	add	r3, pc, #240	; (adr r3, 8008d90 <scaraCheckWorkSpace1+0x108>)
 8008c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ca6:	f7f7 ff2d 	bl	8000b04 <__aeabi_dcmpge>
 8008caa:	4603      	mov	r3, r0
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d00b      	beq.n	8008cc8 <scaraCheckWorkSpace1+0x40>
 8008cb0:	a339      	add	r3, pc, #228	; (adr r3, 8008d98 <scaraCheckWorkSpace1+0x110>)
 8008cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008cba:	f7f7 ff19 	bl	8000af0 <__aeabi_dcmple>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d001      	beq.n	8008cc8 <scaraCheckWorkSpace1+0x40>
			return SCARA_STATUS_OK;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	e053      	b.n	8008d70 <scaraCheckWorkSpace1+0xe8>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008cc8:	2307      	movs	r3, #7
 8008cca:	e051      	b.n	8008d70 <scaraCheckWorkSpace1+0xe8>
		}
	} else if (TRAJECTORY_J1 == target) {
 8008ccc:	7bfb      	ldrb	r3, [r7, #15]
 8008cce:	2b01      	cmp	r3, #1
 8008cd0:	d117      	bne.n	8008d02 <scaraCheckWorkSpace1+0x7a>
		if ( (LIM_MIN_J1 <= value) && ( value <= LIM_MAX_J1)) {
 8008cd2:	a333      	add	r3, pc, #204	; (adr r3, 8008da0 <scaraCheckWorkSpace1+0x118>)
 8008cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008cdc:	f7f7 ff12 	bl	8000b04 <__aeabi_dcmpge>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d00b      	beq.n	8008cfe <scaraCheckWorkSpace1+0x76>
 8008ce6:	a330      	add	r3, pc, #192	; (adr r3, 8008da8 <scaraCheckWorkSpace1+0x120>)
 8008ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008cf0:	f7f7 fefe 	bl	8000af0 <__aeabi_dcmple>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d001      	beq.n	8008cfe <scaraCheckWorkSpace1+0x76>
			return SCARA_STATUS_OK;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	e038      	b.n	8008d70 <scaraCheckWorkSpace1+0xe8>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008cfe:	2307      	movs	r3, #7
 8008d00:	e036      	b.n	8008d70 <scaraCheckWorkSpace1+0xe8>
		}
	} else if (TRAJECTORY_J2 == target) {
 8008d02:	7bfb      	ldrb	r3, [r7, #15]
 8008d04:	2b02      	cmp	r3, #2
 8008d06:	d117      	bne.n	8008d38 <scaraCheckWorkSpace1+0xb0>
		if ( (LIM_MIN_J2 <= value) && ( value <= LIM_MAX_J2)) {
 8008d08:	f04f 0200 	mov.w	r2, #0
 8008d0c:	4b1e      	ldr	r3, [pc, #120]	; (8008d88 <scaraCheckWorkSpace1+0x100>)
 8008d0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d12:	f7f7 fef7 	bl	8000b04 <__aeabi_dcmpge>
 8008d16:	4603      	mov	r3, r0
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d00b      	beq.n	8008d34 <scaraCheckWorkSpace1+0xac>
 8008d1c:	f04f 0200 	mov.w	r2, #0
 8008d20:	4b1a      	ldr	r3, [pc, #104]	; (8008d8c <scaraCheckWorkSpace1+0x104>)
 8008d22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d26:	f7f7 fee3 	bl	8000af0 <__aeabi_dcmple>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d001      	beq.n	8008d34 <scaraCheckWorkSpace1+0xac>
			return SCARA_STATUS_OK;
 8008d30:	2300      	movs	r3, #0
 8008d32:	e01d      	b.n	8008d70 <scaraCheckWorkSpace1+0xe8>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008d34:	2307      	movs	r3, #7
 8008d36:	e01b      	b.n	8008d70 <scaraCheckWorkSpace1+0xe8>
		}
	} else if (TRAJECTORY_J3 == target) {
 8008d38:	7bfb      	ldrb	r3, [r7, #15]
 8008d3a:	2b03      	cmp	r3, #3
 8008d3c:	d117      	bne.n	8008d6e <scaraCheckWorkSpace1+0xe6>
		if ( (LIM_MIN_J3 <= value) && ( value <= LIM_MAX_J3)) {
 8008d3e:	a30e      	add	r3, pc, #56	; (adr r3, 8008d78 <scaraCheckWorkSpace1+0xf0>)
 8008d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d48:	f7f7 fedc 	bl	8000b04 <__aeabi_dcmpge>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d00b      	beq.n	8008d6a <scaraCheckWorkSpace1+0xe2>
 8008d52:	a30b      	add	r3, pc, #44	; (adr r3, 8008d80 <scaraCheckWorkSpace1+0xf8>)
 8008d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d5c:	f7f7 fec8 	bl	8000af0 <__aeabi_dcmple>
 8008d60:	4603      	mov	r3, r0
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d001      	beq.n	8008d6a <scaraCheckWorkSpace1+0xe2>
			return SCARA_STATUS_OK;
 8008d66:	2300      	movs	r3, #0
 8008d68:	e002      	b.n	8008d70 <scaraCheckWorkSpace1+0xe8>
		} else {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 8008d6a:	2307      	movs	r3, #7
 8008d6c:	e000      	b.n	8008d70 <scaraCheckWorkSpace1+0xe8>
		}
	} else {
		return SCARA_STATUS_ERROR;
 8008d6e:	2301      	movs	r3, #1
	}
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3710      	adds	r7, #16
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	daaaaaab 	.word	0xdaaaaaab
 8008d7c:	c007bc89 	.word	0xc007bc89
 8008d80:	daaaaaab 	.word	0xdaaaaaab
 8008d84:	4007bc89 	.word	0x4007bc89
 8008d88:	3ff00000 	.word	0x3ff00000
 8008d8c:	40590000 	.word	0x40590000
 8008d90:	daaaaaab 	.word	0xdaaaaaab
 8008d94:	bff7bc89 	.word	0xbff7bc89
 8008d98:	daaaaaab 	.word	0xdaaaaaab
 8008d9c:	3ff7bc89 	.word	0x3ff7bc89
 8008da0:	88000000 	.word	0x88000000
 8008da4:	c002d97c 	.word	0xc002d97c
 8008da8:	88000000 	.word	0x88000000
 8008dac:	4002d97c 	.word	0x4002d97c

08008db0 <scaraTestDuty>:

/* Check all of point in travel */
SCARA_StatusTypeDef	scaraTestDuty(void) {
 8008db0:	b5b0      	push	{r4, r5, r7, lr}
 8008db2:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8008db6:	af2c      	add	r7, sp, #176	; 0xb0
	int32_t sample_count;
	double run_time = 0;
 8008db8:	f04f 0300 	mov.w	r3, #0
 8008dbc:	f04f 0400 	mov.w	r4, #0
 8008dc0:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
	SCARA_PositionTypeDef test_Next, test_Current;
	SCARA_StatusTypeDef status;
	memcpy(&test_Current, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 8008dc4:	463b      	mov	r3, r7
 8008dc6:	4a36      	ldr	r2, [pc, #216]	; (8008ea0 <scaraTestDuty+0xf0>)
 8008dc8:	4618      	mov	r0, r3
 8008dca:	4611      	mov	r1, r2
 8008dcc:	23b8      	movs	r3, #184	; 0xb8
 8008dce:	461a      	mov	r2, r3
 8008dd0:	f00c fdb6 	bl	8015940 <memcpy>
	sample_count = ceil(myDUTY.time_total/T_SAMPLING);
 8008dd4:	4b33      	ldr	r3, [pc, #204]	; (8008ea4 <scaraTestDuty+0xf4>)
 8008dd6:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8008dda:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008dde:	a32e      	add	r3, pc, #184	; (adr r3, 8008e98 <scaraTestDuty+0xe8>)
 8008de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de4:	f7f7 fd32 	bl	800084c <__aeabi_ddiv>
 8008de8:	4603      	mov	r3, r0
 8008dea:	460c      	mov	r4, r1
 8008dec:	ec44 3b17 	vmov	d7, r3, r4
 8008df0:	eeb0 0a47 	vmov.f32	s0, s14
 8008df4:	eef0 0a67 	vmov.f32	s1, s15
 8008df8:	f010 fb0e 	bl	8019418 <ceil>
 8008dfc:	ec54 3b10 	vmov	r3, r4, d0
 8008e00:	4618      	mov	r0, r3
 8008e02:	4621      	mov	r1, r4
 8008e04:	f7f7 fea8 	bl	8000b58 <__aeabi_d2iz>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
	for (int32_t i = 1; i < sample_count; i++) {
 8008e0e:	2301      	movs	r3, #1
 8008e10:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8008e14:	e032      	b.n	8008e7c <scaraTestDuty+0xcc>
		run_time += T_SAMPLING;
 8008e16:	a320      	add	r3, pc, #128	; (adr r3, 8008e98 <scaraTestDuty+0xe8>)
 8008e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e1c:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8008e20:	f7f7 fa34 	bl	800028c <__adddf3>
 8008e24:	4603      	mov	r3, r0
 8008e26:	460c      	mov	r4, r1
 8008e28:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
		status = scaraFlowDuty(run_time, &test_Next, test_Current);
 8008e2c:	463c      	mov	r4, r7
 8008e2e:	f107 05b8 	add.w	r5, r7, #184	; 0xb8
 8008e32:	4668      	mov	r0, sp
 8008e34:	f104 0308 	add.w	r3, r4, #8
 8008e38:	22b0      	movs	r2, #176	; 0xb0
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	f00c fd80 	bl	8015940 <memcpy>
 8008e40:	e894 000c 	ldmia.w	r4, {r2, r3}
 8008e44:	4628      	mov	r0, r5
 8008e46:	ed97 0b60 	vldr	d0, [r7, #384]	; 0x180
 8008e4a:	f7fe f99b 	bl	8007184 <scaraFlowDuty>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
		if (status != SCARA_STATUS_OK) {
 8008e54:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d002      	beq.n	8008e62 <scaraTestDuty+0xb2>
			return status;
 8008e5c:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8008e60:	e013      	b.n	8008e8a <scaraTestDuty+0xda>
		}
		memcpy(&test_Next, &test_Current, sizeof(SCARA_PositionTypeDef));
 8008e62:	463a      	mov	r2, r7
 8008e64:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8008e68:	4611      	mov	r1, r2
 8008e6a:	22b8      	movs	r2, #184	; 0xb8
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f00c fd67 	bl	8015940 <memcpy>
	for (int32_t i = 1; i < sample_count; i++) {
 8008e72:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8008e76:	3301      	adds	r3, #1
 8008e78:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8008e7c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8008e80:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8008e84:	429a      	cmp	r2, r3
 8008e86:	dbc6      	blt.n	8008e16 <scaraTestDuty+0x66>
	}
	return SCARA_STATUS_OK;
 8008e88:	2300      	movs	r3, #0
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bdb0      	pop	{r4, r5, r7, pc}
 8008e94:	f3af 8000 	nop.w
 8008e98:	40000000 	.word	0x40000000
 8008e9c:	3f847ae1 	.word	0x3f847ae1
 8008ea0:	20005e38 	.word	0x20005e38
 8008ea4:	20005378 	.word	0x20005378

08008ea8 <scaraSetScanFlag>:

void				scaraSetScanFlag(void) {
 8008ea8:	b480      	push	{r7}
 8008eaa:	af00      	add	r7, sp, #0
	mySCARA.isScanLitmit = TRUE;
 8008eac:	4b03      	ldr	r3, [pc, #12]	; (8008ebc <scaraSetScanFlag+0x14>)
 8008eae:	2201      	movs	r2, #1
 8008eb0:	70da      	strb	r2, [r3, #3]
}
 8008eb2:	bf00      	nop
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr
 8008ebc:	20000c4c 	.word	0x20000c4c

08008ec0 <scaraSetOutput>:

void				scaraSetOutput		(uint8_t level) {
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b082      	sub	sp, #8
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	71fb      	strb	r3, [r7, #7]
	mySCARA.outputSet	 = level;
 8008eca:	4a05      	ldr	r2, [pc, #20]	; (8008ee0 <scaraSetOutput+0x20>)
 8008ecc:	79fb      	ldrb	r3, [r7, #7]
 8008ece:	7113      	strb	r3, [r2, #4]
	lowlayer_setOutput(level);
 8008ed0:	79fb      	ldrb	r3, [r7, #7]
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7fb fc5e 	bl	8004794 <lowlayer_setOutput>
}
 8008ed8:	bf00      	nop
 8008eda:	3708      	adds	r7, #8
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}
 8008ee0:	20000c4c 	.word	0x20000c4c

08008ee4 <scaraSetDutyState>:

void				scaraSetDutyState(SCARA_DutyStateTypeDef state) {
 8008ee4:	b480      	push	{r7}
 8008ee6:	b083      	sub	sp, #12
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	4603      	mov	r3, r0
 8008eec:	71fb      	strb	r3, [r7, #7]
	mySCARA.duty_State = state;
 8008eee:	4a04      	ldr	r2, [pc, #16]	; (8008f00 <scaraSetDutyState+0x1c>)
 8008ef0:	79fb      	ldrb	r3, [r7, #7]
 8008ef2:	7093      	strb	r3, [r2, #2]
}
 8008ef4:	bf00      	nop
 8008ef6:	370c      	adds	r7, #12
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr
 8008f00:	20000c4c 	.word	0x20000c4c

08008f04 <scaraSetMode>:

void				scaraSetMode(SCARA_ModeTypeDef mode) {
 8008f04:	b480      	push	{r7}
 8008f06:	b083      	sub	sp, #12
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	71fb      	strb	r3, [r7, #7]
	mySCARA.mode = mode;
 8008f0e:	4a04      	ldr	r2, [pc, #16]	; (8008f20 <scaraSetMode+0x1c>)
 8008f10:	79fb      	ldrb	r3, [r7, #7]
 8008f12:	7053      	strb	r3, [r2, #1]
}
 8008f14:	bf00      	nop
 8008f16:	370c      	adds	r7, #12
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr
 8008f20:	20000c4c 	.word	0x20000c4c

08008f24 <scaraSetMethod>:

void				scaraSetMethod(SCARA_MethodTypeDef method) {
 8008f24:	b480      	push	{r7}
 8008f26:	b083      	sub	sp, #12
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	71fb      	strb	r3, [r7, #7]
	mySCARA.method = method;
 8008f2e:	4a04      	ldr	r2, [pc, #16]	; (8008f40 <scaraSetMethod+0x1c>)
 8008f30:	79fb      	ldrb	r3, [r7, #7]
 8008f32:	7013      	strb	r3, [r2, #0]
}
 8008f34:	bf00      	nop
 8008f36:	370c      	adds	r7, #12
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr
 8008f40:	20000c4c 	.word	0x20000c4c

08008f44 <scaraGetPosition>:


void				scaraGetPosition	(SCARA_PositionTypeDef *pos) {
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b082      	sub	sp, #8
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
	memcpy(pos, &positionCurrent, sizeof(SCARA_PositionTypeDef));
 8008f4c:	22b8      	movs	r2, #184	; 0xb8
 8008f4e:	4904      	ldr	r1, [pc, #16]	; (8008f60 <scaraGetPosition+0x1c>)
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f00c fcf5 	bl	8015940 <memcpy>
}
 8008f56:	bf00      	nop
 8008f58:	3708      	adds	r7, #8
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	20005e38 	.word	0x20005e38

08008f64 <scaraGetMode>:


SCARA_ModeTypeDef	scaraGetMode(void) {
 8008f64:	b480      	push	{r7}
 8008f66:	af00      	add	r7, sp, #0
	return mySCARA.mode;
 8008f68:	4b03      	ldr	r3, [pc, #12]	; (8008f78 <scaraGetMode+0x14>)
 8008f6a:	785b      	ldrb	r3, [r3, #1]
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f74:	4770      	bx	lr
 8008f76:	bf00      	nop
 8008f78:	20000c4c 	.word	0x20000c4c

08008f7c <scaraGetMethod>:

SCARA_MethodTypeDef	scaraGetMethod(void) {
 8008f7c:	b480      	push	{r7}
 8008f7e:	af00      	add	r7, sp, #0
	return mySCARA.method;
 8008f80:	4b03      	ldr	r3, [pc, #12]	; (8008f90 <scaraGetMethod+0x14>)
 8008f82:	781b      	ldrb	r3, [r3, #0]
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	46bd      	mov	sp, r7
 8008f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8c:	4770      	bx	lr
 8008f8e:	bf00      	nop
 8008f90:	20000c4c 	.word	0x20000c4c

08008f94 <scaraGetDutyState>:

SCARA_DutyStateTypeDef	scaraGetDutyState(void) {
 8008f94:	b480      	push	{r7}
 8008f96:	af00      	add	r7, sp, #0
	return mySCARA.duty_State;
 8008f98:	4b03      	ldr	r3, [pc, #12]	; (8008fa8 <scaraGetDutyState+0x14>)
 8008f9a:	789b      	ldrb	r3, [r3, #2]
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa4:	4770      	bx	lr
 8008fa6:	bf00      	nop
 8008fa8:	20000c4c 	.word	0x20000c4c

08008fac <scaraIsScanLimit>:

uint8_t					scaraIsScanLimit(void) {
 8008fac:	b480      	push	{r7}
 8008fae:	af00      	add	r7, sp, #0
	return mySCARA.isScanLitmit;
 8008fb0:	4b03      	ldr	r3, [pc, #12]	; (8008fc0 <scaraIsScanLimit+0x14>)
 8008fb2:	78db      	ldrb	r3, [r3, #3]
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr
 8008fbe:	bf00      	nop
 8008fc0:	20000c4c 	.word	0x20000c4c
 8008fc4:	00000000 	.word	0x00000000

08008fc8 <scaraIsFinish>:

uint8_t					scaraIsFinish		(double run_time) {
 8008fc8:	b590      	push	{r4, r7, lr}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	ed87 0b00 	vstr	d0, [r7]
	if(myDUTY.time_total + 0.03 < run_time) {
 8008fd2:	4b11      	ldr	r3, [pc, #68]	; (8009018 <scaraIsFinish+0x50>)
 8008fd4:	f603 1348 	addw	r3, r3, #2376	; 0x948
 8008fd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008fdc:	a30c      	add	r3, pc, #48	; (adr r3, 8009010 <scaraIsFinish+0x48>)
 8008fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe2:	f7f7 f953 	bl	800028c <__adddf3>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	460c      	mov	r4, r1
 8008fea:	461a      	mov	r2, r3
 8008fec:	4623      	mov	r3, r4
 8008fee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ff2:	f7f7 fd91 	bl	8000b18 <__aeabi_dcmpgt>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d001      	beq.n	8009000 <scaraIsFinish+0x38>
		return TRUE;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	e000      	b.n	8009002 <scaraIsFinish+0x3a>
	} else {
		return FALSE;
 8009000:	2300      	movs	r3, #0
	}
}
 8009002:	4618      	mov	r0, r3
 8009004:	370c      	adds	r7, #12
 8009006:	46bd      	mov	sp, r7
 8009008:	bd90      	pop	{r4, r7, pc}
 800900a:	bf00      	nop
 800900c:	f3af 8000 	nop.w
 8009010:	eb851eb8 	.word	0xeb851eb8
 8009014:	3f9eb851 	.word	0x3f9eb851
 8009018:	20005378 	.word	0x20005378
 800901c:	00000000 	.word	0x00000000

08009020 <scaraPosition2String>:

/* Convert position to string*/
int32_t					scaraPosition2String(char *result, SCARA_PositionTypeDef position) {
 8009020:	b082      	sub	sp, #8
 8009022:	b590      	push	{r4, r7, lr}
 8009024:	b0af      	sub	sp, #188	; 0xbc
 8009026:	af0a      	add	r7, sp, #40	; 0x28
 8009028:	6078      	str	r0, [r7, #4]
 800902a:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800902e:	e881 000c 	stmia.w	r1, {r2, r3}
	uint8_t time[12];
	uint8_t total_time[12];

	int32_t lenght_buff;

	double2string(theta1, position.Theta1*180/PI, 6);
 8009032:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8009036:	f04f 0200 	mov.w	r2, #0
 800903a:	4b7f      	ldr	r3, [pc, #508]	; (8009238 <scaraPosition2String+0x218>)
 800903c:	f7f7 fadc 	bl	80005f8 <__aeabi_dmul>
 8009040:	4603      	mov	r3, r0
 8009042:	460c      	mov	r4, r1
 8009044:	4618      	mov	r0, r3
 8009046:	4621      	mov	r1, r4
 8009048:	a379      	add	r3, pc, #484	; (adr r3, 8009230 <scaraPosition2String+0x210>)
 800904a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800904e:	f7f7 fbfd 	bl	800084c <__aeabi_ddiv>
 8009052:	4603      	mov	r3, r0
 8009054:	460c      	mov	r4, r1
 8009056:	ec44 3b17 	vmov	d7, r3, r4
 800905a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800905e:	2106      	movs	r1, #6
 8009060:	eeb0 0a47 	vmov.f32	s0, s14
 8009064:	eef0 0a67 	vmov.f32	s1, s15
 8009068:	4618      	mov	r0, r3
 800906a:	f7f8 fba5 	bl	80017b8 <double2string>
	double2string(theta2, position.Theta2*180/PI, 6);
 800906e:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8009072:	f04f 0200 	mov.w	r2, #0
 8009076:	4b70      	ldr	r3, [pc, #448]	; (8009238 <scaraPosition2String+0x218>)
 8009078:	f7f7 fabe 	bl	80005f8 <__aeabi_dmul>
 800907c:	4603      	mov	r3, r0
 800907e:	460c      	mov	r4, r1
 8009080:	4618      	mov	r0, r3
 8009082:	4621      	mov	r1, r4
 8009084:	a36a      	add	r3, pc, #424	; (adr r3, 8009230 <scaraPosition2String+0x210>)
 8009086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800908a:	f7f7 fbdf 	bl	800084c <__aeabi_ddiv>
 800908e:	4603      	mov	r3, r0
 8009090:	460c      	mov	r4, r1
 8009092:	ec44 3b17 	vmov	d7, r3, r4
 8009096:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800909a:	2106      	movs	r1, #6
 800909c:	eeb0 0a47 	vmov.f32	s0, s14
 80090a0:	eef0 0a67 	vmov.f32	s1, s15
 80090a4:	4618      	mov	r0, r3
 80090a6:	f7f8 fb87 	bl	80017b8 <double2string>
	double2string(d3, position.D3, 6);
 80090aa:	ed97 7b46 	vldr	d7, [r7, #280]	; 0x118
 80090ae:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80090b2:	2106      	movs	r1, #6
 80090b4:	eeb0 0a47 	vmov.f32	s0, s14
 80090b8:	eef0 0a67 	vmov.f32	s1, s15
 80090bc:	4618      	mov	r0, r3
 80090be:	f7f8 fb7b 	bl	80017b8 <double2string>
	double2string(theta4, position.Theta4*180/PI, 6);
 80090c2:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 80090c6:	f04f 0200 	mov.w	r2, #0
 80090ca:	4b5b      	ldr	r3, [pc, #364]	; (8009238 <scaraPosition2String+0x218>)
 80090cc:	f7f7 fa94 	bl	80005f8 <__aeabi_dmul>
 80090d0:	4603      	mov	r3, r0
 80090d2:	460c      	mov	r4, r1
 80090d4:	4618      	mov	r0, r3
 80090d6:	4621      	mov	r1, r4
 80090d8:	a355      	add	r3, pc, #340	; (adr r3, 8009230 <scaraPosition2String+0x210>)
 80090da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090de:	f7f7 fbb5 	bl	800084c <__aeabi_ddiv>
 80090e2:	4603      	mov	r3, r0
 80090e4:	460c      	mov	r4, r1
 80090e6:	ec44 3b17 	vmov	d7, r3, r4
 80090ea:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80090ee:	2106      	movs	r1, #6
 80090f0:	eeb0 0a47 	vmov.f32	s0, s14
 80090f4:	eef0 0a67 	vmov.f32	s1, s15
 80090f8:	4618      	mov	r0, r3
 80090fa:	f7f8 fb5d 	bl	80017b8 <double2string>
	double2string(x, position.x, 6);
 80090fe:	ed97 7b3a 	vldr	d7, [r7, #232]	; 0xe8
 8009102:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009106:	2106      	movs	r1, #6
 8009108:	eeb0 0a47 	vmov.f32	s0, s14
 800910c:	eef0 0a67 	vmov.f32	s1, s15
 8009110:	4618      	mov	r0, r3
 8009112:	f7f8 fb51 	bl	80017b8 <double2string>
	double2string(y, position.y, 6);
 8009116:	ed97 7b3c 	vldr	d7, [r7, #240]	; 0xf0
 800911a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800911e:	2106      	movs	r1, #6
 8009120:	eeb0 0a47 	vmov.f32	s0, s14
 8009124:	eef0 0a67 	vmov.f32	s1, s15
 8009128:	4618      	mov	r0, r3
 800912a:	f7f8 fb45 	bl	80017b8 <double2string>
	double2string(z, position.z, 6);
 800912e:	ed97 7b3e 	vldr	d7, [r7, #248]	; 0xf8
 8009132:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009136:	2106      	movs	r1, #6
 8009138:	eeb0 0a47 	vmov.f32	s0, s14
 800913c:	eef0 0a67 	vmov.f32	s1, s15
 8009140:	4618      	mov	r0, r3
 8009142:	f7f8 fb39 	bl	80017b8 <double2string>
	double2string(roll, position.roll*180/PI, 6);
 8009146:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 800914a:	f04f 0200 	mov.w	r2, #0
 800914e:	4b3a      	ldr	r3, [pc, #232]	; (8009238 <scaraPosition2String+0x218>)
 8009150:	f7f7 fa52 	bl	80005f8 <__aeabi_dmul>
 8009154:	4603      	mov	r3, r0
 8009156:	460c      	mov	r4, r1
 8009158:	4618      	mov	r0, r3
 800915a:	4621      	mov	r1, r4
 800915c:	a334      	add	r3, pc, #208	; (adr r3, 8009230 <scaraPosition2String+0x210>)
 800915e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009162:	f7f7 fb73 	bl	800084c <__aeabi_ddiv>
 8009166:	4603      	mov	r3, r0
 8009168:	460c      	mov	r4, r1
 800916a:	ec44 3b17 	vmov	d7, r3, r4
 800916e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009172:	2106      	movs	r1, #6
 8009174:	eeb0 0a47 	vmov.f32	s0, s14
 8009178:	eef0 0a67 	vmov.f32	s1, s15
 800917c:	4618      	mov	r0, r3
 800917e:	f7f8 fb1b 	bl	80017b8 <double2string>
	double2string(lenght, position.q, 6);
 8009182:	ed97 7b28 	vldr	d7, [r7, #160]	; 0xa0
 8009186:	f107 0320 	add.w	r3, r7, #32
 800918a:	2106      	movs	r1, #6
 800918c:	eeb0 0a47 	vmov.f32	s0, s14
 8009190:	eef0 0a67 	vmov.f32	s1, s15
 8009194:	4618      	mov	r0, r3
 8009196:	f7f8 fb0f 	bl	80017b8 <double2string>
	double2string(total_time, position.total_time, 4);
 800919a:	ed97 7b38 	vldr	d7, [r7, #224]	; 0xe0
 800919e:	f107 0308 	add.w	r3, r7, #8
 80091a2:	2104      	movs	r1, #4
 80091a4:	eeb0 0a47 	vmov.f32	s0, s14
 80091a8:	eef0 0a67 	vmov.f32	s1, s15
 80091ac:	4618      	mov	r0, r3
 80091ae:	f7f8 fb03 	bl	80017b8 <double2string>
	double2string(time, position.t, 4);
 80091b2:	ed97 7b36 	vldr	d7, [r7, #216]	; 0xd8
 80091b6:	f107 0314 	add.w	r3, r7, #20
 80091ba:	2104      	movs	r1, #4
 80091bc:	eeb0 0a47 	vmov.f32	s0, s14
 80091c0:	eef0 0a67 	vmov.f32	s1, s15
 80091c4:	4618      	mov	r0, r3
 80091c6:	f7f8 faf7 	bl	80017b8 <double2string>
	lenght_buff = snprintf( (char *)result, 144,
 80091ca:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80091ce:	f107 0314 	add.w	r3, r7, #20
 80091d2:	9309      	str	r3, [sp, #36]	; 0x24
 80091d4:	f107 0308 	add.w	r3, r7, #8
 80091d8:	9308      	str	r3, [sp, #32]
 80091da:	f107 0320 	add.w	r3, r7, #32
 80091de:	9307      	str	r3, [sp, #28]
 80091e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80091e4:	9306      	str	r3, [sp, #24]
 80091e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80091ea:	9305      	str	r3, [sp, #20]
 80091ec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80091f0:	9304      	str	r3, [sp, #16]
 80091f2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80091f6:	9303      	str	r3, [sp, #12]
 80091f8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80091fc:	9302      	str	r3, [sp, #8]
 80091fe:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009202:	9301      	str	r3, [sp, #4]
 8009204:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8009208:	9300      	str	r3, [sp, #0]
 800920a:	4613      	mov	r3, r2
 800920c:	4a0b      	ldr	r2, [pc, #44]	; (800923c <scaraPosition2String+0x21c>)
 800920e:	2190      	movs	r1, #144	; 0x90
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f00d fabd 	bl	8016790 <sniprintf>
 8009216:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
						z,
						roll,
						lenght,
						total_time,
						time);
	return lenght_buff;
 800921a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
}
 800921e:	4618      	mov	r0, r3
 8009220:	3794      	adds	r7, #148	; 0x94
 8009222:	46bd      	mov	sp, r7
 8009224:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8009228:	b002      	add	sp, #8
 800922a:	4770      	bx	lr
 800922c:	f3af 8000 	nop.w
 8009230:	60000000 	.word	0x60000000
 8009234:	400921fb 	.word	0x400921fb
 8009238:	40668000 	.word	0x40668000
 800923c:	0801b230 	.word	0x0801b230

08009240 <scaraPosition_packaging>:

int32_t scaraPosition_packaging(uint8_t *data_packet, SCARA_PositionTypeDef position)
{
 8009240:	b082      	sub	sp, #8
 8009242:	b590      	push	{r4, r7, lr}
 8009244:	b085      	sub	sp, #20
 8009246:	af00      	add	r7, sp, #0
 8009248:	6078      	str	r0, [r7, #4]
 800924a:	f107 0120 	add.w	r1, r7, #32
 800924e:	e881 000c 	stmia.w	r1, {r2, r3}
	// data_packet[0] = 0x28;
	// data_packet[83] = 0x29;
	// data_packet[1] = 0x09;
	// memcpy(&data_packet[2], &position.t, 80);
	// data_packet[82] = lowlayer_readLimitSwitch();
	int32_t cur_ptr = 0;
 8009252:	2300      	movs	r3, #0
 8009254:	60fb      	str	r3, [r7, #12]
	Append_Coordinate_Value((int32_t)(position.x*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 8009256:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800925a:	a35b      	add	r3, pc, #364	; (adr r3, 80093c8 <scaraPosition_packaging+0x188>)
 800925c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009260:	f7f7 f9ca 	bl	80005f8 <__aeabi_dmul>
 8009264:	4603      	mov	r3, r0
 8009266:	460c      	mov	r4, r1
 8009268:	4618      	mov	r0, r3
 800926a:	4621      	mov	r1, r4
 800926c:	f7f7 fc74 	bl	8000b58 <__aeabi_d2iz>
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	3304      	adds	r3, #4
 8009274:	60fb      	str	r3, [r7, #12]
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	687a      	ldr	r2, [r7, #4]
 800927a:	4413      	add	r3, r2
 800927c:	4619      	mov	r1, r3
 800927e:	f000 f8a7 	bl	80093d0 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.y*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 8009282:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8009286:	a350      	add	r3, pc, #320	; (adr r3, 80093c8 <scaraPosition_packaging+0x188>)
 8009288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800928c:	f7f7 f9b4 	bl	80005f8 <__aeabi_dmul>
 8009290:	4603      	mov	r3, r0
 8009292:	460c      	mov	r4, r1
 8009294:	4618      	mov	r0, r3
 8009296:	4621      	mov	r1, r4
 8009298:	f7f7 fc5e 	bl	8000b58 <__aeabi_d2iz>
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	3304      	adds	r3, #4
 80092a0:	60fb      	str	r3, [r7, #12]
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	4413      	add	r3, r2
 80092a8:	4619      	mov	r1, r3
 80092aa:	f000 f891 	bl	80093d0 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.z*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 80092ae:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80092b2:	a345      	add	r3, pc, #276	; (adr r3, 80093c8 <scaraPosition_packaging+0x188>)
 80092b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b8:	f7f7 f99e 	bl	80005f8 <__aeabi_dmul>
 80092bc:	4603      	mov	r3, r0
 80092be:	460c      	mov	r4, r1
 80092c0:	4618      	mov	r0, r3
 80092c2:	4621      	mov	r1, r4
 80092c4:	f7f7 fc48 	bl	8000b58 <__aeabi_d2iz>
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	3304      	adds	r3, #4
 80092cc:	60fb      	str	r3, [r7, #12]
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	687a      	ldr	r2, [r7, #4]
 80092d2:	4413      	add	r3, r2
 80092d4:	4619      	mov	r1, r3
 80092d6:	f000 f87b 	bl	80093d0 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.roll*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 80092da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80092de:	a33a      	add	r3, pc, #232	; (adr r3, 80093c8 <scaraPosition_packaging+0x188>)
 80092e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e4:	f7f7 f988 	bl	80005f8 <__aeabi_dmul>
 80092e8:	4603      	mov	r3, r0
 80092ea:	460c      	mov	r4, r1
 80092ec:	4618      	mov	r0, r3
 80092ee:	4621      	mov	r1, r4
 80092f0:	f7f7 fc32 	bl	8000b58 <__aeabi_d2iz>
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	3304      	adds	r3, #4
 80092f8:	60fb      	str	r3, [r7, #12]
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	687a      	ldr	r2, [r7, #4]
 80092fe:	4413      	add	r3, r2
 8009300:	4619      	mov	r1, r3
 8009302:	f000 f865 	bl	80093d0 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta1*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 8009306:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800930a:	a32f      	add	r3, pc, #188	; (adr r3, 80093c8 <scaraPosition_packaging+0x188>)
 800930c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009310:	f7f7 f972 	bl	80005f8 <__aeabi_dmul>
 8009314:	4603      	mov	r3, r0
 8009316:	460c      	mov	r4, r1
 8009318:	4618      	mov	r0, r3
 800931a:	4621      	mov	r1, r4
 800931c:	f7f7 fc1c 	bl	8000b58 <__aeabi_d2iz>
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	3304      	adds	r3, #4
 8009324:	60fb      	str	r3, [r7, #12]
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	4413      	add	r3, r2
 800932c:	4619      	mov	r1, r3
 800932e:	f000 f84f 	bl	80093d0 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.Theta2*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 8009332:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8009336:	a324      	add	r3, pc, #144	; (adr r3, 80093c8 <scaraPosition_packaging+0x188>)
 8009338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800933c:	f7f7 f95c 	bl	80005f8 <__aeabi_dmul>
 8009340:	4603      	mov	r3, r0
 8009342:	460c      	mov	r4, r1
 8009344:	4618      	mov	r0, r3
 8009346:	4621      	mov	r1, r4
 8009348:	f7f7 fc06 	bl	8000b58 <__aeabi_d2iz>
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	3304      	adds	r3, #4
 8009350:	60fb      	str	r3, [r7, #12]
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	4413      	add	r3, r2
 8009358:	4619      	mov	r1, r3
 800935a:	f000 f839 	bl	80093d0 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.v_d3*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800935e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8009362:	a319      	add	r3, pc, #100	; (adr r3, 80093c8 <scaraPosition_packaging+0x188>)
 8009364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009368:	f7f7 f946 	bl	80005f8 <__aeabi_dmul>
 800936c:	4603      	mov	r3, r0
 800936e:	460c      	mov	r4, r1
 8009370:	4618      	mov	r0, r3
 8009372:	4621      	mov	r1, r4
 8009374:	f7f7 fbf0 	bl	8000b58 <__aeabi_d2iz>
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	3304      	adds	r3, #4
 800937c:	60fb      	str	r3, [r7, #12]
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	687a      	ldr	r2, [r7, #4]
 8009382:	4413      	add	r3, r2
 8009384:	4619      	mov	r1, r3
 8009386:	f000 f823 	bl	80093d0 <Append_Coordinate_Value>
	Append_Coordinate_Value((int32_t)(position.v_theta4*COR_FOWARD_SCALE), &data_packet[cur_ptr+=4]);
 800938a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800938e:	a30e      	add	r3, pc, #56	; (adr r3, 80093c8 <scaraPosition_packaging+0x188>)
 8009390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009394:	f7f7 f930 	bl	80005f8 <__aeabi_dmul>
 8009398:	4603      	mov	r3, r0
 800939a:	460c      	mov	r4, r1
 800939c:	4618      	mov	r0, r3
 800939e:	4621      	mov	r1, r4
 80093a0:	f7f7 fbda 	bl	8000b58 <__aeabi_d2iz>
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	3304      	adds	r3, #4
 80093a8:	60fb      	str	r3, [r7, #12]
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	687a      	ldr	r2, [r7, #4]
 80093ae:	4413      	add	r3, r2
 80093b0:	4619      	mov	r1, r3
 80093b2:	f000 f80d 	bl	80093d0 <Append_Coordinate_Value>
	return cur_ptr;
 80093b6:	68fb      	ldr	r3, [r7, #12]
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3714      	adds	r7, #20
 80093bc:	46bd      	mov	sp, r7
 80093be:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80093c2:	b002      	add	sp, #8
 80093c4:	4770      	bx	lr
 80093c6:	bf00      	nop
 80093c8:	00000000 	.word	0x00000000
 80093cc:	412e8480 	.word	0x412e8480

080093d0 <Append_Coordinate_Value>:

void Append_Coordinate_Value(int32_t append_value, uint8_t* append_position)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b083      	sub	sp, #12
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]
	append_position[0] = (uint8_t)(append_value & 0xff);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	b2da      	uxtb	r2, r3
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	701a      	strb	r2, [r3, #0]
	append_position[1] = (uint8_t)(append_value >> 8 & 0xff);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	121a      	asrs	r2, r3, #8
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	3301      	adds	r3, #1
 80093ea:	b2d2      	uxtb	r2, r2
 80093ec:	701a      	strb	r2, [r3, #0]
	append_position[2] = (uint8_t)(append_value >> 16 & 0xff);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	141a      	asrs	r2, r3, #16
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	3302      	adds	r3, #2
 80093f6:	b2d2      	uxtb	r2, r2
 80093f8:	701a      	strb	r2, [r3, #0]
	append_position[3] = (uint8_t)(append_value >> 24 & 0xff);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	161a      	asrs	r2, r3, #24
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	3303      	adds	r3, #3
 8009402:	b2d2      	uxtb	r2, r2
 8009404:	701a      	strb	r2, [r3, #0]
}
 8009406:	bf00      	nop
 8009408:	370c      	adds	r7, #12
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr
 8009412:	0000      	movs	r0, r0
 8009414:	0000      	movs	r0, r0
	...

08009418 <scaraKeyInit>:

/* Convert key command to duty */
SCARA_StatusTypeDef		scaraKeyInit(SCARA_KeyTypeDef key,int32_t speed, double *runtime) {
 8009418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800941a:	ed2d 8b02 	vpush	{d8}
 800941e:	f5ad 7d6f 	sub.w	sp, sp, #956	; 0x3bc
 8009422:	af66      	add	r7, sp, #408	; 0x198
 8009424:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009428:	6019      	str	r1, [r3, #0]
 800942a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800942e:	601a      	str	r2, [r3, #0]
 8009430:	f107 0247 	add.w	r2, r7, #71	; 0x47
 8009434:	4603      	mov	r3, r0
 8009436:	7013      	strb	r3, [r2, #0]
	DUTY_Command_TypeDef cmd;
	SCARA_StatusTypeDef  status;
	double s, v, a;
	cmd.coordinate_type = DUTY_COORDINATES_REL;
 8009438:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800943c:	2301      	movs	r3, #1
 800943e:	7313      	strb	r3, [r2, #12]
	cmd.trajec_type = DUTY_TRAJECTORY_LSPB;
 8009440:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009444:	2300      	movs	r3, #0
 8009446:	7413      	strb	r3, [r2, #16]
	cmd.modeInit_type = DUTY_MODE_INIT_QVA;
 8009448:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800944c:	2300      	movs	r3, #0
 800944e:	7453      	strb	r3, [r2, #17]
	double v_current;
	Trajectory_LSPB_TypeDef *lspb;
	if (speed < SHIFT_SPEED_MIN || speed > SHIFT_SPPED_MAX) {
 8009450:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	2b00      	cmp	r3, #0
 8009458:	dd04      	ble.n	8009464 <scaraKeyInit+0x4c>
 800945a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	2b07      	cmp	r3, #7
 8009462:	dd02      	ble.n	800946a <scaraKeyInit+0x52>
		return SCARA_STATUS_ERROR_PARA;
 8009464:	2306      	movs	r3, #6
 8009466:	f001 b832 	b.w	800a4ce <scaraKeyInit+0x10b6>
	}
	switch(key) {
 800946a:	f107 0347 	add.w	r3, r7, #71	; 0x47
 800946e:	781b      	ldrb	r3, [r3, #0]
 8009470:	2b0f      	cmp	r3, #15
 8009472:	f200 87d3 	bhi.w	800a41c <scaraKeyInit+0x1004>
 8009476:	a201      	add	r2, pc, #4	; (adr r2, 800947c <scaraKeyInit+0x64>)
 8009478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800947c:	080094bd 	.word	0x080094bd
 8009480:	080095a3 	.word	0x080095a3
 8009484:	08009699 	.word	0x08009699
 8009488:	0800977f 	.word	0x0800977f
 800948c:	08009899 	.word	0x08009899
 8009490:	0800997f 	.word	0x0800997f
 8009494:	08009a75 	.word	0x08009a75
 8009498:	08009bbd 	.word	0x08009bbd
 800949c:	08009cd1 	.word	0x08009cd1
 80094a0:	08009dad 	.word	0x08009dad
 80094a4:	08009ecd 	.word	0x08009ecd
 80094a8:	08009fa9 	.word	0x08009fa9
 80094ac:	0800a095 	.word	0x0800a095
 80094b0:	0800a151 	.word	0x0800a151
 80094b4:	0800a255 	.word	0x0800a255
 80094b8:	0800a331 	.word	0x0800a331
	case SCARA_KEY_X_INC:
	{
		s = SHIFT_3D*speed;
 80094bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	ee07 3a90 	vmov	s15, r3
 80094c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80094ca:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80094ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80094d2:	ee17 0a90 	vmov	r0, s15
 80094d6:	f7f7 f837 	bl	8000548 <__aeabi_f2d>
 80094da:	4603      	mov	r3, r0
 80094dc:	460c      	mov	r4, r1
 80094de:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 80094e2:	a3e5      	add	r3, pc, #916	; (adr r3, 8009878 <scaraKeyInit+0x460>)
 80094e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e8:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 80094ec:	f7f7 f9ae 	bl	800084c <__aeabi_ddiv>
 80094f0:	4603      	mov	r3, r0
 80094f2:	460c      	mov	r4, r1
 80094f4:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 80094f8:	a3e1      	add	r3, pc, #900	; (adr r3, 8009880 <scaraKeyInit+0x468>)
 80094fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094fe:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009502:	f7f7 f9a3 	bl	800084c <__aeabi_ddiv>
 8009506:	4603      	mov	r3, r0
 8009508:	460c      	mov	r4, r1
 800950a:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_3D);
 800950e:	a3de      	add	r3, pc, #888	; (adr r3, 8009888 <scaraKeyInit+0x470>)
 8009510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009514:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009518:	f7f7 f998 	bl	800084c <__aeabi_ddiv>
 800951c:	4603      	mov	r3, r0
 800951e:	460c      	mov	r4, r1
 8009520:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009524:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_3D);
 8009528:	a3d7      	add	r3, pc, #860	; (adr r3, 8009888 <scaraKeyInit+0x470>)
 800952a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800952e:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 8009532:	f7f7 f98b 	bl	800084c <__aeabi_ddiv>
 8009536:	4603      	mov	r3, r0
 8009538:	460c      	mov	r4, r1
 800953a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800953e:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_TASK;
 8009542:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009546:	2200      	movs	r2, #0
 8009548:	735a      	strb	r2, [r3, #13]
		cmd.path_type = DUTY_PATH_LINE;
 800954a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800954e:	2200      	movs	r2, #0
 8009550:	739a      	strb	r2, [r3, #14]
		cmd.target_point.x 		= s;
 8009552:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009556:	e9d7 3482 	ldrd	r3, r4, [r7, #520]	; 0x208
 800955a:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		cmd.target_point.y 		= 0;
 800955e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009562:	f04f 0300 	mov.w	r3, #0
 8009566:	f04f 0400 	mov.w	r4, #0
 800956a:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		cmd.target_point.z 		= 0;
 800956e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009572:	f04f 0300 	mov.w	r3, #0
 8009576:	f04f 0400 	mov.w	r4, #0
 800957a:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
		cmd.target_point.roll 	= 0;
 800957e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009582:	f04f 0300 	mov.w	r3, #0
 8009586:	f04f 0400 	mov.w	r4, #0
 800958a:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		v_current = positionCurrent.v_3d;
 800958e:	4bc0      	ldr	r3, [pc, #768]	; (8009890 <scaraKeyInit+0x478>)
 8009590:	e9d3 342a 	ldrd	r3, r4, [r3, #168]	; 0xa8
 8009594:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.task.trajectory_3d.lspb);
 8009598:	4bbe      	ldr	r3, [pc, #760]	; (8009894 <scaraKeyInit+0x47c>)
 800959a:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
	break;
 800959e:	f000 bf3d 	b.w	800a41c <scaraKeyInit+0x1004>
	case SCARA_KEY_X_DEC:
	{
		s = SHIFT_3D*speed;
 80095a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	ee07 3a90 	vmov	s15, r3
 80095ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80095b0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80095b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80095b8:	ee17 0a90 	vmov	r0, s15
 80095bc:	f7f6 ffc4 	bl	8000548 <__aeabi_f2d>
 80095c0:	4603      	mov	r3, r0
 80095c2:	460c      	mov	r4, r1
 80095c4:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 80095c8:	a3ab      	add	r3, pc, #684	; (adr r3, 8009878 <scaraKeyInit+0x460>)
 80095ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ce:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 80095d2:	f7f7 f93b 	bl	800084c <__aeabi_ddiv>
 80095d6:	4603      	mov	r3, r0
 80095d8:	460c      	mov	r4, r1
 80095da:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 80095de:	a3a8      	add	r3, pc, #672	; (adr r3, 8009880 <scaraKeyInit+0x468>)
 80095e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e4:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 80095e8:	f7f7 f930 	bl	800084c <__aeabi_ddiv>
 80095ec:	4603      	mov	r3, r0
 80095ee:	460c      	mov	r4, r1
 80095f0:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_3D);
 80095f4:	a3a4      	add	r3, pc, #656	; (adr r3, 8009888 <scaraKeyInit+0x470>)
 80095f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095fa:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 80095fe:	f7f7 f925 	bl	800084c <__aeabi_ddiv>
 8009602:	4603      	mov	r3, r0
 8009604:	460c      	mov	r4, r1
 8009606:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800960a:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_3D);
 800960e:	a39e      	add	r3, pc, #632	; (adr r3, 8009888 <scaraKeyInit+0x470>)
 8009610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009614:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 8009618:	f7f7 f918 	bl	800084c <__aeabi_ddiv>
 800961c:	4603      	mov	r3, r0
 800961e:	460c      	mov	r4, r1
 8009620:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009624:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_TASK;
 8009628:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800962c:	2200      	movs	r2, #0
 800962e:	735a      	strb	r2, [r3, #13]
		cmd.path_type = DUTY_PATH_LINE;
 8009630:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009634:	2200      	movs	r2, #0
 8009636:	739a      	strb	r2, [r3, #14]
		cmd.target_point.x 		= -s;
 8009638:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800963c:	633b      	str	r3, [r7, #48]	; 0x30
 800963e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8009642:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009646:	637b      	str	r3, [r7, #52]	; 0x34
 8009648:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800964c:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8009650:	ed83 7b1c 	vstr	d7, [r3, #112]	; 0x70
		cmd.target_point.y 		= 0;
 8009654:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009658:	f04f 0300 	mov.w	r3, #0
 800965c:	f04f 0400 	mov.w	r4, #0
 8009660:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		cmd.target_point.z 		= 0;
 8009664:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009668:	f04f 0300 	mov.w	r3, #0
 800966c:	f04f 0400 	mov.w	r4, #0
 8009670:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
		cmd.target_point.roll 	= 0;
 8009674:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009678:	f04f 0300 	mov.w	r3, #0
 800967c:	f04f 0400 	mov.w	r4, #0
 8009680:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		v_current = positionCurrent.v_3d;
 8009684:	4b82      	ldr	r3, [pc, #520]	; (8009890 <scaraKeyInit+0x478>)
 8009686:	e9d3 342a 	ldrd	r3, r4, [r3, #168]	; 0xa8
 800968a:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.task.trajectory_3d.lspb);
 800968e:	4b81      	ldr	r3, [pc, #516]	; (8009894 <scaraKeyInit+0x47c>)
 8009690:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
	break;
 8009694:	f000 bec2 	b.w	800a41c <scaraKeyInit+0x1004>
	case SCARA_KEY_Y_INC:
	{
		s = SHIFT_3D*speed;
 8009698:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	ee07 3a90 	vmov	s15, r3
 80096a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80096a6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80096aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80096ae:	ee17 0a90 	vmov	r0, s15
 80096b2:	f7f6 ff49 	bl	8000548 <__aeabi_f2d>
 80096b6:	4603      	mov	r3, r0
 80096b8:	460c      	mov	r4, r1
 80096ba:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 80096be:	a36e      	add	r3, pc, #440	; (adr r3, 8009878 <scaraKeyInit+0x460>)
 80096c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c4:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 80096c8:	f7f7 f8c0 	bl	800084c <__aeabi_ddiv>
 80096cc:	4603      	mov	r3, r0
 80096ce:	460c      	mov	r4, r1
 80096d0:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 80096d4:	a36a      	add	r3, pc, #424	; (adr r3, 8009880 <scaraKeyInit+0x468>)
 80096d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096da:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 80096de:	f7f7 f8b5 	bl	800084c <__aeabi_ddiv>
 80096e2:	4603      	mov	r3, r0
 80096e4:	460c      	mov	r4, r1
 80096e6:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_3D);
 80096ea:	a367      	add	r3, pc, #412	; (adr r3, 8009888 <scaraKeyInit+0x470>)
 80096ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f0:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 80096f4:	f7f7 f8aa 	bl	800084c <__aeabi_ddiv>
 80096f8:	4603      	mov	r3, r0
 80096fa:	460c      	mov	r4, r1
 80096fc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009700:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_3D);
 8009704:	a360      	add	r3, pc, #384	; (adr r3, 8009888 <scaraKeyInit+0x470>)
 8009706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800970a:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 800970e:	f7f7 f89d 	bl	800084c <__aeabi_ddiv>
 8009712:	4603      	mov	r3, r0
 8009714:	460c      	mov	r4, r1
 8009716:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800971a:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_TASK;
 800971e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009722:	2200      	movs	r2, #0
 8009724:	735a      	strb	r2, [r3, #13]
		cmd.path_type = DUTY_PATH_LINE;
 8009726:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800972a:	2200      	movs	r2, #0
 800972c:	739a      	strb	r2, [r3, #14]
		cmd.target_point.x 		= 0;
 800972e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009732:	f04f 0300 	mov.w	r3, #0
 8009736:	f04f 0400 	mov.w	r4, #0
 800973a:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		cmd.target_point.y 		= s;
 800973e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009742:	e9d7 3482 	ldrd	r3, r4, [r7, #520]	; 0x208
 8009746:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		cmd.target_point.z 		= 0;
 800974a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800974e:	f04f 0300 	mov.w	r3, #0
 8009752:	f04f 0400 	mov.w	r4, #0
 8009756:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
		cmd.target_point.roll	= 0;
 800975a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800975e:	f04f 0300 	mov.w	r3, #0
 8009762:	f04f 0400 	mov.w	r4, #0
 8009766:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		v_current = positionCurrent.v_3d;
 800976a:	4b49      	ldr	r3, [pc, #292]	; (8009890 <scaraKeyInit+0x478>)
 800976c:	e9d3 342a 	ldrd	r3, r4, [r3, #168]	; 0xa8
 8009770:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.task.trajectory_3d.lspb);
 8009774:	4b47      	ldr	r3, [pc, #284]	; (8009894 <scaraKeyInit+0x47c>)
 8009776:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 800977a:	f000 be4f 	b.w	800a41c <scaraKeyInit+0x1004>
	case SCARA_KEY_Y_DEC:
	{
		s = SHIFT_3D*speed;
 800977e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	ee07 3a90 	vmov	s15, r3
 8009788:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800978c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8009790:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009794:	ee17 0a90 	vmov	r0, s15
 8009798:	f7f6 fed6 	bl	8000548 <__aeabi_f2d>
 800979c:	4603      	mov	r3, r0
 800979e:	460c      	mov	r4, r1
 80097a0:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 80097a4:	a334      	add	r3, pc, #208	; (adr r3, 8009878 <scaraKeyInit+0x460>)
 80097a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097aa:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 80097ae:	f7f7 f84d 	bl	800084c <__aeabi_ddiv>
 80097b2:	4603      	mov	r3, r0
 80097b4:	460c      	mov	r4, r1
 80097b6:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 80097ba:	a331      	add	r3, pc, #196	; (adr r3, 8009880 <scaraKeyInit+0x468>)
 80097bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c0:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 80097c4:	f7f7 f842 	bl	800084c <__aeabi_ddiv>
 80097c8:	4603      	mov	r3, r0
 80097ca:	460c      	mov	r4, r1
 80097cc:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_3D);
 80097d0:	a32d      	add	r3, pc, #180	; (adr r3, 8009888 <scaraKeyInit+0x470>)
 80097d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d6:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 80097da:	f7f7 f837 	bl	800084c <__aeabi_ddiv>
 80097de:	4603      	mov	r3, r0
 80097e0:	460c      	mov	r4, r1
 80097e2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80097e6:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_3D);
 80097ea:	a327      	add	r3, pc, #156	; (adr r3, 8009888 <scaraKeyInit+0x470>)
 80097ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f0:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 80097f4:	f7f7 f82a 	bl	800084c <__aeabi_ddiv>
 80097f8:	4603      	mov	r3, r0
 80097fa:	460c      	mov	r4, r1
 80097fc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009800:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_TASK;
 8009804:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009808:	2200      	movs	r2, #0
 800980a:	735a      	strb	r2, [r3, #13]
		cmd.path_type = DUTY_PATH_LINE;
 800980c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009810:	2200      	movs	r2, #0
 8009812:	739a      	strb	r2, [r3, #14]
		cmd.target_point.x 		= 0;
 8009814:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009818:	f04f 0300 	mov.w	r3, #0
 800981c:	f04f 0400 	mov.w	r4, #0
 8009820:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		cmd.target_point.y 		= -s;
 8009824:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8009828:	62bb      	str	r3, [r7, #40]	; 0x28
 800982a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800982e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009832:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009834:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009838:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800983c:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
		cmd.target_point.z 		= 0;
 8009840:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009844:	f04f 0300 	mov.w	r3, #0
 8009848:	f04f 0400 	mov.w	r4, #0
 800984c:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
		cmd.target_point.roll 	= 0;
 8009850:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009854:	f04f 0300 	mov.w	r3, #0
 8009858:	f04f 0400 	mov.w	r4, #0
 800985c:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		v_current = positionCurrent.v_3d;
 8009860:	4b0b      	ldr	r3, [pc, #44]	; (8009890 <scaraKeyInit+0x478>)
 8009862:	e9d3 342a 	ldrd	r3, r4, [r3, #168]	; 0xa8
 8009866:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.task.trajectory_3d.lspb);
 800986a:	4b0a      	ldr	r3, [pc, #40]	; (8009894 <scaraKeyInit+0x47c>)
 800986c:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 8009870:	f000 bdd4 	b.w	800a41c <scaraKeyInit+0x1004>
 8009874:	f3af 8000 	nop.w
 8009878:	60000000 	.word	0x60000000
 800987c:	3fedf3b6 	.word	0x3fedf3b6
 8009880:	40000000 	.word	0x40000000
 8009884:	3fd0e560 	.word	0x3fd0e560
 8009888:	00000000 	.word	0x00000000
 800988c:	405c2000 	.word	0x405c2000
 8009890:	20005e38 	.word	0x20005e38
 8009894:	20005490 	.word	0x20005490
	case SCARA_KEY_Z_INC:
	{
		s = SHIFT_3D*speed;
 8009898:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	ee07 3a90 	vmov	s15, r3
 80098a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80098a6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80098aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80098ae:	ee17 0a90 	vmov	r0, s15
 80098b2:	f7f6 fe49 	bl	8000548 <__aeabi_f2d>
 80098b6:	4603      	mov	r3, r0
 80098b8:	460c      	mov	r4, r1
 80098ba:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 80098be:	a3b0      	add	r3, pc, #704	; (adr r3, 8009b80 <scaraKeyInit+0x768>)
 80098c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c4:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 80098c8:	f7f6 ffc0 	bl	800084c <__aeabi_ddiv>
 80098cc:	4603      	mov	r3, r0
 80098ce:	460c      	mov	r4, r1
 80098d0:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 80098d4:	a3ac      	add	r3, pc, #688	; (adr r3, 8009b88 <scaraKeyInit+0x770>)
 80098d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098da:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 80098de:	f7f6 ffb5 	bl	800084c <__aeabi_ddiv>
 80098e2:	4603      	mov	r3, r0
 80098e4:	460c      	mov	r4, r1
 80098e6:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_3D);
 80098ea:	a3a9      	add	r3, pc, #676	; (adr r3, 8009b90 <scaraKeyInit+0x778>)
 80098ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f0:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 80098f4:	f7f6 ffaa 	bl	800084c <__aeabi_ddiv>
 80098f8:	4603      	mov	r3, r0
 80098fa:	460c      	mov	r4, r1
 80098fc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009900:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_3D);
 8009904:	a3a2      	add	r3, pc, #648	; (adr r3, 8009b90 <scaraKeyInit+0x778>)
 8009906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800990a:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 800990e:	f7f6 ff9d 	bl	800084c <__aeabi_ddiv>
 8009912:	4603      	mov	r3, r0
 8009914:	460c      	mov	r4, r1
 8009916:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800991a:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_TASK;
 800991e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009922:	2200      	movs	r2, #0
 8009924:	735a      	strb	r2, [r3, #13]
		cmd.path_type = DUTY_PATH_LINE;
 8009926:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800992a:	2200      	movs	r2, #0
 800992c:	739a      	strb	r2, [r3, #14]
		cmd.target_point.x 		= 0;
 800992e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009932:	f04f 0300 	mov.w	r3, #0
 8009936:	f04f 0400 	mov.w	r4, #0
 800993a:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		cmd.target_point.y 		= 0;
 800993e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009942:	f04f 0300 	mov.w	r3, #0
 8009946:	f04f 0400 	mov.w	r4, #0
 800994a:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		cmd.target_point.z 		= s;
 800994e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009952:	e9d7 3482 	ldrd	r3, r4, [r7, #520]	; 0x208
 8009956:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
		cmd.target_point.roll 	= 0;
 800995a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800995e:	f04f 0300 	mov.w	r3, #0
 8009962:	f04f 0400 	mov.w	r4, #0
 8009966:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		v_current = positionCurrent.v_3d;
 800996a:	4b8f      	ldr	r3, [pc, #572]	; (8009ba8 <scaraKeyInit+0x790>)
 800996c:	e9d3 342a 	ldrd	r3, r4, [r3, #168]	; 0xa8
 8009970:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.task.trajectory_3d.lspb);
 8009974:	4b8d      	ldr	r3, [pc, #564]	; (8009bac <scaraKeyInit+0x794>)
 8009976:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 800997a:	f000 bd4f 	b.w	800a41c <scaraKeyInit+0x1004>
	case SCARA_KEY_Z_DEC:
	{
		s = SHIFT_3D*speed;
 800997e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	ee07 3a90 	vmov	s15, r3
 8009988:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800998c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8009990:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009994:	ee17 0a90 	vmov	r0, s15
 8009998:	f7f6 fdd6 	bl	8000548 <__aeabi_f2d>
 800999c:	4603      	mov	r3, r0
 800999e:	460c      	mov	r4, r1
 80099a0:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 80099a4:	a376      	add	r3, pc, #472	; (adr r3, 8009b80 <scaraKeyInit+0x768>)
 80099a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099aa:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 80099ae:	f7f6 ff4d 	bl	800084c <__aeabi_ddiv>
 80099b2:	4603      	mov	r3, r0
 80099b4:	460c      	mov	r4, r1
 80099b6:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 80099ba:	a373      	add	r3, pc, #460	; (adr r3, 8009b88 <scaraKeyInit+0x770>)
 80099bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c0:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 80099c4:	f7f6 ff42 	bl	800084c <__aeabi_ddiv>
 80099c8:	4603      	mov	r3, r0
 80099ca:	460c      	mov	r4, r1
 80099cc:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_3D);
 80099d0:	a36f      	add	r3, pc, #444	; (adr r3, 8009b90 <scaraKeyInit+0x778>)
 80099d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d6:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 80099da:	f7f6 ff37 	bl	800084c <__aeabi_ddiv>
 80099de:	4603      	mov	r3, r0
 80099e0:	460c      	mov	r4, r1
 80099e2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80099e6:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_3D);
 80099ea:	a369      	add	r3, pc, #420	; (adr r3, 8009b90 <scaraKeyInit+0x778>)
 80099ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f0:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 80099f4:	f7f6 ff2a 	bl	800084c <__aeabi_ddiv>
 80099f8:	4603      	mov	r3, r0
 80099fa:	460c      	mov	r4, r1
 80099fc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009a00:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_TASK;
 8009a04:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009a08:	2200      	movs	r2, #0
 8009a0a:	735a      	strb	r2, [r3, #13]
		cmd.path_type = DUTY_PATH_LINE;
 8009a0c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009a10:	2200      	movs	r2, #0
 8009a12:	739a      	strb	r2, [r3, #14]
		cmd.target_point.x 		= 0;
 8009a14:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009a18:	f04f 0300 	mov.w	r3, #0
 8009a1c:	f04f 0400 	mov.w	r4, #0
 8009a20:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		cmd.target_point.y 		= 0;
 8009a24:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009a28:	f04f 0300 	mov.w	r3, #0
 8009a2c:	f04f 0400 	mov.w	r4, #0
 8009a30:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		cmd.target_point.z 		= -s;
 8009a34:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8009a38:	623b      	str	r3, [r7, #32]
 8009a3a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8009a3e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009a42:	627b      	str	r3, [r7, #36]	; 0x24
 8009a44:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009a48:	ed97 7b08 	vldr	d7, [r7, #32]
 8009a4c:	ed83 7b20 	vstr	d7, [r3, #128]	; 0x80
		cmd.target_point.roll 	= 0;
 8009a50:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009a54:	f04f 0300 	mov.w	r3, #0
 8009a58:	f04f 0400 	mov.w	r4, #0
 8009a5c:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		v_current = positionCurrent.v_3d;
 8009a60:	4b51      	ldr	r3, [pc, #324]	; (8009ba8 <scaraKeyInit+0x790>)
 8009a62:	e9d3 342a 	ldrd	r3, r4, [r3, #168]	; 0xa8
 8009a66:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.task.trajectory_3d.lspb);
 8009a6a:	4b50      	ldr	r3, [pc, #320]	; (8009bac <scaraKeyInit+0x794>)
 8009a6c:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 8009a70:	f000 bcd4 	b.w	800a41c <scaraKeyInit+0x1004>
	case SCARA_KEY_ROLL_INC:
	{
		s = SHIFT_ROLL*speed;
 8009a74:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	ee07 3a90 	vmov	s15, r3
 8009a7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a82:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8009bb8 <scaraKeyInit+0x7a0>
 8009a86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009a8a:	ee17 0a90 	vmov	r0, s15
 8009a8e:	f7f6 fd5b 	bl	8000548 <__aeabi_f2d>
 8009a92:	4603      	mov	r3, r0
 8009a94:	460c      	mov	r4, r1
 8009a96:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 8009a9a:	a339      	add	r3, pc, #228	; (adr r3, 8009b80 <scaraKeyInit+0x768>)
 8009a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa0:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009aa4:	f7f6 fed2 	bl	800084c <__aeabi_ddiv>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	460c      	mov	r4, r1
 8009aac:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 8009ab0:	a335      	add	r3, pc, #212	; (adr r3, 8009b88 <scaraKeyInit+0x770>)
 8009ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab6:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009aba:	f7f6 fec7 	bl	800084c <__aeabi_ddiv>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	460c      	mov	r4, r1
 8009ac2:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_ROLL);
 8009ac6:	a334      	add	r3, pc, #208	; (adr r3, 8009b98 <scaraKeyInit+0x780>)
 8009ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009acc:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009ad0:	f7f6 febc 	bl	800084c <__aeabi_ddiv>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	460c      	mov	r4, r1
 8009ad8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009adc:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_ROLL);
 8009ae0:	a32d      	add	r3, pc, #180	; (adr r3, 8009b98 <scaraKeyInit+0x780>)
 8009ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae6:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 8009aea:	f7f6 feaf 	bl	800084c <__aeabi_ddiv>
 8009aee:	4603      	mov	r3, r0
 8009af0:	460c      	mov	r4, r1
 8009af2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009af6:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_TASK;
 8009afa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009afe:	2200      	movs	r2, #0
 8009b00:	735a      	strb	r2, [r3, #13]
		cmd.path_type = DUTY_PATH_LINE;
 8009b02:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009b06:	2200      	movs	r2, #0
 8009b08:	739a      	strb	r2, [r3, #14]
		cmd.target_point.x 		= 0;
 8009b0a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009b0e:	f04f 0300 	mov.w	r3, #0
 8009b12:	f04f 0400 	mov.w	r4, #0
 8009b16:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		cmd.target_point.y 		= 0;
 8009b1a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009b1e:	f04f 0300 	mov.w	r3, #0
 8009b22:	f04f 0400 	mov.w	r4, #0
 8009b26:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		cmd.target_point.z 		= 0;
 8009b2a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009b2e:	f04f 0300 	mov.w	r3, #0
 8009b32:	f04f 0400 	mov.w	r4, #0
 8009b36:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
		cmd.target_point.roll 	= s*180/PI;
 8009b3a:	f04f 0200 	mov.w	r2, #0
 8009b3e:	4b1c      	ldr	r3, [pc, #112]	; (8009bb0 <scaraKeyInit+0x798>)
 8009b40:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009b44:	f7f6 fd58 	bl	80005f8 <__aeabi_dmul>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	460c      	mov	r4, r1
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	4621      	mov	r1, r4
 8009b50:	a313      	add	r3, pc, #76	; (adr r3, 8009ba0 <scaraKeyInit+0x788>)
 8009b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b56:	f7f6 fe79 	bl	800084c <__aeabi_ddiv>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	460c      	mov	r4, r1
 8009b5e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009b62:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		v_current = positionCurrent.v_roll;
 8009b66:	4b10      	ldr	r3, [pc, #64]	; (8009ba8 <scaraKeyInit+0x790>)
 8009b68:	e9d3 342c 	ldrd	r3, r4, [r3, #176]	; 0xb0
 8009b6c:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.task.trajectory_roll.lspb);
 8009b70:	4b10      	ldr	r3, [pc, #64]	; (8009bb4 <scaraKeyInit+0x79c>)
 8009b72:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 8009b76:	f000 bc51 	b.w	800a41c <scaraKeyInit+0x1004>
 8009b7a:	bf00      	nop
 8009b7c:	f3af 8000 	nop.w
 8009b80:	60000000 	.word	0x60000000
 8009b84:	3fedf3b6 	.word	0x3fedf3b6
 8009b88:	40000000 	.word	0x40000000
 8009b8c:	3fd0e560 	.word	0x3fd0e560
 8009b90:	00000000 	.word	0x00000000
 8009b94:	405c2000 	.word	0x405c2000
 8009b98:	14000000 	.word	0x14000000
 8009b9c:	4000f6f0 	.word	0x4000f6f0
 8009ba0:	60000000 	.word	0x60000000
 8009ba4:	400921fb 	.word	0x400921fb
 8009ba8:	20005e38 	.word	0x20005e38
 8009bac:	20005490 	.word	0x20005490
 8009bb0:	40668000 	.word	0x40668000
 8009bb4:	200055e8 	.word	0x200055e8
 8009bb8:	3d567750 	.word	0x3d567750
	case SCARA_KEY_ROLL_DEC:
	{
		s = SHIFT_ROLL*speed;
 8009bbc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	ee07 3a90 	vmov	s15, r3
 8009bc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009bca:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8009bb8 <scaraKeyInit+0x7a0>
 8009bce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009bd2:	ee17 0a90 	vmov	r0, s15
 8009bd6:	f7f6 fcb7 	bl	8000548 <__aeabi_f2d>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	460c      	mov	r4, r1
 8009bde:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 8009be2:	a3af      	add	r3, pc, #700	; (adr r3, 8009ea0 <scaraKeyInit+0xa88>)
 8009be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be8:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009bec:	f7f6 fe2e 	bl	800084c <__aeabi_ddiv>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	460c      	mov	r4, r1
 8009bf4:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 8009bf8:	a3ab      	add	r3, pc, #684	; (adr r3, 8009ea8 <scaraKeyInit+0xa90>)
 8009bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bfe:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009c02:	f7f6 fe23 	bl	800084c <__aeabi_ddiv>
 8009c06:	4603      	mov	r3, r0
 8009c08:	460c      	mov	r4, r1
 8009c0a:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_ROLL);
 8009c0e:	a3a8      	add	r3, pc, #672	; (adr r3, 8009eb0 <scaraKeyInit+0xa98>)
 8009c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c14:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009c18:	f7f6 fe18 	bl	800084c <__aeabi_ddiv>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	460c      	mov	r4, r1
 8009c20:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009c24:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_ROLL);
 8009c28:	a3a1      	add	r3, pc, #644	; (adr r3, 8009eb0 <scaraKeyInit+0xa98>)
 8009c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c2e:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 8009c32:	f7f6 fe0b 	bl	800084c <__aeabi_ddiv>
 8009c36:	4603      	mov	r3, r0
 8009c38:	460c      	mov	r4, r1
 8009c3a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009c3e:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_TASK;
 8009c42:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009c46:	2200      	movs	r2, #0
 8009c48:	735a      	strb	r2, [r3, #13]
		cmd.path_type = DUTY_PATH_LINE;
 8009c4a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009c4e:	2200      	movs	r2, #0
 8009c50:	739a      	strb	r2, [r3, #14]
		cmd.target_point.x 		= 0;
 8009c52:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009c56:	f04f 0300 	mov.w	r3, #0
 8009c5a:	f04f 0400 	mov.w	r4, #0
 8009c5e:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		cmd.target_point.y 		= 0;
 8009c62:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009c66:	f04f 0300 	mov.w	r3, #0
 8009c6a:	f04f 0400 	mov.w	r4, #0
 8009c6e:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		cmd.target_point.z 		= 0;
 8009c72:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009c76:	f04f 0300 	mov.w	r3, #0
 8009c7a:	f04f 0400 	mov.w	r4, #0
 8009c7e:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
		cmd.target_point.roll 	= -s*180/PI;
 8009c82:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8009c86:	61bb      	str	r3, [r7, #24]
 8009c88:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8009c8c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009c90:	61fb      	str	r3, [r7, #28]
 8009c92:	f04f 0200 	mov.w	r2, #0
 8009c96:	4b88      	ldr	r3, [pc, #544]	; (8009eb8 <scaraKeyInit+0xaa0>)
 8009c98:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009c9c:	f7f6 fcac 	bl	80005f8 <__aeabi_dmul>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	460c      	mov	r4, r1
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	4621      	mov	r1, r4
 8009ca8:	a37b      	add	r3, pc, #492	; (adr r3, 8009e98 <scaraKeyInit+0xa80>)
 8009caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cae:	f7f6 fdcd 	bl	800084c <__aeabi_ddiv>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	460c      	mov	r4, r1
 8009cb6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009cba:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		v_current = positionCurrent.v_roll;
 8009cbe:	4b7f      	ldr	r3, [pc, #508]	; (8009ebc <scaraKeyInit+0xaa4>)
 8009cc0:	e9d3 342c 	ldrd	r3, r4, [r3, #176]	; 0xb0
 8009cc4:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.task.trajectory_roll.lspb);
 8009cc8:	4b7d      	ldr	r3, [pc, #500]	; (8009ec0 <scaraKeyInit+0xaa8>)
 8009cca:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 8009cce:	e3a5      	b.n	800a41c <scaraKeyInit+0x1004>
	case SCARA_KEY_VAR0_INC:
	{
		s = SHIFT_VAR0*speed;
 8009cd0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	ee07 3a90 	vmov	s15, r3
 8009cda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009cde:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8009ec8 <scaraKeyInit+0xab0>
 8009ce2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009ce6:	ee17 0a90 	vmov	r0, s15
 8009cea:	f7f6 fc2d 	bl	8000548 <__aeabi_f2d>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	460c      	mov	r4, r1
 8009cf2:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 8009cf6:	a36a      	add	r3, pc, #424	; (adr r3, 8009ea0 <scaraKeyInit+0xa88>)
 8009cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cfc:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009d00:	f7f6 fda4 	bl	800084c <__aeabi_ddiv>
 8009d04:	4603      	mov	r3, r0
 8009d06:	460c      	mov	r4, r1
 8009d08:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 8009d0c:	a366      	add	r3, pc, #408	; (adr r3, 8009ea8 <scaraKeyInit+0xa90>)
 8009d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d12:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009d16:	f7f6 fd99 	bl	800084c <__aeabi_ddiv>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	460c      	mov	r4, r1
 8009d1e:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_J0);
 8009d22:	a363      	add	r3, pc, #396	; (adr r3, 8009eb0 <scaraKeyInit+0xa98>)
 8009d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d28:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009d2c:	f7f6 fd8e 	bl	800084c <__aeabi_ddiv>
 8009d30:	4603      	mov	r3, r0
 8009d32:	460c      	mov	r4, r1
 8009d34:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009d38:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_J0);
 8009d3c:	a35c      	add	r3, pc, #368	; (adr r3, 8009eb0 <scaraKeyInit+0xa98>)
 8009d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d42:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 8009d46:	f7f6 fd81 	bl	800084c <__aeabi_ddiv>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	460c      	mov	r4, r1
 8009d4e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009d52:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_JOINT;
 8009d56:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	735a      	strb	r2, [r3, #13]
		cmd.joint_type = DUTY_JOINT_SINGLE;
 8009d5e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009d62:	2200      	movs	r2, #0
 8009d64:	73da      	strb	r2, [r3, #15]
		cmd.sub_para_int 	= 0;
 8009d66:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	615a      	str	r2, [r3, #20]
		cmd.sub_para_double = s*180/PI;
 8009d6e:	f04f 0200 	mov.w	r2, #0
 8009d72:	4b51      	ldr	r3, [pc, #324]	; (8009eb8 <scaraKeyInit+0xaa0>)
 8009d74:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009d78:	f7f6 fc3e 	bl	80005f8 <__aeabi_dmul>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	460c      	mov	r4, r1
 8009d80:	4618      	mov	r0, r3
 8009d82:	4621      	mov	r1, r4
 8009d84:	a344      	add	r3, pc, #272	; (adr r3, 8009e98 <scaraKeyInit+0xa80>)
 8009d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d8a:	f7f6 fd5f 	bl	800084c <__aeabi_ddiv>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	460c      	mov	r4, r1
 8009d92:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009d96:	e9c2 3406 	strd	r3, r4, [r2, #24]
		v_current = positionCurrent.v_theta1;
 8009d9a:	4b48      	ldr	r3, [pc, #288]	; (8009ebc <scaraKeyInit+0xaa4>)
 8009d9c:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 8009da0:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.joint.trajectory[0].lspb);
 8009da4:	4b47      	ldr	r3, [pc, #284]	; (8009ec4 <scaraKeyInit+0xaac>)
 8009da6:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 8009daa:	e337      	b.n	800a41c <scaraKeyInit+0x1004>
	case SCARA_KEY_VAR0_DEC:
	{
		s = SHIFT_VAR0*speed;
 8009dac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	ee07 3a90 	vmov	s15, r3
 8009db6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009dba:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8009ec8 <scaraKeyInit+0xab0>
 8009dbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009dc2:	ee17 0a90 	vmov	r0, s15
 8009dc6:	f7f6 fbbf 	bl	8000548 <__aeabi_f2d>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	460c      	mov	r4, r1
 8009dce:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 8009dd2:	a333      	add	r3, pc, #204	; (adr r3, 8009ea0 <scaraKeyInit+0xa88>)
 8009dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd8:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009ddc:	f7f6 fd36 	bl	800084c <__aeabi_ddiv>
 8009de0:	4603      	mov	r3, r0
 8009de2:	460c      	mov	r4, r1
 8009de4:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 8009de8:	a32f      	add	r3, pc, #188	; (adr r3, 8009ea8 <scaraKeyInit+0xa90>)
 8009dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dee:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009df2:	f7f6 fd2b 	bl	800084c <__aeabi_ddiv>
 8009df6:	4603      	mov	r3, r0
 8009df8:	460c      	mov	r4, r1
 8009dfa:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_J0);
 8009dfe:	a32c      	add	r3, pc, #176	; (adr r3, 8009eb0 <scaraKeyInit+0xa98>)
 8009e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e04:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009e08:	f7f6 fd20 	bl	800084c <__aeabi_ddiv>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	460c      	mov	r4, r1
 8009e10:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009e14:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_J0);
 8009e18:	a325      	add	r3, pc, #148	; (adr r3, 8009eb0 <scaraKeyInit+0xa98>)
 8009e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e1e:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 8009e22:	f7f6 fd13 	bl	800084c <__aeabi_ddiv>
 8009e26:	4603      	mov	r3, r0
 8009e28:	460c      	mov	r4, r1
 8009e2a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009e2e:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_JOINT;
 8009e32:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009e36:	2201      	movs	r2, #1
 8009e38:	735a      	strb	r2, [r3, #13]
		cmd.joint_type = DUTY_JOINT_SINGLE;
 8009e3a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009e3e:	2200      	movs	r2, #0
 8009e40:	73da      	strb	r2, [r3, #15]
		cmd.sub_para_int 	= 0;
 8009e42:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009e46:	2200      	movs	r2, #0
 8009e48:	615a      	str	r2, [r3, #20]
		cmd.sub_para_double = -s*180/PI;
 8009e4a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8009e4e:	613b      	str	r3, [r7, #16]
 8009e50:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8009e54:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009e58:	617b      	str	r3, [r7, #20]
 8009e5a:	f04f 0200 	mov.w	r2, #0
 8009e5e:	4b16      	ldr	r3, [pc, #88]	; (8009eb8 <scaraKeyInit+0xaa0>)
 8009e60:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009e64:	f7f6 fbc8 	bl	80005f8 <__aeabi_dmul>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	460c      	mov	r4, r1
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	4621      	mov	r1, r4
 8009e70:	a309      	add	r3, pc, #36	; (adr r3, 8009e98 <scaraKeyInit+0xa80>)
 8009e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e76:	f7f6 fce9 	bl	800084c <__aeabi_ddiv>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	460c      	mov	r4, r1
 8009e7e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009e82:	e9c2 3406 	strd	r3, r4, [r2, #24]
		v_current = positionCurrent.v_theta1;
 8009e86:	4b0d      	ldr	r3, [pc, #52]	; (8009ebc <scaraKeyInit+0xaa4>)
 8009e88:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 8009e8c:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.joint.trajectory[0].lspb);
 8009e90:	4b0c      	ldr	r3, [pc, #48]	; (8009ec4 <scaraKeyInit+0xaac>)
 8009e92:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 8009e96:	e2c1      	b.n	800a41c <scaraKeyInit+0x1004>
 8009e98:	60000000 	.word	0x60000000
 8009e9c:	400921fb 	.word	0x400921fb
 8009ea0:	60000000 	.word	0x60000000
 8009ea4:	3fedf3b6 	.word	0x3fedf3b6
 8009ea8:	40000000 	.word	0x40000000
 8009eac:	3fd0e560 	.word	0x3fd0e560
 8009eb0:	14000000 	.word	0x14000000
 8009eb4:	4000f6f0 	.word	0x4000f6f0
 8009eb8:	40668000 	.word	0x40668000
 8009ebc:	20005e38 	.word	0x20005e38
 8009ec0:	200055e8 	.word	0x200055e8
 8009ec4:	20005748 	.word	0x20005748
 8009ec8:	3d567750 	.word	0x3d567750
	case SCARA_KEY_VAR1_INC:
	{
		s = SHIFT_VAR1*speed;
 8009ecc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	ee07 3a90 	vmov	s15, r3
 8009ed6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009eda:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8009ec8 <scaraKeyInit+0xab0>
 8009ede:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009ee2:	ee17 0a90 	vmov	r0, s15
 8009ee6:	f7f6 fb2f 	bl	8000548 <__aeabi_f2d>
 8009eea:	4603      	mov	r3, r0
 8009eec:	460c      	mov	r4, r1
 8009eee:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 8009ef2:	a3cb      	add	r3, pc, #812	; (adr r3, 800a220 <scaraKeyInit+0xe08>)
 8009ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef8:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009efc:	f7f6 fca6 	bl	800084c <__aeabi_ddiv>
 8009f00:	4603      	mov	r3, r0
 8009f02:	460c      	mov	r4, r1
 8009f04:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 8009f08:	a3c7      	add	r3, pc, #796	; (adr r3, 800a228 <scaraKeyInit+0xe10>)
 8009f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f0e:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009f12:	f7f6 fc9b 	bl	800084c <__aeabi_ddiv>
 8009f16:	4603      	mov	r3, r0
 8009f18:	460c      	mov	r4, r1
 8009f1a:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_J1);
 8009f1e:	a3c4      	add	r3, pc, #784	; (adr r3, 800a230 <scaraKeyInit+0xe18>)
 8009f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f24:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009f28:	f7f6 fc90 	bl	800084c <__aeabi_ddiv>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	460c      	mov	r4, r1
 8009f30:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009f34:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_J1);
 8009f38:	a3bd      	add	r3, pc, #756	; (adr r3, 800a230 <scaraKeyInit+0xe18>)
 8009f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f3e:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 8009f42:	f7f6 fc83 	bl	800084c <__aeabi_ddiv>
 8009f46:	4603      	mov	r3, r0
 8009f48:	460c      	mov	r4, r1
 8009f4a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009f4e:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_JOINT;
 8009f52:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009f56:	2201      	movs	r2, #1
 8009f58:	735a      	strb	r2, [r3, #13]
		cmd.joint_type = DUTY_JOINT_SINGLE;
 8009f5a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009f5e:	2200      	movs	r2, #0
 8009f60:	73da      	strb	r2, [r3, #15]
		cmd.sub_para_int 	= 1;
 8009f62:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009f66:	2201      	movs	r2, #1
 8009f68:	615a      	str	r2, [r3, #20]
		cmd.sub_para_double = s*180/PI;
 8009f6a:	f04f 0200 	mov.w	r2, #0
 8009f6e:	4bb4      	ldr	r3, [pc, #720]	; (800a240 <scaraKeyInit+0xe28>)
 8009f70:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009f74:	f7f6 fb40 	bl	80005f8 <__aeabi_dmul>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	460c      	mov	r4, r1
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	4621      	mov	r1, r4
 8009f80:	a3a5      	add	r3, pc, #660	; (adr r3, 800a218 <scaraKeyInit+0xe00>)
 8009f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f86:	f7f6 fc61 	bl	800084c <__aeabi_ddiv>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	460c      	mov	r4, r1
 8009f8e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8009f92:	e9c2 3406 	strd	r3, r4, [r2, #24]
		v_current = positionCurrent.v_theta2;
 8009f96:	4bab      	ldr	r3, [pc, #684]	; (800a244 <scaraKeyInit+0xe2c>)
 8009f98:	e9d3 3424 	ldrd	r3, r4, [r3, #144]	; 0x90
 8009f9c:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.joint.trajectory[1].lspb);
 8009fa0:	4ba9      	ldr	r3, [pc, #676]	; (800a248 <scaraKeyInit+0xe30>)
 8009fa2:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 8009fa6:	e239      	b.n	800a41c <scaraKeyInit+0x1004>
	case SCARA_KEY_VAR1_DEC:
	{
		s = SHIFT_VAR1*speed;
 8009fa8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	ee07 3a90 	vmov	s15, r3
 8009fb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009fb6:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 800a250 <scaraKeyInit+0xe38>
 8009fba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009fbe:	ee17 0a90 	vmov	r0, s15
 8009fc2:	f7f6 fac1 	bl	8000548 <__aeabi_f2d>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	460c      	mov	r4, r1
 8009fca:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 8009fce:	a394      	add	r3, pc, #592	; (adr r3, 800a220 <scaraKeyInit+0xe08>)
 8009fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd4:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8009fd8:	f7f6 fc38 	bl	800084c <__aeabi_ddiv>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	460c      	mov	r4, r1
 8009fe0:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 8009fe4:	a390      	add	r3, pc, #576	; (adr r3, 800a228 <scaraKeyInit+0xe10>)
 8009fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fea:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8009fee:	f7f6 fc2d 	bl	800084c <__aeabi_ddiv>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	460c      	mov	r4, r1
 8009ff6:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_J1);
 8009ffa:	a38d      	add	r3, pc, #564	; (adr r3, 800a230 <scaraKeyInit+0xe18>)
 8009ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a000:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 800a004:	f7f6 fc22 	bl	800084c <__aeabi_ddiv>
 800a008:	4603      	mov	r3, r0
 800a00a:	460c      	mov	r4, r1
 800a00c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a010:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_J1);
 800a014:	a386      	add	r3, pc, #536	; (adr r3, 800a230 <scaraKeyInit+0xe18>)
 800a016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a01a:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 800a01e:	f7f6 fc15 	bl	800084c <__aeabi_ddiv>
 800a022:	4603      	mov	r3, r0
 800a024:	460c      	mov	r4, r1
 800a026:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a02a:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_JOINT;
 800a02e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a032:	2201      	movs	r2, #1
 800a034:	735a      	strb	r2, [r3, #13]
		cmd.joint_type = DUTY_JOINT_SINGLE;
 800a036:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a03a:	2200      	movs	r2, #0
 800a03c:	73da      	strb	r2, [r3, #15]
		cmd.sub_para_int 	= 1;
 800a03e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a042:	2201      	movs	r2, #1
 800a044:	615a      	str	r2, [r3, #20]
		cmd.sub_para_double = -s*180/PI;
 800a046:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800a04a:	60bb      	str	r3, [r7, #8]
 800a04c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800a050:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a054:	60fb      	str	r3, [r7, #12]
 800a056:	f04f 0200 	mov.w	r2, #0
 800a05a:	4b79      	ldr	r3, [pc, #484]	; (800a240 <scaraKeyInit+0xe28>)
 800a05c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a060:	f7f6 faca 	bl	80005f8 <__aeabi_dmul>
 800a064:	4603      	mov	r3, r0
 800a066:	460c      	mov	r4, r1
 800a068:	4618      	mov	r0, r3
 800a06a:	4621      	mov	r1, r4
 800a06c:	a36a      	add	r3, pc, #424	; (adr r3, 800a218 <scaraKeyInit+0xe00>)
 800a06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a072:	f7f6 fbeb 	bl	800084c <__aeabi_ddiv>
 800a076:	4603      	mov	r3, r0
 800a078:	460c      	mov	r4, r1
 800a07a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a07e:	e9c2 3406 	strd	r3, r4, [r2, #24]
		v_current = positionCurrent.v_theta2;
 800a082:	4b70      	ldr	r3, [pc, #448]	; (800a244 <scaraKeyInit+0xe2c>)
 800a084:	e9d3 3424 	ldrd	r3, r4, [r3, #144]	; 0x90
 800a088:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.joint.trajectory[1].lspb);
 800a08c:	4b6e      	ldr	r3, [pc, #440]	; (800a248 <scaraKeyInit+0xe30>)
 800a08e:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 800a092:	e1c3      	b.n	800a41c <scaraKeyInit+0x1004>
	case SCARA_KEY_VAR2_INC:
	{
		s = SHIFT_VAR2*speed;
 800a094:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	ee07 3a90 	vmov	s15, r3
 800a09e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a0a2:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800a0a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a0aa:	ee17 0a90 	vmov	r0, s15
 800a0ae:	f7f6 fa4b 	bl	8000548 <__aeabi_f2d>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	460c      	mov	r4, r1
 800a0b6:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 800a0ba:	a359      	add	r3, pc, #356	; (adr r3, 800a220 <scaraKeyInit+0xe08>)
 800a0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c0:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 800a0c4:	f7f6 fbc2 	bl	800084c <__aeabi_ddiv>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	460c      	mov	r4, r1
 800a0cc:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 800a0d0:	a355      	add	r3, pc, #340	; (adr r3, 800a228 <scaraKeyInit+0xe10>)
 800a0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d6:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 800a0da:	f7f6 fbb7 	bl	800084c <__aeabi_ddiv>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	460c      	mov	r4, r1
 800a0e2:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_J2);
 800a0e6:	a354      	add	r3, pc, #336	; (adr r3, 800a238 <scaraKeyInit+0xe20>)
 800a0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ec:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 800a0f0:	f7f6 fbac 	bl	800084c <__aeabi_ddiv>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	460c      	mov	r4, r1
 800a0f8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a0fc:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_J2);
 800a100:	a34d      	add	r3, pc, #308	; (adr r3, 800a238 <scaraKeyInit+0xe20>)
 800a102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a106:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 800a10a:	f7f6 fb9f 	bl	800084c <__aeabi_ddiv>
 800a10e:	4603      	mov	r3, r0
 800a110:	460c      	mov	r4, r1
 800a112:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a116:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_JOINT;
 800a11a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a11e:	2201      	movs	r2, #1
 800a120:	735a      	strb	r2, [r3, #13]
		cmd.joint_type = DUTY_JOINT_SINGLE;
 800a122:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a126:	2200      	movs	r2, #0
 800a128:	73da      	strb	r2, [r3, #15]
		cmd.sub_para_int 	= 2;
 800a12a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a12e:	2202      	movs	r2, #2
 800a130:	615a      	str	r2, [r3, #20]
		cmd.sub_para_double = s;
 800a132:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a136:	e9d7 3482 	ldrd	r3, r4, [r7, #520]	; 0x208
 800a13a:	e9c2 3406 	strd	r3, r4, [r2, #24]
		v_current = positionCurrent.v_d3;
 800a13e:	4b41      	ldr	r3, [pc, #260]	; (800a244 <scaraKeyInit+0xe2c>)
 800a140:	e9d3 3426 	ldrd	r3, r4, [r3, #152]	; 0x98
 800a144:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.joint.trajectory[2].lspb);
 800a148:	4b40      	ldr	r3, [pc, #256]	; (800a24c <scaraKeyInit+0xe34>)
 800a14a:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 800a14e:	e165      	b.n	800a41c <scaraKeyInit+0x1004>
	case SCARA_KEY_VAR2_DEC:
	{
		s = SHIFT_VAR2*speed;
 800a150:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	ee07 3a90 	vmov	s15, r3
 800a15a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a15e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800a162:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a166:	ee17 0a90 	vmov	r0, s15
 800a16a:	f7f6 f9ed 	bl	8000548 <__aeabi_f2d>
 800a16e:	4603      	mov	r3, r0
 800a170:	460c      	mov	r4, r1
 800a172:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 800a176:	a32a      	add	r3, pc, #168	; (adr r3, 800a220 <scaraKeyInit+0xe08>)
 800a178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17c:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 800a180:	f7f6 fb64 	bl	800084c <__aeabi_ddiv>
 800a184:	4603      	mov	r3, r0
 800a186:	460c      	mov	r4, r1
 800a188:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 800a18c:	a326      	add	r3, pc, #152	; (adr r3, 800a228 <scaraKeyInit+0xe10>)
 800a18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a192:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 800a196:	f7f6 fb59 	bl	800084c <__aeabi_ddiv>
 800a19a:	4603      	mov	r3, r0
 800a19c:	460c      	mov	r4, r1
 800a19e:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_J2);
 800a1a2:	a325      	add	r3, pc, #148	; (adr r3, 800a238 <scaraKeyInit+0xe20>)
 800a1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a8:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 800a1ac:	f7f6 fb4e 	bl	800084c <__aeabi_ddiv>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	460c      	mov	r4, r1
 800a1b4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a1b8:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_J2);
 800a1bc:	a31e      	add	r3, pc, #120	; (adr r3, 800a238 <scaraKeyInit+0xe20>)
 800a1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c2:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 800a1c6:	f7f6 fb41 	bl	800084c <__aeabi_ddiv>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	460c      	mov	r4, r1
 800a1ce:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a1d2:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_JOINT;
 800a1d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a1da:	2201      	movs	r2, #1
 800a1dc:	735a      	strb	r2, [r3, #13]
		cmd.joint_type = DUTY_JOINT_SINGLE;
 800a1de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	73da      	strb	r2, [r3, #15]
		cmd.sub_para_int 	= 2;
 800a1e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a1ea:	2202      	movs	r2, #2
 800a1ec:	615a      	str	r2, [r3, #20]
		cmd.sub_para_double = -s;
 800a1ee:	f8d7 5208 	ldr.w	r5, [r7, #520]	; 0x208
 800a1f2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800a1f6:	f083 4600 	eor.w	r6, r3, #2147483648	; 0x80000000
 800a1fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a1fe:	e9c3 5606 	strd	r5, r6, [r3, #24]
		v_current = positionCurrent.v_d3;
 800a202:	4b10      	ldr	r3, [pc, #64]	; (800a244 <scaraKeyInit+0xe2c>)
 800a204:	e9d3 3426 	ldrd	r3, r4, [r3, #152]	; 0x98
 800a208:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.joint.trajectory[2].lspb);
 800a20c:	4b0f      	ldr	r3, [pc, #60]	; (800a24c <scaraKeyInit+0xe34>)
 800a20e:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 800a212:	e103      	b.n	800a41c <scaraKeyInit+0x1004>
 800a214:	f3af 8000 	nop.w
 800a218:	60000000 	.word	0x60000000
 800a21c:	400921fb 	.word	0x400921fb
 800a220:	60000000 	.word	0x60000000
 800a224:	3fedf3b6 	.word	0x3fedf3b6
 800a228:	40000000 	.word	0x40000000
 800a22c:	3fd0e560 	.word	0x3fd0e560
 800a230:	14000000 	.word	0x14000000
 800a234:	4000f6f0 	.word	0x4000f6f0
 800a238:	00000000 	.word	0x00000000
 800a23c:	405c2000 	.word	0x405c2000
 800a240:	40668000 	.word	0x40668000
 800a244:	20005e38 	.word	0x20005e38
 800a248:	200058a0 	.word	0x200058a0
 800a24c:	200059f8 	.word	0x200059f8
 800a250:	3d567750 	.word	0x3d567750
	case SCARA_KEY_VAR3_INC:
	{
		s = SHIFT_VAR3*speed;
 800a254:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	ee07 3a90 	vmov	s15, r3
 800a25e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a262:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 800a250 <scaraKeyInit+0xe38>
 800a266:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a26a:	ee17 0a90 	vmov	r0, s15
 800a26e:	f7f6 f96b 	bl	8000548 <__aeabi_f2d>
 800a272:	4603      	mov	r3, r0
 800a274:	460c      	mov	r4, r1
 800a276:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 800a27a:	a39b      	add	r3, pc, #620	; (adr r3, 800a4e8 <scaraKeyInit+0x10d0>)
 800a27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a280:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 800a284:	f7f6 fae2 	bl	800084c <__aeabi_ddiv>
 800a288:	4603      	mov	r3, r0
 800a28a:	460c      	mov	r4, r1
 800a28c:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 800a290:	a397      	add	r3, pc, #604	; (adr r3, 800a4f0 <scaraKeyInit+0x10d8>)
 800a292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a296:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 800a29a:	f7f6 fad7 	bl	800084c <__aeabi_ddiv>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	460c      	mov	r4, r1
 800a2a2:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_J3);
 800a2a6:	a394      	add	r3, pc, #592	; (adr r3, 800a4f8 <scaraKeyInit+0x10e0>)
 800a2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ac:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 800a2b0:	f7f6 facc 	bl	800084c <__aeabi_ddiv>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	460c      	mov	r4, r1
 800a2b8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a2bc:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_J3);
 800a2c0:	a38d      	add	r3, pc, #564	; (adr r3, 800a4f8 <scaraKeyInit+0x10e0>)
 800a2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c6:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 800a2ca:	f7f6 fabf 	bl	800084c <__aeabi_ddiv>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	460c      	mov	r4, r1
 800a2d2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a2d6:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_JOINT;
 800a2da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a2de:	2201      	movs	r2, #1
 800a2e0:	735a      	strb	r2, [r3, #13]
		cmd.joint_type = DUTY_JOINT_SINGLE;
 800a2e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	73da      	strb	r2, [r3, #15]
		cmd.sub_para_int 	= 3;
 800a2ea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a2ee:	2203      	movs	r2, #3
 800a2f0:	615a      	str	r2, [r3, #20]
		cmd.sub_para_double = s*180/PI;
 800a2f2:	f04f 0200 	mov.w	r2, #0
 800a2f6:	4b82      	ldr	r3, [pc, #520]	; (800a500 <scaraKeyInit+0x10e8>)
 800a2f8:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 800a2fc:	f7f6 f97c 	bl	80005f8 <__aeabi_dmul>
 800a300:	4603      	mov	r3, r0
 800a302:	460c      	mov	r4, r1
 800a304:	4618      	mov	r0, r3
 800a306:	4621      	mov	r1, r4
 800a308:	a375      	add	r3, pc, #468	; (adr r3, 800a4e0 <scaraKeyInit+0x10c8>)
 800a30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a30e:	f7f6 fa9d 	bl	800084c <__aeabi_ddiv>
 800a312:	4603      	mov	r3, r0
 800a314:	460c      	mov	r4, r1
 800a316:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a31a:	e9c2 3406 	strd	r3, r4, [r2, #24]
		v_current = positionCurrent.v_theta4;
 800a31e:	4b79      	ldr	r3, [pc, #484]	; (800a504 <scaraKeyInit+0x10ec>)
 800a320:	e9d3 3428 	ldrd	r3, r4, [r3, #160]	; 0xa0
 800a324:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.joint.trajectory[3].lspb);
 800a328:	4b77      	ldr	r3, [pc, #476]	; (800a508 <scaraKeyInit+0x10f0>)
 800a32a:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 800a32e:	e075      	b.n	800a41c <scaraKeyInit+0x1004>
	case SCARA_KEY_VAR3_DEC:
	{
		s = SHIFT_VAR3*speed;
 800a330:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	ee07 3a90 	vmov	s15, r3
 800a33a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a33e:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800a50c <scaraKeyInit+0x10f4>
 800a342:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a346:	ee17 0a90 	vmov	r0, s15
 800a34a:	f7f6 f8fd 	bl	8000548 <__aeabi_f2d>
 800a34e:	4603      	mov	r3, r0
 800a350:	460c      	mov	r4, r1
 800a352:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
		v = s/(SHIFT_PERIOD - SHIFT_T_UP);
 800a356:	a364      	add	r3, pc, #400	; (adr r3, 800a4e8 <scaraKeyInit+0x10d0>)
 800a358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a35c:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 800a360:	f7f6 fa74 	bl	800084c <__aeabi_ddiv>
 800a364:	4603      	mov	r3, r0
 800a366:	460c      	mov	r4, r1
 800a368:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
		a = v/(SHIFT_T_UP);
 800a36c:	a360      	add	r3, pc, #384	; (adr r3, 800a4f0 <scaraKeyInit+0x10d8>)
 800a36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a372:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 800a376:	f7f6 fa69 	bl	800084c <__aeabi_ddiv>
 800a37a:	4603      	mov	r3, r0
 800a37c:	460c      	mov	r4, r1
 800a37e:	e9c7 347e 	strd	r3, r4, [r7, #504]	; 0x1f8
		cmd.v_factor = v/(V_DESIGN_J3);
 800a382:	a35d      	add	r3, pc, #372	; (adr r3, 800a4f8 <scaraKeyInit+0x10e0>)
 800a384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a388:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 800a38c:	f7f6 fa5e 	bl	800084c <__aeabi_ddiv>
 800a390:	4603      	mov	r3, r0
 800a392:	460c      	mov	r4, r1
 800a394:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a398:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
		cmd.a_factor = a/(A_DESIGN_J3);
 800a39c:	a356      	add	r3, pc, #344	; (adr r3, 800a4f8 <scaraKeyInit+0x10e0>)
 800a39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a2:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 800a3a6:	f7f6 fa51 	bl	800084c <__aeabi_ddiv>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	460c      	mov	r4, r1
 800a3ae:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a3b2:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

		cmd.space_type = DUTY_SPACE_JOINT;
 800a3b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a3ba:	2201      	movs	r2, #1
 800a3bc:	735a      	strb	r2, [r3, #13]
		cmd.joint_type = DUTY_JOINT_SINGLE;
 800a3be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	73da      	strb	r2, [r3, #15]
		cmd.sub_para_int 	= 3;
 800a3c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a3ca:	2203      	movs	r2, #3
 800a3cc:	615a      	str	r2, [r3, #20]
		cmd.sub_para_double = -s*180/PI;
 800a3ce:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800a3d2:	603b      	str	r3, [r7, #0]
 800a3d4:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800a3d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a3dc:	607b      	str	r3, [r7, #4]
 800a3de:	f04f 0200 	mov.w	r2, #0
 800a3e2:	4b47      	ldr	r3, [pc, #284]	; (800a500 <scaraKeyInit+0x10e8>)
 800a3e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a3e8:	f7f6 f906 	bl	80005f8 <__aeabi_dmul>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	460c      	mov	r4, r1
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	4621      	mov	r1, r4
 800a3f4:	a33a      	add	r3, pc, #232	; (adr r3, 800a4e0 <scaraKeyInit+0x10c8>)
 800a3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3fa:	f7f6 fa27 	bl	800084c <__aeabi_ddiv>
 800a3fe:	4603      	mov	r3, r0
 800a400:	460c      	mov	r4, r1
 800a402:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a406:	e9c2 3406 	strd	r3, r4, [r2, #24]
		v_current = positionCurrent.v_theta4;
 800a40a:	4b3e      	ldr	r3, [pc, #248]	; (800a504 <scaraKeyInit+0x10ec>)
 800a40c:	e9d3 3428 	ldrd	r3, r4, [r3, #160]	; 0xa0
 800a410:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
		lspb = &(myDUTY.joint.trajectory[3].lspb);
 800a414:	4b3c      	ldr	r3, [pc, #240]	; (800a508 <scaraKeyInit+0x10f0>)
 800a416:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	}
			break;
 800a41a:	bf00      	nop
	}
	// Initial
	status = scaraInitDuty(cmd);
 800a41c:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800a420:	4668      	mov	r0, sp
 800a422:	f104 0310 	add.w	r3, r4, #16
 800a426:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800a42a:	4619      	mov	r1, r3
 800a42c:	f00b fa88 	bl	8015940 <memcpy>
 800a430:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800a434:	f7fa fa00 	bl	8004838 <scaraInitDuty>
 800a438:	4603      	mov	r3, r0
 800a43a:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
	if (status == SCARA_STATUS_OK) {
 800a43e:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 800a442:	2b00      	cmp	r3, #0
 800a444:	d141      	bne.n	800a4ca <scaraKeyInit+0x10b2>
		status = scaraTestDuty();
 800a446:	f7fe fcb3 	bl	8008db0 <scaraTestDuty>
 800a44a:	4603      	mov	r3, r0
 800a44c:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
		if (status != SCARA_STATUS_OK) {
 800a450:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 800a454:	2b00      	cmp	r3, #0
 800a456:	d002      	beq.n	800a45e <scaraKeyInit+0x1046>
			return status;
 800a458:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 800a45c:	e037      	b.n	800a4ce <scaraKeyInit+0x10b6>
		}
		// tinh lai run time so vs v hien tai
		*(runtime) = (v_current - lspb->v0)/(lspb->a_design);
 800a45e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800a462:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 800a466:	461a      	mov	r2, r3
 800a468:	4623      	mov	r3, r4
 800a46a:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 800a46e:	f7f5 ff0b 	bl	8000288 <__aeabi_dsub>
 800a472:	4603      	mov	r3, r0
 800a474:	460c      	mov	r4, r1
 800a476:	4618      	mov	r0, r3
 800a478:	4621      	mov	r1, r4
 800a47a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800a47e:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 800a482:	461a      	mov	r2, r3
 800a484:	4623      	mov	r3, r4
 800a486:	f7f6 f9e1 	bl	800084c <__aeabi_ddiv>
 800a48a:	4603      	mov	r3, r0
 800a48c:	460c      	mov	r4, r1
 800a48e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800a492:	6812      	ldr	r2, [r2, #0]
 800a494:	e9c2 3400 	strd	r3, r4, [r2]
		scaraFlowDuty(*runtime, &positionKeyInit, positionCurrent);
 800a498:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	ed93 8b00 	vldr	d8, [r3]
 800a4a2:	4c18      	ldr	r4, [pc, #96]	; (800a504 <scaraKeyInit+0x10ec>)
 800a4a4:	4668      	mov	r0, sp
 800a4a6:	f104 0308 	add.w	r3, r4, #8
 800a4aa:	22b0      	movs	r2, #176	; 0xb0
 800a4ac:	4619      	mov	r1, r3
 800a4ae:	f00b fa47 	bl	8015940 <memcpy>
 800a4b2:	e894 000c 	ldmia.w	r4, {r2, r3}
 800a4b6:	4816      	ldr	r0, [pc, #88]	; (800a510 <scaraKeyInit+0x10f8>)
 800a4b8:	eeb0 0a48 	vmov.f32	s0, s16
 800a4bc:	eef0 0a68 	vmov.f32	s1, s17
 800a4c0:	f7fc fe60 	bl	8007184 <scaraFlowDuty>
		return status;
 800a4c4:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 800a4c8:	e001      	b.n	800a4ce <scaraKeyInit+0x10b6>
	} else {
		return status;
 800a4ca:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
	}
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f507 7709 	add.w	r7, r7, #548	; 0x224
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	ecbd 8b02 	vpop	{d8}
 800a4da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4dc:	f3af 8000 	nop.w
 800a4e0:	60000000 	.word	0x60000000
 800a4e4:	400921fb 	.word	0x400921fb
 800a4e8:	60000000 	.word	0x60000000
 800a4ec:	3fedf3b6 	.word	0x3fedf3b6
 800a4f0:	40000000 	.word	0x40000000
 800a4f4:	3fd0e560 	.word	0x3fd0e560
 800a4f8:	6b259425 	.word	0x6b259425
 800a4fc:	40069b91 	.word	0x40069b91
 800a500:	40668000 	.word	0x40668000
 800a504:	20005e38 	.word	0x20005e38
 800a508:	20005b50 	.word	0x20005b50
 800a50c:	3d567750 	.word	0x3d567750
 800a510:	20005d80 	.word	0x20005d80

0800a514 <scaraKeyFlow>:

SCARA_StatusTypeDef		scaraKeyFlow(double time,
									SCARA_PositionTypeDef *pos_Next,
									SCARA_PositionTypeDef pos_Current) {
 800a514:	b082      	sub	sp, #8
 800a516:	b5b0      	push	{r4, r5, r7, lr}
 800a518:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 800a51c:	af2c      	add	r7, sp, #176	; 0xb0
 800a51e:	f107 0108 	add.w	r1, r7, #8
 800a522:	ed81 0b00 	vstr	d0, [r1]
 800a526:	1d39      	adds	r1, r7, #4
 800a528:	6008      	str	r0, [r1, #0]
 800a52a:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 800a52e:	e881 000c 	stmia.w	r1, {r2, r3}
	SCARA_StatusTypeDef status1, status2, status3, status4;
	SCARA_PositionTypeDef	positionCompute;
	// Update time
	positionCompute.t = time;
 800a532:	f107 0210 	add.w	r2, r7, #16
 800a536:	f107 0308 	add.w	r3, r7, #8
 800a53a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a53e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	/*---- Task space ----*/
	if ( DUTY_SPACE_TASK == myDUTY.space_type) {
 800a542:	4b74      	ldr	r3, [pc, #464]	; (800a714 <scaraKeyFlow+0x200>)
 800a544:	781b      	ldrb	r3, [r3, #0]
 800a546:	2b00      	cmp	r3, #0
 800a548:	f040 80ee 	bne.w	800a728 <scaraKeyFlow+0x214>
		double s, angle, x, y, z, v, v_angle;
		double s_shift, angle_shift;
		int8_t	dir_roll;
		//---Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.task.trajectory_3d.trajectory_type) {
 800a54c:	4b71      	ldr	r3, [pc, #452]	; (800a714 <scaraKeyFlow+0x200>)
 800a54e:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800a552:	2b00      	cmp	r3, #0
 800a554:	d12c      	bne.n	800a5b0 <scaraKeyFlow+0x9c>
			status1 = scaraFlowLSPB(&(myDUTY.task.trajectory_3d.lspb), time);
 800a556:	f107 0308 	add.w	r3, r7, #8
 800a55a:	ed93 0b00 	vldr	d0, [r3]
 800a55e:	486e      	ldr	r0, [pc, #440]	; (800a718 <scaraKeyFlow+0x204>)
 800a560:	f7fd fa7e 	bl	8007a60 <scaraFlowLSPB>
 800a564:	4603      	mov	r3, r0
 800a566:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
			status2 = scaraFlowLSPB(&(myDUTY.task.trajectory_roll.lspb), time);
 800a56a:	f107 0308 	add.w	r3, r7, #8
 800a56e:	ed93 0b00 	vldr	d0, [r3]
 800a572:	486a      	ldr	r0, [pc, #424]	; (800a71c <scaraKeyFlow+0x208>)
 800a574:	f7fd fa74 	bl	8007a60 <scaraFlowLSPB>
 800a578:	4603      	mov	r3, r0
 800a57a:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
			s = myDUTY.task.trajectory_3d.lspb.s_current;
 800a57e:	4b65      	ldr	r3, [pc, #404]	; (800a714 <scaraKeyFlow+0x200>)
 800a580:	e9d3 3464 	ldrd	r3, r4, [r3, #400]	; 0x190
 800a584:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
			v = myDUTY.task.trajectory_3d.lspb.v_current;
 800a588:	4b62      	ldr	r3, [pc, #392]	; (800a714 <scaraKeyFlow+0x200>)
 800a58a:	e9d3 3462 	ldrd	r3, r4, [r3, #392]	; 0x188
 800a58e:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
			angle = myDUTY.task.trajectory_roll.lspb.s_current;
 800a592:	4b60      	ldr	r3, [pc, #384]	; (800a714 <scaraKeyFlow+0x200>)
 800a594:	e9d3 34ba 	ldrd	r3, r4, [r3, #744]	; 0x2e8
 800a598:	e9c7 345c 	strd	r3, r4, [r7, #368]	; 0x170
			v_angle = myDUTY.task.trajectory_roll.lspb.v_current;
 800a59c:	4b5d      	ldr	r3, [pc, #372]	; (800a714 <scaraKeyFlow+0x200>)
 800a59e:	e9d3 34b8 	ldrd	r3, r4, [r3, #736]	; 0x2e0
 800a5a2:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			dir_roll = myDUTY.task.trajectory_roll.lspb.dir;
 800a5a6:	4b5b      	ldr	r3, [pc, #364]	; (800a714 <scaraKeyFlow+0x200>)
 800a5a8:	f893 3270 	ldrb.w	r3, [r3, #624]	; 0x270
 800a5ac:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
		}

		if ( SCARA_STATUS_OK != status1) {
 800a5b0:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d002      	beq.n	800a5be <scaraKeyFlow+0xaa>
			return status1;
 800a5b8:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a5bc:	e26b      	b.n	800aa96 <scaraKeyFlow+0x582>
		}
		if ( SCARA_STATUS_OK != status2) {
 800a5be:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d002      	beq.n	800a5cc <scaraKeyFlow+0xb8>
			return status2;
 800a5c6:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 800a5ca:	e264      	b.n	800aa96 <scaraKeyFlow+0x582>
		}

		// Shift q , q_roll
		s_shift = s - positionKeyInit.q;
 800a5cc:	4b54      	ldr	r3, [pc, #336]	; (800a720 <scaraKeyFlow+0x20c>)
 800a5ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a5d2:	461a      	mov	r2, r3
 800a5d4:	4623      	mov	r3, r4
 800a5d6:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 800a5da:	f7f5 fe55 	bl	8000288 <__aeabi_dsub>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	460c      	mov	r4, r1
 800a5e2:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
		angle_shift = angle - positionKeyInit.q_roll;
 800a5e6:	4b4e      	ldr	r3, [pc, #312]	; (800a720 <scaraKeyFlow+0x20c>)
 800a5e8:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800a5ec:	461a      	mov	r2, r3
 800a5ee:	4623      	mov	r3, r4
 800a5f0:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800a5f4:	f7f5 fe48 	bl	8000288 <__aeabi_dsub>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	460c      	mov	r4, r1
 800a5fc:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8

		//---Path flowing
			// Straight line
		if( DUTY_PATH_LINE == myDUTY.task.path.path_type) {
 800a600:	4b44      	ldr	r3, [pc, #272]	; (800a714 <scaraKeyFlow+0x200>)
 800a602:	7a1b      	ldrb	r3, [r3, #8]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d116      	bne.n	800a636 <scaraKeyFlow+0x122>
			status1 = scaraFlowLine(&(myDUTY.task.path.line), s_shift);//shift
 800a608:	ed97 0b34 	vldr	d0, [r7, #208]	; 0xd0
 800a60c:	4845      	ldr	r0, [pc, #276]	; (800a724 <scaraKeyFlow+0x210>)
 800a60e:	f7fd f917 	bl	8007840 <scaraFlowLine>
 800a612:	4603      	mov	r3, r0
 800a614:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
			x = myDUTY.task.path.line.x_current;
 800a618:	4b3e      	ldr	r3, [pc, #248]	; (800a714 <scaraKeyFlow+0x200>)
 800a61a:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 800a61e:	e9c7 345a 	strd	r3, r4, [r7, #360]	; 0x168
			y = myDUTY.task.path.line.y_current;
 800a622:	4b3c      	ldr	r3, [pc, #240]	; (800a714 <scaraKeyFlow+0x200>)
 800a624:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 800a628:	e9c7 3458 	strd	r3, r4, [r7, #352]	; 0x160
			z = myDUTY.task.path.line.z_current;
 800a62c:	4b39      	ldr	r3, [pc, #228]	; (800a714 <scaraKeyFlow+0x200>)
 800a62e:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 800a632:	e9c7 3456 	strd	r3, r4, [r7, #344]	; 0x158
		}

		positionCompute.x 		= x;
 800a636:	f107 0210 	add.w	r2, r7, #16
 800a63a:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 800a63e:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
		positionCompute.y		= y;
 800a642:	f107 0210 	add.w	r2, r7, #16
 800a646:	e9d7 3458 	ldrd	r3, r4, [r7, #352]	; 0x160
 800a64a:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
		positionCompute.z 		= z;
 800a64e:	f107 0210 	add.w	r2, r7, #16
 800a652:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	; 0x158
 800a656:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		positionCompute.roll 	= myDUTY.task.roll_start + angle_shift*dir_roll;// shift
 800a65a:	4b2e      	ldr	r3, [pc, #184]	; (800a714 <scaraKeyFlow+0x200>)
 800a65c:	e9d3 45f0 	ldrd	r4, r5, [r3, #960]	; 0x3c0
 800a660:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800a664:	4618      	mov	r0, r3
 800a666:	f7f5 ff5d 	bl	8000524 <__aeabi_i2d>
 800a66a:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800a66e:	f7f5 ffc3 	bl	80005f8 <__aeabi_dmul>
 800a672:	4602      	mov	r2, r0
 800a674:	460b      	mov	r3, r1
 800a676:	4620      	mov	r0, r4
 800a678:	4629      	mov	r1, r5
 800a67a:	f7f5 fe07 	bl	800028c <__adddf3>
 800a67e:	4603      	mov	r3, r0
 800a680:	460c      	mov	r4, r1
 800a682:	f107 0210 	add.w	r2, r7, #16
 800a686:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

		positionCompute.q		= s;
 800a68a:	f107 0210 	add.w	r2, r7, #16
 800a68e:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 800a692:	e9c2 3400 	strd	r3, r4, [r2]
		positionCompute.q_roll  = angle;
 800a696:	f107 0210 	add.w	r2, r7, #16
 800a69a:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 800a69e:	e9c2 3402 	strd	r3, r4, [r2, #8]

		positionCompute.v_3d    = v;
 800a6a2:	f107 0210 	add.w	r2, r7, #16
 800a6a6:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 800a6aa:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
		positionCompute.v_roll  = v_angle;
 800a6ae:	f107 0210 	add.w	r2, r7, #16
 800a6b2:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 800a6b6:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0

		positionCompute.total_time = myDUTY.time_total;
 800a6ba:	4b16      	ldr	r3, [pc, #88]	; (800a714 <scaraKeyFlow+0x200>)
 800a6bc:	f603 1348 	addw	r3, r3, #2376	; 0x948
 800a6c0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a6c4:	f107 0210 	add.w	r2, r7, #16
 800a6c8:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
		positionCompute.t		= time;
 800a6cc:	f107 0210 	add.w	r2, r7, #16
 800a6d0:	f107 0308 	add.w	r3, r7, #8
 800a6d4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a6d8:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		if ( FALSE == kinematicInverse(&positionCompute, pos_Current)) {
 800a6dc:	f107 0410 	add.w	r4, r7, #16
 800a6e0:	4668      	mov	r0, sp
 800a6e2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800a6e6:	22b0      	movs	r2, #176	; 0xb0
 800a6e8:	4619      	mov	r1, r3
 800a6ea:	f00b f929 	bl	8015940 <memcpy>
 800a6ee:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800a6f2:	cb0c      	ldmia	r3, {r2, r3}
 800a6f4:	4620      	mov	r0, r4
 800a6f6:	f7f8 fdab 	bl	8003250 <kinematicInverse>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d101      	bne.n	800a704 <scaraKeyFlow+0x1f0>
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800a700:	2307      	movs	r3, #7
 800a702:	e1c8      	b.n	800aa96 <scaraKeyFlow+0x582>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 800a704:	f107 0110 	add.w	r1, r7, #16
 800a708:	1d3b      	adds	r3, r7, #4
 800a70a:	22b8      	movs	r2, #184	; 0xb8
 800a70c:	6818      	ldr	r0, [r3, #0]
 800a70e:	f00b f917 	bl	8015940 <memcpy>
 800a712:	e1bf      	b.n	800aa94 <scaraKeyFlow+0x580>
 800a714:	20005378 	.word	0x20005378
 800a718:	20005490 	.word	0x20005490
 800a71c:	200055e8 	.word	0x200055e8
 800a720:	20005d80 	.word	0x20005d80
 800a724:	20005388 	.word	0x20005388
		}

	/*---- Joint space -----*/
	} else if (DUTY_SPACE_JOINT == myDUTY.space_type) {
 800a728:	4b4c      	ldr	r3, [pc, #304]	; (800a85c <scaraKeyFlow+0x348>)
 800a72a:	781b      	ldrb	r3, [r3, #0]
 800a72c:	2b01      	cmp	r3, #1
 800a72e:	f040 81af 	bne.w	800aa90 <scaraKeyFlow+0x57c>
		double v0, v1, v2, v3;
		double s0_shift, s1_shift, s2_shift, s3_shift;
		int8_t dir0, dir1, dir2, dir3;
		// Trajectory flowing
			// LSPB
		if( DUTY_TRAJECTORY_LSPB == myDUTY.joint.trajectory[0].trajectory_type) {
 800a732:	4b4a      	ldr	r3, [pc, #296]	; (800a85c <scaraKeyFlow+0x348>)
 800a734:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d173      	bne.n	800a824 <scaraKeyFlow+0x310>
			status1 = scaraFlowLSPB(&(myDUTY.joint.trajectory[0].lspb), time);
 800a73c:	f107 0308 	add.w	r3, r7, #8
 800a740:	ed93 0b00 	vldr	d0, [r3]
 800a744:	4846      	ldr	r0, [pc, #280]	; (800a860 <scaraKeyFlow+0x34c>)
 800a746:	f7fd f98b 	bl	8007a60 <scaraFlowLSPB>
 800a74a:	4603      	mov	r3, r0
 800a74c:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
			status2 = scaraFlowLSPB(&(myDUTY.joint.trajectory[1].lspb), time);
 800a750:	f107 0308 	add.w	r3, r7, #8
 800a754:	ed93 0b00 	vldr	d0, [r3]
 800a758:	4842      	ldr	r0, [pc, #264]	; (800a864 <scaraKeyFlow+0x350>)
 800a75a:	f7fd f981 	bl	8007a60 <scaraFlowLSPB>
 800a75e:	4603      	mov	r3, r0
 800a760:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
			status3 = scaraFlowLSPB(&(myDUTY.joint.trajectory[2].lspb), time);
 800a764:	f107 0308 	add.w	r3, r7, #8
 800a768:	ed93 0b00 	vldr	d0, [r3]
 800a76c:	483e      	ldr	r0, [pc, #248]	; (800a868 <scaraKeyFlow+0x354>)
 800a76e:	f7fd f977 	bl	8007a60 <scaraFlowLSPB>
 800a772:	4603      	mov	r3, r0
 800a774:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
			status4 = scaraFlowLSPB(&(myDUTY.joint.trajectory[3].lspb), time);
 800a778:	f107 0308 	add.w	r3, r7, #8
 800a77c:	ed93 0b00 	vldr	d0, [r3]
 800a780:	483a      	ldr	r0, [pc, #232]	; (800a86c <scaraKeyFlow+0x358>)
 800a782:	f7fd f96d 	bl	8007a60 <scaraFlowLSPB>
 800a786:	4603      	mov	r3, r0
 800a788:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184

			dir0 = myDUTY.joint.trajectory[0].lspb.dir;
 800a78c:	4b33      	ldr	r3, [pc, #204]	; (800a85c <scaraKeyFlow+0x348>)
 800a78e:	f893 33d0 	ldrb.w	r3, [r3, #976]	; 0x3d0
 800a792:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
			dir1 = myDUTY.joint.trajectory[1].lspb.dir;
 800a796:	4b31      	ldr	r3, [pc, #196]	; (800a85c <scaraKeyFlow+0x348>)
 800a798:	f893 3528 	ldrb.w	r3, [r3, #1320]	; 0x528
 800a79c:	f887 30fe 	strb.w	r3, [r7, #254]	; 0xfe
			dir2 = myDUTY.joint.trajectory[2].lspb.dir;
 800a7a0:	4b2e      	ldr	r3, [pc, #184]	; (800a85c <scaraKeyFlow+0x348>)
 800a7a2:	f893 3680 	ldrb.w	r3, [r3, #1664]	; 0x680
 800a7a6:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
			dir3 = myDUTY.joint.trajectory[3].lspb.dir;
 800a7aa:	4b2c      	ldr	r3, [pc, #176]	; (800a85c <scaraKeyFlow+0x348>)
 800a7ac:	f893 37d8 	ldrb.w	r3, [r3, #2008]	; 0x7d8
 800a7b0:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc

			s0 = myDUTY.joint.trajectory[0].lspb.s_current;
 800a7b4:	4b29      	ldr	r3, [pc, #164]	; (800a85c <scaraKeyFlow+0x348>)
 800a7b6:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 800a7ba:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a7be:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
			s1 = myDUTY.joint.trajectory[1].lspb.s_current;
 800a7c2:	4b26      	ldr	r3, [pc, #152]	; (800a85c <scaraKeyFlow+0x348>)
 800a7c4:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 800a7c8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a7cc:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
			s2 = myDUTY.joint.trajectory[2].lspb.s_current;
 800a7d0:	4b22      	ldr	r3, [pc, #136]	; (800a85c <scaraKeyFlow+0x348>)
 800a7d2:	f503 63df 	add.w	r3, r3, #1784	; 0x6f8
 800a7d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a7da:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
			s3 = myDUTY.joint.trajectory[3].lspb.s_current;
 800a7de:	4b1f      	ldr	r3, [pc, #124]	; (800a85c <scaraKeyFlow+0x348>)
 800a7e0:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 800a7e4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a7e8:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120

			v0 = myDUTY.joint.trajectory[0].lspb.v_current;
 800a7ec:	4b1b      	ldr	r3, [pc, #108]	; (800a85c <scaraKeyFlow+0x348>)
 800a7ee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a7f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a7f6:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
			v1 = myDUTY.joint.trajectory[1].lspb.v_current;
 800a7fa:	4b18      	ldr	r3, [pc, #96]	; (800a85c <scaraKeyFlow+0x348>)
 800a7fc:	f503 63b3 	add.w	r3, r3, #1432	; 0x598
 800a800:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a804:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
			v2 = myDUTY.joint.trajectory[2].lspb.v_current;
 800a808:	4b14      	ldr	r3, [pc, #80]	; (800a85c <scaraKeyFlow+0x348>)
 800a80a:	f503 63de 	add.w	r3, r3, #1776	; 0x6f0
 800a80e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a812:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
			v3 = myDUTY.joint.trajectory[3].lspb.v_current;
 800a816:	4b11      	ldr	r3, [pc, #68]	; (800a85c <scaraKeyFlow+0x348>)
 800a818:	f603 0348 	addw	r3, r3, #2120	; 0x848
 800a81c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a820:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100

		}
		// Check init status
		if ( SCARA_STATUS_OK != status1) {
 800a824:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d002      	beq.n	800a832 <scaraKeyFlow+0x31e>
			return status1;
 800a82c:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800a830:	e131      	b.n	800aa96 <scaraKeyFlow+0x582>
		}
		if ( SCARA_STATUS_OK != status2) {
 800a832:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 800a836:	2b00      	cmp	r3, #0
 800a838:	d002      	beq.n	800a840 <scaraKeyFlow+0x32c>
			return status2;
 800a83a:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 800a83e:	e12a      	b.n	800aa96 <scaraKeyFlow+0x582>
		}
		if ( SCARA_STATUS_OK != status3) {
 800a840:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 800a844:	2b00      	cmp	r3, #0
 800a846:	d002      	beq.n	800a84e <scaraKeyFlow+0x33a>
			return status3;
 800a848:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 800a84c:	e123      	b.n	800aa96 <scaraKeyFlow+0x582>
		}
		if ( SCARA_STATUS_OK != status4) {
 800a84e:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 800a852:	2b00      	cmp	r3, #0
 800a854:	d00c      	beq.n	800a870 <scaraKeyFlow+0x35c>
			return status4;
 800a856:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 800a85a:	e11c      	b.n	800aa96 <scaraKeyFlow+0x582>
 800a85c:	20005378 	.word	0x20005378
 800a860:	20005748 	.word	0x20005748
 800a864:	200058a0 	.word	0x200058a0
 800a868:	200059f8 	.word	0x200059f8
 800a86c:	20005b50 	.word	0x20005b50
		}
		// shift s0, s1, s2, s3
		s0_shift = s0 - positionKeyInit.q_theta1;
 800a870:	4b8d      	ldr	r3, [pc, #564]	; (800aaa8 <scaraKeyFlow+0x594>)
 800a872:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800a876:	461a      	mov	r2, r3
 800a878:	4623      	mov	r3, r4
 800a87a:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800a87e:	f7f5 fd03 	bl	8000288 <__aeabi_dsub>
 800a882:	4603      	mov	r3, r0
 800a884:	460c      	mov	r4, r1
 800a886:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
		s1_shift = s1 - positionKeyInit.q_theta2;
 800a88a:	4b87      	ldr	r3, [pc, #540]	; (800aaa8 <scaraKeyFlow+0x594>)
 800a88c:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 800a890:	461a      	mov	r2, r3
 800a892:	4623      	mov	r3, r4
 800a894:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 800a898:	f7f5 fcf6 	bl	8000288 <__aeabi_dsub>
 800a89c:	4603      	mov	r3, r0
 800a89e:	460c      	mov	r4, r1
 800a8a0:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
		s2_shift = s2 - positionKeyInit.q_d3;
 800a8a4:	4b80      	ldr	r3, [pc, #512]	; (800aaa8 <scaraKeyFlow+0x594>)
 800a8a6:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800a8aa:	461a      	mov	r2, r3
 800a8ac:	4623      	mov	r3, r4
 800a8ae:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800a8b2:	f7f5 fce9 	bl	8000288 <__aeabi_dsub>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	460c      	mov	r4, r1
 800a8ba:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
		s3_shift = s3 - positionKeyInit.q_theta4;
 800a8be:	4b7a      	ldr	r3, [pc, #488]	; (800aaa8 <scaraKeyFlow+0x594>)
 800a8c0:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 800a8c4:	461a      	mov	r2, r3
 800a8c6:	4623      	mov	r3, r4
 800a8c8:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 800a8cc:	f7f5 fcdc 	bl	8000288 <__aeabi_dsub>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	460c      	mov	r4, r1
 800a8d4:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8

		positionCompute.Theta1 	= myDUTY.joint.theta1_start + s0_shift*dir0;
 800a8d8:	4b74      	ldr	r3, [pc, #464]	; (800aaac <scaraKeyFlow+0x598>)
 800a8da:	f603 1328 	addw	r3, r3, #2344	; 0x928
 800a8de:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a8e2:	f997 30ff 	ldrsb.w	r3, [r7, #255]	; 0xff
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f7f5 fe1c 	bl	8000524 <__aeabi_i2d>
 800a8ec:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 800a8f0:	f7f5 fe82 	bl	80005f8 <__aeabi_dmul>
 800a8f4:	4602      	mov	r2, r0
 800a8f6:	460b      	mov	r3, r1
 800a8f8:	4620      	mov	r0, r4
 800a8fa:	4629      	mov	r1, r5
 800a8fc:	f7f5 fcc6 	bl	800028c <__adddf3>
 800a900:	4603      	mov	r3, r0
 800a902:	460c      	mov	r4, r1
 800a904:	f107 0210 	add.w	r2, r7, #16
 800a908:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
		positionCompute.Theta2 	= myDUTY.joint.theta2_start + s1_shift*dir1;
 800a90c:	4b67      	ldr	r3, [pc, #412]	; (800aaac <scaraKeyFlow+0x598>)
 800a90e:	f503 6313 	add.w	r3, r3, #2352	; 0x930
 800a912:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a916:	f997 30fe 	ldrsb.w	r3, [r7, #254]	; 0xfe
 800a91a:	4618      	mov	r0, r3
 800a91c:	f7f5 fe02 	bl	8000524 <__aeabi_i2d>
 800a920:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800a924:	f7f5 fe68 	bl	80005f8 <__aeabi_dmul>
 800a928:	4602      	mov	r2, r0
 800a92a:	460b      	mov	r3, r1
 800a92c:	4620      	mov	r0, r4
 800a92e:	4629      	mov	r1, r5
 800a930:	f7f5 fcac 	bl	800028c <__adddf3>
 800a934:	4603      	mov	r3, r0
 800a936:	460c      	mov	r4, r1
 800a938:	f107 0210 	add.w	r2, r7, #16
 800a93c:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
		positionCompute.D3 		= myDUTY.joint.d3_start 	+ s2_shift*dir2;
 800a940:	4b5a      	ldr	r3, [pc, #360]	; (800aaac <scaraKeyFlow+0x598>)
 800a942:	f603 1338 	addw	r3, r3, #2360	; 0x938
 800a946:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a94a:	f997 30fd 	ldrsb.w	r3, [r7, #253]	; 0xfd
 800a94e:	4618      	mov	r0, r3
 800a950:	f7f5 fde8 	bl	8000524 <__aeabi_i2d>
 800a954:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800a958:	f7f5 fe4e 	bl	80005f8 <__aeabi_dmul>
 800a95c:	4602      	mov	r2, r0
 800a95e:	460b      	mov	r3, r1
 800a960:	4620      	mov	r0, r4
 800a962:	4629      	mov	r1, r5
 800a964:	f7f5 fc92 	bl	800028c <__adddf3>
 800a968:	4603      	mov	r3, r0
 800a96a:	460c      	mov	r4, r1
 800a96c:	f107 0210 	add.w	r2, r7, #16
 800a970:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
		positionCompute.Theta4 	= myDUTY.joint.theta4_start + s3_shift*dir3;
 800a974:	4b4d      	ldr	r3, [pc, #308]	; (800aaac <scaraKeyFlow+0x598>)
 800a976:	f503 6314 	add.w	r3, r3, #2368	; 0x940
 800a97a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a97e:	f997 30fc 	ldrsb.w	r3, [r7, #252]	; 0xfc
 800a982:	4618      	mov	r0, r3
 800a984:	f7f5 fdce 	bl	8000524 <__aeabi_i2d>
 800a988:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800a98c:	f7f5 fe34 	bl	80005f8 <__aeabi_dmul>
 800a990:	4602      	mov	r2, r0
 800a992:	460b      	mov	r3, r1
 800a994:	4620      	mov	r0, r4
 800a996:	4629      	mov	r1, r5
 800a998:	f7f5 fc78 	bl	800028c <__adddf3>
 800a99c:	4603      	mov	r3, r0
 800a99e:	460c      	mov	r4, r1
 800a9a0:	f107 0210 	add.w	r2, r7, #16
 800a9a4:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

		positionCompute.v_theta1 	= v0;
 800a9a8:	f107 0210 	add.w	r2, r7, #16
 800a9ac:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 800a9b0:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
		positionCompute.v_theta2 	= v1;
 800a9b4:	f107 0210 	add.w	r2, r7, #16
 800a9b8:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 800a9bc:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
		positionCompute.v_d3 		= v2;
 800a9c0:	f107 0210 	add.w	r2, r7, #16
 800a9c4:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 800a9c8:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
		positionCompute.v_theta4 	= v3;
 800a9cc:	f107 0210 	add.w	r2, r7, #16
 800a9d0:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 800a9d4:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0

		positionCompute.q_theta1 = s0;
 800a9d8:	f107 0210 	add.w	r2, r7, #16
 800a9dc:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 800a9e0:	e9c2 3404 	strd	r3, r4, [r2, #16]
		positionCompute.q_theta2 = s1;
 800a9e4:	f107 0210 	add.w	r2, r7, #16
 800a9e8:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 800a9ec:	e9c2 3406 	strd	r3, r4, [r2, #24]
		positionCompute.q_d3	 = s2;
 800a9f0:	f107 0210 	add.w	r2, r7, #16
 800a9f4:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 800a9f8:	e9c2 3408 	strd	r3, r4, [r2, #32]
		positionCompute.q_theta4 = s3;
 800a9fc:	f107 0210 	add.w	r2, r7, #16
 800aa00:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 800aa04:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

		positionCompute.total_time = myDUTY.time_total;
 800aa08:	4b28      	ldr	r3, [pc, #160]	; (800aaac <scaraKeyFlow+0x598>)
 800aa0a:	f603 1348 	addw	r3, r3, #2376	; 0x948
 800aa0e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aa12:	f107 0210 	add.w	r2, r7, #16
 800aa16:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
		positionCompute.t		= time;
 800aa1a:	f107 0210 	add.w	r2, r7, #16
 800aa1e:	f107 0308 	add.w	r3, r7, #8
 800aa22:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aa26:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		// Check workspace
		if( SCARA_STATUS_OK != scaraCheckWorkSpace4(positionCompute.Theta1,
 800aa2a:	f107 0310 	add.w	r3, r7, #16
 800aa2e:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800aa32:	f107 0310 	add.w	r3, r7, #16
 800aa36:	ed93 6b1c 	vldr	d6, [r3, #112]	; 0x70
 800aa3a:	f107 0310 	add.w	r3, r7, #16
 800aa3e:	ed93 5b1e 	vldr	d5, [r3, #120]	; 0x78
 800aa42:	f107 0310 	add.w	r3, r7, #16
 800aa46:	ed93 4b20 	vldr	d4, [r3, #128]	; 0x80
 800aa4a:	eeb0 3a44 	vmov.f32	s6, s8
 800aa4e:	eef0 3a64 	vmov.f32	s7, s9
 800aa52:	eeb0 2a45 	vmov.f32	s4, s10
 800aa56:	eef0 2a65 	vmov.f32	s5, s11
 800aa5a:	eeb0 1a46 	vmov.f32	s2, s12
 800aa5e:	eef0 1a66 	vmov.f32	s3, s13
 800aa62:	eeb0 0a47 	vmov.f32	s0, s14
 800aa66:	eef0 0a67 	vmov.f32	s1, s15
 800aa6a:	f7fe f889 	bl	8008b80 <scaraCheckWorkSpace4>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d001      	beq.n	800aa78 <scaraKeyFlow+0x564>
							 	 	 	  positionCompute.Theta2,
										  positionCompute.D3,
										  positionCompute.Theta4)) {
			return SCARA_STATUS_ERROR_OVER_WORKSPACE;
 800aa74:	2307      	movs	r3, #7
 800aa76:	e00e      	b.n	800aa96 <scaraKeyFlow+0x582>
		} else {
			memcpy(pos_Next, &positionCompute, sizeof(SCARA_PositionTypeDef));
 800aa78:	f107 0110 	add.w	r1, r7, #16
 800aa7c:	1d3b      	adds	r3, r7, #4
 800aa7e:	22b8      	movs	r2, #184	; 0xb8
 800aa80:	6818      	ldr	r0, [r3, #0]
 800aa82:	f00a ff5d 	bl	8015940 <memcpy>
		}
		kinematicForward(pos_Next);
 800aa86:	1d3b      	adds	r3, r7, #4
 800aa88:	6818      	ldr	r0, [r3, #0]
 800aa8a:	f7f8 faa5 	bl	8002fd8 <kinematicForward>
 800aa8e:	e001      	b.n	800aa94 <scaraKeyFlow+0x580>

	} else {
		return SCARA_STATUS_ERROR_SPACE;
 800aa90:	2302      	movs	r3, #2
 800aa92:	e000      	b.n	800aa96 <scaraKeyFlow+0x582>
	}

	return SCARA_STATUS_OK;
 800aa94:	2300      	movs	r3, #0
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800aaa2:	b002      	add	sp, #8
 800aaa4:	4770      	bx	lr
 800aaa6:	bf00      	nop
 800aaa8:	20005d80 	.word	0x20005d80
 800aaac:	20005378 	.word	0x20005378

0800aab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b082      	sub	sp, #8
 800aab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aab6:	2300      	movs	r3, #0
 800aab8:	607b      	str	r3, [r7, #4]
 800aaba:	4b12      	ldr	r3, [pc, #72]	; (800ab04 <HAL_MspInit+0x54>)
 800aabc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aabe:	4a11      	ldr	r2, [pc, #68]	; (800ab04 <HAL_MspInit+0x54>)
 800aac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aac4:	6453      	str	r3, [r2, #68]	; 0x44
 800aac6:	4b0f      	ldr	r3, [pc, #60]	; (800ab04 <HAL_MspInit+0x54>)
 800aac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aaca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aace:	607b      	str	r3, [r7, #4]
 800aad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800aad2:	2300      	movs	r3, #0
 800aad4:	603b      	str	r3, [r7, #0]
 800aad6:	4b0b      	ldr	r3, [pc, #44]	; (800ab04 <HAL_MspInit+0x54>)
 800aad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aada:	4a0a      	ldr	r2, [pc, #40]	; (800ab04 <HAL_MspInit+0x54>)
 800aadc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aae0:	6413      	str	r3, [r2, #64]	; 0x40
 800aae2:	4b08      	ldr	r3, [pc, #32]	; (800ab04 <HAL_MspInit+0x54>)
 800aae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aaea:	603b      	str	r3, [r7, #0]
 800aaec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800aaee:	2200      	movs	r2, #0
 800aaf0:	210f      	movs	r1, #15
 800aaf2:	f06f 0001 	mvn.w	r0, #1
 800aaf6:	f000 fb85 	bl	800b204 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800aafa:	bf00      	nop
 800aafc:	3708      	adds	r7, #8
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}
 800ab02:	bf00      	nop
 800ab04:	40023800 	.word	0x40023800

0800ab08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b08c      	sub	sp, #48	; 0x30
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800ab10:	2300      	movs	r3, #0
 800ab12:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800ab14:	2300      	movs	r3, #0
 800ab16:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800ab18:	2200      	movs	r2, #0
 800ab1a:	6879      	ldr	r1, [r7, #4]
 800ab1c:	2036      	movs	r0, #54	; 0x36
 800ab1e:	f000 fb71 	bl	800b204 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800ab22:	2036      	movs	r0, #54	; 0x36
 800ab24:	f000 fb8a 	bl	800b23c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800ab28:	2300      	movs	r3, #0
 800ab2a:	60fb      	str	r3, [r7, #12]
 800ab2c:	4b1f      	ldr	r3, [pc, #124]	; (800abac <HAL_InitTick+0xa4>)
 800ab2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab30:	4a1e      	ldr	r2, [pc, #120]	; (800abac <HAL_InitTick+0xa4>)
 800ab32:	f043 0310 	orr.w	r3, r3, #16
 800ab36:	6413      	str	r3, [r2, #64]	; 0x40
 800ab38:	4b1c      	ldr	r3, [pc, #112]	; (800abac <HAL_InitTick+0xa4>)
 800ab3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab3c:	f003 0310 	and.w	r3, r3, #16
 800ab40:	60fb      	str	r3, [r7, #12]
 800ab42:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800ab44:	f107 0210 	add.w	r2, r7, #16
 800ab48:	f107 0314 	add.w	r3, r7, #20
 800ab4c:	4611      	mov	r1, r2
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f002 ff16 	bl	800d980 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800ab54:	f002 feec 	bl	800d930 <HAL_RCC_GetPCLK1Freq>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	005b      	lsls	r3, r3, #1
 800ab5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800ab5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab60:	4a13      	ldr	r2, [pc, #76]	; (800abb0 <HAL_InitTick+0xa8>)
 800ab62:	fba2 2303 	umull	r2, r3, r2, r3
 800ab66:	0c9b      	lsrs	r3, r3, #18
 800ab68:	3b01      	subs	r3, #1
 800ab6a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800ab6c:	4b11      	ldr	r3, [pc, #68]	; (800abb4 <HAL_InitTick+0xac>)
 800ab6e:	4a12      	ldr	r2, [pc, #72]	; (800abb8 <HAL_InitTick+0xb0>)
 800ab70:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800ab72:	4b10      	ldr	r3, [pc, #64]	; (800abb4 <HAL_InitTick+0xac>)
 800ab74:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ab78:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800ab7a:	4a0e      	ldr	r2, [pc, #56]	; (800abb4 <HAL_InitTick+0xac>)
 800ab7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab7e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800ab80:	4b0c      	ldr	r3, [pc, #48]	; (800abb4 <HAL_InitTick+0xac>)
 800ab82:	2200      	movs	r2, #0
 800ab84:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ab86:	4b0b      	ldr	r3, [pc, #44]	; (800abb4 <HAL_InitTick+0xac>)
 800ab88:	2200      	movs	r2, #0
 800ab8a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800ab8c:	4809      	ldr	r0, [pc, #36]	; (800abb4 <HAL_InitTick+0xac>)
 800ab8e:	f002 ff29 	bl	800d9e4 <HAL_TIM_Base_Init>
 800ab92:	4603      	mov	r3, r0
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d104      	bne.n	800aba2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800ab98:	4806      	ldr	r0, [pc, #24]	; (800abb4 <HAL_InitTick+0xac>)
 800ab9a:	f002 ff4e 	bl	800da3a <HAL_TIM_Base_Start_IT>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	e000      	b.n	800aba4 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800aba2:	2301      	movs	r3, #1
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	3730      	adds	r7, #48	; 0x30
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}
 800abac:	40023800 	.word	0x40023800
 800abb0:	431bde83 	.word	0x431bde83
 800abb4:	20006060 	.word	0x20006060
 800abb8:	40001000 	.word	0x40001000

0800abbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800abbc:	b480      	push	{r7}
 800abbe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800abc0:	bf00      	nop
 800abc2:	46bd      	mov	sp, r7
 800abc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc8:	4770      	bx	lr
	...

0800abcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  LOG_REPORT("ic.c: HARDFAULT ERROR", __LINE__);
 800abd0:	2164      	movs	r1, #100	; 0x64
 800abd2:	4802      	ldr	r0, [pc, #8]	; (800abdc <HardFault_Handler+0x10>)
 800abd4:	f7f6 fda8 	bl	8001728 <LOG_REPORT>
 800abd8:	e7fa      	b.n	800abd0 <HardFault_Handler+0x4>
 800abda:	bf00      	nop
 800abdc:	0801b254 	.word	0x0801b254

0800abe0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  LOG_REPORT("ic.c: MEMORY ERROR", __LINE__);
 800abe4:	2174      	movs	r1, #116	; 0x74
 800abe6:	4802      	ldr	r0, [pc, #8]	; (800abf0 <MemManage_Handler+0x10>)
 800abe8:	f7f6 fd9e 	bl	8001728 <LOG_REPORT>
 800abec:	e7fa      	b.n	800abe4 <MemManage_Handler+0x4>
 800abee:	bf00      	nop
 800abf0:	0801b26c 	.word	0x0801b26c

0800abf4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  LOG_REPORT("ic.c: BUS ERROR", __LINE__);
 800abf8:	2184      	movs	r1, #132	; 0x84
 800abfa:	4802      	ldr	r0, [pc, #8]	; (800ac04 <BusFault_Handler+0x10>)
 800abfc:	f7f6 fd94 	bl	8001728 <LOG_REPORT>
 800ac00:	e7fa      	b.n	800abf8 <BusFault_Handler+0x4>
 800ac02:	bf00      	nop
 800ac04:	0801b280 	.word	0x0801b280

0800ac08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ac0c:	e7fe      	b.n	800ac0c <UsageFault_Handler+0x4>

0800ac0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ac0e:	b480      	push	{r7}
 800ac10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ac12:	bf00      	nop
 800ac14:	46bd      	mov	sp, r7
 800ac16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1a:	4770      	bx	lr

0800ac1c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800ac20:	4802      	ldr	r0, [pc, #8]	; (800ac2c <DMA1_Stream4_IRQHandler+0x10>)
 800ac22:	f000 fc41 	bl	800b4a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800ac26:	bf00      	nop
 800ac28:	bd80      	pop	{r7, pc}
 800ac2a:	bf00      	nop
 800ac2c:	20006120 	.word	0x20006120

0800ac30 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800ac34:	4802      	ldr	r0, [pc, #8]	; (800ac40 <UART4_IRQHandler+0x10>)
 800ac36:	f003 fa3f 	bl	800e0b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800ac3a:	bf00      	nop
 800ac3c:	bd80      	pop	{r7, pc}
 800ac3e:	bf00      	nop
 800ac40:	200060e0 	.word	0x200060e0

0800ac44 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800ac48:	4802      	ldr	r0, [pc, #8]	; (800ac54 <TIM6_DAC_IRQHandler+0x10>)
 800ac4a:	f002 ff1a 	bl	800da82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800ac4e:	bf00      	nop
 800ac50:	bd80      	pop	{r7, pc}
 800ac52:	bf00      	nop
 800ac54:	20006060 	.word	0x20006060

0800ac58 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	osSignalSet(defaultTaskHandle, 0x01);
 800ac5c:	4b05      	ldr	r3, [pc, #20]	; (800ac74 <TIM7_IRQHandler+0x1c>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	2101      	movs	r1, #1
 800ac62:	4618      	mov	r0, r3
 800ac64:	f006 ffe8 	bl	8011c38 <osSignalSet>
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800ac68:	4803      	ldr	r0, [pc, #12]	; (800ac78 <TIM7_IRQHandler+0x20>)
 800ac6a:	f002 ff0a 	bl	800da82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  /* USER CODE END TIM7_IRQn 1 */
}
 800ac6e:	bf00      	nop
 800ac70:	bd80      	pop	{r7, pc}
 800ac72:	bf00      	nop
 800ac74:	200052b4 	.word	0x200052b4
 800ac78:	200060a0 	.word	0x200060a0

0800ac7c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800ac80:	4802      	ldr	r0, [pc, #8]	; (800ac8c <OTG_FS_IRQHandler+0x10>)
 800ac82:	f001 f9e1 	bl	800c048 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800ac86:	bf00      	nop
 800ac88:	bd80      	pop	{r7, pc}
 800ac8a:	bf00      	nop
 800ac8c:	20006a28 	.word	0x20006a28

0800ac90 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b084      	sub	sp, #16
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800ac98:	4b11      	ldr	r3, [pc, #68]	; (800ace0 <_sbrk+0x50>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d102      	bne.n	800aca6 <_sbrk+0x16>
		heap_end = &end;
 800aca0:	4b0f      	ldr	r3, [pc, #60]	; (800ace0 <_sbrk+0x50>)
 800aca2:	4a10      	ldr	r2, [pc, #64]	; (800ace4 <_sbrk+0x54>)
 800aca4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800aca6:	4b0e      	ldr	r3, [pc, #56]	; (800ace0 <_sbrk+0x50>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800acac:	4b0c      	ldr	r3, [pc, #48]	; (800ace0 <_sbrk+0x50>)
 800acae:	681a      	ldr	r2, [r3, #0]
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	4413      	add	r3, r2
 800acb4:	466a      	mov	r2, sp
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d907      	bls.n	800acca <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800acba:	f00a fe07 	bl	80158cc <__errno>
 800acbe:	4602      	mov	r2, r0
 800acc0:	230c      	movs	r3, #12
 800acc2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800acc4:	f04f 33ff 	mov.w	r3, #4294967295
 800acc8:	e006      	b.n	800acd8 <_sbrk+0x48>
	}

	heap_end += incr;
 800acca:	4b05      	ldr	r3, [pc, #20]	; (800ace0 <_sbrk+0x50>)
 800accc:	681a      	ldr	r2, [r3, #0]
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	4413      	add	r3, r2
 800acd2:	4a03      	ldr	r2, [pc, #12]	; (800ace0 <_sbrk+0x50>)
 800acd4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800acd6:	68fb      	ldr	r3, [r7, #12]
}
 800acd8:	4618      	mov	r0, r3
 800acda:	3710      	adds	r7, #16
 800acdc:	46bd      	mov	sp, r7
 800acde:	bd80      	pop	{r7, pc}
 800ace0:	20001454 	.word	0x20001454
 800ace4:	20006e38 	.word	0x20006e38

0800ace8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800ace8:	b480      	push	{r7}
 800acea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800acec:	4b08      	ldr	r3, [pc, #32]	; (800ad10 <SystemInit+0x28>)
 800acee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acf2:	4a07      	ldr	r2, [pc, #28]	; (800ad10 <SystemInit+0x28>)
 800acf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800acf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800acfc:	4b04      	ldr	r3, [pc, #16]	; (800ad10 <SystemInit+0x28>)
 800acfe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ad02:	609a      	str	r2, [r3, #8]
#endif
}
 800ad04:	bf00      	nop
 800ad06:	46bd      	mov	sp, r7
 800ad08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0c:	4770      	bx	lr
 800ad0e:	bf00      	nop
 800ad10:	e000ed00 	.word	0xe000ed00

0800ad14 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b082      	sub	sp, #8
 800ad18:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ad1a:	463b      	mov	r3, r7
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	601a      	str	r2, [r3, #0]
 800ad20:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 800ad22:	4b15      	ldr	r3, [pc, #84]	; (800ad78 <MX_TIM7_Init+0x64>)
 800ad24:	4a15      	ldr	r2, [pc, #84]	; (800ad7c <MX_TIM7_Init+0x68>)
 800ad26:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 800ad28:	4b13      	ldr	r3, [pc, #76]	; (800ad78 <MX_TIM7_Init+0x64>)
 800ad2a:	2253      	movs	r2, #83	; 0x53
 800ad2c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ad2e:	4b12      	ldr	r3, [pc, #72]	; (800ad78 <MX_TIM7_Init+0x64>)
 800ad30:	2200      	movs	r2, #0
 800ad32:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 800ad34:	4b10      	ldr	r3, [pc, #64]	; (800ad78 <MX_TIM7_Init+0x64>)
 800ad36:	f242 720f 	movw	r2, #9999	; 0x270f
 800ad3a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ad3c:	4b0e      	ldr	r3, [pc, #56]	; (800ad78 <MX_TIM7_Init+0x64>)
 800ad3e:	2200      	movs	r2, #0
 800ad40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800ad42:	480d      	ldr	r0, [pc, #52]	; (800ad78 <MX_TIM7_Init+0x64>)
 800ad44:	f002 fe4e 	bl	800d9e4 <HAL_TIM_Base_Init>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d001      	beq.n	800ad52 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800ad4e:	f7f8 fd0f 	bl	8003770 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ad52:	2300      	movs	r3, #0
 800ad54:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ad56:	2300      	movs	r3, #0
 800ad58:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800ad5a:	463b      	mov	r3, r7
 800ad5c:	4619      	mov	r1, r3
 800ad5e:	4806      	ldr	r0, [pc, #24]	; (800ad78 <MX_TIM7_Init+0x64>)
 800ad60:	f003 f860 	bl	800de24 <HAL_TIMEx_MasterConfigSynchronization>
 800ad64:	4603      	mov	r3, r0
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d001      	beq.n	800ad6e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800ad6a:	f7f8 fd01 	bl	8003770 <Error_Handler>
  }

}
 800ad6e:	bf00      	nop
 800ad70:	3708      	adds	r7, #8
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}
 800ad76:	bf00      	nop
 800ad78:	200060a0 	.word	0x200060a0
 800ad7c:	40001400 	.word	0x40001400

0800ad80 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b084      	sub	sp, #16
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	4a0e      	ldr	r2, [pc, #56]	; (800adc8 <HAL_TIM_Base_MspInit+0x48>)
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d115      	bne.n	800adbe <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800ad92:	2300      	movs	r3, #0
 800ad94:	60fb      	str	r3, [r7, #12]
 800ad96:	4b0d      	ldr	r3, [pc, #52]	; (800adcc <HAL_TIM_Base_MspInit+0x4c>)
 800ad98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad9a:	4a0c      	ldr	r2, [pc, #48]	; (800adcc <HAL_TIM_Base_MspInit+0x4c>)
 800ad9c:	f043 0320 	orr.w	r3, r3, #32
 800ada0:	6413      	str	r3, [r2, #64]	; 0x40
 800ada2:	4b0a      	ldr	r3, [pc, #40]	; (800adcc <HAL_TIM_Base_MspInit+0x4c>)
 800ada4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ada6:	f003 0320 	and.w	r3, r3, #32
 800adaa:	60fb      	str	r3, [r7, #12]
 800adac:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800adae:	2200      	movs	r2, #0
 800adb0:	2105      	movs	r1, #5
 800adb2:	2037      	movs	r0, #55	; 0x37
 800adb4:	f000 fa26 	bl	800b204 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800adb8:	2037      	movs	r0, #55	; 0x37
 800adba:	f000 fa3f 	bl	800b23c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800adbe:	bf00      	nop
 800adc0:	3710      	adds	r7, #16
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}
 800adc6:	bf00      	nop
 800adc8:	40001400 	.word	0x40001400
 800adcc:	40023800 	.word	0x40023800

0800add0 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 800add4:	4b11      	ldr	r3, [pc, #68]	; (800ae1c <MX_UART4_Init+0x4c>)
 800add6:	4a12      	ldr	r2, [pc, #72]	; (800ae20 <MX_UART4_Init+0x50>)
 800add8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800adda:	4b10      	ldr	r3, [pc, #64]	; (800ae1c <MX_UART4_Init+0x4c>)
 800addc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800ade0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800ade2:	4b0e      	ldr	r3, [pc, #56]	; (800ae1c <MX_UART4_Init+0x4c>)
 800ade4:	2200      	movs	r2, #0
 800ade6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800ade8:	4b0c      	ldr	r3, [pc, #48]	; (800ae1c <MX_UART4_Init+0x4c>)
 800adea:	2200      	movs	r2, #0
 800adec:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800adee:	4b0b      	ldr	r3, [pc, #44]	; (800ae1c <MX_UART4_Init+0x4c>)
 800adf0:	2200      	movs	r2, #0
 800adf2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800adf4:	4b09      	ldr	r3, [pc, #36]	; (800ae1c <MX_UART4_Init+0x4c>)
 800adf6:	220c      	movs	r2, #12
 800adf8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800adfa:	4b08      	ldr	r3, [pc, #32]	; (800ae1c <MX_UART4_Init+0x4c>)
 800adfc:	2200      	movs	r2, #0
 800adfe:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800ae00:	4b06      	ldr	r3, [pc, #24]	; (800ae1c <MX_UART4_Init+0x4c>)
 800ae02:	2200      	movs	r2, #0
 800ae04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800ae06:	4805      	ldr	r0, [pc, #20]	; (800ae1c <MX_UART4_Init+0x4c>)
 800ae08:	f003 f89c 	bl	800df44 <HAL_UART_Init>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d001      	beq.n	800ae16 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800ae12:	f7f8 fcad 	bl	8003770 <Error_Handler>
  }

}
 800ae16:	bf00      	nop
 800ae18:	bd80      	pop	{r7, pc}
 800ae1a:	bf00      	nop
 800ae1c:	200060e0 	.word	0x200060e0
 800ae20:	40004c00 	.word	0x40004c00

0800ae24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b08a      	sub	sp, #40	; 0x28
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ae2c:	f107 0314 	add.w	r3, r7, #20
 800ae30:	2200      	movs	r2, #0
 800ae32:	601a      	str	r2, [r3, #0]
 800ae34:	605a      	str	r2, [r3, #4]
 800ae36:	609a      	str	r2, [r3, #8]
 800ae38:	60da      	str	r2, [r3, #12]
 800ae3a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	4a34      	ldr	r2, [pc, #208]	; (800af14 <HAL_UART_MspInit+0xf0>)
 800ae42:	4293      	cmp	r3, r2
 800ae44:	d161      	bne.n	800af0a <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800ae46:	2300      	movs	r3, #0
 800ae48:	613b      	str	r3, [r7, #16]
 800ae4a:	4b33      	ldr	r3, [pc, #204]	; (800af18 <HAL_UART_MspInit+0xf4>)
 800ae4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae4e:	4a32      	ldr	r2, [pc, #200]	; (800af18 <HAL_UART_MspInit+0xf4>)
 800ae50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ae54:	6413      	str	r3, [r2, #64]	; 0x40
 800ae56:	4b30      	ldr	r3, [pc, #192]	; (800af18 <HAL_UART_MspInit+0xf4>)
 800ae58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ae5e:	613b      	str	r3, [r7, #16]
 800ae60:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ae62:	2300      	movs	r3, #0
 800ae64:	60fb      	str	r3, [r7, #12]
 800ae66:	4b2c      	ldr	r3, [pc, #176]	; (800af18 <HAL_UART_MspInit+0xf4>)
 800ae68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae6a:	4a2b      	ldr	r2, [pc, #172]	; (800af18 <HAL_UART_MspInit+0xf4>)
 800ae6c:	f043 0301 	orr.w	r3, r3, #1
 800ae70:	6313      	str	r3, [r2, #48]	; 0x30
 800ae72:	4b29      	ldr	r3, [pc, #164]	; (800af18 <HAL_UART_MspInit+0xf4>)
 800ae74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae76:	f003 0301 	and.w	r3, r3, #1
 800ae7a:	60fb      	str	r3, [r7, #12]
 800ae7c:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration    
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800ae7e:	2303      	movs	r3, #3
 800ae80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae82:	2302      	movs	r3, #2
 800ae84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ae86:	2301      	movs	r3, #1
 800ae88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ae8a:	2303      	movs	r3, #3
 800ae8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800ae8e:	2308      	movs	r3, #8
 800ae90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ae92:	f107 0314 	add.w	r3, r7, #20
 800ae96:	4619      	mov	r1, r3
 800ae98:	4820      	ldr	r0, [pc, #128]	; (800af1c <HAL_UART_MspInit+0xf8>)
 800ae9a:	f000 fd7b 	bl	800b994 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800ae9e:	4b20      	ldr	r3, [pc, #128]	; (800af20 <HAL_UART_MspInit+0xfc>)
 800aea0:	4a20      	ldr	r2, [pc, #128]	; (800af24 <HAL_UART_MspInit+0x100>)
 800aea2:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 800aea4:	4b1e      	ldr	r3, [pc, #120]	; (800af20 <HAL_UART_MspInit+0xfc>)
 800aea6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800aeaa:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800aeac:	4b1c      	ldr	r3, [pc, #112]	; (800af20 <HAL_UART_MspInit+0xfc>)
 800aeae:	2240      	movs	r2, #64	; 0x40
 800aeb0:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800aeb2:	4b1b      	ldr	r3, [pc, #108]	; (800af20 <HAL_UART_MspInit+0xfc>)
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800aeb8:	4b19      	ldr	r3, [pc, #100]	; (800af20 <HAL_UART_MspInit+0xfc>)
 800aeba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aebe:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800aec0:	4b17      	ldr	r3, [pc, #92]	; (800af20 <HAL_UART_MspInit+0xfc>)
 800aec2:	2200      	movs	r2, #0
 800aec4:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800aec6:	4b16      	ldr	r3, [pc, #88]	; (800af20 <HAL_UART_MspInit+0xfc>)
 800aec8:	2200      	movs	r2, #0
 800aeca:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800aecc:	4b14      	ldr	r3, [pc, #80]	; (800af20 <HAL_UART_MspInit+0xfc>)
 800aece:	2200      	movs	r2, #0
 800aed0:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800aed2:	4b13      	ldr	r3, [pc, #76]	; (800af20 <HAL_UART_MspInit+0xfc>)
 800aed4:	2200      	movs	r2, #0
 800aed6:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800aed8:	4b11      	ldr	r3, [pc, #68]	; (800af20 <HAL_UART_MspInit+0xfc>)
 800aeda:	2200      	movs	r2, #0
 800aedc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800aede:	4810      	ldr	r0, [pc, #64]	; (800af20 <HAL_UART_MspInit+0xfc>)
 800aee0:	f000 f9ba 	bl	800b258 <HAL_DMA_Init>
 800aee4:	4603      	mov	r3, r0
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d001      	beq.n	800aeee <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800aeea:	f7f8 fc41 	bl	8003770 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	4a0b      	ldr	r2, [pc, #44]	; (800af20 <HAL_UART_MspInit+0xfc>)
 800aef2:	631a      	str	r2, [r3, #48]	; 0x30
 800aef4:	4a0a      	ldr	r2, [pc, #40]	; (800af20 <HAL_UART_MspInit+0xfc>)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800aefa:	2200      	movs	r2, #0
 800aefc:	2105      	movs	r1, #5
 800aefe:	2034      	movs	r0, #52	; 0x34
 800af00:	f000 f980 	bl	800b204 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800af04:	2034      	movs	r0, #52	; 0x34
 800af06:	f000 f999 	bl	800b23c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 800af0a:	bf00      	nop
 800af0c:	3728      	adds	r7, #40	; 0x28
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}
 800af12:	bf00      	nop
 800af14:	40004c00 	.word	0x40004c00
 800af18:	40023800 	.word	0x40023800
 800af1c:	40020000 	.word	0x40020000
 800af20:	20006120 	.word	0x20006120
 800af24:	40026070 	.word	0x40026070

0800af28 <HAL_UART_TxCpltCallback>:
  /* USER CODE END UART4_MspDeInit 1 */
  }
} 

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800af28:	b580      	push	{r7, lr}
 800af2a:	b084      	sub	sp, #16
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
	if (UART4 == huart->Instance) {
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	4a0c      	ldr	r2, [pc, #48]	; (800af68 <HAL_UART_TxCpltCallback+0x40>)
 800af36:	4293      	cmp	r3, r2
 800af38:	d112      	bne.n	800af60 <HAL_UART_TxCpltCallback+0x38>
		uint16_t size_dma;
		size_dma = ringBuff_PopArray(&uart_tx_ringbuff, log_uart_dma_buff, LOG_BUFFER_SIZE);
 800af3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800af3e:	490b      	ldr	r1, [pc, #44]	; (800af6c <HAL_UART_TxCpltCallback+0x44>)
 800af40:	480b      	ldr	r0, [pc, #44]	; (800af70 <HAL_UART_TxCpltCallback+0x48>)
 800af42:	f7f8 fcb4 	bl	80038ae <ringBuff_PopArray>
 800af46:	4603      	mov	r3, r0
 800af48:	81fb      	strh	r3, [r7, #14]
		if (0 == size_dma) {
 800af4a:	89fb      	ldrh	r3, [r7, #14]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d006      	beq.n	800af5e <HAL_UART_TxCpltCallback+0x36>
			return;
		}
		HAL_UART_Transmit_DMA(&huart4, log_uart_dma_buff, size_dma);
 800af50:	89fb      	ldrh	r3, [r7, #14]
 800af52:	461a      	mov	r2, r3
 800af54:	4905      	ldr	r1, [pc, #20]	; (800af6c <HAL_UART_TxCpltCallback+0x44>)
 800af56:	4807      	ldr	r0, [pc, #28]	; (800af74 <HAL_UART_TxCpltCallback+0x4c>)
 800af58:	f003 f842 	bl	800dfe0 <HAL_UART_Transmit_DMA>
 800af5c:	e000      	b.n	800af60 <HAL_UART_TxCpltCallback+0x38>
			return;
 800af5e:	bf00      	nop
	}
}
 800af60:	3710      	adds	r7, #16
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}
 800af66:	bf00      	nop
 800af68:	40004c00 	.word	0x40004c00
 800af6c:	200051b4 	.word	0x200051b4
 800af70:	20000840 	.word	0x20000840
 800af74:	200060e0 	.word	0x200060e0

0800af78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800af78:	f8df d034 	ldr.w	sp, [pc, #52]	; 800afb0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800af7c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800af7e:	e003      	b.n	800af88 <LoopCopyDataInit>

0800af80 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800af80:	4b0c      	ldr	r3, [pc, #48]	; (800afb4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800af82:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800af84:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800af86:	3104      	adds	r1, #4

0800af88 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800af88:	480b      	ldr	r0, [pc, #44]	; (800afb8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800af8a:	4b0c      	ldr	r3, [pc, #48]	; (800afbc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800af8c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800af8e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800af90:	d3f6      	bcc.n	800af80 <CopyDataInit>
  ldr  r2, =_sbss
 800af92:	4a0b      	ldr	r2, [pc, #44]	; (800afc0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800af94:	e002      	b.n	800af9c <LoopFillZerobss>

0800af96 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800af96:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800af98:	f842 3b04 	str.w	r3, [r2], #4

0800af9c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800af9c:	4b09      	ldr	r3, [pc, #36]	; (800afc4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800af9e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800afa0:	d3f9      	bcc.n	800af96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800afa2:	f7ff fea1 	bl	800ace8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800afa6:	f00a fc97 	bl	80158d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800afaa:	f7f8 fb4f 	bl	800364c <main>
  bx  lr    
 800afae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800afb0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800afb4:	0801b7e8 	.word	0x0801b7e8
  ldr  r0, =_sdata
 800afb8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800afbc:	20000fe0 	.word	0x20000fe0
  ldr  r2, =_sbss
 800afc0:	20000fe0 	.word	0x20000fe0
  ldr  r3, = _ebss
 800afc4:	20006e34 	.word	0x20006e34

0800afc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800afc8:	e7fe      	b.n	800afc8 <ADC_IRQHandler>
	...

0800afcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800afd0:	4b0e      	ldr	r3, [pc, #56]	; (800b00c <HAL_Init+0x40>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	4a0d      	ldr	r2, [pc, #52]	; (800b00c <HAL_Init+0x40>)
 800afd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800afda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800afdc:	4b0b      	ldr	r3, [pc, #44]	; (800b00c <HAL_Init+0x40>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	4a0a      	ldr	r2, [pc, #40]	; (800b00c <HAL_Init+0x40>)
 800afe2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800afe6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800afe8:	4b08      	ldr	r3, [pc, #32]	; (800b00c <HAL_Init+0x40>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	4a07      	ldr	r2, [pc, #28]	; (800b00c <HAL_Init+0x40>)
 800afee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aff2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800aff4:	2003      	movs	r0, #3
 800aff6:	f000 f8fa 	bl	800b1ee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800affa:	2000      	movs	r0, #0
 800affc:	f7ff fd84 	bl	800ab08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b000:	f7ff fd56 	bl	800aab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b004:	2300      	movs	r3, #0
}
 800b006:	4618      	mov	r0, r3
 800b008:	bd80      	pop	{r7, pc}
 800b00a:	bf00      	nop
 800b00c:	40023c00 	.word	0x40023c00

0800b010 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b010:	b480      	push	{r7}
 800b012:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b014:	4b06      	ldr	r3, [pc, #24]	; (800b030 <HAL_IncTick+0x20>)
 800b016:	781b      	ldrb	r3, [r3, #0]
 800b018:	461a      	mov	r2, r3
 800b01a:	4b06      	ldr	r3, [pc, #24]	; (800b034 <HAL_IncTick+0x24>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	4413      	add	r3, r2
 800b020:	4a04      	ldr	r2, [pc, #16]	; (800b034 <HAL_IncTick+0x24>)
 800b022:	6013      	str	r3, [r2, #0]
}
 800b024:	bf00      	nop
 800b026:	46bd      	mov	sp, r7
 800b028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02c:	4770      	bx	lr
 800b02e:	bf00      	nop
 800b030:	20000c94 	.word	0x20000c94
 800b034:	20006180 	.word	0x20006180

0800b038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b038:	b480      	push	{r7}
 800b03a:	af00      	add	r7, sp, #0
  return uwTick;
 800b03c:	4b03      	ldr	r3, [pc, #12]	; (800b04c <HAL_GetTick+0x14>)
 800b03e:	681b      	ldr	r3, [r3, #0]
}
 800b040:	4618      	mov	r0, r3
 800b042:	46bd      	mov	sp, r7
 800b044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b048:	4770      	bx	lr
 800b04a:	bf00      	nop
 800b04c:	20006180 	.word	0x20006180

0800b050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b084      	sub	sp, #16
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b058:	f7ff ffee 	bl	800b038 <HAL_GetTick>
 800b05c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b068:	d005      	beq.n	800b076 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b06a:	4b09      	ldr	r3, [pc, #36]	; (800b090 <HAL_Delay+0x40>)
 800b06c:	781b      	ldrb	r3, [r3, #0]
 800b06e:	461a      	mov	r2, r3
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	4413      	add	r3, r2
 800b074:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800b076:	bf00      	nop
 800b078:	f7ff ffde 	bl	800b038 <HAL_GetTick>
 800b07c:	4602      	mov	r2, r0
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	1ad3      	subs	r3, r2, r3
 800b082:	68fa      	ldr	r2, [r7, #12]
 800b084:	429a      	cmp	r2, r3
 800b086:	d8f7      	bhi.n	800b078 <HAL_Delay+0x28>
  {
  }
}
 800b088:	bf00      	nop
 800b08a:	3710      	adds	r7, #16
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}
 800b090:	20000c94 	.word	0x20000c94

0800b094 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b094:	b480      	push	{r7}
 800b096:	b085      	sub	sp, #20
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f003 0307 	and.w	r3, r3, #7
 800b0a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b0a4:	4b0c      	ldr	r3, [pc, #48]	; (800b0d8 <__NVIC_SetPriorityGrouping+0x44>)
 800b0a6:	68db      	ldr	r3, [r3, #12]
 800b0a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b0aa:	68ba      	ldr	r2, [r7, #8]
 800b0ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b0b0:	4013      	ands	r3, r2
 800b0b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b0bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b0c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b0c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b0c6:	4a04      	ldr	r2, [pc, #16]	; (800b0d8 <__NVIC_SetPriorityGrouping+0x44>)
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	60d3      	str	r3, [r2, #12]
}
 800b0cc:	bf00      	nop
 800b0ce:	3714      	adds	r7, #20
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d6:	4770      	bx	lr
 800b0d8:	e000ed00 	.word	0xe000ed00

0800b0dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b0dc:	b480      	push	{r7}
 800b0de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b0e0:	4b04      	ldr	r3, [pc, #16]	; (800b0f4 <__NVIC_GetPriorityGrouping+0x18>)
 800b0e2:	68db      	ldr	r3, [r3, #12]
 800b0e4:	0a1b      	lsrs	r3, r3, #8
 800b0e6:	f003 0307 	and.w	r3, r3, #7
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f2:	4770      	bx	lr
 800b0f4:	e000ed00 	.word	0xe000ed00

0800b0f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b083      	sub	sp, #12
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	4603      	mov	r3, r0
 800b100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b106:	2b00      	cmp	r3, #0
 800b108:	db0b      	blt.n	800b122 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b10a:	79fb      	ldrb	r3, [r7, #7]
 800b10c:	f003 021f 	and.w	r2, r3, #31
 800b110:	4907      	ldr	r1, [pc, #28]	; (800b130 <__NVIC_EnableIRQ+0x38>)
 800b112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b116:	095b      	lsrs	r3, r3, #5
 800b118:	2001      	movs	r0, #1
 800b11a:	fa00 f202 	lsl.w	r2, r0, r2
 800b11e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800b122:	bf00      	nop
 800b124:	370c      	adds	r7, #12
 800b126:	46bd      	mov	sp, r7
 800b128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12c:	4770      	bx	lr
 800b12e:	bf00      	nop
 800b130:	e000e100 	.word	0xe000e100

0800b134 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b134:	b480      	push	{r7}
 800b136:	b083      	sub	sp, #12
 800b138:	af00      	add	r7, sp, #0
 800b13a:	4603      	mov	r3, r0
 800b13c:	6039      	str	r1, [r7, #0]
 800b13e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b144:	2b00      	cmp	r3, #0
 800b146:	db0a      	blt.n	800b15e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	b2da      	uxtb	r2, r3
 800b14c:	490c      	ldr	r1, [pc, #48]	; (800b180 <__NVIC_SetPriority+0x4c>)
 800b14e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b152:	0112      	lsls	r2, r2, #4
 800b154:	b2d2      	uxtb	r2, r2
 800b156:	440b      	add	r3, r1
 800b158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b15c:	e00a      	b.n	800b174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	b2da      	uxtb	r2, r3
 800b162:	4908      	ldr	r1, [pc, #32]	; (800b184 <__NVIC_SetPriority+0x50>)
 800b164:	79fb      	ldrb	r3, [r7, #7]
 800b166:	f003 030f 	and.w	r3, r3, #15
 800b16a:	3b04      	subs	r3, #4
 800b16c:	0112      	lsls	r2, r2, #4
 800b16e:	b2d2      	uxtb	r2, r2
 800b170:	440b      	add	r3, r1
 800b172:	761a      	strb	r2, [r3, #24]
}
 800b174:	bf00      	nop
 800b176:	370c      	adds	r7, #12
 800b178:	46bd      	mov	sp, r7
 800b17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17e:	4770      	bx	lr
 800b180:	e000e100 	.word	0xe000e100
 800b184:	e000ed00 	.word	0xe000ed00

0800b188 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b188:	b480      	push	{r7}
 800b18a:	b089      	sub	sp, #36	; 0x24
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	60f8      	str	r0, [r7, #12]
 800b190:	60b9      	str	r1, [r7, #8]
 800b192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	f003 0307 	and.w	r3, r3, #7
 800b19a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b19c:	69fb      	ldr	r3, [r7, #28]
 800b19e:	f1c3 0307 	rsb	r3, r3, #7
 800b1a2:	2b04      	cmp	r3, #4
 800b1a4:	bf28      	it	cs
 800b1a6:	2304      	movcs	r3, #4
 800b1a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b1aa:	69fb      	ldr	r3, [r7, #28]
 800b1ac:	3304      	adds	r3, #4
 800b1ae:	2b06      	cmp	r3, #6
 800b1b0:	d902      	bls.n	800b1b8 <NVIC_EncodePriority+0x30>
 800b1b2:	69fb      	ldr	r3, [r7, #28]
 800b1b4:	3b03      	subs	r3, #3
 800b1b6:	e000      	b.n	800b1ba <NVIC_EncodePriority+0x32>
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b1bc:	f04f 32ff 	mov.w	r2, #4294967295
 800b1c0:	69bb      	ldr	r3, [r7, #24]
 800b1c2:	fa02 f303 	lsl.w	r3, r2, r3
 800b1c6:	43da      	mvns	r2, r3
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	401a      	ands	r2, r3
 800b1cc:	697b      	ldr	r3, [r7, #20]
 800b1ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b1d0:	f04f 31ff 	mov.w	r1, #4294967295
 800b1d4:	697b      	ldr	r3, [r7, #20]
 800b1d6:	fa01 f303 	lsl.w	r3, r1, r3
 800b1da:	43d9      	mvns	r1, r3
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b1e0:	4313      	orrs	r3, r2
         );
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3724      	adds	r7, #36	; 0x24
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ec:	4770      	bx	lr

0800b1ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b1ee:	b580      	push	{r7, lr}
 800b1f0:	b082      	sub	sp, #8
 800b1f2:	af00      	add	r7, sp, #0
 800b1f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f7ff ff4c 	bl	800b094 <__NVIC_SetPriorityGrouping>
}
 800b1fc:	bf00      	nop
 800b1fe:	3708      	adds	r7, #8
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}

0800b204 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b204:	b580      	push	{r7, lr}
 800b206:	b086      	sub	sp, #24
 800b208:	af00      	add	r7, sp, #0
 800b20a:	4603      	mov	r3, r0
 800b20c:	60b9      	str	r1, [r7, #8]
 800b20e:	607a      	str	r2, [r7, #4]
 800b210:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800b212:	2300      	movs	r3, #0
 800b214:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b216:	f7ff ff61 	bl	800b0dc <__NVIC_GetPriorityGrouping>
 800b21a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b21c:	687a      	ldr	r2, [r7, #4]
 800b21e:	68b9      	ldr	r1, [r7, #8]
 800b220:	6978      	ldr	r0, [r7, #20]
 800b222:	f7ff ffb1 	bl	800b188 <NVIC_EncodePriority>
 800b226:	4602      	mov	r2, r0
 800b228:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b22c:	4611      	mov	r1, r2
 800b22e:	4618      	mov	r0, r3
 800b230:	f7ff ff80 	bl	800b134 <__NVIC_SetPriority>
}
 800b234:	bf00      	nop
 800b236:	3718      	adds	r7, #24
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}

0800b23c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b082      	sub	sp, #8
 800b240:	af00      	add	r7, sp, #0
 800b242:	4603      	mov	r3, r0
 800b244:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b24a:	4618      	mov	r0, r3
 800b24c:	f7ff ff54 	bl	800b0f8 <__NVIC_EnableIRQ>
}
 800b250:	bf00      	nop
 800b252:	3708      	adds	r7, #8
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}

0800b258 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b086      	sub	sp, #24
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800b260:	2300      	movs	r3, #0
 800b262:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800b264:	f7ff fee8 	bl	800b038 <HAL_GetTick>
 800b268:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d101      	bne.n	800b274 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800b270:	2301      	movs	r3, #1
 800b272:	e099      	b.n	800b3a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2200      	movs	r2, #0
 800b278:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2202      	movs	r2, #2
 800b280:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	681a      	ldr	r2, [r3, #0]
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	f022 0201 	bic.w	r2, r2, #1
 800b292:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b294:	e00f      	b.n	800b2b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b296:	f7ff fecf 	bl	800b038 <HAL_GetTick>
 800b29a:	4602      	mov	r2, r0
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	1ad3      	subs	r3, r2, r3
 800b2a0:	2b05      	cmp	r3, #5
 800b2a2:	d908      	bls.n	800b2b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2220      	movs	r2, #32
 800b2a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2203      	movs	r2, #3
 800b2ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800b2b2:	2303      	movs	r3, #3
 800b2b4:	e078      	b.n	800b3a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f003 0301 	and.w	r3, r3, #1
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d1e8      	bne.n	800b296 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b2cc:	697a      	ldr	r2, [r7, #20]
 800b2ce:	4b38      	ldr	r3, [pc, #224]	; (800b3b0 <HAL_DMA_Init+0x158>)
 800b2d0:	4013      	ands	r3, r2
 800b2d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	685a      	ldr	r2, [r3, #4]
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	689b      	ldr	r3, [r3, #8]
 800b2dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b2e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	691b      	ldr	r3, [r3, #16]
 800b2e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b2ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	699b      	ldr	r3, [r3, #24]
 800b2f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b2fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6a1b      	ldr	r3, [r3, #32]
 800b300:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b302:	697a      	ldr	r2, [r7, #20]
 800b304:	4313      	orrs	r3, r2
 800b306:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b30c:	2b04      	cmp	r3, #4
 800b30e:	d107      	bne.n	800b320 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b318:	4313      	orrs	r3, r2
 800b31a:	697a      	ldr	r2, [r7, #20]
 800b31c:	4313      	orrs	r3, r2
 800b31e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	697a      	ldr	r2, [r7, #20]
 800b326:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	695b      	ldr	r3, [r3, #20]
 800b32e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b330:	697b      	ldr	r3, [r7, #20]
 800b332:	f023 0307 	bic.w	r3, r3, #7
 800b336:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b33c:	697a      	ldr	r2, [r7, #20]
 800b33e:	4313      	orrs	r3, r2
 800b340:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b346:	2b04      	cmp	r3, #4
 800b348:	d117      	bne.n	800b37a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b34e:	697a      	ldr	r2, [r7, #20]
 800b350:	4313      	orrs	r3, r2
 800b352:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d00e      	beq.n	800b37a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f000 fa9f 	bl	800b8a0 <DMA_CheckFifoParam>
 800b362:	4603      	mov	r3, r0
 800b364:	2b00      	cmp	r3, #0
 800b366:	d008      	beq.n	800b37a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2240      	movs	r2, #64	; 0x40
 800b36c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2201      	movs	r2, #1
 800b372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800b376:	2301      	movs	r3, #1
 800b378:	e016      	b.n	800b3a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	697a      	ldr	r2, [r7, #20]
 800b380:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f000 fa56 	bl	800b834 <DMA_CalcBaseAndBitshift>
 800b388:	4603      	mov	r3, r0
 800b38a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b390:	223f      	movs	r2, #63	; 0x3f
 800b392:	409a      	lsls	r2, r3
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2200      	movs	r2, #0
 800b39c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2201      	movs	r2, #1
 800b3a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800b3a6:	2300      	movs	r3, #0
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3718      	adds	r7, #24
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}
 800b3b0:	f010803f 	.word	0xf010803f

0800b3b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b086      	sub	sp, #24
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	60f8      	str	r0, [r7, #12]
 800b3bc:	60b9      	str	r1, [r7, #8]
 800b3be:	607a      	str	r2, [r7, #4]
 800b3c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3ca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b3d2:	2b01      	cmp	r3, #1
 800b3d4:	d101      	bne.n	800b3da <HAL_DMA_Start_IT+0x26>
 800b3d6:	2302      	movs	r3, #2
 800b3d8:	e040      	b.n	800b45c <HAL_DMA_Start_IT+0xa8>
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	2201      	movs	r2, #1
 800b3de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b3e8:	b2db      	uxtb	r3, r3
 800b3ea:	2b01      	cmp	r3, #1
 800b3ec:	d12f      	bne.n	800b44e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	2202      	movs	r2, #2
 800b3f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	687a      	ldr	r2, [r7, #4]
 800b400:	68b9      	ldr	r1, [r7, #8]
 800b402:	68f8      	ldr	r0, [r7, #12]
 800b404:	f000 f9e8 	bl	800b7d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b40c:	223f      	movs	r2, #63	; 0x3f
 800b40e:	409a      	lsls	r2, r3
 800b410:	693b      	ldr	r3, [r7, #16]
 800b412:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	681a      	ldr	r2, [r3, #0]
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	f042 0216 	orr.w	r2, r2, #22
 800b422:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d007      	beq.n	800b43c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	681a      	ldr	r2, [r3, #0]
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	f042 0208 	orr.w	r2, r2, #8
 800b43a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	681a      	ldr	r2, [r3, #0]
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	f042 0201 	orr.w	r2, r2, #1
 800b44a:	601a      	str	r2, [r3, #0]
 800b44c:	e005      	b.n	800b45a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	2200      	movs	r2, #0
 800b452:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800b456:	2302      	movs	r3, #2
 800b458:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800b45a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	3718      	adds	r7, #24
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}

0800b464 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b464:	b480      	push	{r7}
 800b466:	b083      	sub	sp, #12
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b472:	b2db      	uxtb	r3, r3
 800b474:	2b02      	cmp	r3, #2
 800b476:	d004      	beq.n	800b482 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2280      	movs	r2, #128	; 0x80
 800b47c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800b47e:	2301      	movs	r3, #1
 800b480:	e00c      	b.n	800b49c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2205      	movs	r2, #5
 800b486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	681a      	ldr	r2, [r3, #0]
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	f022 0201 	bic.w	r2, r2, #1
 800b498:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800b49a:	2300      	movs	r3, #0
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	370c      	adds	r7, #12
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a6:	4770      	bx	lr

0800b4a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b086      	sub	sp, #24
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800b4b4:	4b92      	ldr	r3, [pc, #584]	; (800b700 <HAL_DMA_IRQHandler+0x258>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	4a92      	ldr	r2, [pc, #584]	; (800b704 <HAL_DMA_IRQHandler+0x25c>)
 800b4ba:	fba2 2303 	umull	r2, r3, r2, r3
 800b4be:	0a9b      	lsrs	r3, r3, #10
 800b4c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800b4c8:	693b      	ldr	r3, [r7, #16]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b4d2:	2208      	movs	r2, #8
 800b4d4:	409a      	lsls	r2, r3
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	4013      	ands	r3, r2
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d01a      	beq.n	800b514 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	f003 0304 	and.w	r3, r3, #4
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d013      	beq.n	800b514 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	681a      	ldr	r2, [r3, #0]
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	f022 0204 	bic.w	r2, r2, #4
 800b4fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b500:	2208      	movs	r2, #8
 800b502:	409a      	lsls	r2, r3
 800b504:	693b      	ldr	r3, [r7, #16]
 800b506:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b50c:	f043 0201 	orr.w	r2, r3, #1
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b518:	2201      	movs	r2, #1
 800b51a:	409a      	lsls	r2, r3
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	4013      	ands	r3, r2
 800b520:	2b00      	cmp	r3, #0
 800b522:	d012      	beq.n	800b54a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	695b      	ldr	r3, [r3, #20]
 800b52a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d00b      	beq.n	800b54a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b536:	2201      	movs	r2, #1
 800b538:	409a      	lsls	r2, r3
 800b53a:	693b      	ldr	r3, [r7, #16]
 800b53c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b542:	f043 0202 	orr.w	r2, r3, #2
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b54e:	2204      	movs	r2, #4
 800b550:	409a      	lsls	r2, r3
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	4013      	ands	r3, r2
 800b556:	2b00      	cmp	r3, #0
 800b558:	d012      	beq.n	800b580 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f003 0302 	and.w	r3, r3, #2
 800b564:	2b00      	cmp	r3, #0
 800b566:	d00b      	beq.n	800b580 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b56c:	2204      	movs	r2, #4
 800b56e:	409a      	lsls	r2, r3
 800b570:	693b      	ldr	r3, [r7, #16]
 800b572:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b578:	f043 0204 	orr.w	r2, r3, #4
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b584:	2210      	movs	r2, #16
 800b586:	409a      	lsls	r2, r3
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	4013      	ands	r3, r2
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d043      	beq.n	800b618 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f003 0308 	and.w	r3, r3, #8
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d03c      	beq.n	800b618 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b5a2:	2210      	movs	r2, #16
 800b5a4:	409a      	lsls	r2, r3
 800b5a6:	693b      	ldr	r3, [r7, #16]
 800b5a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d018      	beq.n	800b5ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d108      	bne.n	800b5d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d024      	beq.n	800b618 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	4798      	blx	r3
 800b5d6:	e01f      	b.n	800b618 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d01b      	beq.n	800b618 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	4798      	blx	r3
 800b5e8:	e016      	b.n	800b618 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d107      	bne.n	800b608 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	681a      	ldr	r2, [r3, #0]
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	f022 0208 	bic.w	r2, r2, #8
 800b606:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d003      	beq.n	800b618 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b61c:	2220      	movs	r2, #32
 800b61e:	409a      	lsls	r2, r3
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	4013      	ands	r3, r2
 800b624:	2b00      	cmp	r3, #0
 800b626:	f000 808e 	beq.w	800b746 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f003 0310 	and.w	r3, r3, #16
 800b634:	2b00      	cmp	r3, #0
 800b636:	f000 8086 	beq.w	800b746 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b63e:	2220      	movs	r2, #32
 800b640:	409a      	lsls	r2, r3
 800b642:	693b      	ldr	r3, [r7, #16]
 800b644:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b64c:	b2db      	uxtb	r3, r3
 800b64e:	2b05      	cmp	r3, #5
 800b650:	d136      	bne.n	800b6c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	681a      	ldr	r2, [r3, #0]
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	f022 0216 	bic.w	r2, r2, #22
 800b660:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	695a      	ldr	r2, [r3, #20]
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b670:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b676:	2b00      	cmp	r3, #0
 800b678:	d103      	bne.n	800b682 <HAL_DMA_IRQHandler+0x1da>
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d007      	beq.n	800b692 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	681a      	ldr	r2, [r3, #0]
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	f022 0208 	bic.w	r2, r2, #8
 800b690:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b696:	223f      	movs	r2, #63	; 0x3f
 800b698:	409a      	lsls	r2, r3
 800b69a:	693b      	ldr	r3, [r7, #16]
 800b69c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2201      	movs	r2, #1
 800b6aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d07d      	beq.n	800b7b2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	4798      	blx	r3
        }
        return;
 800b6be:	e078      	b.n	800b7b2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d01c      	beq.n	800b708 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d108      	bne.n	800b6ee <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d030      	beq.n	800b746 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	4798      	blx	r3
 800b6ec:	e02b      	b.n	800b746 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d027      	beq.n	800b746 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	4798      	blx	r3
 800b6fe:	e022      	b.n	800b746 <HAL_DMA_IRQHandler+0x29e>
 800b700:	20000c8c 	.word	0x20000c8c
 800b704:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b712:	2b00      	cmp	r3, #0
 800b714:	d10f      	bne.n	800b736 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	681a      	ldr	r2, [r3, #0]
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f022 0210 	bic.w	r2, r2, #16
 800b724:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2200      	movs	r2, #0
 800b72a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2201      	movs	r2, #1
 800b732:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d003      	beq.n	800b746 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d032      	beq.n	800b7b4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b752:	f003 0301 	and.w	r3, r3, #1
 800b756:	2b00      	cmp	r3, #0
 800b758:	d022      	beq.n	800b7a0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2205      	movs	r2, #5
 800b75e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	681a      	ldr	r2, [r3, #0]
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f022 0201 	bic.w	r2, r2, #1
 800b770:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	3301      	adds	r3, #1
 800b776:	60bb      	str	r3, [r7, #8]
 800b778:	697a      	ldr	r2, [r7, #20]
 800b77a:	429a      	cmp	r2, r3
 800b77c:	d307      	bcc.n	800b78e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	f003 0301 	and.w	r3, r3, #1
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d1f2      	bne.n	800b772 <HAL_DMA_IRQHandler+0x2ca>
 800b78c:	e000      	b.n	800b790 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800b78e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2200      	movs	r2, #0
 800b794:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2201      	movs	r2, #1
 800b79c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d005      	beq.n	800b7b4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	4798      	blx	r3
 800b7b0:	e000      	b.n	800b7b4 <HAL_DMA_IRQHandler+0x30c>
        return;
 800b7b2:	bf00      	nop
    }
  }
}
 800b7b4:	3718      	adds	r7, #24
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}
 800b7ba:	bf00      	nop

0800b7bc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800b7bc:	b480      	push	{r7}
 800b7be:	b083      	sub	sp, #12
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b7ca:	b2db      	uxtb	r3, r3
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	370c      	adds	r7, #12
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d6:	4770      	bx	lr

0800b7d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b7d8:	b480      	push	{r7}
 800b7da:	b085      	sub	sp, #20
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	60f8      	str	r0, [r7, #12]
 800b7e0:	60b9      	str	r1, [r7, #8]
 800b7e2:	607a      	str	r2, [r7, #4]
 800b7e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	681a      	ldr	r2, [r3, #0]
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b7f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	683a      	ldr	r2, [r7, #0]
 800b7fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	689b      	ldr	r3, [r3, #8]
 800b802:	2b40      	cmp	r3, #64	; 0x40
 800b804:	d108      	bne.n	800b818 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	687a      	ldr	r2, [r7, #4]
 800b80c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	68ba      	ldr	r2, [r7, #8]
 800b814:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800b816:	e007      	b.n	800b828 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	68ba      	ldr	r2, [r7, #8]
 800b81e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	687a      	ldr	r2, [r7, #4]
 800b826:	60da      	str	r2, [r3, #12]
}
 800b828:	bf00      	nop
 800b82a:	3714      	adds	r7, #20
 800b82c:	46bd      	mov	sp, r7
 800b82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b832:	4770      	bx	lr

0800b834 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800b834:	b480      	push	{r7}
 800b836:	b085      	sub	sp, #20
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	b2db      	uxtb	r3, r3
 800b842:	3b10      	subs	r3, #16
 800b844:	4a14      	ldr	r2, [pc, #80]	; (800b898 <DMA_CalcBaseAndBitshift+0x64>)
 800b846:	fba2 2303 	umull	r2, r3, r2, r3
 800b84a:	091b      	lsrs	r3, r3, #4
 800b84c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800b84e:	4a13      	ldr	r2, [pc, #76]	; (800b89c <DMA_CalcBaseAndBitshift+0x68>)
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	4413      	add	r3, r2
 800b854:	781b      	ldrb	r3, [r3, #0]
 800b856:	461a      	mov	r2, r3
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	2b03      	cmp	r3, #3
 800b860:	d909      	bls.n	800b876 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800b86a:	f023 0303 	bic.w	r3, r3, #3
 800b86e:	1d1a      	adds	r2, r3, #4
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	659a      	str	r2, [r3, #88]	; 0x58
 800b874:	e007      	b.n	800b886 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800b87e:	f023 0303 	bic.w	r3, r3, #3
 800b882:	687a      	ldr	r2, [r7, #4]
 800b884:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	3714      	adds	r7, #20
 800b88e:	46bd      	mov	sp, r7
 800b890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b894:	4770      	bx	lr
 800b896:	bf00      	nop
 800b898:	aaaaaaab 	.word	0xaaaaaaab
 800b89c:	0801b2fc 	.word	0x0801b2fc

0800b8a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	b085      	sub	sp, #20
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	699b      	ldr	r3, [r3, #24]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d11f      	bne.n	800b8fa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	2b03      	cmp	r3, #3
 800b8be:	d855      	bhi.n	800b96c <DMA_CheckFifoParam+0xcc>
 800b8c0:	a201      	add	r2, pc, #4	; (adr r2, 800b8c8 <DMA_CheckFifoParam+0x28>)
 800b8c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8c6:	bf00      	nop
 800b8c8:	0800b8d9 	.word	0x0800b8d9
 800b8cc:	0800b8eb 	.word	0x0800b8eb
 800b8d0:	0800b8d9 	.word	0x0800b8d9
 800b8d4:	0800b96d 	.word	0x0800b96d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d045      	beq.n	800b970 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b8e8:	e042      	b.n	800b970 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b8f2:	d13f      	bne.n	800b974 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b8f8:	e03c      	b.n	800b974 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	699b      	ldr	r3, [r3, #24]
 800b8fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b902:	d121      	bne.n	800b948 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	2b03      	cmp	r3, #3
 800b908:	d836      	bhi.n	800b978 <DMA_CheckFifoParam+0xd8>
 800b90a:	a201      	add	r2, pc, #4	; (adr r2, 800b910 <DMA_CheckFifoParam+0x70>)
 800b90c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b910:	0800b921 	.word	0x0800b921
 800b914:	0800b927 	.word	0x0800b927
 800b918:	0800b921 	.word	0x0800b921
 800b91c:	0800b939 	.word	0x0800b939
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800b920:	2301      	movs	r3, #1
 800b922:	73fb      	strb	r3, [r7, #15]
      break;
 800b924:	e02f      	b.n	800b986 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b92a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d024      	beq.n	800b97c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800b932:	2301      	movs	r3, #1
 800b934:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b936:	e021      	b.n	800b97c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b93c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b940:	d11e      	bne.n	800b980 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800b942:	2301      	movs	r3, #1
 800b944:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800b946:	e01b      	b.n	800b980 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800b948:	68bb      	ldr	r3, [r7, #8]
 800b94a:	2b02      	cmp	r3, #2
 800b94c:	d902      	bls.n	800b954 <DMA_CheckFifoParam+0xb4>
 800b94e:	2b03      	cmp	r3, #3
 800b950:	d003      	beq.n	800b95a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800b952:	e018      	b.n	800b986 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800b954:	2301      	movs	r3, #1
 800b956:	73fb      	strb	r3, [r7, #15]
      break;
 800b958:	e015      	b.n	800b986 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b95e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b962:	2b00      	cmp	r3, #0
 800b964:	d00e      	beq.n	800b984 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800b966:	2301      	movs	r3, #1
 800b968:	73fb      	strb	r3, [r7, #15]
      break;
 800b96a:	e00b      	b.n	800b984 <DMA_CheckFifoParam+0xe4>
      break;
 800b96c:	bf00      	nop
 800b96e:	e00a      	b.n	800b986 <DMA_CheckFifoParam+0xe6>
      break;
 800b970:	bf00      	nop
 800b972:	e008      	b.n	800b986 <DMA_CheckFifoParam+0xe6>
      break;
 800b974:	bf00      	nop
 800b976:	e006      	b.n	800b986 <DMA_CheckFifoParam+0xe6>
      break;
 800b978:	bf00      	nop
 800b97a:	e004      	b.n	800b986 <DMA_CheckFifoParam+0xe6>
      break;
 800b97c:	bf00      	nop
 800b97e:	e002      	b.n	800b986 <DMA_CheckFifoParam+0xe6>
      break;   
 800b980:	bf00      	nop
 800b982:	e000      	b.n	800b986 <DMA_CheckFifoParam+0xe6>
      break;
 800b984:	bf00      	nop
    }
  } 
  
  return status; 
 800b986:	7bfb      	ldrb	r3, [r7, #15]
}
 800b988:	4618      	mov	r0, r3
 800b98a:	3714      	adds	r7, #20
 800b98c:	46bd      	mov	sp, r7
 800b98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b992:	4770      	bx	lr

0800b994 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b994:	b480      	push	{r7}
 800b996:	b089      	sub	sp, #36	; 0x24
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
 800b99c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b99e:	2300      	movs	r3, #0
 800b9a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	61fb      	str	r3, [r7, #28]
 800b9ae:	e16b      	b.n	800bc88 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b9b0:	2201      	movs	r2, #1
 800b9b2:	69fb      	ldr	r3, [r7, #28]
 800b9b4:	fa02 f303 	lsl.w	r3, r2, r3
 800b9b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	697a      	ldr	r2, [r7, #20]
 800b9c0:	4013      	ands	r3, r2
 800b9c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b9c4:	693a      	ldr	r2, [r7, #16]
 800b9c6:	697b      	ldr	r3, [r7, #20]
 800b9c8:	429a      	cmp	r2, r3
 800b9ca:	f040 815a 	bne.w	800bc82 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	685b      	ldr	r3, [r3, #4]
 800b9d2:	2b01      	cmp	r3, #1
 800b9d4:	d00b      	beq.n	800b9ee <HAL_GPIO_Init+0x5a>
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	685b      	ldr	r3, [r3, #4]
 800b9da:	2b02      	cmp	r3, #2
 800b9dc:	d007      	beq.n	800b9ee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b9e2:	2b11      	cmp	r3, #17
 800b9e4:	d003      	beq.n	800b9ee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	685b      	ldr	r3, [r3, #4]
 800b9ea:	2b12      	cmp	r3, #18
 800b9ec:	d130      	bne.n	800ba50 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	689b      	ldr	r3, [r3, #8]
 800b9f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b9f4:	69fb      	ldr	r3, [r7, #28]
 800b9f6:	005b      	lsls	r3, r3, #1
 800b9f8:	2203      	movs	r2, #3
 800b9fa:	fa02 f303 	lsl.w	r3, r2, r3
 800b9fe:	43db      	mvns	r3, r3
 800ba00:	69ba      	ldr	r2, [r7, #24]
 800ba02:	4013      	ands	r3, r2
 800ba04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	68da      	ldr	r2, [r3, #12]
 800ba0a:	69fb      	ldr	r3, [r7, #28]
 800ba0c:	005b      	lsls	r3, r3, #1
 800ba0e:	fa02 f303 	lsl.w	r3, r2, r3
 800ba12:	69ba      	ldr	r2, [r7, #24]
 800ba14:	4313      	orrs	r3, r2
 800ba16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	69ba      	ldr	r2, [r7, #24]
 800ba1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	685b      	ldr	r3, [r3, #4]
 800ba22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ba24:	2201      	movs	r2, #1
 800ba26:	69fb      	ldr	r3, [r7, #28]
 800ba28:	fa02 f303 	lsl.w	r3, r2, r3
 800ba2c:	43db      	mvns	r3, r3
 800ba2e:	69ba      	ldr	r2, [r7, #24]
 800ba30:	4013      	ands	r3, r2
 800ba32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	685b      	ldr	r3, [r3, #4]
 800ba38:	091b      	lsrs	r3, r3, #4
 800ba3a:	f003 0201 	and.w	r2, r3, #1
 800ba3e:	69fb      	ldr	r3, [r7, #28]
 800ba40:	fa02 f303 	lsl.w	r3, r2, r3
 800ba44:	69ba      	ldr	r2, [r7, #24]
 800ba46:	4313      	orrs	r3, r2
 800ba48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	69ba      	ldr	r2, [r7, #24]
 800ba4e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	68db      	ldr	r3, [r3, #12]
 800ba54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800ba56:	69fb      	ldr	r3, [r7, #28]
 800ba58:	005b      	lsls	r3, r3, #1
 800ba5a:	2203      	movs	r2, #3
 800ba5c:	fa02 f303 	lsl.w	r3, r2, r3
 800ba60:	43db      	mvns	r3, r3
 800ba62:	69ba      	ldr	r2, [r7, #24]
 800ba64:	4013      	ands	r3, r2
 800ba66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	689a      	ldr	r2, [r3, #8]
 800ba6c:	69fb      	ldr	r3, [r7, #28]
 800ba6e:	005b      	lsls	r3, r3, #1
 800ba70:	fa02 f303 	lsl.w	r3, r2, r3
 800ba74:	69ba      	ldr	r2, [r7, #24]
 800ba76:	4313      	orrs	r3, r2
 800ba78:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	69ba      	ldr	r2, [r7, #24]
 800ba7e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	685b      	ldr	r3, [r3, #4]
 800ba84:	2b02      	cmp	r3, #2
 800ba86:	d003      	beq.n	800ba90 <HAL_GPIO_Init+0xfc>
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	685b      	ldr	r3, [r3, #4]
 800ba8c:	2b12      	cmp	r3, #18
 800ba8e:	d123      	bne.n	800bad8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ba90:	69fb      	ldr	r3, [r7, #28]
 800ba92:	08da      	lsrs	r2, r3, #3
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	3208      	adds	r2, #8
 800ba98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800ba9e:	69fb      	ldr	r3, [r7, #28]
 800baa0:	f003 0307 	and.w	r3, r3, #7
 800baa4:	009b      	lsls	r3, r3, #2
 800baa6:	220f      	movs	r2, #15
 800baa8:	fa02 f303 	lsl.w	r3, r2, r3
 800baac:	43db      	mvns	r3, r3
 800baae:	69ba      	ldr	r2, [r7, #24]
 800bab0:	4013      	ands	r3, r2
 800bab2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	691a      	ldr	r2, [r3, #16]
 800bab8:	69fb      	ldr	r3, [r7, #28]
 800baba:	f003 0307 	and.w	r3, r3, #7
 800babe:	009b      	lsls	r3, r3, #2
 800bac0:	fa02 f303 	lsl.w	r3, r2, r3
 800bac4:	69ba      	ldr	r2, [r7, #24]
 800bac6:	4313      	orrs	r3, r2
 800bac8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800baca:	69fb      	ldr	r3, [r7, #28]
 800bacc:	08da      	lsrs	r2, r3, #3
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	3208      	adds	r2, #8
 800bad2:	69b9      	ldr	r1, [r7, #24]
 800bad4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800bade:	69fb      	ldr	r3, [r7, #28]
 800bae0:	005b      	lsls	r3, r3, #1
 800bae2:	2203      	movs	r2, #3
 800bae4:	fa02 f303 	lsl.w	r3, r2, r3
 800bae8:	43db      	mvns	r3, r3
 800baea:	69ba      	ldr	r2, [r7, #24]
 800baec:	4013      	ands	r3, r2
 800baee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	685b      	ldr	r3, [r3, #4]
 800baf4:	f003 0203 	and.w	r2, r3, #3
 800baf8:	69fb      	ldr	r3, [r7, #28]
 800bafa:	005b      	lsls	r3, r3, #1
 800bafc:	fa02 f303 	lsl.w	r3, r2, r3
 800bb00:	69ba      	ldr	r2, [r7, #24]
 800bb02:	4313      	orrs	r3, r2
 800bb04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	69ba      	ldr	r2, [r7, #24]
 800bb0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	685b      	ldr	r3, [r3, #4]
 800bb10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	f000 80b4 	beq.w	800bc82 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	60fb      	str	r3, [r7, #12]
 800bb1e:	4b5f      	ldr	r3, [pc, #380]	; (800bc9c <HAL_GPIO_Init+0x308>)
 800bb20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb22:	4a5e      	ldr	r2, [pc, #376]	; (800bc9c <HAL_GPIO_Init+0x308>)
 800bb24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bb28:	6453      	str	r3, [r2, #68]	; 0x44
 800bb2a:	4b5c      	ldr	r3, [pc, #368]	; (800bc9c <HAL_GPIO_Init+0x308>)
 800bb2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bb32:	60fb      	str	r3, [r7, #12]
 800bb34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800bb36:	4a5a      	ldr	r2, [pc, #360]	; (800bca0 <HAL_GPIO_Init+0x30c>)
 800bb38:	69fb      	ldr	r3, [r7, #28]
 800bb3a:	089b      	lsrs	r3, r3, #2
 800bb3c:	3302      	adds	r3, #2
 800bb3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800bb44:	69fb      	ldr	r3, [r7, #28]
 800bb46:	f003 0303 	and.w	r3, r3, #3
 800bb4a:	009b      	lsls	r3, r3, #2
 800bb4c:	220f      	movs	r2, #15
 800bb4e:	fa02 f303 	lsl.w	r3, r2, r3
 800bb52:	43db      	mvns	r3, r3
 800bb54:	69ba      	ldr	r2, [r7, #24]
 800bb56:	4013      	ands	r3, r2
 800bb58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	4a51      	ldr	r2, [pc, #324]	; (800bca4 <HAL_GPIO_Init+0x310>)
 800bb5e:	4293      	cmp	r3, r2
 800bb60:	d02b      	beq.n	800bbba <HAL_GPIO_Init+0x226>
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	4a50      	ldr	r2, [pc, #320]	; (800bca8 <HAL_GPIO_Init+0x314>)
 800bb66:	4293      	cmp	r3, r2
 800bb68:	d025      	beq.n	800bbb6 <HAL_GPIO_Init+0x222>
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	4a4f      	ldr	r2, [pc, #316]	; (800bcac <HAL_GPIO_Init+0x318>)
 800bb6e:	4293      	cmp	r3, r2
 800bb70:	d01f      	beq.n	800bbb2 <HAL_GPIO_Init+0x21e>
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	4a4e      	ldr	r2, [pc, #312]	; (800bcb0 <HAL_GPIO_Init+0x31c>)
 800bb76:	4293      	cmp	r3, r2
 800bb78:	d019      	beq.n	800bbae <HAL_GPIO_Init+0x21a>
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	4a4d      	ldr	r2, [pc, #308]	; (800bcb4 <HAL_GPIO_Init+0x320>)
 800bb7e:	4293      	cmp	r3, r2
 800bb80:	d013      	beq.n	800bbaa <HAL_GPIO_Init+0x216>
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	4a4c      	ldr	r2, [pc, #304]	; (800bcb8 <HAL_GPIO_Init+0x324>)
 800bb86:	4293      	cmp	r3, r2
 800bb88:	d00d      	beq.n	800bba6 <HAL_GPIO_Init+0x212>
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	4a4b      	ldr	r2, [pc, #300]	; (800bcbc <HAL_GPIO_Init+0x328>)
 800bb8e:	4293      	cmp	r3, r2
 800bb90:	d007      	beq.n	800bba2 <HAL_GPIO_Init+0x20e>
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	4a4a      	ldr	r2, [pc, #296]	; (800bcc0 <HAL_GPIO_Init+0x32c>)
 800bb96:	4293      	cmp	r3, r2
 800bb98:	d101      	bne.n	800bb9e <HAL_GPIO_Init+0x20a>
 800bb9a:	2307      	movs	r3, #7
 800bb9c:	e00e      	b.n	800bbbc <HAL_GPIO_Init+0x228>
 800bb9e:	2308      	movs	r3, #8
 800bba0:	e00c      	b.n	800bbbc <HAL_GPIO_Init+0x228>
 800bba2:	2306      	movs	r3, #6
 800bba4:	e00a      	b.n	800bbbc <HAL_GPIO_Init+0x228>
 800bba6:	2305      	movs	r3, #5
 800bba8:	e008      	b.n	800bbbc <HAL_GPIO_Init+0x228>
 800bbaa:	2304      	movs	r3, #4
 800bbac:	e006      	b.n	800bbbc <HAL_GPIO_Init+0x228>
 800bbae:	2303      	movs	r3, #3
 800bbb0:	e004      	b.n	800bbbc <HAL_GPIO_Init+0x228>
 800bbb2:	2302      	movs	r3, #2
 800bbb4:	e002      	b.n	800bbbc <HAL_GPIO_Init+0x228>
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	e000      	b.n	800bbbc <HAL_GPIO_Init+0x228>
 800bbba:	2300      	movs	r3, #0
 800bbbc:	69fa      	ldr	r2, [r7, #28]
 800bbbe:	f002 0203 	and.w	r2, r2, #3
 800bbc2:	0092      	lsls	r2, r2, #2
 800bbc4:	4093      	lsls	r3, r2
 800bbc6:	69ba      	ldr	r2, [r7, #24]
 800bbc8:	4313      	orrs	r3, r2
 800bbca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800bbcc:	4934      	ldr	r1, [pc, #208]	; (800bca0 <HAL_GPIO_Init+0x30c>)
 800bbce:	69fb      	ldr	r3, [r7, #28]
 800bbd0:	089b      	lsrs	r3, r3, #2
 800bbd2:	3302      	adds	r3, #2
 800bbd4:	69ba      	ldr	r2, [r7, #24]
 800bbd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800bbda:	4b3a      	ldr	r3, [pc, #232]	; (800bcc4 <HAL_GPIO_Init+0x330>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bbe0:	693b      	ldr	r3, [r7, #16]
 800bbe2:	43db      	mvns	r3, r3
 800bbe4:	69ba      	ldr	r2, [r7, #24]
 800bbe6:	4013      	ands	r3, r2
 800bbe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	685b      	ldr	r3, [r3, #4]
 800bbee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d003      	beq.n	800bbfe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800bbf6:	69ba      	ldr	r2, [r7, #24]
 800bbf8:	693b      	ldr	r3, [r7, #16]
 800bbfa:	4313      	orrs	r3, r2
 800bbfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800bbfe:	4a31      	ldr	r2, [pc, #196]	; (800bcc4 <HAL_GPIO_Init+0x330>)
 800bc00:	69bb      	ldr	r3, [r7, #24]
 800bc02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800bc04:	4b2f      	ldr	r3, [pc, #188]	; (800bcc4 <HAL_GPIO_Init+0x330>)
 800bc06:	685b      	ldr	r3, [r3, #4]
 800bc08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	43db      	mvns	r3, r3
 800bc0e:	69ba      	ldr	r2, [r7, #24]
 800bc10:	4013      	ands	r3, r2
 800bc12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	685b      	ldr	r3, [r3, #4]
 800bc18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d003      	beq.n	800bc28 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800bc20:	69ba      	ldr	r2, [r7, #24]
 800bc22:	693b      	ldr	r3, [r7, #16]
 800bc24:	4313      	orrs	r3, r2
 800bc26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800bc28:	4a26      	ldr	r2, [pc, #152]	; (800bcc4 <HAL_GPIO_Init+0x330>)
 800bc2a:	69bb      	ldr	r3, [r7, #24]
 800bc2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800bc2e:	4b25      	ldr	r3, [pc, #148]	; (800bcc4 <HAL_GPIO_Init+0x330>)
 800bc30:	689b      	ldr	r3, [r3, #8]
 800bc32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bc34:	693b      	ldr	r3, [r7, #16]
 800bc36:	43db      	mvns	r3, r3
 800bc38:	69ba      	ldr	r2, [r7, #24]
 800bc3a:	4013      	ands	r3, r2
 800bc3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	685b      	ldr	r3, [r3, #4]
 800bc42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d003      	beq.n	800bc52 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800bc4a:	69ba      	ldr	r2, [r7, #24]
 800bc4c:	693b      	ldr	r3, [r7, #16]
 800bc4e:	4313      	orrs	r3, r2
 800bc50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800bc52:	4a1c      	ldr	r2, [pc, #112]	; (800bcc4 <HAL_GPIO_Init+0x330>)
 800bc54:	69bb      	ldr	r3, [r7, #24]
 800bc56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800bc58:	4b1a      	ldr	r3, [pc, #104]	; (800bcc4 <HAL_GPIO_Init+0x330>)
 800bc5a:	68db      	ldr	r3, [r3, #12]
 800bc5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bc5e:	693b      	ldr	r3, [r7, #16]
 800bc60:	43db      	mvns	r3, r3
 800bc62:	69ba      	ldr	r2, [r7, #24]
 800bc64:	4013      	ands	r3, r2
 800bc66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	685b      	ldr	r3, [r3, #4]
 800bc6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d003      	beq.n	800bc7c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800bc74:	69ba      	ldr	r2, [r7, #24]
 800bc76:	693b      	ldr	r3, [r7, #16]
 800bc78:	4313      	orrs	r3, r2
 800bc7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800bc7c:	4a11      	ldr	r2, [pc, #68]	; (800bcc4 <HAL_GPIO_Init+0x330>)
 800bc7e:	69bb      	ldr	r3, [r7, #24]
 800bc80:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800bc82:	69fb      	ldr	r3, [r7, #28]
 800bc84:	3301      	adds	r3, #1
 800bc86:	61fb      	str	r3, [r7, #28]
 800bc88:	69fb      	ldr	r3, [r7, #28]
 800bc8a:	2b0f      	cmp	r3, #15
 800bc8c:	f67f ae90 	bls.w	800b9b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800bc90:	bf00      	nop
 800bc92:	3724      	adds	r7, #36	; 0x24
 800bc94:	46bd      	mov	sp, r7
 800bc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9a:	4770      	bx	lr
 800bc9c:	40023800 	.word	0x40023800
 800bca0:	40013800 	.word	0x40013800
 800bca4:	40020000 	.word	0x40020000
 800bca8:	40020400 	.word	0x40020400
 800bcac:	40020800 	.word	0x40020800
 800bcb0:	40020c00 	.word	0x40020c00
 800bcb4:	40021000 	.word	0x40021000
 800bcb8:	40021400 	.word	0x40021400
 800bcbc:	40021800 	.word	0x40021800
 800bcc0:	40021c00 	.word	0x40021c00
 800bcc4:	40013c00 	.word	0x40013c00

0800bcc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800bcc8:	b480      	push	{r7}
 800bcca:	b083      	sub	sp, #12
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
 800bcd0:	460b      	mov	r3, r1
 800bcd2:	807b      	strh	r3, [r7, #2]
 800bcd4:	4613      	mov	r3, r2
 800bcd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800bcd8:	787b      	ldrb	r3, [r7, #1]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d003      	beq.n	800bce6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800bcde:	887a      	ldrh	r2, [r7, #2]
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800bce4:	e003      	b.n	800bcee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800bce6:	887b      	ldrh	r3, [r7, #2]
 800bce8:	041a      	lsls	r2, r3, #16
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	619a      	str	r2, [r3, #24]
}
 800bcee:	bf00      	nop
 800bcf0:	370c      	adds	r7, #12
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf8:	4770      	bx	lr
	...

0800bcfc <HAL_NOR_Init>:
  * @param  Timing pointer to NOR control timing structure 
  * @param  ExtTiming pointer to NOR extended mode timing structure    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b084      	sub	sp, #16
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	60f8      	str	r0, [r7, #12]
 800bd04:	60b9      	str	r1, [r7, #8]
 800bd06:	607a      	str	r2, [r7, #4]
  /* Check the NOR handle parameter */
  if(hnor == NULL)
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d101      	bne.n	800bd12 <HAL_NOR_Init+0x16>
  {
     return HAL_ERROR;
 800bd0e:	2301      	movs	r3, #1
 800bd10:	e043      	b.n	800bd9a <HAL_NOR_Init+0x9e>
  }
  
  if(hnor->State == HAL_NOR_STATE_RESET)
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800bd18:	b2db      	uxtb	r3, r3
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d106      	bne.n	800bd2c <HAL_NOR_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	2200      	movs	r2, #0
 800bd22:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 800bd26:	68f8      	ldr	r0, [r7, #12]
 800bd28:	f7f7 f894 	bl	8002e54 <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }
  
  /* Initialize NOR control Interface */
  FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	681a      	ldr	r2, [r3, #0]
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	3308      	adds	r3, #8
 800bd34:	4619      	mov	r1, r3
 800bd36:	4610      	mov	r0, r2
 800bd38:	f003 f810 	bl	800ed5c <FSMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank); 
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	6818      	ldr	r0, [r3, #0]
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	689b      	ldr	r3, [r3, #8]
 800bd44:	461a      	mov	r2, r3
 800bd46:	68b9      	ldr	r1, [r7, #8]
 800bd48:	f003 f85a 	bl	800ee00 <FSMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	6858      	ldr	r0, [r3, #4]
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	689a      	ldr	r2, [r3, #8]
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd58:	6879      	ldr	r1, [r7, #4]
 800bd5a:	f003 f88f 	bl	800ee7c <FSMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	68fa      	ldr	r2, [r7, #12]
 800bd64:	6892      	ldr	r2, [r2, #8]
 800bd66:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	68fa      	ldr	r2, [r7, #12]
 800bd70:	6892      	ldr	r2, [r2, #8]
 800bd72:	f041 0101 	orr.w	r1, r1, #1
 800bd76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	695b      	ldr	r3, [r3, #20]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d103      	bne.n	800bd8a <HAL_NOR_Init+0x8e>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 800bd82:	4b08      	ldr	r3, [pc, #32]	; (800bda4 <HAL_NOR_Init+0xa8>)
 800bd84:	2200      	movs	r2, #0
 800bd86:	601a      	str	r2, [r3, #0]
 800bd88:	e002      	b.n	800bd90 <HAL_NOR_Init+0x94>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 800bd8a:	4b06      	ldr	r3, [pc, #24]	; (800bda4 <HAL_NOR_Init+0xa8>)
 800bd8c:	2201      	movs	r2, #1
 800bd8e:	601a      	str	r2, [r3, #0]
  }

  /* Check the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY; 
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	2201      	movs	r2, #1
 800bd94:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  return HAL_OK;
 800bd98:	2300      	movs	r3, #0
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	3710      	adds	r7, #16
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}
 800bda2:	bf00      	nop
 800bda4:	20001458 	.word	0x20001458

0800bda8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800bda8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdaa:	b08f      	sub	sp, #60	; 0x3c
 800bdac:	af0a      	add	r7, sp, #40	; 0x28
 800bdae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d101      	bne.n	800bdba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	e10f      	b.n	800bfda <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800bdc6:	b2db      	uxtb	r3, r3
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d106      	bne.n	800bdda <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2200      	movs	r2, #0
 800bdd0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800bdd4:	6878      	ldr	r0, [r7, #4]
 800bdd6:	f009 fa79 	bl	80152cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2203      	movs	r2, #3
 800bdde:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bde6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d102      	bne.n	800bdf4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	f003 f994 	bl	800f126 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	603b      	str	r3, [r7, #0]
 800be04:	687e      	ldr	r6, [r7, #4]
 800be06:	466d      	mov	r5, sp
 800be08:	f106 0410 	add.w	r4, r6, #16
 800be0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800be0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800be10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800be12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800be14:	e894 0003 	ldmia.w	r4, {r0, r1}
 800be18:	e885 0003 	stmia.w	r5, {r0, r1}
 800be1c:	1d33      	adds	r3, r6, #4
 800be1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800be20:	6838      	ldr	r0, [r7, #0]
 800be22:	f003 f86b 	bl	800eefc <USB_CoreInit>
 800be26:	4603      	mov	r3, r0
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d005      	beq.n	800be38 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2202      	movs	r2, #2
 800be30:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800be34:	2301      	movs	r3, #1
 800be36:	e0d0      	b.n	800bfda <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	2100      	movs	r1, #0
 800be3e:	4618      	mov	r0, r3
 800be40:	f003 f982 	bl	800f148 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800be44:	2300      	movs	r3, #0
 800be46:	73fb      	strb	r3, [r7, #15]
 800be48:	e04a      	b.n	800bee0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800be4a:	7bfa      	ldrb	r2, [r7, #15]
 800be4c:	6879      	ldr	r1, [r7, #4]
 800be4e:	4613      	mov	r3, r2
 800be50:	00db      	lsls	r3, r3, #3
 800be52:	1a9b      	subs	r3, r3, r2
 800be54:	009b      	lsls	r3, r3, #2
 800be56:	440b      	add	r3, r1
 800be58:	333d      	adds	r3, #61	; 0x3d
 800be5a:	2201      	movs	r2, #1
 800be5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800be5e:	7bfa      	ldrb	r2, [r7, #15]
 800be60:	6879      	ldr	r1, [r7, #4]
 800be62:	4613      	mov	r3, r2
 800be64:	00db      	lsls	r3, r3, #3
 800be66:	1a9b      	subs	r3, r3, r2
 800be68:	009b      	lsls	r3, r3, #2
 800be6a:	440b      	add	r3, r1
 800be6c:	333c      	adds	r3, #60	; 0x3c
 800be6e:	7bfa      	ldrb	r2, [r7, #15]
 800be70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800be72:	7bfa      	ldrb	r2, [r7, #15]
 800be74:	7bfb      	ldrb	r3, [r7, #15]
 800be76:	b298      	uxth	r0, r3
 800be78:	6879      	ldr	r1, [r7, #4]
 800be7a:	4613      	mov	r3, r2
 800be7c:	00db      	lsls	r3, r3, #3
 800be7e:	1a9b      	subs	r3, r3, r2
 800be80:	009b      	lsls	r3, r3, #2
 800be82:	440b      	add	r3, r1
 800be84:	3342      	adds	r3, #66	; 0x42
 800be86:	4602      	mov	r2, r0
 800be88:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800be8a:	7bfa      	ldrb	r2, [r7, #15]
 800be8c:	6879      	ldr	r1, [r7, #4]
 800be8e:	4613      	mov	r3, r2
 800be90:	00db      	lsls	r3, r3, #3
 800be92:	1a9b      	subs	r3, r3, r2
 800be94:	009b      	lsls	r3, r3, #2
 800be96:	440b      	add	r3, r1
 800be98:	333f      	adds	r3, #63	; 0x3f
 800be9a:	2200      	movs	r2, #0
 800be9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800be9e:	7bfa      	ldrb	r2, [r7, #15]
 800bea0:	6879      	ldr	r1, [r7, #4]
 800bea2:	4613      	mov	r3, r2
 800bea4:	00db      	lsls	r3, r3, #3
 800bea6:	1a9b      	subs	r3, r3, r2
 800bea8:	009b      	lsls	r3, r3, #2
 800beaa:	440b      	add	r3, r1
 800beac:	3344      	adds	r3, #68	; 0x44
 800beae:	2200      	movs	r2, #0
 800beb0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800beb2:	7bfa      	ldrb	r2, [r7, #15]
 800beb4:	6879      	ldr	r1, [r7, #4]
 800beb6:	4613      	mov	r3, r2
 800beb8:	00db      	lsls	r3, r3, #3
 800beba:	1a9b      	subs	r3, r3, r2
 800bebc:	009b      	lsls	r3, r3, #2
 800bebe:	440b      	add	r3, r1
 800bec0:	3348      	adds	r3, #72	; 0x48
 800bec2:	2200      	movs	r2, #0
 800bec4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800bec6:	7bfa      	ldrb	r2, [r7, #15]
 800bec8:	6879      	ldr	r1, [r7, #4]
 800beca:	4613      	mov	r3, r2
 800becc:	00db      	lsls	r3, r3, #3
 800bece:	1a9b      	subs	r3, r3, r2
 800bed0:	009b      	lsls	r3, r3, #2
 800bed2:	440b      	add	r3, r1
 800bed4:	3350      	adds	r3, #80	; 0x50
 800bed6:	2200      	movs	r2, #0
 800bed8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800beda:	7bfb      	ldrb	r3, [r7, #15]
 800bedc:	3301      	adds	r3, #1
 800bede:	73fb      	strb	r3, [r7, #15]
 800bee0:	7bfa      	ldrb	r2, [r7, #15]
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	685b      	ldr	r3, [r3, #4]
 800bee6:	429a      	cmp	r2, r3
 800bee8:	d3af      	bcc.n	800be4a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800beea:	2300      	movs	r3, #0
 800beec:	73fb      	strb	r3, [r7, #15]
 800beee:	e044      	b.n	800bf7a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800bef0:	7bfa      	ldrb	r2, [r7, #15]
 800bef2:	6879      	ldr	r1, [r7, #4]
 800bef4:	4613      	mov	r3, r2
 800bef6:	00db      	lsls	r3, r3, #3
 800bef8:	1a9b      	subs	r3, r3, r2
 800befa:	009b      	lsls	r3, r3, #2
 800befc:	440b      	add	r3, r1
 800befe:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800bf02:	2200      	movs	r2, #0
 800bf04:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800bf06:	7bfa      	ldrb	r2, [r7, #15]
 800bf08:	6879      	ldr	r1, [r7, #4]
 800bf0a:	4613      	mov	r3, r2
 800bf0c:	00db      	lsls	r3, r3, #3
 800bf0e:	1a9b      	subs	r3, r3, r2
 800bf10:	009b      	lsls	r3, r3, #2
 800bf12:	440b      	add	r3, r1
 800bf14:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800bf18:	7bfa      	ldrb	r2, [r7, #15]
 800bf1a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800bf1c:	7bfa      	ldrb	r2, [r7, #15]
 800bf1e:	6879      	ldr	r1, [r7, #4]
 800bf20:	4613      	mov	r3, r2
 800bf22:	00db      	lsls	r3, r3, #3
 800bf24:	1a9b      	subs	r3, r3, r2
 800bf26:	009b      	lsls	r3, r3, #2
 800bf28:	440b      	add	r3, r1
 800bf2a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800bf2e:	2200      	movs	r2, #0
 800bf30:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800bf32:	7bfa      	ldrb	r2, [r7, #15]
 800bf34:	6879      	ldr	r1, [r7, #4]
 800bf36:	4613      	mov	r3, r2
 800bf38:	00db      	lsls	r3, r3, #3
 800bf3a:	1a9b      	subs	r3, r3, r2
 800bf3c:	009b      	lsls	r3, r3, #2
 800bf3e:	440b      	add	r3, r1
 800bf40:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800bf44:	2200      	movs	r2, #0
 800bf46:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800bf48:	7bfa      	ldrb	r2, [r7, #15]
 800bf4a:	6879      	ldr	r1, [r7, #4]
 800bf4c:	4613      	mov	r3, r2
 800bf4e:	00db      	lsls	r3, r3, #3
 800bf50:	1a9b      	subs	r3, r3, r2
 800bf52:	009b      	lsls	r3, r3, #2
 800bf54:	440b      	add	r3, r1
 800bf56:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800bf5e:	7bfa      	ldrb	r2, [r7, #15]
 800bf60:	6879      	ldr	r1, [r7, #4]
 800bf62:	4613      	mov	r3, r2
 800bf64:	00db      	lsls	r3, r3, #3
 800bf66:	1a9b      	subs	r3, r3, r2
 800bf68:	009b      	lsls	r3, r3, #2
 800bf6a:	440b      	add	r3, r1
 800bf6c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800bf70:	2200      	movs	r2, #0
 800bf72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bf74:	7bfb      	ldrb	r3, [r7, #15]
 800bf76:	3301      	adds	r3, #1
 800bf78:	73fb      	strb	r3, [r7, #15]
 800bf7a:	7bfa      	ldrb	r2, [r7, #15]
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	685b      	ldr	r3, [r3, #4]
 800bf80:	429a      	cmp	r2, r3
 800bf82:	d3b5      	bcc.n	800bef0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	603b      	str	r3, [r7, #0]
 800bf8a:	687e      	ldr	r6, [r7, #4]
 800bf8c:	466d      	mov	r5, sp
 800bf8e:	f106 0410 	add.w	r4, r6, #16
 800bf92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bf94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bf96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bf98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bf9a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800bf9e:	e885 0003 	stmia.w	r5, {r0, r1}
 800bfa2:	1d33      	adds	r3, r6, #4
 800bfa4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bfa6:	6838      	ldr	r0, [r7, #0]
 800bfa8:	f003 f8f8 	bl	800f19c <USB_DevInit>
 800bfac:	4603      	mov	r3, r0
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d005      	beq.n	800bfbe <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	2202      	movs	r2, #2
 800bfb6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800bfba:	2301      	movs	r3, #1
 800bfbc:	e00d      	b.n	800bfda <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	2201      	movs	r2, #1
 800bfca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	f004 f8ed 	bl	80101b2 <USB_DevDisconnect>

  return HAL_OK;
 800bfd8:	2300      	movs	r3, #0
}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	3714      	adds	r7, #20
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bfe2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800bfe2:	b580      	push	{r7, lr}
 800bfe4:	b084      	sub	sp, #16
 800bfe6:	af00      	add	r7, sp, #0
 800bfe8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800bff6:	2b01      	cmp	r3, #1
 800bff8:	d101      	bne.n	800bffe <HAL_PCD_Start+0x1c>
 800bffa:	2302      	movs	r3, #2
 800bffc:	e020      	b.n	800c040 <HAL_PCD_Start+0x5e>
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	2201      	movs	r2, #1
 800c002:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c00a:	2b01      	cmp	r3, #1
 800c00c:	d109      	bne.n	800c022 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800c012:	2b01      	cmp	r3, #1
 800c014:	d005      	beq.n	800c022 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c01a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	4618      	mov	r0, r3
 800c028:	f004 f8ab 	bl	8010182 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	4618      	mov	r0, r3
 800c032:	f003 f867 	bl	800f104 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2200      	movs	r2, #0
 800c03a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800c03e:	2300      	movs	r3, #0
}
 800c040:	4618      	mov	r0, r3
 800c042:	3710      	adds	r7, #16
 800c044:	46bd      	mov	sp, r7
 800c046:	bd80      	pop	{r7, pc}

0800c048 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800c048:	b590      	push	{r4, r7, lr}
 800c04a:	b08d      	sub	sp, #52	; 0x34
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c056:	6a3b      	ldr	r3, [r7, #32]
 800c058:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	4618      	mov	r0, r3
 800c060:	f004 f952 	bl	8010308 <USB_GetMode>
 800c064:	4603      	mov	r3, r0
 800c066:	2b00      	cmp	r3, #0
 800c068:	f040 838e 	bne.w	800c788 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	4618      	mov	r0, r3
 800c072:	f004 f8b6 	bl	80101e2 <USB_ReadInterrupts>
 800c076:	4603      	mov	r3, r0
 800c078:	2b00      	cmp	r3, #0
 800c07a:	f000 8384 	beq.w	800c786 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	4618      	mov	r0, r3
 800c084:	f004 f8ad 	bl	80101e2 <USB_ReadInterrupts>
 800c088:	4603      	mov	r3, r0
 800c08a:	f003 0302 	and.w	r3, r3, #2
 800c08e:	2b02      	cmp	r3, #2
 800c090:	d107      	bne.n	800c0a2 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	695a      	ldr	r2, [r3, #20]
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	f002 0202 	and.w	r2, r2, #2
 800c0a0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f004 f89b 	bl	80101e2 <USB_ReadInterrupts>
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c0b2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c0b6:	d17b      	bne.n	800c1b0 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	f004 f8a1 	bl	8010208 <USB_ReadDevAllOutEpInterrupt>
 800c0c6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800c0c8:	e06f      	b.n	800c1aa <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 800c0ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0cc:	f003 0301 	and.w	r3, r3, #1
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d064      	beq.n	800c19e <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0da:	b2d2      	uxtb	r2, r2
 800c0dc:	4611      	mov	r1, r2
 800c0de:	4618      	mov	r0, r3
 800c0e0:	f004 f8c6 	bl	8010270 <USB_ReadDevOutEPInterrupt>
 800c0e4:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800c0e6:	69bb      	ldr	r3, [r7, #24]
 800c0e8:	f003 0301 	and.w	r3, r3, #1
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d00c      	beq.n	800c10a <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800c0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f2:	015a      	lsls	r2, r3, #5
 800c0f4:	69fb      	ldr	r3, [r7, #28]
 800c0f6:	4413      	add	r3, r2
 800c0f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0fc:	461a      	mov	r2, r3
 800c0fe:	2301      	movs	r3, #1
 800c100:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800c102:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f000 fe0d 	bl	800cd24 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800c10a:	69bb      	ldr	r3, [r7, #24]
 800c10c:	f003 0308 	and.w	r3, r3, #8
 800c110:	2b00      	cmp	r3, #0
 800c112:	d00c      	beq.n	800c12e <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800c114:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f000 ff0c 	bl	800cf34 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800c11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c11e:	015a      	lsls	r2, r3, #5
 800c120:	69fb      	ldr	r3, [r7, #28]
 800c122:	4413      	add	r3, r2
 800c124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c128:	461a      	mov	r2, r3
 800c12a:	2308      	movs	r3, #8
 800c12c:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800c12e:	69bb      	ldr	r3, [r7, #24]
 800c130:	f003 0310 	and.w	r3, r3, #16
 800c134:	2b00      	cmp	r3, #0
 800c136:	d008      	beq.n	800c14a <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800c138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c13a:	015a      	lsls	r2, r3, #5
 800c13c:	69fb      	ldr	r3, [r7, #28]
 800c13e:	4413      	add	r3, r2
 800c140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c144:	461a      	mov	r2, r3
 800c146:	2310      	movs	r3, #16
 800c148:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c14a:	69bb      	ldr	r3, [r7, #24]
 800c14c:	f003 0320 	and.w	r3, r3, #32
 800c150:	2b00      	cmp	r3, #0
 800c152:	d015      	beq.n	800c180 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	691b      	ldr	r3, [r3, #16]
 800c158:	2b01      	cmp	r3, #1
 800c15a:	d108      	bne.n	800c16e <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	6818      	ldr	r0, [r3, #0]
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c166:	461a      	mov	r2, r3
 800c168:	2101      	movs	r1, #1
 800c16a:	f004 f911 	bl	8010390 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c170:	015a      	lsls	r2, r3, #5
 800c172:	69fb      	ldr	r3, [r7, #28]
 800c174:	4413      	add	r3, r2
 800c176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c17a:	461a      	mov	r2, r3
 800c17c:	2320      	movs	r3, #32
 800c17e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800c180:	69bb      	ldr	r3, [r7, #24]
 800c182:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c186:	2b00      	cmp	r3, #0
 800c188:	d009      	beq.n	800c19e <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800c18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c18c:	015a      	lsls	r2, r3, #5
 800c18e:	69fb      	ldr	r3, [r7, #28]
 800c190:	4413      	add	r3, r2
 800c192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c196:	461a      	mov	r2, r3
 800c198:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c19c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800c19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a0:	3301      	adds	r3, #1
 800c1a2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800c1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1a6:	085b      	lsrs	r3, r3, #1
 800c1a8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800c1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d18c      	bne.n	800c0ca <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f004 f814 	bl	80101e2 <USB_ReadInterrupts>
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c1c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c1c4:	f040 80c4 	bne.w	800c350 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	f004 f835 	bl	801023c <USB_ReadDevAllInEpInterrupt>
 800c1d2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800c1d8:	e0b6      	b.n	800c348 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800c1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1dc:	f003 0301 	and.w	r3, r3, #1
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	f000 80ab 	beq.w	800c33c <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1ec:	b2d2      	uxtb	r2, r2
 800c1ee:	4611      	mov	r1, r2
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	f004 f85b 	bl	80102ac <USB_ReadDevInEPInterrupt>
 800c1f6:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800c1f8:	69bb      	ldr	r3, [r7, #24]
 800c1fa:	f003 0301 	and.w	r3, r3, #1
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d05b      	beq.n	800c2ba <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c204:	f003 030f 	and.w	r3, r3, #15
 800c208:	2201      	movs	r2, #1
 800c20a:	fa02 f303 	lsl.w	r3, r2, r3
 800c20e:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c210:	69fb      	ldr	r3, [r7, #28]
 800c212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c216:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c218:	697b      	ldr	r3, [r7, #20]
 800c21a:	43db      	mvns	r3, r3
 800c21c:	69f9      	ldr	r1, [r7, #28]
 800c21e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c222:	4013      	ands	r3, r2
 800c224:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800c226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c228:	015a      	lsls	r2, r3, #5
 800c22a:	69fb      	ldr	r3, [r7, #28]
 800c22c:	4413      	add	r3, r2
 800c22e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c232:	461a      	mov	r2, r3
 800c234:	2301      	movs	r3, #1
 800c236:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	691b      	ldr	r3, [r3, #16]
 800c23c:	2b01      	cmp	r3, #1
 800c23e:	d11b      	bne.n	800c278 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800c240:	6879      	ldr	r1, [r7, #4]
 800c242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c244:	4613      	mov	r3, r2
 800c246:	00db      	lsls	r3, r3, #3
 800c248:	1a9b      	subs	r3, r3, r2
 800c24a:	009b      	lsls	r3, r3, #2
 800c24c:	440b      	add	r3, r1
 800c24e:	3348      	adds	r3, #72	; 0x48
 800c250:	6819      	ldr	r1, [r3, #0]
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c256:	4613      	mov	r3, r2
 800c258:	00db      	lsls	r3, r3, #3
 800c25a:	1a9b      	subs	r3, r3, r2
 800c25c:	009b      	lsls	r3, r3, #2
 800c25e:	4403      	add	r3, r0
 800c260:	3344      	adds	r3, #68	; 0x44
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	4419      	add	r1, r3
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c26a:	4613      	mov	r3, r2
 800c26c:	00db      	lsls	r3, r3, #3
 800c26e:	1a9b      	subs	r3, r3, r2
 800c270:	009b      	lsls	r3, r3, #2
 800c272:	4403      	add	r3, r0
 800c274:	3348      	adds	r3, #72	; 0x48
 800c276:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800c278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c27a:	b2db      	uxtb	r3, r3
 800c27c:	4619      	mov	r1, r3
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f009 f8a5 	bl	80153ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	691b      	ldr	r3, [r3, #16]
 800c288:	2b01      	cmp	r3, #1
 800c28a:	d116      	bne.n	800c2ba <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800c28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d113      	bne.n	800c2ba <HAL_PCD_IRQHandler+0x272>
 800c292:	6879      	ldr	r1, [r7, #4]
 800c294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c296:	4613      	mov	r3, r2
 800c298:	00db      	lsls	r3, r3, #3
 800c29a:	1a9b      	subs	r3, r3, r2
 800c29c:	009b      	lsls	r3, r3, #2
 800c29e:	440b      	add	r3, r1
 800c2a0:	3350      	adds	r3, #80	; 0x50
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d108      	bne.n	800c2ba <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	6818      	ldr	r0, [r3, #0]
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c2b2:	461a      	mov	r2, r3
 800c2b4:	2101      	movs	r1, #1
 800c2b6:	f004 f86b 	bl	8010390 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800c2ba:	69bb      	ldr	r3, [r7, #24]
 800c2bc:	f003 0308 	and.w	r3, r3, #8
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d008      	beq.n	800c2d6 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800c2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2c6:	015a      	lsls	r2, r3, #5
 800c2c8:	69fb      	ldr	r3, [r7, #28]
 800c2ca:	4413      	add	r3, r2
 800c2cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2d0:	461a      	mov	r2, r3
 800c2d2:	2308      	movs	r3, #8
 800c2d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800c2d6:	69bb      	ldr	r3, [r7, #24]
 800c2d8:	f003 0310 	and.w	r3, r3, #16
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d008      	beq.n	800c2f2 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800c2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2e2:	015a      	lsls	r2, r3, #5
 800c2e4:	69fb      	ldr	r3, [r7, #28]
 800c2e6:	4413      	add	r3, r2
 800c2e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2ec:	461a      	mov	r2, r3
 800c2ee:	2310      	movs	r3, #16
 800c2f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800c2f2:	69bb      	ldr	r3, [r7, #24]
 800c2f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d008      	beq.n	800c30e <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800c2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2fe:	015a      	lsls	r2, r3, #5
 800c300:	69fb      	ldr	r3, [r7, #28]
 800c302:	4413      	add	r3, r2
 800c304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c308:	461a      	mov	r2, r3
 800c30a:	2340      	movs	r3, #64	; 0x40
 800c30c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800c30e:	69bb      	ldr	r3, [r7, #24]
 800c310:	f003 0302 	and.w	r3, r3, #2
 800c314:	2b00      	cmp	r3, #0
 800c316:	d008      	beq.n	800c32a <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800c318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c31a:	015a      	lsls	r2, r3, #5
 800c31c:	69fb      	ldr	r3, [r7, #28]
 800c31e:	4413      	add	r3, r2
 800c320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c324:	461a      	mov	r2, r3
 800c326:	2302      	movs	r3, #2
 800c328:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800c32a:	69bb      	ldr	r3, [r7, #24]
 800c32c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c330:	2b00      	cmp	r3, #0
 800c332:	d003      	beq.n	800c33c <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800c334:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c336:	6878      	ldr	r0, [r7, #4]
 800c338:	f000 fc67 	bl	800cc0a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800c33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c33e:	3301      	adds	r3, #1
 800c340:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800c342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c344:	085b      	lsrs	r3, r3, #1
 800c346:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800c348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	f47f af45 	bne.w	800c1da <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	4618      	mov	r0, r3
 800c356:	f003 ff44 	bl	80101e2 <USB_ReadInterrupts>
 800c35a:	4603      	mov	r3, r0
 800c35c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c360:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c364:	d122      	bne.n	800c3ac <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c366:	69fb      	ldr	r3, [r7, #28]
 800c368:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c36c:	685b      	ldr	r3, [r3, #4]
 800c36e:	69fa      	ldr	r2, [r7, #28]
 800c370:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c374:	f023 0301 	bic.w	r3, r3, #1
 800c378:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800c380:	2b01      	cmp	r3, #1
 800c382:	d108      	bne.n	800c396 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2200      	movs	r2, #0
 800c388:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800c38c:	2100      	movs	r1, #0
 800c38e:	6878      	ldr	r0, [r7, #4]
 800c390:	f000 fe88 	bl	800d0a4 <HAL_PCDEx_LPM_Callback>
 800c394:	e002      	b.n	800c39c <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800c396:	6878      	ldr	r0, [r7, #4]
 800c398:	f009 f890 	bl	80154bc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	695a      	ldr	r2, [r3, #20]
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800c3aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	f003 ff16 	bl	80101e2 <USB_ReadInterrupts>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c3bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c3c0:	d112      	bne.n	800c3e8 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800c3c2:	69fb      	ldr	r3, [r7, #28]
 800c3c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3c8:	689b      	ldr	r3, [r3, #8]
 800c3ca:	f003 0301 	and.w	r3, r3, #1
 800c3ce:	2b01      	cmp	r3, #1
 800c3d0:	d102      	bne.n	800c3d8 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f009 f84c 	bl	8015470 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	695a      	ldr	r2, [r3, #20]
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800c3e6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	f003 fef8 	bl	80101e2 <USB_ReadInterrupts>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c3f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c3fc:	f040 80a7 	bne.w	800c54e <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c400:	69fb      	ldr	r3, [r7, #28]
 800c402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c406:	685b      	ldr	r3, [r3, #4]
 800c408:	69fa      	ldr	r2, [r7, #28]
 800c40a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c40e:	f023 0301 	bic.w	r3, r3, #1
 800c412:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	2110      	movs	r1, #16
 800c41a:	4618      	mov	r0, r3
 800c41c:	f003 f830 	bl	800f480 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c420:	2300      	movs	r3, #0
 800c422:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c424:	e036      	b.n	800c494 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800c426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c428:	015a      	lsls	r2, r3, #5
 800c42a:	69fb      	ldr	r3, [r7, #28]
 800c42c:	4413      	add	r3, r2
 800c42e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c432:	461a      	mov	r2, r3
 800c434:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c438:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c43c:	015a      	lsls	r2, r3, #5
 800c43e:	69fb      	ldr	r3, [r7, #28]
 800c440:	4413      	add	r3, r2
 800c442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c44a:	0151      	lsls	r1, r2, #5
 800c44c:	69fa      	ldr	r2, [r7, #28]
 800c44e:	440a      	add	r2, r1
 800c450:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c454:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c458:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800c45a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c45c:	015a      	lsls	r2, r3, #5
 800c45e:	69fb      	ldr	r3, [r7, #28]
 800c460:	4413      	add	r3, r2
 800c462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c466:	461a      	mov	r2, r3
 800c468:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c46c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c470:	015a      	lsls	r2, r3, #5
 800c472:	69fb      	ldr	r3, [r7, #28]
 800c474:	4413      	add	r3, r2
 800c476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c47e:	0151      	lsls	r1, r2, #5
 800c480:	69fa      	ldr	r2, [r7, #28]
 800c482:	440a      	add	r2, r1
 800c484:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c488:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c48c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c48e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c490:	3301      	adds	r3, #1
 800c492:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	685b      	ldr	r3, [r3, #4]
 800c498:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c49a:	429a      	cmp	r2, r3
 800c49c:	d3c3      	bcc.n	800c426 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800c49e:	69fb      	ldr	r3, [r7, #28]
 800c4a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4a4:	69db      	ldr	r3, [r3, #28]
 800c4a6:	69fa      	ldr	r2, [r7, #28]
 800c4a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c4ac:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800c4b0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d016      	beq.n	800c4e8 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800c4ba:	69fb      	ldr	r3, [r7, #28]
 800c4bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c4c4:	69fa      	ldr	r2, [r7, #28]
 800c4c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c4ca:	f043 030b 	orr.w	r3, r3, #11
 800c4ce:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800c4d2:	69fb      	ldr	r3, [r7, #28]
 800c4d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4da:	69fa      	ldr	r2, [r7, #28]
 800c4dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c4e0:	f043 030b 	orr.w	r3, r3, #11
 800c4e4:	6453      	str	r3, [r2, #68]	; 0x44
 800c4e6:	e015      	b.n	800c514 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800c4e8:	69fb      	ldr	r3, [r7, #28]
 800c4ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4ee:	695b      	ldr	r3, [r3, #20]
 800c4f0:	69fa      	ldr	r2, [r7, #28]
 800c4f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c4f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c4fa:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800c4fe:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800c500:	69fb      	ldr	r3, [r7, #28]
 800c502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c506:	691b      	ldr	r3, [r3, #16]
 800c508:	69fa      	ldr	r2, [r7, #28]
 800c50a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c50e:	f043 030b 	orr.w	r3, r3, #11
 800c512:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800c514:	69fb      	ldr	r3, [r7, #28]
 800c516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	69fa      	ldr	r2, [r7, #28]
 800c51e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c522:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c526:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	6818      	ldr	r0, [r3, #0]
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	691b      	ldr	r3, [r3, #16]
 800c530:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c538:	461a      	mov	r2, r3
 800c53a:	f003 ff29 	bl	8010390 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	695a      	ldr	r2, [r3, #20]
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800c54c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	4618      	mov	r0, r3
 800c554:	f003 fe45 	bl	80101e2 <USB_ReadInterrupts>
 800c558:	4603      	mov	r3, r0
 800c55a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c55e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c562:	d124      	bne.n	800c5ae <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	4618      	mov	r0, r3
 800c56a:	f003 fedb 	bl	8010324 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	4618      	mov	r0, r3
 800c574:	f002 ffe5 	bl	800f542 <USB_GetDevSpeed>
 800c578:	4603      	mov	r3, r0
 800c57a:	461a      	mov	r2, r3
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681c      	ldr	r4, [r3, #0]
 800c584:	f001 f9c8 	bl	800d918 <HAL_RCC_GetHCLKFreq>
 800c588:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c58e:	b2db      	uxtb	r3, r3
 800c590:	461a      	mov	r2, r3
 800c592:	4620      	mov	r0, r4
 800c594:	f002 fd14 	bl	800efc0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800c598:	6878      	ldr	r0, [r7, #4]
 800c59a:	f008 ff40 	bl	801541e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	695a      	ldr	r2, [r3, #20]
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800c5ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	f003 fe15 	bl	80101e2 <USB_ReadInterrupts>
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	f003 0310 	and.w	r3, r3, #16
 800c5be:	2b10      	cmp	r3, #16
 800c5c0:	d161      	bne.n	800c686 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	699a      	ldr	r2, [r3, #24]
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f022 0210 	bic.w	r2, r2, #16
 800c5d0:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800c5d2:	6a3b      	ldr	r3, [r7, #32]
 800c5d4:	6a1b      	ldr	r3, [r3, #32]
 800c5d6:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800c5d8:	693b      	ldr	r3, [r7, #16]
 800c5da:	f003 020f 	and.w	r2, r3, #15
 800c5de:	4613      	mov	r3, r2
 800c5e0:	00db      	lsls	r3, r3, #3
 800c5e2:	1a9b      	subs	r3, r3, r2
 800c5e4:	009b      	lsls	r3, r3, #2
 800c5e6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c5ea:	687a      	ldr	r2, [r7, #4]
 800c5ec:	4413      	add	r3, r2
 800c5ee:	3304      	adds	r3, #4
 800c5f0:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800c5f2:	693b      	ldr	r3, [r7, #16]
 800c5f4:	0c5b      	lsrs	r3, r3, #17
 800c5f6:	f003 030f 	and.w	r3, r3, #15
 800c5fa:	2b02      	cmp	r3, #2
 800c5fc:	d124      	bne.n	800c648 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800c5fe:	693a      	ldr	r2, [r7, #16]
 800c600:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800c604:	4013      	ands	r3, r2
 800c606:	2b00      	cmp	r3, #0
 800c608:	d035      	beq.n	800c676 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800c60e:	693b      	ldr	r3, [r7, #16]
 800c610:	091b      	lsrs	r3, r3, #4
 800c612:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c614:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c618:	b29b      	uxth	r3, r3
 800c61a:	461a      	mov	r2, r3
 800c61c:	6a38      	ldr	r0, [r7, #32]
 800c61e:	f003 fc8d 	bl	800ff3c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	68da      	ldr	r2, [r3, #12]
 800c626:	693b      	ldr	r3, [r7, #16]
 800c628:	091b      	lsrs	r3, r3, #4
 800c62a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c62e:	441a      	add	r2, r3
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	699a      	ldr	r2, [r3, #24]
 800c638:	693b      	ldr	r3, [r7, #16]
 800c63a:	091b      	lsrs	r3, r3, #4
 800c63c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c640:	441a      	add	r2, r3
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	619a      	str	r2, [r3, #24]
 800c646:	e016      	b.n	800c676 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800c648:	693b      	ldr	r3, [r7, #16]
 800c64a:	0c5b      	lsrs	r3, r3, #17
 800c64c:	f003 030f 	and.w	r3, r3, #15
 800c650:	2b06      	cmp	r3, #6
 800c652:	d110      	bne.n	800c676 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c65a:	2208      	movs	r2, #8
 800c65c:	4619      	mov	r1, r3
 800c65e:	6a38      	ldr	r0, [r7, #32]
 800c660:	f003 fc6c 	bl	800ff3c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	699a      	ldr	r2, [r3, #24]
 800c668:	693b      	ldr	r3, [r7, #16]
 800c66a:	091b      	lsrs	r3, r3, #4
 800c66c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c670:	441a      	add	r2, r3
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	699a      	ldr	r2, [r3, #24]
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	f042 0210 	orr.w	r2, r2, #16
 800c684:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	4618      	mov	r0, r3
 800c68c:	f003 fda9 	bl	80101e2 <USB_ReadInterrupts>
 800c690:	4603      	mov	r3, r0
 800c692:	f003 0308 	and.w	r3, r3, #8
 800c696:	2b08      	cmp	r3, #8
 800c698:	d10a      	bne.n	800c6b0 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f008 feb1 	bl	8015402 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	695a      	ldr	r2, [r3, #20]
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	f002 0208 	and.w	r2, r2, #8
 800c6ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	f003 fd94 	bl	80101e2 <USB_ReadInterrupts>
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c6c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c6c4:	d10f      	bne.n	800c6e6 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800c6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6cc:	b2db      	uxtb	r3, r3
 800c6ce:	4619      	mov	r1, r3
 800c6d0:	6878      	ldr	r0, [r7, #4]
 800c6d2:	f008 ff13 	bl	80154fc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	695a      	ldr	r2, [r3, #20]
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800c6e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f003 fd79 	bl	80101e2 <USB_ReadInterrupts>
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c6f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c6fa:	d10f      	bne.n	800c71c <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800c700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c702:	b2db      	uxtb	r3, r3
 800c704:	4619      	mov	r1, r3
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	f008 fee6 	bl	80154d8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	695a      	ldr	r2, [r3, #20]
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800c71a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	4618      	mov	r0, r3
 800c722:	f003 fd5e 	bl	80101e2 <USB_ReadInterrupts>
 800c726:	4603      	mov	r3, r0
 800c728:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c72c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c730:	d10a      	bne.n	800c748 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800c732:	6878      	ldr	r0, [r7, #4]
 800c734:	f008 fef4 	bl	8015520 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	695a      	ldr	r2, [r3, #20]
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800c746:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	4618      	mov	r0, r3
 800c74e:	f003 fd48 	bl	80101e2 <USB_ReadInterrupts>
 800c752:	4603      	mov	r3, r0
 800c754:	f003 0304 	and.w	r3, r3, #4
 800c758:	2b04      	cmp	r3, #4
 800c75a:	d115      	bne.n	800c788 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	685b      	ldr	r3, [r3, #4]
 800c762:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800c764:	693b      	ldr	r3, [r7, #16]
 800c766:	f003 0304 	and.w	r3, r3, #4
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d002      	beq.n	800c774 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f008 fee4 	bl	801553c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	6859      	ldr	r1, [r3, #4]
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	693a      	ldr	r2, [r7, #16]
 800c780:	430a      	orrs	r2, r1
 800c782:	605a      	str	r2, [r3, #4]
 800c784:	e000      	b.n	800c788 <HAL_PCD_IRQHandler+0x740>
      return;
 800c786:	bf00      	nop
    }
  }
}
 800c788:	3734      	adds	r7, #52	; 0x34
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bd90      	pop	{r4, r7, pc}

0800c78e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800c78e:	b580      	push	{r7, lr}
 800c790:	b082      	sub	sp, #8
 800c792:	af00      	add	r7, sp, #0
 800c794:	6078      	str	r0, [r7, #4]
 800c796:	460b      	mov	r3, r1
 800c798:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c7a0:	2b01      	cmp	r3, #1
 800c7a2:	d101      	bne.n	800c7a8 <HAL_PCD_SetAddress+0x1a>
 800c7a4:	2302      	movs	r3, #2
 800c7a6:	e013      	b.n	800c7d0 <HAL_PCD_SetAddress+0x42>
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2201      	movs	r2, #1
 800c7ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	78fa      	ldrb	r2, [r7, #3]
 800c7b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	78fa      	ldrb	r2, [r7, #3]
 800c7be:	4611      	mov	r1, r2
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	f003 fcb8 	bl	8010136 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800c7ce:	2300      	movs	r3, #0
}
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	3708      	adds	r7, #8
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd80      	pop	{r7, pc}

0800c7d8 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b084      	sub	sp, #16
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
 800c7e0:	4608      	mov	r0, r1
 800c7e2:	4611      	mov	r1, r2
 800c7e4:	461a      	mov	r2, r3
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	70fb      	strb	r3, [r7, #3]
 800c7ea:	460b      	mov	r3, r1
 800c7ec:	803b      	strh	r3, [r7, #0]
 800c7ee:	4613      	mov	r3, r2
 800c7f0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c7f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	da0f      	bge.n	800c81e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c7fe:	78fb      	ldrb	r3, [r7, #3]
 800c800:	f003 020f 	and.w	r2, r3, #15
 800c804:	4613      	mov	r3, r2
 800c806:	00db      	lsls	r3, r3, #3
 800c808:	1a9b      	subs	r3, r3, r2
 800c80a:	009b      	lsls	r3, r3, #2
 800c80c:	3338      	adds	r3, #56	; 0x38
 800c80e:	687a      	ldr	r2, [r7, #4]
 800c810:	4413      	add	r3, r2
 800c812:	3304      	adds	r3, #4
 800c814:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	2201      	movs	r2, #1
 800c81a:	705a      	strb	r2, [r3, #1]
 800c81c:	e00f      	b.n	800c83e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c81e:	78fb      	ldrb	r3, [r7, #3]
 800c820:	f003 020f 	and.w	r2, r3, #15
 800c824:	4613      	mov	r3, r2
 800c826:	00db      	lsls	r3, r3, #3
 800c828:	1a9b      	subs	r3, r3, r2
 800c82a:	009b      	lsls	r3, r3, #2
 800c82c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c830:	687a      	ldr	r2, [r7, #4]
 800c832:	4413      	add	r3, r2
 800c834:	3304      	adds	r3, #4
 800c836:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	2200      	movs	r2, #0
 800c83c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800c83e:	78fb      	ldrb	r3, [r7, #3]
 800c840:	f003 030f 	and.w	r3, r3, #15
 800c844:	b2da      	uxtb	r2, r3
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800c84a:	883a      	ldrh	r2, [r7, #0]
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	78ba      	ldrb	r2, [r7, #2]
 800c854:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	785b      	ldrb	r3, [r3, #1]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d004      	beq.n	800c868 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	781b      	ldrb	r3, [r3, #0]
 800c862:	b29a      	uxth	r2, r3
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800c868:	78bb      	ldrb	r3, [r7, #2]
 800c86a:	2b02      	cmp	r3, #2
 800c86c:	d102      	bne.n	800c874 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	2200      	movs	r2, #0
 800c872:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c87a:	2b01      	cmp	r3, #1
 800c87c:	d101      	bne.n	800c882 <HAL_PCD_EP_Open+0xaa>
 800c87e:	2302      	movs	r3, #2
 800c880:	e00e      	b.n	800c8a0 <HAL_PCD_EP_Open+0xc8>
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2201      	movs	r2, #1
 800c886:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	68f9      	ldr	r1, [r7, #12]
 800c890:	4618      	mov	r0, r3
 800c892:	f002 fe7b 	bl	800f58c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2200      	movs	r2, #0
 800c89a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800c89e:	7afb      	ldrb	r3, [r7, #11]
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	3710      	adds	r7, #16
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}

0800c8a8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b084      	sub	sp, #16
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
 800c8b0:	460b      	mov	r3, r1
 800c8b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c8b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	da0f      	bge.n	800c8dc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c8bc:	78fb      	ldrb	r3, [r7, #3]
 800c8be:	f003 020f 	and.w	r2, r3, #15
 800c8c2:	4613      	mov	r3, r2
 800c8c4:	00db      	lsls	r3, r3, #3
 800c8c6:	1a9b      	subs	r3, r3, r2
 800c8c8:	009b      	lsls	r3, r3, #2
 800c8ca:	3338      	adds	r3, #56	; 0x38
 800c8cc:	687a      	ldr	r2, [r7, #4]
 800c8ce:	4413      	add	r3, r2
 800c8d0:	3304      	adds	r3, #4
 800c8d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	2201      	movs	r2, #1
 800c8d8:	705a      	strb	r2, [r3, #1]
 800c8da:	e00f      	b.n	800c8fc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c8dc:	78fb      	ldrb	r3, [r7, #3]
 800c8de:	f003 020f 	and.w	r2, r3, #15
 800c8e2:	4613      	mov	r3, r2
 800c8e4:	00db      	lsls	r3, r3, #3
 800c8e6:	1a9b      	subs	r3, r3, r2
 800c8e8:	009b      	lsls	r3, r3, #2
 800c8ea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c8ee:	687a      	ldr	r2, [r7, #4]
 800c8f0:	4413      	add	r3, r2
 800c8f2:	3304      	adds	r3, #4
 800c8f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800c8fc:	78fb      	ldrb	r3, [r7, #3]
 800c8fe:	f003 030f 	and.w	r3, r3, #15
 800c902:	b2da      	uxtb	r2, r3
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c90e:	2b01      	cmp	r3, #1
 800c910:	d101      	bne.n	800c916 <HAL_PCD_EP_Close+0x6e>
 800c912:	2302      	movs	r3, #2
 800c914:	e00e      	b.n	800c934 <HAL_PCD_EP_Close+0x8c>
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	2201      	movs	r2, #1
 800c91a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	68f9      	ldr	r1, [r7, #12]
 800c924:	4618      	mov	r0, r3
 800c926:	f002 feb9 	bl	800f69c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2200      	movs	r2, #0
 800c92e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800c932:	2300      	movs	r3, #0
}
 800c934:	4618      	mov	r0, r3
 800c936:	3710      	adds	r7, #16
 800c938:	46bd      	mov	sp, r7
 800c93a:	bd80      	pop	{r7, pc}

0800c93c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b086      	sub	sp, #24
 800c940:	af00      	add	r7, sp, #0
 800c942:	60f8      	str	r0, [r7, #12]
 800c944:	607a      	str	r2, [r7, #4]
 800c946:	603b      	str	r3, [r7, #0]
 800c948:	460b      	mov	r3, r1
 800c94a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c94c:	7afb      	ldrb	r3, [r7, #11]
 800c94e:	f003 020f 	and.w	r2, r3, #15
 800c952:	4613      	mov	r3, r2
 800c954:	00db      	lsls	r3, r3, #3
 800c956:	1a9b      	subs	r3, r3, r2
 800c958:	009b      	lsls	r3, r3, #2
 800c95a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c95e:	68fa      	ldr	r2, [r7, #12]
 800c960:	4413      	add	r3, r2
 800c962:	3304      	adds	r3, #4
 800c964:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c966:	697b      	ldr	r3, [r7, #20]
 800c968:	687a      	ldr	r2, [r7, #4]
 800c96a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800c96c:	697b      	ldr	r3, [r7, #20]
 800c96e:	683a      	ldr	r2, [r7, #0]
 800c970:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800c972:	697b      	ldr	r3, [r7, #20]
 800c974:	2200      	movs	r2, #0
 800c976:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800c978:	697b      	ldr	r3, [r7, #20]
 800c97a:	2200      	movs	r2, #0
 800c97c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c97e:	7afb      	ldrb	r3, [r7, #11]
 800c980:	f003 030f 	and.w	r3, r3, #15
 800c984:	b2da      	uxtb	r2, r3
 800c986:	697b      	ldr	r3, [r7, #20]
 800c988:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	691b      	ldr	r3, [r3, #16]
 800c98e:	2b01      	cmp	r3, #1
 800c990:	d102      	bne.n	800c998 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800c992:	687a      	ldr	r2, [r7, #4]
 800c994:	697b      	ldr	r3, [r7, #20]
 800c996:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c998:	7afb      	ldrb	r3, [r7, #11]
 800c99a:	f003 030f 	and.w	r3, r3, #15
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d109      	bne.n	800c9b6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	6818      	ldr	r0, [r3, #0]
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	691b      	ldr	r3, [r3, #16]
 800c9aa:	b2db      	uxtb	r3, r3
 800c9ac:	461a      	mov	r2, r3
 800c9ae:	6979      	ldr	r1, [r7, #20]
 800c9b0:	f003 f93c 	bl	800fc2c <USB_EP0StartXfer>
 800c9b4:	e008      	b.n	800c9c8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	6818      	ldr	r0, [r3, #0]
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	691b      	ldr	r3, [r3, #16]
 800c9be:	b2db      	uxtb	r3, r3
 800c9c0:	461a      	mov	r2, r3
 800c9c2:	6979      	ldr	r1, [r7, #20]
 800c9c4:	f002 feee 	bl	800f7a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800c9c8:	2300      	movs	r3, #0
}
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	3718      	adds	r7, #24
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}

0800c9d2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c9d2:	b480      	push	{r7}
 800c9d4:	b083      	sub	sp, #12
 800c9d6:	af00      	add	r7, sp, #0
 800c9d8:	6078      	str	r0, [r7, #4]
 800c9da:	460b      	mov	r3, r1
 800c9dc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800c9de:	78fb      	ldrb	r3, [r7, #3]
 800c9e0:	f003 020f 	and.w	r2, r3, #15
 800c9e4:	6879      	ldr	r1, [r7, #4]
 800c9e6:	4613      	mov	r3, r2
 800c9e8:	00db      	lsls	r3, r3, #3
 800c9ea:	1a9b      	subs	r3, r3, r2
 800c9ec:	009b      	lsls	r3, r3, #2
 800c9ee:	440b      	add	r3, r1
 800c9f0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800c9f4:	681b      	ldr	r3, [r3, #0]
}
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	370c      	adds	r7, #12
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca00:	4770      	bx	lr

0800ca02 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800ca02:	b580      	push	{r7, lr}
 800ca04:	b086      	sub	sp, #24
 800ca06:	af00      	add	r7, sp, #0
 800ca08:	60f8      	str	r0, [r7, #12]
 800ca0a:	607a      	str	r2, [r7, #4]
 800ca0c:	603b      	str	r3, [r7, #0]
 800ca0e:	460b      	mov	r3, r1
 800ca10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ca12:	7afb      	ldrb	r3, [r7, #11]
 800ca14:	f003 020f 	and.w	r2, r3, #15
 800ca18:	4613      	mov	r3, r2
 800ca1a:	00db      	lsls	r3, r3, #3
 800ca1c:	1a9b      	subs	r3, r3, r2
 800ca1e:	009b      	lsls	r3, r3, #2
 800ca20:	3338      	adds	r3, #56	; 0x38
 800ca22:	68fa      	ldr	r2, [r7, #12]
 800ca24:	4413      	add	r3, r2
 800ca26:	3304      	adds	r3, #4
 800ca28:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ca2a:	697b      	ldr	r3, [r7, #20]
 800ca2c:	687a      	ldr	r2, [r7, #4]
 800ca2e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800ca30:	697b      	ldr	r3, [r7, #20]
 800ca32:	683a      	ldr	r2, [r7, #0]
 800ca34:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800ca36:	697b      	ldr	r3, [r7, #20]
 800ca38:	2200      	movs	r2, #0
 800ca3a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800ca3c:	697b      	ldr	r3, [r7, #20]
 800ca3e:	2201      	movs	r2, #1
 800ca40:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ca42:	7afb      	ldrb	r3, [r7, #11]
 800ca44:	f003 030f 	and.w	r3, r3, #15
 800ca48:	b2da      	uxtb	r2, r3
 800ca4a:	697b      	ldr	r3, [r7, #20]
 800ca4c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	691b      	ldr	r3, [r3, #16]
 800ca52:	2b01      	cmp	r3, #1
 800ca54:	d102      	bne.n	800ca5c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ca56:	687a      	ldr	r2, [r7, #4]
 800ca58:	697b      	ldr	r3, [r7, #20]
 800ca5a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ca5c:	7afb      	ldrb	r3, [r7, #11]
 800ca5e:	f003 030f 	and.w	r3, r3, #15
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d109      	bne.n	800ca7a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	6818      	ldr	r0, [r3, #0]
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	691b      	ldr	r3, [r3, #16]
 800ca6e:	b2db      	uxtb	r3, r3
 800ca70:	461a      	mov	r2, r3
 800ca72:	6979      	ldr	r1, [r7, #20]
 800ca74:	f003 f8da 	bl	800fc2c <USB_EP0StartXfer>
 800ca78:	e008      	b.n	800ca8c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	6818      	ldr	r0, [r3, #0]
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	691b      	ldr	r3, [r3, #16]
 800ca82:	b2db      	uxtb	r3, r3
 800ca84:	461a      	mov	r2, r3
 800ca86:	6979      	ldr	r1, [r7, #20]
 800ca88:	f002 fe8c 	bl	800f7a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800ca8c:	2300      	movs	r3, #0
}
 800ca8e:	4618      	mov	r0, r3
 800ca90:	3718      	adds	r7, #24
 800ca92:	46bd      	mov	sp, r7
 800ca94:	bd80      	pop	{r7, pc}

0800ca96 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ca96:	b580      	push	{r7, lr}
 800ca98:	b084      	sub	sp, #16
 800ca9a:	af00      	add	r7, sp, #0
 800ca9c:	6078      	str	r0, [r7, #4]
 800ca9e:	460b      	mov	r3, r1
 800caa0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800caa2:	78fb      	ldrb	r3, [r7, #3]
 800caa4:	f003 020f 	and.w	r2, r3, #15
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	685b      	ldr	r3, [r3, #4]
 800caac:	429a      	cmp	r2, r3
 800caae:	d901      	bls.n	800cab4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800cab0:	2301      	movs	r3, #1
 800cab2:	e050      	b.n	800cb56 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800cab4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	da0f      	bge.n	800cadc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cabc:	78fb      	ldrb	r3, [r7, #3]
 800cabe:	f003 020f 	and.w	r2, r3, #15
 800cac2:	4613      	mov	r3, r2
 800cac4:	00db      	lsls	r3, r3, #3
 800cac6:	1a9b      	subs	r3, r3, r2
 800cac8:	009b      	lsls	r3, r3, #2
 800caca:	3338      	adds	r3, #56	; 0x38
 800cacc:	687a      	ldr	r2, [r7, #4]
 800cace:	4413      	add	r3, r2
 800cad0:	3304      	adds	r3, #4
 800cad2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	2201      	movs	r2, #1
 800cad8:	705a      	strb	r2, [r3, #1]
 800cada:	e00d      	b.n	800caf8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800cadc:	78fa      	ldrb	r2, [r7, #3]
 800cade:	4613      	mov	r3, r2
 800cae0:	00db      	lsls	r3, r3, #3
 800cae2:	1a9b      	subs	r3, r3, r2
 800cae4:	009b      	lsls	r3, r3, #2
 800cae6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800caea:	687a      	ldr	r2, [r7, #4]
 800caec:	4413      	add	r3, r2
 800caee:	3304      	adds	r3, #4
 800caf0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	2200      	movs	r2, #0
 800caf6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	2201      	movs	r2, #1
 800cafc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cafe:	78fb      	ldrb	r3, [r7, #3]
 800cb00:	f003 030f 	and.w	r3, r3, #15
 800cb04:	b2da      	uxtb	r2, r3
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800cb10:	2b01      	cmp	r3, #1
 800cb12:	d101      	bne.n	800cb18 <HAL_PCD_EP_SetStall+0x82>
 800cb14:	2302      	movs	r3, #2
 800cb16:	e01e      	b.n	800cb56 <HAL_PCD_EP_SetStall+0xc0>
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	2201      	movs	r2, #1
 800cb1c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	68f9      	ldr	r1, [r7, #12]
 800cb26:	4618      	mov	r0, r3
 800cb28:	f003 fa31 	bl	800ff8e <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800cb2c:	78fb      	ldrb	r3, [r7, #3]
 800cb2e:	f003 030f 	and.w	r3, r3, #15
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d10a      	bne.n	800cb4c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	6818      	ldr	r0, [r3, #0]
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	691b      	ldr	r3, [r3, #16]
 800cb3e:	b2d9      	uxtb	r1, r3
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800cb46:	461a      	mov	r2, r3
 800cb48:	f003 fc22 	bl	8010390 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2200      	movs	r2, #0
 800cb50:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800cb54:	2300      	movs	r3, #0
}
 800cb56:	4618      	mov	r0, r3
 800cb58:	3710      	adds	r7, #16
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}

0800cb5e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cb5e:	b580      	push	{r7, lr}
 800cb60:	b084      	sub	sp, #16
 800cb62:	af00      	add	r7, sp, #0
 800cb64:	6078      	str	r0, [r7, #4]
 800cb66:	460b      	mov	r3, r1
 800cb68:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800cb6a:	78fb      	ldrb	r3, [r7, #3]
 800cb6c:	f003 020f 	and.w	r2, r3, #15
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	685b      	ldr	r3, [r3, #4]
 800cb74:	429a      	cmp	r2, r3
 800cb76:	d901      	bls.n	800cb7c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800cb78:	2301      	movs	r3, #1
 800cb7a:	e042      	b.n	800cc02 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800cb7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	da0f      	bge.n	800cba4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cb84:	78fb      	ldrb	r3, [r7, #3]
 800cb86:	f003 020f 	and.w	r2, r3, #15
 800cb8a:	4613      	mov	r3, r2
 800cb8c:	00db      	lsls	r3, r3, #3
 800cb8e:	1a9b      	subs	r3, r3, r2
 800cb90:	009b      	lsls	r3, r3, #2
 800cb92:	3338      	adds	r3, #56	; 0x38
 800cb94:	687a      	ldr	r2, [r7, #4]
 800cb96:	4413      	add	r3, r2
 800cb98:	3304      	adds	r3, #4
 800cb9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	2201      	movs	r2, #1
 800cba0:	705a      	strb	r2, [r3, #1]
 800cba2:	e00f      	b.n	800cbc4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cba4:	78fb      	ldrb	r3, [r7, #3]
 800cba6:	f003 020f 	and.w	r2, r3, #15
 800cbaa:	4613      	mov	r3, r2
 800cbac:	00db      	lsls	r3, r3, #3
 800cbae:	1a9b      	subs	r3, r3, r2
 800cbb0:	009b      	lsls	r3, r3, #2
 800cbb2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800cbb6:	687a      	ldr	r2, [r7, #4]
 800cbb8:	4413      	add	r3, r2
 800cbba:	3304      	adds	r3, #4
 800cbbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cbca:	78fb      	ldrb	r3, [r7, #3]
 800cbcc:	f003 030f 	and.w	r3, r3, #15
 800cbd0:	b2da      	uxtb	r2, r3
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800cbdc:	2b01      	cmp	r3, #1
 800cbde:	d101      	bne.n	800cbe4 <HAL_PCD_EP_ClrStall+0x86>
 800cbe0:	2302      	movs	r3, #2
 800cbe2:	e00e      	b.n	800cc02 <HAL_PCD_EP_ClrStall+0xa4>
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2201      	movs	r2, #1
 800cbe8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	68f9      	ldr	r1, [r7, #12]
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	f003 fa39 	bl	801006a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800cc00:	2300      	movs	r3, #0
}
 800cc02:	4618      	mov	r0, r3
 800cc04:	3710      	adds	r7, #16
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bd80      	pop	{r7, pc}

0800cc0a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800cc0a:	b580      	push	{r7, lr}
 800cc0c:	b08a      	sub	sp, #40	; 0x28
 800cc0e:	af02      	add	r7, sp, #8
 800cc10:	6078      	str	r0, [r7, #4]
 800cc12:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc1a:	697b      	ldr	r3, [r7, #20]
 800cc1c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800cc1e:	683a      	ldr	r2, [r7, #0]
 800cc20:	4613      	mov	r3, r2
 800cc22:	00db      	lsls	r3, r3, #3
 800cc24:	1a9b      	subs	r3, r3, r2
 800cc26:	009b      	lsls	r3, r3, #2
 800cc28:	3338      	adds	r3, #56	; 0x38
 800cc2a:	687a      	ldr	r2, [r7, #4]
 800cc2c:	4413      	add	r3, r2
 800cc2e:	3304      	adds	r3, #4
 800cc30:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	699a      	ldr	r2, [r3, #24]
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	695b      	ldr	r3, [r3, #20]
 800cc3a:	429a      	cmp	r2, r3
 800cc3c:	d901      	bls.n	800cc42 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800cc3e:	2301      	movs	r3, #1
 800cc40:	e06c      	b.n	800cd1c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	695a      	ldr	r2, [r3, #20]
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	699b      	ldr	r3, [r3, #24]
 800cc4a:	1ad3      	subs	r3, r2, r3
 800cc4c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	689b      	ldr	r3, [r3, #8]
 800cc52:	69fa      	ldr	r2, [r7, #28]
 800cc54:	429a      	cmp	r2, r3
 800cc56:	d902      	bls.n	800cc5e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	689b      	ldr	r3, [r3, #8]
 800cc5c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800cc5e:	69fb      	ldr	r3, [r7, #28]
 800cc60:	3303      	adds	r3, #3
 800cc62:	089b      	lsrs	r3, r3, #2
 800cc64:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cc66:	e02b      	b.n	800ccc0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	695a      	ldr	r2, [r3, #20]
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	699b      	ldr	r3, [r3, #24]
 800cc70:	1ad3      	subs	r3, r2, r3
 800cc72:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	689b      	ldr	r3, [r3, #8]
 800cc78:	69fa      	ldr	r2, [r7, #28]
 800cc7a:	429a      	cmp	r2, r3
 800cc7c:	d902      	bls.n	800cc84 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	689b      	ldr	r3, [r3, #8]
 800cc82:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800cc84:	69fb      	ldr	r3, [r7, #28]
 800cc86:	3303      	adds	r3, #3
 800cc88:	089b      	lsrs	r3, r3, #2
 800cc8a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	68d9      	ldr	r1, [r3, #12]
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	b2da      	uxtb	r2, r3
 800cc94:	69fb      	ldr	r3, [r7, #28]
 800cc96:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800cc9c:	b2db      	uxtb	r3, r3
 800cc9e:	9300      	str	r3, [sp, #0]
 800cca0:	4603      	mov	r3, r0
 800cca2:	6978      	ldr	r0, [r7, #20]
 800cca4:	f003 f915 	bl	800fed2 <USB_WritePacket>

    ep->xfer_buff  += len;
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	68da      	ldr	r2, [r3, #12]
 800ccac:	69fb      	ldr	r3, [r7, #28]
 800ccae:	441a      	add	r2, r3
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	699a      	ldr	r2, [r3, #24]
 800ccb8:	69fb      	ldr	r3, [r7, #28]
 800ccba:	441a      	add	r2, r3
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ccc0:	683b      	ldr	r3, [r7, #0]
 800ccc2:	015a      	lsls	r2, r3, #5
 800ccc4:	693b      	ldr	r3, [r7, #16]
 800ccc6:	4413      	add	r3, r2
 800ccc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cccc:	699b      	ldr	r3, [r3, #24]
 800ccce:	b29b      	uxth	r3, r3
 800ccd0:	69ba      	ldr	r2, [r7, #24]
 800ccd2:	429a      	cmp	r2, r3
 800ccd4:	d809      	bhi.n	800ccea <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	699a      	ldr	r2, [r3, #24]
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ccde:	429a      	cmp	r2, r3
 800cce0:	d203      	bcs.n	800ccea <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	695b      	ldr	r3, [r3, #20]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d1be      	bne.n	800cc68 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	695a      	ldr	r2, [r3, #20]
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	699b      	ldr	r3, [r3, #24]
 800ccf2:	429a      	cmp	r2, r3
 800ccf4:	d811      	bhi.n	800cd1a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	f003 030f 	and.w	r3, r3, #15
 800ccfc:	2201      	movs	r2, #1
 800ccfe:	fa02 f303 	lsl.w	r3, r2, r3
 800cd02:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800cd04:	693b      	ldr	r3, [r7, #16]
 800cd06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cd0c:	68bb      	ldr	r3, [r7, #8]
 800cd0e:	43db      	mvns	r3, r3
 800cd10:	6939      	ldr	r1, [r7, #16]
 800cd12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cd16:	4013      	ands	r3, r2
 800cd18:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800cd1a:	2300      	movs	r3, #0
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	3720      	adds	r7, #32
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd80      	pop	{r7, pc}

0800cd24 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b086      	sub	sp, #24
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
 800cd2c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd34:	697b      	ldr	r3, [r7, #20]
 800cd36:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800cd38:	697b      	ldr	r3, [r7, #20]
 800cd3a:	333c      	adds	r3, #60	; 0x3c
 800cd3c:	3304      	adds	r3, #4
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	015a      	lsls	r2, r3, #5
 800cd46:	693b      	ldr	r3, [r7, #16]
 800cd48:	4413      	add	r3, r2
 800cd4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd4e:	689b      	ldr	r3, [r3, #8]
 800cd50:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	691b      	ldr	r3, [r3, #16]
 800cd56:	2b01      	cmp	r3, #1
 800cd58:	f040 80b3 	bne.w	800cec2 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	f003 0308 	and.w	r3, r3, #8
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d028      	beq.n	800cdb8 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	4a70      	ldr	r2, [pc, #448]	; (800cf2c <PCD_EP_OutXfrComplete_int+0x208>)
 800cd6a:	4293      	cmp	r3, r2
 800cd6c:	d90e      	bls.n	800cd8c <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800cd6e:	68bb      	ldr	r3, [r7, #8]
 800cd70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d009      	beq.n	800cd8c <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	015a      	lsls	r2, r3, #5
 800cd7c:	693b      	ldr	r3, [r7, #16]
 800cd7e:	4413      	add	r3, r2
 800cd80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd84:	461a      	mov	r2, r3
 800cd86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cd8a:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 800cd8c:	6878      	ldr	r0, [r7, #4]
 800cd8e:	f008 faf1 	bl	8015374 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	6818      	ldr	r0, [r3, #0]
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800cd9c:	461a      	mov	r2, r3
 800cd9e:	2101      	movs	r1, #1
 800cda0:	f003 faf6 	bl	8010390 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	015a      	lsls	r2, r3, #5
 800cda8:	693b      	ldr	r3, [r7, #16]
 800cdaa:	4413      	add	r3, r2
 800cdac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdb0:	461a      	mov	r2, r3
 800cdb2:	2308      	movs	r3, #8
 800cdb4:	6093      	str	r3, [r2, #8]
 800cdb6:	e0b3      	b.n	800cf20 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800cdb8:	68bb      	ldr	r3, [r7, #8]
 800cdba:	f003 0320 	and.w	r3, r3, #32
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d009      	beq.n	800cdd6 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	015a      	lsls	r2, r3, #5
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	4413      	add	r3, r2
 800cdca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdce:	461a      	mov	r2, r3
 800cdd0:	2320      	movs	r3, #32
 800cdd2:	6093      	str	r3, [r2, #8]
 800cdd4:	e0a4      	b.n	800cf20 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800cdd6:	68bb      	ldr	r3, [r7, #8]
 800cdd8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	f040 809f 	bne.w	800cf20 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	4a51      	ldr	r2, [pc, #324]	; (800cf2c <PCD_EP_OutXfrComplete_int+0x208>)
 800cde6:	4293      	cmp	r3, r2
 800cde8:	d90f      	bls.n	800ce0a <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800cdea:	68bb      	ldr	r3, [r7, #8]
 800cdec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d00a      	beq.n	800ce0a <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	015a      	lsls	r2, r3, #5
 800cdf8:	693b      	ldr	r3, [r7, #16]
 800cdfa:	4413      	add	r3, r2
 800cdfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce00:	461a      	mov	r2, r3
 800ce02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ce06:	6093      	str	r3, [r2, #8]
 800ce08:	e08a      	b.n	800cf20 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800ce0a:	6879      	ldr	r1, [r7, #4]
 800ce0c:	683a      	ldr	r2, [r7, #0]
 800ce0e:	4613      	mov	r3, r2
 800ce10:	00db      	lsls	r3, r3, #3
 800ce12:	1a9b      	subs	r3, r3, r2
 800ce14:	009b      	lsls	r3, r3, #2
 800ce16:	440b      	add	r3, r1
 800ce18:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800ce1c:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	0159      	lsls	r1, r3, #5
 800ce22:	693b      	ldr	r3, [r7, #16]
 800ce24:	440b      	add	r3, r1
 800ce26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce2a:	691b      	ldr	r3, [r3, #16]
 800ce2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800ce30:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800ce32:	6878      	ldr	r0, [r7, #4]
 800ce34:	683a      	ldr	r2, [r7, #0]
 800ce36:	4613      	mov	r3, r2
 800ce38:	00db      	lsls	r3, r3, #3
 800ce3a:	1a9b      	subs	r3, r3, r2
 800ce3c:	009b      	lsls	r3, r3, #2
 800ce3e:	4403      	add	r3, r0
 800ce40:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800ce44:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800ce46:	6879      	ldr	r1, [r7, #4]
 800ce48:	683a      	ldr	r2, [r7, #0]
 800ce4a:	4613      	mov	r3, r2
 800ce4c:	00db      	lsls	r3, r3, #3
 800ce4e:	1a9b      	subs	r3, r3, r2
 800ce50:	009b      	lsls	r3, r3, #2
 800ce52:	440b      	add	r3, r1
 800ce54:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ce58:	6819      	ldr	r1, [r3, #0]
 800ce5a:	6878      	ldr	r0, [r7, #4]
 800ce5c:	683a      	ldr	r2, [r7, #0]
 800ce5e:	4613      	mov	r3, r2
 800ce60:	00db      	lsls	r3, r3, #3
 800ce62:	1a9b      	subs	r3, r3, r2
 800ce64:	009b      	lsls	r3, r3, #2
 800ce66:	4403      	add	r3, r0
 800ce68:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	4419      	add	r1, r3
 800ce70:	6878      	ldr	r0, [r7, #4]
 800ce72:	683a      	ldr	r2, [r7, #0]
 800ce74:	4613      	mov	r3, r2
 800ce76:	00db      	lsls	r3, r3, #3
 800ce78:	1a9b      	subs	r3, r3, r2
 800ce7a:	009b      	lsls	r3, r3, #2
 800ce7c:	4403      	add	r3, r0
 800ce7e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ce82:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	b2db      	uxtb	r3, r3
 800ce88:	4619      	mov	r1, r3
 800ce8a:	6878      	ldr	r0, [r7, #4]
 800ce8c:	f008 fa84 	bl	8015398 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800ce90:	683b      	ldr	r3, [r7, #0]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d144      	bne.n	800cf20 <PCD_EP_OutXfrComplete_int+0x1fc>
 800ce96:	6879      	ldr	r1, [r7, #4]
 800ce98:	683a      	ldr	r2, [r7, #0]
 800ce9a:	4613      	mov	r3, r2
 800ce9c:	00db      	lsls	r3, r3, #3
 800ce9e:	1a9b      	subs	r3, r3, r2
 800cea0:	009b      	lsls	r3, r3, #2
 800cea2:	440b      	add	r3, r1
 800cea4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d138      	bne.n	800cf20 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6818      	ldr	r0, [r3, #0]
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ceb8:	461a      	mov	r2, r3
 800ceba:	2101      	movs	r1, #1
 800cebc:	f003 fa68 	bl	8010390 <USB_EP0_OutStart>
 800cec0:	e02e      	b.n	800cf20 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	4a1a      	ldr	r2, [pc, #104]	; (800cf30 <PCD_EP_OutXfrComplete_int+0x20c>)
 800cec6:	4293      	cmp	r3, r2
 800cec8:	d124      	bne.n	800cf14 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800ceca:	68bb      	ldr	r3, [r7, #8]
 800cecc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d00a      	beq.n	800ceea <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	015a      	lsls	r2, r3, #5
 800ced8:	693b      	ldr	r3, [r7, #16]
 800ceda:	4413      	add	r3, r2
 800cedc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cee0:	461a      	mov	r2, r3
 800cee2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cee6:	6093      	str	r3, [r2, #8]
 800cee8:	e01a      	b.n	800cf20 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800ceea:	68bb      	ldr	r3, [r7, #8]
 800ceec:	f003 0320 	and.w	r3, r3, #32
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d008      	beq.n	800cf06 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	015a      	lsls	r2, r3, #5
 800cef8:	693b      	ldr	r3, [r7, #16]
 800cefa:	4413      	add	r3, r2
 800cefc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf00:	461a      	mov	r2, r3
 800cf02:	2320      	movs	r3, #32
 800cf04:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800cf06:	683b      	ldr	r3, [r7, #0]
 800cf08:	b2db      	uxtb	r3, r3
 800cf0a:	4619      	mov	r1, r3
 800cf0c:	6878      	ldr	r0, [r7, #4]
 800cf0e:	f008 fa43 	bl	8015398 <HAL_PCD_DataOutStageCallback>
 800cf12:	e005      	b.n	800cf20 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	b2db      	uxtb	r3, r3
 800cf18:	4619      	mov	r1, r3
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	f008 fa3c 	bl	8015398 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800cf20:	2300      	movs	r3, #0
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	3718      	adds	r7, #24
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}
 800cf2a:	bf00      	nop
 800cf2c:	4f54300a 	.word	0x4f54300a
 800cf30:	4f54310a 	.word	0x4f54310a

0800cf34 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b086      	sub	sp, #24
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
 800cf3c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf44:	697b      	ldr	r3, [r7, #20]
 800cf46:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800cf48:	697b      	ldr	r3, [r7, #20]
 800cf4a:	333c      	adds	r3, #60	; 0x3c
 800cf4c:	3304      	adds	r3, #4
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	015a      	lsls	r2, r3, #5
 800cf56:	693b      	ldr	r3, [r7, #16]
 800cf58:	4413      	add	r3, r2
 800cf5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf5e:	689b      	ldr	r3, [r3, #8]
 800cf60:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	691b      	ldr	r3, [r3, #16]
 800cf66:	2b01      	cmp	r3, #1
 800cf68:	d113      	bne.n	800cf92 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	4a1f      	ldr	r2, [pc, #124]	; (800cfec <PCD_EP_OutSetupPacket_int+0xb8>)
 800cf6e:	4293      	cmp	r3, r2
 800cf70:	d922      	bls.n	800cfb8 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800cf72:	68bb      	ldr	r3, [r7, #8]
 800cf74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d01d      	beq.n	800cfb8 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	015a      	lsls	r2, r3, #5
 800cf80:	693b      	ldr	r3, [r7, #16]
 800cf82:	4413      	add	r3, r2
 800cf84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf88:	461a      	mov	r2, r3
 800cf8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cf8e:	6093      	str	r3, [r2, #8]
 800cf90:	e012      	b.n	800cfb8 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	4a16      	ldr	r2, [pc, #88]	; (800cff0 <PCD_EP_OutSetupPacket_int+0xbc>)
 800cf96:	4293      	cmp	r3, r2
 800cf98:	d10e      	bne.n	800cfb8 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800cf9a:	68bb      	ldr	r3, [r7, #8]
 800cf9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d009      	beq.n	800cfb8 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	015a      	lsls	r2, r3, #5
 800cfa8:	693b      	ldr	r3, [r7, #16]
 800cfaa:	4413      	add	r3, r2
 800cfac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfb0:	461a      	mov	r2, r3
 800cfb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cfb6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800cfb8:	6878      	ldr	r0, [r7, #4]
 800cfba:	f008 f9db 	bl	8015374 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	4a0a      	ldr	r2, [pc, #40]	; (800cfec <PCD_EP_OutSetupPacket_int+0xb8>)
 800cfc2:	4293      	cmp	r3, r2
 800cfc4:	d90c      	bls.n	800cfe0 <PCD_EP_OutSetupPacket_int+0xac>
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	691b      	ldr	r3, [r3, #16]
 800cfca:	2b01      	cmp	r3, #1
 800cfcc:	d108      	bne.n	800cfe0 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	6818      	ldr	r0, [r3, #0]
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800cfd8:	461a      	mov	r2, r3
 800cfda:	2101      	movs	r1, #1
 800cfdc:	f003 f9d8 	bl	8010390 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800cfe0:	2300      	movs	r3, #0
}
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	3718      	adds	r7, #24
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd80      	pop	{r7, pc}
 800cfea:	bf00      	nop
 800cfec:	4f54300a 	.word	0x4f54300a
 800cff0:	4f54310a 	.word	0x4f54310a

0800cff4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800cff4:	b480      	push	{r7}
 800cff6:	b085      	sub	sp, #20
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
 800cffc:	460b      	mov	r3, r1
 800cffe:	70fb      	strb	r3, [r7, #3]
 800d000:	4613      	mov	r3, r2
 800d002:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d00a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800d00c:	78fb      	ldrb	r3, [r7, #3]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d107      	bne.n	800d022 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800d012:	883b      	ldrh	r3, [r7, #0]
 800d014:	0419      	lsls	r1, r3, #16
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	68ba      	ldr	r2, [r7, #8]
 800d01c:	430a      	orrs	r2, r1
 800d01e:	629a      	str	r2, [r3, #40]	; 0x28
 800d020:	e028      	b.n	800d074 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d028:	0c1b      	lsrs	r3, r3, #16
 800d02a:	68ba      	ldr	r2, [r7, #8]
 800d02c:	4413      	add	r3, r2
 800d02e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d030:	2300      	movs	r3, #0
 800d032:	73fb      	strb	r3, [r7, #15]
 800d034:	e00d      	b.n	800d052 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681a      	ldr	r2, [r3, #0]
 800d03a:	7bfb      	ldrb	r3, [r7, #15]
 800d03c:	3340      	adds	r3, #64	; 0x40
 800d03e:	009b      	lsls	r3, r3, #2
 800d040:	4413      	add	r3, r2
 800d042:	685b      	ldr	r3, [r3, #4]
 800d044:	0c1b      	lsrs	r3, r3, #16
 800d046:	68ba      	ldr	r2, [r7, #8]
 800d048:	4413      	add	r3, r2
 800d04a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d04c:	7bfb      	ldrb	r3, [r7, #15]
 800d04e:	3301      	adds	r3, #1
 800d050:	73fb      	strb	r3, [r7, #15]
 800d052:	7bfa      	ldrb	r2, [r7, #15]
 800d054:	78fb      	ldrb	r3, [r7, #3]
 800d056:	3b01      	subs	r3, #1
 800d058:	429a      	cmp	r2, r3
 800d05a:	d3ec      	bcc.n	800d036 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800d05c:	883b      	ldrh	r3, [r7, #0]
 800d05e:	0418      	lsls	r0, r3, #16
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	6819      	ldr	r1, [r3, #0]
 800d064:	78fb      	ldrb	r3, [r7, #3]
 800d066:	3b01      	subs	r3, #1
 800d068:	68ba      	ldr	r2, [r7, #8]
 800d06a:	4302      	orrs	r2, r0
 800d06c:	3340      	adds	r3, #64	; 0x40
 800d06e:	009b      	lsls	r3, r3, #2
 800d070:	440b      	add	r3, r1
 800d072:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800d074:	2300      	movs	r3, #0
}
 800d076:	4618      	mov	r0, r3
 800d078:	3714      	adds	r7, #20
 800d07a:	46bd      	mov	sp, r7
 800d07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d080:	4770      	bx	lr

0800d082 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800d082:	b480      	push	{r7}
 800d084:	b083      	sub	sp, #12
 800d086:	af00      	add	r7, sp, #0
 800d088:	6078      	str	r0, [r7, #4]
 800d08a:	460b      	mov	r3, r1
 800d08c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	887a      	ldrh	r2, [r7, #2]
 800d094:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800d096:	2300      	movs	r3, #0
}
 800d098:	4618      	mov	r0, r3
 800d09a:	370c      	adds	r7, #12
 800d09c:	46bd      	mov	sp, r7
 800d09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a2:	4770      	bx	lr

0800d0a4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d0a4:	b480      	push	{r7}
 800d0a6:	b083      	sub	sp, #12
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
 800d0ac:	460b      	mov	r3, r1
 800d0ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800d0b0:	bf00      	nop
 800d0b2:	370c      	adds	r7, #12
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ba:	4770      	bx	lr

0800d0bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b086      	sub	sp, #24
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d101      	bne.n	800d0ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d0ca:	2301      	movs	r3, #1
 800d0cc:	e25b      	b.n	800d586 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	f003 0301 	and.w	r3, r3, #1
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d075      	beq.n	800d1c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d0da:	4ba3      	ldr	r3, [pc, #652]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d0dc:	689b      	ldr	r3, [r3, #8]
 800d0de:	f003 030c 	and.w	r3, r3, #12
 800d0e2:	2b04      	cmp	r3, #4
 800d0e4:	d00c      	beq.n	800d100 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d0e6:	4ba0      	ldr	r3, [pc, #640]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d0e8:	689b      	ldr	r3, [r3, #8]
 800d0ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d0ee:	2b08      	cmp	r3, #8
 800d0f0:	d112      	bne.n	800d118 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d0f2:	4b9d      	ldr	r3, [pc, #628]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d0f4:	685b      	ldr	r3, [r3, #4]
 800d0f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d0fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d0fe:	d10b      	bne.n	800d118 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d100:	4b99      	ldr	r3, [pc, #612]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d05b      	beq.n	800d1c4 <HAL_RCC_OscConfig+0x108>
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	685b      	ldr	r3, [r3, #4]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d157      	bne.n	800d1c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800d114:	2301      	movs	r3, #1
 800d116:	e236      	b.n	800d586 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	685b      	ldr	r3, [r3, #4]
 800d11c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d120:	d106      	bne.n	800d130 <HAL_RCC_OscConfig+0x74>
 800d122:	4b91      	ldr	r3, [pc, #580]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	4a90      	ldr	r2, [pc, #576]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d12c:	6013      	str	r3, [r2, #0]
 800d12e:	e01d      	b.n	800d16c <HAL_RCC_OscConfig+0xb0>
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	685b      	ldr	r3, [r3, #4]
 800d134:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d138:	d10c      	bne.n	800d154 <HAL_RCC_OscConfig+0x98>
 800d13a:	4b8b      	ldr	r3, [pc, #556]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	4a8a      	ldr	r2, [pc, #552]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d140:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d144:	6013      	str	r3, [r2, #0]
 800d146:	4b88      	ldr	r3, [pc, #544]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	4a87      	ldr	r2, [pc, #540]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d14c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d150:	6013      	str	r3, [r2, #0]
 800d152:	e00b      	b.n	800d16c <HAL_RCC_OscConfig+0xb0>
 800d154:	4b84      	ldr	r3, [pc, #528]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	4a83      	ldr	r2, [pc, #524]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d15a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d15e:	6013      	str	r3, [r2, #0]
 800d160:	4b81      	ldr	r3, [pc, #516]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	4a80      	ldr	r2, [pc, #512]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d166:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d16a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	685b      	ldr	r3, [r3, #4]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d013      	beq.n	800d19c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d174:	f7fd ff60 	bl	800b038 <HAL_GetTick>
 800d178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d17a:	e008      	b.n	800d18e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d17c:	f7fd ff5c 	bl	800b038 <HAL_GetTick>
 800d180:	4602      	mov	r2, r0
 800d182:	693b      	ldr	r3, [r7, #16]
 800d184:	1ad3      	subs	r3, r2, r3
 800d186:	2b64      	cmp	r3, #100	; 0x64
 800d188:	d901      	bls.n	800d18e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800d18a:	2303      	movs	r3, #3
 800d18c:	e1fb      	b.n	800d586 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d18e:	4b76      	ldr	r3, [pc, #472]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d196:	2b00      	cmp	r3, #0
 800d198:	d0f0      	beq.n	800d17c <HAL_RCC_OscConfig+0xc0>
 800d19a:	e014      	b.n	800d1c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d19c:	f7fd ff4c 	bl	800b038 <HAL_GetTick>
 800d1a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d1a2:	e008      	b.n	800d1b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d1a4:	f7fd ff48 	bl	800b038 <HAL_GetTick>
 800d1a8:	4602      	mov	r2, r0
 800d1aa:	693b      	ldr	r3, [r7, #16]
 800d1ac:	1ad3      	subs	r3, r2, r3
 800d1ae:	2b64      	cmp	r3, #100	; 0x64
 800d1b0:	d901      	bls.n	800d1b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d1b2:	2303      	movs	r3, #3
 800d1b4:	e1e7      	b.n	800d586 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d1b6:	4b6c      	ldr	r3, [pc, #432]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d1f0      	bne.n	800d1a4 <HAL_RCC_OscConfig+0xe8>
 800d1c2:	e000      	b.n	800d1c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d1c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	f003 0302 	and.w	r3, r3, #2
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d063      	beq.n	800d29a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d1d2:	4b65      	ldr	r3, [pc, #404]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d1d4:	689b      	ldr	r3, [r3, #8]
 800d1d6:	f003 030c 	and.w	r3, r3, #12
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d00b      	beq.n	800d1f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d1de:	4b62      	ldr	r3, [pc, #392]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d1e0:	689b      	ldr	r3, [r3, #8]
 800d1e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d1e6:	2b08      	cmp	r3, #8
 800d1e8:	d11c      	bne.n	800d224 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d1ea:	4b5f      	ldr	r3, [pc, #380]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d1ec:	685b      	ldr	r3, [r3, #4]
 800d1ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d116      	bne.n	800d224 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d1f6:	4b5c      	ldr	r3, [pc, #368]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	f003 0302 	and.w	r3, r3, #2
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d005      	beq.n	800d20e <HAL_RCC_OscConfig+0x152>
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	68db      	ldr	r3, [r3, #12]
 800d206:	2b01      	cmp	r3, #1
 800d208:	d001      	beq.n	800d20e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800d20a:	2301      	movs	r3, #1
 800d20c:	e1bb      	b.n	800d586 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d20e:	4b56      	ldr	r3, [pc, #344]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	691b      	ldr	r3, [r3, #16]
 800d21a:	00db      	lsls	r3, r3, #3
 800d21c:	4952      	ldr	r1, [pc, #328]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d21e:	4313      	orrs	r3, r2
 800d220:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d222:	e03a      	b.n	800d29a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	68db      	ldr	r3, [r3, #12]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d020      	beq.n	800d26e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d22c:	4b4f      	ldr	r3, [pc, #316]	; (800d36c <HAL_RCC_OscConfig+0x2b0>)
 800d22e:	2201      	movs	r2, #1
 800d230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d232:	f7fd ff01 	bl	800b038 <HAL_GetTick>
 800d236:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d238:	e008      	b.n	800d24c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d23a:	f7fd fefd 	bl	800b038 <HAL_GetTick>
 800d23e:	4602      	mov	r2, r0
 800d240:	693b      	ldr	r3, [r7, #16]
 800d242:	1ad3      	subs	r3, r2, r3
 800d244:	2b02      	cmp	r3, #2
 800d246:	d901      	bls.n	800d24c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800d248:	2303      	movs	r3, #3
 800d24a:	e19c      	b.n	800d586 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d24c:	4b46      	ldr	r3, [pc, #280]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	f003 0302 	and.w	r3, r3, #2
 800d254:	2b00      	cmp	r3, #0
 800d256:	d0f0      	beq.n	800d23a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d258:	4b43      	ldr	r3, [pc, #268]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	691b      	ldr	r3, [r3, #16]
 800d264:	00db      	lsls	r3, r3, #3
 800d266:	4940      	ldr	r1, [pc, #256]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d268:	4313      	orrs	r3, r2
 800d26a:	600b      	str	r3, [r1, #0]
 800d26c:	e015      	b.n	800d29a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d26e:	4b3f      	ldr	r3, [pc, #252]	; (800d36c <HAL_RCC_OscConfig+0x2b0>)
 800d270:	2200      	movs	r2, #0
 800d272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d274:	f7fd fee0 	bl	800b038 <HAL_GetTick>
 800d278:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d27a:	e008      	b.n	800d28e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d27c:	f7fd fedc 	bl	800b038 <HAL_GetTick>
 800d280:	4602      	mov	r2, r0
 800d282:	693b      	ldr	r3, [r7, #16]
 800d284:	1ad3      	subs	r3, r2, r3
 800d286:	2b02      	cmp	r3, #2
 800d288:	d901      	bls.n	800d28e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800d28a:	2303      	movs	r3, #3
 800d28c:	e17b      	b.n	800d586 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d28e:	4b36      	ldr	r3, [pc, #216]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	f003 0302 	and.w	r3, r3, #2
 800d296:	2b00      	cmp	r3, #0
 800d298:	d1f0      	bne.n	800d27c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	f003 0308 	and.w	r3, r3, #8
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d030      	beq.n	800d308 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	695b      	ldr	r3, [r3, #20]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d016      	beq.n	800d2dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d2ae:	4b30      	ldr	r3, [pc, #192]	; (800d370 <HAL_RCC_OscConfig+0x2b4>)
 800d2b0:	2201      	movs	r2, #1
 800d2b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d2b4:	f7fd fec0 	bl	800b038 <HAL_GetTick>
 800d2b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d2ba:	e008      	b.n	800d2ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d2bc:	f7fd febc 	bl	800b038 <HAL_GetTick>
 800d2c0:	4602      	mov	r2, r0
 800d2c2:	693b      	ldr	r3, [r7, #16]
 800d2c4:	1ad3      	subs	r3, r2, r3
 800d2c6:	2b02      	cmp	r3, #2
 800d2c8:	d901      	bls.n	800d2ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800d2ca:	2303      	movs	r3, #3
 800d2cc:	e15b      	b.n	800d586 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d2ce:	4b26      	ldr	r3, [pc, #152]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d2d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d2d2:	f003 0302 	and.w	r3, r3, #2
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d0f0      	beq.n	800d2bc <HAL_RCC_OscConfig+0x200>
 800d2da:	e015      	b.n	800d308 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d2dc:	4b24      	ldr	r3, [pc, #144]	; (800d370 <HAL_RCC_OscConfig+0x2b4>)
 800d2de:	2200      	movs	r2, #0
 800d2e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d2e2:	f7fd fea9 	bl	800b038 <HAL_GetTick>
 800d2e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d2e8:	e008      	b.n	800d2fc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d2ea:	f7fd fea5 	bl	800b038 <HAL_GetTick>
 800d2ee:	4602      	mov	r2, r0
 800d2f0:	693b      	ldr	r3, [r7, #16]
 800d2f2:	1ad3      	subs	r3, r2, r3
 800d2f4:	2b02      	cmp	r3, #2
 800d2f6:	d901      	bls.n	800d2fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800d2f8:	2303      	movs	r3, #3
 800d2fa:	e144      	b.n	800d586 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d2fc:	4b1a      	ldr	r3, [pc, #104]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d2fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d300:	f003 0302 	and.w	r3, r3, #2
 800d304:	2b00      	cmp	r3, #0
 800d306:	d1f0      	bne.n	800d2ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	f003 0304 	and.w	r3, r3, #4
 800d310:	2b00      	cmp	r3, #0
 800d312:	f000 80a0 	beq.w	800d456 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d316:	2300      	movs	r3, #0
 800d318:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d31a:	4b13      	ldr	r3, [pc, #76]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d31c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d31e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d322:	2b00      	cmp	r3, #0
 800d324:	d10f      	bne.n	800d346 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d326:	2300      	movs	r3, #0
 800d328:	60bb      	str	r3, [r7, #8]
 800d32a:	4b0f      	ldr	r3, [pc, #60]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d32c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d32e:	4a0e      	ldr	r2, [pc, #56]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d334:	6413      	str	r3, [r2, #64]	; 0x40
 800d336:	4b0c      	ldr	r3, [pc, #48]	; (800d368 <HAL_RCC_OscConfig+0x2ac>)
 800d338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d33a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d33e:	60bb      	str	r3, [r7, #8]
 800d340:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d342:	2301      	movs	r3, #1
 800d344:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d346:	4b0b      	ldr	r3, [pc, #44]	; (800d374 <HAL_RCC_OscConfig+0x2b8>)
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d121      	bne.n	800d396 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d352:	4b08      	ldr	r3, [pc, #32]	; (800d374 <HAL_RCC_OscConfig+0x2b8>)
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	4a07      	ldr	r2, [pc, #28]	; (800d374 <HAL_RCC_OscConfig+0x2b8>)
 800d358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d35c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d35e:	f7fd fe6b 	bl	800b038 <HAL_GetTick>
 800d362:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d364:	e011      	b.n	800d38a <HAL_RCC_OscConfig+0x2ce>
 800d366:	bf00      	nop
 800d368:	40023800 	.word	0x40023800
 800d36c:	42470000 	.word	0x42470000
 800d370:	42470e80 	.word	0x42470e80
 800d374:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d378:	f7fd fe5e 	bl	800b038 <HAL_GetTick>
 800d37c:	4602      	mov	r2, r0
 800d37e:	693b      	ldr	r3, [r7, #16]
 800d380:	1ad3      	subs	r3, r2, r3
 800d382:	2b02      	cmp	r3, #2
 800d384:	d901      	bls.n	800d38a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800d386:	2303      	movs	r3, #3
 800d388:	e0fd      	b.n	800d586 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d38a:	4b81      	ldr	r3, [pc, #516]	; (800d590 <HAL_RCC_OscConfig+0x4d4>)
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d392:	2b00      	cmp	r3, #0
 800d394:	d0f0      	beq.n	800d378 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	689b      	ldr	r3, [r3, #8]
 800d39a:	2b01      	cmp	r3, #1
 800d39c:	d106      	bne.n	800d3ac <HAL_RCC_OscConfig+0x2f0>
 800d39e:	4b7d      	ldr	r3, [pc, #500]	; (800d594 <HAL_RCC_OscConfig+0x4d8>)
 800d3a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3a2:	4a7c      	ldr	r2, [pc, #496]	; (800d594 <HAL_RCC_OscConfig+0x4d8>)
 800d3a4:	f043 0301 	orr.w	r3, r3, #1
 800d3a8:	6713      	str	r3, [r2, #112]	; 0x70
 800d3aa:	e01c      	b.n	800d3e6 <HAL_RCC_OscConfig+0x32a>
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	689b      	ldr	r3, [r3, #8]
 800d3b0:	2b05      	cmp	r3, #5
 800d3b2:	d10c      	bne.n	800d3ce <HAL_RCC_OscConfig+0x312>
 800d3b4:	4b77      	ldr	r3, [pc, #476]	; (800d594 <HAL_RCC_OscConfig+0x4d8>)
 800d3b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3b8:	4a76      	ldr	r2, [pc, #472]	; (800d594 <HAL_RCC_OscConfig+0x4d8>)
 800d3ba:	f043 0304 	orr.w	r3, r3, #4
 800d3be:	6713      	str	r3, [r2, #112]	; 0x70
 800d3c0:	4b74      	ldr	r3, [pc, #464]	; (800d594 <HAL_RCC_OscConfig+0x4d8>)
 800d3c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3c4:	4a73      	ldr	r2, [pc, #460]	; (800d594 <HAL_RCC_OscConfig+0x4d8>)
 800d3c6:	f043 0301 	orr.w	r3, r3, #1
 800d3ca:	6713      	str	r3, [r2, #112]	; 0x70
 800d3cc:	e00b      	b.n	800d3e6 <HAL_RCC_OscConfig+0x32a>
 800d3ce:	4b71      	ldr	r3, [pc, #452]	; (800d594 <HAL_RCC_OscConfig+0x4d8>)
 800d3d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3d2:	4a70      	ldr	r2, [pc, #448]	; (800d594 <HAL_RCC_OscConfig+0x4d8>)
 800d3d4:	f023 0301 	bic.w	r3, r3, #1
 800d3d8:	6713      	str	r3, [r2, #112]	; 0x70
 800d3da:	4b6e      	ldr	r3, [pc, #440]	; (800d594 <HAL_RCC_OscConfig+0x4d8>)
 800d3dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3de:	4a6d      	ldr	r2, [pc, #436]	; (800d594 <HAL_RCC_OscConfig+0x4d8>)
 800d3e0:	f023 0304 	bic.w	r3, r3, #4
 800d3e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	689b      	ldr	r3, [r3, #8]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d015      	beq.n	800d41a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d3ee:	f7fd fe23 	bl	800b038 <HAL_GetTick>
 800d3f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d3f4:	e00a      	b.n	800d40c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d3f6:	f7fd fe1f 	bl	800b038 <HAL_GetTick>
 800d3fa:	4602      	mov	r2, r0
 800d3fc:	693b      	ldr	r3, [r7, #16]
 800d3fe:	1ad3      	subs	r3, r2, r3
 800d400:	f241 3288 	movw	r2, #5000	; 0x1388
 800d404:	4293      	cmp	r3, r2
 800d406:	d901      	bls.n	800d40c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800d408:	2303      	movs	r3, #3
 800d40a:	e0bc      	b.n	800d586 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d40c:	4b61      	ldr	r3, [pc, #388]	; (800d594 <HAL_RCC_OscConfig+0x4d8>)
 800d40e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d410:	f003 0302 	and.w	r3, r3, #2
 800d414:	2b00      	cmp	r3, #0
 800d416:	d0ee      	beq.n	800d3f6 <HAL_RCC_OscConfig+0x33a>
 800d418:	e014      	b.n	800d444 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d41a:	f7fd fe0d 	bl	800b038 <HAL_GetTick>
 800d41e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d420:	e00a      	b.n	800d438 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d422:	f7fd fe09 	bl	800b038 <HAL_GetTick>
 800d426:	4602      	mov	r2, r0
 800d428:	693b      	ldr	r3, [r7, #16]
 800d42a:	1ad3      	subs	r3, r2, r3
 800d42c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d430:	4293      	cmp	r3, r2
 800d432:	d901      	bls.n	800d438 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800d434:	2303      	movs	r3, #3
 800d436:	e0a6      	b.n	800d586 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d438:	4b56      	ldr	r3, [pc, #344]	; (800d594 <HAL_RCC_OscConfig+0x4d8>)
 800d43a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d43c:	f003 0302 	and.w	r3, r3, #2
 800d440:	2b00      	cmp	r3, #0
 800d442:	d1ee      	bne.n	800d422 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d444:	7dfb      	ldrb	r3, [r7, #23]
 800d446:	2b01      	cmp	r3, #1
 800d448:	d105      	bne.n	800d456 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d44a:	4b52      	ldr	r3, [pc, #328]	; (800d594 <HAL_RCC_OscConfig+0x4d8>)
 800d44c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d44e:	4a51      	ldr	r2, [pc, #324]	; (800d594 <HAL_RCC_OscConfig+0x4d8>)
 800d450:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d454:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	699b      	ldr	r3, [r3, #24]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	f000 8092 	beq.w	800d584 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d460:	4b4c      	ldr	r3, [pc, #304]	; (800d594 <HAL_RCC_OscConfig+0x4d8>)
 800d462:	689b      	ldr	r3, [r3, #8]
 800d464:	f003 030c 	and.w	r3, r3, #12
 800d468:	2b08      	cmp	r3, #8
 800d46a:	d05c      	beq.n	800d526 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	699b      	ldr	r3, [r3, #24]
 800d470:	2b02      	cmp	r3, #2
 800d472:	d141      	bne.n	800d4f8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d474:	4b48      	ldr	r3, [pc, #288]	; (800d598 <HAL_RCC_OscConfig+0x4dc>)
 800d476:	2200      	movs	r2, #0
 800d478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d47a:	f7fd fddd 	bl	800b038 <HAL_GetTick>
 800d47e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d480:	e008      	b.n	800d494 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d482:	f7fd fdd9 	bl	800b038 <HAL_GetTick>
 800d486:	4602      	mov	r2, r0
 800d488:	693b      	ldr	r3, [r7, #16]
 800d48a:	1ad3      	subs	r3, r2, r3
 800d48c:	2b02      	cmp	r3, #2
 800d48e:	d901      	bls.n	800d494 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800d490:	2303      	movs	r3, #3
 800d492:	e078      	b.n	800d586 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d494:	4b3f      	ldr	r3, [pc, #252]	; (800d594 <HAL_RCC_OscConfig+0x4d8>)
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d1f0      	bne.n	800d482 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	69da      	ldr	r2, [r3, #28]
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	6a1b      	ldr	r3, [r3, #32]
 800d4a8:	431a      	orrs	r2, r3
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ae:	019b      	lsls	r3, r3, #6
 800d4b0:	431a      	orrs	r2, r3
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4b6:	085b      	lsrs	r3, r3, #1
 800d4b8:	3b01      	subs	r3, #1
 800d4ba:	041b      	lsls	r3, r3, #16
 800d4bc:	431a      	orrs	r2, r3
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4c2:	061b      	lsls	r3, r3, #24
 800d4c4:	4933      	ldr	r1, [pc, #204]	; (800d594 <HAL_RCC_OscConfig+0x4d8>)
 800d4c6:	4313      	orrs	r3, r2
 800d4c8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d4ca:	4b33      	ldr	r3, [pc, #204]	; (800d598 <HAL_RCC_OscConfig+0x4dc>)
 800d4cc:	2201      	movs	r2, #1
 800d4ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d4d0:	f7fd fdb2 	bl	800b038 <HAL_GetTick>
 800d4d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d4d6:	e008      	b.n	800d4ea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d4d8:	f7fd fdae 	bl	800b038 <HAL_GetTick>
 800d4dc:	4602      	mov	r2, r0
 800d4de:	693b      	ldr	r3, [r7, #16]
 800d4e0:	1ad3      	subs	r3, r2, r3
 800d4e2:	2b02      	cmp	r3, #2
 800d4e4:	d901      	bls.n	800d4ea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800d4e6:	2303      	movs	r3, #3
 800d4e8:	e04d      	b.n	800d586 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d4ea:	4b2a      	ldr	r3, [pc, #168]	; (800d594 <HAL_RCC_OscConfig+0x4d8>)
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d0f0      	beq.n	800d4d8 <HAL_RCC_OscConfig+0x41c>
 800d4f6:	e045      	b.n	800d584 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d4f8:	4b27      	ldr	r3, [pc, #156]	; (800d598 <HAL_RCC_OscConfig+0x4dc>)
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d4fe:	f7fd fd9b 	bl	800b038 <HAL_GetTick>
 800d502:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d504:	e008      	b.n	800d518 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d506:	f7fd fd97 	bl	800b038 <HAL_GetTick>
 800d50a:	4602      	mov	r2, r0
 800d50c:	693b      	ldr	r3, [r7, #16]
 800d50e:	1ad3      	subs	r3, r2, r3
 800d510:	2b02      	cmp	r3, #2
 800d512:	d901      	bls.n	800d518 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800d514:	2303      	movs	r3, #3
 800d516:	e036      	b.n	800d586 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d518:	4b1e      	ldr	r3, [pc, #120]	; (800d594 <HAL_RCC_OscConfig+0x4d8>)
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d520:	2b00      	cmp	r3, #0
 800d522:	d1f0      	bne.n	800d506 <HAL_RCC_OscConfig+0x44a>
 800d524:	e02e      	b.n	800d584 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	699b      	ldr	r3, [r3, #24]
 800d52a:	2b01      	cmp	r3, #1
 800d52c:	d101      	bne.n	800d532 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800d52e:	2301      	movs	r3, #1
 800d530:	e029      	b.n	800d586 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800d532:	4b18      	ldr	r3, [pc, #96]	; (800d594 <HAL_RCC_OscConfig+0x4d8>)
 800d534:	689b      	ldr	r3, [r3, #8]
 800d536:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	69db      	ldr	r3, [r3, #28]
 800d542:	429a      	cmp	r2, r3
 800d544:	d11c      	bne.n	800d580 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d550:	429a      	cmp	r2, r3
 800d552:	d115      	bne.n	800d580 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800d554:	68fa      	ldr	r2, [r7, #12]
 800d556:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800d55a:	4013      	ands	r3, r2
 800d55c:	687a      	ldr	r2, [r7, #4]
 800d55e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d560:	4293      	cmp	r3, r2
 800d562:	d10d      	bne.n	800d580 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800d56e:	429a      	cmp	r2, r3
 800d570:	d106      	bne.n	800d580 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d57c:	429a      	cmp	r2, r3
 800d57e:	d001      	beq.n	800d584 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800d580:	2301      	movs	r3, #1
 800d582:	e000      	b.n	800d586 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800d584:	2300      	movs	r3, #0
}
 800d586:	4618      	mov	r0, r3
 800d588:	3718      	adds	r7, #24
 800d58a:	46bd      	mov	sp, r7
 800d58c:	bd80      	pop	{r7, pc}
 800d58e:	bf00      	nop
 800d590:	40007000 	.word	0x40007000
 800d594:	40023800 	.word	0x40023800
 800d598:	42470060 	.word	0x42470060

0800d59c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b084      	sub	sp, #16
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
 800d5a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d101      	bne.n	800d5b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d5ac:	2301      	movs	r3, #1
 800d5ae:	e0cc      	b.n	800d74a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d5b0:	4b68      	ldr	r3, [pc, #416]	; (800d754 <HAL_RCC_ClockConfig+0x1b8>)
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	f003 030f 	and.w	r3, r3, #15
 800d5b8:	683a      	ldr	r2, [r7, #0]
 800d5ba:	429a      	cmp	r2, r3
 800d5bc:	d90c      	bls.n	800d5d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d5be:	4b65      	ldr	r3, [pc, #404]	; (800d754 <HAL_RCC_ClockConfig+0x1b8>)
 800d5c0:	683a      	ldr	r2, [r7, #0]
 800d5c2:	b2d2      	uxtb	r2, r2
 800d5c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d5c6:	4b63      	ldr	r3, [pc, #396]	; (800d754 <HAL_RCC_ClockConfig+0x1b8>)
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	f003 030f 	and.w	r3, r3, #15
 800d5ce:	683a      	ldr	r2, [r7, #0]
 800d5d0:	429a      	cmp	r2, r3
 800d5d2:	d001      	beq.n	800d5d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800d5d4:	2301      	movs	r3, #1
 800d5d6:	e0b8      	b.n	800d74a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	f003 0302 	and.w	r3, r3, #2
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d020      	beq.n	800d626 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	f003 0304 	and.w	r3, r3, #4
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d005      	beq.n	800d5fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d5f0:	4b59      	ldr	r3, [pc, #356]	; (800d758 <HAL_RCC_ClockConfig+0x1bc>)
 800d5f2:	689b      	ldr	r3, [r3, #8]
 800d5f4:	4a58      	ldr	r2, [pc, #352]	; (800d758 <HAL_RCC_ClockConfig+0x1bc>)
 800d5f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800d5fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	f003 0308 	and.w	r3, r3, #8
 800d604:	2b00      	cmp	r3, #0
 800d606:	d005      	beq.n	800d614 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d608:	4b53      	ldr	r3, [pc, #332]	; (800d758 <HAL_RCC_ClockConfig+0x1bc>)
 800d60a:	689b      	ldr	r3, [r3, #8]
 800d60c:	4a52      	ldr	r2, [pc, #328]	; (800d758 <HAL_RCC_ClockConfig+0x1bc>)
 800d60e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800d612:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d614:	4b50      	ldr	r3, [pc, #320]	; (800d758 <HAL_RCC_ClockConfig+0x1bc>)
 800d616:	689b      	ldr	r3, [r3, #8]
 800d618:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	689b      	ldr	r3, [r3, #8]
 800d620:	494d      	ldr	r1, [pc, #308]	; (800d758 <HAL_RCC_ClockConfig+0x1bc>)
 800d622:	4313      	orrs	r3, r2
 800d624:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	f003 0301 	and.w	r3, r3, #1
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d044      	beq.n	800d6bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	685b      	ldr	r3, [r3, #4]
 800d636:	2b01      	cmp	r3, #1
 800d638:	d107      	bne.n	800d64a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d63a:	4b47      	ldr	r3, [pc, #284]	; (800d758 <HAL_RCC_ClockConfig+0x1bc>)
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d642:	2b00      	cmp	r3, #0
 800d644:	d119      	bne.n	800d67a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d646:	2301      	movs	r3, #1
 800d648:	e07f      	b.n	800d74a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	685b      	ldr	r3, [r3, #4]
 800d64e:	2b02      	cmp	r3, #2
 800d650:	d003      	beq.n	800d65a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d656:	2b03      	cmp	r3, #3
 800d658:	d107      	bne.n	800d66a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d65a:	4b3f      	ldr	r3, [pc, #252]	; (800d758 <HAL_RCC_ClockConfig+0x1bc>)
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d662:	2b00      	cmp	r3, #0
 800d664:	d109      	bne.n	800d67a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d666:	2301      	movs	r3, #1
 800d668:	e06f      	b.n	800d74a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d66a:	4b3b      	ldr	r3, [pc, #236]	; (800d758 <HAL_RCC_ClockConfig+0x1bc>)
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	f003 0302 	and.w	r3, r3, #2
 800d672:	2b00      	cmp	r3, #0
 800d674:	d101      	bne.n	800d67a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d676:	2301      	movs	r3, #1
 800d678:	e067      	b.n	800d74a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d67a:	4b37      	ldr	r3, [pc, #220]	; (800d758 <HAL_RCC_ClockConfig+0x1bc>)
 800d67c:	689b      	ldr	r3, [r3, #8]
 800d67e:	f023 0203 	bic.w	r2, r3, #3
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	685b      	ldr	r3, [r3, #4]
 800d686:	4934      	ldr	r1, [pc, #208]	; (800d758 <HAL_RCC_ClockConfig+0x1bc>)
 800d688:	4313      	orrs	r3, r2
 800d68a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800d68c:	f7fd fcd4 	bl	800b038 <HAL_GetTick>
 800d690:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d692:	e00a      	b.n	800d6aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d694:	f7fd fcd0 	bl	800b038 <HAL_GetTick>
 800d698:	4602      	mov	r2, r0
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	1ad3      	subs	r3, r2, r3
 800d69e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d6a2:	4293      	cmp	r3, r2
 800d6a4:	d901      	bls.n	800d6aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800d6a6:	2303      	movs	r3, #3
 800d6a8:	e04f      	b.n	800d74a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d6aa:	4b2b      	ldr	r3, [pc, #172]	; (800d758 <HAL_RCC_ClockConfig+0x1bc>)
 800d6ac:	689b      	ldr	r3, [r3, #8]
 800d6ae:	f003 020c 	and.w	r2, r3, #12
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	685b      	ldr	r3, [r3, #4]
 800d6b6:	009b      	lsls	r3, r3, #2
 800d6b8:	429a      	cmp	r2, r3
 800d6ba:	d1eb      	bne.n	800d694 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d6bc:	4b25      	ldr	r3, [pc, #148]	; (800d754 <HAL_RCC_ClockConfig+0x1b8>)
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	f003 030f 	and.w	r3, r3, #15
 800d6c4:	683a      	ldr	r2, [r7, #0]
 800d6c6:	429a      	cmp	r2, r3
 800d6c8:	d20c      	bcs.n	800d6e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d6ca:	4b22      	ldr	r3, [pc, #136]	; (800d754 <HAL_RCC_ClockConfig+0x1b8>)
 800d6cc:	683a      	ldr	r2, [r7, #0]
 800d6ce:	b2d2      	uxtb	r2, r2
 800d6d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d6d2:	4b20      	ldr	r3, [pc, #128]	; (800d754 <HAL_RCC_ClockConfig+0x1b8>)
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	f003 030f 	and.w	r3, r3, #15
 800d6da:	683a      	ldr	r2, [r7, #0]
 800d6dc:	429a      	cmp	r2, r3
 800d6de:	d001      	beq.n	800d6e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800d6e0:	2301      	movs	r3, #1
 800d6e2:	e032      	b.n	800d74a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	f003 0304 	and.w	r3, r3, #4
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d008      	beq.n	800d702 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d6f0:	4b19      	ldr	r3, [pc, #100]	; (800d758 <HAL_RCC_ClockConfig+0x1bc>)
 800d6f2:	689b      	ldr	r3, [r3, #8]
 800d6f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	68db      	ldr	r3, [r3, #12]
 800d6fc:	4916      	ldr	r1, [pc, #88]	; (800d758 <HAL_RCC_ClockConfig+0x1bc>)
 800d6fe:	4313      	orrs	r3, r2
 800d700:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	f003 0308 	and.w	r3, r3, #8
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d009      	beq.n	800d722 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d70e:	4b12      	ldr	r3, [pc, #72]	; (800d758 <HAL_RCC_ClockConfig+0x1bc>)
 800d710:	689b      	ldr	r3, [r3, #8]
 800d712:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	691b      	ldr	r3, [r3, #16]
 800d71a:	00db      	lsls	r3, r3, #3
 800d71c:	490e      	ldr	r1, [pc, #56]	; (800d758 <HAL_RCC_ClockConfig+0x1bc>)
 800d71e:	4313      	orrs	r3, r2
 800d720:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800d722:	f000 f821 	bl	800d768 <HAL_RCC_GetSysClockFreq>
 800d726:	4601      	mov	r1, r0
 800d728:	4b0b      	ldr	r3, [pc, #44]	; (800d758 <HAL_RCC_ClockConfig+0x1bc>)
 800d72a:	689b      	ldr	r3, [r3, #8]
 800d72c:	091b      	lsrs	r3, r3, #4
 800d72e:	f003 030f 	and.w	r3, r3, #15
 800d732:	4a0a      	ldr	r2, [pc, #40]	; (800d75c <HAL_RCC_ClockConfig+0x1c0>)
 800d734:	5cd3      	ldrb	r3, [r2, r3]
 800d736:	fa21 f303 	lsr.w	r3, r1, r3
 800d73a:	4a09      	ldr	r2, [pc, #36]	; (800d760 <HAL_RCC_ClockConfig+0x1c4>)
 800d73c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800d73e:	4b09      	ldr	r3, [pc, #36]	; (800d764 <HAL_RCC_ClockConfig+0x1c8>)
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	4618      	mov	r0, r3
 800d744:	f7fd f9e0 	bl	800ab08 <HAL_InitTick>

  return HAL_OK;
 800d748:	2300      	movs	r3, #0
}
 800d74a:	4618      	mov	r0, r3
 800d74c:	3710      	adds	r7, #16
 800d74e:	46bd      	mov	sp, r7
 800d750:	bd80      	pop	{r7, pc}
 800d752:	bf00      	nop
 800d754:	40023c00 	.word	0x40023c00
 800d758:	40023800 	.word	0x40023800
 800d75c:	0801b2e4 	.word	0x0801b2e4
 800d760:	20000c8c 	.word	0x20000c8c
 800d764:	20000c90 	.word	0x20000c90

0800d768 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d76a:	b085      	sub	sp, #20
 800d76c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800d76e:	2300      	movs	r3, #0
 800d770:	607b      	str	r3, [r7, #4]
 800d772:	2300      	movs	r3, #0
 800d774:	60fb      	str	r3, [r7, #12]
 800d776:	2300      	movs	r3, #0
 800d778:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800d77a:	2300      	movs	r3, #0
 800d77c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d77e:	4b63      	ldr	r3, [pc, #396]	; (800d90c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d780:	689b      	ldr	r3, [r3, #8]
 800d782:	f003 030c 	and.w	r3, r3, #12
 800d786:	2b04      	cmp	r3, #4
 800d788:	d007      	beq.n	800d79a <HAL_RCC_GetSysClockFreq+0x32>
 800d78a:	2b08      	cmp	r3, #8
 800d78c:	d008      	beq.n	800d7a0 <HAL_RCC_GetSysClockFreq+0x38>
 800d78e:	2b00      	cmp	r3, #0
 800d790:	f040 80b4 	bne.w	800d8fc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800d794:	4b5e      	ldr	r3, [pc, #376]	; (800d910 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800d796:	60bb      	str	r3, [r7, #8]
       break;
 800d798:	e0b3      	b.n	800d902 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800d79a:	4b5e      	ldr	r3, [pc, #376]	; (800d914 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800d79c:	60bb      	str	r3, [r7, #8]
      break;
 800d79e:	e0b0      	b.n	800d902 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d7a0:	4b5a      	ldr	r3, [pc, #360]	; (800d90c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d7a2:	685b      	ldr	r3, [r3, #4]
 800d7a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d7a8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800d7aa:	4b58      	ldr	r3, [pc, #352]	; (800d90c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d7ac:	685b      	ldr	r3, [r3, #4]
 800d7ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d04a      	beq.n	800d84c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d7b6:	4b55      	ldr	r3, [pc, #340]	; (800d90c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d7b8:	685b      	ldr	r3, [r3, #4]
 800d7ba:	099b      	lsrs	r3, r3, #6
 800d7bc:	f04f 0400 	mov.w	r4, #0
 800d7c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 800d7c4:	f04f 0200 	mov.w	r2, #0
 800d7c8:	ea03 0501 	and.w	r5, r3, r1
 800d7cc:	ea04 0602 	and.w	r6, r4, r2
 800d7d0:	4629      	mov	r1, r5
 800d7d2:	4632      	mov	r2, r6
 800d7d4:	f04f 0300 	mov.w	r3, #0
 800d7d8:	f04f 0400 	mov.w	r4, #0
 800d7dc:	0154      	lsls	r4, r2, #5
 800d7de:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800d7e2:	014b      	lsls	r3, r1, #5
 800d7e4:	4619      	mov	r1, r3
 800d7e6:	4622      	mov	r2, r4
 800d7e8:	1b49      	subs	r1, r1, r5
 800d7ea:	eb62 0206 	sbc.w	r2, r2, r6
 800d7ee:	f04f 0300 	mov.w	r3, #0
 800d7f2:	f04f 0400 	mov.w	r4, #0
 800d7f6:	0194      	lsls	r4, r2, #6
 800d7f8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800d7fc:	018b      	lsls	r3, r1, #6
 800d7fe:	1a5b      	subs	r3, r3, r1
 800d800:	eb64 0402 	sbc.w	r4, r4, r2
 800d804:	f04f 0100 	mov.w	r1, #0
 800d808:	f04f 0200 	mov.w	r2, #0
 800d80c:	00e2      	lsls	r2, r4, #3
 800d80e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800d812:	00d9      	lsls	r1, r3, #3
 800d814:	460b      	mov	r3, r1
 800d816:	4614      	mov	r4, r2
 800d818:	195b      	adds	r3, r3, r5
 800d81a:	eb44 0406 	adc.w	r4, r4, r6
 800d81e:	f04f 0100 	mov.w	r1, #0
 800d822:	f04f 0200 	mov.w	r2, #0
 800d826:	0262      	lsls	r2, r4, #9
 800d828:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800d82c:	0259      	lsls	r1, r3, #9
 800d82e:	460b      	mov	r3, r1
 800d830:	4614      	mov	r4, r2
 800d832:	4618      	mov	r0, r3
 800d834:	4621      	mov	r1, r4
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	f04f 0400 	mov.w	r4, #0
 800d83c:	461a      	mov	r2, r3
 800d83e:	4623      	mov	r3, r4
 800d840:	f7f3 fa22 	bl	8000c88 <__aeabi_uldivmod>
 800d844:	4603      	mov	r3, r0
 800d846:	460c      	mov	r4, r1
 800d848:	60fb      	str	r3, [r7, #12]
 800d84a:	e049      	b.n	800d8e0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d84c:	4b2f      	ldr	r3, [pc, #188]	; (800d90c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d84e:	685b      	ldr	r3, [r3, #4]
 800d850:	099b      	lsrs	r3, r3, #6
 800d852:	f04f 0400 	mov.w	r4, #0
 800d856:	f240 11ff 	movw	r1, #511	; 0x1ff
 800d85a:	f04f 0200 	mov.w	r2, #0
 800d85e:	ea03 0501 	and.w	r5, r3, r1
 800d862:	ea04 0602 	and.w	r6, r4, r2
 800d866:	4629      	mov	r1, r5
 800d868:	4632      	mov	r2, r6
 800d86a:	f04f 0300 	mov.w	r3, #0
 800d86e:	f04f 0400 	mov.w	r4, #0
 800d872:	0154      	lsls	r4, r2, #5
 800d874:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800d878:	014b      	lsls	r3, r1, #5
 800d87a:	4619      	mov	r1, r3
 800d87c:	4622      	mov	r2, r4
 800d87e:	1b49      	subs	r1, r1, r5
 800d880:	eb62 0206 	sbc.w	r2, r2, r6
 800d884:	f04f 0300 	mov.w	r3, #0
 800d888:	f04f 0400 	mov.w	r4, #0
 800d88c:	0194      	lsls	r4, r2, #6
 800d88e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800d892:	018b      	lsls	r3, r1, #6
 800d894:	1a5b      	subs	r3, r3, r1
 800d896:	eb64 0402 	sbc.w	r4, r4, r2
 800d89a:	f04f 0100 	mov.w	r1, #0
 800d89e:	f04f 0200 	mov.w	r2, #0
 800d8a2:	00e2      	lsls	r2, r4, #3
 800d8a4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800d8a8:	00d9      	lsls	r1, r3, #3
 800d8aa:	460b      	mov	r3, r1
 800d8ac:	4614      	mov	r4, r2
 800d8ae:	195b      	adds	r3, r3, r5
 800d8b0:	eb44 0406 	adc.w	r4, r4, r6
 800d8b4:	f04f 0100 	mov.w	r1, #0
 800d8b8:	f04f 0200 	mov.w	r2, #0
 800d8bc:	02a2      	lsls	r2, r4, #10
 800d8be:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800d8c2:	0299      	lsls	r1, r3, #10
 800d8c4:	460b      	mov	r3, r1
 800d8c6:	4614      	mov	r4, r2
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	4621      	mov	r1, r4
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	f04f 0400 	mov.w	r4, #0
 800d8d2:	461a      	mov	r2, r3
 800d8d4:	4623      	mov	r3, r4
 800d8d6:	f7f3 f9d7 	bl	8000c88 <__aeabi_uldivmod>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	460c      	mov	r4, r1
 800d8de:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800d8e0:	4b0a      	ldr	r3, [pc, #40]	; (800d90c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800d8e2:	685b      	ldr	r3, [r3, #4]
 800d8e4:	0c1b      	lsrs	r3, r3, #16
 800d8e6:	f003 0303 	and.w	r3, r3, #3
 800d8ea:	3301      	adds	r3, #1
 800d8ec:	005b      	lsls	r3, r3, #1
 800d8ee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800d8f0:	68fa      	ldr	r2, [r7, #12]
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8f8:	60bb      	str	r3, [r7, #8]
      break;
 800d8fa:	e002      	b.n	800d902 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800d8fc:	4b04      	ldr	r3, [pc, #16]	; (800d910 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800d8fe:	60bb      	str	r3, [r7, #8]
      break;
 800d900:	bf00      	nop
    }
  }
  return sysclockfreq;
 800d902:	68bb      	ldr	r3, [r7, #8]
}
 800d904:	4618      	mov	r0, r3
 800d906:	3714      	adds	r7, #20
 800d908:	46bd      	mov	sp, r7
 800d90a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d90c:	40023800 	.word	0x40023800
 800d910:	00f42400 	.word	0x00f42400
 800d914:	007a1200 	.word	0x007a1200

0800d918 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d918:	b480      	push	{r7}
 800d91a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d91c:	4b03      	ldr	r3, [pc, #12]	; (800d92c <HAL_RCC_GetHCLKFreq+0x14>)
 800d91e:	681b      	ldr	r3, [r3, #0]
}
 800d920:	4618      	mov	r0, r3
 800d922:	46bd      	mov	sp, r7
 800d924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d928:	4770      	bx	lr
 800d92a:	bf00      	nop
 800d92c:	20000c8c 	.word	0x20000c8c

0800d930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d930:	b580      	push	{r7, lr}
 800d932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800d934:	f7ff fff0 	bl	800d918 <HAL_RCC_GetHCLKFreq>
 800d938:	4601      	mov	r1, r0
 800d93a:	4b05      	ldr	r3, [pc, #20]	; (800d950 <HAL_RCC_GetPCLK1Freq+0x20>)
 800d93c:	689b      	ldr	r3, [r3, #8]
 800d93e:	0a9b      	lsrs	r3, r3, #10
 800d940:	f003 0307 	and.w	r3, r3, #7
 800d944:	4a03      	ldr	r2, [pc, #12]	; (800d954 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d946:	5cd3      	ldrb	r3, [r2, r3]
 800d948:	fa21 f303 	lsr.w	r3, r1, r3
}
 800d94c:	4618      	mov	r0, r3
 800d94e:	bd80      	pop	{r7, pc}
 800d950:	40023800 	.word	0x40023800
 800d954:	0801b2f4 	.word	0x0801b2f4

0800d958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800d95c:	f7ff ffdc 	bl	800d918 <HAL_RCC_GetHCLKFreq>
 800d960:	4601      	mov	r1, r0
 800d962:	4b05      	ldr	r3, [pc, #20]	; (800d978 <HAL_RCC_GetPCLK2Freq+0x20>)
 800d964:	689b      	ldr	r3, [r3, #8]
 800d966:	0b5b      	lsrs	r3, r3, #13
 800d968:	f003 0307 	and.w	r3, r3, #7
 800d96c:	4a03      	ldr	r2, [pc, #12]	; (800d97c <HAL_RCC_GetPCLK2Freq+0x24>)
 800d96e:	5cd3      	ldrb	r3, [r2, r3]
 800d970:	fa21 f303 	lsr.w	r3, r1, r3
}
 800d974:	4618      	mov	r0, r3
 800d976:	bd80      	pop	{r7, pc}
 800d978:	40023800 	.word	0x40023800
 800d97c:	0801b2f4 	.word	0x0801b2f4

0800d980 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800d980:	b480      	push	{r7}
 800d982:	b083      	sub	sp, #12
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
 800d988:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	220f      	movs	r2, #15
 800d98e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800d990:	4b12      	ldr	r3, [pc, #72]	; (800d9dc <HAL_RCC_GetClockConfig+0x5c>)
 800d992:	689b      	ldr	r3, [r3, #8]
 800d994:	f003 0203 	and.w	r2, r3, #3
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800d99c:	4b0f      	ldr	r3, [pc, #60]	; (800d9dc <HAL_RCC_GetClockConfig+0x5c>)
 800d99e:	689b      	ldr	r3, [r3, #8]
 800d9a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800d9a8:	4b0c      	ldr	r3, [pc, #48]	; (800d9dc <HAL_RCC_GetClockConfig+0x5c>)
 800d9aa:	689b      	ldr	r3, [r3, #8]
 800d9ac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800d9b4:	4b09      	ldr	r3, [pc, #36]	; (800d9dc <HAL_RCC_GetClockConfig+0x5c>)
 800d9b6:	689b      	ldr	r3, [r3, #8]
 800d9b8:	08db      	lsrs	r3, r3, #3
 800d9ba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800d9c2:	4b07      	ldr	r3, [pc, #28]	; (800d9e0 <HAL_RCC_GetClockConfig+0x60>)
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	f003 020f 	and.w	r2, r3, #15
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	601a      	str	r2, [r3, #0]
}
 800d9ce:	bf00      	nop
 800d9d0:	370c      	adds	r7, #12
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d8:	4770      	bx	lr
 800d9da:	bf00      	nop
 800d9dc:	40023800 	.word	0x40023800
 800d9e0:	40023c00 	.word	0x40023c00

0800d9e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b082      	sub	sp, #8
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d101      	bne.n	800d9f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d9f2:	2301      	movs	r3, #1
 800d9f4:	e01d      	b.n	800da32 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d9fc:	b2db      	uxtb	r3, r3
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d106      	bne.n	800da10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2200      	movs	r2, #0
 800da06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800da0a:	6878      	ldr	r0, [r7, #4]
 800da0c:	f7fd f9b8 	bl	800ad80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2202      	movs	r2, #2
 800da14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681a      	ldr	r2, [r3, #0]
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	3304      	adds	r3, #4
 800da20:	4619      	mov	r1, r3
 800da22:	4610      	mov	r0, r2
 800da24:	f000 f95e 	bl	800dce4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2201      	movs	r2, #1
 800da2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800da30:	2300      	movs	r3, #0
}
 800da32:	4618      	mov	r0, r3
 800da34:	3708      	adds	r7, #8
 800da36:	46bd      	mov	sp, r7
 800da38:	bd80      	pop	{r7, pc}

0800da3a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800da3a:	b480      	push	{r7}
 800da3c:	b085      	sub	sp, #20
 800da3e:	af00      	add	r7, sp, #0
 800da40:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	68da      	ldr	r2, [r3, #12]
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	f042 0201 	orr.w	r2, r2, #1
 800da50:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	689b      	ldr	r3, [r3, #8]
 800da58:	f003 0307 	and.w	r3, r3, #7
 800da5c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	2b06      	cmp	r3, #6
 800da62:	d007      	beq.n	800da74 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	681a      	ldr	r2, [r3, #0]
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	f042 0201 	orr.w	r2, r2, #1
 800da72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800da74:	2300      	movs	r3, #0
}
 800da76:	4618      	mov	r0, r3
 800da78:	3714      	adds	r7, #20
 800da7a:	46bd      	mov	sp, r7
 800da7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da80:	4770      	bx	lr

0800da82 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800da82:	b580      	push	{r7, lr}
 800da84:	b082      	sub	sp, #8
 800da86:	af00      	add	r7, sp, #0
 800da88:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	691b      	ldr	r3, [r3, #16]
 800da90:	f003 0302 	and.w	r3, r3, #2
 800da94:	2b02      	cmp	r3, #2
 800da96:	d122      	bne.n	800dade <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	68db      	ldr	r3, [r3, #12]
 800da9e:	f003 0302 	and.w	r3, r3, #2
 800daa2:	2b02      	cmp	r3, #2
 800daa4:	d11b      	bne.n	800dade <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	f06f 0202 	mvn.w	r2, #2
 800daae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	2201      	movs	r2, #1
 800dab4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	699b      	ldr	r3, [r3, #24]
 800dabc:	f003 0303 	and.w	r3, r3, #3
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d003      	beq.n	800dacc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800dac4:	6878      	ldr	r0, [r7, #4]
 800dac6:	f000 f8ee 	bl	800dca6 <HAL_TIM_IC_CaptureCallback>
 800daca:	e005      	b.n	800dad8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800dacc:	6878      	ldr	r0, [r7, #4]
 800dace:	f000 f8e0 	bl	800dc92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dad2:	6878      	ldr	r0, [r7, #4]
 800dad4:	f000 f8f1 	bl	800dcba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	2200      	movs	r2, #0
 800dadc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	691b      	ldr	r3, [r3, #16]
 800dae4:	f003 0304 	and.w	r3, r3, #4
 800dae8:	2b04      	cmp	r3, #4
 800daea:	d122      	bne.n	800db32 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	68db      	ldr	r3, [r3, #12]
 800daf2:	f003 0304 	and.w	r3, r3, #4
 800daf6:	2b04      	cmp	r3, #4
 800daf8:	d11b      	bne.n	800db32 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	f06f 0204 	mvn.w	r2, #4
 800db02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2202      	movs	r2, #2
 800db08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	699b      	ldr	r3, [r3, #24]
 800db10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800db14:	2b00      	cmp	r3, #0
 800db16:	d003      	beq.n	800db20 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800db18:	6878      	ldr	r0, [r7, #4]
 800db1a:	f000 f8c4 	bl	800dca6 <HAL_TIM_IC_CaptureCallback>
 800db1e:	e005      	b.n	800db2c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800db20:	6878      	ldr	r0, [r7, #4]
 800db22:	f000 f8b6 	bl	800dc92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800db26:	6878      	ldr	r0, [r7, #4]
 800db28:	f000 f8c7 	bl	800dcba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2200      	movs	r2, #0
 800db30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	691b      	ldr	r3, [r3, #16]
 800db38:	f003 0308 	and.w	r3, r3, #8
 800db3c:	2b08      	cmp	r3, #8
 800db3e:	d122      	bne.n	800db86 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	68db      	ldr	r3, [r3, #12]
 800db46:	f003 0308 	and.w	r3, r3, #8
 800db4a:	2b08      	cmp	r3, #8
 800db4c:	d11b      	bne.n	800db86 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	f06f 0208 	mvn.w	r2, #8
 800db56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	2204      	movs	r2, #4
 800db5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	69db      	ldr	r3, [r3, #28]
 800db64:	f003 0303 	and.w	r3, r3, #3
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d003      	beq.n	800db74 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800db6c:	6878      	ldr	r0, [r7, #4]
 800db6e:	f000 f89a 	bl	800dca6 <HAL_TIM_IC_CaptureCallback>
 800db72:	e005      	b.n	800db80 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800db74:	6878      	ldr	r0, [r7, #4]
 800db76:	f000 f88c 	bl	800dc92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800db7a:	6878      	ldr	r0, [r7, #4]
 800db7c:	f000 f89d 	bl	800dcba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	2200      	movs	r2, #0
 800db84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	691b      	ldr	r3, [r3, #16]
 800db8c:	f003 0310 	and.w	r3, r3, #16
 800db90:	2b10      	cmp	r3, #16
 800db92:	d122      	bne.n	800dbda <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	68db      	ldr	r3, [r3, #12]
 800db9a:	f003 0310 	and.w	r3, r3, #16
 800db9e:	2b10      	cmp	r3, #16
 800dba0:	d11b      	bne.n	800dbda <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	f06f 0210 	mvn.w	r2, #16
 800dbaa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	2208      	movs	r2, #8
 800dbb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	69db      	ldr	r3, [r3, #28]
 800dbb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d003      	beq.n	800dbc8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dbc0:	6878      	ldr	r0, [r7, #4]
 800dbc2:	f000 f870 	bl	800dca6 <HAL_TIM_IC_CaptureCallback>
 800dbc6:	e005      	b.n	800dbd4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dbc8:	6878      	ldr	r0, [r7, #4]
 800dbca:	f000 f862 	bl	800dc92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	f000 f873 	bl	800dcba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	691b      	ldr	r3, [r3, #16]
 800dbe0:	f003 0301 	and.w	r3, r3, #1
 800dbe4:	2b01      	cmp	r3, #1
 800dbe6:	d10e      	bne.n	800dc06 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	68db      	ldr	r3, [r3, #12]
 800dbee:	f003 0301 	and.w	r3, r3, #1
 800dbf2:	2b01      	cmp	r3, #1
 800dbf4:	d107      	bne.n	800dc06 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	f06f 0201 	mvn.w	r2, #1
 800dbfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800dc00:	6878      	ldr	r0, [r7, #4]
 800dc02:	f7f5 fda3 	bl	800374c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	691b      	ldr	r3, [r3, #16]
 800dc0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc10:	2b80      	cmp	r3, #128	; 0x80
 800dc12:	d10e      	bne.n	800dc32 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	68db      	ldr	r3, [r3, #12]
 800dc1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc1e:	2b80      	cmp	r3, #128	; 0x80
 800dc20:	d107      	bne.n	800dc32 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800dc2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dc2c:	6878      	ldr	r0, [r7, #4]
 800dc2e:	f000 f97f 	bl	800df30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	691b      	ldr	r3, [r3, #16]
 800dc38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc3c:	2b40      	cmp	r3, #64	; 0x40
 800dc3e:	d10e      	bne.n	800dc5e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	68db      	ldr	r3, [r3, #12]
 800dc46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc4a:	2b40      	cmp	r3, #64	; 0x40
 800dc4c:	d107      	bne.n	800dc5e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800dc56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800dc58:	6878      	ldr	r0, [r7, #4]
 800dc5a:	f000 f838 	bl	800dcce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	691b      	ldr	r3, [r3, #16]
 800dc64:	f003 0320 	and.w	r3, r3, #32
 800dc68:	2b20      	cmp	r3, #32
 800dc6a:	d10e      	bne.n	800dc8a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	68db      	ldr	r3, [r3, #12]
 800dc72:	f003 0320 	and.w	r3, r3, #32
 800dc76:	2b20      	cmp	r3, #32
 800dc78:	d107      	bne.n	800dc8a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	f06f 0220 	mvn.w	r2, #32
 800dc82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dc84:	6878      	ldr	r0, [r7, #4]
 800dc86:	f000 f949 	bl	800df1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dc8a:	bf00      	nop
 800dc8c:	3708      	adds	r7, #8
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	bd80      	pop	{r7, pc}

0800dc92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dc92:	b480      	push	{r7}
 800dc94:	b083      	sub	sp, #12
 800dc96:	af00      	add	r7, sp, #0
 800dc98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800dc9a:	bf00      	nop
 800dc9c:	370c      	adds	r7, #12
 800dc9e:	46bd      	mov	sp, r7
 800dca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca4:	4770      	bx	lr

0800dca6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dca6:	b480      	push	{r7}
 800dca8:	b083      	sub	sp, #12
 800dcaa:	af00      	add	r7, sp, #0
 800dcac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800dcae:	bf00      	nop
 800dcb0:	370c      	adds	r7, #12
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb8:	4770      	bx	lr

0800dcba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800dcba:	b480      	push	{r7}
 800dcbc:	b083      	sub	sp, #12
 800dcbe:	af00      	add	r7, sp, #0
 800dcc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800dcc2:	bf00      	nop
 800dcc4:	370c      	adds	r7, #12
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dccc:	4770      	bx	lr

0800dcce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800dcce:	b480      	push	{r7}
 800dcd0:	b083      	sub	sp, #12
 800dcd2:	af00      	add	r7, sp, #0
 800dcd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dcd6:	bf00      	nop
 800dcd8:	370c      	adds	r7, #12
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce0:	4770      	bx	lr
	...

0800dce4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800dce4:	b480      	push	{r7}
 800dce6:	b085      	sub	sp, #20
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
 800dcec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	4a40      	ldr	r2, [pc, #256]	; (800ddf8 <TIM_Base_SetConfig+0x114>)
 800dcf8:	4293      	cmp	r3, r2
 800dcfa:	d013      	beq.n	800dd24 <TIM_Base_SetConfig+0x40>
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd02:	d00f      	beq.n	800dd24 <TIM_Base_SetConfig+0x40>
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	4a3d      	ldr	r2, [pc, #244]	; (800ddfc <TIM_Base_SetConfig+0x118>)
 800dd08:	4293      	cmp	r3, r2
 800dd0a:	d00b      	beq.n	800dd24 <TIM_Base_SetConfig+0x40>
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	4a3c      	ldr	r2, [pc, #240]	; (800de00 <TIM_Base_SetConfig+0x11c>)
 800dd10:	4293      	cmp	r3, r2
 800dd12:	d007      	beq.n	800dd24 <TIM_Base_SetConfig+0x40>
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	4a3b      	ldr	r2, [pc, #236]	; (800de04 <TIM_Base_SetConfig+0x120>)
 800dd18:	4293      	cmp	r3, r2
 800dd1a:	d003      	beq.n	800dd24 <TIM_Base_SetConfig+0x40>
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	4a3a      	ldr	r2, [pc, #232]	; (800de08 <TIM_Base_SetConfig+0x124>)
 800dd20:	4293      	cmp	r3, r2
 800dd22:	d108      	bne.n	800dd36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dd2c:	683b      	ldr	r3, [r7, #0]
 800dd2e:	685b      	ldr	r3, [r3, #4]
 800dd30:	68fa      	ldr	r2, [r7, #12]
 800dd32:	4313      	orrs	r3, r2
 800dd34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	4a2f      	ldr	r2, [pc, #188]	; (800ddf8 <TIM_Base_SetConfig+0x114>)
 800dd3a:	4293      	cmp	r3, r2
 800dd3c:	d02b      	beq.n	800dd96 <TIM_Base_SetConfig+0xb2>
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd44:	d027      	beq.n	800dd96 <TIM_Base_SetConfig+0xb2>
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	4a2c      	ldr	r2, [pc, #176]	; (800ddfc <TIM_Base_SetConfig+0x118>)
 800dd4a:	4293      	cmp	r3, r2
 800dd4c:	d023      	beq.n	800dd96 <TIM_Base_SetConfig+0xb2>
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	4a2b      	ldr	r2, [pc, #172]	; (800de00 <TIM_Base_SetConfig+0x11c>)
 800dd52:	4293      	cmp	r3, r2
 800dd54:	d01f      	beq.n	800dd96 <TIM_Base_SetConfig+0xb2>
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	4a2a      	ldr	r2, [pc, #168]	; (800de04 <TIM_Base_SetConfig+0x120>)
 800dd5a:	4293      	cmp	r3, r2
 800dd5c:	d01b      	beq.n	800dd96 <TIM_Base_SetConfig+0xb2>
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	4a29      	ldr	r2, [pc, #164]	; (800de08 <TIM_Base_SetConfig+0x124>)
 800dd62:	4293      	cmp	r3, r2
 800dd64:	d017      	beq.n	800dd96 <TIM_Base_SetConfig+0xb2>
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	4a28      	ldr	r2, [pc, #160]	; (800de0c <TIM_Base_SetConfig+0x128>)
 800dd6a:	4293      	cmp	r3, r2
 800dd6c:	d013      	beq.n	800dd96 <TIM_Base_SetConfig+0xb2>
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	4a27      	ldr	r2, [pc, #156]	; (800de10 <TIM_Base_SetConfig+0x12c>)
 800dd72:	4293      	cmp	r3, r2
 800dd74:	d00f      	beq.n	800dd96 <TIM_Base_SetConfig+0xb2>
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	4a26      	ldr	r2, [pc, #152]	; (800de14 <TIM_Base_SetConfig+0x130>)
 800dd7a:	4293      	cmp	r3, r2
 800dd7c:	d00b      	beq.n	800dd96 <TIM_Base_SetConfig+0xb2>
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	4a25      	ldr	r2, [pc, #148]	; (800de18 <TIM_Base_SetConfig+0x134>)
 800dd82:	4293      	cmp	r3, r2
 800dd84:	d007      	beq.n	800dd96 <TIM_Base_SetConfig+0xb2>
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	4a24      	ldr	r2, [pc, #144]	; (800de1c <TIM_Base_SetConfig+0x138>)
 800dd8a:	4293      	cmp	r3, r2
 800dd8c:	d003      	beq.n	800dd96 <TIM_Base_SetConfig+0xb2>
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	4a23      	ldr	r2, [pc, #140]	; (800de20 <TIM_Base_SetConfig+0x13c>)
 800dd92:	4293      	cmp	r3, r2
 800dd94:	d108      	bne.n	800dda8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dd9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dd9e:	683b      	ldr	r3, [r7, #0]
 800dda0:	68db      	ldr	r3, [r3, #12]
 800dda2:	68fa      	ldr	r2, [r7, #12]
 800dda4:	4313      	orrs	r3, r2
 800dda6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ddae:	683b      	ldr	r3, [r7, #0]
 800ddb0:	695b      	ldr	r3, [r3, #20]
 800ddb2:	4313      	orrs	r3, r2
 800ddb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	68fa      	ldr	r2, [r7, #12]
 800ddba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ddbc:	683b      	ldr	r3, [r7, #0]
 800ddbe:	689a      	ldr	r2, [r3, #8]
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	681a      	ldr	r2, [r3, #0]
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	4a0a      	ldr	r2, [pc, #40]	; (800ddf8 <TIM_Base_SetConfig+0x114>)
 800ddd0:	4293      	cmp	r3, r2
 800ddd2:	d003      	beq.n	800dddc <TIM_Base_SetConfig+0xf8>
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	4a0c      	ldr	r2, [pc, #48]	; (800de08 <TIM_Base_SetConfig+0x124>)
 800ddd8:	4293      	cmp	r3, r2
 800ddda:	d103      	bne.n	800dde4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dddc:	683b      	ldr	r3, [r7, #0]
 800ddde:	691a      	ldr	r2, [r3, #16]
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2201      	movs	r2, #1
 800dde8:	615a      	str	r2, [r3, #20]
}
 800ddea:	bf00      	nop
 800ddec:	3714      	adds	r7, #20
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf4:	4770      	bx	lr
 800ddf6:	bf00      	nop
 800ddf8:	40010000 	.word	0x40010000
 800ddfc:	40000400 	.word	0x40000400
 800de00:	40000800 	.word	0x40000800
 800de04:	40000c00 	.word	0x40000c00
 800de08:	40010400 	.word	0x40010400
 800de0c:	40014000 	.word	0x40014000
 800de10:	40014400 	.word	0x40014400
 800de14:	40014800 	.word	0x40014800
 800de18:	40001800 	.word	0x40001800
 800de1c:	40001c00 	.word	0x40001c00
 800de20:	40002000 	.word	0x40002000

0800de24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800de24:	b480      	push	{r7}
 800de26:	b085      	sub	sp, #20
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
 800de2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800de34:	2b01      	cmp	r3, #1
 800de36:	d101      	bne.n	800de3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800de38:	2302      	movs	r3, #2
 800de3a:	e05a      	b.n	800def2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2201      	movs	r2, #1
 800de40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	2202      	movs	r2, #2
 800de48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	685b      	ldr	r3, [r3, #4]
 800de52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	689b      	ldr	r3, [r3, #8]
 800de5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800de62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	68fa      	ldr	r2, [r7, #12]
 800de6a:	4313      	orrs	r3, r2
 800de6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	68fa      	ldr	r2, [r7, #12]
 800de74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	4a21      	ldr	r2, [pc, #132]	; (800df00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800de7c:	4293      	cmp	r3, r2
 800de7e:	d022      	beq.n	800dec6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de88:	d01d      	beq.n	800dec6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	4a1d      	ldr	r2, [pc, #116]	; (800df04 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800de90:	4293      	cmp	r3, r2
 800de92:	d018      	beq.n	800dec6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	4a1b      	ldr	r2, [pc, #108]	; (800df08 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800de9a:	4293      	cmp	r3, r2
 800de9c:	d013      	beq.n	800dec6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	4a1a      	ldr	r2, [pc, #104]	; (800df0c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800dea4:	4293      	cmp	r3, r2
 800dea6:	d00e      	beq.n	800dec6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	4a18      	ldr	r2, [pc, #96]	; (800df10 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800deae:	4293      	cmp	r3, r2
 800deb0:	d009      	beq.n	800dec6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	4a17      	ldr	r2, [pc, #92]	; (800df14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800deb8:	4293      	cmp	r3, r2
 800deba:	d004      	beq.n	800dec6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	4a15      	ldr	r2, [pc, #84]	; (800df18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800dec2:	4293      	cmp	r3, r2
 800dec4:	d10c      	bne.n	800dee0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dec6:	68bb      	ldr	r3, [r7, #8]
 800dec8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800decc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dece:	683b      	ldr	r3, [r7, #0]
 800ded0:	685b      	ldr	r3, [r3, #4]
 800ded2:	68ba      	ldr	r2, [r7, #8]
 800ded4:	4313      	orrs	r3, r2
 800ded6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	68ba      	ldr	r2, [r7, #8]
 800dede:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	2201      	movs	r2, #1
 800dee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	2200      	movs	r2, #0
 800deec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800def0:	2300      	movs	r3, #0
}
 800def2:	4618      	mov	r0, r3
 800def4:	3714      	adds	r7, #20
 800def6:	46bd      	mov	sp, r7
 800def8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defc:	4770      	bx	lr
 800defe:	bf00      	nop
 800df00:	40010000 	.word	0x40010000
 800df04:	40000400 	.word	0x40000400
 800df08:	40000800 	.word	0x40000800
 800df0c:	40000c00 	.word	0x40000c00
 800df10:	40010400 	.word	0x40010400
 800df14:	40014000 	.word	0x40014000
 800df18:	40001800 	.word	0x40001800

0800df1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800df1c:	b480      	push	{r7}
 800df1e:	b083      	sub	sp, #12
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800df24:	bf00      	nop
 800df26:	370c      	adds	r7, #12
 800df28:	46bd      	mov	sp, r7
 800df2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2e:	4770      	bx	lr

0800df30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800df30:	b480      	push	{r7}
 800df32:	b083      	sub	sp, #12
 800df34:	af00      	add	r7, sp, #0
 800df36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800df38:	bf00      	nop
 800df3a:	370c      	adds	r7, #12
 800df3c:	46bd      	mov	sp, r7
 800df3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df42:	4770      	bx	lr

0800df44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b082      	sub	sp, #8
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d101      	bne.n	800df56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800df52:	2301      	movs	r3, #1
 800df54:	e03f      	b.n	800dfd6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800df5c:	b2db      	uxtb	r3, r3
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d106      	bne.n	800df70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	2200      	movs	r2, #0
 800df66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800df6a:	6878      	ldr	r0, [r7, #4]
 800df6c:	f7fc ff5a 	bl	800ae24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	2224      	movs	r2, #36	; 0x24
 800df74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	68da      	ldr	r2, [r3, #12]
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800df86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800df88:	6878      	ldr	r0, [r7, #4]
 800df8a:	f000 fb6b 	bl	800e664 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	691a      	ldr	r2, [r3, #16]
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800df9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	695a      	ldr	r2, [r3, #20]
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800dfac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	68da      	ldr	r2, [r3, #12]
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800dfbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	2220      	movs	r2, #32
 800dfc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	2220      	movs	r2, #32
 800dfd0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800dfd4:	2300      	movs	r3, #0
}
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	3708      	adds	r7, #8
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	bd80      	pop	{r7, pc}
	...

0800dfe0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b086      	sub	sp, #24
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	60f8      	str	r0, [r7, #12]
 800dfe8:	60b9      	str	r1, [r7, #8]
 800dfea:	4613      	mov	r3, r2
 800dfec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800dff4:	b2db      	uxtb	r3, r3
 800dff6:	2b20      	cmp	r3, #32
 800dff8:	d153      	bne.n	800e0a2 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800dffa:	68bb      	ldr	r3, [r7, #8]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d002      	beq.n	800e006 <HAL_UART_Transmit_DMA+0x26>
 800e000:	88fb      	ldrh	r3, [r7, #6]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d101      	bne.n	800e00a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800e006:	2301      	movs	r3, #1
 800e008:	e04c      	b.n	800e0a4 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e010:	2b01      	cmp	r3, #1
 800e012:	d101      	bne.n	800e018 <HAL_UART_Transmit_DMA+0x38>
 800e014:	2302      	movs	r3, #2
 800e016:	e045      	b.n	800e0a4 <HAL_UART_Transmit_DMA+0xc4>
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	2201      	movs	r2, #1
 800e01c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800e020:	68ba      	ldr	r2, [r7, #8]
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	88fa      	ldrh	r2, [r7, #6]
 800e02a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	88fa      	ldrh	r2, [r7, #6]
 800e030:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	2200      	movs	r2, #0
 800e036:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	2221      	movs	r2, #33	; 0x21
 800e03c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e044:	4a19      	ldr	r2, [pc, #100]	; (800e0ac <HAL_UART_Transmit_DMA+0xcc>)
 800e046:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e04c:	4a18      	ldr	r2, [pc, #96]	; (800e0b0 <HAL_UART_Transmit_DMA+0xd0>)
 800e04e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e054:	4a17      	ldr	r2, [pc, #92]	; (800e0b4 <HAL_UART_Transmit_DMA+0xd4>)
 800e056:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e05c:	2200      	movs	r2, #0
 800e05e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800e060:	f107 0308 	add.w	r3, r7, #8
 800e064:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e06a:	697b      	ldr	r3, [r7, #20]
 800e06c:	6819      	ldr	r1, [r3, #0]
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	3304      	adds	r3, #4
 800e074:	461a      	mov	r2, r3
 800e076:	88fb      	ldrh	r3, [r7, #6]
 800e078:	f7fd f99c 	bl	800b3b4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e084:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	2200      	movs	r2, #0
 800e08a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	695a      	ldr	r2, [r3, #20]
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e09c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800e09e:	2300      	movs	r3, #0
 800e0a0:	e000      	b.n	800e0a4 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800e0a2:	2302      	movs	r3, #2
  }
}
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	3718      	adds	r7, #24
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	bd80      	pop	{r7, pc}
 800e0ac:	0800e2f5 	.word	0x0800e2f5
 800e0b0:	0800e347 	.word	0x0800e347
 800e0b4:	0800e363 	.word	0x0800e363

0800e0b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b088      	sub	sp, #32
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	68db      	ldr	r3, [r3, #12]
 800e0ce:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	695b      	ldr	r3, [r3, #20]
 800e0d6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800e0d8:	2300      	movs	r3, #0
 800e0da:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800e0dc:	2300      	movs	r3, #0
 800e0de:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800e0e0:	69fb      	ldr	r3, [r7, #28]
 800e0e2:	f003 030f 	and.w	r3, r3, #15
 800e0e6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800e0e8:	693b      	ldr	r3, [r7, #16]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d10d      	bne.n	800e10a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e0ee:	69fb      	ldr	r3, [r7, #28]
 800e0f0:	f003 0320 	and.w	r3, r3, #32
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d008      	beq.n	800e10a <HAL_UART_IRQHandler+0x52>
 800e0f8:	69bb      	ldr	r3, [r7, #24]
 800e0fa:	f003 0320 	and.w	r3, r3, #32
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d003      	beq.n	800e10a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800e102:	6878      	ldr	r0, [r7, #4]
 800e104:	f000 fa2d 	bl	800e562 <UART_Receive_IT>
      return;
 800e108:	e0d1      	b.n	800e2ae <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800e10a:	693b      	ldr	r3, [r7, #16]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	f000 80b0 	beq.w	800e272 <HAL_UART_IRQHandler+0x1ba>
 800e112:	697b      	ldr	r3, [r7, #20]
 800e114:	f003 0301 	and.w	r3, r3, #1
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d105      	bne.n	800e128 <HAL_UART_IRQHandler+0x70>
 800e11c:	69bb      	ldr	r3, [r7, #24]
 800e11e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800e122:	2b00      	cmp	r3, #0
 800e124:	f000 80a5 	beq.w	800e272 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800e128:	69fb      	ldr	r3, [r7, #28]
 800e12a:	f003 0301 	and.w	r3, r3, #1
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d00a      	beq.n	800e148 <HAL_UART_IRQHandler+0x90>
 800e132:	69bb      	ldr	r3, [r7, #24]
 800e134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d005      	beq.n	800e148 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e140:	f043 0201 	orr.w	r2, r3, #1
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e148:	69fb      	ldr	r3, [r7, #28]
 800e14a:	f003 0304 	and.w	r3, r3, #4
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d00a      	beq.n	800e168 <HAL_UART_IRQHandler+0xb0>
 800e152:	697b      	ldr	r3, [r7, #20]
 800e154:	f003 0301 	and.w	r3, r3, #1
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d005      	beq.n	800e168 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e160:	f043 0202 	orr.w	r2, r3, #2
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e168:	69fb      	ldr	r3, [r7, #28]
 800e16a:	f003 0302 	and.w	r3, r3, #2
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d00a      	beq.n	800e188 <HAL_UART_IRQHandler+0xd0>
 800e172:	697b      	ldr	r3, [r7, #20]
 800e174:	f003 0301 	and.w	r3, r3, #1
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d005      	beq.n	800e188 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e180:	f043 0204 	orr.w	r2, r3, #4
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800e188:	69fb      	ldr	r3, [r7, #28]
 800e18a:	f003 0308 	and.w	r3, r3, #8
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d00f      	beq.n	800e1b2 <HAL_UART_IRQHandler+0xfa>
 800e192:	69bb      	ldr	r3, [r7, #24]
 800e194:	f003 0320 	and.w	r3, r3, #32
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d104      	bne.n	800e1a6 <HAL_UART_IRQHandler+0xee>
 800e19c:	697b      	ldr	r3, [r7, #20]
 800e19e:	f003 0301 	and.w	r3, r3, #1
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d005      	beq.n	800e1b2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1aa:	f043 0208 	orr.w	r2, r3, #8
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d078      	beq.n	800e2ac <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e1ba:	69fb      	ldr	r3, [r7, #28]
 800e1bc:	f003 0320 	and.w	r3, r3, #32
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d007      	beq.n	800e1d4 <HAL_UART_IRQHandler+0x11c>
 800e1c4:	69bb      	ldr	r3, [r7, #24]
 800e1c6:	f003 0320 	and.w	r3, r3, #32
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d002      	beq.n	800e1d4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800e1ce:	6878      	ldr	r0, [r7, #4]
 800e1d0:	f000 f9c7 	bl	800e562 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	695b      	ldr	r3, [r3, #20]
 800e1da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1de:	2b40      	cmp	r3, #64	; 0x40
 800e1e0:	bf0c      	ite	eq
 800e1e2:	2301      	moveq	r3, #1
 800e1e4:	2300      	movne	r3, #0
 800e1e6:	b2db      	uxtb	r3, r3
 800e1e8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1ee:	f003 0308 	and.w	r3, r3, #8
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d102      	bne.n	800e1fc <HAL_UART_IRQHandler+0x144>
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d031      	beq.n	800e260 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e1fc:	6878      	ldr	r0, [r7, #4]
 800e1fe:	f000 f910 	bl	800e422 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	695b      	ldr	r3, [r3, #20]
 800e208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e20c:	2b40      	cmp	r3, #64	; 0x40
 800e20e:	d123      	bne.n	800e258 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	695a      	ldr	r2, [r3, #20]
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e21e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e224:	2b00      	cmp	r3, #0
 800e226:	d013      	beq.n	800e250 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e22c:	4a21      	ldr	r2, [pc, #132]	; (800e2b4 <HAL_UART_IRQHandler+0x1fc>)
 800e22e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e234:	4618      	mov	r0, r3
 800e236:	f7fd f915 	bl	800b464 <HAL_DMA_Abort_IT>
 800e23a:	4603      	mov	r3, r0
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d016      	beq.n	800e26e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e246:	687a      	ldr	r2, [r7, #4]
 800e248:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e24a:	4610      	mov	r0, r2
 800e24c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e24e:	e00e      	b.n	800e26e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e250:	6878      	ldr	r0, [r7, #4]
 800e252:	f000 f845 	bl	800e2e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e256:	e00a      	b.n	800e26e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e258:	6878      	ldr	r0, [r7, #4]
 800e25a:	f000 f841 	bl	800e2e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e25e:	e006      	b.n	800e26e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e260:	6878      	ldr	r0, [r7, #4]
 800e262:	f000 f83d 	bl	800e2e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	2200      	movs	r2, #0
 800e26a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800e26c:	e01e      	b.n	800e2ac <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e26e:	bf00      	nop
    return;
 800e270:	e01c      	b.n	800e2ac <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800e272:	69fb      	ldr	r3, [r7, #28]
 800e274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d008      	beq.n	800e28e <HAL_UART_IRQHandler+0x1d6>
 800e27c:	69bb      	ldr	r3, [r7, #24]
 800e27e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e282:	2b00      	cmp	r3, #0
 800e284:	d003      	beq.n	800e28e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800e286:	6878      	ldr	r0, [r7, #4]
 800e288:	f000 f8fd 	bl	800e486 <UART_Transmit_IT>
    return;
 800e28c:	e00f      	b.n	800e2ae <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800e28e:	69fb      	ldr	r3, [r7, #28]
 800e290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e294:	2b00      	cmp	r3, #0
 800e296:	d00a      	beq.n	800e2ae <HAL_UART_IRQHandler+0x1f6>
 800e298:	69bb      	ldr	r3, [r7, #24]
 800e29a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d005      	beq.n	800e2ae <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800e2a2:	6878      	ldr	r0, [r7, #4]
 800e2a4:	f000 f945 	bl	800e532 <UART_EndTransmit_IT>
    return;
 800e2a8:	bf00      	nop
 800e2aa:	e000      	b.n	800e2ae <HAL_UART_IRQHandler+0x1f6>
    return;
 800e2ac:	bf00      	nop
  }
}
 800e2ae:	3720      	adds	r7, #32
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd80      	pop	{r7, pc}
 800e2b4:	0800e45f 	.word	0x0800e45f

0800e2b8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e2b8:	b480      	push	{r7}
 800e2ba:	b083      	sub	sp, #12
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800e2c0:	bf00      	nop
 800e2c2:	370c      	adds	r7, #12
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ca:	4770      	bx	lr

0800e2cc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e2cc:	b480      	push	{r7}
 800e2ce:	b083      	sub	sp, #12
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800e2d4:	bf00      	nop
 800e2d6:	370c      	adds	r7, #12
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2de:	4770      	bx	lr

0800e2e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e2e0:	b480      	push	{r7}
 800e2e2:	b083      	sub	sp, #12
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800e2e8:	bf00      	nop
 800e2ea:	370c      	adds	r7, #12
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f2:	4770      	bx	lr

0800e2f4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b084      	sub	sp, #16
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e300:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d113      	bne.n	800e338 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	2200      	movs	r2, #0
 800e314:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	695a      	ldr	r2, [r3, #20]
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e324:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	68da      	ldr	r2, [r3, #12]
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e334:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e336:	e002      	b.n	800e33e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800e338:	68f8      	ldr	r0, [r7, #12]
 800e33a:	f7fc fdf5 	bl	800af28 <HAL_UART_TxCpltCallback>
}
 800e33e:	bf00      	nop
 800e340:	3710      	adds	r7, #16
 800e342:	46bd      	mov	sp, r7
 800e344:	bd80      	pop	{r7, pc}

0800e346 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e346:	b580      	push	{r7, lr}
 800e348:	b084      	sub	sp, #16
 800e34a:	af00      	add	r7, sp, #0
 800e34c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e352:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e354:	68f8      	ldr	r0, [r7, #12]
 800e356:	f7ff ffaf 	bl	800e2b8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e35a:	bf00      	nop
 800e35c:	3710      	adds	r7, #16
 800e35e:	46bd      	mov	sp, r7
 800e360:	bd80      	pop	{r7, pc}

0800e362 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e362:	b580      	push	{r7, lr}
 800e364:	b084      	sub	sp, #16
 800e366:	af00      	add	r7, sp, #0
 800e368:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800e36a:	2300      	movs	r3, #0
 800e36c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e372:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800e374:	68bb      	ldr	r3, [r7, #8]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	695b      	ldr	r3, [r3, #20]
 800e37a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e37e:	2b80      	cmp	r3, #128	; 0x80
 800e380:	bf0c      	ite	eq
 800e382:	2301      	moveq	r3, #1
 800e384:	2300      	movne	r3, #0
 800e386:	b2db      	uxtb	r3, r3
 800e388:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800e38a:	68bb      	ldr	r3, [r7, #8]
 800e38c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e390:	b2db      	uxtb	r3, r3
 800e392:	2b21      	cmp	r3, #33	; 0x21
 800e394:	d108      	bne.n	800e3a8 <UART_DMAError+0x46>
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d005      	beq.n	800e3a8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800e39c:	68bb      	ldr	r3, [r7, #8]
 800e39e:	2200      	movs	r2, #0
 800e3a0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800e3a2:	68b8      	ldr	r0, [r7, #8]
 800e3a4:	f000 f827 	bl	800e3f6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e3a8:	68bb      	ldr	r3, [r7, #8]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	695b      	ldr	r3, [r3, #20]
 800e3ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3b2:	2b40      	cmp	r3, #64	; 0x40
 800e3b4:	bf0c      	ite	eq
 800e3b6:	2301      	moveq	r3, #1
 800e3b8:	2300      	movne	r3, #0
 800e3ba:	b2db      	uxtb	r3, r3
 800e3bc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800e3be:	68bb      	ldr	r3, [r7, #8]
 800e3c0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800e3c4:	b2db      	uxtb	r3, r3
 800e3c6:	2b22      	cmp	r3, #34	; 0x22
 800e3c8:	d108      	bne.n	800e3dc <UART_DMAError+0x7a>
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d005      	beq.n	800e3dc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800e3d0:	68bb      	ldr	r3, [r7, #8]
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800e3d6:	68b8      	ldr	r0, [r7, #8]
 800e3d8:	f000 f823 	bl	800e422 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e3dc:	68bb      	ldr	r3, [r7, #8]
 800e3de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3e0:	f043 0210 	orr.w	r2, r3, #16
 800e3e4:	68bb      	ldr	r3, [r7, #8]
 800e3e6:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e3e8:	68b8      	ldr	r0, [r7, #8]
 800e3ea:	f7ff ff79 	bl	800e2e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e3ee:	bf00      	nop
 800e3f0:	3710      	adds	r7, #16
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	bd80      	pop	{r7, pc}

0800e3f6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e3f6:	b480      	push	{r7}
 800e3f8:	b083      	sub	sp, #12
 800e3fa:	af00      	add	r7, sp, #0
 800e3fc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	68da      	ldr	r2, [r3, #12]
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800e40c:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	2220      	movs	r2, #32
 800e412:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800e416:	bf00      	nop
 800e418:	370c      	adds	r7, #12
 800e41a:	46bd      	mov	sp, r7
 800e41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e420:	4770      	bx	lr

0800e422 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e422:	b480      	push	{r7}
 800e424:	b083      	sub	sp, #12
 800e426:	af00      	add	r7, sp, #0
 800e428:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	68da      	ldr	r2, [r3, #12]
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e438:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	695a      	ldr	r2, [r3, #20]
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	f022 0201 	bic.w	r2, r2, #1
 800e448:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	2220      	movs	r2, #32
 800e44e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800e452:	bf00      	nop
 800e454:	370c      	adds	r7, #12
 800e456:	46bd      	mov	sp, r7
 800e458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e45c:	4770      	bx	lr

0800e45e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e45e:	b580      	push	{r7, lr}
 800e460:	b084      	sub	sp, #16
 800e462:	af00      	add	r7, sp, #0
 800e464:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e46a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	2200      	movs	r2, #0
 800e470:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	2200      	movs	r2, #0
 800e476:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e478:	68f8      	ldr	r0, [r7, #12]
 800e47a:	f7ff ff31 	bl	800e2e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e47e:	bf00      	nop
 800e480:	3710      	adds	r7, #16
 800e482:	46bd      	mov	sp, r7
 800e484:	bd80      	pop	{r7, pc}

0800e486 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800e486:	b480      	push	{r7}
 800e488:	b085      	sub	sp, #20
 800e48a:	af00      	add	r7, sp, #0
 800e48c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e494:	b2db      	uxtb	r3, r3
 800e496:	2b21      	cmp	r3, #33	; 0x21
 800e498:	d144      	bne.n	800e524 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	689b      	ldr	r3, [r3, #8]
 800e49e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e4a2:	d11a      	bne.n	800e4da <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	6a1b      	ldr	r3, [r3, #32]
 800e4a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	881b      	ldrh	r3, [r3, #0]
 800e4ae:	461a      	mov	r2, r3
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e4b8:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	691b      	ldr	r3, [r3, #16]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d105      	bne.n	800e4ce <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	6a1b      	ldr	r3, [r3, #32]
 800e4c6:	1c9a      	adds	r2, r3, #2
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	621a      	str	r2, [r3, #32]
 800e4cc:	e00e      	b.n	800e4ec <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	6a1b      	ldr	r3, [r3, #32]
 800e4d2:	1c5a      	adds	r2, r3, #1
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	621a      	str	r2, [r3, #32]
 800e4d8:	e008      	b.n	800e4ec <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	6a1b      	ldr	r3, [r3, #32]
 800e4de:	1c59      	adds	r1, r3, #1
 800e4e0:	687a      	ldr	r2, [r7, #4]
 800e4e2:	6211      	str	r1, [r2, #32]
 800e4e4:	781a      	ldrb	r2, [r3, #0]
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e4f0:	b29b      	uxth	r3, r3
 800e4f2:	3b01      	subs	r3, #1
 800e4f4:	b29b      	uxth	r3, r3
 800e4f6:	687a      	ldr	r2, [r7, #4]
 800e4f8:	4619      	mov	r1, r3
 800e4fa:	84d1      	strh	r1, [r2, #38]	; 0x26
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d10f      	bne.n	800e520 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	68da      	ldr	r2, [r3, #12]
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e50e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	68da      	ldr	r2, [r3, #12]
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e51e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800e520:	2300      	movs	r3, #0
 800e522:	e000      	b.n	800e526 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800e524:	2302      	movs	r3, #2
  }
}
 800e526:	4618      	mov	r0, r3
 800e528:	3714      	adds	r7, #20
 800e52a:	46bd      	mov	sp, r7
 800e52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e530:	4770      	bx	lr

0800e532 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e532:	b580      	push	{r7, lr}
 800e534:	b082      	sub	sp, #8
 800e536:	af00      	add	r7, sp, #0
 800e538:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	68da      	ldr	r2, [r3, #12]
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e548:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	2220      	movs	r2, #32
 800e54e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e552:	6878      	ldr	r0, [r7, #4]
 800e554:	f7fc fce8 	bl	800af28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800e558:	2300      	movs	r3, #0
}
 800e55a:	4618      	mov	r0, r3
 800e55c:	3708      	adds	r7, #8
 800e55e:	46bd      	mov	sp, r7
 800e560:	bd80      	pop	{r7, pc}

0800e562 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800e562:	b580      	push	{r7, lr}
 800e564:	b084      	sub	sp, #16
 800e566:	af00      	add	r7, sp, #0
 800e568:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800e570:	b2db      	uxtb	r3, r3
 800e572:	2b22      	cmp	r3, #34	; 0x22
 800e574:	d171      	bne.n	800e65a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	689b      	ldr	r3, [r3, #8]
 800e57a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e57e:	d123      	bne.n	800e5c8 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e584:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	691b      	ldr	r3, [r3, #16]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d10e      	bne.n	800e5ac <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	685b      	ldr	r3, [r3, #4]
 800e594:	b29b      	uxth	r3, r3
 800e596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e59a:	b29a      	uxth	r2, r3
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5a4:	1c9a      	adds	r2, r3, #2
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	629a      	str	r2, [r3, #40]	; 0x28
 800e5aa:	e029      	b.n	800e600 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	685b      	ldr	r3, [r3, #4]
 800e5b2:	b29b      	uxth	r3, r3
 800e5b4:	b2db      	uxtb	r3, r3
 800e5b6:	b29a      	uxth	r2, r3
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5c0:	1c5a      	adds	r2, r3, #1
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	629a      	str	r2, [r3, #40]	; 0x28
 800e5c6:	e01b      	b.n	800e600 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	691b      	ldr	r3, [r3, #16]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d10a      	bne.n	800e5e6 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	6858      	ldr	r0, [r3, #4]
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5da:	1c59      	adds	r1, r3, #1
 800e5dc:	687a      	ldr	r2, [r7, #4]
 800e5de:	6291      	str	r1, [r2, #40]	; 0x28
 800e5e0:	b2c2      	uxtb	r2, r0
 800e5e2:	701a      	strb	r2, [r3, #0]
 800e5e4:	e00c      	b.n	800e600 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	685b      	ldr	r3, [r3, #4]
 800e5ec:	b2da      	uxtb	r2, r3
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5f2:	1c58      	adds	r0, r3, #1
 800e5f4:	6879      	ldr	r1, [r7, #4]
 800e5f6:	6288      	str	r0, [r1, #40]	; 0x28
 800e5f8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e5fc:	b2d2      	uxtb	r2, r2
 800e5fe:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e604:	b29b      	uxth	r3, r3
 800e606:	3b01      	subs	r3, #1
 800e608:	b29b      	uxth	r3, r3
 800e60a:	687a      	ldr	r2, [r7, #4]
 800e60c:	4619      	mov	r1, r3
 800e60e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800e610:	2b00      	cmp	r3, #0
 800e612:	d120      	bne.n	800e656 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	68da      	ldr	r2, [r3, #12]
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	f022 0220 	bic.w	r2, r2, #32
 800e622:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	68da      	ldr	r2, [r3, #12]
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e632:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	695a      	ldr	r2, [r3, #20]
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	f022 0201 	bic.w	r2, r2, #1
 800e642:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	2220      	movs	r2, #32
 800e648:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800e64c:	6878      	ldr	r0, [r7, #4]
 800e64e:	f7ff fe3d 	bl	800e2cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800e652:	2300      	movs	r3, #0
 800e654:	e002      	b.n	800e65c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800e656:	2300      	movs	r3, #0
 800e658:	e000      	b.n	800e65c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800e65a:	2302      	movs	r3, #2
  }
}
 800e65c:	4618      	mov	r0, r3
 800e65e:	3710      	adds	r7, #16
 800e660:	46bd      	mov	sp, r7
 800e662:	bd80      	pop	{r7, pc}

0800e664 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e668:	b085      	sub	sp, #20
 800e66a:	af00      	add	r7, sp, #0
 800e66c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	691b      	ldr	r3, [r3, #16]
 800e674:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	68da      	ldr	r2, [r3, #12]
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	430a      	orrs	r2, r1
 800e682:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	689a      	ldr	r2, [r3, #8]
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	691b      	ldr	r3, [r3, #16]
 800e68c:	431a      	orrs	r2, r3
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	695b      	ldr	r3, [r3, #20]
 800e692:	431a      	orrs	r2, r3
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	69db      	ldr	r3, [r3, #28]
 800e698:	4313      	orrs	r3, r2
 800e69a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	68db      	ldr	r3, [r3, #12]
 800e6a2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800e6a6:	f023 030c 	bic.w	r3, r3, #12
 800e6aa:	687a      	ldr	r2, [r7, #4]
 800e6ac:	6812      	ldr	r2, [r2, #0]
 800e6ae:	68f9      	ldr	r1, [r7, #12]
 800e6b0:	430b      	orrs	r3, r1
 800e6b2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	695b      	ldr	r3, [r3, #20]
 800e6ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	699a      	ldr	r2, [r3, #24]
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	430a      	orrs	r2, r1
 800e6c8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	69db      	ldr	r3, [r3, #28]
 800e6ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e6d2:	f040 818b 	bne.w	800e9ec <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	4ac1      	ldr	r2, [pc, #772]	; (800e9e0 <UART_SetConfig+0x37c>)
 800e6dc:	4293      	cmp	r3, r2
 800e6de:	d005      	beq.n	800e6ec <UART_SetConfig+0x88>
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	4abf      	ldr	r2, [pc, #764]	; (800e9e4 <UART_SetConfig+0x380>)
 800e6e6:	4293      	cmp	r3, r2
 800e6e8:	f040 80bd 	bne.w	800e866 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800e6ec:	f7ff f934 	bl	800d958 <HAL_RCC_GetPCLK2Freq>
 800e6f0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e6f2:	68bb      	ldr	r3, [r7, #8]
 800e6f4:	461d      	mov	r5, r3
 800e6f6:	f04f 0600 	mov.w	r6, #0
 800e6fa:	46a8      	mov	r8, r5
 800e6fc:	46b1      	mov	r9, r6
 800e6fe:	eb18 0308 	adds.w	r3, r8, r8
 800e702:	eb49 0409 	adc.w	r4, r9, r9
 800e706:	4698      	mov	r8, r3
 800e708:	46a1      	mov	r9, r4
 800e70a:	eb18 0805 	adds.w	r8, r8, r5
 800e70e:	eb49 0906 	adc.w	r9, r9, r6
 800e712:	f04f 0100 	mov.w	r1, #0
 800e716:	f04f 0200 	mov.w	r2, #0
 800e71a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800e71e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800e722:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800e726:	4688      	mov	r8, r1
 800e728:	4691      	mov	r9, r2
 800e72a:	eb18 0005 	adds.w	r0, r8, r5
 800e72e:	eb49 0106 	adc.w	r1, r9, r6
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	685b      	ldr	r3, [r3, #4]
 800e736:	461d      	mov	r5, r3
 800e738:	f04f 0600 	mov.w	r6, #0
 800e73c:	196b      	adds	r3, r5, r5
 800e73e:	eb46 0406 	adc.w	r4, r6, r6
 800e742:	461a      	mov	r2, r3
 800e744:	4623      	mov	r3, r4
 800e746:	f7f2 fa9f 	bl	8000c88 <__aeabi_uldivmod>
 800e74a:	4603      	mov	r3, r0
 800e74c:	460c      	mov	r4, r1
 800e74e:	461a      	mov	r2, r3
 800e750:	4ba5      	ldr	r3, [pc, #660]	; (800e9e8 <UART_SetConfig+0x384>)
 800e752:	fba3 2302 	umull	r2, r3, r3, r2
 800e756:	095b      	lsrs	r3, r3, #5
 800e758:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800e75c:	68bb      	ldr	r3, [r7, #8]
 800e75e:	461d      	mov	r5, r3
 800e760:	f04f 0600 	mov.w	r6, #0
 800e764:	46a9      	mov	r9, r5
 800e766:	46b2      	mov	sl, r6
 800e768:	eb19 0309 	adds.w	r3, r9, r9
 800e76c:	eb4a 040a 	adc.w	r4, sl, sl
 800e770:	4699      	mov	r9, r3
 800e772:	46a2      	mov	sl, r4
 800e774:	eb19 0905 	adds.w	r9, r9, r5
 800e778:	eb4a 0a06 	adc.w	sl, sl, r6
 800e77c:	f04f 0100 	mov.w	r1, #0
 800e780:	f04f 0200 	mov.w	r2, #0
 800e784:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e788:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e78c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e790:	4689      	mov	r9, r1
 800e792:	4692      	mov	sl, r2
 800e794:	eb19 0005 	adds.w	r0, r9, r5
 800e798:	eb4a 0106 	adc.w	r1, sl, r6
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	685b      	ldr	r3, [r3, #4]
 800e7a0:	461d      	mov	r5, r3
 800e7a2:	f04f 0600 	mov.w	r6, #0
 800e7a6:	196b      	adds	r3, r5, r5
 800e7a8:	eb46 0406 	adc.w	r4, r6, r6
 800e7ac:	461a      	mov	r2, r3
 800e7ae:	4623      	mov	r3, r4
 800e7b0:	f7f2 fa6a 	bl	8000c88 <__aeabi_uldivmod>
 800e7b4:	4603      	mov	r3, r0
 800e7b6:	460c      	mov	r4, r1
 800e7b8:	461a      	mov	r2, r3
 800e7ba:	4b8b      	ldr	r3, [pc, #556]	; (800e9e8 <UART_SetConfig+0x384>)
 800e7bc:	fba3 1302 	umull	r1, r3, r3, r2
 800e7c0:	095b      	lsrs	r3, r3, #5
 800e7c2:	2164      	movs	r1, #100	; 0x64
 800e7c4:	fb01 f303 	mul.w	r3, r1, r3
 800e7c8:	1ad3      	subs	r3, r2, r3
 800e7ca:	00db      	lsls	r3, r3, #3
 800e7cc:	3332      	adds	r3, #50	; 0x32
 800e7ce:	4a86      	ldr	r2, [pc, #536]	; (800e9e8 <UART_SetConfig+0x384>)
 800e7d0:	fba2 2303 	umull	r2, r3, r2, r3
 800e7d4:	095b      	lsrs	r3, r3, #5
 800e7d6:	005b      	lsls	r3, r3, #1
 800e7d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e7dc:	4498      	add	r8, r3
 800e7de:	68bb      	ldr	r3, [r7, #8]
 800e7e0:	461d      	mov	r5, r3
 800e7e2:	f04f 0600 	mov.w	r6, #0
 800e7e6:	46a9      	mov	r9, r5
 800e7e8:	46b2      	mov	sl, r6
 800e7ea:	eb19 0309 	adds.w	r3, r9, r9
 800e7ee:	eb4a 040a 	adc.w	r4, sl, sl
 800e7f2:	4699      	mov	r9, r3
 800e7f4:	46a2      	mov	sl, r4
 800e7f6:	eb19 0905 	adds.w	r9, r9, r5
 800e7fa:	eb4a 0a06 	adc.w	sl, sl, r6
 800e7fe:	f04f 0100 	mov.w	r1, #0
 800e802:	f04f 0200 	mov.w	r2, #0
 800e806:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e80a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e80e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e812:	4689      	mov	r9, r1
 800e814:	4692      	mov	sl, r2
 800e816:	eb19 0005 	adds.w	r0, r9, r5
 800e81a:	eb4a 0106 	adc.w	r1, sl, r6
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	685b      	ldr	r3, [r3, #4]
 800e822:	461d      	mov	r5, r3
 800e824:	f04f 0600 	mov.w	r6, #0
 800e828:	196b      	adds	r3, r5, r5
 800e82a:	eb46 0406 	adc.w	r4, r6, r6
 800e82e:	461a      	mov	r2, r3
 800e830:	4623      	mov	r3, r4
 800e832:	f7f2 fa29 	bl	8000c88 <__aeabi_uldivmod>
 800e836:	4603      	mov	r3, r0
 800e838:	460c      	mov	r4, r1
 800e83a:	461a      	mov	r2, r3
 800e83c:	4b6a      	ldr	r3, [pc, #424]	; (800e9e8 <UART_SetConfig+0x384>)
 800e83e:	fba3 1302 	umull	r1, r3, r3, r2
 800e842:	095b      	lsrs	r3, r3, #5
 800e844:	2164      	movs	r1, #100	; 0x64
 800e846:	fb01 f303 	mul.w	r3, r1, r3
 800e84a:	1ad3      	subs	r3, r2, r3
 800e84c:	00db      	lsls	r3, r3, #3
 800e84e:	3332      	adds	r3, #50	; 0x32
 800e850:	4a65      	ldr	r2, [pc, #404]	; (800e9e8 <UART_SetConfig+0x384>)
 800e852:	fba2 2303 	umull	r2, r3, r2, r3
 800e856:	095b      	lsrs	r3, r3, #5
 800e858:	f003 0207 	and.w	r2, r3, #7
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	4442      	add	r2, r8
 800e862:	609a      	str	r2, [r3, #8]
 800e864:	e26f      	b.n	800ed46 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800e866:	f7ff f863 	bl	800d930 <HAL_RCC_GetPCLK1Freq>
 800e86a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e86c:	68bb      	ldr	r3, [r7, #8]
 800e86e:	461d      	mov	r5, r3
 800e870:	f04f 0600 	mov.w	r6, #0
 800e874:	46a8      	mov	r8, r5
 800e876:	46b1      	mov	r9, r6
 800e878:	eb18 0308 	adds.w	r3, r8, r8
 800e87c:	eb49 0409 	adc.w	r4, r9, r9
 800e880:	4698      	mov	r8, r3
 800e882:	46a1      	mov	r9, r4
 800e884:	eb18 0805 	adds.w	r8, r8, r5
 800e888:	eb49 0906 	adc.w	r9, r9, r6
 800e88c:	f04f 0100 	mov.w	r1, #0
 800e890:	f04f 0200 	mov.w	r2, #0
 800e894:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800e898:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800e89c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800e8a0:	4688      	mov	r8, r1
 800e8a2:	4691      	mov	r9, r2
 800e8a4:	eb18 0005 	adds.w	r0, r8, r5
 800e8a8:	eb49 0106 	adc.w	r1, r9, r6
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	685b      	ldr	r3, [r3, #4]
 800e8b0:	461d      	mov	r5, r3
 800e8b2:	f04f 0600 	mov.w	r6, #0
 800e8b6:	196b      	adds	r3, r5, r5
 800e8b8:	eb46 0406 	adc.w	r4, r6, r6
 800e8bc:	461a      	mov	r2, r3
 800e8be:	4623      	mov	r3, r4
 800e8c0:	f7f2 f9e2 	bl	8000c88 <__aeabi_uldivmod>
 800e8c4:	4603      	mov	r3, r0
 800e8c6:	460c      	mov	r4, r1
 800e8c8:	461a      	mov	r2, r3
 800e8ca:	4b47      	ldr	r3, [pc, #284]	; (800e9e8 <UART_SetConfig+0x384>)
 800e8cc:	fba3 2302 	umull	r2, r3, r3, r2
 800e8d0:	095b      	lsrs	r3, r3, #5
 800e8d2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800e8d6:	68bb      	ldr	r3, [r7, #8]
 800e8d8:	461d      	mov	r5, r3
 800e8da:	f04f 0600 	mov.w	r6, #0
 800e8de:	46a9      	mov	r9, r5
 800e8e0:	46b2      	mov	sl, r6
 800e8e2:	eb19 0309 	adds.w	r3, r9, r9
 800e8e6:	eb4a 040a 	adc.w	r4, sl, sl
 800e8ea:	4699      	mov	r9, r3
 800e8ec:	46a2      	mov	sl, r4
 800e8ee:	eb19 0905 	adds.w	r9, r9, r5
 800e8f2:	eb4a 0a06 	adc.w	sl, sl, r6
 800e8f6:	f04f 0100 	mov.w	r1, #0
 800e8fa:	f04f 0200 	mov.w	r2, #0
 800e8fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e902:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e906:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e90a:	4689      	mov	r9, r1
 800e90c:	4692      	mov	sl, r2
 800e90e:	eb19 0005 	adds.w	r0, r9, r5
 800e912:	eb4a 0106 	adc.w	r1, sl, r6
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	685b      	ldr	r3, [r3, #4]
 800e91a:	461d      	mov	r5, r3
 800e91c:	f04f 0600 	mov.w	r6, #0
 800e920:	196b      	adds	r3, r5, r5
 800e922:	eb46 0406 	adc.w	r4, r6, r6
 800e926:	461a      	mov	r2, r3
 800e928:	4623      	mov	r3, r4
 800e92a:	f7f2 f9ad 	bl	8000c88 <__aeabi_uldivmod>
 800e92e:	4603      	mov	r3, r0
 800e930:	460c      	mov	r4, r1
 800e932:	461a      	mov	r2, r3
 800e934:	4b2c      	ldr	r3, [pc, #176]	; (800e9e8 <UART_SetConfig+0x384>)
 800e936:	fba3 1302 	umull	r1, r3, r3, r2
 800e93a:	095b      	lsrs	r3, r3, #5
 800e93c:	2164      	movs	r1, #100	; 0x64
 800e93e:	fb01 f303 	mul.w	r3, r1, r3
 800e942:	1ad3      	subs	r3, r2, r3
 800e944:	00db      	lsls	r3, r3, #3
 800e946:	3332      	adds	r3, #50	; 0x32
 800e948:	4a27      	ldr	r2, [pc, #156]	; (800e9e8 <UART_SetConfig+0x384>)
 800e94a:	fba2 2303 	umull	r2, r3, r2, r3
 800e94e:	095b      	lsrs	r3, r3, #5
 800e950:	005b      	lsls	r3, r3, #1
 800e952:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e956:	4498      	add	r8, r3
 800e958:	68bb      	ldr	r3, [r7, #8]
 800e95a:	461d      	mov	r5, r3
 800e95c:	f04f 0600 	mov.w	r6, #0
 800e960:	46a9      	mov	r9, r5
 800e962:	46b2      	mov	sl, r6
 800e964:	eb19 0309 	adds.w	r3, r9, r9
 800e968:	eb4a 040a 	adc.w	r4, sl, sl
 800e96c:	4699      	mov	r9, r3
 800e96e:	46a2      	mov	sl, r4
 800e970:	eb19 0905 	adds.w	r9, r9, r5
 800e974:	eb4a 0a06 	adc.w	sl, sl, r6
 800e978:	f04f 0100 	mov.w	r1, #0
 800e97c:	f04f 0200 	mov.w	r2, #0
 800e980:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e984:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e988:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e98c:	4689      	mov	r9, r1
 800e98e:	4692      	mov	sl, r2
 800e990:	eb19 0005 	adds.w	r0, r9, r5
 800e994:	eb4a 0106 	adc.w	r1, sl, r6
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	685b      	ldr	r3, [r3, #4]
 800e99c:	461d      	mov	r5, r3
 800e99e:	f04f 0600 	mov.w	r6, #0
 800e9a2:	196b      	adds	r3, r5, r5
 800e9a4:	eb46 0406 	adc.w	r4, r6, r6
 800e9a8:	461a      	mov	r2, r3
 800e9aa:	4623      	mov	r3, r4
 800e9ac:	f7f2 f96c 	bl	8000c88 <__aeabi_uldivmod>
 800e9b0:	4603      	mov	r3, r0
 800e9b2:	460c      	mov	r4, r1
 800e9b4:	461a      	mov	r2, r3
 800e9b6:	4b0c      	ldr	r3, [pc, #48]	; (800e9e8 <UART_SetConfig+0x384>)
 800e9b8:	fba3 1302 	umull	r1, r3, r3, r2
 800e9bc:	095b      	lsrs	r3, r3, #5
 800e9be:	2164      	movs	r1, #100	; 0x64
 800e9c0:	fb01 f303 	mul.w	r3, r1, r3
 800e9c4:	1ad3      	subs	r3, r2, r3
 800e9c6:	00db      	lsls	r3, r3, #3
 800e9c8:	3332      	adds	r3, #50	; 0x32
 800e9ca:	4a07      	ldr	r2, [pc, #28]	; (800e9e8 <UART_SetConfig+0x384>)
 800e9cc:	fba2 2303 	umull	r2, r3, r2, r3
 800e9d0:	095b      	lsrs	r3, r3, #5
 800e9d2:	f003 0207 	and.w	r2, r3, #7
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	4442      	add	r2, r8
 800e9dc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800e9de:	e1b2      	b.n	800ed46 <UART_SetConfig+0x6e2>
 800e9e0:	40011000 	.word	0x40011000
 800e9e4:	40011400 	.word	0x40011400
 800e9e8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	4ad7      	ldr	r2, [pc, #860]	; (800ed50 <UART_SetConfig+0x6ec>)
 800e9f2:	4293      	cmp	r3, r2
 800e9f4:	d005      	beq.n	800ea02 <UART_SetConfig+0x39e>
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	4ad6      	ldr	r2, [pc, #856]	; (800ed54 <UART_SetConfig+0x6f0>)
 800e9fc:	4293      	cmp	r3, r2
 800e9fe:	f040 80d1 	bne.w	800eba4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800ea02:	f7fe ffa9 	bl	800d958 <HAL_RCC_GetPCLK2Freq>
 800ea06:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ea08:	68bb      	ldr	r3, [r7, #8]
 800ea0a:	469a      	mov	sl, r3
 800ea0c:	f04f 0b00 	mov.w	fp, #0
 800ea10:	46d0      	mov	r8, sl
 800ea12:	46d9      	mov	r9, fp
 800ea14:	eb18 0308 	adds.w	r3, r8, r8
 800ea18:	eb49 0409 	adc.w	r4, r9, r9
 800ea1c:	4698      	mov	r8, r3
 800ea1e:	46a1      	mov	r9, r4
 800ea20:	eb18 080a 	adds.w	r8, r8, sl
 800ea24:	eb49 090b 	adc.w	r9, r9, fp
 800ea28:	f04f 0100 	mov.w	r1, #0
 800ea2c:	f04f 0200 	mov.w	r2, #0
 800ea30:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ea34:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ea38:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ea3c:	4688      	mov	r8, r1
 800ea3e:	4691      	mov	r9, r2
 800ea40:	eb1a 0508 	adds.w	r5, sl, r8
 800ea44:	eb4b 0609 	adc.w	r6, fp, r9
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	685b      	ldr	r3, [r3, #4]
 800ea4c:	4619      	mov	r1, r3
 800ea4e:	f04f 0200 	mov.w	r2, #0
 800ea52:	f04f 0300 	mov.w	r3, #0
 800ea56:	f04f 0400 	mov.w	r4, #0
 800ea5a:	0094      	lsls	r4, r2, #2
 800ea5c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ea60:	008b      	lsls	r3, r1, #2
 800ea62:	461a      	mov	r2, r3
 800ea64:	4623      	mov	r3, r4
 800ea66:	4628      	mov	r0, r5
 800ea68:	4631      	mov	r1, r6
 800ea6a:	f7f2 f90d 	bl	8000c88 <__aeabi_uldivmod>
 800ea6e:	4603      	mov	r3, r0
 800ea70:	460c      	mov	r4, r1
 800ea72:	461a      	mov	r2, r3
 800ea74:	4bb8      	ldr	r3, [pc, #736]	; (800ed58 <UART_SetConfig+0x6f4>)
 800ea76:	fba3 2302 	umull	r2, r3, r3, r2
 800ea7a:	095b      	lsrs	r3, r3, #5
 800ea7c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ea80:	68bb      	ldr	r3, [r7, #8]
 800ea82:	469b      	mov	fp, r3
 800ea84:	f04f 0c00 	mov.w	ip, #0
 800ea88:	46d9      	mov	r9, fp
 800ea8a:	46e2      	mov	sl, ip
 800ea8c:	eb19 0309 	adds.w	r3, r9, r9
 800ea90:	eb4a 040a 	adc.w	r4, sl, sl
 800ea94:	4699      	mov	r9, r3
 800ea96:	46a2      	mov	sl, r4
 800ea98:	eb19 090b 	adds.w	r9, r9, fp
 800ea9c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800eaa0:	f04f 0100 	mov.w	r1, #0
 800eaa4:	f04f 0200 	mov.w	r2, #0
 800eaa8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800eaac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800eab0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800eab4:	4689      	mov	r9, r1
 800eab6:	4692      	mov	sl, r2
 800eab8:	eb1b 0509 	adds.w	r5, fp, r9
 800eabc:	eb4c 060a 	adc.w	r6, ip, sl
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	685b      	ldr	r3, [r3, #4]
 800eac4:	4619      	mov	r1, r3
 800eac6:	f04f 0200 	mov.w	r2, #0
 800eaca:	f04f 0300 	mov.w	r3, #0
 800eace:	f04f 0400 	mov.w	r4, #0
 800ead2:	0094      	lsls	r4, r2, #2
 800ead4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ead8:	008b      	lsls	r3, r1, #2
 800eada:	461a      	mov	r2, r3
 800eadc:	4623      	mov	r3, r4
 800eade:	4628      	mov	r0, r5
 800eae0:	4631      	mov	r1, r6
 800eae2:	f7f2 f8d1 	bl	8000c88 <__aeabi_uldivmod>
 800eae6:	4603      	mov	r3, r0
 800eae8:	460c      	mov	r4, r1
 800eaea:	461a      	mov	r2, r3
 800eaec:	4b9a      	ldr	r3, [pc, #616]	; (800ed58 <UART_SetConfig+0x6f4>)
 800eaee:	fba3 1302 	umull	r1, r3, r3, r2
 800eaf2:	095b      	lsrs	r3, r3, #5
 800eaf4:	2164      	movs	r1, #100	; 0x64
 800eaf6:	fb01 f303 	mul.w	r3, r1, r3
 800eafa:	1ad3      	subs	r3, r2, r3
 800eafc:	011b      	lsls	r3, r3, #4
 800eafe:	3332      	adds	r3, #50	; 0x32
 800eb00:	4a95      	ldr	r2, [pc, #596]	; (800ed58 <UART_SetConfig+0x6f4>)
 800eb02:	fba2 2303 	umull	r2, r3, r2, r3
 800eb06:	095b      	lsrs	r3, r3, #5
 800eb08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800eb0c:	4498      	add	r8, r3
 800eb0e:	68bb      	ldr	r3, [r7, #8]
 800eb10:	469b      	mov	fp, r3
 800eb12:	f04f 0c00 	mov.w	ip, #0
 800eb16:	46d9      	mov	r9, fp
 800eb18:	46e2      	mov	sl, ip
 800eb1a:	eb19 0309 	adds.w	r3, r9, r9
 800eb1e:	eb4a 040a 	adc.w	r4, sl, sl
 800eb22:	4699      	mov	r9, r3
 800eb24:	46a2      	mov	sl, r4
 800eb26:	eb19 090b 	adds.w	r9, r9, fp
 800eb2a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800eb2e:	f04f 0100 	mov.w	r1, #0
 800eb32:	f04f 0200 	mov.w	r2, #0
 800eb36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800eb3a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800eb3e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800eb42:	4689      	mov	r9, r1
 800eb44:	4692      	mov	sl, r2
 800eb46:	eb1b 0509 	adds.w	r5, fp, r9
 800eb4a:	eb4c 060a 	adc.w	r6, ip, sl
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	685b      	ldr	r3, [r3, #4]
 800eb52:	4619      	mov	r1, r3
 800eb54:	f04f 0200 	mov.w	r2, #0
 800eb58:	f04f 0300 	mov.w	r3, #0
 800eb5c:	f04f 0400 	mov.w	r4, #0
 800eb60:	0094      	lsls	r4, r2, #2
 800eb62:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800eb66:	008b      	lsls	r3, r1, #2
 800eb68:	461a      	mov	r2, r3
 800eb6a:	4623      	mov	r3, r4
 800eb6c:	4628      	mov	r0, r5
 800eb6e:	4631      	mov	r1, r6
 800eb70:	f7f2 f88a 	bl	8000c88 <__aeabi_uldivmod>
 800eb74:	4603      	mov	r3, r0
 800eb76:	460c      	mov	r4, r1
 800eb78:	461a      	mov	r2, r3
 800eb7a:	4b77      	ldr	r3, [pc, #476]	; (800ed58 <UART_SetConfig+0x6f4>)
 800eb7c:	fba3 1302 	umull	r1, r3, r3, r2
 800eb80:	095b      	lsrs	r3, r3, #5
 800eb82:	2164      	movs	r1, #100	; 0x64
 800eb84:	fb01 f303 	mul.w	r3, r1, r3
 800eb88:	1ad3      	subs	r3, r2, r3
 800eb8a:	011b      	lsls	r3, r3, #4
 800eb8c:	3332      	adds	r3, #50	; 0x32
 800eb8e:	4a72      	ldr	r2, [pc, #456]	; (800ed58 <UART_SetConfig+0x6f4>)
 800eb90:	fba2 2303 	umull	r2, r3, r2, r3
 800eb94:	095b      	lsrs	r3, r3, #5
 800eb96:	f003 020f 	and.w	r2, r3, #15
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	4442      	add	r2, r8
 800eba0:	609a      	str	r2, [r3, #8]
 800eba2:	e0d0      	b.n	800ed46 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800eba4:	f7fe fec4 	bl	800d930 <HAL_RCC_GetPCLK1Freq>
 800eba8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ebaa:	68bb      	ldr	r3, [r7, #8]
 800ebac:	469a      	mov	sl, r3
 800ebae:	f04f 0b00 	mov.w	fp, #0
 800ebb2:	46d0      	mov	r8, sl
 800ebb4:	46d9      	mov	r9, fp
 800ebb6:	eb18 0308 	adds.w	r3, r8, r8
 800ebba:	eb49 0409 	adc.w	r4, r9, r9
 800ebbe:	4698      	mov	r8, r3
 800ebc0:	46a1      	mov	r9, r4
 800ebc2:	eb18 080a 	adds.w	r8, r8, sl
 800ebc6:	eb49 090b 	adc.w	r9, r9, fp
 800ebca:	f04f 0100 	mov.w	r1, #0
 800ebce:	f04f 0200 	mov.w	r2, #0
 800ebd2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ebd6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ebda:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ebde:	4688      	mov	r8, r1
 800ebe0:	4691      	mov	r9, r2
 800ebe2:	eb1a 0508 	adds.w	r5, sl, r8
 800ebe6:	eb4b 0609 	adc.w	r6, fp, r9
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	685b      	ldr	r3, [r3, #4]
 800ebee:	4619      	mov	r1, r3
 800ebf0:	f04f 0200 	mov.w	r2, #0
 800ebf4:	f04f 0300 	mov.w	r3, #0
 800ebf8:	f04f 0400 	mov.w	r4, #0
 800ebfc:	0094      	lsls	r4, r2, #2
 800ebfe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ec02:	008b      	lsls	r3, r1, #2
 800ec04:	461a      	mov	r2, r3
 800ec06:	4623      	mov	r3, r4
 800ec08:	4628      	mov	r0, r5
 800ec0a:	4631      	mov	r1, r6
 800ec0c:	f7f2 f83c 	bl	8000c88 <__aeabi_uldivmod>
 800ec10:	4603      	mov	r3, r0
 800ec12:	460c      	mov	r4, r1
 800ec14:	461a      	mov	r2, r3
 800ec16:	4b50      	ldr	r3, [pc, #320]	; (800ed58 <UART_SetConfig+0x6f4>)
 800ec18:	fba3 2302 	umull	r2, r3, r3, r2
 800ec1c:	095b      	lsrs	r3, r3, #5
 800ec1e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ec22:	68bb      	ldr	r3, [r7, #8]
 800ec24:	469b      	mov	fp, r3
 800ec26:	f04f 0c00 	mov.w	ip, #0
 800ec2a:	46d9      	mov	r9, fp
 800ec2c:	46e2      	mov	sl, ip
 800ec2e:	eb19 0309 	adds.w	r3, r9, r9
 800ec32:	eb4a 040a 	adc.w	r4, sl, sl
 800ec36:	4699      	mov	r9, r3
 800ec38:	46a2      	mov	sl, r4
 800ec3a:	eb19 090b 	adds.w	r9, r9, fp
 800ec3e:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ec42:	f04f 0100 	mov.w	r1, #0
 800ec46:	f04f 0200 	mov.w	r2, #0
 800ec4a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ec4e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ec52:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ec56:	4689      	mov	r9, r1
 800ec58:	4692      	mov	sl, r2
 800ec5a:	eb1b 0509 	adds.w	r5, fp, r9
 800ec5e:	eb4c 060a 	adc.w	r6, ip, sl
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	685b      	ldr	r3, [r3, #4]
 800ec66:	4619      	mov	r1, r3
 800ec68:	f04f 0200 	mov.w	r2, #0
 800ec6c:	f04f 0300 	mov.w	r3, #0
 800ec70:	f04f 0400 	mov.w	r4, #0
 800ec74:	0094      	lsls	r4, r2, #2
 800ec76:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ec7a:	008b      	lsls	r3, r1, #2
 800ec7c:	461a      	mov	r2, r3
 800ec7e:	4623      	mov	r3, r4
 800ec80:	4628      	mov	r0, r5
 800ec82:	4631      	mov	r1, r6
 800ec84:	f7f2 f800 	bl	8000c88 <__aeabi_uldivmod>
 800ec88:	4603      	mov	r3, r0
 800ec8a:	460c      	mov	r4, r1
 800ec8c:	461a      	mov	r2, r3
 800ec8e:	4b32      	ldr	r3, [pc, #200]	; (800ed58 <UART_SetConfig+0x6f4>)
 800ec90:	fba3 1302 	umull	r1, r3, r3, r2
 800ec94:	095b      	lsrs	r3, r3, #5
 800ec96:	2164      	movs	r1, #100	; 0x64
 800ec98:	fb01 f303 	mul.w	r3, r1, r3
 800ec9c:	1ad3      	subs	r3, r2, r3
 800ec9e:	011b      	lsls	r3, r3, #4
 800eca0:	3332      	adds	r3, #50	; 0x32
 800eca2:	4a2d      	ldr	r2, [pc, #180]	; (800ed58 <UART_SetConfig+0x6f4>)
 800eca4:	fba2 2303 	umull	r2, r3, r2, r3
 800eca8:	095b      	lsrs	r3, r3, #5
 800ecaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ecae:	4498      	add	r8, r3
 800ecb0:	68bb      	ldr	r3, [r7, #8]
 800ecb2:	469b      	mov	fp, r3
 800ecb4:	f04f 0c00 	mov.w	ip, #0
 800ecb8:	46d9      	mov	r9, fp
 800ecba:	46e2      	mov	sl, ip
 800ecbc:	eb19 0309 	adds.w	r3, r9, r9
 800ecc0:	eb4a 040a 	adc.w	r4, sl, sl
 800ecc4:	4699      	mov	r9, r3
 800ecc6:	46a2      	mov	sl, r4
 800ecc8:	eb19 090b 	adds.w	r9, r9, fp
 800eccc:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ecd0:	f04f 0100 	mov.w	r1, #0
 800ecd4:	f04f 0200 	mov.w	r2, #0
 800ecd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ecdc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ece0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ece4:	4689      	mov	r9, r1
 800ece6:	4692      	mov	sl, r2
 800ece8:	eb1b 0509 	adds.w	r5, fp, r9
 800ecec:	eb4c 060a 	adc.w	r6, ip, sl
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	685b      	ldr	r3, [r3, #4]
 800ecf4:	4619      	mov	r1, r3
 800ecf6:	f04f 0200 	mov.w	r2, #0
 800ecfa:	f04f 0300 	mov.w	r3, #0
 800ecfe:	f04f 0400 	mov.w	r4, #0
 800ed02:	0094      	lsls	r4, r2, #2
 800ed04:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ed08:	008b      	lsls	r3, r1, #2
 800ed0a:	461a      	mov	r2, r3
 800ed0c:	4623      	mov	r3, r4
 800ed0e:	4628      	mov	r0, r5
 800ed10:	4631      	mov	r1, r6
 800ed12:	f7f1 ffb9 	bl	8000c88 <__aeabi_uldivmod>
 800ed16:	4603      	mov	r3, r0
 800ed18:	460c      	mov	r4, r1
 800ed1a:	461a      	mov	r2, r3
 800ed1c:	4b0e      	ldr	r3, [pc, #56]	; (800ed58 <UART_SetConfig+0x6f4>)
 800ed1e:	fba3 1302 	umull	r1, r3, r3, r2
 800ed22:	095b      	lsrs	r3, r3, #5
 800ed24:	2164      	movs	r1, #100	; 0x64
 800ed26:	fb01 f303 	mul.w	r3, r1, r3
 800ed2a:	1ad3      	subs	r3, r2, r3
 800ed2c:	011b      	lsls	r3, r3, #4
 800ed2e:	3332      	adds	r3, #50	; 0x32
 800ed30:	4a09      	ldr	r2, [pc, #36]	; (800ed58 <UART_SetConfig+0x6f4>)
 800ed32:	fba2 2303 	umull	r2, r3, r2, r3
 800ed36:	095b      	lsrs	r3, r3, #5
 800ed38:	f003 020f 	and.w	r2, r3, #15
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	4442      	add	r2, r8
 800ed42:	609a      	str	r2, [r3, #8]
}
 800ed44:	e7ff      	b.n	800ed46 <UART_SetConfig+0x6e2>
 800ed46:	bf00      	nop
 800ed48:	3714      	adds	r7, #20
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed50:	40011000 	.word	0x40011000
 800ed54:	40011400 	.word	0x40011400
 800ed58:	51eb851f 	.word	0x51eb851f

0800ed5c <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800ed5c:	b480      	push	{r7}
 800ed5e:	b085      	sub	sp, #20
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
 800ed64:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800ed66:	2300      	movs	r3, #0
 800ed68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800ed6a:	683b      	ldr	r3, [r7, #0]
 800ed6c:	681a      	ldr	r2, [r3, #0]
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed74:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800ed76:	68fa      	ldr	r2, [r7, #12]
 800ed78:	4b20      	ldr	r3, [pc, #128]	; (800edfc <FSMC_NORSRAM_Init+0xa0>)
 800ed7a:	4013      	ands	r3, r2
 800ed7c:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800ed7e:	683b      	ldr	r3, [r7, #0]
 800ed80:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800ed82:	683b      	ldr	r3, [r7, #0]
 800ed84:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800ed86:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800ed88:	683b      	ldr	r3, [r7, #0]
 800ed8a:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800ed8c:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800ed8e:	683b      	ldr	r3, [r7, #0]
 800ed90:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800ed92:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800ed94:	683b      	ldr	r3, [r7, #0]
 800ed96:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800ed98:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800ed9a:	683b      	ldr	r3, [r7, #0]
 800ed9c:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800ed9e:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800eda0:	683b      	ldr	r3, [r7, #0]
 800eda2:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800eda4:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800eda6:	683b      	ldr	r3, [r7, #0]
 800eda8:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800edaa:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800edac:	683b      	ldr	r3, [r7, #0]
 800edae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800edb0:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800edb2:	683b      	ldr	r3, [r7, #0]
 800edb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800edb6:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800edb8:	683b      	ldr	r3, [r7, #0]
 800edba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800edbc:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800edbe:	683b      	ldr	r3, [r7, #0]
 800edc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800edc2:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800edc4:	683b      	ldr	r3, [r7, #0]
 800edc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800edc8:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800edca:	68fa      	ldr	r2, [r7, #12]
 800edcc:	4313      	orrs	r3, r2
 800edce:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800edd0:	683b      	ldr	r3, [r7, #0]
 800edd2:	689b      	ldr	r3, [r3, #8]
 800edd4:	2b08      	cmp	r3, #8
 800edd6:	d103      	bne.n	800ede0 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800edde:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800ede0:	683b      	ldr	r3, [r7, #0]
 800ede2:	681a      	ldr	r2, [r3, #0]
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	68f9      	ldr	r1, [r7, #12]
 800ede8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800edec:	2300      	movs	r3, #0
}
 800edee:	4618      	mov	r0, r3
 800edf0:	3714      	adds	r7, #20
 800edf2:	46bd      	mov	sp, r7
 800edf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf8:	4770      	bx	lr
 800edfa:	bf00      	nop
 800edfc:	fff00080 	.word	0xfff00080

0800ee00 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ee00:	b480      	push	{r7}
 800ee02:	b087      	sub	sp, #28
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	60f8      	str	r0, [r7, #12]
 800ee08:	60b9      	str	r1, [r7, #8]
 800ee0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	1c5a      	adds	r2, r3, #1
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee1a:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800ee1c:	697b      	ldr	r3, [r7, #20]
 800ee1e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800ee22:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800ee24:	68bb      	ldr	r3, [r7, #8]
 800ee26:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800ee28:	68bb      	ldr	r3, [r7, #8]
 800ee2a:	685b      	ldr	r3, [r3, #4]
 800ee2c:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800ee2e:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800ee30:	68bb      	ldr	r3, [r7, #8]
 800ee32:	689b      	ldr	r3, [r3, #8]
 800ee34:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800ee36:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800ee38:	68bb      	ldr	r3, [r7, #8]
 800ee3a:	68db      	ldr	r3, [r3, #12]
 800ee3c:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800ee3e:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800ee40:	68bb      	ldr	r3, [r7, #8]
 800ee42:	691b      	ldr	r3, [r3, #16]
 800ee44:	3b01      	subs	r3, #1
 800ee46:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800ee48:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800ee4a:	68bb      	ldr	r3, [r7, #8]
 800ee4c:	695b      	ldr	r3, [r3, #20]
 800ee4e:	3b02      	subs	r3, #2
 800ee50:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800ee52:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800ee54:	68bb      	ldr	r3, [r7, #8]
 800ee56:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800ee58:	4313      	orrs	r3, r2
 800ee5a:	697a      	ldr	r2, [r7, #20]
 800ee5c:	4313      	orrs	r3, r2
 800ee5e:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	1c5a      	adds	r2, r3, #1
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	6979      	ldr	r1, [r7, #20]
 800ee68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800ee6c:	2300      	movs	r3, #0
}
 800ee6e:	4618      	mov	r0, r3
 800ee70:	371c      	adds	r7, #28
 800ee72:	46bd      	mov	sp, r7
 800ee74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee78:	4770      	bx	lr
	...

0800ee7c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800ee7c:	b480      	push	{r7}
 800ee7e:	b087      	sub	sp, #28
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	60f8      	str	r0, [r7, #12]
 800ee84:	60b9      	str	r1, [r7, #8]
 800ee86:	607a      	str	r2, [r7, #4]
 800ee88:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800ee8a:	2300      	movs	r3, #0
 800ee8c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800ee8e:	683b      	ldr	r3, [r7, #0]
 800ee90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ee94:	d122      	bne.n	800eedc <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	687a      	ldr	r2, [r7, #4]
 800ee9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee9e:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800eea0:	697a      	ldr	r2, [r7, #20]
 800eea2:	4b15      	ldr	r3, [pc, #84]	; (800eef8 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800eea4:	4013      	ands	r3, r2
 800eea6:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800eea8:	68bb      	ldr	r3, [r7, #8]
 800eeaa:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800eeac:	68bb      	ldr	r3, [r7, #8]
 800eeae:	685b      	ldr	r3, [r3, #4]
 800eeb0:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800eeb2:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800eeb4:	68bb      	ldr	r3, [r7, #8]
 800eeb6:	689b      	ldr	r3, [r3, #8]
 800eeb8:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800eeba:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800eebc:	68bb      	ldr	r3, [r7, #8]
 800eebe:	68db      	ldr	r3, [r3, #12]
 800eec0:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800eec2:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800eec4:	68bb      	ldr	r3, [r7, #8]
 800eec6:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800eec8:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800eeca:	697a      	ldr	r2, [r7, #20]
 800eecc:	4313      	orrs	r3, r2
 800eece:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	687a      	ldr	r2, [r7, #4]
 800eed4:	6979      	ldr	r1, [r7, #20]
 800eed6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800eeda:	e005      	b.n	800eee8 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	687a      	ldr	r2, [r7, #4]
 800eee0:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800eee4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800eee8:	2300      	movs	r3, #0
}
 800eeea:	4618      	mov	r0, r3
 800eeec:	371c      	adds	r7, #28
 800eeee:	46bd      	mov	sp, r7
 800eef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef4:	4770      	bx	lr
 800eef6:	bf00      	nop
 800eef8:	cff00000 	.word	0xcff00000

0800eefc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800eefc:	b084      	sub	sp, #16
 800eefe:	b580      	push	{r7, lr}
 800ef00:	b084      	sub	sp, #16
 800ef02:	af00      	add	r7, sp, #0
 800ef04:	6078      	str	r0, [r7, #4]
 800ef06:	f107 001c 	add.w	r0, r7, #28
 800ef0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ef0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef10:	2b01      	cmp	r3, #1
 800ef12:	d122      	bne.n	800ef5a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef18:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	68db      	ldr	r3, [r3, #12]
 800ef24:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800ef28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ef2c:	687a      	ldr	r2, [r7, #4]
 800ef2e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	68db      	ldr	r3, [r3, #12]
 800ef34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ef3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef3e:	2b01      	cmp	r3, #1
 800ef40:	d105      	bne.n	800ef4e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	68db      	ldr	r3, [r3, #12]
 800ef46:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800ef4e:	6878      	ldr	r0, [r7, #4]
 800ef50:	f001 fa7c 	bl	801044c <USB_CoreReset>
 800ef54:	4603      	mov	r3, r0
 800ef56:	73fb      	strb	r3, [r7, #15]
 800ef58:	e01a      	b.n	800ef90 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	68db      	ldr	r3, [r3, #12]
 800ef5e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800ef66:	6878      	ldr	r0, [r7, #4]
 800ef68:	f001 fa70 	bl	801044c <USB_CoreReset>
 800ef6c:	4603      	mov	r3, r0
 800ef6e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ef70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d106      	bne.n	800ef84 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef7a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	639a      	str	r2, [r3, #56]	; 0x38
 800ef82:	e005      	b.n	800ef90 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef88:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ef90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef92:	2b01      	cmp	r3, #1
 800ef94:	d10b      	bne.n	800efae <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	689b      	ldr	r3, [r3, #8]
 800ef9a:	f043 0206 	orr.w	r2, r3, #6
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	689b      	ldr	r3, [r3, #8]
 800efa6:	f043 0220 	orr.w	r2, r3, #32
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800efae:	7bfb      	ldrb	r3, [r7, #15]
}
 800efb0:	4618      	mov	r0, r3
 800efb2:	3710      	adds	r7, #16
 800efb4:	46bd      	mov	sp, r7
 800efb6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800efba:	b004      	add	sp, #16
 800efbc:	4770      	bx	lr
	...

0800efc0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800efc0:	b480      	push	{r7}
 800efc2:	b087      	sub	sp, #28
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	60f8      	str	r0, [r7, #12]
 800efc8:	60b9      	str	r1, [r7, #8]
 800efca:	4613      	mov	r3, r2
 800efcc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800efce:	79fb      	ldrb	r3, [r7, #7]
 800efd0:	2b02      	cmp	r3, #2
 800efd2:	d165      	bne.n	800f0a0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800efd4:	68bb      	ldr	r3, [r7, #8]
 800efd6:	4a41      	ldr	r2, [pc, #260]	; (800f0dc <USB_SetTurnaroundTime+0x11c>)
 800efd8:	4293      	cmp	r3, r2
 800efda:	d906      	bls.n	800efea <USB_SetTurnaroundTime+0x2a>
 800efdc:	68bb      	ldr	r3, [r7, #8]
 800efde:	4a40      	ldr	r2, [pc, #256]	; (800f0e0 <USB_SetTurnaroundTime+0x120>)
 800efe0:	4293      	cmp	r3, r2
 800efe2:	d802      	bhi.n	800efea <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800efe4:	230f      	movs	r3, #15
 800efe6:	617b      	str	r3, [r7, #20]
 800efe8:	e062      	b.n	800f0b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800efea:	68bb      	ldr	r3, [r7, #8]
 800efec:	4a3c      	ldr	r2, [pc, #240]	; (800f0e0 <USB_SetTurnaroundTime+0x120>)
 800efee:	4293      	cmp	r3, r2
 800eff0:	d906      	bls.n	800f000 <USB_SetTurnaroundTime+0x40>
 800eff2:	68bb      	ldr	r3, [r7, #8]
 800eff4:	4a3b      	ldr	r2, [pc, #236]	; (800f0e4 <USB_SetTurnaroundTime+0x124>)
 800eff6:	4293      	cmp	r3, r2
 800eff8:	d802      	bhi.n	800f000 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800effa:	230e      	movs	r3, #14
 800effc:	617b      	str	r3, [r7, #20]
 800effe:	e057      	b.n	800f0b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800f000:	68bb      	ldr	r3, [r7, #8]
 800f002:	4a38      	ldr	r2, [pc, #224]	; (800f0e4 <USB_SetTurnaroundTime+0x124>)
 800f004:	4293      	cmp	r3, r2
 800f006:	d906      	bls.n	800f016 <USB_SetTurnaroundTime+0x56>
 800f008:	68bb      	ldr	r3, [r7, #8]
 800f00a:	4a37      	ldr	r2, [pc, #220]	; (800f0e8 <USB_SetTurnaroundTime+0x128>)
 800f00c:	4293      	cmp	r3, r2
 800f00e:	d802      	bhi.n	800f016 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800f010:	230d      	movs	r3, #13
 800f012:	617b      	str	r3, [r7, #20]
 800f014:	e04c      	b.n	800f0b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800f016:	68bb      	ldr	r3, [r7, #8]
 800f018:	4a33      	ldr	r2, [pc, #204]	; (800f0e8 <USB_SetTurnaroundTime+0x128>)
 800f01a:	4293      	cmp	r3, r2
 800f01c:	d906      	bls.n	800f02c <USB_SetTurnaroundTime+0x6c>
 800f01e:	68bb      	ldr	r3, [r7, #8]
 800f020:	4a32      	ldr	r2, [pc, #200]	; (800f0ec <USB_SetTurnaroundTime+0x12c>)
 800f022:	4293      	cmp	r3, r2
 800f024:	d802      	bhi.n	800f02c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800f026:	230c      	movs	r3, #12
 800f028:	617b      	str	r3, [r7, #20]
 800f02a:	e041      	b.n	800f0b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800f02c:	68bb      	ldr	r3, [r7, #8]
 800f02e:	4a2f      	ldr	r2, [pc, #188]	; (800f0ec <USB_SetTurnaroundTime+0x12c>)
 800f030:	4293      	cmp	r3, r2
 800f032:	d906      	bls.n	800f042 <USB_SetTurnaroundTime+0x82>
 800f034:	68bb      	ldr	r3, [r7, #8]
 800f036:	4a2e      	ldr	r2, [pc, #184]	; (800f0f0 <USB_SetTurnaroundTime+0x130>)
 800f038:	4293      	cmp	r3, r2
 800f03a:	d802      	bhi.n	800f042 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800f03c:	230b      	movs	r3, #11
 800f03e:	617b      	str	r3, [r7, #20]
 800f040:	e036      	b.n	800f0b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800f042:	68bb      	ldr	r3, [r7, #8]
 800f044:	4a2a      	ldr	r2, [pc, #168]	; (800f0f0 <USB_SetTurnaroundTime+0x130>)
 800f046:	4293      	cmp	r3, r2
 800f048:	d906      	bls.n	800f058 <USB_SetTurnaroundTime+0x98>
 800f04a:	68bb      	ldr	r3, [r7, #8]
 800f04c:	4a29      	ldr	r2, [pc, #164]	; (800f0f4 <USB_SetTurnaroundTime+0x134>)
 800f04e:	4293      	cmp	r3, r2
 800f050:	d802      	bhi.n	800f058 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800f052:	230a      	movs	r3, #10
 800f054:	617b      	str	r3, [r7, #20]
 800f056:	e02b      	b.n	800f0b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800f058:	68bb      	ldr	r3, [r7, #8]
 800f05a:	4a26      	ldr	r2, [pc, #152]	; (800f0f4 <USB_SetTurnaroundTime+0x134>)
 800f05c:	4293      	cmp	r3, r2
 800f05e:	d906      	bls.n	800f06e <USB_SetTurnaroundTime+0xae>
 800f060:	68bb      	ldr	r3, [r7, #8]
 800f062:	4a25      	ldr	r2, [pc, #148]	; (800f0f8 <USB_SetTurnaroundTime+0x138>)
 800f064:	4293      	cmp	r3, r2
 800f066:	d802      	bhi.n	800f06e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800f068:	2309      	movs	r3, #9
 800f06a:	617b      	str	r3, [r7, #20]
 800f06c:	e020      	b.n	800f0b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800f06e:	68bb      	ldr	r3, [r7, #8]
 800f070:	4a21      	ldr	r2, [pc, #132]	; (800f0f8 <USB_SetTurnaroundTime+0x138>)
 800f072:	4293      	cmp	r3, r2
 800f074:	d906      	bls.n	800f084 <USB_SetTurnaroundTime+0xc4>
 800f076:	68bb      	ldr	r3, [r7, #8]
 800f078:	4a20      	ldr	r2, [pc, #128]	; (800f0fc <USB_SetTurnaroundTime+0x13c>)
 800f07a:	4293      	cmp	r3, r2
 800f07c:	d802      	bhi.n	800f084 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800f07e:	2308      	movs	r3, #8
 800f080:	617b      	str	r3, [r7, #20]
 800f082:	e015      	b.n	800f0b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800f084:	68bb      	ldr	r3, [r7, #8]
 800f086:	4a1d      	ldr	r2, [pc, #116]	; (800f0fc <USB_SetTurnaroundTime+0x13c>)
 800f088:	4293      	cmp	r3, r2
 800f08a:	d906      	bls.n	800f09a <USB_SetTurnaroundTime+0xda>
 800f08c:	68bb      	ldr	r3, [r7, #8]
 800f08e:	4a1c      	ldr	r2, [pc, #112]	; (800f100 <USB_SetTurnaroundTime+0x140>)
 800f090:	4293      	cmp	r3, r2
 800f092:	d802      	bhi.n	800f09a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800f094:	2307      	movs	r3, #7
 800f096:	617b      	str	r3, [r7, #20]
 800f098:	e00a      	b.n	800f0b0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800f09a:	2306      	movs	r3, #6
 800f09c:	617b      	str	r3, [r7, #20]
 800f09e:	e007      	b.n	800f0b0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800f0a0:	79fb      	ldrb	r3, [r7, #7]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d102      	bne.n	800f0ac <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800f0a6:	2309      	movs	r3, #9
 800f0a8:	617b      	str	r3, [r7, #20]
 800f0aa:	e001      	b.n	800f0b0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800f0ac:	2309      	movs	r3, #9
 800f0ae:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	68db      	ldr	r3, [r3, #12]
 800f0b4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	68da      	ldr	r2, [r3, #12]
 800f0c0:	697b      	ldr	r3, [r7, #20]
 800f0c2:	029b      	lsls	r3, r3, #10
 800f0c4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800f0c8:	431a      	orrs	r2, r3
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f0ce:	2300      	movs	r3, #0
}
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	371c      	adds	r7, #28
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0da:	4770      	bx	lr
 800f0dc:	00d8acbf 	.word	0x00d8acbf
 800f0e0:	00e4e1bf 	.word	0x00e4e1bf
 800f0e4:	00f423ff 	.word	0x00f423ff
 800f0e8:	0106737f 	.word	0x0106737f
 800f0ec:	011a499f 	.word	0x011a499f
 800f0f0:	01312cff 	.word	0x01312cff
 800f0f4:	014ca43f 	.word	0x014ca43f
 800f0f8:	016e35ff 	.word	0x016e35ff
 800f0fc:	01a6ab1f 	.word	0x01a6ab1f
 800f100:	01e847ff 	.word	0x01e847ff

0800f104 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f104:	b480      	push	{r7}
 800f106:	b083      	sub	sp, #12
 800f108:	af00      	add	r7, sp, #0
 800f10a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	689b      	ldr	r3, [r3, #8]
 800f110:	f043 0201 	orr.w	r2, r3, #1
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f118:	2300      	movs	r3, #0
}
 800f11a:	4618      	mov	r0, r3
 800f11c:	370c      	adds	r7, #12
 800f11e:	46bd      	mov	sp, r7
 800f120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f124:	4770      	bx	lr

0800f126 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f126:	b480      	push	{r7}
 800f128:	b083      	sub	sp, #12
 800f12a:	af00      	add	r7, sp, #0
 800f12c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	689b      	ldr	r3, [r3, #8]
 800f132:	f023 0201 	bic.w	r2, r3, #1
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f13a:	2300      	movs	r3, #0
}
 800f13c:	4618      	mov	r0, r3
 800f13e:	370c      	adds	r7, #12
 800f140:	46bd      	mov	sp, r7
 800f142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f146:	4770      	bx	lr

0800f148 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f148:	b580      	push	{r7, lr}
 800f14a:	b082      	sub	sp, #8
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
 800f150:	460b      	mov	r3, r1
 800f152:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	68db      	ldr	r3, [r3, #12]
 800f158:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f160:	78fb      	ldrb	r3, [r7, #3]
 800f162:	2b01      	cmp	r3, #1
 800f164:	d106      	bne.n	800f174 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	68db      	ldr	r3, [r3, #12]
 800f16a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	60da      	str	r2, [r3, #12]
 800f172:	e00b      	b.n	800f18c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800f174:	78fb      	ldrb	r3, [r7, #3]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d106      	bne.n	800f188 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	68db      	ldr	r3, [r3, #12]
 800f17e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	60da      	str	r2, [r3, #12]
 800f186:	e001      	b.n	800f18c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800f188:	2301      	movs	r3, #1
 800f18a:	e003      	b.n	800f194 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800f18c:	2032      	movs	r0, #50	; 0x32
 800f18e:	f7fb ff5f 	bl	800b050 <HAL_Delay>

  return HAL_OK;
 800f192:	2300      	movs	r3, #0
}
 800f194:	4618      	mov	r0, r3
 800f196:	3708      	adds	r7, #8
 800f198:	46bd      	mov	sp, r7
 800f19a:	bd80      	pop	{r7, pc}

0800f19c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f19c:	b084      	sub	sp, #16
 800f19e:	b580      	push	{r7, lr}
 800f1a0:	b086      	sub	sp, #24
 800f1a2:	af00      	add	r7, sp, #0
 800f1a4:	6078      	str	r0, [r7, #4]
 800f1a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f1aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	613b      	str	r3, [r7, #16]
 800f1ba:	e009      	b.n	800f1d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f1bc:	687a      	ldr	r2, [r7, #4]
 800f1be:	693b      	ldr	r3, [r7, #16]
 800f1c0:	3340      	adds	r3, #64	; 0x40
 800f1c2:	009b      	lsls	r3, r3, #2
 800f1c4:	4413      	add	r3, r2
 800f1c6:	2200      	movs	r2, #0
 800f1c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f1ca:	693b      	ldr	r3, [r7, #16]
 800f1cc:	3301      	adds	r3, #1
 800f1ce:	613b      	str	r3, [r7, #16]
 800f1d0:	693b      	ldr	r3, [r7, #16]
 800f1d2:	2b0e      	cmp	r3, #14
 800f1d4:	d9f2      	bls.n	800f1bc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f1d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d112      	bne.n	800f202 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1e0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1ec:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1f8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	639a      	str	r2, [r3, #56]	; 0x38
 800f200:	e00b      	b.n	800f21a <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f212:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f220:	461a      	mov	r2, r3
 800f222:	2300      	movs	r3, #0
 800f224:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f22c:	4619      	mov	r1, r3
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f234:	461a      	mov	r2, r3
 800f236:	680b      	ldr	r3, [r1, #0]
 800f238:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f23c:	2b01      	cmp	r3, #1
 800f23e:	d10c      	bne.n	800f25a <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f242:	2b00      	cmp	r3, #0
 800f244:	d104      	bne.n	800f250 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f246:	2100      	movs	r1, #0
 800f248:	6878      	ldr	r0, [r7, #4]
 800f24a:	f000 f961 	bl	800f510 <USB_SetDevSpeed>
 800f24e:	e008      	b.n	800f262 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f250:	2101      	movs	r1, #1
 800f252:	6878      	ldr	r0, [r7, #4]
 800f254:	f000 f95c 	bl	800f510 <USB_SetDevSpeed>
 800f258:	e003      	b.n	800f262 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f25a:	2103      	movs	r1, #3
 800f25c:	6878      	ldr	r0, [r7, #4]
 800f25e:	f000 f957 	bl	800f510 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f262:	2110      	movs	r1, #16
 800f264:	6878      	ldr	r0, [r7, #4]
 800f266:	f000 f90b 	bl	800f480 <USB_FlushTxFifo>
 800f26a:	4603      	mov	r3, r0
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d001      	beq.n	800f274 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 800f270:	2301      	movs	r3, #1
 800f272:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f274:	6878      	ldr	r0, [r7, #4]
 800f276:	f000 f929 	bl	800f4cc <USB_FlushRxFifo>
 800f27a:	4603      	mov	r3, r0
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d001      	beq.n	800f284 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 800f280:	2301      	movs	r3, #1
 800f282:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f28a:	461a      	mov	r2, r3
 800f28c:	2300      	movs	r3, #0
 800f28e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f296:	461a      	mov	r2, r3
 800f298:	2300      	movs	r3, #0
 800f29a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f2a2:	461a      	mov	r2, r3
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	613b      	str	r3, [r7, #16]
 800f2ac:	e043      	b.n	800f336 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f2ae:	693b      	ldr	r3, [r7, #16]
 800f2b0:	015a      	lsls	r2, r3, #5
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	4413      	add	r3, r2
 800f2b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f2c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f2c4:	d118      	bne.n	800f2f8 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800f2c6:	693b      	ldr	r3, [r7, #16]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d10a      	bne.n	800f2e2 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f2cc:	693b      	ldr	r3, [r7, #16]
 800f2ce:	015a      	lsls	r2, r3, #5
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	4413      	add	r3, r2
 800f2d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2d8:	461a      	mov	r2, r3
 800f2da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f2de:	6013      	str	r3, [r2, #0]
 800f2e0:	e013      	b.n	800f30a <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f2e2:	693b      	ldr	r3, [r7, #16]
 800f2e4:	015a      	lsls	r2, r3, #5
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	4413      	add	r3, r2
 800f2ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2ee:	461a      	mov	r2, r3
 800f2f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f2f4:	6013      	str	r3, [r2, #0]
 800f2f6:	e008      	b.n	800f30a <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f2f8:	693b      	ldr	r3, [r7, #16]
 800f2fa:	015a      	lsls	r2, r3, #5
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	4413      	add	r3, r2
 800f300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f304:	461a      	mov	r2, r3
 800f306:	2300      	movs	r3, #0
 800f308:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f30a:	693b      	ldr	r3, [r7, #16]
 800f30c:	015a      	lsls	r2, r3, #5
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	4413      	add	r3, r2
 800f312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f316:	461a      	mov	r2, r3
 800f318:	2300      	movs	r3, #0
 800f31a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f31c:	693b      	ldr	r3, [r7, #16]
 800f31e:	015a      	lsls	r2, r3, #5
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	4413      	add	r3, r2
 800f324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f328:	461a      	mov	r2, r3
 800f32a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f32e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f330:	693b      	ldr	r3, [r7, #16]
 800f332:	3301      	adds	r3, #1
 800f334:	613b      	str	r3, [r7, #16]
 800f336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f338:	693a      	ldr	r2, [r7, #16]
 800f33a:	429a      	cmp	r2, r3
 800f33c:	d3b7      	bcc.n	800f2ae <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f33e:	2300      	movs	r3, #0
 800f340:	613b      	str	r3, [r7, #16]
 800f342:	e043      	b.n	800f3cc <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f344:	693b      	ldr	r3, [r7, #16]
 800f346:	015a      	lsls	r2, r3, #5
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	4413      	add	r3, r2
 800f34c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f356:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f35a:	d118      	bne.n	800f38e <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 800f35c:	693b      	ldr	r3, [r7, #16]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d10a      	bne.n	800f378 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f362:	693b      	ldr	r3, [r7, #16]
 800f364:	015a      	lsls	r2, r3, #5
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	4413      	add	r3, r2
 800f36a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f36e:	461a      	mov	r2, r3
 800f370:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f374:	6013      	str	r3, [r2, #0]
 800f376:	e013      	b.n	800f3a0 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f378:	693b      	ldr	r3, [r7, #16]
 800f37a:	015a      	lsls	r2, r3, #5
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	4413      	add	r3, r2
 800f380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f384:	461a      	mov	r2, r3
 800f386:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f38a:	6013      	str	r3, [r2, #0]
 800f38c:	e008      	b.n	800f3a0 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f38e:	693b      	ldr	r3, [r7, #16]
 800f390:	015a      	lsls	r2, r3, #5
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	4413      	add	r3, r2
 800f396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f39a:	461a      	mov	r2, r3
 800f39c:	2300      	movs	r3, #0
 800f39e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f3a0:	693b      	ldr	r3, [r7, #16]
 800f3a2:	015a      	lsls	r2, r3, #5
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	4413      	add	r3, r2
 800f3a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3ac:	461a      	mov	r2, r3
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f3b2:	693b      	ldr	r3, [r7, #16]
 800f3b4:	015a      	lsls	r2, r3, #5
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	4413      	add	r3, r2
 800f3ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3be:	461a      	mov	r2, r3
 800f3c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f3c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f3c6:	693b      	ldr	r3, [r7, #16]
 800f3c8:	3301      	adds	r3, #1
 800f3ca:	613b      	str	r3, [r7, #16]
 800f3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ce:	693a      	ldr	r2, [r7, #16]
 800f3d0:	429a      	cmp	r2, r3
 800f3d2:	d3b7      	bcc.n	800f344 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f3da:	691b      	ldr	r3, [r3, #16]
 800f3dc:	68fa      	ldr	r2, [r7, #12]
 800f3de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f3e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f3e6:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800f3e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ea:	2b01      	cmp	r3, #1
 800f3ec:	d111      	bne.n	800f412 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f3f4:	461a      	mov	r2, r3
 800f3f6:	4b20      	ldr	r3, [pc, #128]	; (800f478 <USB_DevInit+0x2dc>)
 800f3f8:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f402:	68fa      	ldr	r2, [r7, #12]
 800f404:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f40c:	f043 0303 	orr.w	r3, r3, #3
 800f410:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	2200      	movs	r2, #0
 800f416:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800f41e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f422:	2b00      	cmp	r3, #0
 800f424:	d105      	bne.n	800f432 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	699b      	ldr	r3, [r3, #24]
 800f42a:	f043 0210 	orr.w	r2, r3, #16
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	699a      	ldr	r2, [r3, #24]
 800f436:	4b11      	ldr	r3, [pc, #68]	; (800f47c <USB_DevInit+0x2e0>)
 800f438:	4313      	orrs	r3, r2
 800f43a:	687a      	ldr	r2, [r7, #4]
 800f43c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f43e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f440:	2b00      	cmp	r3, #0
 800f442:	d005      	beq.n	800f450 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	699b      	ldr	r3, [r3, #24]
 800f448:	f043 0208 	orr.w	r2, r3, #8
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f450:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f452:	2b01      	cmp	r3, #1
 800f454:	d107      	bne.n	800f466 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	699b      	ldr	r3, [r3, #24]
 800f45a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f45e:	f043 0304 	orr.w	r3, r3, #4
 800f462:	687a      	ldr	r2, [r7, #4]
 800f464:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f466:	7dfb      	ldrb	r3, [r7, #23]
}
 800f468:	4618      	mov	r0, r3
 800f46a:	3718      	adds	r7, #24
 800f46c:	46bd      	mov	sp, r7
 800f46e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f472:	b004      	add	sp, #16
 800f474:	4770      	bx	lr
 800f476:	bf00      	nop
 800f478:	00800100 	.word	0x00800100
 800f47c:	803c3800 	.word	0x803c3800

0800f480 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f480:	b480      	push	{r7}
 800f482:	b085      	sub	sp, #20
 800f484:	af00      	add	r7, sp, #0
 800f486:	6078      	str	r0, [r7, #4]
 800f488:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800f48a:	2300      	movs	r3, #0
 800f48c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f48e:	683b      	ldr	r3, [r7, #0]
 800f490:	019b      	lsls	r3, r3, #6
 800f492:	f043 0220 	orr.w	r2, r3, #32
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	3301      	adds	r3, #1
 800f49e:	60fb      	str	r3, [r7, #12]
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	4a09      	ldr	r2, [pc, #36]	; (800f4c8 <USB_FlushTxFifo+0x48>)
 800f4a4:	4293      	cmp	r3, r2
 800f4a6:	d901      	bls.n	800f4ac <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800f4a8:	2303      	movs	r3, #3
 800f4aa:	e006      	b.n	800f4ba <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	691b      	ldr	r3, [r3, #16]
 800f4b0:	f003 0320 	and.w	r3, r3, #32
 800f4b4:	2b20      	cmp	r3, #32
 800f4b6:	d0f0      	beq.n	800f49a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800f4b8:	2300      	movs	r3, #0
}
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	3714      	adds	r7, #20
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c4:	4770      	bx	lr
 800f4c6:	bf00      	nop
 800f4c8:	00030d40 	.word	0x00030d40

0800f4cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f4cc:	b480      	push	{r7}
 800f4ce:	b085      	sub	sp, #20
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800f4d4:	2300      	movs	r3, #0
 800f4d6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	2210      	movs	r2, #16
 800f4dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	3301      	adds	r3, #1
 800f4e2:	60fb      	str	r3, [r7, #12]
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	4a09      	ldr	r2, [pc, #36]	; (800f50c <USB_FlushRxFifo+0x40>)
 800f4e8:	4293      	cmp	r3, r2
 800f4ea:	d901      	bls.n	800f4f0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800f4ec:	2303      	movs	r3, #3
 800f4ee:	e006      	b.n	800f4fe <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	691b      	ldr	r3, [r3, #16]
 800f4f4:	f003 0310 	and.w	r3, r3, #16
 800f4f8:	2b10      	cmp	r3, #16
 800f4fa:	d0f0      	beq.n	800f4de <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800f4fc:	2300      	movs	r3, #0
}
 800f4fe:	4618      	mov	r0, r3
 800f500:	3714      	adds	r7, #20
 800f502:	46bd      	mov	sp, r7
 800f504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f508:	4770      	bx	lr
 800f50a:	bf00      	nop
 800f50c:	00030d40 	.word	0x00030d40

0800f510 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f510:	b480      	push	{r7}
 800f512:	b085      	sub	sp, #20
 800f514:	af00      	add	r7, sp, #0
 800f516:	6078      	str	r0, [r7, #4]
 800f518:	460b      	mov	r3, r1
 800f51a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f526:	681a      	ldr	r2, [r3, #0]
 800f528:	78fb      	ldrb	r3, [r7, #3]
 800f52a:	68f9      	ldr	r1, [r7, #12]
 800f52c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f530:	4313      	orrs	r3, r2
 800f532:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800f534:	2300      	movs	r3, #0
}
 800f536:	4618      	mov	r0, r3
 800f538:	3714      	adds	r7, #20
 800f53a:	46bd      	mov	sp, r7
 800f53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f540:	4770      	bx	lr

0800f542 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800f542:	b480      	push	{r7}
 800f544:	b087      	sub	sp, #28
 800f546:	af00      	add	r7, sp, #0
 800f548:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800f54e:	693b      	ldr	r3, [r7, #16]
 800f550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f554:	689b      	ldr	r3, [r3, #8]
 800f556:	f003 0306 	and.w	r3, r3, #6
 800f55a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d102      	bne.n	800f568 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800f562:	2300      	movs	r3, #0
 800f564:	75fb      	strb	r3, [r7, #23]
 800f566:	e00a      	b.n	800f57e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	2b02      	cmp	r3, #2
 800f56c:	d002      	beq.n	800f574 <USB_GetDevSpeed+0x32>
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	2b06      	cmp	r3, #6
 800f572:	d102      	bne.n	800f57a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800f574:	2302      	movs	r3, #2
 800f576:	75fb      	strb	r3, [r7, #23]
 800f578:	e001      	b.n	800f57e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800f57a:	230f      	movs	r3, #15
 800f57c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800f57e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f580:	4618      	mov	r0, r3
 800f582:	371c      	adds	r7, #28
 800f584:	46bd      	mov	sp, r7
 800f586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58a:	4770      	bx	lr

0800f58c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f58c:	b480      	push	{r7}
 800f58e:	b085      	sub	sp, #20
 800f590:	af00      	add	r7, sp, #0
 800f592:	6078      	str	r0, [r7, #4]
 800f594:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f59a:	683b      	ldr	r3, [r7, #0]
 800f59c:	781b      	ldrb	r3, [r3, #0]
 800f59e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f5a0:	683b      	ldr	r3, [r7, #0]
 800f5a2:	785b      	ldrb	r3, [r3, #1]
 800f5a4:	2b01      	cmp	r3, #1
 800f5a6:	d13a      	bne.n	800f61e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f5ae:	69da      	ldr	r2, [r3, #28]
 800f5b0:	683b      	ldr	r3, [r7, #0]
 800f5b2:	781b      	ldrb	r3, [r3, #0]
 800f5b4:	f003 030f 	and.w	r3, r3, #15
 800f5b8:	2101      	movs	r1, #1
 800f5ba:	fa01 f303 	lsl.w	r3, r1, r3
 800f5be:	b29b      	uxth	r3, r3
 800f5c0:	68f9      	ldr	r1, [r7, #12]
 800f5c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f5c6:	4313      	orrs	r3, r2
 800f5c8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800f5ca:	68bb      	ldr	r3, [r7, #8]
 800f5cc:	015a      	lsls	r2, r3, #5
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	4413      	add	r3, r2
 800f5d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d155      	bne.n	800f68c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f5e0:	68bb      	ldr	r3, [r7, #8]
 800f5e2:	015a      	lsls	r2, r3, #5
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	4413      	add	r3, r2
 800f5e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5ec:	681a      	ldr	r2, [r3, #0]
 800f5ee:	683b      	ldr	r3, [r7, #0]
 800f5f0:	689b      	ldr	r3, [r3, #8]
 800f5f2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f5f6:	683b      	ldr	r3, [r7, #0]
 800f5f8:	78db      	ldrb	r3, [r3, #3]
 800f5fa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f5fc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f5fe:	68bb      	ldr	r3, [r7, #8]
 800f600:	059b      	lsls	r3, r3, #22
 800f602:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f604:	4313      	orrs	r3, r2
 800f606:	68ba      	ldr	r2, [r7, #8]
 800f608:	0151      	lsls	r1, r2, #5
 800f60a:	68fa      	ldr	r2, [r7, #12]
 800f60c:	440a      	add	r2, r1
 800f60e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f61a:	6013      	str	r3, [r2, #0]
 800f61c:	e036      	b.n	800f68c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f624:	69da      	ldr	r2, [r3, #28]
 800f626:	683b      	ldr	r3, [r7, #0]
 800f628:	781b      	ldrb	r3, [r3, #0]
 800f62a:	f003 030f 	and.w	r3, r3, #15
 800f62e:	2101      	movs	r1, #1
 800f630:	fa01 f303 	lsl.w	r3, r1, r3
 800f634:	041b      	lsls	r3, r3, #16
 800f636:	68f9      	ldr	r1, [r7, #12]
 800f638:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f63c:	4313      	orrs	r3, r2
 800f63e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800f640:	68bb      	ldr	r3, [r7, #8]
 800f642:	015a      	lsls	r2, r3, #5
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	4413      	add	r3, r2
 800f648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f652:	2b00      	cmp	r3, #0
 800f654:	d11a      	bne.n	800f68c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f656:	68bb      	ldr	r3, [r7, #8]
 800f658:	015a      	lsls	r2, r3, #5
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	4413      	add	r3, r2
 800f65e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f662:	681a      	ldr	r2, [r3, #0]
 800f664:	683b      	ldr	r3, [r7, #0]
 800f666:	689b      	ldr	r3, [r3, #8]
 800f668:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800f66c:	683b      	ldr	r3, [r7, #0]
 800f66e:	78db      	ldrb	r3, [r3, #3]
 800f670:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f672:	430b      	orrs	r3, r1
 800f674:	4313      	orrs	r3, r2
 800f676:	68ba      	ldr	r2, [r7, #8]
 800f678:	0151      	lsls	r1, r2, #5
 800f67a:	68fa      	ldr	r2, [r7, #12]
 800f67c:	440a      	add	r2, r1
 800f67e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f686:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f68a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800f68c:	2300      	movs	r3, #0
}
 800f68e:	4618      	mov	r0, r3
 800f690:	3714      	adds	r7, #20
 800f692:	46bd      	mov	sp, r7
 800f694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f698:	4770      	bx	lr
	...

0800f69c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f69c:	b480      	push	{r7}
 800f69e:	b085      	sub	sp, #20
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	6078      	str	r0, [r7, #4]
 800f6a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f6aa:	683b      	ldr	r3, [r7, #0]
 800f6ac:	781b      	ldrb	r3, [r3, #0]
 800f6ae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800f6b0:	683b      	ldr	r3, [r7, #0]
 800f6b2:	785b      	ldrb	r3, [r3, #1]
 800f6b4:	2b01      	cmp	r3, #1
 800f6b6:	d135      	bne.n	800f724 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f6c0:	683b      	ldr	r3, [r7, #0]
 800f6c2:	781b      	ldrb	r3, [r3, #0]
 800f6c4:	f003 030f 	and.w	r3, r3, #15
 800f6c8:	2101      	movs	r1, #1
 800f6ca:	fa01 f303 	lsl.w	r3, r1, r3
 800f6ce:	b29b      	uxth	r3, r3
 800f6d0:	43db      	mvns	r3, r3
 800f6d2:	68f9      	ldr	r1, [r7, #12]
 800f6d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f6d8:	4013      	ands	r3, r2
 800f6da:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6e2:	69da      	ldr	r2, [r3, #28]
 800f6e4:	683b      	ldr	r3, [r7, #0]
 800f6e6:	781b      	ldrb	r3, [r3, #0]
 800f6e8:	f003 030f 	and.w	r3, r3, #15
 800f6ec:	2101      	movs	r1, #1
 800f6ee:	fa01 f303 	lsl.w	r3, r1, r3
 800f6f2:	b29b      	uxth	r3, r3
 800f6f4:	43db      	mvns	r3, r3
 800f6f6:	68f9      	ldr	r1, [r7, #12]
 800f6f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f6fc:	4013      	ands	r3, r2
 800f6fe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800f700:	68bb      	ldr	r3, [r7, #8]
 800f702:	015a      	lsls	r2, r3, #5
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	4413      	add	r3, r2
 800f708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f70c:	681a      	ldr	r2, [r3, #0]
 800f70e:	68bb      	ldr	r3, [r7, #8]
 800f710:	0159      	lsls	r1, r3, #5
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	440b      	add	r3, r1
 800f716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f71a:	4619      	mov	r1, r3
 800f71c:	4b1f      	ldr	r3, [pc, #124]	; (800f79c <USB_DeactivateEndpoint+0x100>)
 800f71e:	4013      	ands	r3, r2
 800f720:	600b      	str	r3, [r1, #0]
 800f722:	e034      	b.n	800f78e <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f72a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f72c:	683b      	ldr	r3, [r7, #0]
 800f72e:	781b      	ldrb	r3, [r3, #0]
 800f730:	f003 030f 	and.w	r3, r3, #15
 800f734:	2101      	movs	r1, #1
 800f736:	fa01 f303 	lsl.w	r3, r1, r3
 800f73a:	041b      	lsls	r3, r3, #16
 800f73c:	43db      	mvns	r3, r3
 800f73e:	68f9      	ldr	r1, [r7, #12]
 800f740:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f744:	4013      	ands	r3, r2
 800f746:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f74e:	69da      	ldr	r2, [r3, #28]
 800f750:	683b      	ldr	r3, [r7, #0]
 800f752:	781b      	ldrb	r3, [r3, #0]
 800f754:	f003 030f 	and.w	r3, r3, #15
 800f758:	2101      	movs	r1, #1
 800f75a:	fa01 f303 	lsl.w	r3, r1, r3
 800f75e:	041b      	lsls	r3, r3, #16
 800f760:	43db      	mvns	r3, r3
 800f762:	68f9      	ldr	r1, [r7, #12]
 800f764:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f768:	4013      	ands	r3, r2
 800f76a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800f76c:	68bb      	ldr	r3, [r7, #8]
 800f76e:	015a      	lsls	r2, r3, #5
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	4413      	add	r3, r2
 800f774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f778:	681a      	ldr	r2, [r3, #0]
 800f77a:	68bb      	ldr	r3, [r7, #8]
 800f77c:	0159      	lsls	r1, r3, #5
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	440b      	add	r3, r1
 800f782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f786:	4619      	mov	r1, r3
 800f788:	4b05      	ldr	r3, [pc, #20]	; (800f7a0 <USB_DeactivateEndpoint+0x104>)
 800f78a:	4013      	ands	r3, r2
 800f78c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800f78e:	2300      	movs	r3, #0
}
 800f790:	4618      	mov	r0, r3
 800f792:	3714      	adds	r7, #20
 800f794:	46bd      	mov	sp, r7
 800f796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79a:	4770      	bx	lr
 800f79c:	ec337800 	.word	0xec337800
 800f7a0:	eff37800 	.word	0xeff37800

0800f7a4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b08a      	sub	sp, #40	; 0x28
 800f7a8:	af02      	add	r7, sp, #8
 800f7aa:	60f8      	str	r0, [r7, #12]
 800f7ac:	60b9      	str	r1, [r7, #8]
 800f7ae:	4613      	mov	r3, r2
 800f7b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800f7b6:	68bb      	ldr	r3, [r7, #8]
 800f7b8:	781b      	ldrb	r3, [r3, #0]
 800f7ba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f7bc:	68bb      	ldr	r3, [r7, #8]
 800f7be:	785b      	ldrb	r3, [r3, #1]
 800f7c0:	2b01      	cmp	r3, #1
 800f7c2:	f040 815c 	bne.w	800fa7e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f7c6:	68bb      	ldr	r3, [r7, #8]
 800f7c8:	695b      	ldr	r3, [r3, #20]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d132      	bne.n	800f834 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f7ce:	69bb      	ldr	r3, [r7, #24]
 800f7d0:	015a      	lsls	r2, r3, #5
 800f7d2:	69fb      	ldr	r3, [r7, #28]
 800f7d4:	4413      	add	r3, r2
 800f7d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7da:	691b      	ldr	r3, [r3, #16]
 800f7dc:	69ba      	ldr	r2, [r7, #24]
 800f7de:	0151      	lsls	r1, r2, #5
 800f7e0:	69fa      	ldr	r2, [r7, #28]
 800f7e2:	440a      	add	r2, r1
 800f7e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f7e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f7ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f7f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f7f2:	69bb      	ldr	r3, [r7, #24]
 800f7f4:	015a      	lsls	r2, r3, #5
 800f7f6:	69fb      	ldr	r3, [r7, #28]
 800f7f8:	4413      	add	r3, r2
 800f7fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7fe:	691b      	ldr	r3, [r3, #16]
 800f800:	69ba      	ldr	r2, [r7, #24]
 800f802:	0151      	lsls	r1, r2, #5
 800f804:	69fa      	ldr	r2, [r7, #28]
 800f806:	440a      	add	r2, r1
 800f808:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f80c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f810:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f812:	69bb      	ldr	r3, [r7, #24]
 800f814:	015a      	lsls	r2, r3, #5
 800f816:	69fb      	ldr	r3, [r7, #28]
 800f818:	4413      	add	r3, r2
 800f81a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f81e:	691b      	ldr	r3, [r3, #16]
 800f820:	69ba      	ldr	r2, [r7, #24]
 800f822:	0151      	lsls	r1, r2, #5
 800f824:	69fa      	ldr	r2, [r7, #28]
 800f826:	440a      	add	r2, r1
 800f828:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f82c:	0cdb      	lsrs	r3, r3, #19
 800f82e:	04db      	lsls	r3, r3, #19
 800f830:	6113      	str	r3, [r2, #16]
 800f832:	e074      	b.n	800f91e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f834:	69bb      	ldr	r3, [r7, #24]
 800f836:	015a      	lsls	r2, r3, #5
 800f838:	69fb      	ldr	r3, [r7, #28]
 800f83a:	4413      	add	r3, r2
 800f83c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f840:	691b      	ldr	r3, [r3, #16]
 800f842:	69ba      	ldr	r2, [r7, #24]
 800f844:	0151      	lsls	r1, r2, #5
 800f846:	69fa      	ldr	r2, [r7, #28]
 800f848:	440a      	add	r2, r1
 800f84a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f84e:	0cdb      	lsrs	r3, r3, #19
 800f850:	04db      	lsls	r3, r3, #19
 800f852:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f854:	69bb      	ldr	r3, [r7, #24]
 800f856:	015a      	lsls	r2, r3, #5
 800f858:	69fb      	ldr	r3, [r7, #28]
 800f85a:	4413      	add	r3, r2
 800f85c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f860:	691b      	ldr	r3, [r3, #16]
 800f862:	69ba      	ldr	r2, [r7, #24]
 800f864:	0151      	lsls	r1, r2, #5
 800f866:	69fa      	ldr	r2, [r7, #28]
 800f868:	440a      	add	r2, r1
 800f86a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f86e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f872:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f876:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f878:	69bb      	ldr	r3, [r7, #24]
 800f87a:	015a      	lsls	r2, r3, #5
 800f87c:	69fb      	ldr	r3, [r7, #28]
 800f87e:	4413      	add	r3, r2
 800f880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f884:	691a      	ldr	r2, [r3, #16]
 800f886:	68bb      	ldr	r3, [r7, #8]
 800f888:	6959      	ldr	r1, [r3, #20]
 800f88a:	68bb      	ldr	r3, [r7, #8]
 800f88c:	689b      	ldr	r3, [r3, #8]
 800f88e:	440b      	add	r3, r1
 800f890:	1e59      	subs	r1, r3, #1
 800f892:	68bb      	ldr	r3, [r7, #8]
 800f894:	689b      	ldr	r3, [r3, #8]
 800f896:	fbb1 f3f3 	udiv	r3, r1, r3
 800f89a:	04d9      	lsls	r1, r3, #19
 800f89c:	4b9d      	ldr	r3, [pc, #628]	; (800fb14 <USB_EPStartXfer+0x370>)
 800f89e:	400b      	ands	r3, r1
 800f8a0:	69b9      	ldr	r1, [r7, #24]
 800f8a2:	0148      	lsls	r0, r1, #5
 800f8a4:	69f9      	ldr	r1, [r7, #28]
 800f8a6:	4401      	add	r1, r0
 800f8a8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f8ac:	4313      	orrs	r3, r2
 800f8ae:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f8b0:	69bb      	ldr	r3, [r7, #24]
 800f8b2:	015a      	lsls	r2, r3, #5
 800f8b4:	69fb      	ldr	r3, [r7, #28]
 800f8b6:	4413      	add	r3, r2
 800f8b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8bc:	691a      	ldr	r2, [r3, #16]
 800f8be:	68bb      	ldr	r3, [r7, #8]
 800f8c0:	695b      	ldr	r3, [r3, #20]
 800f8c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f8c6:	69b9      	ldr	r1, [r7, #24]
 800f8c8:	0148      	lsls	r0, r1, #5
 800f8ca:	69f9      	ldr	r1, [r7, #28]
 800f8cc:	4401      	add	r1, r0
 800f8ce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f8d2:	4313      	orrs	r3, r2
 800f8d4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800f8d6:	68bb      	ldr	r3, [r7, #8]
 800f8d8:	78db      	ldrb	r3, [r3, #3]
 800f8da:	2b01      	cmp	r3, #1
 800f8dc:	d11f      	bne.n	800f91e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800f8de:	69bb      	ldr	r3, [r7, #24]
 800f8e0:	015a      	lsls	r2, r3, #5
 800f8e2:	69fb      	ldr	r3, [r7, #28]
 800f8e4:	4413      	add	r3, r2
 800f8e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8ea:	691b      	ldr	r3, [r3, #16]
 800f8ec:	69ba      	ldr	r2, [r7, #24]
 800f8ee:	0151      	lsls	r1, r2, #5
 800f8f0:	69fa      	ldr	r2, [r7, #28]
 800f8f2:	440a      	add	r2, r1
 800f8f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f8f8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800f8fc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800f8fe:	69bb      	ldr	r3, [r7, #24]
 800f900:	015a      	lsls	r2, r3, #5
 800f902:	69fb      	ldr	r3, [r7, #28]
 800f904:	4413      	add	r3, r2
 800f906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f90a:	691b      	ldr	r3, [r3, #16]
 800f90c:	69ba      	ldr	r2, [r7, #24]
 800f90e:	0151      	lsls	r1, r2, #5
 800f910:	69fa      	ldr	r2, [r7, #28]
 800f912:	440a      	add	r2, r1
 800f914:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f918:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f91c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800f91e:	79fb      	ldrb	r3, [r7, #7]
 800f920:	2b01      	cmp	r3, #1
 800f922:	d14b      	bne.n	800f9bc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f924:	68bb      	ldr	r3, [r7, #8]
 800f926:	691b      	ldr	r3, [r3, #16]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d009      	beq.n	800f940 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f92c:	69bb      	ldr	r3, [r7, #24]
 800f92e:	015a      	lsls	r2, r3, #5
 800f930:	69fb      	ldr	r3, [r7, #28]
 800f932:	4413      	add	r3, r2
 800f934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f938:	461a      	mov	r2, r3
 800f93a:	68bb      	ldr	r3, [r7, #8]
 800f93c:	691b      	ldr	r3, [r3, #16]
 800f93e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800f940:	68bb      	ldr	r3, [r7, #8]
 800f942:	78db      	ldrb	r3, [r3, #3]
 800f944:	2b01      	cmp	r3, #1
 800f946:	d128      	bne.n	800f99a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f948:	69fb      	ldr	r3, [r7, #28]
 800f94a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f94e:	689b      	ldr	r3, [r3, #8]
 800f950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f954:	2b00      	cmp	r3, #0
 800f956:	d110      	bne.n	800f97a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f958:	69bb      	ldr	r3, [r7, #24]
 800f95a:	015a      	lsls	r2, r3, #5
 800f95c:	69fb      	ldr	r3, [r7, #28]
 800f95e:	4413      	add	r3, r2
 800f960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	69ba      	ldr	r2, [r7, #24]
 800f968:	0151      	lsls	r1, r2, #5
 800f96a:	69fa      	ldr	r2, [r7, #28]
 800f96c:	440a      	add	r2, r1
 800f96e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f972:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f976:	6013      	str	r3, [r2, #0]
 800f978:	e00f      	b.n	800f99a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f97a:	69bb      	ldr	r3, [r7, #24]
 800f97c:	015a      	lsls	r2, r3, #5
 800f97e:	69fb      	ldr	r3, [r7, #28]
 800f980:	4413      	add	r3, r2
 800f982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	69ba      	ldr	r2, [r7, #24]
 800f98a:	0151      	lsls	r1, r2, #5
 800f98c:	69fa      	ldr	r2, [r7, #28]
 800f98e:	440a      	add	r2, r1
 800f990:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f998:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f99a:	69bb      	ldr	r3, [r7, #24]
 800f99c:	015a      	lsls	r2, r3, #5
 800f99e:	69fb      	ldr	r3, [r7, #28]
 800f9a0:	4413      	add	r3, r2
 800f9a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	69ba      	ldr	r2, [r7, #24]
 800f9aa:	0151      	lsls	r1, r2, #5
 800f9ac:	69fa      	ldr	r2, [r7, #28]
 800f9ae:	440a      	add	r2, r1
 800f9b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f9b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f9b8:	6013      	str	r3, [r2, #0]
 800f9ba:	e12f      	b.n	800fc1c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f9bc:	69bb      	ldr	r3, [r7, #24]
 800f9be:	015a      	lsls	r2, r3, #5
 800f9c0:	69fb      	ldr	r3, [r7, #28]
 800f9c2:	4413      	add	r3, r2
 800f9c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	69ba      	ldr	r2, [r7, #24]
 800f9cc:	0151      	lsls	r1, r2, #5
 800f9ce:	69fa      	ldr	r2, [r7, #28]
 800f9d0:	440a      	add	r2, r1
 800f9d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f9d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f9da:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f9dc:	68bb      	ldr	r3, [r7, #8]
 800f9de:	78db      	ldrb	r3, [r3, #3]
 800f9e0:	2b01      	cmp	r3, #1
 800f9e2:	d015      	beq.n	800fa10 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800f9e4:	68bb      	ldr	r3, [r7, #8]
 800f9e6:	695b      	ldr	r3, [r3, #20]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	f000 8117 	beq.w	800fc1c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f9ee:	69fb      	ldr	r3, [r7, #28]
 800f9f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f9f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f9f6:	68bb      	ldr	r3, [r7, #8]
 800f9f8:	781b      	ldrb	r3, [r3, #0]
 800f9fa:	f003 030f 	and.w	r3, r3, #15
 800f9fe:	2101      	movs	r1, #1
 800fa00:	fa01 f303 	lsl.w	r3, r1, r3
 800fa04:	69f9      	ldr	r1, [r7, #28]
 800fa06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fa0a:	4313      	orrs	r3, r2
 800fa0c:	634b      	str	r3, [r1, #52]	; 0x34
 800fa0e:	e105      	b.n	800fc1c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800fa10:	69fb      	ldr	r3, [r7, #28]
 800fa12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa16:	689b      	ldr	r3, [r3, #8]
 800fa18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d110      	bne.n	800fa42 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800fa20:	69bb      	ldr	r3, [r7, #24]
 800fa22:	015a      	lsls	r2, r3, #5
 800fa24:	69fb      	ldr	r3, [r7, #28]
 800fa26:	4413      	add	r3, r2
 800fa28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	69ba      	ldr	r2, [r7, #24]
 800fa30:	0151      	lsls	r1, r2, #5
 800fa32:	69fa      	ldr	r2, [r7, #28]
 800fa34:	440a      	add	r2, r1
 800fa36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa3a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fa3e:	6013      	str	r3, [r2, #0]
 800fa40:	e00f      	b.n	800fa62 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800fa42:	69bb      	ldr	r3, [r7, #24]
 800fa44:	015a      	lsls	r2, r3, #5
 800fa46:	69fb      	ldr	r3, [r7, #28]
 800fa48:	4413      	add	r3, r2
 800fa4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	69ba      	ldr	r2, [r7, #24]
 800fa52:	0151      	lsls	r1, r2, #5
 800fa54:	69fa      	ldr	r2, [r7, #28]
 800fa56:	440a      	add	r2, r1
 800fa58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fa60:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800fa62:	68bb      	ldr	r3, [r7, #8]
 800fa64:	68d9      	ldr	r1, [r3, #12]
 800fa66:	68bb      	ldr	r3, [r7, #8]
 800fa68:	781a      	ldrb	r2, [r3, #0]
 800fa6a:	68bb      	ldr	r3, [r7, #8]
 800fa6c:	695b      	ldr	r3, [r3, #20]
 800fa6e:	b298      	uxth	r0, r3
 800fa70:	79fb      	ldrb	r3, [r7, #7]
 800fa72:	9300      	str	r3, [sp, #0]
 800fa74:	4603      	mov	r3, r0
 800fa76:	68f8      	ldr	r0, [r7, #12]
 800fa78:	f000 fa2b 	bl	800fed2 <USB_WritePacket>
 800fa7c:	e0ce      	b.n	800fc1c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800fa7e:	69bb      	ldr	r3, [r7, #24]
 800fa80:	015a      	lsls	r2, r3, #5
 800fa82:	69fb      	ldr	r3, [r7, #28]
 800fa84:	4413      	add	r3, r2
 800fa86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa8a:	691b      	ldr	r3, [r3, #16]
 800fa8c:	69ba      	ldr	r2, [r7, #24]
 800fa8e:	0151      	lsls	r1, r2, #5
 800fa90:	69fa      	ldr	r2, [r7, #28]
 800fa92:	440a      	add	r2, r1
 800fa94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fa98:	0cdb      	lsrs	r3, r3, #19
 800fa9a:	04db      	lsls	r3, r3, #19
 800fa9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800fa9e:	69bb      	ldr	r3, [r7, #24]
 800faa0:	015a      	lsls	r2, r3, #5
 800faa2:	69fb      	ldr	r3, [r7, #28]
 800faa4:	4413      	add	r3, r2
 800faa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800faaa:	691b      	ldr	r3, [r3, #16]
 800faac:	69ba      	ldr	r2, [r7, #24]
 800faae:	0151      	lsls	r1, r2, #5
 800fab0:	69fa      	ldr	r2, [r7, #28]
 800fab2:	440a      	add	r2, r1
 800fab4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fab8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fabc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fac0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800fac2:	68bb      	ldr	r3, [r7, #8]
 800fac4:	695b      	ldr	r3, [r3, #20]
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d126      	bne.n	800fb18 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800faca:	69bb      	ldr	r3, [r7, #24]
 800facc:	015a      	lsls	r2, r3, #5
 800face:	69fb      	ldr	r3, [r7, #28]
 800fad0:	4413      	add	r3, r2
 800fad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fad6:	691a      	ldr	r2, [r3, #16]
 800fad8:	68bb      	ldr	r3, [r7, #8]
 800fada:	689b      	ldr	r3, [r3, #8]
 800fadc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fae0:	69b9      	ldr	r1, [r7, #24]
 800fae2:	0148      	lsls	r0, r1, #5
 800fae4:	69f9      	ldr	r1, [r7, #28]
 800fae6:	4401      	add	r1, r0
 800fae8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800faec:	4313      	orrs	r3, r2
 800faee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800faf0:	69bb      	ldr	r3, [r7, #24]
 800faf2:	015a      	lsls	r2, r3, #5
 800faf4:	69fb      	ldr	r3, [r7, #28]
 800faf6:	4413      	add	r3, r2
 800faf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fafc:	691b      	ldr	r3, [r3, #16]
 800fafe:	69ba      	ldr	r2, [r7, #24]
 800fb00:	0151      	lsls	r1, r2, #5
 800fb02:	69fa      	ldr	r2, [r7, #28]
 800fb04:	440a      	add	r2, r1
 800fb06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fb0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fb0e:	6113      	str	r3, [r2, #16]
 800fb10:	e036      	b.n	800fb80 <USB_EPStartXfer+0x3dc>
 800fb12:	bf00      	nop
 800fb14:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800fb18:	68bb      	ldr	r3, [r7, #8]
 800fb1a:	695a      	ldr	r2, [r3, #20]
 800fb1c:	68bb      	ldr	r3, [r7, #8]
 800fb1e:	689b      	ldr	r3, [r3, #8]
 800fb20:	4413      	add	r3, r2
 800fb22:	1e5a      	subs	r2, r3, #1
 800fb24:	68bb      	ldr	r3, [r7, #8]
 800fb26:	689b      	ldr	r3, [r3, #8]
 800fb28:	fbb2 f3f3 	udiv	r3, r2, r3
 800fb2c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800fb2e:	69bb      	ldr	r3, [r7, #24]
 800fb30:	015a      	lsls	r2, r3, #5
 800fb32:	69fb      	ldr	r3, [r7, #28]
 800fb34:	4413      	add	r3, r2
 800fb36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb3a:	691a      	ldr	r2, [r3, #16]
 800fb3c:	8afb      	ldrh	r3, [r7, #22]
 800fb3e:	04d9      	lsls	r1, r3, #19
 800fb40:	4b39      	ldr	r3, [pc, #228]	; (800fc28 <USB_EPStartXfer+0x484>)
 800fb42:	400b      	ands	r3, r1
 800fb44:	69b9      	ldr	r1, [r7, #24]
 800fb46:	0148      	lsls	r0, r1, #5
 800fb48:	69f9      	ldr	r1, [r7, #28]
 800fb4a:	4401      	add	r1, r0
 800fb4c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fb50:	4313      	orrs	r3, r2
 800fb52:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800fb54:	69bb      	ldr	r3, [r7, #24]
 800fb56:	015a      	lsls	r2, r3, #5
 800fb58:	69fb      	ldr	r3, [r7, #28]
 800fb5a:	4413      	add	r3, r2
 800fb5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb60:	691a      	ldr	r2, [r3, #16]
 800fb62:	68bb      	ldr	r3, [r7, #8]
 800fb64:	689b      	ldr	r3, [r3, #8]
 800fb66:	8af9      	ldrh	r1, [r7, #22]
 800fb68:	fb01 f303 	mul.w	r3, r1, r3
 800fb6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fb70:	69b9      	ldr	r1, [r7, #24]
 800fb72:	0148      	lsls	r0, r1, #5
 800fb74:	69f9      	ldr	r1, [r7, #28]
 800fb76:	4401      	add	r1, r0
 800fb78:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fb7c:	4313      	orrs	r3, r2
 800fb7e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800fb80:	79fb      	ldrb	r3, [r7, #7]
 800fb82:	2b01      	cmp	r3, #1
 800fb84:	d10d      	bne.n	800fba2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800fb86:	68bb      	ldr	r3, [r7, #8]
 800fb88:	68db      	ldr	r3, [r3, #12]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d009      	beq.n	800fba2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800fb8e:	68bb      	ldr	r3, [r7, #8]
 800fb90:	68d9      	ldr	r1, [r3, #12]
 800fb92:	69bb      	ldr	r3, [r7, #24]
 800fb94:	015a      	lsls	r2, r3, #5
 800fb96:	69fb      	ldr	r3, [r7, #28]
 800fb98:	4413      	add	r3, r2
 800fb9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb9e:	460a      	mov	r2, r1
 800fba0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800fba2:	68bb      	ldr	r3, [r7, #8]
 800fba4:	78db      	ldrb	r3, [r3, #3]
 800fba6:	2b01      	cmp	r3, #1
 800fba8:	d128      	bne.n	800fbfc <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800fbaa:	69fb      	ldr	r3, [r7, #28]
 800fbac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fbb0:	689b      	ldr	r3, [r3, #8]
 800fbb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d110      	bne.n	800fbdc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800fbba:	69bb      	ldr	r3, [r7, #24]
 800fbbc:	015a      	lsls	r2, r3, #5
 800fbbe:	69fb      	ldr	r3, [r7, #28]
 800fbc0:	4413      	add	r3, r2
 800fbc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	69ba      	ldr	r2, [r7, #24]
 800fbca:	0151      	lsls	r1, r2, #5
 800fbcc:	69fa      	ldr	r2, [r7, #28]
 800fbce:	440a      	add	r2, r1
 800fbd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fbd4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fbd8:	6013      	str	r3, [r2, #0]
 800fbda:	e00f      	b.n	800fbfc <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800fbdc:	69bb      	ldr	r3, [r7, #24]
 800fbde:	015a      	lsls	r2, r3, #5
 800fbe0:	69fb      	ldr	r3, [r7, #28]
 800fbe2:	4413      	add	r3, r2
 800fbe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	69ba      	ldr	r2, [r7, #24]
 800fbec:	0151      	lsls	r1, r2, #5
 800fbee:	69fa      	ldr	r2, [r7, #28]
 800fbf0:	440a      	add	r2, r1
 800fbf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fbf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fbfa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800fbfc:	69bb      	ldr	r3, [r7, #24]
 800fbfe:	015a      	lsls	r2, r3, #5
 800fc00:	69fb      	ldr	r3, [r7, #28]
 800fc02:	4413      	add	r3, r2
 800fc04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	69ba      	ldr	r2, [r7, #24]
 800fc0c:	0151      	lsls	r1, r2, #5
 800fc0e:	69fa      	ldr	r2, [r7, #28]
 800fc10:	440a      	add	r2, r1
 800fc12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fc16:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fc1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fc1c:	2300      	movs	r3, #0
}
 800fc1e:	4618      	mov	r0, r3
 800fc20:	3720      	adds	r7, #32
 800fc22:	46bd      	mov	sp, r7
 800fc24:	bd80      	pop	{r7, pc}
 800fc26:	bf00      	nop
 800fc28:	1ff80000 	.word	0x1ff80000

0800fc2c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800fc2c:	b480      	push	{r7}
 800fc2e:	b087      	sub	sp, #28
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	60f8      	str	r0, [r7, #12]
 800fc34:	60b9      	str	r1, [r7, #8]
 800fc36:	4613      	mov	r3, r2
 800fc38:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800fc3e:	68bb      	ldr	r3, [r7, #8]
 800fc40:	781b      	ldrb	r3, [r3, #0]
 800fc42:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800fc44:	68bb      	ldr	r3, [r7, #8]
 800fc46:	785b      	ldrb	r3, [r3, #1]
 800fc48:	2b01      	cmp	r3, #1
 800fc4a:	f040 80cd 	bne.w	800fde8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800fc4e:	68bb      	ldr	r3, [r7, #8]
 800fc50:	695b      	ldr	r3, [r3, #20]
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d132      	bne.n	800fcbc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fc56:	693b      	ldr	r3, [r7, #16]
 800fc58:	015a      	lsls	r2, r3, #5
 800fc5a:	697b      	ldr	r3, [r7, #20]
 800fc5c:	4413      	add	r3, r2
 800fc5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc62:	691b      	ldr	r3, [r3, #16]
 800fc64:	693a      	ldr	r2, [r7, #16]
 800fc66:	0151      	lsls	r1, r2, #5
 800fc68:	697a      	ldr	r2, [r7, #20]
 800fc6a:	440a      	add	r2, r1
 800fc6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fc70:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fc74:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fc78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fc7a:	693b      	ldr	r3, [r7, #16]
 800fc7c:	015a      	lsls	r2, r3, #5
 800fc7e:	697b      	ldr	r3, [r7, #20]
 800fc80:	4413      	add	r3, r2
 800fc82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc86:	691b      	ldr	r3, [r3, #16]
 800fc88:	693a      	ldr	r2, [r7, #16]
 800fc8a:	0151      	lsls	r1, r2, #5
 800fc8c:	697a      	ldr	r2, [r7, #20]
 800fc8e:	440a      	add	r2, r1
 800fc90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fc94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fc98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fc9a:	693b      	ldr	r3, [r7, #16]
 800fc9c:	015a      	lsls	r2, r3, #5
 800fc9e:	697b      	ldr	r3, [r7, #20]
 800fca0:	4413      	add	r3, r2
 800fca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fca6:	691b      	ldr	r3, [r3, #16]
 800fca8:	693a      	ldr	r2, [r7, #16]
 800fcaa:	0151      	lsls	r1, r2, #5
 800fcac:	697a      	ldr	r2, [r7, #20]
 800fcae:	440a      	add	r2, r1
 800fcb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fcb4:	0cdb      	lsrs	r3, r3, #19
 800fcb6:	04db      	lsls	r3, r3, #19
 800fcb8:	6113      	str	r3, [r2, #16]
 800fcba:	e04e      	b.n	800fd5a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fcbc:	693b      	ldr	r3, [r7, #16]
 800fcbe:	015a      	lsls	r2, r3, #5
 800fcc0:	697b      	ldr	r3, [r7, #20]
 800fcc2:	4413      	add	r3, r2
 800fcc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fcc8:	691b      	ldr	r3, [r3, #16]
 800fcca:	693a      	ldr	r2, [r7, #16]
 800fccc:	0151      	lsls	r1, r2, #5
 800fcce:	697a      	ldr	r2, [r7, #20]
 800fcd0:	440a      	add	r2, r1
 800fcd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fcd6:	0cdb      	lsrs	r3, r3, #19
 800fcd8:	04db      	lsls	r3, r3, #19
 800fcda:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fcdc:	693b      	ldr	r3, [r7, #16]
 800fcde:	015a      	lsls	r2, r3, #5
 800fce0:	697b      	ldr	r3, [r7, #20]
 800fce2:	4413      	add	r3, r2
 800fce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fce8:	691b      	ldr	r3, [r3, #16]
 800fcea:	693a      	ldr	r2, [r7, #16]
 800fcec:	0151      	lsls	r1, r2, #5
 800fcee:	697a      	ldr	r2, [r7, #20]
 800fcf0:	440a      	add	r2, r1
 800fcf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fcf6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fcfa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fcfe:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800fd00:	68bb      	ldr	r3, [r7, #8]
 800fd02:	695a      	ldr	r2, [r3, #20]
 800fd04:	68bb      	ldr	r3, [r7, #8]
 800fd06:	689b      	ldr	r3, [r3, #8]
 800fd08:	429a      	cmp	r2, r3
 800fd0a:	d903      	bls.n	800fd14 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800fd0c:	68bb      	ldr	r3, [r7, #8]
 800fd0e:	689a      	ldr	r2, [r3, #8]
 800fd10:	68bb      	ldr	r3, [r7, #8]
 800fd12:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fd14:	693b      	ldr	r3, [r7, #16]
 800fd16:	015a      	lsls	r2, r3, #5
 800fd18:	697b      	ldr	r3, [r7, #20]
 800fd1a:	4413      	add	r3, r2
 800fd1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd20:	691b      	ldr	r3, [r3, #16]
 800fd22:	693a      	ldr	r2, [r7, #16]
 800fd24:	0151      	lsls	r1, r2, #5
 800fd26:	697a      	ldr	r2, [r7, #20]
 800fd28:	440a      	add	r2, r1
 800fd2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fd32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800fd34:	693b      	ldr	r3, [r7, #16]
 800fd36:	015a      	lsls	r2, r3, #5
 800fd38:	697b      	ldr	r3, [r7, #20]
 800fd3a:	4413      	add	r3, r2
 800fd3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd40:	691a      	ldr	r2, [r3, #16]
 800fd42:	68bb      	ldr	r3, [r7, #8]
 800fd44:	695b      	ldr	r3, [r3, #20]
 800fd46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fd4a:	6939      	ldr	r1, [r7, #16]
 800fd4c:	0148      	lsls	r0, r1, #5
 800fd4e:	6979      	ldr	r1, [r7, #20]
 800fd50:	4401      	add	r1, r0
 800fd52:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800fd56:	4313      	orrs	r3, r2
 800fd58:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800fd5a:	79fb      	ldrb	r3, [r7, #7]
 800fd5c:	2b01      	cmp	r3, #1
 800fd5e:	d11e      	bne.n	800fd9e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800fd60:	68bb      	ldr	r3, [r7, #8]
 800fd62:	691b      	ldr	r3, [r3, #16]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d009      	beq.n	800fd7c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800fd68:	693b      	ldr	r3, [r7, #16]
 800fd6a:	015a      	lsls	r2, r3, #5
 800fd6c:	697b      	ldr	r3, [r7, #20]
 800fd6e:	4413      	add	r3, r2
 800fd70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd74:	461a      	mov	r2, r3
 800fd76:	68bb      	ldr	r3, [r7, #8]
 800fd78:	691b      	ldr	r3, [r3, #16]
 800fd7a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fd7c:	693b      	ldr	r3, [r7, #16]
 800fd7e:	015a      	lsls	r2, r3, #5
 800fd80:	697b      	ldr	r3, [r7, #20]
 800fd82:	4413      	add	r3, r2
 800fd84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	693a      	ldr	r2, [r7, #16]
 800fd8c:	0151      	lsls	r1, r2, #5
 800fd8e:	697a      	ldr	r2, [r7, #20]
 800fd90:	440a      	add	r2, r1
 800fd92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd96:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fd9a:	6013      	str	r3, [r2, #0]
 800fd9c:	e092      	b.n	800fec4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fd9e:	693b      	ldr	r3, [r7, #16]
 800fda0:	015a      	lsls	r2, r3, #5
 800fda2:	697b      	ldr	r3, [r7, #20]
 800fda4:	4413      	add	r3, r2
 800fda6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	693a      	ldr	r2, [r7, #16]
 800fdae:	0151      	lsls	r1, r2, #5
 800fdb0:	697a      	ldr	r2, [r7, #20]
 800fdb2:	440a      	add	r2, r1
 800fdb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fdb8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fdbc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800fdbe:	68bb      	ldr	r3, [r7, #8]
 800fdc0:	695b      	ldr	r3, [r3, #20]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d07e      	beq.n	800fec4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800fdc6:	697b      	ldr	r3, [r7, #20]
 800fdc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fdcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fdce:	68bb      	ldr	r3, [r7, #8]
 800fdd0:	781b      	ldrb	r3, [r3, #0]
 800fdd2:	f003 030f 	and.w	r3, r3, #15
 800fdd6:	2101      	movs	r1, #1
 800fdd8:	fa01 f303 	lsl.w	r3, r1, r3
 800fddc:	6979      	ldr	r1, [r7, #20]
 800fdde:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fde2:	4313      	orrs	r3, r2
 800fde4:	634b      	str	r3, [r1, #52]	; 0x34
 800fde6:	e06d      	b.n	800fec4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800fde8:	693b      	ldr	r3, [r7, #16]
 800fdea:	015a      	lsls	r2, r3, #5
 800fdec:	697b      	ldr	r3, [r7, #20]
 800fdee:	4413      	add	r3, r2
 800fdf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdf4:	691b      	ldr	r3, [r3, #16]
 800fdf6:	693a      	ldr	r2, [r7, #16]
 800fdf8:	0151      	lsls	r1, r2, #5
 800fdfa:	697a      	ldr	r2, [r7, #20]
 800fdfc:	440a      	add	r2, r1
 800fdfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fe02:	0cdb      	lsrs	r3, r3, #19
 800fe04:	04db      	lsls	r3, r3, #19
 800fe06:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800fe08:	693b      	ldr	r3, [r7, #16]
 800fe0a:	015a      	lsls	r2, r3, #5
 800fe0c:	697b      	ldr	r3, [r7, #20]
 800fe0e:	4413      	add	r3, r2
 800fe10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe14:	691b      	ldr	r3, [r3, #16]
 800fe16:	693a      	ldr	r2, [r7, #16]
 800fe18:	0151      	lsls	r1, r2, #5
 800fe1a:	697a      	ldr	r2, [r7, #20]
 800fe1c:	440a      	add	r2, r1
 800fe1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fe22:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fe26:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fe2a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800fe2c:	68bb      	ldr	r3, [r7, #8]
 800fe2e:	695b      	ldr	r3, [r3, #20]
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d003      	beq.n	800fe3c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800fe34:	68bb      	ldr	r3, [r7, #8]
 800fe36:	689a      	ldr	r2, [r3, #8]
 800fe38:	68bb      	ldr	r3, [r7, #8]
 800fe3a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fe3c:	693b      	ldr	r3, [r7, #16]
 800fe3e:	015a      	lsls	r2, r3, #5
 800fe40:	697b      	ldr	r3, [r7, #20]
 800fe42:	4413      	add	r3, r2
 800fe44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe48:	691b      	ldr	r3, [r3, #16]
 800fe4a:	693a      	ldr	r2, [r7, #16]
 800fe4c:	0151      	lsls	r1, r2, #5
 800fe4e:	697a      	ldr	r2, [r7, #20]
 800fe50:	440a      	add	r2, r1
 800fe52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fe56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fe5a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800fe5c:	693b      	ldr	r3, [r7, #16]
 800fe5e:	015a      	lsls	r2, r3, #5
 800fe60:	697b      	ldr	r3, [r7, #20]
 800fe62:	4413      	add	r3, r2
 800fe64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe68:	691a      	ldr	r2, [r3, #16]
 800fe6a:	68bb      	ldr	r3, [r7, #8]
 800fe6c:	689b      	ldr	r3, [r3, #8]
 800fe6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fe72:	6939      	ldr	r1, [r7, #16]
 800fe74:	0148      	lsls	r0, r1, #5
 800fe76:	6979      	ldr	r1, [r7, #20]
 800fe78:	4401      	add	r1, r0
 800fe7a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fe7e:	4313      	orrs	r3, r2
 800fe80:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800fe82:	79fb      	ldrb	r3, [r7, #7]
 800fe84:	2b01      	cmp	r3, #1
 800fe86:	d10d      	bne.n	800fea4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800fe88:	68bb      	ldr	r3, [r7, #8]
 800fe8a:	68db      	ldr	r3, [r3, #12]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d009      	beq.n	800fea4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800fe90:	68bb      	ldr	r3, [r7, #8]
 800fe92:	68d9      	ldr	r1, [r3, #12]
 800fe94:	693b      	ldr	r3, [r7, #16]
 800fe96:	015a      	lsls	r2, r3, #5
 800fe98:	697b      	ldr	r3, [r7, #20]
 800fe9a:	4413      	add	r3, r2
 800fe9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fea0:	460a      	mov	r2, r1
 800fea2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800fea4:	693b      	ldr	r3, [r7, #16]
 800fea6:	015a      	lsls	r2, r3, #5
 800fea8:	697b      	ldr	r3, [r7, #20]
 800feaa:	4413      	add	r3, r2
 800feac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	693a      	ldr	r2, [r7, #16]
 800feb4:	0151      	lsls	r1, r2, #5
 800feb6:	697a      	ldr	r2, [r7, #20]
 800feb8:	440a      	add	r2, r1
 800feba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800febe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fec2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fec4:	2300      	movs	r3, #0
}
 800fec6:	4618      	mov	r0, r3
 800fec8:	371c      	adds	r7, #28
 800feca:	46bd      	mov	sp, r7
 800fecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed0:	4770      	bx	lr

0800fed2 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800fed2:	b480      	push	{r7}
 800fed4:	b089      	sub	sp, #36	; 0x24
 800fed6:	af00      	add	r7, sp, #0
 800fed8:	60f8      	str	r0, [r7, #12]
 800feda:	60b9      	str	r1, [r7, #8]
 800fedc:	4611      	mov	r1, r2
 800fede:	461a      	mov	r2, r3
 800fee0:	460b      	mov	r3, r1
 800fee2:	71fb      	strb	r3, [r7, #7]
 800fee4:	4613      	mov	r3, r2
 800fee6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800feec:	68bb      	ldr	r3, [r7, #8]
 800feee:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800fef0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d11a      	bne.n	800ff2e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800fef8:	88bb      	ldrh	r3, [r7, #4]
 800fefa:	3303      	adds	r3, #3
 800fefc:	089b      	lsrs	r3, r3, #2
 800fefe:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ff00:	2300      	movs	r3, #0
 800ff02:	61bb      	str	r3, [r7, #24]
 800ff04:	e00f      	b.n	800ff26 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ff06:	79fb      	ldrb	r3, [r7, #7]
 800ff08:	031a      	lsls	r2, r3, #12
 800ff0a:	697b      	ldr	r3, [r7, #20]
 800ff0c:	4413      	add	r3, r2
 800ff0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ff12:	461a      	mov	r2, r3
 800ff14:	69fb      	ldr	r3, [r7, #28]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ff1a:	69fb      	ldr	r3, [r7, #28]
 800ff1c:	3304      	adds	r3, #4
 800ff1e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ff20:	69bb      	ldr	r3, [r7, #24]
 800ff22:	3301      	adds	r3, #1
 800ff24:	61bb      	str	r3, [r7, #24]
 800ff26:	69ba      	ldr	r2, [r7, #24]
 800ff28:	693b      	ldr	r3, [r7, #16]
 800ff2a:	429a      	cmp	r2, r3
 800ff2c:	d3eb      	bcc.n	800ff06 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ff2e:	2300      	movs	r3, #0
}
 800ff30:	4618      	mov	r0, r3
 800ff32:	3724      	adds	r7, #36	; 0x24
 800ff34:	46bd      	mov	sp, r7
 800ff36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3a:	4770      	bx	lr

0800ff3c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ff3c:	b480      	push	{r7}
 800ff3e:	b089      	sub	sp, #36	; 0x24
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	60f8      	str	r0, [r7, #12]
 800ff44:	60b9      	str	r1, [r7, #8]
 800ff46:	4613      	mov	r3, r2
 800ff48:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800ff4e:	68bb      	ldr	r3, [r7, #8]
 800ff50:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800ff52:	88fb      	ldrh	r3, [r7, #6]
 800ff54:	3303      	adds	r3, #3
 800ff56:	089b      	lsrs	r3, r3, #2
 800ff58:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800ff5a:	2300      	movs	r3, #0
 800ff5c:	61bb      	str	r3, [r7, #24]
 800ff5e:	e00b      	b.n	800ff78 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ff60:	697b      	ldr	r3, [r7, #20]
 800ff62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ff66:	681a      	ldr	r2, [r3, #0]
 800ff68:	69fb      	ldr	r3, [r7, #28]
 800ff6a:	601a      	str	r2, [r3, #0]
    pDest++;
 800ff6c:	69fb      	ldr	r3, [r7, #28]
 800ff6e:	3304      	adds	r3, #4
 800ff70:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800ff72:	69bb      	ldr	r3, [r7, #24]
 800ff74:	3301      	adds	r3, #1
 800ff76:	61bb      	str	r3, [r7, #24]
 800ff78:	69ba      	ldr	r2, [r7, #24]
 800ff7a:	693b      	ldr	r3, [r7, #16]
 800ff7c:	429a      	cmp	r2, r3
 800ff7e:	d3ef      	bcc.n	800ff60 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800ff80:	69fb      	ldr	r3, [r7, #28]
}
 800ff82:	4618      	mov	r0, r3
 800ff84:	3724      	adds	r7, #36	; 0x24
 800ff86:	46bd      	mov	sp, r7
 800ff88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff8c:	4770      	bx	lr

0800ff8e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ff8e:	b480      	push	{r7}
 800ff90:	b085      	sub	sp, #20
 800ff92:	af00      	add	r7, sp, #0
 800ff94:	6078      	str	r0, [r7, #4]
 800ff96:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ff9c:	683b      	ldr	r3, [r7, #0]
 800ff9e:	781b      	ldrb	r3, [r3, #0]
 800ffa0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ffa2:	683b      	ldr	r3, [r7, #0]
 800ffa4:	785b      	ldrb	r3, [r3, #1]
 800ffa6:	2b01      	cmp	r3, #1
 800ffa8:	d12c      	bne.n	8010004 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ffaa:	68bb      	ldr	r3, [r7, #8]
 800ffac:	015a      	lsls	r2, r3, #5
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	4413      	add	r3, r2
 800ffb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	db12      	blt.n	800ffe2 <USB_EPSetStall+0x54>
 800ffbc:	68bb      	ldr	r3, [r7, #8]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d00f      	beq.n	800ffe2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ffc2:	68bb      	ldr	r3, [r7, #8]
 800ffc4:	015a      	lsls	r2, r3, #5
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	4413      	add	r3, r2
 800ffca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	68ba      	ldr	r2, [r7, #8]
 800ffd2:	0151      	lsls	r1, r2, #5
 800ffd4:	68fa      	ldr	r2, [r7, #12]
 800ffd6:	440a      	add	r2, r1
 800ffd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ffdc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ffe0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ffe2:	68bb      	ldr	r3, [r7, #8]
 800ffe4:	015a      	lsls	r2, r3, #5
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	4413      	add	r3, r2
 800ffea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	68ba      	ldr	r2, [r7, #8]
 800fff2:	0151      	lsls	r1, r2, #5
 800fff4:	68fa      	ldr	r2, [r7, #12]
 800fff6:	440a      	add	r2, r1
 800fff8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fffc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010000:	6013      	str	r3, [r2, #0]
 8010002:	e02b      	b.n	801005c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010004:	68bb      	ldr	r3, [r7, #8]
 8010006:	015a      	lsls	r2, r3, #5
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	4413      	add	r3, r2
 801000c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	2b00      	cmp	r3, #0
 8010014:	db12      	blt.n	801003c <USB_EPSetStall+0xae>
 8010016:	68bb      	ldr	r3, [r7, #8]
 8010018:	2b00      	cmp	r3, #0
 801001a:	d00f      	beq.n	801003c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801001c:	68bb      	ldr	r3, [r7, #8]
 801001e:	015a      	lsls	r2, r3, #5
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	4413      	add	r3, r2
 8010024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	68ba      	ldr	r2, [r7, #8]
 801002c:	0151      	lsls	r1, r2, #5
 801002e:	68fa      	ldr	r2, [r7, #12]
 8010030:	440a      	add	r2, r1
 8010032:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010036:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801003a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801003c:	68bb      	ldr	r3, [r7, #8]
 801003e:	015a      	lsls	r2, r3, #5
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	4413      	add	r3, r2
 8010044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	68ba      	ldr	r2, [r7, #8]
 801004c:	0151      	lsls	r1, r2, #5
 801004e:	68fa      	ldr	r2, [r7, #12]
 8010050:	440a      	add	r2, r1
 8010052:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010056:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801005a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801005c:	2300      	movs	r3, #0
}
 801005e:	4618      	mov	r0, r3
 8010060:	3714      	adds	r7, #20
 8010062:	46bd      	mov	sp, r7
 8010064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010068:	4770      	bx	lr

0801006a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801006a:	b480      	push	{r7}
 801006c:	b085      	sub	sp, #20
 801006e:	af00      	add	r7, sp, #0
 8010070:	6078      	str	r0, [r7, #4]
 8010072:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010078:	683b      	ldr	r3, [r7, #0]
 801007a:	781b      	ldrb	r3, [r3, #0]
 801007c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801007e:	683b      	ldr	r3, [r7, #0]
 8010080:	785b      	ldrb	r3, [r3, #1]
 8010082:	2b01      	cmp	r3, #1
 8010084:	d128      	bne.n	80100d8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8010086:	68bb      	ldr	r3, [r7, #8]
 8010088:	015a      	lsls	r2, r3, #5
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	4413      	add	r3, r2
 801008e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	68ba      	ldr	r2, [r7, #8]
 8010096:	0151      	lsls	r1, r2, #5
 8010098:	68fa      	ldr	r2, [r7, #12]
 801009a:	440a      	add	r2, r1
 801009c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80100a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80100a4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80100a6:	683b      	ldr	r3, [r7, #0]
 80100a8:	78db      	ldrb	r3, [r3, #3]
 80100aa:	2b03      	cmp	r3, #3
 80100ac:	d003      	beq.n	80100b6 <USB_EPClearStall+0x4c>
 80100ae:	683b      	ldr	r3, [r7, #0]
 80100b0:	78db      	ldrb	r3, [r3, #3]
 80100b2:	2b02      	cmp	r3, #2
 80100b4:	d138      	bne.n	8010128 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80100b6:	68bb      	ldr	r3, [r7, #8]
 80100b8:	015a      	lsls	r2, r3, #5
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	4413      	add	r3, r2
 80100be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	68ba      	ldr	r2, [r7, #8]
 80100c6:	0151      	lsls	r1, r2, #5
 80100c8:	68fa      	ldr	r2, [r7, #12]
 80100ca:	440a      	add	r2, r1
 80100cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80100d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80100d4:	6013      	str	r3, [r2, #0]
 80100d6:	e027      	b.n	8010128 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80100d8:	68bb      	ldr	r3, [r7, #8]
 80100da:	015a      	lsls	r2, r3, #5
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	4413      	add	r3, r2
 80100e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	68ba      	ldr	r2, [r7, #8]
 80100e8:	0151      	lsls	r1, r2, #5
 80100ea:	68fa      	ldr	r2, [r7, #12]
 80100ec:	440a      	add	r2, r1
 80100ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80100f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80100f6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80100f8:	683b      	ldr	r3, [r7, #0]
 80100fa:	78db      	ldrb	r3, [r3, #3]
 80100fc:	2b03      	cmp	r3, #3
 80100fe:	d003      	beq.n	8010108 <USB_EPClearStall+0x9e>
 8010100:	683b      	ldr	r3, [r7, #0]
 8010102:	78db      	ldrb	r3, [r3, #3]
 8010104:	2b02      	cmp	r3, #2
 8010106:	d10f      	bne.n	8010128 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010108:	68bb      	ldr	r3, [r7, #8]
 801010a:	015a      	lsls	r2, r3, #5
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	4413      	add	r3, r2
 8010110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	68ba      	ldr	r2, [r7, #8]
 8010118:	0151      	lsls	r1, r2, #5
 801011a:	68fa      	ldr	r2, [r7, #12]
 801011c:	440a      	add	r2, r1
 801011e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010126:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8010128:	2300      	movs	r3, #0
}
 801012a:	4618      	mov	r0, r3
 801012c:	3714      	adds	r7, #20
 801012e:	46bd      	mov	sp, r7
 8010130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010134:	4770      	bx	lr

08010136 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8010136:	b480      	push	{r7}
 8010138:	b085      	sub	sp, #20
 801013a:	af00      	add	r7, sp, #0
 801013c:	6078      	str	r0, [r7, #4]
 801013e:	460b      	mov	r3, r1
 8010140:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	68fa      	ldr	r2, [r7, #12]
 8010150:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010154:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8010158:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010160:	681a      	ldr	r2, [r3, #0]
 8010162:	78fb      	ldrb	r3, [r7, #3]
 8010164:	011b      	lsls	r3, r3, #4
 8010166:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801016a:	68f9      	ldr	r1, [r7, #12]
 801016c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010170:	4313      	orrs	r3, r2
 8010172:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8010174:	2300      	movs	r3, #0
}
 8010176:	4618      	mov	r0, r3
 8010178:	3714      	adds	r7, #20
 801017a:	46bd      	mov	sp, r7
 801017c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010180:	4770      	bx	lr

08010182 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010182:	b580      	push	{r7, lr}
 8010184:	b084      	sub	sp, #16
 8010186:	af00      	add	r7, sp, #0
 8010188:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010194:	685b      	ldr	r3, [r3, #4]
 8010196:	68fa      	ldr	r2, [r7, #12]
 8010198:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801019c:	f023 0302 	bic.w	r3, r3, #2
 80101a0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80101a2:	2003      	movs	r0, #3
 80101a4:	f7fa ff54 	bl	800b050 <HAL_Delay>

  return HAL_OK;
 80101a8:	2300      	movs	r3, #0
}
 80101aa:	4618      	mov	r0, r3
 80101ac:	3710      	adds	r7, #16
 80101ae:	46bd      	mov	sp, r7
 80101b0:	bd80      	pop	{r7, pc}

080101b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80101b2:	b580      	push	{r7, lr}
 80101b4:	b084      	sub	sp, #16
 80101b6:	af00      	add	r7, sp, #0
 80101b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101c4:	685b      	ldr	r3, [r3, #4]
 80101c6:	68fa      	ldr	r2, [r7, #12]
 80101c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80101cc:	f043 0302 	orr.w	r3, r3, #2
 80101d0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80101d2:	2003      	movs	r0, #3
 80101d4:	f7fa ff3c 	bl	800b050 <HAL_Delay>

  return HAL_OK;
 80101d8:	2300      	movs	r3, #0
}
 80101da:	4618      	mov	r0, r3
 80101dc:	3710      	adds	r7, #16
 80101de:	46bd      	mov	sp, r7
 80101e0:	bd80      	pop	{r7, pc}

080101e2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80101e2:	b480      	push	{r7}
 80101e4:	b085      	sub	sp, #20
 80101e6:	af00      	add	r7, sp, #0
 80101e8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	695b      	ldr	r3, [r3, #20]
 80101ee:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	699b      	ldr	r3, [r3, #24]
 80101f4:	68fa      	ldr	r2, [r7, #12]
 80101f6:	4013      	ands	r3, r2
 80101f8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80101fa:	68fb      	ldr	r3, [r7, #12]
}
 80101fc:	4618      	mov	r0, r3
 80101fe:	3714      	adds	r7, #20
 8010200:	46bd      	mov	sp, r7
 8010202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010206:	4770      	bx	lr

08010208 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010208:	b480      	push	{r7}
 801020a:	b085      	sub	sp, #20
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801021a:	699b      	ldr	r3, [r3, #24]
 801021c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010224:	69db      	ldr	r3, [r3, #28]
 8010226:	68ba      	ldr	r2, [r7, #8]
 8010228:	4013      	ands	r3, r2
 801022a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801022c:	68bb      	ldr	r3, [r7, #8]
 801022e:	0c1b      	lsrs	r3, r3, #16
}
 8010230:	4618      	mov	r0, r3
 8010232:	3714      	adds	r7, #20
 8010234:	46bd      	mov	sp, r7
 8010236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801023a:	4770      	bx	lr

0801023c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801023c:	b480      	push	{r7}
 801023e:	b085      	sub	sp, #20
 8010240:	af00      	add	r7, sp, #0
 8010242:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801024e:	699b      	ldr	r3, [r3, #24]
 8010250:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010258:	69db      	ldr	r3, [r3, #28]
 801025a:	68ba      	ldr	r2, [r7, #8]
 801025c:	4013      	ands	r3, r2
 801025e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8010260:	68bb      	ldr	r3, [r7, #8]
 8010262:	b29b      	uxth	r3, r3
}
 8010264:	4618      	mov	r0, r3
 8010266:	3714      	adds	r7, #20
 8010268:	46bd      	mov	sp, r7
 801026a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801026e:	4770      	bx	lr

08010270 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010270:	b480      	push	{r7}
 8010272:	b085      	sub	sp, #20
 8010274:	af00      	add	r7, sp, #0
 8010276:	6078      	str	r0, [r7, #4]
 8010278:	460b      	mov	r3, r1
 801027a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8010280:	78fb      	ldrb	r3, [r7, #3]
 8010282:	015a      	lsls	r2, r3, #5
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	4413      	add	r3, r2
 8010288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801028c:	689b      	ldr	r3, [r3, #8]
 801028e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010296:	695b      	ldr	r3, [r3, #20]
 8010298:	68ba      	ldr	r2, [r7, #8]
 801029a:	4013      	ands	r3, r2
 801029c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801029e:	68bb      	ldr	r3, [r7, #8]
}
 80102a0:	4618      	mov	r0, r3
 80102a2:	3714      	adds	r7, #20
 80102a4:	46bd      	mov	sp, r7
 80102a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102aa:	4770      	bx	lr

080102ac <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80102ac:	b480      	push	{r7}
 80102ae:	b087      	sub	sp, #28
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	6078      	str	r0, [r7, #4]
 80102b4:	460b      	mov	r3, r1
 80102b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80102bc:	697b      	ldr	r3, [r7, #20]
 80102be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80102c2:	691b      	ldr	r3, [r3, #16]
 80102c4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80102c6:	697b      	ldr	r3, [r7, #20]
 80102c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80102cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102ce:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80102d0:	78fb      	ldrb	r3, [r7, #3]
 80102d2:	f003 030f 	and.w	r3, r3, #15
 80102d6:	68fa      	ldr	r2, [r7, #12]
 80102d8:	fa22 f303 	lsr.w	r3, r2, r3
 80102dc:	01db      	lsls	r3, r3, #7
 80102de:	b2db      	uxtb	r3, r3
 80102e0:	693a      	ldr	r2, [r7, #16]
 80102e2:	4313      	orrs	r3, r2
 80102e4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80102e6:	78fb      	ldrb	r3, [r7, #3]
 80102e8:	015a      	lsls	r2, r3, #5
 80102ea:	697b      	ldr	r3, [r7, #20]
 80102ec:	4413      	add	r3, r2
 80102ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102f2:	689b      	ldr	r3, [r3, #8]
 80102f4:	693a      	ldr	r2, [r7, #16]
 80102f6:	4013      	ands	r3, r2
 80102f8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80102fa:	68bb      	ldr	r3, [r7, #8]
}
 80102fc:	4618      	mov	r0, r3
 80102fe:	371c      	adds	r7, #28
 8010300:	46bd      	mov	sp, r7
 8010302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010306:	4770      	bx	lr

08010308 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010308:	b480      	push	{r7}
 801030a:	b083      	sub	sp, #12
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	695b      	ldr	r3, [r3, #20]
 8010314:	f003 0301 	and.w	r3, r3, #1
}
 8010318:	4618      	mov	r0, r3
 801031a:	370c      	adds	r7, #12
 801031c:	46bd      	mov	sp, r7
 801031e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010322:	4770      	bx	lr

08010324 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8010324:	b480      	push	{r7}
 8010326:	b085      	sub	sp, #20
 8010328:	af00      	add	r7, sp, #0
 801032a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	68fa      	ldr	r2, [r7, #12]
 801033a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801033e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8010342:	f023 0307 	bic.w	r3, r3, #7
 8010346:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801034e:	689b      	ldr	r3, [r3, #8]
 8010350:	f003 0306 	and.w	r3, r3, #6
 8010354:	2b04      	cmp	r3, #4
 8010356:	d109      	bne.n	801036c <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	68fa      	ldr	r2, [r7, #12]
 8010362:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010366:	f043 0303 	orr.w	r3, r3, #3
 801036a:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010372:	685b      	ldr	r3, [r3, #4]
 8010374:	68fa      	ldr	r2, [r7, #12]
 8010376:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801037a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801037e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010380:	2300      	movs	r3, #0
}
 8010382:	4618      	mov	r0, r3
 8010384:	3714      	adds	r7, #20
 8010386:	46bd      	mov	sp, r7
 8010388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801038c:	4770      	bx	lr
	...

08010390 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8010390:	b480      	push	{r7}
 8010392:	b087      	sub	sp, #28
 8010394:	af00      	add	r7, sp, #0
 8010396:	60f8      	str	r0, [r7, #12]
 8010398:	460b      	mov	r3, r1
 801039a:	607a      	str	r2, [r7, #4]
 801039c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	333c      	adds	r3, #60	; 0x3c
 80103a6:	3304      	adds	r3, #4
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80103ac:	693b      	ldr	r3, [r7, #16]
 80103ae:	4a26      	ldr	r2, [pc, #152]	; (8010448 <USB_EP0_OutStart+0xb8>)
 80103b0:	4293      	cmp	r3, r2
 80103b2:	d90a      	bls.n	80103ca <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80103b4:	697b      	ldr	r3, [r7, #20]
 80103b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80103c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80103c4:	d101      	bne.n	80103ca <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80103c6:	2300      	movs	r3, #0
 80103c8:	e037      	b.n	801043a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80103ca:	697b      	ldr	r3, [r7, #20]
 80103cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103d0:	461a      	mov	r2, r3
 80103d2:	2300      	movs	r3, #0
 80103d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80103d6:	697b      	ldr	r3, [r7, #20]
 80103d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103dc:	691b      	ldr	r3, [r3, #16]
 80103de:	697a      	ldr	r2, [r7, #20]
 80103e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80103e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80103e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80103ea:	697b      	ldr	r3, [r7, #20]
 80103ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103f0:	691b      	ldr	r3, [r3, #16]
 80103f2:	697a      	ldr	r2, [r7, #20]
 80103f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80103f8:	f043 0318 	orr.w	r3, r3, #24
 80103fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80103fe:	697b      	ldr	r3, [r7, #20]
 8010400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010404:	691b      	ldr	r3, [r3, #16]
 8010406:	697a      	ldr	r2, [r7, #20]
 8010408:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801040c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8010410:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8010412:	7afb      	ldrb	r3, [r7, #11]
 8010414:	2b01      	cmp	r3, #1
 8010416:	d10f      	bne.n	8010438 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010418:	697b      	ldr	r3, [r7, #20]
 801041a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801041e:	461a      	mov	r2, r3
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8010424:	697b      	ldr	r3, [r7, #20]
 8010426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	697a      	ldr	r2, [r7, #20]
 801042e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010432:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8010436:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010438:	2300      	movs	r3, #0
}
 801043a:	4618      	mov	r0, r3
 801043c:	371c      	adds	r7, #28
 801043e:	46bd      	mov	sp, r7
 8010440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010444:	4770      	bx	lr
 8010446:	bf00      	nop
 8010448:	4f54300a 	.word	0x4f54300a

0801044c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801044c:	b480      	push	{r7}
 801044e:	b085      	sub	sp, #20
 8010450:	af00      	add	r7, sp, #0
 8010452:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8010454:	2300      	movs	r3, #0
 8010456:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	3301      	adds	r3, #1
 801045c:	60fb      	str	r3, [r7, #12]
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	4a13      	ldr	r2, [pc, #76]	; (80104b0 <USB_CoreReset+0x64>)
 8010462:	4293      	cmp	r3, r2
 8010464:	d901      	bls.n	801046a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010466:	2303      	movs	r3, #3
 8010468:	e01b      	b.n	80104a2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	691b      	ldr	r3, [r3, #16]
 801046e:	2b00      	cmp	r3, #0
 8010470:	daf2      	bge.n	8010458 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010472:	2300      	movs	r3, #0
 8010474:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	691b      	ldr	r3, [r3, #16]
 801047a:	f043 0201 	orr.w	r2, r3, #1
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	3301      	adds	r3, #1
 8010486:	60fb      	str	r3, [r7, #12]
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	4a09      	ldr	r2, [pc, #36]	; (80104b0 <USB_CoreReset+0x64>)
 801048c:	4293      	cmp	r3, r2
 801048e:	d901      	bls.n	8010494 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010490:	2303      	movs	r3, #3
 8010492:	e006      	b.n	80104a2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	691b      	ldr	r3, [r3, #16]
 8010498:	f003 0301 	and.w	r3, r3, #1
 801049c:	2b01      	cmp	r3, #1
 801049e:	d0f0      	beq.n	8010482 <USB_CoreReset+0x36>

  return HAL_OK;
 80104a0:	2300      	movs	r3, #0
}
 80104a2:	4618      	mov	r0, r3
 80104a4:	3714      	adds	r7, #20
 80104a6:	46bd      	mov	sp, r7
 80104a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ac:	4770      	bx	lr
 80104ae:	bf00      	nop
 80104b0:	00030d40 	.word	0x00030d40

080104b4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80104b4:	b580      	push	{r7, lr}
 80104b6:	b084      	sub	sp, #16
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	6078      	str	r0, [r7, #4]
 80104bc:	460b      	mov	r3, r1
 80104be:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80104c0:	2300      	movs	r3, #0
 80104c2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	7c1b      	ldrb	r3, [r3, #16]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d115      	bne.n	80104f8 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80104cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80104d0:	2202      	movs	r2, #2
 80104d2:	2181      	movs	r1, #129	; 0x81
 80104d4:	6878      	ldr	r0, [r7, #4]
 80104d6:	f005 f8a6 	bl	8015626 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	2201      	movs	r2, #1
 80104de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80104e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80104e4:	2202      	movs	r2, #2
 80104e6:	2101      	movs	r1, #1
 80104e8:	6878      	ldr	r0, [r7, #4]
 80104ea:	f005 f89c 	bl	8015626 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	2201      	movs	r2, #1
 80104f2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 80104f6:	e012      	b.n	801051e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80104f8:	2340      	movs	r3, #64	; 0x40
 80104fa:	2202      	movs	r2, #2
 80104fc:	2181      	movs	r1, #129	; 0x81
 80104fe:	6878      	ldr	r0, [r7, #4]
 8010500:	f005 f891 	bl	8015626 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	2201      	movs	r2, #1
 8010508:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801050a:	2340      	movs	r3, #64	; 0x40
 801050c:	2202      	movs	r2, #2
 801050e:	2101      	movs	r1, #1
 8010510:	6878      	ldr	r0, [r7, #4]
 8010512:	f005 f888 	bl	8015626 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	2201      	movs	r2, #1
 801051a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801051e:	2308      	movs	r3, #8
 8010520:	2203      	movs	r2, #3
 8010522:	2182      	movs	r1, #130	; 0x82
 8010524:	6878      	ldr	r0, [r7, #4]
 8010526:	f005 f87e 	bl	8015626 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	2201      	movs	r2, #1
 801052e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8010530:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8010534:	f005 f9f4 	bl	8015920 <malloc>
 8010538:	4603      	mov	r3, r0
 801053a:	461a      	mov	r2, r3
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010548:	2b00      	cmp	r3, #0
 801054a:	d102      	bne.n	8010552 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 801054c:	2301      	movs	r3, #1
 801054e:	73fb      	strb	r3, [r7, #15]
 8010550:	e026      	b.n	80105a0 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010558:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8010564:	68bb      	ldr	r3, [r7, #8]
 8010566:	2200      	movs	r2, #0
 8010568:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 801056c:	68bb      	ldr	r3, [r7, #8]
 801056e:	2200      	movs	r2, #0
 8010570:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	7c1b      	ldrb	r3, [r3, #16]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d109      	bne.n	8010590 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801057c:	68bb      	ldr	r3, [r7, #8]
 801057e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010582:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010586:	2101      	movs	r1, #1
 8010588:	6878      	ldr	r0, [r7, #4]
 801058a:	f005 f93d 	bl	8015808 <USBD_LL_PrepareReceive>
 801058e:	e007      	b.n	80105a0 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010590:	68bb      	ldr	r3, [r7, #8]
 8010592:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010596:	2340      	movs	r3, #64	; 0x40
 8010598:	2101      	movs	r1, #1
 801059a:	6878      	ldr	r0, [r7, #4]
 801059c:	f005 f934 	bl	8015808 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80105a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80105a2:	4618      	mov	r0, r3
 80105a4:	3710      	adds	r7, #16
 80105a6:	46bd      	mov	sp, r7
 80105a8:	bd80      	pop	{r7, pc}

080105aa <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80105aa:	b580      	push	{r7, lr}
 80105ac:	b084      	sub	sp, #16
 80105ae:	af00      	add	r7, sp, #0
 80105b0:	6078      	str	r0, [r7, #4]
 80105b2:	460b      	mov	r3, r1
 80105b4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80105b6:	2300      	movs	r3, #0
 80105b8:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80105ba:	2181      	movs	r1, #129	; 0x81
 80105bc:	6878      	ldr	r0, [r7, #4]
 80105be:	f005 f858 	bl	8015672 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	2200      	movs	r2, #0
 80105c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80105c8:	2101      	movs	r1, #1
 80105ca:	6878      	ldr	r0, [r7, #4]
 80105cc:	f005 f851 	bl	8015672 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	2200      	movs	r2, #0
 80105d4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80105d8:	2182      	movs	r1, #130	; 0x82
 80105da:	6878      	ldr	r0, [r7, #4]
 80105dc:	f005 f849 	bl	8015672 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	2200      	movs	r2, #0
 80105e4:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d00e      	beq.n	801060e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80105f6:	685b      	ldr	r3, [r3, #4]
 80105f8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010600:	4618      	mov	r0, r3
 8010602:	f005 f995 	bl	8015930 <free>
    pdev->pClassData = NULL;
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	2200      	movs	r2, #0
 801060a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 801060e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010610:	4618      	mov	r0, r3
 8010612:	3710      	adds	r7, #16
 8010614:	46bd      	mov	sp, r7
 8010616:	bd80      	pop	{r7, pc}

08010618 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8010618:	b580      	push	{r7, lr}
 801061a:	b086      	sub	sp, #24
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]
 8010620:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010628:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801062a:	2300      	movs	r3, #0
 801062c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 801062e:	2300      	movs	r3, #0
 8010630:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8010632:	2300      	movs	r3, #0
 8010634:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010636:	683b      	ldr	r3, [r7, #0]
 8010638:	781b      	ldrb	r3, [r3, #0]
 801063a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801063e:	2b00      	cmp	r3, #0
 8010640:	d039      	beq.n	80106b6 <USBD_CDC_Setup+0x9e>
 8010642:	2b20      	cmp	r3, #32
 8010644:	d17c      	bne.n	8010740 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8010646:	683b      	ldr	r3, [r7, #0]
 8010648:	88db      	ldrh	r3, [r3, #6]
 801064a:	2b00      	cmp	r3, #0
 801064c:	d029      	beq.n	80106a2 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 801064e:	683b      	ldr	r3, [r7, #0]
 8010650:	781b      	ldrb	r3, [r3, #0]
 8010652:	b25b      	sxtb	r3, r3
 8010654:	2b00      	cmp	r3, #0
 8010656:	da11      	bge.n	801067c <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801065e:	689b      	ldr	r3, [r3, #8]
 8010660:	683a      	ldr	r2, [r7, #0]
 8010662:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8010664:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010666:	683a      	ldr	r2, [r7, #0]
 8010668:	88d2      	ldrh	r2, [r2, #6]
 801066a:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801066c:	6939      	ldr	r1, [r7, #16]
 801066e:	683b      	ldr	r3, [r7, #0]
 8010670:	88db      	ldrh	r3, [r3, #6]
 8010672:	461a      	mov	r2, r3
 8010674:	6878      	ldr	r0, [r7, #4]
 8010676:	f001 f9c9 	bl	8011a0c <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 801067a:	e068      	b.n	801074e <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 801067c:	683b      	ldr	r3, [r7, #0]
 801067e:	785a      	ldrb	r2, [r3, #1]
 8010680:	693b      	ldr	r3, [r7, #16]
 8010682:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8010686:	683b      	ldr	r3, [r7, #0]
 8010688:	88db      	ldrh	r3, [r3, #6]
 801068a:	b2da      	uxtb	r2, r3
 801068c:	693b      	ldr	r3, [r7, #16]
 801068e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8010692:	6939      	ldr	r1, [r7, #16]
 8010694:	683b      	ldr	r3, [r7, #0]
 8010696:	88db      	ldrh	r3, [r3, #6]
 8010698:	461a      	mov	r2, r3
 801069a:	6878      	ldr	r0, [r7, #4]
 801069c:	f001 f9e4 	bl	8011a68 <USBD_CtlPrepareRx>
    break;
 80106a0:	e055      	b.n	801074e <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80106a8:	689b      	ldr	r3, [r3, #8]
 80106aa:	683a      	ldr	r2, [r7, #0]
 80106ac:	7850      	ldrb	r0, [r2, #1]
 80106ae:	2200      	movs	r2, #0
 80106b0:	6839      	ldr	r1, [r7, #0]
 80106b2:	4798      	blx	r3
    break;
 80106b4:	e04b      	b.n	801074e <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80106b6:	683b      	ldr	r3, [r7, #0]
 80106b8:	785b      	ldrb	r3, [r3, #1]
 80106ba:	2b0a      	cmp	r3, #10
 80106bc:	d017      	beq.n	80106ee <USBD_CDC_Setup+0xd6>
 80106be:	2b0b      	cmp	r3, #11
 80106c0:	d029      	beq.n	8010716 <USBD_CDC_Setup+0xfe>
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d133      	bne.n	801072e <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80106cc:	2b03      	cmp	r3, #3
 80106ce:	d107      	bne.n	80106e0 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 80106d0:	f107 030c 	add.w	r3, r7, #12
 80106d4:	2202      	movs	r2, #2
 80106d6:	4619      	mov	r1, r3
 80106d8:	6878      	ldr	r0, [r7, #4]
 80106da:	f001 f997 	bl	8011a0c <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80106de:	e02e      	b.n	801073e <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 80106e0:	6839      	ldr	r1, [r7, #0]
 80106e2:	6878      	ldr	r0, [r7, #4]
 80106e4:	f001 f927 	bl	8011936 <USBD_CtlError>
			  ret = USBD_FAIL;
 80106e8:	2302      	movs	r3, #2
 80106ea:	75fb      	strb	r3, [r7, #23]
      break;
 80106ec:	e027      	b.n	801073e <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80106f4:	2b03      	cmp	r3, #3
 80106f6:	d107      	bne.n	8010708 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 80106f8:	f107 030f 	add.w	r3, r7, #15
 80106fc:	2201      	movs	r2, #1
 80106fe:	4619      	mov	r1, r3
 8010700:	6878      	ldr	r0, [r7, #4]
 8010702:	f001 f983 	bl	8011a0c <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8010706:	e01a      	b.n	801073e <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8010708:	6839      	ldr	r1, [r7, #0]
 801070a:	6878      	ldr	r0, [r7, #4]
 801070c:	f001 f913 	bl	8011936 <USBD_CtlError>
			  ret = USBD_FAIL;
 8010710:	2302      	movs	r3, #2
 8010712:	75fb      	strb	r3, [r7, #23]
      break;
 8010714:	e013      	b.n	801073e <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 801071c:	2b03      	cmp	r3, #3
 801071e:	d00d      	beq.n	801073c <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 8010720:	6839      	ldr	r1, [r7, #0]
 8010722:	6878      	ldr	r0, [r7, #4]
 8010724:	f001 f907 	bl	8011936 <USBD_CtlError>
			  ret = USBD_FAIL;
 8010728:	2302      	movs	r3, #2
 801072a:	75fb      	strb	r3, [r7, #23]
      }
      break;
 801072c:	e006      	b.n	801073c <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 801072e:	6839      	ldr	r1, [r7, #0]
 8010730:	6878      	ldr	r0, [r7, #4]
 8010732:	f001 f900 	bl	8011936 <USBD_CtlError>
      ret = USBD_FAIL;
 8010736:	2302      	movs	r3, #2
 8010738:	75fb      	strb	r3, [r7, #23]
      break;
 801073a:	e000      	b.n	801073e <USBD_CDC_Setup+0x126>
      break;
 801073c:	bf00      	nop
    }
    break;
 801073e:	e006      	b.n	801074e <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 8010740:	6839      	ldr	r1, [r7, #0]
 8010742:	6878      	ldr	r0, [r7, #4]
 8010744:	f001 f8f7 	bl	8011936 <USBD_CtlError>
    ret = USBD_FAIL;
 8010748:	2302      	movs	r3, #2
 801074a:	75fb      	strb	r3, [r7, #23]
    break;
 801074c:	bf00      	nop
  }

  return ret;
 801074e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010750:	4618      	mov	r0, r3
 8010752:	3718      	adds	r7, #24
 8010754:	46bd      	mov	sp, r7
 8010756:	bd80      	pop	{r7, pc}

08010758 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010758:	b580      	push	{r7, lr}
 801075a:	b084      	sub	sp, #16
 801075c:	af00      	add	r7, sp, #0
 801075e:	6078      	str	r0, [r7, #4]
 8010760:	460b      	mov	r3, r1
 8010762:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 801076a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8010772:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 801077a:	2b00      	cmp	r3, #0
 801077c:	d03a      	beq.n	80107f4 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801077e:	78fa      	ldrb	r2, [r7, #3]
 8010780:	6879      	ldr	r1, [r7, #4]
 8010782:	4613      	mov	r3, r2
 8010784:	009b      	lsls	r3, r3, #2
 8010786:	4413      	add	r3, r2
 8010788:	009b      	lsls	r3, r3, #2
 801078a:	440b      	add	r3, r1
 801078c:	331c      	adds	r3, #28
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	2b00      	cmp	r3, #0
 8010792:	d029      	beq.n	80107e8 <USBD_CDC_DataIn+0x90>
 8010794:	78fa      	ldrb	r2, [r7, #3]
 8010796:	6879      	ldr	r1, [r7, #4]
 8010798:	4613      	mov	r3, r2
 801079a:	009b      	lsls	r3, r3, #2
 801079c:	4413      	add	r3, r2
 801079e:	009b      	lsls	r3, r3, #2
 80107a0:	440b      	add	r3, r1
 80107a2:	331c      	adds	r3, #28
 80107a4:	681a      	ldr	r2, [r3, #0]
 80107a6:	78f9      	ldrb	r1, [r7, #3]
 80107a8:	68b8      	ldr	r0, [r7, #8]
 80107aa:	460b      	mov	r3, r1
 80107ac:	00db      	lsls	r3, r3, #3
 80107ae:	1a5b      	subs	r3, r3, r1
 80107b0:	009b      	lsls	r3, r3, #2
 80107b2:	4403      	add	r3, r0
 80107b4:	3344      	adds	r3, #68	; 0x44
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	fbb2 f1f3 	udiv	r1, r2, r3
 80107bc:	fb03 f301 	mul.w	r3, r3, r1
 80107c0:	1ad3      	subs	r3, r2, r3
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d110      	bne.n	80107e8 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80107c6:	78fa      	ldrb	r2, [r7, #3]
 80107c8:	6879      	ldr	r1, [r7, #4]
 80107ca:	4613      	mov	r3, r2
 80107cc:	009b      	lsls	r3, r3, #2
 80107ce:	4413      	add	r3, r2
 80107d0:	009b      	lsls	r3, r3, #2
 80107d2:	440b      	add	r3, r1
 80107d4:	331c      	adds	r3, #28
 80107d6:	2200      	movs	r2, #0
 80107d8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 80107da:	78f9      	ldrb	r1, [r7, #3]
 80107dc:	2300      	movs	r3, #0
 80107de:	2200      	movs	r2, #0
 80107e0:	6878      	ldr	r0, [r7, #4]
 80107e2:	f004 ffee 	bl	80157c2 <USBD_LL_Transmit>
 80107e6:	e003      	b.n	80107f0 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	2200      	movs	r2, #0
 80107ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80107f0:	2300      	movs	r3, #0
 80107f2:	e000      	b.n	80107f6 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80107f4:	2302      	movs	r3, #2
  }
}
 80107f6:	4618      	mov	r0, r3
 80107f8:	3710      	adds	r7, #16
 80107fa:	46bd      	mov	sp, r7
 80107fc:	bd80      	pop	{r7, pc}

080107fe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80107fe:	b580      	push	{r7, lr}
 8010800:	b084      	sub	sp, #16
 8010802:	af00      	add	r7, sp, #0
 8010804:	6078      	str	r0, [r7, #4]
 8010806:	460b      	mov	r3, r1
 8010808:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010810:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8010812:	78fb      	ldrb	r3, [r7, #3]
 8010814:	4619      	mov	r1, r3
 8010816:	6878      	ldr	r0, [r7, #4]
 8010818:	f005 f819 	bl	801584e <USBD_LL_GetRxDataSize>
 801081c:	4602      	mov	r2, r0
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 801082a:	2b00      	cmp	r3, #0
 801082c:	d00d      	beq.n	801084a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010834:	68db      	ldr	r3, [r3, #12]
 8010836:	68fa      	ldr	r2, [r7, #12]
 8010838:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801083c:	68fa      	ldr	r2, [r7, #12]
 801083e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8010842:	4611      	mov	r1, r2
 8010844:	4798      	blx	r3

    return USBD_OK;
 8010846:	2300      	movs	r3, #0
 8010848:	e000      	b.n	801084c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 801084a:	2302      	movs	r3, #2
  }
}
 801084c:	4618      	mov	r0, r3
 801084e:	3710      	adds	r7, #16
 8010850:	46bd      	mov	sp, r7
 8010852:	bd80      	pop	{r7, pc}

08010854 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8010854:	b580      	push	{r7, lr}
 8010856:	b084      	sub	sp, #16
 8010858:	af00      	add	r7, sp, #0
 801085a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010862:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801086a:	2b00      	cmp	r3, #0
 801086c:	d015      	beq.n	801089a <USBD_CDC_EP0_RxReady+0x46>
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010874:	2bff      	cmp	r3, #255	; 0xff
 8010876:	d010      	beq.n	801089a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801087e:	689b      	ldr	r3, [r3, #8]
 8010880:	68fa      	ldr	r2, [r7, #12]
 8010882:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8010886:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8010888:	68fa      	ldr	r2, [r7, #12]
 801088a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801088e:	b292      	uxth	r2, r2
 8010890:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	22ff      	movs	r2, #255	; 0xff
 8010896:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 801089a:	2300      	movs	r3, #0
}
 801089c:	4618      	mov	r0, r3
 801089e:	3710      	adds	r7, #16
 80108a0:	46bd      	mov	sp, r7
 80108a2:	bd80      	pop	{r7, pc}

080108a4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 80108a4:	b480      	push	{r7}
 80108a6:	b083      	sub	sp, #12
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	2243      	movs	r2, #67	; 0x43
 80108b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80108b2:	4b03      	ldr	r3, [pc, #12]	; (80108c0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80108b4:	4618      	mov	r0, r3
 80108b6:	370c      	adds	r7, #12
 80108b8:	46bd      	mov	sp, r7
 80108ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108be:	4770      	bx	lr
 80108c0:	20000d20 	.word	0x20000d20

080108c4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 80108c4:	b480      	push	{r7}
 80108c6:	b083      	sub	sp, #12
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	2243      	movs	r2, #67	; 0x43
 80108d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80108d2:	4b03      	ldr	r3, [pc, #12]	; (80108e0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80108d4:	4618      	mov	r0, r3
 80108d6:	370c      	adds	r7, #12
 80108d8:	46bd      	mov	sp, r7
 80108da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108de:	4770      	bx	lr
 80108e0:	20000cdc 	.word	0x20000cdc

080108e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 80108e4:	b480      	push	{r7}
 80108e6:	b083      	sub	sp, #12
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	2243      	movs	r2, #67	; 0x43
 80108f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80108f2:	4b03      	ldr	r3, [pc, #12]	; (8010900 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80108f4:	4618      	mov	r0, r3
 80108f6:	370c      	adds	r7, #12
 80108f8:	46bd      	mov	sp, r7
 80108fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108fe:	4770      	bx	lr
 8010900:	20000d64 	.word	0x20000d64

08010904 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8010904:	b480      	push	{r7}
 8010906:	b083      	sub	sp, #12
 8010908:	af00      	add	r7, sp, #0
 801090a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	220a      	movs	r2, #10
 8010910:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8010912:	4b03      	ldr	r3, [pc, #12]	; (8010920 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010914:	4618      	mov	r0, r3
 8010916:	370c      	adds	r7, #12
 8010918:	46bd      	mov	sp, r7
 801091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801091e:	4770      	bx	lr
 8010920:	20000c98 	.word	0x20000c98

08010924 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8010924:	b480      	push	{r7}
 8010926:	b085      	sub	sp, #20
 8010928:	af00      	add	r7, sp, #0
 801092a:	6078      	str	r0, [r7, #4]
 801092c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 801092e:	2302      	movs	r3, #2
 8010930:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8010932:	683b      	ldr	r3, [r7, #0]
 8010934:	2b00      	cmp	r3, #0
 8010936:	d005      	beq.n	8010944 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	683a      	ldr	r2, [r7, #0]
 801093c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8010940:	2300      	movs	r3, #0
 8010942:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8010944:	7bfb      	ldrb	r3, [r7, #15]
}
 8010946:	4618      	mov	r0, r3
 8010948:	3714      	adds	r7, #20
 801094a:	46bd      	mov	sp, r7
 801094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010950:	4770      	bx	lr

08010952 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8010952:	b480      	push	{r7}
 8010954:	b087      	sub	sp, #28
 8010956:	af00      	add	r7, sp, #0
 8010958:	60f8      	str	r0, [r7, #12]
 801095a:	60b9      	str	r1, [r7, #8]
 801095c:	4613      	mov	r3, r2
 801095e:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010966:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8010968:	697b      	ldr	r3, [r7, #20]
 801096a:	68ba      	ldr	r2, [r7, #8]
 801096c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8010970:	88fa      	ldrh	r2, [r7, #6]
 8010972:	697b      	ldr	r3, [r7, #20]
 8010974:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8010978:	2300      	movs	r3, #0
}
 801097a:	4618      	mov	r0, r3
 801097c:	371c      	adds	r7, #28
 801097e:	46bd      	mov	sp, r7
 8010980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010984:	4770      	bx	lr

08010986 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8010986:	b480      	push	{r7}
 8010988:	b085      	sub	sp, #20
 801098a:	af00      	add	r7, sp, #0
 801098c:	6078      	str	r0, [r7, #4]
 801098e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010996:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	683a      	ldr	r2, [r7, #0]
 801099c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80109a0:	2300      	movs	r3, #0
}
 80109a2:	4618      	mov	r0, r3
 80109a4:	3714      	adds	r7, #20
 80109a6:	46bd      	mov	sp, r7
 80109a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ac:	4770      	bx	lr

080109ae <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80109ae:	b580      	push	{r7, lr}
 80109b0:	b084      	sub	sp, #16
 80109b2:	af00      	add	r7, sp, #0
 80109b4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80109bc:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d01c      	beq.n	8010a02 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d115      	bne.n	80109fe <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	2201      	movs	r2, #1
 80109d6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80109f0:	b29b      	uxth	r3, r3
 80109f2:	2181      	movs	r1, #129	; 0x81
 80109f4:	6878      	ldr	r0, [r7, #4]
 80109f6:	f004 fee4 	bl	80157c2 <USBD_LL_Transmit>

      return USBD_OK;
 80109fa:	2300      	movs	r3, #0
 80109fc:	e002      	b.n	8010a04 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80109fe:	2301      	movs	r3, #1
 8010a00:	e000      	b.n	8010a04 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8010a02:	2302      	movs	r3, #2
  }
}
 8010a04:	4618      	mov	r0, r3
 8010a06:	3710      	adds	r7, #16
 8010a08:	46bd      	mov	sp, r7
 8010a0a:	bd80      	pop	{r7, pc}

08010a0c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b084      	sub	sp, #16
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010a1a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d017      	beq.n	8010a56 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	7c1b      	ldrb	r3, [r3, #16]
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d109      	bne.n	8010a42 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010a34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010a38:	2101      	movs	r1, #1
 8010a3a:	6878      	ldr	r0, [r7, #4]
 8010a3c:	f004 fee4 	bl	8015808 <USBD_LL_PrepareReceive>
 8010a40:	e007      	b.n	8010a52 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010a48:	2340      	movs	r3, #64	; 0x40
 8010a4a:	2101      	movs	r1, #1
 8010a4c:	6878      	ldr	r0, [r7, #4]
 8010a4e:	f004 fedb 	bl	8015808 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8010a52:	2300      	movs	r3, #0
 8010a54:	e000      	b.n	8010a58 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8010a56:	2302      	movs	r3, #2
  }
}
 8010a58:	4618      	mov	r0, r3
 8010a5a:	3710      	adds	r7, #16
 8010a5c:	46bd      	mov	sp, r7
 8010a5e:	bd80      	pop	{r7, pc}

08010a60 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010a60:	b580      	push	{r7, lr}
 8010a62:	b084      	sub	sp, #16
 8010a64:	af00      	add	r7, sp, #0
 8010a66:	60f8      	str	r0, [r7, #12]
 8010a68:	60b9      	str	r1, [r7, #8]
 8010a6a:	4613      	mov	r3, r2
 8010a6c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d101      	bne.n	8010a78 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8010a74:	2302      	movs	r3, #2
 8010a76:	e01a      	b.n	8010aae <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d003      	beq.n	8010a8a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	2200      	movs	r2, #0
 8010a86:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8010a8a:	68bb      	ldr	r3, [r7, #8]
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d003      	beq.n	8010a98 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	68ba      	ldr	r2, [r7, #8]
 8010a94:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	2201      	movs	r2, #1
 8010a9c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	79fa      	ldrb	r2, [r7, #7]
 8010aa4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8010aa6:	68f8      	ldr	r0, [r7, #12]
 8010aa8:	f004 fd56 	bl	8015558 <USBD_LL_Init>

  return USBD_OK;
 8010aac:	2300      	movs	r3, #0
}
 8010aae:	4618      	mov	r0, r3
 8010ab0:	3710      	adds	r7, #16
 8010ab2:	46bd      	mov	sp, r7
 8010ab4:	bd80      	pop	{r7, pc}

08010ab6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010ab6:	b480      	push	{r7}
 8010ab8:	b085      	sub	sp, #20
 8010aba:	af00      	add	r7, sp, #0
 8010abc:	6078      	str	r0, [r7, #4]
 8010abe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8010ac4:	683b      	ldr	r3, [r7, #0]
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d006      	beq.n	8010ad8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	683a      	ldr	r2, [r7, #0]
 8010ace:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	73fb      	strb	r3, [r7, #15]
 8010ad6:	e001      	b.n	8010adc <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8010ad8:	2302      	movs	r3, #2
 8010ada:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8010adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ade:	4618      	mov	r0, r3
 8010ae0:	3714      	adds	r7, #20
 8010ae2:	46bd      	mov	sp, r7
 8010ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae8:	4770      	bx	lr

08010aea <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8010aea:	b580      	push	{r7, lr}
 8010aec:	b082      	sub	sp, #8
 8010aee:	af00      	add	r7, sp, #0
 8010af0:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8010af2:	6878      	ldr	r0, [r7, #4]
 8010af4:	f004 fd7c 	bl	80155f0 <USBD_LL_Start>

  return USBD_OK;
 8010af8:	2300      	movs	r3, #0
}
 8010afa:	4618      	mov	r0, r3
 8010afc:	3708      	adds	r7, #8
 8010afe:	46bd      	mov	sp, r7
 8010b00:	bd80      	pop	{r7, pc}

08010b02 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8010b02:	b480      	push	{r7}
 8010b04:	b083      	sub	sp, #12
 8010b06:	af00      	add	r7, sp, #0
 8010b08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010b0a:	2300      	movs	r3, #0
}
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	370c      	adds	r7, #12
 8010b10:	46bd      	mov	sp, r7
 8010b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b16:	4770      	bx	lr

08010b18 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	b084      	sub	sp, #16
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	6078      	str	r0, [r7, #4]
 8010b20:	460b      	mov	r3, r1
 8010b22:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8010b24:	2302      	movs	r3, #2
 8010b26:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d00c      	beq.n	8010b4c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	78fa      	ldrb	r2, [r7, #3]
 8010b3c:	4611      	mov	r1, r2
 8010b3e:	6878      	ldr	r0, [r7, #4]
 8010b40:	4798      	blx	r3
 8010b42:	4603      	mov	r3, r0
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d101      	bne.n	8010b4c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8010b48:	2300      	movs	r3, #0
 8010b4a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8010b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b4e:	4618      	mov	r0, r3
 8010b50:	3710      	adds	r7, #16
 8010b52:	46bd      	mov	sp, r7
 8010b54:	bd80      	pop	{r7, pc}

08010b56 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8010b56:	b580      	push	{r7, lr}
 8010b58:	b082      	sub	sp, #8
 8010b5a:	af00      	add	r7, sp, #0
 8010b5c:	6078      	str	r0, [r7, #4]
 8010b5e:	460b      	mov	r3, r1
 8010b60:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010b68:	685b      	ldr	r3, [r3, #4]
 8010b6a:	78fa      	ldrb	r2, [r7, #3]
 8010b6c:	4611      	mov	r1, r2
 8010b6e:	6878      	ldr	r0, [r7, #4]
 8010b70:	4798      	blx	r3
  return USBD_OK;
 8010b72:	2300      	movs	r3, #0
}
 8010b74:	4618      	mov	r0, r3
 8010b76:	3708      	adds	r7, #8
 8010b78:	46bd      	mov	sp, r7
 8010b7a:	bd80      	pop	{r7, pc}

08010b7c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b082      	sub	sp, #8
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]
 8010b84:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8010b8c:	6839      	ldr	r1, [r7, #0]
 8010b8e:	4618      	mov	r0, r3
 8010b90:	f000 fe94 	bl	80118bc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	2201      	movs	r2, #1
 8010b98:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8010ba2:	461a      	mov	r2, r3
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8010bb0:	f003 031f 	and.w	r3, r3, #31
 8010bb4:	2b01      	cmp	r3, #1
 8010bb6:	d00c      	beq.n	8010bd2 <USBD_LL_SetupStage+0x56>
 8010bb8:	2b01      	cmp	r3, #1
 8010bba:	d302      	bcc.n	8010bc2 <USBD_LL_SetupStage+0x46>
 8010bbc:	2b02      	cmp	r3, #2
 8010bbe:	d010      	beq.n	8010be2 <USBD_LL_SetupStage+0x66>
 8010bc0:	e017      	b.n	8010bf2 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8010bc8:	4619      	mov	r1, r3
 8010bca:	6878      	ldr	r0, [r7, #4]
 8010bcc:	f000 fa04 	bl	8010fd8 <USBD_StdDevReq>
    break;
 8010bd0:	e01a      	b.n	8010c08 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8010bd8:	4619      	mov	r1, r3
 8010bda:	6878      	ldr	r0, [r7, #4]
 8010bdc:	f000 fa66 	bl	80110ac <USBD_StdItfReq>
    break;
 8010be0:	e012      	b.n	8010c08 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8010be8:	4619      	mov	r1, r3
 8010bea:	6878      	ldr	r0, [r7, #4]
 8010bec:	f000 faa4 	bl	8011138 <USBD_StdEPReq>
    break;
 8010bf0:	e00a      	b.n	8010c08 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8010bf8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010bfc:	b2db      	uxtb	r3, r3
 8010bfe:	4619      	mov	r1, r3
 8010c00:	6878      	ldr	r0, [r7, #4]
 8010c02:	f004 fd55 	bl	80156b0 <USBD_LL_StallEP>
    break;
 8010c06:	bf00      	nop
  }

  return USBD_OK;
 8010c08:	2300      	movs	r3, #0
}
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	3708      	adds	r7, #8
 8010c0e:	46bd      	mov	sp, r7
 8010c10:	bd80      	pop	{r7, pc}

08010c12 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010c12:	b580      	push	{r7, lr}
 8010c14:	b086      	sub	sp, #24
 8010c16:	af00      	add	r7, sp, #0
 8010c18:	60f8      	str	r0, [r7, #12]
 8010c1a:	460b      	mov	r3, r1
 8010c1c:	607a      	str	r2, [r7, #4]
 8010c1e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8010c20:	7afb      	ldrb	r3, [r7, #11]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d14b      	bne.n	8010cbe <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010c2c:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8010c34:	2b03      	cmp	r3, #3
 8010c36:	d134      	bne.n	8010ca2 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8010c38:	697b      	ldr	r3, [r7, #20]
 8010c3a:	68da      	ldr	r2, [r3, #12]
 8010c3c:	697b      	ldr	r3, [r7, #20]
 8010c3e:	691b      	ldr	r3, [r3, #16]
 8010c40:	429a      	cmp	r2, r3
 8010c42:	d919      	bls.n	8010c78 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8010c44:	697b      	ldr	r3, [r7, #20]
 8010c46:	68da      	ldr	r2, [r3, #12]
 8010c48:	697b      	ldr	r3, [r7, #20]
 8010c4a:	691b      	ldr	r3, [r3, #16]
 8010c4c:	1ad2      	subs	r2, r2, r3
 8010c4e:	697b      	ldr	r3, [r7, #20]
 8010c50:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8010c52:	697b      	ldr	r3, [r7, #20]
 8010c54:	68da      	ldr	r2, [r3, #12]
 8010c56:	697b      	ldr	r3, [r7, #20]
 8010c58:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8010c5a:	429a      	cmp	r2, r3
 8010c5c:	d203      	bcs.n	8010c66 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8010c5e:	697b      	ldr	r3, [r7, #20]
 8010c60:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8010c62:	b29b      	uxth	r3, r3
 8010c64:	e002      	b.n	8010c6c <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8010c66:	697b      	ldr	r3, [r7, #20]
 8010c68:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8010c6a:	b29b      	uxth	r3, r3
 8010c6c:	461a      	mov	r2, r3
 8010c6e:	6879      	ldr	r1, [r7, #4]
 8010c70:	68f8      	ldr	r0, [r7, #12]
 8010c72:	f000 ff17 	bl	8011aa4 <USBD_CtlContinueRx>
 8010c76:	e038      	b.n	8010cea <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010c7e:	691b      	ldr	r3, [r3, #16]
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d00a      	beq.n	8010c9a <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8010c8a:	2b03      	cmp	r3, #3
 8010c8c:	d105      	bne.n	8010c9a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010c94:	691b      	ldr	r3, [r3, #16]
 8010c96:	68f8      	ldr	r0, [r7, #12]
 8010c98:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8010c9a:	68f8      	ldr	r0, [r7, #12]
 8010c9c:	f000 ff14 	bl	8011ac8 <USBD_CtlSendStatus>
 8010ca0:	e023      	b.n	8010cea <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8010ca8:	2b05      	cmp	r3, #5
 8010caa:	d11e      	bne.n	8010cea <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	2200      	movs	r2, #0
 8010cb0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8010cb4:	2100      	movs	r1, #0
 8010cb6:	68f8      	ldr	r0, [r7, #12]
 8010cb8:	f004 fcfa 	bl	80156b0 <USBD_LL_StallEP>
 8010cbc:	e015      	b.n	8010cea <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010cc4:	699b      	ldr	r3, [r3, #24]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d00d      	beq.n	8010ce6 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8010cd0:	2b03      	cmp	r3, #3
 8010cd2:	d108      	bne.n	8010ce6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010cda:	699b      	ldr	r3, [r3, #24]
 8010cdc:	7afa      	ldrb	r2, [r7, #11]
 8010cde:	4611      	mov	r1, r2
 8010ce0:	68f8      	ldr	r0, [r7, #12]
 8010ce2:	4798      	blx	r3
 8010ce4:	e001      	b.n	8010cea <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8010ce6:	2302      	movs	r3, #2
 8010ce8:	e000      	b.n	8010cec <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8010cea:	2300      	movs	r3, #0
}
 8010cec:	4618      	mov	r0, r3
 8010cee:	3718      	adds	r7, #24
 8010cf0:	46bd      	mov	sp, r7
 8010cf2:	bd80      	pop	{r7, pc}

08010cf4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8010cf4:	b580      	push	{r7, lr}
 8010cf6:	b086      	sub	sp, #24
 8010cf8:	af00      	add	r7, sp, #0
 8010cfa:	60f8      	str	r0, [r7, #12]
 8010cfc:	460b      	mov	r3, r1
 8010cfe:	607a      	str	r2, [r7, #4]
 8010d00:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8010d02:	7afb      	ldrb	r3, [r7, #11]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d17f      	bne.n	8010e08 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	3314      	adds	r3, #20
 8010d0c:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8010d14:	2b02      	cmp	r3, #2
 8010d16:	d15c      	bne.n	8010dd2 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8010d18:	697b      	ldr	r3, [r7, #20]
 8010d1a:	68da      	ldr	r2, [r3, #12]
 8010d1c:	697b      	ldr	r3, [r7, #20]
 8010d1e:	691b      	ldr	r3, [r3, #16]
 8010d20:	429a      	cmp	r2, r3
 8010d22:	d915      	bls.n	8010d50 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8010d24:	697b      	ldr	r3, [r7, #20]
 8010d26:	68da      	ldr	r2, [r3, #12]
 8010d28:	697b      	ldr	r3, [r7, #20]
 8010d2a:	691b      	ldr	r3, [r3, #16]
 8010d2c:	1ad2      	subs	r2, r2, r3
 8010d2e:	697b      	ldr	r3, [r7, #20]
 8010d30:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8010d32:	697b      	ldr	r3, [r7, #20]
 8010d34:	68db      	ldr	r3, [r3, #12]
 8010d36:	b29b      	uxth	r3, r3
 8010d38:	461a      	mov	r2, r3
 8010d3a:	6879      	ldr	r1, [r7, #4]
 8010d3c:	68f8      	ldr	r0, [r7, #12]
 8010d3e:	f000 fe81 	bl	8011a44 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8010d42:	2300      	movs	r3, #0
 8010d44:	2200      	movs	r2, #0
 8010d46:	2100      	movs	r1, #0
 8010d48:	68f8      	ldr	r0, [r7, #12]
 8010d4a:	f004 fd5d 	bl	8015808 <USBD_LL_PrepareReceive>
 8010d4e:	e04e      	b.n	8010dee <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8010d50:	697b      	ldr	r3, [r7, #20]
 8010d52:	689b      	ldr	r3, [r3, #8]
 8010d54:	697a      	ldr	r2, [r7, #20]
 8010d56:	6912      	ldr	r2, [r2, #16]
 8010d58:	fbb3 f1f2 	udiv	r1, r3, r2
 8010d5c:	fb02 f201 	mul.w	r2, r2, r1
 8010d60:	1a9b      	subs	r3, r3, r2
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d11c      	bne.n	8010da0 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8010d66:	697b      	ldr	r3, [r7, #20]
 8010d68:	689a      	ldr	r2, [r3, #8]
 8010d6a:	697b      	ldr	r3, [r7, #20]
 8010d6c:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8010d6e:	429a      	cmp	r2, r3
 8010d70:	d316      	bcc.n	8010da0 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8010d72:	697b      	ldr	r3, [r7, #20]
 8010d74:	689a      	ldr	r2, [r3, #8]
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8010d7c:	429a      	cmp	r2, r3
 8010d7e:	d20f      	bcs.n	8010da0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8010d80:	2200      	movs	r2, #0
 8010d82:	2100      	movs	r1, #0
 8010d84:	68f8      	ldr	r0, [r7, #12]
 8010d86:	f000 fe5d 	bl	8011a44 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	2200      	movs	r2, #0
 8010d8e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8010d92:	2300      	movs	r3, #0
 8010d94:	2200      	movs	r2, #0
 8010d96:	2100      	movs	r1, #0
 8010d98:	68f8      	ldr	r0, [r7, #12]
 8010d9a:	f004 fd35 	bl	8015808 <USBD_LL_PrepareReceive>
 8010d9e:	e026      	b.n	8010dee <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010da6:	68db      	ldr	r3, [r3, #12]
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d00a      	beq.n	8010dc2 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8010db2:	2b03      	cmp	r3, #3
 8010db4:	d105      	bne.n	8010dc2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010dbc:	68db      	ldr	r3, [r3, #12]
 8010dbe:	68f8      	ldr	r0, [r7, #12]
 8010dc0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8010dc2:	2180      	movs	r1, #128	; 0x80
 8010dc4:	68f8      	ldr	r0, [r7, #12]
 8010dc6:	f004 fc73 	bl	80156b0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8010dca:	68f8      	ldr	r0, [r7, #12]
 8010dcc:	f000 fe8f 	bl	8011aee <USBD_CtlReceiveStatus>
 8010dd0:	e00d      	b.n	8010dee <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8010dd8:	2b04      	cmp	r3, #4
 8010dda:	d004      	beq.n	8010de6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d103      	bne.n	8010dee <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8010de6:	2180      	movs	r1, #128	; 0x80
 8010de8:	68f8      	ldr	r0, [r7, #12]
 8010dea:	f004 fc61 	bl	80156b0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8010df4:	2b01      	cmp	r3, #1
 8010df6:	d11d      	bne.n	8010e34 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8010df8:	68f8      	ldr	r0, [r7, #12]
 8010dfa:	f7ff fe82 	bl	8010b02 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	2200      	movs	r2, #0
 8010e02:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8010e06:	e015      	b.n	8010e34 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010e0e:	695b      	ldr	r3, [r3, #20]
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d00d      	beq.n	8010e30 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8010e1a:	2b03      	cmp	r3, #3
 8010e1c:	d108      	bne.n	8010e30 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010e24:	695b      	ldr	r3, [r3, #20]
 8010e26:	7afa      	ldrb	r2, [r7, #11]
 8010e28:	4611      	mov	r1, r2
 8010e2a:	68f8      	ldr	r0, [r7, #12]
 8010e2c:	4798      	blx	r3
 8010e2e:	e001      	b.n	8010e34 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8010e30:	2302      	movs	r3, #2
 8010e32:	e000      	b.n	8010e36 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8010e34:	2300      	movs	r3, #0
}
 8010e36:	4618      	mov	r0, r3
 8010e38:	3718      	adds	r7, #24
 8010e3a:	46bd      	mov	sp, r7
 8010e3c:	bd80      	pop	{r7, pc}

08010e3e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8010e3e:	b580      	push	{r7, lr}
 8010e40:	b082      	sub	sp, #8
 8010e42:	af00      	add	r7, sp, #0
 8010e44:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010e46:	2340      	movs	r3, #64	; 0x40
 8010e48:	2200      	movs	r2, #0
 8010e4a:	2100      	movs	r1, #0
 8010e4c:	6878      	ldr	r0, [r7, #4]
 8010e4e:	f004 fbea 	bl	8015626 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	2201      	movs	r2, #1
 8010e56:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	2240      	movs	r2, #64	; 0x40
 8010e5e:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010e62:	2340      	movs	r3, #64	; 0x40
 8010e64:	2200      	movs	r2, #0
 8010e66:	2180      	movs	r1, #128	; 0x80
 8010e68:	6878      	ldr	r0, [r7, #4]
 8010e6a:	f004 fbdc 	bl	8015626 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	2201      	movs	r2, #1
 8010e72:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	2240      	movs	r2, #64	; 0x40
 8010e78:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	2201      	movs	r2, #1
 8010e7e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	2200      	movs	r2, #0
 8010e86:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	2200      	movs	r2, #0
 8010e8e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	2200      	movs	r2, #0
 8010e94:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d009      	beq.n	8010eb6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010ea8:	685b      	ldr	r3, [r3, #4]
 8010eaa:	687a      	ldr	r2, [r7, #4]
 8010eac:	6852      	ldr	r2, [r2, #4]
 8010eae:	b2d2      	uxtb	r2, r2
 8010eb0:	4611      	mov	r1, r2
 8010eb2:	6878      	ldr	r0, [r7, #4]
 8010eb4:	4798      	blx	r3
  }

  return USBD_OK;
 8010eb6:	2300      	movs	r3, #0
}
 8010eb8:	4618      	mov	r0, r3
 8010eba:	3708      	adds	r7, #8
 8010ebc:	46bd      	mov	sp, r7
 8010ebe:	bd80      	pop	{r7, pc}

08010ec0 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8010ec0:	b480      	push	{r7}
 8010ec2:	b083      	sub	sp, #12
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	6078      	str	r0, [r7, #4]
 8010ec8:	460b      	mov	r3, r1
 8010eca:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	78fa      	ldrb	r2, [r7, #3]
 8010ed0:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8010ed2:	2300      	movs	r3, #0
}
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	370c      	adds	r7, #12
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ede:	4770      	bx	lr

08010ee0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8010ee0:	b480      	push	{r7}
 8010ee2:	b083      	sub	sp, #12
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	2204      	movs	r2, #4
 8010ef8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8010efc:	2300      	movs	r3, #0
}
 8010efe:	4618      	mov	r0, r3
 8010f00:	370c      	adds	r7, #12
 8010f02:	46bd      	mov	sp, r7
 8010f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f08:	4770      	bx	lr

08010f0a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8010f0a:	b480      	push	{r7}
 8010f0c:	b083      	sub	sp, #12
 8010f0e:	af00      	add	r7, sp, #0
 8010f10:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8010f1e:	2300      	movs	r3, #0
}
 8010f20:	4618      	mov	r0, r3
 8010f22:	370c      	adds	r7, #12
 8010f24:	46bd      	mov	sp, r7
 8010f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f2a:	4770      	bx	lr

08010f2c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8010f2c:	b580      	push	{r7, lr}
 8010f2e:	b082      	sub	sp, #8
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8010f3a:	2b03      	cmp	r3, #3
 8010f3c:	d10b      	bne.n	8010f56 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010f44:	69db      	ldr	r3, [r3, #28]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d005      	beq.n	8010f56 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010f50:	69db      	ldr	r3, [r3, #28]
 8010f52:	6878      	ldr	r0, [r7, #4]
 8010f54:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8010f56:	2300      	movs	r3, #0
}
 8010f58:	4618      	mov	r0, r3
 8010f5a:	3708      	adds	r7, #8
 8010f5c:	46bd      	mov	sp, r7
 8010f5e:	bd80      	pop	{r7, pc}

08010f60 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8010f60:	b480      	push	{r7}
 8010f62:	b083      	sub	sp, #12
 8010f64:	af00      	add	r7, sp, #0
 8010f66:	6078      	str	r0, [r7, #4]
 8010f68:	460b      	mov	r3, r1
 8010f6a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8010f6c:	2300      	movs	r3, #0
}
 8010f6e:	4618      	mov	r0, r3
 8010f70:	370c      	adds	r7, #12
 8010f72:	46bd      	mov	sp, r7
 8010f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f78:	4770      	bx	lr

08010f7a <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8010f7a:	b480      	push	{r7}
 8010f7c:	b083      	sub	sp, #12
 8010f7e:	af00      	add	r7, sp, #0
 8010f80:	6078      	str	r0, [r7, #4]
 8010f82:	460b      	mov	r3, r1
 8010f84:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8010f86:	2300      	movs	r3, #0
}
 8010f88:	4618      	mov	r0, r3
 8010f8a:	370c      	adds	r7, #12
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f92:	4770      	bx	lr

08010f94 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8010f94:	b480      	push	{r7}
 8010f96:	b083      	sub	sp, #12
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010f9c:	2300      	movs	r3, #0
}
 8010f9e:	4618      	mov	r0, r3
 8010fa0:	370c      	adds	r7, #12
 8010fa2:	46bd      	mov	sp, r7
 8010fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fa8:	4770      	bx	lr

08010faa <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8010faa:	b580      	push	{r7, lr}
 8010fac:	b082      	sub	sp, #8
 8010fae:	af00      	add	r7, sp, #0
 8010fb0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	2201      	movs	r2, #1
 8010fb6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8010fc0:	685b      	ldr	r3, [r3, #4]
 8010fc2:	687a      	ldr	r2, [r7, #4]
 8010fc4:	6852      	ldr	r2, [r2, #4]
 8010fc6:	b2d2      	uxtb	r2, r2
 8010fc8:	4611      	mov	r1, r2
 8010fca:	6878      	ldr	r0, [r7, #4]
 8010fcc:	4798      	blx	r3

  return USBD_OK;
 8010fce:	2300      	movs	r3, #0
}
 8010fd0:	4618      	mov	r0, r3
 8010fd2:	3708      	adds	r7, #8
 8010fd4:	46bd      	mov	sp, r7
 8010fd6:	bd80      	pop	{r7, pc}

08010fd8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8010fd8:	b580      	push	{r7, lr}
 8010fda:	b084      	sub	sp, #16
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	6078      	str	r0, [r7, #4]
 8010fe0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010fe2:	2300      	movs	r3, #0
 8010fe4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010fe6:	683b      	ldr	r3, [r7, #0]
 8010fe8:	781b      	ldrb	r3, [r3, #0]
 8010fea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010fee:	2b20      	cmp	r3, #32
 8010ff0:	d004      	beq.n	8010ffc <USBD_StdDevReq+0x24>
 8010ff2:	2b40      	cmp	r3, #64	; 0x40
 8010ff4:	d002      	beq.n	8010ffc <USBD_StdDevReq+0x24>
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d008      	beq.n	801100c <USBD_StdDevReq+0x34>
 8010ffa:	e04c      	b.n	8011096 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011002:	689b      	ldr	r3, [r3, #8]
 8011004:	6839      	ldr	r1, [r7, #0]
 8011006:	6878      	ldr	r0, [r7, #4]
 8011008:	4798      	blx	r3
    break;
 801100a:	e049      	b.n	80110a0 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 801100c:	683b      	ldr	r3, [r7, #0]
 801100e:	785b      	ldrb	r3, [r3, #1]
 8011010:	2b09      	cmp	r3, #9
 8011012:	d83a      	bhi.n	801108a <USBD_StdDevReq+0xb2>
 8011014:	a201      	add	r2, pc, #4	; (adr r2, 801101c <USBD_StdDevReq+0x44>)
 8011016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801101a:	bf00      	nop
 801101c:	0801106d 	.word	0x0801106d
 8011020:	08011081 	.word	0x08011081
 8011024:	0801108b 	.word	0x0801108b
 8011028:	08011077 	.word	0x08011077
 801102c:	0801108b 	.word	0x0801108b
 8011030:	0801104f 	.word	0x0801104f
 8011034:	08011045 	.word	0x08011045
 8011038:	0801108b 	.word	0x0801108b
 801103c:	08011063 	.word	0x08011063
 8011040:	08011059 	.word	0x08011059
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8011044:	6839      	ldr	r1, [r7, #0]
 8011046:	6878      	ldr	r0, [r7, #4]
 8011048:	f000 f9d2 	bl	80113f0 <USBD_GetDescriptor>
      break;
 801104c:	e022      	b.n	8011094 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 801104e:	6839      	ldr	r1, [r7, #0]
 8011050:	6878      	ldr	r0, [r7, #4]
 8011052:	f000 fac7 	bl	80115e4 <USBD_SetAddress>
      break;
 8011056:	e01d      	b.n	8011094 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8011058:	6839      	ldr	r1, [r7, #0]
 801105a:	6878      	ldr	r0, [r7, #4]
 801105c:	f000 fb04 	bl	8011668 <USBD_SetConfig>
      break;
 8011060:	e018      	b.n	8011094 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8011062:	6839      	ldr	r1, [r7, #0]
 8011064:	6878      	ldr	r0, [r7, #4]
 8011066:	f000 fb8d 	bl	8011784 <USBD_GetConfig>
      break;
 801106a:	e013      	b.n	8011094 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 801106c:	6839      	ldr	r1, [r7, #0]
 801106e:	6878      	ldr	r0, [r7, #4]
 8011070:	f000 fbbc 	bl	80117ec <USBD_GetStatus>
      break;
 8011074:	e00e      	b.n	8011094 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8011076:	6839      	ldr	r1, [r7, #0]
 8011078:	6878      	ldr	r0, [r7, #4]
 801107a:	f000 fbea 	bl	8011852 <USBD_SetFeature>
      break;
 801107e:	e009      	b.n	8011094 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8011080:	6839      	ldr	r1, [r7, #0]
 8011082:	6878      	ldr	r0, [r7, #4]
 8011084:	f000 fbf9 	bl	801187a <USBD_ClrFeature>
      break;
 8011088:	e004      	b.n	8011094 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 801108a:	6839      	ldr	r1, [r7, #0]
 801108c:	6878      	ldr	r0, [r7, #4]
 801108e:	f000 fc52 	bl	8011936 <USBD_CtlError>
      break;
 8011092:	bf00      	nop
    }
    break;
 8011094:	e004      	b.n	80110a0 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8011096:	6839      	ldr	r1, [r7, #0]
 8011098:	6878      	ldr	r0, [r7, #4]
 801109a:	f000 fc4c 	bl	8011936 <USBD_CtlError>
    break;
 801109e:	bf00      	nop
  }

  return ret;
 80110a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80110a2:	4618      	mov	r0, r3
 80110a4:	3710      	adds	r7, #16
 80110a6:	46bd      	mov	sp, r7
 80110a8:	bd80      	pop	{r7, pc}
 80110aa:	bf00      	nop

080110ac <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80110ac:	b580      	push	{r7, lr}
 80110ae:	b084      	sub	sp, #16
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	6078      	str	r0, [r7, #4]
 80110b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80110b6:	2300      	movs	r3, #0
 80110b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80110ba:	683b      	ldr	r3, [r7, #0]
 80110bc:	781b      	ldrb	r3, [r3, #0]
 80110be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80110c2:	2b20      	cmp	r3, #32
 80110c4:	d003      	beq.n	80110ce <USBD_StdItfReq+0x22>
 80110c6:	2b40      	cmp	r3, #64	; 0x40
 80110c8:	d001      	beq.n	80110ce <USBD_StdItfReq+0x22>
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d12a      	bne.n	8011124 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80110d4:	3b01      	subs	r3, #1
 80110d6:	2b02      	cmp	r3, #2
 80110d8:	d81d      	bhi.n	8011116 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80110da:	683b      	ldr	r3, [r7, #0]
 80110dc:	889b      	ldrh	r3, [r3, #4]
 80110de:	b2db      	uxtb	r3, r3
 80110e0:	2b01      	cmp	r3, #1
 80110e2:	d813      	bhi.n	801110c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80110ea:	689b      	ldr	r3, [r3, #8]
 80110ec:	6839      	ldr	r1, [r7, #0]
 80110ee:	6878      	ldr	r0, [r7, #4]
 80110f0:	4798      	blx	r3
 80110f2:	4603      	mov	r3, r0
 80110f4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80110f6:	683b      	ldr	r3, [r7, #0]
 80110f8:	88db      	ldrh	r3, [r3, #6]
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d110      	bne.n	8011120 <USBD_StdItfReq+0x74>
 80110fe:	7bfb      	ldrb	r3, [r7, #15]
 8011100:	2b00      	cmp	r3, #0
 8011102:	d10d      	bne.n	8011120 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8011104:	6878      	ldr	r0, [r7, #4]
 8011106:	f000 fcdf 	bl	8011ac8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 801110a:	e009      	b.n	8011120 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 801110c:	6839      	ldr	r1, [r7, #0]
 801110e:	6878      	ldr	r0, [r7, #4]
 8011110:	f000 fc11 	bl	8011936 <USBD_CtlError>
      break;
 8011114:	e004      	b.n	8011120 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8011116:	6839      	ldr	r1, [r7, #0]
 8011118:	6878      	ldr	r0, [r7, #4]
 801111a:	f000 fc0c 	bl	8011936 <USBD_CtlError>
      break;
 801111e:	e000      	b.n	8011122 <USBD_StdItfReq+0x76>
      break;
 8011120:	bf00      	nop
    }
    break;
 8011122:	e004      	b.n	801112e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8011124:	6839      	ldr	r1, [r7, #0]
 8011126:	6878      	ldr	r0, [r7, #4]
 8011128:	f000 fc05 	bl	8011936 <USBD_CtlError>
    break;
 801112c:	bf00      	nop
  }

  return USBD_OK;
 801112e:	2300      	movs	r3, #0
}
 8011130:	4618      	mov	r0, r3
 8011132:	3710      	adds	r7, #16
 8011134:	46bd      	mov	sp, r7
 8011136:	bd80      	pop	{r7, pc}

08011138 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8011138:	b580      	push	{r7, lr}
 801113a:	b084      	sub	sp, #16
 801113c:	af00      	add	r7, sp, #0
 801113e:	6078      	str	r0, [r7, #4]
 8011140:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8011142:	2300      	movs	r3, #0
 8011144:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8011146:	683b      	ldr	r3, [r7, #0]
 8011148:	889b      	ldrh	r3, [r3, #4]
 801114a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801114c:	683b      	ldr	r3, [r7, #0]
 801114e:	781b      	ldrb	r3, [r3, #0]
 8011150:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011154:	2b20      	cmp	r3, #32
 8011156:	d004      	beq.n	8011162 <USBD_StdEPReq+0x2a>
 8011158:	2b40      	cmp	r3, #64	; 0x40
 801115a:	d002      	beq.n	8011162 <USBD_StdEPReq+0x2a>
 801115c:	2b00      	cmp	r3, #0
 801115e:	d008      	beq.n	8011172 <USBD_StdEPReq+0x3a>
 8011160:	e13b      	b.n	80113da <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011168:	689b      	ldr	r3, [r3, #8]
 801116a:	6839      	ldr	r1, [r7, #0]
 801116c:	6878      	ldr	r0, [r7, #4]
 801116e:	4798      	blx	r3
    break;
 8011170:	e138      	b.n	80113e4 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8011172:	683b      	ldr	r3, [r7, #0]
 8011174:	781b      	ldrb	r3, [r3, #0]
 8011176:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801117a:	2b20      	cmp	r3, #32
 801117c:	d10a      	bne.n	8011194 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011184:	689b      	ldr	r3, [r3, #8]
 8011186:	6839      	ldr	r1, [r7, #0]
 8011188:	6878      	ldr	r0, [r7, #4]
 801118a:	4798      	blx	r3
 801118c:	4603      	mov	r3, r0
 801118e:	73fb      	strb	r3, [r7, #15]

      return ret;
 8011190:	7bfb      	ldrb	r3, [r7, #15]
 8011192:	e128      	b.n	80113e6 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8011194:	683b      	ldr	r3, [r7, #0]
 8011196:	785b      	ldrb	r3, [r3, #1]
 8011198:	2b01      	cmp	r3, #1
 801119a:	d03e      	beq.n	801121a <USBD_StdEPReq+0xe2>
 801119c:	2b03      	cmp	r3, #3
 801119e:	d002      	beq.n	80111a6 <USBD_StdEPReq+0x6e>
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d070      	beq.n	8011286 <USBD_StdEPReq+0x14e>
 80111a4:	e113      	b.n	80113ce <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80111ac:	2b02      	cmp	r3, #2
 80111ae:	d002      	beq.n	80111b6 <USBD_StdEPReq+0x7e>
 80111b0:	2b03      	cmp	r3, #3
 80111b2:	d015      	beq.n	80111e0 <USBD_StdEPReq+0xa8>
 80111b4:	e02b      	b.n	801120e <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80111b6:	7bbb      	ldrb	r3, [r7, #14]
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d00c      	beq.n	80111d6 <USBD_StdEPReq+0x9e>
 80111bc:	7bbb      	ldrb	r3, [r7, #14]
 80111be:	2b80      	cmp	r3, #128	; 0x80
 80111c0:	d009      	beq.n	80111d6 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80111c2:	7bbb      	ldrb	r3, [r7, #14]
 80111c4:	4619      	mov	r1, r3
 80111c6:	6878      	ldr	r0, [r7, #4]
 80111c8:	f004 fa72 	bl	80156b0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80111cc:	2180      	movs	r1, #128	; 0x80
 80111ce:	6878      	ldr	r0, [r7, #4]
 80111d0:	f004 fa6e 	bl	80156b0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80111d4:	e020      	b.n	8011218 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 80111d6:	6839      	ldr	r1, [r7, #0]
 80111d8:	6878      	ldr	r0, [r7, #4]
 80111da:	f000 fbac 	bl	8011936 <USBD_CtlError>
        break;
 80111de:	e01b      	b.n	8011218 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80111e0:	683b      	ldr	r3, [r7, #0]
 80111e2:	885b      	ldrh	r3, [r3, #2]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d10e      	bne.n	8011206 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80111e8:	7bbb      	ldrb	r3, [r7, #14]
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d00b      	beq.n	8011206 <USBD_StdEPReq+0xce>
 80111ee:	7bbb      	ldrb	r3, [r7, #14]
 80111f0:	2b80      	cmp	r3, #128	; 0x80
 80111f2:	d008      	beq.n	8011206 <USBD_StdEPReq+0xce>
 80111f4:	683b      	ldr	r3, [r7, #0]
 80111f6:	88db      	ldrh	r3, [r3, #6]
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d104      	bne.n	8011206 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 80111fc:	7bbb      	ldrb	r3, [r7, #14]
 80111fe:	4619      	mov	r1, r3
 8011200:	6878      	ldr	r0, [r7, #4]
 8011202:	f004 fa55 	bl	80156b0 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8011206:	6878      	ldr	r0, [r7, #4]
 8011208:	f000 fc5e 	bl	8011ac8 <USBD_CtlSendStatus>

        break;
 801120c:	e004      	b.n	8011218 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 801120e:	6839      	ldr	r1, [r7, #0]
 8011210:	6878      	ldr	r0, [r7, #4]
 8011212:	f000 fb90 	bl	8011936 <USBD_CtlError>
        break;
 8011216:	bf00      	nop
      }
      break;
 8011218:	e0de      	b.n	80113d8 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8011220:	2b02      	cmp	r3, #2
 8011222:	d002      	beq.n	801122a <USBD_StdEPReq+0xf2>
 8011224:	2b03      	cmp	r3, #3
 8011226:	d015      	beq.n	8011254 <USBD_StdEPReq+0x11c>
 8011228:	e026      	b.n	8011278 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801122a:	7bbb      	ldrb	r3, [r7, #14]
 801122c:	2b00      	cmp	r3, #0
 801122e:	d00c      	beq.n	801124a <USBD_StdEPReq+0x112>
 8011230:	7bbb      	ldrb	r3, [r7, #14]
 8011232:	2b80      	cmp	r3, #128	; 0x80
 8011234:	d009      	beq.n	801124a <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8011236:	7bbb      	ldrb	r3, [r7, #14]
 8011238:	4619      	mov	r1, r3
 801123a:	6878      	ldr	r0, [r7, #4]
 801123c:	f004 fa38 	bl	80156b0 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8011240:	2180      	movs	r1, #128	; 0x80
 8011242:	6878      	ldr	r0, [r7, #4]
 8011244:	f004 fa34 	bl	80156b0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8011248:	e01c      	b.n	8011284 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 801124a:	6839      	ldr	r1, [r7, #0]
 801124c:	6878      	ldr	r0, [r7, #4]
 801124e:	f000 fb72 	bl	8011936 <USBD_CtlError>
        break;
 8011252:	e017      	b.n	8011284 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8011254:	683b      	ldr	r3, [r7, #0]
 8011256:	885b      	ldrh	r3, [r3, #2]
 8011258:	2b00      	cmp	r3, #0
 801125a:	d112      	bne.n	8011282 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 801125c:	7bbb      	ldrb	r3, [r7, #14]
 801125e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011262:	2b00      	cmp	r3, #0
 8011264:	d004      	beq.n	8011270 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8011266:	7bbb      	ldrb	r3, [r7, #14]
 8011268:	4619      	mov	r1, r3
 801126a:	6878      	ldr	r0, [r7, #4]
 801126c:	f004 fa3f 	bl	80156ee <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8011270:	6878      	ldr	r0, [r7, #4]
 8011272:	f000 fc29 	bl	8011ac8 <USBD_CtlSendStatus>
        }
        break;
 8011276:	e004      	b.n	8011282 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8011278:	6839      	ldr	r1, [r7, #0]
 801127a:	6878      	ldr	r0, [r7, #4]
 801127c:	f000 fb5b 	bl	8011936 <USBD_CtlError>
        break;
 8011280:	e000      	b.n	8011284 <USBD_StdEPReq+0x14c>
        break;
 8011282:	bf00      	nop
      }
      break;
 8011284:	e0a8      	b.n	80113d8 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 801128c:	2b02      	cmp	r3, #2
 801128e:	d002      	beq.n	8011296 <USBD_StdEPReq+0x15e>
 8011290:	2b03      	cmp	r3, #3
 8011292:	d031      	beq.n	80112f8 <USBD_StdEPReq+0x1c0>
 8011294:	e095      	b.n	80113c2 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011296:	7bbb      	ldrb	r3, [r7, #14]
 8011298:	2b00      	cmp	r3, #0
 801129a:	d007      	beq.n	80112ac <USBD_StdEPReq+0x174>
 801129c:	7bbb      	ldrb	r3, [r7, #14]
 801129e:	2b80      	cmp	r3, #128	; 0x80
 80112a0:	d004      	beq.n	80112ac <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 80112a2:	6839      	ldr	r1, [r7, #0]
 80112a4:	6878      	ldr	r0, [r7, #4]
 80112a6:	f000 fb46 	bl	8011936 <USBD_CtlError>
          break;
 80112aa:	e08f      	b.n	80113cc <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80112ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	da0b      	bge.n	80112cc <USBD_StdEPReq+0x194>
 80112b4:	7bbb      	ldrb	r3, [r7, #14]
 80112b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80112ba:	4613      	mov	r3, r2
 80112bc:	009b      	lsls	r3, r3, #2
 80112be:	4413      	add	r3, r2
 80112c0:	009b      	lsls	r3, r3, #2
 80112c2:	3310      	adds	r3, #16
 80112c4:	687a      	ldr	r2, [r7, #4]
 80112c6:	4413      	add	r3, r2
 80112c8:	3304      	adds	r3, #4
 80112ca:	e00a      	b.n	80112e2 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 80112cc:	7bbb      	ldrb	r3, [r7, #14]
 80112ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80112d2:	4613      	mov	r3, r2
 80112d4:	009b      	lsls	r3, r3, #2
 80112d6:	4413      	add	r3, r2
 80112d8:	009b      	lsls	r3, r3, #2
 80112da:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80112de:	687a      	ldr	r2, [r7, #4]
 80112e0:	4413      	add	r3, r2
 80112e2:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 80112e4:	68bb      	ldr	r3, [r7, #8]
 80112e6:	2200      	movs	r2, #0
 80112e8:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80112ea:	68bb      	ldr	r3, [r7, #8]
 80112ec:	2202      	movs	r2, #2
 80112ee:	4619      	mov	r1, r3
 80112f0:	6878      	ldr	r0, [r7, #4]
 80112f2:	f000 fb8b 	bl	8011a0c <USBD_CtlSendData>
          break;
 80112f6:	e069      	b.n	80113cc <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 80112f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	da11      	bge.n	8011324 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011300:	7bbb      	ldrb	r3, [r7, #14]
 8011302:	f003 020f 	and.w	r2, r3, #15
 8011306:	6879      	ldr	r1, [r7, #4]
 8011308:	4613      	mov	r3, r2
 801130a:	009b      	lsls	r3, r3, #2
 801130c:	4413      	add	r3, r2
 801130e:	009b      	lsls	r3, r3, #2
 8011310:	440b      	add	r3, r1
 8011312:	3318      	adds	r3, #24
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	2b00      	cmp	r3, #0
 8011318:	d117      	bne.n	801134a <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 801131a:	6839      	ldr	r1, [r7, #0]
 801131c:	6878      	ldr	r0, [r7, #4]
 801131e:	f000 fb0a 	bl	8011936 <USBD_CtlError>
            break;
 8011322:	e053      	b.n	80113cc <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011324:	7bbb      	ldrb	r3, [r7, #14]
 8011326:	f003 020f 	and.w	r2, r3, #15
 801132a:	6879      	ldr	r1, [r7, #4]
 801132c:	4613      	mov	r3, r2
 801132e:	009b      	lsls	r3, r3, #2
 8011330:	4413      	add	r3, r2
 8011332:	009b      	lsls	r3, r3, #2
 8011334:	440b      	add	r3, r1
 8011336:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	2b00      	cmp	r3, #0
 801133e:	d104      	bne.n	801134a <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8011340:	6839      	ldr	r1, [r7, #0]
 8011342:	6878      	ldr	r0, [r7, #4]
 8011344:	f000 faf7 	bl	8011936 <USBD_CtlError>
            break;
 8011348:	e040      	b.n	80113cc <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 801134a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801134e:	2b00      	cmp	r3, #0
 8011350:	da0b      	bge.n	801136a <USBD_StdEPReq+0x232>
 8011352:	7bbb      	ldrb	r3, [r7, #14]
 8011354:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011358:	4613      	mov	r3, r2
 801135a:	009b      	lsls	r3, r3, #2
 801135c:	4413      	add	r3, r2
 801135e:	009b      	lsls	r3, r3, #2
 8011360:	3310      	adds	r3, #16
 8011362:	687a      	ldr	r2, [r7, #4]
 8011364:	4413      	add	r3, r2
 8011366:	3304      	adds	r3, #4
 8011368:	e00a      	b.n	8011380 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 801136a:	7bbb      	ldrb	r3, [r7, #14]
 801136c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8011370:	4613      	mov	r3, r2
 8011372:	009b      	lsls	r3, r3, #2
 8011374:	4413      	add	r3, r2
 8011376:	009b      	lsls	r3, r3, #2
 8011378:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 801137c:	687a      	ldr	r2, [r7, #4]
 801137e:	4413      	add	r3, r2
 8011380:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011382:	7bbb      	ldrb	r3, [r7, #14]
 8011384:	2b00      	cmp	r3, #0
 8011386:	d002      	beq.n	801138e <USBD_StdEPReq+0x256>
 8011388:	7bbb      	ldrb	r3, [r7, #14]
 801138a:	2b80      	cmp	r3, #128	; 0x80
 801138c:	d103      	bne.n	8011396 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 801138e:	68bb      	ldr	r3, [r7, #8]
 8011390:	2200      	movs	r2, #0
 8011392:	601a      	str	r2, [r3, #0]
 8011394:	e00e      	b.n	80113b4 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8011396:	7bbb      	ldrb	r3, [r7, #14]
 8011398:	4619      	mov	r1, r3
 801139a:	6878      	ldr	r0, [r7, #4]
 801139c:	f004 f9c6 	bl	801572c <USBD_LL_IsStallEP>
 80113a0:	4603      	mov	r3, r0
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d003      	beq.n	80113ae <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 80113a6:	68bb      	ldr	r3, [r7, #8]
 80113a8:	2201      	movs	r2, #1
 80113aa:	601a      	str	r2, [r3, #0]
 80113ac:	e002      	b.n	80113b4 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 80113ae:	68bb      	ldr	r3, [r7, #8]
 80113b0:	2200      	movs	r2, #0
 80113b2:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80113b4:	68bb      	ldr	r3, [r7, #8]
 80113b6:	2202      	movs	r2, #2
 80113b8:	4619      	mov	r1, r3
 80113ba:	6878      	ldr	r0, [r7, #4]
 80113bc:	f000 fb26 	bl	8011a0c <USBD_CtlSendData>
          break;
 80113c0:	e004      	b.n	80113cc <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 80113c2:	6839      	ldr	r1, [r7, #0]
 80113c4:	6878      	ldr	r0, [r7, #4]
 80113c6:	f000 fab6 	bl	8011936 <USBD_CtlError>
        break;
 80113ca:	bf00      	nop
      }
      break;
 80113cc:	e004      	b.n	80113d8 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 80113ce:	6839      	ldr	r1, [r7, #0]
 80113d0:	6878      	ldr	r0, [r7, #4]
 80113d2:	f000 fab0 	bl	8011936 <USBD_CtlError>
      break;
 80113d6:	bf00      	nop
    }
    break;
 80113d8:	e004      	b.n	80113e4 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 80113da:	6839      	ldr	r1, [r7, #0]
 80113dc:	6878      	ldr	r0, [r7, #4]
 80113de:	f000 faaa 	bl	8011936 <USBD_CtlError>
    break;
 80113e2:	bf00      	nop
  }

  return ret;
 80113e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80113e6:	4618      	mov	r0, r3
 80113e8:	3710      	adds	r7, #16
 80113ea:	46bd      	mov	sp, r7
 80113ec:	bd80      	pop	{r7, pc}
	...

080113f0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 80113f0:	b580      	push	{r7, lr}
 80113f2:	b084      	sub	sp, #16
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	6078      	str	r0, [r7, #4]
 80113f8:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 80113fa:	683b      	ldr	r3, [r7, #0]
 80113fc:	885b      	ldrh	r3, [r3, #2]
 80113fe:	0a1b      	lsrs	r3, r3, #8
 8011400:	b29b      	uxth	r3, r3
 8011402:	3b01      	subs	r3, #1
 8011404:	2b06      	cmp	r3, #6
 8011406:	f200 80c9 	bhi.w	801159c <USBD_GetDescriptor+0x1ac>
 801140a:	a201      	add	r2, pc, #4	; (adr r2, 8011410 <USBD_GetDescriptor+0x20>)
 801140c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011410:	0801142d 	.word	0x0801142d
 8011414:	08011445 	.word	0x08011445
 8011418:	08011485 	.word	0x08011485
 801141c:	0801159d 	.word	0x0801159d
 8011420:	0801159d 	.word	0x0801159d
 8011424:	08011549 	.word	0x08011549
 8011428:	0801156f 	.word	0x0801156f
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	687a      	ldr	r2, [r7, #4]
 8011436:	7c12      	ldrb	r2, [r2, #16]
 8011438:	f107 010a 	add.w	r1, r7, #10
 801143c:	4610      	mov	r0, r2
 801143e:	4798      	blx	r3
 8011440:	60f8      	str	r0, [r7, #12]
    break;
 8011442:	e0b0      	b.n	80115a6 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	7c1b      	ldrb	r3, [r3, #16]
 8011448:	2b00      	cmp	r3, #0
 801144a:	d10d      	bne.n	8011468 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011454:	f107 020a 	add.w	r2, r7, #10
 8011458:	4610      	mov	r0, r2
 801145a:	4798      	blx	r3
 801145c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	3301      	adds	r3, #1
 8011462:	2202      	movs	r2, #2
 8011464:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8011466:	e09e      	b.n	80115a6 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801146e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011470:	f107 020a 	add.w	r2, r7, #10
 8011474:	4610      	mov	r0, r2
 8011476:	4798      	blx	r3
 8011478:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	3301      	adds	r3, #1
 801147e:	2202      	movs	r2, #2
 8011480:	701a      	strb	r2, [r3, #0]
    break;
 8011482:	e090      	b.n	80115a6 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8011484:	683b      	ldr	r3, [r7, #0]
 8011486:	885b      	ldrh	r3, [r3, #2]
 8011488:	b2db      	uxtb	r3, r3
 801148a:	2b05      	cmp	r3, #5
 801148c:	d856      	bhi.n	801153c <USBD_GetDescriptor+0x14c>
 801148e:	a201      	add	r2, pc, #4	; (adr r2, 8011494 <USBD_GetDescriptor+0xa4>)
 8011490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011494:	080114ad 	.word	0x080114ad
 8011498:	080114c5 	.word	0x080114c5
 801149c:	080114dd 	.word	0x080114dd
 80114a0:	080114f5 	.word	0x080114f5
 80114a4:	0801150d 	.word	0x0801150d
 80114a8:	08011525 	.word	0x08011525
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80114b2:	685b      	ldr	r3, [r3, #4]
 80114b4:	687a      	ldr	r2, [r7, #4]
 80114b6:	7c12      	ldrb	r2, [r2, #16]
 80114b8:	f107 010a 	add.w	r1, r7, #10
 80114bc:	4610      	mov	r0, r2
 80114be:	4798      	blx	r3
 80114c0:	60f8      	str	r0, [r7, #12]
      break;
 80114c2:	e040      	b.n	8011546 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80114ca:	689b      	ldr	r3, [r3, #8]
 80114cc:	687a      	ldr	r2, [r7, #4]
 80114ce:	7c12      	ldrb	r2, [r2, #16]
 80114d0:	f107 010a 	add.w	r1, r7, #10
 80114d4:	4610      	mov	r0, r2
 80114d6:	4798      	blx	r3
 80114d8:	60f8      	str	r0, [r7, #12]
      break;
 80114da:	e034      	b.n	8011546 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80114e2:	68db      	ldr	r3, [r3, #12]
 80114e4:	687a      	ldr	r2, [r7, #4]
 80114e6:	7c12      	ldrb	r2, [r2, #16]
 80114e8:	f107 010a 	add.w	r1, r7, #10
 80114ec:	4610      	mov	r0, r2
 80114ee:	4798      	blx	r3
 80114f0:	60f8      	str	r0, [r7, #12]
      break;
 80114f2:	e028      	b.n	8011546 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80114fa:	691b      	ldr	r3, [r3, #16]
 80114fc:	687a      	ldr	r2, [r7, #4]
 80114fe:	7c12      	ldrb	r2, [r2, #16]
 8011500:	f107 010a 	add.w	r1, r7, #10
 8011504:	4610      	mov	r0, r2
 8011506:	4798      	blx	r3
 8011508:	60f8      	str	r0, [r7, #12]
      break;
 801150a:	e01c      	b.n	8011546 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8011512:	695b      	ldr	r3, [r3, #20]
 8011514:	687a      	ldr	r2, [r7, #4]
 8011516:	7c12      	ldrb	r2, [r2, #16]
 8011518:	f107 010a 	add.w	r1, r7, #10
 801151c:	4610      	mov	r0, r2
 801151e:	4798      	blx	r3
 8011520:	60f8      	str	r0, [r7, #12]
      break;
 8011522:	e010      	b.n	8011546 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 801152a:	699b      	ldr	r3, [r3, #24]
 801152c:	687a      	ldr	r2, [r7, #4]
 801152e:	7c12      	ldrb	r2, [r2, #16]
 8011530:	f107 010a 	add.w	r1, r7, #10
 8011534:	4610      	mov	r0, r2
 8011536:	4798      	blx	r3
 8011538:	60f8      	str	r0, [r7, #12]
      break;
 801153a:	e004      	b.n	8011546 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 801153c:	6839      	ldr	r1, [r7, #0]
 801153e:	6878      	ldr	r0, [r7, #4]
 8011540:	f000 f9f9 	bl	8011936 <USBD_CtlError>
      return;
 8011544:	e04b      	b.n	80115de <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8011546:	e02e      	b.n	80115a6 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	7c1b      	ldrb	r3, [r3, #16]
 801154c:	2b00      	cmp	r3, #0
 801154e:	d109      	bne.n	8011564 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8011556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011558:	f107 020a 	add.w	r2, r7, #10
 801155c:	4610      	mov	r0, r2
 801155e:	4798      	blx	r3
 8011560:	60f8      	str	r0, [r7, #12]
      break;
 8011562:	e020      	b.n	80115a6 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8011564:	6839      	ldr	r1, [r7, #0]
 8011566:	6878      	ldr	r0, [r7, #4]
 8011568:	f000 f9e5 	bl	8011936 <USBD_CtlError>
      return;
 801156c:	e037      	b.n	80115de <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	7c1b      	ldrb	r3, [r3, #16]
 8011572:	2b00      	cmp	r3, #0
 8011574:	d10d      	bne.n	8011592 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 801157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801157e:	f107 020a 	add.w	r2, r7, #10
 8011582:	4610      	mov	r0, r2
 8011584:	4798      	blx	r3
 8011586:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	3301      	adds	r3, #1
 801158c:	2207      	movs	r2, #7
 801158e:	701a      	strb	r2, [r3, #0]
      break;
 8011590:	e009      	b.n	80115a6 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8011592:	6839      	ldr	r1, [r7, #0]
 8011594:	6878      	ldr	r0, [r7, #4]
 8011596:	f000 f9ce 	bl	8011936 <USBD_CtlError>
      return;
 801159a:	e020      	b.n	80115de <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 801159c:	6839      	ldr	r1, [r7, #0]
 801159e:	6878      	ldr	r0, [r7, #4]
 80115a0:	f000 f9c9 	bl	8011936 <USBD_CtlError>
    return;
 80115a4:	e01b      	b.n	80115de <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 80115a6:	897b      	ldrh	r3, [r7, #10]
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d011      	beq.n	80115d0 <USBD_GetDescriptor+0x1e0>
 80115ac:	683b      	ldr	r3, [r7, #0]
 80115ae:	88db      	ldrh	r3, [r3, #6]
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d00d      	beq.n	80115d0 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 80115b4:	683b      	ldr	r3, [r7, #0]
 80115b6:	88da      	ldrh	r2, [r3, #6]
 80115b8:	897b      	ldrh	r3, [r7, #10]
 80115ba:	4293      	cmp	r3, r2
 80115bc:	bf28      	it	cs
 80115be:	4613      	movcs	r3, r2
 80115c0:	b29b      	uxth	r3, r3
 80115c2:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 80115c4:	897b      	ldrh	r3, [r7, #10]
 80115c6:	461a      	mov	r2, r3
 80115c8:	68f9      	ldr	r1, [r7, #12]
 80115ca:	6878      	ldr	r0, [r7, #4]
 80115cc:	f000 fa1e 	bl	8011a0c <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 80115d0:	683b      	ldr	r3, [r7, #0]
 80115d2:	88db      	ldrh	r3, [r3, #6]
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d102      	bne.n	80115de <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 80115d8:	6878      	ldr	r0, [r7, #4]
 80115da:	f000 fa75 	bl	8011ac8 <USBD_CtlSendStatus>
  }
}
 80115de:	3710      	adds	r7, #16
 80115e0:	46bd      	mov	sp, r7
 80115e2:	bd80      	pop	{r7, pc}

080115e4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80115e4:	b580      	push	{r7, lr}
 80115e6:	b084      	sub	sp, #16
 80115e8:	af00      	add	r7, sp, #0
 80115ea:	6078      	str	r0, [r7, #4]
 80115ec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80115ee:	683b      	ldr	r3, [r7, #0]
 80115f0:	889b      	ldrh	r3, [r3, #4]
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d130      	bne.n	8011658 <USBD_SetAddress+0x74>
 80115f6:	683b      	ldr	r3, [r7, #0]
 80115f8:	88db      	ldrh	r3, [r3, #6]
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d12c      	bne.n	8011658 <USBD_SetAddress+0x74>
 80115fe:	683b      	ldr	r3, [r7, #0]
 8011600:	885b      	ldrh	r3, [r3, #2]
 8011602:	2b7f      	cmp	r3, #127	; 0x7f
 8011604:	d828      	bhi.n	8011658 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011606:	683b      	ldr	r3, [r7, #0]
 8011608:	885b      	ldrh	r3, [r3, #2]
 801160a:	b2db      	uxtb	r3, r3
 801160c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011610:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8011618:	2b03      	cmp	r3, #3
 801161a:	d104      	bne.n	8011626 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 801161c:	6839      	ldr	r1, [r7, #0]
 801161e:	6878      	ldr	r0, [r7, #4]
 8011620:	f000 f989 	bl	8011936 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011624:	e01c      	b.n	8011660 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	7bfa      	ldrb	r2, [r7, #15]
 801162a:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801162e:	7bfb      	ldrb	r3, [r7, #15]
 8011630:	4619      	mov	r1, r3
 8011632:	6878      	ldr	r0, [r7, #4]
 8011634:	f004 f8a6 	bl	8015784 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8011638:	6878      	ldr	r0, [r7, #4]
 801163a:	f000 fa45 	bl	8011ac8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801163e:	7bfb      	ldrb	r3, [r7, #15]
 8011640:	2b00      	cmp	r3, #0
 8011642:	d004      	beq.n	801164e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	2202      	movs	r2, #2
 8011648:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801164c:	e008      	b.n	8011660 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	2201      	movs	r2, #1
 8011652:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011656:	e003      	b.n	8011660 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011658:	6839      	ldr	r1, [r7, #0]
 801165a:	6878      	ldr	r0, [r7, #4]
 801165c:	f000 f96b 	bl	8011936 <USBD_CtlError>
  }
}
 8011660:	bf00      	nop
 8011662:	3710      	adds	r7, #16
 8011664:	46bd      	mov	sp, r7
 8011666:	bd80      	pop	{r7, pc}

08011668 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011668:	b580      	push	{r7, lr}
 801166a:	b082      	sub	sp, #8
 801166c:	af00      	add	r7, sp, #0
 801166e:	6078      	str	r0, [r7, #4]
 8011670:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8011672:	683b      	ldr	r3, [r7, #0]
 8011674:	885b      	ldrh	r3, [r3, #2]
 8011676:	b2da      	uxtb	r2, r3
 8011678:	4b41      	ldr	r3, [pc, #260]	; (8011780 <USBD_SetConfig+0x118>)
 801167a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801167c:	4b40      	ldr	r3, [pc, #256]	; (8011780 <USBD_SetConfig+0x118>)
 801167e:	781b      	ldrb	r3, [r3, #0]
 8011680:	2b01      	cmp	r3, #1
 8011682:	d904      	bls.n	801168e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8011684:	6839      	ldr	r1, [r7, #0]
 8011686:	6878      	ldr	r0, [r7, #4]
 8011688:	f000 f955 	bl	8011936 <USBD_CtlError>
 801168c:	e075      	b.n	801177a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8011694:	2b02      	cmp	r3, #2
 8011696:	d002      	beq.n	801169e <USBD_SetConfig+0x36>
 8011698:	2b03      	cmp	r3, #3
 801169a:	d023      	beq.n	80116e4 <USBD_SetConfig+0x7c>
 801169c:	e062      	b.n	8011764 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 801169e:	4b38      	ldr	r3, [pc, #224]	; (8011780 <USBD_SetConfig+0x118>)
 80116a0:	781b      	ldrb	r3, [r3, #0]
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d01a      	beq.n	80116dc <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 80116a6:	4b36      	ldr	r3, [pc, #216]	; (8011780 <USBD_SetConfig+0x118>)
 80116a8:	781b      	ldrb	r3, [r3, #0]
 80116aa:	461a      	mov	r2, r3
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	2203      	movs	r2, #3
 80116b4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80116b8:	4b31      	ldr	r3, [pc, #196]	; (8011780 <USBD_SetConfig+0x118>)
 80116ba:	781b      	ldrb	r3, [r3, #0]
 80116bc:	4619      	mov	r1, r3
 80116be:	6878      	ldr	r0, [r7, #4]
 80116c0:	f7ff fa2a 	bl	8010b18 <USBD_SetClassConfig>
 80116c4:	4603      	mov	r3, r0
 80116c6:	2b02      	cmp	r3, #2
 80116c8:	d104      	bne.n	80116d4 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 80116ca:	6839      	ldr	r1, [r7, #0]
 80116cc:	6878      	ldr	r0, [r7, #4]
 80116ce:	f000 f932 	bl	8011936 <USBD_CtlError>
          return;
 80116d2:	e052      	b.n	801177a <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 80116d4:	6878      	ldr	r0, [r7, #4]
 80116d6:	f000 f9f7 	bl	8011ac8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80116da:	e04e      	b.n	801177a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80116dc:	6878      	ldr	r0, [r7, #4]
 80116de:	f000 f9f3 	bl	8011ac8 <USBD_CtlSendStatus>
      break;
 80116e2:	e04a      	b.n	801177a <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80116e4:	4b26      	ldr	r3, [pc, #152]	; (8011780 <USBD_SetConfig+0x118>)
 80116e6:	781b      	ldrb	r3, [r3, #0]
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d112      	bne.n	8011712 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	2202      	movs	r2, #2
 80116f0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 80116f4:	4b22      	ldr	r3, [pc, #136]	; (8011780 <USBD_SetConfig+0x118>)
 80116f6:	781b      	ldrb	r3, [r3, #0]
 80116f8:	461a      	mov	r2, r3
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 80116fe:	4b20      	ldr	r3, [pc, #128]	; (8011780 <USBD_SetConfig+0x118>)
 8011700:	781b      	ldrb	r3, [r3, #0]
 8011702:	4619      	mov	r1, r3
 8011704:	6878      	ldr	r0, [r7, #4]
 8011706:	f7ff fa26 	bl	8010b56 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 801170a:	6878      	ldr	r0, [r7, #4]
 801170c:	f000 f9dc 	bl	8011ac8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8011710:	e033      	b.n	801177a <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8011712:	4b1b      	ldr	r3, [pc, #108]	; (8011780 <USBD_SetConfig+0x118>)
 8011714:	781b      	ldrb	r3, [r3, #0]
 8011716:	461a      	mov	r2, r3
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	685b      	ldr	r3, [r3, #4]
 801171c:	429a      	cmp	r2, r3
 801171e:	d01d      	beq.n	801175c <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	685b      	ldr	r3, [r3, #4]
 8011724:	b2db      	uxtb	r3, r3
 8011726:	4619      	mov	r1, r3
 8011728:	6878      	ldr	r0, [r7, #4]
 801172a:	f7ff fa14 	bl	8010b56 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801172e:	4b14      	ldr	r3, [pc, #80]	; (8011780 <USBD_SetConfig+0x118>)
 8011730:	781b      	ldrb	r3, [r3, #0]
 8011732:	461a      	mov	r2, r3
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8011738:	4b11      	ldr	r3, [pc, #68]	; (8011780 <USBD_SetConfig+0x118>)
 801173a:	781b      	ldrb	r3, [r3, #0]
 801173c:	4619      	mov	r1, r3
 801173e:	6878      	ldr	r0, [r7, #4]
 8011740:	f7ff f9ea 	bl	8010b18 <USBD_SetClassConfig>
 8011744:	4603      	mov	r3, r0
 8011746:	2b02      	cmp	r3, #2
 8011748:	d104      	bne.n	8011754 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 801174a:	6839      	ldr	r1, [r7, #0]
 801174c:	6878      	ldr	r0, [r7, #4]
 801174e:	f000 f8f2 	bl	8011936 <USBD_CtlError>
          return;
 8011752:	e012      	b.n	801177a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8011754:	6878      	ldr	r0, [r7, #4]
 8011756:	f000 f9b7 	bl	8011ac8 <USBD_CtlSendStatus>
      break;
 801175a:	e00e      	b.n	801177a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 801175c:	6878      	ldr	r0, [r7, #4]
 801175e:	f000 f9b3 	bl	8011ac8 <USBD_CtlSendStatus>
      break;
 8011762:	e00a      	b.n	801177a <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8011764:	6839      	ldr	r1, [r7, #0]
 8011766:	6878      	ldr	r0, [r7, #4]
 8011768:	f000 f8e5 	bl	8011936 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 801176c:	4b04      	ldr	r3, [pc, #16]	; (8011780 <USBD_SetConfig+0x118>)
 801176e:	781b      	ldrb	r3, [r3, #0]
 8011770:	4619      	mov	r1, r3
 8011772:	6878      	ldr	r0, [r7, #4]
 8011774:	f7ff f9ef 	bl	8010b56 <USBD_ClrClassConfig>
      break;
 8011778:	bf00      	nop
    }
  }
}
 801177a:	3708      	adds	r7, #8
 801177c:	46bd      	mov	sp, r7
 801177e:	bd80      	pop	{r7, pc}
 8011780:	2000145c 	.word	0x2000145c

08011784 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011784:	b580      	push	{r7, lr}
 8011786:	b082      	sub	sp, #8
 8011788:	af00      	add	r7, sp, #0
 801178a:	6078      	str	r0, [r7, #4]
 801178c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801178e:	683b      	ldr	r3, [r7, #0]
 8011790:	88db      	ldrh	r3, [r3, #6]
 8011792:	2b01      	cmp	r3, #1
 8011794:	d004      	beq.n	80117a0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8011796:	6839      	ldr	r1, [r7, #0]
 8011798:	6878      	ldr	r0, [r7, #4]
 801179a:	f000 f8cc 	bl	8011936 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 801179e:	e021      	b.n	80117e4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80117a6:	2b01      	cmp	r3, #1
 80117a8:	db17      	blt.n	80117da <USBD_GetConfig+0x56>
 80117aa:	2b02      	cmp	r3, #2
 80117ac:	dd02      	ble.n	80117b4 <USBD_GetConfig+0x30>
 80117ae:	2b03      	cmp	r3, #3
 80117b0:	d00b      	beq.n	80117ca <USBD_GetConfig+0x46>
 80117b2:	e012      	b.n	80117da <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	2200      	movs	r2, #0
 80117b8:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	3308      	adds	r3, #8
 80117be:	2201      	movs	r2, #1
 80117c0:	4619      	mov	r1, r3
 80117c2:	6878      	ldr	r0, [r7, #4]
 80117c4:	f000 f922 	bl	8011a0c <USBD_CtlSendData>
      break;
 80117c8:	e00c      	b.n	80117e4 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	3304      	adds	r3, #4
 80117ce:	2201      	movs	r2, #1
 80117d0:	4619      	mov	r1, r3
 80117d2:	6878      	ldr	r0, [r7, #4]
 80117d4:	f000 f91a 	bl	8011a0c <USBD_CtlSendData>
      break;
 80117d8:	e004      	b.n	80117e4 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 80117da:	6839      	ldr	r1, [r7, #0]
 80117dc:	6878      	ldr	r0, [r7, #4]
 80117de:	f000 f8aa 	bl	8011936 <USBD_CtlError>
      break;
 80117e2:	bf00      	nop
}
 80117e4:	bf00      	nop
 80117e6:	3708      	adds	r7, #8
 80117e8:	46bd      	mov	sp, r7
 80117ea:	bd80      	pop	{r7, pc}

080117ec <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80117ec:	b580      	push	{r7, lr}
 80117ee:	b082      	sub	sp, #8
 80117f0:	af00      	add	r7, sp, #0
 80117f2:	6078      	str	r0, [r7, #4]
 80117f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80117fc:	3b01      	subs	r3, #1
 80117fe:	2b02      	cmp	r3, #2
 8011800:	d81e      	bhi.n	8011840 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8011802:	683b      	ldr	r3, [r7, #0]
 8011804:	88db      	ldrh	r3, [r3, #6]
 8011806:	2b02      	cmp	r3, #2
 8011808:	d004      	beq.n	8011814 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 801180a:	6839      	ldr	r1, [r7, #0]
 801180c:	6878      	ldr	r0, [r7, #4]
 801180e:	f000 f892 	bl	8011936 <USBD_CtlError>
      break;
 8011812:	e01a      	b.n	801184a <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	2201      	movs	r2, #1
 8011818:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8011820:	2b00      	cmp	r3, #0
 8011822:	d005      	beq.n	8011830 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	68db      	ldr	r3, [r3, #12]
 8011828:	f043 0202 	orr.w	r2, r3, #2
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	330c      	adds	r3, #12
 8011834:	2202      	movs	r2, #2
 8011836:	4619      	mov	r1, r3
 8011838:	6878      	ldr	r0, [r7, #4]
 801183a:	f000 f8e7 	bl	8011a0c <USBD_CtlSendData>
    break;
 801183e:	e004      	b.n	801184a <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8011840:	6839      	ldr	r1, [r7, #0]
 8011842:	6878      	ldr	r0, [r7, #4]
 8011844:	f000 f877 	bl	8011936 <USBD_CtlError>
    break;
 8011848:	bf00      	nop
  }
}
 801184a:	bf00      	nop
 801184c:	3708      	adds	r7, #8
 801184e:	46bd      	mov	sp, r7
 8011850:	bd80      	pop	{r7, pc}

08011852 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8011852:	b580      	push	{r7, lr}
 8011854:	b082      	sub	sp, #8
 8011856:	af00      	add	r7, sp, #0
 8011858:	6078      	str	r0, [r7, #4]
 801185a:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801185c:	683b      	ldr	r3, [r7, #0]
 801185e:	885b      	ldrh	r3, [r3, #2]
 8011860:	2b01      	cmp	r3, #1
 8011862:	d106      	bne.n	8011872 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	2201      	movs	r2, #1
 8011868:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 801186c:	6878      	ldr	r0, [r7, #4]
 801186e:	f000 f92b 	bl	8011ac8 <USBD_CtlSendStatus>
  }

}
 8011872:	bf00      	nop
 8011874:	3708      	adds	r7, #8
 8011876:	46bd      	mov	sp, r7
 8011878:	bd80      	pop	{r7, pc}

0801187a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 801187a:	b580      	push	{r7, lr}
 801187c:	b082      	sub	sp, #8
 801187e:	af00      	add	r7, sp, #0
 8011880:	6078      	str	r0, [r7, #4]
 8011882:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 801188a:	3b01      	subs	r3, #1
 801188c:	2b02      	cmp	r3, #2
 801188e:	d80b      	bhi.n	80118a8 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011890:	683b      	ldr	r3, [r7, #0]
 8011892:	885b      	ldrh	r3, [r3, #2]
 8011894:	2b01      	cmp	r3, #1
 8011896:	d10c      	bne.n	80118b2 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	2200      	movs	r2, #0
 801189c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 80118a0:	6878      	ldr	r0, [r7, #4]
 80118a2:	f000 f911 	bl	8011ac8 <USBD_CtlSendStatus>
    }
    break;
 80118a6:	e004      	b.n	80118b2 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 80118a8:	6839      	ldr	r1, [r7, #0]
 80118aa:	6878      	ldr	r0, [r7, #4]
 80118ac:	f000 f843 	bl	8011936 <USBD_CtlError>
    break;
 80118b0:	e000      	b.n	80118b4 <USBD_ClrFeature+0x3a>
    break;
 80118b2:	bf00      	nop
  }
}
 80118b4:	bf00      	nop
 80118b6:	3708      	adds	r7, #8
 80118b8:	46bd      	mov	sp, r7
 80118ba:	bd80      	pop	{r7, pc}

080118bc <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80118bc:	b480      	push	{r7}
 80118be:	b083      	sub	sp, #12
 80118c0:	af00      	add	r7, sp, #0
 80118c2:	6078      	str	r0, [r7, #4]
 80118c4:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80118c6:	683b      	ldr	r3, [r7, #0]
 80118c8:	781a      	ldrb	r2, [r3, #0]
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80118ce:	683b      	ldr	r3, [r7, #0]
 80118d0:	785a      	ldrb	r2, [r3, #1]
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80118d6:	683b      	ldr	r3, [r7, #0]
 80118d8:	3302      	adds	r3, #2
 80118da:	781b      	ldrb	r3, [r3, #0]
 80118dc:	b29a      	uxth	r2, r3
 80118de:	683b      	ldr	r3, [r7, #0]
 80118e0:	3303      	adds	r3, #3
 80118e2:	781b      	ldrb	r3, [r3, #0]
 80118e4:	b29b      	uxth	r3, r3
 80118e6:	021b      	lsls	r3, r3, #8
 80118e8:	b29b      	uxth	r3, r3
 80118ea:	4413      	add	r3, r2
 80118ec:	b29a      	uxth	r2, r3
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80118f2:	683b      	ldr	r3, [r7, #0]
 80118f4:	3304      	adds	r3, #4
 80118f6:	781b      	ldrb	r3, [r3, #0]
 80118f8:	b29a      	uxth	r2, r3
 80118fa:	683b      	ldr	r3, [r7, #0]
 80118fc:	3305      	adds	r3, #5
 80118fe:	781b      	ldrb	r3, [r3, #0]
 8011900:	b29b      	uxth	r3, r3
 8011902:	021b      	lsls	r3, r3, #8
 8011904:	b29b      	uxth	r3, r3
 8011906:	4413      	add	r3, r2
 8011908:	b29a      	uxth	r2, r3
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 801190e:	683b      	ldr	r3, [r7, #0]
 8011910:	3306      	adds	r3, #6
 8011912:	781b      	ldrb	r3, [r3, #0]
 8011914:	b29a      	uxth	r2, r3
 8011916:	683b      	ldr	r3, [r7, #0]
 8011918:	3307      	adds	r3, #7
 801191a:	781b      	ldrb	r3, [r3, #0]
 801191c:	b29b      	uxth	r3, r3
 801191e:	021b      	lsls	r3, r3, #8
 8011920:	b29b      	uxth	r3, r3
 8011922:	4413      	add	r3, r2
 8011924:	b29a      	uxth	r2, r3
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	80da      	strh	r2, [r3, #6]

}
 801192a:	bf00      	nop
 801192c:	370c      	adds	r7, #12
 801192e:	46bd      	mov	sp, r7
 8011930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011934:	4770      	bx	lr

08011936 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8011936:	b580      	push	{r7, lr}
 8011938:	b082      	sub	sp, #8
 801193a:	af00      	add	r7, sp, #0
 801193c:	6078      	str	r0, [r7, #4]
 801193e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8011940:	2180      	movs	r1, #128	; 0x80
 8011942:	6878      	ldr	r0, [r7, #4]
 8011944:	f003 feb4 	bl	80156b0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8011948:	2100      	movs	r1, #0
 801194a:	6878      	ldr	r0, [r7, #4]
 801194c:	f003 feb0 	bl	80156b0 <USBD_LL_StallEP>
}
 8011950:	bf00      	nop
 8011952:	3708      	adds	r7, #8
 8011954:	46bd      	mov	sp, r7
 8011956:	bd80      	pop	{r7, pc}

08011958 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011958:	b580      	push	{r7, lr}
 801195a:	b086      	sub	sp, #24
 801195c:	af00      	add	r7, sp, #0
 801195e:	60f8      	str	r0, [r7, #12]
 8011960:	60b9      	str	r1, [r7, #8]
 8011962:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011964:	2300      	movs	r3, #0
 8011966:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	2b00      	cmp	r3, #0
 801196c:	d032      	beq.n	80119d4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 801196e:	68f8      	ldr	r0, [r7, #12]
 8011970:	f000 f834 	bl	80119dc <USBD_GetLen>
 8011974:	4603      	mov	r3, r0
 8011976:	3301      	adds	r3, #1
 8011978:	b29b      	uxth	r3, r3
 801197a:	005b      	lsls	r3, r3, #1
 801197c:	b29a      	uxth	r2, r3
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8011982:	7dfb      	ldrb	r3, [r7, #23]
 8011984:	1c5a      	adds	r2, r3, #1
 8011986:	75fa      	strb	r2, [r7, #23]
 8011988:	461a      	mov	r2, r3
 801198a:	68bb      	ldr	r3, [r7, #8]
 801198c:	4413      	add	r3, r2
 801198e:	687a      	ldr	r2, [r7, #4]
 8011990:	7812      	ldrb	r2, [r2, #0]
 8011992:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8011994:	7dfb      	ldrb	r3, [r7, #23]
 8011996:	1c5a      	adds	r2, r3, #1
 8011998:	75fa      	strb	r2, [r7, #23]
 801199a:	461a      	mov	r2, r3
 801199c:	68bb      	ldr	r3, [r7, #8]
 801199e:	4413      	add	r3, r2
 80119a0:	2203      	movs	r2, #3
 80119a2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80119a4:	e012      	b.n	80119cc <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	1c5a      	adds	r2, r3, #1
 80119aa:	60fa      	str	r2, [r7, #12]
 80119ac:	7dfa      	ldrb	r2, [r7, #23]
 80119ae:	1c51      	adds	r1, r2, #1
 80119b0:	75f9      	strb	r1, [r7, #23]
 80119b2:	4611      	mov	r1, r2
 80119b4:	68ba      	ldr	r2, [r7, #8]
 80119b6:	440a      	add	r2, r1
 80119b8:	781b      	ldrb	r3, [r3, #0]
 80119ba:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80119bc:	7dfb      	ldrb	r3, [r7, #23]
 80119be:	1c5a      	adds	r2, r3, #1
 80119c0:	75fa      	strb	r2, [r7, #23]
 80119c2:	461a      	mov	r2, r3
 80119c4:	68bb      	ldr	r3, [r7, #8]
 80119c6:	4413      	add	r3, r2
 80119c8:	2200      	movs	r2, #0
 80119ca:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	781b      	ldrb	r3, [r3, #0]
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d1e8      	bne.n	80119a6 <USBD_GetString+0x4e>
    }
  }
}
 80119d4:	bf00      	nop
 80119d6:	3718      	adds	r7, #24
 80119d8:	46bd      	mov	sp, r7
 80119da:	bd80      	pop	{r7, pc}

080119dc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80119dc:	b480      	push	{r7}
 80119de:	b085      	sub	sp, #20
 80119e0:	af00      	add	r7, sp, #0
 80119e2:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 80119e4:	2300      	movs	r3, #0
 80119e6:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 80119e8:	e005      	b.n	80119f6 <USBD_GetLen+0x1a>
    {
        len++;
 80119ea:	7bfb      	ldrb	r3, [r7, #15]
 80119ec:	3301      	adds	r3, #1
 80119ee:	73fb      	strb	r3, [r7, #15]
        buf++;
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	3301      	adds	r3, #1
 80119f4:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	781b      	ldrb	r3, [r3, #0]
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d1f5      	bne.n	80119ea <USBD_GetLen+0xe>
    }

    return len;
 80119fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a00:	4618      	mov	r0, r3
 8011a02:	3714      	adds	r7, #20
 8011a04:	46bd      	mov	sp, r7
 8011a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a0a:	4770      	bx	lr

08011a0c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8011a0c:	b580      	push	{r7, lr}
 8011a0e:	b084      	sub	sp, #16
 8011a10:	af00      	add	r7, sp, #0
 8011a12:	60f8      	str	r0, [r7, #12]
 8011a14:	60b9      	str	r1, [r7, #8]
 8011a16:	4613      	mov	r3, r2
 8011a18:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	2202      	movs	r2, #2
 8011a1e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8011a22:	88fa      	ldrh	r2, [r7, #6]
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8011a28:	88fa      	ldrh	r2, [r7, #6]
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8011a2e:	88fb      	ldrh	r3, [r7, #6]
 8011a30:	68ba      	ldr	r2, [r7, #8]
 8011a32:	2100      	movs	r1, #0
 8011a34:	68f8      	ldr	r0, [r7, #12]
 8011a36:	f003 fec4 	bl	80157c2 <USBD_LL_Transmit>

  return USBD_OK;
 8011a3a:	2300      	movs	r3, #0
}
 8011a3c:	4618      	mov	r0, r3
 8011a3e:	3710      	adds	r7, #16
 8011a40:	46bd      	mov	sp, r7
 8011a42:	bd80      	pop	{r7, pc}

08011a44 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8011a44:	b580      	push	{r7, lr}
 8011a46:	b084      	sub	sp, #16
 8011a48:	af00      	add	r7, sp, #0
 8011a4a:	60f8      	str	r0, [r7, #12]
 8011a4c:	60b9      	str	r1, [r7, #8]
 8011a4e:	4613      	mov	r3, r2
 8011a50:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8011a52:	88fb      	ldrh	r3, [r7, #6]
 8011a54:	68ba      	ldr	r2, [r7, #8]
 8011a56:	2100      	movs	r1, #0
 8011a58:	68f8      	ldr	r0, [r7, #12]
 8011a5a:	f003 feb2 	bl	80157c2 <USBD_LL_Transmit>

  return USBD_OK;
 8011a5e:	2300      	movs	r3, #0
}
 8011a60:	4618      	mov	r0, r3
 8011a62:	3710      	adds	r7, #16
 8011a64:	46bd      	mov	sp, r7
 8011a66:	bd80      	pop	{r7, pc}

08011a68 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8011a68:	b580      	push	{r7, lr}
 8011a6a:	b084      	sub	sp, #16
 8011a6c:	af00      	add	r7, sp, #0
 8011a6e:	60f8      	str	r0, [r7, #12]
 8011a70:	60b9      	str	r1, [r7, #8]
 8011a72:	4613      	mov	r3, r2
 8011a74:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	2203      	movs	r2, #3
 8011a7a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8011a7e:	88fa      	ldrh	r2, [r7, #6]
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8011a86:	88fa      	ldrh	r2, [r7, #6]
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8011a8e:	88fb      	ldrh	r3, [r7, #6]
 8011a90:	68ba      	ldr	r2, [r7, #8]
 8011a92:	2100      	movs	r1, #0
 8011a94:	68f8      	ldr	r0, [r7, #12]
 8011a96:	f003 feb7 	bl	8015808 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011a9a:	2300      	movs	r3, #0
}
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	3710      	adds	r7, #16
 8011aa0:	46bd      	mov	sp, r7
 8011aa2:	bd80      	pop	{r7, pc}

08011aa4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8011aa4:	b580      	push	{r7, lr}
 8011aa6:	b084      	sub	sp, #16
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	60f8      	str	r0, [r7, #12]
 8011aac:	60b9      	str	r1, [r7, #8]
 8011aae:	4613      	mov	r3, r2
 8011ab0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011ab2:	88fb      	ldrh	r3, [r7, #6]
 8011ab4:	68ba      	ldr	r2, [r7, #8]
 8011ab6:	2100      	movs	r1, #0
 8011ab8:	68f8      	ldr	r0, [r7, #12]
 8011aba:	f003 fea5 	bl	8015808 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011abe:	2300      	movs	r3, #0
}
 8011ac0:	4618      	mov	r0, r3
 8011ac2:	3710      	adds	r7, #16
 8011ac4:	46bd      	mov	sp, r7
 8011ac6:	bd80      	pop	{r7, pc}

08011ac8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8011ac8:	b580      	push	{r7, lr}
 8011aca:	b082      	sub	sp, #8
 8011acc:	af00      	add	r7, sp, #0
 8011ace:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	2204      	movs	r2, #4
 8011ad4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011ad8:	2300      	movs	r3, #0
 8011ada:	2200      	movs	r2, #0
 8011adc:	2100      	movs	r1, #0
 8011ade:	6878      	ldr	r0, [r7, #4]
 8011ae0:	f003 fe6f 	bl	80157c2 <USBD_LL_Transmit>

  return USBD_OK;
 8011ae4:	2300      	movs	r3, #0
}
 8011ae6:	4618      	mov	r0, r3
 8011ae8:	3708      	adds	r7, #8
 8011aea:	46bd      	mov	sp, r7
 8011aec:	bd80      	pop	{r7, pc}

08011aee <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8011aee:	b580      	push	{r7, lr}
 8011af0:	b082      	sub	sp, #8
 8011af2:	af00      	add	r7, sp, #0
 8011af4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	2205      	movs	r2, #5
 8011afa:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8011afe:	2300      	movs	r3, #0
 8011b00:	2200      	movs	r2, #0
 8011b02:	2100      	movs	r1, #0
 8011b04:	6878      	ldr	r0, [r7, #4]
 8011b06:	f003 fe7f 	bl	8015808 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011b0a:	2300      	movs	r3, #0
}
 8011b0c:	4618      	mov	r0, r3
 8011b0e:	3708      	adds	r7, #8
 8011b10:	46bd      	mov	sp, r7
 8011b12:	bd80      	pop	{r7, pc}

08011b14 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8011b14:	b480      	push	{r7}
 8011b16:	b085      	sub	sp, #20
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	4603      	mov	r3, r0
 8011b1c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8011b1e:	2300      	movs	r3, #0
 8011b20:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8011b22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011b26:	2b84      	cmp	r3, #132	; 0x84
 8011b28:	d005      	beq.n	8011b36 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8011b2a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	4413      	add	r3, r2
 8011b32:	3303      	adds	r3, #3
 8011b34:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8011b36:	68fb      	ldr	r3, [r7, #12]
}
 8011b38:	4618      	mov	r0, r3
 8011b3a:	3714      	adds	r7, #20
 8011b3c:	46bd      	mov	sp, r7
 8011b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b42:	4770      	bx	lr

08011b44 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8011b44:	b480      	push	{r7}
 8011b46:	b083      	sub	sp, #12
 8011b48:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011b4a:	f3ef 8305 	mrs	r3, IPSR
 8011b4e:	607b      	str	r3, [r7, #4]
  return(result);
 8011b50:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	bf14      	ite	ne
 8011b56:	2301      	movne	r3, #1
 8011b58:	2300      	moveq	r3, #0
 8011b5a:	b2db      	uxtb	r3, r3
}
 8011b5c:	4618      	mov	r0, r3
 8011b5e:	370c      	adds	r7, #12
 8011b60:	46bd      	mov	sp, r7
 8011b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b66:	4770      	bx	lr

08011b68 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8011b6c:	f001 fd56 	bl	801361c <vTaskStartScheduler>
  
  return osOK;
 8011b70:	2300      	movs	r3, #0
}
 8011b72:	4618      	mov	r0, r3
 8011b74:	bd80      	pop	{r7, pc}

08011b76 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8011b76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b78:	b089      	sub	sp, #36	; 0x24
 8011b7a:	af04      	add	r7, sp, #16
 8011b7c:	6078      	str	r0, [r7, #4]
 8011b7e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	695b      	ldr	r3, [r3, #20]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d020      	beq.n	8011bca <osThreadCreate+0x54>
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	699b      	ldr	r3, [r3, #24]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d01c      	beq.n	8011bca <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	685c      	ldr	r4, [r3, #4]
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	681d      	ldr	r5, [r3, #0]
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	691e      	ldr	r6, [r3, #16]
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	f7ff ffb6 	bl	8011b14 <makeFreeRtosPriority>
 8011ba8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	695b      	ldr	r3, [r3, #20]
 8011bae:	687a      	ldr	r2, [r7, #4]
 8011bb0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011bb2:	9202      	str	r2, [sp, #8]
 8011bb4:	9301      	str	r3, [sp, #4]
 8011bb6:	9100      	str	r1, [sp, #0]
 8011bb8:	683b      	ldr	r3, [r7, #0]
 8011bba:	4632      	mov	r2, r6
 8011bbc:	4629      	mov	r1, r5
 8011bbe:	4620      	mov	r0, r4
 8011bc0:	f001 fb71 	bl	80132a6 <xTaskCreateStatic>
 8011bc4:	4603      	mov	r3, r0
 8011bc6:	60fb      	str	r3, [r7, #12]
 8011bc8:	e01c      	b.n	8011c04 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	685c      	ldr	r4, [r3, #4]
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011bd6:	b29e      	uxth	r6, r3
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011bde:	4618      	mov	r0, r3
 8011be0:	f7ff ff98 	bl	8011b14 <makeFreeRtosPriority>
 8011be4:	4602      	mov	r2, r0
 8011be6:	f107 030c 	add.w	r3, r7, #12
 8011bea:	9301      	str	r3, [sp, #4]
 8011bec:	9200      	str	r2, [sp, #0]
 8011bee:	683b      	ldr	r3, [r7, #0]
 8011bf0:	4632      	mov	r2, r6
 8011bf2:	4629      	mov	r1, r5
 8011bf4:	4620      	mov	r0, r4
 8011bf6:	f001 fbaf 	bl	8013358 <xTaskCreate>
 8011bfa:	4603      	mov	r3, r0
 8011bfc:	2b01      	cmp	r3, #1
 8011bfe:	d001      	beq.n	8011c04 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8011c00:	2300      	movs	r3, #0
 8011c02:	e000      	b.n	8011c06 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8011c04:	68fb      	ldr	r3, [r7, #12]
}
 8011c06:	4618      	mov	r0, r3
 8011c08:	3714      	adds	r7, #20
 8011c0a:	46bd      	mov	sp, r7
 8011c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011c0e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8011c0e:	b580      	push	{r7, lr}
 8011c10:	b084      	sub	sp, #16
 8011c12:	af00      	add	r7, sp, #0
 8011c14:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d001      	beq.n	8011c24 <osDelay+0x16>
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	e000      	b.n	8011c26 <osDelay+0x18>
 8011c24:	2301      	movs	r3, #1
 8011c26:	4618      	mov	r0, r3
 8011c28:	f001 fcc4 	bl	80135b4 <vTaskDelay>
  
  return osOK;
 8011c2c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8011c2e:	4618      	mov	r0, r3
 8011c30:	3710      	adds	r7, #16
 8011c32:	46bd      	mov	sp, r7
 8011c34:	bd80      	pop	{r7, pc}
	...

08011c38 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8011c38:	b580      	push	{r7, lr}
 8011c3a:	b086      	sub	sp, #24
 8011c3c:	af02      	add	r7, sp, #8
 8011c3e:	6078      	str	r0, [r7, #4]
 8011c40:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8011c42:	2300      	movs	r3, #0
 8011c44:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8011c46:	2300      	movs	r3, #0
 8011c48:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8011c4a:	f7ff ff7b 	bl	8011b44 <inHandlerMode>
 8011c4e:	4603      	mov	r3, r0
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d01c      	beq.n	8011c8e <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8011c54:	6839      	ldr	r1, [r7, #0]
 8011c56:	f107 0208 	add.w	r2, r7, #8
 8011c5a:	f107 030c 	add.w	r3, r7, #12
 8011c5e:	9300      	str	r3, [sp, #0]
 8011c60:	4613      	mov	r3, r2
 8011c62:	2201      	movs	r2, #1
 8011c64:	6878      	ldr	r0, [r7, #4]
 8011c66:	f002 fbab 	bl	80143c0 <xTaskGenericNotifyFromISR>
 8011c6a:	4603      	mov	r3, r0
 8011c6c:	2b01      	cmp	r3, #1
 8011c6e:	d002      	beq.n	8011c76 <osSignalSet+0x3e>
      return 0x80000000;
 8011c70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011c74:	e019      	b.n	8011caa <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d015      	beq.n	8011ca8 <osSignalSet+0x70>
 8011c7c:	4b0d      	ldr	r3, [pc, #52]	; (8011cb4 <osSignalSet+0x7c>)
 8011c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c82:	601a      	str	r2, [r3, #0]
 8011c84:	f3bf 8f4f 	dsb	sy
 8011c88:	f3bf 8f6f 	isb	sy
 8011c8c:	e00c      	b.n	8011ca8 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8011c8e:	6839      	ldr	r1, [r7, #0]
 8011c90:	f107 0308 	add.w	r3, r7, #8
 8011c94:	2201      	movs	r2, #1
 8011c96:	6878      	ldr	r0, [r7, #4]
 8011c98:	f002 faf2 	bl	8014280 <xTaskGenericNotify>
 8011c9c:	4603      	mov	r3, r0
 8011c9e:	2b01      	cmp	r3, #1
 8011ca0:	d002      	beq.n	8011ca8 <osSignalSet+0x70>
    return 0x80000000;
 8011ca2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011ca6:	e000      	b.n	8011caa <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8011ca8:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8011caa:	4618      	mov	r0, r3
 8011cac:	3710      	adds	r7, #16
 8011cae:	46bd      	mov	sp, r7
 8011cb0:	bd80      	pop	{r7, pc}
 8011cb2:	bf00      	nop
 8011cb4:	e000ed04 	.word	0xe000ed04

08011cb8 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8011cb8:	b590      	push	{r4, r7, lr}
 8011cba:	b089      	sub	sp, #36	; 0x24
 8011cbc:	af00      	add	r7, sp, #0
 8011cbe:	60f8      	str	r0, [r7, #12]
 8011cc0:	60b9      	str	r1, [r7, #8]
 8011cc2:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8011cc4:	2300      	movs	r3, #0
 8011cc6:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8011cc8:	2300      	movs	r3, #0
 8011cca:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cd2:	d103      	bne.n	8011cdc <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8011cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8011cd8:	61fb      	str	r3, [r7, #28]
 8011cda:	e009      	b.n	8011cf0 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d006      	beq.n	8011cf0 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8011ce6:	69fb      	ldr	r3, [r7, #28]
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d101      	bne.n	8011cf0 <osSignalWait+0x38>
      ticks = 1;
 8011cec:	2301      	movs	r3, #1
 8011cee:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8011cf0:	f7ff ff28 	bl	8011b44 <inHandlerMode>
 8011cf4:	4603      	mov	r3, r0
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d002      	beq.n	8011d00 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8011cfa:	2382      	movs	r3, #130	; 0x82
 8011cfc:	613b      	str	r3, [r7, #16]
 8011cfe:	e01b      	b.n	8011d38 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8011d00:	68b9      	ldr	r1, [r7, #8]
 8011d02:	f107 0310 	add.w	r3, r7, #16
 8011d06:	1d1a      	adds	r2, r3, #4
 8011d08:	69fb      	ldr	r3, [r7, #28]
 8011d0a:	2000      	movs	r0, #0
 8011d0c:	f002 fa5e 	bl	80141cc <xTaskNotifyWait>
 8011d10:	4603      	mov	r3, r0
 8011d12:	2b01      	cmp	r3, #1
 8011d14:	d008      	beq.n	8011d28 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8011d16:	69fb      	ldr	r3, [r7, #28]
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d102      	bne.n	8011d22 <osSignalWait+0x6a>
 8011d1c:	2300      	movs	r3, #0
 8011d1e:	613b      	str	r3, [r7, #16]
 8011d20:	e00a      	b.n	8011d38 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8011d22:	2340      	movs	r3, #64	; 0x40
 8011d24:	613b      	str	r3, [r7, #16]
 8011d26:	e007      	b.n	8011d38 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8011d28:	697b      	ldr	r3, [r7, #20]
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	da02      	bge.n	8011d34 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8011d2e:	2386      	movs	r3, #134	; 0x86
 8011d30:	613b      	str	r3, [r7, #16]
 8011d32:	e001      	b.n	8011d38 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8011d34:	2308      	movs	r3, #8
 8011d36:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	461c      	mov	r4, r3
 8011d3c:	f107 0310 	add.w	r3, r7, #16
 8011d40:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011d44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8011d48:	68f8      	ldr	r0, [r7, #12]
 8011d4a:	3724      	adds	r7, #36	; 0x24
 8011d4c:	46bd      	mov	sp, r7
 8011d4e:	bd90      	pop	{r4, r7, pc}

08011d50 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8011d50:	b580      	push	{r7, lr}
 8011d52:	b082      	sub	sp, #8
 8011d54:	af00      	add	r7, sp, #0
 8011d56:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	685b      	ldr	r3, [r3, #4]
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d007      	beq.n	8011d70 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	685b      	ldr	r3, [r3, #4]
 8011d64:	4619      	mov	r1, r3
 8011d66:	2001      	movs	r0, #1
 8011d68:	f000 fce0 	bl	801272c <xQueueCreateMutexStatic>
 8011d6c:	4603      	mov	r3, r0
 8011d6e:	e003      	b.n	8011d78 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8011d70:	2001      	movs	r0, #1
 8011d72:	f000 fcc3 	bl	80126fc <xQueueCreateMutex>
 8011d76:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8011d78:	4618      	mov	r0, r3
 8011d7a:	3708      	adds	r7, #8
 8011d7c:	46bd      	mov	sp, r7
 8011d7e:	bd80      	pop	{r7, pc}

08011d80 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8011d80:	b580      	push	{r7, lr}
 8011d82:	b084      	sub	sp, #16
 8011d84:	af00      	add	r7, sp, #0
 8011d86:	6078      	str	r0, [r7, #4]
 8011d88:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d101      	bne.n	8011d98 <osMutexWait+0x18>
    return osErrorParameter;
 8011d94:	2380      	movs	r3, #128	; 0x80
 8011d96:	e03a      	b.n	8011e0e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8011d98:	2300      	movs	r3, #0
 8011d9a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8011d9c:	683b      	ldr	r3, [r7, #0]
 8011d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011da2:	d103      	bne.n	8011dac <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8011da4:	f04f 33ff 	mov.w	r3, #4294967295
 8011da8:	60fb      	str	r3, [r7, #12]
 8011daa:	e009      	b.n	8011dc0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8011dac:	683b      	ldr	r3, [r7, #0]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d006      	beq.n	8011dc0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8011db2:	683b      	ldr	r3, [r7, #0]
 8011db4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d101      	bne.n	8011dc0 <osMutexWait+0x40>
      ticks = 1;
 8011dbc:	2301      	movs	r3, #1
 8011dbe:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8011dc0:	f7ff fec0 	bl	8011b44 <inHandlerMode>
 8011dc4:	4603      	mov	r3, r0
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d017      	beq.n	8011dfa <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8011dca:	f107 0308 	add.w	r3, r7, #8
 8011dce:	461a      	mov	r2, r3
 8011dd0:	2100      	movs	r1, #0
 8011dd2:	6878      	ldr	r0, [r7, #4]
 8011dd4:	f001 f8c2 	bl	8012f5c <xQueueReceiveFromISR>
 8011dd8:	4603      	mov	r3, r0
 8011dda:	2b01      	cmp	r3, #1
 8011ddc:	d001      	beq.n	8011de2 <osMutexWait+0x62>
      return osErrorOS;
 8011dde:	23ff      	movs	r3, #255	; 0xff
 8011de0:	e015      	b.n	8011e0e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8011de2:	68bb      	ldr	r3, [r7, #8]
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d011      	beq.n	8011e0c <osMutexWait+0x8c>
 8011de8:	4b0b      	ldr	r3, [pc, #44]	; (8011e18 <osMutexWait+0x98>)
 8011dea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011dee:	601a      	str	r2, [r3, #0]
 8011df0:	f3bf 8f4f 	dsb	sy
 8011df4:	f3bf 8f6f 	isb	sy
 8011df8:	e008      	b.n	8011e0c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8011dfa:	68f9      	ldr	r1, [r7, #12]
 8011dfc:	6878      	ldr	r0, [r7, #4]
 8011dfe:	f000 ffa5 	bl	8012d4c <xQueueSemaphoreTake>
 8011e02:	4603      	mov	r3, r0
 8011e04:	2b01      	cmp	r3, #1
 8011e06:	d001      	beq.n	8011e0c <osMutexWait+0x8c>
    return osErrorOS;
 8011e08:	23ff      	movs	r3, #255	; 0xff
 8011e0a:	e000      	b.n	8011e0e <osMutexWait+0x8e>
  }
  
  return osOK;
 8011e0c:	2300      	movs	r3, #0
}
 8011e0e:	4618      	mov	r0, r3
 8011e10:	3710      	adds	r7, #16
 8011e12:	46bd      	mov	sp, r7
 8011e14:	bd80      	pop	{r7, pc}
 8011e16:	bf00      	nop
 8011e18:	e000ed04 	.word	0xe000ed04

08011e1c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8011e1c:	b580      	push	{r7, lr}
 8011e1e:	b084      	sub	sp, #16
 8011e20:	af00      	add	r7, sp, #0
 8011e22:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8011e24:	2300      	movs	r3, #0
 8011e26:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8011e28:	2300      	movs	r3, #0
 8011e2a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8011e2c:	f7ff fe8a 	bl	8011b44 <inHandlerMode>
 8011e30:	4603      	mov	r3, r0
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d016      	beq.n	8011e64 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8011e36:	f107 0308 	add.w	r3, r7, #8
 8011e3a:	4619      	mov	r1, r3
 8011e3c:	6878      	ldr	r0, [r7, #4]
 8011e3e:	f000 fe1f 	bl	8012a80 <xQueueGiveFromISR>
 8011e42:	4603      	mov	r3, r0
 8011e44:	2b01      	cmp	r3, #1
 8011e46:	d001      	beq.n	8011e4c <osMutexRelease+0x30>
      return osErrorOS;
 8011e48:	23ff      	movs	r3, #255	; 0xff
 8011e4a:	e017      	b.n	8011e7c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011e4c:	68bb      	ldr	r3, [r7, #8]
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d013      	beq.n	8011e7a <osMutexRelease+0x5e>
 8011e52:	4b0c      	ldr	r3, [pc, #48]	; (8011e84 <osMutexRelease+0x68>)
 8011e54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e58:	601a      	str	r2, [r3, #0]
 8011e5a:	f3bf 8f4f 	dsb	sy
 8011e5e:	f3bf 8f6f 	isb	sy
 8011e62:	e00a      	b.n	8011e7a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8011e64:	2300      	movs	r3, #0
 8011e66:	2200      	movs	r2, #0
 8011e68:	2100      	movs	r1, #0
 8011e6a:	6878      	ldr	r0, [r7, #4]
 8011e6c:	f000 fc7a 	bl	8012764 <xQueueGenericSend>
 8011e70:	4603      	mov	r3, r0
 8011e72:	2b01      	cmp	r3, #1
 8011e74:	d001      	beq.n	8011e7a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8011e76:	23ff      	movs	r3, #255	; 0xff
 8011e78:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8011e7a:	68fb      	ldr	r3, [r7, #12]
}
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	3710      	adds	r7, #16
 8011e80:	46bd      	mov	sp, r7
 8011e82:	bd80      	pop	{r7, pc}
 8011e84:	e000ed04 	.word	0xe000ed04

08011e88 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8011e88:	b580      	push	{r7, lr}
 8011e8a:	b086      	sub	sp, #24
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	685b      	ldr	r3, [r3, #4]
 8011e94:	3303      	adds	r3, #3
 8011e96:	f023 0303 	bic.w	r3, r3, #3
 8011e9a:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8011e9c:	2014      	movs	r0, #20
 8011e9e:	f002 fdff 	bl	8014aa0 <pvPortMalloc>
 8011ea2:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8011ea4:	697b      	ldr	r3, [r7, #20]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d046      	beq.n	8011f38 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	681a      	ldr	r2, [r3, #0]
 8011eae:	697b      	ldr	r3, [r7, #20]
 8011eb0:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8011eb2:	68fa      	ldr	r2, [r7, #12]
 8011eb4:	697b      	ldr	r3, [r7, #20]
 8011eb6:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8011eb8:	697b      	ldr	r3, [r7, #20]
 8011eba:	2200      	movs	r2, #0
 8011ebc:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	4618      	mov	r0, r3
 8011ec4:	f002 fdec 	bl	8014aa0 <pvPortMalloc>
 8011ec8:	4602      	mov	r2, r0
 8011eca:	697b      	ldr	r3, [r7, #20]
 8011ecc:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8011ece:	697b      	ldr	r3, [r7, #20]
 8011ed0:	685b      	ldr	r3, [r3, #4]
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d02b      	beq.n	8011f2e <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	68fa      	ldr	r2, [r7, #12]
 8011edc:	fb02 f303 	mul.w	r3, r2, r3
 8011ee0:	4618      	mov	r0, r3
 8011ee2:	f002 fddd 	bl	8014aa0 <pvPortMalloc>
 8011ee6:	4602      	mov	r2, r0
 8011ee8:	697b      	ldr	r3, [r7, #20]
 8011eea:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8011eec:	697b      	ldr	r3, [r7, #20]
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d011      	beq.n	8011f18 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8011ef4:	2300      	movs	r3, #0
 8011ef6:	613b      	str	r3, [r7, #16]
 8011ef8:	e008      	b.n	8011f0c <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8011efa:	697b      	ldr	r3, [r7, #20]
 8011efc:	685a      	ldr	r2, [r3, #4]
 8011efe:	693b      	ldr	r3, [r7, #16]
 8011f00:	4413      	add	r3, r2
 8011f02:	2200      	movs	r2, #0
 8011f04:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8011f06:	693b      	ldr	r3, [r7, #16]
 8011f08:	3301      	adds	r3, #1
 8011f0a:	613b      	str	r3, [r7, #16]
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	681b      	ldr	r3, [r3, #0]
 8011f10:	693a      	ldr	r2, [r7, #16]
 8011f12:	429a      	cmp	r2, r3
 8011f14:	d3f1      	bcc.n	8011efa <osPoolCreate+0x72>
 8011f16:	e00f      	b.n	8011f38 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8011f18:	697b      	ldr	r3, [r7, #20]
 8011f1a:	685b      	ldr	r3, [r3, #4]
 8011f1c:	4618      	mov	r0, r3
 8011f1e:	f002 fe81 	bl	8014c24 <vPortFree>
        vPortFree(thePool);
 8011f22:	6978      	ldr	r0, [r7, #20]
 8011f24:	f002 fe7e 	bl	8014c24 <vPortFree>
        thePool = NULL;
 8011f28:	2300      	movs	r3, #0
 8011f2a:	617b      	str	r3, [r7, #20]
 8011f2c:	e004      	b.n	8011f38 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8011f2e:	6978      	ldr	r0, [r7, #20]
 8011f30:	f002 fe78 	bl	8014c24 <vPortFree>
      thePool = NULL;
 8011f34:	2300      	movs	r3, #0
 8011f36:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8011f38:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	3718      	adds	r7, #24
 8011f3e:	46bd      	mov	sp, r7
 8011f40:	bd80      	pop	{r7, pc}

08011f42 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8011f42:	b580      	push	{r7, lr}
 8011f44:	b08a      	sub	sp, #40	; 0x28
 8011f46:	af00      	add	r7, sp, #0
 8011f48:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8011f4a:	2300      	movs	r3, #0
 8011f4c:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 8011f4e:	2300      	movs	r3, #0
 8011f50:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8011f52:	f7ff fdf7 	bl	8011b44 <inHandlerMode>
 8011f56:	4603      	mov	r3, r0
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d00e      	beq.n	8011f7a <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011f5c:	f3ef 8211 	mrs	r2, BASEPRI
 8011f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f64:	f383 8811 	msr	BASEPRI, r3
 8011f68:	f3bf 8f6f 	isb	sy
 8011f6c:	f3bf 8f4f 	dsb	sy
 8011f70:	617a      	str	r2, [r7, #20]
 8011f72:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011f74:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8011f76:	627b      	str	r3, [r7, #36]	; 0x24
 8011f78:	e001      	b.n	8011f7e <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8011f7a:	f002 fc77 	bl	801486c <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8011f7e:	2300      	movs	r3, #0
 8011f80:	61fb      	str	r3, [r7, #28]
 8011f82:	e029      	b.n	8011fd8 <osPoolAlloc+0x96>
    index = pool_id->currentIndex + i;
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	691b      	ldr	r3, [r3, #16]
 8011f88:	69fa      	ldr	r2, [r7, #28]
 8011f8a:	4413      	add	r3, r2
 8011f8c:	61bb      	str	r3, [r7, #24]
    if (index >= pool_id->pool_sz) {
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	689b      	ldr	r3, [r3, #8]
 8011f92:	69ba      	ldr	r2, [r7, #24]
 8011f94:	429a      	cmp	r2, r3
 8011f96:	d301      	bcc.n	8011f9c <osPoolAlloc+0x5a>
      index = 0;
 8011f98:	2300      	movs	r3, #0
 8011f9a:	61bb      	str	r3, [r7, #24]
    }
    
    if (pool_id->markers[index] == 0) {
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	685a      	ldr	r2, [r3, #4]
 8011fa0:	69bb      	ldr	r3, [r7, #24]
 8011fa2:	4413      	add	r3, r2
 8011fa4:	781b      	ldrb	r3, [r3, #0]
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d113      	bne.n	8011fd2 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	685a      	ldr	r2, [r3, #4]
 8011fae:	69bb      	ldr	r3, [r7, #24]
 8011fb0:	4413      	add	r3, r2
 8011fb2:	2201      	movs	r2, #1
 8011fb4:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	4619      	mov	r1, r3
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	68db      	ldr	r3, [r3, #12]
 8011fc0:	69ba      	ldr	r2, [r7, #24]
 8011fc2:	fb02 f303 	mul.w	r3, r2, r3
 8011fc6:	440b      	add	r3, r1
 8011fc8:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	69ba      	ldr	r2, [r7, #24]
 8011fce:	611a      	str	r2, [r3, #16]
      break;
 8011fd0:	e007      	b.n	8011fe2 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8011fd2:	69fb      	ldr	r3, [r7, #28]
 8011fd4:	3301      	adds	r3, #1
 8011fd6:	61fb      	str	r3, [r7, #28]
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	689b      	ldr	r3, [r3, #8]
 8011fdc:	69fa      	ldr	r2, [r7, #28]
 8011fde:	429a      	cmp	r2, r3
 8011fe0:	d3d0      	bcc.n	8011f84 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8011fe2:	f7ff fdaf 	bl	8011b44 <inHandlerMode>
 8011fe6:	4603      	mov	r3, r0
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d005      	beq.n	8011ff8 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8011fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fee:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	f383 8811 	msr	BASEPRI, r3
 8011ff6:	e001      	b.n	8011ffc <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8011ff8:	f002 fc66 	bl	80148c8 <vPortExitCritical>
  }
  
  return p;
 8011ffc:	6a3b      	ldr	r3, [r7, #32]
}
 8011ffe:	4618      	mov	r0, r3
 8012000:	3728      	adds	r7, #40	; 0x28
 8012002:	46bd      	mov	sp, r7
 8012004:	bd80      	pop	{r7, pc}

08012006 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8012006:	b480      	push	{r7}
 8012008:	b085      	sub	sp, #20
 801200a:	af00      	add	r7, sp, #0
 801200c:	6078      	str	r0, [r7, #4]
 801200e:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	2b00      	cmp	r3, #0
 8012014:	d101      	bne.n	801201a <osPoolFree+0x14>
    return osErrorParameter;
 8012016:	2380      	movs	r3, #128	; 0x80
 8012018:	e030      	b.n	801207c <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 801201a:	683b      	ldr	r3, [r7, #0]
 801201c:	2b00      	cmp	r3, #0
 801201e:	d101      	bne.n	8012024 <osPoolFree+0x1e>
    return osErrorParameter;
 8012020:	2380      	movs	r3, #128	; 0x80
 8012022:	e02b      	b.n	801207c <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	683a      	ldr	r2, [r7, #0]
 801202a:	429a      	cmp	r2, r3
 801202c:	d201      	bcs.n	8012032 <osPoolFree+0x2c>
    return osErrorParameter;
 801202e:	2380      	movs	r3, #128	; 0x80
 8012030:	e024      	b.n	801207c <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8012032:	683b      	ldr	r3, [r7, #0]
 8012034:	687a      	ldr	r2, [r7, #4]
 8012036:	6812      	ldr	r2, [r2, #0]
 8012038:	1a9b      	subs	r3, r3, r2
 801203a:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	68da      	ldr	r2, [r3, #12]
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	fbb3 f1f2 	udiv	r1, r3, r2
 8012046:	fb02 f201 	mul.w	r2, r2, r1
 801204a:	1a9b      	subs	r3, r3, r2
 801204c:	2b00      	cmp	r3, #0
 801204e:	d001      	beq.n	8012054 <osPoolFree+0x4e>
    return osErrorParameter;
 8012050:	2380      	movs	r3, #128	; 0x80
 8012052:	e013      	b.n	801207c <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	68db      	ldr	r3, [r3, #12]
 8012058:	68fa      	ldr	r2, [r7, #12]
 801205a:	fbb2 f3f3 	udiv	r3, r2, r3
 801205e:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	689b      	ldr	r3, [r3, #8]
 8012064:	68fa      	ldr	r2, [r7, #12]
 8012066:	429a      	cmp	r2, r3
 8012068:	d301      	bcc.n	801206e <osPoolFree+0x68>
    return osErrorParameter;
 801206a:	2380      	movs	r3, #128	; 0x80
 801206c:	e006      	b.n	801207c <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	685a      	ldr	r2, [r3, #4]
 8012072:	68fb      	ldr	r3, [r7, #12]
 8012074:	4413      	add	r3, r2
 8012076:	2200      	movs	r2, #0
 8012078:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 801207a:	2300      	movs	r3, #0
}
 801207c:	4618      	mov	r0, r3
 801207e:	3714      	adds	r7, #20
 8012080:	46bd      	mov	sp, r7
 8012082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012086:	4770      	bx	lr

08012088 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8012088:	b590      	push	{r4, r7, lr}
 801208a:	b087      	sub	sp, #28
 801208c:	af00      	add	r7, sp, #0
 801208e:	6078      	str	r0, [r7, #4]
 8012090:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	60fb      	str	r3, [r7, #12]
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	685b      	ldr	r3, [r3, #4]
 801209c:	613b      	str	r3, [r7, #16]
 801209e:	2300      	movs	r3, #0
 80120a0:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	689c      	ldr	r4, [r3, #8]
 80120a6:	200c      	movs	r0, #12
 80120a8:	f002 fcfa 	bl	8014aa0 <pvPortMalloc>
 80120ac:	4603      	mov	r3, r0
 80120ae:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	689b      	ldr	r3, [r3, #8]
 80120b4:	681b      	ldr	r3, [r3, #0]
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d101      	bne.n	80120be <osMailCreate+0x36>
    return NULL;
 80120ba:	2300      	movs	r3, #0
 80120bc:	e038      	b.n	8012130 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	689b      	ldr	r3, [r3, #8]
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	687a      	ldr	r2, [r7, #4]
 80120c6:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	6818      	ldr	r0, [r3, #0]
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	689b      	ldr	r3, [r3, #8]
 80120d0:	681c      	ldr	r4, [r3, #0]
 80120d2:	2200      	movs	r2, #0
 80120d4:	2104      	movs	r1, #4
 80120d6:	f000 fa9b 	bl	8012610 <xQueueGenericCreate>
 80120da:	4603      	mov	r3, r0
 80120dc:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	689b      	ldr	r3, [r3, #8]
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	685b      	ldr	r3, [r3, #4]
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d107      	bne.n	80120fa <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	689b      	ldr	r3, [r3, #8]
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	4618      	mov	r0, r3
 80120f2:	f002 fd97 	bl	8014c24 <vPortFree>
    return NULL;
 80120f6:	2300      	movs	r3, #0
 80120f8:	e01a      	b.n	8012130 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	689b      	ldr	r3, [r3, #8]
 80120fe:	681c      	ldr	r4, [r3, #0]
 8012100:	f107 030c 	add.w	r3, r7, #12
 8012104:	4618      	mov	r0, r3
 8012106:	f7ff febf 	bl	8011e88 <osPoolCreate>
 801210a:	4603      	mov	r3, r0
 801210c:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	689b      	ldr	r3, [r3, #8]
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	689b      	ldr	r3, [r3, #8]
 8012116:	2b00      	cmp	r3, #0
 8012118:	d107      	bne.n	801212a <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	689b      	ldr	r3, [r3, #8]
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	4618      	mov	r0, r3
 8012122:	f002 fd7f 	bl	8014c24 <vPortFree>
    return NULL;
 8012126:	2300      	movs	r3, #0
 8012128:	e002      	b.n	8012130 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	689b      	ldr	r3, [r3, #8]
 801212e:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8012130:	4618      	mov	r0, r3
 8012132:	371c      	adds	r7, #28
 8012134:	46bd      	mov	sp, r7
 8012136:	bd90      	pop	{r4, r7, pc}

08012138 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 8012138:	b580      	push	{r7, lr}
 801213a:	b084      	sub	sp, #16
 801213c:	af00      	add	r7, sp, #0
 801213e:	6078      	str	r0, [r7, #4]
 8012140:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	2b00      	cmp	r3, #0
 8012146:	d101      	bne.n	801214c <osMailAlloc+0x14>
    return NULL;
 8012148:	2300      	movs	r3, #0
 801214a:	e006      	b.n	801215a <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	689b      	ldr	r3, [r3, #8]
 8012150:	4618      	mov	r0, r3
 8012152:	f7ff fef6 	bl	8011f42 <osPoolAlloc>
 8012156:	60f8      	str	r0, [r7, #12]
  
  return p;
 8012158:	68fb      	ldr	r3, [r7, #12]
}
 801215a:	4618      	mov	r0, r3
 801215c:	3710      	adds	r7, #16
 801215e:	46bd      	mov	sp, r7
 8012160:	bd80      	pop	{r7, pc}
	...

08012164 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8012164:	b580      	push	{r7, lr}
 8012166:	b084      	sub	sp, #16
 8012168:	af00      	add	r7, sp, #0
 801216a:	6078      	str	r0, [r7, #4]
 801216c:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	2b00      	cmp	r3, #0
 8012172:	d101      	bne.n	8012178 <osMailPut+0x14>
    return osErrorParameter;
 8012174:	2380      	movs	r3, #128	; 0x80
 8012176:	e02c      	b.n	80121d2 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8012178:	2300      	movs	r3, #0
 801217a:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 801217c:	f7ff fce2 	bl	8011b44 <inHandlerMode>
 8012180:	4603      	mov	r3, r0
 8012182:	2b00      	cmp	r3, #0
 8012184:	d018      	beq.n	80121b8 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	6858      	ldr	r0, [r3, #4]
 801218a:	f107 020c 	add.w	r2, r7, #12
 801218e:	4639      	mov	r1, r7
 8012190:	2300      	movs	r3, #0
 8012192:	f000 fbe1 	bl	8012958 <xQueueGenericSendFromISR>
 8012196:	4603      	mov	r3, r0
 8012198:	2b01      	cmp	r3, #1
 801219a:	d001      	beq.n	80121a0 <osMailPut+0x3c>
      return osErrorOS;
 801219c:	23ff      	movs	r3, #255	; 0xff
 801219e:	e018      	b.n	80121d2 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d014      	beq.n	80121d0 <osMailPut+0x6c>
 80121a6:	4b0d      	ldr	r3, [pc, #52]	; (80121dc <osMailPut+0x78>)
 80121a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80121ac:	601a      	str	r2, [r3, #0]
 80121ae:	f3bf 8f4f 	dsb	sy
 80121b2:	f3bf 8f6f 	isb	sy
 80121b6:	e00b      	b.n	80121d0 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	6858      	ldr	r0, [r3, #4]
 80121bc:	4639      	mov	r1, r7
 80121be:	2300      	movs	r3, #0
 80121c0:	2200      	movs	r2, #0
 80121c2:	f000 facf 	bl	8012764 <xQueueGenericSend>
 80121c6:	4603      	mov	r3, r0
 80121c8:	2b01      	cmp	r3, #1
 80121ca:	d001      	beq.n	80121d0 <osMailPut+0x6c>
      return osErrorOS;
 80121cc:	23ff      	movs	r3, #255	; 0xff
 80121ce:	e000      	b.n	80121d2 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 80121d0:	2300      	movs	r3, #0
}
 80121d2:	4618      	mov	r0, r3
 80121d4:	3710      	adds	r7, #16
 80121d6:	46bd      	mov	sp, r7
 80121d8:	bd80      	pop	{r7, pc}
 80121da:	bf00      	nop
 80121dc:	e000ed04 	.word	0xe000ed04

080121e0 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 80121e0:	b590      	push	{r4, r7, lr}
 80121e2:	b08b      	sub	sp, #44	; 0x2c
 80121e4:	af00      	add	r7, sp, #0
 80121e6:	60f8      	str	r0, [r7, #12]
 80121e8:	60b9      	str	r1, [r7, #8]
 80121ea:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 80121ec:	68bb      	ldr	r3, [r7, #8]
 80121ee:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 80121f0:	68bb      	ldr	r3, [r7, #8]
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d10a      	bne.n	801220c <osMailGet+0x2c>
    event.status = osErrorParameter;
 80121f6:	2380      	movs	r3, #128	; 0x80
 80121f8:	617b      	str	r3, [r7, #20]
    return event;
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	461c      	mov	r4, r3
 80121fe:	f107 0314 	add.w	r3, r7, #20
 8012202:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012206:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801220a:	e056      	b.n	80122ba <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 801220c:	2300      	movs	r3, #0
 801220e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8012210:	2300      	movs	r3, #0
 8012212:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	f1b3 3fff 	cmp.w	r3, #4294967295
 801221a:	d103      	bne.n	8012224 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 801221c:	f04f 33ff 	mov.w	r3, #4294967295
 8012220:	627b      	str	r3, [r7, #36]	; 0x24
 8012222:	e009      	b.n	8012238 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	2b00      	cmp	r3, #0
 8012228:	d006      	beq.n	8012238 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 801222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012230:	2b00      	cmp	r3, #0
 8012232:	d101      	bne.n	8012238 <osMailGet+0x58>
      ticks = 1;
 8012234:	2301      	movs	r3, #1
 8012236:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8012238:	f7ff fc84 	bl	8011b44 <inHandlerMode>
 801223c:	4603      	mov	r3, r0
 801223e:	2b00      	cmp	r3, #0
 8012240:	d01d      	beq.n	801227e <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8012242:	68bb      	ldr	r3, [r7, #8]
 8012244:	6858      	ldr	r0, [r3, #4]
 8012246:	f107 0220 	add.w	r2, r7, #32
 801224a:	f107 0314 	add.w	r3, r7, #20
 801224e:	3304      	adds	r3, #4
 8012250:	4619      	mov	r1, r3
 8012252:	f000 fe83 	bl	8012f5c <xQueueReceiveFromISR>
 8012256:	4603      	mov	r3, r0
 8012258:	2b01      	cmp	r3, #1
 801225a:	d102      	bne.n	8012262 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 801225c:	2320      	movs	r3, #32
 801225e:	617b      	str	r3, [r7, #20]
 8012260:	e001      	b.n	8012266 <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 8012262:	2300      	movs	r3, #0
 8012264:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012266:	6a3b      	ldr	r3, [r7, #32]
 8012268:	2b00      	cmp	r3, #0
 801226a:	d01e      	beq.n	80122aa <osMailGet+0xca>
 801226c:	4b15      	ldr	r3, [pc, #84]	; (80122c4 <osMailGet+0xe4>)
 801226e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012272:	601a      	str	r2, [r3, #0]
 8012274:	f3bf 8f4f 	dsb	sy
 8012278:	f3bf 8f6f 	isb	sy
 801227c:	e015      	b.n	80122aa <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 801227e:	68bb      	ldr	r3, [r7, #8]
 8012280:	6858      	ldr	r0, [r3, #4]
 8012282:	f107 0314 	add.w	r3, r7, #20
 8012286:	3304      	adds	r3, #4
 8012288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801228a:	4619      	mov	r1, r3
 801228c:	f000 fc82 	bl	8012b94 <xQueueReceive>
 8012290:	4603      	mov	r3, r0
 8012292:	2b01      	cmp	r3, #1
 8012294:	d102      	bne.n	801229c <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 8012296:	2320      	movs	r3, #32
 8012298:	617b      	str	r3, [r7, #20]
 801229a:	e006      	b.n	80122aa <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 801229c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d101      	bne.n	80122a6 <osMailGet+0xc6>
 80122a2:	2300      	movs	r3, #0
 80122a4:	e000      	b.n	80122a8 <osMailGet+0xc8>
 80122a6:	2340      	movs	r3, #64	; 0x40
 80122a8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	461c      	mov	r4, r3
 80122ae:	f107 0314 	add.w	r3, r7, #20
 80122b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80122b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80122ba:	68f8      	ldr	r0, [r7, #12]
 80122bc:	372c      	adds	r7, #44	; 0x2c
 80122be:	46bd      	mov	sp, r7
 80122c0:	bd90      	pop	{r4, r7, pc}
 80122c2:	bf00      	nop
 80122c4:	e000ed04 	.word	0xe000ed04

080122c8 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 80122c8:	b580      	push	{r7, lr}
 80122ca:	b082      	sub	sp, #8
 80122cc:	af00      	add	r7, sp, #0
 80122ce:	6078      	str	r0, [r7, #4]
 80122d0:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d101      	bne.n	80122dc <osMailFree+0x14>
    return osErrorParameter;
 80122d8:	2380      	movs	r3, #128	; 0x80
 80122da:	e006      	b.n	80122ea <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	689b      	ldr	r3, [r3, #8]
 80122e0:	6839      	ldr	r1, [r7, #0]
 80122e2:	4618      	mov	r0, r3
 80122e4:	f7ff fe8f 	bl	8012006 <osPoolFree>
 80122e8:	4603      	mov	r3, r0
}
 80122ea:	4618      	mov	r0, r3
 80122ec:	3708      	adds	r7, #8
 80122ee:	46bd      	mov	sp, r7
 80122f0:	bd80      	pop	{r7, pc}

080122f2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80122f2:	b480      	push	{r7}
 80122f4:	b083      	sub	sp, #12
 80122f6:	af00      	add	r7, sp, #0
 80122f8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	f103 0208 	add.w	r2, r3, #8
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	f04f 32ff 	mov.w	r2, #4294967295
 801230a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	f103 0208 	add.w	r2, r3, #8
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	f103 0208 	add.w	r2, r3, #8
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	2200      	movs	r2, #0
 8012324:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012326:	bf00      	nop
 8012328:	370c      	adds	r7, #12
 801232a:	46bd      	mov	sp, r7
 801232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012330:	4770      	bx	lr

08012332 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012332:	b480      	push	{r7}
 8012334:	b083      	sub	sp, #12
 8012336:	af00      	add	r7, sp, #0
 8012338:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	2200      	movs	r2, #0
 801233e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012340:	bf00      	nop
 8012342:	370c      	adds	r7, #12
 8012344:	46bd      	mov	sp, r7
 8012346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801234a:	4770      	bx	lr

0801234c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801234c:	b480      	push	{r7}
 801234e:	b085      	sub	sp, #20
 8012350:	af00      	add	r7, sp, #0
 8012352:	6078      	str	r0, [r7, #4]
 8012354:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	685b      	ldr	r3, [r3, #4]
 801235a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801235c:	683b      	ldr	r3, [r7, #0]
 801235e:	68fa      	ldr	r2, [r7, #12]
 8012360:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	689a      	ldr	r2, [r3, #8]
 8012366:	683b      	ldr	r3, [r7, #0]
 8012368:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	689b      	ldr	r3, [r3, #8]
 801236e:	683a      	ldr	r2, [r7, #0]
 8012370:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	683a      	ldr	r2, [r7, #0]
 8012376:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8012378:	683b      	ldr	r3, [r7, #0]
 801237a:	687a      	ldr	r2, [r7, #4]
 801237c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	1c5a      	adds	r2, r3, #1
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	601a      	str	r2, [r3, #0]
}
 8012388:	bf00      	nop
 801238a:	3714      	adds	r7, #20
 801238c:	46bd      	mov	sp, r7
 801238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012392:	4770      	bx	lr

08012394 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012394:	b480      	push	{r7}
 8012396:	b085      	sub	sp, #20
 8012398:	af00      	add	r7, sp, #0
 801239a:	6078      	str	r0, [r7, #4]
 801239c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801239e:	683b      	ldr	r3, [r7, #0]
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80123a4:	68bb      	ldr	r3, [r7, #8]
 80123a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123aa:	d103      	bne.n	80123b4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	691b      	ldr	r3, [r3, #16]
 80123b0:	60fb      	str	r3, [r7, #12]
 80123b2:	e00c      	b.n	80123ce <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	3308      	adds	r3, #8
 80123b8:	60fb      	str	r3, [r7, #12]
 80123ba:	e002      	b.n	80123c2 <vListInsert+0x2e>
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	685b      	ldr	r3, [r3, #4]
 80123c0:	60fb      	str	r3, [r7, #12]
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	685b      	ldr	r3, [r3, #4]
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	68ba      	ldr	r2, [r7, #8]
 80123ca:	429a      	cmp	r2, r3
 80123cc:	d2f6      	bcs.n	80123bc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	685a      	ldr	r2, [r3, #4]
 80123d2:	683b      	ldr	r3, [r7, #0]
 80123d4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80123d6:	683b      	ldr	r3, [r7, #0]
 80123d8:	685b      	ldr	r3, [r3, #4]
 80123da:	683a      	ldr	r2, [r7, #0]
 80123dc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80123de:	683b      	ldr	r3, [r7, #0]
 80123e0:	68fa      	ldr	r2, [r7, #12]
 80123e2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80123e4:	68fb      	ldr	r3, [r7, #12]
 80123e6:	683a      	ldr	r2, [r7, #0]
 80123e8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80123ea:	683b      	ldr	r3, [r7, #0]
 80123ec:	687a      	ldr	r2, [r7, #4]
 80123ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	681b      	ldr	r3, [r3, #0]
 80123f4:	1c5a      	adds	r2, r3, #1
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	601a      	str	r2, [r3, #0]
}
 80123fa:	bf00      	nop
 80123fc:	3714      	adds	r7, #20
 80123fe:	46bd      	mov	sp, r7
 8012400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012404:	4770      	bx	lr

08012406 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012406:	b480      	push	{r7}
 8012408:	b085      	sub	sp, #20
 801240a:	af00      	add	r7, sp, #0
 801240c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	691b      	ldr	r3, [r3, #16]
 8012412:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	685b      	ldr	r3, [r3, #4]
 8012418:	687a      	ldr	r2, [r7, #4]
 801241a:	6892      	ldr	r2, [r2, #8]
 801241c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	689b      	ldr	r3, [r3, #8]
 8012422:	687a      	ldr	r2, [r7, #4]
 8012424:	6852      	ldr	r2, [r2, #4]
 8012426:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	685b      	ldr	r3, [r3, #4]
 801242c:	687a      	ldr	r2, [r7, #4]
 801242e:	429a      	cmp	r2, r3
 8012430:	d103      	bne.n	801243a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	689a      	ldr	r2, [r3, #8]
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	2200      	movs	r2, #0
 801243e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012440:	68fb      	ldr	r3, [r7, #12]
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	1e5a      	subs	r2, r3, #1
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	681b      	ldr	r3, [r3, #0]
}
 801244e:	4618      	mov	r0, r3
 8012450:	3714      	adds	r7, #20
 8012452:	46bd      	mov	sp, r7
 8012454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012458:	4770      	bx	lr
	...

0801245c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801245c:	b580      	push	{r7, lr}
 801245e:	b084      	sub	sp, #16
 8012460:	af00      	add	r7, sp, #0
 8012462:	6078      	str	r0, [r7, #4]
 8012464:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	2b00      	cmp	r3, #0
 801246e:	d109      	bne.n	8012484 <xQueueGenericReset+0x28>
	__asm volatile
 8012470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012474:	f383 8811 	msr	BASEPRI, r3
 8012478:	f3bf 8f6f 	isb	sy
 801247c:	f3bf 8f4f 	dsb	sy
 8012480:	60bb      	str	r3, [r7, #8]
 8012482:	e7fe      	b.n	8012482 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8012484:	f002 f9f2 	bl	801486c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	681a      	ldr	r2, [r3, #0]
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012490:	68f9      	ldr	r1, [r7, #12]
 8012492:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012494:	fb01 f303 	mul.w	r3, r1, r3
 8012498:	441a      	add	r2, r3
 801249a:	68fb      	ldr	r3, [r7, #12]
 801249c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801249e:	68fb      	ldr	r3, [r7, #12]
 80124a0:	2200      	movs	r2, #0
 80124a2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	681a      	ldr	r2, [r3, #0]
 80124a8:	68fb      	ldr	r3, [r7, #12]
 80124aa:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80124ac:	68fb      	ldr	r3, [r7, #12]
 80124ae:	681a      	ldr	r2, [r3, #0]
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80124b4:	3b01      	subs	r3, #1
 80124b6:	68f9      	ldr	r1, [r7, #12]
 80124b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80124ba:	fb01 f303 	mul.w	r3, r1, r3
 80124be:	441a      	add	r2, r3
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	22ff      	movs	r2, #255	; 0xff
 80124c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80124cc:	68fb      	ldr	r3, [r7, #12]
 80124ce:	22ff      	movs	r2, #255	; 0xff
 80124d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80124d4:	683b      	ldr	r3, [r7, #0]
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d114      	bne.n	8012504 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80124da:	68fb      	ldr	r3, [r7, #12]
 80124dc:	691b      	ldr	r3, [r3, #16]
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d01a      	beq.n	8012518 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	3310      	adds	r3, #16
 80124e6:	4618      	mov	r0, r3
 80124e8:	f001 fada 	bl	8013aa0 <xTaskRemoveFromEventList>
 80124ec:	4603      	mov	r3, r0
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d012      	beq.n	8012518 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80124f2:	4b0d      	ldr	r3, [pc, #52]	; (8012528 <xQueueGenericReset+0xcc>)
 80124f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80124f8:	601a      	str	r2, [r3, #0]
 80124fa:	f3bf 8f4f 	dsb	sy
 80124fe:	f3bf 8f6f 	isb	sy
 8012502:	e009      	b.n	8012518 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	3310      	adds	r3, #16
 8012508:	4618      	mov	r0, r3
 801250a:	f7ff fef2 	bl	80122f2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	3324      	adds	r3, #36	; 0x24
 8012512:	4618      	mov	r0, r3
 8012514:	f7ff feed 	bl	80122f2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012518:	f002 f9d6 	bl	80148c8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801251c:	2301      	movs	r3, #1
}
 801251e:	4618      	mov	r0, r3
 8012520:	3710      	adds	r7, #16
 8012522:	46bd      	mov	sp, r7
 8012524:	bd80      	pop	{r7, pc}
 8012526:	bf00      	nop
 8012528:	e000ed04 	.word	0xe000ed04

0801252c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801252c:	b580      	push	{r7, lr}
 801252e:	b08e      	sub	sp, #56	; 0x38
 8012530:	af02      	add	r7, sp, #8
 8012532:	60f8      	str	r0, [r7, #12]
 8012534:	60b9      	str	r1, [r7, #8]
 8012536:	607a      	str	r2, [r7, #4]
 8012538:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	2b00      	cmp	r3, #0
 801253e:	d109      	bne.n	8012554 <xQueueGenericCreateStatic+0x28>
 8012540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012544:	f383 8811 	msr	BASEPRI, r3
 8012548:	f3bf 8f6f 	isb	sy
 801254c:	f3bf 8f4f 	dsb	sy
 8012550:	62bb      	str	r3, [r7, #40]	; 0x28
 8012552:	e7fe      	b.n	8012552 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012554:	683b      	ldr	r3, [r7, #0]
 8012556:	2b00      	cmp	r3, #0
 8012558:	d109      	bne.n	801256e <xQueueGenericCreateStatic+0x42>
 801255a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801255e:	f383 8811 	msr	BASEPRI, r3
 8012562:	f3bf 8f6f 	isb	sy
 8012566:	f3bf 8f4f 	dsb	sy
 801256a:	627b      	str	r3, [r7, #36]	; 0x24
 801256c:	e7fe      	b.n	801256c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	2b00      	cmp	r3, #0
 8012572:	d002      	beq.n	801257a <xQueueGenericCreateStatic+0x4e>
 8012574:	68bb      	ldr	r3, [r7, #8]
 8012576:	2b00      	cmp	r3, #0
 8012578:	d001      	beq.n	801257e <xQueueGenericCreateStatic+0x52>
 801257a:	2301      	movs	r3, #1
 801257c:	e000      	b.n	8012580 <xQueueGenericCreateStatic+0x54>
 801257e:	2300      	movs	r3, #0
 8012580:	2b00      	cmp	r3, #0
 8012582:	d109      	bne.n	8012598 <xQueueGenericCreateStatic+0x6c>
 8012584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012588:	f383 8811 	msr	BASEPRI, r3
 801258c:	f3bf 8f6f 	isb	sy
 8012590:	f3bf 8f4f 	dsb	sy
 8012594:	623b      	str	r3, [r7, #32]
 8012596:	e7fe      	b.n	8012596 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	2b00      	cmp	r3, #0
 801259c:	d102      	bne.n	80125a4 <xQueueGenericCreateStatic+0x78>
 801259e:	68bb      	ldr	r3, [r7, #8]
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d101      	bne.n	80125a8 <xQueueGenericCreateStatic+0x7c>
 80125a4:	2301      	movs	r3, #1
 80125a6:	e000      	b.n	80125aa <xQueueGenericCreateStatic+0x7e>
 80125a8:	2300      	movs	r3, #0
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d109      	bne.n	80125c2 <xQueueGenericCreateStatic+0x96>
 80125ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125b2:	f383 8811 	msr	BASEPRI, r3
 80125b6:	f3bf 8f6f 	isb	sy
 80125ba:	f3bf 8f4f 	dsb	sy
 80125be:	61fb      	str	r3, [r7, #28]
 80125c0:	e7fe      	b.n	80125c0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80125c2:	2348      	movs	r3, #72	; 0x48
 80125c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80125c6:	697b      	ldr	r3, [r7, #20]
 80125c8:	2b48      	cmp	r3, #72	; 0x48
 80125ca:	d009      	beq.n	80125e0 <xQueueGenericCreateStatic+0xb4>
 80125cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125d0:	f383 8811 	msr	BASEPRI, r3
 80125d4:	f3bf 8f6f 	isb	sy
 80125d8:	f3bf 8f4f 	dsb	sy
 80125dc:	61bb      	str	r3, [r7, #24]
 80125de:	e7fe      	b.n	80125de <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80125e0:	683b      	ldr	r3, [r7, #0]
 80125e2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80125e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d00d      	beq.n	8012606 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80125ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125ec:	2201      	movs	r2, #1
 80125ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80125f2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80125f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125f8:	9300      	str	r3, [sp, #0]
 80125fa:	4613      	mov	r3, r2
 80125fc:	687a      	ldr	r2, [r7, #4]
 80125fe:	68b9      	ldr	r1, [r7, #8]
 8012600:	68f8      	ldr	r0, [r7, #12]
 8012602:	f000 f842 	bl	801268a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8012606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8012608:	4618      	mov	r0, r3
 801260a:	3730      	adds	r7, #48	; 0x30
 801260c:	46bd      	mov	sp, r7
 801260e:	bd80      	pop	{r7, pc}

08012610 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012610:	b580      	push	{r7, lr}
 8012612:	b08a      	sub	sp, #40	; 0x28
 8012614:	af02      	add	r7, sp, #8
 8012616:	60f8      	str	r0, [r7, #12]
 8012618:	60b9      	str	r1, [r7, #8]
 801261a:	4613      	mov	r3, r2
 801261c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	2b00      	cmp	r3, #0
 8012622:	d109      	bne.n	8012638 <xQueueGenericCreate+0x28>
 8012624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012628:	f383 8811 	msr	BASEPRI, r3
 801262c:	f3bf 8f6f 	isb	sy
 8012630:	f3bf 8f4f 	dsb	sy
 8012634:	613b      	str	r3, [r7, #16]
 8012636:	e7fe      	b.n	8012636 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8012638:	68bb      	ldr	r3, [r7, #8]
 801263a:	2b00      	cmp	r3, #0
 801263c:	d102      	bne.n	8012644 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 801263e:	2300      	movs	r3, #0
 8012640:	61fb      	str	r3, [r7, #28]
 8012642:	e004      	b.n	801264e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	68ba      	ldr	r2, [r7, #8]
 8012648:	fb02 f303 	mul.w	r3, r2, r3
 801264c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 801264e:	69fb      	ldr	r3, [r7, #28]
 8012650:	3348      	adds	r3, #72	; 0x48
 8012652:	4618      	mov	r0, r3
 8012654:	f002 fa24 	bl	8014aa0 <pvPortMalloc>
 8012658:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801265a:	69bb      	ldr	r3, [r7, #24]
 801265c:	2b00      	cmp	r3, #0
 801265e:	d00f      	beq.n	8012680 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8012660:	69bb      	ldr	r3, [r7, #24]
 8012662:	3348      	adds	r3, #72	; 0x48
 8012664:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012666:	69bb      	ldr	r3, [r7, #24]
 8012668:	2200      	movs	r2, #0
 801266a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801266e:	79fa      	ldrb	r2, [r7, #7]
 8012670:	69bb      	ldr	r3, [r7, #24]
 8012672:	9300      	str	r3, [sp, #0]
 8012674:	4613      	mov	r3, r2
 8012676:	697a      	ldr	r2, [r7, #20]
 8012678:	68b9      	ldr	r1, [r7, #8]
 801267a:	68f8      	ldr	r0, [r7, #12]
 801267c:	f000 f805 	bl	801268a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8012680:	69bb      	ldr	r3, [r7, #24]
	}
 8012682:	4618      	mov	r0, r3
 8012684:	3720      	adds	r7, #32
 8012686:	46bd      	mov	sp, r7
 8012688:	bd80      	pop	{r7, pc}

0801268a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801268a:	b580      	push	{r7, lr}
 801268c:	b084      	sub	sp, #16
 801268e:	af00      	add	r7, sp, #0
 8012690:	60f8      	str	r0, [r7, #12]
 8012692:	60b9      	str	r1, [r7, #8]
 8012694:	607a      	str	r2, [r7, #4]
 8012696:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012698:	68bb      	ldr	r3, [r7, #8]
 801269a:	2b00      	cmp	r3, #0
 801269c:	d103      	bne.n	80126a6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801269e:	69bb      	ldr	r3, [r7, #24]
 80126a0:	69ba      	ldr	r2, [r7, #24]
 80126a2:	601a      	str	r2, [r3, #0]
 80126a4:	e002      	b.n	80126ac <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80126a6:	69bb      	ldr	r3, [r7, #24]
 80126a8:	687a      	ldr	r2, [r7, #4]
 80126aa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80126ac:	69bb      	ldr	r3, [r7, #24]
 80126ae:	68fa      	ldr	r2, [r7, #12]
 80126b0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80126b2:	69bb      	ldr	r3, [r7, #24]
 80126b4:	68ba      	ldr	r2, [r7, #8]
 80126b6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80126b8:	2101      	movs	r1, #1
 80126ba:	69b8      	ldr	r0, [r7, #24]
 80126bc:	f7ff fece 	bl	801245c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80126c0:	bf00      	nop
 80126c2:	3710      	adds	r7, #16
 80126c4:	46bd      	mov	sp, r7
 80126c6:	bd80      	pop	{r7, pc}

080126c8 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80126c8:	b580      	push	{r7, lr}
 80126ca:	b082      	sub	sp, #8
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d00e      	beq.n	80126f4 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	2200      	movs	r2, #0
 80126da:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	2200      	movs	r2, #0
 80126e0:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	2200      	movs	r2, #0
 80126e6:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80126e8:	2300      	movs	r3, #0
 80126ea:	2200      	movs	r2, #0
 80126ec:	2100      	movs	r1, #0
 80126ee:	6878      	ldr	r0, [r7, #4]
 80126f0:	f000 f838 	bl	8012764 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80126f4:	bf00      	nop
 80126f6:	3708      	adds	r7, #8
 80126f8:	46bd      	mov	sp, r7
 80126fa:	bd80      	pop	{r7, pc}

080126fc <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80126fc:	b580      	push	{r7, lr}
 80126fe:	b086      	sub	sp, #24
 8012700:	af00      	add	r7, sp, #0
 8012702:	4603      	mov	r3, r0
 8012704:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8012706:	2301      	movs	r3, #1
 8012708:	617b      	str	r3, [r7, #20]
 801270a:	2300      	movs	r3, #0
 801270c:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 801270e:	79fb      	ldrb	r3, [r7, #7]
 8012710:	461a      	mov	r2, r3
 8012712:	6939      	ldr	r1, [r7, #16]
 8012714:	6978      	ldr	r0, [r7, #20]
 8012716:	f7ff ff7b 	bl	8012610 <xQueueGenericCreate>
 801271a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 801271c:	68f8      	ldr	r0, [r7, #12]
 801271e:	f7ff ffd3 	bl	80126c8 <prvInitialiseMutex>

		return pxNewQueue;
 8012722:	68fb      	ldr	r3, [r7, #12]
	}
 8012724:	4618      	mov	r0, r3
 8012726:	3718      	adds	r7, #24
 8012728:	46bd      	mov	sp, r7
 801272a:	bd80      	pop	{r7, pc}

0801272c <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 801272c:	b580      	push	{r7, lr}
 801272e:	b088      	sub	sp, #32
 8012730:	af02      	add	r7, sp, #8
 8012732:	4603      	mov	r3, r0
 8012734:	6039      	str	r1, [r7, #0]
 8012736:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8012738:	2301      	movs	r3, #1
 801273a:	617b      	str	r3, [r7, #20]
 801273c:	2300      	movs	r3, #0
 801273e:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8012740:	79fb      	ldrb	r3, [r7, #7]
 8012742:	9300      	str	r3, [sp, #0]
 8012744:	683b      	ldr	r3, [r7, #0]
 8012746:	2200      	movs	r2, #0
 8012748:	6939      	ldr	r1, [r7, #16]
 801274a:	6978      	ldr	r0, [r7, #20]
 801274c:	f7ff feee 	bl	801252c <xQueueGenericCreateStatic>
 8012750:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8012752:	68f8      	ldr	r0, [r7, #12]
 8012754:	f7ff ffb8 	bl	80126c8 <prvInitialiseMutex>

		return pxNewQueue;
 8012758:	68fb      	ldr	r3, [r7, #12]
	}
 801275a:	4618      	mov	r0, r3
 801275c:	3718      	adds	r7, #24
 801275e:	46bd      	mov	sp, r7
 8012760:	bd80      	pop	{r7, pc}
	...

08012764 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012764:	b580      	push	{r7, lr}
 8012766:	b08e      	sub	sp, #56	; 0x38
 8012768:	af00      	add	r7, sp, #0
 801276a:	60f8      	str	r0, [r7, #12]
 801276c:	60b9      	str	r1, [r7, #8]
 801276e:	607a      	str	r2, [r7, #4]
 8012770:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012772:	2300      	movs	r3, #0
 8012774:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801277a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801277c:	2b00      	cmp	r3, #0
 801277e:	d109      	bne.n	8012794 <xQueueGenericSend+0x30>
 8012780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012784:	f383 8811 	msr	BASEPRI, r3
 8012788:	f3bf 8f6f 	isb	sy
 801278c:	f3bf 8f4f 	dsb	sy
 8012790:	62bb      	str	r3, [r7, #40]	; 0x28
 8012792:	e7fe      	b.n	8012792 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012794:	68bb      	ldr	r3, [r7, #8]
 8012796:	2b00      	cmp	r3, #0
 8012798:	d103      	bne.n	80127a2 <xQueueGenericSend+0x3e>
 801279a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d101      	bne.n	80127a6 <xQueueGenericSend+0x42>
 80127a2:	2301      	movs	r3, #1
 80127a4:	e000      	b.n	80127a8 <xQueueGenericSend+0x44>
 80127a6:	2300      	movs	r3, #0
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d109      	bne.n	80127c0 <xQueueGenericSend+0x5c>
 80127ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127b0:	f383 8811 	msr	BASEPRI, r3
 80127b4:	f3bf 8f6f 	isb	sy
 80127b8:	f3bf 8f4f 	dsb	sy
 80127bc:	627b      	str	r3, [r7, #36]	; 0x24
 80127be:	e7fe      	b.n	80127be <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80127c0:	683b      	ldr	r3, [r7, #0]
 80127c2:	2b02      	cmp	r3, #2
 80127c4:	d103      	bne.n	80127ce <xQueueGenericSend+0x6a>
 80127c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80127ca:	2b01      	cmp	r3, #1
 80127cc:	d101      	bne.n	80127d2 <xQueueGenericSend+0x6e>
 80127ce:	2301      	movs	r3, #1
 80127d0:	e000      	b.n	80127d4 <xQueueGenericSend+0x70>
 80127d2:	2300      	movs	r3, #0
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d109      	bne.n	80127ec <xQueueGenericSend+0x88>
 80127d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127dc:	f383 8811 	msr	BASEPRI, r3
 80127e0:	f3bf 8f6f 	isb	sy
 80127e4:	f3bf 8f4f 	dsb	sy
 80127e8:	623b      	str	r3, [r7, #32]
 80127ea:	e7fe      	b.n	80127ea <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80127ec:	f001 fb14 	bl	8013e18 <xTaskGetSchedulerState>
 80127f0:	4603      	mov	r3, r0
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d102      	bne.n	80127fc <xQueueGenericSend+0x98>
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d101      	bne.n	8012800 <xQueueGenericSend+0x9c>
 80127fc:	2301      	movs	r3, #1
 80127fe:	e000      	b.n	8012802 <xQueueGenericSend+0x9e>
 8012800:	2300      	movs	r3, #0
 8012802:	2b00      	cmp	r3, #0
 8012804:	d109      	bne.n	801281a <xQueueGenericSend+0xb6>
 8012806:	f04f 0350 	mov.w	r3, #80	; 0x50
 801280a:	f383 8811 	msr	BASEPRI, r3
 801280e:	f3bf 8f6f 	isb	sy
 8012812:	f3bf 8f4f 	dsb	sy
 8012816:	61fb      	str	r3, [r7, #28]
 8012818:	e7fe      	b.n	8012818 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801281a:	f002 f827 	bl	801486c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801281e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012820:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012826:	429a      	cmp	r2, r3
 8012828:	d302      	bcc.n	8012830 <xQueueGenericSend+0xcc>
 801282a:	683b      	ldr	r3, [r7, #0]
 801282c:	2b02      	cmp	r3, #2
 801282e:	d129      	bne.n	8012884 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012830:	683a      	ldr	r2, [r7, #0]
 8012832:	68b9      	ldr	r1, [r7, #8]
 8012834:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012836:	f000 fc26 	bl	8013086 <prvCopyDataToQueue>
 801283a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801283c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012840:	2b00      	cmp	r3, #0
 8012842:	d010      	beq.n	8012866 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012846:	3324      	adds	r3, #36	; 0x24
 8012848:	4618      	mov	r0, r3
 801284a:	f001 f929 	bl	8013aa0 <xTaskRemoveFromEventList>
 801284e:	4603      	mov	r3, r0
 8012850:	2b00      	cmp	r3, #0
 8012852:	d013      	beq.n	801287c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012854:	4b3f      	ldr	r3, [pc, #252]	; (8012954 <xQueueGenericSend+0x1f0>)
 8012856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801285a:	601a      	str	r2, [r3, #0]
 801285c:	f3bf 8f4f 	dsb	sy
 8012860:	f3bf 8f6f 	isb	sy
 8012864:	e00a      	b.n	801287c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012868:	2b00      	cmp	r3, #0
 801286a:	d007      	beq.n	801287c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801286c:	4b39      	ldr	r3, [pc, #228]	; (8012954 <xQueueGenericSend+0x1f0>)
 801286e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012872:	601a      	str	r2, [r3, #0]
 8012874:	f3bf 8f4f 	dsb	sy
 8012878:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801287c:	f002 f824 	bl	80148c8 <vPortExitCritical>
				return pdPASS;
 8012880:	2301      	movs	r3, #1
 8012882:	e063      	b.n	801294c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	2b00      	cmp	r3, #0
 8012888:	d103      	bne.n	8012892 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801288a:	f002 f81d 	bl	80148c8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801288e:	2300      	movs	r3, #0
 8012890:	e05c      	b.n	801294c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012894:	2b00      	cmp	r3, #0
 8012896:	d106      	bne.n	80128a6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012898:	f107 0314 	add.w	r3, r7, #20
 801289c:	4618      	mov	r0, r3
 801289e:	f001 f961 	bl	8013b64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80128a2:	2301      	movs	r3, #1
 80128a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80128a6:	f002 f80f 	bl	80148c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80128aa:	f000 ff15 	bl	80136d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80128ae:	f001 ffdd 	bl	801486c <vPortEnterCritical>
 80128b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80128b8:	b25b      	sxtb	r3, r3
 80128ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128be:	d103      	bne.n	80128c8 <xQueueGenericSend+0x164>
 80128c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128c2:	2200      	movs	r2, #0
 80128c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80128c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80128ce:	b25b      	sxtb	r3, r3
 80128d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128d4:	d103      	bne.n	80128de <xQueueGenericSend+0x17a>
 80128d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128d8:	2200      	movs	r2, #0
 80128da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80128de:	f001 fff3 	bl	80148c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80128e2:	1d3a      	adds	r2, r7, #4
 80128e4:	f107 0314 	add.w	r3, r7, #20
 80128e8:	4611      	mov	r1, r2
 80128ea:	4618      	mov	r0, r3
 80128ec:	f001 f950 	bl	8013b90 <xTaskCheckForTimeOut>
 80128f0:	4603      	mov	r3, r0
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d124      	bne.n	8012940 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80128f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80128f8:	f000 fcbd 	bl	8013276 <prvIsQueueFull>
 80128fc:	4603      	mov	r3, r0
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d018      	beq.n	8012934 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012904:	3310      	adds	r3, #16
 8012906:	687a      	ldr	r2, [r7, #4]
 8012908:	4611      	mov	r1, r2
 801290a:	4618      	mov	r0, r3
 801290c:	f001 f8a4 	bl	8013a58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012910:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012912:	f000 fc48 	bl	80131a6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8012916:	f000 feed 	bl	80136f4 <xTaskResumeAll>
 801291a:	4603      	mov	r3, r0
 801291c:	2b00      	cmp	r3, #0
 801291e:	f47f af7c 	bne.w	801281a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8012922:	4b0c      	ldr	r3, [pc, #48]	; (8012954 <xQueueGenericSend+0x1f0>)
 8012924:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012928:	601a      	str	r2, [r3, #0]
 801292a:	f3bf 8f4f 	dsb	sy
 801292e:	f3bf 8f6f 	isb	sy
 8012932:	e772      	b.n	801281a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012934:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012936:	f000 fc36 	bl	80131a6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801293a:	f000 fedb 	bl	80136f4 <xTaskResumeAll>
 801293e:	e76c      	b.n	801281a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012940:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012942:	f000 fc30 	bl	80131a6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012946:	f000 fed5 	bl	80136f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801294a:	2300      	movs	r3, #0
		}
	}
}
 801294c:	4618      	mov	r0, r3
 801294e:	3738      	adds	r7, #56	; 0x38
 8012950:	46bd      	mov	sp, r7
 8012952:	bd80      	pop	{r7, pc}
 8012954:	e000ed04 	.word	0xe000ed04

08012958 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012958:	b580      	push	{r7, lr}
 801295a:	b08e      	sub	sp, #56	; 0x38
 801295c:	af00      	add	r7, sp, #0
 801295e:	60f8      	str	r0, [r7, #12]
 8012960:	60b9      	str	r1, [r7, #8]
 8012962:	607a      	str	r2, [r7, #4]
 8012964:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801296a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801296c:	2b00      	cmp	r3, #0
 801296e:	d109      	bne.n	8012984 <xQueueGenericSendFromISR+0x2c>
 8012970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012974:	f383 8811 	msr	BASEPRI, r3
 8012978:	f3bf 8f6f 	isb	sy
 801297c:	f3bf 8f4f 	dsb	sy
 8012980:	627b      	str	r3, [r7, #36]	; 0x24
 8012982:	e7fe      	b.n	8012982 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012984:	68bb      	ldr	r3, [r7, #8]
 8012986:	2b00      	cmp	r3, #0
 8012988:	d103      	bne.n	8012992 <xQueueGenericSendFromISR+0x3a>
 801298a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801298e:	2b00      	cmp	r3, #0
 8012990:	d101      	bne.n	8012996 <xQueueGenericSendFromISR+0x3e>
 8012992:	2301      	movs	r3, #1
 8012994:	e000      	b.n	8012998 <xQueueGenericSendFromISR+0x40>
 8012996:	2300      	movs	r3, #0
 8012998:	2b00      	cmp	r3, #0
 801299a:	d109      	bne.n	80129b0 <xQueueGenericSendFromISR+0x58>
 801299c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129a0:	f383 8811 	msr	BASEPRI, r3
 80129a4:	f3bf 8f6f 	isb	sy
 80129a8:	f3bf 8f4f 	dsb	sy
 80129ac:	623b      	str	r3, [r7, #32]
 80129ae:	e7fe      	b.n	80129ae <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80129b0:	683b      	ldr	r3, [r7, #0]
 80129b2:	2b02      	cmp	r3, #2
 80129b4:	d103      	bne.n	80129be <xQueueGenericSendFromISR+0x66>
 80129b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80129ba:	2b01      	cmp	r3, #1
 80129bc:	d101      	bne.n	80129c2 <xQueueGenericSendFromISR+0x6a>
 80129be:	2301      	movs	r3, #1
 80129c0:	e000      	b.n	80129c4 <xQueueGenericSendFromISR+0x6c>
 80129c2:	2300      	movs	r3, #0
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d109      	bne.n	80129dc <xQueueGenericSendFromISR+0x84>
 80129c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129cc:	f383 8811 	msr	BASEPRI, r3
 80129d0:	f3bf 8f6f 	isb	sy
 80129d4:	f3bf 8f4f 	dsb	sy
 80129d8:	61fb      	str	r3, [r7, #28]
 80129da:	e7fe      	b.n	80129da <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80129dc:	f002 f822 	bl	8014a24 <vPortValidateInterruptPriority>
	__asm volatile
 80129e0:	f3ef 8211 	mrs	r2, BASEPRI
 80129e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129e8:	f383 8811 	msr	BASEPRI, r3
 80129ec:	f3bf 8f6f 	isb	sy
 80129f0:	f3bf 8f4f 	dsb	sy
 80129f4:	61ba      	str	r2, [r7, #24]
 80129f6:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80129f8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80129fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80129fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012a04:	429a      	cmp	r2, r3
 8012a06:	d302      	bcc.n	8012a0e <xQueueGenericSendFromISR+0xb6>
 8012a08:	683b      	ldr	r3, [r7, #0]
 8012a0a:	2b02      	cmp	r3, #2
 8012a0c:	d12c      	bne.n	8012a68 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012a14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012a18:	683a      	ldr	r2, [r7, #0]
 8012a1a:	68b9      	ldr	r1, [r7, #8]
 8012a1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012a1e:	f000 fb32 	bl	8013086 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012a22:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8012a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a2a:	d112      	bne.n	8012a52 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d016      	beq.n	8012a62 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a36:	3324      	adds	r3, #36	; 0x24
 8012a38:	4618      	mov	r0, r3
 8012a3a:	f001 f831 	bl	8013aa0 <xTaskRemoveFromEventList>
 8012a3e:	4603      	mov	r3, r0
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d00e      	beq.n	8012a62 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d00b      	beq.n	8012a62 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	2201      	movs	r2, #1
 8012a4e:	601a      	str	r2, [r3, #0]
 8012a50:	e007      	b.n	8012a62 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012a52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012a56:	3301      	adds	r3, #1
 8012a58:	b2db      	uxtb	r3, r3
 8012a5a:	b25a      	sxtb	r2, r3
 8012a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012a62:	2301      	movs	r3, #1
 8012a64:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8012a66:	e001      	b.n	8012a6c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012a68:	2300      	movs	r3, #0
 8012a6a:	637b      	str	r3, [r7, #52]	; 0x34
 8012a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a6e:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012a70:	693b      	ldr	r3, [r7, #16]
 8012a72:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012a78:	4618      	mov	r0, r3
 8012a7a:	3738      	adds	r7, #56	; 0x38
 8012a7c:	46bd      	mov	sp, r7
 8012a7e:	bd80      	pop	{r7, pc}

08012a80 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012a80:	b580      	push	{r7, lr}
 8012a82:	b08e      	sub	sp, #56	; 0x38
 8012a84:	af00      	add	r7, sp, #0
 8012a86:	6078      	str	r0, [r7, #4]
 8012a88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8012a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d109      	bne.n	8012aa8 <xQueueGiveFromISR+0x28>
	__asm volatile
 8012a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a98:	f383 8811 	msr	BASEPRI, r3
 8012a9c:	f3bf 8f6f 	isb	sy
 8012aa0:	f3bf 8f4f 	dsb	sy
 8012aa4:	623b      	str	r3, [r7, #32]
 8012aa6:	e7fe      	b.n	8012aa6 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d009      	beq.n	8012ac4 <xQueueGiveFromISR+0x44>
 8012ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ab4:	f383 8811 	msr	BASEPRI, r3
 8012ab8:	f3bf 8f6f 	isb	sy
 8012abc:	f3bf 8f4f 	dsb	sy
 8012ac0:	61fb      	str	r3, [r7, #28]
 8012ac2:	e7fe      	b.n	8012ac2 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8012ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d103      	bne.n	8012ad4 <xQueueGiveFromISR+0x54>
 8012acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ace:	685b      	ldr	r3, [r3, #4]
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d101      	bne.n	8012ad8 <xQueueGiveFromISR+0x58>
 8012ad4:	2301      	movs	r3, #1
 8012ad6:	e000      	b.n	8012ada <xQueueGiveFromISR+0x5a>
 8012ad8:	2300      	movs	r3, #0
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d109      	bne.n	8012af2 <xQueueGiveFromISR+0x72>
 8012ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ae2:	f383 8811 	msr	BASEPRI, r3
 8012ae6:	f3bf 8f6f 	isb	sy
 8012aea:	f3bf 8f4f 	dsb	sy
 8012aee:	61bb      	str	r3, [r7, #24]
 8012af0:	e7fe      	b.n	8012af0 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012af2:	f001 ff97 	bl	8014a24 <vPortValidateInterruptPriority>
	__asm volatile
 8012af6:	f3ef 8211 	mrs	r2, BASEPRI
 8012afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012afe:	f383 8811 	msr	BASEPRI, r3
 8012b02:	f3bf 8f6f 	isb	sy
 8012b06:	f3bf 8f4f 	dsb	sy
 8012b0a:	617a      	str	r2, [r7, #20]
 8012b0c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8012b0e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012b10:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b16:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8012b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012b1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012b1e:	429a      	cmp	r2, r3
 8012b20:	d22b      	bcs.n	8012b7a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012b28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b2e:	1c5a      	adds	r2, r3, #1
 8012b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b32:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012b34:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b3c:	d112      	bne.n	8012b64 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d016      	beq.n	8012b74 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b48:	3324      	adds	r3, #36	; 0x24
 8012b4a:	4618      	mov	r0, r3
 8012b4c:	f000 ffa8 	bl	8013aa0 <xTaskRemoveFromEventList>
 8012b50:	4603      	mov	r3, r0
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d00e      	beq.n	8012b74 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012b56:	683b      	ldr	r3, [r7, #0]
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d00b      	beq.n	8012b74 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012b5c:	683b      	ldr	r3, [r7, #0]
 8012b5e:	2201      	movs	r2, #1
 8012b60:	601a      	str	r2, [r3, #0]
 8012b62:	e007      	b.n	8012b74 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012b64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012b68:	3301      	adds	r3, #1
 8012b6a:	b2db      	uxtb	r3, r3
 8012b6c:	b25a      	sxtb	r2, r3
 8012b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012b74:	2301      	movs	r3, #1
 8012b76:	637b      	str	r3, [r7, #52]	; 0x34
 8012b78:	e001      	b.n	8012b7e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012b7a:	2300      	movs	r3, #0
 8012b7c:	637b      	str	r3, [r7, #52]	; 0x34
 8012b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b80:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8012b82:	68fb      	ldr	r3, [r7, #12]
 8012b84:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012b8a:	4618      	mov	r0, r3
 8012b8c:	3738      	adds	r7, #56	; 0x38
 8012b8e:	46bd      	mov	sp, r7
 8012b90:	bd80      	pop	{r7, pc}
	...

08012b94 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012b94:	b580      	push	{r7, lr}
 8012b96:	b08c      	sub	sp, #48	; 0x30
 8012b98:	af00      	add	r7, sp, #0
 8012b9a:	60f8      	str	r0, [r7, #12]
 8012b9c:	60b9      	str	r1, [r7, #8]
 8012b9e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012ba0:	2300      	movs	r3, #0
 8012ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d109      	bne.n	8012bc2 <xQueueReceive+0x2e>
	__asm volatile
 8012bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bb2:	f383 8811 	msr	BASEPRI, r3
 8012bb6:	f3bf 8f6f 	isb	sy
 8012bba:	f3bf 8f4f 	dsb	sy
 8012bbe:	623b      	str	r3, [r7, #32]
 8012bc0:	e7fe      	b.n	8012bc0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012bc2:	68bb      	ldr	r3, [r7, #8]
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d103      	bne.n	8012bd0 <xQueueReceive+0x3c>
 8012bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d101      	bne.n	8012bd4 <xQueueReceive+0x40>
 8012bd0:	2301      	movs	r3, #1
 8012bd2:	e000      	b.n	8012bd6 <xQueueReceive+0x42>
 8012bd4:	2300      	movs	r3, #0
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d109      	bne.n	8012bee <xQueueReceive+0x5a>
 8012bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bde:	f383 8811 	msr	BASEPRI, r3
 8012be2:	f3bf 8f6f 	isb	sy
 8012be6:	f3bf 8f4f 	dsb	sy
 8012bea:	61fb      	str	r3, [r7, #28]
 8012bec:	e7fe      	b.n	8012bec <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012bee:	f001 f913 	bl	8013e18 <xTaskGetSchedulerState>
 8012bf2:	4603      	mov	r3, r0
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d102      	bne.n	8012bfe <xQueueReceive+0x6a>
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d101      	bne.n	8012c02 <xQueueReceive+0x6e>
 8012bfe:	2301      	movs	r3, #1
 8012c00:	e000      	b.n	8012c04 <xQueueReceive+0x70>
 8012c02:	2300      	movs	r3, #0
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d109      	bne.n	8012c1c <xQueueReceive+0x88>
 8012c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c0c:	f383 8811 	msr	BASEPRI, r3
 8012c10:	f3bf 8f6f 	isb	sy
 8012c14:	f3bf 8f4f 	dsb	sy
 8012c18:	61bb      	str	r3, [r7, #24]
 8012c1a:	e7fe      	b.n	8012c1a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8012c1c:	f001 fe26 	bl	801486c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c24:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d01f      	beq.n	8012c6c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012c2c:	68b9      	ldr	r1, [r7, #8]
 8012c2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012c30:	f000 fa93 	bl	801315a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c36:	1e5a      	subs	r2, r3, #1
 8012c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c3a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c3e:	691b      	ldr	r3, [r3, #16]
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d00f      	beq.n	8012c64 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c46:	3310      	adds	r3, #16
 8012c48:	4618      	mov	r0, r3
 8012c4a:	f000 ff29 	bl	8013aa0 <xTaskRemoveFromEventList>
 8012c4e:	4603      	mov	r3, r0
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d007      	beq.n	8012c64 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012c54:	4b3c      	ldr	r3, [pc, #240]	; (8012d48 <xQueueReceive+0x1b4>)
 8012c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c5a:	601a      	str	r2, [r3, #0]
 8012c5c:	f3bf 8f4f 	dsb	sy
 8012c60:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012c64:	f001 fe30 	bl	80148c8 <vPortExitCritical>
				return pdPASS;
 8012c68:	2301      	movs	r3, #1
 8012c6a:	e069      	b.n	8012d40 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d103      	bne.n	8012c7a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012c72:	f001 fe29 	bl	80148c8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012c76:	2300      	movs	r3, #0
 8012c78:	e062      	b.n	8012d40 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d106      	bne.n	8012c8e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012c80:	f107 0310 	add.w	r3, r7, #16
 8012c84:	4618      	mov	r0, r3
 8012c86:	f000 ff6d 	bl	8013b64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012c8a:	2301      	movs	r3, #1
 8012c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012c8e:	f001 fe1b 	bl	80148c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012c92:	f000 fd21 	bl	80136d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012c96:	f001 fde9 	bl	801486c <vPortEnterCritical>
 8012c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012ca0:	b25b      	sxtb	r3, r3
 8012ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ca6:	d103      	bne.n	8012cb0 <xQueueReceive+0x11c>
 8012ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012caa:	2200      	movs	r2, #0
 8012cac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012cb6:	b25b      	sxtb	r3, r3
 8012cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012cbc:	d103      	bne.n	8012cc6 <xQueueReceive+0x132>
 8012cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cc0:	2200      	movs	r2, #0
 8012cc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012cc6:	f001 fdff 	bl	80148c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012cca:	1d3a      	adds	r2, r7, #4
 8012ccc:	f107 0310 	add.w	r3, r7, #16
 8012cd0:	4611      	mov	r1, r2
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	f000 ff5c 	bl	8013b90 <xTaskCheckForTimeOut>
 8012cd8:	4603      	mov	r3, r0
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d123      	bne.n	8012d26 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012cde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012ce0:	f000 fab3 	bl	801324a <prvIsQueueEmpty>
 8012ce4:	4603      	mov	r3, r0
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d017      	beq.n	8012d1a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cec:	3324      	adds	r3, #36	; 0x24
 8012cee:	687a      	ldr	r2, [r7, #4]
 8012cf0:	4611      	mov	r1, r2
 8012cf2:	4618      	mov	r0, r3
 8012cf4:	f000 feb0 	bl	8013a58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012cf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012cfa:	f000 fa54 	bl	80131a6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012cfe:	f000 fcf9 	bl	80136f4 <xTaskResumeAll>
 8012d02:	4603      	mov	r3, r0
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d189      	bne.n	8012c1c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8012d08:	4b0f      	ldr	r3, [pc, #60]	; (8012d48 <xQueueReceive+0x1b4>)
 8012d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d0e:	601a      	str	r2, [r3, #0]
 8012d10:	f3bf 8f4f 	dsb	sy
 8012d14:	f3bf 8f6f 	isb	sy
 8012d18:	e780      	b.n	8012c1c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8012d1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012d1c:	f000 fa43 	bl	80131a6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012d20:	f000 fce8 	bl	80136f4 <xTaskResumeAll>
 8012d24:	e77a      	b.n	8012c1c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8012d26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012d28:	f000 fa3d 	bl	80131a6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012d2c:	f000 fce2 	bl	80136f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012d30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012d32:	f000 fa8a 	bl	801324a <prvIsQueueEmpty>
 8012d36:	4603      	mov	r3, r0
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	f43f af6f 	beq.w	8012c1c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012d3e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8012d40:	4618      	mov	r0, r3
 8012d42:	3730      	adds	r7, #48	; 0x30
 8012d44:	46bd      	mov	sp, r7
 8012d46:	bd80      	pop	{r7, pc}
 8012d48:	e000ed04 	.word	0xe000ed04

08012d4c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8012d4c:	b580      	push	{r7, lr}
 8012d4e:	b08e      	sub	sp, #56	; 0x38
 8012d50:	af00      	add	r7, sp, #0
 8012d52:	6078      	str	r0, [r7, #4]
 8012d54:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8012d56:	2300      	movs	r3, #0
 8012d58:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8012d5e:	2300      	movs	r3, #0
 8012d60:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d109      	bne.n	8012d7c <xQueueSemaphoreTake+0x30>
 8012d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d6c:	f383 8811 	msr	BASEPRI, r3
 8012d70:	f3bf 8f6f 	isb	sy
 8012d74:	f3bf 8f4f 	dsb	sy
 8012d78:	623b      	str	r3, [r7, #32]
 8012d7a:	e7fe      	b.n	8012d7a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d009      	beq.n	8012d98 <xQueueSemaphoreTake+0x4c>
 8012d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d88:	f383 8811 	msr	BASEPRI, r3
 8012d8c:	f3bf 8f6f 	isb	sy
 8012d90:	f3bf 8f4f 	dsb	sy
 8012d94:	61fb      	str	r3, [r7, #28]
 8012d96:	e7fe      	b.n	8012d96 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012d98:	f001 f83e 	bl	8013e18 <xTaskGetSchedulerState>
 8012d9c:	4603      	mov	r3, r0
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d102      	bne.n	8012da8 <xQueueSemaphoreTake+0x5c>
 8012da2:	683b      	ldr	r3, [r7, #0]
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d101      	bne.n	8012dac <xQueueSemaphoreTake+0x60>
 8012da8:	2301      	movs	r3, #1
 8012daa:	e000      	b.n	8012dae <xQueueSemaphoreTake+0x62>
 8012dac:	2300      	movs	r3, #0
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d109      	bne.n	8012dc6 <xQueueSemaphoreTake+0x7a>
 8012db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012db6:	f383 8811 	msr	BASEPRI, r3
 8012dba:	f3bf 8f6f 	isb	sy
 8012dbe:	f3bf 8f4f 	dsb	sy
 8012dc2:	61bb      	str	r3, [r7, #24]
 8012dc4:	e7fe      	b.n	8012dc4 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8012dc6:	f001 fd51 	bl	801486c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8012dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012dce:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8012dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d024      	beq.n	8012e20 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8012dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dd8:	1e5a      	subs	r2, r3, #1
 8012dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ddc:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d104      	bne.n	8012df0 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8012de6:	f001 f9dd 	bl	80141a4 <pvTaskIncrementMutexHeldCount>
 8012dea:	4602      	mov	r2, r0
 8012dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dee:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012df2:	691b      	ldr	r3, [r3, #16]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d00f      	beq.n	8012e18 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dfa:	3310      	adds	r3, #16
 8012dfc:	4618      	mov	r0, r3
 8012dfe:	f000 fe4f 	bl	8013aa0 <xTaskRemoveFromEventList>
 8012e02:	4603      	mov	r3, r0
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d007      	beq.n	8012e18 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012e08:	4b53      	ldr	r3, [pc, #332]	; (8012f58 <xQueueSemaphoreTake+0x20c>)
 8012e0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e0e:	601a      	str	r2, [r3, #0]
 8012e10:	f3bf 8f4f 	dsb	sy
 8012e14:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012e18:	f001 fd56 	bl	80148c8 <vPortExitCritical>
				return pdPASS;
 8012e1c:	2301      	movs	r3, #1
 8012e1e:	e096      	b.n	8012f4e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012e20:	683b      	ldr	r3, [r7, #0]
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d110      	bne.n	8012e48 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8012e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d009      	beq.n	8012e40 <xQueueSemaphoreTake+0xf4>
 8012e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e30:	f383 8811 	msr	BASEPRI, r3
 8012e34:	f3bf 8f6f 	isb	sy
 8012e38:	f3bf 8f4f 	dsb	sy
 8012e3c:	617b      	str	r3, [r7, #20]
 8012e3e:	e7fe      	b.n	8012e3e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8012e40:	f001 fd42 	bl	80148c8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012e44:	2300      	movs	r3, #0
 8012e46:	e082      	b.n	8012f4e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d106      	bne.n	8012e5c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012e4e:	f107 030c 	add.w	r3, r7, #12
 8012e52:	4618      	mov	r0, r3
 8012e54:	f000 fe86 	bl	8013b64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012e58:	2301      	movs	r3, #1
 8012e5a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012e5c:	f001 fd34 	bl	80148c8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012e60:	f000 fc3a 	bl	80136d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012e64:	f001 fd02 	bl	801486c <vPortEnterCritical>
 8012e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012e6e:	b25b      	sxtb	r3, r3
 8012e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e74:	d103      	bne.n	8012e7e <xQueueSemaphoreTake+0x132>
 8012e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e78:	2200      	movs	r2, #0
 8012e7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012e84:	b25b      	sxtb	r3, r3
 8012e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e8a:	d103      	bne.n	8012e94 <xQueueSemaphoreTake+0x148>
 8012e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e8e:	2200      	movs	r2, #0
 8012e90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012e94:	f001 fd18 	bl	80148c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012e98:	463a      	mov	r2, r7
 8012e9a:	f107 030c 	add.w	r3, r7, #12
 8012e9e:	4611      	mov	r1, r2
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	f000 fe75 	bl	8013b90 <xTaskCheckForTimeOut>
 8012ea6:	4603      	mov	r3, r0
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d132      	bne.n	8012f12 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012eac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012eae:	f000 f9cc 	bl	801324a <prvIsQueueEmpty>
 8012eb2:	4603      	mov	r3, r0
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d026      	beq.n	8012f06 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012eba:	681b      	ldr	r3, [r3, #0]
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d109      	bne.n	8012ed4 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8012ec0:	f001 fcd4 	bl	801486c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8012ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ec6:	685b      	ldr	r3, [r3, #4]
 8012ec8:	4618      	mov	r0, r3
 8012eca:	f000 ffc3 	bl	8013e54 <xTaskPriorityInherit>
 8012ece:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8012ed0:	f001 fcfa 	bl	80148c8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ed6:	3324      	adds	r3, #36	; 0x24
 8012ed8:	683a      	ldr	r2, [r7, #0]
 8012eda:	4611      	mov	r1, r2
 8012edc:	4618      	mov	r0, r3
 8012ede:	f000 fdbb 	bl	8013a58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012ee2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012ee4:	f000 f95f 	bl	80131a6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012ee8:	f000 fc04 	bl	80136f4 <xTaskResumeAll>
 8012eec:	4603      	mov	r3, r0
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	f47f af69 	bne.w	8012dc6 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8012ef4:	4b18      	ldr	r3, [pc, #96]	; (8012f58 <xQueueSemaphoreTake+0x20c>)
 8012ef6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012efa:	601a      	str	r2, [r3, #0]
 8012efc:	f3bf 8f4f 	dsb	sy
 8012f00:	f3bf 8f6f 	isb	sy
 8012f04:	e75f      	b.n	8012dc6 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8012f06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012f08:	f000 f94d 	bl	80131a6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012f0c:	f000 fbf2 	bl	80136f4 <xTaskResumeAll>
 8012f10:	e759      	b.n	8012dc6 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8012f12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012f14:	f000 f947 	bl	80131a6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012f18:	f000 fbec 	bl	80136f4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012f1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012f1e:	f000 f994 	bl	801324a <prvIsQueueEmpty>
 8012f22:	4603      	mov	r3, r0
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	f43f af4e 	beq.w	8012dc6 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8012f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d00d      	beq.n	8012f4c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8012f30:	f001 fc9c 	bl	801486c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8012f34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012f36:	f000 f88e 	bl	8013056 <prvGetDisinheritPriorityAfterTimeout>
 8012f3a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8012f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f3e:	685b      	ldr	r3, [r3, #4]
 8012f40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012f42:	4618      	mov	r0, r3
 8012f44:	f001 f890 	bl	8014068 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8012f48:	f001 fcbe 	bl	80148c8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012f4c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8012f4e:	4618      	mov	r0, r3
 8012f50:	3738      	adds	r7, #56	; 0x38
 8012f52:	46bd      	mov	sp, r7
 8012f54:	bd80      	pop	{r7, pc}
 8012f56:	bf00      	nop
 8012f58:	e000ed04 	.word	0xe000ed04

08012f5c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012f5c:	b580      	push	{r7, lr}
 8012f5e:	b08e      	sub	sp, #56	; 0x38
 8012f60:	af00      	add	r7, sp, #0
 8012f62:	60f8      	str	r0, [r7, #12]
 8012f64:	60b9      	str	r1, [r7, #8]
 8012f66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d109      	bne.n	8012f86 <xQueueReceiveFromISR+0x2a>
 8012f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f76:	f383 8811 	msr	BASEPRI, r3
 8012f7a:	f3bf 8f6f 	isb	sy
 8012f7e:	f3bf 8f4f 	dsb	sy
 8012f82:	623b      	str	r3, [r7, #32]
 8012f84:	e7fe      	b.n	8012f84 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012f86:	68bb      	ldr	r3, [r7, #8]
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d103      	bne.n	8012f94 <xQueueReceiveFromISR+0x38>
 8012f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d101      	bne.n	8012f98 <xQueueReceiveFromISR+0x3c>
 8012f94:	2301      	movs	r3, #1
 8012f96:	e000      	b.n	8012f9a <xQueueReceiveFromISR+0x3e>
 8012f98:	2300      	movs	r3, #0
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d109      	bne.n	8012fb2 <xQueueReceiveFromISR+0x56>
 8012f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fa2:	f383 8811 	msr	BASEPRI, r3
 8012fa6:	f3bf 8f6f 	isb	sy
 8012faa:	f3bf 8f4f 	dsb	sy
 8012fae:	61fb      	str	r3, [r7, #28]
 8012fb0:	e7fe      	b.n	8012fb0 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012fb2:	f001 fd37 	bl	8014a24 <vPortValidateInterruptPriority>
	__asm volatile
 8012fb6:	f3ef 8211 	mrs	r2, BASEPRI
 8012fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fbe:	f383 8811 	msr	BASEPRI, r3
 8012fc2:	f3bf 8f6f 	isb	sy
 8012fc6:	f3bf 8f4f 	dsb	sy
 8012fca:	61ba      	str	r2, [r7, #24]
 8012fcc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012fce:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012fd6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d02f      	beq.n	801303e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8012fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fe0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012fe4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012fe8:	68b9      	ldr	r1, [r7, #8]
 8012fea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012fec:	f000 f8b5 	bl	801315a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ff2:	1e5a      	subs	r2, r3, #1
 8012ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ff6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012ff8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013000:	d112      	bne.n	8013028 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013004:	691b      	ldr	r3, [r3, #16]
 8013006:	2b00      	cmp	r3, #0
 8013008:	d016      	beq.n	8013038 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801300a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801300c:	3310      	adds	r3, #16
 801300e:	4618      	mov	r0, r3
 8013010:	f000 fd46 	bl	8013aa0 <xTaskRemoveFromEventList>
 8013014:	4603      	mov	r3, r0
 8013016:	2b00      	cmp	r3, #0
 8013018:	d00e      	beq.n	8013038 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	2b00      	cmp	r3, #0
 801301e:	d00b      	beq.n	8013038 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	2201      	movs	r2, #1
 8013024:	601a      	str	r2, [r3, #0]
 8013026:	e007      	b.n	8013038 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013028:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801302c:	3301      	adds	r3, #1
 801302e:	b2db      	uxtb	r3, r3
 8013030:	b25a      	sxtb	r2, r3
 8013032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013034:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8013038:	2301      	movs	r3, #1
 801303a:	637b      	str	r3, [r7, #52]	; 0x34
 801303c:	e001      	b.n	8013042 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 801303e:	2300      	movs	r3, #0
 8013040:	637b      	str	r3, [r7, #52]	; 0x34
 8013042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013044:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013046:	693b      	ldr	r3, [r7, #16]
 8013048:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801304c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801304e:	4618      	mov	r0, r3
 8013050:	3738      	adds	r7, #56	; 0x38
 8013052:	46bd      	mov	sp, r7
 8013054:	bd80      	pop	{r7, pc}

08013056 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8013056:	b480      	push	{r7}
 8013058:	b085      	sub	sp, #20
 801305a:	af00      	add	r7, sp, #0
 801305c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013062:	2b00      	cmp	r3, #0
 8013064:	d006      	beq.n	8013074 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	f1c3 0307 	rsb	r3, r3, #7
 8013070:	60fb      	str	r3, [r7, #12]
 8013072:	e001      	b.n	8013078 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8013074:	2300      	movs	r3, #0
 8013076:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8013078:	68fb      	ldr	r3, [r7, #12]
	}
 801307a:	4618      	mov	r0, r3
 801307c:	3714      	adds	r7, #20
 801307e:	46bd      	mov	sp, r7
 8013080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013084:	4770      	bx	lr

08013086 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013086:	b580      	push	{r7, lr}
 8013088:	b086      	sub	sp, #24
 801308a:	af00      	add	r7, sp, #0
 801308c:	60f8      	str	r0, [r7, #12]
 801308e:	60b9      	str	r1, [r7, #8]
 8013090:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013092:	2300      	movs	r3, #0
 8013094:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801309a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d10d      	bne.n	80130c0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d14d      	bne.n	8013148 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	685b      	ldr	r3, [r3, #4]
 80130b0:	4618      	mov	r0, r3
 80130b2:	f000 ff55 	bl	8013f60 <xTaskPriorityDisinherit>
 80130b6:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	2200      	movs	r2, #0
 80130bc:	605a      	str	r2, [r3, #4]
 80130be:	e043      	b.n	8013148 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d119      	bne.n	80130fa <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	6898      	ldr	r0, [r3, #8]
 80130ca:	68fb      	ldr	r3, [r7, #12]
 80130cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80130ce:	461a      	mov	r2, r3
 80130d0:	68b9      	ldr	r1, [r7, #8]
 80130d2:	f002 fc35 	bl	8015940 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	689a      	ldr	r2, [r3, #8]
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80130de:	441a      	add	r2, r3
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	689a      	ldr	r2, [r3, #8]
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	685b      	ldr	r3, [r3, #4]
 80130ec:	429a      	cmp	r2, r3
 80130ee:	d32b      	bcc.n	8013148 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	681a      	ldr	r2, [r3, #0]
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	609a      	str	r2, [r3, #8]
 80130f8:	e026      	b.n	8013148 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	68d8      	ldr	r0, [r3, #12]
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013102:	461a      	mov	r2, r3
 8013104:	68b9      	ldr	r1, [r7, #8]
 8013106:	f002 fc1b 	bl	8015940 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	68da      	ldr	r2, [r3, #12]
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013112:	425b      	negs	r3, r3
 8013114:	441a      	add	r2, r3
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	68da      	ldr	r2, [r3, #12]
 801311e:	68fb      	ldr	r3, [r7, #12]
 8013120:	681b      	ldr	r3, [r3, #0]
 8013122:	429a      	cmp	r2, r3
 8013124:	d207      	bcs.n	8013136 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8013126:	68fb      	ldr	r3, [r7, #12]
 8013128:	685a      	ldr	r2, [r3, #4]
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801312e:	425b      	negs	r3, r3
 8013130:	441a      	add	r2, r3
 8013132:	68fb      	ldr	r3, [r7, #12]
 8013134:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	2b02      	cmp	r3, #2
 801313a:	d105      	bne.n	8013148 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801313c:	693b      	ldr	r3, [r7, #16]
 801313e:	2b00      	cmp	r3, #0
 8013140:	d002      	beq.n	8013148 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013142:	693b      	ldr	r3, [r7, #16]
 8013144:	3b01      	subs	r3, #1
 8013146:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013148:	693b      	ldr	r3, [r7, #16]
 801314a:	1c5a      	adds	r2, r3, #1
 801314c:	68fb      	ldr	r3, [r7, #12]
 801314e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8013150:	697b      	ldr	r3, [r7, #20]
}
 8013152:	4618      	mov	r0, r3
 8013154:	3718      	adds	r7, #24
 8013156:	46bd      	mov	sp, r7
 8013158:	bd80      	pop	{r7, pc}

0801315a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801315a:	b580      	push	{r7, lr}
 801315c:	b082      	sub	sp, #8
 801315e:	af00      	add	r7, sp, #0
 8013160:	6078      	str	r0, [r7, #4]
 8013162:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013168:	2b00      	cmp	r3, #0
 801316a:	d018      	beq.n	801319e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	68da      	ldr	r2, [r3, #12]
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013174:	441a      	add	r2, r3
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	68da      	ldr	r2, [r3, #12]
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	685b      	ldr	r3, [r3, #4]
 8013182:	429a      	cmp	r2, r3
 8013184:	d303      	bcc.n	801318e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	681a      	ldr	r2, [r3, #0]
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	68d9      	ldr	r1, [r3, #12]
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013196:	461a      	mov	r2, r3
 8013198:	6838      	ldr	r0, [r7, #0]
 801319a:	f002 fbd1 	bl	8015940 <memcpy>
	}
}
 801319e:	bf00      	nop
 80131a0:	3708      	adds	r7, #8
 80131a2:	46bd      	mov	sp, r7
 80131a4:	bd80      	pop	{r7, pc}

080131a6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80131a6:	b580      	push	{r7, lr}
 80131a8:	b084      	sub	sp, #16
 80131aa:	af00      	add	r7, sp, #0
 80131ac:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80131ae:	f001 fb5d 	bl	801486c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80131b8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80131ba:	e011      	b.n	80131e0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d012      	beq.n	80131ea <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	3324      	adds	r3, #36	; 0x24
 80131c8:	4618      	mov	r0, r3
 80131ca:	f000 fc69 	bl	8013aa0 <xTaskRemoveFromEventList>
 80131ce:	4603      	mov	r3, r0
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d001      	beq.n	80131d8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80131d4:	f000 fd3c 	bl	8013c50 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80131d8:	7bfb      	ldrb	r3, [r7, #15]
 80131da:	3b01      	subs	r3, #1
 80131dc:	b2db      	uxtb	r3, r3
 80131de:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80131e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	dce9      	bgt.n	80131bc <prvUnlockQueue+0x16>
 80131e8:	e000      	b.n	80131ec <prvUnlockQueue+0x46>
					break;
 80131ea:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	22ff      	movs	r2, #255	; 0xff
 80131f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80131f4:	f001 fb68 	bl	80148c8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80131f8:	f001 fb38 	bl	801486c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013202:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013204:	e011      	b.n	801322a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	691b      	ldr	r3, [r3, #16]
 801320a:	2b00      	cmp	r3, #0
 801320c:	d012      	beq.n	8013234 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	3310      	adds	r3, #16
 8013212:	4618      	mov	r0, r3
 8013214:	f000 fc44 	bl	8013aa0 <xTaskRemoveFromEventList>
 8013218:	4603      	mov	r3, r0
 801321a:	2b00      	cmp	r3, #0
 801321c:	d001      	beq.n	8013222 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801321e:	f000 fd17 	bl	8013c50 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013222:	7bbb      	ldrb	r3, [r7, #14]
 8013224:	3b01      	subs	r3, #1
 8013226:	b2db      	uxtb	r3, r3
 8013228:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801322a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801322e:	2b00      	cmp	r3, #0
 8013230:	dce9      	bgt.n	8013206 <prvUnlockQueue+0x60>
 8013232:	e000      	b.n	8013236 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013234:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	22ff      	movs	r2, #255	; 0xff
 801323a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801323e:	f001 fb43 	bl	80148c8 <vPortExitCritical>
}
 8013242:	bf00      	nop
 8013244:	3710      	adds	r7, #16
 8013246:	46bd      	mov	sp, r7
 8013248:	bd80      	pop	{r7, pc}

0801324a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801324a:	b580      	push	{r7, lr}
 801324c:	b084      	sub	sp, #16
 801324e:	af00      	add	r7, sp, #0
 8013250:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013252:	f001 fb0b 	bl	801486c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801325a:	2b00      	cmp	r3, #0
 801325c:	d102      	bne.n	8013264 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801325e:	2301      	movs	r3, #1
 8013260:	60fb      	str	r3, [r7, #12]
 8013262:	e001      	b.n	8013268 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013264:	2300      	movs	r3, #0
 8013266:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013268:	f001 fb2e 	bl	80148c8 <vPortExitCritical>

	return xReturn;
 801326c:	68fb      	ldr	r3, [r7, #12]
}
 801326e:	4618      	mov	r0, r3
 8013270:	3710      	adds	r7, #16
 8013272:	46bd      	mov	sp, r7
 8013274:	bd80      	pop	{r7, pc}

08013276 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013276:	b580      	push	{r7, lr}
 8013278:	b084      	sub	sp, #16
 801327a:	af00      	add	r7, sp, #0
 801327c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801327e:	f001 faf5 	bl	801486c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801328a:	429a      	cmp	r2, r3
 801328c:	d102      	bne.n	8013294 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801328e:	2301      	movs	r3, #1
 8013290:	60fb      	str	r3, [r7, #12]
 8013292:	e001      	b.n	8013298 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013294:	2300      	movs	r3, #0
 8013296:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013298:	f001 fb16 	bl	80148c8 <vPortExitCritical>

	return xReturn;
 801329c:	68fb      	ldr	r3, [r7, #12]
}
 801329e:	4618      	mov	r0, r3
 80132a0:	3710      	adds	r7, #16
 80132a2:	46bd      	mov	sp, r7
 80132a4:	bd80      	pop	{r7, pc}

080132a6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80132a6:	b580      	push	{r7, lr}
 80132a8:	b08e      	sub	sp, #56	; 0x38
 80132aa:	af04      	add	r7, sp, #16
 80132ac:	60f8      	str	r0, [r7, #12]
 80132ae:	60b9      	str	r1, [r7, #8]
 80132b0:	607a      	str	r2, [r7, #4]
 80132b2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80132b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d109      	bne.n	80132ce <xTaskCreateStatic+0x28>
	__asm volatile
 80132ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132be:	f383 8811 	msr	BASEPRI, r3
 80132c2:	f3bf 8f6f 	isb	sy
 80132c6:	f3bf 8f4f 	dsb	sy
 80132ca:	623b      	str	r3, [r7, #32]
 80132cc:	e7fe      	b.n	80132cc <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80132ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d109      	bne.n	80132e8 <xTaskCreateStatic+0x42>
 80132d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132d8:	f383 8811 	msr	BASEPRI, r3
 80132dc:	f3bf 8f6f 	isb	sy
 80132e0:	f3bf 8f4f 	dsb	sy
 80132e4:	61fb      	str	r3, [r7, #28]
 80132e6:	e7fe      	b.n	80132e6 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80132e8:	2354      	movs	r3, #84	; 0x54
 80132ea:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80132ec:	693b      	ldr	r3, [r7, #16]
 80132ee:	2b54      	cmp	r3, #84	; 0x54
 80132f0:	d009      	beq.n	8013306 <xTaskCreateStatic+0x60>
 80132f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132f6:	f383 8811 	msr	BASEPRI, r3
 80132fa:	f3bf 8f6f 	isb	sy
 80132fe:	f3bf 8f4f 	dsb	sy
 8013302:	61bb      	str	r3, [r7, #24]
 8013304:	e7fe      	b.n	8013304 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013308:	2b00      	cmp	r3, #0
 801330a:	d01e      	beq.n	801334a <xTaskCreateStatic+0xa4>
 801330c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801330e:	2b00      	cmp	r3, #0
 8013310:	d01b      	beq.n	801334a <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013314:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013318:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801331a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801331c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801331e:	2202      	movs	r2, #2
 8013320:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013324:	2300      	movs	r3, #0
 8013326:	9303      	str	r3, [sp, #12]
 8013328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801332a:	9302      	str	r3, [sp, #8]
 801332c:	f107 0314 	add.w	r3, r7, #20
 8013330:	9301      	str	r3, [sp, #4]
 8013332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013334:	9300      	str	r3, [sp, #0]
 8013336:	683b      	ldr	r3, [r7, #0]
 8013338:	687a      	ldr	r2, [r7, #4]
 801333a:	68b9      	ldr	r1, [r7, #8]
 801333c:	68f8      	ldr	r0, [r7, #12]
 801333e:	f000 f850 	bl	80133e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013342:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013344:	f000 f8cc 	bl	80134e0 <prvAddNewTaskToReadyList>
 8013348:	e001      	b.n	801334e <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 801334a:	2300      	movs	r3, #0
 801334c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801334e:	697b      	ldr	r3, [r7, #20]
	}
 8013350:	4618      	mov	r0, r3
 8013352:	3728      	adds	r7, #40	; 0x28
 8013354:	46bd      	mov	sp, r7
 8013356:	bd80      	pop	{r7, pc}

08013358 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013358:	b580      	push	{r7, lr}
 801335a:	b08c      	sub	sp, #48	; 0x30
 801335c:	af04      	add	r7, sp, #16
 801335e:	60f8      	str	r0, [r7, #12]
 8013360:	60b9      	str	r1, [r7, #8]
 8013362:	603b      	str	r3, [r7, #0]
 8013364:	4613      	mov	r3, r2
 8013366:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013368:	88fb      	ldrh	r3, [r7, #6]
 801336a:	009b      	lsls	r3, r3, #2
 801336c:	4618      	mov	r0, r3
 801336e:	f001 fb97 	bl	8014aa0 <pvPortMalloc>
 8013372:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013374:	697b      	ldr	r3, [r7, #20]
 8013376:	2b00      	cmp	r3, #0
 8013378:	d00e      	beq.n	8013398 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 801337a:	2054      	movs	r0, #84	; 0x54
 801337c:	f001 fb90 	bl	8014aa0 <pvPortMalloc>
 8013380:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013382:	69fb      	ldr	r3, [r7, #28]
 8013384:	2b00      	cmp	r3, #0
 8013386:	d003      	beq.n	8013390 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013388:	69fb      	ldr	r3, [r7, #28]
 801338a:	697a      	ldr	r2, [r7, #20]
 801338c:	631a      	str	r2, [r3, #48]	; 0x30
 801338e:	e005      	b.n	801339c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013390:	6978      	ldr	r0, [r7, #20]
 8013392:	f001 fc47 	bl	8014c24 <vPortFree>
 8013396:	e001      	b.n	801339c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013398:	2300      	movs	r3, #0
 801339a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801339c:	69fb      	ldr	r3, [r7, #28]
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d017      	beq.n	80133d2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80133a2:	69fb      	ldr	r3, [r7, #28]
 80133a4:	2200      	movs	r2, #0
 80133a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80133aa:	88fa      	ldrh	r2, [r7, #6]
 80133ac:	2300      	movs	r3, #0
 80133ae:	9303      	str	r3, [sp, #12]
 80133b0:	69fb      	ldr	r3, [r7, #28]
 80133b2:	9302      	str	r3, [sp, #8]
 80133b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133b6:	9301      	str	r3, [sp, #4]
 80133b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133ba:	9300      	str	r3, [sp, #0]
 80133bc:	683b      	ldr	r3, [r7, #0]
 80133be:	68b9      	ldr	r1, [r7, #8]
 80133c0:	68f8      	ldr	r0, [r7, #12]
 80133c2:	f000 f80e 	bl	80133e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80133c6:	69f8      	ldr	r0, [r7, #28]
 80133c8:	f000 f88a 	bl	80134e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80133cc:	2301      	movs	r3, #1
 80133ce:	61bb      	str	r3, [r7, #24]
 80133d0:	e002      	b.n	80133d8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80133d2:	f04f 33ff 	mov.w	r3, #4294967295
 80133d6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80133d8:	69bb      	ldr	r3, [r7, #24]
	}
 80133da:	4618      	mov	r0, r3
 80133dc:	3720      	adds	r7, #32
 80133de:	46bd      	mov	sp, r7
 80133e0:	bd80      	pop	{r7, pc}

080133e2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80133e2:	b580      	push	{r7, lr}
 80133e4:	b088      	sub	sp, #32
 80133e6:	af00      	add	r7, sp, #0
 80133e8:	60f8      	str	r0, [r7, #12]
 80133ea:	60b9      	str	r1, [r7, #8]
 80133ec:	607a      	str	r2, [r7, #4]
 80133ee:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80133f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80133fa:	3b01      	subs	r3, #1
 80133fc:	009b      	lsls	r3, r3, #2
 80133fe:	4413      	add	r3, r2
 8013400:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8013402:	69bb      	ldr	r3, [r7, #24]
 8013404:	f023 0307 	bic.w	r3, r3, #7
 8013408:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801340a:	69bb      	ldr	r3, [r7, #24]
 801340c:	f003 0307 	and.w	r3, r3, #7
 8013410:	2b00      	cmp	r3, #0
 8013412:	d009      	beq.n	8013428 <prvInitialiseNewTask+0x46>
 8013414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013418:	f383 8811 	msr	BASEPRI, r3
 801341c:	f3bf 8f6f 	isb	sy
 8013420:	f3bf 8f4f 	dsb	sy
 8013424:	617b      	str	r3, [r7, #20]
 8013426:	e7fe      	b.n	8013426 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013428:	2300      	movs	r3, #0
 801342a:	61fb      	str	r3, [r7, #28]
 801342c:	e012      	b.n	8013454 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801342e:	68ba      	ldr	r2, [r7, #8]
 8013430:	69fb      	ldr	r3, [r7, #28]
 8013432:	4413      	add	r3, r2
 8013434:	7819      	ldrb	r1, [r3, #0]
 8013436:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013438:	69fb      	ldr	r3, [r7, #28]
 801343a:	4413      	add	r3, r2
 801343c:	3334      	adds	r3, #52	; 0x34
 801343e:	460a      	mov	r2, r1
 8013440:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8013442:	68ba      	ldr	r2, [r7, #8]
 8013444:	69fb      	ldr	r3, [r7, #28]
 8013446:	4413      	add	r3, r2
 8013448:	781b      	ldrb	r3, [r3, #0]
 801344a:	2b00      	cmp	r3, #0
 801344c:	d006      	beq.n	801345c <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801344e:	69fb      	ldr	r3, [r7, #28]
 8013450:	3301      	adds	r3, #1
 8013452:	61fb      	str	r3, [r7, #28]
 8013454:	69fb      	ldr	r3, [r7, #28]
 8013456:	2b0f      	cmp	r3, #15
 8013458:	d9e9      	bls.n	801342e <prvInitialiseNewTask+0x4c>
 801345a:	e000      	b.n	801345e <prvInitialiseNewTask+0x7c>
		{
			break;
 801345c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801345e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013460:	2200      	movs	r2, #0
 8013462:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013468:	2b06      	cmp	r3, #6
 801346a:	d901      	bls.n	8013470 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801346c:	2306      	movs	r3, #6
 801346e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013472:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013474:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013478:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801347a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 801347c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801347e:	2200      	movs	r2, #0
 8013480:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013484:	3304      	adds	r3, #4
 8013486:	4618      	mov	r0, r3
 8013488:	f7fe ff53 	bl	8012332 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801348c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801348e:	3318      	adds	r3, #24
 8013490:	4618      	mov	r0, r3
 8013492:	f7fe ff4e 	bl	8012332 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013498:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801349a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801349c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801349e:	f1c3 0207 	rsb	r2, r3, #7
 80134a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80134a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80134aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80134ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134ae:	2200      	movs	r2, #0
 80134b0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80134b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134b4:	2200      	movs	r2, #0
 80134b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80134ba:	683a      	ldr	r2, [r7, #0]
 80134bc:	68f9      	ldr	r1, [r7, #12]
 80134be:	69b8      	ldr	r0, [r7, #24]
 80134c0:	f001 f8aa 	bl	8014618 <pxPortInitialiseStack>
 80134c4:	4602      	mov	r2, r0
 80134c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134c8:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80134ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d002      	beq.n	80134d6 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80134d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80134d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80134d6:	bf00      	nop
 80134d8:	3720      	adds	r7, #32
 80134da:	46bd      	mov	sp, r7
 80134dc:	bd80      	pop	{r7, pc}
	...

080134e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80134e0:	b580      	push	{r7, lr}
 80134e2:	b082      	sub	sp, #8
 80134e4:	af00      	add	r7, sp, #0
 80134e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80134e8:	f001 f9c0 	bl	801486c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80134ec:	4b2a      	ldr	r3, [pc, #168]	; (8013598 <prvAddNewTaskToReadyList+0xb8>)
 80134ee:	681b      	ldr	r3, [r3, #0]
 80134f0:	3301      	adds	r3, #1
 80134f2:	4a29      	ldr	r2, [pc, #164]	; (8013598 <prvAddNewTaskToReadyList+0xb8>)
 80134f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80134f6:	4b29      	ldr	r3, [pc, #164]	; (801359c <prvAddNewTaskToReadyList+0xbc>)
 80134f8:	681b      	ldr	r3, [r3, #0]
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d109      	bne.n	8013512 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80134fe:	4a27      	ldr	r2, [pc, #156]	; (801359c <prvAddNewTaskToReadyList+0xbc>)
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013504:	4b24      	ldr	r3, [pc, #144]	; (8013598 <prvAddNewTaskToReadyList+0xb8>)
 8013506:	681b      	ldr	r3, [r3, #0]
 8013508:	2b01      	cmp	r3, #1
 801350a:	d110      	bne.n	801352e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801350c:	f000 fbc4 	bl	8013c98 <prvInitialiseTaskLists>
 8013510:	e00d      	b.n	801352e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013512:	4b23      	ldr	r3, [pc, #140]	; (80135a0 <prvAddNewTaskToReadyList+0xc0>)
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	2b00      	cmp	r3, #0
 8013518:	d109      	bne.n	801352e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801351a:	4b20      	ldr	r3, [pc, #128]	; (801359c <prvAddNewTaskToReadyList+0xbc>)
 801351c:	681b      	ldr	r3, [r3, #0]
 801351e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013524:	429a      	cmp	r2, r3
 8013526:	d802      	bhi.n	801352e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013528:	4a1c      	ldr	r2, [pc, #112]	; (801359c <prvAddNewTaskToReadyList+0xbc>)
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801352e:	4b1d      	ldr	r3, [pc, #116]	; (80135a4 <prvAddNewTaskToReadyList+0xc4>)
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	3301      	adds	r3, #1
 8013534:	4a1b      	ldr	r2, [pc, #108]	; (80135a4 <prvAddNewTaskToReadyList+0xc4>)
 8013536:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801353c:	2201      	movs	r2, #1
 801353e:	409a      	lsls	r2, r3
 8013540:	4b19      	ldr	r3, [pc, #100]	; (80135a8 <prvAddNewTaskToReadyList+0xc8>)
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	4313      	orrs	r3, r2
 8013546:	4a18      	ldr	r2, [pc, #96]	; (80135a8 <prvAddNewTaskToReadyList+0xc8>)
 8013548:	6013      	str	r3, [r2, #0]
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801354e:	4613      	mov	r3, r2
 8013550:	009b      	lsls	r3, r3, #2
 8013552:	4413      	add	r3, r2
 8013554:	009b      	lsls	r3, r3, #2
 8013556:	4a15      	ldr	r2, [pc, #84]	; (80135ac <prvAddNewTaskToReadyList+0xcc>)
 8013558:	441a      	add	r2, r3
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	3304      	adds	r3, #4
 801355e:	4619      	mov	r1, r3
 8013560:	4610      	mov	r0, r2
 8013562:	f7fe fef3 	bl	801234c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013566:	f001 f9af 	bl	80148c8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801356a:	4b0d      	ldr	r3, [pc, #52]	; (80135a0 <prvAddNewTaskToReadyList+0xc0>)
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	2b00      	cmp	r3, #0
 8013570:	d00e      	beq.n	8013590 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013572:	4b0a      	ldr	r3, [pc, #40]	; (801359c <prvAddNewTaskToReadyList+0xbc>)
 8013574:	681b      	ldr	r3, [r3, #0]
 8013576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801357c:	429a      	cmp	r2, r3
 801357e:	d207      	bcs.n	8013590 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013580:	4b0b      	ldr	r3, [pc, #44]	; (80135b0 <prvAddNewTaskToReadyList+0xd0>)
 8013582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013586:	601a      	str	r2, [r3, #0]
 8013588:	f3bf 8f4f 	dsb	sy
 801358c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013590:	bf00      	nop
 8013592:	3708      	adds	r7, #8
 8013594:	46bd      	mov	sp, r7
 8013596:	bd80      	pop	{r7, pc}
 8013598:	20001560 	.word	0x20001560
 801359c:	20001460 	.word	0x20001460
 80135a0:	2000156c 	.word	0x2000156c
 80135a4:	2000157c 	.word	0x2000157c
 80135a8:	20001568 	.word	0x20001568
 80135ac:	20001464 	.word	0x20001464
 80135b0:	e000ed04 	.word	0xe000ed04

080135b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80135b4:	b580      	push	{r7, lr}
 80135b6:	b084      	sub	sp, #16
 80135b8:	af00      	add	r7, sp, #0
 80135ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80135bc:	2300      	movs	r3, #0
 80135be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d016      	beq.n	80135f4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80135c6:	4b13      	ldr	r3, [pc, #76]	; (8013614 <vTaskDelay+0x60>)
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d009      	beq.n	80135e2 <vTaskDelay+0x2e>
 80135ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135d2:	f383 8811 	msr	BASEPRI, r3
 80135d6:	f3bf 8f6f 	isb	sy
 80135da:	f3bf 8f4f 	dsb	sy
 80135de:	60bb      	str	r3, [r7, #8]
 80135e0:	e7fe      	b.n	80135e0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80135e2:	f000 f879 	bl	80136d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80135e6:	2100      	movs	r1, #0
 80135e8:	6878      	ldr	r0, [r7, #4]
 80135ea:	f000 ffaf 	bl	801454c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80135ee:	f000 f881 	bl	80136f4 <xTaskResumeAll>
 80135f2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d107      	bne.n	801360a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80135fa:	4b07      	ldr	r3, [pc, #28]	; (8013618 <vTaskDelay+0x64>)
 80135fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013600:	601a      	str	r2, [r3, #0]
 8013602:	f3bf 8f4f 	dsb	sy
 8013606:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801360a:	bf00      	nop
 801360c:	3710      	adds	r7, #16
 801360e:	46bd      	mov	sp, r7
 8013610:	bd80      	pop	{r7, pc}
 8013612:	bf00      	nop
 8013614:	20001588 	.word	0x20001588
 8013618:	e000ed04 	.word	0xe000ed04

0801361c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801361c:	b580      	push	{r7, lr}
 801361e:	b08a      	sub	sp, #40	; 0x28
 8013620:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013622:	2300      	movs	r3, #0
 8013624:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013626:	2300      	movs	r3, #0
 8013628:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801362a:	463a      	mov	r2, r7
 801362c:	1d39      	adds	r1, r7, #4
 801362e:	f107 0308 	add.w	r3, r7, #8
 8013632:	4618      	mov	r0, r3
 8013634:	f7ee fc6c 	bl	8001f10 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013638:	6839      	ldr	r1, [r7, #0]
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	68ba      	ldr	r2, [r7, #8]
 801363e:	9202      	str	r2, [sp, #8]
 8013640:	9301      	str	r3, [sp, #4]
 8013642:	2300      	movs	r3, #0
 8013644:	9300      	str	r3, [sp, #0]
 8013646:	2300      	movs	r3, #0
 8013648:	460a      	mov	r2, r1
 801364a:	491d      	ldr	r1, [pc, #116]	; (80136c0 <vTaskStartScheduler+0xa4>)
 801364c:	481d      	ldr	r0, [pc, #116]	; (80136c4 <vTaskStartScheduler+0xa8>)
 801364e:	f7ff fe2a 	bl	80132a6 <xTaskCreateStatic>
 8013652:	4602      	mov	r2, r0
 8013654:	4b1c      	ldr	r3, [pc, #112]	; (80136c8 <vTaskStartScheduler+0xac>)
 8013656:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013658:	4b1b      	ldr	r3, [pc, #108]	; (80136c8 <vTaskStartScheduler+0xac>)
 801365a:	681b      	ldr	r3, [r3, #0]
 801365c:	2b00      	cmp	r3, #0
 801365e:	d002      	beq.n	8013666 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013660:	2301      	movs	r3, #1
 8013662:	617b      	str	r3, [r7, #20]
 8013664:	e001      	b.n	801366a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013666:	2300      	movs	r3, #0
 8013668:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801366a:	697b      	ldr	r3, [r7, #20]
 801366c:	2b01      	cmp	r3, #1
 801366e:	d115      	bne.n	801369c <vTaskStartScheduler+0x80>
 8013670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013674:	f383 8811 	msr	BASEPRI, r3
 8013678:	f3bf 8f6f 	isb	sy
 801367c:	f3bf 8f4f 	dsb	sy
 8013680:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013682:	4b12      	ldr	r3, [pc, #72]	; (80136cc <vTaskStartScheduler+0xb0>)
 8013684:	f04f 32ff 	mov.w	r2, #4294967295
 8013688:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801368a:	4b11      	ldr	r3, [pc, #68]	; (80136d0 <vTaskStartScheduler+0xb4>)
 801368c:	2201      	movs	r2, #1
 801368e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8013690:	4b10      	ldr	r3, [pc, #64]	; (80136d4 <vTaskStartScheduler+0xb8>)
 8013692:	2200      	movs	r2, #0
 8013694:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013696:	f001 f84b 	bl	8014730 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801369a:	e00d      	b.n	80136b8 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801369c:	697b      	ldr	r3, [r7, #20]
 801369e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136a2:	d109      	bne.n	80136b8 <vTaskStartScheduler+0x9c>
 80136a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136a8:	f383 8811 	msr	BASEPRI, r3
 80136ac:	f3bf 8f6f 	isb	sy
 80136b0:	f3bf 8f4f 	dsb	sy
 80136b4:	60fb      	str	r3, [r7, #12]
 80136b6:	e7fe      	b.n	80136b6 <vTaskStartScheduler+0x9a>
}
 80136b8:	bf00      	nop
 80136ba:	3718      	adds	r7, #24
 80136bc:	46bd      	mov	sp, r7
 80136be:	bd80      	pop	{r7, pc}
 80136c0:	0801b290 	.word	0x0801b290
 80136c4:	08013c69 	.word	0x08013c69
 80136c8:	20001584 	.word	0x20001584
 80136cc:	20001580 	.word	0x20001580
 80136d0:	2000156c 	.word	0x2000156c
 80136d4:	20001564 	.word	0x20001564

080136d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80136d8:	b480      	push	{r7}
 80136da:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80136dc:	4b04      	ldr	r3, [pc, #16]	; (80136f0 <vTaskSuspendAll+0x18>)
 80136de:	681b      	ldr	r3, [r3, #0]
 80136e0:	3301      	adds	r3, #1
 80136e2:	4a03      	ldr	r2, [pc, #12]	; (80136f0 <vTaskSuspendAll+0x18>)
 80136e4:	6013      	str	r3, [r2, #0]
}
 80136e6:	bf00      	nop
 80136e8:	46bd      	mov	sp, r7
 80136ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ee:	4770      	bx	lr
 80136f0:	20001588 	.word	0x20001588

080136f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80136f4:	b580      	push	{r7, lr}
 80136f6:	b084      	sub	sp, #16
 80136f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80136fa:	2300      	movs	r3, #0
 80136fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80136fe:	2300      	movs	r3, #0
 8013700:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013702:	4b41      	ldr	r3, [pc, #260]	; (8013808 <xTaskResumeAll+0x114>)
 8013704:	681b      	ldr	r3, [r3, #0]
 8013706:	2b00      	cmp	r3, #0
 8013708:	d109      	bne.n	801371e <xTaskResumeAll+0x2a>
 801370a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801370e:	f383 8811 	msr	BASEPRI, r3
 8013712:	f3bf 8f6f 	isb	sy
 8013716:	f3bf 8f4f 	dsb	sy
 801371a:	603b      	str	r3, [r7, #0]
 801371c:	e7fe      	b.n	801371c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801371e:	f001 f8a5 	bl	801486c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013722:	4b39      	ldr	r3, [pc, #228]	; (8013808 <xTaskResumeAll+0x114>)
 8013724:	681b      	ldr	r3, [r3, #0]
 8013726:	3b01      	subs	r3, #1
 8013728:	4a37      	ldr	r2, [pc, #220]	; (8013808 <xTaskResumeAll+0x114>)
 801372a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801372c:	4b36      	ldr	r3, [pc, #216]	; (8013808 <xTaskResumeAll+0x114>)
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	2b00      	cmp	r3, #0
 8013732:	d161      	bne.n	80137f8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013734:	4b35      	ldr	r3, [pc, #212]	; (801380c <xTaskResumeAll+0x118>)
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	2b00      	cmp	r3, #0
 801373a:	d05d      	beq.n	80137f8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801373c:	e02e      	b.n	801379c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 801373e:	4b34      	ldr	r3, [pc, #208]	; (8013810 <xTaskResumeAll+0x11c>)
 8013740:	68db      	ldr	r3, [r3, #12]
 8013742:	68db      	ldr	r3, [r3, #12]
 8013744:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013746:	68fb      	ldr	r3, [r7, #12]
 8013748:	3318      	adds	r3, #24
 801374a:	4618      	mov	r0, r3
 801374c:	f7fe fe5b 	bl	8012406 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013750:	68fb      	ldr	r3, [r7, #12]
 8013752:	3304      	adds	r3, #4
 8013754:	4618      	mov	r0, r3
 8013756:	f7fe fe56 	bl	8012406 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801375a:	68fb      	ldr	r3, [r7, #12]
 801375c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801375e:	2201      	movs	r2, #1
 8013760:	409a      	lsls	r2, r3
 8013762:	4b2c      	ldr	r3, [pc, #176]	; (8013814 <xTaskResumeAll+0x120>)
 8013764:	681b      	ldr	r3, [r3, #0]
 8013766:	4313      	orrs	r3, r2
 8013768:	4a2a      	ldr	r2, [pc, #168]	; (8013814 <xTaskResumeAll+0x120>)
 801376a:	6013      	str	r3, [r2, #0]
 801376c:	68fb      	ldr	r3, [r7, #12]
 801376e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013770:	4613      	mov	r3, r2
 8013772:	009b      	lsls	r3, r3, #2
 8013774:	4413      	add	r3, r2
 8013776:	009b      	lsls	r3, r3, #2
 8013778:	4a27      	ldr	r2, [pc, #156]	; (8013818 <xTaskResumeAll+0x124>)
 801377a:	441a      	add	r2, r3
 801377c:	68fb      	ldr	r3, [r7, #12]
 801377e:	3304      	adds	r3, #4
 8013780:	4619      	mov	r1, r3
 8013782:	4610      	mov	r0, r2
 8013784:	f7fe fde2 	bl	801234c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013788:	68fb      	ldr	r3, [r7, #12]
 801378a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801378c:	4b23      	ldr	r3, [pc, #140]	; (801381c <xTaskResumeAll+0x128>)
 801378e:	681b      	ldr	r3, [r3, #0]
 8013790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013792:	429a      	cmp	r2, r3
 8013794:	d302      	bcc.n	801379c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8013796:	4b22      	ldr	r3, [pc, #136]	; (8013820 <xTaskResumeAll+0x12c>)
 8013798:	2201      	movs	r2, #1
 801379a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801379c:	4b1c      	ldr	r3, [pc, #112]	; (8013810 <xTaskResumeAll+0x11c>)
 801379e:	681b      	ldr	r3, [r3, #0]
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d1cc      	bne.n	801373e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80137a4:	68fb      	ldr	r3, [r7, #12]
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d001      	beq.n	80137ae <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80137aa:	f000 fb0f 	bl	8013dcc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80137ae:	4b1d      	ldr	r3, [pc, #116]	; (8013824 <xTaskResumeAll+0x130>)
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d010      	beq.n	80137dc <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80137ba:	f000 f837 	bl	801382c <xTaskIncrementTick>
 80137be:	4603      	mov	r3, r0
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d002      	beq.n	80137ca <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80137c4:	4b16      	ldr	r3, [pc, #88]	; (8013820 <xTaskResumeAll+0x12c>)
 80137c6:	2201      	movs	r2, #1
 80137c8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	3b01      	subs	r3, #1
 80137ce:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d1f1      	bne.n	80137ba <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80137d6:	4b13      	ldr	r3, [pc, #76]	; (8013824 <xTaskResumeAll+0x130>)
 80137d8:	2200      	movs	r2, #0
 80137da:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80137dc:	4b10      	ldr	r3, [pc, #64]	; (8013820 <xTaskResumeAll+0x12c>)
 80137de:	681b      	ldr	r3, [r3, #0]
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d009      	beq.n	80137f8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80137e4:	2301      	movs	r3, #1
 80137e6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80137e8:	4b0f      	ldr	r3, [pc, #60]	; (8013828 <xTaskResumeAll+0x134>)
 80137ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80137ee:	601a      	str	r2, [r3, #0]
 80137f0:	f3bf 8f4f 	dsb	sy
 80137f4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80137f8:	f001 f866 	bl	80148c8 <vPortExitCritical>

	return xAlreadyYielded;
 80137fc:	68bb      	ldr	r3, [r7, #8]
}
 80137fe:	4618      	mov	r0, r3
 8013800:	3710      	adds	r7, #16
 8013802:	46bd      	mov	sp, r7
 8013804:	bd80      	pop	{r7, pc}
 8013806:	bf00      	nop
 8013808:	20001588 	.word	0x20001588
 801380c:	20001560 	.word	0x20001560
 8013810:	20001520 	.word	0x20001520
 8013814:	20001568 	.word	0x20001568
 8013818:	20001464 	.word	0x20001464
 801381c:	20001460 	.word	0x20001460
 8013820:	20001574 	.word	0x20001574
 8013824:	20001570 	.word	0x20001570
 8013828:	e000ed04 	.word	0xe000ed04

0801382c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801382c:	b580      	push	{r7, lr}
 801382e:	b086      	sub	sp, #24
 8013830:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013832:	2300      	movs	r3, #0
 8013834:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013836:	4b50      	ldr	r3, [pc, #320]	; (8013978 <xTaskIncrementTick+0x14c>)
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	2b00      	cmp	r3, #0
 801383c:	f040 808c 	bne.w	8013958 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013840:	4b4e      	ldr	r3, [pc, #312]	; (801397c <xTaskIncrementTick+0x150>)
 8013842:	681b      	ldr	r3, [r3, #0]
 8013844:	3301      	adds	r3, #1
 8013846:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013848:	4a4c      	ldr	r2, [pc, #304]	; (801397c <xTaskIncrementTick+0x150>)
 801384a:	693b      	ldr	r3, [r7, #16]
 801384c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801384e:	693b      	ldr	r3, [r7, #16]
 8013850:	2b00      	cmp	r3, #0
 8013852:	d11f      	bne.n	8013894 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8013854:	4b4a      	ldr	r3, [pc, #296]	; (8013980 <xTaskIncrementTick+0x154>)
 8013856:	681b      	ldr	r3, [r3, #0]
 8013858:	681b      	ldr	r3, [r3, #0]
 801385a:	2b00      	cmp	r3, #0
 801385c:	d009      	beq.n	8013872 <xTaskIncrementTick+0x46>
 801385e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013862:	f383 8811 	msr	BASEPRI, r3
 8013866:	f3bf 8f6f 	isb	sy
 801386a:	f3bf 8f4f 	dsb	sy
 801386e:	603b      	str	r3, [r7, #0]
 8013870:	e7fe      	b.n	8013870 <xTaskIncrementTick+0x44>
 8013872:	4b43      	ldr	r3, [pc, #268]	; (8013980 <xTaskIncrementTick+0x154>)
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	60fb      	str	r3, [r7, #12]
 8013878:	4b42      	ldr	r3, [pc, #264]	; (8013984 <xTaskIncrementTick+0x158>)
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	4a40      	ldr	r2, [pc, #256]	; (8013980 <xTaskIncrementTick+0x154>)
 801387e:	6013      	str	r3, [r2, #0]
 8013880:	4a40      	ldr	r2, [pc, #256]	; (8013984 <xTaskIncrementTick+0x158>)
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	6013      	str	r3, [r2, #0]
 8013886:	4b40      	ldr	r3, [pc, #256]	; (8013988 <xTaskIncrementTick+0x15c>)
 8013888:	681b      	ldr	r3, [r3, #0]
 801388a:	3301      	adds	r3, #1
 801388c:	4a3e      	ldr	r2, [pc, #248]	; (8013988 <xTaskIncrementTick+0x15c>)
 801388e:	6013      	str	r3, [r2, #0]
 8013890:	f000 fa9c 	bl	8013dcc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013894:	4b3d      	ldr	r3, [pc, #244]	; (801398c <xTaskIncrementTick+0x160>)
 8013896:	681b      	ldr	r3, [r3, #0]
 8013898:	693a      	ldr	r2, [r7, #16]
 801389a:	429a      	cmp	r2, r3
 801389c:	d34d      	bcc.n	801393a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801389e:	4b38      	ldr	r3, [pc, #224]	; (8013980 <xTaskIncrementTick+0x154>)
 80138a0:	681b      	ldr	r3, [r3, #0]
 80138a2:	681b      	ldr	r3, [r3, #0]
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d101      	bne.n	80138ac <xTaskIncrementTick+0x80>
 80138a8:	2301      	movs	r3, #1
 80138aa:	e000      	b.n	80138ae <xTaskIncrementTick+0x82>
 80138ac:	2300      	movs	r3, #0
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d004      	beq.n	80138bc <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80138b2:	4b36      	ldr	r3, [pc, #216]	; (801398c <xTaskIncrementTick+0x160>)
 80138b4:	f04f 32ff 	mov.w	r2, #4294967295
 80138b8:	601a      	str	r2, [r3, #0]
					break;
 80138ba:	e03e      	b.n	801393a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80138bc:	4b30      	ldr	r3, [pc, #192]	; (8013980 <xTaskIncrementTick+0x154>)
 80138be:	681b      	ldr	r3, [r3, #0]
 80138c0:	68db      	ldr	r3, [r3, #12]
 80138c2:	68db      	ldr	r3, [r3, #12]
 80138c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80138c6:	68bb      	ldr	r3, [r7, #8]
 80138c8:	685b      	ldr	r3, [r3, #4]
 80138ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80138cc:	693a      	ldr	r2, [r7, #16]
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	429a      	cmp	r2, r3
 80138d2:	d203      	bcs.n	80138dc <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80138d4:	4a2d      	ldr	r2, [pc, #180]	; (801398c <xTaskIncrementTick+0x160>)
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	6013      	str	r3, [r2, #0]
						break;
 80138da:	e02e      	b.n	801393a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80138dc:	68bb      	ldr	r3, [r7, #8]
 80138de:	3304      	adds	r3, #4
 80138e0:	4618      	mov	r0, r3
 80138e2:	f7fe fd90 	bl	8012406 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80138e6:	68bb      	ldr	r3, [r7, #8]
 80138e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d004      	beq.n	80138f8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80138ee:	68bb      	ldr	r3, [r7, #8]
 80138f0:	3318      	adds	r3, #24
 80138f2:	4618      	mov	r0, r3
 80138f4:	f7fe fd87 	bl	8012406 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80138f8:	68bb      	ldr	r3, [r7, #8]
 80138fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138fc:	2201      	movs	r2, #1
 80138fe:	409a      	lsls	r2, r3
 8013900:	4b23      	ldr	r3, [pc, #140]	; (8013990 <xTaskIncrementTick+0x164>)
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	4313      	orrs	r3, r2
 8013906:	4a22      	ldr	r2, [pc, #136]	; (8013990 <xTaskIncrementTick+0x164>)
 8013908:	6013      	str	r3, [r2, #0]
 801390a:	68bb      	ldr	r3, [r7, #8]
 801390c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801390e:	4613      	mov	r3, r2
 8013910:	009b      	lsls	r3, r3, #2
 8013912:	4413      	add	r3, r2
 8013914:	009b      	lsls	r3, r3, #2
 8013916:	4a1f      	ldr	r2, [pc, #124]	; (8013994 <xTaskIncrementTick+0x168>)
 8013918:	441a      	add	r2, r3
 801391a:	68bb      	ldr	r3, [r7, #8]
 801391c:	3304      	adds	r3, #4
 801391e:	4619      	mov	r1, r3
 8013920:	4610      	mov	r0, r2
 8013922:	f7fe fd13 	bl	801234c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013926:	68bb      	ldr	r3, [r7, #8]
 8013928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801392a:	4b1b      	ldr	r3, [pc, #108]	; (8013998 <xTaskIncrementTick+0x16c>)
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013930:	429a      	cmp	r2, r3
 8013932:	d3b4      	bcc.n	801389e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8013934:	2301      	movs	r3, #1
 8013936:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013938:	e7b1      	b.n	801389e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801393a:	4b17      	ldr	r3, [pc, #92]	; (8013998 <xTaskIncrementTick+0x16c>)
 801393c:	681b      	ldr	r3, [r3, #0]
 801393e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013940:	4914      	ldr	r1, [pc, #80]	; (8013994 <xTaskIncrementTick+0x168>)
 8013942:	4613      	mov	r3, r2
 8013944:	009b      	lsls	r3, r3, #2
 8013946:	4413      	add	r3, r2
 8013948:	009b      	lsls	r3, r3, #2
 801394a:	440b      	add	r3, r1
 801394c:	681b      	ldr	r3, [r3, #0]
 801394e:	2b01      	cmp	r3, #1
 8013950:	d907      	bls.n	8013962 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8013952:	2301      	movs	r3, #1
 8013954:	617b      	str	r3, [r7, #20]
 8013956:	e004      	b.n	8013962 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8013958:	4b10      	ldr	r3, [pc, #64]	; (801399c <xTaskIncrementTick+0x170>)
 801395a:	681b      	ldr	r3, [r3, #0]
 801395c:	3301      	adds	r3, #1
 801395e:	4a0f      	ldr	r2, [pc, #60]	; (801399c <xTaskIncrementTick+0x170>)
 8013960:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8013962:	4b0f      	ldr	r3, [pc, #60]	; (80139a0 <xTaskIncrementTick+0x174>)
 8013964:	681b      	ldr	r3, [r3, #0]
 8013966:	2b00      	cmp	r3, #0
 8013968:	d001      	beq.n	801396e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 801396a:	2301      	movs	r3, #1
 801396c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801396e:	697b      	ldr	r3, [r7, #20]
}
 8013970:	4618      	mov	r0, r3
 8013972:	3718      	adds	r7, #24
 8013974:	46bd      	mov	sp, r7
 8013976:	bd80      	pop	{r7, pc}
 8013978:	20001588 	.word	0x20001588
 801397c:	20001564 	.word	0x20001564
 8013980:	20001518 	.word	0x20001518
 8013984:	2000151c 	.word	0x2000151c
 8013988:	20001578 	.word	0x20001578
 801398c:	20001580 	.word	0x20001580
 8013990:	20001568 	.word	0x20001568
 8013994:	20001464 	.word	0x20001464
 8013998:	20001460 	.word	0x20001460
 801399c:	20001570 	.word	0x20001570
 80139a0:	20001574 	.word	0x20001574

080139a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80139a4:	b480      	push	{r7}
 80139a6:	b087      	sub	sp, #28
 80139a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80139aa:	4b26      	ldr	r3, [pc, #152]	; (8013a44 <vTaskSwitchContext+0xa0>)
 80139ac:	681b      	ldr	r3, [r3, #0]
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d003      	beq.n	80139ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80139b2:	4b25      	ldr	r3, [pc, #148]	; (8013a48 <vTaskSwitchContext+0xa4>)
 80139b4:	2201      	movs	r2, #1
 80139b6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80139b8:	e03e      	b.n	8013a38 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80139ba:	4b23      	ldr	r3, [pc, #140]	; (8013a48 <vTaskSwitchContext+0xa4>)
 80139bc:	2200      	movs	r2, #0
 80139be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80139c0:	4b22      	ldr	r3, [pc, #136]	; (8013a4c <vTaskSwitchContext+0xa8>)
 80139c2:	681b      	ldr	r3, [r3, #0]
 80139c4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	fab3 f383 	clz	r3, r3
 80139cc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80139ce:	7afb      	ldrb	r3, [r7, #11]
 80139d0:	f1c3 031f 	rsb	r3, r3, #31
 80139d4:	617b      	str	r3, [r7, #20]
 80139d6:	491e      	ldr	r1, [pc, #120]	; (8013a50 <vTaskSwitchContext+0xac>)
 80139d8:	697a      	ldr	r2, [r7, #20]
 80139da:	4613      	mov	r3, r2
 80139dc:	009b      	lsls	r3, r3, #2
 80139de:	4413      	add	r3, r2
 80139e0:	009b      	lsls	r3, r3, #2
 80139e2:	440b      	add	r3, r1
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d109      	bne.n	80139fe <vTaskSwitchContext+0x5a>
	__asm volatile
 80139ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139ee:	f383 8811 	msr	BASEPRI, r3
 80139f2:	f3bf 8f6f 	isb	sy
 80139f6:	f3bf 8f4f 	dsb	sy
 80139fa:	607b      	str	r3, [r7, #4]
 80139fc:	e7fe      	b.n	80139fc <vTaskSwitchContext+0x58>
 80139fe:	697a      	ldr	r2, [r7, #20]
 8013a00:	4613      	mov	r3, r2
 8013a02:	009b      	lsls	r3, r3, #2
 8013a04:	4413      	add	r3, r2
 8013a06:	009b      	lsls	r3, r3, #2
 8013a08:	4a11      	ldr	r2, [pc, #68]	; (8013a50 <vTaskSwitchContext+0xac>)
 8013a0a:	4413      	add	r3, r2
 8013a0c:	613b      	str	r3, [r7, #16]
 8013a0e:	693b      	ldr	r3, [r7, #16]
 8013a10:	685b      	ldr	r3, [r3, #4]
 8013a12:	685a      	ldr	r2, [r3, #4]
 8013a14:	693b      	ldr	r3, [r7, #16]
 8013a16:	605a      	str	r2, [r3, #4]
 8013a18:	693b      	ldr	r3, [r7, #16]
 8013a1a:	685a      	ldr	r2, [r3, #4]
 8013a1c:	693b      	ldr	r3, [r7, #16]
 8013a1e:	3308      	adds	r3, #8
 8013a20:	429a      	cmp	r2, r3
 8013a22:	d104      	bne.n	8013a2e <vTaskSwitchContext+0x8a>
 8013a24:	693b      	ldr	r3, [r7, #16]
 8013a26:	685b      	ldr	r3, [r3, #4]
 8013a28:	685a      	ldr	r2, [r3, #4]
 8013a2a:	693b      	ldr	r3, [r7, #16]
 8013a2c:	605a      	str	r2, [r3, #4]
 8013a2e:	693b      	ldr	r3, [r7, #16]
 8013a30:	685b      	ldr	r3, [r3, #4]
 8013a32:	68db      	ldr	r3, [r3, #12]
 8013a34:	4a07      	ldr	r2, [pc, #28]	; (8013a54 <vTaskSwitchContext+0xb0>)
 8013a36:	6013      	str	r3, [r2, #0]
}
 8013a38:	bf00      	nop
 8013a3a:	371c      	adds	r7, #28
 8013a3c:	46bd      	mov	sp, r7
 8013a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a42:	4770      	bx	lr
 8013a44:	20001588 	.word	0x20001588
 8013a48:	20001574 	.word	0x20001574
 8013a4c:	20001568 	.word	0x20001568
 8013a50:	20001464 	.word	0x20001464
 8013a54:	20001460 	.word	0x20001460

08013a58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013a58:	b580      	push	{r7, lr}
 8013a5a:	b084      	sub	sp, #16
 8013a5c:	af00      	add	r7, sp, #0
 8013a5e:	6078      	str	r0, [r7, #4]
 8013a60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d109      	bne.n	8013a7c <vTaskPlaceOnEventList+0x24>
 8013a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a6c:	f383 8811 	msr	BASEPRI, r3
 8013a70:	f3bf 8f6f 	isb	sy
 8013a74:	f3bf 8f4f 	dsb	sy
 8013a78:	60fb      	str	r3, [r7, #12]
 8013a7a:	e7fe      	b.n	8013a7a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013a7c:	4b07      	ldr	r3, [pc, #28]	; (8013a9c <vTaskPlaceOnEventList+0x44>)
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	3318      	adds	r3, #24
 8013a82:	4619      	mov	r1, r3
 8013a84:	6878      	ldr	r0, [r7, #4]
 8013a86:	f7fe fc85 	bl	8012394 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013a8a:	2101      	movs	r1, #1
 8013a8c:	6838      	ldr	r0, [r7, #0]
 8013a8e:	f000 fd5d 	bl	801454c <prvAddCurrentTaskToDelayedList>
}
 8013a92:	bf00      	nop
 8013a94:	3710      	adds	r7, #16
 8013a96:	46bd      	mov	sp, r7
 8013a98:	bd80      	pop	{r7, pc}
 8013a9a:	bf00      	nop
 8013a9c:	20001460 	.word	0x20001460

08013aa0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013aa0:	b580      	push	{r7, lr}
 8013aa2:	b086      	sub	sp, #24
 8013aa4:	af00      	add	r7, sp, #0
 8013aa6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	68db      	ldr	r3, [r3, #12]
 8013aac:	68db      	ldr	r3, [r3, #12]
 8013aae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013ab0:	693b      	ldr	r3, [r7, #16]
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d109      	bne.n	8013aca <xTaskRemoveFromEventList+0x2a>
 8013ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013aba:	f383 8811 	msr	BASEPRI, r3
 8013abe:	f3bf 8f6f 	isb	sy
 8013ac2:	f3bf 8f4f 	dsb	sy
 8013ac6:	60fb      	str	r3, [r7, #12]
 8013ac8:	e7fe      	b.n	8013ac8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013aca:	693b      	ldr	r3, [r7, #16]
 8013acc:	3318      	adds	r3, #24
 8013ace:	4618      	mov	r0, r3
 8013ad0:	f7fe fc99 	bl	8012406 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013ad4:	4b1d      	ldr	r3, [pc, #116]	; (8013b4c <xTaskRemoveFromEventList+0xac>)
 8013ad6:	681b      	ldr	r3, [r3, #0]
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d11c      	bne.n	8013b16 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013adc:	693b      	ldr	r3, [r7, #16]
 8013ade:	3304      	adds	r3, #4
 8013ae0:	4618      	mov	r0, r3
 8013ae2:	f7fe fc90 	bl	8012406 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013ae6:	693b      	ldr	r3, [r7, #16]
 8013ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013aea:	2201      	movs	r2, #1
 8013aec:	409a      	lsls	r2, r3
 8013aee:	4b18      	ldr	r3, [pc, #96]	; (8013b50 <xTaskRemoveFromEventList+0xb0>)
 8013af0:	681b      	ldr	r3, [r3, #0]
 8013af2:	4313      	orrs	r3, r2
 8013af4:	4a16      	ldr	r2, [pc, #88]	; (8013b50 <xTaskRemoveFromEventList+0xb0>)
 8013af6:	6013      	str	r3, [r2, #0]
 8013af8:	693b      	ldr	r3, [r7, #16]
 8013afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013afc:	4613      	mov	r3, r2
 8013afe:	009b      	lsls	r3, r3, #2
 8013b00:	4413      	add	r3, r2
 8013b02:	009b      	lsls	r3, r3, #2
 8013b04:	4a13      	ldr	r2, [pc, #76]	; (8013b54 <xTaskRemoveFromEventList+0xb4>)
 8013b06:	441a      	add	r2, r3
 8013b08:	693b      	ldr	r3, [r7, #16]
 8013b0a:	3304      	adds	r3, #4
 8013b0c:	4619      	mov	r1, r3
 8013b0e:	4610      	mov	r0, r2
 8013b10:	f7fe fc1c 	bl	801234c <vListInsertEnd>
 8013b14:	e005      	b.n	8013b22 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013b16:	693b      	ldr	r3, [r7, #16]
 8013b18:	3318      	adds	r3, #24
 8013b1a:	4619      	mov	r1, r3
 8013b1c:	480e      	ldr	r0, [pc, #56]	; (8013b58 <xTaskRemoveFromEventList+0xb8>)
 8013b1e:	f7fe fc15 	bl	801234c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013b22:	693b      	ldr	r3, [r7, #16]
 8013b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b26:	4b0d      	ldr	r3, [pc, #52]	; (8013b5c <xTaskRemoveFromEventList+0xbc>)
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b2c:	429a      	cmp	r2, r3
 8013b2e:	d905      	bls.n	8013b3c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013b30:	2301      	movs	r3, #1
 8013b32:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013b34:	4b0a      	ldr	r3, [pc, #40]	; (8013b60 <xTaskRemoveFromEventList+0xc0>)
 8013b36:	2201      	movs	r2, #1
 8013b38:	601a      	str	r2, [r3, #0]
 8013b3a:	e001      	b.n	8013b40 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8013b3c:	2300      	movs	r3, #0
 8013b3e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8013b40:	697b      	ldr	r3, [r7, #20]
}
 8013b42:	4618      	mov	r0, r3
 8013b44:	3718      	adds	r7, #24
 8013b46:	46bd      	mov	sp, r7
 8013b48:	bd80      	pop	{r7, pc}
 8013b4a:	bf00      	nop
 8013b4c:	20001588 	.word	0x20001588
 8013b50:	20001568 	.word	0x20001568
 8013b54:	20001464 	.word	0x20001464
 8013b58:	20001520 	.word	0x20001520
 8013b5c:	20001460 	.word	0x20001460
 8013b60:	20001574 	.word	0x20001574

08013b64 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013b64:	b480      	push	{r7}
 8013b66:	b083      	sub	sp, #12
 8013b68:	af00      	add	r7, sp, #0
 8013b6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013b6c:	4b06      	ldr	r3, [pc, #24]	; (8013b88 <vTaskInternalSetTimeOutState+0x24>)
 8013b6e:	681a      	ldr	r2, [r3, #0]
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013b74:	4b05      	ldr	r3, [pc, #20]	; (8013b8c <vTaskInternalSetTimeOutState+0x28>)
 8013b76:	681a      	ldr	r2, [r3, #0]
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	605a      	str	r2, [r3, #4]
}
 8013b7c:	bf00      	nop
 8013b7e:	370c      	adds	r7, #12
 8013b80:	46bd      	mov	sp, r7
 8013b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b86:	4770      	bx	lr
 8013b88:	20001578 	.word	0x20001578
 8013b8c:	20001564 	.word	0x20001564

08013b90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013b90:	b580      	push	{r7, lr}
 8013b92:	b088      	sub	sp, #32
 8013b94:	af00      	add	r7, sp, #0
 8013b96:	6078      	str	r0, [r7, #4]
 8013b98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d109      	bne.n	8013bb4 <xTaskCheckForTimeOut+0x24>
 8013ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ba4:	f383 8811 	msr	BASEPRI, r3
 8013ba8:	f3bf 8f6f 	isb	sy
 8013bac:	f3bf 8f4f 	dsb	sy
 8013bb0:	613b      	str	r3, [r7, #16]
 8013bb2:	e7fe      	b.n	8013bb2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8013bb4:	683b      	ldr	r3, [r7, #0]
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d109      	bne.n	8013bce <xTaskCheckForTimeOut+0x3e>
 8013bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bbe:	f383 8811 	msr	BASEPRI, r3
 8013bc2:	f3bf 8f6f 	isb	sy
 8013bc6:	f3bf 8f4f 	dsb	sy
 8013bca:	60fb      	str	r3, [r7, #12]
 8013bcc:	e7fe      	b.n	8013bcc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8013bce:	f000 fe4d 	bl	801486c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013bd2:	4b1d      	ldr	r3, [pc, #116]	; (8013c48 <xTaskCheckForTimeOut+0xb8>)
 8013bd4:	681b      	ldr	r3, [r3, #0]
 8013bd6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	685b      	ldr	r3, [r3, #4]
 8013bdc:	69ba      	ldr	r2, [r7, #24]
 8013bde:	1ad3      	subs	r3, r2, r3
 8013be0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013be2:	683b      	ldr	r3, [r7, #0]
 8013be4:	681b      	ldr	r3, [r3, #0]
 8013be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013bea:	d102      	bne.n	8013bf2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013bec:	2300      	movs	r3, #0
 8013bee:	61fb      	str	r3, [r7, #28]
 8013bf0:	e023      	b.n	8013c3a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	681a      	ldr	r2, [r3, #0]
 8013bf6:	4b15      	ldr	r3, [pc, #84]	; (8013c4c <xTaskCheckForTimeOut+0xbc>)
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	429a      	cmp	r2, r3
 8013bfc:	d007      	beq.n	8013c0e <xTaskCheckForTimeOut+0x7e>
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	685b      	ldr	r3, [r3, #4]
 8013c02:	69ba      	ldr	r2, [r7, #24]
 8013c04:	429a      	cmp	r2, r3
 8013c06:	d302      	bcc.n	8013c0e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013c08:	2301      	movs	r3, #1
 8013c0a:	61fb      	str	r3, [r7, #28]
 8013c0c:	e015      	b.n	8013c3a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8013c0e:	683b      	ldr	r3, [r7, #0]
 8013c10:	681b      	ldr	r3, [r3, #0]
 8013c12:	697a      	ldr	r2, [r7, #20]
 8013c14:	429a      	cmp	r2, r3
 8013c16:	d20b      	bcs.n	8013c30 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013c18:	683b      	ldr	r3, [r7, #0]
 8013c1a:	681a      	ldr	r2, [r3, #0]
 8013c1c:	697b      	ldr	r3, [r7, #20]
 8013c1e:	1ad2      	subs	r2, r2, r3
 8013c20:	683b      	ldr	r3, [r7, #0]
 8013c22:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013c24:	6878      	ldr	r0, [r7, #4]
 8013c26:	f7ff ff9d 	bl	8013b64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8013c2a:	2300      	movs	r3, #0
 8013c2c:	61fb      	str	r3, [r7, #28]
 8013c2e:	e004      	b.n	8013c3a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8013c30:	683b      	ldr	r3, [r7, #0]
 8013c32:	2200      	movs	r2, #0
 8013c34:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013c36:	2301      	movs	r3, #1
 8013c38:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8013c3a:	f000 fe45 	bl	80148c8 <vPortExitCritical>

	return xReturn;
 8013c3e:	69fb      	ldr	r3, [r7, #28]
}
 8013c40:	4618      	mov	r0, r3
 8013c42:	3720      	adds	r7, #32
 8013c44:	46bd      	mov	sp, r7
 8013c46:	bd80      	pop	{r7, pc}
 8013c48:	20001564 	.word	0x20001564
 8013c4c:	20001578 	.word	0x20001578

08013c50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013c50:	b480      	push	{r7}
 8013c52:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013c54:	4b03      	ldr	r3, [pc, #12]	; (8013c64 <vTaskMissedYield+0x14>)
 8013c56:	2201      	movs	r2, #1
 8013c58:	601a      	str	r2, [r3, #0]
}
 8013c5a:	bf00      	nop
 8013c5c:	46bd      	mov	sp, r7
 8013c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c62:	4770      	bx	lr
 8013c64:	20001574 	.word	0x20001574

08013c68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013c68:	b580      	push	{r7, lr}
 8013c6a:	b082      	sub	sp, #8
 8013c6c:	af00      	add	r7, sp, #0
 8013c6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013c70:	f000 f852 	bl	8013d18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013c74:	4b06      	ldr	r3, [pc, #24]	; (8013c90 <prvIdleTask+0x28>)
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	2b01      	cmp	r3, #1
 8013c7a:	d9f9      	bls.n	8013c70 <prvIdleTask+0x8>
			{
				taskYIELD();
 8013c7c:	4b05      	ldr	r3, [pc, #20]	; (8013c94 <prvIdleTask+0x2c>)
 8013c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c82:	601a      	str	r2, [r3, #0]
 8013c84:	f3bf 8f4f 	dsb	sy
 8013c88:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8013c8c:	e7f0      	b.n	8013c70 <prvIdleTask+0x8>
 8013c8e:	bf00      	nop
 8013c90:	20001464 	.word	0x20001464
 8013c94:	e000ed04 	.word	0xe000ed04

08013c98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013c98:	b580      	push	{r7, lr}
 8013c9a:	b082      	sub	sp, #8
 8013c9c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013c9e:	2300      	movs	r3, #0
 8013ca0:	607b      	str	r3, [r7, #4]
 8013ca2:	e00c      	b.n	8013cbe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013ca4:	687a      	ldr	r2, [r7, #4]
 8013ca6:	4613      	mov	r3, r2
 8013ca8:	009b      	lsls	r3, r3, #2
 8013caa:	4413      	add	r3, r2
 8013cac:	009b      	lsls	r3, r3, #2
 8013cae:	4a12      	ldr	r2, [pc, #72]	; (8013cf8 <prvInitialiseTaskLists+0x60>)
 8013cb0:	4413      	add	r3, r2
 8013cb2:	4618      	mov	r0, r3
 8013cb4:	f7fe fb1d 	bl	80122f2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	3301      	adds	r3, #1
 8013cbc:	607b      	str	r3, [r7, #4]
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	2b06      	cmp	r3, #6
 8013cc2:	d9ef      	bls.n	8013ca4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013cc4:	480d      	ldr	r0, [pc, #52]	; (8013cfc <prvInitialiseTaskLists+0x64>)
 8013cc6:	f7fe fb14 	bl	80122f2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013cca:	480d      	ldr	r0, [pc, #52]	; (8013d00 <prvInitialiseTaskLists+0x68>)
 8013ccc:	f7fe fb11 	bl	80122f2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013cd0:	480c      	ldr	r0, [pc, #48]	; (8013d04 <prvInitialiseTaskLists+0x6c>)
 8013cd2:	f7fe fb0e 	bl	80122f2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013cd6:	480c      	ldr	r0, [pc, #48]	; (8013d08 <prvInitialiseTaskLists+0x70>)
 8013cd8:	f7fe fb0b 	bl	80122f2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013cdc:	480b      	ldr	r0, [pc, #44]	; (8013d0c <prvInitialiseTaskLists+0x74>)
 8013cde:	f7fe fb08 	bl	80122f2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013ce2:	4b0b      	ldr	r3, [pc, #44]	; (8013d10 <prvInitialiseTaskLists+0x78>)
 8013ce4:	4a05      	ldr	r2, [pc, #20]	; (8013cfc <prvInitialiseTaskLists+0x64>)
 8013ce6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013ce8:	4b0a      	ldr	r3, [pc, #40]	; (8013d14 <prvInitialiseTaskLists+0x7c>)
 8013cea:	4a05      	ldr	r2, [pc, #20]	; (8013d00 <prvInitialiseTaskLists+0x68>)
 8013cec:	601a      	str	r2, [r3, #0]
}
 8013cee:	bf00      	nop
 8013cf0:	3708      	adds	r7, #8
 8013cf2:	46bd      	mov	sp, r7
 8013cf4:	bd80      	pop	{r7, pc}
 8013cf6:	bf00      	nop
 8013cf8:	20001464 	.word	0x20001464
 8013cfc:	200014f0 	.word	0x200014f0
 8013d00:	20001504 	.word	0x20001504
 8013d04:	20001520 	.word	0x20001520
 8013d08:	20001534 	.word	0x20001534
 8013d0c:	2000154c 	.word	0x2000154c
 8013d10:	20001518 	.word	0x20001518
 8013d14:	2000151c 	.word	0x2000151c

08013d18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013d18:	b580      	push	{r7, lr}
 8013d1a:	b082      	sub	sp, #8
 8013d1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013d1e:	e019      	b.n	8013d54 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013d20:	f000 fda4 	bl	801486c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8013d24:	4b0f      	ldr	r3, [pc, #60]	; (8013d64 <prvCheckTasksWaitingTermination+0x4c>)
 8013d26:	68db      	ldr	r3, [r3, #12]
 8013d28:	68db      	ldr	r3, [r3, #12]
 8013d2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	3304      	adds	r3, #4
 8013d30:	4618      	mov	r0, r3
 8013d32:	f7fe fb68 	bl	8012406 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013d36:	4b0c      	ldr	r3, [pc, #48]	; (8013d68 <prvCheckTasksWaitingTermination+0x50>)
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	3b01      	subs	r3, #1
 8013d3c:	4a0a      	ldr	r2, [pc, #40]	; (8013d68 <prvCheckTasksWaitingTermination+0x50>)
 8013d3e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013d40:	4b0a      	ldr	r3, [pc, #40]	; (8013d6c <prvCheckTasksWaitingTermination+0x54>)
 8013d42:	681b      	ldr	r3, [r3, #0]
 8013d44:	3b01      	subs	r3, #1
 8013d46:	4a09      	ldr	r2, [pc, #36]	; (8013d6c <prvCheckTasksWaitingTermination+0x54>)
 8013d48:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013d4a:	f000 fdbd 	bl	80148c8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013d4e:	6878      	ldr	r0, [r7, #4]
 8013d50:	f000 f80e 	bl	8013d70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013d54:	4b05      	ldr	r3, [pc, #20]	; (8013d6c <prvCheckTasksWaitingTermination+0x54>)
 8013d56:	681b      	ldr	r3, [r3, #0]
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d1e1      	bne.n	8013d20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013d5c:	bf00      	nop
 8013d5e:	3708      	adds	r7, #8
 8013d60:	46bd      	mov	sp, r7
 8013d62:	bd80      	pop	{r7, pc}
 8013d64:	20001534 	.word	0x20001534
 8013d68:	20001560 	.word	0x20001560
 8013d6c:	20001548 	.word	0x20001548

08013d70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013d70:	b580      	push	{r7, lr}
 8013d72:	b084      	sub	sp, #16
 8013d74:	af00      	add	r7, sp, #0
 8013d76:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d108      	bne.n	8013d94 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013d86:	4618      	mov	r0, r3
 8013d88:	f000 ff4c 	bl	8014c24 <vPortFree>
				vPortFree( pxTCB );
 8013d8c:	6878      	ldr	r0, [r7, #4]
 8013d8e:	f000 ff49 	bl	8014c24 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013d92:	e017      	b.n	8013dc4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013d9a:	2b01      	cmp	r3, #1
 8013d9c:	d103      	bne.n	8013da6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8013d9e:	6878      	ldr	r0, [r7, #4]
 8013da0:	f000 ff40 	bl	8014c24 <vPortFree>
	}
 8013da4:	e00e      	b.n	8013dc4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013dac:	2b02      	cmp	r3, #2
 8013dae:	d009      	beq.n	8013dc4 <prvDeleteTCB+0x54>
 8013db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013db4:	f383 8811 	msr	BASEPRI, r3
 8013db8:	f3bf 8f6f 	isb	sy
 8013dbc:	f3bf 8f4f 	dsb	sy
 8013dc0:	60fb      	str	r3, [r7, #12]
 8013dc2:	e7fe      	b.n	8013dc2 <prvDeleteTCB+0x52>
	}
 8013dc4:	bf00      	nop
 8013dc6:	3710      	adds	r7, #16
 8013dc8:	46bd      	mov	sp, r7
 8013dca:	bd80      	pop	{r7, pc}

08013dcc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013dcc:	b480      	push	{r7}
 8013dce:	b083      	sub	sp, #12
 8013dd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013dd2:	4b0f      	ldr	r3, [pc, #60]	; (8013e10 <prvResetNextTaskUnblockTime+0x44>)
 8013dd4:	681b      	ldr	r3, [r3, #0]
 8013dd6:	681b      	ldr	r3, [r3, #0]
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d101      	bne.n	8013de0 <prvResetNextTaskUnblockTime+0x14>
 8013ddc:	2301      	movs	r3, #1
 8013dde:	e000      	b.n	8013de2 <prvResetNextTaskUnblockTime+0x16>
 8013de0:	2300      	movs	r3, #0
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d004      	beq.n	8013df0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013de6:	4b0b      	ldr	r3, [pc, #44]	; (8013e14 <prvResetNextTaskUnblockTime+0x48>)
 8013de8:	f04f 32ff 	mov.w	r2, #4294967295
 8013dec:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013dee:	e008      	b.n	8013e02 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8013df0:	4b07      	ldr	r3, [pc, #28]	; (8013e10 <prvResetNextTaskUnblockTime+0x44>)
 8013df2:	681b      	ldr	r3, [r3, #0]
 8013df4:	68db      	ldr	r3, [r3, #12]
 8013df6:	68db      	ldr	r3, [r3, #12]
 8013df8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	685b      	ldr	r3, [r3, #4]
 8013dfe:	4a05      	ldr	r2, [pc, #20]	; (8013e14 <prvResetNextTaskUnblockTime+0x48>)
 8013e00:	6013      	str	r3, [r2, #0]
}
 8013e02:	bf00      	nop
 8013e04:	370c      	adds	r7, #12
 8013e06:	46bd      	mov	sp, r7
 8013e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e0c:	4770      	bx	lr
 8013e0e:	bf00      	nop
 8013e10:	20001518 	.word	0x20001518
 8013e14:	20001580 	.word	0x20001580

08013e18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013e18:	b480      	push	{r7}
 8013e1a:	b083      	sub	sp, #12
 8013e1c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013e1e:	4b0b      	ldr	r3, [pc, #44]	; (8013e4c <xTaskGetSchedulerState+0x34>)
 8013e20:	681b      	ldr	r3, [r3, #0]
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d102      	bne.n	8013e2c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8013e26:	2301      	movs	r3, #1
 8013e28:	607b      	str	r3, [r7, #4]
 8013e2a:	e008      	b.n	8013e3e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013e2c:	4b08      	ldr	r3, [pc, #32]	; (8013e50 <xTaskGetSchedulerState+0x38>)
 8013e2e:	681b      	ldr	r3, [r3, #0]
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d102      	bne.n	8013e3a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013e34:	2302      	movs	r3, #2
 8013e36:	607b      	str	r3, [r7, #4]
 8013e38:	e001      	b.n	8013e3e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8013e3a:	2300      	movs	r3, #0
 8013e3c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013e3e:	687b      	ldr	r3, [r7, #4]
	}
 8013e40:	4618      	mov	r0, r3
 8013e42:	370c      	adds	r7, #12
 8013e44:	46bd      	mov	sp, r7
 8013e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e4a:	4770      	bx	lr
 8013e4c:	2000156c 	.word	0x2000156c
 8013e50:	20001588 	.word	0x20001588

08013e54 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8013e54:	b580      	push	{r7, lr}
 8013e56:	b084      	sub	sp, #16
 8013e58:	af00      	add	r7, sp, #0
 8013e5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8013e60:	2300      	movs	r3, #0
 8013e62:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d06e      	beq.n	8013f48 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8013e6a:	68bb      	ldr	r3, [r7, #8]
 8013e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e6e:	4b39      	ldr	r3, [pc, #228]	; (8013f54 <xTaskPriorityInherit+0x100>)
 8013e70:	681b      	ldr	r3, [r3, #0]
 8013e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e74:	429a      	cmp	r2, r3
 8013e76:	d25e      	bcs.n	8013f36 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013e78:	68bb      	ldr	r3, [r7, #8]
 8013e7a:	699b      	ldr	r3, [r3, #24]
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	db06      	blt.n	8013e8e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013e80:	4b34      	ldr	r3, [pc, #208]	; (8013f54 <xTaskPriorityInherit+0x100>)
 8013e82:	681b      	ldr	r3, [r3, #0]
 8013e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e86:	f1c3 0207 	rsb	r2, r3, #7
 8013e8a:	68bb      	ldr	r3, [r7, #8]
 8013e8c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8013e8e:	68bb      	ldr	r3, [r7, #8]
 8013e90:	6959      	ldr	r1, [r3, #20]
 8013e92:	68bb      	ldr	r3, [r7, #8]
 8013e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e96:	4613      	mov	r3, r2
 8013e98:	009b      	lsls	r3, r3, #2
 8013e9a:	4413      	add	r3, r2
 8013e9c:	009b      	lsls	r3, r3, #2
 8013e9e:	4a2e      	ldr	r2, [pc, #184]	; (8013f58 <xTaskPriorityInherit+0x104>)
 8013ea0:	4413      	add	r3, r2
 8013ea2:	4299      	cmp	r1, r3
 8013ea4:	d101      	bne.n	8013eaa <xTaskPriorityInherit+0x56>
 8013ea6:	2301      	movs	r3, #1
 8013ea8:	e000      	b.n	8013eac <xTaskPriorityInherit+0x58>
 8013eaa:	2300      	movs	r3, #0
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d03a      	beq.n	8013f26 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013eb0:	68bb      	ldr	r3, [r7, #8]
 8013eb2:	3304      	adds	r3, #4
 8013eb4:	4618      	mov	r0, r3
 8013eb6:	f7fe faa6 	bl	8012406 <uxListRemove>
 8013eba:	4603      	mov	r3, r0
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d115      	bne.n	8013eec <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8013ec0:	68bb      	ldr	r3, [r7, #8]
 8013ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ec4:	4924      	ldr	r1, [pc, #144]	; (8013f58 <xTaskPriorityInherit+0x104>)
 8013ec6:	4613      	mov	r3, r2
 8013ec8:	009b      	lsls	r3, r3, #2
 8013eca:	4413      	add	r3, r2
 8013ecc:	009b      	lsls	r3, r3, #2
 8013ece:	440b      	add	r3, r1
 8013ed0:	681b      	ldr	r3, [r3, #0]
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d10a      	bne.n	8013eec <xTaskPriorityInherit+0x98>
 8013ed6:	68bb      	ldr	r3, [r7, #8]
 8013ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013eda:	2201      	movs	r2, #1
 8013edc:	fa02 f303 	lsl.w	r3, r2, r3
 8013ee0:	43da      	mvns	r2, r3
 8013ee2:	4b1e      	ldr	r3, [pc, #120]	; (8013f5c <xTaskPriorityInherit+0x108>)
 8013ee4:	681b      	ldr	r3, [r3, #0]
 8013ee6:	4013      	ands	r3, r2
 8013ee8:	4a1c      	ldr	r2, [pc, #112]	; (8013f5c <xTaskPriorityInherit+0x108>)
 8013eea:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013eec:	4b19      	ldr	r3, [pc, #100]	; (8013f54 <xTaskPriorityInherit+0x100>)
 8013eee:	681b      	ldr	r3, [r3, #0]
 8013ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ef2:	68bb      	ldr	r3, [r7, #8]
 8013ef4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8013ef6:	68bb      	ldr	r3, [r7, #8]
 8013ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013efa:	2201      	movs	r2, #1
 8013efc:	409a      	lsls	r2, r3
 8013efe:	4b17      	ldr	r3, [pc, #92]	; (8013f5c <xTaskPriorityInherit+0x108>)
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	4313      	orrs	r3, r2
 8013f04:	4a15      	ldr	r2, [pc, #84]	; (8013f5c <xTaskPriorityInherit+0x108>)
 8013f06:	6013      	str	r3, [r2, #0]
 8013f08:	68bb      	ldr	r3, [r7, #8]
 8013f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f0c:	4613      	mov	r3, r2
 8013f0e:	009b      	lsls	r3, r3, #2
 8013f10:	4413      	add	r3, r2
 8013f12:	009b      	lsls	r3, r3, #2
 8013f14:	4a10      	ldr	r2, [pc, #64]	; (8013f58 <xTaskPriorityInherit+0x104>)
 8013f16:	441a      	add	r2, r3
 8013f18:	68bb      	ldr	r3, [r7, #8]
 8013f1a:	3304      	adds	r3, #4
 8013f1c:	4619      	mov	r1, r3
 8013f1e:	4610      	mov	r0, r2
 8013f20:	f7fe fa14 	bl	801234c <vListInsertEnd>
 8013f24:	e004      	b.n	8013f30 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013f26:	4b0b      	ldr	r3, [pc, #44]	; (8013f54 <xTaskPriorityInherit+0x100>)
 8013f28:	681b      	ldr	r3, [r3, #0]
 8013f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f2c:	68bb      	ldr	r3, [r7, #8]
 8013f2e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8013f30:	2301      	movs	r3, #1
 8013f32:	60fb      	str	r3, [r7, #12]
 8013f34:	e008      	b.n	8013f48 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8013f36:	68bb      	ldr	r3, [r7, #8]
 8013f38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013f3a:	4b06      	ldr	r3, [pc, #24]	; (8013f54 <xTaskPriorityInherit+0x100>)
 8013f3c:	681b      	ldr	r3, [r3, #0]
 8013f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f40:	429a      	cmp	r2, r3
 8013f42:	d201      	bcs.n	8013f48 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8013f44:	2301      	movs	r3, #1
 8013f46:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013f48:	68fb      	ldr	r3, [r7, #12]
	}
 8013f4a:	4618      	mov	r0, r3
 8013f4c:	3710      	adds	r7, #16
 8013f4e:	46bd      	mov	sp, r7
 8013f50:	bd80      	pop	{r7, pc}
 8013f52:	bf00      	nop
 8013f54:	20001460 	.word	0x20001460
 8013f58:	20001464 	.word	0x20001464
 8013f5c:	20001568 	.word	0x20001568

08013f60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013f60:	b580      	push	{r7, lr}
 8013f62:	b086      	sub	sp, #24
 8013f64:	af00      	add	r7, sp, #0
 8013f66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013f6c:	2300      	movs	r3, #0
 8013f6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d06c      	beq.n	8014050 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8013f76:	4b39      	ldr	r3, [pc, #228]	; (801405c <xTaskPriorityDisinherit+0xfc>)
 8013f78:	681b      	ldr	r3, [r3, #0]
 8013f7a:	693a      	ldr	r2, [r7, #16]
 8013f7c:	429a      	cmp	r2, r3
 8013f7e:	d009      	beq.n	8013f94 <xTaskPriorityDisinherit+0x34>
 8013f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f84:	f383 8811 	msr	BASEPRI, r3
 8013f88:	f3bf 8f6f 	isb	sy
 8013f8c:	f3bf 8f4f 	dsb	sy
 8013f90:	60fb      	str	r3, [r7, #12]
 8013f92:	e7fe      	b.n	8013f92 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8013f94:	693b      	ldr	r3, [r7, #16]
 8013f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d109      	bne.n	8013fb0 <xTaskPriorityDisinherit+0x50>
 8013f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fa0:	f383 8811 	msr	BASEPRI, r3
 8013fa4:	f3bf 8f6f 	isb	sy
 8013fa8:	f3bf 8f4f 	dsb	sy
 8013fac:	60bb      	str	r3, [r7, #8]
 8013fae:	e7fe      	b.n	8013fae <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8013fb0:	693b      	ldr	r3, [r7, #16]
 8013fb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013fb4:	1e5a      	subs	r2, r3, #1
 8013fb6:	693b      	ldr	r3, [r7, #16]
 8013fb8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013fba:	693b      	ldr	r3, [r7, #16]
 8013fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fbe:	693b      	ldr	r3, [r7, #16]
 8013fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013fc2:	429a      	cmp	r2, r3
 8013fc4:	d044      	beq.n	8014050 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013fc6:	693b      	ldr	r3, [r7, #16]
 8013fc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	d140      	bne.n	8014050 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013fce:	693b      	ldr	r3, [r7, #16]
 8013fd0:	3304      	adds	r3, #4
 8013fd2:	4618      	mov	r0, r3
 8013fd4:	f7fe fa17 	bl	8012406 <uxListRemove>
 8013fd8:	4603      	mov	r3, r0
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d115      	bne.n	801400a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8013fde:	693b      	ldr	r3, [r7, #16]
 8013fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fe2:	491f      	ldr	r1, [pc, #124]	; (8014060 <xTaskPriorityDisinherit+0x100>)
 8013fe4:	4613      	mov	r3, r2
 8013fe6:	009b      	lsls	r3, r3, #2
 8013fe8:	4413      	add	r3, r2
 8013fea:	009b      	lsls	r3, r3, #2
 8013fec:	440b      	add	r3, r1
 8013fee:	681b      	ldr	r3, [r3, #0]
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d10a      	bne.n	801400a <xTaskPriorityDisinherit+0xaa>
 8013ff4:	693b      	ldr	r3, [r7, #16]
 8013ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ff8:	2201      	movs	r2, #1
 8013ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8013ffe:	43da      	mvns	r2, r3
 8014000:	4b18      	ldr	r3, [pc, #96]	; (8014064 <xTaskPriorityDisinherit+0x104>)
 8014002:	681b      	ldr	r3, [r3, #0]
 8014004:	4013      	ands	r3, r2
 8014006:	4a17      	ldr	r2, [pc, #92]	; (8014064 <xTaskPriorityDisinherit+0x104>)
 8014008:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801400a:	693b      	ldr	r3, [r7, #16]
 801400c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801400e:	693b      	ldr	r3, [r7, #16]
 8014010:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014012:	693b      	ldr	r3, [r7, #16]
 8014014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014016:	f1c3 0207 	rsb	r2, r3, #7
 801401a:	693b      	ldr	r3, [r7, #16]
 801401c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801401e:	693b      	ldr	r3, [r7, #16]
 8014020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014022:	2201      	movs	r2, #1
 8014024:	409a      	lsls	r2, r3
 8014026:	4b0f      	ldr	r3, [pc, #60]	; (8014064 <xTaskPriorityDisinherit+0x104>)
 8014028:	681b      	ldr	r3, [r3, #0]
 801402a:	4313      	orrs	r3, r2
 801402c:	4a0d      	ldr	r2, [pc, #52]	; (8014064 <xTaskPriorityDisinherit+0x104>)
 801402e:	6013      	str	r3, [r2, #0]
 8014030:	693b      	ldr	r3, [r7, #16]
 8014032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014034:	4613      	mov	r3, r2
 8014036:	009b      	lsls	r3, r3, #2
 8014038:	4413      	add	r3, r2
 801403a:	009b      	lsls	r3, r3, #2
 801403c:	4a08      	ldr	r2, [pc, #32]	; (8014060 <xTaskPriorityDisinherit+0x100>)
 801403e:	441a      	add	r2, r3
 8014040:	693b      	ldr	r3, [r7, #16]
 8014042:	3304      	adds	r3, #4
 8014044:	4619      	mov	r1, r3
 8014046:	4610      	mov	r0, r2
 8014048:	f7fe f980 	bl	801234c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801404c:	2301      	movs	r3, #1
 801404e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014050:	697b      	ldr	r3, [r7, #20]
	}
 8014052:	4618      	mov	r0, r3
 8014054:	3718      	adds	r7, #24
 8014056:	46bd      	mov	sp, r7
 8014058:	bd80      	pop	{r7, pc}
 801405a:	bf00      	nop
 801405c:	20001460 	.word	0x20001460
 8014060:	20001464 	.word	0x20001464
 8014064:	20001568 	.word	0x20001568

08014068 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8014068:	b580      	push	{r7, lr}
 801406a:	b088      	sub	sp, #32
 801406c:	af00      	add	r7, sp, #0
 801406e:	6078      	str	r0, [r7, #4]
 8014070:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8014076:	2301      	movs	r3, #1
 8014078:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	2b00      	cmp	r3, #0
 801407e:	f000 8086 	beq.w	801418e <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8014082:	69bb      	ldr	r3, [r7, #24]
 8014084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014086:	2b00      	cmp	r3, #0
 8014088:	d109      	bne.n	801409e <vTaskPriorityDisinheritAfterTimeout+0x36>
 801408a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801408e:	f383 8811 	msr	BASEPRI, r3
 8014092:	f3bf 8f6f 	isb	sy
 8014096:	f3bf 8f4f 	dsb	sy
 801409a:	60fb      	str	r3, [r7, #12]
 801409c:	e7fe      	b.n	801409c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801409e:	69bb      	ldr	r3, [r7, #24]
 80140a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80140a2:	683a      	ldr	r2, [r7, #0]
 80140a4:	429a      	cmp	r2, r3
 80140a6:	d902      	bls.n	80140ae <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80140a8:	683b      	ldr	r3, [r7, #0]
 80140aa:	61fb      	str	r3, [r7, #28]
 80140ac:	e002      	b.n	80140b4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80140ae:	69bb      	ldr	r3, [r7, #24]
 80140b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80140b2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80140b4:	69bb      	ldr	r3, [r7, #24]
 80140b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140b8:	69fa      	ldr	r2, [r7, #28]
 80140ba:	429a      	cmp	r2, r3
 80140bc:	d067      	beq.n	801418e <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80140be:	69bb      	ldr	r3, [r7, #24]
 80140c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80140c2:	697a      	ldr	r2, [r7, #20]
 80140c4:	429a      	cmp	r2, r3
 80140c6:	d162      	bne.n	801418e <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80140c8:	4b33      	ldr	r3, [pc, #204]	; (8014198 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80140ca:	681b      	ldr	r3, [r3, #0]
 80140cc:	69ba      	ldr	r2, [r7, #24]
 80140ce:	429a      	cmp	r2, r3
 80140d0:	d109      	bne.n	80140e6 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 80140d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140d6:	f383 8811 	msr	BASEPRI, r3
 80140da:	f3bf 8f6f 	isb	sy
 80140de:	f3bf 8f4f 	dsb	sy
 80140e2:	60bb      	str	r3, [r7, #8]
 80140e4:	e7fe      	b.n	80140e4 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80140e6:	69bb      	ldr	r3, [r7, #24]
 80140e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140ea:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80140ec:	69bb      	ldr	r3, [r7, #24]
 80140ee:	69fa      	ldr	r2, [r7, #28]
 80140f0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80140f2:	69bb      	ldr	r3, [r7, #24]
 80140f4:	699b      	ldr	r3, [r3, #24]
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	db04      	blt.n	8014104 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80140fa:	69fb      	ldr	r3, [r7, #28]
 80140fc:	f1c3 0207 	rsb	r2, r3, #7
 8014100:	69bb      	ldr	r3, [r7, #24]
 8014102:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014104:	69bb      	ldr	r3, [r7, #24]
 8014106:	6959      	ldr	r1, [r3, #20]
 8014108:	693a      	ldr	r2, [r7, #16]
 801410a:	4613      	mov	r3, r2
 801410c:	009b      	lsls	r3, r3, #2
 801410e:	4413      	add	r3, r2
 8014110:	009b      	lsls	r3, r3, #2
 8014112:	4a22      	ldr	r2, [pc, #136]	; (801419c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8014114:	4413      	add	r3, r2
 8014116:	4299      	cmp	r1, r3
 8014118:	d101      	bne.n	801411e <vTaskPriorityDisinheritAfterTimeout+0xb6>
 801411a:	2301      	movs	r3, #1
 801411c:	e000      	b.n	8014120 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 801411e:	2300      	movs	r3, #0
 8014120:	2b00      	cmp	r3, #0
 8014122:	d034      	beq.n	801418e <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014124:	69bb      	ldr	r3, [r7, #24]
 8014126:	3304      	adds	r3, #4
 8014128:	4618      	mov	r0, r3
 801412a:	f7fe f96c 	bl	8012406 <uxListRemove>
 801412e:	4603      	mov	r3, r0
 8014130:	2b00      	cmp	r3, #0
 8014132:	d115      	bne.n	8014160 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8014134:	69bb      	ldr	r3, [r7, #24]
 8014136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014138:	4918      	ldr	r1, [pc, #96]	; (801419c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 801413a:	4613      	mov	r3, r2
 801413c:	009b      	lsls	r3, r3, #2
 801413e:	4413      	add	r3, r2
 8014140:	009b      	lsls	r3, r3, #2
 8014142:	440b      	add	r3, r1
 8014144:	681b      	ldr	r3, [r3, #0]
 8014146:	2b00      	cmp	r3, #0
 8014148:	d10a      	bne.n	8014160 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 801414a:	69bb      	ldr	r3, [r7, #24]
 801414c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801414e:	2201      	movs	r2, #1
 8014150:	fa02 f303 	lsl.w	r3, r2, r3
 8014154:	43da      	mvns	r2, r3
 8014156:	4b12      	ldr	r3, [pc, #72]	; (80141a0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8014158:	681b      	ldr	r3, [r3, #0]
 801415a:	4013      	ands	r3, r2
 801415c:	4a10      	ldr	r2, [pc, #64]	; (80141a0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801415e:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8014160:	69bb      	ldr	r3, [r7, #24]
 8014162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014164:	2201      	movs	r2, #1
 8014166:	409a      	lsls	r2, r3
 8014168:	4b0d      	ldr	r3, [pc, #52]	; (80141a0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801416a:	681b      	ldr	r3, [r3, #0]
 801416c:	4313      	orrs	r3, r2
 801416e:	4a0c      	ldr	r2, [pc, #48]	; (80141a0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8014170:	6013      	str	r3, [r2, #0]
 8014172:	69bb      	ldr	r3, [r7, #24]
 8014174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014176:	4613      	mov	r3, r2
 8014178:	009b      	lsls	r3, r3, #2
 801417a:	4413      	add	r3, r2
 801417c:	009b      	lsls	r3, r3, #2
 801417e:	4a07      	ldr	r2, [pc, #28]	; (801419c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8014180:	441a      	add	r2, r3
 8014182:	69bb      	ldr	r3, [r7, #24]
 8014184:	3304      	adds	r3, #4
 8014186:	4619      	mov	r1, r3
 8014188:	4610      	mov	r0, r2
 801418a:	f7fe f8df 	bl	801234c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801418e:	bf00      	nop
 8014190:	3720      	adds	r7, #32
 8014192:	46bd      	mov	sp, r7
 8014194:	bd80      	pop	{r7, pc}
 8014196:	bf00      	nop
 8014198:	20001460 	.word	0x20001460
 801419c:	20001464 	.word	0x20001464
 80141a0:	20001568 	.word	0x20001568

080141a4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80141a4:	b480      	push	{r7}
 80141a6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80141a8:	4b07      	ldr	r3, [pc, #28]	; (80141c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80141aa:	681b      	ldr	r3, [r3, #0]
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d004      	beq.n	80141ba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80141b0:	4b05      	ldr	r3, [pc, #20]	; (80141c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80141b6:	3201      	adds	r2, #1
 80141b8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80141ba:	4b03      	ldr	r3, [pc, #12]	; (80141c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80141bc:	681b      	ldr	r3, [r3, #0]
	}
 80141be:	4618      	mov	r0, r3
 80141c0:	46bd      	mov	sp, r7
 80141c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141c6:	4770      	bx	lr
 80141c8:	20001460 	.word	0x20001460

080141cc <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80141cc:	b580      	push	{r7, lr}
 80141ce:	b086      	sub	sp, #24
 80141d0:	af00      	add	r7, sp, #0
 80141d2:	60f8      	str	r0, [r7, #12]
 80141d4:	60b9      	str	r1, [r7, #8]
 80141d6:	607a      	str	r2, [r7, #4]
 80141d8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80141da:	f000 fb47 	bl	801486c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80141de:	4b26      	ldr	r3, [pc, #152]	; (8014278 <xTaskNotifyWait+0xac>)
 80141e0:	681b      	ldr	r3, [r3, #0]
 80141e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80141e6:	b2db      	uxtb	r3, r3
 80141e8:	2b02      	cmp	r3, #2
 80141ea:	d01a      	beq.n	8014222 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80141ec:	4b22      	ldr	r3, [pc, #136]	; (8014278 <xTaskNotifyWait+0xac>)
 80141ee:	681b      	ldr	r3, [r3, #0]
 80141f0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80141f2:	68fa      	ldr	r2, [r7, #12]
 80141f4:	43d2      	mvns	r2, r2
 80141f6:	400a      	ands	r2, r1
 80141f8:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80141fa:	4b1f      	ldr	r3, [pc, #124]	; (8014278 <xTaskNotifyWait+0xac>)
 80141fc:	681b      	ldr	r3, [r3, #0]
 80141fe:	2201      	movs	r2, #1
 8014200:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8014204:	683b      	ldr	r3, [r7, #0]
 8014206:	2b00      	cmp	r3, #0
 8014208:	d00b      	beq.n	8014222 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801420a:	2101      	movs	r1, #1
 801420c:	6838      	ldr	r0, [r7, #0]
 801420e:	f000 f99d 	bl	801454c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8014212:	4b1a      	ldr	r3, [pc, #104]	; (801427c <xTaskNotifyWait+0xb0>)
 8014214:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014218:	601a      	str	r2, [r3, #0]
 801421a:	f3bf 8f4f 	dsb	sy
 801421e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8014222:	f000 fb51 	bl	80148c8 <vPortExitCritical>

		taskENTER_CRITICAL();
 8014226:	f000 fb21 	bl	801486c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	2b00      	cmp	r3, #0
 801422e:	d004      	beq.n	801423a <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8014230:	4b11      	ldr	r3, [pc, #68]	; (8014278 <xTaskNotifyWait+0xac>)
 8014232:	681b      	ldr	r3, [r3, #0]
 8014234:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801423a:	4b0f      	ldr	r3, [pc, #60]	; (8014278 <xTaskNotifyWait+0xac>)
 801423c:	681b      	ldr	r3, [r3, #0]
 801423e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014242:	b2db      	uxtb	r3, r3
 8014244:	2b02      	cmp	r3, #2
 8014246:	d002      	beq.n	801424e <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8014248:	2300      	movs	r3, #0
 801424a:	617b      	str	r3, [r7, #20]
 801424c:	e008      	b.n	8014260 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 801424e:	4b0a      	ldr	r3, [pc, #40]	; (8014278 <xTaskNotifyWait+0xac>)
 8014250:	681b      	ldr	r3, [r3, #0]
 8014252:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8014254:	68ba      	ldr	r2, [r7, #8]
 8014256:	43d2      	mvns	r2, r2
 8014258:	400a      	ands	r2, r1
 801425a:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 801425c:	2301      	movs	r3, #1
 801425e:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014260:	4b05      	ldr	r3, [pc, #20]	; (8014278 <xTaskNotifyWait+0xac>)
 8014262:	681b      	ldr	r3, [r3, #0]
 8014264:	2200      	movs	r2, #0
 8014266:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 801426a:	f000 fb2d 	bl	80148c8 <vPortExitCritical>

		return xReturn;
 801426e:	697b      	ldr	r3, [r7, #20]
	}
 8014270:	4618      	mov	r0, r3
 8014272:	3718      	adds	r7, #24
 8014274:	46bd      	mov	sp, r7
 8014276:	bd80      	pop	{r7, pc}
 8014278:	20001460 	.word	0x20001460
 801427c:	e000ed04 	.word	0xe000ed04

08014280 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8014280:	b580      	push	{r7, lr}
 8014282:	b08a      	sub	sp, #40	; 0x28
 8014284:	af00      	add	r7, sp, #0
 8014286:	60f8      	str	r0, [r7, #12]
 8014288:	60b9      	str	r1, [r7, #8]
 801428a:	603b      	str	r3, [r7, #0]
 801428c:	4613      	mov	r3, r2
 801428e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8014290:	2301      	movs	r3, #1
 8014292:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8014294:	68fb      	ldr	r3, [r7, #12]
 8014296:	2b00      	cmp	r3, #0
 8014298:	d109      	bne.n	80142ae <xTaskGenericNotify+0x2e>
 801429a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801429e:	f383 8811 	msr	BASEPRI, r3
 80142a2:	f3bf 8f6f 	isb	sy
 80142a6:	f3bf 8f4f 	dsb	sy
 80142aa:	61bb      	str	r3, [r7, #24]
 80142ac:	e7fe      	b.n	80142ac <xTaskGenericNotify+0x2c>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 80142ae:	68fb      	ldr	r3, [r7, #12]
 80142b0:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80142b2:	f000 fadb 	bl	801486c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80142b6:	683b      	ldr	r3, [r7, #0]
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d003      	beq.n	80142c4 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80142bc:	6a3b      	ldr	r3, [r7, #32]
 80142be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80142c0:	683b      	ldr	r3, [r7, #0]
 80142c2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80142c4:	6a3b      	ldr	r3, [r7, #32]
 80142c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80142ca:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80142cc:	6a3b      	ldr	r3, [r7, #32]
 80142ce:	2202      	movs	r2, #2
 80142d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 80142d4:	79fb      	ldrb	r3, [r7, #7]
 80142d6:	2b04      	cmp	r3, #4
 80142d8:	d827      	bhi.n	801432a <xTaskGenericNotify+0xaa>
 80142da:	a201      	add	r2, pc, #4	; (adr r2, 80142e0 <xTaskGenericNotify+0x60>)
 80142dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142e0:	0801432b 	.word	0x0801432b
 80142e4:	080142f5 	.word	0x080142f5
 80142e8:	08014303 	.word	0x08014303
 80142ec:	0801430f 	.word	0x0801430f
 80142f0:	08014317 	.word	0x08014317
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80142f4:	6a3b      	ldr	r3, [r7, #32]
 80142f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80142f8:	68bb      	ldr	r3, [r7, #8]
 80142fa:	431a      	orrs	r2, r3
 80142fc:	6a3b      	ldr	r3, [r7, #32]
 80142fe:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014300:	e013      	b.n	801432a <xTaskGenericNotify+0xaa>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8014302:	6a3b      	ldr	r3, [r7, #32]
 8014304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014306:	1c5a      	adds	r2, r3, #1
 8014308:	6a3b      	ldr	r3, [r7, #32]
 801430a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 801430c:	e00d      	b.n	801432a <xTaskGenericNotify+0xaa>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801430e:	6a3b      	ldr	r3, [r7, #32]
 8014310:	68ba      	ldr	r2, [r7, #8]
 8014312:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014314:	e009      	b.n	801432a <xTaskGenericNotify+0xaa>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8014316:	7ffb      	ldrb	r3, [r7, #31]
 8014318:	2b02      	cmp	r3, #2
 801431a:	d003      	beq.n	8014324 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801431c:	6a3b      	ldr	r3, [r7, #32]
 801431e:	68ba      	ldr	r2, [r7, #8]
 8014320:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8014322:	e001      	b.n	8014328 <xTaskGenericNotify+0xa8>
						xReturn = pdFAIL;
 8014324:	2300      	movs	r3, #0
 8014326:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8014328:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801432a:	7ffb      	ldrb	r3, [r7, #31]
 801432c:	2b01      	cmp	r3, #1
 801432e:	d138      	bne.n	80143a2 <xTaskGenericNotify+0x122>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014330:	6a3b      	ldr	r3, [r7, #32]
 8014332:	3304      	adds	r3, #4
 8014334:	4618      	mov	r0, r3
 8014336:	f7fe f866 	bl	8012406 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 801433a:	6a3b      	ldr	r3, [r7, #32]
 801433c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801433e:	2201      	movs	r2, #1
 8014340:	409a      	lsls	r2, r3
 8014342:	4b1b      	ldr	r3, [pc, #108]	; (80143b0 <xTaskGenericNotify+0x130>)
 8014344:	681b      	ldr	r3, [r3, #0]
 8014346:	4313      	orrs	r3, r2
 8014348:	4a19      	ldr	r2, [pc, #100]	; (80143b0 <xTaskGenericNotify+0x130>)
 801434a:	6013      	str	r3, [r2, #0]
 801434c:	6a3b      	ldr	r3, [r7, #32]
 801434e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014350:	4613      	mov	r3, r2
 8014352:	009b      	lsls	r3, r3, #2
 8014354:	4413      	add	r3, r2
 8014356:	009b      	lsls	r3, r3, #2
 8014358:	4a16      	ldr	r2, [pc, #88]	; (80143b4 <xTaskGenericNotify+0x134>)
 801435a:	441a      	add	r2, r3
 801435c:	6a3b      	ldr	r3, [r7, #32]
 801435e:	3304      	adds	r3, #4
 8014360:	4619      	mov	r1, r3
 8014362:	4610      	mov	r0, r2
 8014364:	f7fd fff2 	bl	801234c <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8014368:	6a3b      	ldr	r3, [r7, #32]
 801436a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801436c:	2b00      	cmp	r3, #0
 801436e:	d009      	beq.n	8014384 <xTaskGenericNotify+0x104>
 8014370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014374:	f383 8811 	msr	BASEPRI, r3
 8014378:	f3bf 8f6f 	isb	sy
 801437c:	f3bf 8f4f 	dsb	sy
 8014380:	617b      	str	r3, [r7, #20]
 8014382:	e7fe      	b.n	8014382 <xTaskGenericNotify+0x102>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014384:	6a3b      	ldr	r3, [r7, #32]
 8014386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014388:	4b0b      	ldr	r3, [pc, #44]	; (80143b8 <xTaskGenericNotify+0x138>)
 801438a:	681b      	ldr	r3, [r3, #0]
 801438c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801438e:	429a      	cmp	r2, r3
 8014390:	d907      	bls.n	80143a2 <xTaskGenericNotify+0x122>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8014392:	4b0a      	ldr	r3, [pc, #40]	; (80143bc <xTaskGenericNotify+0x13c>)
 8014394:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014398:	601a      	str	r2, [r3, #0]
 801439a:	f3bf 8f4f 	dsb	sy
 801439e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80143a2:	f000 fa91 	bl	80148c8 <vPortExitCritical>

		return xReturn;
 80143a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80143a8:	4618      	mov	r0, r3
 80143aa:	3728      	adds	r7, #40	; 0x28
 80143ac:	46bd      	mov	sp, r7
 80143ae:	bd80      	pop	{r7, pc}
 80143b0:	20001568 	.word	0x20001568
 80143b4:	20001464 	.word	0x20001464
 80143b8:	20001460 	.word	0x20001460
 80143bc:	e000ed04 	.word	0xe000ed04

080143c0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80143c0:	b580      	push	{r7, lr}
 80143c2:	b08e      	sub	sp, #56	; 0x38
 80143c4:	af00      	add	r7, sp, #0
 80143c6:	60f8      	str	r0, [r7, #12]
 80143c8:	60b9      	str	r1, [r7, #8]
 80143ca:	603b      	str	r3, [r7, #0]
 80143cc:	4613      	mov	r3, r2
 80143ce:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80143d0:	2301      	movs	r3, #1
 80143d2:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80143d4:	68fb      	ldr	r3, [r7, #12]
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d109      	bne.n	80143ee <xTaskGenericNotifyFromISR+0x2e>
 80143da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143de:	f383 8811 	msr	BASEPRI, r3
 80143e2:	f3bf 8f6f 	isb	sy
 80143e6:	f3bf 8f4f 	dsb	sy
 80143ea:	627b      	str	r3, [r7, #36]	; 0x24
 80143ec:	e7fe      	b.n	80143ec <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80143ee:	f000 fb19 	bl	8014a24 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 80143f2:	68fb      	ldr	r3, [r7, #12]
 80143f4:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80143f6:	f3ef 8211 	mrs	r2, BASEPRI
 80143fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143fe:	f383 8811 	msr	BASEPRI, r3
 8014402:	f3bf 8f6f 	isb	sy
 8014406:	f3bf 8f4f 	dsb	sy
 801440a:	623a      	str	r2, [r7, #32]
 801440c:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 801440e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014410:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8014412:	683b      	ldr	r3, [r7, #0]
 8014414:	2b00      	cmp	r3, #0
 8014416:	d003      	beq.n	8014420 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8014418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801441a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801441c:	683b      	ldr	r3, [r7, #0]
 801441e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8014420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014422:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014426:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801442a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801442c:	2202      	movs	r2, #2
 801442e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8014432:	79fb      	ldrb	r3, [r7, #7]
 8014434:	2b04      	cmp	r3, #4
 8014436:	d829      	bhi.n	801448c <xTaskGenericNotifyFromISR+0xcc>
 8014438:	a201      	add	r2, pc, #4	; (adr r2, 8014440 <xTaskGenericNotifyFromISR+0x80>)
 801443a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801443e:	bf00      	nop
 8014440:	0801448d 	.word	0x0801448d
 8014444:	08014455 	.word	0x08014455
 8014448:	08014463 	.word	0x08014463
 801444c:	0801446f 	.word	0x0801446f
 8014450:	08014477 	.word	0x08014477
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8014454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014456:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014458:	68bb      	ldr	r3, [r7, #8]
 801445a:	431a      	orrs	r2, r3
 801445c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801445e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014460:	e014      	b.n	801448c <xTaskGenericNotifyFromISR+0xcc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8014462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014466:	1c5a      	adds	r2, r3, #1
 8014468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801446a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 801446c:	e00e      	b.n	801448c <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801446e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014470:	68ba      	ldr	r2, [r7, #8]
 8014472:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8014474:	e00a      	b.n	801448c <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8014476:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801447a:	2b02      	cmp	r3, #2
 801447c:	d003      	beq.n	8014486 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801447e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014480:	68ba      	ldr	r2, [r7, #8]
 8014482:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8014484:	e001      	b.n	801448a <xTaskGenericNotifyFromISR+0xca>
						xReturn = pdFAIL;
 8014486:	2300      	movs	r3, #0
 8014488:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 801448a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801448c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014490:	2b01      	cmp	r3, #1
 8014492:	d145      	bne.n	8014520 <xTaskGenericNotifyFromISR+0x160>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8014494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014498:	2b00      	cmp	r3, #0
 801449a:	d009      	beq.n	80144b0 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 801449c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144a0:	f383 8811 	msr	BASEPRI, r3
 80144a4:	f3bf 8f6f 	isb	sy
 80144a8:	f3bf 8f4f 	dsb	sy
 80144ac:	61bb      	str	r3, [r7, #24]
 80144ae:	e7fe      	b.n	80144ae <xTaskGenericNotifyFromISR+0xee>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80144b0:	4b20      	ldr	r3, [pc, #128]	; (8014534 <xTaskGenericNotifyFromISR+0x174>)
 80144b2:	681b      	ldr	r3, [r3, #0]
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d11c      	bne.n	80144f2 <xTaskGenericNotifyFromISR+0x132>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80144b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144ba:	3304      	adds	r3, #4
 80144bc:	4618      	mov	r0, r3
 80144be:	f7fd ffa2 	bl	8012406 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80144c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144c6:	2201      	movs	r2, #1
 80144c8:	409a      	lsls	r2, r3
 80144ca:	4b1b      	ldr	r3, [pc, #108]	; (8014538 <xTaskGenericNotifyFromISR+0x178>)
 80144cc:	681b      	ldr	r3, [r3, #0]
 80144ce:	4313      	orrs	r3, r2
 80144d0:	4a19      	ldr	r2, [pc, #100]	; (8014538 <xTaskGenericNotifyFromISR+0x178>)
 80144d2:	6013      	str	r3, [r2, #0]
 80144d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144d8:	4613      	mov	r3, r2
 80144da:	009b      	lsls	r3, r3, #2
 80144dc:	4413      	add	r3, r2
 80144de:	009b      	lsls	r3, r3, #2
 80144e0:	4a16      	ldr	r2, [pc, #88]	; (801453c <xTaskGenericNotifyFromISR+0x17c>)
 80144e2:	441a      	add	r2, r3
 80144e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144e6:	3304      	adds	r3, #4
 80144e8:	4619      	mov	r1, r3
 80144ea:	4610      	mov	r0, r2
 80144ec:	f7fd ff2e 	bl	801234c <vListInsertEnd>
 80144f0:	e005      	b.n	80144fe <xTaskGenericNotifyFromISR+0x13e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80144f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144f4:	3318      	adds	r3, #24
 80144f6:	4619      	mov	r1, r3
 80144f8:	4811      	ldr	r0, [pc, #68]	; (8014540 <xTaskGenericNotifyFromISR+0x180>)
 80144fa:	f7fd ff27 	bl	801234c <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80144fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014502:	4b10      	ldr	r3, [pc, #64]	; (8014544 <xTaskGenericNotifyFromISR+0x184>)
 8014504:	681b      	ldr	r3, [r3, #0]
 8014506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014508:	429a      	cmp	r2, r3
 801450a:	d909      	bls.n	8014520 <xTaskGenericNotifyFromISR+0x160>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 801450c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801450e:	2b00      	cmp	r3, #0
 8014510:	d003      	beq.n	801451a <xTaskGenericNotifyFromISR+0x15a>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8014512:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014514:	2201      	movs	r2, #1
 8014516:	601a      	str	r2, [r3, #0]
 8014518:	e002      	b.n	8014520 <xTaskGenericNotifyFromISR+0x160>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 801451a:	4b0b      	ldr	r3, [pc, #44]	; (8014548 <xTaskGenericNotifyFromISR+0x188>)
 801451c:	2201      	movs	r2, #1
 801451e:	601a      	str	r2, [r3, #0]
 8014520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014522:	617b      	str	r3, [r7, #20]
	__asm volatile
 8014524:	697b      	ldr	r3, [r7, #20]
 8014526:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 801452a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 801452c:	4618      	mov	r0, r3
 801452e:	3738      	adds	r7, #56	; 0x38
 8014530:	46bd      	mov	sp, r7
 8014532:	bd80      	pop	{r7, pc}
 8014534:	20001588 	.word	0x20001588
 8014538:	20001568 	.word	0x20001568
 801453c:	20001464 	.word	0x20001464
 8014540:	20001520 	.word	0x20001520
 8014544:	20001460 	.word	0x20001460
 8014548:	20001574 	.word	0x20001574

0801454c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801454c:	b580      	push	{r7, lr}
 801454e:	b084      	sub	sp, #16
 8014550:	af00      	add	r7, sp, #0
 8014552:	6078      	str	r0, [r7, #4]
 8014554:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014556:	4b29      	ldr	r3, [pc, #164]	; (80145fc <prvAddCurrentTaskToDelayedList+0xb0>)
 8014558:	681b      	ldr	r3, [r3, #0]
 801455a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801455c:	4b28      	ldr	r3, [pc, #160]	; (8014600 <prvAddCurrentTaskToDelayedList+0xb4>)
 801455e:	681b      	ldr	r3, [r3, #0]
 8014560:	3304      	adds	r3, #4
 8014562:	4618      	mov	r0, r3
 8014564:	f7fd ff4f 	bl	8012406 <uxListRemove>
 8014568:	4603      	mov	r3, r0
 801456a:	2b00      	cmp	r3, #0
 801456c:	d10b      	bne.n	8014586 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 801456e:	4b24      	ldr	r3, [pc, #144]	; (8014600 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014570:	681b      	ldr	r3, [r3, #0]
 8014572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014574:	2201      	movs	r2, #1
 8014576:	fa02 f303 	lsl.w	r3, r2, r3
 801457a:	43da      	mvns	r2, r3
 801457c:	4b21      	ldr	r3, [pc, #132]	; (8014604 <prvAddCurrentTaskToDelayedList+0xb8>)
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	4013      	ands	r3, r2
 8014582:	4a20      	ldr	r2, [pc, #128]	; (8014604 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014584:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	f1b3 3fff 	cmp.w	r3, #4294967295
 801458c:	d10a      	bne.n	80145a4 <prvAddCurrentTaskToDelayedList+0x58>
 801458e:	683b      	ldr	r3, [r7, #0]
 8014590:	2b00      	cmp	r3, #0
 8014592:	d007      	beq.n	80145a4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014594:	4b1a      	ldr	r3, [pc, #104]	; (8014600 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014596:	681b      	ldr	r3, [r3, #0]
 8014598:	3304      	adds	r3, #4
 801459a:	4619      	mov	r1, r3
 801459c:	481a      	ldr	r0, [pc, #104]	; (8014608 <prvAddCurrentTaskToDelayedList+0xbc>)
 801459e:	f7fd fed5 	bl	801234c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80145a2:	e026      	b.n	80145f2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80145a4:	68fa      	ldr	r2, [r7, #12]
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	4413      	add	r3, r2
 80145aa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80145ac:	4b14      	ldr	r3, [pc, #80]	; (8014600 <prvAddCurrentTaskToDelayedList+0xb4>)
 80145ae:	681b      	ldr	r3, [r3, #0]
 80145b0:	68ba      	ldr	r2, [r7, #8]
 80145b2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80145b4:	68ba      	ldr	r2, [r7, #8]
 80145b6:	68fb      	ldr	r3, [r7, #12]
 80145b8:	429a      	cmp	r2, r3
 80145ba:	d209      	bcs.n	80145d0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80145bc:	4b13      	ldr	r3, [pc, #76]	; (801460c <prvAddCurrentTaskToDelayedList+0xc0>)
 80145be:	681a      	ldr	r2, [r3, #0]
 80145c0:	4b0f      	ldr	r3, [pc, #60]	; (8014600 <prvAddCurrentTaskToDelayedList+0xb4>)
 80145c2:	681b      	ldr	r3, [r3, #0]
 80145c4:	3304      	adds	r3, #4
 80145c6:	4619      	mov	r1, r3
 80145c8:	4610      	mov	r0, r2
 80145ca:	f7fd fee3 	bl	8012394 <vListInsert>
}
 80145ce:	e010      	b.n	80145f2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80145d0:	4b0f      	ldr	r3, [pc, #60]	; (8014610 <prvAddCurrentTaskToDelayedList+0xc4>)
 80145d2:	681a      	ldr	r2, [r3, #0]
 80145d4:	4b0a      	ldr	r3, [pc, #40]	; (8014600 <prvAddCurrentTaskToDelayedList+0xb4>)
 80145d6:	681b      	ldr	r3, [r3, #0]
 80145d8:	3304      	adds	r3, #4
 80145da:	4619      	mov	r1, r3
 80145dc:	4610      	mov	r0, r2
 80145de:	f7fd fed9 	bl	8012394 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80145e2:	4b0c      	ldr	r3, [pc, #48]	; (8014614 <prvAddCurrentTaskToDelayedList+0xc8>)
 80145e4:	681b      	ldr	r3, [r3, #0]
 80145e6:	68ba      	ldr	r2, [r7, #8]
 80145e8:	429a      	cmp	r2, r3
 80145ea:	d202      	bcs.n	80145f2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80145ec:	4a09      	ldr	r2, [pc, #36]	; (8014614 <prvAddCurrentTaskToDelayedList+0xc8>)
 80145ee:	68bb      	ldr	r3, [r7, #8]
 80145f0:	6013      	str	r3, [r2, #0]
}
 80145f2:	bf00      	nop
 80145f4:	3710      	adds	r7, #16
 80145f6:	46bd      	mov	sp, r7
 80145f8:	bd80      	pop	{r7, pc}
 80145fa:	bf00      	nop
 80145fc:	20001564 	.word	0x20001564
 8014600:	20001460 	.word	0x20001460
 8014604:	20001568 	.word	0x20001568
 8014608:	2000154c 	.word	0x2000154c
 801460c:	2000151c 	.word	0x2000151c
 8014610:	20001518 	.word	0x20001518
 8014614:	20001580 	.word	0x20001580

08014618 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014618:	b480      	push	{r7}
 801461a:	b085      	sub	sp, #20
 801461c:	af00      	add	r7, sp, #0
 801461e:	60f8      	str	r0, [r7, #12]
 8014620:	60b9      	str	r1, [r7, #8]
 8014622:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014624:	68fb      	ldr	r3, [r7, #12]
 8014626:	3b04      	subs	r3, #4
 8014628:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801462a:	68fb      	ldr	r3, [r7, #12]
 801462c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014630:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014632:	68fb      	ldr	r3, [r7, #12]
 8014634:	3b04      	subs	r3, #4
 8014636:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014638:	68bb      	ldr	r3, [r7, #8]
 801463a:	f023 0201 	bic.w	r2, r3, #1
 801463e:	68fb      	ldr	r3, [r7, #12]
 8014640:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014642:	68fb      	ldr	r3, [r7, #12]
 8014644:	3b04      	subs	r3, #4
 8014646:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014648:	4a0c      	ldr	r2, [pc, #48]	; (801467c <pxPortInitialiseStack+0x64>)
 801464a:	68fb      	ldr	r3, [r7, #12]
 801464c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801464e:	68fb      	ldr	r3, [r7, #12]
 8014650:	3b14      	subs	r3, #20
 8014652:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014654:	687a      	ldr	r2, [r7, #4]
 8014656:	68fb      	ldr	r3, [r7, #12]
 8014658:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801465a:	68fb      	ldr	r3, [r7, #12]
 801465c:	3b04      	subs	r3, #4
 801465e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014660:	68fb      	ldr	r3, [r7, #12]
 8014662:	f06f 0202 	mvn.w	r2, #2
 8014666:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014668:	68fb      	ldr	r3, [r7, #12]
 801466a:	3b20      	subs	r3, #32
 801466c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801466e:	68fb      	ldr	r3, [r7, #12]
}
 8014670:	4618      	mov	r0, r3
 8014672:	3714      	adds	r7, #20
 8014674:	46bd      	mov	sp, r7
 8014676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801467a:	4770      	bx	lr
 801467c:	08014681 	.word	0x08014681

08014680 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014680:	b480      	push	{r7}
 8014682:	b085      	sub	sp, #20
 8014684:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014686:	2300      	movs	r3, #0
 8014688:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801468a:	4b11      	ldr	r3, [pc, #68]	; (80146d0 <prvTaskExitError+0x50>)
 801468c:	681b      	ldr	r3, [r3, #0]
 801468e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014692:	d009      	beq.n	80146a8 <prvTaskExitError+0x28>
	__asm volatile
 8014694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014698:	f383 8811 	msr	BASEPRI, r3
 801469c:	f3bf 8f6f 	isb	sy
 80146a0:	f3bf 8f4f 	dsb	sy
 80146a4:	60fb      	str	r3, [r7, #12]
 80146a6:	e7fe      	b.n	80146a6 <prvTaskExitError+0x26>
 80146a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146ac:	f383 8811 	msr	BASEPRI, r3
 80146b0:	f3bf 8f6f 	isb	sy
 80146b4:	f3bf 8f4f 	dsb	sy
 80146b8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80146ba:	bf00      	nop
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d0fc      	beq.n	80146bc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80146c2:	bf00      	nop
 80146c4:	3714      	adds	r7, #20
 80146c6:	46bd      	mov	sp, r7
 80146c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146cc:	4770      	bx	lr
 80146ce:	bf00      	nop
 80146d0:	20000da8 	.word	0x20000da8
	...

080146e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80146e0:	4b07      	ldr	r3, [pc, #28]	; (8014700 <pxCurrentTCBConst2>)
 80146e2:	6819      	ldr	r1, [r3, #0]
 80146e4:	6808      	ldr	r0, [r1, #0]
 80146e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146ea:	f380 8809 	msr	PSP, r0
 80146ee:	f3bf 8f6f 	isb	sy
 80146f2:	f04f 0000 	mov.w	r0, #0
 80146f6:	f380 8811 	msr	BASEPRI, r0
 80146fa:	4770      	bx	lr
 80146fc:	f3af 8000 	nop.w

08014700 <pxCurrentTCBConst2>:
 8014700:	20001460 	.word	0x20001460
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014704:	bf00      	nop
 8014706:	bf00      	nop

08014708 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014708:	4808      	ldr	r0, [pc, #32]	; (801472c <prvPortStartFirstTask+0x24>)
 801470a:	6800      	ldr	r0, [r0, #0]
 801470c:	6800      	ldr	r0, [r0, #0]
 801470e:	f380 8808 	msr	MSP, r0
 8014712:	f04f 0000 	mov.w	r0, #0
 8014716:	f380 8814 	msr	CONTROL, r0
 801471a:	b662      	cpsie	i
 801471c:	b661      	cpsie	f
 801471e:	f3bf 8f4f 	dsb	sy
 8014722:	f3bf 8f6f 	isb	sy
 8014726:	df00      	svc	0
 8014728:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801472a:	bf00      	nop
 801472c:	e000ed08 	.word	0xe000ed08

08014730 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014730:	b580      	push	{r7, lr}
 8014732:	b086      	sub	sp, #24
 8014734:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014736:	4b44      	ldr	r3, [pc, #272]	; (8014848 <xPortStartScheduler+0x118>)
 8014738:	681b      	ldr	r3, [r3, #0]
 801473a:	4a44      	ldr	r2, [pc, #272]	; (801484c <xPortStartScheduler+0x11c>)
 801473c:	4293      	cmp	r3, r2
 801473e:	d109      	bne.n	8014754 <xPortStartScheduler+0x24>
 8014740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014744:	f383 8811 	msr	BASEPRI, r3
 8014748:	f3bf 8f6f 	isb	sy
 801474c:	f3bf 8f4f 	dsb	sy
 8014750:	613b      	str	r3, [r7, #16]
 8014752:	e7fe      	b.n	8014752 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014754:	4b3c      	ldr	r3, [pc, #240]	; (8014848 <xPortStartScheduler+0x118>)
 8014756:	681b      	ldr	r3, [r3, #0]
 8014758:	4a3d      	ldr	r2, [pc, #244]	; (8014850 <xPortStartScheduler+0x120>)
 801475a:	4293      	cmp	r3, r2
 801475c:	d109      	bne.n	8014772 <xPortStartScheduler+0x42>
 801475e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014762:	f383 8811 	msr	BASEPRI, r3
 8014766:	f3bf 8f6f 	isb	sy
 801476a:	f3bf 8f4f 	dsb	sy
 801476e:	60fb      	str	r3, [r7, #12]
 8014770:	e7fe      	b.n	8014770 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014772:	4b38      	ldr	r3, [pc, #224]	; (8014854 <xPortStartScheduler+0x124>)
 8014774:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014776:	697b      	ldr	r3, [r7, #20]
 8014778:	781b      	ldrb	r3, [r3, #0]
 801477a:	b2db      	uxtb	r3, r3
 801477c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801477e:	697b      	ldr	r3, [r7, #20]
 8014780:	22ff      	movs	r2, #255	; 0xff
 8014782:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014784:	697b      	ldr	r3, [r7, #20]
 8014786:	781b      	ldrb	r3, [r3, #0]
 8014788:	b2db      	uxtb	r3, r3
 801478a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801478c:	78fb      	ldrb	r3, [r7, #3]
 801478e:	b2db      	uxtb	r3, r3
 8014790:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014794:	b2da      	uxtb	r2, r3
 8014796:	4b30      	ldr	r3, [pc, #192]	; (8014858 <xPortStartScheduler+0x128>)
 8014798:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801479a:	4b30      	ldr	r3, [pc, #192]	; (801485c <xPortStartScheduler+0x12c>)
 801479c:	2207      	movs	r2, #7
 801479e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80147a0:	e009      	b.n	80147b6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80147a2:	4b2e      	ldr	r3, [pc, #184]	; (801485c <xPortStartScheduler+0x12c>)
 80147a4:	681b      	ldr	r3, [r3, #0]
 80147a6:	3b01      	subs	r3, #1
 80147a8:	4a2c      	ldr	r2, [pc, #176]	; (801485c <xPortStartScheduler+0x12c>)
 80147aa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80147ac:	78fb      	ldrb	r3, [r7, #3]
 80147ae:	b2db      	uxtb	r3, r3
 80147b0:	005b      	lsls	r3, r3, #1
 80147b2:	b2db      	uxtb	r3, r3
 80147b4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80147b6:	78fb      	ldrb	r3, [r7, #3]
 80147b8:	b2db      	uxtb	r3, r3
 80147ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80147be:	2b80      	cmp	r3, #128	; 0x80
 80147c0:	d0ef      	beq.n	80147a2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80147c2:	4b26      	ldr	r3, [pc, #152]	; (801485c <xPortStartScheduler+0x12c>)
 80147c4:	681b      	ldr	r3, [r3, #0]
 80147c6:	f1c3 0307 	rsb	r3, r3, #7
 80147ca:	2b04      	cmp	r3, #4
 80147cc:	d009      	beq.n	80147e2 <xPortStartScheduler+0xb2>
 80147ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147d2:	f383 8811 	msr	BASEPRI, r3
 80147d6:	f3bf 8f6f 	isb	sy
 80147da:	f3bf 8f4f 	dsb	sy
 80147de:	60bb      	str	r3, [r7, #8]
 80147e0:	e7fe      	b.n	80147e0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80147e2:	4b1e      	ldr	r3, [pc, #120]	; (801485c <xPortStartScheduler+0x12c>)
 80147e4:	681b      	ldr	r3, [r3, #0]
 80147e6:	021b      	lsls	r3, r3, #8
 80147e8:	4a1c      	ldr	r2, [pc, #112]	; (801485c <xPortStartScheduler+0x12c>)
 80147ea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80147ec:	4b1b      	ldr	r3, [pc, #108]	; (801485c <xPortStartScheduler+0x12c>)
 80147ee:	681b      	ldr	r3, [r3, #0]
 80147f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80147f4:	4a19      	ldr	r2, [pc, #100]	; (801485c <xPortStartScheduler+0x12c>)
 80147f6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	b2da      	uxtb	r2, r3
 80147fc:	697b      	ldr	r3, [r7, #20]
 80147fe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014800:	4b17      	ldr	r3, [pc, #92]	; (8014860 <xPortStartScheduler+0x130>)
 8014802:	681b      	ldr	r3, [r3, #0]
 8014804:	4a16      	ldr	r2, [pc, #88]	; (8014860 <xPortStartScheduler+0x130>)
 8014806:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801480a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801480c:	4b14      	ldr	r3, [pc, #80]	; (8014860 <xPortStartScheduler+0x130>)
 801480e:	681b      	ldr	r3, [r3, #0]
 8014810:	4a13      	ldr	r2, [pc, #76]	; (8014860 <xPortStartScheduler+0x130>)
 8014812:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8014816:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014818:	f000 f8d6 	bl	80149c8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801481c:	4b11      	ldr	r3, [pc, #68]	; (8014864 <xPortStartScheduler+0x134>)
 801481e:	2200      	movs	r2, #0
 8014820:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014822:	f000 f8f5 	bl	8014a10 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014826:	4b10      	ldr	r3, [pc, #64]	; (8014868 <xPortStartScheduler+0x138>)
 8014828:	681b      	ldr	r3, [r3, #0]
 801482a:	4a0f      	ldr	r2, [pc, #60]	; (8014868 <xPortStartScheduler+0x138>)
 801482c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014830:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014832:	f7ff ff69 	bl	8014708 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014836:	f7ff f8b5 	bl	80139a4 <vTaskSwitchContext>
	prvTaskExitError();
 801483a:	f7ff ff21 	bl	8014680 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801483e:	2300      	movs	r3, #0
}
 8014840:	4618      	mov	r0, r3
 8014842:	3718      	adds	r7, #24
 8014844:	46bd      	mov	sp, r7
 8014846:	bd80      	pop	{r7, pc}
 8014848:	e000ed00 	.word	0xe000ed00
 801484c:	410fc271 	.word	0x410fc271
 8014850:	410fc270 	.word	0x410fc270
 8014854:	e000e400 	.word	0xe000e400
 8014858:	2000158c 	.word	0x2000158c
 801485c:	20001590 	.word	0x20001590
 8014860:	e000ed20 	.word	0xe000ed20
 8014864:	20000da8 	.word	0x20000da8
 8014868:	e000ef34 	.word	0xe000ef34

0801486c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801486c:	b480      	push	{r7}
 801486e:	b083      	sub	sp, #12
 8014870:	af00      	add	r7, sp, #0
 8014872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014876:	f383 8811 	msr	BASEPRI, r3
 801487a:	f3bf 8f6f 	isb	sy
 801487e:	f3bf 8f4f 	dsb	sy
 8014882:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014884:	4b0e      	ldr	r3, [pc, #56]	; (80148c0 <vPortEnterCritical+0x54>)
 8014886:	681b      	ldr	r3, [r3, #0]
 8014888:	3301      	adds	r3, #1
 801488a:	4a0d      	ldr	r2, [pc, #52]	; (80148c0 <vPortEnterCritical+0x54>)
 801488c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801488e:	4b0c      	ldr	r3, [pc, #48]	; (80148c0 <vPortEnterCritical+0x54>)
 8014890:	681b      	ldr	r3, [r3, #0]
 8014892:	2b01      	cmp	r3, #1
 8014894:	d10e      	bne.n	80148b4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014896:	4b0b      	ldr	r3, [pc, #44]	; (80148c4 <vPortEnterCritical+0x58>)
 8014898:	681b      	ldr	r3, [r3, #0]
 801489a:	b2db      	uxtb	r3, r3
 801489c:	2b00      	cmp	r3, #0
 801489e:	d009      	beq.n	80148b4 <vPortEnterCritical+0x48>
 80148a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148a4:	f383 8811 	msr	BASEPRI, r3
 80148a8:	f3bf 8f6f 	isb	sy
 80148ac:	f3bf 8f4f 	dsb	sy
 80148b0:	603b      	str	r3, [r7, #0]
 80148b2:	e7fe      	b.n	80148b2 <vPortEnterCritical+0x46>
	}
}
 80148b4:	bf00      	nop
 80148b6:	370c      	adds	r7, #12
 80148b8:	46bd      	mov	sp, r7
 80148ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148be:	4770      	bx	lr
 80148c0:	20000da8 	.word	0x20000da8
 80148c4:	e000ed04 	.word	0xe000ed04

080148c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80148c8:	b480      	push	{r7}
 80148ca:	b083      	sub	sp, #12
 80148cc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80148ce:	4b11      	ldr	r3, [pc, #68]	; (8014914 <vPortExitCritical+0x4c>)
 80148d0:	681b      	ldr	r3, [r3, #0]
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d109      	bne.n	80148ea <vPortExitCritical+0x22>
 80148d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148da:	f383 8811 	msr	BASEPRI, r3
 80148de:	f3bf 8f6f 	isb	sy
 80148e2:	f3bf 8f4f 	dsb	sy
 80148e6:	607b      	str	r3, [r7, #4]
 80148e8:	e7fe      	b.n	80148e8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80148ea:	4b0a      	ldr	r3, [pc, #40]	; (8014914 <vPortExitCritical+0x4c>)
 80148ec:	681b      	ldr	r3, [r3, #0]
 80148ee:	3b01      	subs	r3, #1
 80148f0:	4a08      	ldr	r2, [pc, #32]	; (8014914 <vPortExitCritical+0x4c>)
 80148f2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80148f4:	4b07      	ldr	r3, [pc, #28]	; (8014914 <vPortExitCritical+0x4c>)
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	d104      	bne.n	8014906 <vPortExitCritical+0x3e>
 80148fc:	2300      	movs	r3, #0
 80148fe:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014900:	683b      	ldr	r3, [r7, #0]
 8014902:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8014906:	bf00      	nop
 8014908:	370c      	adds	r7, #12
 801490a:	46bd      	mov	sp, r7
 801490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014910:	4770      	bx	lr
 8014912:	bf00      	nop
 8014914:	20000da8 	.word	0x20000da8
	...

08014920 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014920:	f3ef 8009 	mrs	r0, PSP
 8014924:	f3bf 8f6f 	isb	sy
 8014928:	4b15      	ldr	r3, [pc, #84]	; (8014980 <pxCurrentTCBConst>)
 801492a:	681a      	ldr	r2, [r3, #0]
 801492c:	f01e 0f10 	tst.w	lr, #16
 8014930:	bf08      	it	eq
 8014932:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014936:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801493a:	6010      	str	r0, [r2, #0]
 801493c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014940:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014944:	f380 8811 	msr	BASEPRI, r0
 8014948:	f3bf 8f4f 	dsb	sy
 801494c:	f3bf 8f6f 	isb	sy
 8014950:	f7ff f828 	bl	80139a4 <vTaskSwitchContext>
 8014954:	f04f 0000 	mov.w	r0, #0
 8014958:	f380 8811 	msr	BASEPRI, r0
 801495c:	bc09      	pop	{r0, r3}
 801495e:	6819      	ldr	r1, [r3, #0]
 8014960:	6808      	ldr	r0, [r1, #0]
 8014962:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014966:	f01e 0f10 	tst.w	lr, #16
 801496a:	bf08      	it	eq
 801496c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014970:	f380 8809 	msr	PSP, r0
 8014974:	f3bf 8f6f 	isb	sy
 8014978:	4770      	bx	lr
 801497a:	bf00      	nop
 801497c:	f3af 8000 	nop.w

08014980 <pxCurrentTCBConst>:
 8014980:	20001460 	.word	0x20001460
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014984:	bf00      	nop
 8014986:	bf00      	nop

08014988 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014988:	b580      	push	{r7, lr}
 801498a:	b082      	sub	sp, #8
 801498c:	af00      	add	r7, sp, #0
	__asm volatile
 801498e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014992:	f383 8811 	msr	BASEPRI, r3
 8014996:	f3bf 8f6f 	isb	sy
 801499a:	f3bf 8f4f 	dsb	sy
 801499e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80149a0:	f7fe ff44 	bl	801382c <xTaskIncrementTick>
 80149a4:	4603      	mov	r3, r0
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d003      	beq.n	80149b2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80149aa:	4b06      	ldr	r3, [pc, #24]	; (80149c4 <SysTick_Handler+0x3c>)
 80149ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80149b0:	601a      	str	r2, [r3, #0]
 80149b2:	2300      	movs	r3, #0
 80149b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80149b6:	683b      	ldr	r3, [r7, #0]
 80149b8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80149bc:	bf00      	nop
 80149be:	3708      	adds	r7, #8
 80149c0:	46bd      	mov	sp, r7
 80149c2:	bd80      	pop	{r7, pc}
 80149c4:	e000ed04 	.word	0xe000ed04

080149c8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80149c8:	b480      	push	{r7}
 80149ca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80149cc:	4b0b      	ldr	r3, [pc, #44]	; (80149fc <vPortSetupTimerInterrupt+0x34>)
 80149ce:	2200      	movs	r2, #0
 80149d0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80149d2:	4b0b      	ldr	r3, [pc, #44]	; (8014a00 <vPortSetupTimerInterrupt+0x38>)
 80149d4:	2200      	movs	r2, #0
 80149d6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80149d8:	4b0a      	ldr	r3, [pc, #40]	; (8014a04 <vPortSetupTimerInterrupt+0x3c>)
 80149da:	681b      	ldr	r3, [r3, #0]
 80149dc:	4a0a      	ldr	r2, [pc, #40]	; (8014a08 <vPortSetupTimerInterrupt+0x40>)
 80149de:	fba2 2303 	umull	r2, r3, r2, r3
 80149e2:	099b      	lsrs	r3, r3, #6
 80149e4:	4a09      	ldr	r2, [pc, #36]	; (8014a0c <vPortSetupTimerInterrupt+0x44>)
 80149e6:	3b01      	subs	r3, #1
 80149e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80149ea:	4b04      	ldr	r3, [pc, #16]	; (80149fc <vPortSetupTimerInterrupt+0x34>)
 80149ec:	2207      	movs	r2, #7
 80149ee:	601a      	str	r2, [r3, #0]
}
 80149f0:	bf00      	nop
 80149f2:	46bd      	mov	sp, r7
 80149f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149f8:	4770      	bx	lr
 80149fa:	bf00      	nop
 80149fc:	e000e010 	.word	0xe000e010
 8014a00:	e000e018 	.word	0xe000e018
 8014a04:	20000c8c 	.word	0x20000c8c
 8014a08:	10624dd3 	.word	0x10624dd3
 8014a0c:	e000e014 	.word	0xe000e014

08014a10 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014a10:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014a20 <vPortEnableVFP+0x10>
 8014a14:	6801      	ldr	r1, [r0, #0]
 8014a16:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8014a1a:	6001      	str	r1, [r0, #0]
 8014a1c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014a1e:	bf00      	nop
 8014a20:	e000ed88 	.word	0xe000ed88

08014a24 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014a24:	b480      	push	{r7}
 8014a26:	b085      	sub	sp, #20
 8014a28:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8014a2a:	f3ef 8305 	mrs	r3, IPSR
 8014a2e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014a30:	68fb      	ldr	r3, [r7, #12]
 8014a32:	2b0f      	cmp	r3, #15
 8014a34:	d913      	bls.n	8014a5e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014a36:	4a16      	ldr	r2, [pc, #88]	; (8014a90 <vPortValidateInterruptPriority+0x6c>)
 8014a38:	68fb      	ldr	r3, [r7, #12]
 8014a3a:	4413      	add	r3, r2
 8014a3c:	781b      	ldrb	r3, [r3, #0]
 8014a3e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014a40:	4b14      	ldr	r3, [pc, #80]	; (8014a94 <vPortValidateInterruptPriority+0x70>)
 8014a42:	781b      	ldrb	r3, [r3, #0]
 8014a44:	7afa      	ldrb	r2, [r7, #11]
 8014a46:	429a      	cmp	r2, r3
 8014a48:	d209      	bcs.n	8014a5e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8014a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a4e:	f383 8811 	msr	BASEPRI, r3
 8014a52:	f3bf 8f6f 	isb	sy
 8014a56:	f3bf 8f4f 	dsb	sy
 8014a5a:	607b      	str	r3, [r7, #4]
 8014a5c:	e7fe      	b.n	8014a5c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014a5e:	4b0e      	ldr	r3, [pc, #56]	; (8014a98 <vPortValidateInterruptPriority+0x74>)
 8014a60:	681b      	ldr	r3, [r3, #0]
 8014a62:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8014a66:	4b0d      	ldr	r3, [pc, #52]	; (8014a9c <vPortValidateInterruptPriority+0x78>)
 8014a68:	681b      	ldr	r3, [r3, #0]
 8014a6a:	429a      	cmp	r2, r3
 8014a6c:	d909      	bls.n	8014a82 <vPortValidateInterruptPriority+0x5e>
 8014a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a72:	f383 8811 	msr	BASEPRI, r3
 8014a76:	f3bf 8f6f 	isb	sy
 8014a7a:	f3bf 8f4f 	dsb	sy
 8014a7e:	603b      	str	r3, [r7, #0]
 8014a80:	e7fe      	b.n	8014a80 <vPortValidateInterruptPriority+0x5c>
	}
 8014a82:	bf00      	nop
 8014a84:	3714      	adds	r7, #20
 8014a86:	46bd      	mov	sp, r7
 8014a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a8c:	4770      	bx	lr
 8014a8e:	bf00      	nop
 8014a90:	e000e3f0 	.word	0xe000e3f0
 8014a94:	2000158c 	.word	0x2000158c
 8014a98:	e000ed0c 	.word	0xe000ed0c
 8014a9c:	20001590 	.word	0x20001590

08014aa0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014aa0:	b580      	push	{r7, lr}
 8014aa2:	b08a      	sub	sp, #40	; 0x28
 8014aa4:	af00      	add	r7, sp, #0
 8014aa6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014aa8:	2300      	movs	r3, #0
 8014aaa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014aac:	f7fe fe14 	bl	80136d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014ab0:	4b57      	ldr	r3, [pc, #348]	; (8014c10 <pvPortMalloc+0x170>)
 8014ab2:	681b      	ldr	r3, [r3, #0]
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	d101      	bne.n	8014abc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014ab8:	f000 f90c 	bl	8014cd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014abc:	4b55      	ldr	r3, [pc, #340]	; (8014c14 <pvPortMalloc+0x174>)
 8014abe:	681a      	ldr	r2, [r3, #0]
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	4013      	ands	r3, r2
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	f040 808c 	bne.w	8014be2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d01c      	beq.n	8014b0a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8014ad0:	2208      	movs	r2, #8
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	4413      	add	r3, r2
 8014ad6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	f003 0307 	and.w	r3, r3, #7
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d013      	beq.n	8014b0a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	f023 0307 	bic.w	r3, r3, #7
 8014ae8:	3308      	adds	r3, #8
 8014aea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	f003 0307 	and.w	r3, r3, #7
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	d009      	beq.n	8014b0a <pvPortMalloc+0x6a>
 8014af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014afa:	f383 8811 	msr	BASEPRI, r3
 8014afe:	f3bf 8f6f 	isb	sy
 8014b02:	f3bf 8f4f 	dsb	sy
 8014b06:	617b      	str	r3, [r7, #20]
 8014b08:	e7fe      	b.n	8014b08 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d068      	beq.n	8014be2 <pvPortMalloc+0x142>
 8014b10:	4b41      	ldr	r3, [pc, #260]	; (8014c18 <pvPortMalloc+0x178>)
 8014b12:	681b      	ldr	r3, [r3, #0]
 8014b14:	687a      	ldr	r2, [r7, #4]
 8014b16:	429a      	cmp	r2, r3
 8014b18:	d863      	bhi.n	8014be2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014b1a:	4b40      	ldr	r3, [pc, #256]	; (8014c1c <pvPortMalloc+0x17c>)
 8014b1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014b1e:	4b3f      	ldr	r3, [pc, #252]	; (8014c1c <pvPortMalloc+0x17c>)
 8014b20:	681b      	ldr	r3, [r3, #0]
 8014b22:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014b24:	e004      	b.n	8014b30 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8014b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b2c:	681b      	ldr	r3, [r3, #0]
 8014b2e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b32:	685b      	ldr	r3, [r3, #4]
 8014b34:	687a      	ldr	r2, [r7, #4]
 8014b36:	429a      	cmp	r2, r3
 8014b38:	d903      	bls.n	8014b42 <pvPortMalloc+0xa2>
 8014b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b3c:	681b      	ldr	r3, [r3, #0]
 8014b3e:	2b00      	cmp	r3, #0
 8014b40:	d1f1      	bne.n	8014b26 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8014b42:	4b33      	ldr	r3, [pc, #204]	; (8014c10 <pvPortMalloc+0x170>)
 8014b44:	681b      	ldr	r3, [r3, #0]
 8014b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014b48:	429a      	cmp	r2, r3
 8014b4a:	d04a      	beq.n	8014be2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014b4c:	6a3b      	ldr	r3, [r7, #32]
 8014b4e:	681b      	ldr	r3, [r3, #0]
 8014b50:	2208      	movs	r2, #8
 8014b52:	4413      	add	r3, r2
 8014b54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b58:	681a      	ldr	r2, [r3, #0]
 8014b5a:	6a3b      	ldr	r3, [r7, #32]
 8014b5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b60:	685a      	ldr	r2, [r3, #4]
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	1ad2      	subs	r2, r2, r3
 8014b66:	2308      	movs	r3, #8
 8014b68:	005b      	lsls	r3, r3, #1
 8014b6a:	429a      	cmp	r2, r3
 8014b6c:	d91e      	bls.n	8014bac <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	4413      	add	r3, r2
 8014b74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014b76:	69bb      	ldr	r3, [r7, #24]
 8014b78:	f003 0307 	and.w	r3, r3, #7
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d009      	beq.n	8014b94 <pvPortMalloc+0xf4>
 8014b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b84:	f383 8811 	msr	BASEPRI, r3
 8014b88:	f3bf 8f6f 	isb	sy
 8014b8c:	f3bf 8f4f 	dsb	sy
 8014b90:	613b      	str	r3, [r7, #16]
 8014b92:	e7fe      	b.n	8014b92 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b96:	685a      	ldr	r2, [r3, #4]
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	1ad2      	subs	r2, r2, r3
 8014b9c:	69bb      	ldr	r3, [r7, #24]
 8014b9e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ba2:	687a      	ldr	r2, [r7, #4]
 8014ba4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014ba6:	69b8      	ldr	r0, [r7, #24]
 8014ba8:	f000 f8f6 	bl	8014d98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014bac:	4b1a      	ldr	r3, [pc, #104]	; (8014c18 <pvPortMalloc+0x178>)
 8014bae:	681a      	ldr	r2, [r3, #0]
 8014bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bb2:	685b      	ldr	r3, [r3, #4]
 8014bb4:	1ad3      	subs	r3, r2, r3
 8014bb6:	4a18      	ldr	r2, [pc, #96]	; (8014c18 <pvPortMalloc+0x178>)
 8014bb8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014bba:	4b17      	ldr	r3, [pc, #92]	; (8014c18 <pvPortMalloc+0x178>)
 8014bbc:	681a      	ldr	r2, [r3, #0]
 8014bbe:	4b18      	ldr	r3, [pc, #96]	; (8014c20 <pvPortMalloc+0x180>)
 8014bc0:	681b      	ldr	r3, [r3, #0]
 8014bc2:	429a      	cmp	r2, r3
 8014bc4:	d203      	bcs.n	8014bce <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014bc6:	4b14      	ldr	r3, [pc, #80]	; (8014c18 <pvPortMalloc+0x178>)
 8014bc8:	681b      	ldr	r3, [r3, #0]
 8014bca:	4a15      	ldr	r2, [pc, #84]	; (8014c20 <pvPortMalloc+0x180>)
 8014bcc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8014bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bd0:	685a      	ldr	r2, [r3, #4]
 8014bd2:	4b10      	ldr	r3, [pc, #64]	; (8014c14 <pvPortMalloc+0x174>)
 8014bd4:	681b      	ldr	r3, [r3, #0]
 8014bd6:	431a      	orrs	r2, r3
 8014bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bda:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bde:	2200      	movs	r2, #0
 8014be0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014be2:	f7fe fd87 	bl	80136f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8014be6:	69fb      	ldr	r3, [r7, #28]
 8014be8:	f003 0307 	and.w	r3, r3, #7
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d009      	beq.n	8014c04 <pvPortMalloc+0x164>
 8014bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bf4:	f383 8811 	msr	BASEPRI, r3
 8014bf8:	f3bf 8f6f 	isb	sy
 8014bfc:	f3bf 8f4f 	dsb	sy
 8014c00:	60fb      	str	r3, [r7, #12]
 8014c02:	e7fe      	b.n	8014c02 <pvPortMalloc+0x162>
	return pvReturn;
 8014c04:	69fb      	ldr	r3, [r7, #28]
}
 8014c06:	4618      	mov	r0, r3
 8014c08:	3728      	adds	r7, #40	; 0x28
 8014c0a:	46bd      	mov	sp, r7
 8014c0c:	bd80      	pop	{r7, pc}
 8014c0e:	bf00      	nop
 8014c10:	2000519c 	.word	0x2000519c
 8014c14:	200051a8 	.word	0x200051a8
 8014c18:	200051a0 	.word	0x200051a0
 8014c1c:	20005194 	.word	0x20005194
 8014c20:	200051a4 	.word	0x200051a4

08014c24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014c24:	b580      	push	{r7, lr}
 8014c26:	b086      	sub	sp, #24
 8014c28:	af00      	add	r7, sp, #0
 8014c2a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d046      	beq.n	8014cc4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014c36:	2308      	movs	r3, #8
 8014c38:	425b      	negs	r3, r3
 8014c3a:	697a      	ldr	r2, [r7, #20]
 8014c3c:	4413      	add	r3, r2
 8014c3e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8014c40:	697b      	ldr	r3, [r7, #20]
 8014c42:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014c44:	693b      	ldr	r3, [r7, #16]
 8014c46:	685a      	ldr	r2, [r3, #4]
 8014c48:	4b20      	ldr	r3, [pc, #128]	; (8014ccc <vPortFree+0xa8>)
 8014c4a:	681b      	ldr	r3, [r3, #0]
 8014c4c:	4013      	ands	r3, r2
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d109      	bne.n	8014c66 <vPortFree+0x42>
 8014c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c56:	f383 8811 	msr	BASEPRI, r3
 8014c5a:	f3bf 8f6f 	isb	sy
 8014c5e:	f3bf 8f4f 	dsb	sy
 8014c62:	60fb      	str	r3, [r7, #12]
 8014c64:	e7fe      	b.n	8014c64 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014c66:	693b      	ldr	r3, [r7, #16]
 8014c68:	681b      	ldr	r3, [r3, #0]
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d009      	beq.n	8014c82 <vPortFree+0x5e>
 8014c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c72:	f383 8811 	msr	BASEPRI, r3
 8014c76:	f3bf 8f6f 	isb	sy
 8014c7a:	f3bf 8f4f 	dsb	sy
 8014c7e:	60bb      	str	r3, [r7, #8]
 8014c80:	e7fe      	b.n	8014c80 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014c82:	693b      	ldr	r3, [r7, #16]
 8014c84:	685a      	ldr	r2, [r3, #4]
 8014c86:	4b11      	ldr	r3, [pc, #68]	; (8014ccc <vPortFree+0xa8>)
 8014c88:	681b      	ldr	r3, [r3, #0]
 8014c8a:	4013      	ands	r3, r2
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d019      	beq.n	8014cc4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014c90:	693b      	ldr	r3, [r7, #16]
 8014c92:	681b      	ldr	r3, [r3, #0]
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	d115      	bne.n	8014cc4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014c98:	693b      	ldr	r3, [r7, #16]
 8014c9a:	685a      	ldr	r2, [r3, #4]
 8014c9c:	4b0b      	ldr	r3, [pc, #44]	; (8014ccc <vPortFree+0xa8>)
 8014c9e:	681b      	ldr	r3, [r3, #0]
 8014ca0:	43db      	mvns	r3, r3
 8014ca2:	401a      	ands	r2, r3
 8014ca4:	693b      	ldr	r3, [r7, #16]
 8014ca6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014ca8:	f7fe fd16 	bl	80136d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8014cac:	693b      	ldr	r3, [r7, #16]
 8014cae:	685a      	ldr	r2, [r3, #4]
 8014cb0:	4b07      	ldr	r3, [pc, #28]	; (8014cd0 <vPortFree+0xac>)
 8014cb2:	681b      	ldr	r3, [r3, #0]
 8014cb4:	4413      	add	r3, r2
 8014cb6:	4a06      	ldr	r2, [pc, #24]	; (8014cd0 <vPortFree+0xac>)
 8014cb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8014cba:	6938      	ldr	r0, [r7, #16]
 8014cbc:	f000 f86c 	bl	8014d98 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8014cc0:	f7fe fd18 	bl	80136f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8014cc4:	bf00      	nop
 8014cc6:	3718      	adds	r7, #24
 8014cc8:	46bd      	mov	sp, r7
 8014cca:	bd80      	pop	{r7, pc}
 8014ccc:	200051a8 	.word	0x200051a8
 8014cd0:	200051a0 	.word	0x200051a0

08014cd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014cd4:	b480      	push	{r7}
 8014cd6:	b085      	sub	sp, #20
 8014cd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8014cda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8014cde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014ce0:	4b27      	ldr	r3, [pc, #156]	; (8014d80 <prvHeapInit+0xac>)
 8014ce2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014ce4:	68fb      	ldr	r3, [r7, #12]
 8014ce6:	f003 0307 	and.w	r3, r3, #7
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d00c      	beq.n	8014d08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	3307      	adds	r3, #7
 8014cf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	f023 0307 	bic.w	r3, r3, #7
 8014cfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8014cfc:	68ba      	ldr	r2, [r7, #8]
 8014cfe:	68fb      	ldr	r3, [r7, #12]
 8014d00:	1ad3      	subs	r3, r2, r3
 8014d02:	4a1f      	ldr	r2, [pc, #124]	; (8014d80 <prvHeapInit+0xac>)
 8014d04:	4413      	add	r3, r2
 8014d06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014d08:	68fb      	ldr	r3, [r7, #12]
 8014d0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8014d0c:	4a1d      	ldr	r2, [pc, #116]	; (8014d84 <prvHeapInit+0xb0>)
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014d12:	4b1c      	ldr	r3, [pc, #112]	; (8014d84 <prvHeapInit+0xb0>)
 8014d14:	2200      	movs	r2, #0
 8014d16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	68ba      	ldr	r2, [r7, #8]
 8014d1c:	4413      	add	r3, r2
 8014d1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014d20:	2208      	movs	r2, #8
 8014d22:	68fb      	ldr	r3, [r7, #12]
 8014d24:	1a9b      	subs	r3, r3, r2
 8014d26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014d28:	68fb      	ldr	r3, [r7, #12]
 8014d2a:	f023 0307 	bic.w	r3, r3, #7
 8014d2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014d30:	68fb      	ldr	r3, [r7, #12]
 8014d32:	4a15      	ldr	r2, [pc, #84]	; (8014d88 <prvHeapInit+0xb4>)
 8014d34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014d36:	4b14      	ldr	r3, [pc, #80]	; (8014d88 <prvHeapInit+0xb4>)
 8014d38:	681b      	ldr	r3, [r3, #0]
 8014d3a:	2200      	movs	r2, #0
 8014d3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8014d3e:	4b12      	ldr	r3, [pc, #72]	; (8014d88 <prvHeapInit+0xb4>)
 8014d40:	681b      	ldr	r3, [r3, #0]
 8014d42:	2200      	movs	r2, #0
 8014d44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8014d4a:	683b      	ldr	r3, [r7, #0]
 8014d4c:	68fa      	ldr	r2, [r7, #12]
 8014d4e:	1ad2      	subs	r2, r2, r3
 8014d50:	683b      	ldr	r3, [r7, #0]
 8014d52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014d54:	4b0c      	ldr	r3, [pc, #48]	; (8014d88 <prvHeapInit+0xb4>)
 8014d56:	681a      	ldr	r2, [r3, #0]
 8014d58:	683b      	ldr	r3, [r7, #0]
 8014d5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014d5c:	683b      	ldr	r3, [r7, #0]
 8014d5e:	685b      	ldr	r3, [r3, #4]
 8014d60:	4a0a      	ldr	r2, [pc, #40]	; (8014d8c <prvHeapInit+0xb8>)
 8014d62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014d64:	683b      	ldr	r3, [r7, #0]
 8014d66:	685b      	ldr	r3, [r3, #4]
 8014d68:	4a09      	ldr	r2, [pc, #36]	; (8014d90 <prvHeapInit+0xbc>)
 8014d6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8014d6c:	4b09      	ldr	r3, [pc, #36]	; (8014d94 <prvHeapInit+0xc0>)
 8014d6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014d72:	601a      	str	r2, [r3, #0]
}
 8014d74:	bf00      	nop
 8014d76:	3714      	adds	r7, #20
 8014d78:	46bd      	mov	sp, r7
 8014d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d7e:	4770      	bx	lr
 8014d80:	20001594 	.word	0x20001594
 8014d84:	20005194 	.word	0x20005194
 8014d88:	2000519c 	.word	0x2000519c
 8014d8c:	200051a4 	.word	0x200051a4
 8014d90:	200051a0 	.word	0x200051a0
 8014d94:	200051a8 	.word	0x200051a8

08014d98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014d98:	b480      	push	{r7}
 8014d9a:	b085      	sub	sp, #20
 8014d9c:	af00      	add	r7, sp, #0
 8014d9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014da0:	4b28      	ldr	r3, [pc, #160]	; (8014e44 <prvInsertBlockIntoFreeList+0xac>)
 8014da2:	60fb      	str	r3, [r7, #12]
 8014da4:	e002      	b.n	8014dac <prvInsertBlockIntoFreeList+0x14>
 8014da6:	68fb      	ldr	r3, [r7, #12]
 8014da8:	681b      	ldr	r3, [r3, #0]
 8014daa:	60fb      	str	r3, [r7, #12]
 8014dac:	68fb      	ldr	r3, [r7, #12]
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	687a      	ldr	r2, [r7, #4]
 8014db2:	429a      	cmp	r2, r3
 8014db4:	d8f7      	bhi.n	8014da6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014db6:	68fb      	ldr	r3, [r7, #12]
 8014db8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8014dba:	68fb      	ldr	r3, [r7, #12]
 8014dbc:	685b      	ldr	r3, [r3, #4]
 8014dbe:	68ba      	ldr	r2, [r7, #8]
 8014dc0:	4413      	add	r3, r2
 8014dc2:	687a      	ldr	r2, [r7, #4]
 8014dc4:	429a      	cmp	r2, r3
 8014dc6:	d108      	bne.n	8014dda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014dc8:	68fb      	ldr	r3, [r7, #12]
 8014dca:	685a      	ldr	r2, [r3, #4]
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	685b      	ldr	r3, [r3, #4]
 8014dd0:	441a      	add	r2, r3
 8014dd2:	68fb      	ldr	r3, [r7, #12]
 8014dd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8014dd6:	68fb      	ldr	r3, [r7, #12]
 8014dd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	685b      	ldr	r3, [r3, #4]
 8014de2:	68ba      	ldr	r2, [r7, #8]
 8014de4:	441a      	add	r2, r3
 8014de6:	68fb      	ldr	r3, [r7, #12]
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	429a      	cmp	r2, r3
 8014dec:	d118      	bne.n	8014e20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8014dee:	68fb      	ldr	r3, [r7, #12]
 8014df0:	681a      	ldr	r2, [r3, #0]
 8014df2:	4b15      	ldr	r3, [pc, #84]	; (8014e48 <prvInsertBlockIntoFreeList+0xb0>)
 8014df4:	681b      	ldr	r3, [r3, #0]
 8014df6:	429a      	cmp	r2, r3
 8014df8:	d00d      	beq.n	8014e16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	685a      	ldr	r2, [r3, #4]
 8014dfe:	68fb      	ldr	r3, [r7, #12]
 8014e00:	681b      	ldr	r3, [r3, #0]
 8014e02:	685b      	ldr	r3, [r3, #4]
 8014e04:	441a      	add	r2, r3
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8014e0a:	68fb      	ldr	r3, [r7, #12]
 8014e0c:	681b      	ldr	r3, [r3, #0]
 8014e0e:	681a      	ldr	r2, [r3, #0]
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	601a      	str	r2, [r3, #0]
 8014e14:	e008      	b.n	8014e28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014e16:	4b0c      	ldr	r3, [pc, #48]	; (8014e48 <prvInsertBlockIntoFreeList+0xb0>)
 8014e18:	681a      	ldr	r2, [r3, #0]
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	601a      	str	r2, [r3, #0]
 8014e1e:	e003      	b.n	8014e28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014e20:	68fb      	ldr	r3, [r7, #12]
 8014e22:	681a      	ldr	r2, [r3, #0]
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014e28:	68fa      	ldr	r2, [r7, #12]
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	429a      	cmp	r2, r3
 8014e2e:	d002      	beq.n	8014e36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014e30:	68fb      	ldr	r3, [r7, #12]
 8014e32:	687a      	ldr	r2, [r7, #4]
 8014e34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014e36:	bf00      	nop
 8014e38:	3714      	adds	r7, #20
 8014e3a:	46bd      	mov	sp, r7
 8014e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e40:	4770      	bx	lr
 8014e42:	bf00      	nop
 8014e44:	20005194 	.word	0x20005194
 8014e48:	2000519c 	.word	0x2000519c

08014e4c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8014e4c:	b580      	push	{r7, lr}
 8014e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8014e50:	2200      	movs	r2, #0
 8014e52:	4912      	ldr	r1, [pc, #72]	; (8014e9c <MX_USB_DEVICE_Init+0x50>)
 8014e54:	4812      	ldr	r0, [pc, #72]	; (8014ea0 <MX_USB_DEVICE_Init+0x54>)
 8014e56:	f7fb fe03 	bl	8010a60 <USBD_Init>
 8014e5a:	4603      	mov	r3, r0
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	d001      	beq.n	8014e64 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8014e60:	f7ee fc86 	bl	8003770 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8014e64:	490f      	ldr	r1, [pc, #60]	; (8014ea4 <MX_USB_DEVICE_Init+0x58>)
 8014e66:	480e      	ldr	r0, [pc, #56]	; (8014ea0 <MX_USB_DEVICE_Init+0x54>)
 8014e68:	f7fb fe25 	bl	8010ab6 <USBD_RegisterClass>
 8014e6c:	4603      	mov	r3, r0
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d001      	beq.n	8014e76 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8014e72:	f7ee fc7d 	bl	8003770 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8014e76:	490c      	ldr	r1, [pc, #48]	; (8014ea8 <MX_USB_DEVICE_Init+0x5c>)
 8014e78:	4809      	ldr	r0, [pc, #36]	; (8014ea0 <MX_USB_DEVICE_Init+0x54>)
 8014e7a:	f7fb fd53 	bl	8010924 <USBD_CDC_RegisterInterface>
 8014e7e:	4603      	mov	r3, r0
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	d001      	beq.n	8014e88 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8014e84:	f7ee fc74 	bl	8003770 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8014e88:	4805      	ldr	r0, [pc, #20]	; (8014ea0 <MX_USB_DEVICE_Init+0x54>)
 8014e8a:	f7fb fe2e 	bl	8010aea <USBD_Start>
 8014e8e:	4603      	mov	r3, r0
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d001      	beq.n	8014e98 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8014e94:	f7ee fc6c 	bl	8003770 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8014e98:	bf00      	nop
 8014e9a:	bd80      	pop	{r7, pc}
 8014e9c:	20000dbc 	.word	0x20000dbc
 8014ea0:	20006184 	.word	0x20006184
 8014ea4:	20000ca4 	.word	0x20000ca4
 8014ea8:	20000dac 	.word	0x20000dac

08014eac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8014eac:	b580      	push	{r7, lr}
 8014eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8014eb0:	2200      	movs	r2, #0
 8014eb2:	4905      	ldr	r1, [pc, #20]	; (8014ec8 <CDC_Init_FS+0x1c>)
 8014eb4:	4805      	ldr	r0, [pc, #20]	; (8014ecc <CDC_Init_FS+0x20>)
 8014eb6:	f7fb fd4c 	bl	8010952 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8014eba:	4905      	ldr	r1, [pc, #20]	; (8014ed0 <CDC_Init_FS+0x24>)
 8014ebc:	4803      	ldr	r0, [pc, #12]	; (8014ecc <CDC_Init_FS+0x20>)
 8014ebe:	f7fb fd62 	bl	8010986 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8014ec2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8014ec4:	4618      	mov	r0, r3
 8014ec6:	bd80      	pop	{r7, pc}
 8014ec8:	20006620 	.word	0x20006620
 8014ecc:	20006184 	.word	0x20006184
 8014ed0:	20006420 	.word	0x20006420

08014ed4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8014ed4:	b480      	push	{r7}
 8014ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8014ed8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8014eda:	4618      	mov	r0, r3
 8014edc:	46bd      	mov	sp, r7
 8014ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ee2:	4770      	bx	lr

08014ee4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8014ee4:	b480      	push	{r7}
 8014ee6:	b083      	sub	sp, #12
 8014ee8:	af00      	add	r7, sp, #0
 8014eea:	4603      	mov	r3, r0
 8014eec:	6039      	str	r1, [r7, #0]
 8014eee:	71fb      	strb	r3, [r7, #7]
 8014ef0:	4613      	mov	r3, r2
 8014ef2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8014ef4:	79fb      	ldrb	r3, [r7, #7]
 8014ef6:	2b23      	cmp	r3, #35	; 0x23
 8014ef8:	f200 808c 	bhi.w	8015014 <CDC_Control_FS+0x130>
 8014efc:	a201      	add	r2, pc, #4	; (adr r2, 8014f04 <CDC_Control_FS+0x20>)
 8014efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f02:	bf00      	nop
 8014f04:	08015015 	.word	0x08015015
 8014f08:	08015015 	.word	0x08015015
 8014f0c:	08015015 	.word	0x08015015
 8014f10:	08015015 	.word	0x08015015
 8014f14:	08015015 	.word	0x08015015
 8014f18:	08015015 	.word	0x08015015
 8014f1c:	08015015 	.word	0x08015015
 8014f20:	08015015 	.word	0x08015015
 8014f24:	08015015 	.word	0x08015015
 8014f28:	08015015 	.word	0x08015015
 8014f2c:	08015015 	.word	0x08015015
 8014f30:	08015015 	.word	0x08015015
 8014f34:	08015015 	.word	0x08015015
 8014f38:	08015015 	.word	0x08015015
 8014f3c:	08015015 	.word	0x08015015
 8014f40:	08015015 	.word	0x08015015
 8014f44:	08015015 	.word	0x08015015
 8014f48:	08015015 	.word	0x08015015
 8014f4c:	08015015 	.word	0x08015015
 8014f50:	08015015 	.word	0x08015015
 8014f54:	08015015 	.word	0x08015015
 8014f58:	08015015 	.word	0x08015015
 8014f5c:	08015015 	.word	0x08015015
 8014f60:	08015015 	.word	0x08015015
 8014f64:	08015015 	.word	0x08015015
 8014f68:	08015015 	.word	0x08015015
 8014f6c:	08015015 	.word	0x08015015
 8014f70:	08015015 	.word	0x08015015
 8014f74:	08015015 	.word	0x08015015
 8014f78:	08015015 	.word	0x08015015
 8014f7c:	08015015 	.word	0x08015015
 8014f80:	08015015 	.word	0x08015015
 8014f84:	08014f95 	.word	0x08014f95
 8014f88:	08014fcf 	.word	0x08014fcf
 8014f8c:	08015015 	.word	0x08015015
 8014f90:	08015015 	.word	0x08015015
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	TempBuf_USB[0]=pbuf[0];
 8014f94:	683b      	ldr	r3, [r7, #0]
 8014f96:	781a      	ldrb	r2, [r3, #0]
 8014f98:	4b22      	ldr	r3, [pc, #136]	; (8015024 <CDC_Control_FS+0x140>)
 8014f9a:	701a      	strb	r2, [r3, #0]
    	TempBuf_USB[1]=pbuf[1];
 8014f9c:	683b      	ldr	r3, [r7, #0]
 8014f9e:	785a      	ldrb	r2, [r3, #1]
 8014fa0:	4b20      	ldr	r3, [pc, #128]	; (8015024 <CDC_Control_FS+0x140>)
 8014fa2:	705a      	strb	r2, [r3, #1]
    	TempBuf_USB[2]=pbuf[2];
 8014fa4:	683b      	ldr	r3, [r7, #0]
 8014fa6:	789a      	ldrb	r2, [r3, #2]
 8014fa8:	4b1e      	ldr	r3, [pc, #120]	; (8015024 <CDC_Control_FS+0x140>)
 8014faa:	709a      	strb	r2, [r3, #2]
    	TempBuf_USB[3]=pbuf[3];
 8014fac:	683b      	ldr	r3, [r7, #0]
 8014fae:	78da      	ldrb	r2, [r3, #3]
 8014fb0:	4b1c      	ldr	r3, [pc, #112]	; (8015024 <CDC_Control_FS+0x140>)
 8014fb2:	70da      	strb	r2, [r3, #3]
    	TempBuf_USB[4]=pbuf[4];
 8014fb4:	683b      	ldr	r3, [r7, #0]
 8014fb6:	791a      	ldrb	r2, [r3, #4]
 8014fb8:	4b1a      	ldr	r3, [pc, #104]	; (8015024 <CDC_Control_FS+0x140>)
 8014fba:	711a      	strb	r2, [r3, #4]
    	TempBuf_USB[5]=pbuf[5];
 8014fbc:	683b      	ldr	r3, [r7, #0]
 8014fbe:	795a      	ldrb	r2, [r3, #5]
 8014fc0:	4b18      	ldr	r3, [pc, #96]	; (8015024 <CDC_Control_FS+0x140>)
 8014fc2:	715a      	strb	r2, [r3, #5]
    	TempBuf_USB[6]=pbuf[6];
 8014fc4:	683b      	ldr	r3, [r7, #0]
 8014fc6:	799a      	ldrb	r2, [r3, #6]
 8014fc8:	4b16      	ldr	r3, [pc, #88]	; (8015024 <CDC_Control_FS+0x140>)
 8014fca:	719a      	strb	r2, [r3, #6]
    	break;
 8014fcc:	e023      	b.n	8015016 <CDC_Control_FS+0x132>


    case CDC_GET_LINE_CODING:
        pbuf[0]=TempBuf_USB[0];
 8014fce:	4b15      	ldr	r3, [pc, #84]	; (8015024 <CDC_Control_FS+0x140>)
 8014fd0:	781a      	ldrb	r2, [r3, #0]
 8014fd2:	683b      	ldr	r3, [r7, #0]
 8014fd4:	701a      	strb	r2, [r3, #0]
        pbuf[1]=TempBuf_USB[1];
 8014fd6:	683b      	ldr	r3, [r7, #0]
 8014fd8:	3301      	adds	r3, #1
 8014fda:	4a12      	ldr	r2, [pc, #72]	; (8015024 <CDC_Control_FS+0x140>)
 8014fdc:	7852      	ldrb	r2, [r2, #1]
 8014fde:	701a      	strb	r2, [r3, #0]
        pbuf[2]=TempBuf_USB[2];
 8014fe0:	683b      	ldr	r3, [r7, #0]
 8014fe2:	3302      	adds	r3, #2
 8014fe4:	4a0f      	ldr	r2, [pc, #60]	; (8015024 <CDC_Control_FS+0x140>)
 8014fe6:	7892      	ldrb	r2, [r2, #2]
 8014fe8:	701a      	strb	r2, [r3, #0]
        pbuf[3]=TempBuf_USB[3];
 8014fea:	683b      	ldr	r3, [r7, #0]
 8014fec:	3303      	adds	r3, #3
 8014fee:	4a0d      	ldr	r2, [pc, #52]	; (8015024 <CDC_Control_FS+0x140>)
 8014ff0:	78d2      	ldrb	r2, [r2, #3]
 8014ff2:	701a      	strb	r2, [r3, #0]
        pbuf[4]=TempBuf_USB[4];
 8014ff4:	683b      	ldr	r3, [r7, #0]
 8014ff6:	3304      	adds	r3, #4
 8014ff8:	4a0a      	ldr	r2, [pc, #40]	; (8015024 <CDC_Control_FS+0x140>)
 8014ffa:	7912      	ldrb	r2, [r2, #4]
 8014ffc:	701a      	strb	r2, [r3, #0]
        pbuf[5]=TempBuf_USB[5];
 8014ffe:	683b      	ldr	r3, [r7, #0]
 8015000:	3305      	adds	r3, #5
 8015002:	4a08      	ldr	r2, [pc, #32]	; (8015024 <CDC_Control_FS+0x140>)
 8015004:	7952      	ldrb	r2, [r2, #5]
 8015006:	701a      	strb	r2, [r3, #0]
        pbuf[6]=TempBuf_USB[6];
 8015008:	683b      	ldr	r3, [r7, #0]
 801500a:	3306      	adds	r3, #6
 801500c:	4a05      	ldr	r2, [pc, #20]	; (8015024 <CDC_Control_FS+0x140>)
 801500e:	7992      	ldrb	r2, [r2, #6]
 8015010:	701a      	strb	r2, [r3, #0]
    break;
 8015012:	e000      	b.n	8015016 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8015014:	bf00      	nop
  }

  return (USBD_OK);
 8015016:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8015018:	4618      	mov	r0, r3
 801501a:	370c      	adds	r7, #12
 801501c:	46bd      	mov	sp, r7
 801501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015022:	4770      	bx	lr
 8015024:	20006820 	.word	0x20006820

08015028 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8015028:	b580      	push	{r7, lr}
 801502a:	b082      	sub	sp, #8
 801502c:	af00      	add	r7, sp, #0
 801502e:	6078      	str	r0, [r7, #4]
 8015030:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	ringBuff_PushArray(&usb_rx_ringbuff, Buf, (uint16_t)*Len);
 8015032:	683b      	ldr	r3, [r7, #0]
 8015034:	681b      	ldr	r3, [r3, #0]
 8015036:	b29b      	uxth	r3, r3
 8015038:	461a      	mov	r2, r3
 801503a:	6879      	ldr	r1, [r7, #4]
 801503c:	4807      	ldr	r0, [pc, #28]	; (801505c <CDC_Receive_FS+0x34>)
 801503e:	f7ee fc0e 	bl	800385e <ringBuff_PushArray>
//	if ( END_CHAR == Buf[*Len - 1]) {
//		osSignalSet(USB_RX_Check_Handle, 0x01);
//	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8015042:	6879      	ldr	r1, [r7, #4]
 8015044:	4806      	ldr	r0, [pc, #24]	; (8015060 <CDC_Receive_FS+0x38>)
 8015046:	f7fb fc9e 	bl	8010986 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801504a:	4805      	ldr	r0, [pc, #20]	; (8015060 <CDC_Receive_FS+0x38>)
 801504c:	f7fb fcde 	bl	8010a0c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8015050:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8015052:	4618      	mov	r0, r3
 8015054:	3708      	adds	r7, #8
 8015056:	46bd      	mov	sp, r7
 8015058:	bd80      	pop	{r7, pc}
 801505a:	bf00      	nop
 801505c:	20000028 	.word	0x20000028
 8015060:	20006184 	.word	0x20006184

08015064 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8015064:	b580      	push	{r7, lr}
 8015066:	b084      	sub	sp, #16
 8015068:	af00      	add	r7, sp, #0
 801506a:	6078      	str	r0, [r7, #4]
 801506c:	460b      	mov	r3, r1
 801506e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8015070:	2300      	movs	r3, #0
 8015072:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8015074:	4b0d      	ldr	r3, [pc, #52]	; (80150ac <CDC_Transmit_FS+0x48>)
 8015076:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 801507a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801507c:	68bb      	ldr	r3, [r7, #8]
 801507e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015082:	2b00      	cmp	r3, #0
 8015084:	d001      	beq.n	801508a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8015086:	2301      	movs	r3, #1
 8015088:	e00b      	b.n	80150a2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801508a:	887b      	ldrh	r3, [r7, #2]
 801508c:	461a      	mov	r2, r3
 801508e:	6879      	ldr	r1, [r7, #4]
 8015090:	4806      	ldr	r0, [pc, #24]	; (80150ac <CDC_Transmit_FS+0x48>)
 8015092:	f7fb fc5e 	bl	8010952 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8015096:	4805      	ldr	r0, [pc, #20]	; (80150ac <CDC_Transmit_FS+0x48>)
 8015098:	f7fb fc89 	bl	80109ae <USBD_CDC_TransmitPacket>
 801509c:	4603      	mov	r3, r0
 801509e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80150a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80150a2:	4618      	mov	r0, r3
 80150a4:	3710      	adds	r7, #16
 80150a6:	46bd      	mov	sp, r7
 80150a8:	bd80      	pop	{r7, pc}
 80150aa:	bf00      	nop
 80150ac:	20006184 	.word	0x20006184

080150b0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80150b0:	b480      	push	{r7}
 80150b2:	b083      	sub	sp, #12
 80150b4:	af00      	add	r7, sp, #0
 80150b6:	4603      	mov	r3, r0
 80150b8:	6039      	str	r1, [r7, #0]
 80150ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80150bc:	683b      	ldr	r3, [r7, #0]
 80150be:	2212      	movs	r2, #18
 80150c0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80150c2:	4b03      	ldr	r3, [pc, #12]	; (80150d0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80150c4:	4618      	mov	r0, r3
 80150c6:	370c      	adds	r7, #12
 80150c8:	46bd      	mov	sp, r7
 80150ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ce:	4770      	bx	lr
 80150d0:	20000dd8 	.word	0x20000dd8

080150d4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80150d4:	b480      	push	{r7}
 80150d6:	b083      	sub	sp, #12
 80150d8:	af00      	add	r7, sp, #0
 80150da:	4603      	mov	r3, r0
 80150dc:	6039      	str	r1, [r7, #0]
 80150de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80150e0:	683b      	ldr	r3, [r7, #0]
 80150e2:	2204      	movs	r2, #4
 80150e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80150e6:	4b03      	ldr	r3, [pc, #12]	; (80150f4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80150e8:	4618      	mov	r0, r3
 80150ea:	370c      	adds	r7, #12
 80150ec:	46bd      	mov	sp, r7
 80150ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150f2:	4770      	bx	lr
 80150f4:	20000dec 	.word	0x20000dec

080150f8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80150f8:	b580      	push	{r7, lr}
 80150fa:	b082      	sub	sp, #8
 80150fc:	af00      	add	r7, sp, #0
 80150fe:	4603      	mov	r3, r0
 8015100:	6039      	str	r1, [r7, #0]
 8015102:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015104:	79fb      	ldrb	r3, [r7, #7]
 8015106:	2b00      	cmp	r3, #0
 8015108:	d105      	bne.n	8015116 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801510a:	683a      	ldr	r2, [r7, #0]
 801510c:	4907      	ldr	r1, [pc, #28]	; (801512c <USBD_FS_ProductStrDescriptor+0x34>)
 801510e:	4808      	ldr	r0, [pc, #32]	; (8015130 <USBD_FS_ProductStrDescriptor+0x38>)
 8015110:	f7fc fc22 	bl	8011958 <USBD_GetString>
 8015114:	e004      	b.n	8015120 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015116:	683a      	ldr	r2, [r7, #0]
 8015118:	4904      	ldr	r1, [pc, #16]	; (801512c <USBD_FS_ProductStrDescriptor+0x34>)
 801511a:	4805      	ldr	r0, [pc, #20]	; (8015130 <USBD_FS_ProductStrDescriptor+0x38>)
 801511c:	f7fc fc1c 	bl	8011958 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015120:	4b02      	ldr	r3, [pc, #8]	; (801512c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8015122:	4618      	mov	r0, r3
 8015124:	3708      	adds	r7, #8
 8015126:	46bd      	mov	sp, r7
 8015128:	bd80      	pop	{r7, pc}
 801512a:	bf00      	nop
 801512c:	20006828 	.word	0x20006828
 8015130:	0801b298 	.word	0x0801b298

08015134 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015134:	b580      	push	{r7, lr}
 8015136:	b082      	sub	sp, #8
 8015138:	af00      	add	r7, sp, #0
 801513a:	4603      	mov	r3, r0
 801513c:	6039      	str	r1, [r7, #0]
 801513e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015140:	683a      	ldr	r2, [r7, #0]
 8015142:	4904      	ldr	r1, [pc, #16]	; (8015154 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8015144:	4804      	ldr	r0, [pc, #16]	; (8015158 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8015146:	f7fc fc07 	bl	8011958 <USBD_GetString>
  return USBD_StrDesc;
 801514a:	4b02      	ldr	r3, [pc, #8]	; (8015154 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801514c:	4618      	mov	r0, r3
 801514e:	3708      	adds	r7, #8
 8015150:	46bd      	mov	sp, r7
 8015152:	bd80      	pop	{r7, pc}
 8015154:	20006828 	.word	0x20006828
 8015158:	0801b2b0 	.word	0x0801b2b0

0801515c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801515c:	b580      	push	{r7, lr}
 801515e:	b082      	sub	sp, #8
 8015160:	af00      	add	r7, sp, #0
 8015162:	4603      	mov	r3, r0
 8015164:	6039      	str	r1, [r7, #0]
 8015166:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015168:	683b      	ldr	r3, [r7, #0]
 801516a:	221a      	movs	r2, #26
 801516c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801516e:	f000 f843 	bl	80151f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8015172:	4b02      	ldr	r3, [pc, #8]	; (801517c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8015174:	4618      	mov	r0, r3
 8015176:	3708      	adds	r7, #8
 8015178:	46bd      	mov	sp, r7
 801517a:	bd80      	pop	{r7, pc}
 801517c:	20000df0 	.word	0x20000df0

08015180 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015180:	b580      	push	{r7, lr}
 8015182:	b082      	sub	sp, #8
 8015184:	af00      	add	r7, sp, #0
 8015186:	4603      	mov	r3, r0
 8015188:	6039      	str	r1, [r7, #0]
 801518a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801518c:	79fb      	ldrb	r3, [r7, #7]
 801518e:	2b00      	cmp	r3, #0
 8015190:	d105      	bne.n	801519e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015192:	683a      	ldr	r2, [r7, #0]
 8015194:	4907      	ldr	r1, [pc, #28]	; (80151b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015196:	4808      	ldr	r0, [pc, #32]	; (80151b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015198:	f7fc fbde 	bl	8011958 <USBD_GetString>
 801519c:	e004      	b.n	80151a8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801519e:	683a      	ldr	r2, [r7, #0]
 80151a0:	4904      	ldr	r1, [pc, #16]	; (80151b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80151a2:	4805      	ldr	r0, [pc, #20]	; (80151b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80151a4:	f7fc fbd8 	bl	8011958 <USBD_GetString>
  }
  return USBD_StrDesc;
 80151a8:	4b02      	ldr	r3, [pc, #8]	; (80151b4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80151aa:	4618      	mov	r0, r3
 80151ac:	3708      	adds	r7, #8
 80151ae:	46bd      	mov	sp, r7
 80151b0:	bd80      	pop	{r7, pc}
 80151b2:	bf00      	nop
 80151b4:	20006828 	.word	0x20006828
 80151b8:	0801b2c4 	.word	0x0801b2c4

080151bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80151bc:	b580      	push	{r7, lr}
 80151be:	b082      	sub	sp, #8
 80151c0:	af00      	add	r7, sp, #0
 80151c2:	4603      	mov	r3, r0
 80151c4:	6039      	str	r1, [r7, #0]
 80151c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80151c8:	79fb      	ldrb	r3, [r7, #7]
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	d105      	bne.n	80151da <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80151ce:	683a      	ldr	r2, [r7, #0]
 80151d0:	4907      	ldr	r1, [pc, #28]	; (80151f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80151d2:	4808      	ldr	r0, [pc, #32]	; (80151f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80151d4:	f7fc fbc0 	bl	8011958 <USBD_GetString>
 80151d8:	e004      	b.n	80151e4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80151da:	683a      	ldr	r2, [r7, #0]
 80151dc:	4904      	ldr	r1, [pc, #16]	; (80151f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80151de:	4805      	ldr	r0, [pc, #20]	; (80151f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80151e0:	f7fc fbba 	bl	8011958 <USBD_GetString>
  }
  return USBD_StrDesc;
 80151e4:	4b02      	ldr	r3, [pc, #8]	; (80151f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80151e6:	4618      	mov	r0, r3
 80151e8:	3708      	adds	r7, #8
 80151ea:	46bd      	mov	sp, r7
 80151ec:	bd80      	pop	{r7, pc}
 80151ee:	bf00      	nop
 80151f0:	20006828 	.word	0x20006828
 80151f4:	0801b2d0 	.word	0x0801b2d0

080151f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80151f8:	b580      	push	{r7, lr}
 80151fa:	b084      	sub	sp, #16
 80151fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80151fe:	4b0f      	ldr	r3, [pc, #60]	; (801523c <Get_SerialNum+0x44>)
 8015200:	681b      	ldr	r3, [r3, #0]
 8015202:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015204:	4b0e      	ldr	r3, [pc, #56]	; (8015240 <Get_SerialNum+0x48>)
 8015206:	681b      	ldr	r3, [r3, #0]
 8015208:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801520a:	4b0e      	ldr	r3, [pc, #56]	; (8015244 <Get_SerialNum+0x4c>)
 801520c:	681b      	ldr	r3, [r3, #0]
 801520e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015210:	68fa      	ldr	r2, [r7, #12]
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	4413      	add	r3, r2
 8015216:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015218:	68fb      	ldr	r3, [r7, #12]
 801521a:	2b00      	cmp	r3, #0
 801521c:	d009      	beq.n	8015232 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801521e:	2208      	movs	r2, #8
 8015220:	4909      	ldr	r1, [pc, #36]	; (8015248 <Get_SerialNum+0x50>)
 8015222:	68f8      	ldr	r0, [r7, #12]
 8015224:	f000 f814 	bl	8015250 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015228:	2204      	movs	r2, #4
 801522a:	4908      	ldr	r1, [pc, #32]	; (801524c <Get_SerialNum+0x54>)
 801522c:	68b8      	ldr	r0, [r7, #8]
 801522e:	f000 f80f 	bl	8015250 <IntToUnicode>
  }
}
 8015232:	bf00      	nop
 8015234:	3710      	adds	r7, #16
 8015236:	46bd      	mov	sp, r7
 8015238:	bd80      	pop	{r7, pc}
 801523a:	bf00      	nop
 801523c:	1fff7a10 	.word	0x1fff7a10
 8015240:	1fff7a14 	.word	0x1fff7a14
 8015244:	1fff7a18 	.word	0x1fff7a18
 8015248:	20000df2 	.word	0x20000df2
 801524c:	20000e02 	.word	0x20000e02

08015250 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015250:	b480      	push	{r7}
 8015252:	b087      	sub	sp, #28
 8015254:	af00      	add	r7, sp, #0
 8015256:	60f8      	str	r0, [r7, #12]
 8015258:	60b9      	str	r1, [r7, #8]
 801525a:	4613      	mov	r3, r2
 801525c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801525e:	2300      	movs	r3, #0
 8015260:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8015262:	2300      	movs	r3, #0
 8015264:	75fb      	strb	r3, [r7, #23]
 8015266:	e027      	b.n	80152b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015268:	68fb      	ldr	r3, [r7, #12]
 801526a:	0f1b      	lsrs	r3, r3, #28
 801526c:	2b09      	cmp	r3, #9
 801526e:	d80b      	bhi.n	8015288 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015270:	68fb      	ldr	r3, [r7, #12]
 8015272:	0f1b      	lsrs	r3, r3, #28
 8015274:	b2da      	uxtb	r2, r3
 8015276:	7dfb      	ldrb	r3, [r7, #23]
 8015278:	005b      	lsls	r3, r3, #1
 801527a:	4619      	mov	r1, r3
 801527c:	68bb      	ldr	r3, [r7, #8]
 801527e:	440b      	add	r3, r1
 8015280:	3230      	adds	r2, #48	; 0x30
 8015282:	b2d2      	uxtb	r2, r2
 8015284:	701a      	strb	r2, [r3, #0]
 8015286:	e00a      	b.n	801529e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015288:	68fb      	ldr	r3, [r7, #12]
 801528a:	0f1b      	lsrs	r3, r3, #28
 801528c:	b2da      	uxtb	r2, r3
 801528e:	7dfb      	ldrb	r3, [r7, #23]
 8015290:	005b      	lsls	r3, r3, #1
 8015292:	4619      	mov	r1, r3
 8015294:	68bb      	ldr	r3, [r7, #8]
 8015296:	440b      	add	r3, r1
 8015298:	3237      	adds	r2, #55	; 0x37
 801529a:	b2d2      	uxtb	r2, r2
 801529c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801529e:	68fb      	ldr	r3, [r7, #12]
 80152a0:	011b      	lsls	r3, r3, #4
 80152a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80152a4:	7dfb      	ldrb	r3, [r7, #23]
 80152a6:	005b      	lsls	r3, r3, #1
 80152a8:	3301      	adds	r3, #1
 80152aa:	68ba      	ldr	r2, [r7, #8]
 80152ac:	4413      	add	r3, r2
 80152ae:	2200      	movs	r2, #0
 80152b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80152b2:	7dfb      	ldrb	r3, [r7, #23]
 80152b4:	3301      	adds	r3, #1
 80152b6:	75fb      	strb	r3, [r7, #23]
 80152b8:	7dfa      	ldrb	r2, [r7, #23]
 80152ba:	79fb      	ldrb	r3, [r7, #7]
 80152bc:	429a      	cmp	r2, r3
 80152be:	d3d3      	bcc.n	8015268 <IntToUnicode+0x18>
  }
}
 80152c0:	bf00      	nop
 80152c2:	371c      	adds	r7, #28
 80152c4:	46bd      	mov	sp, r7
 80152c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152ca:	4770      	bx	lr

080152cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80152cc:	b580      	push	{r7, lr}
 80152ce:	b08a      	sub	sp, #40	; 0x28
 80152d0:	af00      	add	r7, sp, #0
 80152d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80152d4:	f107 0314 	add.w	r3, r7, #20
 80152d8:	2200      	movs	r2, #0
 80152da:	601a      	str	r2, [r3, #0]
 80152dc:	605a      	str	r2, [r3, #4]
 80152de:	609a      	str	r2, [r3, #8]
 80152e0:	60da      	str	r2, [r3, #12]
 80152e2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	681b      	ldr	r3, [r3, #0]
 80152e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80152ec:	d13a      	bne.n	8015364 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80152ee:	2300      	movs	r3, #0
 80152f0:	613b      	str	r3, [r7, #16]
 80152f2:	4b1e      	ldr	r3, [pc, #120]	; (801536c <HAL_PCD_MspInit+0xa0>)
 80152f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80152f6:	4a1d      	ldr	r2, [pc, #116]	; (801536c <HAL_PCD_MspInit+0xa0>)
 80152f8:	f043 0301 	orr.w	r3, r3, #1
 80152fc:	6313      	str	r3, [r2, #48]	; 0x30
 80152fe:	4b1b      	ldr	r3, [pc, #108]	; (801536c <HAL_PCD_MspInit+0xa0>)
 8015300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015302:	f003 0301 	and.w	r3, r3, #1
 8015306:	613b      	str	r3, [r7, #16]
 8015308:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801530a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801530e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015310:	2302      	movs	r3, #2
 8015312:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015314:	2300      	movs	r3, #0
 8015316:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015318:	2303      	movs	r3, #3
 801531a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801531c:	230a      	movs	r3, #10
 801531e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015320:	f107 0314 	add.w	r3, r7, #20
 8015324:	4619      	mov	r1, r3
 8015326:	4812      	ldr	r0, [pc, #72]	; (8015370 <HAL_PCD_MspInit+0xa4>)
 8015328:	f7f6 fb34 	bl	800b994 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801532c:	4b0f      	ldr	r3, [pc, #60]	; (801536c <HAL_PCD_MspInit+0xa0>)
 801532e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015330:	4a0e      	ldr	r2, [pc, #56]	; (801536c <HAL_PCD_MspInit+0xa0>)
 8015332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015336:	6353      	str	r3, [r2, #52]	; 0x34
 8015338:	2300      	movs	r3, #0
 801533a:	60fb      	str	r3, [r7, #12]
 801533c:	4b0b      	ldr	r3, [pc, #44]	; (801536c <HAL_PCD_MspInit+0xa0>)
 801533e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015340:	4a0a      	ldr	r2, [pc, #40]	; (801536c <HAL_PCD_MspInit+0xa0>)
 8015342:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015346:	6453      	str	r3, [r2, #68]	; 0x44
 8015348:	4b08      	ldr	r3, [pc, #32]	; (801536c <HAL_PCD_MspInit+0xa0>)
 801534a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801534c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015350:	60fb      	str	r3, [r7, #12]
 8015352:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8015354:	2200      	movs	r2, #0
 8015356:	2105      	movs	r1, #5
 8015358:	2043      	movs	r0, #67	; 0x43
 801535a:	f7f5 ff53 	bl	800b204 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801535e:	2043      	movs	r0, #67	; 0x43
 8015360:	f7f5 ff6c 	bl	800b23c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015364:	bf00      	nop
 8015366:	3728      	adds	r7, #40	; 0x28
 8015368:	46bd      	mov	sp, r7
 801536a:	bd80      	pop	{r7, pc}
 801536c:	40023800 	.word	0x40023800
 8015370:	40020000 	.word	0x40020000

08015374 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015374:	b580      	push	{r7, lr}
 8015376:	b082      	sub	sp, #8
 8015378:	af00      	add	r7, sp, #0
 801537a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8015388:	4619      	mov	r1, r3
 801538a:	4610      	mov	r0, r2
 801538c:	f7fb fbf6 	bl	8010b7c <USBD_LL_SetupStage>
}
 8015390:	bf00      	nop
 8015392:	3708      	adds	r7, #8
 8015394:	46bd      	mov	sp, r7
 8015396:	bd80      	pop	{r7, pc}

08015398 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015398:	b580      	push	{r7, lr}
 801539a:	b082      	sub	sp, #8
 801539c:	af00      	add	r7, sp, #0
 801539e:	6078      	str	r0, [r7, #4]
 80153a0:	460b      	mov	r3, r1
 80153a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80153aa:	78fa      	ldrb	r2, [r7, #3]
 80153ac:	6879      	ldr	r1, [r7, #4]
 80153ae:	4613      	mov	r3, r2
 80153b0:	00db      	lsls	r3, r3, #3
 80153b2:	1a9b      	subs	r3, r3, r2
 80153b4:	009b      	lsls	r3, r3, #2
 80153b6:	440b      	add	r3, r1
 80153b8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80153bc:	681a      	ldr	r2, [r3, #0]
 80153be:	78fb      	ldrb	r3, [r7, #3]
 80153c0:	4619      	mov	r1, r3
 80153c2:	f7fb fc26 	bl	8010c12 <USBD_LL_DataOutStage>
}
 80153c6:	bf00      	nop
 80153c8:	3708      	adds	r7, #8
 80153ca:	46bd      	mov	sp, r7
 80153cc:	bd80      	pop	{r7, pc}

080153ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80153ce:	b580      	push	{r7, lr}
 80153d0:	b082      	sub	sp, #8
 80153d2:	af00      	add	r7, sp, #0
 80153d4:	6078      	str	r0, [r7, #4]
 80153d6:	460b      	mov	r3, r1
 80153d8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80153e0:	78fa      	ldrb	r2, [r7, #3]
 80153e2:	6879      	ldr	r1, [r7, #4]
 80153e4:	4613      	mov	r3, r2
 80153e6:	00db      	lsls	r3, r3, #3
 80153e8:	1a9b      	subs	r3, r3, r2
 80153ea:	009b      	lsls	r3, r3, #2
 80153ec:	440b      	add	r3, r1
 80153ee:	3348      	adds	r3, #72	; 0x48
 80153f0:	681a      	ldr	r2, [r3, #0]
 80153f2:	78fb      	ldrb	r3, [r7, #3]
 80153f4:	4619      	mov	r1, r3
 80153f6:	f7fb fc7d 	bl	8010cf4 <USBD_LL_DataInStage>
}
 80153fa:	bf00      	nop
 80153fc:	3708      	adds	r7, #8
 80153fe:	46bd      	mov	sp, r7
 8015400:	bd80      	pop	{r7, pc}

08015402 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015402:	b580      	push	{r7, lr}
 8015404:	b082      	sub	sp, #8
 8015406:	af00      	add	r7, sp, #0
 8015408:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015410:	4618      	mov	r0, r3
 8015412:	f7fb fd8b 	bl	8010f2c <USBD_LL_SOF>
}
 8015416:	bf00      	nop
 8015418:	3708      	adds	r7, #8
 801541a:	46bd      	mov	sp, r7
 801541c:	bd80      	pop	{r7, pc}

0801541e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 801541e:	b580      	push	{r7, lr}
 8015420:	b084      	sub	sp, #16
 8015422:	af00      	add	r7, sp, #0
 8015424:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015426:	2301      	movs	r3, #1
 8015428:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	68db      	ldr	r3, [r3, #12]
 801542e:	2b00      	cmp	r3, #0
 8015430:	d102      	bne.n	8015438 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8015432:	2300      	movs	r3, #0
 8015434:	73fb      	strb	r3, [r7, #15]
 8015436:	e008      	b.n	801544a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	68db      	ldr	r3, [r3, #12]
 801543c:	2b02      	cmp	r3, #2
 801543e:	d102      	bne.n	8015446 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8015440:	2301      	movs	r3, #1
 8015442:	73fb      	strb	r3, [r7, #15]
 8015444:	e001      	b.n	801544a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8015446:	f7ee f993 	bl	8003770 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015450:	7bfa      	ldrb	r2, [r7, #15]
 8015452:	4611      	mov	r1, r2
 8015454:	4618      	mov	r0, r3
 8015456:	f7fb fd33 	bl	8010ec0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015460:	4618      	mov	r0, r3
 8015462:	f7fb fcec 	bl	8010e3e <USBD_LL_Reset>
}
 8015466:	bf00      	nop
 8015468:	3710      	adds	r7, #16
 801546a:	46bd      	mov	sp, r7
 801546c:	bd80      	pop	{r7, pc}
	...

08015470 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015470:	b580      	push	{r7, lr}
 8015472:	b082      	sub	sp, #8
 8015474:	af00      	add	r7, sp, #0
 8015476:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801547e:	4618      	mov	r0, r3
 8015480:	f7fb fd2e 	bl	8010ee0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	681b      	ldr	r3, [r3, #0]
 8015488:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801548c:	681b      	ldr	r3, [r3, #0]
 801548e:	687a      	ldr	r2, [r7, #4]
 8015490:	6812      	ldr	r2, [r2, #0]
 8015492:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015496:	f043 0301 	orr.w	r3, r3, #1
 801549a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	6a1b      	ldr	r3, [r3, #32]
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	d005      	beq.n	80154b0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80154a4:	4b04      	ldr	r3, [pc, #16]	; (80154b8 <HAL_PCD_SuspendCallback+0x48>)
 80154a6:	691b      	ldr	r3, [r3, #16]
 80154a8:	4a03      	ldr	r2, [pc, #12]	; (80154b8 <HAL_PCD_SuspendCallback+0x48>)
 80154aa:	f043 0306 	orr.w	r3, r3, #6
 80154ae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80154b0:	bf00      	nop
 80154b2:	3708      	adds	r7, #8
 80154b4:	46bd      	mov	sp, r7
 80154b6:	bd80      	pop	{r7, pc}
 80154b8:	e000ed00 	.word	0xe000ed00

080154bc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80154bc:	b580      	push	{r7, lr}
 80154be:	b082      	sub	sp, #8
 80154c0:	af00      	add	r7, sp, #0
 80154c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80154ca:	4618      	mov	r0, r3
 80154cc:	f7fb fd1d 	bl	8010f0a <USBD_LL_Resume>
}
 80154d0:	bf00      	nop
 80154d2:	3708      	adds	r7, #8
 80154d4:	46bd      	mov	sp, r7
 80154d6:	bd80      	pop	{r7, pc}

080154d8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80154d8:	b580      	push	{r7, lr}
 80154da:	b082      	sub	sp, #8
 80154dc:	af00      	add	r7, sp, #0
 80154de:	6078      	str	r0, [r7, #4]
 80154e0:	460b      	mov	r3, r1
 80154e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80154ea:	78fa      	ldrb	r2, [r7, #3]
 80154ec:	4611      	mov	r1, r2
 80154ee:	4618      	mov	r0, r3
 80154f0:	f7fb fd43 	bl	8010f7a <USBD_LL_IsoOUTIncomplete>
}
 80154f4:	bf00      	nop
 80154f6:	3708      	adds	r7, #8
 80154f8:	46bd      	mov	sp, r7
 80154fa:	bd80      	pop	{r7, pc}

080154fc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80154fc:	b580      	push	{r7, lr}
 80154fe:	b082      	sub	sp, #8
 8015500:	af00      	add	r7, sp, #0
 8015502:	6078      	str	r0, [r7, #4]
 8015504:	460b      	mov	r3, r1
 8015506:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801550e:	78fa      	ldrb	r2, [r7, #3]
 8015510:	4611      	mov	r1, r2
 8015512:	4618      	mov	r0, r3
 8015514:	f7fb fd24 	bl	8010f60 <USBD_LL_IsoINIncomplete>
}
 8015518:	bf00      	nop
 801551a:	3708      	adds	r7, #8
 801551c:	46bd      	mov	sp, r7
 801551e:	bd80      	pop	{r7, pc}

08015520 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015520:	b580      	push	{r7, lr}
 8015522:	b082      	sub	sp, #8
 8015524:	af00      	add	r7, sp, #0
 8015526:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801552e:	4618      	mov	r0, r3
 8015530:	f7fb fd30 	bl	8010f94 <USBD_LL_DevConnected>
}
 8015534:	bf00      	nop
 8015536:	3708      	adds	r7, #8
 8015538:	46bd      	mov	sp, r7
 801553a:	bd80      	pop	{r7, pc}

0801553c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801553c:	b580      	push	{r7, lr}
 801553e:	b082      	sub	sp, #8
 8015540:	af00      	add	r7, sp, #0
 8015542:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801554a:	4618      	mov	r0, r3
 801554c:	f7fb fd2d 	bl	8010faa <USBD_LL_DevDisconnected>
}
 8015550:	bf00      	nop
 8015552:	3708      	adds	r7, #8
 8015554:	46bd      	mov	sp, r7
 8015556:	bd80      	pop	{r7, pc}

08015558 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015558:	b580      	push	{r7, lr}
 801555a:	b082      	sub	sp, #8
 801555c:	af00      	add	r7, sp, #0
 801555e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	781b      	ldrb	r3, [r3, #0]
 8015564:	2b00      	cmp	r3, #0
 8015566:	d13c      	bne.n	80155e2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8015568:	4a20      	ldr	r2, [pc, #128]	; (80155ec <USBD_LL_Init+0x94>)
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	4a1e      	ldr	r2, [pc, #120]	; (80155ec <USBD_LL_Init+0x94>)
 8015574:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8015578:	4b1c      	ldr	r3, [pc, #112]	; (80155ec <USBD_LL_Init+0x94>)
 801557a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801557e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8015580:	4b1a      	ldr	r3, [pc, #104]	; (80155ec <USBD_LL_Init+0x94>)
 8015582:	2204      	movs	r2, #4
 8015584:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8015586:	4b19      	ldr	r3, [pc, #100]	; (80155ec <USBD_LL_Init+0x94>)
 8015588:	2202      	movs	r2, #2
 801558a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801558c:	4b17      	ldr	r3, [pc, #92]	; (80155ec <USBD_LL_Init+0x94>)
 801558e:	2200      	movs	r2, #0
 8015590:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8015592:	4b16      	ldr	r3, [pc, #88]	; (80155ec <USBD_LL_Init+0x94>)
 8015594:	2202      	movs	r2, #2
 8015596:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8015598:	4b14      	ldr	r3, [pc, #80]	; (80155ec <USBD_LL_Init+0x94>)
 801559a:	2200      	movs	r2, #0
 801559c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801559e:	4b13      	ldr	r3, [pc, #76]	; (80155ec <USBD_LL_Init+0x94>)
 80155a0:	2200      	movs	r2, #0
 80155a2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80155a4:	4b11      	ldr	r3, [pc, #68]	; (80155ec <USBD_LL_Init+0x94>)
 80155a6:	2200      	movs	r2, #0
 80155a8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80155aa:	4b10      	ldr	r3, [pc, #64]	; (80155ec <USBD_LL_Init+0x94>)
 80155ac:	2200      	movs	r2, #0
 80155ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80155b0:	4b0e      	ldr	r3, [pc, #56]	; (80155ec <USBD_LL_Init+0x94>)
 80155b2:	2200      	movs	r2, #0
 80155b4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80155b6:	480d      	ldr	r0, [pc, #52]	; (80155ec <USBD_LL_Init+0x94>)
 80155b8:	f7f6 fbf6 	bl	800bda8 <HAL_PCD_Init>
 80155bc:	4603      	mov	r3, r0
 80155be:	2b00      	cmp	r3, #0
 80155c0:	d001      	beq.n	80155c6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80155c2:	f7ee f8d5 	bl	8003770 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80155c6:	2180      	movs	r1, #128	; 0x80
 80155c8:	4808      	ldr	r0, [pc, #32]	; (80155ec <USBD_LL_Init+0x94>)
 80155ca:	f7f7 fd5a 	bl	800d082 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80155ce:	2240      	movs	r2, #64	; 0x40
 80155d0:	2100      	movs	r1, #0
 80155d2:	4806      	ldr	r0, [pc, #24]	; (80155ec <USBD_LL_Init+0x94>)
 80155d4:	f7f7 fd0e 	bl	800cff4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80155d8:	2280      	movs	r2, #128	; 0x80
 80155da:	2101      	movs	r1, #1
 80155dc:	4803      	ldr	r0, [pc, #12]	; (80155ec <USBD_LL_Init+0x94>)
 80155de:	f7f7 fd09 	bl	800cff4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80155e2:	2300      	movs	r3, #0
}
 80155e4:	4618      	mov	r0, r3
 80155e6:	3708      	adds	r7, #8
 80155e8:	46bd      	mov	sp, r7
 80155ea:	bd80      	pop	{r7, pc}
 80155ec:	20006a28 	.word	0x20006a28

080155f0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80155f0:	b580      	push	{r7, lr}
 80155f2:	b084      	sub	sp, #16
 80155f4:	af00      	add	r7, sp, #0
 80155f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80155f8:	2300      	movs	r3, #0
 80155fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80155fc:	2300      	movs	r3, #0
 80155fe:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8015606:	4618      	mov	r0, r3
 8015608:	f7f6 fceb 	bl	800bfe2 <HAL_PCD_Start>
 801560c:	4603      	mov	r3, r0
 801560e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8015610:	7bfb      	ldrb	r3, [r7, #15]
 8015612:	4618      	mov	r0, r3
 8015614:	f000 f92e 	bl	8015874 <USBD_Get_USB_Status>
 8015618:	4603      	mov	r3, r0
 801561a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801561c:	7bbb      	ldrb	r3, [r7, #14]
}
 801561e:	4618      	mov	r0, r3
 8015620:	3710      	adds	r7, #16
 8015622:	46bd      	mov	sp, r7
 8015624:	bd80      	pop	{r7, pc}

08015626 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015626:	b580      	push	{r7, lr}
 8015628:	b084      	sub	sp, #16
 801562a:	af00      	add	r7, sp, #0
 801562c:	6078      	str	r0, [r7, #4]
 801562e:	4608      	mov	r0, r1
 8015630:	4611      	mov	r1, r2
 8015632:	461a      	mov	r2, r3
 8015634:	4603      	mov	r3, r0
 8015636:	70fb      	strb	r3, [r7, #3]
 8015638:	460b      	mov	r3, r1
 801563a:	70bb      	strb	r3, [r7, #2]
 801563c:	4613      	mov	r3, r2
 801563e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015640:	2300      	movs	r3, #0
 8015642:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015644:	2300      	movs	r3, #0
 8015646:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 801564e:	78bb      	ldrb	r3, [r7, #2]
 8015650:	883a      	ldrh	r2, [r7, #0]
 8015652:	78f9      	ldrb	r1, [r7, #3]
 8015654:	f7f7 f8c0 	bl	800c7d8 <HAL_PCD_EP_Open>
 8015658:	4603      	mov	r3, r0
 801565a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801565c:	7bfb      	ldrb	r3, [r7, #15]
 801565e:	4618      	mov	r0, r3
 8015660:	f000 f908 	bl	8015874 <USBD_Get_USB_Status>
 8015664:	4603      	mov	r3, r0
 8015666:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8015668:	7bbb      	ldrb	r3, [r7, #14]
}
 801566a:	4618      	mov	r0, r3
 801566c:	3710      	adds	r7, #16
 801566e:	46bd      	mov	sp, r7
 8015670:	bd80      	pop	{r7, pc}

08015672 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015672:	b580      	push	{r7, lr}
 8015674:	b084      	sub	sp, #16
 8015676:	af00      	add	r7, sp, #0
 8015678:	6078      	str	r0, [r7, #4]
 801567a:	460b      	mov	r3, r1
 801567c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801567e:	2300      	movs	r3, #0
 8015680:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015682:	2300      	movs	r3, #0
 8015684:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801568c:	78fa      	ldrb	r2, [r7, #3]
 801568e:	4611      	mov	r1, r2
 8015690:	4618      	mov	r0, r3
 8015692:	f7f7 f909 	bl	800c8a8 <HAL_PCD_EP_Close>
 8015696:	4603      	mov	r3, r0
 8015698:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 801569a:	7bfb      	ldrb	r3, [r7, #15]
 801569c:	4618      	mov	r0, r3
 801569e:	f000 f8e9 	bl	8015874 <USBD_Get_USB_Status>
 80156a2:	4603      	mov	r3, r0
 80156a4:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80156a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80156a8:	4618      	mov	r0, r3
 80156aa:	3710      	adds	r7, #16
 80156ac:	46bd      	mov	sp, r7
 80156ae:	bd80      	pop	{r7, pc}

080156b0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80156b0:	b580      	push	{r7, lr}
 80156b2:	b084      	sub	sp, #16
 80156b4:	af00      	add	r7, sp, #0
 80156b6:	6078      	str	r0, [r7, #4]
 80156b8:	460b      	mov	r3, r1
 80156ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80156bc:	2300      	movs	r3, #0
 80156be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80156c0:	2300      	movs	r3, #0
 80156c2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80156ca:	78fa      	ldrb	r2, [r7, #3]
 80156cc:	4611      	mov	r1, r2
 80156ce:	4618      	mov	r0, r3
 80156d0:	f7f7 f9e1 	bl	800ca96 <HAL_PCD_EP_SetStall>
 80156d4:	4603      	mov	r3, r0
 80156d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80156d8:	7bfb      	ldrb	r3, [r7, #15]
 80156da:	4618      	mov	r0, r3
 80156dc:	f000 f8ca 	bl	8015874 <USBD_Get_USB_Status>
 80156e0:	4603      	mov	r3, r0
 80156e2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80156e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80156e6:	4618      	mov	r0, r3
 80156e8:	3710      	adds	r7, #16
 80156ea:	46bd      	mov	sp, r7
 80156ec:	bd80      	pop	{r7, pc}

080156ee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80156ee:	b580      	push	{r7, lr}
 80156f0:	b084      	sub	sp, #16
 80156f2:	af00      	add	r7, sp, #0
 80156f4:	6078      	str	r0, [r7, #4]
 80156f6:	460b      	mov	r3, r1
 80156f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80156fa:	2300      	movs	r3, #0
 80156fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80156fe:	2300      	movs	r3, #0
 8015700:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8015708:	78fa      	ldrb	r2, [r7, #3]
 801570a:	4611      	mov	r1, r2
 801570c:	4618      	mov	r0, r3
 801570e:	f7f7 fa26 	bl	800cb5e <HAL_PCD_EP_ClrStall>
 8015712:	4603      	mov	r3, r0
 8015714:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8015716:	7bfb      	ldrb	r3, [r7, #15]
 8015718:	4618      	mov	r0, r3
 801571a:	f000 f8ab 	bl	8015874 <USBD_Get_USB_Status>
 801571e:	4603      	mov	r3, r0
 8015720:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8015722:	7bbb      	ldrb	r3, [r7, #14]
}
 8015724:	4618      	mov	r0, r3
 8015726:	3710      	adds	r7, #16
 8015728:	46bd      	mov	sp, r7
 801572a:	bd80      	pop	{r7, pc}

0801572c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801572c:	b480      	push	{r7}
 801572e:	b085      	sub	sp, #20
 8015730:	af00      	add	r7, sp, #0
 8015732:	6078      	str	r0, [r7, #4]
 8015734:	460b      	mov	r3, r1
 8015736:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801573e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8015740:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015744:	2b00      	cmp	r3, #0
 8015746:	da0b      	bge.n	8015760 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8015748:	78fb      	ldrb	r3, [r7, #3]
 801574a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801574e:	68f9      	ldr	r1, [r7, #12]
 8015750:	4613      	mov	r3, r2
 8015752:	00db      	lsls	r3, r3, #3
 8015754:	1a9b      	subs	r3, r3, r2
 8015756:	009b      	lsls	r3, r3, #2
 8015758:	440b      	add	r3, r1
 801575a:	333e      	adds	r3, #62	; 0x3e
 801575c:	781b      	ldrb	r3, [r3, #0]
 801575e:	e00b      	b.n	8015778 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8015760:	78fb      	ldrb	r3, [r7, #3]
 8015762:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015766:	68f9      	ldr	r1, [r7, #12]
 8015768:	4613      	mov	r3, r2
 801576a:	00db      	lsls	r3, r3, #3
 801576c:	1a9b      	subs	r3, r3, r2
 801576e:	009b      	lsls	r3, r3, #2
 8015770:	440b      	add	r3, r1
 8015772:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015776:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015778:	4618      	mov	r0, r3
 801577a:	3714      	adds	r7, #20
 801577c:	46bd      	mov	sp, r7
 801577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015782:	4770      	bx	lr

08015784 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015784:	b580      	push	{r7, lr}
 8015786:	b084      	sub	sp, #16
 8015788:	af00      	add	r7, sp, #0
 801578a:	6078      	str	r0, [r7, #4]
 801578c:	460b      	mov	r3, r1
 801578e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015790:	2300      	movs	r3, #0
 8015792:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015794:	2300      	movs	r3, #0
 8015796:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801579e:	78fa      	ldrb	r2, [r7, #3]
 80157a0:	4611      	mov	r1, r2
 80157a2:	4618      	mov	r0, r3
 80157a4:	f7f6 fff3 	bl	800c78e <HAL_PCD_SetAddress>
 80157a8:	4603      	mov	r3, r0
 80157aa:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 80157ac:	7bfb      	ldrb	r3, [r7, #15]
 80157ae:	4618      	mov	r0, r3
 80157b0:	f000 f860 	bl	8015874 <USBD_Get_USB_Status>
 80157b4:	4603      	mov	r3, r0
 80157b6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80157b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80157ba:	4618      	mov	r0, r3
 80157bc:	3710      	adds	r7, #16
 80157be:	46bd      	mov	sp, r7
 80157c0:	bd80      	pop	{r7, pc}

080157c2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80157c2:	b580      	push	{r7, lr}
 80157c4:	b086      	sub	sp, #24
 80157c6:	af00      	add	r7, sp, #0
 80157c8:	60f8      	str	r0, [r7, #12]
 80157ca:	607a      	str	r2, [r7, #4]
 80157cc:	461a      	mov	r2, r3
 80157ce:	460b      	mov	r3, r1
 80157d0:	72fb      	strb	r3, [r7, #11]
 80157d2:	4613      	mov	r3, r2
 80157d4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80157d6:	2300      	movs	r3, #0
 80157d8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80157da:	2300      	movs	r3, #0
 80157dc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80157de:	68fb      	ldr	r3, [r7, #12]
 80157e0:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80157e4:	893b      	ldrh	r3, [r7, #8]
 80157e6:	7af9      	ldrb	r1, [r7, #11]
 80157e8:	687a      	ldr	r2, [r7, #4]
 80157ea:	f7f7 f90a 	bl	800ca02 <HAL_PCD_EP_Transmit>
 80157ee:	4603      	mov	r3, r0
 80157f0:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 80157f2:	7dfb      	ldrb	r3, [r7, #23]
 80157f4:	4618      	mov	r0, r3
 80157f6:	f000 f83d 	bl	8015874 <USBD_Get_USB_Status>
 80157fa:	4603      	mov	r3, r0
 80157fc:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80157fe:	7dbb      	ldrb	r3, [r7, #22]
}
 8015800:	4618      	mov	r0, r3
 8015802:	3718      	adds	r7, #24
 8015804:	46bd      	mov	sp, r7
 8015806:	bd80      	pop	{r7, pc}

08015808 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8015808:	b580      	push	{r7, lr}
 801580a:	b086      	sub	sp, #24
 801580c:	af00      	add	r7, sp, #0
 801580e:	60f8      	str	r0, [r7, #12]
 8015810:	607a      	str	r2, [r7, #4]
 8015812:	461a      	mov	r2, r3
 8015814:	460b      	mov	r3, r1
 8015816:	72fb      	strb	r3, [r7, #11]
 8015818:	4613      	mov	r3, r2
 801581a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801581c:	2300      	movs	r3, #0
 801581e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015820:	2300      	movs	r3, #0
 8015822:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015824:	68fb      	ldr	r3, [r7, #12]
 8015826:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 801582a:	893b      	ldrh	r3, [r7, #8]
 801582c:	7af9      	ldrb	r1, [r7, #11]
 801582e:	687a      	ldr	r2, [r7, #4]
 8015830:	f7f7 f884 	bl	800c93c <HAL_PCD_EP_Receive>
 8015834:	4603      	mov	r3, r0
 8015836:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8015838:	7dfb      	ldrb	r3, [r7, #23]
 801583a:	4618      	mov	r0, r3
 801583c:	f000 f81a 	bl	8015874 <USBD_Get_USB_Status>
 8015840:	4603      	mov	r3, r0
 8015842:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8015844:	7dbb      	ldrb	r3, [r7, #22]
}
 8015846:	4618      	mov	r0, r3
 8015848:	3718      	adds	r7, #24
 801584a:	46bd      	mov	sp, r7
 801584c:	bd80      	pop	{r7, pc}

0801584e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801584e:	b580      	push	{r7, lr}
 8015850:	b082      	sub	sp, #8
 8015852:	af00      	add	r7, sp, #0
 8015854:	6078      	str	r0, [r7, #4]
 8015856:	460b      	mov	r3, r1
 8015858:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8015860:	78fa      	ldrb	r2, [r7, #3]
 8015862:	4611      	mov	r1, r2
 8015864:	4618      	mov	r0, r3
 8015866:	f7f7 f8b4 	bl	800c9d2 <HAL_PCD_EP_GetRxCount>
 801586a:	4603      	mov	r3, r0
}
 801586c:	4618      	mov	r0, r3
 801586e:	3708      	adds	r7, #8
 8015870:	46bd      	mov	sp, r7
 8015872:	bd80      	pop	{r7, pc}

08015874 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015874:	b480      	push	{r7}
 8015876:	b085      	sub	sp, #20
 8015878:	af00      	add	r7, sp, #0
 801587a:	4603      	mov	r3, r0
 801587c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801587e:	2300      	movs	r3, #0
 8015880:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015882:	79fb      	ldrb	r3, [r7, #7]
 8015884:	2b03      	cmp	r3, #3
 8015886:	d817      	bhi.n	80158b8 <USBD_Get_USB_Status+0x44>
 8015888:	a201      	add	r2, pc, #4	; (adr r2, 8015890 <USBD_Get_USB_Status+0x1c>)
 801588a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801588e:	bf00      	nop
 8015890:	080158a1 	.word	0x080158a1
 8015894:	080158a7 	.word	0x080158a7
 8015898:	080158ad 	.word	0x080158ad
 801589c:	080158b3 	.word	0x080158b3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80158a0:	2300      	movs	r3, #0
 80158a2:	73fb      	strb	r3, [r7, #15]
    break;
 80158a4:	e00b      	b.n	80158be <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80158a6:	2302      	movs	r3, #2
 80158a8:	73fb      	strb	r3, [r7, #15]
    break;
 80158aa:	e008      	b.n	80158be <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80158ac:	2301      	movs	r3, #1
 80158ae:	73fb      	strb	r3, [r7, #15]
    break;
 80158b0:	e005      	b.n	80158be <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80158b2:	2302      	movs	r3, #2
 80158b4:	73fb      	strb	r3, [r7, #15]
    break;
 80158b6:	e002      	b.n	80158be <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80158b8:	2302      	movs	r3, #2
 80158ba:	73fb      	strb	r3, [r7, #15]
    break;
 80158bc:	bf00      	nop
  }
  return usb_status;
 80158be:	7bfb      	ldrb	r3, [r7, #15]
}
 80158c0:	4618      	mov	r0, r3
 80158c2:	3714      	adds	r7, #20
 80158c4:	46bd      	mov	sp, r7
 80158c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ca:	4770      	bx	lr

080158cc <__errno>:
 80158cc:	4b01      	ldr	r3, [pc, #4]	; (80158d4 <__errno+0x8>)
 80158ce:	6818      	ldr	r0, [r3, #0]
 80158d0:	4770      	bx	lr
 80158d2:	bf00      	nop
 80158d4:	20000e0c 	.word	0x20000e0c

080158d8 <__libc_init_array>:
 80158d8:	b570      	push	{r4, r5, r6, lr}
 80158da:	4e0d      	ldr	r6, [pc, #52]	; (8015910 <__libc_init_array+0x38>)
 80158dc:	4c0d      	ldr	r4, [pc, #52]	; (8015914 <__libc_init_array+0x3c>)
 80158de:	1ba4      	subs	r4, r4, r6
 80158e0:	10a4      	asrs	r4, r4, #2
 80158e2:	2500      	movs	r5, #0
 80158e4:	42a5      	cmp	r5, r4
 80158e6:	d109      	bne.n	80158fc <__libc_init_array+0x24>
 80158e8:	4e0b      	ldr	r6, [pc, #44]	; (8015918 <__libc_init_array+0x40>)
 80158ea:	4c0c      	ldr	r4, [pc, #48]	; (801591c <__libc_init_array+0x44>)
 80158ec:	f005 fa8a 	bl	801ae04 <_init>
 80158f0:	1ba4      	subs	r4, r4, r6
 80158f2:	10a4      	asrs	r4, r4, #2
 80158f4:	2500      	movs	r5, #0
 80158f6:	42a5      	cmp	r5, r4
 80158f8:	d105      	bne.n	8015906 <__libc_init_array+0x2e>
 80158fa:	bd70      	pop	{r4, r5, r6, pc}
 80158fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015900:	4798      	blx	r3
 8015902:	3501      	adds	r5, #1
 8015904:	e7ee      	b.n	80158e4 <__libc_init_array+0xc>
 8015906:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801590a:	4798      	blx	r3
 801590c:	3501      	adds	r5, #1
 801590e:	e7f2      	b.n	80158f6 <__libc_init_array+0x1e>
 8015910:	0801b7e0 	.word	0x0801b7e0
 8015914:	0801b7e0 	.word	0x0801b7e0
 8015918:	0801b7e0 	.word	0x0801b7e0
 801591c:	0801b7e4 	.word	0x0801b7e4

08015920 <malloc>:
 8015920:	4b02      	ldr	r3, [pc, #8]	; (801592c <malloc+0xc>)
 8015922:	4601      	mov	r1, r0
 8015924:	6818      	ldr	r0, [r3, #0]
 8015926:	f000 b885 	b.w	8015a34 <_malloc_r>
 801592a:	bf00      	nop
 801592c:	20000e0c 	.word	0x20000e0c

08015930 <free>:
 8015930:	4b02      	ldr	r3, [pc, #8]	; (801593c <free+0xc>)
 8015932:	4601      	mov	r1, r0
 8015934:	6818      	ldr	r0, [r3, #0]
 8015936:	f000 b82f 	b.w	8015998 <_free_r>
 801593a:	bf00      	nop
 801593c:	20000e0c 	.word	0x20000e0c

08015940 <memcpy>:
 8015940:	b510      	push	{r4, lr}
 8015942:	1e43      	subs	r3, r0, #1
 8015944:	440a      	add	r2, r1
 8015946:	4291      	cmp	r1, r2
 8015948:	d100      	bne.n	801594c <memcpy+0xc>
 801594a:	bd10      	pop	{r4, pc}
 801594c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015950:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015954:	e7f7      	b.n	8015946 <memcpy+0x6>

08015956 <memmove>:
 8015956:	4288      	cmp	r0, r1
 8015958:	b510      	push	{r4, lr}
 801595a:	eb01 0302 	add.w	r3, r1, r2
 801595e:	d807      	bhi.n	8015970 <memmove+0x1a>
 8015960:	1e42      	subs	r2, r0, #1
 8015962:	4299      	cmp	r1, r3
 8015964:	d00a      	beq.n	801597c <memmove+0x26>
 8015966:	f811 4b01 	ldrb.w	r4, [r1], #1
 801596a:	f802 4f01 	strb.w	r4, [r2, #1]!
 801596e:	e7f8      	b.n	8015962 <memmove+0xc>
 8015970:	4283      	cmp	r3, r0
 8015972:	d9f5      	bls.n	8015960 <memmove+0xa>
 8015974:	1881      	adds	r1, r0, r2
 8015976:	1ad2      	subs	r2, r2, r3
 8015978:	42d3      	cmn	r3, r2
 801597a:	d100      	bne.n	801597e <memmove+0x28>
 801597c:	bd10      	pop	{r4, pc}
 801597e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015982:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8015986:	e7f7      	b.n	8015978 <memmove+0x22>

08015988 <memset>:
 8015988:	4402      	add	r2, r0
 801598a:	4603      	mov	r3, r0
 801598c:	4293      	cmp	r3, r2
 801598e:	d100      	bne.n	8015992 <memset+0xa>
 8015990:	4770      	bx	lr
 8015992:	f803 1b01 	strb.w	r1, [r3], #1
 8015996:	e7f9      	b.n	801598c <memset+0x4>

08015998 <_free_r>:
 8015998:	b538      	push	{r3, r4, r5, lr}
 801599a:	4605      	mov	r5, r0
 801599c:	2900      	cmp	r1, #0
 801599e:	d045      	beq.n	8015a2c <_free_r+0x94>
 80159a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80159a4:	1f0c      	subs	r4, r1, #4
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	bfb8      	it	lt
 80159aa:	18e4      	addlt	r4, r4, r3
 80159ac:	f002 ff84 	bl	80188b8 <__malloc_lock>
 80159b0:	4a1f      	ldr	r2, [pc, #124]	; (8015a30 <_free_r+0x98>)
 80159b2:	6813      	ldr	r3, [r2, #0]
 80159b4:	4610      	mov	r0, r2
 80159b6:	b933      	cbnz	r3, 80159c6 <_free_r+0x2e>
 80159b8:	6063      	str	r3, [r4, #4]
 80159ba:	6014      	str	r4, [r2, #0]
 80159bc:	4628      	mov	r0, r5
 80159be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80159c2:	f002 bf7a 	b.w	80188ba <__malloc_unlock>
 80159c6:	42a3      	cmp	r3, r4
 80159c8:	d90c      	bls.n	80159e4 <_free_r+0x4c>
 80159ca:	6821      	ldr	r1, [r4, #0]
 80159cc:	1862      	adds	r2, r4, r1
 80159ce:	4293      	cmp	r3, r2
 80159d0:	bf04      	itt	eq
 80159d2:	681a      	ldreq	r2, [r3, #0]
 80159d4:	685b      	ldreq	r3, [r3, #4]
 80159d6:	6063      	str	r3, [r4, #4]
 80159d8:	bf04      	itt	eq
 80159da:	1852      	addeq	r2, r2, r1
 80159dc:	6022      	streq	r2, [r4, #0]
 80159de:	6004      	str	r4, [r0, #0]
 80159e0:	e7ec      	b.n	80159bc <_free_r+0x24>
 80159e2:	4613      	mov	r3, r2
 80159e4:	685a      	ldr	r2, [r3, #4]
 80159e6:	b10a      	cbz	r2, 80159ec <_free_r+0x54>
 80159e8:	42a2      	cmp	r2, r4
 80159ea:	d9fa      	bls.n	80159e2 <_free_r+0x4a>
 80159ec:	6819      	ldr	r1, [r3, #0]
 80159ee:	1858      	adds	r0, r3, r1
 80159f0:	42a0      	cmp	r0, r4
 80159f2:	d10b      	bne.n	8015a0c <_free_r+0x74>
 80159f4:	6820      	ldr	r0, [r4, #0]
 80159f6:	4401      	add	r1, r0
 80159f8:	1858      	adds	r0, r3, r1
 80159fa:	4282      	cmp	r2, r0
 80159fc:	6019      	str	r1, [r3, #0]
 80159fe:	d1dd      	bne.n	80159bc <_free_r+0x24>
 8015a00:	6810      	ldr	r0, [r2, #0]
 8015a02:	6852      	ldr	r2, [r2, #4]
 8015a04:	605a      	str	r2, [r3, #4]
 8015a06:	4401      	add	r1, r0
 8015a08:	6019      	str	r1, [r3, #0]
 8015a0a:	e7d7      	b.n	80159bc <_free_r+0x24>
 8015a0c:	d902      	bls.n	8015a14 <_free_r+0x7c>
 8015a0e:	230c      	movs	r3, #12
 8015a10:	602b      	str	r3, [r5, #0]
 8015a12:	e7d3      	b.n	80159bc <_free_r+0x24>
 8015a14:	6820      	ldr	r0, [r4, #0]
 8015a16:	1821      	adds	r1, r4, r0
 8015a18:	428a      	cmp	r2, r1
 8015a1a:	bf04      	itt	eq
 8015a1c:	6811      	ldreq	r1, [r2, #0]
 8015a1e:	6852      	ldreq	r2, [r2, #4]
 8015a20:	6062      	str	r2, [r4, #4]
 8015a22:	bf04      	itt	eq
 8015a24:	1809      	addeq	r1, r1, r0
 8015a26:	6021      	streq	r1, [r4, #0]
 8015a28:	605c      	str	r4, [r3, #4]
 8015a2a:	e7c7      	b.n	80159bc <_free_r+0x24>
 8015a2c:	bd38      	pop	{r3, r4, r5, pc}
 8015a2e:	bf00      	nop
 8015a30:	200051ac 	.word	0x200051ac

08015a34 <_malloc_r>:
 8015a34:	b570      	push	{r4, r5, r6, lr}
 8015a36:	1ccd      	adds	r5, r1, #3
 8015a38:	f025 0503 	bic.w	r5, r5, #3
 8015a3c:	3508      	adds	r5, #8
 8015a3e:	2d0c      	cmp	r5, #12
 8015a40:	bf38      	it	cc
 8015a42:	250c      	movcc	r5, #12
 8015a44:	2d00      	cmp	r5, #0
 8015a46:	4606      	mov	r6, r0
 8015a48:	db01      	blt.n	8015a4e <_malloc_r+0x1a>
 8015a4a:	42a9      	cmp	r1, r5
 8015a4c:	d903      	bls.n	8015a56 <_malloc_r+0x22>
 8015a4e:	230c      	movs	r3, #12
 8015a50:	6033      	str	r3, [r6, #0]
 8015a52:	2000      	movs	r0, #0
 8015a54:	bd70      	pop	{r4, r5, r6, pc}
 8015a56:	f002 ff2f 	bl	80188b8 <__malloc_lock>
 8015a5a:	4a21      	ldr	r2, [pc, #132]	; (8015ae0 <_malloc_r+0xac>)
 8015a5c:	6814      	ldr	r4, [r2, #0]
 8015a5e:	4621      	mov	r1, r4
 8015a60:	b991      	cbnz	r1, 8015a88 <_malloc_r+0x54>
 8015a62:	4c20      	ldr	r4, [pc, #128]	; (8015ae4 <_malloc_r+0xb0>)
 8015a64:	6823      	ldr	r3, [r4, #0]
 8015a66:	b91b      	cbnz	r3, 8015a70 <_malloc_r+0x3c>
 8015a68:	4630      	mov	r0, r6
 8015a6a:	f000 fe7b 	bl	8016764 <_sbrk_r>
 8015a6e:	6020      	str	r0, [r4, #0]
 8015a70:	4629      	mov	r1, r5
 8015a72:	4630      	mov	r0, r6
 8015a74:	f000 fe76 	bl	8016764 <_sbrk_r>
 8015a78:	1c43      	adds	r3, r0, #1
 8015a7a:	d124      	bne.n	8015ac6 <_malloc_r+0x92>
 8015a7c:	230c      	movs	r3, #12
 8015a7e:	6033      	str	r3, [r6, #0]
 8015a80:	4630      	mov	r0, r6
 8015a82:	f002 ff1a 	bl	80188ba <__malloc_unlock>
 8015a86:	e7e4      	b.n	8015a52 <_malloc_r+0x1e>
 8015a88:	680b      	ldr	r3, [r1, #0]
 8015a8a:	1b5b      	subs	r3, r3, r5
 8015a8c:	d418      	bmi.n	8015ac0 <_malloc_r+0x8c>
 8015a8e:	2b0b      	cmp	r3, #11
 8015a90:	d90f      	bls.n	8015ab2 <_malloc_r+0x7e>
 8015a92:	600b      	str	r3, [r1, #0]
 8015a94:	50cd      	str	r5, [r1, r3]
 8015a96:	18cc      	adds	r4, r1, r3
 8015a98:	4630      	mov	r0, r6
 8015a9a:	f002 ff0e 	bl	80188ba <__malloc_unlock>
 8015a9e:	f104 000b 	add.w	r0, r4, #11
 8015aa2:	1d23      	adds	r3, r4, #4
 8015aa4:	f020 0007 	bic.w	r0, r0, #7
 8015aa8:	1ac3      	subs	r3, r0, r3
 8015aaa:	d0d3      	beq.n	8015a54 <_malloc_r+0x20>
 8015aac:	425a      	negs	r2, r3
 8015aae:	50e2      	str	r2, [r4, r3]
 8015ab0:	e7d0      	b.n	8015a54 <_malloc_r+0x20>
 8015ab2:	428c      	cmp	r4, r1
 8015ab4:	684b      	ldr	r3, [r1, #4]
 8015ab6:	bf16      	itet	ne
 8015ab8:	6063      	strne	r3, [r4, #4]
 8015aba:	6013      	streq	r3, [r2, #0]
 8015abc:	460c      	movne	r4, r1
 8015abe:	e7eb      	b.n	8015a98 <_malloc_r+0x64>
 8015ac0:	460c      	mov	r4, r1
 8015ac2:	6849      	ldr	r1, [r1, #4]
 8015ac4:	e7cc      	b.n	8015a60 <_malloc_r+0x2c>
 8015ac6:	1cc4      	adds	r4, r0, #3
 8015ac8:	f024 0403 	bic.w	r4, r4, #3
 8015acc:	42a0      	cmp	r0, r4
 8015ace:	d005      	beq.n	8015adc <_malloc_r+0xa8>
 8015ad0:	1a21      	subs	r1, r4, r0
 8015ad2:	4630      	mov	r0, r6
 8015ad4:	f000 fe46 	bl	8016764 <_sbrk_r>
 8015ad8:	3001      	adds	r0, #1
 8015ada:	d0cf      	beq.n	8015a7c <_malloc_r+0x48>
 8015adc:	6025      	str	r5, [r4, #0]
 8015ade:	e7db      	b.n	8015a98 <_malloc_r+0x64>
 8015ae0:	200051ac 	.word	0x200051ac
 8015ae4:	200051b0 	.word	0x200051b0

08015ae8 <__cvt>:
 8015ae8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015aec:	ec55 4b10 	vmov	r4, r5, d0
 8015af0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8015af2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015af6:	2d00      	cmp	r5, #0
 8015af8:	460e      	mov	r6, r1
 8015afa:	4691      	mov	r9, r2
 8015afc:	4619      	mov	r1, r3
 8015afe:	bfb8      	it	lt
 8015b00:	4622      	movlt	r2, r4
 8015b02:	462b      	mov	r3, r5
 8015b04:	f027 0720 	bic.w	r7, r7, #32
 8015b08:	bfbb      	ittet	lt
 8015b0a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8015b0e:	461d      	movlt	r5, r3
 8015b10:	2300      	movge	r3, #0
 8015b12:	232d      	movlt	r3, #45	; 0x2d
 8015b14:	bfb8      	it	lt
 8015b16:	4614      	movlt	r4, r2
 8015b18:	2f46      	cmp	r7, #70	; 0x46
 8015b1a:	700b      	strb	r3, [r1, #0]
 8015b1c:	d004      	beq.n	8015b28 <__cvt+0x40>
 8015b1e:	2f45      	cmp	r7, #69	; 0x45
 8015b20:	d100      	bne.n	8015b24 <__cvt+0x3c>
 8015b22:	3601      	adds	r6, #1
 8015b24:	2102      	movs	r1, #2
 8015b26:	e000      	b.n	8015b2a <__cvt+0x42>
 8015b28:	2103      	movs	r1, #3
 8015b2a:	ab03      	add	r3, sp, #12
 8015b2c:	9301      	str	r3, [sp, #4]
 8015b2e:	ab02      	add	r3, sp, #8
 8015b30:	9300      	str	r3, [sp, #0]
 8015b32:	4632      	mov	r2, r6
 8015b34:	4653      	mov	r3, sl
 8015b36:	ec45 4b10 	vmov	d0, r4, r5
 8015b3a:	f001 fdb9 	bl	80176b0 <_dtoa_r>
 8015b3e:	2f47      	cmp	r7, #71	; 0x47
 8015b40:	4680      	mov	r8, r0
 8015b42:	d102      	bne.n	8015b4a <__cvt+0x62>
 8015b44:	f019 0f01 	tst.w	r9, #1
 8015b48:	d026      	beq.n	8015b98 <__cvt+0xb0>
 8015b4a:	2f46      	cmp	r7, #70	; 0x46
 8015b4c:	eb08 0906 	add.w	r9, r8, r6
 8015b50:	d111      	bne.n	8015b76 <__cvt+0x8e>
 8015b52:	f898 3000 	ldrb.w	r3, [r8]
 8015b56:	2b30      	cmp	r3, #48	; 0x30
 8015b58:	d10a      	bne.n	8015b70 <__cvt+0x88>
 8015b5a:	2200      	movs	r2, #0
 8015b5c:	2300      	movs	r3, #0
 8015b5e:	4620      	mov	r0, r4
 8015b60:	4629      	mov	r1, r5
 8015b62:	f7ea ffb1 	bl	8000ac8 <__aeabi_dcmpeq>
 8015b66:	b918      	cbnz	r0, 8015b70 <__cvt+0x88>
 8015b68:	f1c6 0601 	rsb	r6, r6, #1
 8015b6c:	f8ca 6000 	str.w	r6, [sl]
 8015b70:	f8da 3000 	ldr.w	r3, [sl]
 8015b74:	4499      	add	r9, r3
 8015b76:	2200      	movs	r2, #0
 8015b78:	2300      	movs	r3, #0
 8015b7a:	4620      	mov	r0, r4
 8015b7c:	4629      	mov	r1, r5
 8015b7e:	f7ea ffa3 	bl	8000ac8 <__aeabi_dcmpeq>
 8015b82:	b938      	cbnz	r0, 8015b94 <__cvt+0xac>
 8015b84:	2230      	movs	r2, #48	; 0x30
 8015b86:	9b03      	ldr	r3, [sp, #12]
 8015b88:	454b      	cmp	r3, r9
 8015b8a:	d205      	bcs.n	8015b98 <__cvt+0xb0>
 8015b8c:	1c59      	adds	r1, r3, #1
 8015b8e:	9103      	str	r1, [sp, #12]
 8015b90:	701a      	strb	r2, [r3, #0]
 8015b92:	e7f8      	b.n	8015b86 <__cvt+0x9e>
 8015b94:	f8cd 900c 	str.w	r9, [sp, #12]
 8015b98:	9b03      	ldr	r3, [sp, #12]
 8015b9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015b9c:	eba3 0308 	sub.w	r3, r3, r8
 8015ba0:	4640      	mov	r0, r8
 8015ba2:	6013      	str	r3, [r2, #0]
 8015ba4:	b004      	add	sp, #16
 8015ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015baa <__exponent>:
 8015baa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015bac:	2900      	cmp	r1, #0
 8015bae:	4604      	mov	r4, r0
 8015bb0:	bfba      	itte	lt
 8015bb2:	4249      	neglt	r1, r1
 8015bb4:	232d      	movlt	r3, #45	; 0x2d
 8015bb6:	232b      	movge	r3, #43	; 0x2b
 8015bb8:	2909      	cmp	r1, #9
 8015bba:	f804 2b02 	strb.w	r2, [r4], #2
 8015bbe:	7043      	strb	r3, [r0, #1]
 8015bc0:	dd20      	ble.n	8015c04 <__exponent+0x5a>
 8015bc2:	f10d 0307 	add.w	r3, sp, #7
 8015bc6:	461f      	mov	r7, r3
 8015bc8:	260a      	movs	r6, #10
 8015bca:	fb91 f5f6 	sdiv	r5, r1, r6
 8015bce:	fb06 1115 	mls	r1, r6, r5, r1
 8015bd2:	3130      	adds	r1, #48	; 0x30
 8015bd4:	2d09      	cmp	r5, #9
 8015bd6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8015bda:	f103 32ff 	add.w	r2, r3, #4294967295
 8015bde:	4629      	mov	r1, r5
 8015be0:	dc09      	bgt.n	8015bf6 <__exponent+0x4c>
 8015be2:	3130      	adds	r1, #48	; 0x30
 8015be4:	3b02      	subs	r3, #2
 8015be6:	f802 1c01 	strb.w	r1, [r2, #-1]
 8015bea:	42bb      	cmp	r3, r7
 8015bec:	4622      	mov	r2, r4
 8015bee:	d304      	bcc.n	8015bfa <__exponent+0x50>
 8015bf0:	1a10      	subs	r0, r2, r0
 8015bf2:	b003      	add	sp, #12
 8015bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015bf6:	4613      	mov	r3, r2
 8015bf8:	e7e7      	b.n	8015bca <__exponent+0x20>
 8015bfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015bfe:	f804 2b01 	strb.w	r2, [r4], #1
 8015c02:	e7f2      	b.n	8015bea <__exponent+0x40>
 8015c04:	2330      	movs	r3, #48	; 0x30
 8015c06:	4419      	add	r1, r3
 8015c08:	7083      	strb	r3, [r0, #2]
 8015c0a:	1d02      	adds	r2, r0, #4
 8015c0c:	70c1      	strb	r1, [r0, #3]
 8015c0e:	e7ef      	b.n	8015bf0 <__exponent+0x46>

08015c10 <_printf_float>:
 8015c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c14:	b08d      	sub	sp, #52	; 0x34
 8015c16:	460c      	mov	r4, r1
 8015c18:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8015c1c:	4616      	mov	r6, r2
 8015c1e:	461f      	mov	r7, r3
 8015c20:	4605      	mov	r5, r0
 8015c22:	f002 fe29 	bl	8018878 <_localeconv_r>
 8015c26:	6803      	ldr	r3, [r0, #0]
 8015c28:	9304      	str	r3, [sp, #16]
 8015c2a:	4618      	mov	r0, r3
 8015c2c:	f7ea fad0 	bl	80001d0 <strlen>
 8015c30:	2300      	movs	r3, #0
 8015c32:	930a      	str	r3, [sp, #40]	; 0x28
 8015c34:	f8d8 3000 	ldr.w	r3, [r8]
 8015c38:	9005      	str	r0, [sp, #20]
 8015c3a:	3307      	adds	r3, #7
 8015c3c:	f023 0307 	bic.w	r3, r3, #7
 8015c40:	f103 0208 	add.w	r2, r3, #8
 8015c44:	f894 a018 	ldrb.w	sl, [r4, #24]
 8015c48:	f8d4 b000 	ldr.w	fp, [r4]
 8015c4c:	f8c8 2000 	str.w	r2, [r8]
 8015c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c54:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8015c58:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8015c5c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015c60:	9307      	str	r3, [sp, #28]
 8015c62:	f8cd 8018 	str.w	r8, [sp, #24]
 8015c66:	f04f 32ff 	mov.w	r2, #4294967295
 8015c6a:	4ba7      	ldr	r3, [pc, #668]	; (8015f08 <_printf_float+0x2f8>)
 8015c6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015c70:	f7ea ff5c 	bl	8000b2c <__aeabi_dcmpun>
 8015c74:	bb70      	cbnz	r0, 8015cd4 <_printf_float+0xc4>
 8015c76:	f04f 32ff 	mov.w	r2, #4294967295
 8015c7a:	4ba3      	ldr	r3, [pc, #652]	; (8015f08 <_printf_float+0x2f8>)
 8015c7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015c80:	f7ea ff36 	bl	8000af0 <__aeabi_dcmple>
 8015c84:	bb30      	cbnz	r0, 8015cd4 <_printf_float+0xc4>
 8015c86:	2200      	movs	r2, #0
 8015c88:	2300      	movs	r3, #0
 8015c8a:	4640      	mov	r0, r8
 8015c8c:	4649      	mov	r1, r9
 8015c8e:	f7ea ff25 	bl	8000adc <__aeabi_dcmplt>
 8015c92:	b110      	cbz	r0, 8015c9a <_printf_float+0x8a>
 8015c94:	232d      	movs	r3, #45	; 0x2d
 8015c96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015c9a:	4a9c      	ldr	r2, [pc, #624]	; (8015f0c <_printf_float+0x2fc>)
 8015c9c:	4b9c      	ldr	r3, [pc, #624]	; (8015f10 <_printf_float+0x300>)
 8015c9e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015ca2:	bf8c      	ite	hi
 8015ca4:	4690      	movhi	r8, r2
 8015ca6:	4698      	movls	r8, r3
 8015ca8:	2303      	movs	r3, #3
 8015caa:	f02b 0204 	bic.w	r2, fp, #4
 8015cae:	6123      	str	r3, [r4, #16]
 8015cb0:	6022      	str	r2, [r4, #0]
 8015cb2:	f04f 0900 	mov.w	r9, #0
 8015cb6:	9700      	str	r7, [sp, #0]
 8015cb8:	4633      	mov	r3, r6
 8015cba:	aa0b      	add	r2, sp, #44	; 0x2c
 8015cbc:	4621      	mov	r1, r4
 8015cbe:	4628      	mov	r0, r5
 8015cc0:	f000 f9e6 	bl	8016090 <_printf_common>
 8015cc4:	3001      	adds	r0, #1
 8015cc6:	f040 808d 	bne.w	8015de4 <_printf_float+0x1d4>
 8015cca:	f04f 30ff 	mov.w	r0, #4294967295
 8015cce:	b00d      	add	sp, #52	; 0x34
 8015cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cd4:	4642      	mov	r2, r8
 8015cd6:	464b      	mov	r3, r9
 8015cd8:	4640      	mov	r0, r8
 8015cda:	4649      	mov	r1, r9
 8015cdc:	f7ea ff26 	bl	8000b2c <__aeabi_dcmpun>
 8015ce0:	b110      	cbz	r0, 8015ce8 <_printf_float+0xd8>
 8015ce2:	4a8c      	ldr	r2, [pc, #560]	; (8015f14 <_printf_float+0x304>)
 8015ce4:	4b8c      	ldr	r3, [pc, #560]	; (8015f18 <_printf_float+0x308>)
 8015ce6:	e7da      	b.n	8015c9e <_printf_float+0x8e>
 8015ce8:	6861      	ldr	r1, [r4, #4]
 8015cea:	1c4b      	adds	r3, r1, #1
 8015cec:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8015cf0:	a80a      	add	r0, sp, #40	; 0x28
 8015cf2:	d13e      	bne.n	8015d72 <_printf_float+0x162>
 8015cf4:	2306      	movs	r3, #6
 8015cf6:	6063      	str	r3, [r4, #4]
 8015cf8:	2300      	movs	r3, #0
 8015cfa:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015cfe:	ab09      	add	r3, sp, #36	; 0x24
 8015d00:	9300      	str	r3, [sp, #0]
 8015d02:	ec49 8b10 	vmov	d0, r8, r9
 8015d06:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015d0a:	6022      	str	r2, [r4, #0]
 8015d0c:	f8cd a004 	str.w	sl, [sp, #4]
 8015d10:	6861      	ldr	r1, [r4, #4]
 8015d12:	4628      	mov	r0, r5
 8015d14:	f7ff fee8 	bl	8015ae8 <__cvt>
 8015d18:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8015d1c:	2b47      	cmp	r3, #71	; 0x47
 8015d1e:	4680      	mov	r8, r0
 8015d20:	d109      	bne.n	8015d36 <_printf_float+0x126>
 8015d22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d24:	1cd8      	adds	r0, r3, #3
 8015d26:	db02      	blt.n	8015d2e <_printf_float+0x11e>
 8015d28:	6862      	ldr	r2, [r4, #4]
 8015d2a:	4293      	cmp	r3, r2
 8015d2c:	dd47      	ble.n	8015dbe <_printf_float+0x1ae>
 8015d2e:	f1aa 0a02 	sub.w	sl, sl, #2
 8015d32:	fa5f fa8a 	uxtb.w	sl, sl
 8015d36:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015d3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015d3c:	d824      	bhi.n	8015d88 <_printf_float+0x178>
 8015d3e:	3901      	subs	r1, #1
 8015d40:	4652      	mov	r2, sl
 8015d42:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015d46:	9109      	str	r1, [sp, #36]	; 0x24
 8015d48:	f7ff ff2f 	bl	8015baa <__exponent>
 8015d4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015d4e:	1813      	adds	r3, r2, r0
 8015d50:	2a01      	cmp	r2, #1
 8015d52:	4681      	mov	r9, r0
 8015d54:	6123      	str	r3, [r4, #16]
 8015d56:	dc02      	bgt.n	8015d5e <_printf_float+0x14e>
 8015d58:	6822      	ldr	r2, [r4, #0]
 8015d5a:	07d1      	lsls	r1, r2, #31
 8015d5c:	d501      	bpl.n	8015d62 <_printf_float+0x152>
 8015d5e:	3301      	adds	r3, #1
 8015d60:	6123      	str	r3, [r4, #16]
 8015d62:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	d0a5      	beq.n	8015cb6 <_printf_float+0xa6>
 8015d6a:	232d      	movs	r3, #45	; 0x2d
 8015d6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015d70:	e7a1      	b.n	8015cb6 <_printf_float+0xa6>
 8015d72:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8015d76:	f000 8177 	beq.w	8016068 <_printf_float+0x458>
 8015d7a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015d7e:	d1bb      	bne.n	8015cf8 <_printf_float+0xe8>
 8015d80:	2900      	cmp	r1, #0
 8015d82:	d1b9      	bne.n	8015cf8 <_printf_float+0xe8>
 8015d84:	2301      	movs	r3, #1
 8015d86:	e7b6      	b.n	8015cf6 <_printf_float+0xe6>
 8015d88:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8015d8c:	d119      	bne.n	8015dc2 <_printf_float+0x1b2>
 8015d8e:	2900      	cmp	r1, #0
 8015d90:	6863      	ldr	r3, [r4, #4]
 8015d92:	dd0c      	ble.n	8015dae <_printf_float+0x19e>
 8015d94:	6121      	str	r1, [r4, #16]
 8015d96:	b913      	cbnz	r3, 8015d9e <_printf_float+0x18e>
 8015d98:	6822      	ldr	r2, [r4, #0]
 8015d9a:	07d2      	lsls	r2, r2, #31
 8015d9c:	d502      	bpl.n	8015da4 <_printf_float+0x194>
 8015d9e:	3301      	adds	r3, #1
 8015da0:	440b      	add	r3, r1
 8015da2:	6123      	str	r3, [r4, #16]
 8015da4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015da6:	65a3      	str	r3, [r4, #88]	; 0x58
 8015da8:	f04f 0900 	mov.w	r9, #0
 8015dac:	e7d9      	b.n	8015d62 <_printf_float+0x152>
 8015dae:	b913      	cbnz	r3, 8015db6 <_printf_float+0x1a6>
 8015db0:	6822      	ldr	r2, [r4, #0]
 8015db2:	07d0      	lsls	r0, r2, #31
 8015db4:	d501      	bpl.n	8015dba <_printf_float+0x1aa>
 8015db6:	3302      	adds	r3, #2
 8015db8:	e7f3      	b.n	8015da2 <_printf_float+0x192>
 8015dba:	2301      	movs	r3, #1
 8015dbc:	e7f1      	b.n	8015da2 <_printf_float+0x192>
 8015dbe:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8015dc2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015dc6:	4293      	cmp	r3, r2
 8015dc8:	db05      	blt.n	8015dd6 <_printf_float+0x1c6>
 8015dca:	6822      	ldr	r2, [r4, #0]
 8015dcc:	6123      	str	r3, [r4, #16]
 8015dce:	07d1      	lsls	r1, r2, #31
 8015dd0:	d5e8      	bpl.n	8015da4 <_printf_float+0x194>
 8015dd2:	3301      	adds	r3, #1
 8015dd4:	e7e5      	b.n	8015da2 <_printf_float+0x192>
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	bfd4      	ite	le
 8015dda:	f1c3 0302 	rsble	r3, r3, #2
 8015dde:	2301      	movgt	r3, #1
 8015de0:	4413      	add	r3, r2
 8015de2:	e7de      	b.n	8015da2 <_printf_float+0x192>
 8015de4:	6823      	ldr	r3, [r4, #0]
 8015de6:	055a      	lsls	r2, r3, #21
 8015de8:	d407      	bmi.n	8015dfa <_printf_float+0x1ea>
 8015dea:	6923      	ldr	r3, [r4, #16]
 8015dec:	4642      	mov	r2, r8
 8015dee:	4631      	mov	r1, r6
 8015df0:	4628      	mov	r0, r5
 8015df2:	47b8      	blx	r7
 8015df4:	3001      	adds	r0, #1
 8015df6:	d12b      	bne.n	8015e50 <_printf_float+0x240>
 8015df8:	e767      	b.n	8015cca <_printf_float+0xba>
 8015dfa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015dfe:	f240 80dc 	bls.w	8015fba <_printf_float+0x3aa>
 8015e02:	2200      	movs	r2, #0
 8015e04:	2300      	movs	r3, #0
 8015e06:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015e0a:	f7ea fe5d 	bl	8000ac8 <__aeabi_dcmpeq>
 8015e0e:	2800      	cmp	r0, #0
 8015e10:	d033      	beq.n	8015e7a <_printf_float+0x26a>
 8015e12:	2301      	movs	r3, #1
 8015e14:	4a41      	ldr	r2, [pc, #260]	; (8015f1c <_printf_float+0x30c>)
 8015e16:	4631      	mov	r1, r6
 8015e18:	4628      	mov	r0, r5
 8015e1a:	47b8      	blx	r7
 8015e1c:	3001      	adds	r0, #1
 8015e1e:	f43f af54 	beq.w	8015cca <_printf_float+0xba>
 8015e22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015e26:	429a      	cmp	r2, r3
 8015e28:	db02      	blt.n	8015e30 <_printf_float+0x220>
 8015e2a:	6823      	ldr	r3, [r4, #0]
 8015e2c:	07d8      	lsls	r0, r3, #31
 8015e2e:	d50f      	bpl.n	8015e50 <_printf_float+0x240>
 8015e30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015e34:	4631      	mov	r1, r6
 8015e36:	4628      	mov	r0, r5
 8015e38:	47b8      	blx	r7
 8015e3a:	3001      	adds	r0, #1
 8015e3c:	f43f af45 	beq.w	8015cca <_printf_float+0xba>
 8015e40:	f04f 0800 	mov.w	r8, #0
 8015e44:	f104 091a 	add.w	r9, r4, #26
 8015e48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e4a:	3b01      	subs	r3, #1
 8015e4c:	4543      	cmp	r3, r8
 8015e4e:	dc09      	bgt.n	8015e64 <_printf_float+0x254>
 8015e50:	6823      	ldr	r3, [r4, #0]
 8015e52:	079b      	lsls	r3, r3, #30
 8015e54:	f100 8103 	bmi.w	801605e <_printf_float+0x44e>
 8015e58:	68e0      	ldr	r0, [r4, #12]
 8015e5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015e5c:	4298      	cmp	r0, r3
 8015e5e:	bfb8      	it	lt
 8015e60:	4618      	movlt	r0, r3
 8015e62:	e734      	b.n	8015cce <_printf_float+0xbe>
 8015e64:	2301      	movs	r3, #1
 8015e66:	464a      	mov	r2, r9
 8015e68:	4631      	mov	r1, r6
 8015e6a:	4628      	mov	r0, r5
 8015e6c:	47b8      	blx	r7
 8015e6e:	3001      	adds	r0, #1
 8015e70:	f43f af2b 	beq.w	8015cca <_printf_float+0xba>
 8015e74:	f108 0801 	add.w	r8, r8, #1
 8015e78:	e7e6      	b.n	8015e48 <_printf_float+0x238>
 8015e7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	dc2b      	bgt.n	8015ed8 <_printf_float+0x2c8>
 8015e80:	2301      	movs	r3, #1
 8015e82:	4a26      	ldr	r2, [pc, #152]	; (8015f1c <_printf_float+0x30c>)
 8015e84:	4631      	mov	r1, r6
 8015e86:	4628      	mov	r0, r5
 8015e88:	47b8      	blx	r7
 8015e8a:	3001      	adds	r0, #1
 8015e8c:	f43f af1d 	beq.w	8015cca <_printf_float+0xba>
 8015e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e92:	b923      	cbnz	r3, 8015e9e <_printf_float+0x28e>
 8015e94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e96:	b913      	cbnz	r3, 8015e9e <_printf_float+0x28e>
 8015e98:	6823      	ldr	r3, [r4, #0]
 8015e9a:	07d9      	lsls	r1, r3, #31
 8015e9c:	d5d8      	bpl.n	8015e50 <_printf_float+0x240>
 8015e9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015ea2:	4631      	mov	r1, r6
 8015ea4:	4628      	mov	r0, r5
 8015ea6:	47b8      	blx	r7
 8015ea8:	3001      	adds	r0, #1
 8015eaa:	f43f af0e 	beq.w	8015cca <_printf_float+0xba>
 8015eae:	f04f 0900 	mov.w	r9, #0
 8015eb2:	f104 0a1a 	add.w	sl, r4, #26
 8015eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015eb8:	425b      	negs	r3, r3
 8015eba:	454b      	cmp	r3, r9
 8015ebc:	dc01      	bgt.n	8015ec2 <_printf_float+0x2b2>
 8015ebe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015ec0:	e794      	b.n	8015dec <_printf_float+0x1dc>
 8015ec2:	2301      	movs	r3, #1
 8015ec4:	4652      	mov	r2, sl
 8015ec6:	4631      	mov	r1, r6
 8015ec8:	4628      	mov	r0, r5
 8015eca:	47b8      	blx	r7
 8015ecc:	3001      	adds	r0, #1
 8015ece:	f43f aefc 	beq.w	8015cca <_printf_float+0xba>
 8015ed2:	f109 0901 	add.w	r9, r9, #1
 8015ed6:	e7ee      	b.n	8015eb6 <_printf_float+0x2a6>
 8015ed8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015eda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015edc:	429a      	cmp	r2, r3
 8015ede:	bfa8      	it	ge
 8015ee0:	461a      	movge	r2, r3
 8015ee2:	2a00      	cmp	r2, #0
 8015ee4:	4691      	mov	r9, r2
 8015ee6:	dd07      	ble.n	8015ef8 <_printf_float+0x2e8>
 8015ee8:	4613      	mov	r3, r2
 8015eea:	4631      	mov	r1, r6
 8015eec:	4642      	mov	r2, r8
 8015eee:	4628      	mov	r0, r5
 8015ef0:	47b8      	blx	r7
 8015ef2:	3001      	adds	r0, #1
 8015ef4:	f43f aee9 	beq.w	8015cca <_printf_float+0xba>
 8015ef8:	f104 031a 	add.w	r3, r4, #26
 8015efc:	f04f 0b00 	mov.w	fp, #0
 8015f00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015f04:	9306      	str	r3, [sp, #24]
 8015f06:	e015      	b.n	8015f34 <_printf_float+0x324>
 8015f08:	7fefffff 	.word	0x7fefffff
 8015f0c:	0801b308 	.word	0x0801b308
 8015f10:	0801b304 	.word	0x0801b304
 8015f14:	0801b310 	.word	0x0801b310
 8015f18:	0801b30c 	.word	0x0801b30c
 8015f1c:	0801b314 	.word	0x0801b314
 8015f20:	2301      	movs	r3, #1
 8015f22:	9a06      	ldr	r2, [sp, #24]
 8015f24:	4631      	mov	r1, r6
 8015f26:	4628      	mov	r0, r5
 8015f28:	47b8      	blx	r7
 8015f2a:	3001      	adds	r0, #1
 8015f2c:	f43f aecd 	beq.w	8015cca <_printf_float+0xba>
 8015f30:	f10b 0b01 	add.w	fp, fp, #1
 8015f34:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8015f38:	ebaa 0309 	sub.w	r3, sl, r9
 8015f3c:	455b      	cmp	r3, fp
 8015f3e:	dcef      	bgt.n	8015f20 <_printf_float+0x310>
 8015f40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015f44:	429a      	cmp	r2, r3
 8015f46:	44d0      	add	r8, sl
 8015f48:	db15      	blt.n	8015f76 <_printf_float+0x366>
 8015f4a:	6823      	ldr	r3, [r4, #0]
 8015f4c:	07da      	lsls	r2, r3, #31
 8015f4e:	d412      	bmi.n	8015f76 <_printf_float+0x366>
 8015f50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f52:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015f54:	eba3 020a 	sub.w	r2, r3, sl
 8015f58:	eba3 0a01 	sub.w	sl, r3, r1
 8015f5c:	4592      	cmp	sl, r2
 8015f5e:	bfa8      	it	ge
 8015f60:	4692      	movge	sl, r2
 8015f62:	f1ba 0f00 	cmp.w	sl, #0
 8015f66:	dc0e      	bgt.n	8015f86 <_printf_float+0x376>
 8015f68:	f04f 0800 	mov.w	r8, #0
 8015f6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015f70:	f104 091a 	add.w	r9, r4, #26
 8015f74:	e019      	b.n	8015faa <_printf_float+0x39a>
 8015f76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015f7a:	4631      	mov	r1, r6
 8015f7c:	4628      	mov	r0, r5
 8015f7e:	47b8      	blx	r7
 8015f80:	3001      	adds	r0, #1
 8015f82:	d1e5      	bne.n	8015f50 <_printf_float+0x340>
 8015f84:	e6a1      	b.n	8015cca <_printf_float+0xba>
 8015f86:	4653      	mov	r3, sl
 8015f88:	4642      	mov	r2, r8
 8015f8a:	4631      	mov	r1, r6
 8015f8c:	4628      	mov	r0, r5
 8015f8e:	47b8      	blx	r7
 8015f90:	3001      	adds	r0, #1
 8015f92:	d1e9      	bne.n	8015f68 <_printf_float+0x358>
 8015f94:	e699      	b.n	8015cca <_printf_float+0xba>
 8015f96:	2301      	movs	r3, #1
 8015f98:	464a      	mov	r2, r9
 8015f9a:	4631      	mov	r1, r6
 8015f9c:	4628      	mov	r0, r5
 8015f9e:	47b8      	blx	r7
 8015fa0:	3001      	adds	r0, #1
 8015fa2:	f43f ae92 	beq.w	8015cca <_printf_float+0xba>
 8015fa6:	f108 0801 	add.w	r8, r8, #1
 8015faa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015fae:	1a9b      	subs	r3, r3, r2
 8015fb0:	eba3 030a 	sub.w	r3, r3, sl
 8015fb4:	4543      	cmp	r3, r8
 8015fb6:	dcee      	bgt.n	8015f96 <_printf_float+0x386>
 8015fb8:	e74a      	b.n	8015e50 <_printf_float+0x240>
 8015fba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015fbc:	2a01      	cmp	r2, #1
 8015fbe:	dc01      	bgt.n	8015fc4 <_printf_float+0x3b4>
 8015fc0:	07db      	lsls	r3, r3, #31
 8015fc2:	d53a      	bpl.n	801603a <_printf_float+0x42a>
 8015fc4:	2301      	movs	r3, #1
 8015fc6:	4642      	mov	r2, r8
 8015fc8:	4631      	mov	r1, r6
 8015fca:	4628      	mov	r0, r5
 8015fcc:	47b8      	blx	r7
 8015fce:	3001      	adds	r0, #1
 8015fd0:	f43f ae7b 	beq.w	8015cca <_printf_float+0xba>
 8015fd4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015fd8:	4631      	mov	r1, r6
 8015fda:	4628      	mov	r0, r5
 8015fdc:	47b8      	blx	r7
 8015fde:	3001      	adds	r0, #1
 8015fe0:	f108 0801 	add.w	r8, r8, #1
 8015fe4:	f43f ae71 	beq.w	8015cca <_printf_float+0xba>
 8015fe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015fea:	2200      	movs	r2, #0
 8015fec:	f103 3aff 	add.w	sl, r3, #4294967295
 8015ff0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015ff4:	2300      	movs	r3, #0
 8015ff6:	f7ea fd67 	bl	8000ac8 <__aeabi_dcmpeq>
 8015ffa:	b9c8      	cbnz	r0, 8016030 <_printf_float+0x420>
 8015ffc:	4653      	mov	r3, sl
 8015ffe:	4642      	mov	r2, r8
 8016000:	4631      	mov	r1, r6
 8016002:	4628      	mov	r0, r5
 8016004:	47b8      	blx	r7
 8016006:	3001      	adds	r0, #1
 8016008:	d10e      	bne.n	8016028 <_printf_float+0x418>
 801600a:	e65e      	b.n	8015cca <_printf_float+0xba>
 801600c:	2301      	movs	r3, #1
 801600e:	4652      	mov	r2, sl
 8016010:	4631      	mov	r1, r6
 8016012:	4628      	mov	r0, r5
 8016014:	47b8      	blx	r7
 8016016:	3001      	adds	r0, #1
 8016018:	f43f ae57 	beq.w	8015cca <_printf_float+0xba>
 801601c:	f108 0801 	add.w	r8, r8, #1
 8016020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016022:	3b01      	subs	r3, #1
 8016024:	4543      	cmp	r3, r8
 8016026:	dcf1      	bgt.n	801600c <_printf_float+0x3fc>
 8016028:	464b      	mov	r3, r9
 801602a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801602e:	e6de      	b.n	8015dee <_printf_float+0x1de>
 8016030:	f04f 0800 	mov.w	r8, #0
 8016034:	f104 0a1a 	add.w	sl, r4, #26
 8016038:	e7f2      	b.n	8016020 <_printf_float+0x410>
 801603a:	2301      	movs	r3, #1
 801603c:	e7df      	b.n	8015ffe <_printf_float+0x3ee>
 801603e:	2301      	movs	r3, #1
 8016040:	464a      	mov	r2, r9
 8016042:	4631      	mov	r1, r6
 8016044:	4628      	mov	r0, r5
 8016046:	47b8      	blx	r7
 8016048:	3001      	adds	r0, #1
 801604a:	f43f ae3e 	beq.w	8015cca <_printf_float+0xba>
 801604e:	f108 0801 	add.w	r8, r8, #1
 8016052:	68e3      	ldr	r3, [r4, #12]
 8016054:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016056:	1a9b      	subs	r3, r3, r2
 8016058:	4543      	cmp	r3, r8
 801605a:	dcf0      	bgt.n	801603e <_printf_float+0x42e>
 801605c:	e6fc      	b.n	8015e58 <_printf_float+0x248>
 801605e:	f04f 0800 	mov.w	r8, #0
 8016062:	f104 0919 	add.w	r9, r4, #25
 8016066:	e7f4      	b.n	8016052 <_printf_float+0x442>
 8016068:	2900      	cmp	r1, #0
 801606a:	f43f ae8b 	beq.w	8015d84 <_printf_float+0x174>
 801606e:	2300      	movs	r3, #0
 8016070:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8016074:	ab09      	add	r3, sp, #36	; 0x24
 8016076:	9300      	str	r3, [sp, #0]
 8016078:	ec49 8b10 	vmov	d0, r8, r9
 801607c:	6022      	str	r2, [r4, #0]
 801607e:	f8cd a004 	str.w	sl, [sp, #4]
 8016082:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8016086:	4628      	mov	r0, r5
 8016088:	f7ff fd2e 	bl	8015ae8 <__cvt>
 801608c:	4680      	mov	r8, r0
 801608e:	e648      	b.n	8015d22 <_printf_float+0x112>

08016090 <_printf_common>:
 8016090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016094:	4691      	mov	r9, r2
 8016096:	461f      	mov	r7, r3
 8016098:	688a      	ldr	r2, [r1, #8]
 801609a:	690b      	ldr	r3, [r1, #16]
 801609c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80160a0:	4293      	cmp	r3, r2
 80160a2:	bfb8      	it	lt
 80160a4:	4613      	movlt	r3, r2
 80160a6:	f8c9 3000 	str.w	r3, [r9]
 80160aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80160ae:	4606      	mov	r6, r0
 80160b0:	460c      	mov	r4, r1
 80160b2:	b112      	cbz	r2, 80160ba <_printf_common+0x2a>
 80160b4:	3301      	adds	r3, #1
 80160b6:	f8c9 3000 	str.w	r3, [r9]
 80160ba:	6823      	ldr	r3, [r4, #0]
 80160bc:	0699      	lsls	r1, r3, #26
 80160be:	bf42      	ittt	mi
 80160c0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80160c4:	3302      	addmi	r3, #2
 80160c6:	f8c9 3000 	strmi.w	r3, [r9]
 80160ca:	6825      	ldr	r5, [r4, #0]
 80160cc:	f015 0506 	ands.w	r5, r5, #6
 80160d0:	d107      	bne.n	80160e2 <_printf_common+0x52>
 80160d2:	f104 0a19 	add.w	sl, r4, #25
 80160d6:	68e3      	ldr	r3, [r4, #12]
 80160d8:	f8d9 2000 	ldr.w	r2, [r9]
 80160dc:	1a9b      	subs	r3, r3, r2
 80160de:	42ab      	cmp	r3, r5
 80160e0:	dc28      	bgt.n	8016134 <_printf_common+0xa4>
 80160e2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80160e6:	6822      	ldr	r2, [r4, #0]
 80160e8:	3300      	adds	r3, #0
 80160ea:	bf18      	it	ne
 80160ec:	2301      	movne	r3, #1
 80160ee:	0692      	lsls	r2, r2, #26
 80160f0:	d42d      	bmi.n	801614e <_printf_common+0xbe>
 80160f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80160f6:	4639      	mov	r1, r7
 80160f8:	4630      	mov	r0, r6
 80160fa:	47c0      	blx	r8
 80160fc:	3001      	adds	r0, #1
 80160fe:	d020      	beq.n	8016142 <_printf_common+0xb2>
 8016100:	6823      	ldr	r3, [r4, #0]
 8016102:	68e5      	ldr	r5, [r4, #12]
 8016104:	f8d9 2000 	ldr.w	r2, [r9]
 8016108:	f003 0306 	and.w	r3, r3, #6
 801610c:	2b04      	cmp	r3, #4
 801610e:	bf08      	it	eq
 8016110:	1aad      	subeq	r5, r5, r2
 8016112:	68a3      	ldr	r3, [r4, #8]
 8016114:	6922      	ldr	r2, [r4, #16]
 8016116:	bf0c      	ite	eq
 8016118:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801611c:	2500      	movne	r5, #0
 801611e:	4293      	cmp	r3, r2
 8016120:	bfc4      	itt	gt
 8016122:	1a9b      	subgt	r3, r3, r2
 8016124:	18ed      	addgt	r5, r5, r3
 8016126:	f04f 0900 	mov.w	r9, #0
 801612a:	341a      	adds	r4, #26
 801612c:	454d      	cmp	r5, r9
 801612e:	d11a      	bne.n	8016166 <_printf_common+0xd6>
 8016130:	2000      	movs	r0, #0
 8016132:	e008      	b.n	8016146 <_printf_common+0xb6>
 8016134:	2301      	movs	r3, #1
 8016136:	4652      	mov	r2, sl
 8016138:	4639      	mov	r1, r7
 801613a:	4630      	mov	r0, r6
 801613c:	47c0      	blx	r8
 801613e:	3001      	adds	r0, #1
 8016140:	d103      	bne.n	801614a <_printf_common+0xba>
 8016142:	f04f 30ff 	mov.w	r0, #4294967295
 8016146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801614a:	3501      	adds	r5, #1
 801614c:	e7c3      	b.n	80160d6 <_printf_common+0x46>
 801614e:	18e1      	adds	r1, r4, r3
 8016150:	1c5a      	adds	r2, r3, #1
 8016152:	2030      	movs	r0, #48	; 0x30
 8016154:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016158:	4422      	add	r2, r4
 801615a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801615e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016162:	3302      	adds	r3, #2
 8016164:	e7c5      	b.n	80160f2 <_printf_common+0x62>
 8016166:	2301      	movs	r3, #1
 8016168:	4622      	mov	r2, r4
 801616a:	4639      	mov	r1, r7
 801616c:	4630      	mov	r0, r6
 801616e:	47c0      	blx	r8
 8016170:	3001      	adds	r0, #1
 8016172:	d0e6      	beq.n	8016142 <_printf_common+0xb2>
 8016174:	f109 0901 	add.w	r9, r9, #1
 8016178:	e7d8      	b.n	801612c <_printf_common+0x9c>
	...

0801617c <_printf_i>:
 801617c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016180:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8016184:	460c      	mov	r4, r1
 8016186:	7e09      	ldrb	r1, [r1, #24]
 8016188:	b085      	sub	sp, #20
 801618a:	296e      	cmp	r1, #110	; 0x6e
 801618c:	4617      	mov	r7, r2
 801618e:	4606      	mov	r6, r0
 8016190:	4698      	mov	r8, r3
 8016192:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016194:	f000 80b3 	beq.w	80162fe <_printf_i+0x182>
 8016198:	d822      	bhi.n	80161e0 <_printf_i+0x64>
 801619a:	2963      	cmp	r1, #99	; 0x63
 801619c:	d036      	beq.n	801620c <_printf_i+0x90>
 801619e:	d80a      	bhi.n	80161b6 <_printf_i+0x3a>
 80161a0:	2900      	cmp	r1, #0
 80161a2:	f000 80b9 	beq.w	8016318 <_printf_i+0x19c>
 80161a6:	2958      	cmp	r1, #88	; 0x58
 80161a8:	f000 8083 	beq.w	80162b2 <_printf_i+0x136>
 80161ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80161b0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80161b4:	e032      	b.n	801621c <_printf_i+0xa0>
 80161b6:	2964      	cmp	r1, #100	; 0x64
 80161b8:	d001      	beq.n	80161be <_printf_i+0x42>
 80161ba:	2969      	cmp	r1, #105	; 0x69
 80161bc:	d1f6      	bne.n	80161ac <_printf_i+0x30>
 80161be:	6820      	ldr	r0, [r4, #0]
 80161c0:	6813      	ldr	r3, [r2, #0]
 80161c2:	0605      	lsls	r5, r0, #24
 80161c4:	f103 0104 	add.w	r1, r3, #4
 80161c8:	d52a      	bpl.n	8016220 <_printf_i+0xa4>
 80161ca:	681b      	ldr	r3, [r3, #0]
 80161cc:	6011      	str	r1, [r2, #0]
 80161ce:	2b00      	cmp	r3, #0
 80161d0:	da03      	bge.n	80161da <_printf_i+0x5e>
 80161d2:	222d      	movs	r2, #45	; 0x2d
 80161d4:	425b      	negs	r3, r3
 80161d6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80161da:	486f      	ldr	r0, [pc, #444]	; (8016398 <_printf_i+0x21c>)
 80161dc:	220a      	movs	r2, #10
 80161de:	e039      	b.n	8016254 <_printf_i+0xd8>
 80161e0:	2973      	cmp	r1, #115	; 0x73
 80161e2:	f000 809d 	beq.w	8016320 <_printf_i+0x1a4>
 80161e6:	d808      	bhi.n	80161fa <_printf_i+0x7e>
 80161e8:	296f      	cmp	r1, #111	; 0x6f
 80161ea:	d020      	beq.n	801622e <_printf_i+0xb2>
 80161ec:	2970      	cmp	r1, #112	; 0x70
 80161ee:	d1dd      	bne.n	80161ac <_printf_i+0x30>
 80161f0:	6823      	ldr	r3, [r4, #0]
 80161f2:	f043 0320 	orr.w	r3, r3, #32
 80161f6:	6023      	str	r3, [r4, #0]
 80161f8:	e003      	b.n	8016202 <_printf_i+0x86>
 80161fa:	2975      	cmp	r1, #117	; 0x75
 80161fc:	d017      	beq.n	801622e <_printf_i+0xb2>
 80161fe:	2978      	cmp	r1, #120	; 0x78
 8016200:	d1d4      	bne.n	80161ac <_printf_i+0x30>
 8016202:	2378      	movs	r3, #120	; 0x78
 8016204:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016208:	4864      	ldr	r0, [pc, #400]	; (801639c <_printf_i+0x220>)
 801620a:	e055      	b.n	80162b8 <_printf_i+0x13c>
 801620c:	6813      	ldr	r3, [r2, #0]
 801620e:	1d19      	adds	r1, r3, #4
 8016210:	681b      	ldr	r3, [r3, #0]
 8016212:	6011      	str	r1, [r2, #0]
 8016214:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016218:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801621c:	2301      	movs	r3, #1
 801621e:	e08c      	b.n	801633a <_printf_i+0x1be>
 8016220:	681b      	ldr	r3, [r3, #0]
 8016222:	6011      	str	r1, [r2, #0]
 8016224:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016228:	bf18      	it	ne
 801622a:	b21b      	sxthne	r3, r3
 801622c:	e7cf      	b.n	80161ce <_printf_i+0x52>
 801622e:	6813      	ldr	r3, [r2, #0]
 8016230:	6825      	ldr	r5, [r4, #0]
 8016232:	1d18      	adds	r0, r3, #4
 8016234:	6010      	str	r0, [r2, #0]
 8016236:	0628      	lsls	r0, r5, #24
 8016238:	d501      	bpl.n	801623e <_printf_i+0xc2>
 801623a:	681b      	ldr	r3, [r3, #0]
 801623c:	e002      	b.n	8016244 <_printf_i+0xc8>
 801623e:	0668      	lsls	r0, r5, #25
 8016240:	d5fb      	bpl.n	801623a <_printf_i+0xbe>
 8016242:	881b      	ldrh	r3, [r3, #0]
 8016244:	4854      	ldr	r0, [pc, #336]	; (8016398 <_printf_i+0x21c>)
 8016246:	296f      	cmp	r1, #111	; 0x6f
 8016248:	bf14      	ite	ne
 801624a:	220a      	movne	r2, #10
 801624c:	2208      	moveq	r2, #8
 801624e:	2100      	movs	r1, #0
 8016250:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016254:	6865      	ldr	r5, [r4, #4]
 8016256:	60a5      	str	r5, [r4, #8]
 8016258:	2d00      	cmp	r5, #0
 801625a:	f2c0 8095 	blt.w	8016388 <_printf_i+0x20c>
 801625e:	6821      	ldr	r1, [r4, #0]
 8016260:	f021 0104 	bic.w	r1, r1, #4
 8016264:	6021      	str	r1, [r4, #0]
 8016266:	2b00      	cmp	r3, #0
 8016268:	d13d      	bne.n	80162e6 <_printf_i+0x16a>
 801626a:	2d00      	cmp	r5, #0
 801626c:	f040 808e 	bne.w	801638c <_printf_i+0x210>
 8016270:	4665      	mov	r5, ip
 8016272:	2a08      	cmp	r2, #8
 8016274:	d10b      	bne.n	801628e <_printf_i+0x112>
 8016276:	6823      	ldr	r3, [r4, #0]
 8016278:	07db      	lsls	r3, r3, #31
 801627a:	d508      	bpl.n	801628e <_printf_i+0x112>
 801627c:	6923      	ldr	r3, [r4, #16]
 801627e:	6862      	ldr	r2, [r4, #4]
 8016280:	429a      	cmp	r2, r3
 8016282:	bfde      	ittt	le
 8016284:	2330      	movle	r3, #48	; 0x30
 8016286:	f805 3c01 	strble.w	r3, [r5, #-1]
 801628a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801628e:	ebac 0305 	sub.w	r3, ip, r5
 8016292:	6123      	str	r3, [r4, #16]
 8016294:	f8cd 8000 	str.w	r8, [sp]
 8016298:	463b      	mov	r3, r7
 801629a:	aa03      	add	r2, sp, #12
 801629c:	4621      	mov	r1, r4
 801629e:	4630      	mov	r0, r6
 80162a0:	f7ff fef6 	bl	8016090 <_printf_common>
 80162a4:	3001      	adds	r0, #1
 80162a6:	d14d      	bne.n	8016344 <_printf_i+0x1c8>
 80162a8:	f04f 30ff 	mov.w	r0, #4294967295
 80162ac:	b005      	add	sp, #20
 80162ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80162b2:	4839      	ldr	r0, [pc, #228]	; (8016398 <_printf_i+0x21c>)
 80162b4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80162b8:	6813      	ldr	r3, [r2, #0]
 80162ba:	6821      	ldr	r1, [r4, #0]
 80162bc:	1d1d      	adds	r5, r3, #4
 80162be:	681b      	ldr	r3, [r3, #0]
 80162c0:	6015      	str	r5, [r2, #0]
 80162c2:	060a      	lsls	r2, r1, #24
 80162c4:	d50b      	bpl.n	80162de <_printf_i+0x162>
 80162c6:	07ca      	lsls	r2, r1, #31
 80162c8:	bf44      	itt	mi
 80162ca:	f041 0120 	orrmi.w	r1, r1, #32
 80162ce:	6021      	strmi	r1, [r4, #0]
 80162d0:	b91b      	cbnz	r3, 80162da <_printf_i+0x15e>
 80162d2:	6822      	ldr	r2, [r4, #0]
 80162d4:	f022 0220 	bic.w	r2, r2, #32
 80162d8:	6022      	str	r2, [r4, #0]
 80162da:	2210      	movs	r2, #16
 80162dc:	e7b7      	b.n	801624e <_printf_i+0xd2>
 80162de:	064d      	lsls	r5, r1, #25
 80162e0:	bf48      	it	mi
 80162e2:	b29b      	uxthmi	r3, r3
 80162e4:	e7ef      	b.n	80162c6 <_printf_i+0x14a>
 80162e6:	4665      	mov	r5, ip
 80162e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80162ec:	fb02 3311 	mls	r3, r2, r1, r3
 80162f0:	5cc3      	ldrb	r3, [r0, r3]
 80162f2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80162f6:	460b      	mov	r3, r1
 80162f8:	2900      	cmp	r1, #0
 80162fa:	d1f5      	bne.n	80162e8 <_printf_i+0x16c>
 80162fc:	e7b9      	b.n	8016272 <_printf_i+0xf6>
 80162fe:	6813      	ldr	r3, [r2, #0]
 8016300:	6825      	ldr	r5, [r4, #0]
 8016302:	6961      	ldr	r1, [r4, #20]
 8016304:	1d18      	adds	r0, r3, #4
 8016306:	6010      	str	r0, [r2, #0]
 8016308:	0628      	lsls	r0, r5, #24
 801630a:	681b      	ldr	r3, [r3, #0]
 801630c:	d501      	bpl.n	8016312 <_printf_i+0x196>
 801630e:	6019      	str	r1, [r3, #0]
 8016310:	e002      	b.n	8016318 <_printf_i+0x19c>
 8016312:	066a      	lsls	r2, r5, #25
 8016314:	d5fb      	bpl.n	801630e <_printf_i+0x192>
 8016316:	8019      	strh	r1, [r3, #0]
 8016318:	2300      	movs	r3, #0
 801631a:	6123      	str	r3, [r4, #16]
 801631c:	4665      	mov	r5, ip
 801631e:	e7b9      	b.n	8016294 <_printf_i+0x118>
 8016320:	6813      	ldr	r3, [r2, #0]
 8016322:	1d19      	adds	r1, r3, #4
 8016324:	6011      	str	r1, [r2, #0]
 8016326:	681d      	ldr	r5, [r3, #0]
 8016328:	6862      	ldr	r2, [r4, #4]
 801632a:	2100      	movs	r1, #0
 801632c:	4628      	mov	r0, r5
 801632e:	f7e9 ff57 	bl	80001e0 <memchr>
 8016332:	b108      	cbz	r0, 8016338 <_printf_i+0x1bc>
 8016334:	1b40      	subs	r0, r0, r5
 8016336:	6060      	str	r0, [r4, #4]
 8016338:	6863      	ldr	r3, [r4, #4]
 801633a:	6123      	str	r3, [r4, #16]
 801633c:	2300      	movs	r3, #0
 801633e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016342:	e7a7      	b.n	8016294 <_printf_i+0x118>
 8016344:	6923      	ldr	r3, [r4, #16]
 8016346:	462a      	mov	r2, r5
 8016348:	4639      	mov	r1, r7
 801634a:	4630      	mov	r0, r6
 801634c:	47c0      	blx	r8
 801634e:	3001      	adds	r0, #1
 8016350:	d0aa      	beq.n	80162a8 <_printf_i+0x12c>
 8016352:	6823      	ldr	r3, [r4, #0]
 8016354:	079b      	lsls	r3, r3, #30
 8016356:	d413      	bmi.n	8016380 <_printf_i+0x204>
 8016358:	68e0      	ldr	r0, [r4, #12]
 801635a:	9b03      	ldr	r3, [sp, #12]
 801635c:	4298      	cmp	r0, r3
 801635e:	bfb8      	it	lt
 8016360:	4618      	movlt	r0, r3
 8016362:	e7a3      	b.n	80162ac <_printf_i+0x130>
 8016364:	2301      	movs	r3, #1
 8016366:	464a      	mov	r2, r9
 8016368:	4639      	mov	r1, r7
 801636a:	4630      	mov	r0, r6
 801636c:	47c0      	blx	r8
 801636e:	3001      	adds	r0, #1
 8016370:	d09a      	beq.n	80162a8 <_printf_i+0x12c>
 8016372:	3501      	adds	r5, #1
 8016374:	68e3      	ldr	r3, [r4, #12]
 8016376:	9a03      	ldr	r2, [sp, #12]
 8016378:	1a9b      	subs	r3, r3, r2
 801637a:	42ab      	cmp	r3, r5
 801637c:	dcf2      	bgt.n	8016364 <_printf_i+0x1e8>
 801637e:	e7eb      	b.n	8016358 <_printf_i+0x1dc>
 8016380:	2500      	movs	r5, #0
 8016382:	f104 0919 	add.w	r9, r4, #25
 8016386:	e7f5      	b.n	8016374 <_printf_i+0x1f8>
 8016388:	2b00      	cmp	r3, #0
 801638a:	d1ac      	bne.n	80162e6 <_printf_i+0x16a>
 801638c:	7803      	ldrb	r3, [r0, #0]
 801638e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016392:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016396:	e76c      	b.n	8016272 <_printf_i+0xf6>
 8016398:	0801b316 	.word	0x0801b316
 801639c:	0801b327 	.word	0x0801b327

080163a0 <_scanf_float>:
 80163a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163a4:	469a      	mov	sl, r3
 80163a6:	688b      	ldr	r3, [r1, #8]
 80163a8:	4616      	mov	r6, r2
 80163aa:	1e5a      	subs	r2, r3, #1
 80163ac:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80163b0:	b087      	sub	sp, #28
 80163b2:	bf83      	ittte	hi
 80163b4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80163b8:	189b      	addhi	r3, r3, r2
 80163ba:	9301      	strhi	r3, [sp, #4]
 80163bc:	2300      	movls	r3, #0
 80163be:	bf86      	itte	hi
 80163c0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80163c4:	608b      	strhi	r3, [r1, #8]
 80163c6:	9301      	strls	r3, [sp, #4]
 80163c8:	680b      	ldr	r3, [r1, #0]
 80163ca:	4688      	mov	r8, r1
 80163cc:	f04f 0b00 	mov.w	fp, #0
 80163d0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80163d4:	f848 3b1c 	str.w	r3, [r8], #28
 80163d8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80163dc:	4607      	mov	r7, r0
 80163de:	460c      	mov	r4, r1
 80163e0:	4645      	mov	r5, r8
 80163e2:	465a      	mov	r2, fp
 80163e4:	46d9      	mov	r9, fp
 80163e6:	f8cd b008 	str.w	fp, [sp, #8]
 80163ea:	68a1      	ldr	r1, [r4, #8]
 80163ec:	b181      	cbz	r1, 8016410 <_scanf_float+0x70>
 80163ee:	6833      	ldr	r3, [r6, #0]
 80163f0:	781b      	ldrb	r3, [r3, #0]
 80163f2:	2b49      	cmp	r3, #73	; 0x49
 80163f4:	d071      	beq.n	80164da <_scanf_float+0x13a>
 80163f6:	d84d      	bhi.n	8016494 <_scanf_float+0xf4>
 80163f8:	2b39      	cmp	r3, #57	; 0x39
 80163fa:	d840      	bhi.n	801647e <_scanf_float+0xde>
 80163fc:	2b31      	cmp	r3, #49	; 0x31
 80163fe:	f080 8088 	bcs.w	8016512 <_scanf_float+0x172>
 8016402:	2b2d      	cmp	r3, #45	; 0x2d
 8016404:	f000 8090 	beq.w	8016528 <_scanf_float+0x188>
 8016408:	d815      	bhi.n	8016436 <_scanf_float+0x96>
 801640a:	2b2b      	cmp	r3, #43	; 0x2b
 801640c:	f000 808c 	beq.w	8016528 <_scanf_float+0x188>
 8016410:	f1b9 0f00 	cmp.w	r9, #0
 8016414:	d003      	beq.n	801641e <_scanf_float+0x7e>
 8016416:	6823      	ldr	r3, [r4, #0]
 8016418:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801641c:	6023      	str	r3, [r4, #0]
 801641e:	3a01      	subs	r2, #1
 8016420:	2a01      	cmp	r2, #1
 8016422:	f200 80ea 	bhi.w	80165fa <_scanf_float+0x25a>
 8016426:	4545      	cmp	r5, r8
 8016428:	f200 80dc 	bhi.w	80165e4 <_scanf_float+0x244>
 801642c:	2601      	movs	r6, #1
 801642e:	4630      	mov	r0, r6
 8016430:	b007      	add	sp, #28
 8016432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016436:	2b2e      	cmp	r3, #46	; 0x2e
 8016438:	f000 809f 	beq.w	801657a <_scanf_float+0x1da>
 801643c:	2b30      	cmp	r3, #48	; 0x30
 801643e:	d1e7      	bne.n	8016410 <_scanf_float+0x70>
 8016440:	6820      	ldr	r0, [r4, #0]
 8016442:	f410 7f80 	tst.w	r0, #256	; 0x100
 8016446:	d064      	beq.n	8016512 <_scanf_float+0x172>
 8016448:	9b01      	ldr	r3, [sp, #4]
 801644a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 801644e:	6020      	str	r0, [r4, #0]
 8016450:	f109 0901 	add.w	r9, r9, #1
 8016454:	b11b      	cbz	r3, 801645e <_scanf_float+0xbe>
 8016456:	3b01      	subs	r3, #1
 8016458:	3101      	adds	r1, #1
 801645a:	9301      	str	r3, [sp, #4]
 801645c:	60a1      	str	r1, [r4, #8]
 801645e:	68a3      	ldr	r3, [r4, #8]
 8016460:	3b01      	subs	r3, #1
 8016462:	60a3      	str	r3, [r4, #8]
 8016464:	6923      	ldr	r3, [r4, #16]
 8016466:	3301      	adds	r3, #1
 8016468:	6123      	str	r3, [r4, #16]
 801646a:	6873      	ldr	r3, [r6, #4]
 801646c:	3b01      	subs	r3, #1
 801646e:	2b00      	cmp	r3, #0
 8016470:	6073      	str	r3, [r6, #4]
 8016472:	f340 80ac 	ble.w	80165ce <_scanf_float+0x22e>
 8016476:	6833      	ldr	r3, [r6, #0]
 8016478:	3301      	adds	r3, #1
 801647a:	6033      	str	r3, [r6, #0]
 801647c:	e7b5      	b.n	80163ea <_scanf_float+0x4a>
 801647e:	2b45      	cmp	r3, #69	; 0x45
 8016480:	f000 8085 	beq.w	801658e <_scanf_float+0x1ee>
 8016484:	2b46      	cmp	r3, #70	; 0x46
 8016486:	d06a      	beq.n	801655e <_scanf_float+0x1be>
 8016488:	2b41      	cmp	r3, #65	; 0x41
 801648a:	d1c1      	bne.n	8016410 <_scanf_float+0x70>
 801648c:	2a01      	cmp	r2, #1
 801648e:	d1bf      	bne.n	8016410 <_scanf_float+0x70>
 8016490:	2202      	movs	r2, #2
 8016492:	e046      	b.n	8016522 <_scanf_float+0x182>
 8016494:	2b65      	cmp	r3, #101	; 0x65
 8016496:	d07a      	beq.n	801658e <_scanf_float+0x1ee>
 8016498:	d818      	bhi.n	80164cc <_scanf_float+0x12c>
 801649a:	2b54      	cmp	r3, #84	; 0x54
 801649c:	d066      	beq.n	801656c <_scanf_float+0x1cc>
 801649e:	d811      	bhi.n	80164c4 <_scanf_float+0x124>
 80164a0:	2b4e      	cmp	r3, #78	; 0x4e
 80164a2:	d1b5      	bne.n	8016410 <_scanf_float+0x70>
 80164a4:	2a00      	cmp	r2, #0
 80164a6:	d146      	bne.n	8016536 <_scanf_float+0x196>
 80164a8:	f1b9 0f00 	cmp.w	r9, #0
 80164ac:	d145      	bne.n	801653a <_scanf_float+0x19a>
 80164ae:	6821      	ldr	r1, [r4, #0]
 80164b0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80164b4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80164b8:	d13f      	bne.n	801653a <_scanf_float+0x19a>
 80164ba:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80164be:	6021      	str	r1, [r4, #0]
 80164c0:	2201      	movs	r2, #1
 80164c2:	e02e      	b.n	8016522 <_scanf_float+0x182>
 80164c4:	2b59      	cmp	r3, #89	; 0x59
 80164c6:	d01e      	beq.n	8016506 <_scanf_float+0x166>
 80164c8:	2b61      	cmp	r3, #97	; 0x61
 80164ca:	e7de      	b.n	801648a <_scanf_float+0xea>
 80164cc:	2b6e      	cmp	r3, #110	; 0x6e
 80164ce:	d0e9      	beq.n	80164a4 <_scanf_float+0x104>
 80164d0:	d815      	bhi.n	80164fe <_scanf_float+0x15e>
 80164d2:	2b66      	cmp	r3, #102	; 0x66
 80164d4:	d043      	beq.n	801655e <_scanf_float+0x1be>
 80164d6:	2b69      	cmp	r3, #105	; 0x69
 80164d8:	d19a      	bne.n	8016410 <_scanf_float+0x70>
 80164da:	f1bb 0f00 	cmp.w	fp, #0
 80164de:	d138      	bne.n	8016552 <_scanf_float+0x1b2>
 80164e0:	f1b9 0f00 	cmp.w	r9, #0
 80164e4:	d197      	bne.n	8016416 <_scanf_float+0x76>
 80164e6:	6821      	ldr	r1, [r4, #0]
 80164e8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80164ec:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80164f0:	d195      	bne.n	801641e <_scanf_float+0x7e>
 80164f2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80164f6:	6021      	str	r1, [r4, #0]
 80164f8:	f04f 0b01 	mov.w	fp, #1
 80164fc:	e011      	b.n	8016522 <_scanf_float+0x182>
 80164fe:	2b74      	cmp	r3, #116	; 0x74
 8016500:	d034      	beq.n	801656c <_scanf_float+0x1cc>
 8016502:	2b79      	cmp	r3, #121	; 0x79
 8016504:	d184      	bne.n	8016410 <_scanf_float+0x70>
 8016506:	f1bb 0f07 	cmp.w	fp, #7
 801650a:	d181      	bne.n	8016410 <_scanf_float+0x70>
 801650c:	f04f 0b08 	mov.w	fp, #8
 8016510:	e007      	b.n	8016522 <_scanf_float+0x182>
 8016512:	eb12 0f0b 	cmn.w	r2, fp
 8016516:	f47f af7b 	bne.w	8016410 <_scanf_float+0x70>
 801651a:	6821      	ldr	r1, [r4, #0]
 801651c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8016520:	6021      	str	r1, [r4, #0]
 8016522:	702b      	strb	r3, [r5, #0]
 8016524:	3501      	adds	r5, #1
 8016526:	e79a      	b.n	801645e <_scanf_float+0xbe>
 8016528:	6821      	ldr	r1, [r4, #0]
 801652a:	0608      	lsls	r0, r1, #24
 801652c:	f57f af70 	bpl.w	8016410 <_scanf_float+0x70>
 8016530:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8016534:	e7f4      	b.n	8016520 <_scanf_float+0x180>
 8016536:	2a02      	cmp	r2, #2
 8016538:	d047      	beq.n	80165ca <_scanf_float+0x22a>
 801653a:	f1bb 0f01 	cmp.w	fp, #1
 801653e:	d003      	beq.n	8016548 <_scanf_float+0x1a8>
 8016540:	f1bb 0f04 	cmp.w	fp, #4
 8016544:	f47f af64 	bne.w	8016410 <_scanf_float+0x70>
 8016548:	f10b 0b01 	add.w	fp, fp, #1
 801654c:	fa5f fb8b 	uxtb.w	fp, fp
 8016550:	e7e7      	b.n	8016522 <_scanf_float+0x182>
 8016552:	f1bb 0f03 	cmp.w	fp, #3
 8016556:	d0f7      	beq.n	8016548 <_scanf_float+0x1a8>
 8016558:	f1bb 0f05 	cmp.w	fp, #5
 801655c:	e7f2      	b.n	8016544 <_scanf_float+0x1a4>
 801655e:	f1bb 0f02 	cmp.w	fp, #2
 8016562:	f47f af55 	bne.w	8016410 <_scanf_float+0x70>
 8016566:	f04f 0b03 	mov.w	fp, #3
 801656a:	e7da      	b.n	8016522 <_scanf_float+0x182>
 801656c:	f1bb 0f06 	cmp.w	fp, #6
 8016570:	f47f af4e 	bne.w	8016410 <_scanf_float+0x70>
 8016574:	f04f 0b07 	mov.w	fp, #7
 8016578:	e7d3      	b.n	8016522 <_scanf_float+0x182>
 801657a:	6821      	ldr	r1, [r4, #0]
 801657c:	0588      	lsls	r0, r1, #22
 801657e:	f57f af47 	bpl.w	8016410 <_scanf_float+0x70>
 8016582:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8016586:	6021      	str	r1, [r4, #0]
 8016588:	f8cd 9008 	str.w	r9, [sp, #8]
 801658c:	e7c9      	b.n	8016522 <_scanf_float+0x182>
 801658e:	6821      	ldr	r1, [r4, #0]
 8016590:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8016594:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8016598:	d006      	beq.n	80165a8 <_scanf_float+0x208>
 801659a:	0548      	lsls	r0, r1, #21
 801659c:	f57f af38 	bpl.w	8016410 <_scanf_float+0x70>
 80165a0:	f1b9 0f00 	cmp.w	r9, #0
 80165a4:	f43f af3b 	beq.w	801641e <_scanf_float+0x7e>
 80165a8:	0588      	lsls	r0, r1, #22
 80165aa:	bf58      	it	pl
 80165ac:	9802      	ldrpl	r0, [sp, #8]
 80165ae:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80165b2:	bf58      	it	pl
 80165b4:	eba9 0000 	subpl.w	r0, r9, r0
 80165b8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80165bc:	bf58      	it	pl
 80165be:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80165c2:	6021      	str	r1, [r4, #0]
 80165c4:	f04f 0900 	mov.w	r9, #0
 80165c8:	e7ab      	b.n	8016522 <_scanf_float+0x182>
 80165ca:	2203      	movs	r2, #3
 80165cc:	e7a9      	b.n	8016522 <_scanf_float+0x182>
 80165ce:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80165d2:	9205      	str	r2, [sp, #20]
 80165d4:	4631      	mov	r1, r6
 80165d6:	4638      	mov	r0, r7
 80165d8:	4798      	blx	r3
 80165da:	9a05      	ldr	r2, [sp, #20]
 80165dc:	2800      	cmp	r0, #0
 80165de:	f43f af04 	beq.w	80163ea <_scanf_float+0x4a>
 80165e2:	e715      	b.n	8016410 <_scanf_float+0x70>
 80165e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80165e8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80165ec:	4632      	mov	r2, r6
 80165ee:	4638      	mov	r0, r7
 80165f0:	4798      	blx	r3
 80165f2:	6923      	ldr	r3, [r4, #16]
 80165f4:	3b01      	subs	r3, #1
 80165f6:	6123      	str	r3, [r4, #16]
 80165f8:	e715      	b.n	8016426 <_scanf_float+0x86>
 80165fa:	f10b 33ff 	add.w	r3, fp, #4294967295
 80165fe:	2b06      	cmp	r3, #6
 8016600:	d80a      	bhi.n	8016618 <_scanf_float+0x278>
 8016602:	f1bb 0f02 	cmp.w	fp, #2
 8016606:	d968      	bls.n	80166da <_scanf_float+0x33a>
 8016608:	f1ab 0b03 	sub.w	fp, fp, #3
 801660c:	fa5f fb8b 	uxtb.w	fp, fp
 8016610:	eba5 0b0b 	sub.w	fp, r5, fp
 8016614:	455d      	cmp	r5, fp
 8016616:	d14b      	bne.n	80166b0 <_scanf_float+0x310>
 8016618:	6823      	ldr	r3, [r4, #0]
 801661a:	05da      	lsls	r2, r3, #23
 801661c:	d51f      	bpl.n	801665e <_scanf_float+0x2be>
 801661e:	055b      	lsls	r3, r3, #21
 8016620:	d468      	bmi.n	80166f4 <_scanf_float+0x354>
 8016622:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016626:	6923      	ldr	r3, [r4, #16]
 8016628:	2965      	cmp	r1, #101	; 0x65
 801662a:	f103 33ff 	add.w	r3, r3, #4294967295
 801662e:	f105 3bff 	add.w	fp, r5, #4294967295
 8016632:	6123      	str	r3, [r4, #16]
 8016634:	d00d      	beq.n	8016652 <_scanf_float+0x2b2>
 8016636:	2945      	cmp	r1, #69	; 0x45
 8016638:	d00b      	beq.n	8016652 <_scanf_float+0x2b2>
 801663a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801663e:	4632      	mov	r2, r6
 8016640:	4638      	mov	r0, r7
 8016642:	4798      	blx	r3
 8016644:	6923      	ldr	r3, [r4, #16]
 8016646:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 801664a:	3b01      	subs	r3, #1
 801664c:	f1a5 0b02 	sub.w	fp, r5, #2
 8016650:	6123      	str	r3, [r4, #16]
 8016652:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016656:	4632      	mov	r2, r6
 8016658:	4638      	mov	r0, r7
 801665a:	4798      	blx	r3
 801665c:	465d      	mov	r5, fp
 801665e:	6826      	ldr	r6, [r4, #0]
 8016660:	f016 0610 	ands.w	r6, r6, #16
 8016664:	d17a      	bne.n	801675c <_scanf_float+0x3bc>
 8016666:	702e      	strb	r6, [r5, #0]
 8016668:	6823      	ldr	r3, [r4, #0]
 801666a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801666e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016672:	d142      	bne.n	80166fa <_scanf_float+0x35a>
 8016674:	9b02      	ldr	r3, [sp, #8]
 8016676:	eba9 0303 	sub.w	r3, r9, r3
 801667a:	425a      	negs	r2, r3
 801667c:	2b00      	cmp	r3, #0
 801667e:	d149      	bne.n	8016714 <_scanf_float+0x374>
 8016680:	2200      	movs	r2, #0
 8016682:	4641      	mov	r1, r8
 8016684:	4638      	mov	r0, r7
 8016686:	f000 fee7 	bl	8017458 <_strtod_r>
 801668a:	6825      	ldr	r5, [r4, #0]
 801668c:	f8da 3000 	ldr.w	r3, [sl]
 8016690:	f015 0f02 	tst.w	r5, #2
 8016694:	f103 0204 	add.w	r2, r3, #4
 8016698:	ec59 8b10 	vmov	r8, r9, d0
 801669c:	f8ca 2000 	str.w	r2, [sl]
 80166a0:	d043      	beq.n	801672a <_scanf_float+0x38a>
 80166a2:	681b      	ldr	r3, [r3, #0]
 80166a4:	e9c3 8900 	strd	r8, r9, [r3]
 80166a8:	68e3      	ldr	r3, [r4, #12]
 80166aa:	3301      	adds	r3, #1
 80166ac:	60e3      	str	r3, [r4, #12]
 80166ae:	e6be      	b.n	801642e <_scanf_float+0x8e>
 80166b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80166b4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80166b8:	4632      	mov	r2, r6
 80166ba:	4638      	mov	r0, r7
 80166bc:	4798      	blx	r3
 80166be:	6923      	ldr	r3, [r4, #16]
 80166c0:	3b01      	subs	r3, #1
 80166c2:	6123      	str	r3, [r4, #16]
 80166c4:	e7a6      	b.n	8016614 <_scanf_float+0x274>
 80166c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80166ca:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80166ce:	4632      	mov	r2, r6
 80166d0:	4638      	mov	r0, r7
 80166d2:	4798      	blx	r3
 80166d4:	6923      	ldr	r3, [r4, #16]
 80166d6:	3b01      	subs	r3, #1
 80166d8:	6123      	str	r3, [r4, #16]
 80166da:	4545      	cmp	r5, r8
 80166dc:	d8f3      	bhi.n	80166c6 <_scanf_float+0x326>
 80166de:	e6a5      	b.n	801642c <_scanf_float+0x8c>
 80166e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80166e4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80166e8:	4632      	mov	r2, r6
 80166ea:	4638      	mov	r0, r7
 80166ec:	4798      	blx	r3
 80166ee:	6923      	ldr	r3, [r4, #16]
 80166f0:	3b01      	subs	r3, #1
 80166f2:	6123      	str	r3, [r4, #16]
 80166f4:	4545      	cmp	r5, r8
 80166f6:	d8f3      	bhi.n	80166e0 <_scanf_float+0x340>
 80166f8:	e698      	b.n	801642c <_scanf_float+0x8c>
 80166fa:	9b03      	ldr	r3, [sp, #12]
 80166fc:	2b00      	cmp	r3, #0
 80166fe:	d0bf      	beq.n	8016680 <_scanf_float+0x2e0>
 8016700:	9904      	ldr	r1, [sp, #16]
 8016702:	230a      	movs	r3, #10
 8016704:	4632      	mov	r2, r6
 8016706:	3101      	adds	r1, #1
 8016708:	4638      	mov	r0, r7
 801670a:	f000 ff31 	bl	8017570 <_strtol_r>
 801670e:	9b03      	ldr	r3, [sp, #12]
 8016710:	9d04      	ldr	r5, [sp, #16]
 8016712:	1ac2      	subs	r2, r0, r3
 8016714:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016718:	429d      	cmp	r5, r3
 801671a:	bf28      	it	cs
 801671c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8016720:	490f      	ldr	r1, [pc, #60]	; (8016760 <_scanf_float+0x3c0>)
 8016722:	4628      	mov	r0, r5
 8016724:	f000 f868 	bl	80167f8 <siprintf>
 8016728:	e7aa      	b.n	8016680 <_scanf_float+0x2e0>
 801672a:	f015 0504 	ands.w	r5, r5, #4
 801672e:	d1b8      	bne.n	80166a2 <_scanf_float+0x302>
 8016730:	681f      	ldr	r7, [r3, #0]
 8016732:	ee10 2a10 	vmov	r2, s0
 8016736:	464b      	mov	r3, r9
 8016738:	ee10 0a10 	vmov	r0, s0
 801673c:	4649      	mov	r1, r9
 801673e:	f7ea f9f5 	bl	8000b2c <__aeabi_dcmpun>
 8016742:	b128      	cbz	r0, 8016750 <_scanf_float+0x3b0>
 8016744:	4628      	mov	r0, r5
 8016746:	f000 f81d 	bl	8016784 <nanf>
 801674a:	ed87 0a00 	vstr	s0, [r7]
 801674e:	e7ab      	b.n	80166a8 <_scanf_float+0x308>
 8016750:	4640      	mov	r0, r8
 8016752:	4649      	mov	r1, r9
 8016754:	f7ea fa48 	bl	8000be8 <__aeabi_d2f>
 8016758:	6038      	str	r0, [r7, #0]
 801675a:	e7a5      	b.n	80166a8 <_scanf_float+0x308>
 801675c:	2600      	movs	r6, #0
 801675e:	e666      	b.n	801642e <_scanf_float+0x8e>
 8016760:	0801b338 	.word	0x0801b338

08016764 <_sbrk_r>:
 8016764:	b538      	push	{r3, r4, r5, lr}
 8016766:	4c06      	ldr	r4, [pc, #24]	; (8016780 <_sbrk_r+0x1c>)
 8016768:	2300      	movs	r3, #0
 801676a:	4605      	mov	r5, r0
 801676c:	4608      	mov	r0, r1
 801676e:	6023      	str	r3, [r4, #0]
 8016770:	f7f4 fa8e 	bl	800ac90 <_sbrk>
 8016774:	1c43      	adds	r3, r0, #1
 8016776:	d102      	bne.n	801677e <_sbrk_r+0x1a>
 8016778:	6823      	ldr	r3, [r4, #0]
 801677a:	b103      	cbz	r3, 801677e <_sbrk_r+0x1a>
 801677c:	602b      	str	r3, [r5, #0]
 801677e:	bd38      	pop	{r3, r4, r5, pc}
 8016780:	20006e30 	.word	0x20006e30

08016784 <nanf>:
 8016784:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801678c <nanf+0x8>
 8016788:	4770      	bx	lr
 801678a:	bf00      	nop
 801678c:	7fc00000 	.word	0x7fc00000

08016790 <sniprintf>:
 8016790:	b40c      	push	{r2, r3}
 8016792:	b530      	push	{r4, r5, lr}
 8016794:	4b17      	ldr	r3, [pc, #92]	; (80167f4 <sniprintf+0x64>)
 8016796:	1e0c      	subs	r4, r1, #0
 8016798:	b09d      	sub	sp, #116	; 0x74
 801679a:	681d      	ldr	r5, [r3, #0]
 801679c:	da08      	bge.n	80167b0 <sniprintf+0x20>
 801679e:	238b      	movs	r3, #139	; 0x8b
 80167a0:	602b      	str	r3, [r5, #0]
 80167a2:	f04f 30ff 	mov.w	r0, #4294967295
 80167a6:	b01d      	add	sp, #116	; 0x74
 80167a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80167ac:	b002      	add	sp, #8
 80167ae:	4770      	bx	lr
 80167b0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80167b4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80167b8:	bf14      	ite	ne
 80167ba:	f104 33ff 	addne.w	r3, r4, #4294967295
 80167be:	4623      	moveq	r3, r4
 80167c0:	9304      	str	r3, [sp, #16]
 80167c2:	9307      	str	r3, [sp, #28]
 80167c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80167c8:	9002      	str	r0, [sp, #8]
 80167ca:	9006      	str	r0, [sp, #24]
 80167cc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80167d0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80167d2:	ab21      	add	r3, sp, #132	; 0x84
 80167d4:	a902      	add	r1, sp, #8
 80167d6:	4628      	mov	r0, r5
 80167d8:	9301      	str	r3, [sp, #4]
 80167da:	f002 fcd7 	bl	801918c <_svfiprintf_r>
 80167de:	1c43      	adds	r3, r0, #1
 80167e0:	bfbc      	itt	lt
 80167e2:	238b      	movlt	r3, #139	; 0x8b
 80167e4:	602b      	strlt	r3, [r5, #0]
 80167e6:	2c00      	cmp	r4, #0
 80167e8:	d0dd      	beq.n	80167a6 <sniprintf+0x16>
 80167ea:	9b02      	ldr	r3, [sp, #8]
 80167ec:	2200      	movs	r2, #0
 80167ee:	701a      	strb	r2, [r3, #0]
 80167f0:	e7d9      	b.n	80167a6 <sniprintf+0x16>
 80167f2:	bf00      	nop
 80167f4:	20000e0c 	.word	0x20000e0c

080167f8 <siprintf>:
 80167f8:	b40e      	push	{r1, r2, r3}
 80167fa:	b500      	push	{lr}
 80167fc:	b09c      	sub	sp, #112	; 0x70
 80167fe:	ab1d      	add	r3, sp, #116	; 0x74
 8016800:	9002      	str	r0, [sp, #8]
 8016802:	9006      	str	r0, [sp, #24]
 8016804:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016808:	4809      	ldr	r0, [pc, #36]	; (8016830 <siprintf+0x38>)
 801680a:	9107      	str	r1, [sp, #28]
 801680c:	9104      	str	r1, [sp, #16]
 801680e:	4909      	ldr	r1, [pc, #36]	; (8016834 <siprintf+0x3c>)
 8016810:	f853 2b04 	ldr.w	r2, [r3], #4
 8016814:	9105      	str	r1, [sp, #20]
 8016816:	6800      	ldr	r0, [r0, #0]
 8016818:	9301      	str	r3, [sp, #4]
 801681a:	a902      	add	r1, sp, #8
 801681c:	f002 fcb6 	bl	801918c <_svfiprintf_r>
 8016820:	9b02      	ldr	r3, [sp, #8]
 8016822:	2200      	movs	r2, #0
 8016824:	701a      	strb	r2, [r3, #0]
 8016826:	b01c      	add	sp, #112	; 0x70
 8016828:	f85d eb04 	ldr.w	lr, [sp], #4
 801682c:	b003      	add	sp, #12
 801682e:	4770      	bx	lr
 8016830:	20000e0c 	.word	0x20000e0c
 8016834:	ffff0208 	.word	0xffff0208

08016838 <sulp>:
 8016838:	b570      	push	{r4, r5, r6, lr}
 801683a:	4604      	mov	r4, r0
 801683c:	460d      	mov	r5, r1
 801683e:	ec45 4b10 	vmov	d0, r4, r5
 8016842:	4616      	mov	r6, r2
 8016844:	f002 fb06 	bl	8018e54 <__ulp>
 8016848:	ec51 0b10 	vmov	r0, r1, d0
 801684c:	b17e      	cbz	r6, 801686e <sulp+0x36>
 801684e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016852:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016856:	2b00      	cmp	r3, #0
 8016858:	dd09      	ble.n	801686e <sulp+0x36>
 801685a:	051b      	lsls	r3, r3, #20
 801685c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016860:	2400      	movs	r4, #0
 8016862:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8016866:	4622      	mov	r2, r4
 8016868:	462b      	mov	r3, r5
 801686a:	f7e9 fec5 	bl	80005f8 <__aeabi_dmul>
 801686e:	bd70      	pop	{r4, r5, r6, pc}

08016870 <_strtod_l>:
 8016870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016874:	461f      	mov	r7, r3
 8016876:	b0a1      	sub	sp, #132	; 0x84
 8016878:	2300      	movs	r3, #0
 801687a:	4681      	mov	r9, r0
 801687c:	4638      	mov	r0, r7
 801687e:	460e      	mov	r6, r1
 8016880:	9217      	str	r2, [sp, #92]	; 0x5c
 8016882:	931c      	str	r3, [sp, #112]	; 0x70
 8016884:	f001 fff5 	bl	8018872 <__localeconv_l>
 8016888:	4680      	mov	r8, r0
 801688a:	6800      	ldr	r0, [r0, #0]
 801688c:	f7e9 fca0 	bl	80001d0 <strlen>
 8016890:	f04f 0a00 	mov.w	sl, #0
 8016894:	4604      	mov	r4, r0
 8016896:	f04f 0b00 	mov.w	fp, #0
 801689a:	961b      	str	r6, [sp, #108]	; 0x6c
 801689c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801689e:	781a      	ldrb	r2, [r3, #0]
 80168a0:	2a0d      	cmp	r2, #13
 80168a2:	d832      	bhi.n	801690a <_strtod_l+0x9a>
 80168a4:	2a09      	cmp	r2, #9
 80168a6:	d236      	bcs.n	8016916 <_strtod_l+0xa6>
 80168a8:	2a00      	cmp	r2, #0
 80168aa:	d03e      	beq.n	801692a <_strtod_l+0xba>
 80168ac:	2300      	movs	r3, #0
 80168ae:	930d      	str	r3, [sp, #52]	; 0x34
 80168b0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80168b2:	782b      	ldrb	r3, [r5, #0]
 80168b4:	2b30      	cmp	r3, #48	; 0x30
 80168b6:	f040 80ac 	bne.w	8016a12 <_strtod_l+0x1a2>
 80168ba:	786b      	ldrb	r3, [r5, #1]
 80168bc:	2b58      	cmp	r3, #88	; 0x58
 80168be:	d001      	beq.n	80168c4 <_strtod_l+0x54>
 80168c0:	2b78      	cmp	r3, #120	; 0x78
 80168c2:	d167      	bne.n	8016994 <_strtod_l+0x124>
 80168c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80168c6:	9301      	str	r3, [sp, #4]
 80168c8:	ab1c      	add	r3, sp, #112	; 0x70
 80168ca:	9300      	str	r3, [sp, #0]
 80168cc:	9702      	str	r7, [sp, #8]
 80168ce:	ab1d      	add	r3, sp, #116	; 0x74
 80168d0:	4a88      	ldr	r2, [pc, #544]	; (8016af4 <_strtod_l+0x284>)
 80168d2:	a91b      	add	r1, sp, #108	; 0x6c
 80168d4:	4648      	mov	r0, r9
 80168d6:	f001 fcf2 	bl	80182be <__gethex>
 80168da:	f010 0407 	ands.w	r4, r0, #7
 80168de:	4606      	mov	r6, r0
 80168e0:	d005      	beq.n	80168ee <_strtod_l+0x7e>
 80168e2:	2c06      	cmp	r4, #6
 80168e4:	d12b      	bne.n	801693e <_strtod_l+0xce>
 80168e6:	3501      	adds	r5, #1
 80168e8:	2300      	movs	r3, #0
 80168ea:	951b      	str	r5, [sp, #108]	; 0x6c
 80168ec:	930d      	str	r3, [sp, #52]	; 0x34
 80168ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80168f0:	2b00      	cmp	r3, #0
 80168f2:	f040 859a 	bne.w	801742a <_strtod_l+0xbba>
 80168f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80168f8:	b1e3      	cbz	r3, 8016934 <_strtod_l+0xc4>
 80168fa:	4652      	mov	r2, sl
 80168fc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016900:	ec43 2b10 	vmov	d0, r2, r3
 8016904:	b021      	add	sp, #132	; 0x84
 8016906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801690a:	2a2b      	cmp	r2, #43	; 0x2b
 801690c:	d015      	beq.n	801693a <_strtod_l+0xca>
 801690e:	2a2d      	cmp	r2, #45	; 0x2d
 8016910:	d004      	beq.n	801691c <_strtod_l+0xac>
 8016912:	2a20      	cmp	r2, #32
 8016914:	d1ca      	bne.n	80168ac <_strtod_l+0x3c>
 8016916:	3301      	adds	r3, #1
 8016918:	931b      	str	r3, [sp, #108]	; 0x6c
 801691a:	e7bf      	b.n	801689c <_strtod_l+0x2c>
 801691c:	2201      	movs	r2, #1
 801691e:	920d      	str	r2, [sp, #52]	; 0x34
 8016920:	1c5a      	adds	r2, r3, #1
 8016922:	921b      	str	r2, [sp, #108]	; 0x6c
 8016924:	785b      	ldrb	r3, [r3, #1]
 8016926:	2b00      	cmp	r3, #0
 8016928:	d1c2      	bne.n	80168b0 <_strtod_l+0x40>
 801692a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801692c:	961b      	str	r6, [sp, #108]	; 0x6c
 801692e:	2b00      	cmp	r3, #0
 8016930:	f040 8579 	bne.w	8017426 <_strtod_l+0xbb6>
 8016934:	4652      	mov	r2, sl
 8016936:	465b      	mov	r3, fp
 8016938:	e7e2      	b.n	8016900 <_strtod_l+0x90>
 801693a:	2200      	movs	r2, #0
 801693c:	e7ef      	b.n	801691e <_strtod_l+0xae>
 801693e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016940:	b13a      	cbz	r2, 8016952 <_strtod_l+0xe2>
 8016942:	2135      	movs	r1, #53	; 0x35
 8016944:	a81e      	add	r0, sp, #120	; 0x78
 8016946:	f002 fb7d 	bl	8019044 <__copybits>
 801694a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801694c:	4648      	mov	r0, r9
 801694e:	f001 ffe9 	bl	8018924 <_Bfree>
 8016952:	3c01      	subs	r4, #1
 8016954:	2c04      	cmp	r4, #4
 8016956:	d806      	bhi.n	8016966 <_strtod_l+0xf6>
 8016958:	e8df f004 	tbb	[pc, r4]
 801695c:	1714030a 	.word	0x1714030a
 8016960:	0a          	.byte	0x0a
 8016961:	00          	.byte	0x00
 8016962:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8016966:	0730      	lsls	r0, r6, #28
 8016968:	d5c1      	bpl.n	80168ee <_strtod_l+0x7e>
 801696a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801696e:	e7be      	b.n	80168ee <_strtod_l+0x7e>
 8016970:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8016974:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016976:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801697a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801697e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016982:	e7f0      	b.n	8016966 <_strtod_l+0xf6>
 8016984:	f8df b170 	ldr.w	fp, [pc, #368]	; 8016af8 <_strtod_l+0x288>
 8016988:	e7ed      	b.n	8016966 <_strtod_l+0xf6>
 801698a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801698e:	f04f 3aff 	mov.w	sl, #4294967295
 8016992:	e7e8      	b.n	8016966 <_strtod_l+0xf6>
 8016994:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016996:	1c5a      	adds	r2, r3, #1
 8016998:	921b      	str	r2, [sp, #108]	; 0x6c
 801699a:	785b      	ldrb	r3, [r3, #1]
 801699c:	2b30      	cmp	r3, #48	; 0x30
 801699e:	d0f9      	beq.n	8016994 <_strtod_l+0x124>
 80169a0:	2b00      	cmp	r3, #0
 80169a2:	d0a4      	beq.n	80168ee <_strtod_l+0x7e>
 80169a4:	2301      	movs	r3, #1
 80169a6:	2500      	movs	r5, #0
 80169a8:	9306      	str	r3, [sp, #24]
 80169aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80169ac:	9308      	str	r3, [sp, #32]
 80169ae:	9507      	str	r5, [sp, #28]
 80169b0:	9505      	str	r5, [sp, #20]
 80169b2:	220a      	movs	r2, #10
 80169b4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80169b6:	7807      	ldrb	r7, [r0, #0]
 80169b8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80169bc:	b2d9      	uxtb	r1, r3
 80169be:	2909      	cmp	r1, #9
 80169c0:	d929      	bls.n	8016a16 <_strtod_l+0x1a6>
 80169c2:	4622      	mov	r2, r4
 80169c4:	f8d8 1000 	ldr.w	r1, [r8]
 80169c8:	f002 fcd8 	bl	801937c <strncmp>
 80169cc:	2800      	cmp	r0, #0
 80169ce:	d031      	beq.n	8016a34 <_strtod_l+0x1c4>
 80169d0:	2000      	movs	r0, #0
 80169d2:	9c05      	ldr	r4, [sp, #20]
 80169d4:	9004      	str	r0, [sp, #16]
 80169d6:	463b      	mov	r3, r7
 80169d8:	4602      	mov	r2, r0
 80169da:	2b65      	cmp	r3, #101	; 0x65
 80169dc:	d001      	beq.n	80169e2 <_strtod_l+0x172>
 80169de:	2b45      	cmp	r3, #69	; 0x45
 80169e0:	d114      	bne.n	8016a0c <_strtod_l+0x19c>
 80169e2:	b924      	cbnz	r4, 80169ee <_strtod_l+0x17e>
 80169e4:	b910      	cbnz	r0, 80169ec <_strtod_l+0x17c>
 80169e6:	9b06      	ldr	r3, [sp, #24]
 80169e8:	2b00      	cmp	r3, #0
 80169ea:	d09e      	beq.n	801692a <_strtod_l+0xba>
 80169ec:	2400      	movs	r4, #0
 80169ee:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80169f0:	1c73      	adds	r3, r6, #1
 80169f2:	931b      	str	r3, [sp, #108]	; 0x6c
 80169f4:	7873      	ldrb	r3, [r6, #1]
 80169f6:	2b2b      	cmp	r3, #43	; 0x2b
 80169f8:	d078      	beq.n	8016aec <_strtod_l+0x27c>
 80169fa:	2b2d      	cmp	r3, #45	; 0x2d
 80169fc:	d070      	beq.n	8016ae0 <_strtod_l+0x270>
 80169fe:	f04f 0c00 	mov.w	ip, #0
 8016a02:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8016a06:	2f09      	cmp	r7, #9
 8016a08:	d97c      	bls.n	8016b04 <_strtod_l+0x294>
 8016a0a:	961b      	str	r6, [sp, #108]	; 0x6c
 8016a0c:	f04f 0e00 	mov.w	lr, #0
 8016a10:	e09a      	b.n	8016b48 <_strtod_l+0x2d8>
 8016a12:	2300      	movs	r3, #0
 8016a14:	e7c7      	b.n	80169a6 <_strtod_l+0x136>
 8016a16:	9905      	ldr	r1, [sp, #20]
 8016a18:	2908      	cmp	r1, #8
 8016a1a:	bfdd      	ittte	le
 8016a1c:	9907      	ldrle	r1, [sp, #28]
 8016a1e:	fb02 3301 	mlale	r3, r2, r1, r3
 8016a22:	9307      	strle	r3, [sp, #28]
 8016a24:	fb02 3505 	mlagt	r5, r2, r5, r3
 8016a28:	9b05      	ldr	r3, [sp, #20]
 8016a2a:	3001      	adds	r0, #1
 8016a2c:	3301      	adds	r3, #1
 8016a2e:	9305      	str	r3, [sp, #20]
 8016a30:	901b      	str	r0, [sp, #108]	; 0x6c
 8016a32:	e7bf      	b.n	80169b4 <_strtod_l+0x144>
 8016a34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016a36:	191a      	adds	r2, r3, r4
 8016a38:	921b      	str	r2, [sp, #108]	; 0x6c
 8016a3a:	9a05      	ldr	r2, [sp, #20]
 8016a3c:	5d1b      	ldrb	r3, [r3, r4]
 8016a3e:	2a00      	cmp	r2, #0
 8016a40:	d037      	beq.n	8016ab2 <_strtod_l+0x242>
 8016a42:	9c05      	ldr	r4, [sp, #20]
 8016a44:	4602      	mov	r2, r0
 8016a46:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8016a4a:	2909      	cmp	r1, #9
 8016a4c:	d913      	bls.n	8016a76 <_strtod_l+0x206>
 8016a4e:	2101      	movs	r1, #1
 8016a50:	9104      	str	r1, [sp, #16]
 8016a52:	e7c2      	b.n	80169da <_strtod_l+0x16a>
 8016a54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016a56:	1c5a      	adds	r2, r3, #1
 8016a58:	921b      	str	r2, [sp, #108]	; 0x6c
 8016a5a:	785b      	ldrb	r3, [r3, #1]
 8016a5c:	3001      	adds	r0, #1
 8016a5e:	2b30      	cmp	r3, #48	; 0x30
 8016a60:	d0f8      	beq.n	8016a54 <_strtod_l+0x1e4>
 8016a62:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8016a66:	2a08      	cmp	r2, #8
 8016a68:	f200 84e4 	bhi.w	8017434 <_strtod_l+0xbc4>
 8016a6c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016a6e:	9208      	str	r2, [sp, #32]
 8016a70:	4602      	mov	r2, r0
 8016a72:	2000      	movs	r0, #0
 8016a74:	4604      	mov	r4, r0
 8016a76:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8016a7a:	f100 0101 	add.w	r1, r0, #1
 8016a7e:	d012      	beq.n	8016aa6 <_strtod_l+0x236>
 8016a80:	440a      	add	r2, r1
 8016a82:	eb00 0c04 	add.w	ip, r0, r4
 8016a86:	4621      	mov	r1, r4
 8016a88:	270a      	movs	r7, #10
 8016a8a:	458c      	cmp	ip, r1
 8016a8c:	d113      	bne.n	8016ab6 <_strtod_l+0x246>
 8016a8e:	1821      	adds	r1, r4, r0
 8016a90:	2908      	cmp	r1, #8
 8016a92:	f104 0401 	add.w	r4, r4, #1
 8016a96:	4404      	add	r4, r0
 8016a98:	dc19      	bgt.n	8016ace <_strtod_l+0x25e>
 8016a9a:	9b07      	ldr	r3, [sp, #28]
 8016a9c:	210a      	movs	r1, #10
 8016a9e:	fb01 e303 	mla	r3, r1, r3, lr
 8016aa2:	9307      	str	r3, [sp, #28]
 8016aa4:	2100      	movs	r1, #0
 8016aa6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016aa8:	1c58      	adds	r0, r3, #1
 8016aaa:	901b      	str	r0, [sp, #108]	; 0x6c
 8016aac:	785b      	ldrb	r3, [r3, #1]
 8016aae:	4608      	mov	r0, r1
 8016ab0:	e7c9      	b.n	8016a46 <_strtod_l+0x1d6>
 8016ab2:	9805      	ldr	r0, [sp, #20]
 8016ab4:	e7d3      	b.n	8016a5e <_strtod_l+0x1ee>
 8016ab6:	2908      	cmp	r1, #8
 8016ab8:	f101 0101 	add.w	r1, r1, #1
 8016abc:	dc03      	bgt.n	8016ac6 <_strtod_l+0x256>
 8016abe:	9b07      	ldr	r3, [sp, #28]
 8016ac0:	437b      	muls	r3, r7
 8016ac2:	9307      	str	r3, [sp, #28]
 8016ac4:	e7e1      	b.n	8016a8a <_strtod_l+0x21a>
 8016ac6:	2910      	cmp	r1, #16
 8016ac8:	bfd8      	it	le
 8016aca:	437d      	mulle	r5, r7
 8016acc:	e7dd      	b.n	8016a8a <_strtod_l+0x21a>
 8016ace:	2c10      	cmp	r4, #16
 8016ad0:	bfdc      	itt	le
 8016ad2:	210a      	movle	r1, #10
 8016ad4:	fb01 e505 	mlale	r5, r1, r5, lr
 8016ad8:	e7e4      	b.n	8016aa4 <_strtod_l+0x234>
 8016ada:	2301      	movs	r3, #1
 8016adc:	9304      	str	r3, [sp, #16]
 8016ade:	e781      	b.n	80169e4 <_strtod_l+0x174>
 8016ae0:	f04f 0c01 	mov.w	ip, #1
 8016ae4:	1cb3      	adds	r3, r6, #2
 8016ae6:	931b      	str	r3, [sp, #108]	; 0x6c
 8016ae8:	78b3      	ldrb	r3, [r6, #2]
 8016aea:	e78a      	b.n	8016a02 <_strtod_l+0x192>
 8016aec:	f04f 0c00 	mov.w	ip, #0
 8016af0:	e7f8      	b.n	8016ae4 <_strtod_l+0x274>
 8016af2:	bf00      	nop
 8016af4:	0801b340 	.word	0x0801b340
 8016af8:	7ff00000 	.word	0x7ff00000
 8016afc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016afe:	1c5f      	adds	r7, r3, #1
 8016b00:	971b      	str	r7, [sp, #108]	; 0x6c
 8016b02:	785b      	ldrb	r3, [r3, #1]
 8016b04:	2b30      	cmp	r3, #48	; 0x30
 8016b06:	d0f9      	beq.n	8016afc <_strtod_l+0x28c>
 8016b08:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8016b0c:	2f08      	cmp	r7, #8
 8016b0e:	f63f af7d 	bhi.w	8016a0c <_strtod_l+0x19c>
 8016b12:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8016b16:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016b18:	930a      	str	r3, [sp, #40]	; 0x28
 8016b1a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016b1c:	1c5f      	adds	r7, r3, #1
 8016b1e:	971b      	str	r7, [sp, #108]	; 0x6c
 8016b20:	785b      	ldrb	r3, [r3, #1]
 8016b22:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8016b26:	f1b8 0f09 	cmp.w	r8, #9
 8016b2a:	d937      	bls.n	8016b9c <_strtod_l+0x32c>
 8016b2c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016b2e:	1a7f      	subs	r7, r7, r1
 8016b30:	2f08      	cmp	r7, #8
 8016b32:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8016b36:	dc37      	bgt.n	8016ba8 <_strtod_l+0x338>
 8016b38:	45be      	cmp	lr, r7
 8016b3a:	bfa8      	it	ge
 8016b3c:	46be      	movge	lr, r7
 8016b3e:	f1bc 0f00 	cmp.w	ip, #0
 8016b42:	d001      	beq.n	8016b48 <_strtod_l+0x2d8>
 8016b44:	f1ce 0e00 	rsb	lr, lr, #0
 8016b48:	2c00      	cmp	r4, #0
 8016b4a:	d151      	bne.n	8016bf0 <_strtod_l+0x380>
 8016b4c:	2800      	cmp	r0, #0
 8016b4e:	f47f aece 	bne.w	80168ee <_strtod_l+0x7e>
 8016b52:	9a06      	ldr	r2, [sp, #24]
 8016b54:	2a00      	cmp	r2, #0
 8016b56:	f47f aeca 	bne.w	80168ee <_strtod_l+0x7e>
 8016b5a:	9a04      	ldr	r2, [sp, #16]
 8016b5c:	2a00      	cmp	r2, #0
 8016b5e:	f47f aee4 	bne.w	801692a <_strtod_l+0xba>
 8016b62:	2b4e      	cmp	r3, #78	; 0x4e
 8016b64:	d027      	beq.n	8016bb6 <_strtod_l+0x346>
 8016b66:	dc21      	bgt.n	8016bac <_strtod_l+0x33c>
 8016b68:	2b49      	cmp	r3, #73	; 0x49
 8016b6a:	f47f aede 	bne.w	801692a <_strtod_l+0xba>
 8016b6e:	49a0      	ldr	r1, [pc, #640]	; (8016df0 <_strtod_l+0x580>)
 8016b70:	a81b      	add	r0, sp, #108	; 0x6c
 8016b72:	f001 fdd7 	bl	8018724 <__match>
 8016b76:	2800      	cmp	r0, #0
 8016b78:	f43f aed7 	beq.w	801692a <_strtod_l+0xba>
 8016b7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016b7e:	499d      	ldr	r1, [pc, #628]	; (8016df4 <_strtod_l+0x584>)
 8016b80:	3b01      	subs	r3, #1
 8016b82:	a81b      	add	r0, sp, #108	; 0x6c
 8016b84:	931b      	str	r3, [sp, #108]	; 0x6c
 8016b86:	f001 fdcd 	bl	8018724 <__match>
 8016b8a:	b910      	cbnz	r0, 8016b92 <_strtod_l+0x322>
 8016b8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016b8e:	3301      	adds	r3, #1
 8016b90:	931b      	str	r3, [sp, #108]	; 0x6c
 8016b92:	f8df b274 	ldr.w	fp, [pc, #628]	; 8016e08 <_strtod_l+0x598>
 8016b96:	f04f 0a00 	mov.w	sl, #0
 8016b9a:	e6a8      	b.n	80168ee <_strtod_l+0x7e>
 8016b9c:	210a      	movs	r1, #10
 8016b9e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8016ba2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8016ba6:	e7b8      	b.n	8016b1a <_strtod_l+0x2aa>
 8016ba8:	46be      	mov	lr, r7
 8016baa:	e7c8      	b.n	8016b3e <_strtod_l+0x2ce>
 8016bac:	2b69      	cmp	r3, #105	; 0x69
 8016bae:	d0de      	beq.n	8016b6e <_strtod_l+0x2fe>
 8016bb0:	2b6e      	cmp	r3, #110	; 0x6e
 8016bb2:	f47f aeba 	bne.w	801692a <_strtod_l+0xba>
 8016bb6:	4990      	ldr	r1, [pc, #576]	; (8016df8 <_strtod_l+0x588>)
 8016bb8:	a81b      	add	r0, sp, #108	; 0x6c
 8016bba:	f001 fdb3 	bl	8018724 <__match>
 8016bbe:	2800      	cmp	r0, #0
 8016bc0:	f43f aeb3 	beq.w	801692a <_strtod_l+0xba>
 8016bc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016bc6:	781b      	ldrb	r3, [r3, #0]
 8016bc8:	2b28      	cmp	r3, #40	; 0x28
 8016bca:	d10e      	bne.n	8016bea <_strtod_l+0x37a>
 8016bcc:	aa1e      	add	r2, sp, #120	; 0x78
 8016bce:	498b      	ldr	r1, [pc, #556]	; (8016dfc <_strtod_l+0x58c>)
 8016bd0:	a81b      	add	r0, sp, #108	; 0x6c
 8016bd2:	f001 fdbb 	bl	801874c <__hexnan>
 8016bd6:	2805      	cmp	r0, #5
 8016bd8:	d107      	bne.n	8016bea <_strtod_l+0x37a>
 8016bda:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016bdc:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8016be0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8016be4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8016be8:	e681      	b.n	80168ee <_strtod_l+0x7e>
 8016bea:	f8df b224 	ldr.w	fp, [pc, #548]	; 8016e10 <_strtod_l+0x5a0>
 8016bee:	e7d2      	b.n	8016b96 <_strtod_l+0x326>
 8016bf0:	ebae 0302 	sub.w	r3, lr, r2
 8016bf4:	9306      	str	r3, [sp, #24]
 8016bf6:	9b05      	ldr	r3, [sp, #20]
 8016bf8:	9807      	ldr	r0, [sp, #28]
 8016bfa:	2b00      	cmp	r3, #0
 8016bfc:	bf08      	it	eq
 8016bfe:	4623      	moveq	r3, r4
 8016c00:	2c10      	cmp	r4, #16
 8016c02:	9305      	str	r3, [sp, #20]
 8016c04:	46a0      	mov	r8, r4
 8016c06:	bfa8      	it	ge
 8016c08:	f04f 0810 	movge.w	r8, #16
 8016c0c:	f7e9 fc7a 	bl	8000504 <__aeabi_ui2d>
 8016c10:	2c09      	cmp	r4, #9
 8016c12:	4682      	mov	sl, r0
 8016c14:	468b      	mov	fp, r1
 8016c16:	dc13      	bgt.n	8016c40 <_strtod_l+0x3d0>
 8016c18:	9b06      	ldr	r3, [sp, #24]
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	f43f ae67 	beq.w	80168ee <_strtod_l+0x7e>
 8016c20:	9b06      	ldr	r3, [sp, #24]
 8016c22:	dd7a      	ble.n	8016d1a <_strtod_l+0x4aa>
 8016c24:	2b16      	cmp	r3, #22
 8016c26:	dc61      	bgt.n	8016cec <_strtod_l+0x47c>
 8016c28:	4a75      	ldr	r2, [pc, #468]	; (8016e00 <_strtod_l+0x590>)
 8016c2a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8016c2e:	e9de 0100 	ldrd	r0, r1, [lr]
 8016c32:	4652      	mov	r2, sl
 8016c34:	465b      	mov	r3, fp
 8016c36:	f7e9 fcdf 	bl	80005f8 <__aeabi_dmul>
 8016c3a:	4682      	mov	sl, r0
 8016c3c:	468b      	mov	fp, r1
 8016c3e:	e656      	b.n	80168ee <_strtod_l+0x7e>
 8016c40:	4b6f      	ldr	r3, [pc, #444]	; (8016e00 <_strtod_l+0x590>)
 8016c42:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8016c46:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8016c4a:	f7e9 fcd5 	bl	80005f8 <__aeabi_dmul>
 8016c4e:	4606      	mov	r6, r0
 8016c50:	4628      	mov	r0, r5
 8016c52:	460f      	mov	r7, r1
 8016c54:	f7e9 fc56 	bl	8000504 <__aeabi_ui2d>
 8016c58:	4602      	mov	r2, r0
 8016c5a:	460b      	mov	r3, r1
 8016c5c:	4630      	mov	r0, r6
 8016c5e:	4639      	mov	r1, r7
 8016c60:	f7e9 fb14 	bl	800028c <__adddf3>
 8016c64:	2c0f      	cmp	r4, #15
 8016c66:	4682      	mov	sl, r0
 8016c68:	468b      	mov	fp, r1
 8016c6a:	ddd5      	ble.n	8016c18 <_strtod_l+0x3a8>
 8016c6c:	9b06      	ldr	r3, [sp, #24]
 8016c6e:	eba4 0808 	sub.w	r8, r4, r8
 8016c72:	4498      	add	r8, r3
 8016c74:	f1b8 0f00 	cmp.w	r8, #0
 8016c78:	f340 8096 	ble.w	8016da8 <_strtod_l+0x538>
 8016c7c:	f018 030f 	ands.w	r3, r8, #15
 8016c80:	d00a      	beq.n	8016c98 <_strtod_l+0x428>
 8016c82:	495f      	ldr	r1, [pc, #380]	; (8016e00 <_strtod_l+0x590>)
 8016c84:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016c88:	4652      	mov	r2, sl
 8016c8a:	465b      	mov	r3, fp
 8016c8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016c90:	f7e9 fcb2 	bl	80005f8 <__aeabi_dmul>
 8016c94:	4682      	mov	sl, r0
 8016c96:	468b      	mov	fp, r1
 8016c98:	f038 080f 	bics.w	r8, r8, #15
 8016c9c:	d073      	beq.n	8016d86 <_strtod_l+0x516>
 8016c9e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8016ca2:	dd47      	ble.n	8016d34 <_strtod_l+0x4c4>
 8016ca4:	2400      	movs	r4, #0
 8016ca6:	46a0      	mov	r8, r4
 8016ca8:	9407      	str	r4, [sp, #28]
 8016caa:	9405      	str	r4, [sp, #20]
 8016cac:	2322      	movs	r3, #34	; 0x22
 8016cae:	f8df b158 	ldr.w	fp, [pc, #344]	; 8016e08 <_strtod_l+0x598>
 8016cb2:	f8c9 3000 	str.w	r3, [r9]
 8016cb6:	f04f 0a00 	mov.w	sl, #0
 8016cba:	9b07      	ldr	r3, [sp, #28]
 8016cbc:	2b00      	cmp	r3, #0
 8016cbe:	f43f ae16 	beq.w	80168ee <_strtod_l+0x7e>
 8016cc2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016cc4:	4648      	mov	r0, r9
 8016cc6:	f001 fe2d 	bl	8018924 <_Bfree>
 8016cca:	9905      	ldr	r1, [sp, #20]
 8016ccc:	4648      	mov	r0, r9
 8016cce:	f001 fe29 	bl	8018924 <_Bfree>
 8016cd2:	4641      	mov	r1, r8
 8016cd4:	4648      	mov	r0, r9
 8016cd6:	f001 fe25 	bl	8018924 <_Bfree>
 8016cda:	9907      	ldr	r1, [sp, #28]
 8016cdc:	4648      	mov	r0, r9
 8016cde:	f001 fe21 	bl	8018924 <_Bfree>
 8016ce2:	4621      	mov	r1, r4
 8016ce4:	4648      	mov	r0, r9
 8016ce6:	f001 fe1d 	bl	8018924 <_Bfree>
 8016cea:	e600      	b.n	80168ee <_strtod_l+0x7e>
 8016cec:	9a06      	ldr	r2, [sp, #24]
 8016cee:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8016cf2:	4293      	cmp	r3, r2
 8016cf4:	dbba      	blt.n	8016c6c <_strtod_l+0x3fc>
 8016cf6:	4d42      	ldr	r5, [pc, #264]	; (8016e00 <_strtod_l+0x590>)
 8016cf8:	f1c4 040f 	rsb	r4, r4, #15
 8016cfc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8016d00:	4652      	mov	r2, sl
 8016d02:	465b      	mov	r3, fp
 8016d04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016d08:	f7e9 fc76 	bl	80005f8 <__aeabi_dmul>
 8016d0c:	9b06      	ldr	r3, [sp, #24]
 8016d0e:	1b1c      	subs	r4, r3, r4
 8016d10:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8016d14:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016d18:	e78d      	b.n	8016c36 <_strtod_l+0x3c6>
 8016d1a:	f113 0f16 	cmn.w	r3, #22
 8016d1e:	dba5      	blt.n	8016c6c <_strtod_l+0x3fc>
 8016d20:	4a37      	ldr	r2, [pc, #220]	; (8016e00 <_strtod_l+0x590>)
 8016d22:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8016d26:	e9d2 2300 	ldrd	r2, r3, [r2]
 8016d2a:	4650      	mov	r0, sl
 8016d2c:	4659      	mov	r1, fp
 8016d2e:	f7e9 fd8d 	bl	800084c <__aeabi_ddiv>
 8016d32:	e782      	b.n	8016c3a <_strtod_l+0x3ca>
 8016d34:	2300      	movs	r3, #0
 8016d36:	4e33      	ldr	r6, [pc, #204]	; (8016e04 <_strtod_l+0x594>)
 8016d38:	ea4f 1828 	mov.w	r8, r8, asr #4
 8016d3c:	4650      	mov	r0, sl
 8016d3e:	4659      	mov	r1, fp
 8016d40:	461d      	mov	r5, r3
 8016d42:	f1b8 0f01 	cmp.w	r8, #1
 8016d46:	dc21      	bgt.n	8016d8c <_strtod_l+0x51c>
 8016d48:	b10b      	cbz	r3, 8016d4e <_strtod_l+0x4de>
 8016d4a:	4682      	mov	sl, r0
 8016d4c:	468b      	mov	fp, r1
 8016d4e:	4b2d      	ldr	r3, [pc, #180]	; (8016e04 <_strtod_l+0x594>)
 8016d50:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8016d54:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8016d58:	4652      	mov	r2, sl
 8016d5a:	465b      	mov	r3, fp
 8016d5c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016d60:	f7e9 fc4a 	bl	80005f8 <__aeabi_dmul>
 8016d64:	4b28      	ldr	r3, [pc, #160]	; (8016e08 <_strtod_l+0x598>)
 8016d66:	460a      	mov	r2, r1
 8016d68:	400b      	ands	r3, r1
 8016d6a:	4928      	ldr	r1, [pc, #160]	; (8016e0c <_strtod_l+0x59c>)
 8016d6c:	428b      	cmp	r3, r1
 8016d6e:	4682      	mov	sl, r0
 8016d70:	d898      	bhi.n	8016ca4 <_strtod_l+0x434>
 8016d72:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8016d76:	428b      	cmp	r3, r1
 8016d78:	bf86      	itte	hi
 8016d7a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8016e14 <_strtod_l+0x5a4>
 8016d7e:	f04f 3aff 	movhi.w	sl, #4294967295
 8016d82:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8016d86:	2300      	movs	r3, #0
 8016d88:	9304      	str	r3, [sp, #16]
 8016d8a:	e077      	b.n	8016e7c <_strtod_l+0x60c>
 8016d8c:	f018 0f01 	tst.w	r8, #1
 8016d90:	d006      	beq.n	8016da0 <_strtod_l+0x530>
 8016d92:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8016d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d9a:	f7e9 fc2d 	bl	80005f8 <__aeabi_dmul>
 8016d9e:	2301      	movs	r3, #1
 8016da0:	3501      	adds	r5, #1
 8016da2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016da6:	e7cc      	b.n	8016d42 <_strtod_l+0x4d2>
 8016da8:	d0ed      	beq.n	8016d86 <_strtod_l+0x516>
 8016daa:	f1c8 0800 	rsb	r8, r8, #0
 8016dae:	f018 020f 	ands.w	r2, r8, #15
 8016db2:	d00a      	beq.n	8016dca <_strtod_l+0x55a>
 8016db4:	4b12      	ldr	r3, [pc, #72]	; (8016e00 <_strtod_l+0x590>)
 8016db6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016dba:	4650      	mov	r0, sl
 8016dbc:	4659      	mov	r1, fp
 8016dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016dc2:	f7e9 fd43 	bl	800084c <__aeabi_ddiv>
 8016dc6:	4682      	mov	sl, r0
 8016dc8:	468b      	mov	fp, r1
 8016dca:	ea5f 1828 	movs.w	r8, r8, asr #4
 8016dce:	d0da      	beq.n	8016d86 <_strtod_l+0x516>
 8016dd0:	f1b8 0f1f 	cmp.w	r8, #31
 8016dd4:	dd20      	ble.n	8016e18 <_strtod_l+0x5a8>
 8016dd6:	2400      	movs	r4, #0
 8016dd8:	46a0      	mov	r8, r4
 8016dda:	9407      	str	r4, [sp, #28]
 8016ddc:	9405      	str	r4, [sp, #20]
 8016dde:	2322      	movs	r3, #34	; 0x22
 8016de0:	f04f 0a00 	mov.w	sl, #0
 8016de4:	f04f 0b00 	mov.w	fp, #0
 8016de8:	f8c9 3000 	str.w	r3, [r9]
 8016dec:	e765      	b.n	8016cba <_strtod_l+0x44a>
 8016dee:	bf00      	nop
 8016df0:	0801b309 	.word	0x0801b309
 8016df4:	0801b393 	.word	0x0801b393
 8016df8:	0801b311 	.word	0x0801b311
 8016dfc:	0801b354 	.word	0x0801b354
 8016e00:	0801b3d0 	.word	0x0801b3d0
 8016e04:	0801b3a8 	.word	0x0801b3a8
 8016e08:	7ff00000 	.word	0x7ff00000
 8016e0c:	7ca00000 	.word	0x7ca00000
 8016e10:	fff80000 	.word	0xfff80000
 8016e14:	7fefffff 	.word	0x7fefffff
 8016e18:	f018 0310 	ands.w	r3, r8, #16
 8016e1c:	bf18      	it	ne
 8016e1e:	236a      	movne	r3, #106	; 0x6a
 8016e20:	4da0      	ldr	r5, [pc, #640]	; (80170a4 <_strtod_l+0x834>)
 8016e22:	9304      	str	r3, [sp, #16]
 8016e24:	4650      	mov	r0, sl
 8016e26:	4659      	mov	r1, fp
 8016e28:	2300      	movs	r3, #0
 8016e2a:	f1b8 0f00 	cmp.w	r8, #0
 8016e2e:	f300 810a 	bgt.w	8017046 <_strtod_l+0x7d6>
 8016e32:	b10b      	cbz	r3, 8016e38 <_strtod_l+0x5c8>
 8016e34:	4682      	mov	sl, r0
 8016e36:	468b      	mov	fp, r1
 8016e38:	9b04      	ldr	r3, [sp, #16]
 8016e3a:	b1bb      	cbz	r3, 8016e6c <_strtod_l+0x5fc>
 8016e3c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8016e40:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016e44:	2b00      	cmp	r3, #0
 8016e46:	4659      	mov	r1, fp
 8016e48:	dd10      	ble.n	8016e6c <_strtod_l+0x5fc>
 8016e4a:	2b1f      	cmp	r3, #31
 8016e4c:	f340 8107 	ble.w	801705e <_strtod_l+0x7ee>
 8016e50:	2b34      	cmp	r3, #52	; 0x34
 8016e52:	bfde      	ittt	le
 8016e54:	3b20      	suble	r3, #32
 8016e56:	f04f 32ff 	movle.w	r2, #4294967295
 8016e5a:	fa02 f303 	lslle.w	r3, r2, r3
 8016e5e:	f04f 0a00 	mov.w	sl, #0
 8016e62:	bfcc      	ite	gt
 8016e64:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8016e68:	ea03 0b01 	andle.w	fp, r3, r1
 8016e6c:	2200      	movs	r2, #0
 8016e6e:	2300      	movs	r3, #0
 8016e70:	4650      	mov	r0, sl
 8016e72:	4659      	mov	r1, fp
 8016e74:	f7e9 fe28 	bl	8000ac8 <__aeabi_dcmpeq>
 8016e78:	2800      	cmp	r0, #0
 8016e7a:	d1ac      	bne.n	8016dd6 <_strtod_l+0x566>
 8016e7c:	9b07      	ldr	r3, [sp, #28]
 8016e7e:	9300      	str	r3, [sp, #0]
 8016e80:	9a05      	ldr	r2, [sp, #20]
 8016e82:	9908      	ldr	r1, [sp, #32]
 8016e84:	4623      	mov	r3, r4
 8016e86:	4648      	mov	r0, r9
 8016e88:	f001 fd9e 	bl	80189c8 <__s2b>
 8016e8c:	9007      	str	r0, [sp, #28]
 8016e8e:	2800      	cmp	r0, #0
 8016e90:	f43f af08 	beq.w	8016ca4 <_strtod_l+0x434>
 8016e94:	9a06      	ldr	r2, [sp, #24]
 8016e96:	9b06      	ldr	r3, [sp, #24]
 8016e98:	2a00      	cmp	r2, #0
 8016e9a:	f1c3 0300 	rsb	r3, r3, #0
 8016e9e:	bfa8      	it	ge
 8016ea0:	2300      	movge	r3, #0
 8016ea2:	930e      	str	r3, [sp, #56]	; 0x38
 8016ea4:	2400      	movs	r4, #0
 8016ea6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8016eaa:	9316      	str	r3, [sp, #88]	; 0x58
 8016eac:	46a0      	mov	r8, r4
 8016eae:	9b07      	ldr	r3, [sp, #28]
 8016eb0:	4648      	mov	r0, r9
 8016eb2:	6859      	ldr	r1, [r3, #4]
 8016eb4:	f001 fd02 	bl	80188bc <_Balloc>
 8016eb8:	9005      	str	r0, [sp, #20]
 8016eba:	2800      	cmp	r0, #0
 8016ebc:	f43f aef6 	beq.w	8016cac <_strtod_l+0x43c>
 8016ec0:	9b07      	ldr	r3, [sp, #28]
 8016ec2:	691a      	ldr	r2, [r3, #16]
 8016ec4:	3202      	adds	r2, #2
 8016ec6:	f103 010c 	add.w	r1, r3, #12
 8016eca:	0092      	lsls	r2, r2, #2
 8016ecc:	300c      	adds	r0, #12
 8016ece:	f7fe fd37 	bl	8015940 <memcpy>
 8016ed2:	aa1e      	add	r2, sp, #120	; 0x78
 8016ed4:	a91d      	add	r1, sp, #116	; 0x74
 8016ed6:	ec4b ab10 	vmov	d0, sl, fp
 8016eda:	4648      	mov	r0, r9
 8016edc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8016ee0:	f002 f82e 	bl	8018f40 <__d2b>
 8016ee4:	901c      	str	r0, [sp, #112]	; 0x70
 8016ee6:	2800      	cmp	r0, #0
 8016ee8:	f43f aee0 	beq.w	8016cac <_strtod_l+0x43c>
 8016eec:	2101      	movs	r1, #1
 8016eee:	4648      	mov	r0, r9
 8016ef0:	f001 fdf6 	bl	8018ae0 <__i2b>
 8016ef4:	4680      	mov	r8, r0
 8016ef6:	2800      	cmp	r0, #0
 8016ef8:	f43f aed8 	beq.w	8016cac <_strtod_l+0x43c>
 8016efc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8016efe:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016f00:	2e00      	cmp	r6, #0
 8016f02:	bfab      	itete	ge
 8016f04:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8016f06:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8016f08:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8016f0a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8016f0c:	bfac      	ite	ge
 8016f0e:	18f7      	addge	r7, r6, r3
 8016f10:	1b9d      	sublt	r5, r3, r6
 8016f12:	9b04      	ldr	r3, [sp, #16]
 8016f14:	1af6      	subs	r6, r6, r3
 8016f16:	4416      	add	r6, r2
 8016f18:	4b63      	ldr	r3, [pc, #396]	; (80170a8 <_strtod_l+0x838>)
 8016f1a:	3e01      	subs	r6, #1
 8016f1c:	429e      	cmp	r6, r3
 8016f1e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8016f22:	f280 80af 	bge.w	8017084 <_strtod_l+0x814>
 8016f26:	1b9b      	subs	r3, r3, r6
 8016f28:	2b1f      	cmp	r3, #31
 8016f2a:	eba2 0203 	sub.w	r2, r2, r3
 8016f2e:	f04f 0101 	mov.w	r1, #1
 8016f32:	f300 809b 	bgt.w	801706c <_strtod_l+0x7fc>
 8016f36:	fa01 f303 	lsl.w	r3, r1, r3
 8016f3a:	930f      	str	r3, [sp, #60]	; 0x3c
 8016f3c:	2300      	movs	r3, #0
 8016f3e:	930a      	str	r3, [sp, #40]	; 0x28
 8016f40:	18be      	adds	r6, r7, r2
 8016f42:	9b04      	ldr	r3, [sp, #16]
 8016f44:	42b7      	cmp	r7, r6
 8016f46:	4415      	add	r5, r2
 8016f48:	441d      	add	r5, r3
 8016f4a:	463b      	mov	r3, r7
 8016f4c:	bfa8      	it	ge
 8016f4e:	4633      	movge	r3, r6
 8016f50:	42ab      	cmp	r3, r5
 8016f52:	bfa8      	it	ge
 8016f54:	462b      	movge	r3, r5
 8016f56:	2b00      	cmp	r3, #0
 8016f58:	bfc2      	ittt	gt
 8016f5a:	1af6      	subgt	r6, r6, r3
 8016f5c:	1aed      	subgt	r5, r5, r3
 8016f5e:	1aff      	subgt	r7, r7, r3
 8016f60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016f62:	b1bb      	cbz	r3, 8016f94 <_strtod_l+0x724>
 8016f64:	4641      	mov	r1, r8
 8016f66:	461a      	mov	r2, r3
 8016f68:	4648      	mov	r0, r9
 8016f6a:	f001 fe59 	bl	8018c20 <__pow5mult>
 8016f6e:	4680      	mov	r8, r0
 8016f70:	2800      	cmp	r0, #0
 8016f72:	f43f ae9b 	beq.w	8016cac <_strtod_l+0x43c>
 8016f76:	4601      	mov	r1, r0
 8016f78:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016f7a:	4648      	mov	r0, r9
 8016f7c:	f001 fdb9 	bl	8018af2 <__multiply>
 8016f80:	900c      	str	r0, [sp, #48]	; 0x30
 8016f82:	2800      	cmp	r0, #0
 8016f84:	f43f ae92 	beq.w	8016cac <_strtod_l+0x43c>
 8016f88:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016f8a:	4648      	mov	r0, r9
 8016f8c:	f001 fcca 	bl	8018924 <_Bfree>
 8016f90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016f92:	931c      	str	r3, [sp, #112]	; 0x70
 8016f94:	2e00      	cmp	r6, #0
 8016f96:	dc7a      	bgt.n	801708e <_strtod_l+0x81e>
 8016f98:	9b06      	ldr	r3, [sp, #24]
 8016f9a:	2b00      	cmp	r3, #0
 8016f9c:	dd08      	ble.n	8016fb0 <_strtod_l+0x740>
 8016f9e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016fa0:	9905      	ldr	r1, [sp, #20]
 8016fa2:	4648      	mov	r0, r9
 8016fa4:	f001 fe3c 	bl	8018c20 <__pow5mult>
 8016fa8:	9005      	str	r0, [sp, #20]
 8016faa:	2800      	cmp	r0, #0
 8016fac:	f43f ae7e 	beq.w	8016cac <_strtod_l+0x43c>
 8016fb0:	2d00      	cmp	r5, #0
 8016fb2:	dd08      	ble.n	8016fc6 <_strtod_l+0x756>
 8016fb4:	462a      	mov	r2, r5
 8016fb6:	9905      	ldr	r1, [sp, #20]
 8016fb8:	4648      	mov	r0, r9
 8016fba:	f001 fe7f 	bl	8018cbc <__lshift>
 8016fbe:	9005      	str	r0, [sp, #20]
 8016fc0:	2800      	cmp	r0, #0
 8016fc2:	f43f ae73 	beq.w	8016cac <_strtod_l+0x43c>
 8016fc6:	2f00      	cmp	r7, #0
 8016fc8:	dd08      	ble.n	8016fdc <_strtod_l+0x76c>
 8016fca:	4641      	mov	r1, r8
 8016fcc:	463a      	mov	r2, r7
 8016fce:	4648      	mov	r0, r9
 8016fd0:	f001 fe74 	bl	8018cbc <__lshift>
 8016fd4:	4680      	mov	r8, r0
 8016fd6:	2800      	cmp	r0, #0
 8016fd8:	f43f ae68 	beq.w	8016cac <_strtod_l+0x43c>
 8016fdc:	9a05      	ldr	r2, [sp, #20]
 8016fde:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016fe0:	4648      	mov	r0, r9
 8016fe2:	f001 fed9 	bl	8018d98 <__mdiff>
 8016fe6:	4604      	mov	r4, r0
 8016fe8:	2800      	cmp	r0, #0
 8016fea:	f43f ae5f 	beq.w	8016cac <_strtod_l+0x43c>
 8016fee:	68c3      	ldr	r3, [r0, #12]
 8016ff0:	930c      	str	r3, [sp, #48]	; 0x30
 8016ff2:	2300      	movs	r3, #0
 8016ff4:	60c3      	str	r3, [r0, #12]
 8016ff6:	4641      	mov	r1, r8
 8016ff8:	f001 feb4 	bl	8018d64 <__mcmp>
 8016ffc:	2800      	cmp	r0, #0
 8016ffe:	da55      	bge.n	80170ac <_strtod_l+0x83c>
 8017000:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017002:	b9e3      	cbnz	r3, 801703e <_strtod_l+0x7ce>
 8017004:	f1ba 0f00 	cmp.w	sl, #0
 8017008:	d119      	bne.n	801703e <_strtod_l+0x7ce>
 801700a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801700e:	b9b3      	cbnz	r3, 801703e <_strtod_l+0x7ce>
 8017010:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017014:	0d1b      	lsrs	r3, r3, #20
 8017016:	051b      	lsls	r3, r3, #20
 8017018:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801701c:	d90f      	bls.n	801703e <_strtod_l+0x7ce>
 801701e:	6963      	ldr	r3, [r4, #20]
 8017020:	b913      	cbnz	r3, 8017028 <_strtod_l+0x7b8>
 8017022:	6923      	ldr	r3, [r4, #16]
 8017024:	2b01      	cmp	r3, #1
 8017026:	dd0a      	ble.n	801703e <_strtod_l+0x7ce>
 8017028:	4621      	mov	r1, r4
 801702a:	2201      	movs	r2, #1
 801702c:	4648      	mov	r0, r9
 801702e:	f001 fe45 	bl	8018cbc <__lshift>
 8017032:	4641      	mov	r1, r8
 8017034:	4604      	mov	r4, r0
 8017036:	f001 fe95 	bl	8018d64 <__mcmp>
 801703a:	2800      	cmp	r0, #0
 801703c:	dc67      	bgt.n	801710e <_strtod_l+0x89e>
 801703e:	9b04      	ldr	r3, [sp, #16]
 8017040:	2b00      	cmp	r3, #0
 8017042:	d171      	bne.n	8017128 <_strtod_l+0x8b8>
 8017044:	e63d      	b.n	8016cc2 <_strtod_l+0x452>
 8017046:	f018 0f01 	tst.w	r8, #1
 801704a:	d004      	beq.n	8017056 <_strtod_l+0x7e6>
 801704c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017050:	f7e9 fad2 	bl	80005f8 <__aeabi_dmul>
 8017054:	2301      	movs	r3, #1
 8017056:	ea4f 0868 	mov.w	r8, r8, asr #1
 801705a:	3508      	adds	r5, #8
 801705c:	e6e5      	b.n	8016e2a <_strtod_l+0x5ba>
 801705e:	f04f 32ff 	mov.w	r2, #4294967295
 8017062:	fa02 f303 	lsl.w	r3, r2, r3
 8017066:	ea03 0a0a 	and.w	sl, r3, sl
 801706a:	e6ff      	b.n	8016e6c <_strtod_l+0x5fc>
 801706c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8017070:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8017074:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8017078:	36e2      	adds	r6, #226	; 0xe2
 801707a:	fa01 f306 	lsl.w	r3, r1, r6
 801707e:	930a      	str	r3, [sp, #40]	; 0x28
 8017080:	910f      	str	r1, [sp, #60]	; 0x3c
 8017082:	e75d      	b.n	8016f40 <_strtod_l+0x6d0>
 8017084:	2300      	movs	r3, #0
 8017086:	930a      	str	r3, [sp, #40]	; 0x28
 8017088:	2301      	movs	r3, #1
 801708a:	930f      	str	r3, [sp, #60]	; 0x3c
 801708c:	e758      	b.n	8016f40 <_strtod_l+0x6d0>
 801708e:	4632      	mov	r2, r6
 8017090:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017092:	4648      	mov	r0, r9
 8017094:	f001 fe12 	bl	8018cbc <__lshift>
 8017098:	901c      	str	r0, [sp, #112]	; 0x70
 801709a:	2800      	cmp	r0, #0
 801709c:	f47f af7c 	bne.w	8016f98 <_strtod_l+0x728>
 80170a0:	e604      	b.n	8016cac <_strtod_l+0x43c>
 80170a2:	bf00      	nop
 80170a4:	0801b368 	.word	0x0801b368
 80170a8:	fffffc02 	.word	0xfffffc02
 80170ac:	465d      	mov	r5, fp
 80170ae:	f040 8086 	bne.w	80171be <_strtod_l+0x94e>
 80170b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80170b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80170b8:	b32a      	cbz	r2, 8017106 <_strtod_l+0x896>
 80170ba:	4aaf      	ldr	r2, [pc, #700]	; (8017378 <_strtod_l+0xb08>)
 80170bc:	4293      	cmp	r3, r2
 80170be:	d153      	bne.n	8017168 <_strtod_l+0x8f8>
 80170c0:	9b04      	ldr	r3, [sp, #16]
 80170c2:	4650      	mov	r0, sl
 80170c4:	b1d3      	cbz	r3, 80170fc <_strtod_l+0x88c>
 80170c6:	4aad      	ldr	r2, [pc, #692]	; (801737c <_strtod_l+0xb0c>)
 80170c8:	402a      	ands	r2, r5
 80170ca:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80170ce:	f04f 31ff 	mov.w	r1, #4294967295
 80170d2:	d816      	bhi.n	8017102 <_strtod_l+0x892>
 80170d4:	0d12      	lsrs	r2, r2, #20
 80170d6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80170da:	fa01 f303 	lsl.w	r3, r1, r3
 80170de:	4298      	cmp	r0, r3
 80170e0:	d142      	bne.n	8017168 <_strtod_l+0x8f8>
 80170e2:	4ba7      	ldr	r3, [pc, #668]	; (8017380 <_strtod_l+0xb10>)
 80170e4:	429d      	cmp	r5, r3
 80170e6:	d102      	bne.n	80170ee <_strtod_l+0x87e>
 80170e8:	3001      	adds	r0, #1
 80170ea:	f43f addf 	beq.w	8016cac <_strtod_l+0x43c>
 80170ee:	4ba3      	ldr	r3, [pc, #652]	; (801737c <_strtod_l+0xb0c>)
 80170f0:	402b      	ands	r3, r5
 80170f2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80170f6:	f04f 0a00 	mov.w	sl, #0
 80170fa:	e7a0      	b.n	801703e <_strtod_l+0x7ce>
 80170fc:	f04f 33ff 	mov.w	r3, #4294967295
 8017100:	e7ed      	b.n	80170de <_strtod_l+0x86e>
 8017102:	460b      	mov	r3, r1
 8017104:	e7eb      	b.n	80170de <_strtod_l+0x86e>
 8017106:	bb7b      	cbnz	r3, 8017168 <_strtod_l+0x8f8>
 8017108:	f1ba 0f00 	cmp.w	sl, #0
 801710c:	d12c      	bne.n	8017168 <_strtod_l+0x8f8>
 801710e:	9904      	ldr	r1, [sp, #16]
 8017110:	4a9a      	ldr	r2, [pc, #616]	; (801737c <_strtod_l+0xb0c>)
 8017112:	465b      	mov	r3, fp
 8017114:	b1f1      	cbz	r1, 8017154 <_strtod_l+0x8e4>
 8017116:	ea02 010b 	and.w	r1, r2, fp
 801711a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801711e:	dc19      	bgt.n	8017154 <_strtod_l+0x8e4>
 8017120:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8017124:	f77f ae5b 	ble.w	8016dde <_strtod_l+0x56e>
 8017128:	4a96      	ldr	r2, [pc, #600]	; (8017384 <_strtod_l+0xb14>)
 801712a:	2300      	movs	r3, #0
 801712c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8017130:	4650      	mov	r0, sl
 8017132:	4659      	mov	r1, fp
 8017134:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8017138:	f7e9 fa5e 	bl	80005f8 <__aeabi_dmul>
 801713c:	4682      	mov	sl, r0
 801713e:	468b      	mov	fp, r1
 8017140:	2900      	cmp	r1, #0
 8017142:	f47f adbe 	bne.w	8016cc2 <_strtod_l+0x452>
 8017146:	2800      	cmp	r0, #0
 8017148:	f47f adbb 	bne.w	8016cc2 <_strtod_l+0x452>
 801714c:	2322      	movs	r3, #34	; 0x22
 801714e:	f8c9 3000 	str.w	r3, [r9]
 8017152:	e5b6      	b.n	8016cc2 <_strtod_l+0x452>
 8017154:	4013      	ands	r3, r2
 8017156:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801715a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801715e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8017162:	f04f 3aff 	mov.w	sl, #4294967295
 8017166:	e76a      	b.n	801703e <_strtod_l+0x7ce>
 8017168:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801716a:	b193      	cbz	r3, 8017192 <_strtod_l+0x922>
 801716c:	422b      	tst	r3, r5
 801716e:	f43f af66 	beq.w	801703e <_strtod_l+0x7ce>
 8017172:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017174:	9a04      	ldr	r2, [sp, #16]
 8017176:	4650      	mov	r0, sl
 8017178:	4659      	mov	r1, fp
 801717a:	b173      	cbz	r3, 801719a <_strtod_l+0x92a>
 801717c:	f7ff fb5c 	bl	8016838 <sulp>
 8017180:	4602      	mov	r2, r0
 8017182:	460b      	mov	r3, r1
 8017184:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017188:	f7e9 f880 	bl	800028c <__adddf3>
 801718c:	4682      	mov	sl, r0
 801718e:	468b      	mov	fp, r1
 8017190:	e755      	b.n	801703e <_strtod_l+0x7ce>
 8017192:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017194:	ea13 0f0a 	tst.w	r3, sl
 8017198:	e7e9      	b.n	801716e <_strtod_l+0x8fe>
 801719a:	f7ff fb4d 	bl	8016838 <sulp>
 801719e:	4602      	mov	r2, r0
 80171a0:	460b      	mov	r3, r1
 80171a2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80171a6:	f7e9 f86f 	bl	8000288 <__aeabi_dsub>
 80171aa:	2200      	movs	r2, #0
 80171ac:	2300      	movs	r3, #0
 80171ae:	4682      	mov	sl, r0
 80171b0:	468b      	mov	fp, r1
 80171b2:	f7e9 fc89 	bl	8000ac8 <__aeabi_dcmpeq>
 80171b6:	2800      	cmp	r0, #0
 80171b8:	f47f ae11 	bne.w	8016dde <_strtod_l+0x56e>
 80171bc:	e73f      	b.n	801703e <_strtod_l+0x7ce>
 80171be:	4641      	mov	r1, r8
 80171c0:	4620      	mov	r0, r4
 80171c2:	f001 ff0c 	bl	8018fde <__ratio>
 80171c6:	ec57 6b10 	vmov	r6, r7, d0
 80171ca:	2200      	movs	r2, #0
 80171cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80171d0:	ee10 0a10 	vmov	r0, s0
 80171d4:	4639      	mov	r1, r7
 80171d6:	f7e9 fc8b 	bl	8000af0 <__aeabi_dcmple>
 80171da:	2800      	cmp	r0, #0
 80171dc:	d077      	beq.n	80172ce <_strtod_l+0xa5e>
 80171de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80171e0:	2b00      	cmp	r3, #0
 80171e2:	d04a      	beq.n	801727a <_strtod_l+0xa0a>
 80171e4:	4b68      	ldr	r3, [pc, #416]	; (8017388 <_strtod_l+0xb18>)
 80171e6:	2200      	movs	r2, #0
 80171e8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80171ec:	4f66      	ldr	r7, [pc, #408]	; (8017388 <_strtod_l+0xb18>)
 80171ee:	2600      	movs	r6, #0
 80171f0:	4b62      	ldr	r3, [pc, #392]	; (801737c <_strtod_l+0xb0c>)
 80171f2:	402b      	ands	r3, r5
 80171f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80171f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80171f8:	4b64      	ldr	r3, [pc, #400]	; (801738c <_strtod_l+0xb1c>)
 80171fa:	429a      	cmp	r2, r3
 80171fc:	f040 80ce 	bne.w	801739c <_strtod_l+0xb2c>
 8017200:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017204:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017208:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 801720c:	ec4b ab10 	vmov	d0, sl, fp
 8017210:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8017214:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8017218:	f001 fe1c 	bl	8018e54 <__ulp>
 801721c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017220:	ec53 2b10 	vmov	r2, r3, d0
 8017224:	f7e9 f9e8 	bl	80005f8 <__aeabi_dmul>
 8017228:	4652      	mov	r2, sl
 801722a:	465b      	mov	r3, fp
 801722c:	f7e9 f82e 	bl	800028c <__adddf3>
 8017230:	460b      	mov	r3, r1
 8017232:	4952      	ldr	r1, [pc, #328]	; (801737c <_strtod_l+0xb0c>)
 8017234:	4a56      	ldr	r2, [pc, #344]	; (8017390 <_strtod_l+0xb20>)
 8017236:	4019      	ands	r1, r3
 8017238:	4291      	cmp	r1, r2
 801723a:	4682      	mov	sl, r0
 801723c:	d95b      	bls.n	80172f6 <_strtod_l+0xa86>
 801723e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017240:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8017244:	4293      	cmp	r3, r2
 8017246:	d103      	bne.n	8017250 <_strtod_l+0x9e0>
 8017248:	9b08      	ldr	r3, [sp, #32]
 801724a:	3301      	adds	r3, #1
 801724c:	f43f ad2e 	beq.w	8016cac <_strtod_l+0x43c>
 8017250:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8017380 <_strtod_l+0xb10>
 8017254:	f04f 3aff 	mov.w	sl, #4294967295
 8017258:	991c      	ldr	r1, [sp, #112]	; 0x70
 801725a:	4648      	mov	r0, r9
 801725c:	f001 fb62 	bl	8018924 <_Bfree>
 8017260:	9905      	ldr	r1, [sp, #20]
 8017262:	4648      	mov	r0, r9
 8017264:	f001 fb5e 	bl	8018924 <_Bfree>
 8017268:	4641      	mov	r1, r8
 801726a:	4648      	mov	r0, r9
 801726c:	f001 fb5a 	bl	8018924 <_Bfree>
 8017270:	4621      	mov	r1, r4
 8017272:	4648      	mov	r0, r9
 8017274:	f001 fb56 	bl	8018924 <_Bfree>
 8017278:	e619      	b.n	8016eae <_strtod_l+0x63e>
 801727a:	f1ba 0f00 	cmp.w	sl, #0
 801727e:	d11a      	bne.n	80172b6 <_strtod_l+0xa46>
 8017280:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017284:	b9eb      	cbnz	r3, 80172c2 <_strtod_l+0xa52>
 8017286:	2200      	movs	r2, #0
 8017288:	4b3f      	ldr	r3, [pc, #252]	; (8017388 <_strtod_l+0xb18>)
 801728a:	4630      	mov	r0, r6
 801728c:	4639      	mov	r1, r7
 801728e:	f7e9 fc25 	bl	8000adc <__aeabi_dcmplt>
 8017292:	b9c8      	cbnz	r0, 80172c8 <_strtod_l+0xa58>
 8017294:	4630      	mov	r0, r6
 8017296:	4639      	mov	r1, r7
 8017298:	2200      	movs	r2, #0
 801729a:	4b3e      	ldr	r3, [pc, #248]	; (8017394 <_strtod_l+0xb24>)
 801729c:	f7e9 f9ac 	bl	80005f8 <__aeabi_dmul>
 80172a0:	4606      	mov	r6, r0
 80172a2:	460f      	mov	r7, r1
 80172a4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80172a8:	9618      	str	r6, [sp, #96]	; 0x60
 80172aa:	9319      	str	r3, [sp, #100]	; 0x64
 80172ac:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80172b0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80172b4:	e79c      	b.n	80171f0 <_strtod_l+0x980>
 80172b6:	f1ba 0f01 	cmp.w	sl, #1
 80172ba:	d102      	bne.n	80172c2 <_strtod_l+0xa52>
 80172bc:	2d00      	cmp	r5, #0
 80172be:	f43f ad8e 	beq.w	8016dde <_strtod_l+0x56e>
 80172c2:	2200      	movs	r2, #0
 80172c4:	4b34      	ldr	r3, [pc, #208]	; (8017398 <_strtod_l+0xb28>)
 80172c6:	e78f      	b.n	80171e8 <_strtod_l+0x978>
 80172c8:	2600      	movs	r6, #0
 80172ca:	4f32      	ldr	r7, [pc, #200]	; (8017394 <_strtod_l+0xb24>)
 80172cc:	e7ea      	b.n	80172a4 <_strtod_l+0xa34>
 80172ce:	4b31      	ldr	r3, [pc, #196]	; (8017394 <_strtod_l+0xb24>)
 80172d0:	4630      	mov	r0, r6
 80172d2:	4639      	mov	r1, r7
 80172d4:	2200      	movs	r2, #0
 80172d6:	f7e9 f98f 	bl	80005f8 <__aeabi_dmul>
 80172da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80172dc:	4606      	mov	r6, r0
 80172de:	460f      	mov	r7, r1
 80172e0:	b933      	cbnz	r3, 80172f0 <_strtod_l+0xa80>
 80172e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80172e6:	9010      	str	r0, [sp, #64]	; 0x40
 80172e8:	9311      	str	r3, [sp, #68]	; 0x44
 80172ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80172ee:	e7df      	b.n	80172b0 <_strtod_l+0xa40>
 80172f0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80172f4:	e7f9      	b.n	80172ea <_strtod_l+0xa7a>
 80172f6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80172fa:	9b04      	ldr	r3, [sp, #16]
 80172fc:	2b00      	cmp	r3, #0
 80172fe:	d1ab      	bne.n	8017258 <_strtod_l+0x9e8>
 8017300:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017304:	0d1b      	lsrs	r3, r3, #20
 8017306:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017308:	051b      	lsls	r3, r3, #20
 801730a:	429a      	cmp	r2, r3
 801730c:	465d      	mov	r5, fp
 801730e:	d1a3      	bne.n	8017258 <_strtod_l+0x9e8>
 8017310:	4639      	mov	r1, r7
 8017312:	4630      	mov	r0, r6
 8017314:	f7e9 fc20 	bl	8000b58 <__aeabi_d2iz>
 8017318:	f7e9 f904 	bl	8000524 <__aeabi_i2d>
 801731c:	460b      	mov	r3, r1
 801731e:	4602      	mov	r2, r0
 8017320:	4639      	mov	r1, r7
 8017322:	4630      	mov	r0, r6
 8017324:	f7e8 ffb0 	bl	8000288 <__aeabi_dsub>
 8017328:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801732a:	4606      	mov	r6, r0
 801732c:	460f      	mov	r7, r1
 801732e:	b933      	cbnz	r3, 801733e <_strtod_l+0xace>
 8017330:	f1ba 0f00 	cmp.w	sl, #0
 8017334:	d103      	bne.n	801733e <_strtod_l+0xace>
 8017336:	f3cb 0513 	ubfx	r5, fp, #0, #20
 801733a:	2d00      	cmp	r5, #0
 801733c:	d06d      	beq.n	801741a <_strtod_l+0xbaa>
 801733e:	a30a      	add	r3, pc, #40	; (adr r3, 8017368 <_strtod_l+0xaf8>)
 8017340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017344:	4630      	mov	r0, r6
 8017346:	4639      	mov	r1, r7
 8017348:	f7e9 fbc8 	bl	8000adc <__aeabi_dcmplt>
 801734c:	2800      	cmp	r0, #0
 801734e:	f47f acb8 	bne.w	8016cc2 <_strtod_l+0x452>
 8017352:	a307      	add	r3, pc, #28	; (adr r3, 8017370 <_strtod_l+0xb00>)
 8017354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017358:	4630      	mov	r0, r6
 801735a:	4639      	mov	r1, r7
 801735c:	f7e9 fbdc 	bl	8000b18 <__aeabi_dcmpgt>
 8017360:	2800      	cmp	r0, #0
 8017362:	f43f af79 	beq.w	8017258 <_strtod_l+0x9e8>
 8017366:	e4ac      	b.n	8016cc2 <_strtod_l+0x452>
 8017368:	94a03595 	.word	0x94a03595
 801736c:	3fdfffff 	.word	0x3fdfffff
 8017370:	35afe535 	.word	0x35afe535
 8017374:	3fe00000 	.word	0x3fe00000
 8017378:	000fffff 	.word	0x000fffff
 801737c:	7ff00000 	.word	0x7ff00000
 8017380:	7fefffff 	.word	0x7fefffff
 8017384:	39500000 	.word	0x39500000
 8017388:	3ff00000 	.word	0x3ff00000
 801738c:	7fe00000 	.word	0x7fe00000
 8017390:	7c9fffff 	.word	0x7c9fffff
 8017394:	3fe00000 	.word	0x3fe00000
 8017398:	bff00000 	.word	0xbff00000
 801739c:	9b04      	ldr	r3, [sp, #16]
 801739e:	b333      	cbz	r3, 80173ee <_strtod_l+0xb7e>
 80173a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80173a2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80173a6:	d822      	bhi.n	80173ee <_strtod_l+0xb7e>
 80173a8:	a327      	add	r3, pc, #156	; (adr r3, 8017448 <_strtod_l+0xbd8>)
 80173aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173ae:	4630      	mov	r0, r6
 80173b0:	4639      	mov	r1, r7
 80173b2:	f7e9 fb9d 	bl	8000af0 <__aeabi_dcmple>
 80173b6:	b1a0      	cbz	r0, 80173e2 <_strtod_l+0xb72>
 80173b8:	4639      	mov	r1, r7
 80173ba:	4630      	mov	r0, r6
 80173bc:	f7e9 fbf4 	bl	8000ba8 <__aeabi_d2uiz>
 80173c0:	2800      	cmp	r0, #0
 80173c2:	bf08      	it	eq
 80173c4:	2001      	moveq	r0, #1
 80173c6:	f7e9 f89d 	bl	8000504 <__aeabi_ui2d>
 80173ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80173cc:	4606      	mov	r6, r0
 80173ce:	460f      	mov	r7, r1
 80173d0:	bb03      	cbnz	r3, 8017414 <_strtod_l+0xba4>
 80173d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80173d6:	9012      	str	r0, [sp, #72]	; 0x48
 80173d8:	9313      	str	r3, [sp, #76]	; 0x4c
 80173da:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80173de:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80173e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80173e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80173e6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80173ea:	1a9b      	subs	r3, r3, r2
 80173ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80173ee:	ed9d 0b08 	vldr	d0, [sp, #32]
 80173f2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80173f6:	f001 fd2d 	bl	8018e54 <__ulp>
 80173fa:	4650      	mov	r0, sl
 80173fc:	ec53 2b10 	vmov	r2, r3, d0
 8017400:	4659      	mov	r1, fp
 8017402:	f7e9 f8f9 	bl	80005f8 <__aeabi_dmul>
 8017406:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801740a:	f7e8 ff3f 	bl	800028c <__adddf3>
 801740e:	4682      	mov	sl, r0
 8017410:	468b      	mov	fp, r1
 8017412:	e772      	b.n	80172fa <_strtod_l+0xa8a>
 8017414:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8017418:	e7df      	b.n	80173da <_strtod_l+0xb6a>
 801741a:	a30d      	add	r3, pc, #52	; (adr r3, 8017450 <_strtod_l+0xbe0>)
 801741c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017420:	f7e9 fb5c 	bl	8000adc <__aeabi_dcmplt>
 8017424:	e79c      	b.n	8017360 <_strtod_l+0xaf0>
 8017426:	2300      	movs	r3, #0
 8017428:	930d      	str	r3, [sp, #52]	; 0x34
 801742a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801742c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801742e:	6013      	str	r3, [r2, #0]
 8017430:	f7ff ba61 	b.w	80168f6 <_strtod_l+0x86>
 8017434:	2b65      	cmp	r3, #101	; 0x65
 8017436:	f04f 0200 	mov.w	r2, #0
 801743a:	f43f ab4e 	beq.w	8016ada <_strtod_l+0x26a>
 801743e:	2101      	movs	r1, #1
 8017440:	4614      	mov	r4, r2
 8017442:	9104      	str	r1, [sp, #16]
 8017444:	f7ff bacb 	b.w	80169de <_strtod_l+0x16e>
 8017448:	ffc00000 	.word	0xffc00000
 801744c:	41dfffff 	.word	0x41dfffff
 8017450:	94a03595 	.word	0x94a03595
 8017454:	3fcfffff 	.word	0x3fcfffff

08017458 <_strtod_r>:
 8017458:	4b05      	ldr	r3, [pc, #20]	; (8017470 <_strtod_r+0x18>)
 801745a:	681b      	ldr	r3, [r3, #0]
 801745c:	b410      	push	{r4}
 801745e:	6a1b      	ldr	r3, [r3, #32]
 8017460:	4c04      	ldr	r4, [pc, #16]	; (8017474 <_strtod_r+0x1c>)
 8017462:	2b00      	cmp	r3, #0
 8017464:	bf08      	it	eq
 8017466:	4623      	moveq	r3, r4
 8017468:	f85d 4b04 	ldr.w	r4, [sp], #4
 801746c:	f7ff ba00 	b.w	8016870 <_strtod_l>
 8017470:	20000e0c 	.word	0x20000e0c
 8017474:	20000e70 	.word	0x20000e70

08017478 <_strtol_l.isra.0>:
 8017478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801747c:	4680      	mov	r8, r0
 801747e:	4689      	mov	r9, r1
 8017480:	4692      	mov	sl, r2
 8017482:	461e      	mov	r6, r3
 8017484:	460f      	mov	r7, r1
 8017486:	463d      	mov	r5, r7
 8017488:	9808      	ldr	r0, [sp, #32]
 801748a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801748e:	f001 f9ed 	bl	801886c <__locale_ctype_ptr_l>
 8017492:	4420      	add	r0, r4
 8017494:	7843      	ldrb	r3, [r0, #1]
 8017496:	f013 0308 	ands.w	r3, r3, #8
 801749a:	d132      	bne.n	8017502 <_strtol_l.isra.0+0x8a>
 801749c:	2c2d      	cmp	r4, #45	; 0x2d
 801749e:	d132      	bne.n	8017506 <_strtol_l.isra.0+0x8e>
 80174a0:	787c      	ldrb	r4, [r7, #1]
 80174a2:	1cbd      	adds	r5, r7, #2
 80174a4:	2201      	movs	r2, #1
 80174a6:	2e00      	cmp	r6, #0
 80174a8:	d05d      	beq.n	8017566 <_strtol_l.isra.0+0xee>
 80174aa:	2e10      	cmp	r6, #16
 80174ac:	d109      	bne.n	80174c2 <_strtol_l.isra.0+0x4a>
 80174ae:	2c30      	cmp	r4, #48	; 0x30
 80174b0:	d107      	bne.n	80174c2 <_strtol_l.isra.0+0x4a>
 80174b2:	782b      	ldrb	r3, [r5, #0]
 80174b4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80174b8:	2b58      	cmp	r3, #88	; 0x58
 80174ba:	d14f      	bne.n	801755c <_strtol_l.isra.0+0xe4>
 80174bc:	786c      	ldrb	r4, [r5, #1]
 80174be:	2610      	movs	r6, #16
 80174c0:	3502      	adds	r5, #2
 80174c2:	2a00      	cmp	r2, #0
 80174c4:	bf14      	ite	ne
 80174c6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80174ca:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80174ce:	2700      	movs	r7, #0
 80174d0:	fbb1 fcf6 	udiv	ip, r1, r6
 80174d4:	4638      	mov	r0, r7
 80174d6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80174da:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80174de:	2b09      	cmp	r3, #9
 80174e0:	d817      	bhi.n	8017512 <_strtol_l.isra.0+0x9a>
 80174e2:	461c      	mov	r4, r3
 80174e4:	42a6      	cmp	r6, r4
 80174e6:	dd23      	ble.n	8017530 <_strtol_l.isra.0+0xb8>
 80174e8:	1c7b      	adds	r3, r7, #1
 80174ea:	d007      	beq.n	80174fc <_strtol_l.isra.0+0x84>
 80174ec:	4584      	cmp	ip, r0
 80174ee:	d31c      	bcc.n	801752a <_strtol_l.isra.0+0xb2>
 80174f0:	d101      	bne.n	80174f6 <_strtol_l.isra.0+0x7e>
 80174f2:	45a6      	cmp	lr, r4
 80174f4:	db19      	blt.n	801752a <_strtol_l.isra.0+0xb2>
 80174f6:	fb00 4006 	mla	r0, r0, r6, r4
 80174fa:	2701      	movs	r7, #1
 80174fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017500:	e7eb      	b.n	80174da <_strtol_l.isra.0+0x62>
 8017502:	462f      	mov	r7, r5
 8017504:	e7bf      	b.n	8017486 <_strtol_l.isra.0+0xe>
 8017506:	2c2b      	cmp	r4, #43	; 0x2b
 8017508:	bf04      	itt	eq
 801750a:	1cbd      	addeq	r5, r7, #2
 801750c:	787c      	ldrbeq	r4, [r7, #1]
 801750e:	461a      	mov	r2, r3
 8017510:	e7c9      	b.n	80174a6 <_strtol_l.isra.0+0x2e>
 8017512:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8017516:	2b19      	cmp	r3, #25
 8017518:	d801      	bhi.n	801751e <_strtol_l.isra.0+0xa6>
 801751a:	3c37      	subs	r4, #55	; 0x37
 801751c:	e7e2      	b.n	80174e4 <_strtol_l.isra.0+0x6c>
 801751e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8017522:	2b19      	cmp	r3, #25
 8017524:	d804      	bhi.n	8017530 <_strtol_l.isra.0+0xb8>
 8017526:	3c57      	subs	r4, #87	; 0x57
 8017528:	e7dc      	b.n	80174e4 <_strtol_l.isra.0+0x6c>
 801752a:	f04f 37ff 	mov.w	r7, #4294967295
 801752e:	e7e5      	b.n	80174fc <_strtol_l.isra.0+0x84>
 8017530:	1c7b      	adds	r3, r7, #1
 8017532:	d108      	bne.n	8017546 <_strtol_l.isra.0+0xce>
 8017534:	2322      	movs	r3, #34	; 0x22
 8017536:	f8c8 3000 	str.w	r3, [r8]
 801753a:	4608      	mov	r0, r1
 801753c:	f1ba 0f00 	cmp.w	sl, #0
 8017540:	d107      	bne.n	8017552 <_strtol_l.isra.0+0xda>
 8017542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017546:	b102      	cbz	r2, 801754a <_strtol_l.isra.0+0xd2>
 8017548:	4240      	negs	r0, r0
 801754a:	f1ba 0f00 	cmp.w	sl, #0
 801754e:	d0f8      	beq.n	8017542 <_strtol_l.isra.0+0xca>
 8017550:	b10f      	cbz	r7, 8017556 <_strtol_l.isra.0+0xde>
 8017552:	f105 39ff 	add.w	r9, r5, #4294967295
 8017556:	f8ca 9000 	str.w	r9, [sl]
 801755a:	e7f2      	b.n	8017542 <_strtol_l.isra.0+0xca>
 801755c:	2430      	movs	r4, #48	; 0x30
 801755e:	2e00      	cmp	r6, #0
 8017560:	d1af      	bne.n	80174c2 <_strtol_l.isra.0+0x4a>
 8017562:	2608      	movs	r6, #8
 8017564:	e7ad      	b.n	80174c2 <_strtol_l.isra.0+0x4a>
 8017566:	2c30      	cmp	r4, #48	; 0x30
 8017568:	d0a3      	beq.n	80174b2 <_strtol_l.isra.0+0x3a>
 801756a:	260a      	movs	r6, #10
 801756c:	e7a9      	b.n	80174c2 <_strtol_l.isra.0+0x4a>
	...

08017570 <_strtol_r>:
 8017570:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017572:	4c06      	ldr	r4, [pc, #24]	; (801758c <_strtol_r+0x1c>)
 8017574:	4d06      	ldr	r5, [pc, #24]	; (8017590 <_strtol_r+0x20>)
 8017576:	6824      	ldr	r4, [r4, #0]
 8017578:	6a24      	ldr	r4, [r4, #32]
 801757a:	2c00      	cmp	r4, #0
 801757c:	bf08      	it	eq
 801757e:	462c      	moveq	r4, r5
 8017580:	9400      	str	r4, [sp, #0]
 8017582:	f7ff ff79 	bl	8017478 <_strtol_l.isra.0>
 8017586:	b003      	add	sp, #12
 8017588:	bd30      	pop	{r4, r5, pc}
 801758a:	bf00      	nop
 801758c:	20000e0c 	.word	0x20000e0c
 8017590:	20000e70 	.word	0x20000e70

08017594 <quorem>:
 8017594:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017598:	6903      	ldr	r3, [r0, #16]
 801759a:	690c      	ldr	r4, [r1, #16]
 801759c:	42a3      	cmp	r3, r4
 801759e:	4680      	mov	r8, r0
 80175a0:	f2c0 8082 	blt.w	80176a8 <quorem+0x114>
 80175a4:	3c01      	subs	r4, #1
 80175a6:	f101 0714 	add.w	r7, r1, #20
 80175aa:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80175ae:	f100 0614 	add.w	r6, r0, #20
 80175b2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80175b6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80175ba:	eb06 030c 	add.w	r3, r6, ip
 80175be:	3501      	adds	r5, #1
 80175c0:	eb07 090c 	add.w	r9, r7, ip
 80175c4:	9301      	str	r3, [sp, #4]
 80175c6:	fbb0 f5f5 	udiv	r5, r0, r5
 80175ca:	b395      	cbz	r5, 8017632 <quorem+0x9e>
 80175cc:	f04f 0a00 	mov.w	sl, #0
 80175d0:	4638      	mov	r0, r7
 80175d2:	46b6      	mov	lr, r6
 80175d4:	46d3      	mov	fp, sl
 80175d6:	f850 2b04 	ldr.w	r2, [r0], #4
 80175da:	b293      	uxth	r3, r2
 80175dc:	fb05 a303 	mla	r3, r5, r3, sl
 80175e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80175e4:	b29b      	uxth	r3, r3
 80175e6:	ebab 0303 	sub.w	r3, fp, r3
 80175ea:	0c12      	lsrs	r2, r2, #16
 80175ec:	f8de b000 	ldr.w	fp, [lr]
 80175f0:	fb05 a202 	mla	r2, r5, r2, sl
 80175f4:	fa13 f38b 	uxtah	r3, r3, fp
 80175f8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80175fc:	fa1f fb82 	uxth.w	fp, r2
 8017600:	f8de 2000 	ldr.w	r2, [lr]
 8017604:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8017608:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801760c:	b29b      	uxth	r3, r3
 801760e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017612:	4581      	cmp	r9, r0
 8017614:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8017618:	f84e 3b04 	str.w	r3, [lr], #4
 801761c:	d2db      	bcs.n	80175d6 <quorem+0x42>
 801761e:	f856 300c 	ldr.w	r3, [r6, ip]
 8017622:	b933      	cbnz	r3, 8017632 <quorem+0x9e>
 8017624:	9b01      	ldr	r3, [sp, #4]
 8017626:	3b04      	subs	r3, #4
 8017628:	429e      	cmp	r6, r3
 801762a:	461a      	mov	r2, r3
 801762c:	d330      	bcc.n	8017690 <quorem+0xfc>
 801762e:	f8c8 4010 	str.w	r4, [r8, #16]
 8017632:	4640      	mov	r0, r8
 8017634:	f001 fb96 	bl	8018d64 <__mcmp>
 8017638:	2800      	cmp	r0, #0
 801763a:	db25      	blt.n	8017688 <quorem+0xf4>
 801763c:	3501      	adds	r5, #1
 801763e:	4630      	mov	r0, r6
 8017640:	f04f 0c00 	mov.w	ip, #0
 8017644:	f857 2b04 	ldr.w	r2, [r7], #4
 8017648:	f8d0 e000 	ldr.w	lr, [r0]
 801764c:	b293      	uxth	r3, r2
 801764e:	ebac 0303 	sub.w	r3, ip, r3
 8017652:	0c12      	lsrs	r2, r2, #16
 8017654:	fa13 f38e 	uxtah	r3, r3, lr
 8017658:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801765c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017660:	b29b      	uxth	r3, r3
 8017662:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017666:	45b9      	cmp	r9, r7
 8017668:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801766c:	f840 3b04 	str.w	r3, [r0], #4
 8017670:	d2e8      	bcs.n	8017644 <quorem+0xb0>
 8017672:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8017676:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801767a:	b92a      	cbnz	r2, 8017688 <quorem+0xf4>
 801767c:	3b04      	subs	r3, #4
 801767e:	429e      	cmp	r6, r3
 8017680:	461a      	mov	r2, r3
 8017682:	d30b      	bcc.n	801769c <quorem+0x108>
 8017684:	f8c8 4010 	str.w	r4, [r8, #16]
 8017688:	4628      	mov	r0, r5
 801768a:	b003      	add	sp, #12
 801768c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017690:	6812      	ldr	r2, [r2, #0]
 8017692:	3b04      	subs	r3, #4
 8017694:	2a00      	cmp	r2, #0
 8017696:	d1ca      	bne.n	801762e <quorem+0x9a>
 8017698:	3c01      	subs	r4, #1
 801769a:	e7c5      	b.n	8017628 <quorem+0x94>
 801769c:	6812      	ldr	r2, [r2, #0]
 801769e:	3b04      	subs	r3, #4
 80176a0:	2a00      	cmp	r2, #0
 80176a2:	d1ef      	bne.n	8017684 <quorem+0xf0>
 80176a4:	3c01      	subs	r4, #1
 80176a6:	e7ea      	b.n	801767e <quorem+0xea>
 80176a8:	2000      	movs	r0, #0
 80176aa:	e7ee      	b.n	801768a <quorem+0xf6>
 80176ac:	0000      	movs	r0, r0
	...

080176b0 <_dtoa_r>:
 80176b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176b4:	ec57 6b10 	vmov	r6, r7, d0
 80176b8:	b097      	sub	sp, #92	; 0x5c
 80176ba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80176bc:	9106      	str	r1, [sp, #24]
 80176be:	4604      	mov	r4, r0
 80176c0:	920b      	str	r2, [sp, #44]	; 0x2c
 80176c2:	9312      	str	r3, [sp, #72]	; 0x48
 80176c4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80176c8:	e9cd 6700 	strd	r6, r7, [sp]
 80176cc:	b93d      	cbnz	r5, 80176de <_dtoa_r+0x2e>
 80176ce:	2010      	movs	r0, #16
 80176d0:	f7fe f926 	bl	8015920 <malloc>
 80176d4:	6260      	str	r0, [r4, #36]	; 0x24
 80176d6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80176da:	6005      	str	r5, [r0, #0]
 80176dc:	60c5      	str	r5, [r0, #12]
 80176de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80176e0:	6819      	ldr	r1, [r3, #0]
 80176e2:	b151      	cbz	r1, 80176fa <_dtoa_r+0x4a>
 80176e4:	685a      	ldr	r2, [r3, #4]
 80176e6:	604a      	str	r2, [r1, #4]
 80176e8:	2301      	movs	r3, #1
 80176ea:	4093      	lsls	r3, r2
 80176ec:	608b      	str	r3, [r1, #8]
 80176ee:	4620      	mov	r0, r4
 80176f0:	f001 f918 	bl	8018924 <_Bfree>
 80176f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80176f6:	2200      	movs	r2, #0
 80176f8:	601a      	str	r2, [r3, #0]
 80176fa:	1e3b      	subs	r3, r7, #0
 80176fc:	bfbb      	ittet	lt
 80176fe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017702:	9301      	strlt	r3, [sp, #4]
 8017704:	2300      	movge	r3, #0
 8017706:	2201      	movlt	r2, #1
 8017708:	bfac      	ite	ge
 801770a:	f8c8 3000 	strge.w	r3, [r8]
 801770e:	f8c8 2000 	strlt.w	r2, [r8]
 8017712:	4baf      	ldr	r3, [pc, #700]	; (80179d0 <_dtoa_r+0x320>)
 8017714:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8017718:	ea33 0308 	bics.w	r3, r3, r8
 801771c:	d114      	bne.n	8017748 <_dtoa_r+0x98>
 801771e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017720:	f242 730f 	movw	r3, #9999	; 0x270f
 8017724:	6013      	str	r3, [r2, #0]
 8017726:	9b00      	ldr	r3, [sp, #0]
 8017728:	b923      	cbnz	r3, 8017734 <_dtoa_r+0x84>
 801772a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801772e:	2800      	cmp	r0, #0
 8017730:	f000 8542 	beq.w	80181b8 <_dtoa_r+0xb08>
 8017734:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017736:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80179e4 <_dtoa_r+0x334>
 801773a:	2b00      	cmp	r3, #0
 801773c:	f000 8544 	beq.w	80181c8 <_dtoa_r+0xb18>
 8017740:	f10b 0303 	add.w	r3, fp, #3
 8017744:	f000 bd3e 	b.w	80181c4 <_dtoa_r+0xb14>
 8017748:	e9dd 6700 	ldrd	r6, r7, [sp]
 801774c:	2200      	movs	r2, #0
 801774e:	2300      	movs	r3, #0
 8017750:	4630      	mov	r0, r6
 8017752:	4639      	mov	r1, r7
 8017754:	f7e9 f9b8 	bl	8000ac8 <__aeabi_dcmpeq>
 8017758:	4681      	mov	r9, r0
 801775a:	b168      	cbz	r0, 8017778 <_dtoa_r+0xc8>
 801775c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801775e:	2301      	movs	r3, #1
 8017760:	6013      	str	r3, [r2, #0]
 8017762:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017764:	2b00      	cmp	r3, #0
 8017766:	f000 8524 	beq.w	80181b2 <_dtoa_r+0xb02>
 801776a:	4b9a      	ldr	r3, [pc, #616]	; (80179d4 <_dtoa_r+0x324>)
 801776c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801776e:	f103 3bff 	add.w	fp, r3, #4294967295
 8017772:	6013      	str	r3, [r2, #0]
 8017774:	f000 bd28 	b.w	80181c8 <_dtoa_r+0xb18>
 8017778:	aa14      	add	r2, sp, #80	; 0x50
 801777a:	a915      	add	r1, sp, #84	; 0x54
 801777c:	ec47 6b10 	vmov	d0, r6, r7
 8017780:	4620      	mov	r0, r4
 8017782:	f001 fbdd 	bl	8018f40 <__d2b>
 8017786:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801778a:	9004      	str	r0, [sp, #16]
 801778c:	2d00      	cmp	r5, #0
 801778e:	d07c      	beq.n	801788a <_dtoa_r+0x1da>
 8017790:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8017794:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8017798:	46b2      	mov	sl, r6
 801779a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801779e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80177a2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80177a6:	2200      	movs	r2, #0
 80177a8:	4b8b      	ldr	r3, [pc, #556]	; (80179d8 <_dtoa_r+0x328>)
 80177aa:	4650      	mov	r0, sl
 80177ac:	4659      	mov	r1, fp
 80177ae:	f7e8 fd6b 	bl	8000288 <__aeabi_dsub>
 80177b2:	a381      	add	r3, pc, #516	; (adr r3, 80179b8 <_dtoa_r+0x308>)
 80177b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177b8:	f7e8 ff1e 	bl	80005f8 <__aeabi_dmul>
 80177bc:	a380      	add	r3, pc, #512	; (adr r3, 80179c0 <_dtoa_r+0x310>)
 80177be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177c2:	f7e8 fd63 	bl	800028c <__adddf3>
 80177c6:	4606      	mov	r6, r0
 80177c8:	4628      	mov	r0, r5
 80177ca:	460f      	mov	r7, r1
 80177cc:	f7e8 feaa 	bl	8000524 <__aeabi_i2d>
 80177d0:	a37d      	add	r3, pc, #500	; (adr r3, 80179c8 <_dtoa_r+0x318>)
 80177d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177d6:	f7e8 ff0f 	bl	80005f8 <__aeabi_dmul>
 80177da:	4602      	mov	r2, r0
 80177dc:	460b      	mov	r3, r1
 80177de:	4630      	mov	r0, r6
 80177e0:	4639      	mov	r1, r7
 80177e2:	f7e8 fd53 	bl	800028c <__adddf3>
 80177e6:	4606      	mov	r6, r0
 80177e8:	460f      	mov	r7, r1
 80177ea:	f7e9 f9b5 	bl	8000b58 <__aeabi_d2iz>
 80177ee:	2200      	movs	r2, #0
 80177f0:	4682      	mov	sl, r0
 80177f2:	2300      	movs	r3, #0
 80177f4:	4630      	mov	r0, r6
 80177f6:	4639      	mov	r1, r7
 80177f8:	f7e9 f970 	bl	8000adc <__aeabi_dcmplt>
 80177fc:	b148      	cbz	r0, 8017812 <_dtoa_r+0x162>
 80177fe:	4650      	mov	r0, sl
 8017800:	f7e8 fe90 	bl	8000524 <__aeabi_i2d>
 8017804:	4632      	mov	r2, r6
 8017806:	463b      	mov	r3, r7
 8017808:	f7e9 f95e 	bl	8000ac8 <__aeabi_dcmpeq>
 801780c:	b908      	cbnz	r0, 8017812 <_dtoa_r+0x162>
 801780e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017812:	f1ba 0f16 	cmp.w	sl, #22
 8017816:	d859      	bhi.n	80178cc <_dtoa_r+0x21c>
 8017818:	4970      	ldr	r1, [pc, #448]	; (80179dc <_dtoa_r+0x32c>)
 801781a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801781e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017822:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017826:	f7e9 f977 	bl	8000b18 <__aeabi_dcmpgt>
 801782a:	2800      	cmp	r0, #0
 801782c:	d050      	beq.n	80178d0 <_dtoa_r+0x220>
 801782e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017832:	2300      	movs	r3, #0
 8017834:	930f      	str	r3, [sp, #60]	; 0x3c
 8017836:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017838:	1b5d      	subs	r5, r3, r5
 801783a:	f1b5 0801 	subs.w	r8, r5, #1
 801783e:	bf49      	itett	mi
 8017840:	f1c5 0301 	rsbmi	r3, r5, #1
 8017844:	2300      	movpl	r3, #0
 8017846:	9305      	strmi	r3, [sp, #20]
 8017848:	f04f 0800 	movmi.w	r8, #0
 801784c:	bf58      	it	pl
 801784e:	9305      	strpl	r3, [sp, #20]
 8017850:	f1ba 0f00 	cmp.w	sl, #0
 8017854:	db3e      	blt.n	80178d4 <_dtoa_r+0x224>
 8017856:	2300      	movs	r3, #0
 8017858:	44d0      	add	r8, sl
 801785a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801785e:	9307      	str	r3, [sp, #28]
 8017860:	9b06      	ldr	r3, [sp, #24]
 8017862:	2b09      	cmp	r3, #9
 8017864:	f200 8090 	bhi.w	8017988 <_dtoa_r+0x2d8>
 8017868:	2b05      	cmp	r3, #5
 801786a:	bfc4      	itt	gt
 801786c:	3b04      	subgt	r3, #4
 801786e:	9306      	strgt	r3, [sp, #24]
 8017870:	9b06      	ldr	r3, [sp, #24]
 8017872:	f1a3 0302 	sub.w	r3, r3, #2
 8017876:	bfcc      	ite	gt
 8017878:	2500      	movgt	r5, #0
 801787a:	2501      	movle	r5, #1
 801787c:	2b03      	cmp	r3, #3
 801787e:	f200 808f 	bhi.w	80179a0 <_dtoa_r+0x2f0>
 8017882:	e8df f003 	tbb	[pc, r3]
 8017886:	7f7d      	.short	0x7f7d
 8017888:	7131      	.short	0x7131
 801788a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 801788e:	441d      	add	r5, r3
 8017890:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8017894:	2820      	cmp	r0, #32
 8017896:	dd13      	ble.n	80178c0 <_dtoa_r+0x210>
 8017898:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801789c:	9b00      	ldr	r3, [sp, #0]
 801789e:	fa08 f800 	lsl.w	r8, r8, r0
 80178a2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80178a6:	fa23 f000 	lsr.w	r0, r3, r0
 80178aa:	ea48 0000 	orr.w	r0, r8, r0
 80178ae:	f7e8 fe29 	bl	8000504 <__aeabi_ui2d>
 80178b2:	2301      	movs	r3, #1
 80178b4:	4682      	mov	sl, r0
 80178b6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80178ba:	3d01      	subs	r5, #1
 80178bc:	9313      	str	r3, [sp, #76]	; 0x4c
 80178be:	e772      	b.n	80177a6 <_dtoa_r+0xf6>
 80178c0:	9b00      	ldr	r3, [sp, #0]
 80178c2:	f1c0 0020 	rsb	r0, r0, #32
 80178c6:	fa03 f000 	lsl.w	r0, r3, r0
 80178ca:	e7f0      	b.n	80178ae <_dtoa_r+0x1fe>
 80178cc:	2301      	movs	r3, #1
 80178ce:	e7b1      	b.n	8017834 <_dtoa_r+0x184>
 80178d0:	900f      	str	r0, [sp, #60]	; 0x3c
 80178d2:	e7b0      	b.n	8017836 <_dtoa_r+0x186>
 80178d4:	9b05      	ldr	r3, [sp, #20]
 80178d6:	eba3 030a 	sub.w	r3, r3, sl
 80178da:	9305      	str	r3, [sp, #20]
 80178dc:	f1ca 0300 	rsb	r3, sl, #0
 80178e0:	9307      	str	r3, [sp, #28]
 80178e2:	2300      	movs	r3, #0
 80178e4:	930e      	str	r3, [sp, #56]	; 0x38
 80178e6:	e7bb      	b.n	8017860 <_dtoa_r+0x1b0>
 80178e8:	2301      	movs	r3, #1
 80178ea:	930a      	str	r3, [sp, #40]	; 0x28
 80178ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80178ee:	2b00      	cmp	r3, #0
 80178f0:	dd59      	ble.n	80179a6 <_dtoa_r+0x2f6>
 80178f2:	9302      	str	r3, [sp, #8]
 80178f4:	4699      	mov	r9, r3
 80178f6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80178f8:	2200      	movs	r2, #0
 80178fa:	6072      	str	r2, [r6, #4]
 80178fc:	2204      	movs	r2, #4
 80178fe:	f102 0014 	add.w	r0, r2, #20
 8017902:	4298      	cmp	r0, r3
 8017904:	6871      	ldr	r1, [r6, #4]
 8017906:	d953      	bls.n	80179b0 <_dtoa_r+0x300>
 8017908:	4620      	mov	r0, r4
 801790a:	f000 ffd7 	bl	80188bc <_Balloc>
 801790e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017910:	6030      	str	r0, [r6, #0]
 8017912:	f1b9 0f0e 	cmp.w	r9, #14
 8017916:	f8d3 b000 	ldr.w	fp, [r3]
 801791a:	f200 80e6 	bhi.w	8017aea <_dtoa_r+0x43a>
 801791e:	2d00      	cmp	r5, #0
 8017920:	f000 80e3 	beq.w	8017aea <_dtoa_r+0x43a>
 8017924:	ed9d 7b00 	vldr	d7, [sp]
 8017928:	f1ba 0f00 	cmp.w	sl, #0
 801792c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8017930:	dd74      	ble.n	8017a1c <_dtoa_r+0x36c>
 8017932:	4a2a      	ldr	r2, [pc, #168]	; (80179dc <_dtoa_r+0x32c>)
 8017934:	f00a 030f 	and.w	r3, sl, #15
 8017938:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801793c:	ed93 7b00 	vldr	d7, [r3]
 8017940:	ea4f 162a 	mov.w	r6, sl, asr #4
 8017944:	06f0      	lsls	r0, r6, #27
 8017946:	ed8d 7b08 	vstr	d7, [sp, #32]
 801794a:	d565      	bpl.n	8017a18 <_dtoa_r+0x368>
 801794c:	4b24      	ldr	r3, [pc, #144]	; (80179e0 <_dtoa_r+0x330>)
 801794e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017952:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017956:	f7e8 ff79 	bl	800084c <__aeabi_ddiv>
 801795a:	e9cd 0100 	strd	r0, r1, [sp]
 801795e:	f006 060f 	and.w	r6, r6, #15
 8017962:	2503      	movs	r5, #3
 8017964:	4f1e      	ldr	r7, [pc, #120]	; (80179e0 <_dtoa_r+0x330>)
 8017966:	e04c      	b.n	8017a02 <_dtoa_r+0x352>
 8017968:	2301      	movs	r3, #1
 801796a:	930a      	str	r3, [sp, #40]	; 0x28
 801796c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801796e:	4453      	add	r3, sl
 8017970:	f103 0901 	add.w	r9, r3, #1
 8017974:	9302      	str	r3, [sp, #8]
 8017976:	464b      	mov	r3, r9
 8017978:	2b01      	cmp	r3, #1
 801797a:	bfb8      	it	lt
 801797c:	2301      	movlt	r3, #1
 801797e:	e7ba      	b.n	80178f6 <_dtoa_r+0x246>
 8017980:	2300      	movs	r3, #0
 8017982:	e7b2      	b.n	80178ea <_dtoa_r+0x23a>
 8017984:	2300      	movs	r3, #0
 8017986:	e7f0      	b.n	801796a <_dtoa_r+0x2ba>
 8017988:	2501      	movs	r5, #1
 801798a:	2300      	movs	r3, #0
 801798c:	9306      	str	r3, [sp, #24]
 801798e:	950a      	str	r5, [sp, #40]	; 0x28
 8017990:	f04f 33ff 	mov.w	r3, #4294967295
 8017994:	9302      	str	r3, [sp, #8]
 8017996:	4699      	mov	r9, r3
 8017998:	2200      	movs	r2, #0
 801799a:	2312      	movs	r3, #18
 801799c:	920b      	str	r2, [sp, #44]	; 0x2c
 801799e:	e7aa      	b.n	80178f6 <_dtoa_r+0x246>
 80179a0:	2301      	movs	r3, #1
 80179a2:	930a      	str	r3, [sp, #40]	; 0x28
 80179a4:	e7f4      	b.n	8017990 <_dtoa_r+0x2e0>
 80179a6:	2301      	movs	r3, #1
 80179a8:	9302      	str	r3, [sp, #8]
 80179aa:	4699      	mov	r9, r3
 80179ac:	461a      	mov	r2, r3
 80179ae:	e7f5      	b.n	801799c <_dtoa_r+0x2ec>
 80179b0:	3101      	adds	r1, #1
 80179b2:	6071      	str	r1, [r6, #4]
 80179b4:	0052      	lsls	r2, r2, #1
 80179b6:	e7a2      	b.n	80178fe <_dtoa_r+0x24e>
 80179b8:	636f4361 	.word	0x636f4361
 80179bc:	3fd287a7 	.word	0x3fd287a7
 80179c0:	8b60c8b3 	.word	0x8b60c8b3
 80179c4:	3fc68a28 	.word	0x3fc68a28
 80179c8:	509f79fb 	.word	0x509f79fb
 80179cc:	3fd34413 	.word	0x3fd34413
 80179d0:	7ff00000 	.word	0x7ff00000
 80179d4:	0801b315 	.word	0x0801b315
 80179d8:	3ff80000 	.word	0x3ff80000
 80179dc:	0801b3d0 	.word	0x0801b3d0
 80179e0:	0801b3a8 	.word	0x0801b3a8
 80179e4:	0801b399 	.word	0x0801b399
 80179e8:	07f1      	lsls	r1, r6, #31
 80179ea:	d508      	bpl.n	80179fe <_dtoa_r+0x34e>
 80179ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80179f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80179f4:	f7e8 fe00 	bl	80005f8 <__aeabi_dmul>
 80179f8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80179fc:	3501      	adds	r5, #1
 80179fe:	1076      	asrs	r6, r6, #1
 8017a00:	3708      	adds	r7, #8
 8017a02:	2e00      	cmp	r6, #0
 8017a04:	d1f0      	bne.n	80179e8 <_dtoa_r+0x338>
 8017a06:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017a0a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017a0e:	f7e8 ff1d 	bl	800084c <__aeabi_ddiv>
 8017a12:	e9cd 0100 	strd	r0, r1, [sp]
 8017a16:	e01a      	b.n	8017a4e <_dtoa_r+0x39e>
 8017a18:	2502      	movs	r5, #2
 8017a1a:	e7a3      	b.n	8017964 <_dtoa_r+0x2b4>
 8017a1c:	f000 80a0 	beq.w	8017b60 <_dtoa_r+0x4b0>
 8017a20:	f1ca 0600 	rsb	r6, sl, #0
 8017a24:	4b9f      	ldr	r3, [pc, #636]	; (8017ca4 <_dtoa_r+0x5f4>)
 8017a26:	4fa0      	ldr	r7, [pc, #640]	; (8017ca8 <_dtoa_r+0x5f8>)
 8017a28:	f006 020f 	and.w	r2, r6, #15
 8017a2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a34:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017a38:	f7e8 fdde 	bl	80005f8 <__aeabi_dmul>
 8017a3c:	e9cd 0100 	strd	r0, r1, [sp]
 8017a40:	1136      	asrs	r6, r6, #4
 8017a42:	2300      	movs	r3, #0
 8017a44:	2502      	movs	r5, #2
 8017a46:	2e00      	cmp	r6, #0
 8017a48:	d17f      	bne.n	8017b4a <_dtoa_r+0x49a>
 8017a4a:	2b00      	cmp	r3, #0
 8017a4c:	d1e1      	bne.n	8017a12 <_dtoa_r+0x362>
 8017a4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017a50:	2b00      	cmp	r3, #0
 8017a52:	f000 8087 	beq.w	8017b64 <_dtoa_r+0x4b4>
 8017a56:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017a5a:	2200      	movs	r2, #0
 8017a5c:	4b93      	ldr	r3, [pc, #588]	; (8017cac <_dtoa_r+0x5fc>)
 8017a5e:	4630      	mov	r0, r6
 8017a60:	4639      	mov	r1, r7
 8017a62:	f7e9 f83b 	bl	8000adc <__aeabi_dcmplt>
 8017a66:	2800      	cmp	r0, #0
 8017a68:	d07c      	beq.n	8017b64 <_dtoa_r+0x4b4>
 8017a6a:	f1b9 0f00 	cmp.w	r9, #0
 8017a6e:	d079      	beq.n	8017b64 <_dtoa_r+0x4b4>
 8017a70:	9b02      	ldr	r3, [sp, #8]
 8017a72:	2b00      	cmp	r3, #0
 8017a74:	dd35      	ble.n	8017ae2 <_dtoa_r+0x432>
 8017a76:	f10a 33ff 	add.w	r3, sl, #4294967295
 8017a7a:	9308      	str	r3, [sp, #32]
 8017a7c:	4639      	mov	r1, r7
 8017a7e:	2200      	movs	r2, #0
 8017a80:	4b8b      	ldr	r3, [pc, #556]	; (8017cb0 <_dtoa_r+0x600>)
 8017a82:	4630      	mov	r0, r6
 8017a84:	f7e8 fdb8 	bl	80005f8 <__aeabi_dmul>
 8017a88:	e9cd 0100 	strd	r0, r1, [sp]
 8017a8c:	9f02      	ldr	r7, [sp, #8]
 8017a8e:	3501      	adds	r5, #1
 8017a90:	4628      	mov	r0, r5
 8017a92:	f7e8 fd47 	bl	8000524 <__aeabi_i2d>
 8017a96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017a9a:	f7e8 fdad 	bl	80005f8 <__aeabi_dmul>
 8017a9e:	2200      	movs	r2, #0
 8017aa0:	4b84      	ldr	r3, [pc, #528]	; (8017cb4 <_dtoa_r+0x604>)
 8017aa2:	f7e8 fbf3 	bl	800028c <__adddf3>
 8017aa6:	4605      	mov	r5, r0
 8017aa8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8017aac:	2f00      	cmp	r7, #0
 8017aae:	d15d      	bne.n	8017b6c <_dtoa_r+0x4bc>
 8017ab0:	2200      	movs	r2, #0
 8017ab2:	4b81      	ldr	r3, [pc, #516]	; (8017cb8 <_dtoa_r+0x608>)
 8017ab4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017ab8:	f7e8 fbe6 	bl	8000288 <__aeabi_dsub>
 8017abc:	462a      	mov	r2, r5
 8017abe:	4633      	mov	r3, r6
 8017ac0:	e9cd 0100 	strd	r0, r1, [sp]
 8017ac4:	f7e9 f828 	bl	8000b18 <__aeabi_dcmpgt>
 8017ac8:	2800      	cmp	r0, #0
 8017aca:	f040 8288 	bne.w	8017fde <_dtoa_r+0x92e>
 8017ace:	462a      	mov	r2, r5
 8017ad0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8017ad4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017ad8:	f7e9 f800 	bl	8000adc <__aeabi_dcmplt>
 8017adc:	2800      	cmp	r0, #0
 8017ade:	f040 827c 	bne.w	8017fda <_dtoa_r+0x92a>
 8017ae2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017ae6:	e9cd 2300 	strd	r2, r3, [sp]
 8017aea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017aec:	2b00      	cmp	r3, #0
 8017aee:	f2c0 8150 	blt.w	8017d92 <_dtoa_r+0x6e2>
 8017af2:	f1ba 0f0e 	cmp.w	sl, #14
 8017af6:	f300 814c 	bgt.w	8017d92 <_dtoa_r+0x6e2>
 8017afa:	4b6a      	ldr	r3, [pc, #424]	; (8017ca4 <_dtoa_r+0x5f4>)
 8017afc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017b00:	ed93 7b00 	vldr	d7, [r3]
 8017b04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017b06:	2b00      	cmp	r3, #0
 8017b08:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017b0c:	f280 80d8 	bge.w	8017cc0 <_dtoa_r+0x610>
 8017b10:	f1b9 0f00 	cmp.w	r9, #0
 8017b14:	f300 80d4 	bgt.w	8017cc0 <_dtoa_r+0x610>
 8017b18:	f040 825e 	bne.w	8017fd8 <_dtoa_r+0x928>
 8017b1c:	2200      	movs	r2, #0
 8017b1e:	4b66      	ldr	r3, [pc, #408]	; (8017cb8 <_dtoa_r+0x608>)
 8017b20:	ec51 0b17 	vmov	r0, r1, d7
 8017b24:	f7e8 fd68 	bl	80005f8 <__aeabi_dmul>
 8017b28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017b2c:	f7e8 ffea 	bl	8000b04 <__aeabi_dcmpge>
 8017b30:	464f      	mov	r7, r9
 8017b32:	464e      	mov	r6, r9
 8017b34:	2800      	cmp	r0, #0
 8017b36:	f040 8234 	bne.w	8017fa2 <_dtoa_r+0x8f2>
 8017b3a:	2331      	movs	r3, #49	; 0x31
 8017b3c:	f10b 0501 	add.w	r5, fp, #1
 8017b40:	f88b 3000 	strb.w	r3, [fp]
 8017b44:	f10a 0a01 	add.w	sl, sl, #1
 8017b48:	e22f      	b.n	8017faa <_dtoa_r+0x8fa>
 8017b4a:	07f2      	lsls	r2, r6, #31
 8017b4c:	d505      	bpl.n	8017b5a <_dtoa_r+0x4aa>
 8017b4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017b52:	f7e8 fd51 	bl	80005f8 <__aeabi_dmul>
 8017b56:	3501      	adds	r5, #1
 8017b58:	2301      	movs	r3, #1
 8017b5a:	1076      	asrs	r6, r6, #1
 8017b5c:	3708      	adds	r7, #8
 8017b5e:	e772      	b.n	8017a46 <_dtoa_r+0x396>
 8017b60:	2502      	movs	r5, #2
 8017b62:	e774      	b.n	8017a4e <_dtoa_r+0x39e>
 8017b64:	f8cd a020 	str.w	sl, [sp, #32]
 8017b68:	464f      	mov	r7, r9
 8017b6a:	e791      	b.n	8017a90 <_dtoa_r+0x3e0>
 8017b6c:	4b4d      	ldr	r3, [pc, #308]	; (8017ca4 <_dtoa_r+0x5f4>)
 8017b6e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8017b72:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8017b76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b78:	2b00      	cmp	r3, #0
 8017b7a:	d047      	beq.n	8017c0c <_dtoa_r+0x55c>
 8017b7c:	4602      	mov	r2, r0
 8017b7e:	460b      	mov	r3, r1
 8017b80:	2000      	movs	r0, #0
 8017b82:	494e      	ldr	r1, [pc, #312]	; (8017cbc <_dtoa_r+0x60c>)
 8017b84:	f7e8 fe62 	bl	800084c <__aeabi_ddiv>
 8017b88:	462a      	mov	r2, r5
 8017b8a:	4633      	mov	r3, r6
 8017b8c:	f7e8 fb7c 	bl	8000288 <__aeabi_dsub>
 8017b90:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017b94:	465d      	mov	r5, fp
 8017b96:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017b9a:	f7e8 ffdd 	bl	8000b58 <__aeabi_d2iz>
 8017b9e:	4606      	mov	r6, r0
 8017ba0:	f7e8 fcc0 	bl	8000524 <__aeabi_i2d>
 8017ba4:	4602      	mov	r2, r0
 8017ba6:	460b      	mov	r3, r1
 8017ba8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017bac:	f7e8 fb6c 	bl	8000288 <__aeabi_dsub>
 8017bb0:	3630      	adds	r6, #48	; 0x30
 8017bb2:	f805 6b01 	strb.w	r6, [r5], #1
 8017bb6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017bba:	e9cd 0100 	strd	r0, r1, [sp]
 8017bbe:	f7e8 ff8d 	bl	8000adc <__aeabi_dcmplt>
 8017bc2:	2800      	cmp	r0, #0
 8017bc4:	d163      	bne.n	8017c8e <_dtoa_r+0x5de>
 8017bc6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017bca:	2000      	movs	r0, #0
 8017bcc:	4937      	ldr	r1, [pc, #220]	; (8017cac <_dtoa_r+0x5fc>)
 8017bce:	f7e8 fb5b 	bl	8000288 <__aeabi_dsub>
 8017bd2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017bd6:	f7e8 ff81 	bl	8000adc <__aeabi_dcmplt>
 8017bda:	2800      	cmp	r0, #0
 8017bdc:	f040 80b7 	bne.w	8017d4e <_dtoa_r+0x69e>
 8017be0:	eba5 030b 	sub.w	r3, r5, fp
 8017be4:	429f      	cmp	r7, r3
 8017be6:	f77f af7c 	ble.w	8017ae2 <_dtoa_r+0x432>
 8017bea:	2200      	movs	r2, #0
 8017bec:	4b30      	ldr	r3, [pc, #192]	; (8017cb0 <_dtoa_r+0x600>)
 8017bee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017bf2:	f7e8 fd01 	bl	80005f8 <__aeabi_dmul>
 8017bf6:	2200      	movs	r2, #0
 8017bf8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017bfc:	4b2c      	ldr	r3, [pc, #176]	; (8017cb0 <_dtoa_r+0x600>)
 8017bfe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017c02:	f7e8 fcf9 	bl	80005f8 <__aeabi_dmul>
 8017c06:	e9cd 0100 	strd	r0, r1, [sp]
 8017c0a:	e7c4      	b.n	8017b96 <_dtoa_r+0x4e6>
 8017c0c:	462a      	mov	r2, r5
 8017c0e:	4633      	mov	r3, r6
 8017c10:	f7e8 fcf2 	bl	80005f8 <__aeabi_dmul>
 8017c14:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017c18:	eb0b 0507 	add.w	r5, fp, r7
 8017c1c:	465e      	mov	r6, fp
 8017c1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017c22:	f7e8 ff99 	bl	8000b58 <__aeabi_d2iz>
 8017c26:	4607      	mov	r7, r0
 8017c28:	f7e8 fc7c 	bl	8000524 <__aeabi_i2d>
 8017c2c:	3730      	adds	r7, #48	; 0x30
 8017c2e:	4602      	mov	r2, r0
 8017c30:	460b      	mov	r3, r1
 8017c32:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017c36:	f7e8 fb27 	bl	8000288 <__aeabi_dsub>
 8017c3a:	f806 7b01 	strb.w	r7, [r6], #1
 8017c3e:	42ae      	cmp	r6, r5
 8017c40:	e9cd 0100 	strd	r0, r1, [sp]
 8017c44:	f04f 0200 	mov.w	r2, #0
 8017c48:	d126      	bne.n	8017c98 <_dtoa_r+0x5e8>
 8017c4a:	4b1c      	ldr	r3, [pc, #112]	; (8017cbc <_dtoa_r+0x60c>)
 8017c4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017c50:	f7e8 fb1c 	bl	800028c <__adddf3>
 8017c54:	4602      	mov	r2, r0
 8017c56:	460b      	mov	r3, r1
 8017c58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017c5c:	f7e8 ff5c 	bl	8000b18 <__aeabi_dcmpgt>
 8017c60:	2800      	cmp	r0, #0
 8017c62:	d174      	bne.n	8017d4e <_dtoa_r+0x69e>
 8017c64:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017c68:	2000      	movs	r0, #0
 8017c6a:	4914      	ldr	r1, [pc, #80]	; (8017cbc <_dtoa_r+0x60c>)
 8017c6c:	f7e8 fb0c 	bl	8000288 <__aeabi_dsub>
 8017c70:	4602      	mov	r2, r0
 8017c72:	460b      	mov	r3, r1
 8017c74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017c78:	f7e8 ff30 	bl	8000adc <__aeabi_dcmplt>
 8017c7c:	2800      	cmp	r0, #0
 8017c7e:	f43f af30 	beq.w	8017ae2 <_dtoa_r+0x432>
 8017c82:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017c86:	2b30      	cmp	r3, #48	; 0x30
 8017c88:	f105 32ff 	add.w	r2, r5, #4294967295
 8017c8c:	d002      	beq.n	8017c94 <_dtoa_r+0x5e4>
 8017c8e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017c92:	e04a      	b.n	8017d2a <_dtoa_r+0x67a>
 8017c94:	4615      	mov	r5, r2
 8017c96:	e7f4      	b.n	8017c82 <_dtoa_r+0x5d2>
 8017c98:	4b05      	ldr	r3, [pc, #20]	; (8017cb0 <_dtoa_r+0x600>)
 8017c9a:	f7e8 fcad 	bl	80005f8 <__aeabi_dmul>
 8017c9e:	e9cd 0100 	strd	r0, r1, [sp]
 8017ca2:	e7bc      	b.n	8017c1e <_dtoa_r+0x56e>
 8017ca4:	0801b3d0 	.word	0x0801b3d0
 8017ca8:	0801b3a8 	.word	0x0801b3a8
 8017cac:	3ff00000 	.word	0x3ff00000
 8017cb0:	40240000 	.word	0x40240000
 8017cb4:	401c0000 	.word	0x401c0000
 8017cb8:	40140000 	.word	0x40140000
 8017cbc:	3fe00000 	.word	0x3fe00000
 8017cc0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017cc4:	465d      	mov	r5, fp
 8017cc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017cca:	4630      	mov	r0, r6
 8017ccc:	4639      	mov	r1, r7
 8017cce:	f7e8 fdbd 	bl	800084c <__aeabi_ddiv>
 8017cd2:	f7e8 ff41 	bl	8000b58 <__aeabi_d2iz>
 8017cd6:	4680      	mov	r8, r0
 8017cd8:	f7e8 fc24 	bl	8000524 <__aeabi_i2d>
 8017cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017ce0:	f7e8 fc8a 	bl	80005f8 <__aeabi_dmul>
 8017ce4:	4602      	mov	r2, r0
 8017ce6:	460b      	mov	r3, r1
 8017ce8:	4630      	mov	r0, r6
 8017cea:	4639      	mov	r1, r7
 8017cec:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8017cf0:	f7e8 faca 	bl	8000288 <__aeabi_dsub>
 8017cf4:	f805 6b01 	strb.w	r6, [r5], #1
 8017cf8:	eba5 060b 	sub.w	r6, r5, fp
 8017cfc:	45b1      	cmp	r9, r6
 8017cfe:	4602      	mov	r2, r0
 8017d00:	460b      	mov	r3, r1
 8017d02:	d139      	bne.n	8017d78 <_dtoa_r+0x6c8>
 8017d04:	f7e8 fac2 	bl	800028c <__adddf3>
 8017d08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017d0c:	4606      	mov	r6, r0
 8017d0e:	460f      	mov	r7, r1
 8017d10:	f7e8 ff02 	bl	8000b18 <__aeabi_dcmpgt>
 8017d14:	b9c8      	cbnz	r0, 8017d4a <_dtoa_r+0x69a>
 8017d16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017d1a:	4630      	mov	r0, r6
 8017d1c:	4639      	mov	r1, r7
 8017d1e:	f7e8 fed3 	bl	8000ac8 <__aeabi_dcmpeq>
 8017d22:	b110      	cbz	r0, 8017d2a <_dtoa_r+0x67a>
 8017d24:	f018 0f01 	tst.w	r8, #1
 8017d28:	d10f      	bne.n	8017d4a <_dtoa_r+0x69a>
 8017d2a:	9904      	ldr	r1, [sp, #16]
 8017d2c:	4620      	mov	r0, r4
 8017d2e:	f000 fdf9 	bl	8018924 <_Bfree>
 8017d32:	2300      	movs	r3, #0
 8017d34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017d36:	702b      	strb	r3, [r5, #0]
 8017d38:	f10a 0301 	add.w	r3, sl, #1
 8017d3c:	6013      	str	r3, [r2, #0]
 8017d3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017d40:	2b00      	cmp	r3, #0
 8017d42:	f000 8241 	beq.w	80181c8 <_dtoa_r+0xb18>
 8017d46:	601d      	str	r5, [r3, #0]
 8017d48:	e23e      	b.n	80181c8 <_dtoa_r+0xb18>
 8017d4a:	f8cd a020 	str.w	sl, [sp, #32]
 8017d4e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017d52:	2a39      	cmp	r2, #57	; 0x39
 8017d54:	f105 33ff 	add.w	r3, r5, #4294967295
 8017d58:	d108      	bne.n	8017d6c <_dtoa_r+0x6bc>
 8017d5a:	459b      	cmp	fp, r3
 8017d5c:	d10a      	bne.n	8017d74 <_dtoa_r+0x6c4>
 8017d5e:	9b08      	ldr	r3, [sp, #32]
 8017d60:	3301      	adds	r3, #1
 8017d62:	9308      	str	r3, [sp, #32]
 8017d64:	2330      	movs	r3, #48	; 0x30
 8017d66:	f88b 3000 	strb.w	r3, [fp]
 8017d6a:	465b      	mov	r3, fp
 8017d6c:	781a      	ldrb	r2, [r3, #0]
 8017d6e:	3201      	adds	r2, #1
 8017d70:	701a      	strb	r2, [r3, #0]
 8017d72:	e78c      	b.n	8017c8e <_dtoa_r+0x5de>
 8017d74:	461d      	mov	r5, r3
 8017d76:	e7ea      	b.n	8017d4e <_dtoa_r+0x69e>
 8017d78:	2200      	movs	r2, #0
 8017d7a:	4b9b      	ldr	r3, [pc, #620]	; (8017fe8 <_dtoa_r+0x938>)
 8017d7c:	f7e8 fc3c 	bl	80005f8 <__aeabi_dmul>
 8017d80:	2200      	movs	r2, #0
 8017d82:	2300      	movs	r3, #0
 8017d84:	4606      	mov	r6, r0
 8017d86:	460f      	mov	r7, r1
 8017d88:	f7e8 fe9e 	bl	8000ac8 <__aeabi_dcmpeq>
 8017d8c:	2800      	cmp	r0, #0
 8017d8e:	d09a      	beq.n	8017cc6 <_dtoa_r+0x616>
 8017d90:	e7cb      	b.n	8017d2a <_dtoa_r+0x67a>
 8017d92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017d94:	2a00      	cmp	r2, #0
 8017d96:	f000 808b 	beq.w	8017eb0 <_dtoa_r+0x800>
 8017d9a:	9a06      	ldr	r2, [sp, #24]
 8017d9c:	2a01      	cmp	r2, #1
 8017d9e:	dc6e      	bgt.n	8017e7e <_dtoa_r+0x7ce>
 8017da0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017da2:	2a00      	cmp	r2, #0
 8017da4:	d067      	beq.n	8017e76 <_dtoa_r+0x7c6>
 8017da6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017daa:	9f07      	ldr	r7, [sp, #28]
 8017dac:	9d05      	ldr	r5, [sp, #20]
 8017dae:	9a05      	ldr	r2, [sp, #20]
 8017db0:	2101      	movs	r1, #1
 8017db2:	441a      	add	r2, r3
 8017db4:	4620      	mov	r0, r4
 8017db6:	9205      	str	r2, [sp, #20]
 8017db8:	4498      	add	r8, r3
 8017dba:	f000 fe91 	bl	8018ae0 <__i2b>
 8017dbe:	4606      	mov	r6, r0
 8017dc0:	2d00      	cmp	r5, #0
 8017dc2:	dd0c      	ble.n	8017dde <_dtoa_r+0x72e>
 8017dc4:	f1b8 0f00 	cmp.w	r8, #0
 8017dc8:	dd09      	ble.n	8017dde <_dtoa_r+0x72e>
 8017dca:	4545      	cmp	r5, r8
 8017dcc:	9a05      	ldr	r2, [sp, #20]
 8017dce:	462b      	mov	r3, r5
 8017dd0:	bfa8      	it	ge
 8017dd2:	4643      	movge	r3, r8
 8017dd4:	1ad2      	subs	r2, r2, r3
 8017dd6:	9205      	str	r2, [sp, #20]
 8017dd8:	1aed      	subs	r5, r5, r3
 8017dda:	eba8 0803 	sub.w	r8, r8, r3
 8017dde:	9b07      	ldr	r3, [sp, #28]
 8017de0:	b1eb      	cbz	r3, 8017e1e <_dtoa_r+0x76e>
 8017de2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017de4:	2b00      	cmp	r3, #0
 8017de6:	d067      	beq.n	8017eb8 <_dtoa_r+0x808>
 8017de8:	b18f      	cbz	r7, 8017e0e <_dtoa_r+0x75e>
 8017dea:	4631      	mov	r1, r6
 8017dec:	463a      	mov	r2, r7
 8017dee:	4620      	mov	r0, r4
 8017df0:	f000 ff16 	bl	8018c20 <__pow5mult>
 8017df4:	9a04      	ldr	r2, [sp, #16]
 8017df6:	4601      	mov	r1, r0
 8017df8:	4606      	mov	r6, r0
 8017dfa:	4620      	mov	r0, r4
 8017dfc:	f000 fe79 	bl	8018af2 <__multiply>
 8017e00:	9904      	ldr	r1, [sp, #16]
 8017e02:	9008      	str	r0, [sp, #32]
 8017e04:	4620      	mov	r0, r4
 8017e06:	f000 fd8d 	bl	8018924 <_Bfree>
 8017e0a:	9b08      	ldr	r3, [sp, #32]
 8017e0c:	9304      	str	r3, [sp, #16]
 8017e0e:	9b07      	ldr	r3, [sp, #28]
 8017e10:	1bda      	subs	r2, r3, r7
 8017e12:	d004      	beq.n	8017e1e <_dtoa_r+0x76e>
 8017e14:	9904      	ldr	r1, [sp, #16]
 8017e16:	4620      	mov	r0, r4
 8017e18:	f000 ff02 	bl	8018c20 <__pow5mult>
 8017e1c:	9004      	str	r0, [sp, #16]
 8017e1e:	2101      	movs	r1, #1
 8017e20:	4620      	mov	r0, r4
 8017e22:	f000 fe5d 	bl	8018ae0 <__i2b>
 8017e26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017e28:	4607      	mov	r7, r0
 8017e2a:	2b00      	cmp	r3, #0
 8017e2c:	f000 81d0 	beq.w	80181d0 <_dtoa_r+0xb20>
 8017e30:	461a      	mov	r2, r3
 8017e32:	4601      	mov	r1, r0
 8017e34:	4620      	mov	r0, r4
 8017e36:	f000 fef3 	bl	8018c20 <__pow5mult>
 8017e3a:	9b06      	ldr	r3, [sp, #24]
 8017e3c:	2b01      	cmp	r3, #1
 8017e3e:	4607      	mov	r7, r0
 8017e40:	dc40      	bgt.n	8017ec4 <_dtoa_r+0x814>
 8017e42:	9b00      	ldr	r3, [sp, #0]
 8017e44:	2b00      	cmp	r3, #0
 8017e46:	d139      	bne.n	8017ebc <_dtoa_r+0x80c>
 8017e48:	9b01      	ldr	r3, [sp, #4]
 8017e4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017e4e:	2b00      	cmp	r3, #0
 8017e50:	d136      	bne.n	8017ec0 <_dtoa_r+0x810>
 8017e52:	9b01      	ldr	r3, [sp, #4]
 8017e54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017e58:	0d1b      	lsrs	r3, r3, #20
 8017e5a:	051b      	lsls	r3, r3, #20
 8017e5c:	b12b      	cbz	r3, 8017e6a <_dtoa_r+0x7ba>
 8017e5e:	9b05      	ldr	r3, [sp, #20]
 8017e60:	3301      	adds	r3, #1
 8017e62:	9305      	str	r3, [sp, #20]
 8017e64:	f108 0801 	add.w	r8, r8, #1
 8017e68:	2301      	movs	r3, #1
 8017e6a:	9307      	str	r3, [sp, #28]
 8017e6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017e6e:	2b00      	cmp	r3, #0
 8017e70:	d12a      	bne.n	8017ec8 <_dtoa_r+0x818>
 8017e72:	2001      	movs	r0, #1
 8017e74:	e030      	b.n	8017ed8 <_dtoa_r+0x828>
 8017e76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017e78:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017e7c:	e795      	b.n	8017daa <_dtoa_r+0x6fa>
 8017e7e:	9b07      	ldr	r3, [sp, #28]
 8017e80:	f109 37ff 	add.w	r7, r9, #4294967295
 8017e84:	42bb      	cmp	r3, r7
 8017e86:	bfbf      	itttt	lt
 8017e88:	9b07      	ldrlt	r3, [sp, #28]
 8017e8a:	9707      	strlt	r7, [sp, #28]
 8017e8c:	1afa      	sublt	r2, r7, r3
 8017e8e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8017e90:	bfbb      	ittet	lt
 8017e92:	189b      	addlt	r3, r3, r2
 8017e94:	930e      	strlt	r3, [sp, #56]	; 0x38
 8017e96:	1bdf      	subge	r7, r3, r7
 8017e98:	2700      	movlt	r7, #0
 8017e9a:	f1b9 0f00 	cmp.w	r9, #0
 8017e9e:	bfb5      	itete	lt
 8017ea0:	9b05      	ldrlt	r3, [sp, #20]
 8017ea2:	9d05      	ldrge	r5, [sp, #20]
 8017ea4:	eba3 0509 	sublt.w	r5, r3, r9
 8017ea8:	464b      	movge	r3, r9
 8017eaa:	bfb8      	it	lt
 8017eac:	2300      	movlt	r3, #0
 8017eae:	e77e      	b.n	8017dae <_dtoa_r+0x6fe>
 8017eb0:	9f07      	ldr	r7, [sp, #28]
 8017eb2:	9d05      	ldr	r5, [sp, #20]
 8017eb4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8017eb6:	e783      	b.n	8017dc0 <_dtoa_r+0x710>
 8017eb8:	9a07      	ldr	r2, [sp, #28]
 8017eba:	e7ab      	b.n	8017e14 <_dtoa_r+0x764>
 8017ebc:	2300      	movs	r3, #0
 8017ebe:	e7d4      	b.n	8017e6a <_dtoa_r+0x7ba>
 8017ec0:	9b00      	ldr	r3, [sp, #0]
 8017ec2:	e7d2      	b.n	8017e6a <_dtoa_r+0x7ba>
 8017ec4:	2300      	movs	r3, #0
 8017ec6:	9307      	str	r3, [sp, #28]
 8017ec8:	693b      	ldr	r3, [r7, #16]
 8017eca:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8017ece:	6918      	ldr	r0, [r3, #16]
 8017ed0:	f000 fdb8 	bl	8018a44 <__hi0bits>
 8017ed4:	f1c0 0020 	rsb	r0, r0, #32
 8017ed8:	4440      	add	r0, r8
 8017eda:	f010 001f 	ands.w	r0, r0, #31
 8017ede:	d047      	beq.n	8017f70 <_dtoa_r+0x8c0>
 8017ee0:	f1c0 0320 	rsb	r3, r0, #32
 8017ee4:	2b04      	cmp	r3, #4
 8017ee6:	dd3b      	ble.n	8017f60 <_dtoa_r+0x8b0>
 8017ee8:	9b05      	ldr	r3, [sp, #20]
 8017eea:	f1c0 001c 	rsb	r0, r0, #28
 8017eee:	4403      	add	r3, r0
 8017ef0:	9305      	str	r3, [sp, #20]
 8017ef2:	4405      	add	r5, r0
 8017ef4:	4480      	add	r8, r0
 8017ef6:	9b05      	ldr	r3, [sp, #20]
 8017ef8:	2b00      	cmp	r3, #0
 8017efa:	dd05      	ble.n	8017f08 <_dtoa_r+0x858>
 8017efc:	461a      	mov	r2, r3
 8017efe:	9904      	ldr	r1, [sp, #16]
 8017f00:	4620      	mov	r0, r4
 8017f02:	f000 fedb 	bl	8018cbc <__lshift>
 8017f06:	9004      	str	r0, [sp, #16]
 8017f08:	f1b8 0f00 	cmp.w	r8, #0
 8017f0c:	dd05      	ble.n	8017f1a <_dtoa_r+0x86a>
 8017f0e:	4639      	mov	r1, r7
 8017f10:	4642      	mov	r2, r8
 8017f12:	4620      	mov	r0, r4
 8017f14:	f000 fed2 	bl	8018cbc <__lshift>
 8017f18:	4607      	mov	r7, r0
 8017f1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017f1c:	b353      	cbz	r3, 8017f74 <_dtoa_r+0x8c4>
 8017f1e:	4639      	mov	r1, r7
 8017f20:	9804      	ldr	r0, [sp, #16]
 8017f22:	f000 ff1f 	bl	8018d64 <__mcmp>
 8017f26:	2800      	cmp	r0, #0
 8017f28:	da24      	bge.n	8017f74 <_dtoa_r+0x8c4>
 8017f2a:	2300      	movs	r3, #0
 8017f2c:	220a      	movs	r2, #10
 8017f2e:	9904      	ldr	r1, [sp, #16]
 8017f30:	4620      	mov	r0, r4
 8017f32:	f000 fd0e 	bl	8018952 <__multadd>
 8017f36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017f38:	9004      	str	r0, [sp, #16]
 8017f3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017f3e:	2b00      	cmp	r3, #0
 8017f40:	f000 814d 	beq.w	80181de <_dtoa_r+0xb2e>
 8017f44:	2300      	movs	r3, #0
 8017f46:	4631      	mov	r1, r6
 8017f48:	220a      	movs	r2, #10
 8017f4a:	4620      	mov	r0, r4
 8017f4c:	f000 fd01 	bl	8018952 <__multadd>
 8017f50:	9b02      	ldr	r3, [sp, #8]
 8017f52:	2b00      	cmp	r3, #0
 8017f54:	4606      	mov	r6, r0
 8017f56:	dc4f      	bgt.n	8017ff8 <_dtoa_r+0x948>
 8017f58:	9b06      	ldr	r3, [sp, #24]
 8017f5a:	2b02      	cmp	r3, #2
 8017f5c:	dd4c      	ble.n	8017ff8 <_dtoa_r+0x948>
 8017f5e:	e011      	b.n	8017f84 <_dtoa_r+0x8d4>
 8017f60:	d0c9      	beq.n	8017ef6 <_dtoa_r+0x846>
 8017f62:	9a05      	ldr	r2, [sp, #20]
 8017f64:	331c      	adds	r3, #28
 8017f66:	441a      	add	r2, r3
 8017f68:	9205      	str	r2, [sp, #20]
 8017f6a:	441d      	add	r5, r3
 8017f6c:	4498      	add	r8, r3
 8017f6e:	e7c2      	b.n	8017ef6 <_dtoa_r+0x846>
 8017f70:	4603      	mov	r3, r0
 8017f72:	e7f6      	b.n	8017f62 <_dtoa_r+0x8b2>
 8017f74:	f1b9 0f00 	cmp.w	r9, #0
 8017f78:	dc38      	bgt.n	8017fec <_dtoa_r+0x93c>
 8017f7a:	9b06      	ldr	r3, [sp, #24]
 8017f7c:	2b02      	cmp	r3, #2
 8017f7e:	dd35      	ble.n	8017fec <_dtoa_r+0x93c>
 8017f80:	f8cd 9008 	str.w	r9, [sp, #8]
 8017f84:	9b02      	ldr	r3, [sp, #8]
 8017f86:	b963      	cbnz	r3, 8017fa2 <_dtoa_r+0x8f2>
 8017f88:	4639      	mov	r1, r7
 8017f8a:	2205      	movs	r2, #5
 8017f8c:	4620      	mov	r0, r4
 8017f8e:	f000 fce0 	bl	8018952 <__multadd>
 8017f92:	4601      	mov	r1, r0
 8017f94:	4607      	mov	r7, r0
 8017f96:	9804      	ldr	r0, [sp, #16]
 8017f98:	f000 fee4 	bl	8018d64 <__mcmp>
 8017f9c:	2800      	cmp	r0, #0
 8017f9e:	f73f adcc 	bgt.w	8017b3a <_dtoa_r+0x48a>
 8017fa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017fa4:	465d      	mov	r5, fp
 8017fa6:	ea6f 0a03 	mvn.w	sl, r3
 8017faa:	f04f 0900 	mov.w	r9, #0
 8017fae:	4639      	mov	r1, r7
 8017fb0:	4620      	mov	r0, r4
 8017fb2:	f000 fcb7 	bl	8018924 <_Bfree>
 8017fb6:	2e00      	cmp	r6, #0
 8017fb8:	f43f aeb7 	beq.w	8017d2a <_dtoa_r+0x67a>
 8017fbc:	f1b9 0f00 	cmp.w	r9, #0
 8017fc0:	d005      	beq.n	8017fce <_dtoa_r+0x91e>
 8017fc2:	45b1      	cmp	r9, r6
 8017fc4:	d003      	beq.n	8017fce <_dtoa_r+0x91e>
 8017fc6:	4649      	mov	r1, r9
 8017fc8:	4620      	mov	r0, r4
 8017fca:	f000 fcab 	bl	8018924 <_Bfree>
 8017fce:	4631      	mov	r1, r6
 8017fd0:	4620      	mov	r0, r4
 8017fd2:	f000 fca7 	bl	8018924 <_Bfree>
 8017fd6:	e6a8      	b.n	8017d2a <_dtoa_r+0x67a>
 8017fd8:	2700      	movs	r7, #0
 8017fda:	463e      	mov	r6, r7
 8017fdc:	e7e1      	b.n	8017fa2 <_dtoa_r+0x8f2>
 8017fde:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017fe2:	463e      	mov	r6, r7
 8017fe4:	e5a9      	b.n	8017b3a <_dtoa_r+0x48a>
 8017fe6:	bf00      	nop
 8017fe8:	40240000 	.word	0x40240000
 8017fec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017fee:	f8cd 9008 	str.w	r9, [sp, #8]
 8017ff2:	2b00      	cmp	r3, #0
 8017ff4:	f000 80fa 	beq.w	80181ec <_dtoa_r+0xb3c>
 8017ff8:	2d00      	cmp	r5, #0
 8017ffa:	dd05      	ble.n	8018008 <_dtoa_r+0x958>
 8017ffc:	4631      	mov	r1, r6
 8017ffe:	462a      	mov	r2, r5
 8018000:	4620      	mov	r0, r4
 8018002:	f000 fe5b 	bl	8018cbc <__lshift>
 8018006:	4606      	mov	r6, r0
 8018008:	9b07      	ldr	r3, [sp, #28]
 801800a:	2b00      	cmp	r3, #0
 801800c:	d04c      	beq.n	80180a8 <_dtoa_r+0x9f8>
 801800e:	6871      	ldr	r1, [r6, #4]
 8018010:	4620      	mov	r0, r4
 8018012:	f000 fc53 	bl	80188bc <_Balloc>
 8018016:	6932      	ldr	r2, [r6, #16]
 8018018:	3202      	adds	r2, #2
 801801a:	4605      	mov	r5, r0
 801801c:	0092      	lsls	r2, r2, #2
 801801e:	f106 010c 	add.w	r1, r6, #12
 8018022:	300c      	adds	r0, #12
 8018024:	f7fd fc8c 	bl	8015940 <memcpy>
 8018028:	2201      	movs	r2, #1
 801802a:	4629      	mov	r1, r5
 801802c:	4620      	mov	r0, r4
 801802e:	f000 fe45 	bl	8018cbc <__lshift>
 8018032:	9b00      	ldr	r3, [sp, #0]
 8018034:	f8cd b014 	str.w	fp, [sp, #20]
 8018038:	f003 0301 	and.w	r3, r3, #1
 801803c:	46b1      	mov	r9, r6
 801803e:	9307      	str	r3, [sp, #28]
 8018040:	4606      	mov	r6, r0
 8018042:	4639      	mov	r1, r7
 8018044:	9804      	ldr	r0, [sp, #16]
 8018046:	f7ff faa5 	bl	8017594 <quorem>
 801804a:	4649      	mov	r1, r9
 801804c:	4605      	mov	r5, r0
 801804e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8018052:	9804      	ldr	r0, [sp, #16]
 8018054:	f000 fe86 	bl	8018d64 <__mcmp>
 8018058:	4632      	mov	r2, r6
 801805a:	9000      	str	r0, [sp, #0]
 801805c:	4639      	mov	r1, r7
 801805e:	4620      	mov	r0, r4
 8018060:	f000 fe9a 	bl	8018d98 <__mdiff>
 8018064:	68c3      	ldr	r3, [r0, #12]
 8018066:	4602      	mov	r2, r0
 8018068:	bb03      	cbnz	r3, 80180ac <_dtoa_r+0x9fc>
 801806a:	4601      	mov	r1, r0
 801806c:	9008      	str	r0, [sp, #32]
 801806e:	9804      	ldr	r0, [sp, #16]
 8018070:	f000 fe78 	bl	8018d64 <__mcmp>
 8018074:	9a08      	ldr	r2, [sp, #32]
 8018076:	4603      	mov	r3, r0
 8018078:	4611      	mov	r1, r2
 801807a:	4620      	mov	r0, r4
 801807c:	9308      	str	r3, [sp, #32]
 801807e:	f000 fc51 	bl	8018924 <_Bfree>
 8018082:	9b08      	ldr	r3, [sp, #32]
 8018084:	b9a3      	cbnz	r3, 80180b0 <_dtoa_r+0xa00>
 8018086:	9a06      	ldr	r2, [sp, #24]
 8018088:	b992      	cbnz	r2, 80180b0 <_dtoa_r+0xa00>
 801808a:	9a07      	ldr	r2, [sp, #28]
 801808c:	b982      	cbnz	r2, 80180b0 <_dtoa_r+0xa00>
 801808e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8018092:	d029      	beq.n	80180e8 <_dtoa_r+0xa38>
 8018094:	9b00      	ldr	r3, [sp, #0]
 8018096:	2b00      	cmp	r3, #0
 8018098:	dd01      	ble.n	801809e <_dtoa_r+0x9ee>
 801809a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801809e:	9b05      	ldr	r3, [sp, #20]
 80180a0:	1c5d      	adds	r5, r3, #1
 80180a2:	f883 8000 	strb.w	r8, [r3]
 80180a6:	e782      	b.n	8017fae <_dtoa_r+0x8fe>
 80180a8:	4630      	mov	r0, r6
 80180aa:	e7c2      	b.n	8018032 <_dtoa_r+0x982>
 80180ac:	2301      	movs	r3, #1
 80180ae:	e7e3      	b.n	8018078 <_dtoa_r+0x9c8>
 80180b0:	9a00      	ldr	r2, [sp, #0]
 80180b2:	2a00      	cmp	r2, #0
 80180b4:	db04      	blt.n	80180c0 <_dtoa_r+0xa10>
 80180b6:	d125      	bne.n	8018104 <_dtoa_r+0xa54>
 80180b8:	9a06      	ldr	r2, [sp, #24]
 80180ba:	bb1a      	cbnz	r2, 8018104 <_dtoa_r+0xa54>
 80180bc:	9a07      	ldr	r2, [sp, #28]
 80180be:	bb0a      	cbnz	r2, 8018104 <_dtoa_r+0xa54>
 80180c0:	2b00      	cmp	r3, #0
 80180c2:	ddec      	ble.n	801809e <_dtoa_r+0x9ee>
 80180c4:	2201      	movs	r2, #1
 80180c6:	9904      	ldr	r1, [sp, #16]
 80180c8:	4620      	mov	r0, r4
 80180ca:	f000 fdf7 	bl	8018cbc <__lshift>
 80180ce:	4639      	mov	r1, r7
 80180d0:	9004      	str	r0, [sp, #16]
 80180d2:	f000 fe47 	bl	8018d64 <__mcmp>
 80180d6:	2800      	cmp	r0, #0
 80180d8:	dc03      	bgt.n	80180e2 <_dtoa_r+0xa32>
 80180da:	d1e0      	bne.n	801809e <_dtoa_r+0x9ee>
 80180dc:	f018 0f01 	tst.w	r8, #1
 80180e0:	d0dd      	beq.n	801809e <_dtoa_r+0x9ee>
 80180e2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80180e6:	d1d8      	bne.n	801809a <_dtoa_r+0x9ea>
 80180e8:	9b05      	ldr	r3, [sp, #20]
 80180ea:	9a05      	ldr	r2, [sp, #20]
 80180ec:	1c5d      	adds	r5, r3, #1
 80180ee:	2339      	movs	r3, #57	; 0x39
 80180f0:	7013      	strb	r3, [r2, #0]
 80180f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80180f6:	2b39      	cmp	r3, #57	; 0x39
 80180f8:	f105 32ff 	add.w	r2, r5, #4294967295
 80180fc:	d04f      	beq.n	801819e <_dtoa_r+0xaee>
 80180fe:	3301      	adds	r3, #1
 8018100:	7013      	strb	r3, [r2, #0]
 8018102:	e754      	b.n	8017fae <_dtoa_r+0x8fe>
 8018104:	9a05      	ldr	r2, [sp, #20]
 8018106:	2b00      	cmp	r3, #0
 8018108:	f102 0501 	add.w	r5, r2, #1
 801810c:	dd06      	ble.n	801811c <_dtoa_r+0xa6c>
 801810e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8018112:	d0e9      	beq.n	80180e8 <_dtoa_r+0xa38>
 8018114:	f108 0801 	add.w	r8, r8, #1
 8018118:	9b05      	ldr	r3, [sp, #20]
 801811a:	e7c2      	b.n	80180a2 <_dtoa_r+0x9f2>
 801811c:	9a02      	ldr	r2, [sp, #8]
 801811e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8018122:	eba5 030b 	sub.w	r3, r5, fp
 8018126:	4293      	cmp	r3, r2
 8018128:	d021      	beq.n	801816e <_dtoa_r+0xabe>
 801812a:	2300      	movs	r3, #0
 801812c:	220a      	movs	r2, #10
 801812e:	9904      	ldr	r1, [sp, #16]
 8018130:	4620      	mov	r0, r4
 8018132:	f000 fc0e 	bl	8018952 <__multadd>
 8018136:	45b1      	cmp	r9, r6
 8018138:	9004      	str	r0, [sp, #16]
 801813a:	f04f 0300 	mov.w	r3, #0
 801813e:	f04f 020a 	mov.w	r2, #10
 8018142:	4649      	mov	r1, r9
 8018144:	4620      	mov	r0, r4
 8018146:	d105      	bne.n	8018154 <_dtoa_r+0xaa4>
 8018148:	f000 fc03 	bl	8018952 <__multadd>
 801814c:	4681      	mov	r9, r0
 801814e:	4606      	mov	r6, r0
 8018150:	9505      	str	r5, [sp, #20]
 8018152:	e776      	b.n	8018042 <_dtoa_r+0x992>
 8018154:	f000 fbfd 	bl	8018952 <__multadd>
 8018158:	4631      	mov	r1, r6
 801815a:	4681      	mov	r9, r0
 801815c:	2300      	movs	r3, #0
 801815e:	220a      	movs	r2, #10
 8018160:	4620      	mov	r0, r4
 8018162:	f000 fbf6 	bl	8018952 <__multadd>
 8018166:	4606      	mov	r6, r0
 8018168:	e7f2      	b.n	8018150 <_dtoa_r+0xaa0>
 801816a:	f04f 0900 	mov.w	r9, #0
 801816e:	2201      	movs	r2, #1
 8018170:	9904      	ldr	r1, [sp, #16]
 8018172:	4620      	mov	r0, r4
 8018174:	f000 fda2 	bl	8018cbc <__lshift>
 8018178:	4639      	mov	r1, r7
 801817a:	9004      	str	r0, [sp, #16]
 801817c:	f000 fdf2 	bl	8018d64 <__mcmp>
 8018180:	2800      	cmp	r0, #0
 8018182:	dcb6      	bgt.n	80180f2 <_dtoa_r+0xa42>
 8018184:	d102      	bne.n	801818c <_dtoa_r+0xadc>
 8018186:	f018 0f01 	tst.w	r8, #1
 801818a:	d1b2      	bne.n	80180f2 <_dtoa_r+0xa42>
 801818c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018190:	2b30      	cmp	r3, #48	; 0x30
 8018192:	f105 32ff 	add.w	r2, r5, #4294967295
 8018196:	f47f af0a 	bne.w	8017fae <_dtoa_r+0x8fe>
 801819a:	4615      	mov	r5, r2
 801819c:	e7f6      	b.n	801818c <_dtoa_r+0xadc>
 801819e:	4593      	cmp	fp, r2
 80181a0:	d105      	bne.n	80181ae <_dtoa_r+0xafe>
 80181a2:	2331      	movs	r3, #49	; 0x31
 80181a4:	f10a 0a01 	add.w	sl, sl, #1
 80181a8:	f88b 3000 	strb.w	r3, [fp]
 80181ac:	e6ff      	b.n	8017fae <_dtoa_r+0x8fe>
 80181ae:	4615      	mov	r5, r2
 80181b0:	e79f      	b.n	80180f2 <_dtoa_r+0xa42>
 80181b2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8018218 <_dtoa_r+0xb68>
 80181b6:	e007      	b.n	80181c8 <_dtoa_r+0xb18>
 80181b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80181ba:	f8df b060 	ldr.w	fp, [pc, #96]	; 801821c <_dtoa_r+0xb6c>
 80181be:	b11b      	cbz	r3, 80181c8 <_dtoa_r+0xb18>
 80181c0:	f10b 0308 	add.w	r3, fp, #8
 80181c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80181c6:	6013      	str	r3, [r2, #0]
 80181c8:	4658      	mov	r0, fp
 80181ca:	b017      	add	sp, #92	; 0x5c
 80181cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181d0:	9b06      	ldr	r3, [sp, #24]
 80181d2:	2b01      	cmp	r3, #1
 80181d4:	f77f ae35 	ble.w	8017e42 <_dtoa_r+0x792>
 80181d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80181da:	9307      	str	r3, [sp, #28]
 80181dc:	e649      	b.n	8017e72 <_dtoa_r+0x7c2>
 80181de:	9b02      	ldr	r3, [sp, #8]
 80181e0:	2b00      	cmp	r3, #0
 80181e2:	dc03      	bgt.n	80181ec <_dtoa_r+0xb3c>
 80181e4:	9b06      	ldr	r3, [sp, #24]
 80181e6:	2b02      	cmp	r3, #2
 80181e8:	f73f aecc 	bgt.w	8017f84 <_dtoa_r+0x8d4>
 80181ec:	465d      	mov	r5, fp
 80181ee:	4639      	mov	r1, r7
 80181f0:	9804      	ldr	r0, [sp, #16]
 80181f2:	f7ff f9cf 	bl	8017594 <quorem>
 80181f6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80181fa:	f805 8b01 	strb.w	r8, [r5], #1
 80181fe:	9a02      	ldr	r2, [sp, #8]
 8018200:	eba5 030b 	sub.w	r3, r5, fp
 8018204:	429a      	cmp	r2, r3
 8018206:	ddb0      	ble.n	801816a <_dtoa_r+0xaba>
 8018208:	2300      	movs	r3, #0
 801820a:	220a      	movs	r2, #10
 801820c:	9904      	ldr	r1, [sp, #16]
 801820e:	4620      	mov	r0, r4
 8018210:	f000 fb9f 	bl	8018952 <__multadd>
 8018214:	9004      	str	r0, [sp, #16]
 8018216:	e7ea      	b.n	80181ee <_dtoa_r+0xb3e>
 8018218:	0801b314 	.word	0x0801b314
 801821c:	0801b390 	.word	0x0801b390

08018220 <rshift>:
 8018220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018222:	6906      	ldr	r6, [r0, #16]
 8018224:	114b      	asrs	r3, r1, #5
 8018226:	429e      	cmp	r6, r3
 8018228:	f100 0414 	add.w	r4, r0, #20
 801822c:	dd30      	ble.n	8018290 <rshift+0x70>
 801822e:	f011 011f 	ands.w	r1, r1, #31
 8018232:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8018236:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801823a:	d108      	bne.n	801824e <rshift+0x2e>
 801823c:	4621      	mov	r1, r4
 801823e:	42b2      	cmp	r2, r6
 8018240:	460b      	mov	r3, r1
 8018242:	d211      	bcs.n	8018268 <rshift+0x48>
 8018244:	f852 3b04 	ldr.w	r3, [r2], #4
 8018248:	f841 3b04 	str.w	r3, [r1], #4
 801824c:	e7f7      	b.n	801823e <rshift+0x1e>
 801824e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8018252:	f1c1 0c20 	rsb	ip, r1, #32
 8018256:	40cd      	lsrs	r5, r1
 8018258:	3204      	adds	r2, #4
 801825a:	4623      	mov	r3, r4
 801825c:	42b2      	cmp	r2, r6
 801825e:	4617      	mov	r7, r2
 8018260:	d30c      	bcc.n	801827c <rshift+0x5c>
 8018262:	601d      	str	r5, [r3, #0]
 8018264:	b105      	cbz	r5, 8018268 <rshift+0x48>
 8018266:	3304      	adds	r3, #4
 8018268:	1b1a      	subs	r2, r3, r4
 801826a:	42a3      	cmp	r3, r4
 801826c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018270:	bf08      	it	eq
 8018272:	2300      	moveq	r3, #0
 8018274:	6102      	str	r2, [r0, #16]
 8018276:	bf08      	it	eq
 8018278:	6143      	streq	r3, [r0, #20]
 801827a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801827c:	683f      	ldr	r7, [r7, #0]
 801827e:	fa07 f70c 	lsl.w	r7, r7, ip
 8018282:	433d      	orrs	r5, r7
 8018284:	f843 5b04 	str.w	r5, [r3], #4
 8018288:	f852 5b04 	ldr.w	r5, [r2], #4
 801828c:	40cd      	lsrs	r5, r1
 801828e:	e7e5      	b.n	801825c <rshift+0x3c>
 8018290:	4623      	mov	r3, r4
 8018292:	e7e9      	b.n	8018268 <rshift+0x48>

08018294 <__hexdig_fun>:
 8018294:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018298:	2b09      	cmp	r3, #9
 801829a:	d802      	bhi.n	80182a2 <__hexdig_fun+0xe>
 801829c:	3820      	subs	r0, #32
 801829e:	b2c0      	uxtb	r0, r0
 80182a0:	4770      	bx	lr
 80182a2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80182a6:	2b05      	cmp	r3, #5
 80182a8:	d801      	bhi.n	80182ae <__hexdig_fun+0x1a>
 80182aa:	3847      	subs	r0, #71	; 0x47
 80182ac:	e7f7      	b.n	801829e <__hexdig_fun+0xa>
 80182ae:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80182b2:	2b05      	cmp	r3, #5
 80182b4:	d801      	bhi.n	80182ba <__hexdig_fun+0x26>
 80182b6:	3827      	subs	r0, #39	; 0x27
 80182b8:	e7f1      	b.n	801829e <__hexdig_fun+0xa>
 80182ba:	2000      	movs	r0, #0
 80182bc:	4770      	bx	lr

080182be <__gethex>:
 80182be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182c2:	b08b      	sub	sp, #44	; 0x2c
 80182c4:	468a      	mov	sl, r1
 80182c6:	9002      	str	r0, [sp, #8]
 80182c8:	9816      	ldr	r0, [sp, #88]	; 0x58
 80182ca:	9306      	str	r3, [sp, #24]
 80182cc:	4690      	mov	r8, r2
 80182ce:	f000 fad0 	bl	8018872 <__localeconv_l>
 80182d2:	6803      	ldr	r3, [r0, #0]
 80182d4:	9303      	str	r3, [sp, #12]
 80182d6:	4618      	mov	r0, r3
 80182d8:	f7e7 ff7a 	bl	80001d0 <strlen>
 80182dc:	9b03      	ldr	r3, [sp, #12]
 80182de:	9001      	str	r0, [sp, #4]
 80182e0:	4403      	add	r3, r0
 80182e2:	f04f 0b00 	mov.w	fp, #0
 80182e6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80182ea:	9307      	str	r3, [sp, #28]
 80182ec:	f8da 3000 	ldr.w	r3, [sl]
 80182f0:	3302      	adds	r3, #2
 80182f2:	461f      	mov	r7, r3
 80182f4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80182f8:	2830      	cmp	r0, #48	; 0x30
 80182fa:	d06c      	beq.n	80183d6 <__gethex+0x118>
 80182fc:	f7ff ffca 	bl	8018294 <__hexdig_fun>
 8018300:	4604      	mov	r4, r0
 8018302:	2800      	cmp	r0, #0
 8018304:	d16a      	bne.n	80183dc <__gethex+0x11e>
 8018306:	9a01      	ldr	r2, [sp, #4]
 8018308:	9903      	ldr	r1, [sp, #12]
 801830a:	4638      	mov	r0, r7
 801830c:	f001 f836 	bl	801937c <strncmp>
 8018310:	2800      	cmp	r0, #0
 8018312:	d166      	bne.n	80183e2 <__gethex+0x124>
 8018314:	9b01      	ldr	r3, [sp, #4]
 8018316:	5cf8      	ldrb	r0, [r7, r3]
 8018318:	18fe      	adds	r6, r7, r3
 801831a:	f7ff ffbb 	bl	8018294 <__hexdig_fun>
 801831e:	2800      	cmp	r0, #0
 8018320:	d062      	beq.n	80183e8 <__gethex+0x12a>
 8018322:	4633      	mov	r3, r6
 8018324:	7818      	ldrb	r0, [r3, #0]
 8018326:	2830      	cmp	r0, #48	; 0x30
 8018328:	461f      	mov	r7, r3
 801832a:	f103 0301 	add.w	r3, r3, #1
 801832e:	d0f9      	beq.n	8018324 <__gethex+0x66>
 8018330:	f7ff ffb0 	bl	8018294 <__hexdig_fun>
 8018334:	fab0 f580 	clz	r5, r0
 8018338:	096d      	lsrs	r5, r5, #5
 801833a:	4634      	mov	r4, r6
 801833c:	f04f 0b01 	mov.w	fp, #1
 8018340:	463a      	mov	r2, r7
 8018342:	4616      	mov	r6, r2
 8018344:	3201      	adds	r2, #1
 8018346:	7830      	ldrb	r0, [r6, #0]
 8018348:	f7ff ffa4 	bl	8018294 <__hexdig_fun>
 801834c:	2800      	cmp	r0, #0
 801834e:	d1f8      	bne.n	8018342 <__gethex+0x84>
 8018350:	9a01      	ldr	r2, [sp, #4]
 8018352:	9903      	ldr	r1, [sp, #12]
 8018354:	4630      	mov	r0, r6
 8018356:	f001 f811 	bl	801937c <strncmp>
 801835a:	b950      	cbnz	r0, 8018372 <__gethex+0xb4>
 801835c:	b954      	cbnz	r4, 8018374 <__gethex+0xb6>
 801835e:	9b01      	ldr	r3, [sp, #4]
 8018360:	18f4      	adds	r4, r6, r3
 8018362:	4622      	mov	r2, r4
 8018364:	4616      	mov	r6, r2
 8018366:	3201      	adds	r2, #1
 8018368:	7830      	ldrb	r0, [r6, #0]
 801836a:	f7ff ff93 	bl	8018294 <__hexdig_fun>
 801836e:	2800      	cmp	r0, #0
 8018370:	d1f8      	bne.n	8018364 <__gethex+0xa6>
 8018372:	b10c      	cbz	r4, 8018378 <__gethex+0xba>
 8018374:	1ba4      	subs	r4, r4, r6
 8018376:	00a4      	lsls	r4, r4, #2
 8018378:	7833      	ldrb	r3, [r6, #0]
 801837a:	2b50      	cmp	r3, #80	; 0x50
 801837c:	d001      	beq.n	8018382 <__gethex+0xc4>
 801837e:	2b70      	cmp	r3, #112	; 0x70
 8018380:	d140      	bne.n	8018404 <__gethex+0x146>
 8018382:	7873      	ldrb	r3, [r6, #1]
 8018384:	2b2b      	cmp	r3, #43	; 0x2b
 8018386:	d031      	beq.n	80183ec <__gethex+0x12e>
 8018388:	2b2d      	cmp	r3, #45	; 0x2d
 801838a:	d033      	beq.n	80183f4 <__gethex+0x136>
 801838c:	1c71      	adds	r1, r6, #1
 801838e:	f04f 0900 	mov.w	r9, #0
 8018392:	7808      	ldrb	r0, [r1, #0]
 8018394:	f7ff ff7e 	bl	8018294 <__hexdig_fun>
 8018398:	1e43      	subs	r3, r0, #1
 801839a:	b2db      	uxtb	r3, r3
 801839c:	2b18      	cmp	r3, #24
 801839e:	d831      	bhi.n	8018404 <__gethex+0x146>
 80183a0:	f1a0 0210 	sub.w	r2, r0, #16
 80183a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80183a8:	f7ff ff74 	bl	8018294 <__hexdig_fun>
 80183ac:	1e43      	subs	r3, r0, #1
 80183ae:	b2db      	uxtb	r3, r3
 80183b0:	2b18      	cmp	r3, #24
 80183b2:	d922      	bls.n	80183fa <__gethex+0x13c>
 80183b4:	f1b9 0f00 	cmp.w	r9, #0
 80183b8:	d000      	beq.n	80183bc <__gethex+0xfe>
 80183ba:	4252      	negs	r2, r2
 80183bc:	4414      	add	r4, r2
 80183be:	f8ca 1000 	str.w	r1, [sl]
 80183c2:	b30d      	cbz	r5, 8018408 <__gethex+0x14a>
 80183c4:	f1bb 0f00 	cmp.w	fp, #0
 80183c8:	bf0c      	ite	eq
 80183ca:	2706      	moveq	r7, #6
 80183cc:	2700      	movne	r7, #0
 80183ce:	4638      	mov	r0, r7
 80183d0:	b00b      	add	sp, #44	; 0x2c
 80183d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80183d6:	f10b 0b01 	add.w	fp, fp, #1
 80183da:	e78a      	b.n	80182f2 <__gethex+0x34>
 80183dc:	2500      	movs	r5, #0
 80183de:	462c      	mov	r4, r5
 80183e0:	e7ae      	b.n	8018340 <__gethex+0x82>
 80183e2:	463e      	mov	r6, r7
 80183e4:	2501      	movs	r5, #1
 80183e6:	e7c7      	b.n	8018378 <__gethex+0xba>
 80183e8:	4604      	mov	r4, r0
 80183ea:	e7fb      	b.n	80183e4 <__gethex+0x126>
 80183ec:	f04f 0900 	mov.w	r9, #0
 80183f0:	1cb1      	adds	r1, r6, #2
 80183f2:	e7ce      	b.n	8018392 <__gethex+0xd4>
 80183f4:	f04f 0901 	mov.w	r9, #1
 80183f8:	e7fa      	b.n	80183f0 <__gethex+0x132>
 80183fa:	230a      	movs	r3, #10
 80183fc:	fb03 0202 	mla	r2, r3, r2, r0
 8018400:	3a10      	subs	r2, #16
 8018402:	e7cf      	b.n	80183a4 <__gethex+0xe6>
 8018404:	4631      	mov	r1, r6
 8018406:	e7da      	b.n	80183be <__gethex+0x100>
 8018408:	1bf3      	subs	r3, r6, r7
 801840a:	3b01      	subs	r3, #1
 801840c:	4629      	mov	r1, r5
 801840e:	2b07      	cmp	r3, #7
 8018410:	dc49      	bgt.n	80184a6 <__gethex+0x1e8>
 8018412:	9802      	ldr	r0, [sp, #8]
 8018414:	f000 fa52 	bl	80188bc <_Balloc>
 8018418:	9b01      	ldr	r3, [sp, #4]
 801841a:	f100 0914 	add.w	r9, r0, #20
 801841e:	f04f 0b00 	mov.w	fp, #0
 8018422:	f1c3 0301 	rsb	r3, r3, #1
 8018426:	4605      	mov	r5, r0
 8018428:	f8cd 9010 	str.w	r9, [sp, #16]
 801842c:	46da      	mov	sl, fp
 801842e:	9308      	str	r3, [sp, #32]
 8018430:	42b7      	cmp	r7, r6
 8018432:	d33b      	bcc.n	80184ac <__gethex+0x1ee>
 8018434:	9804      	ldr	r0, [sp, #16]
 8018436:	f840 ab04 	str.w	sl, [r0], #4
 801843a:	eba0 0009 	sub.w	r0, r0, r9
 801843e:	1080      	asrs	r0, r0, #2
 8018440:	6128      	str	r0, [r5, #16]
 8018442:	0147      	lsls	r7, r0, #5
 8018444:	4650      	mov	r0, sl
 8018446:	f000 fafd 	bl	8018a44 <__hi0bits>
 801844a:	f8d8 6000 	ldr.w	r6, [r8]
 801844e:	1a3f      	subs	r7, r7, r0
 8018450:	42b7      	cmp	r7, r6
 8018452:	dd64      	ble.n	801851e <__gethex+0x260>
 8018454:	1bbf      	subs	r7, r7, r6
 8018456:	4639      	mov	r1, r7
 8018458:	4628      	mov	r0, r5
 801845a:	f000 fe0d 	bl	8019078 <__any_on>
 801845e:	4682      	mov	sl, r0
 8018460:	b178      	cbz	r0, 8018482 <__gethex+0x1c4>
 8018462:	1e7b      	subs	r3, r7, #1
 8018464:	1159      	asrs	r1, r3, #5
 8018466:	f003 021f 	and.w	r2, r3, #31
 801846a:	f04f 0a01 	mov.w	sl, #1
 801846e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8018472:	fa0a f202 	lsl.w	r2, sl, r2
 8018476:	420a      	tst	r2, r1
 8018478:	d003      	beq.n	8018482 <__gethex+0x1c4>
 801847a:	4553      	cmp	r3, sl
 801847c:	dc46      	bgt.n	801850c <__gethex+0x24e>
 801847e:	f04f 0a02 	mov.w	sl, #2
 8018482:	4639      	mov	r1, r7
 8018484:	4628      	mov	r0, r5
 8018486:	f7ff fecb 	bl	8018220 <rshift>
 801848a:	443c      	add	r4, r7
 801848c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018490:	42a3      	cmp	r3, r4
 8018492:	da52      	bge.n	801853a <__gethex+0x27c>
 8018494:	4629      	mov	r1, r5
 8018496:	9802      	ldr	r0, [sp, #8]
 8018498:	f000 fa44 	bl	8018924 <_Bfree>
 801849c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801849e:	2300      	movs	r3, #0
 80184a0:	6013      	str	r3, [r2, #0]
 80184a2:	27a3      	movs	r7, #163	; 0xa3
 80184a4:	e793      	b.n	80183ce <__gethex+0x110>
 80184a6:	3101      	adds	r1, #1
 80184a8:	105b      	asrs	r3, r3, #1
 80184aa:	e7b0      	b.n	801840e <__gethex+0x150>
 80184ac:	1e73      	subs	r3, r6, #1
 80184ae:	9305      	str	r3, [sp, #20]
 80184b0:	9a07      	ldr	r2, [sp, #28]
 80184b2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80184b6:	4293      	cmp	r3, r2
 80184b8:	d018      	beq.n	80184ec <__gethex+0x22e>
 80184ba:	f1bb 0f20 	cmp.w	fp, #32
 80184be:	d107      	bne.n	80184d0 <__gethex+0x212>
 80184c0:	9b04      	ldr	r3, [sp, #16]
 80184c2:	f8c3 a000 	str.w	sl, [r3]
 80184c6:	3304      	adds	r3, #4
 80184c8:	f04f 0a00 	mov.w	sl, #0
 80184cc:	9304      	str	r3, [sp, #16]
 80184ce:	46d3      	mov	fp, sl
 80184d0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80184d4:	f7ff fede 	bl	8018294 <__hexdig_fun>
 80184d8:	f000 000f 	and.w	r0, r0, #15
 80184dc:	fa00 f00b 	lsl.w	r0, r0, fp
 80184e0:	ea4a 0a00 	orr.w	sl, sl, r0
 80184e4:	f10b 0b04 	add.w	fp, fp, #4
 80184e8:	9b05      	ldr	r3, [sp, #20]
 80184ea:	e00d      	b.n	8018508 <__gethex+0x24a>
 80184ec:	9b05      	ldr	r3, [sp, #20]
 80184ee:	9a08      	ldr	r2, [sp, #32]
 80184f0:	4413      	add	r3, r2
 80184f2:	42bb      	cmp	r3, r7
 80184f4:	d3e1      	bcc.n	80184ba <__gethex+0x1fc>
 80184f6:	4618      	mov	r0, r3
 80184f8:	9a01      	ldr	r2, [sp, #4]
 80184fa:	9903      	ldr	r1, [sp, #12]
 80184fc:	9309      	str	r3, [sp, #36]	; 0x24
 80184fe:	f000 ff3d 	bl	801937c <strncmp>
 8018502:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018504:	2800      	cmp	r0, #0
 8018506:	d1d8      	bne.n	80184ba <__gethex+0x1fc>
 8018508:	461e      	mov	r6, r3
 801850a:	e791      	b.n	8018430 <__gethex+0x172>
 801850c:	1eb9      	subs	r1, r7, #2
 801850e:	4628      	mov	r0, r5
 8018510:	f000 fdb2 	bl	8019078 <__any_on>
 8018514:	2800      	cmp	r0, #0
 8018516:	d0b2      	beq.n	801847e <__gethex+0x1c0>
 8018518:	f04f 0a03 	mov.w	sl, #3
 801851c:	e7b1      	b.n	8018482 <__gethex+0x1c4>
 801851e:	da09      	bge.n	8018534 <__gethex+0x276>
 8018520:	1bf7      	subs	r7, r6, r7
 8018522:	4629      	mov	r1, r5
 8018524:	463a      	mov	r2, r7
 8018526:	9802      	ldr	r0, [sp, #8]
 8018528:	f000 fbc8 	bl	8018cbc <__lshift>
 801852c:	1be4      	subs	r4, r4, r7
 801852e:	4605      	mov	r5, r0
 8018530:	f100 0914 	add.w	r9, r0, #20
 8018534:	f04f 0a00 	mov.w	sl, #0
 8018538:	e7a8      	b.n	801848c <__gethex+0x1ce>
 801853a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801853e:	42a0      	cmp	r0, r4
 8018540:	dd6a      	ble.n	8018618 <__gethex+0x35a>
 8018542:	1b04      	subs	r4, r0, r4
 8018544:	42a6      	cmp	r6, r4
 8018546:	dc2e      	bgt.n	80185a6 <__gethex+0x2e8>
 8018548:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801854c:	2b02      	cmp	r3, #2
 801854e:	d022      	beq.n	8018596 <__gethex+0x2d8>
 8018550:	2b03      	cmp	r3, #3
 8018552:	d024      	beq.n	801859e <__gethex+0x2e0>
 8018554:	2b01      	cmp	r3, #1
 8018556:	d115      	bne.n	8018584 <__gethex+0x2c6>
 8018558:	42a6      	cmp	r6, r4
 801855a:	d113      	bne.n	8018584 <__gethex+0x2c6>
 801855c:	2e01      	cmp	r6, #1
 801855e:	dc0b      	bgt.n	8018578 <__gethex+0x2ba>
 8018560:	9a06      	ldr	r2, [sp, #24]
 8018562:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018566:	6013      	str	r3, [r2, #0]
 8018568:	2301      	movs	r3, #1
 801856a:	612b      	str	r3, [r5, #16]
 801856c:	f8c9 3000 	str.w	r3, [r9]
 8018570:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018572:	2762      	movs	r7, #98	; 0x62
 8018574:	601d      	str	r5, [r3, #0]
 8018576:	e72a      	b.n	80183ce <__gethex+0x110>
 8018578:	1e71      	subs	r1, r6, #1
 801857a:	4628      	mov	r0, r5
 801857c:	f000 fd7c 	bl	8019078 <__any_on>
 8018580:	2800      	cmp	r0, #0
 8018582:	d1ed      	bne.n	8018560 <__gethex+0x2a2>
 8018584:	4629      	mov	r1, r5
 8018586:	9802      	ldr	r0, [sp, #8]
 8018588:	f000 f9cc 	bl	8018924 <_Bfree>
 801858c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801858e:	2300      	movs	r3, #0
 8018590:	6013      	str	r3, [r2, #0]
 8018592:	2750      	movs	r7, #80	; 0x50
 8018594:	e71b      	b.n	80183ce <__gethex+0x110>
 8018596:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018598:	2b00      	cmp	r3, #0
 801859a:	d0e1      	beq.n	8018560 <__gethex+0x2a2>
 801859c:	e7f2      	b.n	8018584 <__gethex+0x2c6>
 801859e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80185a0:	2b00      	cmp	r3, #0
 80185a2:	d1dd      	bne.n	8018560 <__gethex+0x2a2>
 80185a4:	e7ee      	b.n	8018584 <__gethex+0x2c6>
 80185a6:	1e67      	subs	r7, r4, #1
 80185a8:	f1ba 0f00 	cmp.w	sl, #0
 80185ac:	d131      	bne.n	8018612 <__gethex+0x354>
 80185ae:	b127      	cbz	r7, 80185ba <__gethex+0x2fc>
 80185b0:	4639      	mov	r1, r7
 80185b2:	4628      	mov	r0, r5
 80185b4:	f000 fd60 	bl	8019078 <__any_on>
 80185b8:	4682      	mov	sl, r0
 80185ba:	117a      	asrs	r2, r7, #5
 80185bc:	2301      	movs	r3, #1
 80185be:	f007 071f 	and.w	r7, r7, #31
 80185c2:	fa03 f707 	lsl.w	r7, r3, r7
 80185c6:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80185ca:	4621      	mov	r1, r4
 80185cc:	421f      	tst	r7, r3
 80185ce:	4628      	mov	r0, r5
 80185d0:	bf18      	it	ne
 80185d2:	f04a 0a02 	orrne.w	sl, sl, #2
 80185d6:	1b36      	subs	r6, r6, r4
 80185d8:	f7ff fe22 	bl	8018220 <rshift>
 80185dc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80185e0:	2702      	movs	r7, #2
 80185e2:	f1ba 0f00 	cmp.w	sl, #0
 80185e6:	d048      	beq.n	801867a <__gethex+0x3bc>
 80185e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80185ec:	2b02      	cmp	r3, #2
 80185ee:	d015      	beq.n	801861c <__gethex+0x35e>
 80185f0:	2b03      	cmp	r3, #3
 80185f2:	d017      	beq.n	8018624 <__gethex+0x366>
 80185f4:	2b01      	cmp	r3, #1
 80185f6:	d109      	bne.n	801860c <__gethex+0x34e>
 80185f8:	f01a 0f02 	tst.w	sl, #2
 80185fc:	d006      	beq.n	801860c <__gethex+0x34e>
 80185fe:	f8d9 3000 	ldr.w	r3, [r9]
 8018602:	ea4a 0a03 	orr.w	sl, sl, r3
 8018606:	f01a 0f01 	tst.w	sl, #1
 801860a:	d10e      	bne.n	801862a <__gethex+0x36c>
 801860c:	f047 0710 	orr.w	r7, r7, #16
 8018610:	e033      	b.n	801867a <__gethex+0x3bc>
 8018612:	f04f 0a01 	mov.w	sl, #1
 8018616:	e7d0      	b.n	80185ba <__gethex+0x2fc>
 8018618:	2701      	movs	r7, #1
 801861a:	e7e2      	b.n	80185e2 <__gethex+0x324>
 801861c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801861e:	f1c3 0301 	rsb	r3, r3, #1
 8018622:	9315      	str	r3, [sp, #84]	; 0x54
 8018624:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018626:	2b00      	cmp	r3, #0
 8018628:	d0f0      	beq.n	801860c <__gethex+0x34e>
 801862a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801862e:	f105 0314 	add.w	r3, r5, #20
 8018632:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8018636:	eb03 010a 	add.w	r1, r3, sl
 801863a:	f04f 0c00 	mov.w	ip, #0
 801863e:	4618      	mov	r0, r3
 8018640:	f853 2b04 	ldr.w	r2, [r3], #4
 8018644:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018648:	d01c      	beq.n	8018684 <__gethex+0x3c6>
 801864a:	3201      	adds	r2, #1
 801864c:	6002      	str	r2, [r0, #0]
 801864e:	2f02      	cmp	r7, #2
 8018650:	f105 0314 	add.w	r3, r5, #20
 8018654:	d138      	bne.n	80186c8 <__gethex+0x40a>
 8018656:	f8d8 2000 	ldr.w	r2, [r8]
 801865a:	3a01      	subs	r2, #1
 801865c:	42b2      	cmp	r2, r6
 801865e:	d10a      	bne.n	8018676 <__gethex+0x3b8>
 8018660:	1171      	asrs	r1, r6, #5
 8018662:	2201      	movs	r2, #1
 8018664:	f006 061f 	and.w	r6, r6, #31
 8018668:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801866c:	fa02 f606 	lsl.w	r6, r2, r6
 8018670:	421e      	tst	r6, r3
 8018672:	bf18      	it	ne
 8018674:	4617      	movne	r7, r2
 8018676:	f047 0720 	orr.w	r7, r7, #32
 801867a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801867c:	601d      	str	r5, [r3, #0]
 801867e:	9b06      	ldr	r3, [sp, #24]
 8018680:	601c      	str	r4, [r3, #0]
 8018682:	e6a4      	b.n	80183ce <__gethex+0x110>
 8018684:	4299      	cmp	r1, r3
 8018686:	f843 cc04 	str.w	ip, [r3, #-4]
 801868a:	d8d8      	bhi.n	801863e <__gethex+0x380>
 801868c:	68ab      	ldr	r3, [r5, #8]
 801868e:	4599      	cmp	r9, r3
 8018690:	db12      	blt.n	80186b8 <__gethex+0x3fa>
 8018692:	6869      	ldr	r1, [r5, #4]
 8018694:	9802      	ldr	r0, [sp, #8]
 8018696:	3101      	adds	r1, #1
 8018698:	f000 f910 	bl	80188bc <_Balloc>
 801869c:	692a      	ldr	r2, [r5, #16]
 801869e:	3202      	adds	r2, #2
 80186a0:	f105 010c 	add.w	r1, r5, #12
 80186a4:	4683      	mov	fp, r0
 80186a6:	0092      	lsls	r2, r2, #2
 80186a8:	300c      	adds	r0, #12
 80186aa:	f7fd f949 	bl	8015940 <memcpy>
 80186ae:	4629      	mov	r1, r5
 80186b0:	9802      	ldr	r0, [sp, #8]
 80186b2:	f000 f937 	bl	8018924 <_Bfree>
 80186b6:	465d      	mov	r5, fp
 80186b8:	692b      	ldr	r3, [r5, #16]
 80186ba:	1c5a      	adds	r2, r3, #1
 80186bc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80186c0:	612a      	str	r2, [r5, #16]
 80186c2:	2201      	movs	r2, #1
 80186c4:	615a      	str	r2, [r3, #20]
 80186c6:	e7c2      	b.n	801864e <__gethex+0x390>
 80186c8:	692a      	ldr	r2, [r5, #16]
 80186ca:	454a      	cmp	r2, r9
 80186cc:	dd0b      	ble.n	80186e6 <__gethex+0x428>
 80186ce:	2101      	movs	r1, #1
 80186d0:	4628      	mov	r0, r5
 80186d2:	f7ff fda5 	bl	8018220 <rshift>
 80186d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80186da:	3401      	adds	r4, #1
 80186dc:	42a3      	cmp	r3, r4
 80186de:	f6ff aed9 	blt.w	8018494 <__gethex+0x1d6>
 80186e2:	2701      	movs	r7, #1
 80186e4:	e7c7      	b.n	8018676 <__gethex+0x3b8>
 80186e6:	f016 061f 	ands.w	r6, r6, #31
 80186ea:	d0fa      	beq.n	80186e2 <__gethex+0x424>
 80186ec:	449a      	add	sl, r3
 80186ee:	f1c6 0620 	rsb	r6, r6, #32
 80186f2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80186f6:	f000 f9a5 	bl	8018a44 <__hi0bits>
 80186fa:	42b0      	cmp	r0, r6
 80186fc:	dbe7      	blt.n	80186ce <__gethex+0x410>
 80186fe:	e7f0      	b.n	80186e2 <__gethex+0x424>

08018700 <L_shift>:
 8018700:	f1c2 0208 	rsb	r2, r2, #8
 8018704:	0092      	lsls	r2, r2, #2
 8018706:	b570      	push	{r4, r5, r6, lr}
 8018708:	f1c2 0620 	rsb	r6, r2, #32
 801870c:	6843      	ldr	r3, [r0, #4]
 801870e:	6804      	ldr	r4, [r0, #0]
 8018710:	fa03 f506 	lsl.w	r5, r3, r6
 8018714:	432c      	orrs	r4, r5
 8018716:	40d3      	lsrs	r3, r2
 8018718:	6004      	str	r4, [r0, #0]
 801871a:	f840 3f04 	str.w	r3, [r0, #4]!
 801871e:	4288      	cmp	r0, r1
 8018720:	d3f4      	bcc.n	801870c <L_shift+0xc>
 8018722:	bd70      	pop	{r4, r5, r6, pc}

08018724 <__match>:
 8018724:	b530      	push	{r4, r5, lr}
 8018726:	6803      	ldr	r3, [r0, #0]
 8018728:	3301      	adds	r3, #1
 801872a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801872e:	b914      	cbnz	r4, 8018736 <__match+0x12>
 8018730:	6003      	str	r3, [r0, #0]
 8018732:	2001      	movs	r0, #1
 8018734:	bd30      	pop	{r4, r5, pc}
 8018736:	f813 2b01 	ldrb.w	r2, [r3], #1
 801873a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801873e:	2d19      	cmp	r5, #25
 8018740:	bf98      	it	ls
 8018742:	3220      	addls	r2, #32
 8018744:	42a2      	cmp	r2, r4
 8018746:	d0f0      	beq.n	801872a <__match+0x6>
 8018748:	2000      	movs	r0, #0
 801874a:	e7f3      	b.n	8018734 <__match+0x10>

0801874c <__hexnan>:
 801874c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018750:	680b      	ldr	r3, [r1, #0]
 8018752:	6801      	ldr	r1, [r0, #0]
 8018754:	115f      	asrs	r7, r3, #5
 8018756:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801875a:	f013 031f 	ands.w	r3, r3, #31
 801875e:	b087      	sub	sp, #28
 8018760:	bf18      	it	ne
 8018762:	3704      	addne	r7, #4
 8018764:	2500      	movs	r5, #0
 8018766:	1f3e      	subs	r6, r7, #4
 8018768:	4682      	mov	sl, r0
 801876a:	4690      	mov	r8, r2
 801876c:	9301      	str	r3, [sp, #4]
 801876e:	f847 5c04 	str.w	r5, [r7, #-4]
 8018772:	46b1      	mov	r9, r6
 8018774:	4634      	mov	r4, r6
 8018776:	9502      	str	r5, [sp, #8]
 8018778:	46ab      	mov	fp, r5
 801877a:	784a      	ldrb	r2, [r1, #1]
 801877c:	1c4b      	adds	r3, r1, #1
 801877e:	9303      	str	r3, [sp, #12]
 8018780:	b342      	cbz	r2, 80187d4 <__hexnan+0x88>
 8018782:	4610      	mov	r0, r2
 8018784:	9105      	str	r1, [sp, #20]
 8018786:	9204      	str	r2, [sp, #16]
 8018788:	f7ff fd84 	bl	8018294 <__hexdig_fun>
 801878c:	2800      	cmp	r0, #0
 801878e:	d143      	bne.n	8018818 <__hexnan+0xcc>
 8018790:	9a04      	ldr	r2, [sp, #16]
 8018792:	9905      	ldr	r1, [sp, #20]
 8018794:	2a20      	cmp	r2, #32
 8018796:	d818      	bhi.n	80187ca <__hexnan+0x7e>
 8018798:	9b02      	ldr	r3, [sp, #8]
 801879a:	459b      	cmp	fp, r3
 801879c:	dd13      	ble.n	80187c6 <__hexnan+0x7a>
 801879e:	454c      	cmp	r4, r9
 80187a0:	d206      	bcs.n	80187b0 <__hexnan+0x64>
 80187a2:	2d07      	cmp	r5, #7
 80187a4:	dc04      	bgt.n	80187b0 <__hexnan+0x64>
 80187a6:	462a      	mov	r2, r5
 80187a8:	4649      	mov	r1, r9
 80187aa:	4620      	mov	r0, r4
 80187ac:	f7ff ffa8 	bl	8018700 <L_shift>
 80187b0:	4544      	cmp	r4, r8
 80187b2:	d944      	bls.n	801883e <__hexnan+0xf2>
 80187b4:	2300      	movs	r3, #0
 80187b6:	f1a4 0904 	sub.w	r9, r4, #4
 80187ba:	f844 3c04 	str.w	r3, [r4, #-4]
 80187be:	f8cd b008 	str.w	fp, [sp, #8]
 80187c2:	464c      	mov	r4, r9
 80187c4:	461d      	mov	r5, r3
 80187c6:	9903      	ldr	r1, [sp, #12]
 80187c8:	e7d7      	b.n	801877a <__hexnan+0x2e>
 80187ca:	2a29      	cmp	r2, #41	; 0x29
 80187cc:	d14a      	bne.n	8018864 <__hexnan+0x118>
 80187ce:	3102      	adds	r1, #2
 80187d0:	f8ca 1000 	str.w	r1, [sl]
 80187d4:	f1bb 0f00 	cmp.w	fp, #0
 80187d8:	d044      	beq.n	8018864 <__hexnan+0x118>
 80187da:	454c      	cmp	r4, r9
 80187dc:	d206      	bcs.n	80187ec <__hexnan+0xa0>
 80187de:	2d07      	cmp	r5, #7
 80187e0:	dc04      	bgt.n	80187ec <__hexnan+0xa0>
 80187e2:	462a      	mov	r2, r5
 80187e4:	4649      	mov	r1, r9
 80187e6:	4620      	mov	r0, r4
 80187e8:	f7ff ff8a 	bl	8018700 <L_shift>
 80187ec:	4544      	cmp	r4, r8
 80187ee:	d928      	bls.n	8018842 <__hexnan+0xf6>
 80187f0:	4643      	mov	r3, r8
 80187f2:	f854 2b04 	ldr.w	r2, [r4], #4
 80187f6:	f843 2b04 	str.w	r2, [r3], #4
 80187fa:	42a6      	cmp	r6, r4
 80187fc:	d2f9      	bcs.n	80187f2 <__hexnan+0xa6>
 80187fe:	2200      	movs	r2, #0
 8018800:	f843 2b04 	str.w	r2, [r3], #4
 8018804:	429e      	cmp	r6, r3
 8018806:	d2fb      	bcs.n	8018800 <__hexnan+0xb4>
 8018808:	6833      	ldr	r3, [r6, #0]
 801880a:	b91b      	cbnz	r3, 8018814 <__hexnan+0xc8>
 801880c:	4546      	cmp	r6, r8
 801880e:	d127      	bne.n	8018860 <__hexnan+0x114>
 8018810:	2301      	movs	r3, #1
 8018812:	6033      	str	r3, [r6, #0]
 8018814:	2005      	movs	r0, #5
 8018816:	e026      	b.n	8018866 <__hexnan+0x11a>
 8018818:	3501      	adds	r5, #1
 801881a:	2d08      	cmp	r5, #8
 801881c:	f10b 0b01 	add.w	fp, fp, #1
 8018820:	dd06      	ble.n	8018830 <__hexnan+0xe4>
 8018822:	4544      	cmp	r4, r8
 8018824:	d9cf      	bls.n	80187c6 <__hexnan+0x7a>
 8018826:	2300      	movs	r3, #0
 8018828:	f844 3c04 	str.w	r3, [r4, #-4]
 801882c:	2501      	movs	r5, #1
 801882e:	3c04      	subs	r4, #4
 8018830:	6822      	ldr	r2, [r4, #0]
 8018832:	f000 000f 	and.w	r0, r0, #15
 8018836:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801883a:	6020      	str	r0, [r4, #0]
 801883c:	e7c3      	b.n	80187c6 <__hexnan+0x7a>
 801883e:	2508      	movs	r5, #8
 8018840:	e7c1      	b.n	80187c6 <__hexnan+0x7a>
 8018842:	9b01      	ldr	r3, [sp, #4]
 8018844:	2b00      	cmp	r3, #0
 8018846:	d0df      	beq.n	8018808 <__hexnan+0xbc>
 8018848:	f04f 32ff 	mov.w	r2, #4294967295
 801884c:	f1c3 0320 	rsb	r3, r3, #32
 8018850:	fa22 f303 	lsr.w	r3, r2, r3
 8018854:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8018858:	401a      	ands	r2, r3
 801885a:	f847 2c04 	str.w	r2, [r7, #-4]
 801885e:	e7d3      	b.n	8018808 <__hexnan+0xbc>
 8018860:	3e04      	subs	r6, #4
 8018862:	e7d1      	b.n	8018808 <__hexnan+0xbc>
 8018864:	2004      	movs	r0, #4
 8018866:	b007      	add	sp, #28
 8018868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801886c <__locale_ctype_ptr_l>:
 801886c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8018870:	4770      	bx	lr

08018872 <__localeconv_l>:
 8018872:	30f0      	adds	r0, #240	; 0xf0
 8018874:	4770      	bx	lr
	...

08018878 <_localeconv_r>:
 8018878:	4b04      	ldr	r3, [pc, #16]	; (801888c <_localeconv_r+0x14>)
 801887a:	681b      	ldr	r3, [r3, #0]
 801887c:	6a18      	ldr	r0, [r3, #32]
 801887e:	4b04      	ldr	r3, [pc, #16]	; (8018890 <_localeconv_r+0x18>)
 8018880:	2800      	cmp	r0, #0
 8018882:	bf08      	it	eq
 8018884:	4618      	moveq	r0, r3
 8018886:	30f0      	adds	r0, #240	; 0xf0
 8018888:	4770      	bx	lr
 801888a:	bf00      	nop
 801888c:	20000e0c 	.word	0x20000e0c
 8018890:	20000e70 	.word	0x20000e70

08018894 <__ascii_mbtowc>:
 8018894:	b082      	sub	sp, #8
 8018896:	b901      	cbnz	r1, 801889a <__ascii_mbtowc+0x6>
 8018898:	a901      	add	r1, sp, #4
 801889a:	b142      	cbz	r2, 80188ae <__ascii_mbtowc+0x1a>
 801889c:	b14b      	cbz	r3, 80188b2 <__ascii_mbtowc+0x1e>
 801889e:	7813      	ldrb	r3, [r2, #0]
 80188a0:	600b      	str	r3, [r1, #0]
 80188a2:	7812      	ldrb	r2, [r2, #0]
 80188a4:	1c10      	adds	r0, r2, #0
 80188a6:	bf18      	it	ne
 80188a8:	2001      	movne	r0, #1
 80188aa:	b002      	add	sp, #8
 80188ac:	4770      	bx	lr
 80188ae:	4610      	mov	r0, r2
 80188b0:	e7fb      	b.n	80188aa <__ascii_mbtowc+0x16>
 80188b2:	f06f 0001 	mvn.w	r0, #1
 80188b6:	e7f8      	b.n	80188aa <__ascii_mbtowc+0x16>

080188b8 <__malloc_lock>:
 80188b8:	4770      	bx	lr

080188ba <__malloc_unlock>:
 80188ba:	4770      	bx	lr

080188bc <_Balloc>:
 80188bc:	b570      	push	{r4, r5, r6, lr}
 80188be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80188c0:	4604      	mov	r4, r0
 80188c2:	460e      	mov	r6, r1
 80188c4:	b93d      	cbnz	r5, 80188d6 <_Balloc+0x1a>
 80188c6:	2010      	movs	r0, #16
 80188c8:	f7fd f82a 	bl	8015920 <malloc>
 80188cc:	6260      	str	r0, [r4, #36]	; 0x24
 80188ce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80188d2:	6005      	str	r5, [r0, #0]
 80188d4:	60c5      	str	r5, [r0, #12]
 80188d6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80188d8:	68eb      	ldr	r3, [r5, #12]
 80188da:	b183      	cbz	r3, 80188fe <_Balloc+0x42>
 80188dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80188de:	68db      	ldr	r3, [r3, #12]
 80188e0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80188e4:	b9b8      	cbnz	r0, 8018916 <_Balloc+0x5a>
 80188e6:	2101      	movs	r1, #1
 80188e8:	fa01 f506 	lsl.w	r5, r1, r6
 80188ec:	1d6a      	adds	r2, r5, #5
 80188ee:	0092      	lsls	r2, r2, #2
 80188f0:	4620      	mov	r0, r4
 80188f2:	f000 fbe2 	bl	80190ba <_calloc_r>
 80188f6:	b160      	cbz	r0, 8018912 <_Balloc+0x56>
 80188f8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80188fc:	e00e      	b.n	801891c <_Balloc+0x60>
 80188fe:	2221      	movs	r2, #33	; 0x21
 8018900:	2104      	movs	r1, #4
 8018902:	4620      	mov	r0, r4
 8018904:	f000 fbd9 	bl	80190ba <_calloc_r>
 8018908:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801890a:	60e8      	str	r0, [r5, #12]
 801890c:	68db      	ldr	r3, [r3, #12]
 801890e:	2b00      	cmp	r3, #0
 8018910:	d1e4      	bne.n	80188dc <_Balloc+0x20>
 8018912:	2000      	movs	r0, #0
 8018914:	bd70      	pop	{r4, r5, r6, pc}
 8018916:	6802      	ldr	r2, [r0, #0]
 8018918:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801891c:	2300      	movs	r3, #0
 801891e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018922:	e7f7      	b.n	8018914 <_Balloc+0x58>

08018924 <_Bfree>:
 8018924:	b570      	push	{r4, r5, r6, lr}
 8018926:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8018928:	4606      	mov	r6, r0
 801892a:	460d      	mov	r5, r1
 801892c:	b93c      	cbnz	r4, 801893e <_Bfree+0x1a>
 801892e:	2010      	movs	r0, #16
 8018930:	f7fc fff6 	bl	8015920 <malloc>
 8018934:	6270      	str	r0, [r6, #36]	; 0x24
 8018936:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801893a:	6004      	str	r4, [r0, #0]
 801893c:	60c4      	str	r4, [r0, #12]
 801893e:	b13d      	cbz	r5, 8018950 <_Bfree+0x2c>
 8018940:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8018942:	686a      	ldr	r2, [r5, #4]
 8018944:	68db      	ldr	r3, [r3, #12]
 8018946:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801894a:	6029      	str	r1, [r5, #0]
 801894c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8018950:	bd70      	pop	{r4, r5, r6, pc}

08018952 <__multadd>:
 8018952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018956:	690d      	ldr	r5, [r1, #16]
 8018958:	461f      	mov	r7, r3
 801895a:	4606      	mov	r6, r0
 801895c:	460c      	mov	r4, r1
 801895e:	f101 0c14 	add.w	ip, r1, #20
 8018962:	2300      	movs	r3, #0
 8018964:	f8dc 0000 	ldr.w	r0, [ip]
 8018968:	b281      	uxth	r1, r0
 801896a:	fb02 7101 	mla	r1, r2, r1, r7
 801896e:	0c0f      	lsrs	r7, r1, #16
 8018970:	0c00      	lsrs	r0, r0, #16
 8018972:	fb02 7000 	mla	r0, r2, r0, r7
 8018976:	b289      	uxth	r1, r1
 8018978:	3301      	adds	r3, #1
 801897a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801897e:	429d      	cmp	r5, r3
 8018980:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8018984:	f84c 1b04 	str.w	r1, [ip], #4
 8018988:	dcec      	bgt.n	8018964 <__multadd+0x12>
 801898a:	b1d7      	cbz	r7, 80189c2 <__multadd+0x70>
 801898c:	68a3      	ldr	r3, [r4, #8]
 801898e:	42ab      	cmp	r3, r5
 8018990:	dc12      	bgt.n	80189b8 <__multadd+0x66>
 8018992:	6861      	ldr	r1, [r4, #4]
 8018994:	4630      	mov	r0, r6
 8018996:	3101      	adds	r1, #1
 8018998:	f7ff ff90 	bl	80188bc <_Balloc>
 801899c:	6922      	ldr	r2, [r4, #16]
 801899e:	3202      	adds	r2, #2
 80189a0:	f104 010c 	add.w	r1, r4, #12
 80189a4:	4680      	mov	r8, r0
 80189a6:	0092      	lsls	r2, r2, #2
 80189a8:	300c      	adds	r0, #12
 80189aa:	f7fc ffc9 	bl	8015940 <memcpy>
 80189ae:	4621      	mov	r1, r4
 80189b0:	4630      	mov	r0, r6
 80189b2:	f7ff ffb7 	bl	8018924 <_Bfree>
 80189b6:	4644      	mov	r4, r8
 80189b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80189bc:	3501      	adds	r5, #1
 80189be:	615f      	str	r7, [r3, #20]
 80189c0:	6125      	str	r5, [r4, #16]
 80189c2:	4620      	mov	r0, r4
 80189c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080189c8 <__s2b>:
 80189c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80189cc:	460c      	mov	r4, r1
 80189ce:	4615      	mov	r5, r2
 80189d0:	461f      	mov	r7, r3
 80189d2:	2209      	movs	r2, #9
 80189d4:	3308      	adds	r3, #8
 80189d6:	4606      	mov	r6, r0
 80189d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80189dc:	2100      	movs	r1, #0
 80189de:	2201      	movs	r2, #1
 80189e0:	429a      	cmp	r2, r3
 80189e2:	db20      	blt.n	8018a26 <__s2b+0x5e>
 80189e4:	4630      	mov	r0, r6
 80189e6:	f7ff ff69 	bl	80188bc <_Balloc>
 80189ea:	9b08      	ldr	r3, [sp, #32]
 80189ec:	6143      	str	r3, [r0, #20]
 80189ee:	2d09      	cmp	r5, #9
 80189f0:	f04f 0301 	mov.w	r3, #1
 80189f4:	6103      	str	r3, [r0, #16]
 80189f6:	dd19      	ble.n	8018a2c <__s2b+0x64>
 80189f8:	f104 0809 	add.w	r8, r4, #9
 80189fc:	46c1      	mov	r9, r8
 80189fe:	442c      	add	r4, r5
 8018a00:	f819 3b01 	ldrb.w	r3, [r9], #1
 8018a04:	4601      	mov	r1, r0
 8018a06:	3b30      	subs	r3, #48	; 0x30
 8018a08:	220a      	movs	r2, #10
 8018a0a:	4630      	mov	r0, r6
 8018a0c:	f7ff ffa1 	bl	8018952 <__multadd>
 8018a10:	45a1      	cmp	r9, r4
 8018a12:	d1f5      	bne.n	8018a00 <__s2b+0x38>
 8018a14:	eb08 0405 	add.w	r4, r8, r5
 8018a18:	3c08      	subs	r4, #8
 8018a1a:	1b2d      	subs	r5, r5, r4
 8018a1c:	1963      	adds	r3, r4, r5
 8018a1e:	42bb      	cmp	r3, r7
 8018a20:	db07      	blt.n	8018a32 <__s2b+0x6a>
 8018a22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018a26:	0052      	lsls	r2, r2, #1
 8018a28:	3101      	adds	r1, #1
 8018a2a:	e7d9      	b.n	80189e0 <__s2b+0x18>
 8018a2c:	340a      	adds	r4, #10
 8018a2e:	2509      	movs	r5, #9
 8018a30:	e7f3      	b.n	8018a1a <__s2b+0x52>
 8018a32:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018a36:	4601      	mov	r1, r0
 8018a38:	3b30      	subs	r3, #48	; 0x30
 8018a3a:	220a      	movs	r2, #10
 8018a3c:	4630      	mov	r0, r6
 8018a3e:	f7ff ff88 	bl	8018952 <__multadd>
 8018a42:	e7eb      	b.n	8018a1c <__s2b+0x54>

08018a44 <__hi0bits>:
 8018a44:	0c02      	lsrs	r2, r0, #16
 8018a46:	0412      	lsls	r2, r2, #16
 8018a48:	4603      	mov	r3, r0
 8018a4a:	b9b2      	cbnz	r2, 8018a7a <__hi0bits+0x36>
 8018a4c:	0403      	lsls	r3, r0, #16
 8018a4e:	2010      	movs	r0, #16
 8018a50:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8018a54:	bf04      	itt	eq
 8018a56:	021b      	lsleq	r3, r3, #8
 8018a58:	3008      	addeq	r0, #8
 8018a5a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8018a5e:	bf04      	itt	eq
 8018a60:	011b      	lsleq	r3, r3, #4
 8018a62:	3004      	addeq	r0, #4
 8018a64:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8018a68:	bf04      	itt	eq
 8018a6a:	009b      	lsleq	r3, r3, #2
 8018a6c:	3002      	addeq	r0, #2
 8018a6e:	2b00      	cmp	r3, #0
 8018a70:	db06      	blt.n	8018a80 <__hi0bits+0x3c>
 8018a72:	005b      	lsls	r3, r3, #1
 8018a74:	d503      	bpl.n	8018a7e <__hi0bits+0x3a>
 8018a76:	3001      	adds	r0, #1
 8018a78:	4770      	bx	lr
 8018a7a:	2000      	movs	r0, #0
 8018a7c:	e7e8      	b.n	8018a50 <__hi0bits+0xc>
 8018a7e:	2020      	movs	r0, #32
 8018a80:	4770      	bx	lr

08018a82 <__lo0bits>:
 8018a82:	6803      	ldr	r3, [r0, #0]
 8018a84:	f013 0207 	ands.w	r2, r3, #7
 8018a88:	4601      	mov	r1, r0
 8018a8a:	d00b      	beq.n	8018aa4 <__lo0bits+0x22>
 8018a8c:	07da      	lsls	r2, r3, #31
 8018a8e:	d423      	bmi.n	8018ad8 <__lo0bits+0x56>
 8018a90:	0798      	lsls	r0, r3, #30
 8018a92:	bf49      	itett	mi
 8018a94:	085b      	lsrmi	r3, r3, #1
 8018a96:	089b      	lsrpl	r3, r3, #2
 8018a98:	2001      	movmi	r0, #1
 8018a9a:	600b      	strmi	r3, [r1, #0]
 8018a9c:	bf5c      	itt	pl
 8018a9e:	600b      	strpl	r3, [r1, #0]
 8018aa0:	2002      	movpl	r0, #2
 8018aa2:	4770      	bx	lr
 8018aa4:	b298      	uxth	r0, r3
 8018aa6:	b9a8      	cbnz	r0, 8018ad4 <__lo0bits+0x52>
 8018aa8:	0c1b      	lsrs	r3, r3, #16
 8018aaa:	2010      	movs	r0, #16
 8018aac:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018ab0:	bf04      	itt	eq
 8018ab2:	0a1b      	lsreq	r3, r3, #8
 8018ab4:	3008      	addeq	r0, #8
 8018ab6:	071a      	lsls	r2, r3, #28
 8018ab8:	bf04      	itt	eq
 8018aba:	091b      	lsreq	r3, r3, #4
 8018abc:	3004      	addeq	r0, #4
 8018abe:	079a      	lsls	r2, r3, #30
 8018ac0:	bf04      	itt	eq
 8018ac2:	089b      	lsreq	r3, r3, #2
 8018ac4:	3002      	addeq	r0, #2
 8018ac6:	07da      	lsls	r2, r3, #31
 8018ac8:	d402      	bmi.n	8018ad0 <__lo0bits+0x4e>
 8018aca:	085b      	lsrs	r3, r3, #1
 8018acc:	d006      	beq.n	8018adc <__lo0bits+0x5a>
 8018ace:	3001      	adds	r0, #1
 8018ad0:	600b      	str	r3, [r1, #0]
 8018ad2:	4770      	bx	lr
 8018ad4:	4610      	mov	r0, r2
 8018ad6:	e7e9      	b.n	8018aac <__lo0bits+0x2a>
 8018ad8:	2000      	movs	r0, #0
 8018ada:	4770      	bx	lr
 8018adc:	2020      	movs	r0, #32
 8018ade:	4770      	bx	lr

08018ae0 <__i2b>:
 8018ae0:	b510      	push	{r4, lr}
 8018ae2:	460c      	mov	r4, r1
 8018ae4:	2101      	movs	r1, #1
 8018ae6:	f7ff fee9 	bl	80188bc <_Balloc>
 8018aea:	2201      	movs	r2, #1
 8018aec:	6144      	str	r4, [r0, #20]
 8018aee:	6102      	str	r2, [r0, #16]
 8018af0:	bd10      	pop	{r4, pc}

08018af2 <__multiply>:
 8018af2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018af6:	4614      	mov	r4, r2
 8018af8:	690a      	ldr	r2, [r1, #16]
 8018afa:	6923      	ldr	r3, [r4, #16]
 8018afc:	429a      	cmp	r2, r3
 8018afe:	bfb8      	it	lt
 8018b00:	460b      	movlt	r3, r1
 8018b02:	4688      	mov	r8, r1
 8018b04:	bfbc      	itt	lt
 8018b06:	46a0      	movlt	r8, r4
 8018b08:	461c      	movlt	r4, r3
 8018b0a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8018b0e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8018b12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018b16:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018b1a:	eb07 0609 	add.w	r6, r7, r9
 8018b1e:	42b3      	cmp	r3, r6
 8018b20:	bfb8      	it	lt
 8018b22:	3101      	addlt	r1, #1
 8018b24:	f7ff feca 	bl	80188bc <_Balloc>
 8018b28:	f100 0514 	add.w	r5, r0, #20
 8018b2c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8018b30:	462b      	mov	r3, r5
 8018b32:	2200      	movs	r2, #0
 8018b34:	4573      	cmp	r3, lr
 8018b36:	d316      	bcc.n	8018b66 <__multiply+0x74>
 8018b38:	f104 0214 	add.w	r2, r4, #20
 8018b3c:	f108 0114 	add.w	r1, r8, #20
 8018b40:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8018b44:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8018b48:	9300      	str	r3, [sp, #0]
 8018b4a:	9b00      	ldr	r3, [sp, #0]
 8018b4c:	9201      	str	r2, [sp, #4]
 8018b4e:	4293      	cmp	r3, r2
 8018b50:	d80c      	bhi.n	8018b6c <__multiply+0x7a>
 8018b52:	2e00      	cmp	r6, #0
 8018b54:	dd03      	ble.n	8018b5e <__multiply+0x6c>
 8018b56:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8018b5a:	2b00      	cmp	r3, #0
 8018b5c:	d05d      	beq.n	8018c1a <__multiply+0x128>
 8018b5e:	6106      	str	r6, [r0, #16]
 8018b60:	b003      	add	sp, #12
 8018b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b66:	f843 2b04 	str.w	r2, [r3], #4
 8018b6a:	e7e3      	b.n	8018b34 <__multiply+0x42>
 8018b6c:	f8b2 b000 	ldrh.w	fp, [r2]
 8018b70:	f1bb 0f00 	cmp.w	fp, #0
 8018b74:	d023      	beq.n	8018bbe <__multiply+0xcc>
 8018b76:	4689      	mov	r9, r1
 8018b78:	46ac      	mov	ip, r5
 8018b7a:	f04f 0800 	mov.w	r8, #0
 8018b7e:	f859 4b04 	ldr.w	r4, [r9], #4
 8018b82:	f8dc a000 	ldr.w	sl, [ip]
 8018b86:	b2a3      	uxth	r3, r4
 8018b88:	fa1f fa8a 	uxth.w	sl, sl
 8018b8c:	fb0b a303 	mla	r3, fp, r3, sl
 8018b90:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8018b94:	f8dc 4000 	ldr.w	r4, [ip]
 8018b98:	4443      	add	r3, r8
 8018b9a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018b9e:	fb0b 840a 	mla	r4, fp, sl, r8
 8018ba2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8018ba6:	46e2      	mov	sl, ip
 8018ba8:	b29b      	uxth	r3, r3
 8018baa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018bae:	454f      	cmp	r7, r9
 8018bb0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018bb4:	f84a 3b04 	str.w	r3, [sl], #4
 8018bb8:	d82b      	bhi.n	8018c12 <__multiply+0x120>
 8018bba:	f8cc 8004 	str.w	r8, [ip, #4]
 8018bbe:	9b01      	ldr	r3, [sp, #4]
 8018bc0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8018bc4:	3204      	adds	r2, #4
 8018bc6:	f1ba 0f00 	cmp.w	sl, #0
 8018bca:	d020      	beq.n	8018c0e <__multiply+0x11c>
 8018bcc:	682b      	ldr	r3, [r5, #0]
 8018bce:	4689      	mov	r9, r1
 8018bd0:	46a8      	mov	r8, r5
 8018bd2:	f04f 0b00 	mov.w	fp, #0
 8018bd6:	f8b9 c000 	ldrh.w	ip, [r9]
 8018bda:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8018bde:	fb0a 440c 	mla	r4, sl, ip, r4
 8018be2:	445c      	add	r4, fp
 8018be4:	46c4      	mov	ip, r8
 8018be6:	b29b      	uxth	r3, r3
 8018be8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018bec:	f84c 3b04 	str.w	r3, [ip], #4
 8018bf0:	f859 3b04 	ldr.w	r3, [r9], #4
 8018bf4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8018bf8:	0c1b      	lsrs	r3, r3, #16
 8018bfa:	fb0a b303 	mla	r3, sl, r3, fp
 8018bfe:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8018c02:	454f      	cmp	r7, r9
 8018c04:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8018c08:	d805      	bhi.n	8018c16 <__multiply+0x124>
 8018c0a:	f8c8 3004 	str.w	r3, [r8, #4]
 8018c0e:	3504      	adds	r5, #4
 8018c10:	e79b      	b.n	8018b4a <__multiply+0x58>
 8018c12:	46d4      	mov	ip, sl
 8018c14:	e7b3      	b.n	8018b7e <__multiply+0x8c>
 8018c16:	46e0      	mov	r8, ip
 8018c18:	e7dd      	b.n	8018bd6 <__multiply+0xe4>
 8018c1a:	3e01      	subs	r6, #1
 8018c1c:	e799      	b.n	8018b52 <__multiply+0x60>
	...

08018c20 <__pow5mult>:
 8018c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018c24:	4615      	mov	r5, r2
 8018c26:	f012 0203 	ands.w	r2, r2, #3
 8018c2a:	4606      	mov	r6, r0
 8018c2c:	460f      	mov	r7, r1
 8018c2e:	d007      	beq.n	8018c40 <__pow5mult+0x20>
 8018c30:	3a01      	subs	r2, #1
 8018c32:	4c21      	ldr	r4, [pc, #132]	; (8018cb8 <__pow5mult+0x98>)
 8018c34:	2300      	movs	r3, #0
 8018c36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018c3a:	f7ff fe8a 	bl	8018952 <__multadd>
 8018c3e:	4607      	mov	r7, r0
 8018c40:	10ad      	asrs	r5, r5, #2
 8018c42:	d035      	beq.n	8018cb0 <__pow5mult+0x90>
 8018c44:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8018c46:	b93c      	cbnz	r4, 8018c58 <__pow5mult+0x38>
 8018c48:	2010      	movs	r0, #16
 8018c4a:	f7fc fe69 	bl	8015920 <malloc>
 8018c4e:	6270      	str	r0, [r6, #36]	; 0x24
 8018c50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018c54:	6004      	str	r4, [r0, #0]
 8018c56:	60c4      	str	r4, [r0, #12]
 8018c58:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018c5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018c60:	b94c      	cbnz	r4, 8018c76 <__pow5mult+0x56>
 8018c62:	f240 2171 	movw	r1, #625	; 0x271
 8018c66:	4630      	mov	r0, r6
 8018c68:	f7ff ff3a 	bl	8018ae0 <__i2b>
 8018c6c:	2300      	movs	r3, #0
 8018c6e:	f8c8 0008 	str.w	r0, [r8, #8]
 8018c72:	4604      	mov	r4, r0
 8018c74:	6003      	str	r3, [r0, #0]
 8018c76:	f04f 0800 	mov.w	r8, #0
 8018c7a:	07eb      	lsls	r3, r5, #31
 8018c7c:	d50a      	bpl.n	8018c94 <__pow5mult+0x74>
 8018c7e:	4639      	mov	r1, r7
 8018c80:	4622      	mov	r2, r4
 8018c82:	4630      	mov	r0, r6
 8018c84:	f7ff ff35 	bl	8018af2 <__multiply>
 8018c88:	4639      	mov	r1, r7
 8018c8a:	4681      	mov	r9, r0
 8018c8c:	4630      	mov	r0, r6
 8018c8e:	f7ff fe49 	bl	8018924 <_Bfree>
 8018c92:	464f      	mov	r7, r9
 8018c94:	106d      	asrs	r5, r5, #1
 8018c96:	d00b      	beq.n	8018cb0 <__pow5mult+0x90>
 8018c98:	6820      	ldr	r0, [r4, #0]
 8018c9a:	b938      	cbnz	r0, 8018cac <__pow5mult+0x8c>
 8018c9c:	4622      	mov	r2, r4
 8018c9e:	4621      	mov	r1, r4
 8018ca0:	4630      	mov	r0, r6
 8018ca2:	f7ff ff26 	bl	8018af2 <__multiply>
 8018ca6:	6020      	str	r0, [r4, #0]
 8018ca8:	f8c0 8000 	str.w	r8, [r0]
 8018cac:	4604      	mov	r4, r0
 8018cae:	e7e4      	b.n	8018c7a <__pow5mult+0x5a>
 8018cb0:	4638      	mov	r0, r7
 8018cb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018cb6:	bf00      	nop
 8018cb8:	0801b498 	.word	0x0801b498

08018cbc <__lshift>:
 8018cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018cc0:	460c      	mov	r4, r1
 8018cc2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018cc6:	6923      	ldr	r3, [r4, #16]
 8018cc8:	6849      	ldr	r1, [r1, #4]
 8018cca:	eb0a 0903 	add.w	r9, sl, r3
 8018cce:	68a3      	ldr	r3, [r4, #8]
 8018cd0:	4607      	mov	r7, r0
 8018cd2:	4616      	mov	r6, r2
 8018cd4:	f109 0501 	add.w	r5, r9, #1
 8018cd8:	42ab      	cmp	r3, r5
 8018cda:	db32      	blt.n	8018d42 <__lshift+0x86>
 8018cdc:	4638      	mov	r0, r7
 8018cde:	f7ff fded 	bl	80188bc <_Balloc>
 8018ce2:	2300      	movs	r3, #0
 8018ce4:	4680      	mov	r8, r0
 8018ce6:	f100 0114 	add.w	r1, r0, #20
 8018cea:	461a      	mov	r2, r3
 8018cec:	4553      	cmp	r3, sl
 8018cee:	db2b      	blt.n	8018d48 <__lshift+0x8c>
 8018cf0:	6920      	ldr	r0, [r4, #16]
 8018cf2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018cf6:	f104 0314 	add.w	r3, r4, #20
 8018cfa:	f016 021f 	ands.w	r2, r6, #31
 8018cfe:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018d02:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018d06:	d025      	beq.n	8018d54 <__lshift+0x98>
 8018d08:	f1c2 0e20 	rsb	lr, r2, #32
 8018d0c:	2000      	movs	r0, #0
 8018d0e:	681e      	ldr	r6, [r3, #0]
 8018d10:	468a      	mov	sl, r1
 8018d12:	4096      	lsls	r6, r2
 8018d14:	4330      	orrs	r0, r6
 8018d16:	f84a 0b04 	str.w	r0, [sl], #4
 8018d1a:	f853 0b04 	ldr.w	r0, [r3], #4
 8018d1e:	459c      	cmp	ip, r3
 8018d20:	fa20 f00e 	lsr.w	r0, r0, lr
 8018d24:	d814      	bhi.n	8018d50 <__lshift+0x94>
 8018d26:	6048      	str	r0, [r1, #4]
 8018d28:	b108      	cbz	r0, 8018d2e <__lshift+0x72>
 8018d2a:	f109 0502 	add.w	r5, r9, #2
 8018d2e:	3d01      	subs	r5, #1
 8018d30:	4638      	mov	r0, r7
 8018d32:	f8c8 5010 	str.w	r5, [r8, #16]
 8018d36:	4621      	mov	r1, r4
 8018d38:	f7ff fdf4 	bl	8018924 <_Bfree>
 8018d3c:	4640      	mov	r0, r8
 8018d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018d42:	3101      	adds	r1, #1
 8018d44:	005b      	lsls	r3, r3, #1
 8018d46:	e7c7      	b.n	8018cd8 <__lshift+0x1c>
 8018d48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8018d4c:	3301      	adds	r3, #1
 8018d4e:	e7cd      	b.n	8018cec <__lshift+0x30>
 8018d50:	4651      	mov	r1, sl
 8018d52:	e7dc      	b.n	8018d0e <__lshift+0x52>
 8018d54:	3904      	subs	r1, #4
 8018d56:	f853 2b04 	ldr.w	r2, [r3], #4
 8018d5a:	f841 2f04 	str.w	r2, [r1, #4]!
 8018d5e:	459c      	cmp	ip, r3
 8018d60:	d8f9      	bhi.n	8018d56 <__lshift+0x9a>
 8018d62:	e7e4      	b.n	8018d2e <__lshift+0x72>

08018d64 <__mcmp>:
 8018d64:	6903      	ldr	r3, [r0, #16]
 8018d66:	690a      	ldr	r2, [r1, #16]
 8018d68:	1a9b      	subs	r3, r3, r2
 8018d6a:	b530      	push	{r4, r5, lr}
 8018d6c:	d10c      	bne.n	8018d88 <__mcmp+0x24>
 8018d6e:	0092      	lsls	r2, r2, #2
 8018d70:	3014      	adds	r0, #20
 8018d72:	3114      	adds	r1, #20
 8018d74:	1884      	adds	r4, r0, r2
 8018d76:	4411      	add	r1, r2
 8018d78:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018d7c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018d80:	4295      	cmp	r5, r2
 8018d82:	d003      	beq.n	8018d8c <__mcmp+0x28>
 8018d84:	d305      	bcc.n	8018d92 <__mcmp+0x2e>
 8018d86:	2301      	movs	r3, #1
 8018d88:	4618      	mov	r0, r3
 8018d8a:	bd30      	pop	{r4, r5, pc}
 8018d8c:	42a0      	cmp	r0, r4
 8018d8e:	d3f3      	bcc.n	8018d78 <__mcmp+0x14>
 8018d90:	e7fa      	b.n	8018d88 <__mcmp+0x24>
 8018d92:	f04f 33ff 	mov.w	r3, #4294967295
 8018d96:	e7f7      	b.n	8018d88 <__mcmp+0x24>

08018d98 <__mdiff>:
 8018d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018d9c:	460d      	mov	r5, r1
 8018d9e:	4607      	mov	r7, r0
 8018da0:	4611      	mov	r1, r2
 8018da2:	4628      	mov	r0, r5
 8018da4:	4614      	mov	r4, r2
 8018da6:	f7ff ffdd 	bl	8018d64 <__mcmp>
 8018daa:	1e06      	subs	r6, r0, #0
 8018dac:	d108      	bne.n	8018dc0 <__mdiff+0x28>
 8018dae:	4631      	mov	r1, r6
 8018db0:	4638      	mov	r0, r7
 8018db2:	f7ff fd83 	bl	80188bc <_Balloc>
 8018db6:	2301      	movs	r3, #1
 8018db8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8018dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018dc0:	bfa4      	itt	ge
 8018dc2:	4623      	movge	r3, r4
 8018dc4:	462c      	movge	r4, r5
 8018dc6:	4638      	mov	r0, r7
 8018dc8:	6861      	ldr	r1, [r4, #4]
 8018dca:	bfa6      	itte	ge
 8018dcc:	461d      	movge	r5, r3
 8018dce:	2600      	movge	r6, #0
 8018dd0:	2601      	movlt	r6, #1
 8018dd2:	f7ff fd73 	bl	80188bc <_Balloc>
 8018dd6:	692b      	ldr	r3, [r5, #16]
 8018dd8:	60c6      	str	r6, [r0, #12]
 8018dda:	6926      	ldr	r6, [r4, #16]
 8018ddc:	f105 0914 	add.w	r9, r5, #20
 8018de0:	f104 0214 	add.w	r2, r4, #20
 8018de4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8018de8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8018dec:	f100 0514 	add.w	r5, r0, #20
 8018df0:	f04f 0e00 	mov.w	lr, #0
 8018df4:	f852 ab04 	ldr.w	sl, [r2], #4
 8018df8:	f859 4b04 	ldr.w	r4, [r9], #4
 8018dfc:	fa1e f18a 	uxtah	r1, lr, sl
 8018e00:	b2a3      	uxth	r3, r4
 8018e02:	1ac9      	subs	r1, r1, r3
 8018e04:	0c23      	lsrs	r3, r4, #16
 8018e06:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8018e0a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8018e0e:	b289      	uxth	r1, r1
 8018e10:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8018e14:	45c8      	cmp	r8, r9
 8018e16:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8018e1a:	4694      	mov	ip, r2
 8018e1c:	f845 3b04 	str.w	r3, [r5], #4
 8018e20:	d8e8      	bhi.n	8018df4 <__mdiff+0x5c>
 8018e22:	45bc      	cmp	ip, r7
 8018e24:	d304      	bcc.n	8018e30 <__mdiff+0x98>
 8018e26:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8018e2a:	b183      	cbz	r3, 8018e4e <__mdiff+0xb6>
 8018e2c:	6106      	str	r6, [r0, #16]
 8018e2e:	e7c5      	b.n	8018dbc <__mdiff+0x24>
 8018e30:	f85c 1b04 	ldr.w	r1, [ip], #4
 8018e34:	fa1e f381 	uxtah	r3, lr, r1
 8018e38:	141a      	asrs	r2, r3, #16
 8018e3a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018e3e:	b29b      	uxth	r3, r3
 8018e40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018e44:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8018e48:	f845 3b04 	str.w	r3, [r5], #4
 8018e4c:	e7e9      	b.n	8018e22 <__mdiff+0x8a>
 8018e4e:	3e01      	subs	r6, #1
 8018e50:	e7e9      	b.n	8018e26 <__mdiff+0x8e>
	...

08018e54 <__ulp>:
 8018e54:	4b12      	ldr	r3, [pc, #72]	; (8018ea0 <__ulp+0x4c>)
 8018e56:	ee10 2a90 	vmov	r2, s1
 8018e5a:	401a      	ands	r2, r3
 8018e5c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8018e60:	2b00      	cmp	r3, #0
 8018e62:	dd04      	ble.n	8018e6e <__ulp+0x1a>
 8018e64:	2000      	movs	r0, #0
 8018e66:	4619      	mov	r1, r3
 8018e68:	ec41 0b10 	vmov	d0, r0, r1
 8018e6c:	4770      	bx	lr
 8018e6e:	425b      	negs	r3, r3
 8018e70:	151b      	asrs	r3, r3, #20
 8018e72:	2b13      	cmp	r3, #19
 8018e74:	f04f 0000 	mov.w	r0, #0
 8018e78:	f04f 0100 	mov.w	r1, #0
 8018e7c:	dc04      	bgt.n	8018e88 <__ulp+0x34>
 8018e7e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8018e82:	fa42 f103 	asr.w	r1, r2, r3
 8018e86:	e7ef      	b.n	8018e68 <__ulp+0x14>
 8018e88:	3b14      	subs	r3, #20
 8018e8a:	2b1e      	cmp	r3, #30
 8018e8c:	f04f 0201 	mov.w	r2, #1
 8018e90:	bfda      	itte	le
 8018e92:	f1c3 031f 	rsble	r3, r3, #31
 8018e96:	fa02 f303 	lslle.w	r3, r2, r3
 8018e9a:	4613      	movgt	r3, r2
 8018e9c:	4618      	mov	r0, r3
 8018e9e:	e7e3      	b.n	8018e68 <__ulp+0x14>
 8018ea0:	7ff00000 	.word	0x7ff00000

08018ea4 <__b2d>:
 8018ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ea6:	6905      	ldr	r5, [r0, #16]
 8018ea8:	f100 0714 	add.w	r7, r0, #20
 8018eac:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8018eb0:	1f2e      	subs	r6, r5, #4
 8018eb2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8018eb6:	4620      	mov	r0, r4
 8018eb8:	f7ff fdc4 	bl	8018a44 <__hi0bits>
 8018ebc:	f1c0 0320 	rsb	r3, r0, #32
 8018ec0:	280a      	cmp	r0, #10
 8018ec2:	600b      	str	r3, [r1, #0]
 8018ec4:	f8df c074 	ldr.w	ip, [pc, #116]	; 8018f3c <__b2d+0x98>
 8018ec8:	dc14      	bgt.n	8018ef4 <__b2d+0x50>
 8018eca:	f1c0 0e0b 	rsb	lr, r0, #11
 8018ece:	fa24 f10e 	lsr.w	r1, r4, lr
 8018ed2:	42b7      	cmp	r7, r6
 8018ed4:	ea41 030c 	orr.w	r3, r1, ip
 8018ed8:	bf34      	ite	cc
 8018eda:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018ede:	2100      	movcs	r1, #0
 8018ee0:	3015      	adds	r0, #21
 8018ee2:	fa04 f000 	lsl.w	r0, r4, r0
 8018ee6:	fa21 f10e 	lsr.w	r1, r1, lr
 8018eea:	ea40 0201 	orr.w	r2, r0, r1
 8018eee:	ec43 2b10 	vmov	d0, r2, r3
 8018ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018ef4:	42b7      	cmp	r7, r6
 8018ef6:	bf3a      	itte	cc
 8018ef8:	f1a5 0608 	subcc.w	r6, r5, #8
 8018efc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018f00:	2100      	movcs	r1, #0
 8018f02:	380b      	subs	r0, #11
 8018f04:	d015      	beq.n	8018f32 <__b2d+0x8e>
 8018f06:	4084      	lsls	r4, r0
 8018f08:	f1c0 0520 	rsb	r5, r0, #32
 8018f0c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8018f10:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8018f14:	42be      	cmp	r6, r7
 8018f16:	fa21 fc05 	lsr.w	ip, r1, r5
 8018f1a:	ea44 030c 	orr.w	r3, r4, ip
 8018f1e:	bf8c      	ite	hi
 8018f20:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8018f24:	2400      	movls	r4, #0
 8018f26:	fa01 f000 	lsl.w	r0, r1, r0
 8018f2a:	40ec      	lsrs	r4, r5
 8018f2c:	ea40 0204 	orr.w	r2, r0, r4
 8018f30:	e7dd      	b.n	8018eee <__b2d+0x4a>
 8018f32:	ea44 030c 	orr.w	r3, r4, ip
 8018f36:	460a      	mov	r2, r1
 8018f38:	e7d9      	b.n	8018eee <__b2d+0x4a>
 8018f3a:	bf00      	nop
 8018f3c:	3ff00000 	.word	0x3ff00000

08018f40 <__d2b>:
 8018f40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018f44:	460e      	mov	r6, r1
 8018f46:	2101      	movs	r1, #1
 8018f48:	ec59 8b10 	vmov	r8, r9, d0
 8018f4c:	4615      	mov	r5, r2
 8018f4e:	f7ff fcb5 	bl	80188bc <_Balloc>
 8018f52:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8018f56:	4607      	mov	r7, r0
 8018f58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018f5c:	bb34      	cbnz	r4, 8018fac <__d2b+0x6c>
 8018f5e:	9301      	str	r3, [sp, #4]
 8018f60:	f1b8 0300 	subs.w	r3, r8, #0
 8018f64:	d027      	beq.n	8018fb6 <__d2b+0x76>
 8018f66:	a802      	add	r0, sp, #8
 8018f68:	f840 3d08 	str.w	r3, [r0, #-8]!
 8018f6c:	f7ff fd89 	bl	8018a82 <__lo0bits>
 8018f70:	9900      	ldr	r1, [sp, #0]
 8018f72:	b1f0      	cbz	r0, 8018fb2 <__d2b+0x72>
 8018f74:	9a01      	ldr	r2, [sp, #4]
 8018f76:	f1c0 0320 	rsb	r3, r0, #32
 8018f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8018f7e:	430b      	orrs	r3, r1
 8018f80:	40c2      	lsrs	r2, r0
 8018f82:	617b      	str	r3, [r7, #20]
 8018f84:	9201      	str	r2, [sp, #4]
 8018f86:	9b01      	ldr	r3, [sp, #4]
 8018f88:	61bb      	str	r3, [r7, #24]
 8018f8a:	2b00      	cmp	r3, #0
 8018f8c:	bf14      	ite	ne
 8018f8e:	2102      	movne	r1, #2
 8018f90:	2101      	moveq	r1, #1
 8018f92:	6139      	str	r1, [r7, #16]
 8018f94:	b1c4      	cbz	r4, 8018fc8 <__d2b+0x88>
 8018f96:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8018f9a:	4404      	add	r4, r0
 8018f9c:	6034      	str	r4, [r6, #0]
 8018f9e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018fa2:	6028      	str	r0, [r5, #0]
 8018fa4:	4638      	mov	r0, r7
 8018fa6:	b003      	add	sp, #12
 8018fa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018fac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018fb0:	e7d5      	b.n	8018f5e <__d2b+0x1e>
 8018fb2:	6179      	str	r1, [r7, #20]
 8018fb4:	e7e7      	b.n	8018f86 <__d2b+0x46>
 8018fb6:	a801      	add	r0, sp, #4
 8018fb8:	f7ff fd63 	bl	8018a82 <__lo0bits>
 8018fbc:	9b01      	ldr	r3, [sp, #4]
 8018fbe:	617b      	str	r3, [r7, #20]
 8018fc0:	2101      	movs	r1, #1
 8018fc2:	6139      	str	r1, [r7, #16]
 8018fc4:	3020      	adds	r0, #32
 8018fc6:	e7e5      	b.n	8018f94 <__d2b+0x54>
 8018fc8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8018fcc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018fd0:	6030      	str	r0, [r6, #0]
 8018fd2:	6918      	ldr	r0, [r3, #16]
 8018fd4:	f7ff fd36 	bl	8018a44 <__hi0bits>
 8018fd8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8018fdc:	e7e1      	b.n	8018fa2 <__d2b+0x62>

08018fde <__ratio>:
 8018fde:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fe2:	4688      	mov	r8, r1
 8018fe4:	4669      	mov	r1, sp
 8018fe6:	4681      	mov	r9, r0
 8018fe8:	f7ff ff5c 	bl	8018ea4 <__b2d>
 8018fec:	a901      	add	r1, sp, #4
 8018fee:	4640      	mov	r0, r8
 8018ff0:	ec57 6b10 	vmov	r6, r7, d0
 8018ff4:	f7ff ff56 	bl	8018ea4 <__b2d>
 8018ff8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018ffc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8019000:	eba3 0c02 	sub.w	ip, r3, r2
 8019004:	e9dd 3200 	ldrd	r3, r2, [sp]
 8019008:	1a9b      	subs	r3, r3, r2
 801900a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801900e:	ec5b ab10 	vmov	sl, fp, d0
 8019012:	2b00      	cmp	r3, #0
 8019014:	bfce      	itee	gt
 8019016:	463a      	movgt	r2, r7
 8019018:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801901c:	465a      	movle	r2, fp
 801901e:	4659      	mov	r1, fp
 8019020:	463d      	mov	r5, r7
 8019022:	bfd4      	ite	le
 8019024:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8019028:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 801902c:	4630      	mov	r0, r6
 801902e:	ee10 2a10 	vmov	r2, s0
 8019032:	460b      	mov	r3, r1
 8019034:	4629      	mov	r1, r5
 8019036:	f7e7 fc09 	bl	800084c <__aeabi_ddiv>
 801903a:	ec41 0b10 	vmov	d0, r0, r1
 801903e:	b003      	add	sp, #12
 8019040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019044 <__copybits>:
 8019044:	3901      	subs	r1, #1
 8019046:	b510      	push	{r4, lr}
 8019048:	1149      	asrs	r1, r1, #5
 801904a:	6914      	ldr	r4, [r2, #16]
 801904c:	3101      	adds	r1, #1
 801904e:	f102 0314 	add.w	r3, r2, #20
 8019052:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019056:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801905a:	42a3      	cmp	r3, r4
 801905c:	4602      	mov	r2, r0
 801905e:	d303      	bcc.n	8019068 <__copybits+0x24>
 8019060:	2300      	movs	r3, #0
 8019062:	428a      	cmp	r2, r1
 8019064:	d305      	bcc.n	8019072 <__copybits+0x2e>
 8019066:	bd10      	pop	{r4, pc}
 8019068:	f853 2b04 	ldr.w	r2, [r3], #4
 801906c:	f840 2b04 	str.w	r2, [r0], #4
 8019070:	e7f3      	b.n	801905a <__copybits+0x16>
 8019072:	f842 3b04 	str.w	r3, [r2], #4
 8019076:	e7f4      	b.n	8019062 <__copybits+0x1e>

08019078 <__any_on>:
 8019078:	f100 0214 	add.w	r2, r0, #20
 801907c:	6900      	ldr	r0, [r0, #16]
 801907e:	114b      	asrs	r3, r1, #5
 8019080:	4298      	cmp	r0, r3
 8019082:	b510      	push	{r4, lr}
 8019084:	db11      	blt.n	80190aa <__any_on+0x32>
 8019086:	dd0a      	ble.n	801909e <__any_on+0x26>
 8019088:	f011 011f 	ands.w	r1, r1, #31
 801908c:	d007      	beq.n	801909e <__any_on+0x26>
 801908e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8019092:	fa24 f001 	lsr.w	r0, r4, r1
 8019096:	fa00 f101 	lsl.w	r1, r0, r1
 801909a:	428c      	cmp	r4, r1
 801909c:	d10b      	bne.n	80190b6 <__any_on+0x3e>
 801909e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80190a2:	4293      	cmp	r3, r2
 80190a4:	d803      	bhi.n	80190ae <__any_on+0x36>
 80190a6:	2000      	movs	r0, #0
 80190a8:	bd10      	pop	{r4, pc}
 80190aa:	4603      	mov	r3, r0
 80190ac:	e7f7      	b.n	801909e <__any_on+0x26>
 80190ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80190b2:	2900      	cmp	r1, #0
 80190b4:	d0f5      	beq.n	80190a2 <__any_on+0x2a>
 80190b6:	2001      	movs	r0, #1
 80190b8:	e7f6      	b.n	80190a8 <__any_on+0x30>

080190ba <_calloc_r>:
 80190ba:	b538      	push	{r3, r4, r5, lr}
 80190bc:	fb02 f401 	mul.w	r4, r2, r1
 80190c0:	4621      	mov	r1, r4
 80190c2:	f7fc fcb7 	bl	8015a34 <_malloc_r>
 80190c6:	4605      	mov	r5, r0
 80190c8:	b118      	cbz	r0, 80190d2 <_calloc_r+0x18>
 80190ca:	4622      	mov	r2, r4
 80190cc:	2100      	movs	r1, #0
 80190ce:	f7fc fc5b 	bl	8015988 <memset>
 80190d2:	4628      	mov	r0, r5
 80190d4:	bd38      	pop	{r3, r4, r5, pc}

080190d6 <__ssputs_r>:
 80190d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80190da:	688e      	ldr	r6, [r1, #8]
 80190dc:	429e      	cmp	r6, r3
 80190de:	4682      	mov	sl, r0
 80190e0:	460c      	mov	r4, r1
 80190e2:	4690      	mov	r8, r2
 80190e4:	4699      	mov	r9, r3
 80190e6:	d837      	bhi.n	8019158 <__ssputs_r+0x82>
 80190e8:	898a      	ldrh	r2, [r1, #12]
 80190ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80190ee:	d031      	beq.n	8019154 <__ssputs_r+0x7e>
 80190f0:	6825      	ldr	r5, [r4, #0]
 80190f2:	6909      	ldr	r1, [r1, #16]
 80190f4:	1a6f      	subs	r7, r5, r1
 80190f6:	6965      	ldr	r5, [r4, #20]
 80190f8:	2302      	movs	r3, #2
 80190fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80190fe:	fb95 f5f3 	sdiv	r5, r5, r3
 8019102:	f109 0301 	add.w	r3, r9, #1
 8019106:	443b      	add	r3, r7
 8019108:	429d      	cmp	r5, r3
 801910a:	bf38      	it	cc
 801910c:	461d      	movcc	r5, r3
 801910e:	0553      	lsls	r3, r2, #21
 8019110:	d530      	bpl.n	8019174 <__ssputs_r+0x9e>
 8019112:	4629      	mov	r1, r5
 8019114:	f7fc fc8e 	bl	8015a34 <_malloc_r>
 8019118:	4606      	mov	r6, r0
 801911a:	b950      	cbnz	r0, 8019132 <__ssputs_r+0x5c>
 801911c:	230c      	movs	r3, #12
 801911e:	f8ca 3000 	str.w	r3, [sl]
 8019122:	89a3      	ldrh	r3, [r4, #12]
 8019124:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019128:	81a3      	strh	r3, [r4, #12]
 801912a:	f04f 30ff 	mov.w	r0, #4294967295
 801912e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019132:	463a      	mov	r2, r7
 8019134:	6921      	ldr	r1, [r4, #16]
 8019136:	f7fc fc03 	bl	8015940 <memcpy>
 801913a:	89a3      	ldrh	r3, [r4, #12]
 801913c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019144:	81a3      	strh	r3, [r4, #12]
 8019146:	6126      	str	r6, [r4, #16]
 8019148:	6165      	str	r5, [r4, #20]
 801914a:	443e      	add	r6, r7
 801914c:	1bed      	subs	r5, r5, r7
 801914e:	6026      	str	r6, [r4, #0]
 8019150:	60a5      	str	r5, [r4, #8]
 8019152:	464e      	mov	r6, r9
 8019154:	454e      	cmp	r6, r9
 8019156:	d900      	bls.n	801915a <__ssputs_r+0x84>
 8019158:	464e      	mov	r6, r9
 801915a:	4632      	mov	r2, r6
 801915c:	4641      	mov	r1, r8
 801915e:	6820      	ldr	r0, [r4, #0]
 8019160:	f7fc fbf9 	bl	8015956 <memmove>
 8019164:	68a3      	ldr	r3, [r4, #8]
 8019166:	1b9b      	subs	r3, r3, r6
 8019168:	60a3      	str	r3, [r4, #8]
 801916a:	6823      	ldr	r3, [r4, #0]
 801916c:	441e      	add	r6, r3
 801916e:	6026      	str	r6, [r4, #0]
 8019170:	2000      	movs	r0, #0
 8019172:	e7dc      	b.n	801912e <__ssputs_r+0x58>
 8019174:	462a      	mov	r2, r5
 8019176:	f000 f920 	bl	80193ba <_realloc_r>
 801917a:	4606      	mov	r6, r0
 801917c:	2800      	cmp	r0, #0
 801917e:	d1e2      	bne.n	8019146 <__ssputs_r+0x70>
 8019180:	6921      	ldr	r1, [r4, #16]
 8019182:	4650      	mov	r0, sl
 8019184:	f7fc fc08 	bl	8015998 <_free_r>
 8019188:	e7c8      	b.n	801911c <__ssputs_r+0x46>
	...

0801918c <_svfiprintf_r>:
 801918c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019190:	461d      	mov	r5, r3
 8019192:	898b      	ldrh	r3, [r1, #12]
 8019194:	061f      	lsls	r7, r3, #24
 8019196:	b09d      	sub	sp, #116	; 0x74
 8019198:	4680      	mov	r8, r0
 801919a:	460c      	mov	r4, r1
 801919c:	4616      	mov	r6, r2
 801919e:	d50f      	bpl.n	80191c0 <_svfiprintf_r+0x34>
 80191a0:	690b      	ldr	r3, [r1, #16]
 80191a2:	b96b      	cbnz	r3, 80191c0 <_svfiprintf_r+0x34>
 80191a4:	2140      	movs	r1, #64	; 0x40
 80191a6:	f7fc fc45 	bl	8015a34 <_malloc_r>
 80191aa:	6020      	str	r0, [r4, #0]
 80191ac:	6120      	str	r0, [r4, #16]
 80191ae:	b928      	cbnz	r0, 80191bc <_svfiprintf_r+0x30>
 80191b0:	230c      	movs	r3, #12
 80191b2:	f8c8 3000 	str.w	r3, [r8]
 80191b6:	f04f 30ff 	mov.w	r0, #4294967295
 80191ba:	e0c8      	b.n	801934e <_svfiprintf_r+0x1c2>
 80191bc:	2340      	movs	r3, #64	; 0x40
 80191be:	6163      	str	r3, [r4, #20]
 80191c0:	2300      	movs	r3, #0
 80191c2:	9309      	str	r3, [sp, #36]	; 0x24
 80191c4:	2320      	movs	r3, #32
 80191c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80191ca:	2330      	movs	r3, #48	; 0x30
 80191cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80191d0:	9503      	str	r5, [sp, #12]
 80191d2:	f04f 0b01 	mov.w	fp, #1
 80191d6:	4637      	mov	r7, r6
 80191d8:	463d      	mov	r5, r7
 80191da:	f815 3b01 	ldrb.w	r3, [r5], #1
 80191de:	b10b      	cbz	r3, 80191e4 <_svfiprintf_r+0x58>
 80191e0:	2b25      	cmp	r3, #37	; 0x25
 80191e2:	d13e      	bne.n	8019262 <_svfiprintf_r+0xd6>
 80191e4:	ebb7 0a06 	subs.w	sl, r7, r6
 80191e8:	d00b      	beq.n	8019202 <_svfiprintf_r+0x76>
 80191ea:	4653      	mov	r3, sl
 80191ec:	4632      	mov	r2, r6
 80191ee:	4621      	mov	r1, r4
 80191f0:	4640      	mov	r0, r8
 80191f2:	f7ff ff70 	bl	80190d6 <__ssputs_r>
 80191f6:	3001      	adds	r0, #1
 80191f8:	f000 80a4 	beq.w	8019344 <_svfiprintf_r+0x1b8>
 80191fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80191fe:	4453      	add	r3, sl
 8019200:	9309      	str	r3, [sp, #36]	; 0x24
 8019202:	783b      	ldrb	r3, [r7, #0]
 8019204:	2b00      	cmp	r3, #0
 8019206:	f000 809d 	beq.w	8019344 <_svfiprintf_r+0x1b8>
 801920a:	2300      	movs	r3, #0
 801920c:	f04f 32ff 	mov.w	r2, #4294967295
 8019210:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019214:	9304      	str	r3, [sp, #16]
 8019216:	9307      	str	r3, [sp, #28]
 8019218:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801921c:	931a      	str	r3, [sp, #104]	; 0x68
 801921e:	462f      	mov	r7, r5
 8019220:	2205      	movs	r2, #5
 8019222:	f817 1b01 	ldrb.w	r1, [r7], #1
 8019226:	4850      	ldr	r0, [pc, #320]	; (8019368 <_svfiprintf_r+0x1dc>)
 8019228:	f7e6 ffda 	bl	80001e0 <memchr>
 801922c:	9b04      	ldr	r3, [sp, #16]
 801922e:	b9d0      	cbnz	r0, 8019266 <_svfiprintf_r+0xda>
 8019230:	06d9      	lsls	r1, r3, #27
 8019232:	bf44      	itt	mi
 8019234:	2220      	movmi	r2, #32
 8019236:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801923a:	071a      	lsls	r2, r3, #28
 801923c:	bf44      	itt	mi
 801923e:	222b      	movmi	r2, #43	; 0x2b
 8019240:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019244:	782a      	ldrb	r2, [r5, #0]
 8019246:	2a2a      	cmp	r2, #42	; 0x2a
 8019248:	d015      	beq.n	8019276 <_svfiprintf_r+0xea>
 801924a:	9a07      	ldr	r2, [sp, #28]
 801924c:	462f      	mov	r7, r5
 801924e:	2000      	movs	r0, #0
 8019250:	250a      	movs	r5, #10
 8019252:	4639      	mov	r1, r7
 8019254:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019258:	3b30      	subs	r3, #48	; 0x30
 801925a:	2b09      	cmp	r3, #9
 801925c:	d94d      	bls.n	80192fa <_svfiprintf_r+0x16e>
 801925e:	b1b8      	cbz	r0, 8019290 <_svfiprintf_r+0x104>
 8019260:	e00f      	b.n	8019282 <_svfiprintf_r+0xf6>
 8019262:	462f      	mov	r7, r5
 8019264:	e7b8      	b.n	80191d8 <_svfiprintf_r+0x4c>
 8019266:	4a40      	ldr	r2, [pc, #256]	; (8019368 <_svfiprintf_r+0x1dc>)
 8019268:	1a80      	subs	r0, r0, r2
 801926a:	fa0b f000 	lsl.w	r0, fp, r0
 801926e:	4318      	orrs	r0, r3
 8019270:	9004      	str	r0, [sp, #16]
 8019272:	463d      	mov	r5, r7
 8019274:	e7d3      	b.n	801921e <_svfiprintf_r+0x92>
 8019276:	9a03      	ldr	r2, [sp, #12]
 8019278:	1d11      	adds	r1, r2, #4
 801927a:	6812      	ldr	r2, [r2, #0]
 801927c:	9103      	str	r1, [sp, #12]
 801927e:	2a00      	cmp	r2, #0
 8019280:	db01      	blt.n	8019286 <_svfiprintf_r+0xfa>
 8019282:	9207      	str	r2, [sp, #28]
 8019284:	e004      	b.n	8019290 <_svfiprintf_r+0x104>
 8019286:	4252      	negs	r2, r2
 8019288:	f043 0302 	orr.w	r3, r3, #2
 801928c:	9207      	str	r2, [sp, #28]
 801928e:	9304      	str	r3, [sp, #16]
 8019290:	783b      	ldrb	r3, [r7, #0]
 8019292:	2b2e      	cmp	r3, #46	; 0x2e
 8019294:	d10c      	bne.n	80192b0 <_svfiprintf_r+0x124>
 8019296:	787b      	ldrb	r3, [r7, #1]
 8019298:	2b2a      	cmp	r3, #42	; 0x2a
 801929a:	d133      	bne.n	8019304 <_svfiprintf_r+0x178>
 801929c:	9b03      	ldr	r3, [sp, #12]
 801929e:	1d1a      	adds	r2, r3, #4
 80192a0:	681b      	ldr	r3, [r3, #0]
 80192a2:	9203      	str	r2, [sp, #12]
 80192a4:	2b00      	cmp	r3, #0
 80192a6:	bfb8      	it	lt
 80192a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80192ac:	3702      	adds	r7, #2
 80192ae:	9305      	str	r3, [sp, #20]
 80192b0:	4d2e      	ldr	r5, [pc, #184]	; (801936c <_svfiprintf_r+0x1e0>)
 80192b2:	7839      	ldrb	r1, [r7, #0]
 80192b4:	2203      	movs	r2, #3
 80192b6:	4628      	mov	r0, r5
 80192b8:	f7e6 ff92 	bl	80001e0 <memchr>
 80192bc:	b138      	cbz	r0, 80192ce <_svfiprintf_r+0x142>
 80192be:	2340      	movs	r3, #64	; 0x40
 80192c0:	1b40      	subs	r0, r0, r5
 80192c2:	fa03 f000 	lsl.w	r0, r3, r0
 80192c6:	9b04      	ldr	r3, [sp, #16]
 80192c8:	4303      	orrs	r3, r0
 80192ca:	3701      	adds	r7, #1
 80192cc:	9304      	str	r3, [sp, #16]
 80192ce:	7839      	ldrb	r1, [r7, #0]
 80192d0:	4827      	ldr	r0, [pc, #156]	; (8019370 <_svfiprintf_r+0x1e4>)
 80192d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80192d6:	2206      	movs	r2, #6
 80192d8:	1c7e      	adds	r6, r7, #1
 80192da:	f7e6 ff81 	bl	80001e0 <memchr>
 80192de:	2800      	cmp	r0, #0
 80192e0:	d038      	beq.n	8019354 <_svfiprintf_r+0x1c8>
 80192e2:	4b24      	ldr	r3, [pc, #144]	; (8019374 <_svfiprintf_r+0x1e8>)
 80192e4:	bb13      	cbnz	r3, 801932c <_svfiprintf_r+0x1a0>
 80192e6:	9b03      	ldr	r3, [sp, #12]
 80192e8:	3307      	adds	r3, #7
 80192ea:	f023 0307 	bic.w	r3, r3, #7
 80192ee:	3308      	adds	r3, #8
 80192f0:	9303      	str	r3, [sp, #12]
 80192f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80192f4:	444b      	add	r3, r9
 80192f6:	9309      	str	r3, [sp, #36]	; 0x24
 80192f8:	e76d      	b.n	80191d6 <_svfiprintf_r+0x4a>
 80192fa:	fb05 3202 	mla	r2, r5, r2, r3
 80192fe:	2001      	movs	r0, #1
 8019300:	460f      	mov	r7, r1
 8019302:	e7a6      	b.n	8019252 <_svfiprintf_r+0xc6>
 8019304:	2300      	movs	r3, #0
 8019306:	3701      	adds	r7, #1
 8019308:	9305      	str	r3, [sp, #20]
 801930a:	4619      	mov	r1, r3
 801930c:	250a      	movs	r5, #10
 801930e:	4638      	mov	r0, r7
 8019310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019314:	3a30      	subs	r2, #48	; 0x30
 8019316:	2a09      	cmp	r2, #9
 8019318:	d903      	bls.n	8019322 <_svfiprintf_r+0x196>
 801931a:	2b00      	cmp	r3, #0
 801931c:	d0c8      	beq.n	80192b0 <_svfiprintf_r+0x124>
 801931e:	9105      	str	r1, [sp, #20]
 8019320:	e7c6      	b.n	80192b0 <_svfiprintf_r+0x124>
 8019322:	fb05 2101 	mla	r1, r5, r1, r2
 8019326:	2301      	movs	r3, #1
 8019328:	4607      	mov	r7, r0
 801932a:	e7f0      	b.n	801930e <_svfiprintf_r+0x182>
 801932c:	ab03      	add	r3, sp, #12
 801932e:	9300      	str	r3, [sp, #0]
 8019330:	4622      	mov	r2, r4
 8019332:	4b11      	ldr	r3, [pc, #68]	; (8019378 <_svfiprintf_r+0x1ec>)
 8019334:	a904      	add	r1, sp, #16
 8019336:	4640      	mov	r0, r8
 8019338:	f7fc fc6a 	bl	8015c10 <_printf_float>
 801933c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8019340:	4681      	mov	r9, r0
 8019342:	d1d6      	bne.n	80192f2 <_svfiprintf_r+0x166>
 8019344:	89a3      	ldrh	r3, [r4, #12]
 8019346:	065b      	lsls	r3, r3, #25
 8019348:	f53f af35 	bmi.w	80191b6 <_svfiprintf_r+0x2a>
 801934c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801934e:	b01d      	add	sp, #116	; 0x74
 8019350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019354:	ab03      	add	r3, sp, #12
 8019356:	9300      	str	r3, [sp, #0]
 8019358:	4622      	mov	r2, r4
 801935a:	4b07      	ldr	r3, [pc, #28]	; (8019378 <_svfiprintf_r+0x1ec>)
 801935c:	a904      	add	r1, sp, #16
 801935e:	4640      	mov	r0, r8
 8019360:	f7fc ff0c 	bl	801617c <_printf_i>
 8019364:	e7ea      	b.n	801933c <_svfiprintf_r+0x1b0>
 8019366:	bf00      	nop
 8019368:	0801b4a4 	.word	0x0801b4a4
 801936c:	0801b4aa 	.word	0x0801b4aa
 8019370:	0801b4ae 	.word	0x0801b4ae
 8019374:	08015c11 	.word	0x08015c11
 8019378:	080190d7 	.word	0x080190d7

0801937c <strncmp>:
 801937c:	b510      	push	{r4, lr}
 801937e:	b16a      	cbz	r2, 801939c <strncmp+0x20>
 8019380:	3901      	subs	r1, #1
 8019382:	1884      	adds	r4, r0, r2
 8019384:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019388:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801938c:	4293      	cmp	r3, r2
 801938e:	d103      	bne.n	8019398 <strncmp+0x1c>
 8019390:	42a0      	cmp	r0, r4
 8019392:	d001      	beq.n	8019398 <strncmp+0x1c>
 8019394:	2b00      	cmp	r3, #0
 8019396:	d1f5      	bne.n	8019384 <strncmp+0x8>
 8019398:	1a98      	subs	r0, r3, r2
 801939a:	bd10      	pop	{r4, pc}
 801939c:	4610      	mov	r0, r2
 801939e:	e7fc      	b.n	801939a <strncmp+0x1e>

080193a0 <__ascii_wctomb>:
 80193a0:	b149      	cbz	r1, 80193b6 <__ascii_wctomb+0x16>
 80193a2:	2aff      	cmp	r2, #255	; 0xff
 80193a4:	bf85      	ittet	hi
 80193a6:	238a      	movhi	r3, #138	; 0x8a
 80193a8:	6003      	strhi	r3, [r0, #0]
 80193aa:	700a      	strbls	r2, [r1, #0]
 80193ac:	f04f 30ff 	movhi.w	r0, #4294967295
 80193b0:	bf98      	it	ls
 80193b2:	2001      	movls	r0, #1
 80193b4:	4770      	bx	lr
 80193b6:	4608      	mov	r0, r1
 80193b8:	4770      	bx	lr

080193ba <_realloc_r>:
 80193ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80193bc:	4607      	mov	r7, r0
 80193be:	4614      	mov	r4, r2
 80193c0:	460e      	mov	r6, r1
 80193c2:	b921      	cbnz	r1, 80193ce <_realloc_r+0x14>
 80193c4:	4611      	mov	r1, r2
 80193c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80193ca:	f7fc bb33 	b.w	8015a34 <_malloc_r>
 80193ce:	b922      	cbnz	r2, 80193da <_realloc_r+0x20>
 80193d0:	f7fc fae2 	bl	8015998 <_free_r>
 80193d4:	4625      	mov	r5, r4
 80193d6:	4628      	mov	r0, r5
 80193d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80193da:	f000 f814 	bl	8019406 <_malloc_usable_size_r>
 80193de:	42a0      	cmp	r0, r4
 80193e0:	d20f      	bcs.n	8019402 <_realloc_r+0x48>
 80193e2:	4621      	mov	r1, r4
 80193e4:	4638      	mov	r0, r7
 80193e6:	f7fc fb25 	bl	8015a34 <_malloc_r>
 80193ea:	4605      	mov	r5, r0
 80193ec:	2800      	cmp	r0, #0
 80193ee:	d0f2      	beq.n	80193d6 <_realloc_r+0x1c>
 80193f0:	4631      	mov	r1, r6
 80193f2:	4622      	mov	r2, r4
 80193f4:	f7fc faa4 	bl	8015940 <memcpy>
 80193f8:	4631      	mov	r1, r6
 80193fa:	4638      	mov	r0, r7
 80193fc:	f7fc facc 	bl	8015998 <_free_r>
 8019400:	e7e9      	b.n	80193d6 <_realloc_r+0x1c>
 8019402:	4635      	mov	r5, r6
 8019404:	e7e7      	b.n	80193d6 <_realloc_r+0x1c>

08019406 <_malloc_usable_size_r>:
 8019406:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801940a:	1f18      	subs	r0, r3, #4
 801940c:	2b00      	cmp	r3, #0
 801940e:	bfbc      	itt	lt
 8019410:	580b      	ldrlt	r3, [r1, r0]
 8019412:	18c0      	addlt	r0, r0, r3
 8019414:	4770      	bx	lr
	...

08019418 <ceil>:
 8019418:	ec51 0b10 	vmov	r0, r1, d0
 801941c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019420:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8019424:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8019428:	2e13      	cmp	r6, #19
 801942a:	460c      	mov	r4, r1
 801942c:	ee10 5a10 	vmov	r5, s0
 8019430:	4680      	mov	r8, r0
 8019432:	dc30      	bgt.n	8019496 <ceil+0x7e>
 8019434:	2e00      	cmp	r6, #0
 8019436:	da12      	bge.n	801945e <ceil+0x46>
 8019438:	a333      	add	r3, pc, #204	; (adr r3, 8019508 <ceil+0xf0>)
 801943a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801943e:	f7e6 ff25 	bl	800028c <__adddf3>
 8019442:	2200      	movs	r2, #0
 8019444:	2300      	movs	r3, #0
 8019446:	f7e7 fb67 	bl	8000b18 <__aeabi_dcmpgt>
 801944a:	b128      	cbz	r0, 8019458 <ceil+0x40>
 801944c:	2c00      	cmp	r4, #0
 801944e:	db55      	blt.n	80194fc <ceil+0xe4>
 8019450:	432c      	orrs	r4, r5
 8019452:	d057      	beq.n	8019504 <ceil+0xec>
 8019454:	4c2e      	ldr	r4, [pc, #184]	; (8019510 <ceil+0xf8>)
 8019456:	2500      	movs	r5, #0
 8019458:	4621      	mov	r1, r4
 801945a:	4628      	mov	r0, r5
 801945c:	e025      	b.n	80194aa <ceil+0x92>
 801945e:	4f2d      	ldr	r7, [pc, #180]	; (8019514 <ceil+0xfc>)
 8019460:	4137      	asrs	r7, r6
 8019462:	ea01 0307 	and.w	r3, r1, r7
 8019466:	4303      	orrs	r3, r0
 8019468:	d01f      	beq.n	80194aa <ceil+0x92>
 801946a:	a327      	add	r3, pc, #156	; (adr r3, 8019508 <ceil+0xf0>)
 801946c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019470:	f7e6 ff0c 	bl	800028c <__adddf3>
 8019474:	2200      	movs	r2, #0
 8019476:	2300      	movs	r3, #0
 8019478:	f7e7 fb4e 	bl	8000b18 <__aeabi_dcmpgt>
 801947c:	2800      	cmp	r0, #0
 801947e:	d0eb      	beq.n	8019458 <ceil+0x40>
 8019480:	2c00      	cmp	r4, #0
 8019482:	bfc2      	ittt	gt
 8019484:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8019488:	fa43 f606 	asrgt.w	r6, r3, r6
 801948c:	19a4      	addgt	r4, r4, r6
 801948e:	ea24 0407 	bic.w	r4, r4, r7
 8019492:	2500      	movs	r5, #0
 8019494:	e7e0      	b.n	8019458 <ceil+0x40>
 8019496:	2e33      	cmp	r6, #51	; 0x33
 8019498:	dd0b      	ble.n	80194b2 <ceil+0x9a>
 801949a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801949e:	d104      	bne.n	80194aa <ceil+0x92>
 80194a0:	ee10 2a10 	vmov	r2, s0
 80194a4:	460b      	mov	r3, r1
 80194a6:	f7e6 fef1 	bl	800028c <__adddf3>
 80194aa:	ec41 0b10 	vmov	d0, r0, r1
 80194ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80194b2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80194b6:	f04f 33ff 	mov.w	r3, #4294967295
 80194ba:	fa23 f707 	lsr.w	r7, r3, r7
 80194be:	4207      	tst	r7, r0
 80194c0:	d0f3      	beq.n	80194aa <ceil+0x92>
 80194c2:	a311      	add	r3, pc, #68	; (adr r3, 8019508 <ceil+0xf0>)
 80194c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80194c8:	f7e6 fee0 	bl	800028c <__adddf3>
 80194cc:	2200      	movs	r2, #0
 80194ce:	2300      	movs	r3, #0
 80194d0:	f7e7 fb22 	bl	8000b18 <__aeabi_dcmpgt>
 80194d4:	2800      	cmp	r0, #0
 80194d6:	d0bf      	beq.n	8019458 <ceil+0x40>
 80194d8:	2c00      	cmp	r4, #0
 80194da:	dd02      	ble.n	80194e2 <ceil+0xca>
 80194dc:	2e14      	cmp	r6, #20
 80194de:	d103      	bne.n	80194e8 <ceil+0xd0>
 80194e0:	3401      	adds	r4, #1
 80194e2:	ea25 0507 	bic.w	r5, r5, r7
 80194e6:	e7b7      	b.n	8019458 <ceil+0x40>
 80194e8:	2301      	movs	r3, #1
 80194ea:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80194ee:	fa03 f606 	lsl.w	r6, r3, r6
 80194f2:	4435      	add	r5, r6
 80194f4:	4545      	cmp	r5, r8
 80194f6:	bf38      	it	cc
 80194f8:	18e4      	addcc	r4, r4, r3
 80194fa:	e7f2      	b.n	80194e2 <ceil+0xca>
 80194fc:	2500      	movs	r5, #0
 80194fe:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8019502:	e7a9      	b.n	8019458 <ceil+0x40>
 8019504:	4625      	mov	r5, r4
 8019506:	e7a7      	b.n	8019458 <ceil+0x40>
 8019508:	8800759c 	.word	0x8800759c
 801950c:	7e37e43c 	.word	0x7e37e43c
 8019510:	3ff00000 	.word	0x3ff00000
 8019514:	000fffff 	.word	0x000fffff

08019518 <cos>:
 8019518:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801951a:	ec51 0b10 	vmov	r0, r1, d0
 801951e:	4a1e      	ldr	r2, [pc, #120]	; (8019598 <cos+0x80>)
 8019520:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019524:	4293      	cmp	r3, r2
 8019526:	dc06      	bgt.n	8019536 <cos+0x1e>
 8019528:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8019590 <cos+0x78>
 801952c:	f000 fcec 	bl	8019f08 <__kernel_cos>
 8019530:	ec51 0b10 	vmov	r0, r1, d0
 8019534:	e007      	b.n	8019546 <cos+0x2e>
 8019536:	4a19      	ldr	r2, [pc, #100]	; (801959c <cos+0x84>)
 8019538:	4293      	cmp	r3, r2
 801953a:	dd09      	ble.n	8019550 <cos+0x38>
 801953c:	ee10 2a10 	vmov	r2, s0
 8019540:	460b      	mov	r3, r1
 8019542:	f7e6 fea1 	bl	8000288 <__aeabi_dsub>
 8019546:	ec41 0b10 	vmov	d0, r0, r1
 801954a:	b005      	add	sp, #20
 801954c:	f85d fb04 	ldr.w	pc, [sp], #4
 8019550:	4668      	mov	r0, sp
 8019552:	f000 fa35 	bl	80199c0 <__ieee754_rem_pio2>
 8019556:	f000 0003 	and.w	r0, r0, #3
 801955a:	2801      	cmp	r0, #1
 801955c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019560:	ed9d 0b00 	vldr	d0, [sp]
 8019564:	d007      	beq.n	8019576 <cos+0x5e>
 8019566:	2802      	cmp	r0, #2
 8019568:	d00e      	beq.n	8019588 <cos+0x70>
 801956a:	2800      	cmp	r0, #0
 801956c:	d0de      	beq.n	801952c <cos+0x14>
 801956e:	2001      	movs	r0, #1
 8019570:	f001 f8d2 	bl	801a718 <__kernel_sin>
 8019574:	e7dc      	b.n	8019530 <cos+0x18>
 8019576:	f001 f8cf 	bl	801a718 <__kernel_sin>
 801957a:	ec53 2b10 	vmov	r2, r3, d0
 801957e:	ee10 0a10 	vmov	r0, s0
 8019582:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8019586:	e7de      	b.n	8019546 <cos+0x2e>
 8019588:	f000 fcbe 	bl	8019f08 <__kernel_cos>
 801958c:	e7f5      	b.n	801957a <cos+0x62>
 801958e:	bf00      	nop
	...
 8019598:	3fe921fb 	.word	0x3fe921fb
 801959c:	7fefffff 	.word	0x7fefffff

080195a0 <round>:
 80195a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80195a2:	ec57 6b10 	vmov	r6, r7, d0
 80195a6:	f3c7 500a 	ubfx	r0, r7, #20, #11
 80195aa:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 80195ae:	2c13      	cmp	r4, #19
 80195b0:	463b      	mov	r3, r7
 80195b2:	463d      	mov	r5, r7
 80195b4:	dc17      	bgt.n	80195e6 <round+0x46>
 80195b6:	2c00      	cmp	r4, #0
 80195b8:	da09      	bge.n	80195ce <round+0x2e>
 80195ba:	3401      	adds	r4, #1
 80195bc:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 80195c0:	d103      	bne.n	80195ca <round+0x2a>
 80195c2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80195c6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80195ca:	2100      	movs	r1, #0
 80195cc:	e02c      	b.n	8019628 <round+0x88>
 80195ce:	4a18      	ldr	r2, [pc, #96]	; (8019630 <round+0x90>)
 80195d0:	4122      	asrs	r2, r4
 80195d2:	4217      	tst	r7, r2
 80195d4:	d100      	bne.n	80195d8 <round+0x38>
 80195d6:	b19e      	cbz	r6, 8019600 <round+0x60>
 80195d8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80195dc:	4123      	asrs	r3, r4
 80195de:	442b      	add	r3, r5
 80195e0:	ea23 0302 	bic.w	r3, r3, r2
 80195e4:	e7f1      	b.n	80195ca <round+0x2a>
 80195e6:	2c33      	cmp	r4, #51	; 0x33
 80195e8:	dd0d      	ble.n	8019606 <round+0x66>
 80195ea:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80195ee:	d107      	bne.n	8019600 <round+0x60>
 80195f0:	4630      	mov	r0, r6
 80195f2:	4639      	mov	r1, r7
 80195f4:	ee10 2a10 	vmov	r2, s0
 80195f8:	f7e6 fe48 	bl	800028c <__adddf3>
 80195fc:	4606      	mov	r6, r0
 80195fe:	460f      	mov	r7, r1
 8019600:	ec47 6b10 	vmov	d0, r6, r7
 8019604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019606:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 801960a:	f04f 30ff 	mov.w	r0, #4294967295
 801960e:	40d0      	lsrs	r0, r2
 8019610:	4206      	tst	r6, r0
 8019612:	d0f5      	beq.n	8019600 <round+0x60>
 8019614:	2201      	movs	r2, #1
 8019616:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 801961a:	fa02 f404 	lsl.w	r4, r2, r4
 801961e:	1931      	adds	r1, r6, r4
 8019620:	bf28      	it	cs
 8019622:	189b      	addcs	r3, r3, r2
 8019624:	ea21 0100 	bic.w	r1, r1, r0
 8019628:	461f      	mov	r7, r3
 801962a:	460e      	mov	r6, r1
 801962c:	e7e8      	b.n	8019600 <round+0x60>
 801962e:	bf00      	nop
 8019630:	000fffff 	.word	0x000fffff
 8019634:	00000000 	.word	0x00000000

08019638 <sin>:
 8019638:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801963a:	ec51 0b10 	vmov	r0, r1, d0
 801963e:	4a20      	ldr	r2, [pc, #128]	; (80196c0 <sin+0x88>)
 8019640:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019644:	4293      	cmp	r3, r2
 8019646:	dc07      	bgt.n	8019658 <sin+0x20>
 8019648:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80196b8 <sin+0x80>
 801964c:	2000      	movs	r0, #0
 801964e:	f001 f863 	bl	801a718 <__kernel_sin>
 8019652:	ec51 0b10 	vmov	r0, r1, d0
 8019656:	e007      	b.n	8019668 <sin+0x30>
 8019658:	4a1a      	ldr	r2, [pc, #104]	; (80196c4 <sin+0x8c>)
 801965a:	4293      	cmp	r3, r2
 801965c:	dd09      	ble.n	8019672 <sin+0x3a>
 801965e:	ee10 2a10 	vmov	r2, s0
 8019662:	460b      	mov	r3, r1
 8019664:	f7e6 fe10 	bl	8000288 <__aeabi_dsub>
 8019668:	ec41 0b10 	vmov	d0, r0, r1
 801966c:	b005      	add	sp, #20
 801966e:	f85d fb04 	ldr.w	pc, [sp], #4
 8019672:	4668      	mov	r0, sp
 8019674:	f000 f9a4 	bl	80199c0 <__ieee754_rem_pio2>
 8019678:	f000 0003 	and.w	r0, r0, #3
 801967c:	2801      	cmp	r0, #1
 801967e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019682:	ed9d 0b00 	vldr	d0, [sp]
 8019686:	d004      	beq.n	8019692 <sin+0x5a>
 8019688:	2802      	cmp	r0, #2
 801968a:	d005      	beq.n	8019698 <sin+0x60>
 801968c:	b970      	cbnz	r0, 80196ac <sin+0x74>
 801968e:	2001      	movs	r0, #1
 8019690:	e7dd      	b.n	801964e <sin+0x16>
 8019692:	f000 fc39 	bl	8019f08 <__kernel_cos>
 8019696:	e7dc      	b.n	8019652 <sin+0x1a>
 8019698:	2001      	movs	r0, #1
 801969a:	f001 f83d 	bl	801a718 <__kernel_sin>
 801969e:	ec53 2b10 	vmov	r2, r3, d0
 80196a2:	ee10 0a10 	vmov	r0, s0
 80196a6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80196aa:	e7dd      	b.n	8019668 <sin+0x30>
 80196ac:	f000 fc2c 	bl	8019f08 <__kernel_cos>
 80196b0:	e7f5      	b.n	801969e <sin+0x66>
 80196b2:	bf00      	nop
 80196b4:	f3af 8000 	nop.w
	...
 80196c0:	3fe921fb 	.word	0x3fe921fb
 80196c4:	7fefffff 	.word	0x7fefffff

080196c8 <ceilf>:
 80196c8:	ee10 3a10 	vmov	r3, s0
 80196cc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80196d0:	0dca      	lsrs	r2, r1, #23
 80196d2:	3a7f      	subs	r2, #127	; 0x7f
 80196d4:	2a16      	cmp	r2, #22
 80196d6:	dc2a      	bgt.n	801972e <ceilf+0x66>
 80196d8:	2a00      	cmp	r2, #0
 80196da:	da11      	bge.n	8019700 <ceilf+0x38>
 80196dc:	eddf 7a18 	vldr	s15, [pc, #96]	; 8019740 <ceilf+0x78>
 80196e0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80196e4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80196e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196ec:	dd05      	ble.n	80196fa <ceilf+0x32>
 80196ee:	2b00      	cmp	r3, #0
 80196f0:	db23      	blt.n	801973a <ceilf+0x72>
 80196f2:	2900      	cmp	r1, #0
 80196f4:	bf18      	it	ne
 80196f6:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 80196fa:	ee00 3a10 	vmov	s0, r3
 80196fe:	4770      	bx	lr
 8019700:	4910      	ldr	r1, [pc, #64]	; (8019744 <ceilf+0x7c>)
 8019702:	4111      	asrs	r1, r2
 8019704:	420b      	tst	r3, r1
 8019706:	d0fa      	beq.n	80196fe <ceilf+0x36>
 8019708:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8019740 <ceilf+0x78>
 801970c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019710:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019718:	ddef      	ble.n	80196fa <ceilf+0x32>
 801971a:	2b00      	cmp	r3, #0
 801971c:	bfc2      	ittt	gt
 801971e:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 8019722:	fa40 f202 	asrgt.w	r2, r0, r2
 8019726:	189b      	addgt	r3, r3, r2
 8019728:	ea23 0301 	bic.w	r3, r3, r1
 801972c:	e7e5      	b.n	80196fa <ceilf+0x32>
 801972e:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8019732:	d3e4      	bcc.n	80196fe <ceilf+0x36>
 8019734:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019738:	4770      	bx	lr
 801973a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801973e:	e7dc      	b.n	80196fa <ceilf+0x32>
 8019740:	7149f2ca 	.word	0x7149f2ca
 8019744:	007fffff 	.word	0x007fffff

08019748 <atan2>:
 8019748:	f000 b85a 	b.w	8019800 <__ieee754_atan2>

0801974c <sqrt>:
 801974c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019750:	ed2d 8b02 	vpush	{d8}
 8019754:	b08b      	sub	sp, #44	; 0x2c
 8019756:	ec55 4b10 	vmov	r4, r5, d0
 801975a:	f000 fb23 	bl	8019da4 <__ieee754_sqrt>
 801975e:	4b26      	ldr	r3, [pc, #152]	; (80197f8 <sqrt+0xac>)
 8019760:	eeb0 8a40 	vmov.f32	s16, s0
 8019764:	eef0 8a60 	vmov.f32	s17, s1
 8019768:	f993 6000 	ldrsb.w	r6, [r3]
 801976c:	1c73      	adds	r3, r6, #1
 801976e:	d02a      	beq.n	80197c6 <sqrt+0x7a>
 8019770:	4622      	mov	r2, r4
 8019772:	462b      	mov	r3, r5
 8019774:	4620      	mov	r0, r4
 8019776:	4629      	mov	r1, r5
 8019778:	f7e7 f9d8 	bl	8000b2c <__aeabi_dcmpun>
 801977c:	4607      	mov	r7, r0
 801977e:	bb10      	cbnz	r0, 80197c6 <sqrt+0x7a>
 8019780:	f04f 0800 	mov.w	r8, #0
 8019784:	f04f 0900 	mov.w	r9, #0
 8019788:	4642      	mov	r2, r8
 801978a:	464b      	mov	r3, r9
 801978c:	4620      	mov	r0, r4
 801978e:	4629      	mov	r1, r5
 8019790:	f7e7 f9a4 	bl	8000adc <__aeabi_dcmplt>
 8019794:	b1b8      	cbz	r0, 80197c6 <sqrt+0x7a>
 8019796:	2301      	movs	r3, #1
 8019798:	9300      	str	r3, [sp, #0]
 801979a:	4b18      	ldr	r3, [pc, #96]	; (80197fc <sqrt+0xb0>)
 801979c:	9301      	str	r3, [sp, #4]
 801979e:	9708      	str	r7, [sp, #32]
 80197a0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80197a4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80197a8:	b9b6      	cbnz	r6, 80197d8 <sqrt+0x8c>
 80197aa:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80197ae:	4668      	mov	r0, sp
 80197b0:	f001 fa9e 	bl	801acf0 <matherr>
 80197b4:	b1d0      	cbz	r0, 80197ec <sqrt+0xa0>
 80197b6:	9b08      	ldr	r3, [sp, #32]
 80197b8:	b11b      	cbz	r3, 80197c2 <sqrt+0x76>
 80197ba:	f7fc f887 	bl	80158cc <__errno>
 80197be:	9b08      	ldr	r3, [sp, #32]
 80197c0:	6003      	str	r3, [r0, #0]
 80197c2:	ed9d 8b06 	vldr	d8, [sp, #24]
 80197c6:	eeb0 0a48 	vmov.f32	s0, s16
 80197ca:	eef0 0a68 	vmov.f32	s1, s17
 80197ce:	b00b      	add	sp, #44	; 0x2c
 80197d0:	ecbd 8b02 	vpop	{d8}
 80197d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80197d8:	4642      	mov	r2, r8
 80197da:	464b      	mov	r3, r9
 80197dc:	4640      	mov	r0, r8
 80197de:	4649      	mov	r1, r9
 80197e0:	f7e7 f834 	bl	800084c <__aeabi_ddiv>
 80197e4:	2e02      	cmp	r6, #2
 80197e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80197ea:	d1e0      	bne.n	80197ae <sqrt+0x62>
 80197ec:	f7fc f86e 	bl	80158cc <__errno>
 80197f0:	2321      	movs	r3, #33	; 0x21
 80197f2:	6003      	str	r3, [r0, #0]
 80197f4:	e7df      	b.n	80197b6 <sqrt+0x6a>
 80197f6:	bf00      	nop
 80197f8:	20000fdc 	.word	0x20000fdc
 80197fc:	0801b5b6 	.word	0x0801b5b6

08019800 <__ieee754_atan2>:
 8019800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019804:	ec57 6b11 	vmov	r6, r7, d1
 8019808:	4273      	negs	r3, r6
 801980a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801980e:	4333      	orrs	r3, r6
 8019810:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80199b8 <__ieee754_atan2+0x1b8>
 8019814:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8019818:	4573      	cmp	r3, lr
 801981a:	ec51 0b10 	vmov	r0, r1, d0
 801981e:	ee11 8a10 	vmov	r8, s2
 8019822:	d80a      	bhi.n	801983a <__ieee754_atan2+0x3a>
 8019824:	4244      	negs	r4, r0
 8019826:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801982a:	4304      	orrs	r4, r0
 801982c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8019830:	4574      	cmp	r4, lr
 8019832:	468c      	mov	ip, r1
 8019834:	ee10 9a10 	vmov	r9, s0
 8019838:	d907      	bls.n	801984a <__ieee754_atan2+0x4a>
 801983a:	4632      	mov	r2, r6
 801983c:	463b      	mov	r3, r7
 801983e:	f7e6 fd25 	bl	800028c <__adddf3>
 8019842:	ec41 0b10 	vmov	d0, r0, r1
 8019846:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801984a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801984e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8019852:	4334      	orrs	r4, r6
 8019854:	d103      	bne.n	801985e <__ieee754_atan2+0x5e>
 8019856:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801985a:	f001 b819 	b.w	801a890 <atan>
 801985e:	17bc      	asrs	r4, r7, #30
 8019860:	f004 0402 	and.w	r4, r4, #2
 8019864:	ea53 0909 	orrs.w	r9, r3, r9
 8019868:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801986c:	d107      	bne.n	801987e <__ieee754_atan2+0x7e>
 801986e:	2c02      	cmp	r4, #2
 8019870:	d073      	beq.n	801995a <__ieee754_atan2+0x15a>
 8019872:	2c03      	cmp	r4, #3
 8019874:	d1e5      	bne.n	8019842 <__ieee754_atan2+0x42>
 8019876:	a13e      	add	r1, pc, #248	; (adr r1, 8019970 <__ieee754_atan2+0x170>)
 8019878:	e9d1 0100 	ldrd	r0, r1, [r1]
 801987c:	e7e1      	b.n	8019842 <__ieee754_atan2+0x42>
 801987e:	ea52 0808 	orrs.w	r8, r2, r8
 8019882:	d106      	bne.n	8019892 <__ieee754_atan2+0x92>
 8019884:	f1bc 0f00 	cmp.w	ip, #0
 8019888:	da6b      	bge.n	8019962 <__ieee754_atan2+0x162>
 801988a:	a13b      	add	r1, pc, #236	; (adr r1, 8019978 <__ieee754_atan2+0x178>)
 801988c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019890:	e7d7      	b.n	8019842 <__ieee754_atan2+0x42>
 8019892:	4572      	cmp	r2, lr
 8019894:	d120      	bne.n	80198d8 <__ieee754_atan2+0xd8>
 8019896:	4293      	cmp	r3, r2
 8019898:	d111      	bne.n	80198be <__ieee754_atan2+0xbe>
 801989a:	2c02      	cmp	r4, #2
 801989c:	d007      	beq.n	80198ae <__ieee754_atan2+0xae>
 801989e:	2c03      	cmp	r4, #3
 80198a0:	d009      	beq.n	80198b6 <__ieee754_atan2+0xb6>
 80198a2:	2c01      	cmp	r4, #1
 80198a4:	d155      	bne.n	8019952 <__ieee754_atan2+0x152>
 80198a6:	a136      	add	r1, pc, #216	; (adr r1, 8019980 <__ieee754_atan2+0x180>)
 80198a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80198ac:	e7c9      	b.n	8019842 <__ieee754_atan2+0x42>
 80198ae:	a136      	add	r1, pc, #216	; (adr r1, 8019988 <__ieee754_atan2+0x188>)
 80198b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80198b4:	e7c5      	b.n	8019842 <__ieee754_atan2+0x42>
 80198b6:	a136      	add	r1, pc, #216	; (adr r1, 8019990 <__ieee754_atan2+0x190>)
 80198b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80198bc:	e7c1      	b.n	8019842 <__ieee754_atan2+0x42>
 80198be:	2c02      	cmp	r4, #2
 80198c0:	d04b      	beq.n	801995a <__ieee754_atan2+0x15a>
 80198c2:	2c03      	cmp	r4, #3
 80198c4:	d0d7      	beq.n	8019876 <__ieee754_atan2+0x76>
 80198c6:	2c01      	cmp	r4, #1
 80198c8:	f04f 0000 	mov.w	r0, #0
 80198cc:	d102      	bne.n	80198d4 <__ieee754_atan2+0xd4>
 80198ce:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80198d2:	e7b6      	b.n	8019842 <__ieee754_atan2+0x42>
 80198d4:	2100      	movs	r1, #0
 80198d6:	e7b4      	b.n	8019842 <__ieee754_atan2+0x42>
 80198d8:	4573      	cmp	r3, lr
 80198da:	d0d3      	beq.n	8019884 <__ieee754_atan2+0x84>
 80198dc:	1a9b      	subs	r3, r3, r2
 80198de:	151b      	asrs	r3, r3, #20
 80198e0:	2b3c      	cmp	r3, #60	; 0x3c
 80198e2:	dc1e      	bgt.n	8019922 <__ieee754_atan2+0x122>
 80198e4:	2f00      	cmp	r7, #0
 80198e6:	da01      	bge.n	80198ec <__ieee754_atan2+0xec>
 80198e8:	333c      	adds	r3, #60	; 0x3c
 80198ea:	db1e      	blt.n	801992a <__ieee754_atan2+0x12a>
 80198ec:	4632      	mov	r2, r6
 80198ee:	463b      	mov	r3, r7
 80198f0:	f7e6 ffac 	bl	800084c <__aeabi_ddiv>
 80198f4:	ec41 0b10 	vmov	d0, r0, r1
 80198f8:	f001 f96a 	bl	801abd0 <fabs>
 80198fc:	f000 ffc8 	bl	801a890 <atan>
 8019900:	ec51 0b10 	vmov	r0, r1, d0
 8019904:	2c01      	cmp	r4, #1
 8019906:	d013      	beq.n	8019930 <__ieee754_atan2+0x130>
 8019908:	2c02      	cmp	r4, #2
 801990a:	d015      	beq.n	8019938 <__ieee754_atan2+0x138>
 801990c:	2c00      	cmp	r4, #0
 801990e:	d098      	beq.n	8019842 <__ieee754_atan2+0x42>
 8019910:	a321      	add	r3, pc, #132	; (adr r3, 8019998 <__ieee754_atan2+0x198>)
 8019912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019916:	f7e6 fcb7 	bl	8000288 <__aeabi_dsub>
 801991a:	a321      	add	r3, pc, #132	; (adr r3, 80199a0 <__ieee754_atan2+0x1a0>)
 801991c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019920:	e014      	b.n	801994c <__ieee754_atan2+0x14c>
 8019922:	a121      	add	r1, pc, #132	; (adr r1, 80199a8 <__ieee754_atan2+0x1a8>)
 8019924:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019928:	e7ec      	b.n	8019904 <__ieee754_atan2+0x104>
 801992a:	2000      	movs	r0, #0
 801992c:	2100      	movs	r1, #0
 801992e:	e7e9      	b.n	8019904 <__ieee754_atan2+0x104>
 8019930:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019934:	4619      	mov	r1, r3
 8019936:	e784      	b.n	8019842 <__ieee754_atan2+0x42>
 8019938:	a317      	add	r3, pc, #92	; (adr r3, 8019998 <__ieee754_atan2+0x198>)
 801993a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801993e:	f7e6 fca3 	bl	8000288 <__aeabi_dsub>
 8019942:	4602      	mov	r2, r0
 8019944:	460b      	mov	r3, r1
 8019946:	a116      	add	r1, pc, #88	; (adr r1, 80199a0 <__ieee754_atan2+0x1a0>)
 8019948:	e9d1 0100 	ldrd	r0, r1, [r1]
 801994c:	f7e6 fc9c 	bl	8000288 <__aeabi_dsub>
 8019950:	e777      	b.n	8019842 <__ieee754_atan2+0x42>
 8019952:	a117      	add	r1, pc, #92	; (adr r1, 80199b0 <__ieee754_atan2+0x1b0>)
 8019954:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019958:	e773      	b.n	8019842 <__ieee754_atan2+0x42>
 801995a:	a111      	add	r1, pc, #68	; (adr r1, 80199a0 <__ieee754_atan2+0x1a0>)
 801995c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019960:	e76f      	b.n	8019842 <__ieee754_atan2+0x42>
 8019962:	a111      	add	r1, pc, #68	; (adr r1, 80199a8 <__ieee754_atan2+0x1a8>)
 8019964:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019968:	e76b      	b.n	8019842 <__ieee754_atan2+0x42>
 801996a:	bf00      	nop
 801996c:	f3af 8000 	nop.w
 8019970:	54442d18 	.word	0x54442d18
 8019974:	c00921fb 	.word	0xc00921fb
 8019978:	54442d18 	.word	0x54442d18
 801997c:	bff921fb 	.word	0xbff921fb
 8019980:	54442d18 	.word	0x54442d18
 8019984:	bfe921fb 	.word	0xbfe921fb
 8019988:	7f3321d2 	.word	0x7f3321d2
 801998c:	4002d97c 	.word	0x4002d97c
 8019990:	7f3321d2 	.word	0x7f3321d2
 8019994:	c002d97c 	.word	0xc002d97c
 8019998:	33145c07 	.word	0x33145c07
 801999c:	3ca1a626 	.word	0x3ca1a626
 80199a0:	54442d18 	.word	0x54442d18
 80199a4:	400921fb 	.word	0x400921fb
 80199a8:	54442d18 	.word	0x54442d18
 80199ac:	3ff921fb 	.word	0x3ff921fb
 80199b0:	54442d18 	.word	0x54442d18
 80199b4:	3fe921fb 	.word	0x3fe921fb
 80199b8:	7ff00000 	.word	0x7ff00000
 80199bc:	00000000 	.word	0x00000000

080199c0 <__ieee754_rem_pio2>:
 80199c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199c4:	ec57 6b10 	vmov	r6, r7, d0
 80199c8:	4bc3      	ldr	r3, [pc, #780]	; (8019cd8 <__ieee754_rem_pio2+0x318>)
 80199ca:	b08d      	sub	sp, #52	; 0x34
 80199cc:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80199d0:	4598      	cmp	r8, r3
 80199d2:	4604      	mov	r4, r0
 80199d4:	9704      	str	r7, [sp, #16]
 80199d6:	dc07      	bgt.n	80199e8 <__ieee754_rem_pio2+0x28>
 80199d8:	2200      	movs	r2, #0
 80199da:	2300      	movs	r3, #0
 80199dc:	ed84 0b00 	vstr	d0, [r4]
 80199e0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80199e4:	2500      	movs	r5, #0
 80199e6:	e027      	b.n	8019a38 <__ieee754_rem_pio2+0x78>
 80199e8:	4bbc      	ldr	r3, [pc, #752]	; (8019cdc <__ieee754_rem_pio2+0x31c>)
 80199ea:	4598      	cmp	r8, r3
 80199ec:	dc75      	bgt.n	8019ada <__ieee754_rem_pio2+0x11a>
 80199ee:	9b04      	ldr	r3, [sp, #16]
 80199f0:	4dbb      	ldr	r5, [pc, #748]	; (8019ce0 <__ieee754_rem_pio2+0x320>)
 80199f2:	2b00      	cmp	r3, #0
 80199f4:	ee10 0a10 	vmov	r0, s0
 80199f8:	a3a9      	add	r3, pc, #676	; (adr r3, 8019ca0 <__ieee754_rem_pio2+0x2e0>)
 80199fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199fe:	4639      	mov	r1, r7
 8019a00:	dd36      	ble.n	8019a70 <__ieee754_rem_pio2+0xb0>
 8019a02:	f7e6 fc41 	bl	8000288 <__aeabi_dsub>
 8019a06:	45a8      	cmp	r8, r5
 8019a08:	4606      	mov	r6, r0
 8019a0a:	460f      	mov	r7, r1
 8019a0c:	d018      	beq.n	8019a40 <__ieee754_rem_pio2+0x80>
 8019a0e:	a3a6      	add	r3, pc, #664	; (adr r3, 8019ca8 <__ieee754_rem_pio2+0x2e8>)
 8019a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a14:	f7e6 fc38 	bl	8000288 <__aeabi_dsub>
 8019a18:	4602      	mov	r2, r0
 8019a1a:	460b      	mov	r3, r1
 8019a1c:	e9c4 2300 	strd	r2, r3, [r4]
 8019a20:	4630      	mov	r0, r6
 8019a22:	4639      	mov	r1, r7
 8019a24:	f7e6 fc30 	bl	8000288 <__aeabi_dsub>
 8019a28:	a39f      	add	r3, pc, #636	; (adr r3, 8019ca8 <__ieee754_rem_pio2+0x2e8>)
 8019a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a2e:	f7e6 fc2b 	bl	8000288 <__aeabi_dsub>
 8019a32:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8019a36:	2501      	movs	r5, #1
 8019a38:	4628      	mov	r0, r5
 8019a3a:	b00d      	add	sp, #52	; 0x34
 8019a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a40:	a39b      	add	r3, pc, #620	; (adr r3, 8019cb0 <__ieee754_rem_pio2+0x2f0>)
 8019a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a46:	f7e6 fc1f 	bl	8000288 <__aeabi_dsub>
 8019a4a:	a39b      	add	r3, pc, #620	; (adr r3, 8019cb8 <__ieee754_rem_pio2+0x2f8>)
 8019a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a50:	4606      	mov	r6, r0
 8019a52:	460f      	mov	r7, r1
 8019a54:	f7e6 fc18 	bl	8000288 <__aeabi_dsub>
 8019a58:	4602      	mov	r2, r0
 8019a5a:	460b      	mov	r3, r1
 8019a5c:	e9c4 2300 	strd	r2, r3, [r4]
 8019a60:	4630      	mov	r0, r6
 8019a62:	4639      	mov	r1, r7
 8019a64:	f7e6 fc10 	bl	8000288 <__aeabi_dsub>
 8019a68:	a393      	add	r3, pc, #588	; (adr r3, 8019cb8 <__ieee754_rem_pio2+0x2f8>)
 8019a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a6e:	e7de      	b.n	8019a2e <__ieee754_rem_pio2+0x6e>
 8019a70:	f7e6 fc0c 	bl	800028c <__adddf3>
 8019a74:	45a8      	cmp	r8, r5
 8019a76:	4606      	mov	r6, r0
 8019a78:	460f      	mov	r7, r1
 8019a7a:	d016      	beq.n	8019aaa <__ieee754_rem_pio2+0xea>
 8019a7c:	a38a      	add	r3, pc, #552	; (adr r3, 8019ca8 <__ieee754_rem_pio2+0x2e8>)
 8019a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a82:	f7e6 fc03 	bl	800028c <__adddf3>
 8019a86:	4602      	mov	r2, r0
 8019a88:	460b      	mov	r3, r1
 8019a8a:	e9c4 2300 	strd	r2, r3, [r4]
 8019a8e:	4630      	mov	r0, r6
 8019a90:	4639      	mov	r1, r7
 8019a92:	f7e6 fbf9 	bl	8000288 <__aeabi_dsub>
 8019a96:	a384      	add	r3, pc, #528	; (adr r3, 8019ca8 <__ieee754_rem_pio2+0x2e8>)
 8019a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a9c:	f7e6 fbf6 	bl	800028c <__adddf3>
 8019aa0:	f04f 35ff 	mov.w	r5, #4294967295
 8019aa4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8019aa8:	e7c6      	b.n	8019a38 <__ieee754_rem_pio2+0x78>
 8019aaa:	a381      	add	r3, pc, #516	; (adr r3, 8019cb0 <__ieee754_rem_pio2+0x2f0>)
 8019aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ab0:	f7e6 fbec 	bl	800028c <__adddf3>
 8019ab4:	a380      	add	r3, pc, #512	; (adr r3, 8019cb8 <__ieee754_rem_pio2+0x2f8>)
 8019ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019aba:	4606      	mov	r6, r0
 8019abc:	460f      	mov	r7, r1
 8019abe:	f7e6 fbe5 	bl	800028c <__adddf3>
 8019ac2:	4602      	mov	r2, r0
 8019ac4:	460b      	mov	r3, r1
 8019ac6:	e9c4 2300 	strd	r2, r3, [r4]
 8019aca:	4630      	mov	r0, r6
 8019acc:	4639      	mov	r1, r7
 8019ace:	f7e6 fbdb 	bl	8000288 <__aeabi_dsub>
 8019ad2:	a379      	add	r3, pc, #484	; (adr r3, 8019cb8 <__ieee754_rem_pio2+0x2f8>)
 8019ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ad8:	e7e0      	b.n	8019a9c <__ieee754_rem_pio2+0xdc>
 8019ada:	4b82      	ldr	r3, [pc, #520]	; (8019ce4 <__ieee754_rem_pio2+0x324>)
 8019adc:	4598      	cmp	r8, r3
 8019ade:	f300 80d0 	bgt.w	8019c82 <__ieee754_rem_pio2+0x2c2>
 8019ae2:	f001 f875 	bl	801abd0 <fabs>
 8019ae6:	ec57 6b10 	vmov	r6, r7, d0
 8019aea:	ee10 0a10 	vmov	r0, s0
 8019aee:	a374      	add	r3, pc, #464	; (adr r3, 8019cc0 <__ieee754_rem_pio2+0x300>)
 8019af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019af4:	4639      	mov	r1, r7
 8019af6:	f7e6 fd7f 	bl	80005f8 <__aeabi_dmul>
 8019afa:	2200      	movs	r2, #0
 8019afc:	4b7a      	ldr	r3, [pc, #488]	; (8019ce8 <__ieee754_rem_pio2+0x328>)
 8019afe:	f7e6 fbc5 	bl	800028c <__adddf3>
 8019b02:	f7e7 f829 	bl	8000b58 <__aeabi_d2iz>
 8019b06:	4605      	mov	r5, r0
 8019b08:	f7e6 fd0c 	bl	8000524 <__aeabi_i2d>
 8019b0c:	a364      	add	r3, pc, #400	; (adr r3, 8019ca0 <__ieee754_rem_pio2+0x2e0>)
 8019b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019b16:	f7e6 fd6f 	bl	80005f8 <__aeabi_dmul>
 8019b1a:	4602      	mov	r2, r0
 8019b1c:	460b      	mov	r3, r1
 8019b1e:	4630      	mov	r0, r6
 8019b20:	4639      	mov	r1, r7
 8019b22:	f7e6 fbb1 	bl	8000288 <__aeabi_dsub>
 8019b26:	a360      	add	r3, pc, #384	; (adr r3, 8019ca8 <__ieee754_rem_pio2+0x2e8>)
 8019b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b2c:	4682      	mov	sl, r0
 8019b2e:	468b      	mov	fp, r1
 8019b30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019b34:	f7e6 fd60 	bl	80005f8 <__aeabi_dmul>
 8019b38:	2d1f      	cmp	r5, #31
 8019b3a:	4606      	mov	r6, r0
 8019b3c:	460f      	mov	r7, r1
 8019b3e:	dc0c      	bgt.n	8019b5a <__ieee754_rem_pio2+0x19a>
 8019b40:	1e6a      	subs	r2, r5, #1
 8019b42:	4b6a      	ldr	r3, [pc, #424]	; (8019cec <__ieee754_rem_pio2+0x32c>)
 8019b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019b48:	4543      	cmp	r3, r8
 8019b4a:	d006      	beq.n	8019b5a <__ieee754_rem_pio2+0x19a>
 8019b4c:	4632      	mov	r2, r6
 8019b4e:	463b      	mov	r3, r7
 8019b50:	4650      	mov	r0, sl
 8019b52:	4659      	mov	r1, fp
 8019b54:	f7e6 fb98 	bl	8000288 <__aeabi_dsub>
 8019b58:	e00e      	b.n	8019b78 <__ieee754_rem_pio2+0x1b8>
 8019b5a:	4632      	mov	r2, r6
 8019b5c:	463b      	mov	r3, r7
 8019b5e:	4650      	mov	r0, sl
 8019b60:	4659      	mov	r1, fp
 8019b62:	f7e6 fb91 	bl	8000288 <__aeabi_dsub>
 8019b66:	ea4f 5328 	mov.w	r3, r8, asr #20
 8019b6a:	9305      	str	r3, [sp, #20]
 8019b6c:	9a05      	ldr	r2, [sp, #20]
 8019b6e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8019b72:	1ad3      	subs	r3, r2, r3
 8019b74:	2b10      	cmp	r3, #16
 8019b76:	dc02      	bgt.n	8019b7e <__ieee754_rem_pio2+0x1be>
 8019b78:	e9c4 0100 	strd	r0, r1, [r4]
 8019b7c:	e039      	b.n	8019bf2 <__ieee754_rem_pio2+0x232>
 8019b7e:	a34c      	add	r3, pc, #304	; (adr r3, 8019cb0 <__ieee754_rem_pio2+0x2f0>)
 8019b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019b88:	f7e6 fd36 	bl	80005f8 <__aeabi_dmul>
 8019b8c:	4606      	mov	r6, r0
 8019b8e:	460f      	mov	r7, r1
 8019b90:	4602      	mov	r2, r0
 8019b92:	460b      	mov	r3, r1
 8019b94:	4650      	mov	r0, sl
 8019b96:	4659      	mov	r1, fp
 8019b98:	f7e6 fb76 	bl	8000288 <__aeabi_dsub>
 8019b9c:	4602      	mov	r2, r0
 8019b9e:	460b      	mov	r3, r1
 8019ba0:	4680      	mov	r8, r0
 8019ba2:	4689      	mov	r9, r1
 8019ba4:	4650      	mov	r0, sl
 8019ba6:	4659      	mov	r1, fp
 8019ba8:	f7e6 fb6e 	bl	8000288 <__aeabi_dsub>
 8019bac:	4632      	mov	r2, r6
 8019bae:	463b      	mov	r3, r7
 8019bb0:	f7e6 fb6a 	bl	8000288 <__aeabi_dsub>
 8019bb4:	a340      	add	r3, pc, #256	; (adr r3, 8019cb8 <__ieee754_rem_pio2+0x2f8>)
 8019bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019bba:	4606      	mov	r6, r0
 8019bbc:	460f      	mov	r7, r1
 8019bbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019bc2:	f7e6 fd19 	bl	80005f8 <__aeabi_dmul>
 8019bc6:	4632      	mov	r2, r6
 8019bc8:	463b      	mov	r3, r7
 8019bca:	f7e6 fb5d 	bl	8000288 <__aeabi_dsub>
 8019bce:	4602      	mov	r2, r0
 8019bd0:	460b      	mov	r3, r1
 8019bd2:	4606      	mov	r6, r0
 8019bd4:	460f      	mov	r7, r1
 8019bd6:	4640      	mov	r0, r8
 8019bd8:	4649      	mov	r1, r9
 8019bda:	f7e6 fb55 	bl	8000288 <__aeabi_dsub>
 8019bde:	9a05      	ldr	r2, [sp, #20]
 8019be0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8019be4:	1ad3      	subs	r3, r2, r3
 8019be6:	2b31      	cmp	r3, #49	; 0x31
 8019be8:	dc20      	bgt.n	8019c2c <__ieee754_rem_pio2+0x26c>
 8019bea:	e9c4 0100 	strd	r0, r1, [r4]
 8019bee:	46c2      	mov	sl, r8
 8019bf0:	46cb      	mov	fp, r9
 8019bf2:	e9d4 8900 	ldrd	r8, r9, [r4]
 8019bf6:	4650      	mov	r0, sl
 8019bf8:	4642      	mov	r2, r8
 8019bfa:	464b      	mov	r3, r9
 8019bfc:	4659      	mov	r1, fp
 8019bfe:	f7e6 fb43 	bl	8000288 <__aeabi_dsub>
 8019c02:	463b      	mov	r3, r7
 8019c04:	4632      	mov	r2, r6
 8019c06:	f7e6 fb3f 	bl	8000288 <__aeabi_dsub>
 8019c0a:	9b04      	ldr	r3, [sp, #16]
 8019c0c:	2b00      	cmp	r3, #0
 8019c0e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8019c12:	f6bf af11 	bge.w	8019a38 <__ieee754_rem_pio2+0x78>
 8019c16:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8019c1a:	6063      	str	r3, [r4, #4]
 8019c1c:	f8c4 8000 	str.w	r8, [r4]
 8019c20:	60a0      	str	r0, [r4, #8]
 8019c22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019c26:	60e3      	str	r3, [r4, #12]
 8019c28:	426d      	negs	r5, r5
 8019c2a:	e705      	b.n	8019a38 <__ieee754_rem_pio2+0x78>
 8019c2c:	a326      	add	r3, pc, #152	; (adr r3, 8019cc8 <__ieee754_rem_pio2+0x308>)
 8019c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019c36:	f7e6 fcdf 	bl	80005f8 <__aeabi_dmul>
 8019c3a:	4606      	mov	r6, r0
 8019c3c:	460f      	mov	r7, r1
 8019c3e:	4602      	mov	r2, r0
 8019c40:	460b      	mov	r3, r1
 8019c42:	4640      	mov	r0, r8
 8019c44:	4649      	mov	r1, r9
 8019c46:	f7e6 fb1f 	bl	8000288 <__aeabi_dsub>
 8019c4a:	4602      	mov	r2, r0
 8019c4c:	460b      	mov	r3, r1
 8019c4e:	4682      	mov	sl, r0
 8019c50:	468b      	mov	fp, r1
 8019c52:	4640      	mov	r0, r8
 8019c54:	4649      	mov	r1, r9
 8019c56:	f7e6 fb17 	bl	8000288 <__aeabi_dsub>
 8019c5a:	4632      	mov	r2, r6
 8019c5c:	463b      	mov	r3, r7
 8019c5e:	f7e6 fb13 	bl	8000288 <__aeabi_dsub>
 8019c62:	a31b      	add	r3, pc, #108	; (adr r3, 8019cd0 <__ieee754_rem_pio2+0x310>)
 8019c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c68:	4606      	mov	r6, r0
 8019c6a:	460f      	mov	r7, r1
 8019c6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019c70:	f7e6 fcc2 	bl	80005f8 <__aeabi_dmul>
 8019c74:	4632      	mov	r2, r6
 8019c76:	463b      	mov	r3, r7
 8019c78:	f7e6 fb06 	bl	8000288 <__aeabi_dsub>
 8019c7c:	4606      	mov	r6, r0
 8019c7e:	460f      	mov	r7, r1
 8019c80:	e764      	b.n	8019b4c <__ieee754_rem_pio2+0x18c>
 8019c82:	4b1b      	ldr	r3, [pc, #108]	; (8019cf0 <__ieee754_rem_pio2+0x330>)
 8019c84:	4598      	cmp	r8, r3
 8019c86:	dd35      	ble.n	8019cf4 <__ieee754_rem_pio2+0x334>
 8019c88:	ee10 2a10 	vmov	r2, s0
 8019c8c:	463b      	mov	r3, r7
 8019c8e:	4630      	mov	r0, r6
 8019c90:	4639      	mov	r1, r7
 8019c92:	f7e6 faf9 	bl	8000288 <__aeabi_dsub>
 8019c96:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8019c9a:	e9c4 0100 	strd	r0, r1, [r4]
 8019c9e:	e6a1      	b.n	80199e4 <__ieee754_rem_pio2+0x24>
 8019ca0:	54400000 	.word	0x54400000
 8019ca4:	3ff921fb 	.word	0x3ff921fb
 8019ca8:	1a626331 	.word	0x1a626331
 8019cac:	3dd0b461 	.word	0x3dd0b461
 8019cb0:	1a600000 	.word	0x1a600000
 8019cb4:	3dd0b461 	.word	0x3dd0b461
 8019cb8:	2e037073 	.word	0x2e037073
 8019cbc:	3ba3198a 	.word	0x3ba3198a
 8019cc0:	6dc9c883 	.word	0x6dc9c883
 8019cc4:	3fe45f30 	.word	0x3fe45f30
 8019cc8:	2e000000 	.word	0x2e000000
 8019ccc:	3ba3198a 	.word	0x3ba3198a
 8019cd0:	252049c1 	.word	0x252049c1
 8019cd4:	397b839a 	.word	0x397b839a
 8019cd8:	3fe921fb 	.word	0x3fe921fb
 8019cdc:	4002d97b 	.word	0x4002d97b
 8019ce0:	3ff921fb 	.word	0x3ff921fb
 8019ce4:	413921fb 	.word	0x413921fb
 8019ce8:	3fe00000 	.word	0x3fe00000
 8019cec:	0801b5bc 	.word	0x0801b5bc
 8019cf0:	7fefffff 	.word	0x7fefffff
 8019cf4:	ea4f 5528 	mov.w	r5, r8, asr #20
 8019cf8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8019cfc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8019d00:	4630      	mov	r0, r6
 8019d02:	460f      	mov	r7, r1
 8019d04:	f7e6 ff28 	bl	8000b58 <__aeabi_d2iz>
 8019d08:	f7e6 fc0c 	bl	8000524 <__aeabi_i2d>
 8019d0c:	4602      	mov	r2, r0
 8019d0e:	460b      	mov	r3, r1
 8019d10:	4630      	mov	r0, r6
 8019d12:	4639      	mov	r1, r7
 8019d14:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8019d18:	f7e6 fab6 	bl	8000288 <__aeabi_dsub>
 8019d1c:	2200      	movs	r2, #0
 8019d1e:	4b1f      	ldr	r3, [pc, #124]	; (8019d9c <__ieee754_rem_pio2+0x3dc>)
 8019d20:	f7e6 fc6a 	bl	80005f8 <__aeabi_dmul>
 8019d24:	460f      	mov	r7, r1
 8019d26:	4606      	mov	r6, r0
 8019d28:	f7e6 ff16 	bl	8000b58 <__aeabi_d2iz>
 8019d2c:	f7e6 fbfa 	bl	8000524 <__aeabi_i2d>
 8019d30:	4602      	mov	r2, r0
 8019d32:	460b      	mov	r3, r1
 8019d34:	4630      	mov	r0, r6
 8019d36:	4639      	mov	r1, r7
 8019d38:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8019d3c:	f7e6 faa4 	bl	8000288 <__aeabi_dsub>
 8019d40:	2200      	movs	r2, #0
 8019d42:	4b16      	ldr	r3, [pc, #88]	; (8019d9c <__ieee754_rem_pio2+0x3dc>)
 8019d44:	f7e6 fc58 	bl	80005f8 <__aeabi_dmul>
 8019d48:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8019d4c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8019d50:	f04f 0803 	mov.w	r8, #3
 8019d54:	2600      	movs	r6, #0
 8019d56:	2700      	movs	r7, #0
 8019d58:	4632      	mov	r2, r6
 8019d5a:	463b      	mov	r3, r7
 8019d5c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8019d60:	f108 3aff 	add.w	sl, r8, #4294967295
 8019d64:	f7e6 feb0 	bl	8000ac8 <__aeabi_dcmpeq>
 8019d68:	b9b0      	cbnz	r0, 8019d98 <__ieee754_rem_pio2+0x3d8>
 8019d6a:	4b0d      	ldr	r3, [pc, #52]	; (8019da0 <__ieee754_rem_pio2+0x3e0>)
 8019d6c:	9301      	str	r3, [sp, #4]
 8019d6e:	2302      	movs	r3, #2
 8019d70:	9300      	str	r3, [sp, #0]
 8019d72:	462a      	mov	r2, r5
 8019d74:	4643      	mov	r3, r8
 8019d76:	4621      	mov	r1, r4
 8019d78:	a806      	add	r0, sp, #24
 8019d7a:	f000 f98d 	bl	801a098 <__kernel_rem_pio2>
 8019d7e:	9b04      	ldr	r3, [sp, #16]
 8019d80:	2b00      	cmp	r3, #0
 8019d82:	4605      	mov	r5, r0
 8019d84:	f6bf ae58 	bge.w	8019a38 <__ieee754_rem_pio2+0x78>
 8019d88:	6863      	ldr	r3, [r4, #4]
 8019d8a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8019d8e:	6063      	str	r3, [r4, #4]
 8019d90:	68e3      	ldr	r3, [r4, #12]
 8019d92:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8019d96:	e746      	b.n	8019c26 <__ieee754_rem_pio2+0x266>
 8019d98:	46d0      	mov	r8, sl
 8019d9a:	e7dd      	b.n	8019d58 <__ieee754_rem_pio2+0x398>
 8019d9c:	41700000 	.word	0x41700000
 8019da0:	0801b63c 	.word	0x0801b63c

08019da4 <__ieee754_sqrt>:
 8019da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019da8:	4955      	ldr	r1, [pc, #340]	; (8019f00 <__ieee754_sqrt+0x15c>)
 8019daa:	ec55 4b10 	vmov	r4, r5, d0
 8019dae:	43a9      	bics	r1, r5
 8019db0:	462b      	mov	r3, r5
 8019db2:	462a      	mov	r2, r5
 8019db4:	d112      	bne.n	8019ddc <__ieee754_sqrt+0x38>
 8019db6:	ee10 2a10 	vmov	r2, s0
 8019dba:	ee10 0a10 	vmov	r0, s0
 8019dbe:	4629      	mov	r1, r5
 8019dc0:	f7e6 fc1a 	bl	80005f8 <__aeabi_dmul>
 8019dc4:	4602      	mov	r2, r0
 8019dc6:	460b      	mov	r3, r1
 8019dc8:	4620      	mov	r0, r4
 8019dca:	4629      	mov	r1, r5
 8019dcc:	f7e6 fa5e 	bl	800028c <__adddf3>
 8019dd0:	4604      	mov	r4, r0
 8019dd2:	460d      	mov	r5, r1
 8019dd4:	ec45 4b10 	vmov	d0, r4, r5
 8019dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ddc:	2d00      	cmp	r5, #0
 8019dde:	ee10 0a10 	vmov	r0, s0
 8019de2:	4621      	mov	r1, r4
 8019de4:	dc0f      	bgt.n	8019e06 <__ieee754_sqrt+0x62>
 8019de6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8019dea:	4330      	orrs	r0, r6
 8019dec:	d0f2      	beq.n	8019dd4 <__ieee754_sqrt+0x30>
 8019dee:	b155      	cbz	r5, 8019e06 <__ieee754_sqrt+0x62>
 8019df0:	ee10 2a10 	vmov	r2, s0
 8019df4:	4620      	mov	r0, r4
 8019df6:	4629      	mov	r1, r5
 8019df8:	f7e6 fa46 	bl	8000288 <__aeabi_dsub>
 8019dfc:	4602      	mov	r2, r0
 8019dfe:	460b      	mov	r3, r1
 8019e00:	f7e6 fd24 	bl	800084c <__aeabi_ddiv>
 8019e04:	e7e4      	b.n	8019dd0 <__ieee754_sqrt+0x2c>
 8019e06:	151b      	asrs	r3, r3, #20
 8019e08:	d073      	beq.n	8019ef2 <__ieee754_sqrt+0x14e>
 8019e0a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8019e0e:	07dd      	lsls	r5, r3, #31
 8019e10:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8019e14:	bf48      	it	mi
 8019e16:	0fc8      	lsrmi	r0, r1, #31
 8019e18:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8019e1c:	bf44      	itt	mi
 8019e1e:	0049      	lslmi	r1, r1, #1
 8019e20:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8019e24:	2500      	movs	r5, #0
 8019e26:	1058      	asrs	r0, r3, #1
 8019e28:	0fcb      	lsrs	r3, r1, #31
 8019e2a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8019e2e:	0049      	lsls	r1, r1, #1
 8019e30:	2316      	movs	r3, #22
 8019e32:	462c      	mov	r4, r5
 8019e34:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8019e38:	19a7      	adds	r7, r4, r6
 8019e3a:	4297      	cmp	r7, r2
 8019e3c:	bfde      	ittt	le
 8019e3e:	19bc      	addle	r4, r7, r6
 8019e40:	1bd2      	suble	r2, r2, r7
 8019e42:	19ad      	addle	r5, r5, r6
 8019e44:	0fcf      	lsrs	r7, r1, #31
 8019e46:	3b01      	subs	r3, #1
 8019e48:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8019e4c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8019e50:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8019e54:	d1f0      	bne.n	8019e38 <__ieee754_sqrt+0x94>
 8019e56:	f04f 0c20 	mov.w	ip, #32
 8019e5a:	469e      	mov	lr, r3
 8019e5c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8019e60:	42a2      	cmp	r2, r4
 8019e62:	eb06 070e 	add.w	r7, r6, lr
 8019e66:	dc02      	bgt.n	8019e6e <__ieee754_sqrt+0xca>
 8019e68:	d112      	bne.n	8019e90 <__ieee754_sqrt+0xec>
 8019e6a:	428f      	cmp	r7, r1
 8019e6c:	d810      	bhi.n	8019e90 <__ieee754_sqrt+0xec>
 8019e6e:	2f00      	cmp	r7, #0
 8019e70:	eb07 0e06 	add.w	lr, r7, r6
 8019e74:	da42      	bge.n	8019efc <__ieee754_sqrt+0x158>
 8019e76:	f1be 0f00 	cmp.w	lr, #0
 8019e7a:	db3f      	blt.n	8019efc <__ieee754_sqrt+0x158>
 8019e7c:	f104 0801 	add.w	r8, r4, #1
 8019e80:	1b12      	subs	r2, r2, r4
 8019e82:	428f      	cmp	r7, r1
 8019e84:	bf88      	it	hi
 8019e86:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8019e8a:	1bc9      	subs	r1, r1, r7
 8019e8c:	4433      	add	r3, r6
 8019e8e:	4644      	mov	r4, r8
 8019e90:	0052      	lsls	r2, r2, #1
 8019e92:	f1bc 0c01 	subs.w	ip, ip, #1
 8019e96:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8019e9a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8019e9e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8019ea2:	d1dd      	bne.n	8019e60 <__ieee754_sqrt+0xbc>
 8019ea4:	430a      	orrs	r2, r1
 8019ea6:	d006      	beq.n	8019eb6 <__ieee754_sqrt+0x112>
 8019ea8:	1c5c      	adds	r4, r3, #1
 8019eaa:	bf13      	iteet	ne
 8019eac:	3301      	addne	r3, #1
 8019eae:	3501      	addeq	r5, #1
 8019eb0:	4663      	moveq	r3, ip
 8019eb2:	f023 0301 	bicne.w	r3, r3, #1
 8019eb6:	106a      	asrs	r2, r5, #1
 8019eb8:	085b      	lsrs	r3, r3, #1
 8019eba:	07e9      	lsls	r1, r5, #31
 8019ebc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8019ec0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8019ec4:	bf48      	it	mi
 8019ec6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8019eca:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8019ece:	461c      	mov	r4, r3
 8019ed0:	e780      	b.n	8019dd4 <__ieee754_sqrt+0x30>
 8019ed2:	0aca      	lsrs	r2, r1, #11
 8019ed4:	3815      	subs	r0, #21
 8019ed6:	0549      	lsls	r1, r1, #21
 8019ed8:	2a00      	cmp	r2, #0
 8019eda:	d0fa      	beq.n	8019ed2 <__ieee754_sqrt+0x12e>
 8019edc:	02d6      	lsls	r6, r2, #11
 8019ede:	d50a      	bpl.n	8019ef6 <__ieee754_sqrt+0x152>
 8019ee0:	f1c3 0420 	rsb	r4, r3, #32
 8019ee4:	fa21 f404 	lsr.w	r4, r1, r4
 8019ee8:	1e5d      	subs	r5, r3, #1
 8019eea:	4099      	lsls	r1, r3
 8019eec:	4322      	orrs	r2, r4
 8019eee:	1b43      	subs	r3, r0, r5
 8019ef0:	e78b      	b.n	8019e0a <__ieee754_sqrt+0x66>
 8019ef2:	4618      	mov	r0, r3
 8019ef4:	e7f0      	b.n	8019ed8 <__ieee754_sqrt+0x134>
 8019ef6:	0052      	lsls	r2, r2, #1
 8019ef8:	3301      	adds	r3, #1
 8019efa:	e7ef      	b.n	8019edc <__ieee754_sqrt+0x138>
 8019efc:	46a0      	mov	r8, r4
 8019efe:	e7bf      	b.n	8019e80 <__ieee754_sqrt+0xdc>
 8019f00:	7ff00000 	.word	0x7ff00000
 8019f04:	00000000 	.word	0x00000000

08019f08 <__kernel_cos>:
 8019f08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f0c:	ec59 8b10 	vmov	r8, r9, d0
 8019f10:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8019f14:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8019f18:	ed2d 8b02 	vpush	{d8}
 8019f1c:	eeb0 8a41 	vmov.f32	s16, s2
 8019f20:	eef0 8a61 	vmov.f32	s17, s3
 8019f24:	da07      	bge.n	8019f36 <__kernel_cos+0x2e>
 8019f26:	ee10 0a10 	vmov	r0, s0
 8019f2a:	4649      	mov	r1, r9
 8019f2c:	f7e6 fe14 	bl	8000b58 <__aeabi_d2iz>
 8019f30:	2800      	cmp	r0, #0
 8019f32:	f000 8089 	beq.w	801a048 <__kernel_cos+0x140>
 8019f36:	4642      	mov	r2, r8
 8019f38:	464b      	mov	r3, r9
 8019f3a:	4640      	mov	r0, r8
 8019f3c:	4649      	mov	r1, r9
 8019f3e:	f7e6 fb5b 	bl	80005f8 <__aeabi_dmul>
 8019f42:	2200      	movs	r2, #0
 8019f44:	4b4e      	ldr	r3, [pc, #312]	; (801a080 <__kernel_cos+0x178>)
 8019f46:	4604      	mov	r4, r0
 8019f48:	460d      	mov	r5, r1
 8019f4a:	f7e6 fb55 	bl	80005f8 <__aeabi_dmul>
 8019f4e:	a340      	add	r3, pc, #256	; (adr r3, 801a050 <__kernel_cos+0x148>)
 8019f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f54:	4682      	mov	sl, r0
 8019f56:	468b      	mov	fp, r1
 8019f58:	4620      	mov	r0, r4
 8019f5a:	4629      	mov	r1, r5
 8019f5c:	f7e6 fb4c 	bl	80005f8 <__aeabi_dmul>
 8019f60:	a33d      	add	r3, pc, #244	; (adr r3, 801a058 <__kernel_cos+0x150>)
 8019f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f66:	f7e6 f991 	bl	800028c <__adddf3>
 8019f6a:	4622      	mov	r2, r4
 8019f6c:	462b      	mov	r3, r5
 8019f6e:	f7e6 fb43 	bl	80005f8 <__aeabi_dmul>
 8019f72:	a33b      	add	r3, pc, #236	; (adr r3, 801a060 <__kernel_cos+0x158>)
 8019f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f78:	f7e6 f986 	bl	8000288 <__aeabi_dsub>
 8019f7c:	4622      	mov	r2, r4
 8019f7e:	462b      	mov	r3, r5
 8019f80:	f7e6 fb3a 	bl	80005f8 <__aeabi_dmul>
 8019f84:	a338      	add	r3, pc, #224	; (adr r3, 801a068 <__kernel_cos+0x160>)
 8019f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f8a:	f7e6 f97f 	bl	800028c <__adddf3>
 8019f8e:	4622      	mov	r2, r4
 8019f90:	462b      	mov	r3, r5
 8019f92:	f7e6 fb31 	bl	80005f8 <__aeabi_dmul>
 8019f96:	a336      	add	r3, pc, #216	; (adr r3, 801a070 <__kernel_cos+0x168>)
 8019f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f9c:	f7e6 f974 	bl	8000288 <__aeabi_dsub>
 8019fa0:	4622      	mov	r2, r4
 8019fa2:	462b      	mov	r3, r5
 8019fa4:	f7e6 fb28 	bl	80005f8 <__aeabi_dmul>
 8019fa8:	a333      	add	r3, pc, #204	; (adr r3, 801a078 <__kernel_cos+0x170>)
 8019faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fae:	f7e6 f96d 	bl	800028c <__adddf3>
 8019fb2:	4622      	mov	r2, r4
 8019fb4:	462b      	mov	r3, r5
 8019fb6:	f7e6 fb1f 	bl	80005f8 <__aeabi_dmul>
 8019fba:	4622      	mov	r2, r4
 8019fbc:	462b      	mov	r3, r5
 8019fbe:	f7e6 fb1b 	bl	80005f8 <__aeabi_dmul>
 8019fc2:	ec53 2b18 	vmov	r2, r3, d8
 8019fc6:	4604      	mov	r4, r0
 8019fc8:	460d      	mov	r5, r1
 8019fca:	4640      	mov	r0, r8
 8019fcc:	4649      	mov	r1, r9
 8019fce:	f7e6 fb13 	bl	80005f8 <__aeabi_dmul>
 8019fd2:	460b      	mov	r3, r1
 8019fd4:	4602      	mov	r2, r0
 8019fd6:	4629      	mov	r1, r5
 8019fd8:	4620      	mov	r0, r4
 8019fda:	f7e6 f955 	bl	8000288 <__aeabi_dsub>
 8019fde:	4b29      	ldr	r3, [pc, #164]	; (801a084 <__kernel_cos+0x17c>)
 8019fe0:	429e      	cmp	r6, r3
 8019fe2:	4680      	mov	r8, r0
 8019fe4:	4689      	mov	r9, r1
 8019fe6:	dc11      	bgt.n	801a00c <__kernel_cos+0x104>
 8019fe8:	4602      	mov	r2, r0
 8019fea:	460b      	mov	r3, r1
 8019fec:	4650      	mov	r0, sl
 8019fee:	4659      	mov	r1, fp
 8019ff0:	f7e6 f94a 	bl	8000288 <__aeabi_dsub>
 8019ff4:	460b      	mov	r3, r1
 8019ff6:	4924      	ldr	r1, [pc, #144]	; (801a088 <__kernel_cos+0x180>)
 8019ff8:	4602      	mov	r2, r0
 8019ffa:	2000      	movs	r0, #0
 8019ffc:	f7e6 f944 	bl	8000288 <__aeabi_dsub>
 801a000:	ecbd 8b02 	vpop	{d8}
 801a004:	ec41 0b10 	vmov	d0, r0, r1
 801a008:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a00c:	4b1f      	ldr	r3, [pc, #124]	; (801a08c <__kernel_cos+0x184>)
 801a00e:	491e      	ldr	r1, [pc, #120]	; (801a088 <__kernel_cos+0x180>)
 801a010:	429e      	cmp	r6, r3
 801a012:	bfcc      	ite	gt
 801a014:	4d1e      	ldrgt	r5, [pc, #120]	; (801a090 <__kernel_cos+0x188>)
 801a016:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 801a01a:	2400      	movs	r4, #0
 801a01c:	4622      	mov	r2, r4
 801a01e:	462b      	mov	r3, r5
 801a020:	2000      	movs	r0, #0
 801a022:	f7e6 f931 	bl	8000288 <__aeabi_dsub>
 801a026:	4622      	mov	r2, r4
 801a028:	4606      	mov	r6, r0
 801a02a:	460f      	mov	r7, r1
 801a02c:	462b      	mov	r3, r5
 801a02e:	4650      	mov	r0, sl
 801a030:	4659      	mov	r1, fp
 801a032:	f7e6 f929 	bl	8000288 <__aeabi_dsub>
 801a036:	4642      	mov	r2, r8
 801a038:	464b      	mov	r3, r9
 801a03a:	f7e6 f925 	bl	8000288 <__aeabi_dsub>
 801a03e:	4602      	mov	r2, r0
 801a040:	460b      	mov	r3, r1
 801a042:	4630      	mov	r0, r6
 801a044:	4639      	mov	r1, r7
 801a046:	e7d9      	b.n	8019ffc <__kernel_cos+0xf4>
 801a048:	2000      	movs	r0, #0
 801a04a:	490f      	ldr	r1, [pc, #60]	; (801a088 <__kernel_cos+0x180>)
 801a04c:	e7d8      	b.n	801a000 <__kernel_cos+0xf8>
 801a04e:	bf00      	nop
 801a050:	be8838d4 	.word	0xbe8838d4
 801a054:	bda8fae9 	.word	0xbda8fae9
 801a058:	bdb4b1c4 	.word	0xbdb4b1c4
 801a05c:	3e21ee9e 	.word	0x3e21ee9e
 801a060:	809c52ad 	.word	0x809c52ad
 801a064:	3e927e4f 	.word	0x3e927e4f
 801a068:	19cb1590 	.word	0x19cb1590
 801a06c:	3efa01a0 	.word	0x3efa01a0
 801a070:	16c15177 	.word	0x16c15177
 801a074:	3f56c16c 	.word	0x3f56c16c
 801a078:	5555554c 	.word	0x5555554c
 801a07c:	3fa55555 	.word	0x3fa55555
 801a080:	3fe00000 	.word	0x3fe00000
 801a084:	3fd33332 	.word	0x3fd33332
 801a088:	3ff00000 	.word	0x3ff00000
 801a08c:	3fe90000 	.word	0x3fe90000
 801a090:	3fd20000 	.word	0x3fd20000
 801a094:	00000000 	.word	0x00000000

0801a098 <__kernel_rem_pio2>:
 801a098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a09c:	ed2d 8b02 	vpush	{d8}
 801a0a0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801a0a4:	1ed4      	subs	r4, r2, #3
 801a0a6:	9308      	str	r3, [sp, #32]
 801a0a8:	9101      	str	r1, [sp, #4]
 801a0aa:	4bc5      	ldr	r3, [pc, #788]	; (801a3c0 <__kernel_rem_pio2+0x328>)
 801a0ac:	99a6      	ldr	r1, [sp, #664]	; 0x298
 801a0ae:	9009      	str	r0, [sp, #36]	; 0x24
 801a0b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801a0b4:	9304      	str	r3, [sp, #16]
 801a0b6:	9b08      	ldr	r3, [sp, #32]
 801a0b8:	3b01      	subs	r3, #1
 801a0ba:	9307      	str	r3, [sp, #28]
 801a0bc:	2318      	movs	r3, #24
 801a0be:	fb94 f4f3 	sdiv	r4, r4, r3
 801a0c2:	f06f 0317 	mvn.w	r3, #23
 801a0c6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801a0ca:	fb04 3303 	mla	r3, r4, r3, r3
 801a0ce:	eb03 0a02 	add.w	sl, r3, r2
 801a0d2:	9b04      	ldr	r3, [sp, #16]
 801a0d4:	9a07      	ldr	r2, [sp, #28]
 801a0d6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 801a3b0 <__kernel_rem_pio2+0x318>
 801a0da:	eb03 0802 	add.w	r8, r3, r2
 801a0de:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801a0e0:	1aa7      	subs	r7, r4, r2
 801a0e2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801a0e6:	ae22      	add	r6, sp, #136	; 0x88
 801a0e8:	2500      	movs	r5, #0
 801a0ea:	4545      	cmp	r5, r8
 801a0ec:	dd13      	ble.n	801a116 <__kernel_rem_pio2+0x7e>
 801a0ee:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 801a3b0 <__kernel_rem_pio2+0x318>
 801a0f2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801a0f6:	2600      	movs	r6, #0
 801a0f8:	9b04      	ldr	r3, [sp, #16]
 801a0fa:	429e      	cmp	r6, r3
 801a0fc:	dc32      	bgt.n	801a164 <__kernel_rem_pio2+0xcc>
 801a0fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a100:	9302      	str	r3, [sp, #8]
 801a102:	9b08      	ldr	r3, [sp, #32]
 801a104:	199d      	adds	r5, r3, r6
 801a106:	ab22      	add	r3, sp, #136	; 0x88
 801a108:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801a10c:	9306      	str	r3, [sp, #24]
 801a10e:	ec59 8b18 	vmov	r8, r9, d8
 801a112:	2700      	movs	r7, #0
 801a114:	e01f      	b.n	801a156 <__kernel_rem_pio2+0xbe>
 801a116:	42ef      	cmn	r7, r5
 801a118:	d407      	bmi.n	801a12a <__kernel_rem_pio2+0x92>
 801a11a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801a11e:	f7e6 fa01 	bl	8000524 <__aeabi_i2d>
 801a122:	e8e6 0102 	strd	r0, r1, [r6], #8
 801a126:	3501      	adds	r5, #1
 801a128:	e7df      	b.n	801a0ea <__kernel_rem_pio2+0x52>
 801a12a:	ec51 0b18 	vmov	r0, r1, d8
 801a12e:	e7f8      	b.n	801a122 <__kernel_rem_pio2+0x8a>
 801a130:	9906      	ldr	r1, [sp, #24]
 801a132:	9d02      	ldr	r5, [sp, #8]
 801a134:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 801a138:	9106      	str	r1, [sp, #24]
 801a13a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 801a13e:	9502      	str	r5, [sp, #8]
 801a140:	f7e6 fa5a 	bl	80005f8 <__aeabi_dmul>
 801a144:	4602      	mov	r2, r0
 801a146:	460b      	mov	r3, r1
 801a148:	4640      	mov	r0, r8
 801a14a:	4649      	mov	r1, r9
 801a14c:	f7e6 f89e 	bl	800028c <__adddf3>
 801a150:	3701      	adds	r7, #1
 801a152:	4680      	mov	r8, r0
 801a154:	4689      	mov	r9, r1
 801a156:	9b07      	ldr	r3, [sp, #28]
 801a158:	429f      	cmp	r7, r3
 801a15a:	dde9      	ble.n	801a130 <__kernel_rem_pio2+0x98>
 801a15c:	e8eb 8902 	strd	r8, r9, [fp], #8
 801a160:	3601      	adds	r6, #1
 801a162:	e7c9      	b.n	801a0f8 <__kernel_rem_pio2+0x60>
 801a164:	9b04      	ldr	r3, [sp, #16]
 801a166:	aa0e      	add	r2, sp, #56	; 0x38
 801a168:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a16c:	930c      	str	r3, [sp, #48]	; 0x30
 801a16e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801a170:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801a174:	9c04      	ldr	r4, [sp, #16]
 801a176:	930b      	str	r3, [sp, #44]	; 0x2c
 801a178:	ab9a      	add	r3, sp, #616	; 0x268
 801a17a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 801a17e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a182:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a186:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 801a18a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801a18e:	ab9a      	add	r3, sp, #616	; 0x268
 801a190:	445b      	add	r3, fp
 801a192:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 801a196:	2500      	movs	r5, #0
 801a198:	1b63      	subs	r3, r4, r5
 801a19a:	2b00      	cmp	r3, #0
 801a19c:	dc78      	bgt.n	801a290 <__kernel_rem_pio2+0x1f8>
 801a19e:	4650      	mov	r0, sl
 801a1a0:	ec49 8b10 	vmov	d0, r8, r9
 801a1a4:	f000 fda8 	bl	801acf8 <scalbn>
 801a1a8:	ec57 6b10 	vmov	r6, r7, d0
 801a1ac:	2200      	movs	r2, #0
 801a1ae:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801a1b2:	ee10 0a10 	vmov	r0, s0
 801a1b6:	4639      	mov	r1, r7
 801a1b8:	f7e6 fa1e 	bl	80005f8 <__aeabi_dmul>
 801a1bc:	ec41 0b10 	vmov	d0, r0, r1
 801a1c0:	f000 fd12 	bl	801abe8 <floor>
 801a1c4:	2200      	movs	r2, #0
 801a1c6:	ec51 0b10 	vmov	r0, r1, d0
 801a1ca:	4b7e      	ldr	r3, [pc, #504]	; (801a3c4 <__kernel_rem_pio2+0x32c>)
 801a1cc:	f7e6 fa14 	bl	80005f8 <__aeabi_dmul>
 801a1d0:	4602      	mov	r2, r0
 801a1d2:	460b      	mov	r3, r1
 801a1d4:	4630      	mov	r0, r6
 801a1d6:	4639      	mov	r1, r7
 801a1d8:	f7e6 f856 	bl	8000288 <__aeabi_dsub>
 801a1dc:	460f      	mov	r7, r1
 801a1de:	4606      	mov	r6, r0
 801a1e0:	f7e6 fcba 	bl	8000b58 <__aeabi_d2iz>
 801a1e4:	9006      	str	r0, [sp, #24]
 801a1e6:	f7e6 f99d 	bl	8000524 <__aeabi_i2d>
 801a1ea:	4602      	mov	r2, r0
 801a1ec:	460b      	mov	r3, r1
 801a1ee:	4630      	mov	r0, r6
 801a1f0:	4639      	mov	r1, r7
 801a1f2:	f7e6 f849 	bl	8000288 <__aeabi_dsub>
 801a1f6:	f1ba 0f00 	cmp.w	sl, #0
 801a1fa:	4606      	mov	r6, r0
 801a1fc:	460f      	mov	r7, r1
 801a1fe:	dd6c      	ble.n	801a2da <__kernel_rem_pio2+0x242>
 801a200:	1e62      	subs	r2, r4, #1
 801a202:	ab0e      	add	r3, sp, #56	; 0x38
 801a204:	f1ca 0118 	rsb	r1, sl, #24
 801a208:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801a20c:	9d06      	ldr	r5, [sp, #24]
 801a20e:	fa40 f301 	asr.w	r3, r0, r1
 801a212:	441d      	add	r5, r3
 801a214:	408b      	lsls	r3, r1
 801a216:	1ac0      	subs	r0, r0, r3
 801a218:	ab0e      	add	r3, sp, #56	; 0x38
 801a21a:	9506      	str	r5, [sp, #24]
 801a21c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801a220:	f1ca 0317 	rsb	r3, sl, #23
 801a224:	fa40 f303 	asr.w	r3, r0, r3
 801a228:	9302      	str	r3, [sp, #8]
 801a22a:	9b02      	ldr	r3, [sp, #8]
 801a22c:	2b00      	cmp	r3, #0
 801a22e:	dd62      	ble.n	801a2f6 <__kernel_rem_pio2+0x25e>
 801a230:	9b06      	ldr	r3, [sp, #24]
 801a232:	2200      	movs	r2, #0
 801a234:	3301      	adds	r3, #1
 801a236:	9306      	str	r3, [sp, #24]
 801a238:	4615      	mov	r5, r2
 801a23a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801a23e:	4294      	cmp	r4, r2
 801a240:	f300 8095 	bgt.w	801a36e <__kernel_rem_pio2+0x2d6>
 801a244:	f1ba 0f00 	cmp.w	sl, #0
 801a248:	dd07      	ble.n	801a25a <__kernel_rem_pio2+0x1c2>
 801a24a:	f1ba 0f01 	cmp.w	sl, #1
 801a24e:	f000 80a2 	beq.w	801a396 <__kernel_rem_pio2+0x2fe>
 801a252:	f1ba 0f02 	cmp.w	sl, #2
 801a256:	f000 80c1 	beq.w	801a3dc <__kernel_rem_pio2+0x344>
 801a25a:	9b02      	ldr	r3, [sp, #8]
 801a25c:	2b02      	cmp	r3, #2
 801a25e:	d14a      	bne.n	801a2f6 <__kernel_rem_pio2+0x25e>
 801a260:	4632      	mov	r2, r6
 801a262:	463b      	mov	r3, r7
 801a264:	2000      	movs	r0, #0
 801a266:	4958      	ldr	r1, [pc, #352]	; (801a3c8 <__kernel_rem_pio2+0x330>)
 801a268:	f7e6 f80e 	bl	8000288 <__aeabi_dsub>
 801a26c:	4606      	mov	r6, r0
 801a26e:	460f      	mov	r7, r1
 801a270:	2d00      	cmp	r5, #0
 801a272:	d040      	beq.n	801a2f6 <__kernel_rem_pio2+0x25e>
 801a274:	4650      	mov	r0, sl
 801a276:	ed9f 0b50 	vldr	d0, [pc, #320]	; 801a3b8 <__kernel_rem_pio2+0x320>
 801a27a:	f000 fd3d 	bl	801acf8 <scalbn>
 801a27e:	4630      	mov	r0, r6
 801a280:	4639      	mov	r1, r7
 801a282:	ec53 2b10 	vmov	r2, r3, d0
 801a286:	f7e5 ffff 	bl	8000288 <__aeabi_dsub>
 801a28a:	4606      	mov	r6, r0
 801a28c:	460f      	mov	r7, r1
 801a28e:	e032      	b.n	801a2f6 <__kernel_rem_pio2+0x25e>
 801a290:	2200      	movs	r2, #0
 801a292:	4b4e      	ldr	r3, [pc, #312]	; (801a3cc <__kernel_rem_pio2+0x334>)
 801a294:	4640      	mov	r0, r8
 801a296:	4649      	mov	r1, r9
 801a298:	f7e6 f9ae 	bl	80005f8 <__aeabi_dmul>
 801a29c:	f7e6 fc5c 	bl	8000b58 <__aeabi_d2iz>
 801a2a0:	f7e6 f940 	bl	8000524 <__aeabi_i2d>
 801a2a4:	2200      	movs	r2, #0
 801a2a6:	4b4a      	ldr	r3, [pc, #296]	; (801a3d0 <__kernel_rem_pio2+0x338>)
 801a2a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a2ac:	f7e6 f9a4 	bl	80005f8 <__aeabi_dmul>
 801a2b0:	4602      	mov	r2, r0
 801a2b2:	460b      	mov	r3, r1
 801a2b4:	4640      	mov	r0, r8
 801a2b6:	4649      	mov	r1, r9
 801a2b8:	f7e5 ffe6 	bl	8000288 <__aeabi_dsub>
 801a2bc:	f7e6 fc4c 	bl	8000b58 <__aeabi_d2iz>
 801a2c0:	ab0e      	add	r3, sp, #56	; 0x38
 801a2c2:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 801a2c6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801a2ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a2ce:	f7e5 ffdd 	bl	800028c <__adddf3>
 801a2d2:	3501      	adds	r5, #1
 801a2d4:	4680      	mov	r8, r0
 801a2d6:	4689      	mov	r9, r1
 801a2d8:	e75e      	b.n	801a198 <__kernel_rem_pio2+0x100>
 801a2da:	d105      	bne.n	801a2e8 <__kernel_rem_pio2+0x250>
 801a2dc:	1e63      	subs	r3, r4, #1
 801a2de:	aa0e      	add	r2, sp, #56	; 0x38
 801a2e0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801a2e4:	15c3      	asrs	r3, r0, #23
 801a2e6:	e79f      	b.n	801a228 <__kernel_rem_pio2+0x190>
 801a2e8:	2200      	movs	r2, #0
 801a2ea:	4b3a      	ldr	r3, [pc, #232]	; (801a3d4 <__kernel_rem_pio2+0x33c>)
 801a2ec:	f7e6 fc0a 	bl	8000b04 <__aeabi_dcmpge>
 801a2f0:	2800      	cmp	r0, #0
 801a2f2:	d139      	bne.n	801a368 <__kernel_rem_pio2+0x2d0>
 801a2f4:	9002      	str	r0, [sp, #8]
 801a2f6:	2200      	movs	r2, #0
 801a2f8:	2300      	movs	r3, #0
 801a2fa:	4630      	mov	r0, r6
 801a2fc:	4639      	mov	r1, r7
 801a2fe:	f7e6 fbe3 	bl	8000ac8 <__aeabi_dcmpeq>
 801a302:	2800      	cmp	r0, #0
 801a304:	f000 80c7 	beq.w	801a496 <__kernel_rem_pio2+0x3fe>
 801a308:	1e65      	subs	r5, r4, #1
 801a30a:	462b      	mov	r3, r5
 801a30c:	2200      	movs	r2, #0
 801a30e:	9904      	ldr	r1, [sp, #16]
 801a310:	428b      	cmp	r3, r1
 801a312:	da6a      	bge.n	801a3ea <__kernel_rem_pio2+0x352>
 801a314:	2a00      	cmp	r2, #0
 801a316:	f000 8088 	beq.w	801a42a <__kernel_rem_pio2+0x392>
 801a31a:	ab0e      	add	r3, sp, #56	; 0x38
 801a31c:	f1aa 0a18 	sub.w	sl, sl, #24
 801a320:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801a324:	2b00      	cmp	r3, #0
 801a326:	f000 80b4 	beq.w	801a492 <__kernel_rem_pio2+0x3fa>
 801a32a:	4650      	mov	r0, sl
 801a32c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 801a3b8 <__kernel_rem_pio2+0x320>
 801a330:	f000 fce2 	bl	801acf8 <scalbn>
 801a334:	00ec      	lsls	r4, r5, #3
 801a336:	ab72      	add	r3, sp, #456	; 0x1c8
 801a338:	191e      	adds	r6, r3, r4
 801a33a:	ec59 8b10 	vmov	r8, r9, d0
 801a33e:	f106 0a08 	add.w	sl, r6, #8
 801a342:	462f      	mov	r7, r5
 801a344:	2f00      	cmp	r7, #0
 801a346:	f280 80df 	bge.w	801a508 <__kernel_rem_pio2+0x470>
 801a34a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 801a3b0 <__kernel_rem_pio2+0x318>
 801a34e:	f04f 0a00 	mov.w	sl, #0
 801a352:	eba5 030a 	sub.w	r3, r5, sl
 801a356:	2b00      	cmp	r3, #0
 801a358:	f2c0 810a 	blt.w	801a570 <__kernel_rem_pio2+0x4d8>
 801a35c:	f8df b078 	ldr.w	fp, [pc, #120]	; 801a3d8 <__kernel_rem_pio2+0x340>
 801a360:	ec59 8b18 	vmov	r8, r9, d8
 801a364:	2700      	movs	r7, #0
 801a366:	e0f5      	b.n	801a554 <__kernel_rem_pio2+0x4bc>
 801a368:	2302      	movs	r3, #2
 801a36a:	9302      	str	r3, [sp, #8]
 801a36c:	e760      	b.n	801a230 <__kernel_rem_pio2+0x198>
 801a36e:	ab0e      	add	r3, sp, #56	; 0x38
 801a370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a374:	b94d      	cbnz	r5, 801a38a <__kernel_rem_pio2+0x2f2>
 801a376:	b12b      	cbz	r3, 801a384 <__kernel_rem_pio2+0x2ec>
 801a378:	a80e      	add	r0, sp, #56	; 0x38
 801a37a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801a37e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801a382:	2301      	movs	r3, #1
 801a384:	3201      	adds	r2, #1
 801a386:	461d      	mov	r5, r3
 801a388:	e759      	b.n	801a23e <__kernel_rem_pio2+0x1a6>
 801a38a:	a80e      	add	r0, sp, #56	; 0x38
 801a38c:	1acb      	subs	r3, r1, r3
 801a38e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801a392:	462b      	mov	r3, r5
 801a394:	e7f6      	b.n	801a384 <__kernel_rem_pio2+0x2ec>
 801a396:	1e62      	subs	r2, r4, #1
 801a398:	ab0e      	add	r3, sp, #56	; 0x38
 801a39a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a39e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801a3a2:	a90e      	add	r1, sp, #56	; 0x38
 801a3a4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801a3a8:	e757      	b.n	801a25a <__kernel_rem_pio2+0x1c2>
 801a3aa:	bf00      	nop
 801a3ac:	f3af 8000 	nop.w
	...
 801a3bc:	3ff00000 	.word	0x3ff00000
 801a3c0:	0801b788 	.word	0x0801b788
 801a3c4:	40200000 	.word	0x40200000
 801a3c8:	3ff00000 	.word	0x3ff00000
 801a3cc:	3e700000 	.word	0x3e700000
 801a3d0:	41700000 	.word	0x41700000
 801a3d4:	3fe00000 	.word	0x3fe00000
 801a3d8:	0801b748 	.word	0x0801b748
 801a3dc:	1e62      	subs	r2, r4, #1
 801a3de:	ab0e      	add	r3, sp, #56	; 0x38
 801a3e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a3e4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801a3e8:	e7db      	b.n	801a3a2 <__kernel_rem_pio2+0x30a>
 801a3ea:	a90e      	add	r1, sp, #56	; 0x38
 801a3ec:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801a3f0:	3b01      	subs	r3, #1
 801a3f2:	430a      	orrs	r2, r1
 801a3f4:	e78b      	b.n	801a30e <__kernel_rem_pio2+0x276>
 801a3f6:	3301      	adds	r3, #1
 801a3f8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801a3fc:	2900      	cmp	r1, #0
 801a3fe:	d0fa      	beq.n	801a3f6 <__kernel_rem_pio2+0x35e>
 801a400:	9a08      	ldr	r2, [sp, #32]
 801a402:	4422      	add	r2, r4
 801a404:	00d2      	lsls	r2, r2, #3
 801a406:	a922      	add	r1, sp, #136	; 0x88
 801a408:	18e3      	adds	r3, r4, r3
 801a40a:	9206      	str	r2, [sp, #24]
 801a40c:	440a      	add	r2, r1
 801a40e:	9302      	str	r3, [sp, #8]
 801a410:	f10b 0108 	add.w	r1, fp, #8
 801a414:	f102 0308 	add.w	r3, r2, #8
 801a418:	1c66      	adds	r6, r4, #1
 801a41a:	910a      	str	r1, [sp, #40]	; 0x28
 801a41c:	2500      	movs	r5, #0
 801a41e:	930d      	str	r3, [sp, #52]	; 0x34
 801a420:	9b02      	ldr	r3, [sp, #8]
 801a422:	42b3      	cmp	r3, r6
 801a424:	da04      	bge.n	801a430 <__kernel_rem_pio2+0x398>
 801a426:	461c      	mov	r4, r3
 801a428:	e6a6      	b.n	801a178 <__kernel_rem_pio2+0xe0>
 801a42a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a42c:	2301      	movs	r3, #1
 801a42e:	e7e3      	b.n	801a3f8 <__kernel_rem_pio2+0x360>
 801a430:	9b06      	ldr	r3, [sp, #24]
 801a432:	18ef      	adds	r7, r5, r3
 801a434:	ab22      	add	r3, sp, #136	; 0x88
 801a436:	441f      	add	r7, r3
 801a438:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a43a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801a43e:	f7e6 f871 	bl	8000524 <__aeabi_i2d>
 801a442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a444:	461c      	mov	r4, r3
 801a446:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a448:	e9c7 0100 	strd	r0, r1, [r7]
 801a44c:	eb03 0b05 	add.w	fp, r3, r5
 801a450:	2700      	movs	r7, #0
 801a452:	f04f 0800 	mov.w	r8, #0
 801a456:	f04f 0900 	mov.w	r9, #0
 801a45a:	9b07      	ldr	r3, [sp, #28]
 801a45c:	429f      	cmp	r7, r3
 801a45e:	dd08      	ble.n	801a472 <__kernel_rem_pio2+0x3da>
 801a460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a462:	aa72      	add	r2, sp, #456	; 0x1c8
 801a464:	18eb      	adds	r3, r5, r3
 801a466:	4413      	add	r3, r2
 801a468:	e9c3 8902 	strd	r8, r9, [r3, #8]
 801a46c:	3601      	adds	r6, #1
 801a46e:	3508      	adds	r5, #8
 801a470:	e7d6      	b.n	801a420 <__kernel_rem_pio2+0x388>
 801a472:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801a476:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801a47a:	f7e6 f8bd 	bl	80005f8 <__aeabi_dmul>
 801a47e:	4602      	mov	r2, r0
 801a480:	460b      	mov	r3, r1
 801a482:	4640      	mov	r0, r8
 801a484:	4649      	mov	r1, r9
 801a486:	f7e5 ff01 	bl	800028c <__adddf3>
 801a48a:	3701      	adds	r7, #1
 801a48c:	4680      	mov	r8, r0
 801a48e:	4689      	mov	r9, r1
 801a490:	e7e3      	b.n	801a45a <__kernel_rem_pio2+0x3c2>
 801a492:	3d01      	subs	r5, #1
 801a494:	e741      	b.n	801a31a <__kernel_rem_pio2+0x282>
 801a496:	f1ca 0000 	rsb	r0, sl, #0
 801a49a:	ec47 6b10 	vmov	d0, r6, r7
 801a49e:	f000 fc2b 	bl	801acf8 <scalbn>
 801a4a2:	ec57 6b10 	vmov	r6, r7, d0
 801a4a6:	2200      	movs	r2, #0
 801a4a8:	4b99      	ldr	r3, [pc, #612]	; (801a710 <__kernel_rem_pio2+0x678>)
 801a4aa:	ee10 0a10 	vmov	r0, s0
 801a4ae:	4639      	mov	r1, r7
 801a4b0:	f7e6 fb28 	bl	8000b04 <__aeabi_dcmpge>
 801a4b4:	b1f8      	cbz	r0, 801a4f6 <__kernel_rem_pio2+0x45e>
 801a4b6:	2200      	movs	r2, #0
 801a4b8:	4b96      	ldr	r3, [pc, #600]	; (801a714 <__kernel_rem_pio2+0x67c>)
 801a4ba:	4630      	mov	r0, r6
 801a4bc:	4639      	mov	r1, r7
 801a4be:	f7e6 f89b 	bl	80005f8 <__aeabi_dmul>
 801a4c2:	f7e6 fb49 	bl	8000b58 <__aeabi_d2iz>
 801a4c6:	4680      	mov	r8, r0
 801a4c8:	f7e6 f82c 	bl	8000524 <__aeabi_i2d>
 801a4cc:	2200      	movs	r2, #0
 801a4ce:	4b90      	ldr	r3, [pc, #576]	; (801a710 <__kernel_rem_pio2+0x678>)
 801a4d0:	f7e6 f892 	bl	80005f8 <__aeabi_dmul>
 801a4d4:	460b      	mov	r3, r1
 801a4d6:	4602      	mov	r2, r0
 801a4d8:	4639      	mov	r1, r7
 801a4da:	4630      	mov	r0, r6
 801a4dc:	f7e5 fed4 	bl	8000288 <__aeabi_dsub>
 801a4e0:	f7e6 fb3a 	bl	8000b58 <__aeabi_d2iz>
 801a4e4:	1c65      	adds	r5, r4, #1
 801a4e6:	ab0e      	add	r3, sp, #56	; 0x38
 801a4e8:	f10a 0a18 	add.w	sl, sl, #24
 801a4ec:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801a4f0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801a4f4:	e719      	b.n	801a32a <__kernel_rem_pio2+0x292>
 801a4f6:	4630      	mov	r0, r6
 801a4f8:	4639      	mov	r1, r7
 801a4fa:	f7e6 fb2d 	bl	8000b58 <__aeabi_d2iz>
 801a4fe:	ab0e      	add	r3, sp, #56	; 0x38
 801a500:	4625      	mov	r5, r4
 801a502:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801a506:	e710      	b.n	801a32a <__kernel_rem_pio2+0x292>
 801a508:	ab0e      	add	r3, sp, #56	; 0x38
 801a50a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801a50e:	f7e6 f809 	bl	8000524 <__aeabi_i2d>
 801a512:	4642      	mov	r2, r8
 801a514:	464b      	mov	r3, r9
 801a516:	f7e6 f86f 	bl	80005f8 <__aeabi_dmul>
 801a51a:	2200      	movs	r2, #0
 801a51c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 801a520:	4b7c      	ldr	r3, [pc, #496]	; (801a714 <__kernel_rem_pio2+0x67c>)
 801a522:	4640      	mov	r0, r8
 801a524:	4649      	mov	r1, r9
 801a526:	f7e6 f867 	bl	80005f8 <__aeabi_dmul>
 801a52a:	3f01      	subs	r7, #1
 801a52c:	4680      	mov	r8, r0
 801a52e:	4689      	mov	r9, r1
 801a530:	e708      	b.n	801a344 <__kernel_rem_pio2+0x2ac>
 801a532:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 801a536:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a53a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 801a53e:	f7e6 f85b 	bl	80005f8 <__aeabi_dmul>
 801a542:	4602      	mov	r2, r0
 801a544:	460b      	mov	r3, r1
 801a546:	4640      	mov	r0, r8
 801a548:	4649      	mov	r1, r9
 801a54a:	f7e5 fe9f 	bl	800028c <__adddf3>
 801a54e:	3701      	adds	r7, #1
 801a550:	4680      	mov	r8, r0
 801a552:	4689      	mov	r9, r1
 801a554:	9b04      	ldr	r3, [sp, #16]
 801a556:	429f      	cmp	r7, r3
 801a558:	dc01      	bgt.n	801a55e <__kernel_rem_pio2+0x4c6>
 801a55a:	45ba      	cmp	sl, r7
 801a55c:	dae9      	bge.n	801a532 <__kernel_rem_pio2+0x49a>
 801a55e:	ab4a      	add	r3, sp, #296	; 0x128
 801a560:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801a564:	e9c3 8900 	strd	r8, r9, [r3]
 801a568:	f10a 0a01 	add.w	sl, sl, #1
 801a56c:	3e08      	subs	r6, #8
 801a56e:	e6f0      	b.n	801a352 <__kernel_rem_pio2+0x2ba>
 801a570:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801a572:	2b03      	cmp	r3, #3
 801a574:	d85b      	bhi.n	801a62e <__kernel_rem_pio2+0x596>
 801a576:	e8df f003 	tbb	[pc, r3]
 801a57a:	264a      	.short	0x264a
 801a57c:	0226      	.short	0x0226
 801a57e:	ab9a      	add	r3, sp, #616	; 0x268
 801a580:	441c      	add	r4, r3
 801a582:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801a586:	46a2      	mov	sl, r4
 801a588:	46ab      	mov	fp, r5
 801a58a:	f1bb 0f00 	cmp.w	fp, #0
 801a58e:	dc6c      	bgt.n	801a66a <__kernel_rem_pio2+0x5d2>
 801a590:	46a2      	mov	sl, r4
 801a592:	46ab      	mov	fp, r5
 801a594:	f1bb 0f01 	cmp.w	fp, #1
 801a598:	f300 8086 	bgt.w	801a6a8 <__kernel_rem_pio2+0x610>
 801a59c:	2000      	movs	r0, #0
 801a59e:	2100      	movs	r1, #0
 801a5a0:	2d01      	cmp	r5, #1
 801a5a2:	f300 80a0 	bgt.w	801a6e6 <__kernel_rem_pio2+0x64e>
 801a5a6:	9b02      	ldr	r3, [sp, #8]
 801a5a8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801a5ac:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 801a5b0:	2b00      	cmp	r3, #0
 801a5b2:	f040 809e 	bne.w	801a6f2 <__kernel_rem_pio2+0x65a>
 801a5b6:	9b01      	ldr	r3, [sp, #4]
 801a5b8:	e9c3 7800 	strd	r7, r8, [r3]
 801a5bc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801a5c0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801a5c4:	e033      	b.n	801a62e <__kernel_rem_pio2+0x596>
 801a5c6:	3408      	adds	r4, #8
 801a5c8:	ab4a      	add	r3, sp, #296	; 0x128
 801a5ca:	441c      	add	r4, r3
 801a5cc:	462e      	mov	r6, r5
 801a5ce:	2000      	movs	r0, #0
 801a5d0:	2100      	movs	r1, #0
 801a5d2:	2e00      	cmp	r6, #0
 801a5d4:	da3a      	bge.n	801a64c <__kernel_rem_pio2+0x5b4>
 801a5d6:	9b02      	ldr	r3, [sp, #8]
 801a5d8:	2b00      	cmp	r3, #0
 801a5da:	d03d      	beq.n	801a658 <__kernel_rem_pio2+0x5c0>
 801a5dc:	4602      	mov	r2, r0
 801a5de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a5e2:	9c01      	ldr	r4, [sp, #4]
 801a5e4:	e9c4 2300 	strd	r2, r3, [r4]
 801a5e8:	4602      	mov	r2, r0
 801a5ea:	460b      	mov	r3, r1
 801a5ec:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 801a5f0:	f7e5 fe4a 	bl	8000288 <__aeabi_dsub>
 801a5f4:	ae4c      	add	r6, sp, #304	; 0x130
 801a5f6:	2401      	movs	r4, #1
 801a5f8:	42a5      	cmp	r5, r4
 801a5fa:	da30      	bge.n	801a65e <__kernel_rem_pio2+0x5c6>
 801a5fc:	9b02      	ldr	r3, [sp, #8]
 801a5fe:	b113      	cbz	r3, 801a606 <__kernel_rem_pio2+0x56e>
 801a600:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a604:	4619      	mov	r1, r3
 801a606:	9b01      	ldr	r3, [sp, #4]
 801a608:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801a60c:	e00f      	b.n	801a62e <__kernel_rem_pio2+0x596>
 801a60e:	ab9a      	add	r3, sp, #616	; 0x268
 801a610:	441c      	add	r4, r3
 801a612:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801a616:	2000      	movs	r0, #0
 801a618:	2100      	movs	r1, #0
 801a61a:	2d00      	cmp	r5, #0
 801a61c:	da10      	bge.n	801a640 <__kernel_rem_pio2+0x5a8>
 801a61e:	9b02      	ldr	r3, [sp, #8]
 801a620:	b113      	cbz	r3, 801a628 <__kernel_rem_pio2+0x590>
 801a622:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a626:	4619      	mov	r1, r3
 801a628:	9b01      	ldr	r3, [sp, #4]
 801a62a:	e9c3 0100 	strd	r0, r1, [r3]
 801a62e:	9b06      	ldr	r3, [sp, #24]
 801a630:	f003 0007 	and.w	r0, r3, #7
 801a634:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 801a638:	ecbd 8b02 	vpop	{d8}
 801a63c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a640:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801a644:	f7e5 fe22 	bl	800028c <__adddf3>
 801a648:	3d01      	subs	r5, #1
 801a64a:	e7e6      	b.n	801a61a <__kernel_rem_pio2+0x582>
 801a64c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801a650:	f7e5 fe1c 	bl	800028c <__adddf3>
 801a654:	3e01      	subs	r6, #1
 801a656:	e7bc      	b.n	801a5d2 <__kernel_rem_pio2+0x53a>
 801a658:	4602      	mov	r2, r0
 801a65a:	460b      	mov	r3, r1
 801a65c:	e7c1      	b.n	801a5e2 <__kernel_rem_pio2+0x54a>
 801a65e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801a662:	f7e5 fe13 	bl	800028c <__adddf3>
 801a666:	3401      	adds	r4, #1
 801a668:	e7c6      	b.n	801a5f8 <__kernel_rem_pio2+0x560>
 801a66a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 801a66e:	ed3a 7b02 	vldmdb	sl!, {d7}
 801a672:	4640      	mov	r0, r8
 801a674:	ec53 2b17 	vmov	r2, r3, d7
 801a678:	4649      	mov	r1, r9
 801a67a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801a67e:	f7e5 fe05 	bl	800028c <__adddf3>
 801a682:	4602      	mov	r2, r0
 801a684:	460b      	mov	r3, r1
 801a686:	4606      	mov	r6, r0
 801a688:	460f      	mov	r7, r1
 801a68a:	4640      	mov	r0, r8
 801a68c:	4649      	mov	r1, r9
 801a68e:	f7e5 fdfb 	bl	8000288 <__aeabi_dsub>
 801a692:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a696:	f7e5 fdf9 	bl	800028c <__adddf3>
 801a69a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a69e:	e9ca 0100 	strd	r0, r1, [sl]
 801a6a2:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801a6a6:	e770      	b.n	801a58a <__kernel_rem_pio2+0x4f2>
 801a6a8:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 801a6ac:	ed3a 7b02 	vldmdb	sl!, {d7}
 801a6b0:	4630      	mov	r0, r6
 801a6b2:	ec53 2b17 	vmov	r2, r3, d7
 801a6b6:	4639      	mov	r1, r7
 801a6b8:	ed8d 7b04 	vstr	d7, [sp, #16]
 801a6bc:	f7e5 fde6 	bl	800028c <__adddf3>
 801a6c0:	4602      	mov	r2, r0
 801a6c2:	460b      	mov	r3, r1
 801a6c4:	4680      	mov	r8, r0
 801a6c6:	4689      	mov	r9, r1
 801a6c8:	4630      	mov	r0, r6
 801a6ca:	4639      	mov	r1, r7
 801a6cc:	f7e5 fddc 	bl	8000288 <__aeabi_dsub>
 801a6d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a6d4:	f7e5 fdda 	bl	800028c <__adddf3>
 801a6d8:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a6dc:	e9ca 0100 	strd	r0, r1, [sl]
 801a6e0:	e94a 8902 	strd	r8, r9, [sl, #-8]
 801a6e4:	e756      	b.n	801a594 <__kernel_rem_pio2+0x4fc>
 801a6e6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801a6ea:	f7e5 fdcf 	bl	800028c <__adddf3>
 801a6ee:	3d01      	subs	r5, #1
 801a6f0:	e756      	b.n	801a5a0 <__kernel_rem_pio2+0x508>
 801a6f2:	9b01      	ldr	r3, [sp, #4]
 801a6f4:	9a01      	ldr	r2, [sp, #4]
 801a6f6:	601f      	str	r7, [r3, #0]
 801a6f8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 801a6fc:	605c      	str	r4, [r3, #4]
 801a6fe:	609d      	str	r5, [r3, #8]
 801a700:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801a704:	60d3      	str	r3, [r2, #12]
 801a706:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a70a:	6110      	str	r0, [r2, #16]
 801a70c:	6153      	str	r3, [r2, #20]
 801a70e:	e78e      	b.n	801a62e <__kernel_rem_pio2+0x596>
 801a710:	41700000 	.word	0x41700000
 801a714:	3e700000 	.word	0x3e700000

0801a718 <__kernel_sin>:
 801a718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a71c:	ec55 4b10 	vmov	r4, r5, d0
 801a720:	b085      	sub	sp, #20
 801a722:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801a726:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801a72a:	ed8d 1b00 	vstr	d1, [sp]
 801a72e:	9002      	str	r0, [sp, #8]
 801a730:	da06      	bge.n	801a740 <__kernel_sin+0x28>
 801a732:	ee10 0a10 	vmov	r0, s0
 801a736:	4629      	mov	r1, r5
 801a738:	f7e6 fa0e 	bl	8000b58 <__aeabi_d2iz>
 801a73c:	2800      	cmp	r0, #0
 801a73e:	d051      	beq.n	801a7e4 <__kernel_sin+0xcc>
 801a740:	4622      	mov	r2, r4
 801a742:	462b      	mov	r3, r5
 801a744:	4620      	mov	r0, r4
 801a746:	4629      	mov	r1, r5
 801a748:	f7e5 ff56 	bl	80005f8 <__aeabi_dmul>
 801a74c:	4682      	mov	sl, r0
 801a74e:	468b      	mov	fp, r1
 801a750:	4602      	mov	r2, r0
 801a752:	460b      	mov	r3, r1
 801a754:	4620      	mov	r0, r4
 801a756:	4629      	mov	r1, r5
 801a758:	f7e5 ff4e 	bl	80005f8 <__aeabi_dmul>
 801a75c:	a341      	add	r3, pc, #260	; (adr r3, 801a864 <__kernel_sin+0x14c>)
 801a75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a762:	4680      	mov	r8, r0
 801a764:	4689      	mov	r9, r1
 801a766:	4650      	mov	r0, sl
 801a768:	4659      	mov	r1, fp
 801a76a:	f7e5 ff45 	bl	80005f8 <__aeabi_dmul>
 801a76e:	a33f      	add	r3, pc, #252	; (adr r3, 801a86c <__kernel_sin+0x154>)
 801a770:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a774:	f7e5 fd88 	bl	8000288 <__aeabi_dsub>
 801a778:	4652      	mov	r2, sl
 801a77a:	465b      	mov	r3, fp
 801a77c:	f7e5 ff3c 	bl	80005f8 <__aeabi_dmul>
 801a780:	a33c      	add	r3, pc, #240	; (adr r3, 801a874 <__kernel_sin+0x15c>)
 801a782:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a786:	f7e5 fd81 	bl	800028c <__adddf3>
 801a78a:	4652      	mov	r2, sl
 801a78c:	465b      	mov	r3, fp
 801a78e:	f7e5 ff33 	bl	80005f8 <__aeabi_dmul>
 801a792:	a33a      	add	r3, pc, #232	; (adr r3, 801a87c <__kernel_sin+0x164>)
 801a794:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a798:	f7e5 fd76 	bl	8000288 <__aeabi_dsub>
 801a79c:	4652      	mov	r2, sl
 801a79e:	465b      	mov	r3, fp
 801a7a0:	f7e5 ff2a 	bl	80005f8 <__aeabi_dmul>
 801a7a4:	a337      	add	r3, pc, #220	; (adr r3, 801a884 <__kernel_sin+0x16c>)
 801a7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7aa:	f7e5 fd6f 	bl	800028c <__adddf3>
 801a7ae:	9b02      	ldr	r3, [sp, #8]
 801a7b0:	4606      	mov	r6, r0
 801a7b2:	460f      	mov	r7, r1
 801a7b4:	b9db      	cbnz	r3, 801a7ee <__kernel_sin+0xd6>
 801a7b6:	4602      	mov	r2, r0
 801a7b8:	460b      	mov	r3, r1
 801a7ba:	4650      	mov	r0, sl
 801a7bc:	4659      	mov	r1, fp
 801a7be:	f7e5 ff1b 	bl	80005f8 <__aeabi_dmul>
 801a7c2:	a325      	add	r3, pc, #148	; (adr r3, 801a858 <__kernel_sin+0x140>)
 801a7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7c8:	f7e5 fd5e 	bl	8000288 <__aeabi_dsub>
 801a7cc:	4642      	mov	r2, r8
 801a7ce:	464b      	mov	r3, r9
 801a7d0:	f7e5 ff12 	bl	80005f8 <__aeabi_dmul>
 801a7d4:	4602      	mov	r2, r0
 801a7d6:	460b      	mov	r3, r1
 801a7d8:	4620      	mov	r0, r4
 801a7da:	4629      	mov	r1, r5
 801a7dc:	f7e5 fd56 	bl	800028c <__adddf3>
 801a7e0:	4604      	mov	r4, r0
 801a7e2:	460d      	mov	r5, r1
 801a7e4:	ec45 4b10 	vmov	d0, r4, r5
 801a7e8:	b005      	add	sp, #20
 801a7ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a7ee:	2200      	movs	r2, #0
 801a7f0:	4b1b      	ldr	r3, [pc, #108]	; (801a860 <__kernel_sin+0x148>)
 801a7f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a7f6:	f7e5 feff 	bl	80005f8 <__aeabi_dmul>
 801a7fa:	4632      	mov	r2, r6
 801a7fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a800:	463b      	mov	r3, r7
 801a802:	4640      	mov	r0, r8
 801a804:	4649      	mov	r1, r9
 801a806:	f7e5 fef7 	bl	80005f8 <__aeabi_dmul>
 801a80a:	4602      	mov	r2, r0
 801a80c:	460b      	mov	r3, r1
 801a80e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a812:	f7e5 fd39 	bl	8000288 <__aeabi_dsub>
 801a816:	4652      	mov	r2, sl
 801a818:	465b      	mov	r3, fp
 801a81a:	f7e5 feed 	bl	80005f8 <__aeabi_dmul>
 801a81e:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a822:	f7e5 fd31 	bl	8000288 <__aeabi_dsub>
 801a826:	a30c      	add	r3, pc, #48	; (adr r3, 801a858 <__kernel_sin+0x140>)
 801a828:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a82c:	4606      	mov	r6, r0
 801a82e:	460f      	mov	r7, r1
 801a830:	4640      	mov	r0, r8
 801a832:	4649      	mov	r1, r9
 801a834:	f7e5 fee0 	bl	80005f8 <__aeabi_dmul>
 801a838:	4602      	mov	r2, r0
 801a83a:	460b      	mov	r3, r1
 801a83c:	4630      	mov	r0, r6
 801a83e:	4639      	mov	r1, r7
 801a840:	f7e5 fd24 	bl	800028c <__adddf3>
 801a844:	4602      	mov	r2, r0
 801a846:	460b      	mov	r3, r1
 801a848:	4620      	mov	r0, r4
 801a84a:	4629      	mov	r1, r5
 801a84c:	f7e5 fd1c 	bl	8000288 <__aeabi_dsub>
 801a850:	e7c6      	b.n	801a7e0 <__kernel_sin+0xc8>
 801a852:	bf00      	nop
 801a854:	f3af 8000 	nop.w
 801a858:	55555549 	.word	0x55555549
 801a85c:	3fc55555 	.word	0x3fc55555
 801a860:	3fe00000 	.word	0x3fe00000
 801a864:	5acfd57c 	.word	0x5acfd57c
 801a868:	3de5d93a 	.word	0x3de5d93a
 801a86c:	8a2b9ceb 	.word	0x8a2b9ceb
 801a870:	3e5ae5e6 	.word	0x3e5ae5e6
 801a874:	57b1fe7d 	.word	0x57b1fe7d
 801a878:	3ec71de3 	.word	0x3ec71de3
 801a87c:	19c161d5 	.word	0x19c161d5
 801a880:	3f2a01a0 	.word	0x3f2a01a0
 801a884:	1110f8a6 	.word	0x1110f8a6
 801a888:	3f811111 	.word	0x3f811111
 801a88c:	00000000 	.word	0x00000000

0801a890 <atan>:
 801a890:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a894:	ec55 4b10 	vmov	r4, r5, d0
 801a898:	4bc3      	ldr	r3, [pc, #780]	; (801aba8 <atan+0x318>)
 801a89a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801a89e:	429e      	cmp	r6, r3
 801a8a0:	46ab      	mov	fp, r5
 801a8a2:	dd18      	ble.n	801a8d6 <atan+0x46>
 801a8a4:	4bc1      	ldr	r3, [pc, #772]	; (801abac <atan+0x31c>)
 801a8a6:	429e      	cmp	r6, r3
 801a8a8:	dc01      	bgt.n	801a8ae <atan+0x1e>
 801a8aa:	d109      	bne.n	801a8c0 <atan+0x30>
 801a8ac:	b144      	cbz	r4, 801a8c0 <atan+0x30>
 801a8ae:	4622      	mov	r2, r4
 801a8b0:	462b      	mov	r3, r5
 801a8b2:	4620      	mov	r0, r4
 801a8b4:	4629      	mov	r1, r5
 801a8b6:	f7e5 fce9 	bl	800028c <__adddf3>
 801a8ba:	4604      	mov	r4, r0
 801a8bc:	460d      	mov	r5, r1
 801a8be:	e006      	b.n	801a8ce <atan+0x3e>
 801a8c0:	f1bb 0f00 	cmp.w	fp, #0
 801a8c4:	f340 8131 	ble.w	801ab2a <atan+0x29a>
 801a8c8:	a59b      	add	r5, pc, #620	; (adr r5, 801ab38 <atan+0x2a8>)
 801a8ca:	e9d5 4500 	ldrd	r4, r5, [r5]
 801a8ce:	ec45 4b10 	vmov	d0, r4, r5
 801a8d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a8d6:	4bb6      	ldr	r3, [pc, #728]	; (801abb0 <atan+0x320>)
 801a8d8:	429e      	cmp	r6, r3
 801a8da:	dc14      	bgt.n	801a906 <atan+0x76>
 801a8dc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801a8e0:	429e      	cmp	r6, r3
 801a8e2:	dc0d      	bgt.n	801a900 <atan+0x70>
 801a8e4:	a396      	add	r3, pc, #600	; (adr r3, 801ab40 <atan+0x2b0>)
 801a8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8ea:	ee10 0a10 	vmov	r0, s0
 801a8ee:	4629      	mov	r1, r5
 801a8f0:	f7e5 fccc 	bl	800028c <__adddf3>
 801a8f4:	2200      	movs	r2, #0
 801a8f6:	4baf      	ldr	r3, [pc, #700]	; (801abb4 <atan+0x324>)
 801a8f8:	f7e6 f90e 	bl	8000b18 <__aeabi_dcmpgt>
 801a8fc:	2800      	cmp	r0, #0
 801a8fe:	d1e6      	bne.n	801a8ce <atan+0x3e>
 801a900:	f04f 3aff 	mov.w	sl, #4294967295
 801a904:	e02b      	b.n	801a95e <atan+0xce>
 801a906:	f000 f963 	bl	801abd0 <fabs>
 801a90a:	4bab      	ldr	r3, [pc, #684]	; (801abb8 <atan+0x328>)
 801a90c:	429e      	cmp	r6, r3
 801a90e:	ec55 4b10 	vmov	r4, r5, d0
 801a912:	f300 80bf 	bgt.w	801aa94 <atan+0x204>
 801a916:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801a91a:	429e      	cmp	r6, r3
 801a91c:	f300 80a0 	bgt.w	801aa60 <atan+0x1d0>
 801a920:	ee10 2a10 	vmov	r2, s0
 801a924:	ee10 0a10 	vmov	r0, s0
 801a928:	462b      	mov	r3, r5
 801a92a:	4629      	mov	r1, r5
 801a92c:	f7e5 fcae 	bl	800028c <__adddf3>
 801a930:	2200      	movs	r2, #0
 801a932:	4ba0      	ldr	r3, [pc, #640]	; (801abb4 <atan+0x324>)
 801a934:	f7e5 fca8 	bl	8000288 <__aeabi_dsub>
 801a938:	2200      	movs	r2, #0
 801a93a:	4606      	mov	r6, r0
 801a93c:	460f      	mov	r7, r1
 801a93e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801a942:	4620      	mov	r0, r4
 801a944:	4629      	mov	r1, r5
 801a946:	f7e5 fca1 	bl	800028c <__adddf3>
 801a94a:	4602      	mov	r2, r0
 801a94c:	460b      	mov	r3, r1
 801a94e:	4630      	mov	r0, r6
 801a950:	4639      	mov	r1, r7
 801a952:	f7e5 ff7b 	bl	800084c <__aeabi_ddiv>
 801a956:	f04f 0a00 	mov.w	sl, #0
 801a95a:	4604      	mov	r4, r0
 801a95c:	460d      	mov	r5, r1
 801a95e:	4622      	mov	r2, r4
 801a960:	462b      	mov	r3, r5
 801a962:	4620      	mov	r0, r4
 801a964:	4629      	mov	r1, r5
 801a966:	f7e5 fe47 	bl	80005f8 <__aeabi_dmul>
 801a96a:	4602      	mov	r2, r0
 801a96c:	460b      	mov	r3, r1
 801a96e:	4680      	mov	r8, r0
 801a970:	4689      	mov	r9, r1
 801a972:	f7e5 fe41 	bl	80005f8 <__aeabi_dmul>
 801a976:	a374      	add	r3, pc, #464	; (adr r3, 801ab48 <atan+0x2b8>)
 801a978:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a97c:	4606      	mov	r6, r0
 801a97e:	460f      	mov	r7, r1
 801a980:	f7e5 fe3a 	bl	80005f8 <__aeabi_dmul>
 801a984:	a372      	add	r3, pc, #456	; (adr r3, 801ab50 <atan+0x2c0>)
 801a986:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a98a:	f7e5 fc7f 	bl	800028c <__adddf3>
 801a98e:	4632      	mov	r2, r6
 801a990:	463b      	mov	r3, r7
 801a992:	f7e5 fe31 	bl	80005f8 <__aeabi_dmul>
 801a996:	a370      	add	r3, pc, #448	; (adr r3, 801ab58 <atan+0x2c8>)
 801a998:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a99c:	f7e5 fc76 	bl	800028c <__adddf3>
 801a9a0:	4632      	mov	r2, r6
 801a9a2:	463b      	mov	r3, r7
 801a9a4:	f7e5 fe28 	bl	80005f8 <__aeabi_dmul>
 801a9a8:	a36d      	add	r3, pc, #436	; (adr r3, 801ab60 <atan+0x2d0>)
 801a9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9ae:	f7e5 fc6d 	bl	800028c <__adddf3>
 801a9b2:	4632      	mov	r2, r6
 801a9b4:	463b      	mov	r3, r7
 801a9b6:	f7e5 fe1f 	bl	80005f8 <__aeabi_dmul>
 801a9ba:	a36b      	add	r3, pc, #428	; (adr r3, 801ab68 <atan+0x2d8>)
 801a9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9c0:	f7e5 fc64 	bl	800028c <__adddf3>
 801a9c4:	4632      	mov	r2, r6
 801a9c6:	463b      	mov	r3, r7
 801a9c8:	f7e5 fe16 	bl	80005f8 <__aeabi_dmul>
 801a9cc:	a368      	add	r3, pc, #416	; (adr r3, 801ab70 <atan+0x2e0>)
 801a9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9d2:	f7e5 fc5b 	bl	800028c <__adddf3>
 801a9d6:	4642      	mov	r2, r8
 801a9d8:	464b      	mov	r3, r9
 801a9da:	f7e5 fe0d 	bl	80005f8 <__aeabi_dmul>
 801a9de:	a366      	add	r3, pc, #408	; (adr r3, 801ab78 <atan+0x2e8>)
 801a9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9e4:	4680      	mov	r8, r0
 801a9e6:	4689      	mov	r9, r1
 801a9e8:	4630      	mov	r0, r6
 801a9ea:	4639      	mov	r1, r7
 801a9ec:	f7e5 fe04 	bl	80005f8 <__aeabi_dmul>
 801a9f0:	a363      	add	r3, pc, #396	; (adr r3, 801ab80 <atan+0x2f0>)
 801a9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9f6:	f7e5 fc47 	bl	8000288 <__aeabi_dsub>
 801a9fa:	4632      	mov	r2, r6
 801a9fc:	463b      	mov	r3, r7
 801a9fe:	f7e5 fdfb 	bl	80005f8 <__aeabi_dmul>
 801aa02:	a361      	add	r3, pc, #388	; (adr r3, 801ab88 <atan+0x2f8>)
 801aa04:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa08:	f7e5 fc3e 	bl	8000288 <__aeabi_dsub>
 801aa0c:	4632      	mov	r2, r6
 801aa0e:	463b      	mov	r3, r7
 801aa10:	f7e5 fdf2 	bl	80005f8 <__aeabi_dmul>
 801aa14:	a35e      	add	r3, pc, #376	; (adr r3, 801ab90 <atan+0x300>)
 801aa16:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa1a:	f7e5 fc35 	bl	8000288 <__aeabi_dsub>
 801aa1e:	4632      	mov	r2, r6
 801aa20:	463b      	mov	r3, r7
 801aa22:	f7e5 fde9 	bl	80005f8 <__aeabi_dmul>
 801aa26:	a35c      	add	r3, pc, #368	; (adr r3, 801ab98 <atan+0x308>)
 801aa28:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa2c:	f7e5 fc2c 	bl	8000288 <__aeabi_dsub>
 801aa30:	4632      	mov	r2, r6
 801aa32:	463b      	mov	r3, r7
 801aa34:	f7e5 fde0 	bl	80005f8 <__aeabi_dmul>
 801aa38:	4602      	mov	r2, r0
 801aa3a:	460b      	mov	r3, r1
 801aa3c:	4640      	mov	r0, r8
 801aa3e:	4649      	mov	r1, r9
 801aa40:	f7e5 fc24 	bl	800028c <__adddf3>
 801aa44:	4622      	mov	r2, r4
 801aa46:	462b      	mov	r3, r5
 801aa48:	f7e5 fdd6 	bl	80005f8 <__aeabi_dmul>
 801aa4c:	f1ba 3fff 	cmp.w	sl, #4294967295
 801aa50:	4602      	mov	r2, r0
 801aa52:	460b      	mov	r3, r1
 801aa54:	d14b      	bne.n	801aaee <atan+0x25e>
 801aa56:	4620      	mov	r0, r4
 801aa58:	4629      	mov	r1, r5
 801aa5a:	f7e5 fc15 	bl	8000288 <__aeabi_dsub>
 801aa5e:	e72c      	b.n	801a8ba <atan+0x2a>
 801aa60:	ee10 0a10 	vmov	r0, s0
 801aa64:	2200      	movs	r2, #0
 801aa66:	4b53      	ldr	r3, [pc, #332]	; (801abb4 <atan+0x324>)
 801aa68:	4629      	mov	r1, r5
 801aa6a:	f7e5 fc0d 	bl	8000288 <__aeabi_dsub>
 801aa6e:	2200      	movs	r2, #0
 801aa70:	4606      	mov	r6, r0
 801aa72:	460f      	mov	r7, r1
 801aa74:	4b4f      	ldr	r3, [pc, #316]	; (801abb4 <atan+0x324>)
 801aa76:	4620      	mov	r0, r4
 801aa78:	4629      	mov	r1, r5
 801aa7a:	f7e5 fc07 	bl	800028c <__adddf3>
 801aa7e:	4602      	mov	r2, r0
 801aa80:	460b      	mov	r3, r1
 801aa82:	4630      	mov	r0, r6
 801aa84:	4639      	mov	r1, r7
 801aa86:	f7e5 fee1 	bl	800084c <__aeabi_ddiv>
 801aa8a:	f04f 0a01 	mov.w	sl, #1
 801aa8e:	4604      	mov	r4, r0
 801aa90:	460d      	mov	r5, r1
 801aa92:	e764      	b.n	801a95e <atan+0xce>
 801aa94:	4b49      	ldr	r3, [pc, #292]	; (801abbc <atan+0x32c>)
 801aa96:	429e      	cmp	r6, r3
 801aa98:	dc1d      	bgt.n	801aad6 <atan+0x246>
 801aa9a:	ee10 0a10 	vmov	r0, s0
 801aa9e:	2200      	movs	r2, #0
 801aaa0:	4b47      	ldr	r3, [pc, #284]	; (801abc0 <atan+0x330>)
 801aaa2:	4629      	mov	r1, r5
 801aaa4:	f7e5 fbf0 	bl	8000288 <__aeabi_dsub>
 801aaa8:	2200      	movs	r2, #0
 801aaaa:	4606      	mov	r6, r0
 801aaac:	460f      	mov	r7, r1
 801aaae:	4b44      	ldr	r3, [pc, #272]	; (801abc0 <atan+0x330>)
 801aab0:	4620      	mov	r0, r4
 801aab2:	4629      	mov	r1, r5
 801aab4:	f7e5 fda0 	bl	80005f8 <__aeabi_dmul>
 801aab8:	2200      	movs	r2, #0
 801aaba:	4b3e      	ldr	r3, [pc, #248]	; (801abb4 <atan+0x324>)
 801aabc:	f7e5 fbe6 	bl	800028c <__adddf3>
 801aac0:	4602      	mov	r2, r0
 801aac2:	460b      	mov	r3, r1
 801aac4:	4630      	mov	r0, r6
 801aac6:	4639      	mov	r1, r7
 801aac8:	f7e5 fec0 	bl	800084c <__aeabi_ddiv>
 801aacc:	f04f 0a02 	mov.w	sl, #2
 801aad0:	4604      	mov	r4, r0
 801aad2:	460d      	mov	r5, r1
 801aad4:	e743      	b.n	801a95e <atan+0xce>
 801aad6:	462b      	mov	r3, r5
 801aad8:	ee10 2a10 	vmov	r2, s0
 801aadc:	2000      	movs	r0, #0
 801aade:	4939      	ldr	r1, [pc, #228]	; (801abc4 <atan+0x334>)
 801aae0:	f7e5 feb4 	bl	800084c <__aeabi_ddiv>
 801aae4:	f04f 0a03 	mov.w	sl, #3
 801aae8:	4604      	mov	r4, r0
 801aaea:	460d      	mov	r5, r1
 801aaec:	e737      	b.n	801a95e <atan+0xce>
 801aaee:	4b36      	ldr	r3, [pc, #216]	; (801abc8 <atan+0x338>)
 801aaf0:	4e36      	ldr	r6, [pc, #216]	; (801abcc <atan+0x33c>)
 801aaf2:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 801aaf6:	4456      	add	r6, sl
 801aaf8:	449a      	add	sl, r3
 801aafa:	e9da 2300 	ldrd	r2, r3, [sl]
 801aafe:	f7e5 fbc3 	bl	8000288 <__aeabi_dsub>
 801ab02:	4622      	mov	r2, r4
 801ab04:	462b      	mov	r3, r5
 801ab06:	f7e5 fbbf 	bl	8000288 <__aeabi_dsub>
 801ab0a:	4602      	mov	r2, r0
 801ab0c:	460b      	mov	r3, r1
 801ab0e:	e9d6 0100 	ldrd	r0, r1, [r6]
 801ab12:	f7e5 fbb9 	bl	8000288 <__aeabi_dsub>
 801ab16:	f1bb 0f00 	cmp.w	fp, #0
 801ab1a:	4604      	mov	r4, r0
 801ab1c:	460d      	mov	r5, r1
 801ab1e:	f6bf aed6 	bge.w	801a8ce <atan+0x3e>
 801ab22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ab26:	461d      	mov	r5, r3
 801ab28:	e6d1      	b.n	801a8ce <atan+0x3e>
 801ab2a:	a51d      	add	r5, pc, #116	; (adr r5, 801aba0 <atan+0x310>)
 801ab2c:	e9d5 4500 	ldrd	r4, r5, [r5]
 801ab30:	e6cd      	b.n	801a8ce <atan+0x3e>
 801ab32:	bf00      	nop
 801ab34:	f3af 8000 	nop.w
 801ab38:	54442d18 	.word	0x54442d18
 801ab3c:	3ff921fb 	.word	0x3ff921fb
 801ab40:	8800759c 	.word	0x8800759c
 801ab44:	7e37e43c 	.word	0x7e37e43c
 801ab48:	e322da11 	.word	0xe322da11
 801ab4c:	3f90ad3a 	.word	0x3f90ad3a
 801ab50:	24760deb 	.word	0x24760deb
 801ab54:	3fa97b4b 	.word	0x3fa97b4b
 801ab58:	a0d03d51 	.word	0xa0d03d51
 801ab5c:	3fb10d66 	.word	0x3fb10d66
 801ab60:	c54c206e 	.word	0xc54c206e
 801ab64:	3fb745cd 	.word	0x3fb745cd
 801ab68:	920083ff 	.word	0x920083ff
 801ab6c:	3fc24924 	.word	0x3fc24924
 801ab70:	5555550d 	.word	0x5555550d
 801ab74:	3fd55555 	.word	0x3fd55555
 801ab78:	2c6a6c2f 	.word	0x2c6a6c2f
 801ab7c:	bfa2b444 	.word	0xbfa2b444
 801ab80:	52defd9a 	.word	0x52defd9a
 801ab84:	3fadde2d 	.word	0x3fadde2d
 801ab88:	af749a6d 	.word	0xaf749a6d
 801ab8c:	3fb3b0f2 	.word	0x3fb3b0f2
 801ab90:	fe231671 	.word	0xfe231671
 801ab94:	3fbc71c6 	.word	0x3fbc71c6
 801ab98:	9998ebc4 	.word	0x9998ebc4
 801ab9c:	3fc99999 	.word	0x3fc99999
 801aba0:	54442d18 	.word	0x54442d18
 801aba4:	bff921fb 	.word	0xbff921fb
 801aba8:	440fffff 	.word	0x440fffff
 801abac:	7ff00000 	.word	0x7ff00000
 801abb0:	3fdbffff 	.word	0x3fdbffff
 801abb4:	3ff00000 	.word	0x3ff00000
 801abb8:	3ff2ffff 	.word	0x3ff2ffff
 801abbc:	40037fff 	.word	0x40037fff
 801abc0:	3ff80000 	.word	0x3ff80000
 801abc4:	bff00000 	.word	0xbff00000
 801abc8:	0801b7b8 	.word	0x0801b7b8
 801abcc:	0801b798 	.word	0x0801b798

0801abd0 <fabs>:
 801abd0:	ec51 0b10 	vmov	r0, r1, d0
 801abd4:	ee10 2a10 	vmov	r2, s0
 801abd8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801abdc:	ec43 2b10 	vmov	d0, r2, r3
 801abe0:	4770      	bx	lr
 801abe2:	0000      	movs	r0, r0
 801abe4:	0000      	movs	r0, r0
	...

0801abe8 <floor>:
 801abe8:	ec51 0b10 	vmov	r0, r1, d0
 801abec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801abf0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801abf4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801abf8:	2e13      	cmp	r6, #19
 801abfa:	460c      	mov	r4, r1
 801abfc:	ee10 5a10 	vmov	r5, s0
 801ac00:	4680      	mov	r8, r0
 801ac02:	dc34      	bgt.n	801ac6e <floor+0x86>
 801ac04:	2e00      	cmp	r6, #0
 801ac06:	da16      	bge.n	801ac36 <floor+0x4e>
 801ac08:	a335      	add	r3, pc, #212	; (adr r3, 801ace0 <floor+0xf8>)
 801ac0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac0e:	f7e5 fb3d 	bl	800028c <__adddf3>
 801ac12:	2200      	movs	r2, #0
 801ac14:	2300      	movs	r3, #0
 801ac16:	f7e5 ff7f 	bl	8000b18 <__aeabi_dcmpgt>
 801ac1a:	b148      	cbz	r0, 801ac30 <floor+0x48>
 801ac1c:	2c00      	cmp	r4, #0
 801ac1e:	da59      	bge.n	801acd4 <floor+0xec>
 801ac20:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801ac24:	4a30      	ldr	r2, [pc, #192]	; (801ace8 <floor+0x100>)
 801ac26:	432b      	orrs	r3, r5
 801ac28:	2500      	movs	r5, #0
 801ac2a:	42ab      	cmp	r3, r5
 801ac2c:	bf18      	it	ne
 801ac2e:	4614      	movne	r4, r2
 801ac30:	4621      	mov	r1, r4
 801ac32:	4628      	mov	r0, r5
 801ac34:	e025      	b.n	801ac82 <floor+0x9a>
 801ac36:	4f2d      	ldr	r7, [pc, #180]	; (801acec <floor+0x104>)
 801ac38:	4137      	asrs	r7, r6
 801ac3a:	ea01 0307 	and.w	r3, r1, r7
 801ac3e:	4303      	orrs	r3, r0
 801ac40:	d01f      	beq.n	801ac82 <floor+0x9a>
 801ac42:	a327      	add	r3, pc, #156	; (adr r3, 801ace0 <floor+0xf8>)
 801ac44:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac48:	f7e5 fb20 	bl	800028c <__adddf3>
 801ac4c:	2200      	movs	r2, #0
 801ac4e:	2300      	movs	r3, #0
 801ac50:	f7e5 ff62 	bl	8000b18 <__aeabi_dcmpgt>
 801ac54:	2800      	cmp	r0, #0
 801ac56:	d0eb      	beq.n	801ac30 <floor+0x48>
 801ac58:	2c00      	cmp	r4, #0
 801ac5a:	bfbe      	ittt	lt
 801ac5c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801ac60:	fa43 f606 	asrlt.w	r6, r3, r6
 801ac64:	19a4      	addlt	r4, r4, r6
 801ac66:	ea24 0407 	bic.w	r4, r4, r7
 801ac6a:	2500      	movs	r5, #0
 801ac6c:	e7e0      	b.n	801ac30 <floor+0x48>
 801ac6e:	2e33      	cmp	r6, #51	; 0x33
 801ac70:	dd0b      	ble.n	801ac8a <floor+0xa2>
 801ac72:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801ac76:	d104      	bne.n	801ac82 <floor+0x9a>
 801ac78:	ee10 2a10 	vmov	r2, s0
 801ac7c:	460b      	mov	r3, r1
 801ac7e:	f7e5 fb05 	bl	800028c <__adddf3>
 801ac82:	ec41 0b10 	vmov	d0, r0, r1
 801ac86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ac8a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801ac8e:	f04f 33ff 	mov.w	r3, #4294967295
 801ac92:	fa23 f707 	lsr.w	r7, r3, r7
 801ac96:	4207      	tst	r7, r0
 801ac98:	d0f3      	beq.n	801ac82 <floor+0x9a>
 801ac9a:	a311      	add	r3, pc, #68	; (adr r3, 801ace0 <floor+0xf8>)
 801ac9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aca0:	f7e5 faf4 	bl	800028c <__adddf3>
 801aca4:	2200      	movs	r2, #0
 801aca6:	2300      	movs	r3, #0
 801aca8:	f7e5 ff36 	bl	8000b18 <__aeabi_dcmpgt>
 801acac:	2800      	cmp	r0, #0
 801acae:	d0bf      	beq.n	801ac30 <floor+0x48>
 801acb0:	2c00      	cmp	r4, #0
 801acb2:	da02      	bge.n	801acba <floor+0xd2>
 801acb4:	2e14      	cmp	r6, #20
 801acb6:	d103      	bne.n	801acc0 <floor+0xd8>
 801acb8:	3401      	adds	r4, #1
 801acba:	ea25 0507 	bic.w	r5, r5, r7
 801acbe:	e7b7      	b.n	801ac30 <floor+0x48>
 801acc0:	2301      	movs	r3, #1
 801acc2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801acc6:	fa03 f606 	lsl.w	r6, r3, r6
 801acca:	4435      	add	r5, r6
 801accc:	4545      	cmp	r5, r8
 801acce:	bf38      	it	cc
 801acd0:	18e4      	addcc	r4, r4, r3
 801acd2:	e7f2      	b.n	801acba <floor+0xd2>
 801acd4:	2500      	movs	r5, #0
 801acd6:	462c      	mov	r4, r5
 801acd8:	e7aa      	b.n	801ac30 <floor+0x48>
 801acda:	bf00      	nop
 801acdc:	f3af 8000 	nop.w
 801ace0:	8800759c 	.word	0x8800759c
 801ace4:	7e37e43c 	.word	0x7e37e43c
 801ace8:	bff00000 	.word	0xbff00000
 801acec:	000fffff 	.word	0x000fffff

0801acf0 <matherr>:
 801acf0:	2000      	movs	r0, #0
 801acf2:	4770      	bx	lr
 801acf4:	0000      	movs	r0, r0
	...

0801acf8 <scalbn>:
 801acf8:	b570      	push	{r4, r5, r6, lr}
 801acfa:	ec55 4b10 	vmov	r4, r5, d0
 801acfe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801ad02:	4606      	mov	r6, r0
 801ad04:	462b      	mov	r3, r5
 801ad06:	b9aa      	cbnz	r2, 801ad34 <scalbn+0x3c>
 801ad08:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801ad0c:	4323      	orrs	r3, r4
 801ad0e:	d03b      	beq.n	801ad88 <scalbn+0x90>
 801ad10:	4b31      	ldr	r3, [pc, #196]	; (801add8 <scalbn+0xe0>)
 801ad12:	4629      	mov	r1, r5
 801ad14:	2200      	movs	r2, #0
 801ad16:	ee10 0a10 	vmov	r0, s0
 801ad1a:	f7e5 fc6d 	bl	80005f8 <__aeabi_dmul>
 801ad1e:	4b2f      	ldr	r3, [pc, #188]	; (801addc <scalbn+0xe4>)
 801ad20:	429e      	cmp	r6, r3
 801ad22:	4604      	mov	r4, r0
 801ad24:	460d      	mov	r5, r1
 801ad26:	da12      	bge.n	801ad4e <scalbn+0x56>
 801ad28:	a327      	add	r3, pc, #156	; (adr r3, 801adc8 <scalbn+0xd0>)
 801ad2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad2e:	f7e5 fc63 	bl	80005f8 <__aeabi_dmul>
 801ad32:	e009      	b.n	801ad48 <scalbn+0x50>
 801ad34:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801ad38:	428a      	cmp	r2, r1
 801ad3a:	d10c      	bne.n	801ad56 <scalbn+0x5e>
 801ad3c:	ee10 2a10 	vmov	r2, s0
 801ad40:	4620      	mov	r0, r4
 801ad42:	4629      	mov	r1, r5
 801ad44:	f7e5 faa2 	bl	800028c <__adddf3>
 801ad48:	4604      	mov	r4, r0
 801ad4a:	460d      	mov	r5, r1
 801ad4c:	e01c      	b.n	801ad88 <scalbn+0x90>
 801ad4e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801ad52:	460b      	mov	r3, r1
 801ad54:	3a36      	subs	r2, #54	; 0x36
 801ad56:	4432      	add	r2, r6
 801ad58:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801ad5c:	428a      	cmp	r2, r1
 801ad5e:	dd0b      	ble.n	801ad78 <scalbn+0x80>
 801ad60:	ec45 4b11 	vmov	d1, r4, r5
 801ad64:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 801add0 <scalbn+0xd8>
 801ad68:	f000 f83c 	bl	801ade4 <copysign>
 801ad6c:	a318      	add	r3, pc, #96	; (adr r3, 801add0 <scalbn+0xd8>)
 801ad6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad72:	ec51 0b10 	vmov	r0, r1, d0
 801ad76:	e7da      	b.n	801ad2e <scalbn+0x36>
 801ad78:	2a00      	cmp	r2, #0
 801ad7a:	dd08      	ble.n	801ad8e <scalbn+0x96>
 801ad7c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801ad80:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801ad84:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801ad88:	ec45 4b10 	vmov	d0, r4, r5
 801ad8c:	bd70      	pop	{r4, r5, r6, pc}
 801ad8e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801ad92:	da0d      	bge.n	801adb0 <scalbn+0xb8>
 801ad94:	f24c 3350 	movw	r3, #50000	; 0xc350
 801ad98:	429e      	cmp	r6, r3
 801ad9a:	ec45 4b11 	vmov	d1, r4, r5
 801ad9e:	dce1      	bgt.n	801ad64 <scalbn+0x6c>
 801ada0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 801adc8 <scalbn+0xd0>
 801ada4:	f000 f81e 	bl	801ade4 <copysign>
 801ada8:	a307      	add	r3, pc, #28	; (adr r3, 801adc8 <scalbn+0xd0>)
 801adaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801adae:	e7e0      	b.n	801ad72 <scalbn+0x7a>
 801adb0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801adb4:	3236      	adds	r2, #54	; 0x36
 801adb6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801adba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801adbe:	4620      	mov	r0, r4
 801adc0:	4629      	mov	r1, r5
 801adc2:	2200      	movs	r2, #0
 801adc4:	4b06      	ldr	r3, [pc, #24]	; (801ade0 <scalbn+0xe8>)
 801adc6:	e7b2      	b.n	801ad2e <scalbn+0x36>
 801adc8:	c2f8f359 	.word	0xc2f8f359
 801adcc:	01a56e1f 	.word	0x01a56e1f
 801add0:	8800759c 	.word	0x8800759c
 801add4:	7e37e43c 	.word	0x7e37e43c
 801add8:	43500000 	.word	0x43500000
 801addc:	ffff3cb0 	.word	0xffff3cb0
 801ade0:	3c900000 	.word	0x3c900000

0801ade4 <copysign>:
 801ade4:	ec51 0b10 	vmov	r0, r1, d0
 801ade8:	ee11 0a90 	vmov	r0, s3
 801adec:	ee10 2a10 	vmov	r2, s0
 801adf0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801adf4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801adf8:	ea41 0300 	orr.w	r3, r1, r0
 801adfc:	ec43 2b10 	vmov	d0, r2, r3
 801ae00:	4770      	bx	lr
	...

0801ae04 <_init>:
 801ae04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ae06:	bf00      	nop
 801ae08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ae0a:	bc08      	pop	{r3}
 801ae0c:	469e      	mov	lr, r3
 801ae0e:	4770      	bx	lr

0801ae10 <_fini>:
 801ae10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ae12:	bf00      	nop
 801ae14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ae16:	bc08      	pop	{r3}
 801ae18:	469e      	mov	lr, r3
 801ae1a:	4770      	bx	lr
